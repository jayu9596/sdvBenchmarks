var {:scalar} alloc: int;

var {:scalar} handleState: int;

var {:pointer} SLAM_guard_O_0: int;

var {:scalar} yogi_error: int;

var {:scalar} Mem_T.Buffer__UNICODE_STRING: [int]int;

var {:scalar} Mem_T.CancelRoutine__IRP: [int]int;

var {:scalar} Mem_T.PVOID: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const SerialGlobals: int;

const SerialPhysicalZero: int;

const SerialPhysicalZero_1: int;

const GUID_DEVINTERFACE_COMPORT: int;

const driverDefaults: int;

const sdv_cancelFptr: int;

const SLAM_guard_O_0_init: int;

const SerialPortNameGuid: int;

const SerailPortPerfGuid: int;

const SerialPortPropertiesGuid: int;

const SerialPortHWGuid: int;

const SerialPortCommGuid: int;

const SerialPhysicalZero_2: int;

const KdComPortInUse: int;

const SerialPhysicalZero_3: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_pv1: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_kdpc: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_driver_object: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

procedure {:origName "SerialCommError"} SerialCommError(actual_Dpc: int, actual_DeferredContext: int, actual_SystemContext1: int, actual_SystemContext2: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCommError"} SerialCommError(actual_Dpc: int, actual_DeferredContext: int, actual_SystemContext1: int, actual_SystemContext2: int)
{
  var {:pointer} Tmp_2: int;
  var {:pointer} Tmp_4: int;
  var {:pointer} Extension: int;
  var {:pointer} Dpc: int;
  var {:pointer} DeferredContext: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_1615: int;
  var vslice_dummy_var_1616: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    Dpc := actual_Dpc;
    DeferredContext := actual_DeferredContext;
    call {:si_unique_call 1} Tmp_2 := __HAVOC_malloc(88);
    call {:si_unique_call 2} Tmp_4 := __HAVOC_malloc(72);
    Extension := DeferredContext;
    Tmp_2 := strConst__li2bpl2;
    call {:si_unique_call 3} vslice_dummy_var_1 := SerialDbgPrintEx(2, Tmp_2);
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    havoc vslice_dummy_var_1615;
    call {:si_unique_call 4} SerialKillAllReadsOrWrites(vslice_dummy_var_1615, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension));
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    havoc vslice_dummy_var_1616;
    call {:si_unique_call 5} SerialKillAllReadsOrWrites(vslice_dummy_var_1616, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension));
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 6} SerialDpcEpilogue(Extension, Dpc);
    Tmp_4 := strConst__li2bpl1;
    call {:si_unique_call 7} vslice_dummy_var_2 := SerialDbgPrintEx(2, Tmp_4);
    call {:si_unique_call 8} SLIC_SerialCommError_exit(strConst__li2bpl0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_3: int;

  anon0:
    call {:si_unique_call 9} vslice_dummy_var_3 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt: int, actual_DeviceIsOpened: int, actual_Reopen: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt: int, actual_DeviceIsOpened: int, actual_Reopen: int)
{
  var {:pointer} Tmp_9: int;
  var {:scalar} oldIrql: int;
  var {:pointer} PDevExt: int;
  var {:scalar} DeviceIsOpened: int;
  var {:scalar} Reopen: int;
  var vslice_dummy_var_4: int;

  anon0:
    call {:si_unique_call 10} vslice_dummy_var_4 := __HAVOC_malloc(4);
    PDevExt := actual_PDevExt;
    DeviceIsOpened := actual_DeviceIsOpened;
    Reopen := actual_Reopen;
    call {:si_unique_call 11} Tmp_9 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    call {:si_unique_call 12} sdv_KeAcquireSpinLock(0, Tmp_9);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    havoc oldIrql;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 13} sdv_KeReleaseSpinLock(0, oldIrql);
    return;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_5: int;

  anon0:
    call {:si_unique_call 14} vslice_dummy_var_5 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialFinishSystemPower"} SerialFinishSystemPower(actual_PDevObj: int, actual_PIrp: int, actual_PContext: int) returns (Tmp_12: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialFinishSystemPower"} SerialFinishSystemPower(actual_PDevObj: int, actual_PIrp: int, actual_PContext: int) returns (Tmp_12: int)
{
  var {:pointer} sdv_7: int;
  var {:pointer} pDevExt: int;
  var {:pointer} pContext: int;
  var {:scalar} status: int;
  var {:pointer} pIrpSp: int;
  var {:pointer} Tmp_14: int;
  var {:pointer} PDevObj: int;
  var {:pointer} PIrp: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_1617: int;
  var vslice_dummy_var_1618: int;

  anon0:
    PDevObj := actual_PDevObj;
    PIrp := actual_PIrp;
    call {:si_unique_call 15} Tmp_14 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj != 0;
    assume PDevObj > 0;
    havoc pDevExt;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    havoc status;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status >= 0;
    call {:si_unique_call 16} sdv_7 := ExAllocatePoolWithTag(512, 8, -666022077);
    pContext := sdv_7;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} pContext != 0;
    call {:si_unique_call 17} pIrpSp := sdv_IoGetCurrentIrpStackLocation(PIrp);
    assume {:nonnull} pContext != 0;
    assume pContext > 0;
    assume {:nonnull} pContext != 0;
    assume pContext > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    havoc vslice_dummy_var_1617;
    havoc vslice_dummy_var_1618;
    call {:si_unique_call 18} status := PoRequestPowerIrp(0, vslice_dummy_var_1617, vslice_dummy_var_1618, li2bplFunctionConstant339, 0, 0);
    goto L29;

  L29:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status >= 0;
    goto L31;

  L31:
    Tmp_12 := -1073741802;
    goto L1;

  L1:
    call {:si_unique_call 19} SLIC_SerialFinishSystemPower_exit(strConst__li2bpl0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} 0 > status;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} pContext != 0;
    call {:si_unique_call 20} sdv_ExFreePool(0);
    goto L32;

  L32:
    call {:si_unique_call 21} PoStartNextPowerIrp(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Tmp_14 := strConst__li2bpl3;
    call {:si_unique_call 22} vslice_dummy_var_6 := SerialDbgPrintEx(9, Tmp_14);
    call {:si_unique_call 23} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 24} SerialIRPEpilogue(pDevExt);
    goto L31;

  anon12_Then:
    assume {:partition} pContext == 0;
    goto L32;

  anon14_Then:
    assume {:partition} pContext == 0;
    status := -1073741670;
    goto L29;

  anon13_Then:
    assume {:partition} 0 > status;
    call {:si_unique_call 25} PoStartNextPowerIrp(0);
    Tmp_12 := status;
    goto L1;
}



procedure {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_1: int, actual_PDevExt_1: int, actual_DevPowerState: int) returns (Tmp_15: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_15 == 0 || Tmp_15 == -1073741584 || Tmp_15 == 259 || Tmp_15 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_1: int, actual_PDevExt_1: int, actual_DevPowerState: int) returns (Tmp_15: int)
{
  var {:scalar} powerState: int;
  var {:pointer} Tmp_17: int;
  var {:scalar} gotoPowEvent: int;
  var {:scalar} status_1: int;
  var {:pointer} Tmp_18: int;
  var {:scalar} DevPowerState: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 26} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 27} gotoPowEvent := __HAVOC_malloc(156);
    DevPowerState := actual_DevPowerState;
    call {:si_unique_call 28} Tmp_17 := __HAVOC_malloc(100);
    call {:si_unique_call 29} Tmp_18 := __HAVOC_malloc(120);
    call {:si_unique_call 30} sdv_do_paged_code_check();
    Tmp_17 := strConst__li2bpl4;
    call {:si_unique_call 31} vslice_dummy_var_8 := SerialDbgPrintEx(11, Tmp_17);
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 32} KeInitializeEvent(gotoPowEvent, 1, 0);
    call {:si_unique_call 33} status_1 := PoRequestPowerIrp(0, 2, powerState, li2bplFunctionConstant336, 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_1 == 259;
    call {:si_unique_call 34} vslice_dummy_var_7 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    status_1 := 0;
    goto L21;

  L21:
    Tmp_18 := strConst__li2bpl5;
    call {:si_unique_call 35} vslice_dummy_var_9 := SerialDbgPrintEx(11, Tmp_18);
    Tmp_15 := status_1;
    return;

  anon3_Then:
    assume {:partition} status_1 != 259;
    goto L21;
}



procedure {:origName "SerialWakeCompletion"} SerialWakeCompletion(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD2: int, actual_Context: int, actual_IoStatus: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialWakeCompletion"} SerialWakeCompletion(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD2: int, actual_Context: int, actual_IoStatus: int)
{
  var {:scalar} PowerState_2: int;
  var {:pointer} pDevExt_1: int;
  var {:scalar} powerState_1: int;
  var {:scalar} status_2: int;
  var {:pointer} SD2: int;
  var {:pointer} Context: int;
  var {:pointer} IoStatus: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;

  anon0:
    call {:si_unique_call 36} PowerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 37} vslice_dummy_var_10 := __HAVOC_malloc(4);
    call {:si_unique_call 38} powerState_1 := __HAVOC_malloc(8);
    SD2 := actual_SD2;
    Context := actual_Context;
    IoStatus := actual_IoStatus;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    pDevExt_1 := Context;
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    havoc status_2;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    call {:si_unique_call 39} vslice_dummy_var_11 := PoRequestPowerIrp(0, 2, powerState_1, 0, 0, 0);
    goto L9;

  L9:
    call {:si_unique_call 40} SerialIRPEpilogue(pDevExt_1);
    call {:si_unique_call 41} SLIC_SerialWakeCompletion_exit(strConst__li2bpl0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} 0 > status_2;
    goto L9;
}



procedure {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_21: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_21 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_21: int)
{
  var {:pointer} pDevExt_2: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} Tmp_24: int;
  var {:pointer} Tmp_25: int;
  var {:scalar} status_3: int;
  var {:pointer} PDevObj_3: int;
  var {:pointer} PIrp_1: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;

  anon0:
    PDevObj_3 := actual_PDevObj_3;
    PIrp_1 := actual_PIrp_1;
    call {:si_unique_call 42} Tmp_22 := __HAVOC_malloc(92);
    call {:si_unique_call 43} Tmp_24 := __HAVOC_malloc(84);
    call {:si_unique_call 44} Tmp_25 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_3 != 0;
    assume PDevObj_3 > 0;
    havoc pDevExt_2;
    call {:si_unique_call 45} vslice_dummy_var_12 := sdv_IoGetCurrentIrpStackLocation(PIrp_1);
    call {:si_unique_call 46} sdv_do_paged_code_check();
    Tmp_25 := strConst__li2bpl6;
    call {:si_unique_call 47} vslice_dummy_var_13 := SerialDbgPrintEx(11, Tmp_25);
    Tmp_22 := strConst__li2bpl7;
    call {:si_unique_call 48} vslice_dummy_var_14 := SerialDbgPrintEx(12, Tmp_22);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 49} KeClearEvent(PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_2));
    call {:si_unique_call 50} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_1);
    call {:si_unique_call 51} sdv_IoSetCompletionRoutine(PIrp_1, li2bplFunctionConstant343, 0, 1, 1, 1);
    Tmp_24 := strConst__li2bpl8;
    call {:si_unique_call 52} vslice_dummy_var_15 := SerialDbgPrintEx(12, Tmp_24);
    call {:si_unique_call 53} status_3 := PoCallDriver(0, PIrp_1);
    Tmp_21 := status_3;
    return;
}



procedure {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_4: int, actual_PIrp_2: int) returns (Tmp_26: int);
  modifies alloc, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_4: int, actual_PIrp_2: int) returns (Tmp_26: int)
{
  var {:pointer} Tmp_27: int;
  var {:pointer} Tmp_28: int;
  var {:pointer} Tmp_29: int;
  var {:pointer} pDevExt_3: int;
  var {:pointer} Tmp_30: int;
  var {:scalar} powerState_2: int;
  var {:pointer} Tmp_31: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} pLowerDevObj: int;
  var {:pointer} Tmp_32: int;
  var {:pointer} Tmp_33: int;
  var {:pointer} Tmp_34: int;
  var {:pointer} Tmp_36: int;
  var {:scalar} status_4: int;
  var {:pointer} Tmp_37: int;
  var {:pointer} Tmp_38: int;
  var {:scalar} Tmp_39: int;
  var {:pointer} Tmp_40: int;
  var {:pointer} Tmp_41: int;
  var {:pointer} Tmp_42: int;
  var {:pointer} PDevObj_4: int;
  var {:pointer} PIrp_2: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;

  anon0:
    call {:si_unique_call 54} powerState_2 := __HAVOC_malloc(8);
    PDevObj_4 := actual_PDevObj_4;
    PIrp_2 := actual_PIrp_2;
    call {:si_unique_call 55} Tmp_27 := __HAVOC_malloc(100);
    call {:si_unique_call 56} Tmp_28 := __HAVOC_malloc(72);
    call {:si_unique_call 57} Tmp_29 := __HAVOC_malloc(80);
    call {:si_unique_call 58} Tmp_30 := __HAVOC_malloc(72);
    call {:si_unique_call 59} Tmp_31 := __HAVOC_malloc(124);
    call {:si_unique_call 60} Tmp_32 := __HAVOC_malloc(72);
    call {:si_unique_call 61} Tmp_33 := __HAVOC_malloc(72);
    call {:si_unique_call 62} Tmp_34 := __HAVOC_malloc(28);
    call {:si_unique_call 63} Tmp_36 := __HAVOC_malloc(112);
    call {:si_unique_call 64} Tmp_37 := __HAVOC_malloc(136);
    call {:si_unique_call 65} Tmp_38 := __HAVOC_malloc(104);
    call {:si_unique_call 66} Tmp_40 := __HAVOC_malloc(72);
    call {:si_unique_call 67} Tmp_41 := __HAVOC_malloc(104);
    call {:si_unique_call 68} Tmp_42 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_4 != 0;
    assume PDevObj_4 > 0;
    havoc pDevExt_3;
    call {:si_unique_call 69} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(PIrp_2);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc pLowerDevObj;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 70} sdv_do_paged_code_check();
    call {:si_unique_call 71} status_4 := SerialIRPPrologue(PIrp_2, pDevExt_3);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status_4 != 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} status_4 != 259;
    call {:si_unique_call 72} PoStartNextPowerIrp(0);
    Tmp_28 := strConst__li2bpl3;
    call {:si_unique_call 73} vslice_dummy_var_18 := SerialDbgPrintEx(9, Tmp_28);
    call {:si_unique_call 74} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 75} SerialIRPEpilogue(pDevExt_3);
    goto L26;

  L26:
    Tmp_26 := status_4;
    goto L1;

  L1:
    call {:si_unique_call 76} SLIC_SerialPowerDispatch_exit(strConst__li2bpl0);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon66_Then:
    assume {:partition} status_4 == 259;
    goto L26;

  anon65_Then:
    assume {:partition} status_4 == 0;
    status_4 := 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    Tmp_36 := strConst__li2bpl12;
    call {:si_unique_call 77} vslice_dummy_var_30 := SerialDbgPrintEx(12, Tmp_36);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L57;

  L57:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    havoc status_4;
    call {:si_unique_call 78} PoStartNextPowerIrp(0);
    Tmp_40 := strConst__li2bpl3;
    call {:si_unique_call 79} vslice_dummy_var_31 := SerialDbgPrintEx(9, Tmp_40);
    call {:si_unique_call 80} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 81} SerialIRPEpilogue(pDevExt_3);
    Tmp_26 := status_4;
    goto L1;

  anon70_Then:
    goto L58;

  L58:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    status_4 := 0;
    call {:si_unique_call 82} PoStartNextPowerIrp(0);
    call {:si_unique_call 83} sdv_IoSkipCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 84} Tmp_26 := SerialPoCallDriver(pDevExt_3, pLowerDevObj, PIrp_2);
    goto L1;

  anon69_Then:
    goto L58;

  anon67_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L58;

  anon68_Then:
    goto L57;

  anon82_Then:
    goto L40;

  L40:
    call {:si_unique_call 85} PoStartNextPowerIrp(0);
    call {:si_unique_call 86} sdv_IoSkipCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 87} status_4 := SerialPoCallDriver(pDevExt_3, pLowerDevObj, PIrp_2);
    Tmp_26 := status_4;
    goto L1;

  anon83_Then:
    Tmp_38 := strConst__li2bpl11;
    call {:si_unique_call 88} vslice_dummy_var_22 := SerialDbgPrintEx(12, Tmp_38);
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    Tmp_32 := strConst__li2bpl14;
    call {:si_unique_call 89} vslice_dummy_var_25 := SerialDbgPrintEx(12, Tmp_32);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    Tmp_37 := strConst__li2bpl15;
    call {:si_unique_call 90} vslice_dummy_var_26 := SerialDbgPrintEx(12, Tmp_37);
    status_4 := 0;
    goto L40;

  anon72_Then:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    goto L106;

  L106:
    Tmp_42 := strConst__li2bpl17;
    call {:si_unique_call 91} vslice_dummy_var_28 := SerialDbgPrintEx(12, Tmp_42);
    call {:si_unique_call 92} Tmp_26 := SerialSetPowerD3(PDevObj_4, PIrp_2);
    goto L1;

  anon92_Then:
    goto L40;

  anon93_Then:
    goto L106;

  anon94_Then:
    goto L106;

  anon73_Then:
    Tmp_27 := strConst__li2bpl16;
    call {:si_unique_call 93} vslice_dummy_var_27 := SerialDbgPrintEx(12, Tmp_27);
    call {:si_unique_call 94} Tmp_26 := SerialSetPowerD0(PDevObj_4, PIrp_2);
    goto L1;

  anon85_Then:
    Tmp_29 := strConst__li2bpl13;
    call {:si_unique_call 95} vslice_dummy_var_29 := SerialDbgPrintEx(12, Tmp_29);
    status_4 := 0;
    goto L40;

  anon71_Then:
    Tmp_33 := strConst__li2bpl18;
    call {:si_unique_call 96} vslice_dummy_var_23 := SerialDbgPrintEx(12, Tmp_33);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    status_4 := 0;
    goto L40;

  anon74_Then:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto L128;

  L128:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc Tmp_39;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_34;
    assume {:nonnull} Tmp_34 != 0;
    assume Tmp_34 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  L130:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    call {:si_unique_call 97} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 98} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 99} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant340, 0, 1, 1, 1);
    call {:si_unique_call 100} vslice_dummy_var_16 := PoCallDriver(0, PIrp_2);
    Tmp_26 := 259;
    goto L1;

  anon78_Then:
    goto L131;

  L131:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto L150;

  L150:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto L152;

  L152:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    call {:si_unique_call 101} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 102} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 103} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant340, 0, 1, 1, 1);
    call {:si_unique_call 104} vslice_dummy_var_17 := PoCallDriver(0, PIrp_2);
    Tmp_26 := 259;
    goto L1;

  anon81_Then:
    status_4 := -1073741436;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    call {:si_unique_call 105} PoStartNextPowerIrp(0);
    Tmp_30 := strConst__li2bpl3;
    call {:si_unique_call 106} vslice_dummy_var_24 := SerialDbgPrintEx(9, Tmp_30);
    call {:si_unique_call 107} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 108} SerialIRPEpilogue(pDevExt_3);
    Tmp_26 := status_4;
    goto L1;

  anon79_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto L152;

  anon80_Then:
    goto L150;

  anon77_Then:
    goto L40;

  anon76_Then:
    goto L131;

  anon86_Then:
    status_4 := 0;
    goto L40;

  anon87_Then:
    goto L128;

  anon88_Then:
    goto L128;

  anon89_Then:
    goto L128;

  anon90_Then:
    goto L128;

  anon91_Then:
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  anon75_Then:
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  anon84_Then:
    Tmp_31 := strConst__li2bpl10;
    call {:si_unique_call 109} vslice_dummy_var_21 := SerialDbgPrintEx(12, Tmp_31);
    goto L40;

  anon96_Then:
    Tmp_41 := strConst__li2bpl9;
    call {:si_unique_call 110} vslice_dummy_var_19 := SerialDbgPrintEx(12, Tmp_41);
    call {:si_unique_call 111} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 112} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 113} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant342, 0, 1, 1, 1);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 114} vslice_dummy_var_20 := PoCallDriver(0, PIrp_2);
    Tmp_26 := 259;
    goto L1;
}



procedure {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_2: int) returns (Tmp_43: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_43 == -1073741436 || Tmp_43 == 0 || Tmp_43 == -1073741584 || Tmp_43 == 259 || Tmp_43 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_2: int) returns (Tmp_43: int)
{
  var {:scalar} powerState_3: int;
  var {:pointer} Tmp_44: int;
  var {:scalar} status_5: int;
  var {:pointer} PDevExt_2: int;
  var vslice_dummy_var_32: int;

  anon0:
    call {:si_unique_call 115} powerState_3 := __HAVOC_malloc(8);
    PDevExt_2 := actual_PDevExt_2;
    call {:si_unique_call 116} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_43 := -1073741436;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_43 := -1073741436;
    goto L1;

  anon12_Then:
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 117} Tmp_44 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} Tmp_44 != 0;
    assume Tmp_44 > 0;
    call {:si_unique_call 118} vslice_dummy_var_32 := sdv_InterlockedIncrement(Tmp_44);
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} Tmp_44 != 0;
    assume Tmp_44 > 0;
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    call {:si_unique_call 119} status_5 := PoRequestPowerIrp(0, 0, powerState_3, li2bplFunctionConstant348, 0, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_5 == 259;
    status_5 := 0;
    goto L25;

  L25:
    Tmp_43 := status_5;
    goto L1;

  anon14_Then:
    assume {:partition} status_5 != 259;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_5 < 0;
    call {:si_unique_call 120} SerialIRPEpilogue(PDevExt_2);
    goto L25;

  anon15_Then:
    assume {:partition} 0 <= status_5;
    goto L25;

  anon13_Then:
    Tmp_43 := -1073741436;
    goto L1;
}



procedure {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_3: int)
{
  var {:pointer} pDevState: int;
  var {:pointer} Tmp_48: int;
  var {:pointer} Tmp_50: int;
  var {:pointer} PDevExt_3: int;
  var boogieTmp: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;

  anon0:
    call {:si_unique_call 121} vslice_dummy_var_33 := __HAVOC_malloc(4);
    PDevExt_3 := actual_PDevExt_3;
    call {:si_unique_call 122} Tmp_48 := __HAVOC_malloc(124);
    call {:si_unique_call 123} Tmp_50 := __HAVOC_malloc(128);
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    pDevState := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_3);
    call {:si_unique_call 124} sdv_do_paged_code_check();
    Tmp_50 := strConst__li2bpl19;
    call {:si_unique_call 125} vslice_dummy_var_34 := SerialDbgPrintEx(11, Tmp_50);
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 126} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 127} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 128} boogieTmp := corral_nondet();
    Tmp_48 := strConst__li2bpl20;
    call {:si_unique_call 129} vslice_dummy_var_35 := SerialDbgPrintEx(11, Tmp_48);
    return;
}



procedure {:origName "SerialSystemPowerCompletion"} SerialSystemPowerCompletion(actual_PDevObj_5: int, actual_MinorFunction_1: int, actual_SD1: int, actual_Context_1: int, actual_IoStatus_1: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSystemPowerCompletion"} SerialSystemPowerCompletion(actual_PDevObj_5: int, actual_MinorFunction_1: int, actual_SD1: int, actual_Context_1: int, actual_IoStatus_1: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} SD1: int;
  var {:pointer} Context_1: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;

  anon0:
    call {:si_unique_call 130} PowerState_1 := __HAVOC_malloc(8);
    call {:si_unique_call 131} vslice_dummy_var_36 := __HAVOC_malloc(4);
    SD1 := actual_SD1;
    Context_1 := actual_Context_1;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Context_1 != 0;
    call {:si_unique_call 132} vslice_dummy_var_37 := KeSetEvent(Context_1, 0, 0);
    goto L1;

  L1:
    call {:si_unique_call 133} SLIC_SerialSystemPowerCompletion_exit(strConst__li2bpl0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} Context_1 == 0;
    goto L1;
}



procedure {:origName "SerialSetPowerD0Completion"} SerialSetPowerD0Completion(actual_PDevObj_6: int, actual_PIrp_3: int, actual_Context_2: int) returns (Tmp_54: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_54 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetPowerD0Completion"} SerialSetPowerD0Completion(actual_PDevObj_6: int, actual_PIrp_3: int, actual_Context_2: int) returns (Tmp_54: int)
{
  var {:pointer} SD4: int;
  var {:pointer} pDevExt_4: int;
  var {:scalar} sdv_4: int;
  var {:pointer} pIrpStack_2: int;
  var {:pointer} Tmp_56: int;
  var {:pointer} PDevObj_6: int;
  var {:pointer} PIrp_3: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_1619: int;
  var vslice_dummy_var_1620: int;

  anon0:
    call {:si_unique_call 134} sdv_4 := __HAVOC_malloc(8);
    PDevObj_6 := actual_PDevObj_6;
    PIrp_3 := actual_PIrp_3;
    call {:si_unique_call 135} Tmp_56 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_6 != 0;
    assume PDevObj_6 > 0;
    havoc pDevExt_4;
    call {:si_unique_call 136} pIrpStack_2 := sdv_IoGetCurrentIrpStackLocation(PIrp_3);
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 137} sdv_IoMarkIrpPending(0);
    goto L11;

  L11:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 138} SerialRestoreDeviceState(pDevExt_4);
    goto L16;

  L16:
    assume {:nonnull} pIrpStack_2 != 0;
    assume pIrpStack_2 > 0;
    havoc vslice_dummy_var_1619;
    havoc vslice_dummy_var_1620;
    call {:si_unique_call 139} SD4 := PoSetPowerState(0, vslice_dummy_var_1619, vslice_dummy_var_1620);
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    assume {:nonnull} sdv_4 != 0;
    assume sdv_4 > 0;
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    assume {:nonnull} sdv_4 != 0;
    assume sdv_4 > 0;
    call {:si_unique_call 140} PoStartNextPowerIrp(0);
    Tmp_56 := strConst__li2bpl3;
    call {:si_unique_call 141} vslice_dummy_var_38 := SerialDbgPrintEx(9, Tmp_56);
    call {:si_unique_call 142} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 143} SerialIRPEpilogue(pDevExt_4);
    Tmp_54 := -1073741802;
    call {:si_unique_call 144} SLIC_SerialSetPowerD0Completion_exit(strConst__li2bpl0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    goto L16;

  anon7_Then:
    goto L11;
}



procedure {:origName "SerialWaitWakeCompletion"} SerialWaitWakeCompletion(actual_PDevObj_7: int, actual_PIrp_4: int, actual_Context_3: int) returns (Tmp_57: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_57 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialWaitWakeCompletion"} SerialWaitWakeCompletion(actual_PDevObj_7: int, actual_PIrp_4: int, actual_Context_3: int) returns (Tmp_57: int)
{
  var {:pointer} pDevExt_5: int;
  var {:pointer} PDevObj_7: int;

  anon0:
    PDevObj_7 := actual_PDevObj_7;
    assume {:nonnull} PDevObj_7 != 0;
    assume PDevObj_7 > 0;
    havoc pDevExt_5;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    call {:si_unique_call 145} PoStartNextPowerIrp(0);
    call {:si_unique_call 146} SerialIRPEpilogue(pDevExt_5);
    Tmp_57 := 0;
    call {:si_unique_call 147} SLIC_SerialWaitWakeCompletion_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_59: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_59 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_59: int)
{
  var {:pointer} SD3: int;
  var {:pointer} SD2_1: int;
  var {:scalar} charTime: int;
  var {:pointer} pDevExt_6: int;
  var {:pointer} Tmp_61: int;
  var {:scalar} sdv_2: int;
  var {:pointer} pIrpStack_3: int;
  var {:scalar} sdv_3: int;
  var {:pointer} PDevObj_8: int;
  var {:pointer} PIrp_5: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_1621: int;
  var vslice_dummy_var_1622: int;
  var vslice_dummy_var_1623: int;

  anon0:
    call {:si_unique_call 148} charTime := __HAVOC_malloc(20);
    call {:si_unique_call 149} sdv_2 := __HAVOC_malloc(8);
    call {:si_unique_call 150} sdv_3 := __HAVOC_malloc(20);
    PDevObj_8 := actual_PDevObj_8;
    PIrp_5 := actual_PIrp_5;
    call {:si_unique_call 151} Tmp_61 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_8 != 0;
    assume PDevObj_8 > 0;
    havoc pDevExt_6;
    call {:si_unique_call 152} pIrpStack_3 := sdv_IoGetCurrentIrpStackLocation(PIrp_5);
    call {:si_unique_call 153} sdv_do_paged_code_check();
    Tmp_61 := strConst__li2bpl21;
    call {:si_unique_call 154} vslice_dummy_var_40 := SerialDbgPrintEx(6, Tmp_61);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 155} vslice_dummy_var_39 := SerialSendWaitWake(pDevExt_6);
    goto L20;

  L20:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    havoc vslice_dummy_var_1621;
    havoc vslice_dummy_var_1622;
    call {:si_unique_call 156} SD2_1 := PoSetPowerState(0, vslice_dummy_var_1621, vslice_dummy_var_1622);
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 157} SetDeviceIsOpened(pDevExt_6, 0, 1);
    call {:si_unique_call 158} SD3 := SerialGetCharTime(pDevExt_6);
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} charTime != 0;
    assume charTime > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    call {:si_unique_call 159} SerialDisableUART(pDevExt_6);
    call {:si_unique_call 160} SerialDrainUART(pDevExt_6, charTime);
    call {:si_unique_call 161} SerialSaveDeviceState(pDevExt_6);
    goto L47;

  L47:
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    call {:si_unique_call 162} PoStartNextPowerIrp(0);
    call {:si_unique_call 163} sdv_IoSkipCurrentIrpStackLocation(PIrp_5);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    havoc vslice_dummy_var_1623;
    call {:si_unique_call 164} Tmp_59 := SerialPoCallDriver(pDevExt_6, vslice_dummy_var_1623, PIrp_5);
    return;

  anon6_Then:
    call {:si_unique_call 165} SetDeviceIsOpened(pDevExt_6, 0, 0);
    goto L47;

  anon5_Then:
    goto L20;
}



procedure {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_4: int)
{
  var {:pointer} pDevState_1: int;
  var {:pointer} Tmp_63: int;
  var {:pointer} Tmp_64: int;
  var {:scalar} S: int;
  var {:pointer} Tmp_76: int;
  var {:dopa} {:scalar} divisor: int;
  var {:pointer} Tmp_82: int;
  var {:pointer} PDevExt_4: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_1624: int;
  var vslice_dummy_var_1625: int;

  anon0:
    call {:si_unique_call 166} S := __HAVOC_malloc(8);
    call {:si_unique_call 167} divisor := __HAVOC_malloc(4);
    call {:si_unique_call 168} vslice_dummy_var_41 := __HAVOC_malloc(4);
    PDevExt_4 := actual_PDevExt_4;
    call {:si_unique_call 169} Tmp_63 := __HAVOC_malloc(128);
    call {:si_unique_call 170} Tmp_76 := __HAVOC_malloc(72);
    call {:si_unique_call 171} Tmp_82 := __HAVOC_malloc(52);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    pDevState_1 := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_4);
    Tmp_63 := strConst__li2bpl24;
    call {:si_unique_call 172} vslice_dummy_var_44 := SerialDbgPrintEx(11, Tmp_63);
    Tmp_82 := strConst__li2bpl22;
    call {:si_unique_call 173} vslice_dummy_var_45 := SerialDbgPrintEx(11, Tmp_82);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    havoc vslice_dummy_var_1624;
    havoc vslice_dummy_var_1625;
    call {:si_unique_call 174} vslice_dummy_var_42 := SerialGetDivisorFromBaud(vslice_dummy_var_1624, vslice_dummy_var_1625, divisor);
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} divisor != 0;
    assume divisor > 0;
    call {:si_unique_call 175} vslice_dummy_var_46 := SerialSetBaud(S);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 176} vslice_dummy_var_47 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L45;

  L45:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L46;

  L46:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 177} vslice_dummy_var_48 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 178} vslice_dummy_var_49 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 179} vslice_dummy_var_50 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_76 := strConst__li2bpl23;
    call {:si_unique_call 180} vslice_dummy_var_51 := SerialDbgPrintEx(12, Tmp_76);
    call {:si_unique_call 181} SetDeviceIsOpened(PDevExt_4, 1, 0);
    assume {:nonnull} pDevState_1 != 0;
    assume pDevState_1 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L1;

  anon13_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 182} vslice_dummy_var_43 := corral_nondet();
    goto L46;

  anon14_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    havoc Tmp_64;
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    goto L46;

  anon12_Then:
    goto L46;

  anon11_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L45;
}



procedure {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject: int, actual_Irp: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject: int, actual_Irp: int)
{
  var {:pointer} Tmp_86: int;
  var {:pointer} Extension_1: int;
  var {:pointer} Tmp_89: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_1626: int;

  anon0:
    call {:si_unique_call 183} vslice_dummy_var_52 := __HAVOC_malloc(4);
    DeviceObject := actual_DeviceObject;
    Irp := actual_Irp;
    call {:si_unique_call 184} Tmp_86 := __HAVOC_malloc(108);
    call {:si_unique_call 185} Tmp_89 := __HAVOC_malloc(84);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc Extension_1;
    Tmp_89 := strConst__li2bpl26;
    call {:si_unique_call 186} vslice_dummy_var_53 := SerialDbgPrintEx(6, Tmp_89);
    Tmp_86 := strConst__li2bpl25;
    call {:si_unique_call 187} vslice_dummy_var_54 := SerialDbgPrintEx(7, Tmp_86);
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    havoc vslice_dummy_var_1626;
    call {:si_unique_call 188} SerialTryToCompleteCurrent#1(Extension_1, li2bplFunctionConstant621, vslice_dummy_var_1626, -1073741536, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1), 0, 0, 0, 0, 0, 2);
    call {:si_unique_call 189} SLIC_SerialCancelWait_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartMask"} SerialStartMask(actual_Extension_2: int) returns (Tmp_90: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartMask"} SerialStartMask(actual_Extension_2: int) returns (Tmp_90: int)
{
  var {:pointer} Tmp_91: int;
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:pointer} Tmp_92: int;
  var {:pointer} Tmp_93: int;
  var {:scalar} FirstStatus: int;
  var {:pointer} Tmp_94: int;
  var {:pointer} Tmp_95: int;
  var {:scalar} SetFirstStatus: int;
  var {:pointer} Tmp_96: int;
  var {:pointer} Tmp_97: int;
  var {:pointer} Tmp_98: int;
  var {:pointer} Tmp_99: int;
  var {:pointer} Tmp_100: int;
  var {:pointer} Tmp_101: int;
  var {:pointer} Tmp_102: int;
  var {:pointer} Tmp_103: int;
  var {:pointer} Tmp_104: int;
  var {:pointer} Tmp_105: int;
  var {:pointer} IrpSp: int;
  var {:scalar} OldIrql: int;
  var {:pointer} Tmp_106: int;
  var {:pointer} NewIrp: int;
  var {:scalar} s_p_e_c_i_a_l_2: int;
  var {:pointer} sdv_83: int;
  var {:pointer} Tmp_107: int;
  var {:pointer} sdv_86: int;
  var {:pointer} Tmp_108: int;
  var {:pointer} Tmp_109: int;
  var {:pointer} Extension_2: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_1627: int;
  var vslice_dummy_var_1628: int;
  var vslice_dummy_var_1629: int;
  var vslice_dummy_var_1630: int;

  anon0:
    call {:si_unique_call 190} NewIrp := __HAVOC_malloc(4);
    Extension_2 := actual_Extension_2;
    call {:si_unique_call 191} Tmp_91 := __HAVOC_malloc(368);
    call {:si_unique_call 192} Tmp_92 := __HAVOC_malloc(148);
    call {:si_unique_call 193} Tmp_93 := __HAVOC_malloc(288);
    call {:si_unique_call 194} Tmp_94 := __HAVOC_malloc(80);
    call {:si_unique_call 195} Tmp_95 := __HAVOC_malloc(120);
    call {:si_unique_call 196} Tmp_96 := __HAVOC_malloc(368);
    call {:si_unique_call 197} Tmp_97 := __HAVOC_malloc(288);
    call {:si_unique_call 198} Tmp_98 := __HAVOC_malloc(368);
    call {:si_unique_call 199} Tmp_100 := __HAVOC_malloc(128);
    call {:si_unique_call 200} Tmp_102 := __HAVOC_malloc(288);
    call {:si_unique_call 201} Tmp_103 := __HAVOC_malloc(288);
    call {:si_unique_call 202} Tmp_104 := __HAVOC_malloc(160);
    call {:si_unique_call 203} Tmp_105 := __HAVOC_malloc(368);
    call {:si_unique_call 204} Tmp_108 := __HAVOC_malloc(284);
    SetFirstStatus := 0;
    Tmp_94 := strConst__li2bpl34;
    call {:si_unique_call 205} vslice_dummy_var_56 := SerialDbgPrintEx(6, Tmp_94);
    goto L11;

  L11:
    call {:si_unique_call 206} Tmp_91, s_p_e_c_i_a_l_1, Tmp_92, Tmp_93, FirstStatus, Tmp_95, SetFirstStatus, Tmp_96, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, Tmp_102, Tmp_103, Tmp_104, Tmp_105, IrpSp, OldIrql, Tmp_106, s_p_e_c_i_a_l_2, sdv_83, Tmp_107, sdv_86, Tmp_108, Tmp_109, vslice_dummy_var_55, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71 := SerialStartMask_loop_L11(Tmp_91, s_p_e_c_i_a_l_1, Tmp_92, Tmp_93, FirstStatus, Tmp_95, SetFirstStatus, Tmp_96, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, Tmp_102, Tmp_103, Tmp_104, Tmp_105, IrpSp, OldIrql, Tmp_106, NewIrp, s_p_e_c_i_a_l_2, sdv_83, Tmp_107, sdv_86, Tmp_108, Tmp_109, Extension_2, vslice_dummy_var_55, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71);
    goto L11_last;

  L11_last:
    Tmp_100 := strConst__li2bpl27;
    call {:si_unique_call 232} vslice_dummy_var_57 := SerialDbgPrintEx(7, Tmp_100);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_1630;
    call {:si_unique_call 233} IrpSp := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1630);
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_95 := strConst__li2bpl28;
    call {:si_unique_call 207} vslice_dummy_var_58 := SerialDbgPrintEx(7, Tmp_95);
    call {:si_unique_call 208} vslice_dummy_var_55 := KeSynchronizeExecution(0, li2bplFunctionConstant618, 0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_106;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L31;

  L31:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 209} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 1, Extension_2);
    Tmp_91 := strConst__li2bpl30;
    call {:si_unique_call 210} vslice_dummy_var_59 := SerialDbgPrintEx(7, Tmp_91);
    goto L37;

  L37:
    assume {:nonnull} NewIrp != 0;
    assume NewIrp > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_90 := FirstStatus;
    return;

  anon21_Then:
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_103 := strConst__li2bpl29;
    call {:si_unique_call 211} vslice_dummy_var_60 := SerialDbgPrintEx(7, Tmp_103);
    FirstStatus := 0;
    SetFirstStatus := 1;
    goto L31;

  anon19_Then:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 212} Tmp_101 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    call {:si_unique_call 213} IoAcquireCancelSpinLock(Tmp_101);
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    havoc OldIrql;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_99;
    assume {:nonnull} Tmp_99 != 0;
    assume Tmp_99 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    Tmp_104 := strConst__li2bpl33;
    call {:si_unique_call 214} vslice_dummy_var_64 := SerialDbgPrintEx(7, Tmp_104);
    call {:si_unique_call 215} IoReleaseCancelSpinLock(OldIrql);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_107;
    assume {:nonnull} Tmp_107 != 0;
    assume Tmp_107 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L64;

  L64:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 216} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 1, Extension_2);
    Tmp_105 := strConst__li2bpl30;
    call {:si_unique_call 217} vslice_dummy_var_65 := SerialDbgPrintEx(7, Tmp_105);
    goto L37;

  anon27_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_102 := strConst__li2bpl29;
    call {:si_unique_call 218} vslice_dummy_var_66 := SerialDbgPrintEx(7, Tmp_102);
    FirstStatus := -1073741536;
    SetFirstStatus := 1;
    goto L64;

  anon26_Then:
    Tmp_92 := strConst__li2bpl32;
    call {:si_unique_call 219} vslice_dummy_var_67 := SerialDbgPrintEx(7, Tmp_92);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L76;

  L76:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_1627;
    call {:si_unique_call 220} sdv_83 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1627);
    assume {:nonnull} sdv_83 != 0;
    assume sdv_83 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_83)))] := 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_1628;
    call {:si_unique_call 221} vslice_dummy_var_68 := sdv_IoSetCancelRoutine(vslice_dummy_var_1628, li2bplFunctionConstant619);
    s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_1629;
    call {:si_unique_call 222} sdv_86 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1629);
    assume {:nonnull} sdv_86 != 0;
    assume sdv_86 > 0;
    s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_86)));
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    call {:si_unique_call 223} vslice_dummy_var_69 := KeSynchronizeExecution(0, li2bplFunctionConstant620, 0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 224} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 0, Extension_2, OldIrql);
    Tmp_96 := strConst__li2bpl30;
    call {:si_unique_call 225} vslice_dummy_var_70 := SerialDbgPrintEx(7, Tmp_96);
    goto L37;

  anon23_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_97 := strConst__li2bpl29;
    call {:si_unique_call 226} vslice_dummy_var_71 := SerialDbgPrintEx(7, Tmp_97);
    FirstStatus := 259;
    SetFirstStatus := 1;
    call {:si_unique_call 227} sdv_IoMarkIrpPending(0);
    goto L76;

  anon22_Then:
    goto L41;

  L41:
    Tmp_108 := strConst__li2bpl31;
    call {:si_unique_call 228} vslice_dummy_var_61 := SerialDbgPrintEx(7, Tmp_108);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_109;
    assume {:nonnull} Tmp_109 != 0;
    assume Tmp_109 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L112;

  L112:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 229} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 1, Extension_2);
    Tmp_98 := strConst__li2bpl30;
    call {:si_unique_call 230} vslice_dummy_var_62 := SerialDbgPrintEx(7, Tmp_98);
    goto L37;

  anon25_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_93 := strConst__li2bpl29;
    call {:si_unique_call 231} vslice_dummy_var_63 := SerialDbgPrintEx(7, Tmp_93);
    FirstStatus := -1073741811;
    SetFirstStatus := 1;
    goto L112;

  anon20_Then:
    goto L41;
}



procedure {:origName "SerialCompleteWait"} SerialCompleteWait(actual_Dpc_1: int, actual_DeferredContext_1: int, actual_SystemContext1_1: int, actual_SystemContext2_1: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCompleteWait"} SerialCompleteWait(actual_Dpc_1: int, actual_DeferredContext_1: int, actual_SystemContext1_1: int, actual_SystemContext2_1: int)
{
  var {:pointer} Tmp_111: int;
  var {:scalar} OldIrql_1: int;
  var {:pointer} Tmp_112: int;
  var {:pointer} Extension_3: int;
  var {:pointer} Tmp_113: int;
  var {:pointer} Tmp_114: int;
  var {:pointer} Tmp_115: int;
  var {:pointer} Dpc_1: int;
  var {:pointer} DeferredContext_1: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;

  anon0:
    call {:si_unique_call 234} vslice_dummy_var_72 := __HAVOC_malloc(4);
    Dpc_1 := actual_Dpc_1;
    DeferredContext_1 := actual_DeferredContext_1;
    call {:si_unique_call 235} Tmp_112 := __HAVOC_malloc(92);
    call {:si_unique_call 236} Tmp_113 := __HAVOC_malloc(84);
    call {:si_unique_call 237} Tmp_114 := __HAVOC_malloc(100);
    call {:si_unique_call 238} Tmp_115 := __HAVOC_malloc(112);
    Extension_3 := DeferredContext_1;
    Tmp_114 := strConst__li2bpl38;
    call {:si_unique_call 239} vslice_dummy_var_73 := SerialDbgPrintEx(2, Tmp_114);
    Tmp_112 := strConst__li2bpl35;
    call {:si_unique_call 240} vslice_dummy_var_74 := SerialDbgPrintEx(6, Tmp_112);
    call {:si_unique_call 241} Tmp_111 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    call {:si_unique_call 242} IoAcquireCancelSpinLock(Tmp_111);
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    havoc OldIrql_1;
    Tmp_115 := strConst__li2bpl36;
    call {:si_unique_call 243} vslice_dummy_var_75 := SerialDbgPrintEx(7, Tmp_115);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    call {:si_unique_call 244} SerialTryToCompleteCurrent#1(Extension_3, 0, OldIrql_1, 0, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_3), 0, 0, 0, 0, 0, 1);
    call {:si_unique_call 245} SerialDpcEpilogue(Extension_3, Dpc_1);
    Tmp_113 := strConst__li2bpl37;
    call {:si_unique_call 246} vslice_dummy_var_76 := SerialDbgPrintEx(2, Tmp_113);
    call {:si_unique_call 247} SLIC_SerialCompleteWait_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_77: int;

  anon0:
    call {:si_unique_call 248} vslice_dummy_var_77 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCompleteWrite"} SerialCompleteWrite(actual_Dpc_2: int, actual_DeferredContext_2: int, actual_SystemContext1_2: int, actual_SystemContext2_2: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCompleteWrite"} SerialCompleteWrite(actual_Dpc_2: int, actual_DeferredContext_2: int, actual_SystemContext1_2: int, actual_SystemContext2_2: int)
{
  var {:pointer} Tmp_118: int;
  var {:pointer} Tmp_119: int;
  var {:scalar} OldIrql_2: int;
  var {:pointer} Tmp_120: int;
  var {:pointer} Extension_4: int;
  var {:pointer} Dpc_2: int;
  var {:pointer} DeferredContext_2: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;

  anon0:
    call {:si_unique_call 249} vslice_dummy_var_78 := __HAVOC_malloc(4);
    Dpc_2 := actual_Dpc_2;
    DeferredContext_2 := actual_DeferredContext_2;
    call {:si_unique_call 250} Tmp_118 := __HAVOC_malloc(104);
    call {:si_unique_call 251} Tmp_120 := __HAVOC_malloc(88);
    Extension_4 := DeferredContext_2;
    Tmp_118 := strConst__li2bpl40;
    call {:si_unique_call 252} vslice_dummy_var_79 := SerialDbgPrintEx(2, Tmp_118);
    call {:si_unique_call 253} Tmp_119 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    call {:si_unique_call 254} IoAcquireCancelSpinLock(Tmp_119);
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    havoc OldIrql_2;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 255} SerialTryToCompleteCurrent#1(Extension_4, 0, OldIrql_2, 0, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_4), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_4), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_4), li2bplFunctionConstant569, li2bplFunctionConstant573, 1);
    call {:si_unique_call 256} SerialDpcEpilogue(Extension_4, Dpc_2);
    Tmp_120 := strConst__li2bpl39;
    call {:si_unique_call 257} vslice_dummy_var_80 := SerialDbgPrintEx(2, Tmp_120);
    call {:si_unique_call 258} SLIC_SerialCompleteWrite_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_81: int;

  anon0:
    call {:si_unique_call 259} vslice_dummy_var_81 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_124: int);
  modifies alloc, Mem_T.PVOID, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_124: int)
{
  var {:pointer} Tmp_126: int;
  var {:pointer} Tmp_127: int;
  var {:scalar} sdv_96: int;
  var {:pointer} Tmp_128: int;
  var {:pointer} sdv_98: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} Tmp_130: int;
  var {:pointer} Extension_5: int;
  var {:pointer} Tmp_131: int;
  var {:pointer} Tmp_132: int;
  var {:scalar} status_7: int;
  var {:pointer} Tmp_133: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;

  anon0:
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_1 := actual_Irp_1;
    call {:si_unique_call 260} Tmp_126 := __HAVOC_malloc(72);
    call {:si_unique_call 261} Tmp_127 := __HAVOC_malloc(84);
    call {:si_unique_call 262} Tmp_128 := __HAVOC_malloc(72);
    call {:si_unique_call 263} Tmp_129 := __HAVOC_malloc(84);
    call {:si_unique_call 264} Tmp_130 := __HAVOC_malloc(96);
    call {:si_unique_call 265} Tmp_131 := __HAVOC_malloc(84);
    call {:si_unique_call 266} Tmp_132 := __HAVOC_malloc(84);
    call {:si_unique_call 267} Tmp_133 := __HAVOC_malloc(88);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc Extension_5;
    Tmp_133 := strConst__li2bpl46;
    call {:si_unique_call 268} vslice_dummy_var_82 := SerialDbgPrintEx(2, Tmp_133);
    call {:si_unique_call 269} status_7 := SerialIRPPrologue(Irp_1, Extension_5);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_7 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_7 != 259;
    Tmp_126 := strConst__li2bpl3;
    call {:si_unique_call 270} vslice_dummy_var_83 := SerialDbgPrintEx(9, Tmp_126);
    call {:si_unique_call 271} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 272} SerialIRPEpilogue(Extension_5);
    goto L18;

  L18:
    Tmp_131 := strConst__li2bpl42;
    call {:si_unique_call 273} vslice_dummy_var_84 := SerialDbgPrintEx(2, Tmp_131);
    Tmp_124 := status_7;
    goto L1;

  L1:
    call {:si_unique_call 274} SLIC_SerialWrite_exit(strConst__li2bpl0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} status_7 == 259;
    goto L18;

  anon13_Then:
    assume {:partition} status_7 == 0;
    Tmp_130 := strConst__li2bpl41;
    call {:si_unique_call 275} vslice_dummy_var_85 := SerialDbgPrintEx(9, Tmp_130);
    call {:si_unique_call 276} sdv_96 := SerialCompleteIfError(DeviceObject_1, Irp_1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_96 != 0;
    Tmp_132 := strConst__li2bpl43;
    call {:si_unique_call 277} vslice_dummy_var_86 := SerialDbgPrintEx(2, Tmp_132);
    Tmp_124 := -1073741536;
    goto L1;

  anon15_Then:
    assume {:partition} sdv_96 == 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 278} sdv_98 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} sdv_98 != 0;
    assume sdv_98 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 279} status_7 := SerialStartOrQueue(Extension_5, Irp_1, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_5), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5), li2bplFunctionConstant569);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    Tmp_129 := strConst__li2bpl44;
    call {:si_unique_call 280} vslice_dummy_var_87 := SerialDbgPrintEx(2, Tmp_129);
    Tmp_124 := status_7;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    Tmp_128 := strConst__li2bpl3;
    call {:si_unique_call 281} vslice_dummy_var_88 := SerialDbgPrintEx(9, Tmp_128);
    call {:si_unique_call 282} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 283} SerialIRPEpilogue(Extension_5);
    Tmp_127 := strConst__li2bpl45;
    call {:si_unique_call 284} vslice_dummy_var_89 := SerialDbgPrintEx(2, Tmp_127);
    Tmp_124 := 0;
    goto L1;
}



procedure {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_2: int, actual_Irp_2: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_2: int, actual_Irp_2: int)
{
  var {:pointer} Extension_6: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_1631: int;

  anon0:
    call {:si_unique_call 285} vslice_dummy_var_90 := __HAVOC_malloc(4);
    DeviceObject_2 := actual_DeviceObject_2;
    Irp_2 := actual_Irp_2;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    havoc Extension_6;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    havoc vslice_dummy_var_1631;
    call {:si_unique_call 286} SerialTryToCompleteCurrent#1(Extension_6, li2bplFunctionConstant570, vslice_dummy_var_1631, -1073741536, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_6), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_6), 0, 0, 2);
    call {:si_unique_call 287} SLIC_SerialCancelCurrentXoff_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCompleteXoff"} SerialCompleteXoff(actual_Dpc_3: int, actual_DeferredContext_3: int, actual_SystemContext1_3: int, actual_SystemContext2_3: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCompleteXoff"} SerialCompleteXoff(actual_Dpc_3: int, actual_DeferredContext_3: int, actual_SystemContext1_3: int, actual_SystemContext2_3: int)
{
  var {:pointer} Tmp_136: int;
  var {:scalar} OldIrql_3: int;
  var {:pointer} Extension_7: int;
  var {:pointer} Tmp_137: int;
  var {:pointer} Tmp_138: int;
  var {:pointer} Dpc_3: int;
  var {:pointer} DeferredContext_3: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;

  anon0:
    call {:si_unique_call 288} vslice_dummy_var_91 := __HAVOC_malloc(4);
    Dpc_3 := actual_Dpc_3;
    DeferredContext_3 := actual_DeferredContext_3;
    call {:si_unique_call 289} Tmp_136 := __HAVOC_malloc(84);
    call {:si_unique_call 290} Tmp_137 := __HAVOC_malloc(100);
    Extension_7 := DeferredContext_3;
    Tmp_137 := strConst__li2bpl48;
    call {:si_unique_call 291} vslice_dummy_var_92 := SerialDbgPrintEx(2, Tmp_137);
    call {:si_unique_call 292} Tmp_138 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_138 != 0;
    assume Tmp_138 > 0;
    call {:si_unique_call 293} IoAcquireCancelSpinLock(Tmp_138);
    assume {:nonnull} Tmp_138 != 0;
    assume Tmp_138 > 0;
    havoc OldIrql_3;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 294} SerialTryToCompleteCurrent#1(Extension_7, 0, OldIrql_3, 0, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_7), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_7), 0, 0, 1);
    call {:si_unique_call 295} SerialDpcEpilogue(Extension_7, Dpc_3);
    Tmp_136 := strConst__li2bpl47;
    call {:si_unique_call 296} vslice_dummy_var_93 := SerialDbgPrintEx(2, Tmp_136);
    call {:si_unique_call 297} SLIC_SerialCompleteXoff_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_8: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_8: int)
{
  var {:pointer} s_p_e_c_i_a_l_3: int;
  var {:pointer} Tmp_140: int;
  var {:pointer} sdv_108: int;
  var {:scalar} OldIrql_4: int;
  var {:pointer} Irp_3: int;
  var {:scalar} OldIrql_5: int;
  var {:pointer} sdv_111: int;
  var {:pointer} sdv_113: int;
  var {:scalar} CompleteCurrent_1: int;
  var {:scalar} OldIrql_6: int;
  var {:pointer} Tmp_141: int;
  var {:scalar} s_p_e_c_i_a_l_4: int;
  var {:pointer} sdv_115: int;
  var {:pointer} sdv_116: int;
  var {:pointer} sdv_117: int;
  var {:pointer} s_p_e_c_i_a_l_5: int;
  var {:pointer} Tmp_143: int;
  var {:scalar} delta: int;
  var {:pointer} Xc: int;
  var {:scalar} s_p_e_c_i_a_l_6: int;
  var {:pointer} Tmp_144: int;
  var {:pointer} CurrentOpIrp: int;
  var {:pointer} QueueToProcess: int;
  var {:pointer} NewIrp_1: int;
  var {:scalar} CompleteCurrent: int;
  var {:pointer} Extension_8: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_1632: int;
  var vslice_dummy_var_1633: int;
  var vslice_dummy_var_1634: int;
  var vslice_dummy_var_1635: int;

  anon0:
    call {:si_unique_call 298} vslice_dummy_var_94 := __HAVOC_malloc(4);
    call {:si_unique_call 299} delta := __HAVOC_malloc(20);
    CurrentOpIrp := actual_CurrentOpIrp;
    QueueToProcess := actual_QueueToProcess;
    NewIrp_1 := actual_NewIrp_1;
    CompleteCurrent := actual_CompleteCurrent;
    Extension_8 := actual_Extension_8;
    call {:si_unique_call 300} Tmp_140 := __HAVOC_malloc(104);
    call {:si_unique_call 301} Tmp_141 := __HAVOC_malloc(84);
    CompleteCurrent_1 := CompleteCurrent;
    Tmp_140 := strConst__li2bpl50;
    call {:si_unique_call 302} vslice_dummy_var_97 := SerialDbgPrintEx(2, Tmp_140);
    goto L8;

  L8:
    call {:si_unique_call 303} s_p_e_c_i_a_l_3, sdv_108, Irp_3, OldIrql_5, sdv_111, sdv_113, OldIrql_6, s_p_e_c_i_a_l_4, sdv_115, sdv_116, sdv_117, s_p_e_c_i_a_l_5, Tmp_143, Xc, s_p_e_c_i_a_l_6, Tmp_144, CompleteCurrent, vslice_dummy_var_96, vslice_dummy_var_99, vslice_dummy_var_100 := SerialGetNextWrite_loop_L8(s_p_e_c_i_a_l_3, sdv_108, Irp_3, OldIrql_5, sdv_111, sdv_113, CompleteCurrent_1, OldIrql_6, s_p_e_c_i_a_l_4, sdv_115, sdv_116, sdv_117, s_p_e_c_i_a_l_5, Tmp_143, delta, Xc, s_p_e_c_i_a_l_6, Tmp_144, CurrentOpIrp, QueueToProcess, NewIrp_1, CompleteCurrent, Extension_8, vslice_dummy_var_96, vslice_dummy_var_99, vslice_dummy_var_100);
    goto L8_last;

  L8_last:
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc vslice_dummy_var_1635;
    call {:si_unique_call 324} sdv_113 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1635);
    assume {:nonnull} sdv_113 != 0;
    assume sdv_113 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 304} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    call {:si_unique_call 305} IoAcquireCancelSpinLock(Tmp_144);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    havoc OldIrql_6;
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc vslice_dummy_var_1632;
    call {:si_unique_call 306} sdv_117 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1632);
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} sdv_117 != 0;
    assume sdv_117 > 0;
    call {:si_unique_call 307} IoReleaseCancelSpinLock(OldIrql_6);
    goto L26;

  L26:
    call {:si_unique_call 308} SerialGetNextIrp(CurrentOpIrp, QueueToProcess, NewIrp_1, CompleteCurrent, Extension_8);
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 309} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    call {:si_unique_call 310} IoAcquireCancelSpinLock(Tmp_144);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    havoc OldIrql_4;
    call {:si_unique_call 311} vslice_dummy_var_95 := KeSynchronizeExecution(0, li2bplFunctionConstant574, 0);
    call {:si_unique_call 312} IoReleaseCancelSpinLock(OldIrql_4);
    goto L39;

  L39:
    Tmp_141 := strConst__li2bpl49;
    call {:si_unique_call 313} vslice_dummy_var_98 := SerialDbgPrintEx(2, Tmp_141);
    return;

  anon16_Then:
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    havoc vslice_dummy_var_1633;
    call {:si_unique_call 314} sdv_116 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1633);
    assume {:nonnull} sdv_116 != 0;
    assume sdv_116 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L39;

  anon17_Then:
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    havoc Tmp_143;
    assume {:nonnull} Tmp_143 != 0;
    assume Tmp_143 > 0;
    CompleteCurrent := CompleteCurrent_1;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc vslice_dummy_var_1634;
    call {:si_unique_call 315} sdv_115 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1634);
    assume {:nonnull} sdv_115 != 0;
    assume sdv_115 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 316} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    call {:si_unique_call 317} IoAcquireCancelSpinLock(Tmp_144);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    havoc OldIrql_5;
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc Irp_3;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    havoc Xc;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L64;

  L64:
    call {:si_unique_call 318} IoReleaseCancelSpinLock(OldIrql_5);
    goto L26;

  anon21_Then:
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto L64;

  anon19_Then:
    call {:si_unique_call 319} vslice_dummy_var_96 := sdv_IoSetCancelRoutine(Irp_3, li2bplFunctionConstant575);
    s_p_e_c_i_a_l_4 := 2;
    call {:si_unique_call 320} sdv_111 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} sdv_111 != 0;
    assume sdv_111 > 0;
    s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_111)));
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    CompleteCurrent := 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    call {:si_unique_call 321} vslice_dummy_var_99 := KeSynchronizeExecution(0, li2bplFunctionConstant576, 0);
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    assume {:nonnull} delta != 0;
    assume delta > 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    call {:si_unique_call 322} vslice_dummy_var_100 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_8), delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_8), Extension_8);
    s_p_e_c_i_a_l_6 := 4;
    call {:si_unique_call 323} sdv_108 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} sdv_108 != 0;
    assume sdv_108 > 0;
    s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_108)));
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    goto L64;

  anon20_Then:
    goto L64;

  anon18_Then:
    goto L26;
}



procedure {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_3: int, actual_Irp_4: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_3: int, actual_Irp_4: int)
{
  var {:pointer} Extension_10: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_1636: int;

  anon0:
    call {:si_unique_call 325} vslice_dummy_var_101 := __HAVOC_malloc(4);
    DeviceObject_3 := actual_DeviceObject_3;
    Irp_4 := actual_Irp_4;
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc Extension_10;
    assume {:nonnull} Extension_10 != 0;
    assume Extension_10 > 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc vslice_dummy_var_1636;
    call {:si_unique_call 326} SerialTryToCompleteCurrent#1(Extension_10, li2bplFunctionConstant578, vslice_dummy_var_1636, -1073741536, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_10), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_10), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_10), li2bplFunctionConstant569, li2bplFunctionConstant573, 2);
    call {:si_unique_call 327} SLIC_SerialCancelCurrentWrite_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialClose"} SerialClose(actual_DeviceObject_4: int, actual_Irp_5: int) returns (Tmp_155: int);
  modifies alloc, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialClose"} SerialClose(actual_DeviceObject_4: int, actual_Irp_5: int) returns (Tmp_155: int)
{
  var {:pointer} SD1_1: int;
  var {:scalar} flushCount: int;
  var {:pointer} Tmp_156: int;
  var {:pointer} Tmp_157: int;
  var {:scalar} sdv_133: int;
  var {:scalar} sdv_134: int;
  var {:scalar} charTime_1: int;
  var {:scalar} pendingDPCs: int;
  var {:pointer} Tmp_158: int;
  var {:pointer} Tmp_159: int;
  var {:pointer} Tmp_160: int;
  var {:scalar} tenCharDelay: int;
  var {:pointer} Tmp_163: int;
  var {:pointer} Tmp_164: int;
  var {:pointer} Tmp_165: int;
  var {:pointer} Tmp_166: int;
  var {:scalar} sdv_155: int;
  var {:scalar} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:scalar} sdv_158: int;
  var {:scalar} status_8: int;
  var {:pointer} Tmp_170: int;
  var {:scalar} Tmp_171: int;
  var {:pointer} extension: int;
  var {:scalar} sdv_1: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_5: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;

  anon0:
    call {:si_unique_call 328} charTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 329} tenCharDelay := __HAVOC_malloc(20);
    call {:si_unique_call 330} sdv_1 := __HAVOC_malloc(20);
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_5 := actual_Irp_5;
    call {:si_unique_call 331} Tmp_156 := __HAVOC_malloc(80);
    call {:si_unique_call 332} Tmp_157 := __HAVOC_malloc(72);
    call {:si_unique_call 333} Tmp_158 := __HAVOC_malloc(72);
    call {:si_unique_call 334} Tmp_159 := __HAVOC_malloc(124);
    call {:si_unique_call 335} Tmp_160 := __HAVOC_malloc(128);
    call {:si_unique_call 336} Tmp_163 := __HAVOC_malloc(96);
    call {:si_unique_call 337} Tmp_164 := __HAVOC_malloc(64);
    call {:si_unique_call 338} Tmp_166 := __HAVOC_malloc(72);
    call {:si_unique_call 339} Tmp_168 := __HAVOC_malloc(76);
    call {:si_unique_call 340} Tmp_170 := __HAVOC_malloc(92);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc extension;
    call {:si_unique_call 341} ExAcquireFastMutex(0);
    call {:si_unique_call 342} status_8 := SerialIRPPrologue(Irp_5, extension);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_8 != 0;
    Tmp_159 := strConst__li2bpl53;
    call {:si_unique_call 343} vslice_dummy_var_114 := SerialDbgPrintEx(3, Tmp_159);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_8 == -1073741738;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    call {:si_unique_call 344} sdv_ExFreePool(0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L28;

  L28:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    havoc status_8;
    goto L25;

  L25:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} status_8 != 259;
    Tmp_166 := strConst__li2bpl3;
    call {:si_unique_call 345} vslice_dummy_var_115 := SerialDbgPrintEx(9, Tmp_166);
    call {:si_unique_call 346} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 347} SerialIRPEpilogue(extension);
    call {:si_unique_call 348} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 349} vslice_dummy_var_116 := sdv_InterlockedDecrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L34;

  L34:
    call {:si_unique_call 350} ExReleaseFastMutex(0);
    Tmp_155 := status_8;
    goto L1;

  L1:
    call {:si_unique_call 351} SLIC_SerialClose_exit(strConst__li2bpl0);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} status_8 == 259;
    goto L34;

  anon54_Then:
    goto L28;

  anon43_Then:
    assume {:partition} status_8 != -1073741738;
    goto L25;

  anon41_Then:
    assume {:partition} status_8 == 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    Tmp_160 := strConst__li2bpl54;
    call {:si_unique_call 352} vslice_dummy_var_117 := SerialDbgPrintEx(0, Tmp_160);
    Tmp_170 := strConst__li2bpl55;
    call {:si_unique_call 353} vslice_dummy_var_118 := SerialDbgPrintEx(0, Tmp_170);
    call {:si_unique_call 354} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Tmp_157 := strConst__li2bpl3;
    call {:si_unique_call 355} vslice_dummy_var_119 := SerialDbgPrintEx(9, Tmp_157);
    call {:si_unique_call 356} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 357} SerialIRPEpilogue(extension);
    Tmp_155 := -1073741808;
    goto L1;

  anon42_Then:
    Tmp_163 := strConst__li2bpl41;
    call {:si_unique_call 358} vslice_dummy_var_120 := SerialDbgPrintEx(9, Tmp_163);
    Tmp_164 := strConst__li2bpl56;
    call {:si_unique_call 359} vslice_dummy_var_121 := SerialDbgPrintEx(6, Tmp_164);
    call {:si_unique_call 360} SD1_1 := SerialGetCharTime(extension);
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    call {:si_unique_call 361} SetDeviceIsOpened(extension, 0, 0);
    call {:si_unique_call 362} vslice_dummy_var_102 := KeSynchronizeExecution(0, li2bplFunctionConstant849, 0);
    flushCount := 320;
    goto L88;

  L88:
    call {:si_unique_call 363} flushCount, sdv_133, Tmp_167, vslice_dummy_var_103 := SerialClose_loop_L88(flushCount, sdv_133, Tmp_167, extension, vslice_dummy_var_103);
    goto L88_last;

  L88_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 364} sdv_133 := corral_nondet();
    Tmp_167 := BAND(sdv_133, BOR(32, 64));
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Tmp_167 != 96;
    call {:si_unique_call 365} vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon56_Else_dummy;

  anon56_Else_dummy:
    assume false;
    return;

  anon56_Then:
    assume {:partition} Tmp_167 == 96;
    goto L89;

  L89:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} flushCount != 0;
    goto L104;

  L104:
    call {:si_unique_call 366} vslice_dummy_var_104 := KeSynchronizeExecution(0, li2bplFunctionConstant523, 0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L109;

  L109:
    call {:si_unique_call 367} sdv_155, vslice_dummy_var_105 := SerialClose_loop_L109(sdv_155, extension, vslice_dummy_var_105);
    goto L109_last;

  L109_last:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 396} sdv_155 := corral_nondet();
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} BAND(sdv_155, 32) != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    flushCount := 320;
    goto L122;

  L122:
    call {:si_unique_call 368} flushCount, sdv_134, Tmp_171, vslice_dummy_var_106 := SerialClose_loop_L122(flushCount, sdv_134, Tmp_171, extension, vslice_dummy_var_106);
    goto L122_last;

  L122_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 369} sdv_134 := corral_nondet();
    Tmp_171 := BAND(sdv_134, BOR(32, 64));
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} Tmp_171 != 96;
    call {:si_unique_call 370} vslice_dummy_var_106 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon57_Else_dummy;

  anon57_Else_dummy:
    assume false;
    return;

  anon57_Then:
    assume {:partition} Tmp_171 == 96;
    goto L123;

  L123:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 371} SerialMarkHardwareBroken(extension);
    goto L108;

  L108:
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} tenCharDelay != 0;
    assume tenCharDelay > 0;
    call {:si_unique_call 372} vslice_dummy_var_122 := KeDelayExecutionThread(0, 1, 0);
    call {:si_unique_call 373} vslice_dummy_var_107 := SerialClrDTR(extension);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L148;

  L148:
    call {:si_unique_call 374} vslice_dummy_var_109 := SerialClose_loop_L148(extension, vslice_dummy_var_109);
    goto L148_last;

  L148_last:
    call {:si_unique_call 397} vslice_dummy_var_109 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    call {:si_unique_call 375} vslice_dummy_var_110 := KeSynchronizeExecution(0, li2bplFunctionConstant842, 0);
    goto L145;

  L145:
    call {:si_unique_call 376} vslice_dummy_var_108 := SerialClrRTS(extension);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    call {:si_unique_call 377} sdv_ExFreePool(0);
    goto L160;

  L160:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 378} vslice_dummy_var_111 := IoCancelIrp(0);
    goto L166;

  L166:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto L173;

  L173:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Tmp_158 := strConst__li2bpl3;
    call {:si_unique_call 379} vslice_dummy_var_123 := SerialDbgPrintEx(9, Tmp_158);
    call {:si_unique_call 380} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 381} SerialIRPEpilogue(extension);
    call {:si_unique_call 382} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 383} sdv_158 := sdv_InterlockedDecrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    pendingDPCs := sdv_158;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} pendingDPCs != 0;
    Tmp_156 := strConst__li2bpl58;
    call {:si_unique_call 384} vslice_dummy_var_124 := SerialDbgPrintEx(4, Tmp_156);
    call {:si_unique_call 385} vslice_dummy_var_113 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L189;

  L189:
    Tmp_168 := strConst__li2bpl57;
    call {:si_unique_call 386} vslice_dummy_var_125 := SerialDbgPrintEx(4, Tmp_168);
    call {:si_unique_call 387} ExReleaseFastMutex(0);
    call {:si_unique_call 388} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 389} vslice_dummy_var_126 := sdv_InterlockedIncrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 390} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 391} vslice_dummy_var_127 := sdv_InterlockedDecrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 392} MmUnlockPagableImageSection(0);
    Tmp_155 := 0;
    goto L1;

  anon60_Then:
    assume {:partition} pendingDPCs == 0;
    goto L189;

  anon53_Then:
    call {:si_unique_call 393} vslice_dummy_var_112 := SerialGotoPowerState(DeviceObject_4, extension, 4);
    goto L173;

  anon59_Then:
    goto L166;

  anon58_Then:
    goto L160;

  anon52_Then:
    goto anon52_Then_dummy;

  anon52_Then_dummy:
    assume false;
    return;

  anon51_Then:
    goto L145;

  anon50_Then:
    assume {:partition} flushCount != 0;
    goto L108;

  anon49_Then:
    assume {:partition} flushCount == 0;
    goto L123;

  anon48_Then:
    assume {:partition} BAND(sdv_155, 32) == 0;
    call {:si_unique_call 394} vslice_dummy_var_105 := KeDelayExecutionThread(0, 0, 0);
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    assume false;
    return;

  anon47_Then:
    goto L108;

  anon46_Then:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 395} SerialMarkHardwareBroken(extension);
    goto L104;

  anon45_Then:
    assume {:partition} flushCount == 0;
    goto L89;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_128: int;

  anon0:
    call {:si_unique_call 398} vslice_dummy_var_128 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_5: int, actual_Irp_6: int) returns (Tmp_175: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_5: int, actual_Irp_6: int) returns (Tmp_175: int)
{
  var {:pointer} Tmp_177: int;
  var {:pointer} Tmp_178: int;
  var {:pointer} Tmp_179: int;
  var {:scalar} status_9: int;
  var {:pointer} extension_1: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_6: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;

  anon0:
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_6 := actual_Irp_6;
    call {:si_unique_call 399} Tmp_177 := __HAVOC_malloc(72);
    call {:si_unique_call 400} Tmp_178 := __HAVOC_malloc(72);
    call {:si_unique_call 401} Tmp_179 := __HAVOC_malloc(96);
    assume {:nonnull} DeviceObject_5 != 0;
    assume DeviceObject_5 > 0;
    havoc extension_1;
    call {:si_unique_call 402} sdv_do_paged_code_check();
    call {:si_unique_call 403} status_9 := SerialIRPPrologue(Irp_6, extension_1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_9 != 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_9 == -1073741738;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc status_9;
    goto L18;

  L18:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_9 != 259;
    Tmp_177 := strConst__li2bpl3;
    call {:si_unique_call 404} vslice_dummy_var_129 := SerialDbgPrintEx(9, Tmp_177);
    call {:si_unique_call 405} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 406} SerialIRPEpilogue(extension_1);
    goto L21;

  L21:
    Tmp_175 := status_9;
    goto L1;

  L1:
    call {:si_unique_call 407} SLIC_SerialCleanup_exit(strConst__li2bpl0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} status_9 == 259;
    goto L21;

  anon12_Then:
    assume {:partition} status_9 != -1073741738;
    goto L18;

  anon11_Then:
    assume {:partition} status_9 == 0;
    Tmp_179 := strConst__li2bpl41;
    call {:si_unique_call 408} vslice_dummy_var_130 := SerialDbgPrintEx(9, Tmp_179);
    call {:si_unique_call 409} SerialKillPendingIrps(DeviceObject_5);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Tmp_178 := strConst__li2bpl3;
    call {:si_unique_call 410} vslice_dummy_var_131 := SerialDbgPrintEx(9, Tmp_178);
    call {:si_unique_call 411} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 412} SerialIRPEpilogue(extension_1);
    Tmp_175 := 0;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_6: int, actual_Irp_7: int) returns (Tmp_180: int);
  modifies alloc, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_6: int, actual_Irp_7: int) returns (Tmp_180: int)
{
  var {:scalar} localStatus: int;
  var {:pointer} sdv_166: int;
  var {:pointer} sdv_168: int;
  var {:pointer} Tmp_181: int;
  var {:pointer} Tmp_182: int;
  var {:pointer} sdv_176: int;
  var {:scalar} sdv_177: int;
  var {:scalar} sdv_178: int;
  var {:pointer} Tmp_183: int;
  var {:pointer} Tmp_184: int;
  var {:pointer} sdv_183: int;
  var {:pointer} Tmp_185: int;
  var {:pointer} Tmp_186: int;
  var {:pointer} Tmp_187: int;
  var {:pointer} extension_2: int;
  var {:pointer} Tmp_188: int;
  var {:scalar} checkOpen: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_7: int;
  var boogieTmp: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_1637: int;
  var vslice_dummy_var_1638: int;
  var vslice_dummy_var_1639: int;

  anon0:
    call {:si_unique_call 413} checkOpen := __HAVOC_malloc(8);
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 414} Tmp_181 := __HAVOC_malloc(72);
    call {:si_unique_call 415} Tmp_183 := __HAVOC_malloc(72);
    call {:si_unique_call 416} Tmp_184 := __HAVOC_malloc(96);
    call {:si_unique_call 417} Tmp_185 := __HAVOC_malloc(72);
    call {:si_unique_call 418} Tmp_186 := __HAVOC_malloc(72);
    call {:si_unique_call 419} Tmp_187 := __HAVOC_malloc(84);
    call {:si_unique_call 420} Tmp_188 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc extension_2;
    call {:si_unique_call 421} sdv_do_paged_code_check();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 422} sdv_IoCompleteRequest(0, 0);
    Tmp_180 := -1073741670;
    goto L1;

  L1:
    call {:si_unique_call 423} SLIC_SerialCreateOpen_exit(strConst__li2bpl0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    call {:si_unique_call 424} ExAcquireFastMutex(0);
    call {:si_unique_call 425} localStatus := SerialIRPPrologue(Irp_7, extension_2);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} localStatus != 0;
    call {:si_unique_call 426} ExReleaseFastMutex(0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} localStatus != 259;
    Tmp_185 := strConst__li2bpl3;
    call {:si_unique_call 427} vslice_dummy_var_135 := SerialDbgPrintEx(9, Tmp_185);
    call {:si_unique_call 428} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 429} SerialIRPEpilogue(extension_2);
    goto L32;

  L32:
    Tmp_180 := localStatus;
    goto L1;

  anon35_Then:
    assume {:partition} localStatus == 259;
    goto L32;

  anon34_Then:
    assume {:partition} localStatus == 0;
    call {:si_unique_call 430} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 431} sdv_177 := sdv_InterlockedIncrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_177 != 1;
    call {:si_unique_call 432} ExReleaseFastMutex(0);
    call {:si_unique_call 433} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 434} vslice_dummy_var_136 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Tmp_183 := strConst__li2bpl3;
    call {:si_unique_call 435} vslice_dummy_var_137 := SerialDbgPrintEx(9, Tmp_183);
    call {:si_unique_call 436} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 437} SerialIRPEpilogue(extension_2);
    Tmp_180 := -1073741790;
    goto L1;

  anon36_Then:
    assume {:partition} sdv_177 == 1;
    Tmp_184 := strConst__li2bpl41;
    call {:si_unique_call 438} vslice_dummy_var_138 := SerialDbgPrintEx(9, Tmp_184);
    Tmp_187 := strConst__li2bpl59;
    call {:si_unique_call 439} vslice_dummy_var_139 := SerialDbgPrintEx(6, Tmp_187);
    call {:si_unique_call 440} sdv_176 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} sdv_176 != 0;
    assume sdv_176 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 441} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 442} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 443} vslice_dummy_var_140 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Tmp_188 := strConst__li2bpl3;
    call {:si_unique_call 444} vslice_dummy_var_141 := SerialDbgPrintEx(9, Tmp_188);
    call {:si_unique_call 445} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 446} SerialIRPEpilogue(extension_2);
    Tmp_180 := -1073741565;
    goto L1;

  anon37_Then:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 447} sdv_178 := corral_nondet();
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_178 != 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_178 != 1;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_178 == 2;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_1637;
    call {:si_unique_call 448} sdv_166 := ExAllocatePoolWithTag(512, vslice_dummy_var_1637, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L96;

  L96:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_1638;
    call {:si_unique_call 449} sdv_168 := ExAllocatePoolWithTag(512, vslice_dummy_var_1638, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L95;

  L95:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_1639;
    call {:si_unique_call 450} sdv_183 := ExAllocatePoolWithTag(512, vslice_dummy_var_1639, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto L94;

  L94:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    call {:si_unique_call 451} MmLockPagableSectionByHandle(0);
    call {:si_unique_call 452} vslice_dummy_var_132 := SerialGotoPowerState(DeviceObject_6, extension_2, 1);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 453} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 454} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 455} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 456} vslice_dummy_var_142 := KeSynchronizeExecution(0, li2bplFunctionConstant844, 0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 457} vslice_dummy_var_133 := KeSynchronizeExecution(0, li2bplFunctionConstant845, 0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    goto L151;

  L151:
    call {:si_unique_call 458} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    havoc localStatus;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} localStatus >= 0;
    goto L158;

  L158:
    Tmp_181 := strConst__li2bpl3;
    call {:si_unique_call 459} vslice_dummy_var_143 := SerialDbgPrintEx(9, Tmp_181);
    call {:si_unique_call 460} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 461} SerialIRPEpilogue(extension_2);
    Tmp_180 := localStatus;
    goto L1;

  anon46_Then:
    assume {:partition} 0 > localStatus;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 462} sdv_ExFreePool(0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto L168;

  L168:
    call {:si_unique_call 463} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 464} vslice_dummy_var_144 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto L158;

  anon41_Then:
    goto L168;

  anon45_Then:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    call {:si_unique_call 465} vslice_dummy_var_134 := KeSynchronizeExecution(0, li2bplFunctionConstant845, 0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    goto L151;

  anon40_Then:
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    call {:si_unique_call 466} vslice_dummy_var_145 := KeSynchronizeExecution(0, li2bplFunctionConstant846, 0);
    goto L151;

  anon39_Then:
    call {:si_unique_call 467} ExReleaseFastMutex(0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 468} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 469} vslice_dummy_var_146 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Tmp_186 := strConst__li2bpl3;
    call {:si_unique_call 470} vslice_dummy_var_147 := SerialDbgPrintEx(9, Tmp_186);
    call {:si_unique_call 471} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 472} SerialIRPEpilogue(extension_2);
    Tmp_180 := -1073741670;
    goto L1;

  anon47_Then:
    goto L94;

  anon48_Then:
    goto L94;

  anon42_Then:
    assume {:partition} sdv_178 != 2;
    goto L94;

  anon43_Then:
    assume {:partition} sdv_178 == 1;
    goto L96;

  anon38_Then:
    assume {:partition} sdv_178 == 0;
    goto L95;
}



procedure {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_11: int) returns (SD1_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_11: int) returns (SD1_2: int)
{
  var {:scalar} Tmp_189: int;
  var {:scalar} dataSize: int;
  var {:scalar} charTime_2: int;
  var {:scalar} Tmp_190: int;
  var {:scalar} Tmp_1: int;
  var {:scalar} bitTime: int;
  var {:scalar} paritySize: int;
  var {:scalar} Tmp_191: int;
  var {:scalar} tmp: int;
  var {:scalar} stopSize: int;
  var {:pointer} Extension_11: int;

  anon0:
    call {:si_unique_call 473} Tmp_1 := __HAVOC_malloc(20);
    call {:si_unique_call 474} tmp := __HAVOC_malloc(20);
    Extension_11 := actual_Extension_11;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc Tmp_191;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_191 == 1;
    dataSize := 6;
    goto L15;

  L15:
    paritySize := 1;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L18;

  L18:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    stopSize := 2;
    goto L21;

  L21:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc bitTime;
    charTime_2 := bitTime + (dataSize + paritySize + stopSize) * bitTime;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    SD1_2 := Tmp_1;
    return;

  anon14_Then:
    stopSize := 1;
    goto L21;

  anon16_Then:
    paritySize := 0;
    goto L18;

  anon15_Then:
    assume {:partition} Tmp_191 != 1;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc Tmp_190;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_190 == 2;
    dataSize := 7;
    goto L15;

  anon17_Then:
    assume {:partition} Tmp_190 != 2;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc Tmp_189;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_189 == 3;
    dataSize := 8;
    goto L15;

  anon18_Then:
    assume {:partition} Tmp_189 != 3;
    goto L15;

  anon13_Then:
    dataSize := 5;
    goto L15;
}



procedure {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_4: int)
{
  var {:scalar} sdv_189: int;
  var {:pointer} extension_3: int;
  var {:pointer} Context_4: int;
  var vslice_dummy_var_148: int;

  anon0:
    call {:si_unique_call 475} vslice_dummy_var_148 := __HAVOC_malloc(4);
    Context_4 := actual_Context_4;
    extension_3 := Context_4;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    call {:si_unique_call 476} sdv_189 := corral_nondet();
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_5: int, actual_PDrainTime: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_5: int, actual_PDrainTime: int)
{
  var {:scalar} Tmp_199: int;
  var {:scalar} sdv_190: int;
  var {:pointer} PDevExt_5: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;

  anon0:
    call {:si_unique_call 477} vslice_dummy_var_149 := __HAVOC_malloc(4);
    PDevExt_5 := actual_PDevExt_5;
    call {:si_unique_call 478} sdv_do_paged_code_check();
    goto L6;

  L6:
    call {:si_unique_call 479} Tmp_199, sdv_190, vslice_dummy_var_150 := SerialDrainUART_loop_L6(Tmp_199, sdv_190, PDevExt_5, vslice_dummy_var_150);
    goto L6_last;

  L6_last:
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    call {:si_unique_call 481} sdv_190 := corral_nondet();
    Tmp_199 := BAND(sdv_190, BOR(32, 64));
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Tmp_199 != 96;
    call {:si_unique_call 480} vslice_dummy_var_150 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} Tmp_199 == 96;
    return;
}



procedure {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_12: int) returns (Tmp_203: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_12: int) returns (Tmp_203: int)
{
  var {:pointer} Tmp_204: int;
  var {:pointer} Tmp_205: int;
  var {:scalar} Mask: int;
  var {:pointer} Tmp_206: int;
  var {:scalar} OldIrql_8: int;
  var {:pointer} NewIrp_3: int;
  var {:pointer} Tmp_207: int;
  var {:pointer} Tmp_208: int;
  var {:pointer} Extension_12: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_1640: int;
  var vslice_dummy_var_1641: int;
  var vslice_dummy_var_1642: int;

  anon0:
    call {:si_unique_call 482} NewIrp_3 := __HAVOC_malloc(4);
    Extension_12 := actual_Extension_12;
    goto L5;

  L5:
    call {:si_unique_call 483} Tmp_204, Tmp_205, Mask, Tmp_206, OldIrql_8, Tmp_207, Tmp_208, vslice_dummy_var_151 := SerialStartPurge_loop_L5(Tmp_204, Tmp_205, Mask, Tmp_206, OldIrql_8, NewIrp_3, Tmp_207, Tmp_208, Extension_12, vslice_dummy_var_151);
    goto L5_last;

  L5_last:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc Tmp_206;
    assume {:nonnull} Tmp_206 != 0;
    assume Tmp_206 > 0;
    havoc Tmp_208;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    havoc Mask;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(Mask, 1) != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc vslice_dummy_var_1640;
    call {:si_unique_call 484} SerialKillAllReadsOrWrites(vslice_dummy_var_1640, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_12), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12));
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc vslice_dummy_var_1641;
    call {:si_unique_call 485} SerialKillAllReadsOrWrites(vslice_dummy_var_1641, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_12), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12));
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(Mask, 2) != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc vslice_dummy_var_1642;
    call {:si_unique_call 486} SerialKillAllReadsOrWrites(vslice_dummy_var_1642, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_12), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_12));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BAND(Mask, 8) != 0;
    call {:si_unique_call 487} Tmp_205 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_205 != 0;
    assume Tmp_205 > 0;
    call {:si_unique_call 488} sdv_KeAcquireSpinLock(0, Tmp_205);
    assume {:nonnull} Tmp_205 != 0;
    assume Tmp_205 > 0;
    havoc OldIrql_8;
    call {:si_unique_call 489} vslice_dummy_var_151 := KeSynchronizeExecution(0, li2bplFunctionConstant806, 0);
    call {:si_unique_call 490} sdv_KeReleaseSpinLock(0, OldIrql_8);
    goto L18;

  L18:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc Tmp_204;
    assume {:nonnull} Tmp_204 != 0;
    assume Tmp_204 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc Tmp_207;
    assume {:nonnull} Tmp_207 != 0;
    assume Tmp_207 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 491} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_12), PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_12), NewIrp_3, 1, Extension_12);
    assume {:nonnull} NewIrp_3 != 0;
    assume NewIrp_3 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_203 := 0;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon16_Then:
    assume {:partition} BAND(Mask, 8) == 0;
    goto L18;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} BAND(Mask, 2) == 0;
    goto L14;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} BAND(Mask, 1) == 0;
    goto L7;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_152: int;

  anon0:
    call {:si_unique_call 492} vslice_dummy_var_152 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSetPendingDpcEvent"} SerialSetPendingDpcEvent(actual_Dpc_4: int, actual_PDevExtIn: int, actual_SystemContext1_4: int, actual_SystemContext2_4: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetPendingDpcEvent"} SerialSetPendingDpcEvent(actual_Dpc_4: int, actual_PDevExtIn: int, actual_SystemContext1_4: int, actual_SystemContext2_4: int)
{
  var {:pointer} PDevExt_6: int;
  var {:pointer} PDevExtIn: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;

  anon0:
    call {:si_unique_call 493} vslice_dummy_var_153 := __HAVOC_malloc(4);
    PDevExtIn := actual_PDevExtIn;
    PDevExt_6 := PDevExtIn;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 494} vslice_dummy_var_154 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_6), 0, 0);
    call {:si_unique_call 495} SLIC_SerialSetPendingDpcEvent_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_7: int, actual_Irp_8: int) returns (Tmp_213: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_213 == -1073741536 || Tmp_213 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_7: int, actual_Irp_8: int) returns (Tmp_213: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} Tmp_214: int;
  var {:scalar} status_10: int;
  var {:pointer} extension_4: int;
  var {:pointer} DeviceObject_7: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_155: int;

  anon0:
    DeviceObject_7 := actual_DeviceObject_7;
    Irp_8 := actual_Irp_8;
    call {:si_unique_call 496} Tmp_214 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_7 != 0;
    assume DeviceObject_7 > 0;
    havoc extension_4;
    status_10 := 0;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 497} irpSp := sdv_IoGetCurrentIrpStackLocation(Irp_8);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    goto L17;

  L17:
    status_10 := -1073741536;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Tmp_214 := strConst__li2bpl3;
    call {:si_unique_call 498} vslice_dummy_var_155 := SerialDbgPrintEx(9, Tmp_214);
    call {:si_unique_call 499} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 500} SerialIRPEpilogue(extension_4);
    goto L8;

  L8:
    Tmp_213 := status_10;
    return;

  anon10_Then:
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L17;

  anon11_Then:
    goto L8;

  anon9_Then:
    goto L8;

  anon12_Then:
    goto L8;
}



procedure {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_9: int, actual_PIrp_6: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_9: int, actual_PIrp_6: int)
{
  var {:pointer} Tmp_216: int;
  var {:pointer} pDevExt_7: int;
  var {:pointer} PDevObj_9: int;
  var {:pointer} PIrp_6: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_1643: int;

  anon0:
    call {:si_unique_call 501} vslice_dummy_var_156 := __HAVOC_malloc(4);
    PDevObj_9 := actual_PDevObj_9;
    PIrp_6 := actual_PIrp_6;
    call {:si_unique_call 502} Tmp_216 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_9 != 0;
    assume PDevObj_9 > 0;
    havoc pDevExt_7;
    call {:si_unique_call 503} vslice_dummy_var_157 := sdv_IoGetCurrentIrpStackLocation(PIrp_6);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    call {:si_unique_call 504} vslice_dummy_var_158 := sdv_RemoveEntryList(0);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    havoc vslice_dummy_var_1643;
    call {:si_unique_call 505} IoReleaseCancelSpinLock(vslice_dummy_var_1643);
    Tmp_216 := strConst__li2bpl3;
    call {:si_unique_call 506} vslice_dummy_var_159 := SerialDbgPrintEx(9, Tmp_216);
    call {:si_unique_call 507} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 508} SerialIRPEpilogue(pDevExt_7);
    call {:si_unique_call 509} SLIC_SerialFilterCancelQueued_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialUnlockPages"} SerialUnlockPages(actual_PDpc: int, actual_PDeferredContext: int, actual_PSysContext1: int, actual_PSysContext2: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialUnlockPages"} SerialUnlockPages(actual_PDpc: int, actual_PDeferredContext: int, actual_PSysContext1: int, actual_PSysContext2: int)
{
  var {:pointer} pDevExt_8: int;
  var {:pointer} PDeferredContext: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;

  anon0:
    call {:si_unique_call 510} vslice_dummy_var_160 := __HAVOC_malloc(4);
    PDeferredContext := actual_PDeferredContext;
    pDevExt_8 := PDeferredContext;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    call {:si_unique_call 511} vslice_dummy_var_161 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_8), 0, 0);
    call {:si_unique_call 512} SLIC_SerialUnlockPages_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_13: int, actual_Irp_9: int, actual_QueueToExamine: int, actual_CurrentOpIrp_1: int, actual_Starter: int) returns (Tmp_221: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_13: int, actual_Irp_9: int, actual_QueueToExamine: int, actual_CurrentOpIrp_1: int, actual_Starter: int) returns (Tmp_221: int)
{
  var {:pointer} irpSp_1: int;
  var {:pointer} Tmp_222: int;
  var {:pointer} sdv_200: int;
  var {:pointer} Tmp_223: int;
  var {:pointer} sdv_202: int;
  var {:pointer} sdv_204: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} sdv_205: int;
  var {:scalar} sdv_207: int;
  var {:pointer} sdv_209: int;
  var {:pointer} Extension_13: int;
  var {:pointer} Irp_9: int;
  var {:pointer} QueueToExamine: int;
  var {:pointer} CurrentOpIrp_1: int;
  var {:scalar} Starter: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;

  anon0:
    Extension_13 := actual_Extension_13;
    Irp_9 := actual_Irp_9;
    QueueToExamine := actual_QueueToExamine;
    CurrentOpIrp_1 := actual_CurrentOpIrp_1;
    Starter := actual_Starter;
    call {:si_unique_call 513} Tmp_223 := __HAVOC_malloc(72);
    call {:si_unique_call 514} Tmp_222 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_222 != 0;
    assume Tmp_222 > 0;
    call {:si_unique_call 515} IoAcquireCancelSpinLock(Tmp_222);
    assume {:nonnull} Tmp_222 != 0;
    assume Tmp_222 > 0;
    havoc oldIrql_1;
    call {:si_unique_call 516} sdv_200 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_200 != 0;
    assume sdv_200 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 517} sdv_205 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    assume {:nonnull} sdv_205 != 0;
    assume sdv_205 > 0;
    goto L18;

  L18:
    call {:si_unique_call 518} sdv_207 := sdv_IsListEmpty(0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} sdv_207 != 0;
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    call {:si_unique_call 519} IoReleaseCancelSpinLock(oldIrql_1);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant1125;
    call {:si_unique_call 520} Tmp_221 := SerialStartFlush(Extension_13);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon38_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant617;
    call {:si_unique_call 521} Tmp_221 := SerialStartMask(Extension_13);
    goto L1;

  anon37_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant805;
    call {:si_unique_call 522} Tmp_221 := SerialStartPurge(Extension_13);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant720;
    call {:si_unique_call 523} Tmp_221 := SerialStartRead(Extension_13);
    goto L1;

  anon31_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant569;
    call {:si_unique_call 524} Tmp_221 := SerialStartWrite#1(Extension_13);
    goto L1;

  anon30_Then:
    goto L22;

  L22:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    call {:si_unique_call 525} irpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    call {:si_unique_call 526} IoReleaseCancelSpinLock(oldIrql_1);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    call {:si_unique_call 527} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    goto L42;

  L42:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    Tmp_223 := strConst__li2bpl3;
    call {:si_unique_call 528} vslice_dummy_var_164 := SerialDbgPrintEx(9, Tmp_223);
    call {:si_unique_call 529} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 530} SerialIRPEpilogue(Extension_13);
    Tmp_221 := -1073741536;
    goto L1;

  anon32_Then:
    goto L42;

  anon29_Then:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 531} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 532} vslice_dummy_var_162 := sdv_InsertTailList(QueueToExamine, ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(Irp_9))));
    call {:si_unique_call 533} vslice_dummy_var_163 := sdv_IoSetCancelRoutine(Irp_9, li2bplFunctionConstant665);
    call {:si_unique_call 534} IoReleaseCancelSpinLock(oldIrql_1);
    Tmp_221 := 259;
    goto L1;

  anon28_Then:
    assume {:partition} sdv_207 == 0;
    goto L22;

  anon27_Then:
    call {:si_unique_call 535} sdv_204 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_204 != 0;
    assume sdv_204 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 536} sdv_202 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_202 != 0;
    assume sdv_202 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto L78;

  L78:
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    goto L18;

  anon34_Then:
    call {:si_unique_call 537} sdv_209 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_209 != 0;
    assume sdv_209 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L78;

  anon35_Then:
    goto L18;

  anon33_Then:
    goto L18;
}



procedure {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_7: int, actual_PFlags: int, actual_Value: int, actual_Set: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_7: int, actual_PFlags: int, actual_Value: int, actual_Set: int)
{
  var {:pointer} Tmp_225: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} PFlags: int;
  var {:scalar} Value: int;
  var {:scalar} Set: int;
  var vslice_dummy_var_165: int;

  anon0:
    call {:si_unique_call 538} vslice_dummy_var_165 := __HAVOC_malloc(4);
    PFlags := actual_PFlags;
    Value := actual_Value;
    Set := actual_Set;
    call {:si_unique_call 539} Tmp_225 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    call {:si_unique_call 540} sdv_KeAcquireSpinLock(0, Tmp_225);
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    havoc oldIrql_2;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Set != 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    goto L10;

  L10:
    call {:si_unique_call 541} sdv_KeReleaseSpinLock(0, oldIrql_2);
    return;

  anon3_Then:
    assume {:partition} Set == 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    goto L10;
}



procedure {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_8: int, actual_PDevObj_10: int, actual_PIrp_7: int) returns (Tmp_226: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_226 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_8: int, actual_PDevObj_10: int, actual_PIrp_7: int) returns (Tmp_226: int)
{
  var {:scalar} status_11: int;
  var {:pointer} PDevExt_8: int;
  var {:pointer} PIrp_7: int;

  anon0:
    PDevExt_8 := actual_PDevExt_8;
    PIrp_7 := actual_PIrp_7;
    call {:si_unique_call 542} status_11 := PoCallDriver(0, PIrp_7);
    call {:si_unique_call 543} SerialIRPEpilogue(PDevExt_8);
    Tmp_226 := status_11;
    return;
}



procedure {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_9: int)
{
  var {:pointer} Tmp_229: int;
  var {:scalar} pendingCnt: int;
  var {:pointer} PDevExt_9: int;
  var vslice_dummy_var_166: int;
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 544} vslice_dummy_var_166 := __HAVOC_malloc(4);
    PDevExt_9 := actual_PDevExt_9;
    call {:si_unique_call 545} Tmp_229 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    assume {:nonnull} Tmp_229 != 0;
    assume Tmp_229 > 0;
    call {:si_unique_call 546} pendingCnt := sdv_InterlockedDecrement(Tmp_229);
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    assume {:nonnull} Tmp_229 != 0;
    assume Tmp_229 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt == 0;
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    call {:si_unique_call 547} vslice_dummy_var_167 := KeSetEvent(PendingIRPEvent__SERIAL_DEVICE_EXTENSION(PDevExt_9), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt != 0;
    goto L1;
}



procedure {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_10: int)
{
  var {:scalar} Tmp_230: int;
  var {:scalar} Tmp_233: int;
  var {:scalar} Tmp_234: int;
  var {:pointer} PDevExt_10: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_1644: int;

  anon0:
    call {:si_unique_call 548} Tmp_230 := __HAVOC_malloc(20);
    call {:si_unique_call 549} vslice_dummy_var_168 := __HAVOC_malloc(4);
    call {:si_unique_call 550} Tmp_233 := __HAVOC_malloc(20);
    PDevExt_10 := actual_PDevExt_10;
    call {:si_unique_call 551} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_10 != 0;
    assume PDevExt_10 > 0;
    call {:si_unique_call 552} SerialSetDeviceFlags(PDevExt_10, Flags__SERIAL_DEVICE_EXTENSION(PDevExt_10), 4, 1);
    assume {:nonnull} PDevExt_10 != 0;
    assume PDevExt_10 > 0;
    havoc Tmp_234;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} PDevExt_10 != 0;
    assume PDevExt_10 > 0;
    havoc vslice_dummy_var_1644;
    call {:si_unique_call 553} SerialLogError(vslice_dummy_var_1644, 0, Tmp_230, Tmp_233, 0, 0, 0, 88, 0, -1073348563, Tmp_234, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(PDevExt_10))], 0, 0);
    call {:si_unique_call 554} IoInvalidateDeviceState(0);
    return;
}



procedure {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_11: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_11: int)
{
  var {:pointer} currentLastIrp: int;
  var {:scalar} cancelIrql: int;
  var {:pointer} Tmp_240: int;
  var {:scalar} sdv_218: int;
  var {:pointer} pDevExt_9: int;
  var {:pointer} sdv_219: int;
  var {:scalar} cancelRoutine: int;
  var {:pointer} PDevObj_11: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_1645: int;

  anon0:
    call {:si_unique_call 555} vslice_dummy_var_169 := __HAVOC_malloc(4);
    PDevObj_11 := actual_PDevObj_11;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc pDevExt_9;
    call {:si_unique_call 556} Tmp_240 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    call {:si_unique_call 557} IoAcquireCancelSpinLock(Tmp_240);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    havoc cancelIrql;
    goto L10;

  L10:
    call {:si_unique_call 558} currentLastIrp, cancelIrql, Tmp_240, sdv_218, sdv_219, cancelRoutine, vslice_dummy_var_170 := SerialKillAllStalled_loop_L10(currentLastIrp, cancelIrql, Tmp_240, sdv_218, pDevExt_9, sdv_219, cancelRoutine, PDevObj_11, vslice_dummy_var_170);
    goto L10_last;

  L10_last:
    call {:si_unique_call 570} sdv_218 := sdv_IsListEmpty(0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_218 == 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1645;
    call {:si_unique_call 559} sdv_219 := sdv_containing_record(vslice_dummy_var_1645, 88);
    currentLastIrp := sdv_219;
    call {:si_unique_call 560} vslice_dummy_var_170 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    cancelRoutine := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp)];
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp)] := 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant571;
    call {:si_unique_call 561} SerialCancelCurrentWrite(PDevObj_11, currentLastIrp);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    call {:si_unique_call 562} Tmp_240 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    call {:si_unique_call 563} IoAcquireCancelSpinLock(Tmp_240);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    havoc cancelIrql;
    goto L32_dummy;

  L32_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant575;
    call {:si_unique_call 564} SerialCancelCurrentXoff(PDevObj_11, currentLastIrp);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant1086;
    call {:si_unique_call 565} SerialCancelImmediate(PDevObj_11, currentLastIrp);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant665;
    call {:si_unique_call 566} SerialCancelQueued(PDevObj_11, currentLastIrp);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant619;
    call {:si_unique_call 567} SerialCancelWait(PDevObj_11, currentLastIrp);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant667;
    call {:si_unique_call 568} SerialFilterCancelQueued(PDevObj_11, currentLastIrp);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} sdv_218 != 0;
    call {:si_unique_call 569} IoReleaseCancelSpinLock(cancelIrql);
    goto LM2;
}



procedure {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer: int, actual_PDevExt_11: int) returns (Tmp_242: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_242 == 1 || Tmp_242 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer: int, actual_PDevExt_11: int) returns (Tmp_242: int)
{
  var {:scalar} cancelled: int;
  var {:pointer} Timer: int;
  var {:pointer} PDevExt_11: int;
  var vslice_dummy_var_1646: int;

  anon0:
    Timer := actual_Timer;
    PDevExt_11 := actual_PDevExt_11;
    call {:si_unique_call 571} cancelled := KeCancelTimer(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} cancelled != 0;
    assume {:nonnull} Timer != 0;
    assume Timer > 0;
    havoc vslice_dummy_var_1646;
    call {:si_unique_call 572} SerialDpcEpilogue(PDevExt_11, vslice_dummy_var_1646);
    goto L9;

  L9:
    Tmp_242 := cancelled;
    return;

  anon3_Then:
    assume {:partition} cancelled == 0;
    goto L9;
}



procedure {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_12: int) returns (Tmp_244: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} Tmp_244 == 0 || Tmp_244 == -1073741536 || Tmp_244 == 259 || Tmp_244 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_12: int) returns (Tmp_244: int)
{
  var {:pointer} Tmp_245: int;
  var {:pointer} PIrp_8: int;
  var {:pointer} PDevExt_12: int;
  var vslice_dummy_var_171: int;

  anon0:
    PIrp_8 := actual_PIrp_8;
    PDevExt_12 := actual_PDevExt_12;
    call {:si_unique_call 573} Tmp_245 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    call {:si_unique_call 574} vslice_dummy_var_171 := sdv_InterlockedIncrement(Tmp_245);
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    call {:si_unique_call 575} Tmp_244 := SerialFilterIrps(PIrp_8, PDevExt_12);
    return;
}



procedure {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_NextIrp: int, actual_CompleteCurrent_2: int, actual_extension_5: int, actual_OldIrql_9: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_NextIrp: int, actual_CompleteCurrent_2: int, actual_extension_5: int, actual_OldIrql_9: int)
{
  var {:scalar} sdv_224: int;
  var {:pointer} oldIrp_1: int;
  var {:pointer} sdv_227: int;
  var {:pointer} headOfList: int;
  var {:pointer} Tmp_248: int;
  var {:pointer} CurrentOpIrp_3: int;
  var {:pointer} QueueToProcess_2: int;
  var {:pointer} NextIrp: int;
  var {:scalar} CompleteCurrent_2: int;
  var {:pointer} extension_5: int;
  var {:scalar} OldIrql_9: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;
  var vslice_dummy_var_1647: int;

  anon0:
    call {:si_unique_call 576} vslice_dummy_var_172 := __HAVOC_malloc(4);
    CurrentOpIrp_3 := actual_CurrentOpIrp_3;
    QueueToProcess_2 := actual_QueueToProcess_2;
    NextIrp := actual_NextIrp;
    CompleteCurrent_2 := actual_CompleteCurrent_2;
    extension_5 := actual_extension_5;
    OldIrql_9 := actual_OldIrql_9;
    call {:si_unique_call 577} Tmp_248 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc oldIrp_1;
    call {:si_unique_call 578} sdv_224 := sdv_IsListEmpty(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_224 == 0;
    call {:si_unique_call 579} headOfList := RemoveHeadList(QueueToProcess_2);
    call {:si_unique_call 580} sdv_227 := sdv_containing_record(headOfList, 88);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc vslice_dummy_var_1647;
    call {:si_unique_call 581} vslice_dummy_var_174 := sdv_IoSetCancelRoutine(vslice_dummy_var_1647, 0);
    goto L11;

  L11:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    assume {:nonnull} NextIrp != 0;
    assume NextIrp > 0;
    call {:si_unique_call 582} IoReleaseCancelSpinLock(OldIrql_9);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} CompleteCurrent_2 != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} oldIrp_1 != 0;
    Tmp_248 := strConst__li2bpl3;
    call {:si_unique_call 583} vslice_dummy_var_173 := SerialDbgPrintEx(9, Tmp_248);
    call {:si_unique_call 584} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 585} SerialIRPEpilogue(extension_5);
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} oldIrp_1 == 0;
    goto L1;

  anon8_Then:
    assume {:partition} CompleteCurrent_2 == 0;
    goto L1;

  anon7_Then:
    assume {:partition} sdv_224 != 0;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    goto L11;
}



procedure {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_13: int, actual_PDevObj_12: int, actual_PIrp_9: int) returns (Tmp_249: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_249 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_13: int, actual_PDevObj_12: int, actual_PIrp_9: int) returns (Tmp_249: int)
{
  var {:scalar} status_12: int;
  var {:pointer} PDevExt_13: int;
  var {:pointer} PDevObj_12: int;
  var {:pointer} PIrp_9: int;

  anon0:
    PDevExt_13 := actual_PDevExt_13;
    PDevObj_12 := actual_PDevObj_12;
    PIrp_9 := actual_PIrp_9;
    call {:si_unique_call 586} status_12 := sdv_IoCallDriver(PDevObj_12, PIrp_9);
    call {:si_unique_call 587} SerialIRPEpilogue(PDevExt_13);
    Tmp_249 := status_12;
    return;
}



procedure {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_14: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_14: int)
{
  var {:pointer} Tmp_251: int;
  var {:pointer} Tmp_252: int;
  var {:pointer} sdv_233: int;
  var {:pointer} Tmp_253: int;
  var {:scalar} Tmp_254: int;
  var {:scalar} oldIrql_3: int;
  var {:pointer} pIrpStack_4: int;
  var {:pointer} Tmp_255: int;
  var {:pointer} pIrp: int;
  var {:pointer} pDevObj: int;
  var {:pointer} pDrvObj: int;
  var {:pointer} pIrpLink: int;
  var {:pointer} Tmp_257: int;
  var {:pointer} PDevExt_14: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_179: int;
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 588} vslice_dummy_var_175 := __HAVOC_malloc(4);
    PDevExt_14 := actual_PDevExt_14;
    call {:si_unique_call 589} Tmp_251 := __HAVOC_malloc(96);
    call {:si_unique_call 590} Tmp_253 := __HAVOC_malloc(124);
    call {:si_unique_call 591} Tmp_255 := __HAVOC_malloc(80);
    call {:si_unique_call 592} Tmp_257 := __HAVOC_malloc(112);
    Tmp_251 := strConst__li2bpl60;
    call {:si_unique_call 593} vslice_dummy_var_176 := SerialDbgPrintEx(2, Tmp_251);
    call {:si_unique_call 594} Tmp_252 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    call {:si_unique_call 595} IoAcquireCancelSpinLock(Tmp_252);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    havoc oldIrql_3;
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    havoc pIrpLink;
    goto L16;

  L16:
    call {:si_unique_call 596} Tmp_252, sdv_233, Tmp_253, Tmp_254, oldIrql_3, pIrpStack_4, pIrp, pDevObj, pDrvObj, pIrpLink, Tmp_257, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179 := SerialUnstallIrps_loop_L16(Tmp_252, sdv_233, Tmp_253, Tmp_254, oldIrql_3, pIrpStack_4, pIrp, pDevObj, pDrvObj, pIrpLink, Tmp_257, PDevExt_14, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179);
    goto L16_last;

  L16_last:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 597} sdv_233 := sdv_containing_record(pIrpLink, 88);
    pIrp := sdv_233;
    call {:si_unique_call 598} vslice_dummy_var_177 := sdv_RemoveEntryList(0);
    call {:si_unique_call 599} pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    havoc pDevObj;
    assume {:nonnull} pDevObj != 0;
    assume pDevObj > 0;
    havoc pDrvObj;
    call {:si_unique_call 600} vslice_dummy_var_178 := sdv_IoSetCancelRoutine(pIrp, 0);
    call {:si_unique_call 601} IoReleaseCancelSpinLock(oldIrql_3);
    Tmp_253 := strConst__li2bpl61;
    call {:si_unique_call 602} vslice_dummy_var_179 := SerialDbgPrintEx(12, Tmp_253);
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    havoc Tmp_254;
    assume {:nonnull} pDrvObj != 0;
    assume pDrvObj > 0;
    havoc Tmp_257;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Tmp_254 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_254 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_254 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_254 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_254 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_254 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_254 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_254 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_254 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_254 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_254 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_254 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_254 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_254 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_254 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_254 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_254 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_254 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_254 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_254 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_254 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Tmp_254 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Tmp_254 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Tmp_254 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume Tmp_254 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume Tmp_254 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume Tmp_254 != 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume false;
    return;

  anon87_Then:
    assume Tmp_254 == 0;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  L45:
    call {:si_unique_call 603} Tmp_252 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    call {:si_unique_call 604} IoAcquireCancelSpinLock(Tmp_252);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    havoc oldIrql_3;
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    havoc pIrpLink;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon86_Then:
    assume Tmp_254 == 1;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon85_Then:
    assume Tmp_254 == 2;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon84_Then:
    assume Tmp_254 == 3;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon83_Then:
    assume Tmp_254 == 4;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon82_Then:
    assume Tmp_254 == 5;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon81_Then:
    assume Tmp_254 == 6;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon80_Then:
    assume Tmp_254 == 7;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon79_Then:
    assume Tmp_254 == 8;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon78_Then:
    assume Tmp_254 == 9;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon77_Then:
    assume Tmp_254 == 10;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon76_Then:
    assume Tmp_254 == 11;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon75_Then:
    assume Tmp_254 == 12;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon74_Then:
    assume Tmp_254 == 13;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon73_Then:
    assume Tmp_254 == 14;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon72_Then:
    assume Tmp_254 == 15;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon71_Then:
    assume Tmp_254 == 16;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon70_Then:
    assume Tmp_254 == 17;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon69_Then:
    assume Tmp_254 == 18;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon68_Then:
    assume Tmp_254 == 19;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon67_Then:
    assume Tmp_254 == 20;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon66_Then:
    assume Tmp_254 == 21;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon65_Then:
    assume Tmp_254 == 22;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon64_Then:
    assume Tmp_254 == 23;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon63_Then:
    assume Tmp_254 == 24;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon62_Then:
    assume Tmp_254 == 25;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon61_Then:
    assume Tmp_254 == 26;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon60_Then:
    assume Tmp_254 == 27;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    goto L45;

  anon59_Then:
    call {:si_unique_call 605} IoReleaseCancelSpinLock(oldIrql_3);
    Tmp_255 := strConst__li2bpl62;
    call {:si_unique_call 606} vslice_dummy_var_180 := SerialDbgPrintEx(2, Tmp_255);
    return;
}



procedure {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_8: int, actual_QueueToClean: int, actual_CurrentOpIrp_4: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_8: int, actual_QueueToClean: int, actual_CurrentOpIrp_4: int)
{
  var {:pointer} currentLastIrp_1: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:scalar} cancelIrql_1: int;
  var {:pointer} Tmp_261: int;
  var {:pointer} Tmp_262: int;
  var {:scalar} sdv_238: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} sdv_239: int;
  var {:scalar} cancelRoutine_1: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} QueueToClean: int;
  var {:pointer} CurrentOpIrp_4: int;
  var vslice_dummy_var_181: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_1648: int;
  var vslice_dummy_var_1649: int;
  var vslice_dummy_var_1650: int;
  var vslice_dummy_var_1651: int;
  var vslice_dummy_var_1652: int;
  var vslice_dummy_var_1653: int;
  var vslice_dummy_var_1654: int;

  anon0:
    call {:si_unique_call 607} vslice_dummy_var_181 := __HAVOC_malloc(4);
    DeviceObject_8 := actual_DeviceObject_8;
    QueueToClean := actual_QueueToClean;
    CurrentOpIrp_4 := actual_CurrentOpIrp_4;
    call {:si_unique_call 608} Tmp_261 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    call {:si_unique_call 609} IoAcquireCancelSpinLock(Tmp_261);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    havoc cancelIrql_1;
    goto L8;

  L8:
    call {:si_unique_call 610} currentLastIrp_1, cancelIrql_1, Tmp_261, sdv_238, sdv_239, cancelRoutine_1, vslice_dummy_var_182 := SerialKillAllReadsOrWrites_loop_L8(currentLastIrp_1, cancelIrql_1, Tmp_261, sdv_238, sdv_239, cancelRoutine_1, DeviceObject_8, QueueToClean, vslice_dummy_var_182);
    goto L8_last;

  L8_last:
    call {:si_unique_call 629} sdv_238 := sdv_IsListEmpty(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_238 == 0;
    assume {:nonnull} QueueToClean != 0;
    assume QueueToClean > 0;
    havoc vslice_dummy_var_1648;
    call {:si_unique_call 611} sdv_239 := sdv_containing_record(vslice_dummy_var_1648, 88);
    currentLastIrp_1 := sdv_239;
    call {:si_unique_call 612} vslice_dummy_var_182 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp_1)];
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp_1)] := 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant571;
    call {:si_unique_call 613} SerialCancelCurrentWrite(DeviceObject_8, currentLastIrp_1);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  L42:
    call {:si_unique_call 614} Tmp_261 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    call {:si_unique_call 615} IoAcquireCancelSpinLock(Tmp_261);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    havoc cancelIrql_1;
    goto L42_dummy;

  L42_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant575;
    call {:si_unique_call 616} SerialCancelCurrentXoff(DeviceObject_8, currentLastIrp_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant1086;
    call {:si_unique_call 617} SerialCancelImmediate(DeviceObject_8, currentLastIrp_1);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant665;
    call {:si_unique_call 618} SerialCancelQueued(DeviceObject_8, currentLastIrp_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant619;
    call {:si_unique_call 619} SerialCancelWait(DeviceObject_8, currentLastIrp_1);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon71_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant667;
    call {:si_unique_call 620} SerialFilterCancelQueued(DeviceObject_8, currentLastIrp_1);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon70_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:partition} sdv_238 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_259;
    assume {:nonnull} Tmp_259 != 0;
    assume Tmp_259 > 0;
    cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_259)];
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_258;
    assume {:nonnull} Tmp_258 != 0;
    assume Tmp_258 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} cancelRoutine_1 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_263;
    assume {:nonnull} Tmp_263 != 0;
    assume Tmp_263 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_263)] := 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_262;
    assume {:nonnull} Tmp_262 != 0;
    assume Tmp_262 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant571;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_1649;
    call {:si_unique_call 621} SerialCancelCurrentWrite(DeviceObject_8, vslice_dummy_var_1649);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  anon68_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon56_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant575;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_1650;
    call {:si_unique_call 622} SerialCancelCurrentXoff(DeviceObject_8, vslice_dummy_var_1650);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon67_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant1086;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_1651;
    call {:si_unique_call 623} SerialCancelImmediate(DeviceObject_8, vslice_dummy_var_1651);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant665;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_1652;
    call {:si_unique_call 624} SerialCancelQueued(DeviceObject_8, vslice_dummy_var_1652);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon65_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant619;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_1653;
    call {:si_unique_call 625} SerialCancelWait(DeviceObject_8, vslice_dummy_var_1653);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon64_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant667;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_1654;
    call {:si_unique_call 626} SerialFilterCancelQueued(DeviceObject_8, vslice_dummy_var_1654);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} cancelRoutine_1 == 0;
    call {:si_unique_call 627} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;

  anon52_Then:
    call {:si_unique_call 628} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_183: int;

  anon0:
    call {:si_unique_call 630} vslice_dummy_var_183 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_1: int, actual_SD1_3: int, actual_Dpc_5: int, actual_PDevExt_15: int) returns (Tmp_266: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_266 == 1 || Tmp_266 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_1: int, actual_SD1_3: int, actual_Dpc_5: int, actual_PDevExt_15: int) returns (Tmp_266: int)
{
  var {:scalar} DueTime_1: int;
  var {:scalar} set: int;
  var {:pointer} Tmp_267: int;
  var {:pointer} SD1_3: int;
  var {:pointer} PDevExt_15: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;

  anon0:
    call {:si_unique_call 631} DueTime_1 := __HAVOC_malloc(20);
    SD1_3 := actual_SD1_3;
    PDevExt_15 := actual_PDevExt_15;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    call {:si_unique_call 632} Tmp_267 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    call {:si_unique_call 633} vslice_dummy_var_184 := sdv_InterlockedIncrement(Tmp_267);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    call {:si_unique_call 634} set := KeSetTimer(0, DueTime_1, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} set != 0;
    call {:si_unique_call 635} Tmp_267 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    call {:si_unique_call 636} vslice_dummy_var_185 := sdv_InterlockedDecrement(Tmp_267);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    goto L12;

  L12:
    Tmp_266 := set;
    return;

  anon3_Then:
    assume {:partition} set == 0;
    goto L12;
}



procedure {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_16: int, actual_PDpc_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_16: int, actual_PDpc_1: int)
{
  var {:scalar} pendingCnt_1: int;
  var {:pointer} Tmp_269: int;
  var {:pointer} PDevExt_16: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;

  anon0:
    call {:si_unique_call 637} vslice_dummy_var_186 := __HAVOC_malloc(4);
    PDevExt_16 := actual_PDevExt_16;
    call {:si_unique_call 638} Tmp_269 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    call {:si_unique_call 639} pendingCnt_1 := sdv_InterlockedDecrement(Tmp_269);
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt_1 == 0;
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    call {:si_unique_call 640} vslice_dummy_var_187 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_16), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt_1 != 0;
    goto L1;
}



procedure {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_5: int, actual_QueueToProcess_3: int, actual_NextIrp_1: int, actual_CompleteCurrent_3: int, actual_extension_6: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_5: int, actual_QueueToProcess_3: int, actual_NextIrp_1: int, actual_CompleteCurrent_3: int, actual_extension_6: int)
{
  var {:scalar} oldIrql_4: int;
  var {:pointer} Tmp_271: int;
  var {:pointer} CurrentOpIrp_5: int;
  var {:pointer} QueueToProcess_3: int;
  var {:pointer} NextIrp_1: int;
  var {:scalar} CompleteCurrent_3: int;
  var {:pointer} extension_6: int;
  var vslice_dummy_var_188: int;

  anon0:
    call {:si_unique_call 641} vslice_dummy_var_188 := __HAVOC_malloc(4);
    CurrentOpIrp_5 := actual_CurrentOpIrp_5;
    QueueToProcess_3 := actual_QueueToProcess_3;
    NextIrp_1 := actual_NextIrp_1;
    CompleteCurrent_3 := actual_CompleteCurrent_3;
    extension_6 := actual_extension_6;
    call {:si_unique_call 642} Tmp_271 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_271 != 0;
    assume Tmp_271 > 0;
    call {:si_unique_call 643} IoAcquireCancelSpinLock(Tmp_271);
    assume {:nonnull} Tmp_271 != 0;
    assume Tmp_271 > 0;
    havoc oldIrql_4;
    call {:si_unique_call 644} SerialGetNextIrpLocked(CurrentOpIrp_5, QueueToProcess_3, NextIrp_1, CompleteCurrent_3, extension_6, oldIrql_4);
    return;
}



procedure {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_9: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_9: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int)
{
  var {:scalar} P1: int;
  var {:scalar} P2: int;
  var {:pointer} Tmp_274: int;
  var {:pointer} Tmp_275: int;
  var {:scalar} Tmp_276: int;
  var {:scalar} sdv_246: int;
  var {:pointer} errorLogEntry: int;
  var {:pointer} Tmp_277: int;
  var {:scalar} Tmp_279: int;
  var {:scalar} sdv_247: int;
  var {:scalar} dumpToAllocate: int;
  var {:pointer} sdv_248: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} ptrToFirstInsert: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} Tmp_283: int;
  var {:pointer} DriverObject: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} structPtr888P1: int;
  var {:pointer} structPtr888P2: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var {:scalar} LengthOfInsert1: int;
  var {:pointer} Insert1: int;
  var {:scalar} LengthOfInsert2: int;
  var {:pointer} Insert2: int;
  var vslice_dummy_var_189: int;

  anon0:
    call {:si_unique_call 645} P1 := __HAVOC_malloc(20);
    call {:si_unique_call 646} P2 := __HAVOC_malloc(20);
    call {:si_unique_call 647} vslice_dummy_var_189 := __HAVOC_malloc(4);
    call {:si_unique_call 648} Tmp_279 := __HAVOC_malloc(20);
    call {:si_unique_call 649} Tmp_282 := __HAVOC_malloc(20);
    DriverObject := actual_DriverObject;
    DeviceObject_9 := actual_DeviceObject_9;
    structPtr888P1 := actual_structPtr888P1;
    structPtr888P2 := actual_structPtr888P2;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    LengthOfInsert1 := actual_LengthOfInsert1;
    Insert1 := actual_Insert1;
    LengthOfInsert2 := actual_LengthOfInsert2;
    Insert2 := actual_Insert2;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    call {:si_unique_call 650} Tmp_274 := __HAVOC_malloc(4);
    call {:si_unique_call 651} Tmp_275 := __HAVOC_malloc(4);
    call {:si_unique_call 652} Tmp_277 := __HAVOC_malloc(4);
    call {:si_unique_call 653} Tmp_280 := __HAVOC_malloc(4);
    call {:si_unique_call 654} Tmp_283 := __HAVOC_malloc(4);
    dumpToAllocate := 0;
    call {:si_unique_call 655} sdv_do_paged_code_check();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Insert1 != 0;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Insert2 != 0;
    goto L16;

  L16:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} DeviceObject_9 != 0;
    goto L19;

  L19:
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    call {:si_unique_call 656} sdv_246 := SerialMemCompare(P1, 1, Tmp_282, 1);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_246 != 0;
    dumpToAllocate := 8;
    goto L24;

  L24:
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    call {:si_unique_call 657} sdv_247 := SerialMemCompare(P2, 1, Tmp_279, 1);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_247 != 0;
    dumpToAllocate := dumpToAllocate + 8;
    goto L30;

  L30:
    Tmp_276 := 48 + dumpToAllocate + LengthOfInsert1 + LengthOfInsert2;
    call {:si_unique_call 658} sdv_248 := IoAllocateErrorLogEntry(0, Tmp_276);
    errorLogEntry := sdv_248;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} errorLogEntry != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} dumpToAllocate != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_277;
    call {:si_unique_call 659} sdv_RtlCopyMemory(0, 0, 8);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} dumpToAllocate > 8;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_275;
    call {:si_unique_call 660} sdv_RtlCopyMemory(0, 0, 8);
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_283;
    ptrToFirstInsert := Tmp_283;
    goto L57;

  L57:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} LengthOfInsert1 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 661} sdv_RtlCopyMemory(0, 0, LengthOfInsert1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} LengthOfInsert2 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 662} sdv_RtlCopyMemory(0, 0, LengthOfInsert2);
    goto L59;

  L59:
    call {:si_unique_call 663} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} LengthOfInsert2 == 0;
    goto L59;

  anon30_Then:
    assume {:partition} LengthOfInsert1 == 0;
    goto L59;

  anon26_Then:
    assume {:partition} 8 >= dumpToAllocate;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_280;
    ptrToFirstInsert := Tmp_280;
    goto L57;

  anon29_Then:
    assume {:partition} dumpToAllocate == 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_274;
    ptrToFirstInsert := Tmp_274;
    goto L57;

  anon28_Then:
    assume {:partition} errorLogEntry == 0;
    goto L1;

  anon25_Then:
    assume {:partition} sdv_247 == 0;
    goto L30;

  anon24_Then:
    assume {:partition} sdv_246 == 0;
    goto L24;

  anon23_Then:
    assume {:partition} DeviceObject_9 == 0;
    goto L19;

  anon22_Then:
    assume {:partition} Insert2 == 0;
    LengthOfInsert2 := 0;
    goto L16;

  anon21_Then:
    assume {:partition} Insert1 == 0;
    LengthOfInsert1 := 0;
    goto L14;
}



procedure {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_10: int, actual_Irp_10: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_10: int, actual_Irp_10: int)
{
  var {:pointer} Tmp_284: int;
  var {:pointer} irpSp_2: int;
  var {:pointer} extension_7: int;
  var {:pointer} DeviceObject_10: int;
  var {:pointer} Irp_10: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_1655: int;

  anon0:
    call {:si_unique_call 664} vslice_dummy_var_190 := __HAVOC_malloc(4);
    DeviceObject_10 := actual_DeviceObject_10;
    Irp_10 := actual_Irp_10;
    call {:si_unique_call 665} Tmp_284 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    havoc extension_7;
    call {:si_unique_call 666} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_10);
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    call {:si_unique_call 667} vslice_dummy_var_191 := sdv_RemoveEntryList(0);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto L18;

  L18:
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    havoc vslice_dummy_var_1655;
    call {:si_unique_call 668} IoReleaseCancelSpinLock(vslice_dummy_var_1655);
    Tmp_284 := strConst__li2bpl3;
    call {:si_unique_call 669} vslice_dummy_var_192 := SerialDbgPrintEx(9, Tmp_284);
    call {:si_unique_call 670} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 671} SerialIRPEpilogue(extension_7);
    call {:si_unique_call 672} SLIC_SerialCancelQueued_exit(strConst__li2bpl0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L32;

  L32:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto L18;

  anon15_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 673} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto L18;

  anon17_Then:
    goto L18;

  anon16_Then:
    goto L32;

  anon14_Then:
    goto L18;
}



procedure {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_6: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_17: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_6: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_17: int)
{
  var {:pointer} s_p_e_c_i_a_l_15: int;
  var {:pointer} Tmp_288: int;
  var {:pointer} sdv_252: int;
  var {:pointer} sdv_253: int;
  var {:pointer} s_p_e_c_i_a_l_16: int;
  var {:scalar} s_p_e_c_i_a_l_17: int;
  var {:scalar} sdv_255: int;
  var {:pointer} sdv_256: int;
  var {:scalar} sdv_257: int;
  var {:pointer} s_p_e_c_i_a_l_18: int;
  var {:scalar} s_p_e_c_i_a_l_19: int;
  var {:scalar} s_p_e_c_i_a_l_20: int;
  var {:pointer} CurrentOpIrp_6: int;
  var {:pointer} IntervalTimer_1: int;
  var {:pointer} TotalTimer_1: int;
  var {:pointer} PDevExt_17: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_1656: int;
  var vslice_dummy_var_1657: int;
  var vslice_dummy_var_1658: int;
  var vslice_dummy_var_1659: int;

  anon0:
    call {:si_unique_call 674} vslice_dummy_var_193 := __HAVOC_malloc(4);
    CurrentOpIrp_6 := actual_CurrentOpIrp_6;
    IntervalTimer_1 := actual_IntervalTimer_1;
    TotalTimer_1 := actual_TotalTimer_1;
    PDevExt_17 := actual_PDevExt_17;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc Tmp_288;
    assume {:nonnull} Tmp_288 != 0;
    assume Tmp_288 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_288)] != 0;
    s_p_e_c_i_a_l_17 := 2;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_1656;
    call {:si_unique_call 675} sdv_252 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1656);
    assume {:nonnull} sdv_252 != 0;
    assume sdv_252 > 0;
    s_p_e_c_i_a_l_15 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_252)));
    assume {:nonnull} s_p_e_c_i_a_l_15 != 0;
    assume s_p_e_c_i_a_l_15 > 0;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_1657;
    call {:si_unique_call 676} vslice_dummy_var_194 := sdv_IoSetCancelRoutine(vslice_dummy_var_1657, 0);
    goto L4;

  L4:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IntervalTimer_1 != 0;
    call {:si_unique_call 677} sdv_255 := SerialCancelTimer(IntervalTimer_1, PDevExt_17);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_255 != 0;
    s_p_e_c_i_a_l_19 := 8;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_1658;
    call {:si_unique_call 678} sdv_256 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1658);
    assume {:nonnull} sdv_256 != 0;
    assume sdv_256 > 0;
    s_p_e_c_i_a_l_18 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_256)));
    assume {:nonnull} s_p_e_c_i_a_l_18 != 0;
    assume s_p_e_c_i_a_l_18 > 0;
    goto L16;

  L16:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} TotalTimer_1 != 0;
    call {:si_unique_call 679} sdv_257 := SerialCancelTimer(TotalTimer_1, PDevExt_17);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_257 != 0;
    s_p_e_c_i_a_l_20 := 4;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_1659;
    call {:si_unique_call 680} sdv_253 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1659);
    assume {:nonnull} sdv_253 != 0;
    assume sdv_253 > 0;
    s_p_e_c_i_a_l_16 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_253)));
    assume {:nonnull} s_p_e_c_i_a_l_16 != 0;
    assume s_p_e_c_i_a_l_16 > 0;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} sdv_257 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} TotalTimer_1 == 0;
    goto L1;

  anon13_Then:
    assume {:partition} sdv_255 == 0;
    goto L16;

  anon11_Then:
    assume {:partition} IntervalTimer_1 == 0;
    goto L16;

  anon15_Then:
    assume {:partition} Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_288)] == 0;
    goto L4;
}



procedure {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_18: int) returns (Tmp_290: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} Tmp_290 == 0 || Tmp_290 == -1073741536 || Tmp_290 == 259 || Tmp_290 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_18: int) returns (Tmp_290: int)
{
  var {:scalar} oldIrqlFlags: int;
  var {:scalar} oldIrql_5: int;
  var {:pointer} pIrpStack_5: int;
  var {:pointer} Tmp_291: int;
  var {:pointer} PIrp_10: int;
  var {:pointer} PDevExt_18: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_196: int;

  anon0:
    PIrp_10 := actual_PIrp_10;
    PDevExt_18 := actual_PDevExt_18;
    call {:si_unique_call 681} pIrpStack_5 := sdv_IoGetCurrentIrpStackLocation(PIrp_10);
    call {:si_unique_call 682} Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    call {:si_unique_call 683} sdv_KeAcquireSpinLock(0, Tmp_291);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    havoc oldIrqlFlags;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L14;

  L14:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L16;

  L16:
    call {:si_unique_call 684} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_290 := 0;
    goto L1;

  L1:
    return;

  anon29_Then:
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Tmp_290 := -1073741738;
    goto L1;

  anon27_Then:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto L27;

  L27:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 685} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_290 := 0;
    goto L1;

  anon33_Then:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    call {:si_unique_call 686} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_290 := 0;
    goto L1;

  anon35_Then:
    goto L33;

  L33:
    call {:si_unique_call 687} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    call {:si_unique_call 688} Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    call {:si_unique_call 689} IoAcquireCancelSpinLock(Tmp_291);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    havoc oldIrql_5;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 690} IoReleaseCancelSpinLock(oldIrql_5);
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Tmp_290 := -1073741536;
    goto L1;

  anon36_Then:
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    call {:si_unique_call 691} sdv_IoMarkIrpPending(0);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    call {:si_unique_call 692} vslice_dummy_var_195 := sdv_InsertTailList(StalledIrpQueue__SERIAL_DEVICE_EXTENSION(PDevExt_18), ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(PIrp_10))));
    call {:si_unique_call 693} vslice_dummy_var_196 := sdv_IoSetCancelRoutine(PIrp_10, li2bplFunctionConstant667);
    call {:si_unique_call 694} IoReleaseCancelSpinLock(oldIrql_5);
    Tmp_290 := 259;
    goto L1;

  anon34_Then:
    goto L33;

  anon31_Then:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    call {:si_unique_call 695} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_290 := 0;
    goto L1;

  anon32_Then:
    goto L27;

  anon30_Then:
    goto L16;

  anon28_Then:
    goto L16;

  anon25_Then:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 696} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_290 := 0;
    goto L1;

  anon26_Then:
    goto L14;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_197: int;

  anon0:
    call {:si_unique_call 697} vslice_dummy_var_197 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_294: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_294 == 0 || Tmp_294 == -1073741536 || Tmp_294 == 259 || Tmp_294 == -1073741738 || Tmp_294 == -1073741789 || Tmp_294 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_294: int)
{
  var {:pointer} Tmp_295: int;
  var {:pointer} Tmp_296: int;
  var {:scalar} Status: int;
  var {:pointer} IrpSp_2: int;
  var {:scalar} sdv_265: int;
  var {:pointer} Tmp_298: int;
  var {:scalar} status_13: int;
  var {:pointer} Buf: int;
  var {:pointer} Tmp_299: int;
  var {:pointer} DeviceObject_11: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;
  var vslice_dummy_var_1660: int;
  var vslice_dummy_var_1661: int;
  var vslice_dummy_var_1662: int;

  anon0:
    DeviceObject_11 := actual_DeviceObject_11;
    Irp_11 := actual_Irp_11;
    call {:si_unique_call 698} Tmp_295 := __HAVOC_malloc(72);
    call {:si_unique_call 699} Tmp_296 := __HAVOC_malloc(96);
    call {:si_unique_call 700} Tmp_299 := __HAVOC_malloc(72);
    call {:si_unique_call 701} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_1660;
    call {:si_unique_call 702} status_13 := SerialIRPPrologue(Irp_11, vslice_dummy_var_1660);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_13 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_13 != 259;
    Tmp_299 := strConst__li2bpl3;
    call {:si_unique_call 703} vslice_dummy_var_198 := SerialDbgPrintEx(9, Tmp_299);
    call {:si_unique_call 704} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_1661;
    call {:si_unique_call 705} SerialIRPEpilogue(vslice_dummy_var_1661);
    goto L18;

  L18:
    Tmp_294 := status_13;
    goto L1;

  L1:
    call {:si_unique_call 706} SLIC_SerialQueryInformationFile_exit(strConst__li2bpl0);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} status_13 == 259;
    goto L18;

  anon17_Then:
    assume {:partition} status_13 == 0;
    Tmp_296 := strConst__li2bpl41;
    call {:si_unique_call 707} vslice_dummy_var_199 := SerialDbgPrintEx(9, Tmp_296);
    call {:si_unique_call 708} sdv_265 := SerialCompleteIfError(DeviceObject_11, Irp_11);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_265 != 0;
    Tmp_294 := -1073741536;
    goto L1;

  anon19_Then:
    assume {:partition} sdv_265 == 0;
    call {:si_unique_call 709} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_11);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Status := 0;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Buf;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto L44;

  L44:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Tmp_295 := strConst__li2bpl3;
    call {:si_unique_call 710} vslice_dummy_var_200 := SerialDbgPrintEx(9, Tmp_295);
    call {:si_unique_call 711} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_1662;
    call {:si_unique_call 712} SerialIRPEpilogue(vslice_dummy_var_1662);
    Tmp_294 := Status;
    goto L1;

  anon21_Then:
    Status := -1073741789;
    goto L44;

  anon24_Then:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Status := -1073741789;
    goto L44;

  anon22_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Tmp_298;
    assume {:nonnull} Tmp_298 != 0;
    assume Tmp_298 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto L44;

  anon20_Then:
    Status := -1073741811;
    goto L44;
}



procedure {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_12: int, actual_Irp_12: int) returns (Tmp_300: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_300 == 0 || Tmp_300 == -1073741536 || Tmp_300 == 259 || Tmp_300 == -1073741738 || Tmp_300 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_12: int, actual_Irp_12: int) returns (Tmp_300: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} sdv_267: int;
  var {:pointer} Tmp_302: int;
  var {:pointer} sdv_270: int;
  var {:scalar} sdv_271: int;
  var {:pointer} Tmp_303: int;
  var {:pointer} Tmp_304: int;
  var {:pointer} DeviceObject_12: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_1663: int;
  var vslice_dummy_var_1664: int;
  var vslice_dummy_var_1665: int;

  anon0:
    DeviceObject_12 := actual_DeviceObject_12;
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 713} Tmp_302 := __HAVOC_malloc(72);
    call {:si_unique_call 714} Tmp_303 := __HAVOC_malloc(96);
    call {:si_unique_call 715} Tmp_304 := __HAVOC_malloc(72);
    call {:si_unique_call 716} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_1663;
    call {:si_unique_call 717} Status_1 := SerialIRPPrologue(Irp_12, vslice_dummy_var_1663);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Status_1 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Status_1 != 259;
    Tmp_302 := strConst__li2bpl3;
    call {:si_unique_call 718} vslice_dummy_var_201 := SerialDbgPrintEx(9, Tmp_302);
    call {:si_unique_call 719} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_1664;
    call {:si_unique_call 720} SerialIRPEpilogue(vslice_dummy_var_1664);
    goto L16;

  L16:
    Tmp_300 := Status_1;
    goto L1;

  L1:
    call {:si_unique_call 721} SLIC_SerialSetInformationFile_exit(strConst__li2bpl0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} Status_1 == 259;
    goto L16;

  anon13_Then:
    assume {:partition} Status_1 == 0;
    Tmp_303 := strConst__li2bpl41;
    call {:si_unique_call 722} vslice_dummy_var_202 := SerialDbgPrintEx(9, Tmp_303);
    call {:si_unique_call 723} sdv_271 := SerialCompleteIfError(DeviceObject_12, Irp_12);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_271 != 0;
    Tmp_300 := -1073741536;
    goto L1;

  anon15_Then:
    assume {:partition} sdv_271 == 0;
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    call {:si_unique_call 724} sdv_270 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} sdv_270 != 0;
    assume sdv_270 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L39;

  L39:
    Status_1 := 0;
    goto L40;

  L40:
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    Tmp_304 := strConst__li2bpl3;
    call {:si_unique_call 725} vslice_dummy_var_203 := SerialDbgPrintEx(9, Tmp_304);
    call {:si_unique_call 726} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_1665;
    call {:si_unique_call 727} SerialIRPEpilogue(vslice_dummy_var_1665);
    Tmp_300 := Status_1;
    goto L1;

  anon16_Then:
    call {:si_unique_call 728} sdv_267 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} sdv_267 != 0;
    assume sdv_267 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Status_1 := -1073741811;
    goto L40;

  anon17_Then:
    goto L39;
}



procedure {:origName "SerialStartRead"} SerialStartRead(actual_Extension_15: int) returns (Tmp_305: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartRead"} SerialStartRead(actual_Extension_15: int) returns (Tmp_305: int)
{
  var {:scalar} localStatus_1: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} Tmp_306: int;
  var {:pointer} Tmp_307: int;
  var {:pointer} Tmp_308: int;
  var {:pointer} sdv_273: int;
  var {:pointer} Tmp_309: int;
  var {:pointer} Tmp_310: int;
  var {:pointer} Tmp_311: int;
  var {:pointer} sdv_274: int;
  var {:pointer} Tmp_312: int;
  var {:pointer} Tmp_313: int;
  var {:scalar} totalTime: int;
  var {:scalar} os2ssreturn: int;
  var {:scalar} timeoutsForIrp: int;
  var {:scalar} updateChar: int;
  var {:scalar} setFirstStatus: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} useTotalTimer: int;
  var {:scalar} multiplierVal: int;
  var {:scalar} crunchDownToOne: int;
  var {:pointer} sdv_279: int;
  var {:scalar} s_p_e_c_i_a_l_22: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_281: int;
  var {:scalar} constantVal: int;
  var {:pointer} s_p_e_c_i_a_l_23: int;
  var {:pointer} sdv_285: int;
  var {:scalar} controlIrql: int;
  var {:pointer} Tmp_314: int;
  var {:scalar} s_p_e_c_i_a_l_24: int;
  var {:scalar} returnWithWhatsPresent: int;
  var {:scalar} useIntervalTimer: int;
  var {:pointer} Tmp_315: int;
  var {:pointer} sdv_288: int;
  var {:scalar} firstStatus: int;
  var {:pointer} Extension_15: int;
  var boogieTmp: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_1666: int;
  var vslice_dummy_var_1667: int;
  var vslice_dummy_var_1668: int;
  var vslice_dummy_var_1669: int;
  var vslice_dummy_var_1670: int;
  var vslice_dummy_var_1671: int;
  var vslice_dummy_var_1672: int;

  anon0:
    call {:si_unique_call 729} totalTime := __HAVOC_malloc(20);
    call {:si_unique_call 730} timeoutsForIrp := __HAVOC_malloc(20);
    call {:si_unique_call 731} updateChar := __HAVOC_malloc(12);
    call {:si_unique_call 732} newIrp_1 := __HAVOC_malloc(4);
    Extension_15 := actual_Extension_15;
    call {:si_unique_call 733} Tmp_309 := __HAVOC_malloc(84);
    call {:si_unique_call 734} Tmp_314 := __HAVOC_malloc(88);
    setFirstStatus := 0;
    Tmp_314 := strConst__li2bpl64;
    call {:si_unique_call 735} vslice_dummy_var_207 := SerialDbgPrintEx(2, Tmp_314);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto L23;

  L23:
    call {:si_unique_call 736} localStatus_1, Tmp_307, Tmp_308, sdv_273, Tmp_310, Tmp_311, Tmp_312, Tmp_313, os2ssreturn, setFirstStatus, useTotalTimer, multiplierVal, crunchDownToOne, sdv_279, oldIrql_6, sdv_281, constantVal, controlIrql, returnWithWhatsPresent, useIntervalTimer, Tmp_315, sdv_288, firstStatus, boogieTmp, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_209 := SerialStartRead_loop_L23(localStatus_1, Tmp_307, Tmp_308, sdv_273, Tmp_310, Tmp_311, Tmp_312, Tmp_313, totalTime, os2ssreturn, timeoutsForIrp, updateChar, setFirstStatus, newIrp_1, useTotalTimer, multiplierVal, crunchDownToOne, sdv_279, oldIrql_6, sdv_281, constantVal, controlIrql, returnWithWhatsPresent, useIntervalTimer, Tmp_315, sdv_288, firstStatus, Extension_15, boogieTmp, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_209);
    goto L23_last;

  L23_last:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_1672;
    call {:si_unique_call 767} sdv_279 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1672);
    assume {:nonnull} sdv_279 != 0;
    assume sdv_279 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 737} localStatus_1 := SerialResizeBuffer(Extension_15);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 738} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15), ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_15), newIrp_1, 1, Extension_15);
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    Tmp_309 := strConst__li2bpl63;
    call {:si_unique_call 739} vslice_dummy_var_208 := SerialDbgPrintEx(2, Tmp_309);
    Tmp_305 := firstStatus;
    goto L1;

  L1:
    return;

  anon61_Then:
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon60_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := localStatus_1;
    setFirstStatus := 1;
    goto L37;

  anon59_Then:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_1666;
    call {:si_unique_call 740} sdv_281 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1666);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} sdv_281 != 0;
    assume sdv_281 > 0;
    useTotalTimer := 0;
    returnWithWhatsPresent := 0;
    os2ssreturn := 0;
    crunchDownToOne := 0;
    useIntervalTimer := 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 741} vslice_dummy_var_209 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 742} vslice_dummy_var_204 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    call {:si_unique_call 743} Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    call {:si_unique_call 744} sdv_KeAcquireSpinLock(0, Tmp_313);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    havoc controlIrql;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    call {:si_unique_call 745} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    useIntervalTimer := 1;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L66;

  L66:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto L76;

  L76:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  L83:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} useTotalTimer != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} totalTime != 0;
    assume totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 746} Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    call {:si_unique_call 747} sdv_KeAcquireSpinLock(0, Tmp_313);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    havoc controlIrql;
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    call {:si_unique_call 748} boogieTmp := SerialGetCharsFromIntBuffer(Extension_15);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 749} vslice_dummy_var_205 := KeSynchronizeExecution(0, li2bplFunctionConstant721, 0);
    call {:si_unique_call 750} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_308;
    assume {:nonnull} Tmp_308 != 0;
    assume Tmp_308 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon83_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon72_Then:
    assume {:partition} returnWithWhatsPresent == 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} os2ssreturn != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_307;
    assume {:nonnull} Tmp_307 != 0;
    assume Tmp_307 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto L105;

  L105:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_1667;
    call {:si_unique_call 751} sdv_288 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1667);
    assume {:nonnull} sdv_288 != 0;
    assume sdv_288 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_288)))] := 0;
    call {:si_unique_call 752} Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    call {:si_unique_call 753} IoAcquireCancelSpinLock(Tmp_313);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    havoc oldIrql_6;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_310;
    assume {:nonnull} Tmp_310 != 0;
    assume Tmp_310 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 754} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 755} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_315;
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_311;
    assume {:nonnull} Tmp_311 != 0;
    assume Tmp_311 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := -1073741536;
    setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon85_Then:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} crunchDownToOne != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_1668;
    call {:si_unique_call 756} sdv_273 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1668);
    assume {:nonnull} sdv_273 != 0;
    assume sdv_273 > 0;
    goto L126;

  L126:
    call {:si_unique_call 757} vslice_dummy_var_206 := KeSynchronizeExecution(0, li2bplFunctionConstant722, 0);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    call {:si_unique_call 758} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 759} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_312;
    assume {:nonnull} Tmp_312 != 0;
    assume Tmp_312 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon87_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon76_Then:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} useTotalTimer != 0;
    s_p_e_c_i_a_l_22 := 4;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_1669;
    call {:si_unique_call 760} sdv_274 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1669);
    assume {:nonnull} sdv_274 != 0;
    assume sdv_274 > 0;
    s_p_e_c_i_a_l_21 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_274)));
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 761} vslice_dummy_var_210 := SerialSetTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), totalTime, TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto L146;

  L146:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} useIntervalTimer != 0;
    s_p_e_c_i_a_l_24 := 8;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_1670;
    call {:si_unique_call 762} sdv_285 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1670);
    assume {:nonnull} sdv_285 != 0;
    assume sdv_285 > 0;
    s_p_e_c_i_a_l_23 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_285)));
    assume {:nonnull} s_p_e_c_i_a_l_23 != 0;
    assume s_p_e_c_i_a_l_23 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_306;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Tmp_306 != 0;
    assume Tmp_306 > 0;
    havoc vslice_dummy_var_1671;
    call {:si_unique_call 763} vslice_dummy_var_211 := SerialSetTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), vslice_dummy_var_1671, IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto L158;

  L158:
    call {:si_unique_call 764} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 765} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 766} sdv_KeReleaseSpinLock(0, controlIrql);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} setFirstStatus != 0;
    goto L183;

  L183:
    Tmp_305 := firstStatus;
    goto L1;

  anon79_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 259;
    goto L183;

  anon78_Then:
    assume {:partition} useIntervalTimer == 0;
    goto L158;

  anon77_Then:
    assume {:partition} useTotalTimer == 0;
    goto L146;

  anon75_Then:
    assume {:partition} crunchDownToOne == 0;
    goto L126;

  anon84_Then:
    goto L94;

  anon74_Then:
    assume {:partition} os2ssreturn == 0;
    goto L105;

  anon73_Then:
    goto L94;

  anon71_Then:
    assume {:partition} useTotalTimer == 0;
    goto L84;

  anon70_Then:
    goto L77;

  L77:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    crunchDownToOne := 1;
    multiplierVal := 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon80_Then:
    goto L83;

  anon69_Then:
    goto L83;

  anon68_Then:
    goto L77;

  anon66_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    returnWithWhatsPresent := 1;
    goto L83;

  anon67_Then:
    goto L76;

  anon63_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto L192;

  L192:
    useTotalTimer := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon65_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto L192;

  anon81_Then:
    goto L83;

  anon82_Then:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L66;

  anon64_Then:
    goto L66;

  anon62_Then:
    goto L66;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_212: int;

  anon0:
    call {:si_unique_call 768} vslice_dummy_var_212 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_16: int, actual_NewBuffer: int) returns (Tmp_318: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_16: int, actual_NewBuffer: int) returns (Tmp_318: int)
{
  var {:scalar} firstTryNumberToGet: int;
  var {:scalar} numberOfCharsMoved: int;
  var {:scalar} Tmp_320: int;
  var {:pointer} Extension_16: int;
  var {:pointer} NewBuffer: int;

  anon0:
    Extension_16 := actual_Extension_16;
    NewBuffer := actual_NewBuffer;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc numberOfCharsMoved;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} numberOfCharsMoved != 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc firstTryNumberToGet;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} firstTryNumberToGet >= numberOfCharsMoved;
    call {:si_unique_call 769} sdv_RtlMoveMemory(0, 0, numberOfCharsMoved);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  L6:
    Tmp_318 := numberOfCharsMoved;
    return;

  anon7_Then:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  anon9_Then:
    assume {:partition} numberOfCharsMoved > firstTryNumberToGet;
    call {:si_unique_call 770} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet);
    Tmp_320 := numberOfCharsMoved - firstTryNumberToGet;
    call {:si_unique_call 771} sdv_RtlMoveMemory(0, 0, Tmp_320);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  anon8_Then:
    assume {:partition} numberOfCharsMoved == 0;
    goto L6;
}



procedure {:origName "SerialCompleteRead"} SerialCompleteRead(actual_Dpc_6: int, actual_DeferredContext_4: int, actual_SystemContext1_5: int, actual_SystemContext2_5: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCompleteRead"} SerialCompleteRead(actual_Dpc_6: int, actual_DeferredContext_4: int, actual_SystemContext1_5: int, actual_SystemContext2_5: int)
{
  var {:pointer} Tmp_322: int;
  var {:pointer} Tmp_324: int;
  var {:pointer} Tmp_325: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} extension_8: int;
  var {:pointer} Dpc_6: int;
  var {:pointer} DeferredContext_4: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;

  anon0:
    call {:si_unique_call 772} vslice_dummy_var_213 := __HAVOC_malloc(4);
    Dpc_6 := actual_Dpc_6;
    DeferredContext_4 := actual_DeferredContext_4;
    call {:si_unique_call 773} Tmp_322 := __HAVOC_malloc(100);
    call {:si_unique_call 774} Tmp_324 := __HAVOC_malloc(100);
    extension_8 := DeferredContext_4;
    Tmp_324 := strConst__li2bpl66;
    call {:si_unique_call 775} vslice_dummy_var_214 := SerialDbgPrintEx(2, Tmp_324);
    call {:si_unique_call 776} Tmp_325 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_325 != 0;
    assume Tmp_325 > 0;
    call {:si_unique_call 777} IoAcquireCancelSpinLock(Tmp_325);
    assume {:nonnull} Tmp_325 != 0;
    assume Tmp_325 > 0;
    havoc oldIrql_7;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 778} SerialTryToCompleteCurrent#1(extension_8, 0, oldIrql_7, 0, CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_8), ReadQueue__SERIAL_DEVICE_EXTENSION(extension_8), ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(extension_8), ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(extension_8), li2bplFunctionConstant720, li2bplFunctionConstant660, 1);
    call {:si_unique_call 779} SerialDpcEpilogue(extension_8, Dpc_6);
    Tmp_322 := strConst__li2bpl65;
    call {:si_unique_call 780} vslice_dummy_var_215 := SerialDbgPrintEx(2, Tmp_322);
    call {:si_unique_call 781} SLIC_SerialCompleteRead_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialRead"} SerialRead(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_326: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialRead"} SerialRead(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_326: int)
{
  var {:pointer} Tmp_327: int;
  var {:pointer} Tmp_328: int;
  var {:scalar} sdv_293: int;
  var {:pointer} sdv_295: int;
  var {:pointer} Tmp_329: int;
  var {:pointer} Tmp_330: int;
  var {:pointer} Tmp_332: int;
  var {:pointer} Tmp_333: int;
  var {:scalar} status_14: int;
  var {:pointer} extension_9: int;
  var {:pointer} Tmp_334: int;
  var {:pointer} Tmp_335: int;
  var {:pointer} DeviceObject_13: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;

  anon0:
    DeviceObject_13 := actual_DeviceObject_13;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 782} Tmp_327 := __HAVOC_malloc(96);
    call {:si_unique_call 783} Tmp_328 := __HAVOC_malloc(72);
    call {:si_unique_call 784} Tmp_329 := __HAVOC_malloc(80);
    call {:si_unique_call 785} Tmp_330 := __HAVOC_malloc(80);
    call {:si_unique_call 786} Tmp_332 := __HAVOC_malloc(80);
    call {:si_unique_call 787} Tmp_333 := __HAVOC_malloc(80);
    call {:si_unique_call 788} Tmp_334 := __HAVOC_malloc(84);
    call {:si_unique_call 789} Tmp_335 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_13 != 0;
    assume DeviceObject_13 > 0;
    havoc extension_9;
    Tmp_334 := strConst__li2bpl71;
    call {:si_unique_call 790} vslice_dummy_var_216 := SerialDbgPrintEx(2, Tmp_334);
    call {:si_unique_call 791} status_14 := SerialIRPPrologue(Irp_13, extension_9);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_14 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_14 != 259;
    Tmp_335 := strConst__li2bpl3;
    call {:si_unique_call 792} vslice_dummy_var_217 := SerialDbgPrintEx(9, Tmp_335);
    call {:si_unique_call 793} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 794} SerialIRPEpilogue(extension_9);
    goto L19;

  L19:
    Tmp_329 := strConst__li2bpl67;
    call {:si_unique_call 795} vslice_dummy_var_218 := SerialDbgPrintEx(2, Tmp_329);
    Tmp_326 := status_14;
    goto L1;

  L1:
    call {:si_unique_call 796} SLIC_SerialRead_exit(strConst__li2bpl0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} status_14 == 259;
    goto L19;

  anon13_Then:
    assume {:partition} status_14 == 0;
    Tmp_327 := strConst__li2bpl41;
    call {:si_unique_call 797} vslice_dummy_var_219 := SerialDbgPrintEx(9, Tmp_327);
    call {:si_unique_call 798} sdv_293 := SerialCompleteIfError(DeviceObject_13, Irp_13);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_293 != 0;
    Tmp_330 := strConst__li2bpl68;
    call {:si_unique_call 799} vslice_dummy_var_220 := SerialDbgPrintEx(2, Tmp_330);
    Tmp_326 := -1073741536;
    goto L1;

  anon15_Then:
    assume {:partition} sdv_293 == 0;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 800} sdv_295 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    assume {:nonnull} sdv_295 != 0;
    assume sdv_295 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} extension_9 != 0;
    assume extension_9 > 0;
    call {:si_unique_call 801} status_14 := SerialStartOrQueue(extension_9, Irp_13, ReadQueue__SERIAL_DEVICE_EXTENSION(extension_9), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_9), li2bplFunctionConstant720);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    Tmp_332 := strConst__li2bpl69;
    call {:si_unique_call 802} vslice_dummy_var_221 := SerialDbgPrintEx(2, Tmp_332);
    Tmp_326 := status_14;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    Tmp_328 := strConst__li2bpl3;
    call {:si_unique_call 803} vslice_dummy_var_222 := SerialDbgPrintEx(9, Tmp_328);
    call {:si_unique_call 804} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 805} SerialIRPEpilogue(extension_9);
    Tmp_333 := strConst__li2bpl70;
    call {:si_unique_call 806} vslice_dummy_var_223 := SerialDbgPrintEx(2, Tmp_333);
    Tmp_326 := 0;
    goto L1;
}



procedure {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_17: int) returns (Tmp_336: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_17: int) returns (Tmp_336: int)
{
  var {:scalar} numberOfCharsToGet: int;
  var {:pointer} Tmp_338: int;
  var {:scalar} firstTryNumberToGet_1: int;
  var {:pointer} Tmp_339: int;
  var {:pointer} Tmp_343: int;
  var {:pointer} Tmp_344: int;
  var {:scalar} Tmp_345: int;
  var {:pointer} Tmp_346: int;
  var {:pointer} Extension_17: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_1673: int;
  var vslice_dummy_var_1674: int;
  var vslice_dummy_var_1675: int;

  anon0:
    Extension_17 := actual_Extension_17;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc numberOfCharsToGet;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc numberOfCharsToGet;
    goto L7;

  L7:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} numberOfCharsToGet != 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc firstTryNumberToGet_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} firstTryNumberToGet_1 > numberOfCharsToGet;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc vslice_dummy_var_1673;
    call {:si_unique_call 807} vslice_dummy_var_225 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1673);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_338;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    call {:si_unique_call 808} sdv_RtlMoveMemory(0, 0, numberOfCharsToGet);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  L9:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_343;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_346;
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    Tmp_336 := numberOfCharsToGet;
    return;

  anon12_Then:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  anon11_Then:
    assume {:partition} numberOfCharsToGet >= firstTryNumberToGet_1;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc vslice_dummy_var_1674;
    call {:si_unique_call 809} vslice_dummy_var_224 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1674);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_339;
    assume {:nonnull} Tmp_339 != 0;
    assume Tmp_339 > 0;
    call {:si_unique_call 810} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet_1);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_345 := numberOfCharsToGet - firstTryNumberToGet_1;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc vslice_dummy_var_1675;
    call {:si_unique_call 811} vslice_dummy_var_226 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1675);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_344;
    assume {:nonnull} Tmp_344 != 0;
    assume Tmp_344 > 0;
    call {:si_unique_call 812} sdv_RtlMoveMemory(0, 0, Tmp_345);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  anon9_Then:
    assume {:partition} numberOfCharsToGet == 0;
    goto L9;

  anon10_Then:
    goto L7;
}



procedure {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_18: int) returns (Tmp_347: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_347 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_18: int) returns (Tmp_347: int)
{
  var {:pointer} Tmp_348: int;
  var {:pointer} Tmp_349: int;
  var {:pointer} irpSp_3: int;
  var {:pointer} newBuffer: int;
  var {:pointer} Tmp_350: int;
  var {:pointer} rs: int;
  var {:scalar} controlIrql_1: int;
  var {:scalar} rp: int;
  var {:pointer} Tmp_351: int;
  var {:pointer} Extension_18: int;
  var boogieTmp: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_1676: int;

  anon0:
    call {:si_unique_call 813} rp := __HAVOC_malloc(20);
    Extension_18 := actual_Extension_18;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_351;
    assume {:nonnull} Tmp_351 != 0;
    assume Tmp_351 > 0;
    havoc rs;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc vslice_dummy_var_1676;
    call {:si_unique_call 814} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1676);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    havoc newBuffer;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_350;
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_349;
    assume {:nonnull} Tmp_349 != 0;
    assume Tmp_349 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    call {:si_unique_call 815} Tmp_348 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    call {:si_unique_call 816} sdv_KeAcquireSpinLock(0, Tmp_348);
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    havoc controlIrql_1;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    call {:si_unique_call 817} boogieTmp := SerialMoveToNewIntBuffer(Extension_18, newBuffer);
    call {:si_unique_call 818} vslice_dummy_var_227 := KeSynchronizeExecution(0, li2bplFunctionConstant731, 0);
    call {:si_unique_call 819} sdv_KeReleaseSpinLock(0, controlIrql_1);
    call {:si_unique_call 820} sdv_ExFreePool(0);
    goto L20;

  L20:
    Tmp_347 := 0;
    return;

  anon3_Then:
    call {:si_unique_call 821} sdv_ExFreePool(0);
    goto L20;
}



procedure {:origName "SerialCancelCurrentRead"} SerialCancelCurrentRead(actual_DeviceObject_14: int, actual_Irp_14: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCancelCurrentRead"} SerialCancelCurrentRead(actual_DeviceObject_14: int, actual_Irp_14: int)
{
  var {:pointer} extension_10: int;
  var {:pointer} DeviceObject_14: int;
  var {:pointer} Irp_14: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_1677: int;

  anon0:
    call {:si_unique_call 822} vslice_dummy_var_228 := __HAVOC_malloc(4);
    DeviceObject_14 := actual_DeviceObject_14;
    Irp_14 := actual_Irp_14;
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    havoc extension_10;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    havoc vslice_dummy_var_1677;
    call {:si_unique_call 823} SerialTryToCompleteCurrent#1(extension_10, li2bplFunctionConstant725, vslice_dummy_var_1677, -1073741536, CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_10), ReadQueue__SERIAL_DEVICE_EXTENSION(extension_10), ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(extension_10), ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(extension_10), li2bplFunctionConstant720, li2bplFunctionConstant660, 2);
    call {:si_unique_call 824} SLIC_SerialCancelCurrentRead_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_229: int;

  anon0:
    call {:si_unique_call 825} vslice_dummy_var_229 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCIsrSw"} SerialCIsrSw(actual_InterruptObject: int, actual_Context_5: int) returns (Tmp_356: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCIsrSw"} SerialCIsrSw(actual_InterruptObject: int, actual_Context_5: int) returns (Tmp_356: int)
{
  var {:pointer} csw: int;
  var {:pointer} Context_5: int;

  anon0:
    Context_5 := actual_Context_5;
    csw := Context_5;
    assume {:nonnull} csw != 0;
    assume csw > 0;
    call {:si_unique_call 826} SLIC_SerialCIsrSw_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_15: int, actual_Irp_15: int, actual_SerialSyncEventIn: int) returns (Tmp_358: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_358 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_15: int, actual_Irp_15: int, actual_SerialSyncEventIn: int) returns (Tmp_358: int)
{
  var {:pointer} SerialSyncEvent: int;
  var {:pointer} SerialSyncEventIn: int;
  var vslice_dummy_var_230: int;

  anon0:
    SerialSyncEventIn := actual_SerialSyncEventIn;
    SerialSyncEvent := SerialSyncEventIn;
    call {:si_unique_call 827} vslice_dummy_var_230 := KeSetEvent(SerialSyncEvent, 0, 0);
    Tmp_358 := -1073741802;
    call {:si_unique_call 828} SLIC_SerialSyncCompletion_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_231: int;

  anon0:
    call {:si_unique_call 829} vslice_dummy_var_231 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt_19: int, actual_PDrvObj: int) returns (Tmp_362: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_362 == -1073741811 || Tmp_362 == -1073741808 || Tmp_362 == -1073741823 || Tmp_362 == 0 || Tmp_362 == 5 || Tmp_362 == -1073741789 || Tmp_362 == -1073741670 || Tmp_362 == -1073741772 || Tmp_362 == -1073741824;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt_19: int, actual_PDrvObj: int) returns (Tmp_362: int)
{
  var {:scalar} Tmp_363: int;
  var {:pointer} Tmp_364: int;
  var {:scalar} bufLen: int;
  var {:scalar} Tmp_365: int;
  var {:scalar} Tmp_367: int;
  var {:scalar} Tmp_368: int;
  var {:scalar} Tmp_369: int;
  var {:pointer} Tmp_370: int;
  var {:pointer} keyHandle: int;
  var {:scalar} Tmp_373: int;
  var {:pointer} Tmp_374: int;
  var {:pointer} pRegName: int;
  var {:scalar} sdv_318: int;
  var {:pointer} sdv_320: int;
  var {:scalar} Tmp_376: int;
  var {:scalar} Tmp_377: int;
  var {:scalar} Tmp_378: int;
  var {:pointer} Tmp_379: int;
  var {:scalar} Tmp_380: int;
  var {:pointer} Tmp_382: int;
  var {:scalar} Tmp_386: int;
  var {:pointer} sdv_330: int;
  var {:scalar} status_15: int;
  var {:pointer} Tmp_387: int;
  var {:pointer} pDevObj_1: int;
  var {:pointer} Tmp_389: int;
  var {:pointer} Tmp_392: int;
  var {:scalar} Tmp_393: int;
  var {:pointer} Tmp_395: int;
  var {:pointer} PDevExt_19: int;
  var {:pointer} PDrvObj: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;
  var vslice_dummy_var_248: int;

  anon0:
    call {:si_unique_call 830} Tmp_363 := __HAVOC_malloc(20);
    call {:si_unique_call 831} Tmp_365 := __HAVOC_malloc(20);
    call {:si_unique_call 832} Tmp_367 := __HAVOC_malloc(20);
    call {:si_unique_call 833} Tmp_368 := __HAVOC_malloc(20);
    call {:si_unique_call 834} Tmp_373 := __HAVOC_malloc(20);
    call {:si_unique_call 835} pRegName := __HAVOC_malloc(4);
    call {:si_unique_call 836} Tmp_378 := __HAVOC_malloc(20);
    call {:si_unique_call 837} Tmp_380 := __HAVOC_malloc(20);
    call {:si_unique_call 838} Tmp_386 := __HAVOC_malloc(20);
    PDevExt_19 := actual_PDevExt_19;
    PDrvObj := actual_PDrvObj;
    call {:si_unique_call 839} Tmp_364 := __HAVOC_malloc(156);
    call {:si_unique_call 840} vslice_dummy_var_237 := __HAVOC_malloc(44);
    call {:si_unique_call 841} Tmp_370 := __HAVOC_malloc(184);
    call {:si_unique_call 842} Tmp_374 := __HAVOC_malloc(64);
    call {:si_unique_call 843} Tmp_379 := __HAVOC_malloc(156);
    call {:si_unique_call 844} Tmp_382 := __HAVOC_malloc(192);
    call {:si_unique_call 845} vslice_dummy_var_238 := __HAVOC_malloc(44);
    call {:si_unique_call 846} Tmp_387 := __HAVOC_malloc(236);
    call {:si_unique_call 847} Tmp_389 := __HAVOC_malloc(100);
    call {:si_unique_call 848} Tmp_395 := __HAVOC_malloc(200);
    status_15 := 0;
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    call {:si_unique_call 849} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    havoc pDevObj_1;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 850} status_15 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_15 != 0;
    Tmp_362 := status_15;
    goto L1;

  L1:
    return;

  anon35_Then:
    assume {:partition} status_15 == 0;
    Tmp_389 := strConst__li2bpl72;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 851} vslice_dummy_var_239 := SerialGetRegistryKeyValue(keyHandle, Tmp_389, 50, SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt_19), 4);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 852} vslice_dummy_var_232 := ZwClose(0);
    Tmp_362 := 0;
    goto L1;

  anon36_Then:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 853} status_15 := SerialReadSymName(PDevExt_19, keyHandle, SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt_19), pRegName);
    call {:si_unique_call 854} vslice_dummy_var_233 := ZwClose(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_15 < 0;
    goto L111;

  L111:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} status_15 >= 0;
    goto L113;

  L113:
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    call {:si_unique_call 855} sdv_ExFreePool(0);
    goto L114;

  L114:
    Tmp_362 := status_15;
    goto L1;

  anon44_Then:
    goto L114;

  anon42_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] != 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 856} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] := 0;
    goto L118;

  L118:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 857} vslice_dummy_var_235 := IoDeleteSymbolicLink(0);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto L123;

  L123:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] != 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 858} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] := 0;
    goto L128;

  L128:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] != 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 859} vslice_dummy_var_242 := RtlDeleteRegistryValue(4, 0, 0);
    goto L133;

  L133:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] != 0;
    call {:si_unique_call 860} vslice_dummy_var_236 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 861} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] := 0;
    goto L137;

  L137:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(PDevExt_19))] != 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 862} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(PDevExt_19))] := 0;
    goto L113;

  anon49_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(PDevExt_19))] == 0;
    goto L113;

  anon48_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] == 0;
    goto L137;

  anon47_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] == 0;
    goto L133;

  anon46_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] == 0;
    goto L128;

  anon45_Then:
    goto L123;

  anon43_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] == 0;
    goto L118;

  anon37_Then:
    assume {:partition} 0 <= status_15;
    bufLen := sdv_318 * 2 + 2;
    call {:si_unique_call 863} sdv_330 := ExAllocatePoolWithTag(1, bufLen, -666022077);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(PDevExt_19))] := sdv_330;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(PDevExt_19))] != 0;
    call {:si_unique_call 864} sdv_RtlZeroMemory(0, bufLen);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 865} vslice_dummy_var_240 := corral_nondet();
    call {:si_unique_call 866} sdv_320 := ExAllocatePoolWithTag(1, 66, -666022077);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] := sdv_320;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] != 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    havoc Tmp_369;
    call {:si_unique_call 867} sdv_RtlZeroMemory(0, Tmp_369);
    call {:si_unique_call 868} vslice_dummy_var_234 := corral_nondet();
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Tmp_392 := Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(PDevExt_19))];
    call {:si_unique_call 869} sdv_RtlZeroMemory(0, 2);
    Tmp_374 := strConst__li2bpl73;
    call {:si_unique_call 870} vslice_dummy_var_241 := SerialDbgPrintEx(4, Tmp_374);
    call {:si_unique_call 871} status_15 := IoCreateSymbolicLink(0, 0);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    havoc Tmp_376;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 872} status_15 := RtlWriteRegistryValue(4, 0, 0, 1, 0, Tmp_376);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 873} status_15 := IoRegisterDeviceInterface(0, 0, 0, DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt_19));
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} status_15 >= 0;
    call {:si_unique_call 874} status_15 := IoSetDeviceInterfaceState(0, 1);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_15 >= 0;
    goto L111;

  anon41_Then:
    assume {:partition} 0 > status_15;
    Tmp_370 := strConst__li2bpl75;
    call {:si_unique_call 875} vslice_dummy_var_243 := SerialDbgPrintEx(14, Tmp_370);
    goto L111;

  anon40_Then:
    assume {:partition} 0 > status_15;
    Tmp_395 := strConst__li2bpl74;
    call {:si_unique_call 876} vslice_dummy_var_244 := SerialDbgPrintEx(14, Tmp_395);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] := 0;
    goto L111;

  anon39_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    havoc Tmp_377;
    assume {:nonnull} Tmp_380 != 0;
    assume Tmp_380 > 0;
    assume {:nonnull} Tmp_380 != 0;
    assume Tmp_380 > 0;
    assume {:nonnull} Tmp_380 != 0;
    assume Tmp_380 > 0;
    assume {:nonnull} Tmp_380 != 0;
    assume Tmp_380 > 0;
    assume {:nonnull} Tmp_380 != 0;
    assume Tmp_380 > 0;
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 877} SerialLogError(PDrvObj, pDevObj_1, Tmp_363, Tmp_380, 0, 0, 0, 53, status_15, 393221, Tmp_377, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(PDevExt_19))], 0, 0);
    Tmp_387 := strConst__li2bpl77;
    call {:si_unique_call 878} vslice_dummy_var_245 := SerialDbgPrintEx(14, Tmp_387);
    goto L111;

  anon38_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    havoc Tmp_393;
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    assume {:nonnull} Tmp_378 != 0;
    assume Tmp_378 > 0;
    assume {:nonnull} Tmp_378 != 0;
    assume Tmp_378 > 0;
    assume {:nonnull} Tmp_378 != 0;
    assume Tmp_378 > 0;
    assume {:nonnull} Tmp_378 != 0;
    assume Tmp_378 > 0;
    assume {:nonnull} Tmp_378 != 0;
    assume Tmp_378 > 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    call {:si_unique_call 879} SerialLogError(PDrvObj, pDevObj_1, Tmp_378, Tmp_386, 0, 0, 0, 52, status_15, 393220, Tmp_393, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(PDevExt_19))], 0, 0);
    Tmp_382 := strConst__li2bpl78;
    call {:si_unique_call 880} vslice_dummy_var_246 := SerialDbgPrintEx(14, Tmp_382);
    goto L111;

  anon51_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(PDevExt_19))] == 0;
    assume {:nonnull} Tmp_365 != 0;
    assume Tmp_365 > 0;
    assume {:nonnull} Tmp_365 != 0;
    assume Tmp_365 > 0;
    assume {:nonnull} Tmp_365 != 0;
    assume Tmp_365 > 0;
    assume {:nonnull} Tmp_365 != 0;
    assume Tmp_365 > 0;
    assume {:nonnull} Tmp_365 != 0;
    assume Tmp_365 > 0;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    call {:si_unique_call 881} SerialLogError(PDrvObj, pDevObj_1, Tmp_373, Tmp_365, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_379 := strConst__li2bpl79;
    call {:si_unique_call 882} vslice_dummy_var_247 := SerialDbgPrintEx(14, Tmp_379);
    status_15 := -1073741670;
    goto L111;

  anon50_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(PDevExt_19))] == 0;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    call {:si_unique_call 883} SerialLogError(PDrvObj, pDevObj_1, Tmp_367, Tmp_368, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_364 := strConst__li2bpl80;
    call {:si_unique_call 884} vslice_dummy_var_248 := SerialDbgPrintEx(14, Tmp_364);
    status_15 := -1073741670;
    goto L111;
}



procedure {:origName "SerialCreateDevObj"} SerialCreateDevObj(actual_DriverObject_1: int, actual_NewDeviceObject: int) returns (Tmp_396: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_396 == 0 || Tmp_396 == -1073741670 || Tmp_396 == -1073741824 || Tmp_396 == -1073741771 || Tmp_396 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCreateDevObj"} SerialCreateDevObj(actual_DriverObject_1: int, actual_NewDeviceObject: int) returns (Tmp_396: int)
{
  var {:scalar} instanceStr: int;
  var {:scalar} Tmp_397: int;
  var {:pointer} deviceObject: int;
  var {:pointer} Tmp_398: int;
  var {:pointer} Tmp_399: int;
  var {:pointer} instanceNumberBuffer: int;
  var {:scalar} Tmp_400: int;
  var {:pointer} pDevExt_10: int;
  var {:scalar} Tmp_401: int;
  var {:scalar} deviceObjName: int;
  var {:scalar} Tmp_402: int;
  var {:scalar} Tmp_403: int;
  var {:pointer} sdv_340: int;
  var {:pointer} sdv_341: int;
  var {:scalar} Tmp_405: int;
  var {:pointer} Tmp_406: int;
  var {:pointer} Tmp_407: int;
  var {:scalar} Tmp_408: int;
  var {:pointer} Tmp_409: int;
  var {:scalar} Tmp_410: int;
  var {:pointer} Tmp_411: int;
  var {:scalar} status_16: int;
  var {:pointer} Tmp_412: int;
  var {:scalar} Tmp_413: int;
  var {:pointer} Tmp_414: int;
  var {:scalar} Tmp_415: int;
  var {:pointer} DriverObject_1: int;
  var {:pointer} NewDeviceObject: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;
  var vslice_dummy_var_260: int;

  anon0:
    call {:si_unique_call 885} instanceStr := __HAVOC_malloc(12);
    call {:si_unique_call 886} Tmp_397 := __HAVOC_malloc(20);
    call {:si_unique_call 887} deviceObject := __HAVOC_malloc(4);
    call {:si_unique_call 888} Tmp_400 := __HAVOC_malloc(20);
    call {:si_unique_call 889} deviceObjName := __HAVOC_malloc(12);
    call {:si_unique_call 890} Tmp_403 := __HAVOC_malloc(20);
    call {:si_unique_call 891} Tmp_405 := __HAVOC_malloc(20);
    DriverObject_1 := actual_DriverObject_1;
    NewDeviceObject := actual_NewDeviceObject;
    call {:si_unique_call 892} Tmp_398 := __HAVOC_malloc(168);
    call {:si_unique_call 893} Tmp_399 := __HAVOC_malloc(104);
    call {:si_unique_call 894} instanceNumberBuffer := __HAVOC_malloc(80);
    call {:si_unique_call 895} vslice_dummy_var_251 := __HAVOC_malloc(60);
    call {:si_unique_call 896} Tmp_406 := __HAVOC_malloc(100);
    call {:si_unique_call 897} Tmp_407 := __HAVOC_malloc(156);
    call {:si_unique_call 898} Tmp_409 := __HAVOC_malloc(180);
    call {:si_unique_call 899} Tmp_411 := __HAVOC_malloc(104);
    call {:si_unique_call 900} Tmp_414 := __HAVOC_malloc(164);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    pDevExt_10 := 0;
    status_16 := 0;
    call {:si_unique_call 901} sdv_do_paged_code_check();
    Tmp_406 := strConst__li2bpl81;
    call {:si_unique_call 902} vslice_dummy_var_252 := SerialDbgPrintEx(11, Tmp_406);
    call {:si_unique_call 903} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    havoc Tmp_415;
    call {:si_unique_call 904} sdv_341 := ExAllocatePoolWithTag(1, Tmp_415, -666022077);
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(deviceObjName)] := sdv_341;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(deviceObjName)] != 0;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    havoc Tmp_410;
    call {:si_unique_call 905} sdv_RtlZeroMemory(0, Tmp_410);
    call {:si_unique_call 906} vslice_dummy_var_253 := corral_nondet();
    call {:si_unique_call 907} RtlInitUnicodeString(instanceStr, 0);
    assume {:nonnull} instanceStr != 0;
    assume instanceStr > 0;
    assume {:nonnull} instanceStr != 0;
    assume instanceStr > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(instanceStr)] := instanceNumberBuffer;
    havoc Tmp_402;
    Tmp_401 := Tmp_402;
    call {:si_unique_call 908} vslice_dummy_var_254 := RtlIntegerToUnicodeString(Tmp_401, 10, 0);
    call {:si_unique_call 909} vslice_dummy_var_249 := corral_nondet();
    call {:si_unique_call 910} status_16 := IoCreateDevice(0, 1656, 0, 27, 256, 1, deviceObject);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_16 >= 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    havoc pDevExt_10;
    call {:si_unique_call 911} sdv_RtlZeroMemory(0, 1656);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    havoc Tmp_408;
    call {:si_unique_call 912} sdv_340 := ExAllocatePoolWithTag(1, Tmp_408, -666022077);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_10))] := sdv_340;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_10))] != 0;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_413;
    call {:si_unique_call 913} sdv_RtlZeroMemory(0, Tmp_413);
    call {:si_unique_call 914} vslice_dummy_var_250 := corral_nondet();
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 915} InitializeListHead(CommonInterruptObject__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 916} InitializeListHead(TopLevelSharers__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 917} InitializeListHead(MultiportSiblings__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 918} InitializeListHead(AllDevObjs__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 919} InitializeListHead(ReadQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 920} InitializeListHead(WriteQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 921} InitializeListHead(MaskQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 922} InitializeListHead(PurgeQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 923} InitializeListHead(StalledIrpQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    call {:si_unique_call 924} sdv_ExInitializeFastMutex(0);
    call {:si_unique_call 925} sdv_ExInitializeFastMutex(0);
    call {:si_unique_call 926} Tmp_412 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 927} sdv_KeInitializeSpinLock(Tmp_412);
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 928} Tmp_412 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 929} sdv_KeInitializeSpinLock(Tmp_412);
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 930} KeInitializeEvent(PendingIRPEvent__SERIAL_DEVICE_EXTENSION(pDevExt_10), 1, 0);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 931} KeInitializeEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_10), 1, 0);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 932} KeInitializeEvent(PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_10), 1, 0);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} NewDeviceObject != 0;
    assume NewDeviceObject > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    call {:si_unique_call 933} sdv_ExFreePool(0);
    Tmp_411 := strConst__li2bpl84;
    call {:si_unique_call 934} vslice_dummy_var_255 := SerialDbgPrintEx(11, Tmp_411);
    Tmp_396 := 0;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_10))] == 0;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    assume {:nonnull} Tmp_405 != 0;
    assume Tmp_405 > 0;
    assume {:nonnull} Tmp_405 != 0;
    assume Tmp_405 > 0;
    assume {:nonnull} Tmp_405 != 0;
    assume Tmp_405 > 0;
    assume {:nonnull} Tmp_405 != 0;
    assume Tmp_405 > 0;
    assume {:nonnull} Tmp_405 != 0;
    assume Tmp_405 > 0;
    call {:si_unique_call 935} SerialLogError(DriverObject_1, 0, Tmp_405, Tmp_400, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_414 := strConst__li2bpl85;
    call {:si_unique_call 936} vslice_dummy_var_256 := SerialDbgPrintEx(14, Tmp_414);
    status_16 := -1073741670;
    goto L155;

  L155:
    Tmp_407 := strConst__li2bpl86;
    call {:si_unique_call 937} vslice_dummy_var_257 := SerialDbgPrintEx(14, Tmp_407);
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(deviceObjName)] != 0;
    call {:si_unique_call 938} sdv_ExFreePool(0);
    goto L159;

  L159:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_10))] != 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 939} sdv_ExFreePool(0);
    goto L165;

  L165:
    call {:si_unique_call 940} IoDeleteDevice(0);
    goto L163;

  L163:
    assume {:nonnull} NewDeviceObject != 0;
    assume NewDeviceObject > 0;
    Tmp_399 := strConst__li2bpl84;
    call {:si_unique_call 941} vslice_dummy_var_258 := SerialDbgPrintEx(11, Tmp_399);
    Tmp_396 := status_16;
    goto L1;

  anon16_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_10))] == 0;
    goto L165;

  anon15_Then:
    goto L163;

  anon14_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(deviceObjName)] == 0;
    goto L159;

  anon13_Then:
    assume {:partition} 0 > status_16;
    Tmp_409 := strConst__li2bpl83;
    call {:si_unique_call 942} vslice_dummy_var_259 := SerialDbgPrintEx(14, Tmp_409);
    goto L155;

  anon17_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(deviceObjName)] == 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    call {:si_unique_call 943} SerialLogError(DriverObject_1, 0, Tmp_397, Tmp_403, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_398 := strConst__li2bpl87;
    call {:si_unique_call 944} vslice_dummy_var_260 := SerialDbgPrintEx(14, Tmp_398);
    Tmp_396 := -1073741670;
    goto L1;
}



procedure {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int)
{
  var {:pointer} Tmp_417: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} PListEntry: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_262: int;

  anon0:
    call {:si_unique_call 945} vslice_dummy_var_261 := __HAVOC_malloc(4);
    PListEntry := actual_PListEntry;
    call {:si_unique_call 946} Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    call {:si_unique_call 947} sdv_KeAcquireSpinLock(0, Tmp_417);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    havoc oldIrql_8;
    call {:si_unique_call 948} vslice_dummy_var_262 := sdv_InsertTailList(AllDevObjs__SERIAL_GLOBALS(SerialGlobals), PListEntry);
    call {:si_unique_call 949} sdv_KeReleaseSpinLock(0, oldIrql_8);
    return;
}



procedure {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_20: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_419: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_419 == -1073741811 || Tmp_419 == -1073741823 || Tmp_419 == 0 || Tmp_419 == 5 || Tmp_419 == -1073741789 || Tmp_419 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_20: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_419: int)
{
  var {:pointer} Tmp_420: int;
  var {:pointer} Tmp_421: int;
  var {:scalar} linkName: int;
  var {:scalar} Tmp_423: int;
  var {:pointer} Tmp_425: int;
  var {:pointer} sdv_351: int;
  var {:scalar} Tmp_426: int;
  var {:pointer} Tmp_427: int;
  var {:scalar} Tmp_428: int;
  var {:scalar} Tmp_429: int;
  var {:pointer} sdv_353: int;
  var {:pointer} sdv_355: int;
  var {:scalar} Tmp_430: int;
  var {:pointer} Tmp_431: int;
  var {:scalar} Tmp_432: int;
  var {:scalar} Tmp_433: int;
  var {:pointer} Tmp_434: int;
  var {:scalar} status_17: int;
  var {:pointer} pDevObj_2: int;
  var {:scalar} Tmp_436: int;
  var {:pointer} pDrvObj_1: int;
  var {:pointer} PDevExt_20: int;
  var {:pointer} hRegKey: int;
  var {:pointer} PSymName: int;
  var {:pointer} PpRegName: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_1678: int;
  var vslice_dummy_var_1679: int;

  anon0:
    call {:si_unique_call 950} linkName := __HAVOC_malloc(12);
    call {:si_unique_call 951} Tmp_423 := __HAVOC_malloc(20);
    call {:si_unique_call 952} Tmp_430 := __HAVOC_malloc(20);
    call {:si_unique_call 953} Tmp_432 := __HAVOC_malloc(20);
    call {:si_unique_call 954} Tmp_436 := __HAVOC_malloc(20);
    PDevExt_20 := actual_PDevExt_20;
    hRegKey := actual_hRegKey;
    PSymName := actual_PSymName;
    PpRegName := actual_PpRegName;
    call {:si_unique_call 955} Tmp_420 := __HAVOC_malloc(168);
    call {:si_unique_call 956} Tmp_421 := __HAVOC_malloc(60);
    call {:si_unique_call 957} vslice_dummy_var_265 := __HAVOC_malloc(8);
    call {:si_unique_call 958} Tmp_425 := __HAVOC_malloc(148);
    call {:si_unique_call 959} Tmp_427 := __HAVOC_malloc(36);
    call {:si_unique_call 960} Tmp_431 := __HAVOC_malloc(44);
    call {:si_unique_call 961} Tmp_434 := __HAVOC_malloc(164);
    call {:si_unique_call 962} vslice_dummy_var_266 := __HAVOC_malloc(8);
    call {:si_unique_call 963} vslice_dummy_var_267 := __HAVOC_malloc(44);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc pDevObj_2;
    assume {:nonnull} pDevObj_2 != 0;
    assume pDevObj_2 > 0;
    havoc pDrvObj_1;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    call {:si_unique_call 964} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_433;
    call {:si_unique_call 965} sdv_351 := ExAllocatePoolWithTag(257, Tmp_433, -666022077);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(linkName)] := sdv_351;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(linkName)] != 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_429;
    call {:si_unique_call 966} sdv_RtlZeroMemory(0, Tmp_429);
    call {:si_unique_call 967} sdv_355 := ExAllocatePoolWithTag(257, 258, -666022077);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    Tmp_427 := strConst__li2bpl88;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_1678;
    call {:si_unique_call 968} status_17 := SerialGetRegistryKeyValue(hRegKey, Tmp_427, 18, vslice_dummy_var_1678, 256);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_17 >= 0;
    goto L39;

  L39:
    call {:si_unique_call 969} vslice_dummy_var_268 := corral_nondet();
    call {:si_unique_call 970} vslice_dummy_var_269 := corral_nondet();
    call {:si_unique_call 971} vslice_dummy_var_270 := corral_nondet();
    call {:si_unique_call 972} vslice_dummy_var_263 := corral_nondet();
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_428;
    call {:si_unique_call 973} sdv_353 := ExAllocatePoolWithTag(257, Tmp_428, -666022077);
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PSymName)] := sdv_353;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PSymName)] != 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_426;
    call {:si_unique_call 974} sdv_RtlZeroMemory(0, Tmp_426);
    call {:si_unique_call 975} vslice_dummy_var_264 := corral_nondet();
    Tmp_421 := strConst__li2bpl92;
    call {:si_unique_call 976} vslice_dummy_var_271 := SerialDbgPrintEx(4, Tmp_421);
    goto L69;

  L69:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(linkName)] != 0;
    call {:si_unique_call 977} sdv_ExFreePool(0);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(linkName)] := 0;
    goto L70;

  L70:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_17 >= 0;
    goto L76;

  L76:
    Tmp_419 := status_17;
    return;

  anon19_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 978} sdv_ExFreePool(0);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto L76;

  anon20_Then:
    goto L76;

  anon18_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(linkName)] == 0;
    goto L70;

  anon24_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PSymName)] == 0;
    status_17 := -1073741670;
    goto L69;

  anon17_Then:
    assume {:partition} 0 > status_17;
    Tmp_431 := strConst__li2bpl89;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_1679;
    call {:si_unique_call 979} status_17 := SerialGetRegistryKeyValue(hRegKey, Tmp_431, 22, vslice_dummy_var_1679, 256);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_17 < 0;
    Tmp_434 := strConst__li2bpl93;
    call {:si_unique_call 980} vslice_dummy_var_272 := SerialDbgPrintEx(14, Tmp_434);
    goto L69;

  anon21_Then:
    assume {:partition} 0 <= status_17;
    goto L39;

  anon23_Then:
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    call {:si_unique_call 981} SerialLogError(pDrvObj_1, pDevObj_2, Tmp_430, Tmp_423, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_425 := strConst__li2bpl94;
    call {:si_unique_call 982} vslice_dummy_var_273 := SerialDbgPrintEx(14, Tmp_425);
    status_17 := -1073741670;
    goto L69;

  anon22_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(linkName)] == 0;
    assume {:nonnull} Tmp_436 != 0;
    assume Tmp_436 > 0;
    assume {:nonnull} Tmp_436 != 0;
    assume Tmp_436 > 0;
    assume {:nonnull} Tmp_436 != 0;
    assume Tmp_436 > 0;
    assume {:nonnull} Tmp_436 != 0;
    assume Tmp_436 > 0;
    assume {:nonnull} Tmp_436 != 0;
    assume Tmp_436 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    call {:si_unique_call 983} SerialLogError(pDrvObj_1, pDevObj_2, Tmp_432, Tmp_436, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_420 := strConst__li2bpl87;
    call {:si_unique_call 984} vslice_dummy_var_274 := SerialDbgPrintEx(14, Tmp_420);
    status_17 := -1073741670;
    goto L69;
}



procedure {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj_13: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_438: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_438 == -1073348588 || Tmp_438 == -1073348587 || Tmp_438 == -1073348586 || Tmp_438 == -1073348585 || Tmp_438 == -1073348584 || Tmp_438 == 0 || Tmp_438 == -1073348583 || Tmp_438 == -1073741811 || Tmp_438 == -1073741808 || Tmp_438 == -1073741823 || Tmp_438 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj_13: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_438: int)
{
  var {:dopa} {:scalar} ioResIndex: int;
  var {:pointer} Tmp_439: int;
  var {:dopa} {:scalar} isMulti: int;
  var {:scalar} interfaceType: int;
  var {:scalar} count: int;
  var {:pointer} Tmp_440: int;
  var {:scalar} Tmp_441: int;
  var {:pointer} Tmp_442: int;
  var {:pointer} Tmp_443: int;
  var {:scalar} gotIO: int;
  var {:pointer} Tmp_444: int;
  var {:scalar} Tmp_445: int;
  var {:pointer} Tmp_446: int;
  var {:pointer} pPartialTrResourceDesc: int;
  var {:pointer} pDevExt_11: int;
  var {:scalar} Tmp_447: int;
  var {:pointer} Tmp_448: int;
  var {:pointer} Tmp_449: int;
  var {:scalar} Tmp_450: int;
  var {:pointer} Tmp_451: int;
  var {:pointer} Tmp_452: int;
  var {:pointer} Tmp_453: int;
  var {:pointer} Tmp_454: int;
  var {:pointer} Tmp_455: int;
  var {:pointer} Tmp_456: int;
  var {:pointer} pFullResourceDesc: int;
  var {:scalar} Tmp_457: int;
  var {:pointer} Tmp_458: int;
  var {:pointer} Tmp_459: int;
  var {:scalar} foundOne: int;
  var {:pointer} Tmp_460: int;
  var {:pointer} Tmp_461: int;
  var {:scalar} curIoIndex: int;
  var {:scalar} gotInt: int;
  var {:pointer} Tmp_462: int;
  var {:scalar} badValue: int;
  var {:pointer} Tmp_463: int;
  var {:pointer} pPartialTrResourceList: int;
  var {:scalar} i: int;
  var {:scalar} defaultInterfaceType: int;
  var {:pointer} pPartialResourceList: int;
  var {:pointer} Tmp_464: int;
  var {:pointer} pFullTrResourceDesc: int;
  var {:pointer} Tmp_465: int;
  var {:pointer} Tmp_466: int;
  var {:pointer} Tmp_467: int;
  var {:pointer} Tmp_468: int;
  var {:pointer} Tmp_469: int;
  var {:pointer} keyHandle_1: int;
  var {:pointer} Tmp_470: int;
  var {:scalar} defaultClockRate: int;
  var {:scalar} Tmp_471: int;
  var {:scalar} Tmp_472: int;
  var {:scalar} Tmp_473: int;
  var {:pointer} Tmp_474: int;
  var {:pointer} Tmp_475: int;
  var {:scalar} Tmp_476: int;
  var {:pointer} Tmp_477: int;
  var {:pointer} Tmp_478: int;
  var {:pointer} Tmp_479: int;
  var {:scalar} Tmp_480: int;
  var {:pointer} sDeviceData: int;
  var {:scalar} Tmp_481: int;
  var {:scalar} gotISR: int;
  var {:pointer} Tmp_482: int;
  var {:scalar} foundIt: int;
  var {:scalar} Tmp_483: int;
  var {:scalar} Tmp_484: int;
  var {:pointer} Tmp_485: int;
  var {:pointer} Tmp_486: int;
  var {:pointer} Tmp_487: int;
  var {:scalar} Tmp_489: int;
  var {:pointer} Tmp_490: int;
  var {:pointer} Tmp_491: int;
  var {:pointer} Tmp_492: int;
  var {:scalar} status_18: int;
  var {:scalar} Tmp_493: int;
  var {:scalar} Tmp_494: int;
  var {:scalar} Tmp_495: int;
  var {:scalar} gotMem: int;
  var {:pointer} Tmp_496: int;
  var {:pointer} pPartialResourceDesc: int;
  var {:scalar} Tmp_497: int;
  var {:scalar} Tmp_498: int;
  var {:pointer} PDevObj_13: int;
  var {:pointer} PResList: int;
  var {:pointer} PTrResList: int;
  var {:pointer} PConfig: int;
  var {:pointer} PUserData: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_1680: int;
  var vslice_dummy_var_1681: int;
  var vslice_dummy_var_1682: int;
  var vslice_dummy_var_1683: int;
  var vslice_dummy_var_1684: int;
  var vslice_dummy_var_1685: int;
  var vslice_dummy_var_1686: int;
  var vslice_dummy_var_1687: int;
  var vslice_dummy_var_1688: int;
  var vslice_dummy_var_1689: int;
  var vslice_dummy_var_1690: int;
  var vslice_dummy_var_1691: int;
  var vslice_dummy_var_1692: int;
  var vslice_dummy_var_1693: int;
  var vslice_dummy_var_1694: int;
  var vslice_dummy_var_1695: int;
  var vslice_dummy_var_1696: int;
  var vslice_dummy_var_1697: int;

  anon0:
    call {:si_unique_call 985} ioResIndex := __HAVOC_malloc(4);
    call {:si_unique_call 986} isMulti := __HAVOC_malloc(4);
    call {:si_unique_call 987} Tmp_445 := __HAVOC_malloc(20);
    call {:si_unique_call 988} Tmp_447 := __HAVOC_malloc(20);
    call {:si_unique_call 989} Tmp_457 := __HAVOC_malloc(20);
    call {:si_unique_call 990} Tmp_472 := __HAVOC_malloc(20);
    call {:si_unique_call 991} Tmp_473 := __HAVOC_malloc(20);
    call {:si_unique_call 992} Tmp_476 := __HAVOC_malloc(20);
    call {:si_unique_call 993} Tmp_480 := __HAVOC_malloc(20);
    call {:si_unique_call 994} Tmp_483 := __HAVOC_malloc(20);
    call {:si_unique_call 995} Tmp_493 := __HAVOC_malloc(20);
    call {:si_unique_call 996} Tmp_495 := __HAVOC_malloc(20);
    PDevObj_13 := actual_PDevObj_13;
    PResList := actual_PResList;
    PTrResList := actual_PTrResList;
    PConfig := actual_PConfig;
    PUserData := actual_PUserData;
    call {:si_unique_call 997} Tmp_439 := __HAVOC_malloc(32);
    call {:si_unique_call 998} Tmp_440 := __HAVOC_malloc(96);
    call {:si_unique_call 999} Tmp_442 := __HAVOC_malloc(28);
    call {:si_unique_call 1000} Tmp_443 := __HAVOC_malloc(92);
    call {:si_unique_call 1001} Tmp_444 := __HAVOC_malloc(28);
    call {:si_unique_call 1002} Tmp_446 := __HAVOC_malloc(48);
    call {:si_unique_call 1003} Tmp_448 := __HAVOC_malloc(80);
    call {:si_unique_call 1004} Tmp_449 := __HAVOC_malloc(216);
    call {:si_unique_call 1005} Tmp_451 := __HAVOC_malloc(96);
    call {:si_unique_call 1006} Tmp_452 := __HAVOC_malloc(96);
    call {:si_unique_call 1007} Tmp_453 := __HAVOC_malloc(96);
    call {:si_unique_call 1008} Tmp_454 := __HAVOC_malloc(48);
    call {:si_unique_call 1009} Tmp_455 := __HAVOC_malloc(92);
    call {:si_unique_call 1010} Tmp_456 := __HAVOC_malloc(92);
    call {:si_unique_call 1011} Tmp_458 := __HAVOC_malloc(40);
    call {:si_unique_call 1012} Tmp_459 := __HAVOC_malloc(96);
    call {:si_unique_call 1013} Tmp_460 := __HAVOC_malloc(312);
    call {:si_unique_call 1014} Tmp_461 := __HAVOC_malloc(64);
    call {:si_unique_call 1015} Tmp_462 := __HAVOC_malloc(244);
    call {:si_unique_call 1016} Tmp_463 := __HAVOC_malloc(104);
    call {:si_unique_call 1017} Tmp_464 := __HAVOC_malloc(92);
    call {:si_unique_call 1018} Tmp_465 := __HAVOC_malloc(232);
    call {:si_unique_call 1019} Tmp_466 := __HAVOC_malloc(40);
    call {:si_unique_call 1020} Tmp_467 := __HAVOC_malloc(84);
    call {:si_unique_call 1021} Tmp_468 := __HAVOC_malloc(92);
    call {:si_unique_call 1022} Tmp_469 := __HAVOC_malloc(112);
    call {:si_unique_call 1023} Tmp_470 := __HAVOC_malloc(52);
    call {:si_unique_call 1024} Tmp_474 := __HAVOC_malloc(96);
    call {:si_unique_call 1025} Tmp_475 := __HAVOC_malloc(88);
    call {:si_unique_call 1026} Tmp_477 := __HAVOC_malloc(152);
    call {:si_unique_call 1027} Tmp_478 := __HAVOC_malloc(88);
    call {:si_unique_call 1028} Tmp_479 := __HAVOC_malloc(68);
    call {:si_unique_call 1029} Tmp_482 := __HAVOC_malloc(40);
    call {:si_unique_call 1030} Tmp_485 := __HAVOC_malloc(88);
    call {:si_unique_call 1031} Tmp_486 := __HAVOC_malloc(68);
    call {:si_unique_call 1032} Tmp_487 := __HAVOC_malloc(108);
    call {:si_unique_call 1033} Tmp_490 := __HAVOC_malloc(112);
    call {:si_unique_call 1034} Tmp_491 := __HAVOC_malloc(312);
    call {:si_unique_call 1035} Tmp_492 := __HAVOC_malloc(84);
    call {:si_unique_call 1036} Tmp_496 := __HAVOC_malloc(64);
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc pDevExt_11;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    status_18 := -1073741822;
    pFullResourceDesc := 0;
    pFullTrResourceDesc := 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    curIoIndex := 0;
    gotMem := 0;
    call {:si_unique_call 1037} sdv_do_paged_code_check();
    Tmp_469 := strConst__li2bpl95;
    call {:si_unique_call 1038} vslice_dummy_var_279 := SerialDbgPrintEx(11, Tmp_469);
    Tmp_453 := strConst__li2bpl96;
    call {:si_unique_call 1039} vslice_dummy_var_280 := SerialDbgPrintEx(12, Tmp_453);
    Tmp_487 := strConst__li2bpl97;
    call {:si_unique_call 1040} vslice_dummy_var_281 := SerialDbgPrintEx(12, Tmp_487);
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} PResList != 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} PTrResList != 0;
    call {:si_unique_call 1041} status_18 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} status_18 >= 0;
    Tmp_461 := strConst__li2bpl98;
    call {:si_unique_call 1042} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_461, 32, isMulti, 4);
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} status_18 >= 0;
    goto L73;

  L73:
    Tmp_464 := strConst__li2bpl99;
    call {:si_unique_call 1043} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_464, 46, ioResIndex, 4);
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} status_18 >= 0;
    goto L79;

  L79:
    call {:si_unique_call 1044} vslice_dummy_var_275 := ZwClose(0);
    assume {:nonnull} PResList != 0;
    assume PResList > 0;
    havoc Tmp_491;
    pFullResourceDesc := Tmp_491;
    assume {:nonnull} PTrResList != 0;
    assume PTrResList > 0;
    havoc Tmp_460;
    pFullTrResourceDesc := Tmp_460;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} pFullResourceDesc != 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    pPartialResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullResourceDesc);
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc pPartialResourceDesc;
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L95;

  L95:
    call {:si_unique_call 1045} gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem := SerialGetPortInfo_loop_L95(ioResIndex, isMulti, count, gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem, pPartialResourceDesc, PConfig);
    goto L95_last;

  L95_last:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto L105;

  L105:
    i := i + 1;
    goto L105_dummy;

  L105_dummy:
    assume false;
    return;

  anon171_Then:
    sDeviceData := pPartialResourceDesc;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} sDeviceData != 0;
    assume sDeviceData > 0;
    goto L105;

  anon172_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} gotMem != 0;
    goto L105;

  anon173_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon177_Then:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    goto L105;

  anon140_Then:
    assume {:partition} gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    curIoIndex := curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;

  anon132_Then:
    assume {:partition} i >= count;
    goto L85;

  L85:
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    curIoIndex := 0;
    gotMem := 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} pFullTrResourceDesc != 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    pPartialTrResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullTrResourceDesc);
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc pPartialTrResourceDesc;
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L148;

  L148:
    call {:si_unique_call 1046} gotIO, curIoIndex, gotInt, i, gotISR, gotMem := SerialGetPortInfo_loop_L148(ioResIndex, isMulti, count, gotIO, pPartialTrResourceDesc, curIoIndex, gotInt, i, gotISR, gotMem, PConfig);
    goto L148_last;

  L148_last:
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    goto L156;

  L156:
    i := i + 1;
    goto L156_dummy;

  L156_dummy:
    assume false;
    return;

  anon174_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon175_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    goto L156;

  anon151_Then:
    assume {:partition} gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    curIoIndex := curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;

  anon143_Then:
    assume {:partition} i >= count;
    goto L140;

  L140:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    defaultInterfaceType := 1;
    defaultClockRate := 1843200;
    interfaceType := 0;
    goto L191;

  L191:
    call {:si_unique_call 1047} interfaceType, foundOne, vslice_dummy_var_276 := SerialGetPortInfo_loop_L191(interfaceType, foundOne, vslice_dummy_var_276);
    goto L191_last;

  L191_last:
    assume {:CounterLoop 18} {:Counter "interfaceType"} true;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} 18 > interfaceType;
    foundOne := 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} interfaceType != 0;
    call {:si_unique_call 1048} vslice_dummy_var_276 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} foundOne != 0;
    defaultInterfaceType := interfaceType;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} defaultInterfaceType == 3;
    goto L192;

  L192:
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} PUserData != 0;
    badValue := -1;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    Tmp_471 := 0;
    goto L215;

  L215:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_450;
    goto L219;

  L219:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_481;
    goto L223;

  L223:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    Tmp_489 := 0;
    goto L227;

  L227:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_484;
    goto L231;

  L231:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    Tmp_494 := 0;
    goto L235;

  L235:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    Tmp_441 := defaultClockRate;
    goto L239;

  L239:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    Tmp_498 := 0;
    goto L245;

  L245:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L246;

  L246:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1680;
    havoc vslice_dummy_var_1681;
    call {:si_unique_call 1049} SerialLogError(vslice_dummy_var_1680, 0, vslice_dummy_var_1681, Tmp_495, 0, 0, 0, 30, 0, -1073348588, 0, 0, 0, 0);
    Tmp_467 := strConst__li2bpl100;
    call {:si_unique_call 1050} vslice_dummy_var_282 := SerialDbgPrintEx(14, Tmp_467);
    status_18 := -1073348588;
    goto L263;

  L263:
    Tmp_438 := status_18;
    goto L1;

  L1:
    return;

  anon161_Then:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:nonnull} Tmp_480 != 0;
    assume Tmp_480 > 0;
    assume {:nonnull} Tmp_480 != 0;
    assume Tmp_480 > 0;
    assume {:nonnull} Tmp_480 != 0;
    assume Tmp_480 > 0;
    assume {:nonnull} Tmp_480 != 0;
    assume Tmp_480 > 0;
    assume {:nonnull} Tmp_480 != 0;
    assume Tmp_480 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1682;
    havoc vslice_dummy_var_1683;
    call {:si_unique_call 1051} SerialLogError(vslice_dummy_var_1682, 0, vslice_dummy_var_1683, Tmp_480, 0, 0, 0, 32, 0, -1073348587, 0, 0, 0, 0);
    Tmp_452 := strConst__li2bpl101;
    call {:si_unique_call 1052} vslice_dummy_var_283 := SerialDbgPrintEx(14, Tmp_452);
    status_18 := -1073348587;
    goto L263;

  anon165_Then:
    goto L251;

  L251:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    foundIt := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:nonnull} Tmp_476 != 0;
    assume Tmp_476 > 0;
    assume {:nonnull} Tmp_476 != 0;
    assume Tmp_476 > 0;
    assume {:nonnull} Tmp_476 != 0;
    assume Tmp_476 > 0;
    assume {:nonnull} Tmp_476 != 0;
    assume Tmp_476 > 0;
    assume {:nonnull} Tmp_476 != 0;
    assume Tmp_476 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1684;
    havoc vslice_dummy_var_1685;
    call {:si_unique_call 1053} SerialLogError(vslice_dummy_var_1684, 0, vslice_dummy_var_1685, Tmp_476, 0, 0, 0, 34, 0, -1073348586, 0, 0, 0, 0);
    Tmp_492 := strConst__li2bpl103;
    call {:si_unique_call 1054} vslice_dummy_var_284 := SerialDbgPrintEx(14, Tmp_492);
    status_18 := -1073348586;
    goto L263;

  anon189_Then:
    call {:si_unique_call 1055} vslice_dummy_var_277 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} foundIt == 0;
    assume {:nonnull} Tmp_447 != 0;
    assume Tmp_447 > 0;
    assume {:nonnull} Tmp_447 != 0;
    assume Tmp_447 > 0;
    assume {:nonnull} Tmp_447 != 0;
    assume Tmp_447 > 0;
    assume {:nonnull} Tmp_447 != 0;
    assume Tmp_447 > 0;
    assume {:nonnull} Tmp_447 != 0;
    assume Tmp_447 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1686;
    havoc vslice_dummy_var_1687;
    call {:si_unique_call 1056} SerialLogError(vslice_dummy_var_1686, 0, vslice_dummy_var_1687, Tmp_447, 0, 0, 0, 35, 0, -1073348585, 0, 0, 0, 0);
    Tmp_465 := strConst__li2bpl104;
    call {:si_unique_call 1057} vslice_dummy_var_297 := SerialDbgPrintEx(14, Tmp_465);
    status_18 := -1073348585;
    goto L263;

  anon167_Then:
    assume {:partition} foundIt != 0;
    goto L294;

  L294:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} Tmp_493 != 0;
    assume Tmp_493 > 0;
    assume {:nonnull} Tmp_493 != 0;
    assume Tmp_493 > 0;
    assume {:nonnull} Tmp_493 != 0;
    assume Tmp_493 > 0;
    assume {:nonnull} Tmp_493 != 0;
    assume Tmp_493 > 0;
    assume {:nonnull} Tmp_493 != 0;
    assume Tmp_493 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1688;
    havoc vslice_dummy_var_1689;
    call {:si_unique_call 1058} SerialLogError(vslice_dummy_var_1688, 0, vslice_dummy_var_1689, Tmp_493, 0, 0, 0, 36, 0, -1073348584, 0, 0, 0, 0);
    Tmp_449 := strConst__li2bpl105;
    call {:si_unique_call 1059} vslice_dummy_var_285 := SerialDbgPrintEx(14, Tmp_449);
    status_18 := -1073348584;
    goto L263;

  anon168_Then:
    goto L320;

  L320:
    status_18 := 0;
    Tmp_478 := strConst__li2bpl128;
    call {:si_unique_call 1060} vslice_dummy_var_286 := SerialDbgPrintEx(4, Tmp_478);
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    Tmp_463 := strConst__li2bpl129;
    call {:si_unique_call 1061} vslice_dummy_var_287 := SerialDbgPrintEx(4, Tmp_463);
    Tmp_448 := strConst__li2bpl106;
    call {:si_unique_call 1062} vslice_dummy_var_288 := SerialDbgPrintEx(4, Tmp_448);
    Tmp_459 := strConst__li2bpl107;
    call {:si_unique_call 1063} vslice_dummy_var_289 := SerialDbgPrintEx(4, Tmp_459);
    Tmp_440 := strConst__li2bpl108;
    call {:si_unique_call 1064} vslice_dummy_var_290 := SerialDbgPrintEx(4, Tmp_440);
    Tmp_475 := strConst__li2bpl109;
    call {:si_unique_call 1065} vslice_dummy_var_291 := SerialDbgPrintEx(4, Tmp_475);
    Tmp_456 := strConst__li2bpl110;
    call {:si_unique_call 1066} vslice_dummy_var_292 := SerialDbgPrintEx(4, Tmp_456);
    Tmp_443 := strConst__li2bpl111;
    call {:si_unique_call 1067} vslice_dummy_var_293 := SerialDbgPrintEx(4, Tmp_443);
    Tmp_474 := strConst__li2bpl112;
    call {:si_unique_call 1068} vslice_dummy_var_294 := SerialDbgPrintEx(4, Tmp_474);
    Tmp_485 := strConst__li2bpl113;
    call {:si_unique_call 1069} vslice_dummy_var_295 := SerialDbgPrintEx(4, Tmp_485);
    Tmp_479 := strConst__li2bpl114;
    call {:si_unique_call 1070} vslice_dummy_var_296 := SerialDbgPrintEx(4, Tmp_479);
    goto L263;

  anon166_Then:
    goto L320;

  anon160_Then:
    goto L294;

  anon163_Then:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:nonnull} Tmp_473 != 0;
    assume Tmp_473 > 0;
    assume {:nonnull} Tmp_473 != 0;
    assume Tmp_473 > 0;
    assume {:nonnull} Tmp_473 != 0;
    assume Tmp_473 > 0;
    assume {:nonnull} Tmp_473 != 0;
    assume Tmp_473 > 0;
    assume {:nonnull} Tmp_473 != 0;
    assume Tmp_473 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1690;
    havoc vslice_dummy_var_1691;
    call {:si_unique_call 1071} SerialLogError(vslice_dummy_var_1690, 0, vslice_dummy_var_1691, Tmp_473, 0, 0, 0, 33, 0, -1073348587, 0, 0, 0, 0);
    Tmp_451 := strConst__li2bpl101;
    call {:si_unique_call 1072} vslice_dummy_var_298 := SerialDbgPrintEx(14, Tmp_451);
    status_18 := -1073348587;
    goto L263;

  anon164_Then:
    goto L251;

  anon162_Then:
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1692;
    havoc vslice_dummy_var_1693;
    call {:si_unique_call 1073} SerialLogError(vslice_dummy_var_1692, 0, vslice_dummy_var_1693, Tmp_472, 0, 0, 0, 31, 0, -1073348588, 0, 0, 0, 0);
    Tmp_462 := strConst__li2bpl102;
    call {:si_unique_call 1074} vslice_dummy_var_299 := SerialDbgPrintEx(14, Tmp_462);
    status_18 := -1073348588;
    goto L263;

  anon159_Then:
    goto L251;

  anon158_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_497;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    Tmp_482 := strConst__li2bpl130;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1694;
    havoc vslice_dummy_var_1695;
    call {:si_unique_call 1075} SerialLogError(vslice_dummy_var_1694, 0, vslice_dummy_var_1695, Tmp_457, 0, 0, 0, 59, 0, -1073348583, Tmp_497, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_11))], 20, Tmp_482);
    Tmp_486 := strConst__li2bpl115;
    call {:si_unique_call 1076} vslice_dummy_var_300 := SerialDbgPrintEx(14, Tmp_486);
    status_18 := -1073348583;
    goto L263;

  anon157_Then:
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    Tmp_446 := strConst__li2bpl131;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc vslice_dummy_var_1696;
    havoc vslice_dummy_var_1697;
    call {:si_unique_call 1077} SerialLogError(vslice_dummy_var_1696, 0, vslice_dummy_var_1697, Tmp_445, 0, 0, 0, 58, 0, -1073348583, 0, 0, 24, Tmp_446);
    Tmp_468 := strConst__li2bpl116;
    call {:si_unique_call 1078} vslice_dummy_var_301 := SerialDbgPrintEx(14, Tmp_468);
    status_18 := -1073348583;
    goto L263;

  anon188_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_498;
    goto L245;

  anon187_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_441;
    goto L239;

  anon186_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_494;
    goto L235;

  anon185_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_484;
    goto L231;

  anon184_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_489;
    goto L227;

  anon183_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_481;
    goto L223;

  anon182_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_450;
    goto L219;

  anon181_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_471;
    goto L215;

  anon155_Then:
    assume {:partition} PUserData == 0;
    call {:si_unique_call 1079} status_18 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} status_18 >= 0;
    Tmp_454 := strConst__li2bpl118;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1080} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_454, 24, DisablePort__CONFIG_DATA(PConfig), 4);
    Tmp_496 := strConst__li2bpl119;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1081} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_496, 32, ForceFifoEnable__CONFIG_DATA(PConfig), 4);
    Tmp_442 := strConst__li2bpl120;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1082} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_442, 14, RxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_444 := strConst__li2bpl121;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1083} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_444, 14, TxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_470 := strConst__li2bpl122;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1084} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_470, 26, MaskInverted__CONFIG_DATA(PConfig), 4);
    Tmp_455 := strConst__li2bpl123;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1085} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_455, 46, PermitShare__CONFIG_DATA(PConfig), 4);
    Tmp_466 := strConst__li2bpl124;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1086} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_466, 20, PortIndex__CONFIG_DATA(PConfig), 4);
    Tmp_439 := strConst__li2bpl125;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1087} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_439, 16, Indexed__CONFIG_DATA(PConfig), 4);
    Tmp_458 := strConst__li2bpl126;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1088} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_458, 20, ClockRate__CONFIG_DATA(PConfig), 4);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} status_18 >= 0;
    goto L425;

  L425:
    Tmp_490 := strConst__li2bpl127;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1089} status_18 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_490, 56, TL16C550CAFC__CONFIG_DATA(PConfig), 4);
    call {:si_unique_call 1090} vslice_dummy_var_278 := ZwClose(0);
    goto L246;

  anon170_Then:
    assume {:partition} 0 > status_18;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L425;

  anon169_Then:
    assume {:partition} 0 > status_18;
    Tmp_477 := strConst__li2bpl117;
    call {:si_unique_call 1091} vslice_dummy_var_302 := SerialDbgPrintEx(14, Tmp_477);
    goto L263;

  anon180_Then:
    assume {:partition} defaultInterfaceType != 3;
    goto L192;

  anon156_Then:
    assume {:partition} foundOne == 0;
    goto L198;

  L198:
    interfaceType := interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    assume false;
    return;

  anon179_Then:
    assume {:partition} interfaceType == 0;
    goto L198;

  anon154_Then:
    assume {:partition} interfaceType >= 18;
    goto L192;

  anon178_Then:
    assume {:partition} pFullTrResourceDesc == 0;
    goto L140;

  anon176_Then:
    assume {:partition} pFullResourceDesc == 0;
    goto L85;

  anon131_Then:
    assume {:partition} 0 > status_18;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto L79;

  anon130_Then:
    assume {:partition} 0 > status_18;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto L73;

  anon129_Then:
    assume {:partition} 0 > status_18;
    Tmp_438 := status_18;
    goto L1;

  anon128_Then:
    assume {:partition} PTrResList == 0;
    goto L59;

  L59:
    Tmp_438 := -1073741670;
    goto L1;

  anon127_Then:
    assume {:partition} PResList == 0;
    goto L59;
}



procedure {:origName "SerialAddDevice"} SerialAddDevice(actual_DriverObject_2: int, actual_PPdo: int) returns (Tmp_499: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_499 == 0 || Tmp_499 == -1073741670 || Tmp_499 == -1073741824 || Tmp_499 == -1073741771 || Tmp_499 == -1073741823 || Tmp_499 == 26;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialAddDevice"} SerialAddDevice(actual_DriverObject_2: int, actual_PPdo: int) returns (Tmp_499: int)
{
  var {:pointer} Tmp_500: int;
  var {:pointer} pDevExt_12: int;
  var {:pointer} Tmp_501: int;
  var {:pointer} Tmp_502: int;
  var {:pointer} Tmp_503: int;
  var {:pointer} pNewDevObj: int;
  var {:pointer} pLowerDevObj_3: int;
  var {:scalar} status_19: int;
  var {:pointer} DriverObject_2: int;
  var {:pointer} PPdo: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;

  anon0:
    call {:si_unique_call 1092} pNewDevObj := __HAVOC_malloc(4);
    DriverObject_2 := actual_DriverObject_2;
    PPdo := actual_PPdo;
    call {:si_unique_call 1093} Tmp_500 := __HAVOC_malloc(92);
    call {:si_unique_call 1094} Tmp_501 := __HAVOC_malloc(216);
    call {:si_unique_call 1095} Tmp_502 := __HAVOC_malloc(260);
    call {:si_unique_call 1096} Tmp_503 := __HAVOC_malloc(152);
    assume {:nonnull} pNewDevObj != 0;
    assume pNewDevObj > 0;
    pLowerDevObj_3 := 0;
    call {:si_unique_call 1097} sdv_do_paged_code_check();
    Tmp_503 := strConst__li2bpl132;
    call {:si_unique_call 1098} vslice_dummy_var_303 := SerialDbgPrintEx(11, Tmp_503);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} PPdo != 0;
    call {:si_unique_call 1099} status_19 := SerialCreateDevObj(DriverObject_2, pNewDevObj);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_19 >= 0;
    call {:si_unique_call 1100} pLowerDevObj_3 := IoAttachDeviceToDeviceStack(0, PPdo);
    assume {:nonnull} pNewDevObj != 0;
    assume pNewDevObj > 0;
    havoc pDevExt_12;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pNewDevObj != 0;
    assume pNewDevObj > 0;
    Tmp_500 := strConst__li2bpl135;
    call {:si_unique_call 1101} vslice_dummy_var_304 := SerialDbgPrintEx(11, Tmp_500);
    Tmp_499 := status_19;
    goto L1;

  L1:
    call {:si_unique_call 1102} SLIC_SerialAddDevice_exit(strConst__li2bpl0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} 0 > status_19;
    Tmp_501 := strConst__li2bpl134;
    call {:si_unique_call 1103} vslice_dummy_var_305 := SerialDbgPrintEx(14, Tmp_501);
    Tmp_499 := status_19;
    goto L1;

  anon7_Then:
    assume {:partition} PPdo == 0;
    Tmp_502 := strConst__li2bpl133;
    call {:si_unique_call 1104} vslice_dummy_var_306 := SerialDbgPrintEx(14, Tmp_502);
    Tmp_499 := 26;
    goto L1;
}



procedure {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_14: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_505: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_14: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_505: int)
{
  var {:pointer} Tmp_506: int;
  var {:pointer} Tmp_507: int;
  var {:pointer} Tmp_508: int;
  var {:pointer} Tmp_509: int;
  var {:scalar} Tmp_510: int;
  var {:pointer} Tmp_511: int;
  var {:scalar} allocedUserData: int;
  var {:scalar} Tmp_512: int;
  var {:scalar} Tmp_514: int;
  var {:dopa} {:scalar} powerPolicy: int;
  var {:pointer} pDevExt_13: int;
  var {:pointer} Tmp_515: int;
  var {:pointer} Tmp_516: int;
  var {:scalar} Tmp_517: int;
  var {:pointer} pnpKey: int;
  var {:scalar} Tmp_518: int;
  var {:scalar} Tmp_519: int;
  var {:pointer} pConfig: int;
  var {:pointer} sdv_425: int;
  var {:dopa} {:scalar} powerOnClose: int;
  var {:pointer} Tmp_521: int;
  var {:pointer} sdv_428: int;
  var {:scalar} Tmp_522: int;
  var {:scalar} Tmp_523: int;
  var {:pointer} Tmp_524: int;
  var {:scalar} Tmp_525: int;
  var {:pointer} Tmp_526: int;
  var {:pointer} Tmp_527: int;
  var {:pointer} Tmp_528: int;
  var {:scalar} Tmp_529: int;
  var {:scalar} status_20: int;
  var {:pointer} Tmp_530: int;
  var {:pointer} Tmp_531: int;
  var {:scalar} Tmp_532: int;
  var {:pointer} countSoFar: int;
  var {:pointer} Tmp_533: int;
  var {:pointer} sdv_439: int;
  var {:pointer} Tmp_535: int;
  var {:pointer} Tmp_536: int;
  var {:pointer} PDevObj_14: int;
  var {:pointer} PResList_1: int;
  var {:pointer} PTrResList_1: int;
  var {:pointer} PUserData_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_318: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_1698: int;
  var vslice_dummy_var_1699: int;
  var vslice_dummy_var_1700: int;
  var vslice_dummy_var_1701: int;
  var vslice_dummy_var_1702: int;
  var vslice_dummy_var_1703: int;
  var vslice_dummy_var_1704: int;
  var vslice_dummy_var_1705: int;
  var vslice_dummy_var_1706: int;
  var vslice_dummy_var_1707: int;
  var vslice_dummy_var_1708: int;
  var vslice_dummy_var_1709: int;
  var vslice_dummy_var_1710: int;

  anon0:
    call {:si_unique_call 1105} Tmp_514 := __HAVOC_malloc(20);
    call {:si_unique_call 1106} powerPolicy := __HAVOC_malloc(4);
    call {:si_unique_call 1107} Tmp_518 := __HAVOC_malloc(20);
    call {:si_unique_call 1108} powerOnClose := __HAVOC_malloc(4);
    call {:si_unique_call 1109} Tmp_529 := __HAVOC_malloc(20);
    PDevObj_14 := actual_PDevObj_14;
    PResList_1 := actual_PResList_1;
    PTrResList_1 := actual_PTrResList_1;
    PUserData_1 := actual_PUserData_1;
    call {:si_unique_call 1110} Tmp_506 := __HAVOC_malloc(112);
    call {:si_unique_call 1111} Tmp_507 := __HAVOC_malloc(132);
    call {:si_unique_call 1112} Tmp_508 := __HAVOC_malloc(168);
    call {:si_unique_call 1113} Tmp_509 := __HAVOC_malloc(88);
    call {:si_unique_call 1114} Tmp_511 := __HAVOC_malloc(168);
    call {:si_unique_call 1115} Tmp_515 := __HAVOC_malloc(272);
    call {:si_unique_call 1116} Tmp_521 := __HAVOC_malloc(156);
    call {:si_unique_call 1117} Tmp_526 := __HAVOC_malloc(104);
    call {:si_unique_call 1118} Tmp_527 := __HAVOC_malloc(144);
    call {:si_unique_call 1119} Tmp_528 := __HAVOC_malloc(316);
    call {:si_unique_call 1120} Tmp_530 := __HAVOC_malloc(220);
    call {:si_unique_call 1121} Tmp_531 := __HAVOC_malloc(884);
    call {:si_unique_call 1122} Tmp_533 := __HAVOC_malloc(884);
    call {:si_unique_call 1123} Tmp_536 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    havoc pDevExt_13;
    allocedUserData := 0;
    call {:si_unique_call 1124} sdv_do_paged_code_check();
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1125} SerialSetDeviceFlags(pDevExt_13, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_13), 2, 0);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1126} sdv_425 := ExAllocatePoolWithTag(1, 112, -666022077);
    PUserData_1 := sdv_425;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} PUserData_1 != 0;
    allocedUserData := 1;
    call {:si_unique_call 1127} sdv_RtlZeroMemory(0, 112);
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  L65:
    call {:si_unique_call 1128} sdv_428 := ExAllocatePoolWithTag(1, 128, -666022077);
    pConfig := sdv_428;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 1129} sdv_RtlZeroMemory(0, 128);
    call {:si_unique_call 1130} status_20 := SerialGetPortInfo(PDevObj_14, PResList_1, PTrResList_1, pConfig, PUserData_1);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_20 < 0;
    goto L90;

  L90:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} status_20 >= 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    Tmp_525 := 0;
    goto L101;

  L101:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_523;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    Tmp_532 := 1;
    goto L109;

  L109:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L118;

  L118:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_510 := 1;
    goto L123;

  L123:
    Tmp_519 := Tmp_510;
    goto L124;

  L124:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_1698;
    call {:si_unique_call 1131} boogieTmp := SerialReportMaxBaudRate(vslice_dummy_var_1698);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1132} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    call {:si_unique_call 1133} sdv_439 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_439 != 0;
    assume sdv_439 > 0;
    countSoFar := SerialCount__CONFIGURATION_INFORMATION(sdv_439);
    assume {:nonnull} countSoFar != 0;
    assume countSoFar > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1134} vslice_dummy_var_315 := IoWMIRegistrationControl(0, 1);
    goto L153;

  L153:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    call {:si_unique_call 1135} SerialUnstallIrps(pDevExt_13);
    goto L154;

  L154:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1136} SerialSetDeviceFlags(pDevExt_13, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_13), -1, 0);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1137} SerialSetDeviceFlags(pDevExt_13, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_13), 1, 1);
    goto L164;

  L164:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 1138} sdv_ExFreePool(0);
    goto L165;

  L165:
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} PUserData_1 != 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} allocedUserData != 0;
    call {:si_unique_call 1139} sdv_ExFreePool(0);
    goto L169;

  L169:
    Tmp_507 := strConst__li2bpl137;
    call {:si_unique_call 1140} vslice_dummy_var_314 := SerialDbgPrintEx(11, Tmp_507);
    Tmp_505 := status_20;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon91_Then:
    assume {:partition} allocedUserData == 0;
    goto L169;

  anon90_Then:
    assume {:partition} PUserData_1 == 0;
    goto L169;

  anon89_Then:
    assume {:partition} pConfig == 0;
    goto L165;

  anon88_Then:
    goto L154;

  anon87_Then:
    goto L153;

  anon86_Then:
    Tmp_510 := 2;
    goto L123;

  anon85_Then:
    Tmp_519 := 0;
    goto L124;

  anon107_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L118;

  anon108_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L118;

  anon109_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L118;

  anon110_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L118;

  anon116_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L118;

  anon115_Then:
    Tmp_532 := 0;
    goto L109;

  anon114_Then:
    Tmp_525 := 1;
    goto L101;

  anon84_Then:
    assume {:partition} 0 > status_20;
    Tmp_526 := strConst__li2bpl136;
    call {:si_unique_call 1141} vslice_dummy_var_316 := SerialDbgPrintEx(4, Tmp_526);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    call {:si_unique_call 1142} SerialKillPendingIrps(PDevObj_14);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1143} SerialSetDeviceFlags(pDevExt_13, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_13), 1, 1);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1144} SerialSetDeviceFlags(pDevExt_13, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_13), 1, 0);
    goto L164;

  anon117_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    goto L164;

  anon81_Then:
    assume {:partition} 0 <= status_20;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_1699;
    call {:si_unique_call 1145} status_20 := SerialGotoPowerState(vslice_dummy_var_1699, pDevExt_13, 1);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} status_20 < 0;
    goto L90;

  anon83_Then:
    assume {:partition} 0 <= status_20;
    goto L81;

  L81:
    call {:si_unique_call 1146} status_20 := SerialFindInitController(PDevObj_14, pConfig);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} status_20 >= 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} pDevExt_13 != 0;
    Tmp_530 := strConst__li2bpl139;
    call {:si_unique_call 1147} vslice_dummy_var_310 := SerialDbgPrintEx(8, Tmp_530);
    goto L218;

  L218:
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} pDevExt_13 != 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    goto L222;

  L222:
    Tmp_536 := strConst__li2bpl140;
    call {:si_unique_call 1148} vslice_dummy_var_311 := SerialDbgPrintEx(8, Tmp_536);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1149} SerialAddToAllDevs(AllDevObjs__SERIAL_DEVICE_EXTENSION(pDevExt_13));
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1150} vslice_dummy_var_312 := KeSynchronizeExecution(0, li2bplFunctionConstant522, 0);
    call {:si_unique_call 1151} vslice_dummy_var_307 := KeSynchronizeExecution(0, li2bplFunctionConstant523, 0);
    call {:si_unique_call 1152} vslice_dummy_var_308 := KeSynchronizeExecution(0, li2bplFunctionConstant524, 0);
    call {:si_unique_call 1153} vslice_dummy_var_309 := KeSynchronizeExecution(0, li2bplFunctionConstant525, 0);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    Tmp_508 := strConst__li2bpl141;
    call {:si_unique_call 1154} vslice_dummy_var_313 := SerialDbgPrintEx(12, Tmp_508);
    goto L90;

  anon98_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_524;
    assume {:nonnull} Tmp_524 != 0;
    assume Tmp_524 > 0;
    havoc vslice_dummy_var_1700;
    call {:si_unique_call 1155} status_20 := SerialDoExternalNaming(pDevExt_13, vslice_dummy_var_1700);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} status_20 < 0;
    Tmp_527 := strConst__li2bpl142;
    call {:si_unique_call 1156} vslice_dummy_var_317 := SerialDbgPrintEx(14, Tmp_527);
    status_20 := 0;
    goto L90;

  anon99_Then:
    assume {:partition} 0 <= status_20;
    goto L90;

  anon96_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    Tmp_528 := strConst__li2bpl143;
    call {:si_unique_call 1157} vslice_dummy_var_318 := SerialDbgPrintEx(8, Tmp_528);
    Tmp_533 := strConst__li2bpl144;
    call {:si_unique_call 1158} vslice_dummy_var_319 := SerialDbgPrintEx(8, Tmp_533);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_516;
    assume {:nonnull} Tmp_516 != 0;
    assume Tmp_516 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_535;
    assume {:nonnull} Tmp_535 != 0;
    assume Tmp_535 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_1701;
    havoc vslice_dummy_var_1702;
    havoc vslice_dummy_var_1703;
    havoc vslice_dummy_var_1704;
    havoc vslice_dummy_var_1705;
    havoc vslice_dummy_var_1706;
    havoc vslice_dummy_var_1707;
    call {:si_unique_call 1159} status_20 := IoConnectInterrupt(0, li2bplFunctionConstant526, vslice_dummy_var_1701, 0, vslice_dummy_var_1702, vslice_dummy_var_1703, vslice_dummy_var_1704, vslice_dummy_var_1705, vslice_dummy_var_1706, vslice_dummy_var_1707, 0);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} status_20 < 0;
    Tmp_521 := strConst__li2bpl145;
    call {:si_unique_call 1160} vslice_dummy_var_320 := SerialDbgPrintEx(14, Tmp_521);
    Tmp_531 := strConst__li2bpl144;
    call {:si_unique_call 1161} vslice_dummy_var_321 := SerialDbgPrintEx(14, Tmp_531);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_517;
    assume {:nonnull} Tmp_518 != 0;
    assume Tmp_518 > 0;
    assume {:nonnull} Tmp_518 != 0;
    assume Tmp_518 > 0;
    assume {:nonnull} Tmp_518 != 0;
    assume Tmp_518 > 0;
    assume {:nonnull} Tmp_518 != 0;
    assume Tmp_518 > 0;
    assume {:nonnull} Tmp_518 != 0;
    assume Tmp_518 > 0;
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_1708;
    havoc vslice_dummy_var_1709;
    call {:si_unique_call 1162} SerialLogError(vslice_dummy_var_1708, PDevObj_14, vslice_dummy_var_1709, Tmp_518, 0, 0, 0, 1, status_20, -1073348601, Tmp_517, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_13))], 0, 0);
    status_20 := -1073348601;
    goto L90;

  anon100_Then:
    assume {:partition} 0 <= status_20;
    goto L222;

  anon97_Then:
    goto L222;

  anon95_Then:
    assume {:partition} pDevExt_13 == 0;
    goto L219;

  L219:
    call {:si_unique_call 1163} SerialFinishStartDevice_loop_L219();
    goto L219_last;

  L219_last:
    goto L219_dummy;

  L219_dummy:
    assume false;
    return;

  anon94_Then:
    assume {:partition} pDevExt_13 == 0;
    Tmp_511 := strConst__li2bpl138;
    call {:si_unique_call 1164} vslice_dummy_var_322 := SerialDbgPrintEx(14, Tmp_511);
    goto L218;

  anon93_Then:
    assume {:partition} 0 > status_20;
    goto L90;

  anon82_Then:
    goto L81;

  anon113_Then:
    assume {:partition} pConfig == 0;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    assume {:nonnull} Tmp_514 != 0;
    assume Tmp_514 > 0;
    assume {:nonnull} Tmp_514 != 0;
    assume Tmp_514 > 0;
    assume {:nonnull} Tmp_514 != 0;
    assume Tmp_514 > 0;
    assume {:nonnull} Tmp_514 != 0;
    assume Tmp_514 > 0;
    assume {:nonnull} Tmp_514 != 0;
    assume Tmp_514 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_1710;
    call {:si_unique_call 1165} SerialLogError(vslice_dummy_var_1710, 0, Tmp_514, Tmp_529, 0, 0, 0, 37, 0, -1073348600, 0, 0, 0, 0);
    Tmp_515 := strConst__li2bpl146;
    call {:si_unique_call 1166} vslice_dummy_var_323 := SerialDbgPrintEx(14, Tmp_515);
    status_20 := -1073741670;
    goto L90;

  anon104_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon105_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon106_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon112_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon111_Then:
    assume {:partition} PUserData_1 == 0;
    Tmp_505 := -1073741670;
    goto L1;

  anon80_Then:
    goto L17;

  L17:
    call {:si_unique_call 1167} status_20 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} status_20 >= 0;
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    Tmp_506 := strConst__li2bpl147;
    call {:si_unique_call 1168} vslice_dummy_var_324 := SerialGetRegistryKeyValue(pnpKey, Tmp_506, 56, powerPolicy, 4);
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    Tmp_522 := 0;
    goto L312;

  L312:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    Tmp_509 := strConst__li2bpl148;
    call {:si_unique_call 1169} vslice_dummy_var_325 := SerialGetRegistryKeyValue(pnpKey, Tmp_509, 44, powerOnClose, 4);
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    Tmp_512 := 1;
    goto L319;

  L319:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1170} vslice_dummy_var_326 := ZwClose(0);
    goto L65;

  anon103_Then:
    Tmp_512 := 0;
    goto L319;

  anon102_Then:
    Tmp_522 := 1;
    goto L312;

  anon101_Then:
    assume {:partition} 0 > status_20;
    goto L65;

  anon79_Then:
    goto L17;
}



procedure {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_15: int, actual_PIrp_11: int) returns (Tmp_537: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_15: int, actual_PIrp_11: int) returns (Tmp_537: int)
{
  var {:scalar} pIdBuf: int;
  var {:scalar} sdv_442: int;
  var {:pointer} sdv_443: int;
  var {:pointer} Tmp_538: int;
  var {:dopa} {:scalar} isMulti_1: int;
  var {:pointer} sdv_448: int;
  var {:pointer} Tmp_539: int;
  var {:pointer} Tmp_540: int;
  var {:pointer} pResList: int;
  var {:pointer} Tmp_541: int;
  var {:pointer} Tmp_542: int;
  var {:pointer} Tmp_543: int;
  var {:pointer} Tmp_544: int;
  var {:pointer} Tmp_545: int;
  var {:pointer} pDevExt_14: int;
  var {:pointer} Tmp_546: int;
  var {:pointer} Tmp_548: int;
  var {:pointer} Tmp_549: int;
  var {:pointer} Tmp_550: int;
  var {:pointer} Tmp_551: int;
  var {:pointer} Tmp_552: int;
  var {:pointer} Tmp_553: int;
  var {:scalar} cap: int;
  var {:pointer} Tmp_554: int;
  var {:pointer} Tmp_555: int;
  var {:scalar} Tmp_556: int;
  var {:scalar} pnpIdStrLen: int;
  var {:scalar} pendingIRPs: int;
  var {:pointer} Tmp_557: int;
  var {:pointer} Tmp_558: int;
  var {:pointer} pQueryCapsEvent: int;
  var {:pointer} Tmp_559: int;
  var {:pointer} Tmp_560: int;
  var {:pointer} Tmp_561: int;
  var {:pointer} Tmp_562: int;
  var {:pointer} pIrpStack_6: int;
  var {:pointer} Tmp_563: int;
  var {:pointer} Tmp_564: int;
  var {:pointer} Tmp_565: int;
  var {:dopa} {:scalar} isMulti_2: int;
  var {:pointer} Tmp_566: int;
  var {:pointer} Tmp_567: int;
  var {:pointer} sdv_476: int;
  var {:pointer} pLowerDevObj_4: int;
  var {:pointer} Tmp_569: int;
  var {:pointer} Tmp_570: int;
  var {:pointer} Tmp_571: int;
  var {:pointer} Tmp_572: int;
  var {:scalar} gotInt_1: int;
  var {:pointer} Tmp_573: int;
  var {:pointer} pResDesc: int;
  var {:scalar} allocLen: int;
  var {:pointer} Tmp_574: int;
  var {:pointer} Tmp_575: int;
  var {:pointer} Tmp_576: int;
  var {:scalar} listNum: int;
  var {:pointer} Tmp_577: int;
  var {:scalar} Tmp_578: int;
  var {:pointer} Tmp_579: int;
  var {:scalar} pendingIRPs_1: int;
  var {:pointer} pReqList: int;
  var {:pointer} Tmp_580: int;
  var {:scalar} Tmp_581: int;
  var {:pointer} Tmp_582: int;
  var {:pointer} Tmp_583: int;
  var {:scalar} Tmp_584: int;
  var {:pointer} Tmp_585: int;
  var {:pointer} Tmp_586: int;
  var {:scalar} sdv_502: int;
  var {:pointer} Tmp_587: int;
  var {:pointer} Tmp_588: int;
  var {:scalar} pendingIRPs_2: int;
  var {:pointer} Tmp_589: int;
  var {:pointer} Tmp_590: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_591: int;
  var {:pointer} Tmp_592: int;
  var {:scalar} Tmp_593: int;
  var {:scalar} Tmp_594: int;
  var {:pointer} sdv_510: int;
  var {:pointer} Tmp_595: int;
  var {:pointer} Tmp_596: int;
  var {:pointer} pnpKey_1: int;
  var {:pointer} pResFiltEvent: int;
  var {:scalar} gotISR_1: int;
  var {:pointer} Tmp_597: int;
  var {:pointer} Tmp_599: int;
  var {:scalar} curStrLen: int;
  var {:pointer} Tmp_600: int;
  var {:pointer} curStr: int;
  var {:pointer} Tmp_601: int;
  var {:pointer} Tmp_602: int;
  var {:pointer} Tmp_603: int;
  var {:pointer} Tmp_604: int;
  var {:pointer} pDevCaps: int;
  var {:pointer} Tmp_605: int;
  var {:scalar} status_21: int;
  var {:scalar} sdv_536: int;
  var {:pointer} Tmp_606: int;
  var {:pointer} Tmp_607: int;
  var {:scalar} Tmp_608: int;
  var {:pointer} pnpKey_2: int;
  var {:pointer} Tmp_609: int;
  var {:scalar} Tmp_610: int;
  var {:pointer} Tmp_611: int;
  var {:scalar} sdv_541: int;
  var {:pointer} Tmp_612: int;
  var {:pointer} Tmp_613: int;
  var {:pointer} Tmp_614: int;
  var {:pointer} Tmp_615: int;
  var {:pointer} PDevObj_15: int;
  var {:pointer} PIrp_11: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;

  anon0:
    call {:si_unique_call 1171} pIdBuf := __HAVOC_malloc(12);
    call {:si_unique_call 1172} isMulti_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1173} isMulti_2 := __HAVOC_malloc(4);
    PDevObj_15 := actual_PDevObj_15;
    PIrp_11 := actual_PIrp_11;
    call {:si_unique_call 1174} Tmp_538 := __HAVOC_malloc(28);
    call {:si_unique_call 1175} Tmp_539 := __HAVOC_malloc(72);
    call {:si_unique_call 1176} Tmp_540 := __HAVOC_malloc(136);
    call {:si_unique_call 1177} Tmp_541 := __HAVOC_malloc(112);
    call {:si_unique_call 1178} Tmp_542 := __HAVOC_malloc(176);
    call {:si_unique_call 1179} Tmp_543 := __HAVOC_malloc(112);
    call {:si_unique_call 1180} Tmp_544 := __HAVOC_malloc(116);
    call {:si_unique_call 1181} Tmp_545 := __HAVOC_malloc(72);
    call {:si_unique_call 1182} Tmp_546 := __HAVOC_malloc(132);
    call {:si_unique_call 1183} Tmp_548 := __HAVOC_malloc(60);
    call {:si_unique_call 1184} Tmp_549 := __HAVOC_malloc(72);
    call {:si_unique_call 1185} Tmp_550 := __HAVOC_malloc(60);
    call {:si_unique_call 1186} Tmp_551 := __HAVOC_malloc(156);
    call {:si_unique_call 1187} Tmp_552 := __HAVOC_malloc(144);
    call {:si_unique_call 1188} Tmp_553 := __HAVOC_malloc(72);
    call {:si_unique_call 1189} Tmp_554 := __HAVOC_malloc(92);
    call {:si_unique_call 1190} Tmp_555 := __HAVOC_malloc(72);
    call {:si_unique_call 1191} Tmp_557 := __HAVOC_malloc(140);
    call {:si_unique_call 1192} Tmp_558 := __HAVOC_malloc(72);
    call {:si_unique_call 1193} Tmp_559 := __HAVOC_malloc(120);
    call {:si_unique_call 1194} Tmp_560 := __HAVOC_malloc(60);
    call {:si_unique_call 1195} Tmp_561 := __HAVOC_malloc(180);
    call {:si_unique_call 1196} Tmp_562 := __HAVOC_malloc(128);
    call {:si_unique_call 1197} Tmp_563 := __HAVOC_malloc(60);
    call {:si_unique_call 1198} Tmp_565 := __HAVOC_malloc(88);
    call {:si_unique_call 1199} Tmp_566 := __HAVOC_malloc(420);
    call {:si_unique_call 1200} Tmp_567 := __HAVOC_malloc(28);
    call {:si_unique_call 1201} Tmp_569 := __HAVOC_malloc(148);
    call {:si_unique_call 1202} Tmp_570 := __HAVOC_malloc(28);
    call {:si_unique_call 1203} Tmp_571 := __HAVOC_malloc(100);
    call {:si_unique_call 1204} Tmp_572 := __HAVOC_malloc(128);
    call {:si_unique_call 1205} Tmp_573 := __HAVOC_malloc(116);
    call {:si_unique_call 1206} Tmp_574 := __HAVOC_malloc(120);
    call {:si_unique_call 1207} Tmp_575 := __HAVOC_malloc(60);
    call {:si_unique_call 1208} Tmp_576 := __HAVOC_malloc(88);
    call {:si_unique_call 1209} Tmp_577 := __HAVOC_malloc(72);
    call {:si_unique_call 1210} Tmp_579 := __HAVOC_malloc(168);
    call {:si_unique_call 1211} Tmp_580 := __HAVOC_malloc(100);
    call {:si_unique_call 1212} Tmp_582 := __HAVOC_malloc(120);
    call {:si_unique_call 1213} Tmp_583 := __HAVOC_malloc(132);
    call {:si_unique_call 1214} Tmp_585 := __HAVOC_malloc(60);
    call {:si_unique_call 1215} Tmp_586 := __HAVOC_malloc(132);
    call {:si_unique_call 1216} Tmp_587 := __HAVOC_malloc(72);
    call {:si_unique_call 1217} Tmp_589 := __HAVOC_malloc(64);
    call {:si_unique_call 1218} Tmp_590 := __HAVOC_malloc(28);
    call {:si_unique_call 1219} Tmp_591 := __HAVOC_malloc(60);
    call {:si_unique_call 1220} Tmp_592 := __HAVOC_malloc(128);
    call {:si_unique_call 1221} Tmp_595 := __HAVOC_malloc(64);
    call {:si_unique_call 1222} Tmp_596 := __HAVOC_malloc(112);
    call {:si_unique_call 1223} Tmp_597 := __HAVOC_malloc(60);
    call {:si_unique_call 1224} Tmp_599 := __HAVOC_malloc(60);
    call {:si_unique_call 1225} Tmp_600 := __HAVOC_malloc(168);
    call {:si_unique_call 1226} Tmp_601 := __HAVOC_malloc(88);
    call {:si_unique_call 1227} Tmp_602 := __HAVOC_malloc(72);
    call {:si_unique_call 1228} Tmp_603 := __HAVOC_malloc(72);
    call {:si_unique_call 1229} Tmp_604 := __HAVOC_malloc(116);
    call {:si_unique_call 1230} Tmp_605 := __HAVOC_malloc(72);
    call {:si_unique_call 1231} Tmp_606 := __HAVOC_malloc(432);
    call {:si_unique_call 1232} Tmp_607 := __HAVOC_malloc(72);
    call {:si_unique_call 1233} Tmp_609 := __HAVOC_malloc(112);
    call {:si_unique_call 1234} Tmp_611 := __HAVOC_malloc(176);
    call {:si_unique_call 1235} Tmp_612 := __HAVOC_malloc(132);
    call {:si_unique_call 1236} Tmp_613 := __HAVOC_malloc(144);
    call {:si_unique_call 1237} Tmp_614 := __HAVOC_malloc(72);
    call {:si_unique_call 1238} Tmp_615 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    havoc pDevExt_14;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc pLowerDevObj_4;
    call {:si_unique_call 1239} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1240} sdv_do_paged_code_check();
    call {:si_unique_call 1241} status_21 := SerialIRPPrologue(PIrp_11, pDevExt_14);
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} status_21 != 0;
    Tmp_614 := strConst__li2bpl3;
    call {:si_unique_call 1242} vslice_dummy_var_338 := SerialDbgPrintEx(9, Tmp_614);
    call {:si_unique_call 1243} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1244} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := status_21;
    goto L1;

  L1:
    call {:si_unique_call 1245} SLIC_SerialPnpDispatch_exit(strConst__li2bpl0);
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon206_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon149_Then:
    assume {:partition} status_21 == 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    goto L270;

  L270:
    call {:si_unique_call 1246} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1247} status_21 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    Tmp_537 := status_21;
    goto L1;

  anon183_Then:
    Tmp_612 := strConst__li2bpl158;
    call {:si_unique_call 1248} vslice_dummy_var_396 := SerialDbgPrintEx(12, Tmp_612);
    Tmp_560 := strConst__li2bpl159;
    call {:si_unique_call 1249} vslice_dummy_var_397 := SerialDbgPrintEx(12, Tmp_560);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1250} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 8, 1);
    call {:si_unique_call 1251} SerialKillPendingIrps(PDevObj_15);
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1252} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1253} vslice_dummy_var_398 := sdv_InterlockedDecrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1254} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1255} sdv_536 := sdv_InterlockedDecrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    pendingIRPs_1 := sdv_536;
    goto anon222_Then, anon222_Else;

  anon222_Else:
    assume {:partition} pendingIRPs_1 != 0;
    call {:si_unique_call 1256} vslice_dummy_var_327 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L92;

  L92:
    call {:si_unique_call 1257} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1258} vslice_dummy_var_399 := sdv_InterlockedIncrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1259} SerialDisableInterfacesResources(PDevObj_15, 0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1260} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1261} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon222_Then:
    assume {:partition} pendingIRPs_1 == 0;
    goto L92;

  anon221_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon184_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    goto L109;

  L109:
    call {:si_unique_call 1262} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1263} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon151_Then:
    goto L109;

  anon185_Then:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Tmp_580 := strConst__li2bpl185;
    call {:si_unique_call 1264} vslice_dummy_var_391 := SerialDbgPrintEx(12, Tmp_580);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    goto L129;

  L129:
    call {:si_unique_call 1265} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1266} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon154_Then:
    goto L127;

  L127:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1267} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1268} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon155_Then:
    call {:si_unique_call 1269} status_21 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} status_21 >= 0;
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Tmp_595 := strConst__li2bpl98;
    call {:si_unique_call 1270} status_21 := SerialGetRegistryKeyValue(pnpKey_1, Tmp_595, 32, isMulti_1, 4);
    call {:si_unique_call 1271} vslice_dummy_var_328 := ZwClose(0);
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    Tmp_588 := strConst__li2bpl161;
    goto L162;

  L162:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    Tmp_584 := 18;
    goto L166;

  L166:
    pnpIdStrLen := Tmp_584;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    allocLen := 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc curStr;
    goto L179;

  L179:
    call {:si_unique_call 1272} allocLen, curStrLen := SerialPnpDispatch_loop_L179(sdv_442, allocLen, curStrLen, curStr);
    goto L179_last;

  L179_last:
    curStrLen := sdv_442;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} curStrLen != 0;
    allocLen := allocLen + curStrLen * 2 + 2;
    goto anon218_Else_dummy;

  anon218_Else_dummy:
    assume false;
    return;

  anon218_Then:
    assume {:partition} curStrLen == 0;
    allocLen := allocLen + 2;
    Tmp_581 := allocLen + pnpIdStrLen + 2;
    call {:si_unique_call 1273} sdv_510 := ExAllocatePoolWithTag(1, Tmp_581, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pIdBuf)] := sdv_510;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pIdBuf)] != 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_594;
    call {:si_unique_call 1274} sdv_RtlZeroMemory(0, Tmp_594);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1275} sdv_RtlCopyMemory(0, 0, allocLen);
    call {:si_unique_call 1276} vslice_dummy_var_329 := corral_nondet();
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1277} sdv_ExFreePool(0);
    goto L208;

  L208:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1278} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1279} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon219_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pIdBuf)] == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1280} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_615 := strConst__li2bpl3;
    call {:si_unique_call 1281} vslice_dummy_var_392 := SerialDbgPrintEx(9, Tmp_615);
    call {:si_unique_call 1282} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1283} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := -1073741670;
    goto L1;

  anon217_Then:
    Tmp_563 := strConst__li2bpl162;
    call {:si_unique_call 1284} vslice_dummy_var_393 := SerialDbgPrintEx(12, Tmp_563);
    Tmp_608 := pnpIdStrLen + 4;
    call {:si_unique_call 1285} sdv_476 := ExAllocatePoolWithTag(1, Tmp_608, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pIdBuf)] := sdv_476;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pIdBuf)] != 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_578;
    call {:si_unique_call 1286} sdv_RtlZeroMemory(0, Tmp_578);
    call {:si_unique_call 1287} vslice_dummy_var_330 := corral_nondet();
    goto L208;

  anon220_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pIdBuf)] == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_602 := strConst__li2bpl3;
    call {:si_unique_call 1288} vslice_dummy_var_394 := SerialDbgPrintEx(9, Tmp_602);
    call {:si_unique_call 1289} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1290} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := -1073741670;
    goto L1;

  anon216_Then:
    Tmp_584 := 18;
    goto L166;

  anon157_Then:
    Tmp_588 := strConst__li2bpl160;
    goto L162;

  anon156_Then:
    assume {:partition} 0 > status_21;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_587 := strConst__li2bpl3;
    call {:si_unique_call 1291} vslice_dummy_var_395 := SerialDbgPrintEx(9, Tmp_587);
    call {:si_unique_call 1292} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1293} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := status_21;
    goto L1;

  anon153_Then:
    goto L129;

  anon152_Then:
    goto L127;

  anon186_Then:
    Tmp_571 := strConst__li2bpl157;
    call {:si_unique_call 1294} vslice_dummy_var_390 := SerialDbgPrintEx(12, Tmp_571);
    goto L270;

  anon187_Then:
    Tmp_576 := strConst__li2bpl156;
    call {:si_unique_call 1295} vslice_dummy_var_389 := SerialDbgPrintEx(12, Tmp_576);
    goto L270;

  anon188_Then:
    Tmp_544 := strConst__li2bpl155;
    call {:si_unique_call 1296} vslice_dummy_var_388 := SerialDbgPrintEx(12, Tmp_544);
    goto L270;

  anon189_Then:
    Tmp_541 := strConst__li2bpl154;
    call {:si_unique_call 1297} vslice_dummy_var_387 := SerialDbgPrintEx(12, Tmp_541);
    goto L270;

  anon190_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    Tmp_561 := strConst__li2bpl179;
    call {:si_unique_call 1298} vslice_dummy_var_375 := SerialDbgPrintEx(12, Tmp_561);
    Tmp_575 := strConst__li2bpl159;
    call {:si_unique_call 1299} vslice_dummy_var_376 := SerialDbgPrintEx(12, Tmp_575);
    call {:si_unique_call 1300} sdv_443 := ExAllocatePoolWithTag(512, 16, -666022077);
    pResFiltEvent := sdv_443;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:partition} pResFiltEvent != 0;
    call {:si_unique_call 1301} KeInitializeEvent(pResFiltEvent, 1, 0);
    call {:si_unique_call 1302} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1303} sdv_IoSetCompletionRoutine(PIrp_11, li2bplFunctionConstant515, pResFiltEvent, 1, 1, 1);
    call {:si_unique_call 1304} status_21 := sdv_IoCallDriver(pLowerDevObj_4, PIrp_11);
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} status_21 == 259;
    call {:si_unique_call 1305} vslice_dummy_var_331 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L319;

  L319:
    call {:si_unique_call 1306} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    goto L327;

  L327:
    call {:si_unique_call 1307} status_21 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} status_21 >= 0;
    Tmp_589 := strConst__li2bpl98;
    call {:si_unique_call 1308} status_21 := SerialGetRegistryKeyValue(pnpKey_2, Tmp_589, 32, isMulti_2, 4);
    call {:si_unique_call 1309} vslice_dummy_var_332 := ZwClose(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc pReqList;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc Tmp_606;
    pResList := Tmp_606;
    Tmp_611 := strConst__li2bpl180;
    call {:si_unique_call 1310} vslice_dummy_var_377 := SerialDbgPrintEx(12, Tmp_611);
    listNum := 0;
    goto L346;

  L346:
    call {:si_unique_call 1311} Tmp_556, Tmp_566, Tmp_572, gotInt_1, pResDesc, listNum, Tmp_579, Tmp_583, j, gotISR_1, Tmp_604, vslice_dummy_var_378, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381 := SerialPnpDispatch_loop_L346(pResList, pDevExt_14, Tmp_556, isMulti_2, Tmp_566, pLowerDevObj_4, Tmp_572, gotInt_1, pResDesc, listNum, Tmp_579, pReqList, Tmp_583, j, gotISR_1, Tmp_604, vslice_dummy_var_378, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381);
    goto L346_last;

  L346_last:
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    gotISR_1 := 0;
    gotInt_1 := 0;
    Tmp_604 := strConst__li2bpl181;
    call {:si_unique_call 1312} vslice_dummy_var_378 := SerialDbgPrintEx(12, Tmp_604);
    j := 0;
    goto L354;

  L354:
    call {:si_unique_call 1313} Tmp_556, Tmp_566, Tmp_572, gotInt_1, pResDesc, Tmp_579, Tmp_583, j, gotISR_1, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381 := SerialPnpDispatch_loop_L354(pResList, pDevExt_14, Tmp_556, isMulti_2, Tmp_566, pLowerDevObj_4, Tmp_572, gotInt_1, pResDesc, Tmp_579, Tmp_583, j, gotISR_1, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381);
    goto L354_last;

  L354_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    Tmp_556 := j;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_566;
    pResDesc := Tmp_566 + Tmp_556 * 420;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    goto L363;

  L363:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} gotInt_1 != 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    goto L369;

  L369:
    j := j + 1;
    goto L369_dummy;

  L369_dummy:
    assume false;
    return;

  anon167_Then:
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} gotInt_1 == 0;
    goto L369;

  anon170_Then:
    assume {:partition} gotInt_1 != 0;
    goto L355;

  L355:
    listNum := listNum + 1;
    goto L355_dummy;

  L355_dummy:
    assume false;
    return;

  anon169_Then:
    assume {:partition} gotISR_1 != 0;
    goto L355;

  anon168_Then:
    assume {:partition} gotInt_1 == 0;
    goto L364;

  anon166_Then:
    goto L364;

  anon205_Then:
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} gotInt_1 != 0;
    goto L363;

  anon165_Then:
    assume {:partition} gotInt_1 == 0;
    gotInt_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_583 := strConst__li2bpl183;
    call {:si_unique_call 1314} vslice_dummy_var_380 := SerialDbgPrintEx(12, Tmp_583);
    goto L363;

  anon215_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    Tmp_579 := strConst__li2bpl184;
    call {:si_unique_call 1315} vslice_dummy_var_381 := SerialDbgPrintEx(12, Tmp_579);
    goto L363;

  anon214_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} gotISR_1 == 0;
    gotISR_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_572 := strConst__li2bpl182;
    call {:si_unique_call 1316} vslice_dummy_var_379 := SerialDbgPrintEx(12, Tmp_572);
    goto L363;

  anon172_Then:
    assume {:partition} gotISR_1 != 0;
    goto L363;

  anon171_Then:
    goto L363;

  anon164_Then:
    goto L363;

  anon163_Then:
    goto L355;

  anon162_Then:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_607 := strConst__li2bpl3;
    call {:si_unique_call 1317} vslice_dummy_var_382 := SerialDbgPrintEx(9, Tmp_607);
    call {:si_unique_call 1318} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1319} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := 0;
    goto L1;

  anon161_Then:
    assume {:partition} 0 > status_21;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_539 := strConst__li2bpl3;
    call {:si_unique_call 1320} vslice_dummy_var_383 := SerialDbgPrintEx(9, Tmp_539);
    call {:si_unique_call 1321} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1322} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := status_21;
    goto L1;

  anon159_Then:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto L327;

  anon160_Then:
    Tmp_574 := strConst__li2bpl163;
    call {:si_unique_call 1323} vslice_dummy_var_384 := SerialDbgPrintEx(12, Tmp_574);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc status_21;
    Tmp_555 := strConst__li2bpl3;
    call {:si_unique_call 1324} vslice_dummy_var_385 := SerialDbgPrintEx(9, Tmp_555);
    call {:si_unique_call 1325} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1326} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := status_21;
    goto L1;

  anon158_Then:
    assume {:partition} status_21 != 259;
    goto L319;

  anon213_Then:
    assume {:partition} pResFiltEvent == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_558 := strConst__li2bpl3;
    call {:si_unique_call 1327} vslice_dummy_var_386 := SerialDbgPrintEx(9, Tmp_558);
    call {:si_unique_call 1328} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1329} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := -1073741670;
    goto L1;

  anon191_Then:
    Tmp_542 := strConst__li2bpl153;
    call {:si_unique_call 1330} vslice_dummy_var_374 := SerialDbgPrintEx(12, Tmp_542);
    goto L270;

  anon192_Then:
    Tmp_600 := strConst__li2bpl164;
    call {:si_unique_call 1331} vslice_dummy_var_370 := SerialDbgPrintEx(12, Tmp_600);
    call {:si_unique_call 1332} sdv_448 := ExAllocatePoolWithTag(512, 16, -666022077);
    pQueryCapsEvent := sdv_448;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} pQueryCapsEvent != 0;
    call {:si_unique_call 1333} KeInitializeEvent(pQueryCapsEvent, 1, 0);
    call {:si_unique_call 1334} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1335} sdv_IoSetCompletionRoutine(PIrp_11, li2bplFunctionConstant515, pQueryCapsEvent, 1, 1, 1);
    call {:si_unique_call 1336} status_21 := sdv_IoCallDriver(pLowerDevObj_4, PIrp_11);
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} status_21 == 259;
    call {:si_unique_call 1337} vslice_dummy_var_333 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L458;

  L458:
    call {:si_unique_call 1338} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc status_21;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    goto L483;

  L483:
    Tmp_549 := strConst__li2bpl3;
    call {:si_unique_call 1339} vslice_dummy_var_372 := SerialDbgPrintEx(9, Tmp_549);
    call {:si_unique_call 1340} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1341} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := status_21;
    goto L1;

  anon212_Then:
    Tmp_609 := strConst__li2bpl165;
    call {:si_unique_call 1342} vslice_dummy_var_371 := SerialDbgPrintEx(12, Tmp_609);
    call {:si_unique_call 1343} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(PIrp_11);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    havoc pDevCaps;
    cap := 2;
    goto L476;

  L476:
    call {:si_unique_call 1344} cap, Tmp_567, Tmp_590, Tmp_593, Tmp_610 := SerialPnpDispatch_loop_L476(pDevExt_14, cap, Tmp_567, Tmp_590, Tmp_593, pDevCaps, Tmp_610);
    goto L476_last;

  L476_last:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} 7 > cap;
    Tmp_593 := cap;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_567;
    Tmp_610 := cap;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    havoc Tmp_590;
    assume {:nonnull} Tmp_567 != 0;
    assume Tmp_567 > 0;
    assume {:nonnull} Tmp_590 != 0;
    assume Tmp_590 > 0;
    cap := cap + 1;
    goto anon174_Else_dummy;

  anon174_Else_dummy:
    assume false;
    return;

  anon174_Then:
    assume {:partition} cap >= 7;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_570;
    assume {:nonnull} Tmp_570 != 0;
    assume Tmp_570 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_538;
    assume {:nonnull} Tmp_538 != 0;
    assume Tmp_538 > 0;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L483;

  anon173_Then:
    assume {:partition} status_21 != 259;
    goto L458;

  anon211_Then:
    assume {:partition} pQueryCapsEvent == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_553 := strConst__li2bpl3;
    call {:si_unique_call 1345} vslice_dummy_var_373 := SerialDbgPrintEx(9, Tmp_553);
    call {:si_unique_call 1346} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1347} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := -1073741670;
    goto L1;

  anon193_Then:
    Tmp_562 := strConst__li2bpl152;
    call {:si_unique_call 1348} vslice_dummy_var_369 := SerialDbgPrintEx(12, Tmp_562);
    goto L270;

  anon194_Then:
    Tmp_551 := strConst__li2bpl151;
    call {:si_unique_call 1349} vslice_dummy_var_362 := SerialDbgPrintEx(12, Tmp_551);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon201_Then, anon201_Else;

  anon201_Else:
    Tmp_552 := strConst__li2bpl171;
    call {:si_unique_call 1350} vslice_dummy_var_367 := SerialDbgPrintEx(12, Tmp_552);
    goto L524;

  L524:
    call {:si_unique_call 1351} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1352} status_21 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    Tmp_537 := status_21;
    goto L1;

  anon201_Then:
    Tmp_554 := strConst__li2bpl166;
    call {:si_unique_call 1353} vslice_dummy_var_368 := SerialDbgPrintEx(12, Tmp_554);
    goto L524;

  anon202_Then:
    Tmp_592 := strConst__li2bpl170;
    call {:si_unique_call 1354} vslice_dummy_var_366 := SerialDbgPrintEx(12, Tmp_592);
    goto L524;

  anon203_Then:
    Tmp_559 := strConst__li2bpl169;
    call {:si_unique_call 1355} vslice_dummy_var_365 := SerialDbgPrintEx(12, Tmp_559);
    goto L524;

  anon204_Then:
    Tmp_586 := strConst__li2bpl168;
    call {:si_unique_call 1356} vslice_dummy_var_364 := SerialDbgPrintEx(12, Tmp_586);
    goto L524;

  anon175_Then:
    Tmp_596 := strConst__li2bpl167;
    call {:si_unique_call 1357} vslice_dummy_var_363 := SerialDbgPrintEx(12, Tmp_596);
    goto L524;

  anon195_Then:
    Tmp_557 := strConst__li2bpl150;
    call {:si_unique_call 1358} vslice_dummy_var_360 := SerialDbgPrintEx(12, Tmp_557);
    Tmp_591 := strConst__li2bpl159;
    call {:si_unique_call 1359} vslice_dummy_var_361 := SerialDbgPrintEx(12, Tmp_591);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1360} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 2, 0);
    goto L541;

  L541:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1361} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1362} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon176_Then:
    goto L541;

  anon196_Then:
    Tmp_540 := strConst__li2bpl172;
    call {:si_unique_call 1363} vslice_dummy_var_354 := SerialDbgPrintEx(12, Tmp_540);
    Tmp_597 := strConst__li2bpl159;
    call {:si_unique_call 1364} vslice_dummy_var_355 := SerialDbgPrintEx(12, Tmp_597);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_546 := strConst__li2bpl178;
    call {:si_unique_call 1365} vslice_dummy_var_356 := SerialDbgPrintEx(12, Tmp_546);
    Tmp_603 := strConst__li2bpl3;
    call {:si_unique_call 1366} vslice_dummy_var_357 := SerialDbgPrintEx(9, Tmp_603);
    call {:si_unique_call 1367} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1368} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := -1073741637;
    goto L1;

  anon177_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    call {:si_unique_call 1369} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1370} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon178_Then:
    call {:si_unique_call 1371} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    call {:si_unique_call 1372} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_601 := strConst__li2bpl177;
    call {:si_unique_call 1373} vslice_dummy_var_358 := SerialDbgPrintEx(12, Tmp_601);
    Tmp_545 := strConst__li2bpl3;
    call {:si_unique_call 1374} vslice_dummy_var_359 := SerialDbgPrintEx(9, Tmp_545);
    call {:si_unique_call 1375} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1376} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := 17;
    goto L1;

  anon179_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1377} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 2, 1);
    call {:si_unique_call 1378} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1379} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1380} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon197_Then:
    Tmp_543 := strConst__li2bpl173;
    call {:si_unique_call 1381} vslice_dummy_var_350 := SerialDbgPrintEx(12, Tmp_543);
    Tmp_550 := strConst__li2bpl159;
    call {:si_unique_call 1382} vslice_dummy_var_351 := SerialDbgPrintEx(12, Tmp_550);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1383} SerialSetDeviceFlags(pDevExt_14, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_14), 2, 1);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1384} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 4, 1);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1385} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 2, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1386} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1387} vslice_dummy_var_352 := sdv_InterlockedDecrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1388} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1389} sdv_502 := sdv_InterlockedDecrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    pendingIRPs := sdv_502;
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:partition} pendingIRPs != 0;
    call {:si_unique_call 1390} vslice_dummy_var_334 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L643;

  L643:
    call {:si_unique_call 1391} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1392} vslice_dummy_var_353 := sdv_InterlockedIncrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    call {:si_unique_call 1393} SerialReleaseResources(pDevExt_14);
    goto L650;

  L650:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1394} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1395} Tmp_537 := sdv_IoCallDriver(pLowerDevObj_4, PIrp_11);
    goto L1;

  anon180_Then:
    goto L650;

  anon210_Then:
    assume {:partition} pendingIRPs == 0;
    goto L643;

  anon198_Then:
    Tmp_569 := strConst__li2bpl149;
    call {:si_unique_call 1396} vslice_dummy_var_348 := SerialDbgPrintEx(12, Tmp_569);
    Tmp_548 := strConst__li2bpl159;
    call {:si_unique_call 1397} vslice_dummy_var_349 := SerialDbgPrintEx(12, Tmp_548);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1398} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 1, 0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1399} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1400} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon199_Then:
    Tmp_582 := strConst__li2bpl174;
    call {:si_unique_call 1401} vslice_dummy_var_345 := SerialDbgPrintEx(12, Tmp_582);
    Tmp_585 := strConst__li2bpl159;
    call {:si_unique_call 1402} vslice_dummy_var_346 := SerialDbgPrintEx(12, Tmp_585);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1403} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 1, 1);
    call {:si_unique_call 1404} SerialKillPendingIrps(PDevObj_15);
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1405} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1406} vslice_dummy_var_347 := sdv_InterlockedDecrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1407} Tmp_564 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1408} sdv_541 := sdv_InterlockedDecrement(Tmp_564);
    assume {:nonnull} Tmp_564 != 0;
    assume Tmp_564 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    pendingIRPs_2 := sdv_541;
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} pendingIRPs_2 != 0;
    call {:si_unique_call 1409} vslice_dummy_var_336 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L697;

  L697:
    call {:si_unique_call 1410} vslice_dummy_var_335 := SerialRemoveDevObj(PDevObj_15);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1411} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1412} Tmp_537 := sdv_IoCallDriver(pLowerDevObj_4, PIrp_11);
    goto L1;

  anon209_Then:
    assume {:partition} pendingIRPs_2 == 0;
    goto L697;

  anon208_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon200_Then:
    Tmp_613 := strConst__li2bpl175;
    call {:si_unique_call 1413} vslice_dummy_var_341 := SerialDbgPrintEx(12, Tmp_613);
    Tmp_599 := strConst__li2bpl159;
    call {:si_unique_call 1414} vslice_dummy_var_342 := SerialDbgPrintEx(12, Tmp_599);
    call {:si_unique_call 1415} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    call {:si_unique_call 1416} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_565 := strConst__li2bpl177;
    call {:si_unique_call 1417} vslice_dummy_var_343 := SerialDbgPrintEx(12, Tmp_565);
    Tmp_605 := strConst__li2bpl3;
    call {:si_unique_call 1418} vslice_dummy_var_344 := SerialDbgPrintEx(9, Tmp_605);
    call {:si_unique_call 1419} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1420} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := 17;
    goto L1;

  anon181_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1421} SerialSetDeviceFlags(pDevExt_14, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_14), 1, 1);
    call {:si_unique_call 1422} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1423} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1424} Tmp_537 := SerialIoCallDriver(pDevExt_14, pLowerDevObj_4, PIrp_11);
    goto L1;

  anon150_Then:
    Tmp_573 := strConst__li2bpl176;
    call {:si_unique_call 1425} vslice_dummy_var_339 := SerialDbgPrintEx(12, Tmp_573);
    call {:si_unique_call 1426} MmLockPagableSectionByHandle(0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1427} status_21 := SerialStartDevice(PDevObj_15, PIrp_11);
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    goto L768;

  L768:
    call {:si_unique_call 1428} MmUnlockPagableImageSection(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_577 := strConst__li2bpl3;
    call {:si_unique_call 1429} vslice_dummy_var_340 := SerialDbgPrintEx(9, Tmp_577);
    call {:si_unique_call 1430} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1431} SerialIRPEpilogue(pDevExt_14);
    Tmp_537 := status_21;
    goto L1;

  anon182_Then:
    call {:si_unique_call 1432} vslice_dummy_var_337 := SerialGotoPowerState(PDevObj_15, pDevExt_14, 4);
    goto L768;

  anon207_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_16: int, actual_PIrp_12: int) returns (Tmp_616: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_16: int, actual_PIrp_12: int) returns (Tmp_616: int)
{
  var {:pointer} Tmp_617: int;
  var {:pointer} pDevExt_15: int;
  var {:pointer} Tmp_618: int;
  var {:pointer} pIrpStack_7: int;
  var {:pointer} pLowerDevObj_5: int;
  var {:scalar} status_22: int;
  var {:pointer} PDevObj_16: int;
  var {:pointer} PIrp_12: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_1711: int;
  var vslice_dummy_var_1712: int;

  anon0:
    PDevObj_16 := actual_PDevObj_16;
    PIrp_12 := actual_PIrp_12;
    call {:si_unique_call 1433} Tmp_617 := __HAVOC_malloc(112);
    call {:si_unique_call 1434} Tmp_618 := __HAVOC_malloc(112);
    call {:si_unique_call 1435} pIrpStack_7 := sdv_IoGetCurrentIrpStackLocation(PIrp_12);
    status_22 := -1073741822;
    assume {:nonnull} PDevObj_16 != 0;
    assume PDevObj_16 > 0;
    havoc pDevExt_15;
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    havoc pLowerDevObj_5;
    call {:si_unique_call 1436} sdv_do_paged_code_check();
    Tmp_618 := strConst__li2bpl186;
    call {:si_unique_call 1437} vslice_dummy_var_401 := SerialDbgPrintEx(11, Tmp_618);
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    call {:si_unique_call 1438} KeInitializeEvent(SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_15), 1, 0);
    call {:si_unique_call 1439} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_12);
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    call {:si_unique_call 1440} sdv_IoSetCompletionRoutine(PIrp_12, li2bplFunctionConstant515, SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_15), 1, 1, 1);
    call {:si_unique_call 1441} status_22 := sdv_IoCallDriver(pLowerDevObj_5, PIrp_12);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_22 == 259;
    call {:si_unique_call 1442} vslice_dummy_var_400 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} PIrp_12 != 0;
    assume PIrp_12 > 0;
    havoc status_22;
    goto L34;

  L34:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_22 >= 0;
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    havoc vslice_dummy_var_1711;
    havoc vslice_dummy_var_1712;
    call {:si_unique_call 1443} status_22 := SerialFinishStartDevice(PDevObj_16, vslice_dummy_var_1711, vslice_dummy_var_1712, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_616 := status_22;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} 0 > status_22;
    Tmp_617 := strConst__li2bpl187;
    call {:si_unique_call 1444} vslice_dummy_var_402 := SerialDbgPrintEx(14, Tmp_617);
    Tmp_616 := status_22;
    goto L1;

  anon7_Then:
    assume {:partition} status_22 != 259;
    goto L34;
}



procedure {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_620: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_620 == 131072 || Tmp_620 == 115200 || Tmp_620 == 57344 || Tmp_620 == 57600 || Tmp_620 == 38400 || Tmp_620 == 19200 || Tmp_620 == 14400 || Tmp_620 == 9600 || Tmp_620 == 7200 || Tmp_620 == 4800 || Tmp_620 == 2400 || Tmp_620 == 1800 || Tmp_620 == 1200 || Tmp_620 == 600 || Tmp_620 == 300 || Tmp_620 == 150 || Tmp_620 == 135 || Tmp_620 == 110 || Tmp_620 == 75 || Tmp_620 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_620: int)
{
  var {:scalar} Bauds: int;

  anon0:
    Bauds := actual_Bauds;
    call {:si_unique_call 1445} sdv_do_paged_code_check();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(Bauds, 65536) != 0;
    Tmp_620 := 131072;
    goto L1;

  L1:
    return;

  anon39_Then:
    assume {:partition} BAND(Bauds, 65536) == 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(Bauds, 131072) != 0;
    Tmp_620 := 115200;
    goto L1;

  anon40_Then:
    assume {:partition} BAND(Bauds, 131072) == 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} BAND(Bauds, 32768) != 0;
    Tmp_620 := 57344;
    goto L1;

  anon41_Then:
    assume {:partition} BAND(Bauds, 32768) == 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(Bauds, 262144) != 0;
    Tmp_620 := 57600;
    goto L1;

  anon42_Then:
    assume {:partition} BAND(Bauds, 262144) == 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(Bauds, 16384) != 0;
    Tmp_620 := 38400;
    goto L1;

  anon43_Then:
    assume {:partition} BAND(Bauds, 16384) == 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(Bauds, 8192) != 0;
    Tmp_620 := 19200;
    goto L1;

  anon44_Then:
    assume {:partition} BAND(Bauds, 8192) == 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(Bauds, 4096) != 0;
    Tmp_620 := 14400;
    goto L1;

  anon45_Then:
    assume {:partition} BAND(Bauds, 4096) == 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(Bauds, 2048) != 0;
    Tmp_620 := 9600;
    goto L1;

  anon46_Then:
    assume {:partition} BAND(Bauds, 2048) == 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} BAND(Bauds, 1024) != 0;
    Tmp_620 := 7200;
    goto L1;

  anon47_Then:
    assume {:partition} BAND(Bauds, 1024) == 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} BAND(Bauds, 512) != 0;
    Tmp_620 := 4800;
    goto L1;

  anon48_Then:
    assume {:partition} BAND(Bauds, 512) == 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(Bauds, 256) != 0;
    Tmp_620 := 2400;
    goto L1;

  anon49_Then:
    assume {:partition} BAND(Bauds, 256) == 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} BAND(Bauds, 128) != 0;
    Tmp_620 := 1800;
    goto L1;

  anon50_Then:
    assume {:partition} BAND(Bauds, 128) == 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(Bauds, 64) != 0;
    Tmp_620 := 1200;
    goto L1;

  anon51_Then:
    assume {:partition} BAND(Bauds, 64) == 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BAND(Bauds, 32) != 0;
    Tmp_620 := 600;
    goto L1;

  anon52_Then:
    assume {:partition} BAND(Bauds, 32) == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Bauds, 16) != 0;
    Tmp_620 := 300;
    goto L1;

  anon53_Then:
    assume {:partition} BAND(Bauds, 16) == 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Bauds, 8) != 0;
    Tmp_620 := 150;
    goto L1;

  anon54_Then:
    assume {:partition} BAND(Bauds, 8) == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} BAND(Bauds, 4) != 0;
    Tmp_620 := 135;
    goto L1;

  anon55_Then:
    assume {:partition} BAND(Bauds, 4) == 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(Bauds, 2) != 0;
    Tmp_620 := 110;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(Bauds, 2) == 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} BAND(Bauds, 1) != 0;
    Tmp_620 := 75;
    goto L1;

  anon57_Then:
    assume {:partition} BAND(Bauds, 1) == 0;
    Tmp_620 := 0;
    goto L1;
}



procedure {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_19: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_19: int)
{
  var {:pointer} keyHandle_2: int;
  var {:scalar} Tmp_624: int;
  var {:pointer} pRegName_1: int;
  var {:pointer} Tmp_625: int;
  var {:scalar} symLinkName: int;
  var {:pointer} Tmp_626: int;
  var {:pointer} Tmp_627: int;
  var {:scalar} status_23: int;
  var {:pointer} Tmp_631: int;
  var {:scalar} Tmp_633: int;
  var {:pointer} Extension_19: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;
  var vslice_dummy_var_1713: int;
  var vslice_dummy_var_1714: int;
  var vslice_dummy_var_1715: int;

  anon0:
    call {:si_unique_call 1446} Tmp_624 := __HAVOC_malloc(20);
    call {:si_unique_call 1447} pRegName_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1448} symLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 1449} vslice_dummy_var_403 := __HAVOC_malloc(4);
    Extension_19 := actual_Extension_19;
    call {:si_unique_call 1450} Tmp_625 := __HAVOC_malloc(132);
    call {:si_unique_call 1451} Tmp_627 := __HAVOC_malloc(76);
    call {:si_unique_call 1452} vslice_dummy_var_406 := __HAVOC_malloc(44);
    call {:si_unique_call 1453} Tmp_631 := __HAVOC_malloc(236);
    call {:si_unique_call 1454} sdv_do_paged_code_check();
    Tmp_631 := strConst__li2bpl188;
    call {:si_unique_call 1455} vslice_dummy_var_407 := SerialDbgPrintEx(6, Tmp_631);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(Extension_19))] != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(Extension_19))] != 0;
    call {:si_unique_call 1456} status_23 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1457} sdv_ExFreePool(0);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(Extension_19))] := 0;
    goto L17;

  L17:
    call {:si_unique_call 1458} status_23 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_23 == 0;
    call {:si_unique_call 1459} RtlInitUnicodeString(symLinkName, 0);
    call {:si_unique_call 1460} status_23 := SerialReadSymName(Extension_19, keyHandle_2, symLinkName, pRegName_1);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_23 != 0;
    goto L43;

  L43:
    call {:si_unique_call 1461} vslice_dummy_var_404 := ZwClose(0);
    goto L14;

  L14:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(Extension_19))] != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1462} sdv_ExFreePool(0);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(Extension_19))] := 0;
    goto L56;

  L56:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(Extension_19))] != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1463} status_23 := RtlDeleteRegistryValue(4, 0, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_23 < 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_633;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_626;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_626 != 0;
    assume Tmp_626 > 0;
    havoc vslice_dummy_var_1713;
    havoc vslice_dummy_var_1714;
    havoc vslice_dummy_var_1715;
    call {:si_unique_call 1464} SerialLogError(vslice_dummy_var_1713, vslice_dummy_var_1714, vslice_dummy_var_1715, Tmp_624, 0, 0, 0, 55, status_23, 393222, Tmp_633, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(Extension_19))], 0, 0);
    Tmp_625 := strConst__li2bpl190;
    call {:si_unique_call 1465} vslice_dummy_var_408 := SerialDbgPrintEx(14, Tmp_625);
    goto L1;

  L1:
    return;

  anon33_Then:
    assume {:partition} 0 <= status_23;
    goto L1;

  anon32_Then:
    goto L1;

  anon31_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(Extension_19))] == 0;
    goto L1;

  anon25_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(WmiIdentifier__SERIAL_DEVICE_EXTENSION(Extension_19))] == 0;
    goto L56;

  anon29_Then:
    assume {:partition} status_23 == 0;
    Tmp_627 := strConst__li2bpl189;
    call {:si_unique_call 1466} vslice_dummy_var_409 := SerialDbgPrintEx(4, Tmp_627);
    call {:si_unique_call 1467} vslice_dummy_var_405 := IoDeleteSymbolicLink(0);
    call {:si_unique_call 1468} sdv_ExFreePool(0);
    assume {:nonnull} pRegName_1 != 0;
    assume pRegName_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 1469} sdv_ExFreePool(0);
    goto L43;

  anon30_Then:
    goto L43;

  anon28_Then:
    assume {:partition} status_23 != 0;
    goto L14;

  anon27_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(Extension_19))] == 0;
    goto L17;

  anon26_Then:
    goto L14;

  anon24_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(Extension_19))] == 0;
    goto L14;

  anon23_Then:
    goto L1;
}



procedure {:origName "_sdv_init21"} _sdv_init21();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init21"} _sdv_init21()
{
  var vslice_dummy_var_410: int;

  anon0:
    call {:si_unique_call 1470} vslice_dummy_var_410 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartTimerLowerRTS"} SerialStartTimerLowerRTS(actual_Dpc_7: int, actual_DeferredContext_5: int, actual_SystemContext1_6: int, actual_SystemContext2_6: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartTimerLowerRTS"} SerialStartTimerLowerRTS(actual_Dpc_7: int, actual_DeferredContext_5: int, actual_SystemContext1_6: int, actual_SystemContext2_6: int)
{
  var {:pointer} structPtr888CharTime: int;
  var {:pointer} Tmp_636: int;
  var {:pointer} Tmp_637: int;
  var {:scalar} OldIrql_10: int;
  var {:scalar} sdv_563: int;
  var {:pointer} Extension_20: int;
  var {:scalar} CharTime: int;
  var {:pointer} Tmp_638: int;
  var {:pointer} Dpc_7: int;
  var {:pointer} DeferredContext_5: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;

  anon0:
    call {:si_unique_call 1471} vslice_dummy_var_411 := __HAVOC_malloc(20);
    call {:si_unique_call 1472} CharTime := __HAVOC_malloc(20);
    call {:si_unique_call 1473} vslice_dummy_var_412 := __HAVOC_malloc(4);
    Dpc_7 := actual_Dpc_7;
    DeferredContext_5 := actual_DeferredContext_5;
    call {:si_unique_call 1474} Tmp_636 := __HAVOC_malloc(108);
    call {:si_unique_call 1475} Tmp_637 := __HAVOC_malloc(124);
    Extension_20 := DeferredContext_5;
    Tmp_637 := strConst__li2bpl192;
    call {:si_unique_call 1476} vslice_dummy_var_414 := SerialDbgPrintEx(2, Tmp_637);
    call {:si_unique_call 1477} Tmp_638 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_638 != 0;
    assume Tmp_638 > 0;
    call {:si_unique_call 1478} sdv_KeAcquireSpinLock(0, Tmp_638);
    assume {:nonnull} Tmp_638 != 0;
    assume Tmp_638 > 0;
    havoc OldIrql_10;
    call {:si_unique_call 1479} structPtr888CharTime := SerialGetCharTime(Extension_20);
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    call {:si_unique_call 1480} sdv_KeReleaseSpinLock(0, OldIrql_10);
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1481} sdv_563 := SerialSetTimer(LowerRTSTimer__SERIAL_DEVICE_EXTENSION(Extension_20), CharTime, PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), Extension_20);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_563 != 0;
    call {:si_unique_call 1482} vslice_dummy_var_413 := KeSynchronizeExecution(0, li2bplFunctionConstant900, 0);
    goto L25;

  L25:
    call {:si_unique_call 1483} SerialDpcEpilogue(Extension_20, Dpc_7);
    Tmp_636 := strConst__li2bpl191;
    call {:si_unique_call 1484} vslice_dummy_var_415 := SerialDbgPrintEx(2, Tmp_636);
    call {:si_unique_call 1485} SLIC_SerialStartTimerLowerRTS_exit(strConst__li2bpl0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} sdv_563 == 0;
    goto L25;
}



procedure {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_6: int) returns (Tmp_640: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_640 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_6: int) returns (Tmp_640: int)
{
  var {:pointer} Tmp_641: int;
  var {:pointer} Extension_21: int;
  var {:scalar} ModemControl: int;
  var {:pointer} Context_6: int;
  var vslice_dummy_var_416: int;

  anon0:
    Context_6 := actual_Context_6;
    call {:si_unique_call 1486} Tmp_641 := __HAVOC_malloc(84);
    Extension_21 := Context_6;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1487} ModemControl := corral_nondet();
    ModemControl := BAND(ModemControl, BNOT(2));
    Tmp_641 := strConst__li2bpl193;
    call {:si_unique_call 1488} vslice_dummy_var_416 := SerialDbgPrintEx(13, Tmp_641);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    Tmp_640 := 0;
    return;
}



procedure {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_7: int) returns (Tmp_645: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_645 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_7: int) returns (Tmp_645: int)
{
  var {:pointer} Extension_22: int;
  var {:scalar} ModemControl_1: int;
  var {:pointer} Tmp_649: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_417: int;

  anon0:
    Context_7 := actual_Context_7;
    call {:si_unique_call 1489} Tmp_649 := __HAVOC_malloc(84);
    Extension_22 := Context_7;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    call {:si_unique_call 1490} ModemControl_1 := corral_nondet();
    ModemControl_1 := BAND(ModemControl_1, BNOT(1));
    Tmp_649 := strConst__li2bpl194;
    call {:si_unique_call 1491} vslice_dummy_var_417 := SerialDbgPrintEx(13, Tmp_649);
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    Tmp_645 := 0;
    return;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_418: int;

  anon0:
    call {:si_unique_call 1492} vslice_dummy_var_418 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SLIC_ABORT_70_0"} SLIC_ABORT_70_0(actual_caller: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_70_0"} SLIC_ABORT_70_0(actual_caller: int)
{
  var {:pointer} caller: int;

  anon0:
    caller := actual_caller;
    call {:si_unique_call 1493} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialCancelWait_exit"} {:osmodel} SLIC_SerialCancelWait_exit(actual_caller_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCancelWait_exit"} {:osmodel} SLIC_SerialCancelWait_exit(actual_caller_1: int)
{
  var {:pointer} caller_1: int;

  anon0:
    caller_1 := actual_caller_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1494} SLIC_ABORT_66_0(caller_1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_64_0"} SLIC_ABORT_64_0(actual_caller_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_64_0"} SLIC_ABORT_64_0(actual_caller_2: int)
{
  var {:pointer} caller_2: int;

  anon0:
    caller_2 := actual_caller_2;
    call {:si_unique_call 1495} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialCompleteWrite_exit"} {:osmodel} SLIC_SerialCompleteWrite_exit(actual_caller_3: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCompleteWrite_exit"} {:osmodel} SLIC_SerialCompleteWrite_exit(actual_caller_3: int)
{
  var {:pointer} caller_3: int;

  anon0:
    caller_3 := actual_caller_3;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1496} SLIC_ABORT_88_0(caller_3);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_62_0"} SLIC_ABORT_62_0(actual_caller_4: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_62_0"} SLIC_ABORT_62_0(actual_caller_4: int)
{
  var {:pointer} caller_4: int;

  anon0:
    caller_4 := actual_caller_4;
    call {:si_unique_call 1497} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_44_0"} SLIC_ABORT_44_0(actual_caller_5: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_44_0"} SLIC_ABORT_44_0(actual_caller_5: int)
{
  var {:pointer} caller_5: int;

  anon0:
    caller_5 := actual_caller_5;
    call {:si_unique_call 1498} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_42_0"} SLIC_ABORT_42_0(actual_caller_6: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_42_0"} SLIC_ABORT_42_0(actual_caller_6: int)
{
  var {:pointer} caller_6: int;

  anon0:
    caller_6 := actual_caller_6;
    call {:si_unique_call 1499} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialWaitWakeCompletion_exit"} {:osmodel} SLIC_SerialWaitWakeCompletion_exit(actual_caller_8: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialWaitWakeCompletion_exit"} {:osmodel} SLIC_SerialWaitWakeCompletion_exit(actual_caller_8: int)
{
  var {:pointer} caller_8: int;

  anon0:
    caller_8 := actual_caller_8;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1500} SLIC_ABORT_20_0(caller_8);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialCancelCurrentRead_exit"} {:osmodel} SLIC_SerialCancelCurrentRead_exit(actual_caller_9: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCancelCurrentRead_exit"} {:osmodel} SLIC_SerialCancelCurrentRead_exit(actual_caller_9: int)
{
  var {:pointer} caller_9: int;

  anon0:
    caller_9 := actual_caller_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1501} SLIC_ABORT_76_0(caller_9);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_38_0"} SLIC_ABORT_38_0(actual_caller_10: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_38_0"} SLIC_ABORT_38_0(actual_caller_10: int)
{
  var {:pointer} caller_10: int;

  anon0:
    caller_10 := actual_caller_10;
    call {:si_unique_call 1502} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ZwOpenKey_exit"} {:osmodel} SLIC_ZwOpenKey_exit(actual_caller_11: int, actual_ZwOpenKey_1: int);
  modifies handleState;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 0;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 2;
  free ensures {:va_keep} old(handleState) == 0 ==> handleState != 0;
  free ensures {:va_keep} old(handleState) == 0 ==> handleState != 2;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 0;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 2;
  free ensures {:va_keep} handleState == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ZwOpenKey_exit"} {:osmodel} SLIC_ZwOpenKey_exit(actual_caller_11: int, actual_ZwOpenKey_1: int)
{
  var {:scalar} ZwOpenKey_1: int;

  anon0:
    ZwOpenKey_1 := actual_ZwOpenKey_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 0 != ZwOpenKey_1;
    call {:si_unique_call 1503} SLIC_EXIT_ROUTINE(strConst__li2bpl196);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} 0 == ZwOpenKey_1;
    handleState := 1;
    goto L2;
}



procedure {:origName "SLIC_SerialCommError_exit"} {:osmodel} SLIC_SerialCommError_exit(actual_caller_12: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCommError_exit"} {:osmodel} SLIC_SerialCommError_exit(actual_caller_12: int)
{
  var {:pointer} caller_12: int;

  anon0:
    caller_12 := actual_caller_12;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1504} SLIC_ABORT_96_0(caller_12);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_74_0"} SLIC_ABORT_74_0(actual_caller_13: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_74_0"} SLIC_ABORT_74_0(actual_caller_13: int)
{
  var {:pointer} caller_13: int;

  anon0:
    caller_13 := actual_caller_13;
    call {:si_unique_call 1505} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialInternalIoControl_exit"} {:osmodel} SLIC_SerialInternalIoControl_exit(actual_caller_14: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialInternalIoControl_exit"} {:osmodel} SLIC_SerialInternalIoControl_exit(actual_caller_14: int)
{
  var {:pointer} caller_14: int;

  anon0:
    caller_14 := actual_caller_14;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1506} SLIC_ABORT_42_0(caller_14);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialCancelImmediate_exit"} {:osmodel} SLIC_SerialCancelImmediate_exit(actual_caller_15: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCancelImmediate_exit"} {:osmodel} SLIC_SerialCancelImmediate_exit(actual_caller_15: int)
{
  var {:pointer} caller_15: int;

  anon0:
    caller_15 := actual_caller_15;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1507} SLIC_ABORT_70_0(caller_15);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialWakeCompletion_exit"} {:osmodel} SLIC_SerialWakeCompletion_exit(actual_caller_16: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialWakeCompletion_exit"} {:osmodel} SLIC_SerialWakeCompletion_exit(actual_caller_16: int)
{
  var {:pointer} caller_16: int;

  anon0:
    caller_16 := actual_caller_16;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1508} SLIC_ABORT_60_0(caller_16);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_DriverEntry_exit"} {:osmodel} SLIC_DriverEntry_exit(actual_caller_17: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_DriverEntry_exit"} {:osmodel} SLIC_DriverEntry_exit(actual_caller_17: int)
{
  var {:pointer} caller_17: int;

  anon0:
    caller_17 := actual_caller_17;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1509} SLIC_ABORT_32_0(caller_17);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialCompleteWait_exit"} {:osmodel} SLIC_SerialCompleteWait_exit(actual_caller_18: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCompleteWait_exit"} {:osmodel} SLIC_SerialCompleteWait_exit(actual_caller_18: int)
{
  var {:pointer} caller_18: int;

  anon0:
    caller_18 := actual_caller_18;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1510} SLIC_ABORT_90_0(caller_18);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialPnpDispatch_exit"} {:osmodel} SLIC_SerialPnpDispatch_exit(actual_caller_19: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialPnpDispatch_exit"} {:osmodel} SLIC_SerialPnpDispatch_exit(actual_caller_19: int)
{
  var {:pointer} caller_19: int;

  anon0:
    caller_19 := actual_caller_19;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1511} SLIC_ABORT_34_0(caller_19);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_90_0"} SLIC_ABORT_90_0(actual_caller_20: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_90_0"} SLIC_ABORT_90_0(actual_caller_20: int)
{
  var {:pointer} caller_20: int;

  anon0:
    caller_20 := actual_caller_20;
    call {:si_unique_call 1512} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_52_0"} SLIC_ABORT_52_0(actual_caller_21: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_52_0"} SLIC_ABORT_52_0(actual_caller_21: int)
{
  var {:pointer} caller_21: int;

  anon0:
    caller_21 := actual_caller_21;
    call {:si_unique_call 1513} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_46_0"} SLIC_ABORT_46_0(actual_caller_22: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_46_0"} SLIC_ABORT_46_0(actual_caller_22: int)
{
  var {:pointer} caller_22: int;

  anon0:
    caller_22 := actual_caller_22;
    call {:si_unique_call 1514} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialCIsrSw_exit"} {:osmodel} SLIC_SerialCIsrSw_exit(actual_caller_23: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCIsrSw_exit"} {:osmodel} SLIC_SerialCIsrSw_exit(actual_caller_23: int)
{
  var {:pointer} caller_23: int;

  anon0:
    caller_23 := actual_caller_23;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1515} SLIC_ABORT_78_0(caller_23);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_60_0"} SLIC_ABORT_60_0(actual_caller_24: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_60_0"} SLIC_ABORT_60_0(actual_caller_24: int)
{
  var {:pointer} caller_24: int;

  anon0:
    caller_24 := actual_caller_24;
    call {:si_unique_call 1516} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_26_0"} SLIC_ABORT_26_0(actual_caller_25: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_26_0"} SLIC_ABORT_26_0(actual_caller_25: int)
{
  var {:pointer} caller_25: int;

  anon0:
    caller_25 := actual_caller_25;
    call {:si_unique_call 1517} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialFinishSystemPower_exit"} {:osmodel} SLIC_SerialFinishSystemPower_exit(actual_caller_26: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialFinishSystemPower_exit"} {:osmodel} SLIC_SerialFinishSystemPower_exit(actual_caller_26: int)
{
  var {:pointer} caller_26: int;

  anon0:
    caller_26 := actual_caller_26;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1518} SLIC_ABORT_26_0(caller_26);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "_sdv_init24"} {:osmodel} _sdv_init24();
  modifies SLAM_guard_O_0, handleState, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 1;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 2;
  free ensures {:va_keep} old(handleState) == 0 ==> handleState != 1;
  free ensures {:va_keep} old(handleState) == 0 ==> handleState != 2;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 1;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 2;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} handleState == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init24"} {:osmodel} _sdv_init24()
{

  anon0:
    SLAM_guard_O_0 := SLAM_guard_O_0_init;
    handleState := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_SerialUnlockPages_exit"} {:osmodel} SLIC_SerialUnlockPages_exit(actual_caller_27: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialUnlockPages_exit"} {:osmodel} SLIC_SerialUnlockPages_exit(actual_caller_27: int)
{
  var {:pointer} caller_27: int;

  anon0:
    caller_27 := actual_caller_27;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1519} SLIC_ABORT_80_0(caller_27);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_34_0"} SLIC_ABORT_34_0(actual_caller_29: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_34_0"} SLIC_ABORT_34_0(actual_caller_29: int)
{
  var {:pointer} caller_29: int;

  anon0:
    caller_29 := actual_caller_29;
    call {:si_unique_call 1520} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialFilterCancelQueued_exit"} {:osmodel} SLIC_SerialFilterCancelQueued_exit(actual_caller_30: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialFilterCancelQueued_exit"} {:osmodel} SLIC_SerialFilterCancelQueued_exit(actual_caller_30: int)
{
  var {:pointer} caller_30: int;

  anon0:
    caller_30 := actual_caller_30;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1521} SLIC_ABORT_64_0(caller_30);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_58_0"} SLIC_ABORT_58_0(actual_caller_31: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_58_0"} SLIC_ABORT_58_0(actual_caller_31: int)
{
  var {:pointer} caller_31: int;

  anon0:
    caller_31 := actual_caller_31;
    call {:si_unique_call 1522} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_32_0"} SLIC_ABORT_32_0(actual_caller_32: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_32_0"} SLIC_ABORT_32_0(actual_caller_32: int)
{
  var {:pointer} caller_32: int;

  anon0:
    caller_32 := actual_caller_32;
    call {:si_unique_call 1523} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ZwClose_entry"} {:osmodel} SLIC_ZwClose_entry(actual_caller_33: int);
  modifies handleState, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 1;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 0;
  free ensures {:va_keep} old(handleState) == 0 ==> handleState != 1;
  free ensures {:va_keep} old(handleState) == 0 ==> handleState != 2;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 1;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 0;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} handleState == 2 || handleState == old(handleState);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ZwClose_entry"} {:osmodel} SLIC_ZwClose_entry(actual_caller_33: int)
{
  var {:pointer} caller_33: int;

  anon0:
    caller_33 := actual_caller_33;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    handleState := 2;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} handleState != 1;
    call {:si_unique_call 1524} SLIC_ABORT_16_0(caller_33);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SLIC_ABORT_54_0"} SLIC_ABORT_54_0(actual_caller_34: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_54_0"} SLIC_ABORT_54_0(actual_caller_34: int)
{
  var {:pointer} caller_34: int;

  anon0:
    caller_34 := actual_caller_34;
    call {:si_unique_call 1525} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialUnload_exit"} {:osmodel} SLIC_SerialUnload_exit(actual_caller_35: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialUnload_exit"} {:osmodel} SLIC_SerialUnload_exit(actual_caller_35: int)
{
  var {:pointer} caller_35: int;

  anon0:
    caller_35 := actual_caller_35;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1526} SLIC_ABORT_28_0(caller_35);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_50_0"} SLIC_ABORT_50_0(actual_caller_36: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_50_0"} SLIC_ABORT_50_0(actual_caller_36: int)
{
  var {:pointer} caller_36: int;

  anon0:
    caller_36 := actual_caller_36;
    call {:si_unique_call 1527} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialCleanup_exit"} {:osmodel} SLIC_SerialCleanup_exit(actual_caller_37: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCleanup_exit"} {:osmodel} SLIC_SerialCleanup_exit(actual_caller_37: int)
{
  var {:pointer} caller_37: int;

  anon0:
    caller_37 := actual_caller_37;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1528} SLIC_ABORT_40_0(caller_37);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialSetPendingDpcEvent_exit"} {:osmodel} SLIC_SerialSetPendingDpcEvent_exit(actual_caller_38: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialSetPendingDpcEvent_exit"} {:osmodel} SLIC_SerialSetPendingDpcEvent_exit(actual_caller_38: int)
{
  var {:pointer} caller_38: int;

  anon0:
    caller_38 := actual_caller_38;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1529} SLIC_ABORT_84_0(caller_38);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_66_0"} SLIC_ABORT_66_0(actual_caller_39: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_66_0"} SLIC_ABORT_66_0(actual_caller_39: int)
{
  var {:pointer} caller_39: int;

  anon0:
    caller_39 := actual_caller_39;
    call {:si_unique_call 1530} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialPowerDispatch_exit"} {:osmodel} SLIC_SerialPowerDispatch_exit(actual_caller_40: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialPowerDispatch_exit"} {:osmodel} SLIC_SerialPowerDispatch_exit(actual_caller_40: int)
{
  var {:pointer} caller_40: int;

  anon0:
    caller_40 := actual_caller_40;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1531} SLIC_ABORT_38_0(caller_40);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_80_0"} SLIC_ABORT_80_0(actual_caller_41: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_80_0"} SLIC_ABORT_80_0(actual_caller_41: int)
{
  var {:pointer} caller_41: int;

  anon0:
    caller_41 := actual_caller_41;
    call {:si_unique_call 1532} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialSystemPowerCompletion_exit"} {:osmodel} SLIC_SerialSystemPowerCompletion_exit(actual_caller_42: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialSystemPowerCompletion_exit"} {:osmodel} SLIC_SerialSystemPowerCompletion_exit(actual_caller_42: int)
{
  var {:pointer} caller_42: int;

  anon0:
    caller_42 := actual_caller_42;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1533} SLIC_ABORT_62_0(caller_42);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialRead_exit"} {:osmodel} SLIC_SerialRead_exit(actual_caller_43: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialRead_exit"} {:osmodel} SLIC_SerialRead_exit(actual_caller_43: int)
{
  var {:pointer} caller_43: int;

  anon0:
    caller_43 := actual_caller_43;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1534} SLIC_ABORT_54_0(caller_43);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialQueryInformationFile_exit"} {:osmodel} SLIC_SerialQueryInformationFile_exit(actual_caller_44: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialQueryInformationFile_exit"} {:osmodel} SLIC_SerialQueryInformationFile_exit(actual_caller_44: int)
{
  var {:pointer} caller_44: int;

  anon0:
    caller_44 := actual_caller_44;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1535} SLIC_ABORT_50_0(caller_44);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_45: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_45: int)
{
  var {:pointer} caller_45: int;

  anon0:
    caller_45 := actual_caller_45;
    call {:si_unique_call 1536} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_86_0"} SLIC_ABORT_86_0(actual_caller_47: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_86_0"} SLIC_ABORT_86_0(actual_caller_47: int)
{
  var {:pointer} caller_47: int;

  anon0:
    caller_47 := actual_caller_47;
    call {:si_unique_call 1537} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_72_0"} SLIC_ABORT_72_0(actual_caller_48: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_72_0"} SLIC_ABORT_72_0(actual_caller_48: int)
{
  var {:pointer} caller_48: int;

  anon0:
    caller_48 := actual_caller_48;
    call {:si_unique_call 1538} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialAddDevice_exit"} {:osmodel} SLIC_SerialAddDevice_exit(actual_caller_50: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialAddDevice_exit"} {:osmodel} SLIC_SerialAddDevice_exit(actual_caller_50: int)
{
  var {:pointer} caller_50: int;

  anon0:
    caller_50 := actual_caller_50;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1539} SLIC_ABORT_30_0(caller_50);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialCancelQueued_exit"} {:osmodel} SLIC_SerialCancelQueued_exit(actual_caller_52: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCancelQueued_exit"} {:osmodel} SLIC_SerialCancelQueued_exit(actual_caller_52: int)
{
  var {:pointer} caller_52: int;

  anon0:
    caller_52 := actual_caller_52;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1540} SLIC_ABORT_68_0(caller_52);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialIoControl_exit"} {:osmodel} SLIC_SerialIoControl_exit(actual_caller_53: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialIoControl_exit"} {:osmodel} SLIC_SerialIoControl_exit(actual_caller_53: int)
{
  var {:pointer} caller_53: int;

  anon0:
    caller_53 := actual_caller_53;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1541} SLIC_ABORT_44_0(caller_53);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_40_0"} SLIC_ABORT_40_0(actual_caller_54: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_40_0"} SLIC_ABORT_40_0(actual_caller_54: int)
{
  var {:pointer} caller_54: int;

  anon0:
    caller_54 := actual_caller_54;
    call {:si_unique_call 1542} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialCompleteRead_exit"} {:osmodel} SLIC_SerialCompleteRead_exit(actual_caller_55: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCompleteRead_exit"} {:osmodel} SLIC_SerialCompleteRead_exit(actual_caller_55: int)
{
  var {:pointer} caller_55: int;

  anon0:
    caller_55 := actual_caller_55;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1543} SLIC_ABORT_92_0(caller_55);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_92_0"} SLIC_ABORT_92_0(actual_caller_56: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_92_0"} SLIC_ABORT_92_0(actual_caller_56: int)
{
  var {:pointer} caller_56: int;

  anon0:
    caller_56 := actual_caller_56;
    call {:si_unique_call 1544} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_24_0"} SLIC_ABORT_24_0(actual_caller_57: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_24_0"} SLIC_ABORT_24_0(actual_caller_57: int)
{
  var {:pointer} caller_57: int;

  anon0:
    caller_57 := actual_caller_57;
    call {:si_unique_call 1545} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialCreateOpen_exit"} {:osmodel} SLIC_SerialCreateOpen_exit(actual_caller_58: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCreateOpen_exit"} {:osmodel} SLIC_SerialCreateOpen_exit(actual_caller_58: int)
{
  var {:pointer} caller_58: int;

  anon0:
    caller_58 := actual_caller_58;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1546} SLIC_ABORT_58_0(caller_58);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_16_0"} SLIC_ABORT_16_0(actual_caller_59: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_16_0"} SLIC_ABORT_16_0(actual_caller_59: int)
{
  var {:pointer} caller_59: int;

  anon0:
    caller_59 := actual_caller_59;
    call {:si_unique_call 1547} SLIC_ERROR_ROUTINE(strConst__li2bpl198);
    return;
}



procedure {:origName "SLIC_ABORT_88_0"} SLIC_ABORT_88_0(actual_caller_62: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_88_0"} SLIC_ABORT_88_0(actual_caller_62: int)
{
  var {:pointer} caller_62: int;

  anon0:
    caller_62 := actual_caller_62;
    call {:si_unique_call 1548} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialCompleteImmediate_exit"} {:osmodel} SLIC_SerialCompleteImmediate_exit(actual_caller_63: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCompleteImmediate_exit"} {:osmodel} SLIC_SerialCompleteImmediate_exit(actual_caller_63: int)
{
  var {:pointer} caller_63: int;

  anon0:
    caller_63 := actual_caller_63;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1549} SLIC_ABORT_94_0(caller_63);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialWrite_exit"} {:osmodel} SLIC_SerialWrite_exit(actual_caller_64: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialWrite_exit"} {:osmodel} SLIC_SerialWrite_exit(actual_caller_64: int)
{
  var {:pointer} caller_64: int;

  anon0:
    caller_64 := actual_caller_64;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1550} SLIC_ABORT_52_0(caller_64);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_94_0"} SLIC_ABORT_94_0(actual_caller_65: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_94_0"} SLIC_ABORT_94_0(actual_caller_65: int)
{
  var {:pointer} caller_65: int;

  anon0:
    caller_65 := actual_caller_65;
    call {:si_unique_call 1551} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialSetPowerD0Completion_exit"} {:osmodel} SLIC_SerialSetPowerD0Completion_exit(actual_caller_66: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialSetPowerD0Completion_exit"} {:osmodel} SLIC_SerialSetPowerD0Completion_exit(actual_caller_66: int)
{
  var {:pointer} caller_66: int;

  anon0:
    caller_66 := actual_caller_66;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1552} SLIC_ABORT_24_0(caller_66);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_22_0"} SLIC_ABORT_22_0(actual_caller_67: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_22_0"} SLIC_ABORT_22_0(actual_caller_67: int)
{
  var {:pointer} caller_67: int;

  anon0:
    caller_67 := actual_caller_67;
    call {:si_unique_call 1553} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_56_0"} SLIC_ABORT_56_0(actual_caller_68: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_56_0"} SLIC_ABORT_56_0(actual_caller_68: int)
{
  var {:pointer} caller_68: int;

  anon0:
    caller_68 := actual_caller_68;
    call {:si_unique_call 1554} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_84_0"} SLIC_ABORT_84_0(actual_caller_70: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_84_0"} SLIC_ABORT_84_0(actual_caller_70: int)
{
  var {:pointer} caller_70: int;

  anon0:
    caller_70 := actual_caller_70;
    call {:si_unique_call 1555} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialSyncCompletion_exit"} {:osmodel} SLIC_SerialSyncCompletion_exit(actual_caller_72: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialSyncCompletion_exit"} {:osmodel} SLIC_SerialSyncCompletion_exit(actual_caller_72: int)
{
  var {:pointer} caller_72: int;

  anon0:
    caller_72 := actual_caller_72;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1556} SLIC_ABORT_22_0(caller_72);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialCompleteXoff_exit"} {:osmodel} SLIC_SerialCompleteXoff_exit(actual_caller_74: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCompleteXoff_exit"} {:osmodel} SLIC_SerialCompleteXoff_exit(actual_caller_74: int)
{
  var {:pointer} caller_74: int;

  anon0:
    caller_74 := actual_caller_74;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1557} SLIC_ABORT_86_0(caller_74);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialSetInformationFile_exit"} {:osmodel} SLIC_SerialSetInformationFile_exit(actual_caller_75: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialSetInformationFile_exit"} {:osmodel} SLIC_SerialSetInformationFile_exit(actual_caller_75: int)
{
  var {:pointer} caller_75: int;

  anon0:
    caller_75 := actual_caller_75;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1558} SLIC_ABORT_48_0(caller_75);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_48_0"} SLIC_ABORT_48_0(actual_caller_76: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_48_0"} SLIC_ABORT_48_0(actual_caller_76: int)
{
  var {:pointer} caller_76: int;

  anon0:
    caller_76 := actual_caller_76;
    call {:si_unique_call 1559} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialFlush_exit"} {:osmodel} SLIC_SerialFlush_exit(actual_caller_77: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialFlush_exit"} {:osmodel} SLIC_SerialFlush_exit(actual_caller_77: int)
{
  var {:pointer} caller_77: int;

  anon0:
    caller_77 := actual_caller_77;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1560} SLIC_ABORT_46_0(caller_77);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_30_0"} SLIC_ABORT_30_0(actual_caller_78: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_30_0"} SLIC_ABORT_30_0(actual_caller_78: int)
{
  var {:pointer} caller_78: int;

  anon0:
    caller_78 := actual_caller_78;
    call {:si_unique_call 1561} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_28_0"} SLIC_ABORT_28_0(actual_caller_79: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_28_0"} SLIC_ABORT_28_0(actual_caller_79: int)
{
  var {:pointer} caller_79: int;

  anon0:
    caller_79 := actual_caller_79;
    call {:si_unique_call 1562} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialClose_exit"} {:osmodel} SLIC_SerialClose_exit(actual_caller_82: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialClose_exit"} {:osmodel} SLIC_SerialClose_exit(actual_caller_82: int)
{
  var {:pointer} caller_82: int;

  anon0:
    caller_82 := actual_caller_82;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1563} SLIC_ABORT_56_0(caller_82);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialCancelCurrentXoff_exit"} {:osmodel} SLIC_SerialCancelCurrentXoff_exit(actual_caller_83: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCancelCurrentXoff_exit"} {:osmodel} SLIC_SerialCancelCurrentXoff_exit(actual_caller_83: int)
{
  var {:pointer} caller_83: int;

  anon0:
    caller_83 := actual_caller_83;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1564} SLIC_ABORT_72_0(caller_83);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_SerialSystemControlDispatch_exit"} {:osmodel} SLIC_SerialSystemControlDispatch_exit(actual_caller_84: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialSystemControlDispatch_exit"} {:osmodel} SLIC_SerialSystemControlDispatch_exit(actual_caller_84: int)
{
  var {:pointer} caller_84: int;

  anon0:
    caller_84 := actual_caller_84;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1565} SLIC_ABORT_36_0(caller_84);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_96_0"} SLIC_ABORT_96_0(actual_caller_85: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_96_0"} SLIC_ABORT_96_0(actual_caller_85: int)
{
  var {:pointer} caller_85: int;

  anon0:
    caller_85 := actual_caller_85;
    call {:si_unique_call 1566} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_SerialStartTimerLowerRTS_exit"} {:osmodel} SLIC_SerialStartTimerLowerRTS_exit(actual_caller_87: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialStartTimerLowerRTS_exit"} {:osmodel} SLIC_SerialStartTimerLowerRTS_exit(actual_caller_87: int)
{
  var {:pointer} caller_87: int;

  anon0:
    caller_87 := actual_caller_87;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1567} SLIC_ABORT_82_0(caller_87);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ZwEnumerateKey_entry"} {:osmodel} SLIC_ZwEnumerateKey_entry(actual_caller_88: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ZwEnumerateKey_entry"} {:osmodel} SLIC_ZwEnumerateKey_entry(actual_caller_88: int)
{
  var {:pointer} caller_88: int;

  anon0:
    caller_88 := actual_caller_88;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState != 1;
    call {:si_unique_call 1568} SLIC_ABORT_4_0(caller_88);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState == 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_78_0"} SLIC_ABORT_78_0(actual_caller_89: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_78_0"} SLIC_ABORT_78_0(actual_caller_89: int)
{
  var {:pointer} caller_89: int;

  anon0:
    caller_89 := actual_caller_89;
    call {:si_unique_call 1569} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_36_0"} SLIC_ABORT_36_0(actual_caller_90: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_36_0"} SLIC_ABORT_36_0(actual_caller_90: int)
{
  var {:pointer} caller_90: int;

  anon0:
    caller_90 := actual_caller_90;
    call {:si_unique_call 1570} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_82_0"} SLIC_ABORT_82_0(actual_caller_92: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_82_0"} SLIC_ABORT_82_0(actual_caller_92: int)
{
  var {:pointer} caller_92: int;

  anon0:
    caller_92 := actual_caller_92;
    call {:si_unique_call 1571} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_76_0"} SLIC_ABORT_76_0(actual_caller_93: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_76_0"} SLIC_ABORT_76_0(actual_caller_93: int)
{
  var {:pointer} caller_93: int;

  anon0:
    caller_93 := actual_caller_93;
    call {:si_unique_call 1572} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:origName "SLIC_SerialCancelCurrentWrite_exit"} {:osmodel} SLIC_SerialCancelCurrentWrite_exit(actual_caller_94: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_SerialCancelCurrentWrite_exit"} {:osmodel} SLIC_SerialCancelCurrentWrite_exit(actual_caller_94: int)
{
  var {:pointer} caller_94: int;

  anon0:
    caller_94 := actual_caller_94;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} handleState == 1;
    call {:si_unique_call 1573} SLIC_ABORT_74_0(caller_94);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} handleState != 1;
    goto L2;
}



procedure {:origName "SLIC_ABORT_68_0"} SLIC_ABORT_68_0(actual_caller_95: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_68_0"} SLIC_ABORT_68_0(actual_caller_95: int)
{
  var {:pointer} caller_95: int;

  anon0:
    caller_95 := actual_caller_95;
    call {:si_unique_call 1574} SLIC_ERROR_ROUTINE(strConst__li2bpl195);
    return;
}



procedure {:origName "SLIC_ABORT_4_0"} SLIC_ABORT_4_0(actual_caller_96: int);
  modifies yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SLIC_ABORT_4_0"} SLIC_ABORT_4_0(actual_caller_96: int)
{
  var {:pointer} caller_96: int;

  anon0:
    caller_96 := actual_caller_96;
    call {:si_unique_call 1575} SLIC_ERROR_ROUTINE(strConst__li2bpl205);
    return;
}



procedure {:origName "SerialSetBaud"} SerialSetBaud(actual_Context_8: int) returns (Tmp_652: int);
  free ensures {:va_keep} Tmp_652 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSetBaud"} SerialSetBaud(actual_Context_8: int) returns (Tmp_652: int)
{
  var {:pointer} Tmp_659: int;
  var {:pointer} Tmp_662: int;
  var {:scalar} Appropriate: int;
  var {:pointer} Extension_23: int;
  var {:scalar} LineControl: int;
  var {:pointer} Address: int;
  var {:scalar} Divisor: int;
  var {:pointer} Context_8: int;
  var vslice_dummy_var_419: int;

  anon0:
    Context_8 := actual_Context_8;
    Tmp_662 := Context_8;
    assume {:nonnull} Tmp_662 != 0;
    assume Tmp_662 > 0;
    havoc Extension_23;
    Tmp_659 := Context_8;
    assume {:nonnull} Tmp_659 != 0;
    assume Tmp_659 > 0;
    havoc Appropriate;
    assume {:nonnull} Extension_23 != 0;
    assume Extension_23 > 0;
    havoc Address;
    Divisor := Appropriate;
    call {:si_unique_call 1576} LineControl := corral_nondet();
    call {:si_unique_call 1577} vslice_dummy_var_419 := corral_nondet();
    Tmp_652 := 0;
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_420: int;

  anon0:
    call {:si_unique_call 1578} vslice_dummy_var_420 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_667: int);
  modifies alloc, Mem_T.PVOID, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_667: int)
{
  var {:scalar} Tmp_668: int;
  var {:pointer} Tmp_669: int;
  var {:scalar} Tmp_670: int;
  var {:dopa} {:scalar} AppropriateDivisor: int;
  var {:pointer} NewChars: int;
  var {:pointer} Tmp_671: int;
  var {:pointer} Tmp_672: int;
  var {:pointer} Tmp_673: int;
  var {:pointer} Tmp_674: int;
  var {:pointer} NewTimeouts: int;
  var {:scalar} Mask_1: int;
  var {:pointer} escapeChar: int;
  var {:pointer} Tmp_675: int;
  var {:scalar} Tmp_676: int;
  var {:scalar} Tmp_677: int;
  var {:scalar} S_1: int;
  var {:scalar} Tmp_678: int;
  var {:pointer} Lc: int;
  var {:pointer} Tmp_679: int;
  var {:scalar} Tmp_680: int;
  var {:pointer} Tmp_681: int;
  var {:scalar} Status_2: int;
  var {:scalar} prologueStatus: int;
  var {:pointer} Tmp_682: int;
  var {:scalar} sdv_588: int;
  var {:pointer} Tmp_683: int;
  var {:scalar} S_2: int;
  var {:pointer} Tmp_684: int;
  var {:pointer} Rs: int;
  var {:pointer} Br: int;
  var {:pointer} Tmp_685: int;
  var {:pointer} Tmp_686: int;
  var {:pointer} IrpSp_3: int;
  var {:pointer} HandFlow: int;
  var {:scalar} OldIrql_11: int;
  var {:scalar} Tmp_688: int;
  var {:pointer} Tmp_689: int;
  var {:scalar} Tmp_690: int;
  var {:scalar} Tmp_691: int;
  var {:scalar} LData: int;
  var {:pointer} Tmp_692: int;
  var {:pointer} Tmp_693: int;
  var {:scalar} Tmp_694: int;
  var {:scalar} S_3: int;
  var {:scalar} Tmp_695: int;
  var {:pointer} Tmp_696: int;
  var {:pointer} Tmp_697: int;
  var {:pointer} Extension_24: int;
  var {:scalar} LParity: int;
  var {:scalar} sdv_602: int;
  var {:pointer} Tmp_698: int;
  var {:scalar} S_4: int;
  var {:scalar} ModemControl_2: int;
  var {:scalar} Mask_2: int;
  var {:scalar} Tmp_699: int;
  var {:scalar} Tmp_700: int;
  var {:scalar} NewMask: int;
  var {:pointer} Xc_1: int;
  var {:scalar} Tmp_701: int;
  var {:scalar} LStop: int;
  var {:scalar} S_5: int;
  var {:scalar} BaudRate: int;
  var {:scalar} S_6: int;
  var {:scalar} S_7: int;
  var {:pointer} Tmp_702: int;
  var {:pointer} Lc_1: int;
  var {:pointer} Tmp_703: int;
  var {:scalar} S_8: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_16: int;
  var boogieTmp: int;
  var vslice_dummy_var_421: int;
  var vslice_dummy_var_422: int;
  var vslice_dummy_var_423: int;
  var vslice_dummy_var_424: int;
  var vslice_dummy_var_425: int;
  var vslice_dummy_var_426: int;
  var vslice_dummy_var_427: int;
  var vslice_dummy_var_428: int;
  var vslice_dummy_var_429: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_1716: int;
  var vslice_dummy_var_1717: int;
  var vslice_dummy_var_1718: int;
  var vslice_dummy_var_1719: int;
  var vslice_dummy_var_1720: int;
  var vslice_dummy_var_1721: int;
  var vslice_dummy_var_1722: int;
  var vslice_dummy_var_1723: int;
  var vslice_dummy_var_1724: int;
  var vslice_dummy_var_1725: int;
  var vslice_dummy_var_1726: int;
  var vslice_dummy_var_1727: int;

  anon0:
    call {:si_unique_call 1579} AppropriateDivisor := __HAVOC_malloc(4);
    call {:si_unique_call 1580} S_1 := __HAVOC_malloc(8);
    call {:si_unique_call 1581} S_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1582} S_3 := __HAVOC_malloc(8);
    call {:si_unique_call 1583} S_4 := __HAVOC_malloc(8);
    call {:si_unique_call 1584} S_5 := __HAVOC_malloc(8);
    call {:si_unique_call 1585} S_6 := __HAVOC_malloc(8);
    call {:si_unique_call 1586} S_7 := __HAVOC_malloc(8);
    call {:si_unique_call 1587} S_8 := __HAVOC_malloc(8);
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 1588} Tmp_673 := __HAVOC_malloc(124);
    call {:si_unique_call 1589} Tmp_675 := __HAVOC_malloc(96);
    call {:si_unique_call 1590} Tmp_679 := __HAVOC_malloc(148);
    call {:si_unique_call 1591} Tmp_681 := __HAVOC_malloc(148);
    call {:si_unique_call 1592} Tmp_686 := __HAVOC_malloc(72);
    call {:si_unique_call 1593} Tmp_689 := __HAVOC_malloc(72);
    call {:si_unique_call 1594} Tmp_692 := __HAVOC_malloc(128);
    call {:si_unique_call 1595} Tmp_696 := __HAVOC_malloc(140);
    call {:si_unique_call 1596} Tmp_697 := __HAVOC_malloc(136);
    call {:si_unique_call 1597} Tmp_703 := __HAVOC_malloc(68);
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc Extension_24;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon415_Then, anon415_Else;

  anon415_Else:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 1598} sdv_IoCompleteRequest(0, 0);
    Tmp_667 := -1073741808;
    goto L1;

  L1:
    call {:si_unique_call 1599} SLIC_SerialIoControl_exit(strConst__li2bpl0);
    goto anon416_Then, anon416_Else;

  anon416_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon416_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon415_Then:
    call {:si_unique_call 1600} prologueStatus := SerialIRPPrologue(Irp_16, Extension_24);
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume {:partition} prologueStatus != 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:partition} prologueStatus != 259;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    Tmp_689 := strConst__li2bpl3;
    call {:si_unique_call 1601} vslice_dummy_var_435 := SerialDbgPrintEx(9, Tmp_689);
    call {:si_unique_call 1602} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1603} SerialIRPEpilogue(Extension_24);
    goto L24;

  L24:
    Tmp_667 := prologueStatus;
    goto L1;

  anon300_Then:
    assume {:partition} prologueStatus == 259;
    goto L24;

  anon299_Then:
    assume {:partition} prologueStatus == 0;
    Tmp_675 := strConst__li2bpl41;
    call {:si_unique_call 1604} vslice_dummy_var_436 := SerialDbgPrintEx(9, Tmp_675);
    call {:si_unique_call 1605} sdv_602 := SerialCompleteIfError(DeviceObject_16, Irp_16);
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:partition} sdv_602 != 0;
    Tmp_667 := -1073741536;
    goto L1;

  anon301_Then:
    assume {:partition} sdv_602 == 0;
    call {:si_unique_call 1606} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_16);
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    Status_2 := 0;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon417_Then, anon417_Else;

  anon417_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon405_Then, anon405_Else;

  anon405_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon404_Then, anon404_Else;

  anon404_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon403_Then, anon403_Else;

  anon403_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon402_Then, anon402_Else;

  anon402_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon401_Then, anon401_Else;

  anon401_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon400_Then, anon400_Else;

  anon400_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon399_Then, anon399_Else;

  anon399_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon398_Then, anon398_Else;

  anon398_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon397_Then, anon397_Else;

  anon397_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon396_Then, anon396_Else;

  anon396_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon395_Then, anon395_Else;

  anon395_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon394_Then, anon394_Else;

  anon394_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon393_Then, anon393_Else;

  anon393_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon392_Then, anon392_Else;

  anon392_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon391_Then, anon391_Else;

  anon391_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon390_Then, anon390_Else;

  anon390_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon389_Then, anon389_Else;

  anon389_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon388_Then, anon388_Else;

  anon388_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon387_Then, anon387_Else;

  anon387_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon386_Then, anon386_Else;

  anon386_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon385_Then, anon385_Else;

  anon385_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon384_Then, anon384_Else;

  anon384_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon383_Then, anon383_Else;

  anon383_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon382_Then, anon382_Else;

  anon382_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon379_Then, anon379_Else;

  anon379_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon378_Then, anon378_Else;

  anon378_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon377_Then, anon377_Else;

  anon377_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon375_Then, anon375_Else;

  anon375_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon374_Then, anon374_Else;

  anon374_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon373_Then, anon373_Else;

  anon373_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon372_Then, anon372_Else;

  anon372_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon371_Then, anon371_Else;

  anon371_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon370_Then, anon370_Else;

  anon370_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon314_Then, anon314_Else;

  anon314_Else:
    Status_2 := -1073741789;
    goto L95;

  L95:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    Tmp_686 := strConst__li2bpl3;
    call {:si_unique_call 1607} vslice_dummy_var_437 := SerialDbgPrintEx(9, Tmp_686);
    call {:si_unique_call 1608} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1609} SerialIRPEpilogue(Extension_24);
    Tmp_667 := Status_2;
    goto L1;

  anon314_Then:
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon447_Then, anon447_Else;

  anon447_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1716;
    call {:si_unique_call 1610} Status_2 := SerialGotoPowerState(vslice_dummy_var_1716, Extension_24, 1);
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:partition} Status_2 >= 0;
    goto L108;

  L108:
    call {:si_unique_call 1611} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1612} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    call {:si_unique_call 1613} vslice_dummy_var_424 := KeSynchronizeExecution(0, li2bplFunctionConstant985, 0);
    call {:si_unique_call 1614} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon315_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon447_Then:
    goto L108;

  anon370_Then:
    Status_2 := -1073741811;
    goto L95;

  anon371_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon316_Then, anon316_Else;

  anon316_Else:
    Status_2 := -1073741789;
    goto L95;

  anon316_Then:
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon446_Then, anon446_Else;

  anon446_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1717;
    call {:si_unique_call 1615} Status_2 := SerialGotoPowerState(vslice_dummy_var_1717, Extension_24, 1);
    goto anon317_Then, anon317_Else;

  anon317_Else:
    assume {:partition} Status_2 >= 0;
    goto L130;

  L130:
    call {:si_unique_call 1616} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1617} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    call {:si_unique_call 1618} vslice_dummy_var_425 := KeSynchronizeExecution(0, li2bplFunctionConstant983, 0);
    call {:si_unique_call 1619} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon317_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon446_Then:
    goto L130;

  anon372_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon318_Then, anon318_Else;

  anon318_Else:
    Status_2 := -1073741789;
    goto L95;

  anon318_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    call {:si_unique_call 1620} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1621} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    call {:si_unique_call 1622} vslice_dummy_var_426 := KeSynchronizeExecution(0, li2bplFunctionConstant984, 0);
    call {:si_unique_call 1623} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon373_Then:
    call {:si_unique_call 1624} vslice_dummy_var_423 := KeSynchronizeExecution(0, li2bplFunctionConstant844, 0);
    goto L95;

  anon374_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon313_Then, anon313_Else;

  anon313_Else:
    Status_2 := -1073741789;
    goto L95;

  anon313_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 1625} vslice_dummy_var_448 := KeSynchronizeExecution(0, li2bplFunctionConstant978, 0);
    goto L95;

  anon375_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    Status_2 := -1073741789;
    goto L95;

  anon312_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_693;
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    goto L95;

  anon376_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc escapeChar;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon445_Then, anon445_Else;

  anon445_Else:
    Status_2 := -1073741789;
    goto L95;

  anon445_Then:
    call {:si_unique_call 1626} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1627} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon320_Then, anon320_Else;

  anon320_Else:
    goto L190;

  L190:
    Status_2 := -1073741811;
    call {:si_unique_call 1628} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon320_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    goto L190;

  anon322_Then:
    goto L185;

  L185:
    call {:si_unique_call 1629} vslice_dummy_var_427 := KeSynchronizeExecution(0, li2bplFunctionConstant987, 0);
    call {:si_unique_call 1630} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon321_Then:
    goto L190;

  anon319_Then:
    goto L185;

  anon377_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    Status_2 := -1073741789;
    goto L95;

  anon323_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1631} sdv_588 := corral_nondet();
    ModemControl_2 := sdv_588;
    ModemControl_2 := BAND(ModemControl_2, BOR(1, 2));
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_685;
    assume {:nonnull} Tmp_685 != 0;
    assume Tmp_685 > 0;
    goto L95;

  anon378_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    Status_2 := -1073741789;
    goto L95;

  anon311_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    Tmp_672 := AssociatedIrp__IRP(Irp_16);
    assume {:nonnull} Tmp_672 != 0;
    assume Tmp_672 > 0;
    havoc vslice_dummy_var_1718;
    call {:si_unique_call 1632} SerialGetProperties(Extension_24, vslice_dummy_var_1718);
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    goto L95;

  anon379_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Xc_1;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon443_Then, anon443_Else;

  anon443_Else:
    Status_2 := -1073741789;
    goto L95;

  anon443_Then:
    assume {:nonnull} Xc_1 != 0;
    assume Xc_1 > 0;
    goto anon324_Then, anon324_Else;

  anon324_Else:
    Status_2 := -1073741811;
    goto L95;

  anon324_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1633} Tmp_667 := SerialStartOrQueue(Extension_24, Irp_16, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_24), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_24), li2bplFunctionConstant569);
    goto anon444_Then, anon444_Else;

  anon444_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon444_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon380_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    Status_2 := -1073741789;
    goto L95;

  anon325_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    call {:si_unique_call 1634} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1635} IoAcquireCancelSpinLock(Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    call {:si_unique_call 1636} vslice_dummy_var_428 := KeSynchronizeExecution(0, li2bplFunctionConstant986, 0);
    call {:si_unique_call 1637} IoReleaseCancelSpinLock(OldIrql_11);
    goto L95;

  anon381_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    Status_2 := -1073741789;
    goto L95;

  anon326_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    call {:si_unique_call 1638} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1639} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    call {:si_unique_call 1640} vslice_dummy_var_429 := KeSynchronizeExecution(0, li2bplFunctionConstant982, 0);
    call {:si_unique_call 1641} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon382_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc HandFlow;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon441_Then, anon441_Else;

  anon441_Else:
    Status_2 := -1073741789;
    goto L95;

  anon441_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    Status_2 := -1073741811;
    goto L95;

  anon327_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    Status_2 := -1073741811;
    goto L95;

  anon328_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    havoc Tmp_694;
    goto anon442_Then, anon442_Else;

  anon442_Else:
    assume {:partition} Tmp_694 == 3;
    Status_2 := -1073741811;
    goto L95;

  anon442_Then:
    assume {:partition} Tmp_694 != 3;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon329_Then, anon329_Else;

  anon329_Else:
    goto L282;

  L282:
    Status_2 := -1073741811;
    goto L95;

  anon329_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon331_Then, anon331_Else;

  anon331_Else:
    goto L286;

  L286:
    Status_2 := -1073741811;
    goto L95;

  anon331_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    call {:si_unique_call 1642} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1643} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon333_Then, anon333_Else;

  anon333_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon334_Then, anon334_Else;

  anon334_Else:
    Status_2 := -1073741811;
    call {:si_unique_call 1644} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon334_Then:
    goto L294;

  L294:
    call {:si_unique_call 1645} vslice_dummy_var_430 := KeSynchronizeExecution(0, li2bplFunctionConstant891, 0);
    call {:si_unique_call 1646} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon333_Then:
    goto L294;

  anon332_Then:
    goto L286;

  anon330_Then:
    goto L282;

  anon383_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    Status_2 := -1073741789;
    goto L95;

  anon310_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 1647} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1648} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_683;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    call {:si_unique_call 1649} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon384_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc NewChars;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon440_Then, anon440_Else;

  anon440_Else:
    Status_2 := -1073741789;
    goto L95;

  anon440_Then:
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    call {:si_unique_call 1650} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1651} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon335_Then, anon335_Else;

  anon335_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon336_Then, anon336_Else;

  anon336_Else:
    goto L332;

  L332:
    Status_2 := -1073741811;
    call {:si_unique_call 1652} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon336_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon337_Then, anon337_Else;

  anon337_Else:
    goto L332;

  anon337_Then:
    goto L329;

  L329:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    call {:si_unique_call 1653} vslice_dummy_var_447 := KeSynchronizeExecution(0, li2bplFunctionConstant979, 0);
    call {:si_unique_call 1654} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon335_Then:
    goto L329;

  anon385_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    Status_2 := -1073741789;
    goto L95;

  anon309_Then:
    call {:si_unique_call 1655} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1656} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_684;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 1657} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon386_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Lc_1;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon432_Then, anon432_Else;

  anon432_Else:
    Status_2 := -1073741789;
    goto L95;

  anon432_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    havoc vslice_dummy_var_1719;
    call {:si_unique_call 1658} sdv_RtlZeroMemory(0, vslice_dummy_var_1719);
    call {:si_unique_call 1659} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1660} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon338_Then, anon338_Else;

  anon338_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_700;
    goto anon433_Then, anon433_Else;

  anon433_Else:
    assume {:partition} Tmp_700 == 1;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  L372:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon339_Then, anon339_Else;

  anon339_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_690;
    goto anon434_Then, anon434_Else;

  anon434_Else:
    assume {:partition} Tmp_690 == 8;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  L378:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon340_Then, anon340_Else;

  anon340_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  L383:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 1661} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon341_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon340_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon434_Then:
    assume {:partition} Tmp_690 != 8;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_676;
    goto anon435_Then, anon435_Else;

  anon435_Else:
    assume {:partition} Tmp_676 == 24;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon435_Then:
    assume {:partition} Tmp_676 != 24;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_677;
    goto anon436_Then, anon436_Else;

  anon436_Else:
    assume {:partition} Tmp_677 == 40;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon436_Then:
    assume {:partition} Tmp_677 != 40;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_680;
    goto anon437_Then, anon437_Else;

  anon437_Else:
    assume {:partition} Tmp_680 == 56;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon437_Then:
    assume {:partition} Tmp_680 != 56;
    goto L378;

  anon339_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon433_Then:
    assume {:partition} Tmp_700 != 1;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_701;
    goto anon438_Then, anon438_Else;

  anon438_Else:
    assume {:partition} Tmp_701 == 2;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon438_Then:
    assume {:partition} Tmp_701 != 2;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_678;
    goto anon439_Then, anon439_Else;

  anon439_Else:
    assume {:partition} Tmp_678 == 3;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon439_Then:
    assume {:partition} Tmp_678 != 3;
    goto L372;

  anon338_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon387_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Br;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon431_Then, anon431_Else;

  anon431_Else:
    Status_2 := -1073741789;
    goto L95;

  anon431_Then:
    call {:si_unique_call 1662} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1663} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Br != 0;
    assume Br > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1664} sdv_KeReleaseSpinLock(0, OldIrql_11);
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    goto L95;

  anon388_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon342_Then, anon342_Else;

  anon342_Else:
    Status_2 := -1073741789;
    goto L95;

  anon342_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_674;
    assume {:nonnull} Tmp_674 != 0;
    assume Tmp_674 > 0;
    havoc Mask_1;
    goto anon429_Then, anon429_Else;

  anon429_Else:
    assume {:partition} Mask_1 != 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:partition} BAND(Mask_1, -16) == 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1665} Tmp_667 := SerialStartOrQueue(Extension_24, Irp_16, PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_24), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_24), li2bplFunctionConstant805);
    goto anon430_Then, anon430_Else;

  anon430_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon430_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon343_Then:
    assume {:partition} BAND(Mask_1, -16) != 0;
    goto L419;

  L419:
    Status_2 := -1073741811;
    goto L95;

  anon429_Then:
    assume {:partition} Mask_1 == 0;
    goto L419;

  anon389_Then:
    Tmp_696 := strConst__li2bpl206;
    call {:si_unique_call 1666} vslice_dummy_var_444 := SerialDbgPrintEx(9, Tmp_696);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    Tmp_692 := strConst__li2bpl208;
    call {:si_unique_call 1667} vslice_dummy_var_445 := SerialDbgPrintEx(6, Tmp_692);
    Status_2 := -1073741789;
    goto L95;

  anon344_Then:
    Tmp_681 := strConst__li2bpl207;
    call {:si_unique_call 1668} vslice_dummy_var_446 := SerialDbgPrintEx(9, Tmp_681);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1669} Tmp_667 := SerialStartOrQueue(Extension_24, Irp_16, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_24), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_24), li2bplFunctionConstant617);
    goto anon428_Then, anon428_Else;

  anon428_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon428_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon390_Then:
    Tmp_697 := strConst__li2bpl209;
    call {:si_unique_call 1670} vslice_dummy_var_440 := SerialDbgPrintEx(9, Tmp_697);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon345_Then, anon345_Else;

  anon345_Else:
    Tmp_673 := strConst__li2bpl210;
    call {:si_unique_call 1671} vslice_dummy_var_441 := SerialDbgPrintEx(6, Tmp_673);
    Status_2 := -1073741789;
    goto L95;

  anon345_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_702;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    havoc NewMask;
    goto anon426_Then, anon426_Else;

  anon426_Else:
    assume {:partition} BAND(NewMask, -8192) != 0;
    Tmp_703 := strConst__li2bpl212;
    call {:si_unique_call 1672} vslice_dummy_var_442 := SerialDbgPrintEx(6, Tmp_703);
    Status_2 := -1073741811;
    goto L95;

  anon426_Then:
    assume {:partition} BAND(NewMask, -8192) == 0;
    Tmp_679 := strConst__li2bpl211;
    call {:si_unique_call 1673} vslice_dummy_var_443 := SerialDbgPrintEx(9, Tmp_679);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1674} Tmp_667 := SerialStartOrQueue(Extension_24, Irp_16, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_24), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_24), li2bplFunctionConstant617);
    goto anon427_Then, anon427_Else;

  anon427_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon427_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon391_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    Status_2 := -1073741789;
    goto L95;

  anon308_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_682;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_682 != 0;
    assume Tmp_682 > 0;
    goto L95;

  anon392_Then:
    call {:si_unique_call 1675} vslice_dummy_var_422 := KeSynchronizeExecution(0, li2bplFunctionConstant894, 0);
    goto L95;

  anon393_Then:
    call {:si_unique_call 1676} vslice_dummy_var_421 := KeSynchronizeExecution(0, li2bplFunctionConstant893, 0);
    goto L95;

  anon394_Then:
    goto L58;

  L58:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1720;
    call {:si_unique_call 1677} Status_2 := SerialGotoPowerState(vslice_dummy_var_1720, Extension_24, 1);
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:partition} Status_2 >= 0;
    goto L469;

  L469:
    call {:si_unique_call 1678} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1679} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_668;
    goto anon424_Then, anon424_Else;

  anon424_Else:
    assume {:partition} Tmp_668 == 128;
    goto L481;

  L481:
    Status_2 := -1073741811;
    goto L482;

  L482:
    call {:si_unique_call 1680} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon424_Then:
    assume {:partition} Tmp_668 != 128;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_699;
    goto anon425_Then, anon425_Else;

  anon425_Else:
    assume {:partition} Tmp_699 != 192;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon347_Then, anon347_Else;

  anon347_Else:
    Tmp_688 := li2bplFunctionConstant889;
    goto L490;

  L490:
    call {:si_unique_call 1681} vslice_dummy_var_431 := KeSynchronizeExecution(0, Tmp_688, 0);
    goto L482;

  anon347_Then:
    Tmp_688 := li2bplFunctionConstant524;
    goto L490;

  anon425_Then:
    assume {:partition} Tmp_699 == 192;
    goto L481;

  anon346_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon307_Then:
    goto L469;

  anon395_Then:
    goto L58;

  anon396_Then:
    goto L95;

  anon397_Then:
    goto L56;

  L56:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1721;
    call {:si_unique_call 1682} Status_2 := SerialGotoPowerState(vslice_dummy_var_1721, Extension_24, 1);
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:partition} Status_2 >= 0;
    goto L493;

  L493:
    call {:si_unique_call 1683} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1684} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_691;
    goto anon423_Then, anon423_Else;

  anon423_Else:
    assume {:partition} Tmp_691 == 2;
    Status_2 := -1073741811;
    goto L506;

  L506:
    call {:si_unique_call 1685} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon423_Then:
    assume {:partition} Tmp_691 != 2;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon349_Then, anon349_Else;

  anon349_Else:
    Tmp_695 := li2bplFunctionConstant888;
    goto L512;

  L512:
    call {:si_unique_call 1686} vslice_dummy_var_432 := KeSynchronizeExecution(0, Tmp_695, 0);
    goto L506;

  anon349_Then:
    Tmp_695 := li2bplFunctionConstant525;
    goto L512;

  anon348_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon306_Then:
    goto L493;

  anon398_Then:
    goto L56;

  anon399_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon305_Then, anon305_Else;

  anon305_Else:
    Status_2 := -1073741789;
    goto L95;

  anon305_Then:
    call {:si_unique_call 1687} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1688} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_671;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 1689} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon400_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc NewTimeouts;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon422_Then, anon422_Else;

  anon422_Else:
    Status_2 := -1073741789;
    goto L95;

  anon422_Then:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon350_Then, anon350_Else;

  anon350_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon352_Then, anon352_Else;

  anon352_Else:
    Status_2 := -1073741811;
    goto L95;

  anon352_Then:
    goto L531;

  L531:
    call {:si_unique_call 1690} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1691} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    call {:si_unique_call 1692} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon351_Then:
    goto L531;

  anon350_Then:
    goto L531;

  anon401_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon304_Then, anon304_Else;

  anon304_Else:
    Status_2 := -1073741789;
    goto L95;

  anon304_Then:
    call {:si_unique_call 1693} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1694} IoAcquireCancelSpinLock(Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    Status_2 := -1073741811;
    call {:si_unique_call 1695} IoReleaseCancelSpinLock(OldIrql_11);
    goto L95;

  anon353_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    goto anon354_Then, anon354_Else;

  anon354_Else:
    call {:si_unique_call 1696} IoReleaseCancelSpinLock(OldIrql_11);
    Status_2 := -1073741536;
    goto L95;

  anon354_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1697} IoReleaseCancelSpinLock(OldIrql_11);
    call {:si_unique_call 1698} SerialStartImmediate(Extension_24);
    Tmp_667 := 259;
    goto L1;

  anon402_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon303_Then, anon303_Else;

  anon303_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1722;
    call {:si_unique_call 1699} Status_2 := SerialGotoPowerState(vslice_dummy_var_1722, Extension_24, 1);
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:partition} Status_2 >= 0;
    goto L572;

  L572:
    call {:si_unique_call 1700} vslice_dummy_var_433 := KeSynchronizeExecution(0, li2bplFunctionConstant849, 0);
    goto L95;

  anon355_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon303_Then:
    goto L572;

  anon403_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1723;
    call {:si_unique_call 1701} Status_2 := SerialGotoPowerState(vslice_dummy_var_1723, Extension_24, 1);
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:partition} Status_2 >= 0;
    goto L582;

  L582:
    call {:si_unique_call 1702} vslice_dummy_var_434 := KeSynchronizeExecution(0, li2bplFunctionConstant892, 0);
    goto L95;

  anon356_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon302_Then:
    goto L582;

  anon404_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Lc;
    Mask_2 := 255;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon420_Then, anon420_Else;

  anon420_Else:
    Status_2 := -1073741789;
    goto L95;

  anon420_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1724;
    call {:si_unique_call 1703} Status_2 := SerialGotoPowerState(vslice_dummy_var_1724, Extension_24, 1);
    goto anon359_Then, anon359_Else;

  anon359_Else:
    assume {:partition} Status_2 >= 0;
    goto L602;

  L602:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon358_Then, anon358_Else;

  anon358_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon408_Then, anon408_Else;

  anon408_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon407_Then, anon407_Else;

  anon407_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon406_Then, anon406_Else;

  anon406_Else:
    LData := 3;
    goto L615;

  L615:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon421_Then, anon421_Else;

  anon421_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon412_Then, anon412_Else;

  anon412_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon411_Then, anon411_Else;

  anon411_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon410_Then, anon410_Else;

  anon410_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon409_Then, anon409_Else;

  anon409_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LParity := 56;
    goto L625;

  L625:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon360_Then, anon360_Else;

  anon360_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon414_Then, anon414_Else;

  anon414_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon413_Then, anon413_Else;

  anon413_Else:
    goto anon362_Then, anon362_Else;

  anon362_Else:
    assume {:partition} LData != 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LStop := 4;
    goto L634;

  L634:
    call {:si_unique_call 1704} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1705} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_670;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1706} vslice_dummy_var_439 := KeSynchronizeExecution(0, li2bplFunctionConstant981, 0);
    call {:si_unique_call 1707} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon362_Then:
    assume {:partition} LData == 0;
    Status_2 := -1073741811;
    goto L95;

  anon413_Then:
    Status_2 := -1073741811;
    goto L95;

  anon414_Then:
    goto anon361_Then, anon361_Else;

  anon361_Else:
    assume {:partition} LData != 0;
    Status_2 := -1073741811;
    goto L95;

  anon361_Then:
    assume {:partition} LData == 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LStop := 4;
    goto L634;

  anon360_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LStop := 0;
    goto L634;

  anon409_Then:
    Status_2 := -1073741811;
    goto L95;

  anon410_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LParity := 40;
    goto L625;

  anon411_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LParity := 24;
    goto L625;

  anon412_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LParity := 8;
    goto L625;

  anon421_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    LParity := 0;
    goto L625;

  anon406_Then:
    Status_2 := -1073741811;
    goto L95;

  anon407_Then:
    LData := 2;
    Mask_2 := 127;
    goto L615;

  anon408_Then:
    LData := 1;
    Mask_2 := 63;
    goto L615;

  anon358_Then:
    LData := 0;
    Mask_2 := 31;
    goto L615;

  anon359_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon357_Then:
    goto L602;

  anon405_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Rs;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon418_Then, anon418_Else;

  anon418_Else:
    Status_2 := -1073741789;
    goto L95;

  anon418_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    goto anon363_Then, anon363_Else;

  anon363_Else:
    Status_2 := 0;
    goto L95;

  anon363_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    havoc vslice_dummy_var_1725;
    call {:si_unique_call 1708} boogieTmp := sdv_ExAllocatePoolWithQuotaTag(512, vslice_dummy_var_1725, -666022077);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon364_Then, anon364_Else;

  anon364_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1709} Tmp_667 := SerialStartOrQueue(Extension_24, Irp_16, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_24), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_24), li2bplFunctionConstant720);
    goto anon419_Then, anon419_Else;

  anon419_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon419_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon364_Then:
    goto L95;

  anon417_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon365_Then, anon365_Else;

  anon365_Else:
    Status_2 := -1073741789;
    goto L95;

  anon365_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_669;
    assume {:nonnull} Tmp_669 != 0;
    assume Tmp_669 > 0;
    havoc BaudRate;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1726;
    call {:si_unique_call 1710} Status_2 := SerialGetDivisorFromBaud(vslice_dummy_var_1726, BaudRate, AppropriateDivisor);
    goto anon366_Then, anon366_Else;

  anon366_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon367_Then, anon367_Else;

  anon367_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1727;
    call {:si_unique_call 1711} Status_2 := SerialGotoPowerState(vslice_dummy_var_1727, Extension_24, 1);
    goto anon368_Then, anon368_Else;

  anon368_Else:
    assume {:partition} Status_2 >= 0;
    goto L705;

  L705:
    call {:si_unique_call 1712} Tmp_698 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1713} sdv_KeAcquireSpinLock(0, Tmp_698);
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    havoc OldIrql_11;
    goto anon369_Then, anon369_Else;

  anon369_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    assume {:nonnull} AppropriateDivisor != 0;
    assume AppropriateDivisor > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    call {:si_unique_call 1714} vslice_dummy_var_438 := KeSynchronizeExecution(0, li2bplFunctionConstant980, 0);
    goto L716;

  L716:
    call {:si_unique_call 1715} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon369_Then:
    assume {:partition} 0 > Status_2;
    goto L716;

  anon368_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon367_Then:
    goto L705;

  anon366_Then:
    assume {:partition} 0 > Status_2;
    goto L705;
}



procedure {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_17: int, actual_PIrp_13: int) returns (Tmp_704: int);
  modifies alloc, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_704 == 0 || Tmp_704 == -1073741536 || Tmp_704 == 259 || Tmp_704 == -1073741738 || Tmp_704 == -1073741811 || Tmp_704 == -1073741789 || Tmp_704 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_17: int, actual_PIrp_13: int) returns (Tmp_704: int)
{
  var {:scalar} Tmp_705: int;
  var {:scalar} basic: int;
  var {:pointer} Tmp_706: int;
  var {:pointer} pBasic: int;
  var {:pointer} Tmp_707: int;
  var {:pointer} pDevExt_16: int;
  var {:scalar} prologueStatus_1: int;
  var {:scalar} S_9: int;
  var {:scalar} cap_1: int;
  var {:pointer} Tmp_708: int;
  var {:pointer} Tmp_709: int;
  var {:scalar} OldIrql_12: int;
  var {:pointer} Tmp_711: int;
  var {:pointer} pIrpStack_8: int;
  var {:scalar} sdv_626: int;
  var {:scalar} Tmp_713: int;
  var {:scalar} status_24: int;
  var {:pointer} Tmp_717: int;
  var {:pointer} PDevObj_17: int;
  var {:pointer} PIrp_13: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_454: int;

  anon0:
    call {:si_unique_call 1716} basic := __HAVOC_malloc(44);
    call {:si_unique_call 1717} S_9 := __HAVOC_malloc(8);
    PDevObj_17 := actual_PDevObj_17;
    PIrp_13 := actual_PIrp_13;
    call {:si_unique_call 1718} Tmp_706 := __HAVOC_malloc(72);
    call {:si_unique_call 1719} Tmp_708 := __HAVOC_malloc(28);
    call {:si_unique_call 1720} Tmp_709 := __HAVOC_malloc(96);
    call {:si_unique_call 1721} Tmp_711 := __HAVOC_malloc(28);
    call {:si_unique_call 1722} Tmp_717 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_17 != 0;
    assume PDevObj_17 > 0;
    havoc pDevExt_16;
    call {:si_unique_call 1723} prologueStatus_1 := SerialIRPPrologue(PIrp_13, pDevExt_16);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} prologueStatus_1 != 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} prologueStatus_1 != 259;
    Tmp_717 := strConst__li2bpl3;
    call {:si_unique_call 1724} vslice_dummy_var_450 := SerialDbgPrintEx(9, Tmp_717);
    call {:si_unique_call 1725} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1726} SerialIRPEpilogue(pDevExt_16);
    goto L19;

  L19:
    Tmp_704 := prologueStatus_1;
    goto L1;

  L1:
    call {:si_unique_call 1727} SLIC_SerialInternalIoControl_exit(strConst__li2bpl0);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} prologueStatus_1 == 259;
    goto L19;

  anon35_Then:
    assume {:partition} prologueStatus_1 == 0;
    Tmp_709 := strConst__li2bpl41;
    call {:si_unique_call 1728} vslice_dummy_var_451 := SerialDbgPrintEx(9, Tmp_709);
    call {:si_unique_call 1729} sdv_626 := SerialCompleteIfError(PDevObj_17, PIrp_13);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_626 != 0;
    Tmp_704 := -1073741536;
    goto L1;

  anon37_Then:
    assume {:partition} sdv_626 == 0;
    call {:si_unique_call 1730} pIrpStack_8 := sdv_IoGetCurrentIrpStackLocation(PIrp_13);
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    status_24 := 0;
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto L48;

  L48:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    status_24 := -1073741789;
    goto L56;

  L56:
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    Tmp_706 := strConst__li2bpl3;
    call {:si_unique_call 1731} vslice_dummy_var_452 := SerialDbgPrintEx(9, Tmp_706);
    call {:si_unique_call 1732} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1733} SerialIRPEpilogue(pDevExt_16);
    Tmp_704 := status_24;
    goto L1;

  anon40_Then:
    call {:si_unique_call 1734} sdv_RtlZeroMemory(0, 44);
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    havoc pBasic;
    call {:si_unique_call 1735} sdv_RtlCopyMemory(0, 0, 20);
    call {:si_unique_call 1736} sdv_RtlCopyMemory(0, 0, 16);
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    pBasic := basic;
    goto L80;

  L80:
    call {:si_unique_call 1737} Tmp_707 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_707 != 0;
    assume Tmp_707 > 0;
    call {:si_unique_call 1738} sdv_KeAcquireSpinLock(0, Tmp_707);
    assume {:nonnull} Tmp_707 != 0;
    assume Tmp_707 > 0;
    havoc OldIrql_12;
    call {:si_unique_call 1739} sdv_RtlCopyMemory(0, 0, 20);
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    call {:si_unique_call 1740} vslice_dummy_var_453 := KeSynchronizeExecution(0, li2bplFunctionConstant891, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1741} vslice_dummy_var_454 := corral_nondet();
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L108;

  L108:
    call {:si_unique_call 1742} sdv_KeReleaseSpinLock(0, OldIrql_12);
    goto L56;

  anon41_Then:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L108;

  anon38_Then:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    status_24 := -1073741789;
    goto L56;

  anon39_Then:
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    havoc pBasic;
    goto L80;

  anon44_Then:
    status_24 := -1073741811;
    goto L56;

  anon45_Then:
    goto L48;

  anon46_Then:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    call {:si_unique_call 1743} vslice_dummy_var_449 := IoCancelIrp(0);
    goto L121;

  L121:
    status_24 := 0;
    goto L56;

  anon51_Then:
    goto L121;

  anon48_Then:
    cap_1 := 2;
    goto L126;

  L126:
    call {:si_unique_call 1744} Tmp_705, cap_1, Tmp_708, Tmp_711, Tmp_713 := SerialInternalIoControl_loop_L126(Tmp_705, pDevExt_16, cap_1, Tmp_708, Tmp_711, Tmp_713);
    goto L126_last;

  L126_last:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} 7 > cap_1;
    Tmp_705 := cap_1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc Tmp_711;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    Tmp_713 := cap_1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc Tmp_708;
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L129;

  L129:
    cap_1 := cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    assume false;
    return;

  anon50_Then:
    goto L127;

  L127:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} 7 > cap_1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    status_24 := 0;
    goto L56;

  anon43_Then:
    assume {:partition} cap_1 >= 7;
    status_24 := -1073741637;
    goto L56;

  anon49_Then:
    goto L129;

  anon42_Then:
    assume {:partition} cap_1 >= 7;
    goto L127;
}



procedure {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_25: int, actual_Properties: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_25: int, actual_Properties: int)
{
  var {:pointer} Extension_25: int;
  var {:pointer} Properties: int;
  var vslice_dummy_var_455: int;

  anon0:
    call {:si_unique_call 1745} vslice_dummy_var_455 := __HAVOC_malloc(4);
    Extension_25 := actual_Extension_25;
    Properties := actual_Properties;
    call {:si_unique_call 1746} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    return;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_456: int;

  anon0:
    call {:si_unique_call 1747} vslice_dummy_var_456 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_722: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} Tmp_722 == 259 || Tmp_722 == 0 || Tmp_722 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_722: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} pDevExt_17: int;
  var {:scalar} status_25: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_17: int;
  var vslice_dummy_var_1728: int;
  var vslice_dummy_var_1729: int;

  anon0:
    call {:si_unique_call 1748} disposition := __HAVOC_malloc(4);
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_17 := actual_Irp_17;
    assume {:nonnull} DeviceObject_17 != 0;
    assume DeviceObject_17 > 0;
    havoc pDevExt_17;
    call {:si_unique_call 1749} sdv_do_paged_code_check();
    call {:si_unique_call 1750} status_25 := WmiSystemControl(0, 0, Irp_17, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L22;

  L22:
    call {:si_unique_call 1751} sdv_IoSkipCurrentIrpStackLocation(Irp_17);
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_1728;
    call {:si_unique_call 1752} status_25 := sdv_IoCallDriver(vslice_dummy_var_1728, Irp_17);
    goto L30;

  L30:
    Tmp_722 := status_25;
    call {:si_unique_call 1753} SLIC_SerialSystemControlDispatch_exit(strConst__li2bpl0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    call {:si_unique_call 1754} sdv_IoSkipCurrentIrpStackLocation(Irp_17);
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_1729;
    call {:si_unique_call 1755} status_25 := sdv_IoCallDriver(vslice_dummy_var_1729, Irp_17);
    goto L30;

  anon13_Then:
    goto L22;

  anon14_Then:
    call {:si_unique_call 1756} sdv_IoCompleteRequest(0, 0);
    goto L30;

  anon11_Then:
    goto L30;
}



procedure {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_724: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_724 == -1073741811 || Tmp_724 == -1073741823 || Tmp_724 == 0 || Tmp_724 == 5 || Tmp_724 == -1073741789 || Tmp_724 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_724: int)
{
  var {:pointer} fullInfo: int;
  var {:scalar} length: int;
  var {:pointer} Tmp_726: int;
  var {:pointer} Tmp_727: int;
  var {:pointer} Tmp_728: int;
  var {:pointer} sdv_632: int;
  var {:scalar} ntStatus: int;
  var {:scalar} keyName: int;
  var {:pointer} KeyNameString: int;
  var {:scalar} KeyNameStringLength: int;
  var {:scalar} DataLength: int;
  var vslice_dummy_var_457: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_1730: int;

  anon0:
    call {:si_unique_call 1757} keyName := __HAVOC_malloc(12);
    KeyNameString := actual_KeyNameString;
    KeyNameStringLength := actual_KeyNameStringLength;
    DataLength := actual_DataLength;
    call {:si_unique_call 1758} Tmp_727 := __HAVOC_malloc(124);
    call {:si_unique_call 1759} Tmp_728 := __HAVOC_malloc(132);
    ntStatus := -1073741670;
    call {:si_unique_call 1760} sdv_do_paged_code_check();
    Tmp_728 := strConst__li2bpl213;
    call {:si_unique_call 1761} vslice_dummy_var_457 := SerialDbgPrintEx(2, Tmp_728);
    call {:si_unique_call 1762} RtlInitUnicodeString(keyName, KeyNameString);
    length := 24 + KeyNameStringLength + DataLength;
    call {:si_unique_call 1763} sdv_632 := ExAllocatePoolWithTag(1, length, -666022077);
    fullInfo := sdv_632;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 1764} Tmp_726 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    call {:si_unique_call 1765} ntStatus := ZwQueryValueKey(0, 0, 1, 0, length, Tmp_726);
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    havoc length;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ntStatus >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_1730;
    call {:si_unique_call 1766} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_1730);
    goto L31;

  L31:
    call {:si_unique_call 1767} sdv_ExFreePool(0);
    goto L23;

  L23:
    Tmp_727 := strConst__li2bpl214;
    call {:si_unique_call 1768} vslice_dummy_var_458 := SerialDbgPrintEx(2, Tmp_727);
    Tmp_724 := ntStatus;
    return;

  anon8_Then:
    goto L31;

  anon7_Then:
    assume {:partition} 0 > ntStatus;
    goto L31;

  anon9_Then:
    assume {:partition} fullInfo == 0;
    goto L23;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_459: int;

  anon0:
    call {:si_unique_call 1769} vslice_dummy_var_459 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialPutRegistryKeyValue"} SerialPutRegistryKeyValue(actual_Handle_1: int, actual_PKeyNameString: int, actual_KeyNameStringLength_1: int, actual_Dtype: int, actual_PData: int, actual_DataLength_1: int) returns (Tmp_731: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_731 == -1073741790 || Tmp_731 == -1073741816 || Tmp_731 == -1073741823 || Tmp_731 == 0 || Tmp_731 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialPutRegistryKeyValue"} SerialPutRegistryKeyValue(actual_Handle_1: int, actual_PKeyNameString: int, actual_KeyNameStringLength_1: int, actual_Dtype: int, actual_PData: int, actual_DataLength_1: int) returns (Tmp_731: int)
{
  var {:pointer} Tmp_732: int;
  var {:pointer} Tmp_733: int;
  var {:pointer} sdv_636: int;
  var {:scalar} status_26: int;
  var {:scalar} keyname: int;
  var {:scalar} Tmp_735: int;
  var {:scalar} KeyNameStringLength_1: int;
  var {:scalar} Dtype: int;
  var {:scalar} DataLength_1: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_462: int;

  anon0:
    call {:si_unique_call 1770} keyname := __HAVOC_malloc(12);
    KeyNameStringLength_1 := actual_KeyNameStringLength_1;
    Dtype := actual_Dtype;
    DataLength_1 := actual_DataLength_1;
    call {:si_unique_call 1771} Tmp_732 := __HAVOC_malloc(132);
    call {:si_unique_call 1772} Tmp_733 := __HAVOC_malloc(124);
    call {:si_unique_call 1773} sdv_do_paged_code_check();
    Tmp_732 := strConst__li2bpl215;
    call {:si_unique_call 1774} vslice_dummy_var_461 := SerialDbgPrintEx(2, Tmp_732);
    call {:si_unique_call 1775} RtlInitUnicodeString(keyname, 0);
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    havoc Tmp_735;
    call {:si_unique_call 1776} sdv_636 := ExAllocatePoolWithTag(1, Tmp_735, -666022077);
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(keyname)] := sdv_636;
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(keyname)] != 0;
    call {:si_unique_call 1777} vslice_dummy_var_460 := corral_nondet();
    call {:si_unique_call 1778} status_26 := ZwSetValueKey(0, 0, 0, Dtype, 0, DataLength_1);
    call {:si_unique_call 1779} sdv_ExFreePool(0);
    Tmp_733 := strConst__li2bpl216;
    call {:si_unique_call 1780} vslice_dummy_var_462 := SerialDbgPrintEx(2, Tmp_733);
    Tmp_731 := status_26;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(keyname)] == 0;
    Tmp_731 := -1073741670;
    goto L1;
}



procedure {:origName "SerialGetConfigDefaults"} SerialGetConfigDefaults(actual_DriverDefaultsPtr: int, actual_RegistryPath: int) returns (Tmp_736: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_736 == 0 || Tmp_736 == -1073741823 || Tmp_736 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetConfigDefaults"} SerialGetConfigDefaults(actual_DriverDefaultsPtr: int, actual_RegistryPath: int) returns (Tmp_736: int)
{
  var {:pointer} paramTable: int;
  var {:scalar} Tmp_741: int;
  var {:scalar} Tmp_743: int;
  var {:dopa} {:scalar} DbgDefault: int;
  var {:pointer} sdv_640: int;
  var {:scalar} Status_3: int;
  var {:dopa} {:scalar} DetectDefault: int;
  var {:dopa} {:scalar} notThereDefault: int;
  var {:scalar} Tmp_747: int;
  var {:pointer} path: int;
  var {:dopa} {:scalar} zero_1: int;
  var {:pointer} DriverDefaultsPtr: int;
  var {:pointer} RegistryPath: int;
  var vslice_dummy_var_463: int;
  var vslice_dummy_var_464: int;
  var vslice_dummy_var_465: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_467: int;
  var vslice_dummy_var_468: int;
  var vslice_dummy_var_469: int;
  var vslice_dummy_var_470: int;
  var vslice_dummy_var_471: int;
  var vslice_dummy_var_472: int;

  anon0:
    call {:si_unique_call 1781} DbgDefault := __HAVOC_malloc(4);
    call {:si_unique_call 1782} DetectDefault := __HAVOC_malloc(4);
    call {:si_unique_call 1783} notThereDefault := __HAVOC_malloc(4);
    call {:si_unique_call 1784} zero_1 := __HAVOC_malloc(4);
    DriverDefaultsPtr := actual_DriverDefaultsPtr;
    RegistryPath := actual_RegistryPath;
    call {:si_unique_call 1785} paramTable := __HAVOC_malloc(252);
    call {:si_unique_call 1786} vslice_dummy_var_463 := __HAVOC_malloc(28);
    call {:si_unique_call 1787} vslice_dummy_var_464 := __HAVOC_malloc(64);
    call {:si_unique_call 1788} vslice_dummy_var_465 := __HAVOC_malloc(48);
    call {:si_unique_call 1789} vslice_dummy_var_466 := __HAVOC_malloc(32);
    call {:si_unique_call 1790} vslice_dummy_var_467 := __HAVOC_malloc(28);
    Status_3 := 0;
    assume {:nonnull} zero_1 != 0;
    assume zero_1 > 0;
    assume {:nonnull} DbgDefault != 0;
    assume DbgDefault > 0;
    assume {:nonnull} DetectDefault != 0;
    assume DetectDefault > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    call {:si_unique_call 1791} sdv_do_paged_code_check();
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_741;
    call {:si_unique_call 1792} sdv_640 := ExAllocatePoolWithTag(1, Tmp_741, -666022077);
    path := sdv_640;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} path != 0;
    call {:si_unique_call 1793} sdv_RtlZeroMemory(0, 76);
    call {:si_unique_call 1794} sdv_RtlZeroMemory(0, 252);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_743;
    call {:si_unique_call 1795} sdv_RtlZeroMemory(0, Tmp_743);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_747;
    call {:si_unique_call 1796} sdv_RtlMoveMemory(0, 0, Tmp_747);
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    call {:si_unique_call 1797} Status_3 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Status_3 >= 0;
    goto L95;

  L95:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    call {:si_unique_call 1798} vslice_dummy_var_468 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L96;

  L96:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    call {:si_unique_call 1799} vslice_dummy_var_469 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L101;

  L101:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    call {:si_unique_call 1800} vslice_dummy_var_470 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L106;

  L106:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    call {:si_unique_call 1801} vslice_dummy_var_471 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L111;

  L111:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    call {:si_unique_call 1802} vslice_dummy_var_472 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    goto L116;

  L116:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} path != 0;
    call {:si_unique_call 1803} sdv_ExFreePool(0);
    goto L122;

  L122:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Tmp_736 := Status_3;
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} path == 0;
    goto L122;

  anon22_Then:
    goto L116;

  anon21_Then:
    goto L111;

  anon20_Then:
    goto L106;

  anon19_Then:
    goto L101;

  anon18_Then:
    goto L96;

  anon17_Then:
    assume {:partition} 0 > Status_3;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    goto L95;

  anon24_Then:
    assume {:partition} path == 0;
    Status_3 := -1073741670;
    Tmp_736 := Status_3;
    goto L1;
}



procedure {:origName "SerialBuildResourceList"} SerialBuildResourceList(actual_PResourceList: int, actual_PPartialCount: int, actual_PUserData_2: int) returns (Tmp_748: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_748 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialBuildResourceList"} SerialBuildResourceList(actual_PResourceList: int, actual_PPartialCount: int, actual_PUserData_2: int) returns (Tmp_748: int)
{
  var {:scalar} Tmp_750: int;
  var {:pointer} Tmp_751: int;
  var {:scalar} countOfPartials: int;
  var {:pointer} Tmp_752: int;
  var {:pointer} pPartial: int;
  var {:pointer} Tmp_753: int;
  var {:pointer} Tmp_754: int;
  var {:pointer} Tmp_755: int;
  var {:pointer} Tmp_756: int;
  var {:pointer} Tmp_757: int;
  var {:scalar} status_27: int;
  var {:pointer} Tmp_758: int;
  var {:pointer} PResourceList: int;
  var {:pointer} PPartialCount: int;
  var {:pointer} PUserData_2: int;
  var vslice_dummy_var_473: int;
  var vslice_dummy_var_474: int;
  var vslice_dummy_var_475: int;

  anon0:
    PResourceList := actual_PResourceList;
    PPartialCount := actual_PPartialCount;
    PUserData_2 := actual_PUserData_2;
    call {:si_unique_call 1804} Tmp_751 := __HAVOC_malloc(292);
    call {:si_unique_call 1805} Tmp_752 := __HAVOC_malloc(104);
    call {:si_unique_call 1806} Tmp_753 := __HAVOC_malloc(124);
    call {:si_unique_call 1807} Tmp_754 := __HAVOC_malloc(312);
    call {:si_unique_call 1808} Tmp_755 := __HAVOC_malloc(312);
    call {:si_unique_call 1809} Tmp_756 := __HAVOC_malloc(124);
    call {:si_unique_call 1810} Tmp_757 := __HAVOC_malloc(312);
    call {:si_unique_call 1811} Tmp_758 := __HAVOC_malloc(312);
    status_27 := 0;
    call {:si_unique_call 1812} sdv_do_paged_code_check();
    Tmp_756 := strConst__li2bpl222;
    call {:si_unique_call 1813} vslice_dummy_var_473 := SerialDbgPrintEx(11, Tmp_756);
    Tmp_752 := strConst__li2bpl223;
    call {:si_unique_call 1814} vslice_dummy_var_474 := SerialDbgPrintEx(4, Tmp_752);
    assume {:nonnull} PPartialCount != 0;
    assume PPartialCount > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    Tmp_750 := 3;
    goto L20;

  L20:
    countOfPartials := Tmp_750;
    call {:si_unique_call 1815} sdv_RtlZeroMemory(0, 68);
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_755;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} Tmp_755 != 0;
    assume Tmp_755 > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_754;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} Tmp_754 != 0;
    assume Tmp_754 > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_757;
    assume {:nonnull} Tmp_757 != 0;
    assume Tmp_757 > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_758;
    assume {:nonnull} Tmp_758 != 0;
    assume Tmp_758 > 0;
    havoc Tmp_751;
    pPartial := Tmp_751;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L40;

  L40:
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L44;

  L44:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} countOfPartials == 3;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L45;

  L45:
    assume {:nonnull} PPartialCount != 0;
    assume PPartialCount > 0;
    Tmp_753 := strConst__li2bpl224;
    call {:si_unique_call 1816} vslice_dummy_var_475 := SerialDbgPrintEx(11, Tmp_753);
    Tmp_748 := status_27;
    return;

  anon9_Then:
    assume {:partition} countOfPartials != 3;
    goto L45;

  anon12_Then:
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L44;

  anon11_Then:
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L40;

  anon10_Then:
    Tmp_750 := 2;
    goto L20;
}



procedure {:origName "SerialMigrateLegacyRegistry"} SerialMigrateLegacyRegistry(actual_PPdo_1: int, actual_PUserData_3: int, actual_IsMulti: int) returns (Tmp_759: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_759 == -1073741790 || Tmp_759 == -1073741816 || Tmp_759 == -1073741823 || Tmp_759 == 0 || Tmp_759 == -1073741670 || Tmp_759 == -1073741811 || Tmp_759 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialMigrateLegacyRegistry"} SerialMigrateLegacyRegistry(actual_PPdo_1: int, actual_PUserData_3: int, actual_IsMulti: int) returns (Tmp_759: int)
{
  var {:scalar} pnpNameBuf: int;
  var {:pointer} Tmp_760: int;
  var {:pointer} Tmp_761: int;
  var {:pointer} Tmp_762: int;
  var {:pointer} Tmp_763: int;
  var {:pointer} Tmp_764: int;
  var {:scalar} Tmp_765: int;
  var {:scalar} Tmp_766: int;
  var {:pointer} Tmp_767: int;
  var {:dopa} {:scalar} isMultiport: int;
  var {:pointer} Tmp_768: int;
  var {:pointer} Tmp_769: int;
  var {:pointer} Tmp_770: int;
  var {:pointer} Tmp_771: int;
  var {:pointer} Tmp_772: int;
  var {:pointer} Tmp_773: int;
  var {:pointer} Tmp_774: int;
  var {:pointer} Tmp_775: int;
  var {:pointer} Tmp_776: int;
  var {:pointer} Tmp_777: int;
  var {:pointer} pnpKey_3: int;
  var {:pointer} Tmp_778: int;
  var {:pointer} sdv_668: int;
  var {:pointer} Tmp_779: int;
  var {:pointer} Tmp_780: int;
  var {:scalar} Tmp_781: int;
  var {:pointer} Tmp_782: int;
  var {:scalar} status_28: int;
  var {:pointer} Tmp_783: int;
  var {:pointer} Tmp_785: int;
  var {:pointer} Tmp_786: int;
  var {:pointer} Tmp_787: int;
  var {:pointer} PPdo_1: int;
  var {:pointer} PUserData_3: int;
  var {:scalar} IsMulti: int;
  var vslice_dummy_var_476: int;
  var vslice_dummy_var_477: int;
  var vslice_dummy_var_478: int;
  var vslice_dummy_var_479: int;
  var vslice_dummy_var_480: int;
  var vslice_dummy_var_481: int;
  var vslice_dummy_var_482: int;
  var vslice_dummy_var_483: int;
  var vslice_dummy_var_484: int;
  var vslice_dummy_var_485: int;
  var vslice_dummy_var_486: int;
  var vslice_dummy_var_487: int;
  var vslice_dummy_var_488: int;
  var vslice_dummy_var_489: int;
  var vslice_dummy_var_490: int;
  var vslice_dummy_var_491: int;
  var vslice_dummy_var_1731: int;
  var vslice_dummy_var_1732: int;

  anon0:
    call {:si_unique_call 1817} pnpNameBuf := __HAVOC_malloc(12);
    call {:si_unique_call 1818} Tmp_765 := __HAVOC_malloc(20);
    call {:si_unique_call 1819} isMultiport := __HAVOC_malloc(4);
    PPdo_1 := actual_PPdo_1;
    PUserData_3 := actual_PUserData_3;
    IsMulti := actual_IsMulti;
    call {:si_unique_call 1820} Tmp_760 := __HAVOC_malloc(136);
    call {:si_unique_call 1821} Tmp_761 := __HAVOC_malloc(48);
    call {:si_unique_call 1822} Tmp_762 := __HAVOC_malloc(104);
    call {:si_unique_call 1823} Tmp_763 := __HAVOC_malloc(28);
    call {:si_unique_call 1824} Tmp_764 := __HAVOC_malloc(172);
    call {:si_unique_call 1825} Tmp_767 := __HAVOC_malloc(64);
    call {:si_unique_call 1826} Tmp_768 := __HAVOC_malloc(140);
    call {:si_unique_call 1827} Tmp_769 := __HAVOC_malloc(64);
    call {:si_unique_call 1828} Tmp_770 := __HAVOC_malloc(40);
    call {:si_unique_call 1829} Tmp_771 := __HAVOC_malloc(156);
    call {:si_unique_call 1830} Tmp_772 := __HAVOC_malloc(100);
    call {:si_unique_call 1831} Tmp_773 := __HAVOC_malloc(108);
    call {:si_unique_call 1832} Tmp_774 := __HAVOC_malloc(52);
    call {:si_unique_call 1833} Tmp_775 := __HAVOC_malloc(32);
    call {:si_unique_call 1834} Tmp_776 := __HAVOC_malloc(124);
    call {:si_unique_call 1835} Tmp_777 := __HAVOC_malloc(156);
    call {:si_unique_call 1836} Tmp_778 := __HAVOC_malloc(120);
    call {:si_unique_call 1837} Tmp_779 := __HAVOC_malloc(100);
    call {:si_unique_call 1838} Tmp_780 := __HAVOC_malloc(36);
    call {:si_unique_call 1839} Tmp_782 := __HAVOC_malloc(40);
    call {:si_unique_call 1840} Tmp_783 := __HAVOC_malloc(112);
    call {:si_unique_call 1841} Tmp_785 := __HAVOC_malloc(100);
    call {:si_unique_call 1842} Tmp_786 := __HAVOC_malloc(28);
    call {:si_unique_call 1843} Tmp_787 := __HAVOC_malloc(112);
    assume {:nonnull} isMultiport != 0;
    assume isMultiport > 0;
    call {:si_unique_call 1844} sdv_do_paged_code_check();
    Tmp_768 := strConst__li2bpl225;
    call {:si_unique_call 1845} vslice_dummy_var_478 := SerialDbgPrintEx(11, Tmp_768);
    call {:si_unique_call 1846} status_28 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_28 >= 0;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    call {:si_unique_call 1847} sdv_668 := ExAllocatePoolWithTag(1, 514, -666022077);
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pnpNameBuf)] := sdv_668;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pnpNameBuf)] != 0;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    havoc Tmp_766;
    call {:si_unique_call 1848} sdv_RtlZeroMemory(0, Tmp_766);
    call {:si_unique_call 1849} vslice_dummy_var_476 := corral_nondet();
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    call {:si_unique_call 1850} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    havoc Tmp_781;
    Tmp_780 := strConst__li2bpl88;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    call {:si_unique_call 1851} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_780, 18, 1, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pnpNameBuf)], Tmp_781);
    call {:si_unique_call 1852} sdv_ExFreePool(0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} status_28 >= 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} IsMulti != 0;
    Tmp_767 := strConst__li2bpl98;
    call {:si_unique_call 1853} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_767, 32, 4, isMultiport, 4);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} status_28 < 0;
    Tmp_785 := strConst__li2bpl228;
    call {:si_unique_call 1854} vslice_dummy_var_488 := SerialDbgPrintEx(14, Tmp_785);
    goto L66;

  L66:
    call {:si_unique_call 1855} vslice_dummy_var_477 := ZwClose(0);
    Tmp_777 := strConst__li2bpl229;
    call {:si_unique_call 1856} vslice_dummy_var_479 := SerialDbgPrintEx(11, Tmp_777);
    Tmp_759 := status_28;
    goto L1;

  L1:
    return;

  anon47_Then:
    assume {:partition} 0 <= status_28;
    goto L56;

  L56:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    Tmp_782 := strConst__li2bpl124;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1857} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_782, 20, 4, UserPortIndex__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} status_28 < 0;
    Tmp_783 := strConst__li2bpl230;
    call {:si_unique_call 1858} vslice_dummy_var_487 := SerialDbgPrintEx(14, Tmp_783);
    goto L66;

  anon49_Then:
    assume {:partition} 0 <= status_28;
    goto L73;

  L73:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    Tmp_770 := strConst__li2bpl126;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1859} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_770, 20, 4, UserClockRate__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} status_28 < 0;
    Tmp_787 := strConst__li2bpl231;
    call {:si_unique_call 1860} vslice_dummy_var_486 := SerialDbgPrintEx(14, Tmp_787);
    goto L66;

  anon51_Then:
    assume {:partition} 0 <= status_28;
    goto L83;

  L83:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    Tmp_775 := strConst__li2bpl125;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1861} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_775, 16, 4, UserIndexed__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} status_28 < 0;
    Tmp_762 := strConst__li2bpl232;
    call {:si_unique_call 1862} vslice_dummy_var_485 := SerialDbgPrintEx(14, Tmp_762);
    goto L66;

  anon53_Then:
    assume {:partition} 0 <= status_28;
    goto L93;

  L93:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    Tmp_761 := strConst__li2bpl118;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1863} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_761, 24, 4, DisablePort__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_28 < 0;
    Tmp_778 := strConst__li2bpl233;
    call {:si_unique_call 1864} vslice_dummy_var_484 := SerialDbgPrintEx(14, Tmp_778);
    goto L66;

  anon55_Then:
    assume {:partition} 0 <= status_28;
    goto L103;

  L103:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    Tmp_769 := strConst__li2bpl119;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1865} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_769, 32, 4, ForceFIFOEnable__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} status_28 < 0;
    Tmp_760 := strConst__li2bpl234;
    call {:si_unique_call 1866} vslice_dummy_var_483 := SerialDbgPrintEx(14, Tmp_760);
    goto L66;

  anon57_Then:
    assume {:partition} 0 <= status_28;
    goto L113;

  L113:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    Tmp_786 := strConst__li2bpl120;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1867} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_786, 14, 4, RxFIFO__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_28 < 0;
    Tmp_772 := strConst__li2bpl235;
    call {:si_unique_call 1868} vslice_dummy_var_482 := SerialDbgPrintEx(14, Tmp_772);
    goto L66;

  anon59_Then:
    assume {:partition} 0 <= status_28;
    goto L123;

  L123:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    Tmp_763 := strConst__li2bpl121;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1869} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_763, 14, 4, TxFIFO__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} status_28 < 0;
    Tmp_779 := strConst__li2bpl236;
    call {:si_unique_call 1870} vslice_dummy_var_481 := SerialDbgPrintEx(14, Tmp_779);
    goto L66;

  anon61_Then:
    assume {:partition} 0 <= status_28;
    goto L133;

  L133:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    Tmp_774 := strConst__li2bpl122;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 1871} status_28 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_774, 26, 4, MaskInverted__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} status_28 < 0;
    Tmp_776 := strConst__li2bpl237;
    call {:si_unique_call 1872} vslice_dummy_var_480 := SerialDbgPrintEx(14, Tmp_776);
    goto L66;

  anon62_Then:
    assume {:partition} 0 <= status_28;
    goto L66;

  anon60_Then:
    goto L66;

  anon58_Then:
    goto L133;

  anon56_Then:
    goto L123;

  anon54_Then:
    goto L113;

  anon52_Then:
    goto L103;

  anon50_Then:
    goto L93;

  anon48_Then:
    goto L83;

  anon46_Then:
    goto L73;

  anon45_Then:
    assume {:partition} IsMulti == 0;
    goto L56;

  anon44_Then:
    assume {:partition} 0 > status_28;
    Tmp_773 := strConst__li2bpl227;
    call {:si_unique_call 1873} vslice_dummy_var_489 := SerialDbgPrintEx(14, Tmp_773);
    goto L66;

  anon63_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(pnpNameBuf)] == 0;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    assume {:nonnull} PPdo_1 != 0;
    assume PPdo_1 > 0;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    havoc vslice_dummy_var_1731;
    havoc vslice_dummy_var_1732;
    call {:si_unique_call 1874} SerialLogError(vslice_dummy_var_1731, 0, vslice_dummy_var_1732, Tmp_765, 0, 0, 0, 63, 0, -1073348600, 0, 0, 0, 0);
    Tmp_764 := strConst__li2bpl238;
    call {:si_unique_call 1875} vslice_dummy_var_490 := SerialDbgPrintEx(14, Tmp_764);
    status_28 := -1073741670;
    goto L66;

  anon43_Then:
    assume {:partition} 0 > status_28;
    Tmp_771 := strConst__li2bpl226;
    call {:si_unique_call 1876} vslice_dummy_var_491 := SerialDbgPrintEx(11, Tmp_771);
    Tmp_759 := status_28;
    goto L1;
}



procedure {:origName "SerialEnumerateLegacy"} SerialEnumerateLegacy(actual_DriverObject_3: int, actual_RegistryPath_1: int, actual_DriverDefaultsPtr_1: int) returns (Tmp_789: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, SLAM_guard_O_0, handleState, Mem_T.PVOID, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 0;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 0;
  free ensures {:va_keep} handleState == 1 || handleState == 2 || handleState == old(handleState);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialEnumerateLegacy"} SerialEnumerateLegacy(actual_DriverObject_3: int, actual_RegistryPath_1: int, actual_DriverDefaultsPtr_1: int) returns (Tmp_789: int)
{
  var {:pointer} Tmp_790: int;
  var {:scalar} Tmp_791: int;
  var {:scalar} Tmp_792: int;
  var {:pointer} Tmp_793: int;
  var {:scalar} Tmp_794: int;
  var {:scalar} interfaceType_1: int;
  var {:pointer} Tmp_795: int;
  var {:scalar} Tmp_796: int;
  var {:dopa} {:scalar} countOfPartials_1: int;
  var {:pointer} Tmp_797: int;
  var {:dopa} {:scalar} defaultInterruptMode_1: int;
  var {:pointer} Tmp_799: int;
  var {:pointer} Tmp_800: int;
  var {:pointer} Tmp_801: int;
  var {:scalar} Tmp_802: int;
  var {:pointer} Tmp_803: int;
  var {:scalar} Tmp_804: int;
  var {:pointer} Tmp_805: int;
  var {:scalar} Tmp_806: int;
  var {:scalar} Tmp_807: int;
  var {:pointer} sdv_689: int;
  var {:pointer} Tmp_808: int;
  var {:pointer} trResourceList: int;
  var {:pointer} sdv_690: int;
  var {:pointer} sdv_691: int;
  var {:scalar} Tmp_809: int;
  var {:scalar} Tmp_810: int;
  var {:pointer} Tmp_811: int;
  var {:pointer} Tmp_812: int;
  var {:pointer} lowerDevice: int;
  var {:pointer} Tmp_813: int;
  var {:pointer} sdv_693: int;
  var {:scalar} Tmp_814: int;
  var {:scalar} Tmp_815: int;
  var {:pointer} Tmp_816: int;
  var {:pointer} Tmp_817: int;
  var {:scalar} actuallyReturned: int;
  var {:pointer} Tmp_818: int;
  var {:scalar} foundOne_1: int;
  var {:pointer} sdv_699: int;
  var {:scalar} PnPID: int;
  var {:scalar} Tmp_820: int;
  var {:dopa} {:scalar} badValue_1: int;
  var {:pointer} deviceExtension: int;
  var {:pointer} countSoFar_1: int;
  var {:pointer} Tmp_821: int;
  var {:pointer} Tmp_823: int;
  var {:scalar} i_1: int;
  var {:dopa} {:scalar} defaultInterfaceType_1: int;
  var {:scalar} Tmp_825: int;
  var {:pointer} newDevObj: int;
  var {:scalar} Tmp_826: int;
  var {:scalar} Tmp_827: int;
  var {:pointer} userSubKey: int;
  var {:scalar} Tmp_828: int;
  var {:scalar} Tmp_829: int;
  var {:scalar} Tmp_830: int;
  var {:scalar} Tmp_831: int;
  var {:pointer} Tmp_832: int;
  var {:pointer} sdv_710: int;
  var {:scalar} Tmp_833: int;
  var {:pointer} pRequiredList: int;
  var {:scalar} Tmp_834: int;
  var {:scalar} Tmp_835: int;
  var {:scalar} Tmp_836: int;
  var {:scalar} Tmp_837: int;
  var {:scalar} Tmp_838: int;
  var {:pointer} Tmp_839: int;
  var {:pointer} Tmp_840: int;
  var {:scalar} Tmp_841: int;
  var {:pointer} resourceList: int;
  var {:pointer} Tmp_843: int;
  var {:scalar} Tmp_844: int;
  var {:pointer} sdv_715: int;
  var {:pointer} Tmp_845: int;
  var {:pointer} sdv_718: int;
  var {:pointer} Tmp_847: int;
  var {:scalar} Tmp_848: int;
  var {:scalar} Tmp_849: int;
  var {:scalar} legacyKeys: int;
  var {:dopa} {:scalar} legacyDiscovered: int;
  var {:pointer} Tmp_850: int;
  var {:pointer} parameters: int;
  var {:dopa} {:scalar} defaultAddressSpace: int;
  var {:pointer} parametersKey: int;
  var {:scalar} Tmp_851: int;
  var {:scalar} Tmp_852: int;
  var {:pointer} sdv_722: int;
  var {:scalar} status_29: int;
  var {:scalar} tmpstatus: int;
  var {:scalar} Tmp_853: int;
  var {:scalar} Tmp_854: int;
  var {:scalar} Tmp_855: int;
  var {:scalar} sdv_723: int;
  var {:scalar} parametersPath: int;
  var {:dopa} {:scalar} brokenStatus: int;
  var {:pointer} newPdo: int;
  var {:pointer} sdv_724: int;
  var {:scalar} Tmp_857: int;
  var {:scalar} userData: int;
  var {:dopa} {:scalar} zero_2: int;
  var {:pointer} DriverObject_3: int;
  var {:pointer} RegistryPath_1: int;
  var {:pointer} DriverDefaultsPtr_1: int;
  var vslice_dummy_var_492: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_495: int;
  var vslice_dummy_var_496: int;
  var vslice_dummy_var_497: int;
  var vslice_dummy_var_498: int;
  var vslice_dummy_var_499: int;
  var vslice_dummy_var_500: int;
  var vslice_dummy_var_501: int;
  var vslice_dummy_var_502: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;
  var vslice_dummy_var_505: int;
  var vslice_dummy_var_506: int;
  var vslice_dummy_var_507: int;
  var vslice_dummy_var_508: int;
  var vslice_dummy_var_509: int;
  var vslice_dummy_var_510: int;
  var vslice_dummy_var_511: int;
  var vslice_dummy_var_512: int;
  var vslice_dummy_var_513: int;
  var vslice_dummy_var_514: int;
  var vslice_dummy_var_515: int;
  var vslice_dummy_var_516: int;
  var vslice_dummy_var_517: int;
  var vslice_dummy_var_518: int;
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;
  var vslice_dummy_var_1733: int;
  var vslice_dummy_var_1734: int;
  var vslice_dummy_var_1735: int;
  var vslice_dummy_var_1736: int;
  var vslice_dummy_var_1737: int;
  var vslice_dummy_var_1738: int;
  var vslice_dummy_var_1739: int;
  var vslice_dummy_var_1740: int;
  var vslice_dummy_var_1741: int;
  var vslice_dummy_var_1742: int;
  var vslice_dummy_var_1743: int;

  anon0:
    call {:si_unique_call 1877} Tmp_792 := __HAVOC_malloc(20);
    call {:si_unique_call 1878} Tmp_794 := __HAVOC_malloc(20);
    call {:si_unique_call 1879} Tmp_796 := __HAVOC_malloc(20);
    call {:si_unique_call 1880} countOfPartials_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1881} defaultInterruptMode_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1882} Tmp_802 := __HAVOC_malloc(20);
    call {:si_unique_call 1883} Tmp_806 := __HAVOC_malloc(20);
    call {:si_unique_call 1884} Tmp_807 := __HAVOC_malloc(20);
    call {:si_unique_call 1885} Tmp_810 := __HAVOC_malloc(20);
    call {:si_unique_call 1886} PnPID := __HAVOC_malloc(12);
    call {:si_unique_call 1887} Tmp_820 := __HAVOC_malloc(20);
    call {:si_unique_call 1888} badValue_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1889} defaultInterfaceType_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1890} Tmp_825 := __HAVOC_malloc(20);
    call {:si_unique_call 1891} vslice_dummy_var_492 := __HAVOC_malloc(24);
    call {:si_unique_call 1892} newDevObj := __HAVOC_malloc(4);
    call {:si_unique_call 1893} Tmp_826 := __HAVOC_malloc(20);
    call {:si_unique_call 1894} Tmp_827 := __HAVOC_malloc(20);
    call {:si_unique_call 1895} Tmp_829 := __HAVOC_malloc(20);
    call {:si_unique_call 1896} Tmp_830 := __HAVOC_malloc(20);
    call {:si_unique_call 1897} Tmp_831 := __HAVOC_malloc(20);
    call {:si_unique_call 1898} Tmp_833 := __HAVOC_malloc(20);
    call {:si_unique_call 1899} Tmp_835 := __HAVOC_malloc(20);
    call {:si_unique_call 1900} Tmp_837 := __HAVOC_malloc(20);
    call {:si_unique_call 1901} Tmp_838 := __HAVOC_malloc(20);
    call {:si_unique_call 1902} Tmp_848 := __HAVOC_malloc(20);
    call {:si_unique_call 1903} Tmp_849 := __HAVOC_malloc(20);
    call {:si_unique_call 1904} legacyKeys := __HAVOC_malloc(12);
    call {:si_unique_call 1905} legacyDiscovered := __HAVOC_malloc(4);
    call {:si_unique_call 1906} defaultAddressSpace := __HAVOC_malloc(4);
    call {:si_unique_call 1907} parametersKey := __HAVOC_malloc(4);
    call {:si_unique_call 1908} Tmp_851 := __HAVOC_malloc(20);
    call {:si_unique_call 1909} Tmp_852 := __HAVOC_malloc(20);
    call {:si_unique_call 1910} Tmp_853 := __HAVOC_malloc(20);
    call {:si_unique_call 1911} Tmp_854 := __HAVOC_malloc(20);
    call {:si_unique_call 1912} Tmp_855 := __HAVOC_malloc(20);
    call {:si_unique_call 1913} parametersPath := __HAVOC_malloc(12);
    call {:si_unique_call 1914} brokenStatus := __HAVOC_malloc(4);
    call {:si_unique_call 1915} Tmp_857 := __HAVOC_malloc(20);
    call {:si_unique_call 1916} userData := __HAVOC_malloc(136);
    call {:si_unique_call 1917} zero_2 := __HAVOC_malloc(4);
    DriverObject_3 := actual_DriverObject_3;
    RegistryPath_1 := actual_RegistryPath_1;
    DriverDefaultsPtr_1 := actual_DriverDefaultsPtr_1;
    call {:si_unique_call 1918} Tmp_790 := __HAVOC_malloc(224);
    call {:si_unique_call 1919} Tmp_793 := __HAVOC_malloc(4);
    call {:si_unique_call 1920} Tmp_795 := __HAVOC_malloc(148);
    call {:si_unique_call 1921} Tmp_797 := __HAVOC_malloc(232);
    call {:si_unique_call 1922} Tmp_799 := __HAVOC_malloc(272);
    call {:si_unique_call 1923} Tmp_800 := __HAVOC_malloc(220);
    call {:si_unique_call 1924} Tmp_801 := __HAVOC_malloc(4);
    call {:si_unique_call 1925} Tmp_803 := __HAVOC_malloc(240);
    call {:si_unique_call 1926} Tmp_805 := __HAVOC_malloc(4);
    call {:si_unique_call 1927} Tmp_811 := __HAVOC_malloc(256);
    call {:si_unique_call 1928} Tmp_813 := __HAVOC_malloc(220);
    call {:si_unique_call 1929} Tmp_816 := __HAVOC_malloc(184);
    call {:si_unique_call 1930} Tmp_817 := __HAVOC_malloc(4);
    call {:si_unique_call 1931} vslice_dummy_var_498 := __HAVOC_malloc(68);
    call {:si_unique_call 1932} Tmp_821 := __HAVOC_malloc(116);
    call {:si_unique_call 1933} Tmp_823 := __HAVOC_malloc(184);
    call {:si_unique_call 1934} Tmp_832 := __HAVOC_malloc(4);
    call {:si_unique_call 1935} Tmp_839 := __HAVOC_malloc(328);
    call {:si_unique_call 1936} vslice_dummy_var_499 := __HAVOC_malloc(8);
    call {:si_unique_call 1937} Tmp_843 := __HAVOC_malloc(116);
    call {:si_unique_call 1938} Tmp_845 := __HAVOC_malloc(4);
    call {:si_unique_call 1939} vslice_dummy_var_500 := __HAVOC_malloc(8);
    call {:si_unique_call 1940} Tmp_847 := __HAVOC_malloc(300);
    call {:si_unique_call 1941} vslice_dummy_var_501 := __HAVOC_malloc(44);
    parameters := 0;
    call {:si_unique_call 1942} sdv_710 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_710 != 0;
    assume sdv_710 > 0;
    countSoFar_1 := SerialCount__CONFIGURATION_INFORMATION(sdv_710);
    assume {:nonnull} zero_2 != 0;
    assume zero_2 > 0;
    assume {:nonnull} badValue_1 != 0;
    assume badValue_1 > 0;
    assume {:nonnull} defaultAddressSpace != 0;
    assume defaultAddressSpace > 0;
    userSubKey := 0;
    resourceList := 0;
    trResourceList := 0;
    pRequiredList := 0;
    call {:si_unique_call 1943} sdv_do_paged_code_check();
    Tmp_821 := strConst__li2bpl239;
    call {:si_unique_call 1944} vslice_dummy_var_502 := SerialDbgPrintEx(11, Tmp_821);
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PnPID)] := 0;
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(legacyKeys)] := 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(userData))] := 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(parametersPath)] := 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    assume {:nonnull} defaultInterruptMode_1 != 0;
    assume defaultInterruptMode_1 > 0;
    interfaceType_1 := 0;
    goto L64;

  L64:
    call {:si_unique_call 1945} interfaceType_1, foundOne_1, vslice_dummy_var_493 := SerialEnumerateLegacy_loop_L64(interfaceType_1, foundOne_1, vslice_dummy_var_493);
    goto L64_last;

  L64_last:
    assume {:CounterLoop 18} {:Counter "interfaceType_1"} true;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} 18 > interfaceType_1;
    foundOne_1 := 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} interfaceType_1 != 0;
    call {:si_unique_call 1946} vslice_dummy_var_493 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} foundOne_1 != 0;
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} defaultInterruptMode_1 != 0;
    assume defaultInterruptMode_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    goto L65;

  L65:
    assume {:nonnull} userData != 0;
    assume userData > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(userData))] := 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(parametersPath)] := 0;
    call {:si_unique_call 1947} sdv_693 := ExAllocatePoolWithTag(1, 616, -666022077);
    parameters := sdv_693;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} parameters != 0;
    call {:si_unique_call 1948} sdv_RtlZeroMemory(0, 616);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 1949} RtlInitUnicodeString(UserSymbolicLink__SERIAL_USER_DATA(userData), 0);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 1950} sdv_718 := ExAllocatePoolWithTag(1, 514, -666022077);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(userData))] := sdv_718;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(userData))] != 0;
    call {:si_unique_call 1951} RtlInitUnicodeString(PnPID, 0);
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    call {:si_unique_call 1952} sdv_689 := ExAllocatePoolWithTag(1, 514, -666022077);
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PnPID)] := sdv_689;
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PnPID)] != 0;
    call {:si_unique_call 1953} RtlInitUnicodeString(legacyKeys, 0);
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    call {:si_unique_call 1954} sdv_699 := ExAllocatePoolWithTag(1, 514, -666022077);
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(legacyKeys)] := sdv_699;
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(legacyKeys)] != 0;
    call {:si_unique_call 1955} sdv_691 := ExAllocatePoolWithTag(1, 68, -666022077);
    resourceList := sdv_691;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:partition} resourceList != 0;
    call {:si_unique_call 1956} sdv_690 := ExAllocatePoolWithTag(1, 68, -666022077);
    trResourceList := sdv_690;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:partition} trResourceList != 0;
    call {:si_unique_call 1957} sdv_724 := ExAllocatePoolWithTag(1, 136, -666022077);
    pRequiredList := sdv_724;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} pRequiredList != 0;
    call {:si_unique_call 1958} RtlInitUnicodeString(parametersPath, 0);
    assume {:nonnull} RegistryPath_1 != 0;
    assume RegistryPath_1 > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    havoc Tmp_815;
    call {:si_unique_call 1959} sdv_715 := ExAllocatePoolWithTag(1, Tmp_815, -666022077);
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(parametersPath)] := sdv_715;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(parametersPath)] != 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    havoc Tmp_836;
    call {:si_unique_call 1960} sdv_RtlZeroMemory(0, Tmp_836);
    call {:si_unique_call 1961} vslice_dummy_var_494 := corral_nondet();
    call {:si_unique_call 1962} vslice_dummy_var_503 := corral_nondet();
    call {:si_unique_call 1963} vslice_dummy_var_504 := corral_nondet();
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    havoc Tmp_844;
    call {:si_unique_call 1964} sdv_RtlZeroMemory(0, Tmp_844);
    call {:si_unique_call 1965} vslice_dummy_var_495 := corral_nondet();
    call {:si_unique_call 1966} sdv_722 := ExAllocatePoolWithTag(1, 536, -666022077);
    userSubKey := sdv_722;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} userSubKey != 0;
    call {:si_unique_call 1967} sdv_InitializeObjectAttributes(0, 0, 576, 0, 0);
    call {:si_unique_call 1968} tmpstatus := ZwOpenKey(parametersKey, 33554432, 0);
    assume {:nonnull} parametersKey != 0;
    assume parametersKey > 0;
    SLAM_guard_O_0 := Mem_T.PVOID[parametersKey];
    assume SLAM_guard_O_0 != 0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 1969} SLIC_ZwOpenKey_exit(0, tmpstatus);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} tmpstatus >= 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    i_1 := 0;
    goto L314;

  L314:
    call {:si_unique_call 1970} Tmp_791, Tmp_793, Tmp_795, Tmp_797, Tmp_800, Tmp_801, Tmp_804, Tmp_805, Tmp_808, Tmp_809, Tmp_811, Tmp_812, lowerDevice, Tmp_813, Tmp_814, Tmp_817, actuallyReturned, Tmp_818, deviceExtension, i_1, Tmp_828, Tmp_832, Tmp_834, Tmp_840, Tmp_841, Tmp_845, Tmp_850, status_29, sdv_723, newPdo, vslice_dummy_var_496, vslice_dummy_var_506, vslice_dummy_var_507, vslice_dummy_var_508, vslice_dummy_var_509, vslice_dummy_var_510, vslice_dummy_var_511, vslice_dummy_var_512, vslice_dummy_var_513 := SerialEnumerateLegacy_loop_L314(Tmp_791, Tmp_792, Tmp_793, Tmp_794, Tmp_795, countOfPartials_1, Tmp_797, Tmp_800, Tmp_801, Tmp_804, Tmp_805, Tmp_806, Tmp_808, trResourceList, Tmp_809, Tmp_811, Tmp_812, lowerDevice, Tmp_813, Tmp_814, Tmp_817, actuallyReturned, Tmp_818, PnPID, Tmp_820, deviceExtension, countSoFar_1, i_1, defaultInterfaceType_1, newDevObj, userSubKey, Tmp_828, Tmp_829, Tmp_832, pRequiredList, Tmp_834, Tmp_835, Tmp_840, Tmp_841, resourceList, Tmp_845, legacyKeys, legacyDiscovered, Tmp_850, parameters, parametersKey, Tmp_852, status_29, Tmp_853, Tmp_855, sdv_723, parametersPath, brokenStatus, newPdo, userData, DriverObject_3, vslice_dummy_var_496, vslice_dummy_var_506, vslice_dummy_var_507, vslice_dummy_var_508, vslice_dummy_var_509, vslice_dummy_var_510, vslice_dummy_var_511, vslice_dummy_var_512, vslice_dummy_var_513);
    goto L314_last;

  L314_last:
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    call {:si_unique_call 2036} Tmp_812 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_812 != 0;
    assume Tmp_812 > 0;
    assume {:nonnull} parametersKey != 0;
    assume parametersKey > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume Mem_T.PVOID[parametersKey] == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 1971} SLIC_ZwEnumerateKey_entry(strConst__li2bpl254);
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} yogi_error != 1;
    goto L643;

  L643:
    call {:si_unique_call 1972} status_29 := ZwEnumerateKey(0, i_1, 0, 0, 534, Tmp_812);
    assume {:nonnull} Tmp_812 != 0;
    assume Tmp_812 > 0;
    havoc actuallyReturned;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} status_29 != 26;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} status_29 == 5;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    assume {:nonnull} Tmp_855 != 0;
    assume Tmp_855 > 0;
    assume {:nonnull} Tmp_855 != 0;
    assume Tmp_855 > 0;
    assume {:nonnull} Tmp_855 != 0;
    assume Tmp_855 > 0;
    assume {:nonnull} Tmp_855 != 0;
    assume Tmp_855 > 0;
    assume {:nonnull} Tmp_855 != 0;
    assume Tmp_855 > 0;
    call {:si_unique_call 1973} SerialLogError(DriverObject_3, 0, Tmp_855, Tmp_794, 0, 0, 0, 84, 0, -1073348589, 0, 0, 0, 0);
    Tmp_800 := strConst__li2bpl241;
    call {:si_unique_call 1974} vslice_dummy_var_506 := SerialDbgPrintEx(14, Tmp_800);
    i_1 := i_1 + 1;
    goto anon101_Else_dummy;

  anon101_Else_dummy:
    assume false;
    return;

  anon101_Then:
    assume {:partition} status_29 != 5;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} status_29 >= 0;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_801;
    call {:si_unique_call 1975} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_805;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    call {:si_unique_call 1976} sdv_RtlZeroMemory(0, 8);
    call {:si_unique_call 1977} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc Tmp_828;
    call {:si_unique_call 1978} sdv_RtlZeroMemory(0, Tmp_828);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 1979} status_29 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} status_29 >= 0;
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    i_1 := i_1 + 1;
    goto anon104_Else_dummy;

  anon104_Else_dummy:
    assume false;
    return;

  anon104_Then:
    assume {:nonnull} legacyDiscovered != 0;
    assume legacyDiscovered > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    i_1 := i_1 + 1;
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    assume false;
    return;

  anon105_Then:
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 1980} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} brokenStatus != 0;
    assume brokenStatus > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} brokenStatus != 0;
    assume brokenStatus > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    goto L369;

  L369:
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    havoc vslice_dummy_var_1733;
    call {:si_unique_call 1981} sdv_723 := SerialIsUserDataValid(DriverObject_3, userSubKey, parameters, vslice_dummy_var_1733, userData);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} sdv_723 != 0;
    call {:si_unique_call 1982} status_29 := SerialBuildResourceList(resourceList, countOfPartials_1, userData);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} status_29 >= 0;
    assume {:nonnull} countOfPartials_1 != 0;
    assume countOfPartials_1 > 0;
    havoc vslice_dummy_var_1734;
    call {:si_unique_call 1983} status_29 := SerialTranslateResourceList(DriverObject_3, userSubKey, trResourceList, resourceList, vslice_dummy_var_1734, userData);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} status_29 >= 0;
    assume {:nonnull} countOfPartials_1 != 0;
    assume countOfPartials_1 > 0;
    havoc vslice_dummy_var_1735;
    call {:si_unique_call 1984} status_29 := SerialBuildRequirementsList(pRequiredList, vslice_dummy_var_1735, userData);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} status_29 >= 0;
    newPdo := 0;
    call {:si_unique_call 1985} status_29 := IoReportDetectedDevice(0, -1, -1, -1, 0, 0, 0, 0);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} status_29 >= 0;
    assume {:nonnull} countOfPartials_1 != 0;
    assume countOfPartials_1 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    Tmp_809 := 1;
    goto L403;

  L403:
    Tmp_834 := Tmp_809;
    call {:si_unique_call 1986} status_29 := SerialMigrateLegacyRegistry(newPdo, userData, Tmp_834);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} status_29 >= 0;
    call {:si_unique_call 1987} status_29 := SerialCreateDevObj(DriverObject_3, newDevObj);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} status_29 >= 0;
    call {:si_unique_call 1988} lowerDevice := IoAttachDeviceToDeviceStack(0, newPdo);
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    havoc deviceExtension;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    call {:si_unique_call 1989} MmLockPagableSectionByHandle(0);
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    havoc vslice_dummy_var_1736;
    call {:si_unique_call 1990} status_29 := SerialFinishStartDevice(vslice_dummy_var_1736, resourceList, trResourceList, userData);
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1991} MmUnlockPagableImageSection(0);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} status_29 >= 0;
    call {:si_unique_call 1992} vslice_dummy_var_507 := corral_nondet();
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_832;
    call {:si_unique_call 1993} vslice_dummy_var_508 := corral_nondet();
    call {:si_unique_call 1994} status_29 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    havoc Tmp_841;
    call {:si_unique_call 1995} sdv_RtlZeroMemory(0, Tmp_841);
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    call {:si_unique_call 1996} vslice_dummy_var_509 := corral_nondet();
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} status_29 >= 0;
    goto L460;

  L460:
    i_1 := i_1 + 1;
    assume {:nonnull} countSoFar_1 != 0;
    assume countSoFar_1 > 0;
    goto L460_dummy;

  L460_dummy:
    assume false;
    return;

  anon117_Then:
    assume {:partition} 0 > status_29;
    assume {:nonnull} Tmp_852 != 0;
    assume Tmp_852 > 0;
    assume {:nonnull} Tmp_852 != 0;
    assume Tmp_852 > 0;
    assume {:nonnull} Tmp_852 != 0;
    assume Tmp_852 > 0;
    assume {:nonnull} Tmp_852 != 0;
    assume Tmp_852 > 0;
    assume {:nonnull} Tmp_852 != 0;
    assume Tmp_852 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_1737;
    call {:si_unique_call 1997} SerialLogError(DriverObject_3, 0, vslice_dummy_var_1737, Tmp_852, 0, 0, 0, 88, 0, -1073348567, 0, 0, 0, 0);
    Tmp_797 := strConst__li2bpl243;
    call {:si_unique_call 1998} vslice_dummy_var_510 := SerialDbgPrintEx(14, Tmp_797);
    goto L460;

  anon116_Then:
    assume {:partition} 0 > status_29;
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    havoc vslice_dummy_var_1738;
    call {:si_unique_call 1999} vslice_dummy_var_496 := SerialRemoveDevObj(vslice_dummy_var_1738);
    i_1 := i_1 + 1;
    goto anon116_Then_dummy;

  anon116_Then_dummy:
    assume false;
    return;

  anon141_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon115_Then:
    assume {:partition} 0 > status_29;
    i_1 := i_1 + 1;
    goto anon115_Then_dummy;

  anon115_Then_dummy:
    assume false;
    return;

  anon114_Then:
    assume {:partition} 0 > status_29;
    i_1 := i_1 + 1;
    goto anon114_Then_dummy;

  anon114_Then_dummy:
    assume false;
    return;

  anon113_Then:
    Tmp_809 := 0;
    goto L403;

  anon111_Then:
    assume {:partition} 0 > status_29;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} status_29 == -1073741670;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_793;
    Tmp_850 := Tmp_793;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_804;
    assume {:nonnull} Tmp_792 != 0;
    assume Tmp_792 > 0;
    assume {:nonnull} Tmp_792 != 0;
    assume Tmp_792 > 0;
    assume {:nonnull} Tmp_792 != 0;
    assume Tmp_792 > 0;
    assume {:nonnull} Tmp_792 != 0;
    assume Tmp_792 > 0;
    assume {:nonnull} Tmp_792 != 0;
    assume Tmp_792 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_1739;
    call {:si_unique_call 2000} SerialLogError(DriverObject_3, 0, vslice_dummy_var_1739, Tmp_792, 0, 0, 0, 89, status_29, -1073348564, Tmp_804, Tmp_850, 0, 0);
    goto L479;

  L479:
    Tmp_795 := strConst__li2bpl244;
    call {:si_unique_call 2001} vslice_dummy_var_511 := SerialDbgPrintEx(14, Tmp_795);
    i_1 := i_1 + 1;
    goto L479_dummy;

  L479_dummy:
    assume false;
    return;

  anon112_Then:
    assume {:partition} status_29 != -1073741670;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_845;
    Tmp_818 := Tmp_845;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_791;
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_1740;
    call {:si_unique_call 2002} SerialLogError(DriverObject_3, 0, vslice_dummy_var_1740, Tmp_820, 0, 0, 0, 87, status_29, -1073348568, Tmp_791, Tmp_818, 0, 0);
    goto L479;

  anon110_Then:
    assume {:partition} 0 > status_29;
    i_1 := i_1 + 1;
    goto anon110_Then_dummy;

  anon110_Then_dummy:
    assume false;
    return;

  anon109_Then:
    assume {:partition} 0 > status_29;
    i_1 := i_1 + 1;
    goto anon109_Then_dummy;

  anon109_Then_dummy:
    assume false;
    return;

  anon108_Then:
    assume {:partition} 0 > status_29;
    i_1 := i_1 + 1;
    goto anon108_Then_dummy;

  anon108_Then_dummy:
    assume false;
    return;

  anon107_Then:
    assume {:partition} sdv_723 == 0;
    i_1 := i_1 + 1;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    assume false;
    return;

  anon106_Then:
    goto L369;

  anon103_Then:
    assume {:partition} 0 > status_29;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_817;
    Tmp_808 := Tmp_817;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_814;
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    call {:si_unique_call 2003} SerialLogError(DriverObject_3, 0, Tmp_829, Tmp_806, 0, 0, 0, 86, 0, -1073348583, Tmp_814, Tmp_808, 0, 0);
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    havoc Tmp_840;
    Tmp_813 := strConst__li2bpl264;
    call {:si_unique_call 2004} vslice_dummy_var_512 := SerialDbgPrintEx(14, Tmp_813);
    i_1 := i_1 + 1;
    goto anon103_Then_dummy;

  anon103_Then_dummy:
    assume false;
    return;

  anon102_Then:
    assume {:partition} 0 > status_29;
    assume {:nonnull} Tmp_853 != 0;
    assume Tmp_853 > 0;
    assume {:nonnull} Tmp_853 != 0;
    assume Tmp_853 > 0;
    assume {:nonnull} Tmp_853 != 0;
    assume Tmp_853 > 0;
    assume {:nonnull} Tmp_853 != 0;
    assume Tmp_853 > 0;
    assume {:nonnull} Tmp_853 != 0;
    assume Tmp_853 > 0;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    call {:si_unique_call 2005} SerialLogError(DriverObject_3, 0, Tmp_835, Tmp_853, 0, 0, 0, 85, 0, -1073348589, 0, 0, 0, 0);
    Tmp_811 := strConst__li2bpl245;
    call {:si_unique_call 2006} vslice_dummy_var_513 := SerialDbgPrintEx(14, Tmp_811);
    i_1 := i_1 + 1;
    goto anon102_Then_dummy;

  anon102_Then_dummy:
    assume false;
    return;

  anon100_Then:
    assume {:partition} status_29 == 26;
    assume {:nonnull} parametersKey != 0;
    assume parametersKey > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume Mem_T.PVOID[parametersKey] == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2007} SLIC_ZwClose_entry(strConst__li2bpl254);
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} yogi_error != 1;
    goto L646;

  L646:
    call {:si_unique_call 2008} vslice_dummy_var_497 := ZwClose(0);
    goto L514;

  L514:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} userSubKey != 0;
    call {:si_unique_call 2009} sdv_ExFreePool(0);
    goto L515;

  L515:
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PnPID)] != 0;
    call {:si_unique_call 2010} sdv_ExFreePool(0);
    goto L519;

  L519:
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(legacyKeys)] != 0;
    call {:si_unique_call 2011} sdv_ExFreePool(0);
    goto L523;

  L523:
    assume {:nonnull} userData != 0;
    assume userData > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(userData))] != 0;
    call {:si_unique_call 2012} sdv_ExFreePool(0);
    goto L527;

  L527:
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(parametersPath)] != 0;
    call {:si_unique_call 2013} sdv_ExFreePool(0);
    goto L531;

  L531:
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} parameters != 0;
    call {:si_unique_call 2014} sdv_ExFreePool(0);
    goto L535;

  L535:
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} resourceList != 0;
    call {:si_unique_call 2015} sdv_ExFreePool(0);
    goto L539;

  L539:
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} trResourceList != 0;
    call {:si_unique_call 2016} sdv_ExFreePool(0);
    goto L543;

  L543:
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} pRequiredList != 0;
    call {:si_unique_call 2017} sdv_ExFreePool(0);
    goto L547;

  L547:
    Tmp_843 := strConst__li2bpl246;
    call {:si_unique_call 2018} vslice_dummy_var_505 := SerialDbgPrintEx(11, Tmp_843);
    Tmp_789 := 0;
    goto LM2;

  anon126_Then:
    assume {:partition} pRequiredList == 0;
    goto L547;

  anon125_Then:
    assume {:partition} trResourceList == 0;
    goto L543;

  anon124_Then:
    assume {:partition} resourceList == 0;
    goto L539;

  anon123_Then:
    assume {:partition} parameters == 0;
    goto L535;

  anon122_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(parametersPath)] == 0;
    goto L531;

  anon121_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(userData))] == 0;
    goto L527;

  anon120_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(legacyKeys)] == 0;
    goto L523;

  anon119_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PnPID)] == 0;
    goto L519;

  anon118_Then:
    assume {:partition} userSubKey == 0;
    goto L515;

  anon140_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon99_Then:
    assume !(Mem_T.PVOID[parametersKey] == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L646;

  anon139_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon138_Then:
    assume !(Mem_T.PVOID[parametersKey] == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L643;

  anon97_Then:
    assume {:partition} 0 > tmpstatus;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} tmpstatus != -1073741772;
    assume {:nonnull} Tmp_837 != 0;
    assume Tmp_837 > 0;
    assume {:nonnull} Tmp_837 != 0;
    assume Tmp_837 > 0;
    assume {:nonnull} Tmp_837 != 0;
    assume Tmp_837 > 0;
    assume {:nonnull} Tmp_837 != 0;
    assume Tmp_837 > 0;
    assume {:nonnull} Tmp_837 != 0;
    assume Tmp_837 > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    call {:si_unique_call 2019} SerialLogError(DriverObject_3, 0, Tmp_830, Tmp_837, 0, 0, 0, 83, 0, -1073348590, 0, 0, 0, 0);
    goto L554;

  L554:
    Tmp_823 := strConst__li2bpl247;
    call {:si_unique_call 2020} vslice_dummy_var_514 := SerialDbgPrintEx(14, Tmp_823);
    goto L514;

  anon98_Then:
    assume {:partition} tmpstatus == -1073741772;
    goto L554;

  anon137_Then:
    assume {:partition} userSubKey == 0;
    assume {:nonnull} Tmp_831 != 0;
    assume Tmp_831 > 0;
    assume {:nonnull} Tmp_831 != 0;
    assume Tmp_831 > 0;
    assume {:nonnull} Tmp_831 != 0;
    assume Tmp_831 > 0;
    assume {:nonnull} Tmp_831 != 0;
    assume Tmp_831 > 0;
    assume {:nonnull} Tmp_831 != 0;
    assume Tmp_831 > 0;
    assume {:nonnull} Tmp_854 != 0;
    assume Tmp_854 > 0;
    assume {:nonnull} Tmp_854 != 0;
    assume Tmp_854 > 0;
    assume {:nonnull} Tmp_854 != 0;
    assume Tmp_854 > 0;
    assume {:nonnull} Tmp_854 != 0;
    assume Tmp_854 > 0;
    assume {:nonnull} Tmp_854 != 0;
    assume Tmp_854 > 0;
    call {:si_unique_call 2021} SerialLogError(DriverObject_3, 0, Tmp_854, Tmp_831, 0, 0, 0, 82, 0, -1073348600, 0, 0, 0, 0);
    Tmp_839 := strConst__li2bpl248;
    call {:si_unique_call 2022} vslice_dummy_var_515 := SerialDbgPrintEx(14, Tmp_839);
    goto L514;

  anon136_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(parametersPath)] == 0;
    assume {:nonnull} Tmp_826 != 0;
    assume Tmp_826 > 0;
    assume {:nonnull} Tmp_826 != 0;
    assume Tmp_826 > 0;
    assume {:nonnull} Tmp_826 != 0;
    assume Tmp_826 > 0;
    assume {:nonnull} Tmp_826 != 0;
    assume Tmp_826 > 0;
    assume {:nonnull} Tmp_826 != 0;
    assume Tmp_826 > 0;
    assume {:nonnull} Tmp_848 != 0;
    assume Tmp_848 > 0;
    assume {:nonnull} Tmp_848 != 0;
    assume Tmp_848 > 0;
    assume {:nonnull} Tmp_848 != 0;
    assume Tmp_848 > 0;
    assume {:nonnull} Tmp_848 != 0;
    assume Tmp_848 > 0;
    assume {:nonnull} Tmp_848 != 0;
    assume Tmp_848 > 0;
    call {:si_unique_call 2023} SerialLogError(DriverObject_3, 0, Tmp_848, Tmp_826, 0, 0, 0, 81, 0, -1073348600, 0, 0, 0, 0);
    Tmp_790 := strConst__li2bpl249;
    call {:si_unique_call 2024} vslice_dummy_var_516 := SerialDbgPrintEx(14, Tmp_790);
    goto L514;

  anon135_Then:
    assume {:partition} pRequiredList == 0;
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_1741;
    call {:si_unique_call 2025} SerialLogError(DriverObject_3, 0, vslice_dummy_var_1741, Tmp_810, 0, 0, 0, 80, 0, -1073348600, 0, 0, 0, 0);
    goto L514;

  anon134_Then:
    assume {:partition} trResourceList == 0;
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_1742;
    call {:si_unique_call 2026} SerialLogError(DriverObject_3, 0, vslice_dummy_var_1742, Tmp_849, 0, 0, 0, 79, 0, -1073348600, 0, 0, 0, 0);
    goto L514;

  anon133_Then:
    assume {:partition} resourceList == 0;
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_1743;
    call {:si_unique_call 2027} SerialLogError(DriverObject_3, 0, vslice_dummy_var_1743, Tmp_833, 0, 0, 0, 78, 0, -1073348600, 0, 0, 0, 0);
    goto L514;

  anon132_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(legacyKeys)] == 0;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    call {:si_unique_call 2028} SerialLogError(DriverObject_3, 0, Tmp_802, Tmp_857, 0, 0, 0, 77, 0, -1073348600, 0, 0, 0, 0);
    Tmp_816 := strConst__li2bpl250;
    call {:si_unique_call 2029} vslice_dummy_var_517 := SerialDbgPrintEx(14, Tmp_816);
    goto L514;

  anon131_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(PnPID)] == 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    call {:si_unique_call 2030} SerialLogError(DriverObject_3, 0, Tmp_807, Tmp_838, 0, 0, 0, 76, 0, -1073348600, 0, 0, 0, 0);
    Tmp_799 := strConst__li2bpl251;
    call {:si_unique_call 2031} vslice_dummy_var_518 := SerialDbgPrintEx(14, Tmp_799);
    goto L514;

  anon130_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(userData))] == 0;
    assume {:nonnull} Tmp_851 != 0;
    assume Tmp_851 > 0;
    assume {:nonnull} Tmp_851 != 0;
    assume Tmp_851 > 0;
    assume {:nonnull} Tmp_851 != 0;
    assume Tmp_851 > 0;
    assume {:nonnull} Tmp_851 != 0;
    assume Tmp_851 > 0;
    assume {:nonnull} Tmp_851 != 0;
    assume Tmp_851 > 0;
    assume {:nonnull} Tmp_825 != 0;
    assume Tmp_825 > 0;
    assume {:nonnull} Tmp_825 != 0;
    assume Tmp_825 > 0;
    assume {:nonnull} Tmp_825 != 0;
    assume Tmp_825 > 0;
    assume {:nonnull} Tmp_825 != 0;
    assume Tmp_825 > 0;
    assume {:nonnull} Tmp_825 != 0;
    assume Tmp_825 > 0;
    call {:si_unique_call 2032} SerialLogError(DriverObject_3, 0, Tmp_825, Tmp_851, 0, 0, 0, 75, 0, -1073348600, 0, 0, 0, 0);
    Tmp_847 := strConst__li2bpl252;
    call {:si_unique_call 2033} vslice_dummy_var_519 := SerialDbgPrintEx(14, Tmp_847);
    goto L514;

  anon129_Then:
    assume {:partition} parameters == 0;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    call {:si_unique_call 2034} SerialLogError(DriverObject_3, 0, Tmp_827, Tmp_796, 0, 0, 0, 74, 0, -1073348600, 0, 0, 0, 0);
    Tmp_803 := strConst__li2bpl253;
    call {:si_unique_call 2035} vslice_dummy_var_520 := SerialDbgPrintEx(14, Tmp_803);
    goto L514;

  anon128_Then:
    goto L65;

  anon96_Then:
    assume {:partition} foundOne_1 == 0;
    goto L71;

  L71:
    interfaceType_1 := interfaceType_1 + 1;
    goto L71_dummy;

  L71_dummy:
    assume false;
    return;

  anon127_Then:
    assume {:partition} interfaceType_1 == 0;
    goto L71;

  anon95_Then:
    assume {:partition} interfaceType_1 >= 18;
    goto L65;
}



procedure {:origName "SerialTranslateResourceList"} SerialTranslateResourceList(actual_DriverObject_4: int, actual_UserSubKey: int, actual_PTrResourceList: int, actual_PResourceList_1: int, actual_PartialCount: int, actual_PUserData_4: int) returns (Tmp_858: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_858 == 0 || Tmp_858 == -1073741709;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialTranslateResourceList"} SerialTranslateResourceList(actual_DriverObject_4: int, actual_UserSubKey: int, actual_PTrResourceList: int, actual_PResourceList_1: int, actual_PartialCount: int, actual_PUserData_4: int) returns (Tmp_858: int)
{
  var {:pointer} Tmp_859: int;
  var {:pointer} Tmp_860: int;
  var {:scalar} outAddrSpace: int;
  var {:pointer} Tmp_861: int;
  var {:pointer} Tmp_862: int;
  var {:scalar} Tmp_863: int;
  var {:pointer} Tmp_864: int;
  var {:scalar} Tmp_865: int;
  var {:pointer} Tmp_866: int;
  var {:scalar} outPhysAddr: int;
  var {:pointer} Tmp_867: int;
  var {:scalar} Tmp_868: int;
  var {:scalar} Tmp_869: int;
  var {:pointer} Tmp_870: int;
  var {:pointer} Tmp_871: int;
  var {:scalar} Tmp_872: int;
  var {:scalar} Tmp_873: int;
  var {:pointer} Tmp_874: int;
  var {:pointer} Tmp_875: int;
  var {:pointer} Tmp_876: int;
  var {:pointer} Tmp_877: int;
  var {:pointer} Tmp_878: int;
  var {:pointer} Tmp_879: int;
  var {:pointer} Tmp_880: int;
  var {:pointer} Tmp_881: int;
  var {:pointer} Tmp_882: int;
  var {:pointer} Tmp_883: int;
  var {:scalar} Tmp_884: int;
  var {:scalar} Tmp_885: int;
  var {:pointer} Tmp_886: int;
  var {:scalar} outIrql: int;
  var {:scalar} sdv_728: int;
  var {:pointer} Tmp_887: int;
  var {:pointer} Tmp_888: int;
  var {:pointer} Tmp_889: int;
  var {:pointer} Tmp_890: int;
  var {:scalar} outAffinity: int;
  var {:pointer} Tmp_891: int;
  var {:scalar} sdv_729: int;
  var {:scalar} Tmp_892: int;
  var {:pointer} Tmp_893: int;
  var {:scalar} sdv_730: int;
  var {:scalar} Tmp_894: int;
  var {:pointer} Tmp_895: int;
  var {:pointer} Tmp_896: int;
  var {:pointer} Tmp_897: int;
  var {:scalar} Tmp_898: int;
  var {:scalar} Tmp_899: int;
  var {:pointer} Tmp_900: int;
  var {:pointer} Tmp_901: int;
  var {:pointer} Tmp_902: int;
  var {:scalar} Tmp_903: int;
  var {:scalar} Tmp_904: int;
  var {:pointer} Tmp_905: int;
  var {:pointer} Tmp_906: int;
  var {:scalar} status_30: int;
  var {:pointer} Tmp_907: int;
  var {:pointer} Tmp_908: int;
  var {:scalar} Tmp_909: int;
  var {:pointer} Tmp_910: int;
  var {:pointer} Tmp_911: int;
  var {:pointer} Tmp_912: int;
  var {:pointer} Tmp_913: int;
  var {:scalar} Tmp_914: int;
  var {:pointer} Tmp_916: int;
  var {:pointer} DriverObject_4: int;
  var {:pointer} UserSubKey: int;
  var {:pointer} PTrResourceList: int;
  var {:scalar} PartialCount: int;
  var {:pointer} PUserData_4: int;
  var vslice_dummy_var_521: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;
  var vslice_dummy_var_524: int;
  var vslice_dummy_var_525: int;
  var vslice_dummy_var_1744: int;
  var vslice_dummy_var_1745: int;
  var vslice_dummy_var_1746: int;
  var vslice_dummy_var_1747: int;
  var vslice_dummy_var_1748: int;
  var vslice_dummy_var_1749: int;

  anon0:
    call {:si_unique_call 2037} Tmp_865 := __HAVOC_malloc(20);
    call {:si_unique_call 2038} outPhysAddr := __HAVOC_malloc(20);
    call {:si_unique_call 2039} Tmp_868 := __HAVOC_malloc(20);
    call {:si_unique_call 2040} Tmp_872 := __HAVOC_malloc(20);
    call {:si_unique_call 2041} Tmp_894 := __HAVOC_malloc(20);
    call {:si_unique_call 2042} Tmp_904 := __HAVOC_malloc(20);
    call {:si_unique_call 2043} Tmp_909 := __HAVOC_malloc(20);
    call {:si_unique_call 2044} Tmp_914 := __HAVOC_malloc(20);
    DriverObject_4 := actual_DriverObject_4;
    UserSubKey := actual_UserSubKey;
    PTrResourceList := actual_PTrResourceList;
    PartialCount := actual_PartialCount;
    PUserData_4 := actual_PUserData_4;
    call {:si_unique_call 2045} Tmp_859 := __HAVOC_malloc(312);
    call {:si_unique_call 2046} Tmp_860 := __HAVOC_malloc(292);
    call {:si_unique_call 2047} Tmp_861 := __HAVOC_malloc(312);
    call {:si_unique_call 2048} Tmp_864 := __HAVOC_malloc(576);
    call {:si_unique_call 2049} Tmp_866 := __HAVOC_malloc(312);
    call {:si_unique_call 2050} Tmp_867 := __HAVOC_malloc(4);
    call {:si_unique_call 2051} Tmp_871 := __HAVOC_malloc(312);
    call {:si_unique_call 2052} Tmp_874 := __HAVOC_malloc(312);
    call {:si_unique_call 2053} Tmp_875 := __HAVOC_malloc(292);
    call {:si_unique_call 2054} Tmp_876 := __HAVOC_malloc(292);
    call {:si_unique_call 2055} Tmp_877 := __HAVOC_malloc(312);
    call {:si_unique_call 2056} Tmp_878 := __HAVOC_malloc(312);
    call {:si_unique_call 2057} Tmp_879 := __HAVOC_malloc(140);
    call {:si_unique_call 2058} Tmp_880 := __HAVOC_malloc(312);
    call {:si_unique_call 2059} Tmp_881 := __HAVOC_malloc(292);
    call {:si_unique_call 2060} Tmp_882 := __HAVOC_malloc(292);
    call {:si_unique_call 2061} Tmp_883 := __HAVOC_malloc(292);
    call {:si_unique_call 2062} Tmp_886 := __HAVOC_malloc(312);
    call {:si_unique_call 2063} Tmp_887 := __HAVOC_malloc(140);
    call {:si_unique_call 2064} Tmp_888 := __HAVOC_malloc(292);
    call {:si_unique_call 2065} Tmp_889 := __HAVOC_malloc(312);
    call {:si_unique_call 2066} Tmp_890 := __HAVOC_malloc(292);
    call {:si_unique_call 2067} Tmp_891 := __HAVOC_malloc(64);
    call {:si_unique_call 2068} Tmp_893 := __HAVOC_malloc(312);
    call {:si_unique_call 2069} Tmp_896 := __HAVOC_malloc(292);
    call {:si_unique_call 2070} Tmp_897 := __HAVOC_malloc(4);
    call {:si_unique_call 2071} Tmp_900 := __HAVOC_malloc(312);
    call {:si_unique_call 2072} Tmp_901 := __HAVOC_malloc(292);
    call {:si_unique_call 2073} Tmp_902 := __HAVOC_malloc(292);
    call {:si_unique_call 2074} Tmp_905 := __HAVOC_malloc(292);
    call {:si_unique_call 2075} Tmp_906 := __HAVOC_malloc(292);
    call {:si_unique_call 2076} Tmp_907 := __HAVOC_malloc(292);
    call {:si_unique_call 2077} Tmp_908 := __HAVOC_malloc(312);
    call {:si_unique_call 2078} Tmp_910 := __HAVOC_malloc(312);
    call {:si_unique_call 2079} Tmp_911 := __HAVOC_malloc(312);
    call {:si_unique_call 2080} Tmp_912 := __HAVOC_malloc(576);
    call {:si_unique_call 2081} Tmp_913 := __HAVOC_malloc(292);
    call {:si_unique_call 2082} Tmp_916 := __HAVOC_malloc(4);
    outAffinity := -1;
    status_30 := 0;
    call {:si_unique_call 2083} sdv_do_paged_code_check();
    Tmp_887 := strConst__li2bpl265;
    call {:si_unique_call 2084} vslice_dummy_var_521 := SerialDbgPrintEx(11, Tmp_887);
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc Tmp_863;
    goto L19;

  L19:
    outIrql := Tmp_863;
    call {:si_unique_call 2085} sdv_RtlCopyMemory(0, 0, 68);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_877;
    assume {:nonnull} Tmp_877 != 0;
    assume Tmp_877 > 0;
    havoc Tmp_896;
    assume {:nonnull} Tmp_896 != 0;
    assume Tmp_896 > 0;
    havoc outAddrSpace;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_880;
    assume {:nonnull} Tmp_880 != 0;
    assume Tmp_880 > 0;
    havoc Tmp_876;
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_909 != 0;
    assume Tmp_909 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_909 != 0;
    assume Tmp_909 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_909 != 0;
    assume Tmp_909 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_909 != 0;
    assume Tmp_909 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_909 != 0;
    assume Tmp_909 > 0;
    call {:si_unique_call 2086} sdv_728 := corral_nondet();
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_728 != 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_908;
    assume {:nonnull} Tmp_908 != 0;
    assume Tmp_908 > 0;
    havoc Tmp_902;
    assume {:nonnull} Tmp_902 != 0;
    assume Tmp_902 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_866;
    assume {:nonnull} Tmp_866 != 0;
    assume Tmp_866 > 0;
    havoc Tmp_882;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc Tmp_898;
    goto L36;

  L36:
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc vslice_dummy_var_1744;
    havoc vslice_dummy_var_1745;
    havoc vslice_dummy_var_1746;
    call {:si_unique_call 2087} sdv_729 := HalGetInterruptVector(vslice_dummy_var_1744, vslice_dummy_var_1745, Tmp_898, vslice_dummy_var_1746, 0, 0);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_874;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    havoc Tmp_881;
    assume {:nonnull} Tmp_881 != 0;
    assume Tmp_881 > 0;
    assume {:nonnull} Tmp_881 != 0;
    assume Tmp_881 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_910;
    assume {:nonnull} Tmp_910 != 0;
    assume Tmp_910 > 0;
    havoc Tmp_860;
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_861;
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    havoc Tmp_913;
    assume {:nonnull} Tmp_913 != 0;
    assume Tmp_913 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_878;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    havoc Tmp_875;
    assume {:nonnull} Tmp_875 != 0;
    assume Tmp_875 > 0;
    havoc outAddrSpace;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_886;
    assume {:nonnull} Tmp_886 != 0;
    assume Tmp_886 > 0;
    havoc Tmp_888;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} PartialCount == 3;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    call {:si_unique_call 2088} sdv_730 := corral_nondet();
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_730 != 0;
    Tmp_891 := strConst__li2bpl266;
    call {:si_unique_call 2089} vslice_dummy_var_522 := SerialDbgPrintEx(4, Tmp_891);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_893;
    assume {:nonnull} Tmp_893 != 0;
    assume Tmp_893 > 0;
    havoc Tmp_890;
    assume {:nonnull} Tmp_890 != 0;
    assume Tmp_890 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_859;
    assume {:nonnull} Tmp_859 != 0;
    assume Tmp_859 > 0;
    havoc Tmp_905;
    assume {:nonnull} Tmp_905 != 0;
    assume Tmp_905 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_905 != 0;
    assume Tmp_905 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_905 != 0;
    assume Tmp_905 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_905 != 0;
    assume Tmp_905 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_905 != 0;
    assume Tmp_905 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    goto L46;

  L46:
    Tmp_879 := strConst__li2bpl265;
    call {:si_unique_call 2090} vslice_dummy_var_523 := SerialDbgPrintEx(11, Tmp_879);
    Tmp_858 := status_30;
    return;

  anon15_Then:
    assume {:partition} sdv_730 == 0;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_867;
    Tmp_870 := Tmp_867;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_869;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc vslice_dummy_var_1747;
    call {:si_unique_call 2091} SerialLogError(DriverObject_4, 0, vslice_dummy_var_1747, Tmp_872, 0, 0, 0, 62, 0, -1073348569, Tmp_869, Tmp_870, 0, 0);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_900;
    assume {:nonnull} Tmp_900 != 0;
    assume Tmp_900 > 0;
    havoc Tmp_901;
    assume {:nonnull} Tmp_901 != 0;
    assume Tmp_901 > 0;
    havoc Tmp_885;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_911;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    havoc Tmp_907;
    assume {:nonnull} Tmp_907 != 0;
    assume Tmp_907 > 0;
    havoc Tmp_873;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    Tmp_912 := strConst__li2bpl267;
    call {:si_unique_call 2092} vslice_dummy_var_524 := SerialDbgPrintEx(14, Tmp_912);
    status_30 := -1073741709;
    goto L46;

  anon18_Then:
    assume {:partition} PartialCount != 3;
    goto L46;

  anon17_Then:
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_897;
    Tmp_895 := Tmp_897;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_903;
    assume {:nonnull} Tmp_904 != 0;
    assume Tmp_904 > 0;
    assume {:nonnull} Tmp_904 != 0;
    assume Tmp_904 > 0;
    assume {:nonnull} Tmp_904 != 0;
    assume Tmp_904 > 0;
    assume {:nonnull} Tmp_904 != 0;
    assume Tmp_904 > 0;
    assume {:nonnull} Tmp_904 != 0;
    assume Tmp_904 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc vslice_dummy_var_1748;
    call {:si_unique_call 2093} SerialLogError(DriverObject_4, 0, vslice_dummy_var_1748, Tmp_904, 0, 0, 0, 61, 0, -1073348570, Tmp_903, Tmp_895, 0, 0);
    status_30 := -1073741709;
    goto L46;

  anon16_Then:
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc Tmp_898;
    goto L36;

  anon14_Then:
    assume {:partition} sdv_728 == 0;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_916;
    Tmp_862 := Tmp_916;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_899;
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc vslice_dummy_var_1749;
    call {:si_unique_call 2094} SerialLogError(DriverObject_4, 0, vslice_dummy_var_1749, Tmp_868, 0, 0, 0, 60, 0, -1073348571, Tmp_899, Tmp_862, 0, 0);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_871;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    havoc Tmp_906;
    assume {:nonnull} Tmp_906 != 0;
    assume Tmp_906 > 0;
    havoc Tmp_884;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_889;
    assume {:nonnull} Tmp_889 != 0;
    assume Tmp_889 > 0;
    havoc Tmp_883;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    havoc Tmp_892;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    Tmp_864 := strConst__li2bpl268;
    call {:si_unique_call 2095} vslice_dummy_var_525 := SerialDbgPrintEx(14, Tmp_864);
    status_30 := -1073741709;
    goto L46;

  anon13_Then:
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc Tmp_863;
    goto L19;
}



procedure {:origName "SerialBuildRequirementsList"} SerialBuildRequirementsList(actual_PRequiredList: int, actual_PartialCount_1: int, actual_PUserData_5: int) returns (Tmp_917: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_917 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialBuildRequirementsList"} SerialBuildRequirementsList(actual_PRequiredList: int, actual_PartialCount_1: int, actual_PUserData_5: int) returns (Tmp_917: int)
{
  var {:pointer} reqResList: int;
  var {:pointer} Tmp_918: int;
  var {:pointer} Tmp_919: int;
  var {:pointer} Tmp_920: int;
  var {:scalar} status_31: int;
  var {:pointer} Tmp_921: int;
  var {:pointer} reqResDesc: int;
  var {:pointer} PRequiredList: int;
  var {:scalar} PartialCount_1: int;
  var {:pointer} PUserData_5: int;
  var vslice_dummy_var_526: int;
  var vslice_dummy_var_527: int;

  anon0:
    PRequiredList := actual_PRequiredList;
    PartialCount_1 := actual_PartialCount_1;
    PUserData_5 := actual_PUserData_5;
    call {:si_unique_call 2096} Tmp_918 := __HAVOC_malloc(140);
    call {:si_unique_call 2097} Tmp_919 := __HAVOC_malloc(432);
    call {:si_unique_call 2098} Tmp_920 := __HAVOC_malloc(140);
    call {:si_unique_call 2099} Tmp_921 := __HAVOC_malloc(420);
    status_31 := 0;
    call {:si_unique_call 2100} sdv_do_paged_code_check();
    Tmp_920 := strConst__li2bpl269;
    call {:si_unique_call 2101} vslice_dummy_var_526 := SerialDbgPrintEx(11, Tmp_920);
    call {:si_unique_call 2102} sdv_RtlZeroMemory(0, 136);
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    havoc Tmp_919;
    reqResList := Tmp_919;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    havoc Tmp_921;
    reqResDesc := Tmp_921;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto L37;

  L37:
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} PartialCount_1 == 3;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto L42;

  L42:
    Tmp_918 := strConst__li2bpl270;
    call {:si_unique_call 2103} vslice_dummy_var_527 := SerialDbgPrintEx(11, Tmp_918);
    Tmp_917 := status_31;
    return;

  anon6_Then:
    assume {:partition} PartialCount_1 != 3;
    goto L42;

  anon5_Then:
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto L37;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_528: int;

  anon0:
    call {:si_unique_call 2104} vslice_dummy_var_528 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialIsUserDataValid"} SerialIsUserDataValid(actual_DriverObject_5: int, actual_UserSubKey_1: int, actual_Parameters: int, actual_DefaultInterfaceType: int, actual_PUserData_6: int) returns (Tmp_925: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_925 == 0 || Tmp_925 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialIsUserDataValid"} SerialIsUserDataValid(actual_DriverObject_5: int, actual_UserSubKey_1: int, actual_Parameters: int, actual_DefaultInterfaceType: int, actual_PUserData_6: int) returns (Tmp_925: int)
{
  var {:scalar} Tmp_926: int;
  var {:scalar} Tmp_927: int;
  var {:pointer} Tmp_928: int;
  var {:pointer} Tmp_929: int;
  var {:pointer} Tmp_930: int;
  var {:pointer} Tmp_931: int;
  var {:pointer} Tmp_932: int;
  var {:pointer} Tmp_933: int;
  var {:scalar} Tmp_934: int;
  var {:scalar} Tmp_935: int;
  var {:pointer} Tmp_936: int;
  var {:pointer} Tmp_937: int;
  var {:pointer} Tmp_938: int;
  var {:pointer} Tmp_939: int;
  var {:pointer} Tmp_940: int;
  var {:pointer} Tmp_941: int;
  var {:pointer} Tmp_943: int;
  var {:scalar} Tmp_944: int;
  var {:scalar} Tmp_945: int;
  var {:pointer} Tmp_946: int;
  var {:scalar} Tmp_947: int;
  var {:pointer} Tmp_948: int;
  var {:scalar} Tmp_949: int;
  var {:scalar} Tmp_950: int;
  var {:pointer} Tmp_951: int;
  var {:pointer} Tmp_952: int;
  var {:pointer} Tmp_953: int;
  var {:pointer} Tmp_954: int;
  var {:pointer} Tmp_955: int;
  var {:pointer} Tmp_956: int;
  var {:pointer} Tmp_957: int;
  var {:pointer} Tmp_958: int;
  var {:scalar} Tmp_959: int;
  var {:scalar} foundIt_1: int;
  var {:pointer} Tmp_960: int;
  var {:pointer} Tmp_961: int;
  var {:pointer} Tmp_962: int;
  var {:scalar} Tmp_963: int;
  var {:pointer} Tmp_964: int;
  var {:scalar} Tmp_965: int;
  var {:scalar} Tmp_966: int;
  var {:pointer} Tmp_967: int;
  var {:pointer} Tmp_968: int;
  var {:pointer} Tmp_969: int;
  var {:scalar} Tmp_970: int;
  var {:scalar} Tmp_971: int;
  var {:scalar} rval: int;
  var {:pointer} Tmp_972: int;
  var {:scalar} sdv_754: int;
  var {:pointer} Tmp_973: int;
  var {:pointer} Tmp_974: int;
  var {:scalar} Tmp_975: int;
  var {:pointer} Tmp_976: int;
  var {:pointer} Tmp_977: int;
  var {:scalar} sdv_759: int;
  var {:pointer} Tmp_978: int;
  var {:scalar} Tmp_979: int;
  var {:pointer} Tmp_980: int;
  var {:pointer} Tmp_981: int;
  var {:scalar} Tmp_982: int;
  var {:scalar} Tmp_983: int;
  var {:pointer} Tmp_984: int;
  var {:scalar} Tmp_985: int;
  var {:scalar} Tmp_986: int;
  var {:pointer} Tmp_987: int;
  var {:scalar} Tmp_988: int;
  var {:pointer} Tmp_989: int;
  var {:scalar} sdv_761: int;
  var {:pointer} Tmp_990: int;
  var {:scalar} Tmp_991: int;
  var {:pointer} DriverObject_5: int;
  var {:pointer} UserSubKey_1: int;
  var {:pointer} Parameters: int;
  var {:scalar} DefaultInterfaceType: int;
  var {:pointer} PUserData_6: int;
  var vslice_dummy_var_529: int;
  var vslice_dummy_var_530: int;
  var vslice_dummy_var_531: int;
  var vslice_dummy_var_532: int;
  var vslice_dummy_var_533: int;
  var vslice_dummy_var_534: int;
  var vslice_dummy_var_535: int;
  var vslice_dummy_var_536: int;
  var vslice_dummy_var_537: int;
  var vslice_dummy_var_538: int;
  var vslice_dummy_var_539: int;
  var vslice_dummy_var_540: int;
  var vslice_dummy_var_541: int;
  var vslice_dummy_var_542: int;
  var vslice_dummy_var_543: int;
  var vslice_dummy_var_544: int;
  var vslice_dummy_var_545: int;
  var vslice_dummy_var_546: int;
  var vslice_dummy_var_547: int;
  var vslice_dummy_var_548: int;
  var vslice_dummy_var_549: int;
  var vslice_dummy_var_550: int;
  var vslice_dummy_var_551: int;
  var vslice_dummy_var_552: int;
  var vslice_dummy_var_1750: int;
  var vslice_dummy_var_1751: int;
  var vslice_dummy_var_1752: int;
  var vslice_dummy_var_1753: int;
  var vslice_dummy_var_1754: int;
  var vslice_dummy_var_1755: int;
  var vslice_dummy_var_1756: int;
  var vslice_dummy_var_1757: int;
  var vslice_dummy_var_1758: int;
  var vslice_dummy_var_1759: int;

  anon0:
    call {:si_unique_call 2105} Tmp_926 := __HAVOC_malloc(20);
    call {:si_unique_call 2106} Tmp_927 := __HAVOC_malloc(20);
    call {:si_unique_call 2107} Tmp_945 := __HAVOC_malloc(20);
    call {:si_unique_call 2108} Tmp_965 := __HAVOC_malloc(20);
    call {:si_unique_call 2109} Tmp_971 := __HAVOC_malloc(20);
    call {:si_unique_call 2110} Tmp_975 := __HAVOC_malloc(20);
    call {:si_unique_call 2111} Tmp_979 := __HAVOC_malloc(20);
    call {:si_unique_call 2112} Tmp_983 := __HAVOC_malloc(20);
    call {:si_unique_call 2113} Tmp_985 := __HAVOC_malloc(20);
    call {:si_unique_call 2114} Tmp_986 := __HAVOC_malloc(20);
    DriverObject_5 := actual_DriverObject_5;
    UserSubKey_1 := actual_UserSubKey_1;
    Parameters := actual_Parameters;
    DefaultInterfaceType := actual_DefaultInterfaceType;
    PUserData_6 := actual_PUserData_6;
    call {:si_unique_call 2115} Tmp_928 := __HAVOC_malloc(164);
    call {:si_unique_call 2116} Tmp_929 := __HAVOC_malloc(148);
    call {:si_unique_call 2117} Tmp_930 := __HAVOC_malloc(152);
    call {:si_unique_call 2118} Tmp_932 := __HAVOC_malloc(232);
    call {:si_unique_call 2119} Tmp_933 := __HAVOC_malloc(156);
    call {:si_unique_call 2120} Tmp_936 := __HAVOC_malloc(72);
    call {:si_unique_call 2121} Tmp_938 := __HAVOC_malloc(236);
    call {:si_unique_call 2122} Tmp_940 := __HAVOC_malloc(88);
    call {:si_unique_call 2123} Tmp_943 := __HAVOC_malloc(180);
    call {:si_unique_call 2124} Tmp_946 := __HAVOC_malloc(176);
    call {:si_unique_call 2125} Tmp_951 := __HAVOC_malloc(4);
    call {:si_unique_call 2126} Tmp_952 := __HAVOC_malloc(88);
    call {:si_unique_call 2127} Tmp_955 := __HAVOC_malloc(188);
    call {:si_unique_call 2128} Tmp_956 := __HAVOC_malloc(116);
    call {:si_unique_call 2129} Tmp_958 := __HAVOC_malloc(84);
    call {:si_unique_call 2130} Tmp_962 := __HAVOC_malloc(180);
    call {:si_unique_call 2131} Tmp_964 := __HAVOC_malloc(144);
    call {:si_unique_call 2132} Tmp_967 := __HAVOC_malloc(100);
    call {:si_unique_call 2133} Tmp_972 := __HAVOC_malloc(96);
    call {:si_unique_call 2134} Tmp_973 := __HAVOC_malloc(248);
    call {:si_unique_call 2135} Tmp_974 := __HAVOC_malloc(4);
    call {:si_unique_call 2136} Tmp_976 := __HAVOC_malloc(100);
    call {:si_unique_call 2137} Tmp_978 := __HAVOC_malloc(164);
    call {:si_unique_call 2138} Tmp_981 := __HAVOC_malloc(116);
    call {:si_unique_call 2139} Tmp_984 := __HAVOC_malloc(164);
    call {:si_unique_call 2140} Tmp_990 := __HAVOC_malloc(4);
    rval := 1;
    call {:si_unique_call 2141} sdv_do_paged_code_check();
    Tmp_956 := strConst__li2bpl271;
    call {:si_unique_call 2142} vslice_dummy_var_530 := SerialDbgPrintEx(11, Tmp_956);
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_950;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1750;
    call {:si_unique_call 2143} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1750, Tmp_926, 0, 0, 0, 67, 0, -1073348588, Tmp_950, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(PUserData_6))], 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_948;
    Tmp_940 := strConst__li2bpl284;
    call {:si_unique_call 2144} vslice_dummy_var_531 := SerialDbgPrintEx(14, Tmp_940);
    rval := 0;
    goto L34;

  L34:
    Tmp_925 := rval;
    return;

  anon36_Then:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_963;
    assume {:nonnull} Tmp_985 != 0;
    assume Tmp_985 > 0;
    assume {:nonnull} Tmp_985 != 0;
    assume Tmp_985 > 0;
    assume {:nonnull} Tmp_985 != 0;
    assume Tmp_985 > 0;
    assume {:nonnull} Tmp_985 != 0;
    assume Tmp_985 > 0;
    assume {:nonnull} Tmp_985 != 0;
    assume Tmp_985 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1751;
    call {:si_unique_call 2145} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1751, Tmp_985, 0, 0, 0, 69, 0, -1073348587, Tmp_963, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(PUserData_6))], 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_954;
    Tmp_976 := strConst__li2bpl285;
    call {:si_unique_call 2146} vslice_dummy_var_532 := SerialDbgPrintEx(14, Tmp_976);
    rval := 0;
    goto L34;

  anon40_Then:
    goto L20;

  L20:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L73;

  L73:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_949;
    assume {:nonnull} Tmp_983 != 0;
    assume Tmp_983 > 0;
    assume {:nonnull} Tmp_983 != 0;
    assume Tmp_983 > 0;
    assume {:nonnull} Tmp_983 != 0;
    assume Tmp_983 > 0;
    assume {:nonnull} Tmp_983 != 0;
    assume Tmp_983 > 0;
    assume {:nonnull} Tmp_983 != 0;
    assume Tmp_983 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1752;
    call {:si_unique_call 2147} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1752, Tmp_983, 0, 0, 0, 71, 0, -1073348586, Tmp_949, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(PUserData_6))], 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_968;
    Tmp_952 := strConst__li2bpl286;
    call {:si_unique_call 2148} vslice_dummy_var_533 := SerialDbgPrintEx(14, Tmp_952);
    rval := 0;
    goto L34;

  anon42_Then:
    call {:si_unique_call 2149} vslice_dummy_var_529 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} foundIt_1 != 0;
    goto L90;

  L90:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_935;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1753;
    call {:si_unique_call 2150} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1753, Tmp_979, 0, 0, 0, 73, 0, -1073348584, Tmp_935, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(PUserData_6))], 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_960;
    Tmp_932 := strConst__li2bpl287;
    call {:si_unique_call 2151} vslice_dummy_var_534 := SerialDbgPrintEx(14, Tmp_932);
    rval := 0;
    goto L34;

  anon45_Then:
    goto L91;

  L91:
    Tmp_964 := strConst__li2bpl272;
    call {:si_unique_call 2152} vslice_dummy_var_535 := SerialDbgPrintEx(4, Tmp_964);
    Tmp_955 := strConst__li2bpl273;
    call {:si_unique_call 2153} vslice_dummy_var_536 := SerialDbgPrintEx(4, Tmp_955);
    Tmp_978 := strConst__li2bpl274;
    call {:si_unique_call 2154} vslice_dummy_var_537 := SerialDbgPrintEx(4, Tmp_978);
    Tmp_928 := strConst__li2bpl275;
    call {:si_unique_call 2155} vslice_dummy_var_538 := SerialDbgPrintEx(4, Tmp_928);
    Tmp_984 := strConst__li2bpl276;
    call {:si_unique_call 2156} vslice_dummy_var_539 := SerialDbgPrintEx(4, Tmp_984);
    Tmp_946 := strConst__li2bpl277;
    call {:si_unique_call 2157} vslice_dummy_var_540 := SerialDbgPrintEx(4, Tmp_946);
    Tmp_943 := strConst__li2bpl278;
    call {:si_unique_call 2158} vslice_dummy_var_541 := SerialDbgPrintEx(4, Tmp_943);
    Tmp_962 := strConst__li2bpl279;
    call {:si_unique_call 2159} vslice_dummy_var_542 := SerialDbgPrintEx(4, Tmp_962);
    Tmp_930 := strConst__li2bpl280;
    call {:si_unique_call 2160} vslice_dummy_var_543 := SerialDbgPrintEx(4, Tmp_930);
    Tmp_929 := strConst__li2bpl281;
    call {:si_unique_call 2161} vslice_dummy_var_544 := SerialDbgPrintEx(4, Tmp_929);
    Tmp_933 := strConst__li2bpl282;
    call {:si_unique_call 2162} vslice_dummy_var_545 := SerialDbgPrintEx(4, Tmp_933);
    Tmp_981 := strConst__li2bpl283;
    call {:si_unique_call 2163} vslice_dummy_var_546 := SerialDbgPrintEx(11, Tmp_981);
    goto L34;

  anon44_Then:
    goto L91;

  anon43_Then:
    assume {:partition} foundIt_1 == 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_959;
    assume {:nonnull} Tmp_986 != 0;
    assume Tmp_986 > 0;
    assume {:nonnull} Tmp_986 != 0;
    assume Tmp_986 > 0;
    assume {:nonnull} Tmp_986 != 0;
    assume Tmp_986 > 0;
    assume {:nonnull} Tmp_986 != 0;
    assume Tmp_986 > 0;
    assume {:nonnull} Tmp_986 != 0;
    assume Tmp_986 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1754;
    call {:si_unique_call 2164} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1754, Tmp_986, 0, 0, 0, 72, 0, -1073348585, Tmp_959, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(PUserData_6))], 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_989;
    Tmp_938 := strConst__li2bpl288;
    call {:si_unique_call 2165} vslice_dummy_var_547 := SerialDbgPrintEx(14, Tmp_938);
    rval := 0;
    goto L34;

  anon35_Then:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L90;

  anon41_Then:
    goto L73;

  anon38_Then:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_944;
    assume {:nonnull} Tmp_927 != 0;
    assume Tmp_927 > 0;
    assume {:nonnull} Tmp_927 != 0;
    assume Tmp_927 > 0;
    assume {:nonnull} Tmp_927 != 0;
    assume Tmp_927 > 0;
    assume {:nonnull} Tmp_927 != 0;
    assume Tmp_927 > 0;
    assume {:nonnull} Tmp_927 != 0;
    assume Tmp_927 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1755;
    call {:si_unique_call 2166} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1755, Tmp_927, 0, 0, 0, 70, 0, -1073348587, Tmp_944, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(PUserData_6))], 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_977;
    Tmp_967 := strConst__li2bpl285;
    call {:si_unique_call 2167} vslice_dummy_var_548 := SerialDbgPrintEx(14, Tmp_967);
    rval := 0;
    goto L34;

  anon39_Then:
    goto L20;

  anon37_Then:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_982;
    assume {:nonnull} Tmp_965 != 0;
    assume Tmp_965 > 0;
    assume {:nonnull} Tmp_965 != 0;
    assume Tmp_965 > 0;
    assume {:nonnull} Tmp_965 != 0;
    assume Tmp_965 > 0;
    assume {:nonnull} Tmp_965 != 0;
    assume Tmp_965 > 0;
    assume {:nonnull} Tmp_965 != 0;
    assume Tmp_965 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1756;
    call {:si_unique_call 2168} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1756, Tmp_965, 0, 0, 0, 68, 0, -1073348588, Tmp_982, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(UserSymbolicLink__SERIAL_USER_DATA(PUserData_6))], 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_980;
    Tmp_973 := strConst__li2bpl289;
    call {:si_unique_call 2169} vslice_dummy_var_549 := SerialDbgPrintEx(14, Tmp_973);
    rval := 0;
    goto L34;

  anon34_Then:
    goto L20;

  anon33_Then:
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_931;
    Tmp_988 := sdv_759 * 2 + 2;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_990;
    Tmp_969 := Tmp_990;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_991;
    assume {:nonnull} Tmp_945 != 0;
    assume Tmp_945 > 0;
    assume {:nonnull} Tmp_945 != 0;
    assume Tmp_945 > 0;
    assume {:nonnull} Tmp_945 != 0;
    assume Tmp_945 > 0;
    assume {:nonnull} Tmp_945 != 0;
    assume Tmp_945 > 0;
    assume {:nonnull} Tmp_945 != 0;
    assume Tmp_945 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1757;
    call {:si_unique_call 2170} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1757, Tmp_945, 0, 0, 0, 66, 0, -1073348583, Tmp_991, Tmp_969, Tmp_988, Tmp_931);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_941;
    Tmp_958 := strConst__li2bpl290;
    call {:si_unique_call 2171} vslice_dummy_var_550 := SerialDbgPrintEx(14, Tmp_958);
    rval := 0;
    goto L34;

  anon32_Then:
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_961;
    Tmp_934 := sdv_761 * 2 + 2;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_974;
    Tmp_987 := Tmp_974;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_947;
    assume {:nonnull} Tmp_971 != 0;
    assume Tmp_971 > 0;
    assume {:nonnull} Tmp_971 != 0;
    assume Tmp_971 > 0;
    assume {:nonnull} Tmp_971 != 0;
    assume Tmp_971 > 0;
    assume {:nonnull} Tmp_971 != 0;
    assume Tmp_971 > 0;
    assume {:nonnull} Tmp_971 != 0;
    assume Tmp_971 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1758;
    call {:si_unique_call 2172} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1758, Tmp_971, 0, 0, 0, 65, 0, -1073348583, Tmp_947, Tmp_987, Tmp_934, Tmp_961);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_953;
    Tmp_936 := strConst__li2bpl291;
    call {:si_unique_call 2173} vslice_dummy_var_551 := SerialDbgPrintEx(14, Tmp_936);
    rval := 0;
    goto L34;

  anon31_Then:
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_957;
    Tmp_966 := sdv_754 * 2 + 2;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_951;
    Tmp_937 := Tmp_951;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_970;
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_1759;
    call {:si_unique_call 2174} SerialLogError(DriverObject_5, 0, vslice_dummy_var_1759, Tmp_975, 0, 0, 0, 64, 0, -1073348583, Tmp_970, Tmp_937, Tmp_966, Tmp_957);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_939;
    Tmp_972 := strConst__li2bpl292;
    call {:si_unique_call 2175} vslice_dummy_var_552 := SerialDbgPrintEx(14, Tmp_972);
    rval := 0;
    goto L34;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_775: int, actual_sdv_776: int) returns (Tmp_1000: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_775: int, actual_sdv_776: int) returns (Tmp_1000: int)
{
  var {:scalar} sdv_777: int;

  anon0:
    call {:si_unique_call 2176} Tmp_1000 := __HAVOC_malloc(4);
    call {:si_unique_call 2177} sdv_777 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1000 != 0;
    assume Tmp_1000 > 0;
    assume {:nonnull} sdv_777 != 0;
    assume sdv_777 > 0;
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_553: int;

  anon0:
    call {:si_unique_call 2178} vslice_dummy_var_553 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_1010: int);
  free ensures {:va_keep} Tmp_1010 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_1010: int)
{

  anon0:
    Tmp_1010 := 0;
    return;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead: int)
{
  var {:pointer} ListHead: int;
  var vslice_dummy_var_554: int;

  anon0:
    call {:si_unique_call 2179} vslice_dummy_var_554 := __HAVOC_malloc(4);
    ListHead := actual_ListHead;
    assume {:nonnull} ListHead != 0;
    assume ListHead > 0;
    assume {:nonnull} ListHead != 0;
    assume ListHead > 0;
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_1: int) returns (Tmp_1014: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_1: int) returns (Tmp_1014: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} Entry: int;
  var {:pointer} ListHead_1: int;

  anon0:
    ListHead_1 := actual_ListHead_1;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    havoc Entry;
    assume {:nonnull} Entry != 0;
    assume Entry > 0;
    havoc NextEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 2180} FatalListEntryError(ListHead_1, Entry, NextEntry);
    goto L12;

  L12:
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    Tmp_1014 := Entry;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int)
{
  var vslice_dummy_var_555: int;

  anon0:
    call {:si_unique_call 2181} vslice_dummy_var_555 := __HAVOC_malloc(4);
    call {:si_unique_call 2182} RtlFailFast(3);
    return;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_556: int;

  anon0:
    call {:si_unique_call 2183} vslice_dummy_var_556 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_18: int) returns (Tmp_1020: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_1020 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_18: int) returns (Tmp_1020: int)
{
  var {:pointer} pDevExt_18: int;
  var {:pointer} Tmp_1023: int;
  var {:pointer} Tmp_1026: int;
  var {:pointer} PDevObj_18: int;
  var vslice_dummy_var_557: int;
  var vslice_dummy_var_558: int;

  anon0:
    PDevObj_18 := actual_PDevObj_18;
    call {:si_unique_call 2184} Tmp_1023 := __HAVOC_malloc(96);
    call {:si_unique_call 2185} Tmp_1026 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_18 != 0;
    assume PDevObj_18 > 0;
    havoc pDevExt_18;
    call {:si_unique_call 2186} sdv_do_paged_code_check();
    Tmp_1026 := strConst__li2bpl293;
    call {:si_unique_call 2187} vslice_dummy_var_557 := SerialDbgPrintEx(2, Tmp_1026);
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L15;

  L15:
    call {:si_unique_call 2188} IoDetachDevice(0);
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_18))] != 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    call {:si_unique_call 2189} sdv_ExFreePool(0);
    goto L19;

  L19:
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_18))] != 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    call {:si_unique_call 2190} sdv_ExFreePool(0);
    goto L23;

  L23:
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(pDevExt_18))] != 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    call {:si_unique_call 2191} sdv_ExFreePool(0);
    goto L27;

  L27:
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(ObjectDirectory__SERIAL_DEVICE_EXTENSION(pDevExt_18))] != 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    call {:si_unique_call 2192} sdv_ExFreePool(0);
    goto L31;

  L31:
    call {:si_unique_call 2193} IoDeleteDevice(0);
    Tmp_1023 := strConst__li2bpl294;
    call {:si_unique_call 2194} vslice_dummy_var_558 := SerialDbgPrintEx(2, Tmp_1023);
    Tmp_1020 := 0;
    return;

  anon15_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(ObjectDirectory__SERIAL_DEVICE_EXTENSION(pDevExt_18))] == 0;
    goto L31;

  anon14_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DosName__SERIAL_DEVICE_EXTENSION(pDevExt_18))] == 0;
    goto L27;

  anon13_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_18))] == 0;
    goto L23;

  anon12_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_18))] == 0;
    goto L19;

  anon11_Then:
    call {:si_unique_call 2195} SerialDisableInterfacesResources(PDevObj_18, 1);
    goto L15;
}



procedure {:origName "SerialUnload"} SerialUnload(actual_DriverObject_6: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialUnload"} SerialUnload(actual_DriverObject_6: int)
{
  var {:pointer} Tmp_1030: int;
  var vslice_dummy_var_559: int;
  var vslice_dummy_var_560: int;
  var vslice_dummy_var_561: int;

  anon0:
    call {:si_unique_call 2196} vslice_dummy_var_559 := __HAVOC_malloc(4);
    call {:si_unique_call 2197} Tmp_1030 := __HAVOC_malloc(68);
    call {:si_unique_call 2198} sdv_do_paged_code_check();
    call {:si_unique_call 2199} vslice_dummy_var_560 := sdv_MmLockPagableCodeSection(li2bplFunctionConstant1028);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath__SERIAL_GLOBALS(SerialGlobals))] != 0;
    call {:si_unique_call 2200} sdv_ExFreePool(0);
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath__SERIAL_GLOBALS(SerialGlobals))] := 0;
    goto L13;

  L13:
    Tmp_1030 := strConst__li2bpl295;
    call {:si_unique_call 2201} vslice_dummy_var_561 := SerialDbgPrintEx(6, Tmp_1030);
    call {:si_unique_call 2202} MmUnlockPagableImageSection(0);
    call {:si_unique_call 2203} SLIC_SerialUnload_exit(strConst__li2bpl0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath__SERIAL_GLOBALS(SerialGlobals))] == 0;
    goto L13;
}



procedure {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_19: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_19: int)
{
  var {:pointer} Tmp_1031: int;
  var {:pointer} Tmp_1032: int;
  var {:pointer} pDevExt_19: int;
  var {:pointer} Tmp_1033: int;
  var {:pointer} Tmp_1035: int;
  var {:pointer} Tmp_1036: int;
  var {:scalar} cancelRoutine_2: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} Tmp_1037: int;
  var {:pointer} Tmp_1038: int;
  var {:pointer} PDevObj_19: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;
  var vslice_dummy_var_564: int;
  var vslice_dummy_var_565: int;
  var vslice_dummy_var_1760: int;
  var vslice_dummy_var_1761: int;
  var vslice_dummy_var_1762: int;
  var vslice_dummy_var_1763: int;
  var vslice_dummy_var_1764: int;
  var vslice_dummy_var_1765: int;

  anon0:
    call {:si_unique_call 2204} vslice_dummy_var_562 := __HAVOC_malloc(4);
    PDevObj_19 := actual_PDevObj_19;
    call {:si_unique_call 2205} Tmp_1035 := __HAVOC_malloc(112);
    call {:si_unique_call 2206} Tmp_1036 := __HAVOC_malloc(96);
    assume {:nonnull} PDevObj_19 != 0;
    assume PDevObj_19 > 0;
    havoc pDevExt_19;
    Tmp_1035 := strConst__li2bpl297;
    call {:si_unique_call 2207} vslice_dummy_var_564 := SerialDbgPrintEx(2, Tmp_1035);
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    call {:si_unique_call 2208} SerialKillAllReadsOrWrites(PDevObj_19, WriteQueue__SERIAL_DEVICE_EXTENSION(pDevExt_19), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(pDevExt_19));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    call {:si_unique_call 2209} SerialKillAllReadsOrWrites(PDevObj_19, ReadQueue__SERIAL_DEVICE_EXTENSION(pDevExt_19), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(pDevExt_19));
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    call {:si_unique_call 2210} SerialKillAllReadsOrWrites(PDevObj_19, PurgeQueue__SERIAL_DEVICE_EXTENSION(pDevExt_19), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(pDevExt_19));
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    call {:si_unique_call 2211} SerialKillAllReadsOrWrites(PDevObj_19, MaskQueue__SERIAL_DEVICE_EXTENSION(pDevExt_19), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(pDevExt_19));
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2212} Tmp_1033 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1033 != 0;
    assume Tmp_1033 > 0;
    call {:si_unique_call 2213} IoAcquireCancelSpinLock(Tmp_1033);
    assume {:nonnull} Tmp_1033 != 0;
    assume Tmp_1033 > 0;
    havoc oldIrql_9;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc Tmp_1037;
    assume {:nonnull} Tmp_1037 != 0;
    assume Tmp_1037 > 0;
    cancelRoutine_2 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1037)];
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc Tmp_1032;
    assume {:nonnull} Tmp_1032 != 0;
    assume Tmp_1032 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} cancelRoutine_2 != 0;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc Tmp_1038;
    assume {:nonnull} Tmp_1038 != 0;
    assume Tmp_1038 > 0;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc Tmp_1031;
    assume {:nonnull} Tmp_1031 != 0;
    assume Tmp_1031 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1031)] := 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant571;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc vslice_dummy_var_1760;
    call {:si_unique_call 2214} SerialCancelCurrentWrite(PDevObj_19, vslice_dummy_var_1760);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    call {:si_unique_call 2215} vslice_dummy_var_563 := IoCancelIrp(0);
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    goto L41;

  L41:
    call {:si_unique_call 2216} SerialKillAllStalled(PDevObj_19);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1036 := strConst__li2bpl296;
    call {:si_unique_call 2217} vslice_dummy_var_565 := SerialDbgPrintEx(2, Tmp_1036);
    goto LM2;

  LM2:
    return;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L41;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant575;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc vslice_dummy_var_1761;
    call {:si_unique_call 2218} SerialCancelCurrentXoff(PDevObj_19, vslice_dummy_var_1761);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant1086;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc vslice_dummy_var_1762;
    call {:si_unique_call 2219} SerialCancelImmediate(PDevObj_19, vslice_dummy_var_1762);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant665;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc vslice_dummy_var_1763;
    call {:si_unique_call 2220} SerialCancelQueued(PDevObj_19, vslice_dummy_var_1763);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant619;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc vslice_dummy_var_1764;
    call {:si_unique_call 2221} SerialCancelWait(PDevObj_19, vslice_dummy_var_1764);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant667;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc vslice_dummy_var_1765;
    call {:si_unique_call 2222} SerialFilterCancelQueued(PDevObj_19, vslice_dummy_var_1765);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    assume {:partition} cancelRoutine_2 == 0;
    call {:si_unique_call 2223} IoReleaseCancelSpinLock(oldIrql_9);
    goto L40;

  anon39_Then:
    call {:si_unique_call 2224} IoReleaseCancelSpinLock(oldIrql_9);
    goto L40;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType: int, actual_BusNumber: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_1039: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType: int, actual_BusNumber: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_1039: int)
{
  var {:scalar} IoAddress: int;
  var {:scalar} Tmp_1040: int;
  var {:scalar} Tmp_1041: int;
  var {:pointer} address: int;
  var {:pointer} structPtr888IoAddress: int;
  var {:scalar} NumberOfBytes: int;
  var {:scalar} AddressSpace: int;
  var {:pointer} MappedAddress: int;

  anon0:
    call {:si_unique_call 2225} IoAddress := __HAVOC_malloc(20);
    call {:si_unique_call 2226} Tmp_1040 := __HAVOC_malloc(20);
    structPtr888IoAddress := actual_structPtr888IoAddress;
    NumberOfBytes := actual_NumberOfBytes;
    AddressSpace := actual_AddressSpace;
    MappedAddress := actual_MappedAddress;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    call {:si_unique_call 2227} sdv_do_paged_code_check();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} AddressSpace != 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    havoc address;
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    goto L12;

  L12:
    Tmp_1039 := address;
    return;

  anon5_Then:
    assume {:partition} AddressSpace == 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    call {:si_unique_call 2228} address := MmMapIoSpace(Tmp_1040, NumberOfBytes, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} address != 0;
    Tmp_1041 := 1;
    goto L20;

  L20:
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    goto L12;

  anon6_Then:
    assume {:partition} address == 0;
    Tmp_1041 := 0;
    goto L20;
}



procedure {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_21: int, actual_PConfigData: int, actual_PDevObj_20: int) returns (Tmp_1043: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1043 == -1073741670 || Tmp_1043 == 0 || Tmp_1043 == -1073741709 || Tmp_1043 == -1073741810;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_21: int, actual_PConfigData: int, actual_PDevObj_20: int) returns (Tmp_1043: int)
{
  var {:pointer} Tmp_1044: int;
  var {:pointer} Tmp_1045: int;
  var {:pointer} Tmp_1047: int;
  var {:pointer} Tmp_1048: int;
  var {:pointer} pNewExt: int;
  var {:scalar} status_32: int;
  var {:pointer} pDispatch: int;
  var {:pointer} Tmp_1049: int;
  var {:pointer} Tmp_1050: int;
  var {:pointer} PDevExt_21: int;
  var {:pointer} PConfigData: int;
  var {:pointer} PDevObj_20: int;
  var boogieTmp: int;
  var vslice_dummy_var_566: int;
  var vslice_dummy_var_567: int;
  var vslice_dummy_var_568: int;
  var vslice_dummy_var_569: int;
  var vslice_dummy_var_570: int;
  var vslice_dummy_var_571: int;

  anon0:
    PDevExt_21 := actual_PDevExt_21;
    PConfigData := actual_PConfigData;
    PDevObj_20 := actual_PDevObj_20;
    call {:si_unique_call 2229} Tmp_1045 := __HAVOC_malloc(116);
    call {:si_unique_call 2230} Tmp_1047 := __HAVOC_malloc(136);
    call {:si_unique_call 2231} Tmp_1048 := __HAVOC_malloc(116);
    call {:si_unique_call 2232} Tmp_1049 := __HAVOC_malloc(116);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc pNewExt;
    call {:si_unique_call 2233} sdv_do_paged_code_check();
    Tmp_1047 := strConst__li2bpl298;
    call {:si_unique_call 2234} vslice_dummy_var_567 := SerialDbgPrintEx(2, Tmp_1047);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    call {:si_unique_call 2235} status_32 := SerialInitOneController(PDevObj_20, PConfigData);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_32 >= 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 2236} boogieTmp := ExAllocatePoolWithTag(512, 76, -666022077);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    havoc pDispatch;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} pDispatch != 0;
    call {:si_unique_call 2237} sdv_RtlZeroMemory(0, 76);
    call {:si_unique_call 2238} vslice_dummy_var_566 := KeSynchronizeExecution(0, li2bplFunctionConstant1036, 0);
    goto L26;

  L26:
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc Tmp_1044;
    assume {:nonnull} Tmp_1044 != 0;
    assume Tmp_1044 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc Tmp_1050;
    assume {:nonnull} Tmp_1050 != 0;
    assume Tmp_1050 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    call {:si_unique_call 2239} vslice_dummy_var_568 := KeSynchronizeExecution(0, li2bplFunctionConstant1037, 0);
    Tmp_1048 := strConst__li2bpl300;
    call {:si_unique_call 2240} vslice_dummy_var_569 := SerialDbgPrintEx(2, Tmp_1048);
    Tmp_1043 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} pDispatch == 0;
    status_32 := -1073741670;
    Tmp_1045 := strConst__li2bpl301;
    call {:si_unique_call 2241} vslice_dummy_var_570 := SerialDbgPrintEx(2, Tmp_1045);
    Tmp_1043 := status_32;
    goto L1;

  anon8_Then:
    goto L26;

  anon7_Then:
    assume {:partition} 0 > status_32;
    Tmp_1049 := strConst__li2bpl299;
    call {:si_unique_call 2242} vslice_dummy_var_571 := SerialDbgPrintEx(2, Tmp_1049);
    Tmp_1043 := status_32;
    goto L1;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_572: int;

  anon0:
    call {:si_unique_call 2243} vslice_dummy_var_572 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_22: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_22: int)
{
  var {:scalar} i_2: int;
  var {:pointer} Tmp_1053: int;
  var {:scalar} sdv_803: int;
  var {:scalar} sdv_804: int;
  var {:scalar} sdv_805: int;
  var {:scalar} sdv_807: int;
  var {:scalar} sdv_808: int;
  var {:scalar} sdv_809: int;
  var {:scalar} sdv_810: int;
  var {:pointer} Tmp_1054: int;
  var {:scalar} sdv_812: int;
  var {:pointer} Tmp_1055: int;
  var {:scalar} sdv_816: int;
  var {:scalar} Tmp_1056: int;
  var {:scalar} sdv_823: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} Tmp_1057: int;
  var {:pointer} Tmp_1058: int;
  var {:scalar} sdv_828: int;
  var {:scalar} sdv_830: int;
  var {:pointer} Tmp_1059: int;
  var {:scalar} sdv_834: int;
  var {:pointer} Tmp_1060: int;
  var {:pointer} PDevExt_22: int;
  var vslice_dummy_var_573: int;
  var vslice_dummy_var_574: int;
  var vslice_dummy_var_575: int;
  var vslice_dummy_var_576: int;
  var vslice_dummy_var_577: int;
  var vslice_dummy_var_578: int;
  var vslice_dummy_var_579: int;
  var vslice_dummy_var_580: int;
  var vslice_dummy_var_581: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_584: int;
  var vslice_dummy_var_585: int;
  var vslice_dummy_var_586: int;
  var vslice_dummy_var_587: int;
  var vslice_dummy_var_588: int;
  var vslice_dummy_var_589: int;
  var vslice_dummy_var_590: int;
  var vslice_dummy_var_591: int;
  var vslice_dummy_var_592: int;
  var vslice_dummy_var_593: int;
  var vslice_dummy_var_594: int;
  var vslice_dummy_var_595: int;
  var vslice_dummy_var_596: int;
  var vslice_dummy_var_597: int;
  var vslice_dummy_var_598: int;
  var vslice_dummy_var_1766: int;
  var vslice_dummy_var_1767: int;

  anon0:
    call {:si_unique_call 2244} vslice_dummy_var_573 := __HAVOC_malloc(4);
    PDevExt_22 := actual_PDevExt_22;
    call {:si_unique_call 2245} Tmp_1053 := __HAVOC_malloc(152);
    call {:si_unique_call 2246} Tmp_1054 := __HAVOC_malloc(64);
    call {:si_unique_call 2247} Tmp_1057 := __HAVOC_malloc(100);
    call {:si_unique_call 2248} Tmp_1058 := __HAVOC_malloc(132);
    call {:si_unique_call 2249} Tmp_1059 := __HAVOC_malloc(116);
    Tmp_1059 := strConst__li2bpl302;
    call {:si_unique_call 2250} vslice_dummy_var_582 := SerialDbgPrintEx(2, Tmp_1059);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 2251} vslice_dummy_var_574 := KeSynchronizeExecution(0, li2bplFunctionConstant1030, 0);
    call {:si_unique_call 2252} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2253} sdv_KeAcquireSpinLock(0, Tmp_1055);
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    havoc oldIrql_10;
    call {:si_unique_call 2254} vslice_dummy_var_575 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2255} sdv_KeReleaseSpinLock(0, oldIrql_10);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 2256} InitializeListHead(AllDevObjs__SERIAL_DEVICE_EXTENSION(PDevExt_22));
    goto L8;

  L8:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    Tmp_1053 := strConst__li2bpl303;
    call {:si_unique_call 2257} vslice_dummy_var_583 := SerialDbgPrintEx(12, Tmp_1053);
    call {:si_unique_call 2258} IoDisconnectInterrupt(0);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 2259} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto L24;

  L24:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    i_2 := 0;
    goto L42;

  L42:
    call {:si_unique_call 2260} i_2, Tmp_1054, Tmp_1056, Tmp_1060 := SerialReleaseResources_loop_L42(i_2, Tmp_1054, Tmp_1056, Tmp_1060, PDevExt_22);
    goto L42_last;

  L42_last:
    assume {:CounterLoop 16} {:Counter "i_2"} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} 16 > i_2;
    Tmp_1056 := i_2;
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    havoc Tmp_1060;
    assume {:nonnull} Tmp_1060 != 0;
    assume Tmp_1060 > 0;
    havoc Tmp_1054;
    assume {:nonnull} Tmp_1054 != 0;
    assume Tmp_1054 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    i_2 := i_2 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    assume false;
    return;

  anon66_Then:
    goto L43;

  L43:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} i_2 == 16;
    Tmp_1058 := strConst__li2bpl304;
    call {:si_unique_call 2261} vslice_dummy_var_584 := SerialDbgPrintEx(12, Tmp_1058);
    call {:si_unique_call 2262} sdv_ExFreePool(0);
    goto L37;

  L37:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 2263} vslice_dummy_var_576 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_22), PDevExt_22);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 2264} vslice_dummy_var_577 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_22), PDevExt_22);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 2265} vslice_dummy_var_578 := SerialCancelTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_22), PDevExt_22);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 2266} vslice_dummy_var_579 := SerialCancelTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_22), PDevExt_22);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 2267} vslice_dummy_var_580 := SerialCancelTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(PDevExt_22), PDevExt_22);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 2268} vslice_dummy_var_581 := SerialCancelTimer(LowerRTSTimer__SERIAL_DEVICE_EXTENSION(PDevExt_22), PDevExt_22);
    call {:si_unique_call 2269} sdv_805 := KeRemoveQueueDpc(0);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_805 != 0;
    call {:si_unique_call 2270} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2271} vslice_dummy_var_585 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L72;

  L72:
    call {:si_unique_call 2272} sdv_808 := KeRemoveQueueDpc(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_808 != 0;
    call {:si_unique_call 2273} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2274} vslice_dummy_var_586 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L79;

  L79:
    call {:si_unique_call 2275} sdv_830 := KeRemoveQueueDpc(0);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_830 != 0;
    call {:si_unique_call 2276} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2277} vslice_dummy_var_587 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L86;

  L86:
    call {:si_unique_call 2278} sdv_804 := KeRemoveQueueDpc(0);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_804 != 0;
    call {:si_unique_call 2279} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2280} vslice_dummy_var_588 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L93;

  L93:
    call {:si_unique_call 2281} sdv_823 := KeRemoveQueueDpc(0);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_823 != 0;
    call {:si_unique_call 2282} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2283} vslice_dummy_var_589 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L100;

  L100:
    call {:si_unique_call 2284} sdv_810 := KeRemoveQueueDpc(0);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_810 != 0;
    call {:si_unique_call 2285} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2286} vslice_dummy_var_590 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L107;

  L107:
    call {:si_unique_call 2287} sdv_812 := KeRemoveQueueDpc(0);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_812 != 0;
    call {:si_unique_call 2288} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2289} vslice_dummy_var_591 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L114;

  L114:
    call {:si_unique_call 2290} sdv_807 := KeRemoveQueueDpc(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_807 != 0;
    call {:si_unique_call 2291} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2292} vslice_dummy_var_592 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L121;

  L121:
    call {:si_unique_call 2293} sdv_834 := KeRemoveQueueDpc(0);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_834 != 0;
    call {:si_unique_call 2294} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2295} vslice_dummy_var_593 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L128;

  L128:
    call {:si_unique_call 2296} sdv_816 := KeRemoveQueueDpc(0);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_816 != 0;
    call {:si_unique_call 2297} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2298} vslice_dummy_var_594 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L135;

  L135:
    call {:si_unique_call 2299} sdv_803 := KeRemoveQueueDpc(0);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_803 != 0;
    call {:si_unique_call 2300} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2301} vslice_dummy_var_595 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L142;

  L142:
    call {:si_unique_call 2302} sdv_828 := KeRemoveQueueDpc(0);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_828 != 0;
    call {:si_unique_call 2303} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2304} vslice_dummy_var_596 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L149;

  L149:
    call {:si_unique_call 2305} sdv_809 := KeRemoveQueueDpc(0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_809 != 0;
    call {:si_unique_call 2306} Tmp_1055 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    call {:si_unique_call 2307} vslice_dummy_var_597 := sdv_InterlockedDecrement(Tmp_1055);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    goto L156;

  L156:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    havoc vslice_dummy_var_1766;
    call {:si_unique_call 2308} MmUnmapIoSpace(0, vslice_dummy_var_1766);
    goto L160;

  L160:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    havoc vslice_dummy_var_1767;
    call {:si_unique_call 2309} MmUnmapIoSpace(0, vslice_dummy_var_1767);
    goto L164;

  L164:
    Tmp_1057 := strConst__li2bpl305;
    call {:si_unique_call 2310} vslice_dummy_var_598 := SerialDbgPrintEx(2, Tmp_1057);
    return;

  anon64_Then:
    goto L164;

  anon63_Then:
    goto L160;

  anon62_Then:
    assume {:partition} sdv_809 == 0;
    goto L156;

  anon61_Then:
    assume {:partition} sdv_828 == 0;
    goto L149;

  anon60_Then:
    assume {:partition} sdv_803 == 0;
    goto L142;

  anon59_Then:
    assume {:partition} sdv_816 == 0;
    goto L135;

  anon58_Then:
    assume {:partition} sdv_834 == 0;
    goto L128;

  anon57_Then:
    assume {:partition} sdv_807 == 0;
    goto L121;

  anon56_Then:
    assume {:partition} sdv_812 == 0;
    goto L114;

  anon55_Then:
    assume {:partition} sdv_810 == 0;
    goto L107;

  anon54_Then:
    assume {:partition} sdv_823 == 0;
    goto L100;

  anon53_Then:
    assume {:partition} sdv_804 == 0;
    goto L93;

  anon52_Then:
    assume {:partition} sdv_830 == 0;
    goto L86;

  anon51_Then:
    assume {:partition} sdv_808 == 0;
    goto L79;

  anon50_Then:
    assume {:partition} sdv_805 == 0;
    goto L72;

  anon49_Then:
    assume {:partition} i_2 != 16;
    goto L37;

  anon48_Then:
    assume {:partition} i_2 >= 16;
    goto L43;

  anon47_Then:
    goto L37;

  anon65_Then:
    goto L24;

  anon46_Then:
    goto L24;

  anon45_Then:
    goto L8;
}



procedure {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_21: int, actual_PConfig_1: int) returns (Tmp_1062: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1062 == -1073741810 || Tmp_1062 == -1073741670 || Tmp_1062 == 0 || Tmp_1062 == -1073741709;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_21: int, actual_PConfig_1: int) returns (Tmp_1062: int)
{
  var {:scalar} sdv_838: int;
  var {:pointer} sdv_839: int;
  var {:pointer} Tmp_1063: int;
  var {:pointer} Tmp_1064: int;
  var {:pointer} Tmp_1065: int;
  var {:pointer} Tmp_1066: int;
  var {:scalar} sdv_843: int;
  var {:scalar} sdv_844: int;
  var {:pointer} sdv_845: int;
  var {:scalar} sdv_846: int;
  var {:scalar} Tmp_1067: int;
  var {:scalar} Tmp_1068: int;
  var {:scalar} sdv_849: int;
  var {:scalar} Tmp_1069: int;
  var {:pointer} Tmp_1070: int;
  var {:pointer} pCurDevObj: int;
  var {:pointer} sdv_850: int;
  var {:pointer} sdv_851: int;
  var {:scalar} Tmp_1071: int;
  var {:scalar} Tmp_1072: int;
  var {:pointer} pDevExt_20: int;
  var {:scalar} Tmp_1073: int;
  var {:scalar} Tmp_1074: int;
  var {:scalar} Tmp_1075: int;
  var {:scalar} sdv_853: int;
  var {:pointer} Tmp_1076: int;
  var {:scalar} sdv_856: int;
  var {:scalar} sdv_858: int;
  var {:scalar} Tmp_1077: int;
  var {:pointer} sdv_861: int;
  var {:pointer} Tmp_1078: int;
  var {:scalar} Tmp_1079: int;
  var {:pointer} pExtension: int;
  var {:scalar} oldIrql_11: int;
  var {:scalar} sdv_863: int;
  var {:scalar} Tmp_1080: int;
  var {:pointer} Tmp_1081: int;
  var {:pointer} Tmp_1082: int;
  var {:pointer} Tmp_1083: int;
  var {:scalar} Tmp_1084: int;
  var {:scalar} sdv_864: int;
  var {:pointer} sdv_866: int;
  var {:scalar} sdv_867: int;
  var {:pointer} Tmp_1085: int;
  var {:pointer} Tmp_1086: int;
  var {:pointer} Tmp_1087: int;
  var {:scalar} sdv_870: int;
  var {:scalar} Tmp_1088: int;
  var {:scalar} Tmp_1089: int;
  var {:scalar} sdv_872: int;
  var {:pointer} Tmp_1090: int;
  var {:scalar} status_33: int;
  var {:scalar} sdv_873: int;
  var {:scalar} serialPhysicalMax: int;
  var {:pointer} Tmp_1091: int;
  var {:scalar} Tmp_1092: int;
  var {:scalar} Tmp_1093: int;
  var {:pointer} Tmp_1094: int;
  var {:pointer} Tmp_1095: int;
  var {:scalar} Tmp_1096: int;
  var {:scalar} sdv_876: int;
  var {:scalar} sdv_877: int;
  var {:scalar} Tmp_1097: int;
  var {:pointer} PDevObj_21: int;
  var {:pointer} PConfig_1: int;
  var vslice_dummy_var_599: int;
  var vslice_dummy_var_600: int;
  var vslice_dummy_var_601: int;
  var vslice_dummy_var_602: int;
  var vslice_dummy_var_603: int;
  var vslice_dummy_var_604: int;
  var vslice_dummy_var_605: int;
  var vslice_dummy_var_606: int;
  var vslice_dummy_var_607: int;
  var vslice_dummy_var_608: int;
  var vslice_dummy_var_609: int;
  var vslice_dummy_var_610: int;
  var vslice_dummy_var_611: int;
  var vslice_dummy_var_612: int;
  var vslice_dummy_var_613: int;
  var vslice_dummy_var_614: int;
  var vslice_dummy_var_1768: int;
  var vslice_dummy_var_1769: int;
  var vslice_dummy_var_1770: int;
  var vslice_dummy_var_1771: int;
  var vslice_dummy_var_1772: int;
  var vslice_dummy_var_1773: int;
  var vslice_dummy_var_1774: int;
  var vslice_dummy_var_1775: int;
  var vslice_dummy_var_1776: int;
  var vslice_dummy_var_1777: int;
  var vslice_dummy_var_1778: int;
  var vslice_dummy_var_1779: int;
  var vslice_dummy_var_1780: int;
  var vslice_dummy_var_1781: int;
  var vslice_dummy_var_1782: int;
  var vslice_dummy_var_1783: int;
  var vslice_dummy_var_1784: int;
  var vslice_dummy_var_1785: int;
  var vslice_dummy_var_1786: int;
  var vslice_dummy_var_1787: int;
  var vslice_dummy_var_1788: int;
  var vslice_dummy_var_1789: int;
  var vslice_dummy_var_1790: int;
  var vslice_dummy_var_1791: int;
  var vslice_dummy_var_1792: int;
  var vslice_dummy_var_1793: int;
  var vslice_dummy_var_1794: int;
  var vslice_dummy_var_1795: int;
  var vslice_dummy_var_1796: int;
  var vslice_dummy_var_1797: int;
  var vslice_dummy_var_1798: int;
  var vslice_dummy_var_1799: int;
  var vslice_dummy_var_1800: int;
  var vslice_dummy_var_1801: int;
  var vslice_dummy_var_1802: int;
  var vslice_dummy_var_1803: int;
  var vslice_dummy_var_1804: int;
  var vslice_dummy_var_1805: int;
  var vslice_dummy_var_1806: int;
  var vslice_dummy_var_1807: int;
  var vslice_dummy_var_1808: int;
  var vslice_dummy_var_1809: int;
  var vslice_dummy_var_1810: int;
  var vslice_dummy_var_1811: int;
  var vslice_dummy_var_1812: int;
  var vslice_dummy_var_1813: int;
  var vslice_dummy_var_1814: int;
  var vslice_dummy_var_1815: int;
  var vslice_dummy_var_1816: int;
  var vslice_dummy_var_1817: int;
  var vslice_dummy_var_1818: int;
  var vslice_dummy_var_1819: int;
  var vslice_dummy_var_1820: int;
  var vslice_dummy_var_1821: int;
  var vslice_dummy_var_1822: int;
  var vslice_dummy_var_1823: int;
  var vslice_dummy_var_1824: int;

  anon0:
    call {:si_unique_call 2311} Tmp_1071 := __HAVOC_malloc(20);
    call {:si_unique_call 2312} Tmp_1073 := __HAVOC_malloc(20);
    call {:si_unique_call 2313} Tmp_1077 := __HAVOC_malloc(20);
    call {:si_unique_call 2314} Tmp_1084 := __HAVOC_malloc(20);
    call {:si_unique_call 2315} Tmp_1088 := __HAVOC_malloc(20);
    call {:si_unique_call 2316} serialPhysicalMax := __HAVOC_malloc(20);
    call {:si_unique_call 2317} Tmp_1093 := __HAVOC_malloc(20);
    call {:si_unique_call 2318} Tmp_1097 := __HAVOC_malloc(20);
    PDevObj_21 := actual_PDevObj_21;
    PConfig_1 := actual_PConfig_1;
    call {:si_unique_call 2319} Tmp_1063 := __HAVOC_malloc(140);
    call {:si_unique_call 2320} Tmp_1064 := __HAVOC_malloc(60);
    call {:si_unique_call 2321} Tmp_1065 := __HAVOC_malloc(304);
    call {:si_unique_call 2322} Tmp_1066 := __HAVOC_malloc(312);
    call {:si_unique_call 2323} Tmp_1076 := __HAVOC_malloc(336);
    call {:si_unique_call 2324} Tmp_1081 := __HAVOC_malloc(300);
    call {:si_unique_call 2325} Tmp_1082 := __HAVOC_malloc(408);
    call {:si_unique_call 2326} Tmp_1083 := __HAVOC_malloc(744);
    call {:si_unique_call 2327} Tmp_1085 := __HAVOC_malloc(116);
    call {:si_unique_call 2328} Tmp_1086 := __HAVOC_malloc(132);
    call {:si_unique_call 2329} Tmp_1087 := __HAVOC_malloc(732);
    call {:si_unique_call 2330} Tmp_1090 := __HAVOC_malloc(436);
    call {:si_unique_call 2331} Tmp_1091 := __HAVOC_malloc(440);
    call {:si_unique_call 2332} Tmp_1094 := __HAVOC_malloc(180);
    call {:si_unique_call 2333} Tmp_1095 := __HAVOC_malloc(444);
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    havoc pDevExt_20;
    Tmp_1063 := strConst__li2bpl319;
    call {:si_unique_call 2334} vslice_dummy_var_600 := SerialDbgPrintEx(2, Tmp_1063);
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    Tmp_1087 := strConst__li2bpl320;
    call {:si_unique_call 2335} vslice_dummy_var_601 := SerialDbgPrintEx(4, Tmp_1087);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1768;
    havoc vslice_dummy_var_1769;
    call {:si_unique_call 2336} sdv_863 := SerialMemCompare(vslice_dummy_var_1768, vslice_dummy_var_1769, serialPhysicalMax, 0);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_863 != 2;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_1080;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1770;
    havoc vslice_dummy_var_1771;
    call {:si_unique_call 2337} SerialLogError(vslice_dummy_var_1770, 0, vslice_dummy_var_1771, Tmp_1073, 0, 0, 0, 43, 0, -1073348582, Tmp_1080, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_20))], 0, 0);
    Tmp_1066 := strConst__li2bpl306;
    call {:si_unique_call 2338} vslice_dummy_var_602 := SerialDbgPrintEx(1, Tmp_1066);
    Tmp_1062 := -1073741810;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:partition} sdv_863 == 2;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1772;
    havoc vslice_dummy_var_1773;
    call {:si_unique_call 2339} sdv_864 := SerialMemCompare(vslice_dummy_var_1772, vslice_dummy_var_1773, serialPhysicalMax, 0);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} sdv_864 != 2;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_1074;
    assume {:nonnull} Tmp_1097 != 0;
    assume Tmp_1097 > 0;
    assume {:nonnull} Tmp_1097 != 0;
    assume Tmp_1097 > 0;
    assume {:nonnull} Tmp_1097 != 0;
    assume Tmp_1097 > 0;
    assume {:nonnull} Tmp_1097 != 0;
    assume Tmp_1097 > 0;
    assume {:nonnull} Tmp_1097 != 0;
    assume Tmp_1097 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1774;
    havoc vslice_dummy_var_1775;
    call {:si_unique_call 2340} SerialLogError(vslice_dummy_var_1774, 0, vslice_dummy_var_1775, Tmp_1097, 0, 0, 0, 44, 0, -1073348581, Tmp_1074, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_20))], 0, 0);
    Tmp_1065 := strConst__li2bpl307;
    call {:si_unique_call 2341} vslice_dummy_var_603 := SerialDbgPrintEx(1, Tmp_1065);
    Tmp_1062 := -1073741810;
    goto L1;

  anon78_Then:
    assume {:partition} sdv_864 == 2;
    assume {:nonnull} Tmp_1093 != 0;
    assume Tmp_1093 > 0;
    assume {:nonnull} Tmp_1093 != 0;
    assume Tmp_1093 > 0;
    assume {:nonnull} Tmp_1093 != 0;
    assume Tmp_1093 > 0;
    assume {:nonnull} Tmp_1093 != 0;
    assume Tmp_1093 > 0;
    assume {:nonnull} Tmp_1093 != 0;
    assume Tmp_1093 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1776;
    havoc vslice_dummy_var_1777;
    call {:si_unique_call 2342} sdv_872 := SerialMemCompare(vslice_dummy_var_1776, vslice_dummy_var_1777, Tmp_1093, 0);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} sdv_872 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1778;
    havoc vslice_dummy_var_1779;
    havoc vslice_dummy_var_1780;
    havoc vslice_dummy_var_1781;
    call {:si_unique_call 2343} sdv_858 := SerialMemCompare(vslice_dummy_var_1778, vslice_dummy_var_1779, vslice_dummy_var_1780, vslice_dummy_var_1781);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} sdv_858 != 2;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_1096;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1782;
    havoc vslice_dummy_var_1783;
    havoc vslice_dummy_var_1784;
    call {:si_unique_call 2344} SerialLogError(vslice_dummy_var_1782, 0, vslice_dummy_var_1783, vslice_dummy_var_1784, 0, 0, 0, 45, 0, -1073348580, Tmp_1096, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_20))], 0, 0);
    Tmp_1076 := strConst__li2bpl308;
    call {:si_unique_call 2345} vslice_dummy_var_604 := SerialDbgPrintEx(1, Tmp_1076);
    Tmp_1062 := -1073741810;
    goto L1;

  anon80_Then:
    assume {:partition} sdv_858 == 2;
    goto L53;

  L53:
    call {:si_unique_call 2346} Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    call {:si_unique_call 2347} sdv_KeAcquireSpinLock(0, Tmp_1070);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    havoc oldIrql_11;
    call {:si_unique_call 2348} sdv_876 := sdv_IsListEmpty(0);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} sdv_876 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L75;

  L75:
    call {:si_unique_call 2349} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto L78;

  L78:
    call {:si_unique_call 2350} sdv_843, sdv_844, sdv_849, Tmp_1070, pCurDevObj, sdv_851, sdv_853, sdv_856, pExtension, oldIrql_11, Tmp_1083, sdv_867, sdv_870, vslice_dummy_var_605 := SerialFindInitController_loop_L78(sdv_843, sdv_844, sdv_849, Tmp_1070, pCurDevObj, sdv_851, sdv_853, sdv_856, Tmp_1077, pExtension, oldIrql_11, Tmp_1083, Tmp_1084, sdv_867, sdv_870, Tmp_1088, PConfig_1, vslice_dummy_var_605);
    goto L78_last;

  L78_last:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_1083 := strConst__li2bpl309;
    call {:si_unique_call 2351} vslice_dummy_var_605 := SerialDbgPrintEx(4, Tmp_1083);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1785;
    havoc vslice_dummy_var_1786;
    havoc vslice_dummy_var_1787;
    havoc vslice_dummy_var_1788;
    call {:si_unique_call 2352} sdv_844 := SerialMemCompare(vslice_dummy_var_1785, vslice_dummy_var_1786, vslice_dummy_var_1787, vslice_dummy_var_1788);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} sdv_844 != 2;
    Tmp_1082 := strConst__li2bpl310;
    call {:si_unique_call 2353} vslice_dummy_var_606 := SerialDbgPrintEx(1, Tmp_1082);
    Tmp_1062 := -1073741810;
    goto L1;

  anon87_Then:
    assume {:partition} sdv_844 == 2;
    assume {:nonnull} Tmp_1077 != 0;
    assume Tmp_1077 > 0;
    assume {:nonnull} Tmp_1077 != 0;
    assume Tmp_1077 > 0;
    assume {:nonnull} Tmp_1077 != 0;
    assume Tmp_1077 > 0;
    assume {:nonnull} Tmp_1077 != 0;
    assume Tmp_1077 > 0;
    assume {:nonnull} Tmp_1077 != 0;
    assume Tmp_1077 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1789;
    havoc vslice_dummy_var_1790;
    call {:si_unique_call 2354} sdv_867 := SerialMemCompare(vslice_dummy_var_1789, vslice_dummy_var_1790, Tmp_1077, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_867 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1791;
    havoc vslice_dummy_var_1792;
    havoc vslice_dummy_var_1793;
    havoc vslice_dummy_var_1794;
    call {:si_unique_call 2355} sdv_870 := SerialMemCompare(vslice_dummy_var_1791, vslice_dummy_var_1792, vslice_dummy_var_1793, vslice_dummy_var_1794);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_870 != 2;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1067;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_1092;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1795;
    havoc vslice_dummy_var_1796;
    havoc vslice_dummy_var_1797;
    call {:si_unique_call 2356} SerialLogError(vslice_dummy_var_1795, 0, vslice_dummy_var_1796, vslice_dummy_var_1797, 0, 0, 0, 47, 0, -1073348578, Tmp_1092, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_20))], Tmp_1067, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pExtension))]);
    Tmp_1091 := strConst__li2bpl311;
    call {:si_unique_call 2357} vslice_dummy_var_607 := SerialDbgPrintEx(1, Tmp_1091);
    Tmp_1062 := -1073741810;
    goto L1;

  anon89_Then:
    assume {:partition} sdv_870 == 2;
    assume {:nonnull} Tmp_1084 != 0;
    assume Tmp_1084 > 0;
    assume {:nonnull} Tmp_1084 != 0;
    assume Tmp_1084 > 0;
    assume {:nonnull} Tmp_1084 != 0;
    assume Tmp_1084 > 0;
    assume {:nonnull} Tmp_1084 != 0;
    assume Tmp_1084 > 0;
    assume {:nonnull} Tmp_1084 != 0;
    assume Tmp_1084 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1798;
    havoc vslice_dummy_var_1799;
    call {:si_unique_call 2358} sdv_843 := SerialMemCompare(vslice_dummy_var_1798, vslice_dummy_var_1799, Tmp_1084, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_843 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1800;
    havoc vslice_dummy_var_1801;
    havoc vslice_dummy_var_1802;
    havoc vslice_dummy_var_1803;
    call {:si_unique_call 2359} sdv_853 := SerialMemCompare(vslice_dummy_var_1800, vslice_dummy_var_1801, vslice_dummy_var_1802, vslice_dummy_var_1803);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_853 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1089;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_1072;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1804;
    havoc vslice_dummy_var_1805;
    havoc vslice_dummy_var_1806;
    call {:si_unique_call 2360} SerialLogError(vslice_dummy_var_1804, 0, vslice_dummy_var_1805, vslice_dummy_var_1806, 0, 0, 0, 48, 0, -1073348577, Tmp_1072, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_20))], Tmp_1089, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pExtension))]);
    Tmp_1090 := strConst__li2bpl312;
    call {:si_unique_call 2361} vslice_dummy_var_608 := SerialDbgPrintEx(1, Tmp_1090);
    Tmp_1062 := -1073741810;
    goto L1;

  anon91_Then:
    assume {:partition} sdv_853 != 1;
    goto L105;

  L105:
    assume {:nonnull} Tmp_1088 != 0;
    assume Tmp_1088 > 0;
    assume {:nonnull} Tmp_1088 != 0;
    assume Tmp_1088 > 0;
    assume {:nonnull} Tmp_1088 != 0;
    assume Tmp_1088 > 0;
    assume {:nonnull} Tmp_1088 != 0;
    assume Tmp_1088 > 0;
    assume {:nonnull} Tmp_1088 != 0;
    assume Tmp_1088 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1807;
    havoc vslice_dummy_var_1808;
    call {:si_unique_call 2362} sdv_856 := SerialMemCompare(vslice_dummy_var_1807, vslice_dummy_var_1808, Tmp_1088, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_856 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1809;
    havoc vslice_dummy_var_1810;
    havoc vslice_dummy_var_1811;
    havoc vslice_dummy_var_1812;
    call {:si_unique_call 2363} sdv_849 := SerialMemCompare(vslice_dummy_var_1809, vslice_dummy_var_1810, vslice_dummy_var_1811, vslice_dummy_var_1812);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_849 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1079;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_1069;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1813;
    havoc vslice_dummy_var_1814;
    havoc vslice_dummy_var_1815;
    call {:si_unique_call 2364} SerialLogError(vslice_dummy_var_1813, 0, vslice_dummy_var_1814, vslice_dummy_var_1815, 0, 0, 0, 49, 0, -1073348576, Tmp_1069, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_20))], Tmp_1079, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pExtension))]);
    Tmp_1095 := strConst__li2bpl313;
    call {:si_unique_call 2365} vslice_dummy_var_609 := SerialDbgPrintEx(1, Tmp_1095);
    Tmp_1062 := -1073741810;
    goto L1;

  anon93_Then:
    assume {:partition} sdv_849 != 1;
    goto L84;

  L84:
    call {:si_unique_call 2366} Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    call {:si_unique_call 2367} sdv_KeAcquireSpinLock(0, Tmp_1070);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    havoc oldIrql_11;
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    call {:si_unique_call 2368} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 2369} sdv_851 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_851;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    assume false;
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    assume false;
    return;

  anon92_Then:
    assume {:partition} sdv_856 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} sdv_843 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} sdv_867 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;

  anon83_Then:
    goto L79;

  L79:
    call {:si_unique_call 2370} Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    call {:si_unique_call 2371} sdv_KeAcquireSpinLock(0, Tmp_1070);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    havoc oldIrql_11;
    call {:si_unique_call 2372} sdv_877 := sdv_IsListEmpty(0);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_877 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L170;

  L170:
    call {:si_unique_call 2373} sdv_KeReleaseSpinLock(0, oldIrql_11);
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1816;
    havoc vslice_dummy_var_1817;
    call {:si_unique_call 2374} sdv_846 := SerialMemCompare(vslice_dummy_var_1816, vslice_dummy_var_1817, Tmp_1071, 0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_846 != 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    goto L182;

  L182:
    call {:si_unique_call 2375} Tmp_1070, pCurDevObj, sdv_861, pExtension, oldIrql_11, sdv_873 := SerialFindInitController_loop_L182(Tmp_1070, pCurDevObj, sdv_861, pExtension, oldIrql_11, sdv_873, PConfig_1);
    goto L182_last;

  L182_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1818;
    havoc vslice_dummy_var_1819;
    havoc vslice_dummy_var_1820;
    havoc vslice_dummy_var_1821;
    call {:si_unique_call 2376} sdv_873 := SerialMemCompare(vslice_dummy_var_1818, vslice_dummy_var_1819, vslice_dummy_var_1820, vslice_dummy_var_1821);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_873 == 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto L194;

  L194:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1075;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_1068;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1822;
    havoc vslice_dummy_var_1823;
    havoc vslice_dummy_var_1824;
    call {:si_unique_call 2377} SerialLogError(vslice_dummy_var_1822, 0, vslice_dummy_var_1823, vslice_dummy_var_1824, 0, 0, 0, 50, 0, -1073348575, Tmp_1068, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pDevExt_20))], Tmp_1075, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName__SERIAL_DEVICE_EXTENSION(pExtension))]);
    Tmp_1081 := strConst__li2bpl315;
    call {:si_unique_call 2378} vslice_dummy_var_612 := SerialDbgPrintEx(1, Tmp_1081);
    Tmp_1062 := -1073741810;
    goto L1;

  anon102_Then:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    Tmp_1085 := strConst__li2bpl316;
    call {:si_unique_call 2379} vslice_dummy_var_613 := SerialDbgPrintEx(4, Tmp_1085);
    Tmp_1064 := strConst__li2bpl317;
    call {:si_unique_call 2380} vslice_dummy_var_614 := SerialDbgPrintEx(4, Tmp_1064);
    call {:si_unique_call 2381} status_33 := SerialInitMultiPort(pExtension, PConfig_1, PDevObj_21);
    Tmp_1062 := status_33;
    goto L1;

  anon103_Then:
    goto L194;

  anon101_Then:
    assume {:partition} sdv_873 != 0;
    goto L183;

  L183:
    call {:si_unique_call 2382} Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    call {:si_unique_call 2383} sdv_KeAcquireSpinLock(0, Tmp_1070);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    havoc oldIrql_11;
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 2384} sdv_861 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_861;
    goto L216;

  L216:
    call {:si_unique_call 2385} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    assume false;
    return;

  anon105_Then:
    goto L178;

  L178:
    Tmp_1094 := strConst__li2bpl314;
    call {:si_unique_call 2386} vslice_dummy_var_610 := SerialDbgPrintEx(4, Tmp_1094);
    call {:si_unique_call 2387} status_33 := SerialInitOneController(PDevObj_21, PConfig_1);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} status_33 >= 0;
    call {:si_unique_call 2388} Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    call {:si_unique_call 2389} sdv_KeAcquireSpinLock(0, Tmp_1070);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    havoc oldIrql_11;
    call {:si_unique_call 2390} sdv_838 := sdv_IsListEmpty(0);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} sdv_838 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L241;

  L241:
    call {:si_unique_call 2391} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    goto L246;

  L246:
    call {:si_unique_call 2392} Tmp_1070, pCurDevObj, sdv_850, pExtension, oldIrql_11 := SerialFindInitController_loop_L246(Tmp_1070, pCurDevObj, sdv_850, pExtension, oldIrql_11, PConfig_1);
    goto L246_last;

  L246_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    call {:si_unique_call 2393} sdv_ExFreePool(0);
    Tmp_1086 := strConst__li2bpl318;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1078;
    call {:si_unique_call 2394} vslice_dummy_var_611 := SerialDbgPrintEx(4, Tmp_1086);
    call {:si_unique_call 2395} vslice_dummy_var_599 := KeSynchronizeExecution(0, li2bplFunctionConstant1048, 0);
    Tmp_1062 := 0;
    goto L1;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 2396} Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    call {:si_unique_call 2397} sdv_KeAcquireSpinLock(0, Tmp_1070);
    assume {:nonnull} Tmp_1070 != 0;
    assume Tmp_1070 > 0;
    havoc oldIrql_11;
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 2398} sdv_850 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_850;
    goto L264;

  L264:
    call {:si_unique_call 2399} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    assume false;
    return;

  anon112_Then:
    goto L245;

  L245:
    Tmp_1062 := 0;
    goto L1;

  anon111_Then:
    goto L245;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;

  anon108_Then:
    goto L245;

  anon107_Then:
    assume {:partition} sdv_838 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 2400} sdv_845 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_845;
    goto L241;

  anon106_Then:
    assume {:partition} 0 > status_33;
    Tmp_1062 := status_33;
    goto L1;

  anon104_Then:
    goto L178;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;

  anon97_Then:
    goto L178;

  anon96_Then:
    assume {:partition} sdv_846 == 0;
    goto L178;

  anon95_Then:
    assume {:partition} sdv_877 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 2401} sdv_866 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_866;
    goto L170;

  anon82_Then:
    goto L79;

  anon81_Then:
    assume {:partition} sdv_876 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 2402} sdv_839 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_839;
    goto L75;

  anon79_Then:
    assume {:partition} sdv_872 == 0;
    goto L53;
}



procedure {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_1098: int);
  free ensures {:va_keep} Tmp_1098 == -1073741811 || Tmp_1098 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_1098: int)
{
  var {:scalar} maxRemain: int;
  var {:scalar} maxRemain80: int;
  var {:scalar} remainder: int;
  var {:scalar} maxRemain30: int;
  var {:scalar} maxRemain42: int;
  var {:scalar} maxRemain18: int;
  var {:scalar} calculatedDivisor: int;
  var {:scalar} status_34: int;
  var {:scalar} denominator: int;
  var {:scalar} ClockRate: int;
  var {:scalar} DesiredBaud: int;
  var {:pointer} AppropriateDivisor_1: int;

  anon0:
    ClockRate := actual_ClockRate;
    DesiredBaud := actual_DesiredBaud;
    AppropriateDivisor_1 := actual_AppropriateDivisor_1;
    status_34 := 0;
    maxRemain18 := 18432;
    maxRemain30 := 30720;
    maxRemain42 := 42336;
    maxRemain80 := 80000;
    denominator := DesiredBaud * 16;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} 0 >= DesiredBaud;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto L21;

  L21:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    status_34 := -1073741811;
    goto L22;

  L22:
    Tmp_1098 := status_34;
    return;

  anon52_Then:
    goto L22;

  anon74_Then:
    assume {:partition} DesiredBaud > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} DesiredBaud > denominator;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto L21;

  anon51_Then:
    assume {:partition} denominator >= DesiredBaud;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} ClockRate == 1843200;
    maxRemain := maxRemain18;
    goto L28;

  L28:
    calculatedDivisor := INTDIV(ClockRate, denominator);
    remainder := INTMOD(ClockRate, denominator);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} remainder * 2 > ClockRate;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} DesiredBaud != 110;
    calculatedDivisor := calculatedDivisor + 1;
    goto L31;

  L31:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} DesiredBaud >= 9600;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} remainder >= maxRemain;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} ClockRate > remainder + maxRemain;
    calculatedDivisor := -1;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} denominator > ClockRate;
    calculatedDivisor := -1;
    goto L38;

  L38:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} ClockRate == 1843200;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 2;
    goto L42;

  L42:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto L21;

  anon62_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon60_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} ClockRate == 3072000;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 13;
    goto L42;

  anon64_Then:
    assume {:partition} DesiredBaud != 14400;
    goto L42;

  anon61_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} ClockRate == 4233600;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} DesiredBaud == 9600;
    calculatedDivisor := 28;
    goto L42;

  anon66_Then:
    assume {:partition} DesiredBaud != 9600;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 18;
    goto L42;

  anon67_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} DesiredBaud == 19200;
    calculatedDivisor := 14;
    goto L42;

  anon68_Then:
    assume {:partition} DesiredBaud != 19200;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} DesiredBaud == 38400;
    calculatedDivisor := 7;
    goto L42;

  anon69_Then:
    assume {:partition} DesiredBaud != 38400;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 5;
    goto L42;

  anon70_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon63_Then:
    assume {:partition} ClockRate != 4233600;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ClockRate == 8000000;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 35;
    goto L42;

  anon71_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 9;
    goto L42;

  anon72_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon65_Then:
    assume {:partition} ClockRate != 8000000;
    goto L42;

  anon57_Then:
    assume {:partition} ClockRate >= denominator;
    goto L38;

  anon59_Then:
    assume {:partition} remainder + maxRemain >= ClockRate;
    goto L34;

  anon58_Then:
    assume {:partition} maxRemain > remainder;
    goto L34;

  anon55_Then:
    assume {:partition} 9600 > DesiredBaud;
    goto L34;

  anon56_Then:
    assume {:partition} DesiredBaud == 110;
    goto L31;

  anon75_Then:
    assume {:partition} ClockRate >= remainder * 2;
    goto L31;

  anon53_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} ClockRate == 3072000;
    maxRemain := maxRemain30;
    goto L28;

  anon54_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} ClockRate == 4233600;
    maxRemain := maxRemain42;
    goto L28;

  anon73_Then:
    assume {:partition} ClockRate != 4233600;
    maxRemain := maxRemain80;
    goto L28;
}



procedure {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_22: int, actual_DisableUART: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_22: int, actual_DisableUART: int)
{
  var {:pointer} Tmp_1100: int;
  var {:pointer} Tmp_1101: int;
  var {:pointer} pDevExt_21: int;
  var {:pointer} sdv_879: int;
  var {:pointer} Tmp_1105: int;
  var {:pointer} countSoFar_2: int;
  var {:pointer} PDevObj_22: int;
  var {:scalar} DisableUART: int;
  var vslice_dummy_var_615: int;
  var vslice_dummy_var_616: int;
  var vslice_dummy_var_617: int;
  var vslice_dummy_var_618: int;

  anon0:
    call {:si_unique_call 2403} vslice_dummy_var_615 := __HAVOC_malloc(4);
    PDevObj_22 := actual_PDevObj_22;
    DisableUART := actual_DisableUART;
    call {:si_unique_call 2404} Tmp_1101 := __HAVOC_malloc(136);
    call {:si_unique_call 2405} Tmp_1105 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj_22 != 0;
    assume PDevObj_22 > 0;
    havoc pDevExt_21;
    call {:si_unique_call 2406} sdv_do_paged_code_check();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} DisableUART != 0;
    Tmp_1100 := strConst__li2bpl322;
    goto L11;

  L11:
    Tmp_1101 := strConst__li2bpl323;
    call {:si_unique_call 2407} vslice_dummy_var_617 := SerialDbgPrintEx(2, Tmp_1101);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 2408} sdv_879 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_879 != 0;
    assume sdv_879 > 0;
    countSoFar_2 := SerialCount__CONFIGURATION_INFORMATION(sdv_879);
    assume {:nonnull} countSoFar_2 != 0;
    assume countSoFar_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L26;

  L26:
    call {:si_unique_call 2409} vslice_dummy_var_616 := IoWMIRegistrationControl(0, 2);
    goto L15;

  L15:
    call {:si_unique_call 2410} SerialUndoExternalNaming(pDevExt_21);
    Tmp_1105 := strConst__li2bpl324;
    call {:si_unique_call 2411} vslice_dummy_var_618 := SerialDbgPrintEx(2, Tmp_1105);
    return;

  anon12_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} DisableUART != 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L29;

  L29:
    call {:si_unique_call 2412} SerialReleaseResources(pDevExt_21);
    goto L26;

  anon11_Then:
    assume {:partition} DisableUART == 0;
    goto L29;

  anon10_Then:
    goto L15;

  anon9_Then:
    assume {:partition} DisableUART == 0;
    Tmp_1100 := strConst__li2bpl321;
    goto L11;
}



procedure {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_1106: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1106 == 0 || Tmp_1106 == 2 || Tmp_1106 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_1106: int)
{
  var {:scalar} A: int;
  var {:scalar} B: int;
  var {:scalar} b: int;
  var {:scalar} higher: int;
  var {:scalar} lowerSpan: int;
  var {:scalar} lower: int;
  var {:scalar} a: int;
  var {:pointer} structPtr888A: int;
  var {:scalar} SpanOfA: int;
  var {:pointer} structPtr888B: int;
  var {:scalar} SpanOfB: int;

  anon0:
    call {:si_unique_call 2413} A := __HAVOC_malloc(20);
    call {:si_unique_call 2414} B := __HAVOC_malloc(20);
    call {:si_unique_call 2415} b := __HAVOC_malloc(20);
    call {:si_unique_call 2416} higher := __HAVOC_malloc(20);
    call {:si_unique_call 2417} lower := __HAVOC_malloc(20);
    call {:si_unique_call 2418} a := __HAVOC_malloc(20);
    structPtr888A := actual_structPtr888A;
    SpanOfA := actual_SpanOfA;
    structPtr888B := actual_structPtr888B;
    SpanOfB := actual_SpanOfB;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    call {:si_unique_call 2419} sdv_do_paged_code_check();
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_1106 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfB;
    goto L20;

  L20:
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1106 := 2;
    goto L1;

  anon8_Then:
    Tmp_1106 := 1;
    goto L1;

  anon7_Then:
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfA;
    goto L20;
}



procedure {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_26: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_1108: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1108 == 0 || Tmp_1108 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_26: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_1108: int)
{
  var {:scalar} oldLCRContents: int;
  var {:pointer} Tmp_1112: int;
  var {:pointer} PDivisor: int;
  var {:pointer} Tmp_1119: int;
  var {:scalar} regContents: int;
  var {:scalar} Lsb: int;
  var {:scalar} Tmp_1125: int;
  var {:scalar} value1: int;
  var {:dopa} {:scalar} value2: int;
  var {:scalar} returnValue: int;
  var {:scalar} oldIrql_12: int;
  var {:scalar} Tmp_1129: int;
  var {:scalar} sdv_887: int;
  var {:scalar} sdv_889: int;
  var {:scalar} Tmp_1132: int;
  var {:scalar} LineControl_1: int;
  var {:pointer} Address_1: int;
  var {:scalar} Tmp_1134: int;
  var {:pointer} Tmp_1135: int;
  var {:pointer} Tmp_1136: int;
  var {:pointer} Tmp_1142: int;
  var {:pointer} Extension_26: int;
  var {:pointer} InsertString: int;
  var {:scalar} ForceFifo: int;
  var {:scalar} LogFifo: int;
  var boogieTmp: int;
  var vslice_dummy_var_619: int;
  var vslice_dummy_var_620: int;
  var vslice_dummy_var_621: int;
  var vslice_dummy_var_622: int;
  var vslice_dummy_var_623: int;
  var vslice_dummy_var_1825: int;
  var vslice_dummy_var_1826: int;
  var vslice_dummy_var_1827: int;
  var vslice_dummy_var_1828: int;
  var vslice_dummy_var_1829: int;
  var vslice_dummy_var_1830: int;

  anon0:
    call {:si_unique_call 2420} Tmp_1125 := __HAVOC_malloc(20);
    call {:si_unique_call 2421} value2 := __HAVOC_malloc(4);
    call {:si_unique_call 2422} Tmp_1132 := __HAVOC_malloc(20);
    Extension_26 := actual_Extension_26;
    InsertString := actual_InsertString;
    ForceFifo := actual_ForceFifo;
    LogFifo := actual_LogFifo;
    call {:si_unique_call 2423} Tmp_1135 := __HAVOC_malloc(148);
    returnValue := 1;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    call {:si_unique_call 2424} oldLCRContents := corral_nondet();
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    call {:si_unique_call 2425} vslice_dummy_var_620 := corral_nondet();
    call {:si_unique_call 2426} Tmp_1136 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1136 != 0;
    assume Tmp_1136 > 0;
    call {:si_unique_call 2427} sdv_KeRaiseIrql(30, Tmp_1136);
    assume {:nonnull} Tmp_1136 != 0;
    assume Tmp_1136 > 0;
    havoc oldIrql_12;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    call {:si_unique_call 2428} sdv_887 := corral_nondet();
    value1 := sdv_887;
    call {:si_unique_call 2429} value1 := corral_nondet();
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    call {:si_unique_call 2430} sdv_889 := corral_nondet();
    value1 := BOR(value1, sdv_889);
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc Address_1;
    PDivisor := value2;
    call {:si_unique_call 2431} LineControl_1 := corral_nondet();
    call {:si_unique_call 2432} Lsb := corral_nondet();
    call {:si_unique_call 2433} vslice_dummy_var_621 := corral_nondet();
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    call {:si_unique_call 2434} boogieTmp := corral_nondet();
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    call {:si_unique_call 2435} sdv_KeLowerIrql(oldIrql_12);
    assume {:nonnull} value2 != 0;
    assume value2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_1129;
    assume {:nonnull} Tmp_1132 != 0;
    assume Tmp_1132 > 0;
    assume {:nonnull} Tmp_1132 != 0;
    assume Tmp_1132 > 0;
    assume {:nonnull} Tmp_1132 != 0;
    assume Tmp_1132 > 0;
    assume {:nonnull} Tmp_1132 != 0;
    assume Tmp_1132 > 0;
    assume {:nonnull} Tmp_1132 != 0;
    assume Tmp_1132 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc Tmp_1142;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_1142 != 0;
    assume Tmp_1142 > 0;
    havoc vslice_dummy_var_1825;
    havoc vslice_dummy_var_1826;
    havoc vslice_dummy_var_1827;
    call {:si_unique_call 2436} SerialLogError(vslice_dummy_var_1825, vslice_dummy_var_1826, vslice_dummy_var_1827, Tmp_1132, 0, 0, 0, 62, 0, -1073348572, Tmp_1129, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(InsertString)], 0, 0);
    returnValue := 0;
    goto L89;

  L89:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} returnValue != 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    call {:si_unique_call 2437} regContents := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(regContents, 192) != 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    call {:si_unique_call 2438} vslice_dummy_var_622 := corral_nondet();
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto L116;

  L116:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ForceFifo != 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L133;

  L133:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} LogFifo != 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_1134;
    assume {:nonnull} Tmp_1125 != 0;
    assume Tmp_1125 > 0;
    assume {:nonnull} Tmp_1125 != 0;
    assume Tmp_1125 > 0;
    assume {:nonnull} Tmp_1125 != 0;
    assume Tmp_1125 > 0;
    assume {:nonnull} Tmp_1125 != 0;
    assume Tmp_1125 > 0;
    assume {:nonnull} Tmp_1125 != 0;
    assume Tmp_1125 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc Tmp_1112;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_1112 != 0;
    assume Tmp_1112 > 0;
    havoc vslice_dummy_var_1828;
    havoc vslice_dummy_var_1829;
    havoc vslice_dummy_var_1830;
    call {:si_unique_call 2439} SerialLogError(vslice_dummy_var_1828, vslice_dummy_var_1829, vslice_dummy_var_1830, Tmp_1125, 0, 0, 0, 15, 0, -1073348606, Tmp_1134, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(InsertString)], 0, 0);
    goto L136;

  L136:
    Tmp_1135 := strConst__li2bpl325;
    call {:si_unique_call 2440} vslice_dummy_var_623 := SerialDbgPrintEx(4, Tmp_1135);
    goto L134;

  L134:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L97;

  L97:
    Tmp_1108 := returnValue;
    return;

  anon29_Then:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2441} vslice_dummy_var_619 := corral_nondet();
    goto L97;

  anon30_Then:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc Tmp_1119;
    assume {:nonnull} Tmp_1119 != 0;
    assume Tmp_1119 > 0;
    goto L97;

  anon27_Then:
    goto L97;

  anon28_Then:
    assume {:partition} LogFifo == 0;
    goto L136;

  anon26_Then:
    goto L134;

  anon25_Then:
    goto L131;

  L131:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto L133;

  anon24_Then:
    assume {:partition} ForceFifo == 0;
    goto L131;

  anon23_Then:
    assume {:partition} BAND(regContents, 192) == 0;
    goto L116;

  anon22_Then:
    assume {:partition} returnValue == 0;
    goto L97;

  anon21_Then:
    goto L89;
}



procedure {:origName "DriverEntry"} DriverEntry(actual_DriverObject_7: int, actual_RegistryPath_2: int) returns (Tmp_1144: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, SLAM_guard_O_0, handleState, Mem_T.PVOID, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> handleState != 0;
  free ensures {:va_keep} old(handleState) == 2 ==> handleState != 0;
  free ensures {:va_keep} handleState == 1 || handleState == 2 || handleState == old(handleState);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "DriverEntry"} DriverEntry(actual_DriverObject_7: int, actual_RegistryPath_2: int) returns (Tmp_1144: int)
{
  var {:pointer} Tmp_1145: int;
  var {:scalar} Tmp_1146: int;
  var {:pointer} Tmp_1147: int;
  var {:pointer} Tmp_1148: int;
  var {:scalar} Tmp_1149: int;
  var {:pointer} Tmp_1150: int;
  var {:pointer} sdv_893: int;
  var {:pointer} Tmp_1151: int;
  var {:pointer} lockPtr_1: int;
  var {:scalar} Tmp_1152: int;
  var {:pointer} Tmp_1153: int;
  var {:pointer} Tmp_1154: int;
  var {:pointer} Tmp_1155: int;
  var {:pointer} Tmp_1156: int;
  var {:pointer} Tmp_1157: int;
  var {:pointer} Tmp_1158: int;
  var {:pointer} Tmp_1159: int;
  var {:pointer} Tmp_1160: int;
  var {:pointer} Tmp_1161: int;
  var {:pointer} Tmp_1162: int;
  var {:pointer} Tmp_1163: int;
  var {:pointer} DriverObject_7: int;
  var {:pointer} RegistryPath_2: int;
  var vslice_dummy_var_624: int;
  var vslice_dummy_var_625: int;
  var vslice_dummy_var_626: int;

  anon0:
    DriverObject_7 := actual_DriverObject_7;
    RegistryPath_2 := actual_RegistryPath_2;
    call {:si_unique_call 2442} Tmp_1145 := __HAVOC_malloc(112);
    call {:si_unique_call 2443} Tmp_1147 := __HAVOC_malloc(112);
    call {:si_unique_call 2444} Tmp_1148 := __HAVOC_malloc(112);
    call {:si_unique_call 2445} Tmp_1150 := __HAVOC_malloc(112);
    call {:si_unique_call 2446} Tmp_1153 := __HAVOC_malloc(112);
    call {:si_unique_call 2447} Tmp_1154 := __HAVOC_malloc(112);
    call {:si_unique_call 2448} Tmp_1155 := __HAVOC_malloc(112);
    call {:si_unique_call 2449} Tmp_1156 := __HAVOC_malloc(112);
    call {:si_unique_call 2450} Tmp_1157 := __HAVOC_malloc(180);
    call {:si_unique_call 2451} Tmp_1158 := __HAVOC_malloc(112);
    call {:si_unique_call 2452} Tmp_1160 := __HAVOC_malloc(112);
    call {:si_unique_call 2453} Tmp_1161 := __HAVOC_malloc(112);
    call {:si_unique_call 2454} Tmp_1162 := __HAVOC_malloc(112);
    call {:si_unique_call 2455} Tmp_1163 := __HAVOC_malloc(112);
    call {:si_unique_call 2456} lockPtr_1 := sdv_MmLockPagableCodeSection(li2bplFunctionConstant522);
    call {:si_unique_call 2457} sdv_do_paged_code_check();
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    havoc Tmp_1152;
    call {:si_unique_call 2458} sdv_893 := ExAllocatePoolWithTag(1, Tmp_1152, -666022077);
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath__SERIAL_GLOBALS(SerialGlobals))] := sdv_893;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath__SERIAL_GLOBALS(SerialGlobals))] != 0;
    havoc Tmp_1146;
    call {:si_unique_call 2459} sdv_RtlZeroMemory(0, Tmp_1146);
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    havoc Tmp_1149;
    call {:si_unique_call 2460} sdv_RtlMoveMemory(0, 0, Tmp_1149);
    call {:si_unique_call 2461} Tmp_1151 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1151 != 0;
    assume Tmp_1151 > 0;
    call {:si_unique_call 2462} sdv_KeInitializeSpinLock(Tmp_1151);
    assume {:nonnull} Tmp_1151 != 0;
    assume Tmp_1151 > 0;
    call {:si_unique_call 2463} InitializeListHead(AllDevObjs__SERIAL_GLOBALS(SerialGlobals));
    call {:si_unique_call 2464} vslice_dummy_var_624 := SerialGetConfigDefaults(driverDefaults, RegistryPath_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 2465} sdv_DbgBreakPoint();
    goto L41;

  L41:
    Tmp_1157 := strConst__li2bpl326;
    call {:si_unique_call 2466} vslice_dummy_var_626 := SerialDbgPrintEx(3, Tmp_1157);
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1159;
    assume {:nonnull} Tmp_1159 != 0;
    assume Tmp_1159 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1161;
    assume {:nonnull} Tmp_1161 != 0;
    assume Tmp_1161 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1160;
    assume {:nonnull} Tmp_1160 != 0;
    assume Tmp_1160 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1158;
    assume {:nonnull} Tmp_1158 != 0;
    assume Tmp_1158 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1150;
    assume {:nonnull} Tmp_1150 != 0;
    assume Tmp_1150 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1155;
    assume {:nonnull} Tmp_1155 != 0;
    assume Tmp_1155 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1153;
    assume {:nonnull} Tmp_1153 != 0;
    assume Tmp_1153 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1148;
    assume {:nonnull} Tmp_1148 != 0;
    assume Tmp_1148 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1156;
    assume {:nonnull} Tmp_1156 != 0;
    assume Tmp_1156 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1145;
    assume {:nonnull} Tmp_1145 != 0;
    assume Tmp_1145 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1147;
    assume {:nonnull} Tmp_1147 != 0;
    assume Tmp_1147 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1163;
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1162;
    assume {:nonnull} Tmp_1162 != 0;
    assume Tmp_1162 > 0;
    assume {:nonnull} DriverObject_7 != 0;
    assume DriverObject_7 > 0;
    havoc Tmp_1154;
    assume {:nonnull} Tmp_1154 != 0;
    assume Tmp_1154 > 0;
    call {:si_unique_call 2467} vslice_dummy_var_625 := SerialEnumerateLegacy(DriverObject_7, RegistryPath_2, driverDefaults);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2468} MmUnlockPagableImageSection(0);
    Tmp_1144 := 0;
    goto L1;

  L1:
    call {:si_unique_call 2469} SLIC_DriverEntry_exit(strConst__li2bpl0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    goto L41;

  anon10_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath__SERIAL_GLOBALS(SerialGlobals))] == 0;
    call {:si_unique_call 2470} MmUnlockPagableImageSection(0);
    Tmp_1144 := -1073741670;
    goto L1;
}



procedure {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_23: int, actual_PConfigData_1: int) returns (Tmp_1164: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1164 == -1073741670 || Tmp_1164 == -1073741709 || Tmp_1164 == -1073741810 || Tmp_1164 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_23: int, actual_PConfigData_1: int) returns (Tmp_1164: int)
{
  var {:pointer} pDevExt_22: int;
  var {:scalar} status_35: int;
  var {:pointer} PDevObj_23: int;
  var {:pointer} PConfigData_1: int;

  anon0:
    PDevObj_23 := actual_PDevObj_23;
    PConfigData_1 := actual_PConfigData_1;
    call {:si_unique_call 2471} sdv_do_paged_code_check();
    call {:si_unique_call 2472} status_35 := SerialInitController(PDevObj_23, PConfigData_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_35 >= 0;
    assume {:nonnull} PDevObj_23 != 0;
    assume PDevObj_23 > 0;
    havoc pDevExt_22;
    assume {:nonnull} pDevExt_22 != 0;
    assume pDevExt_22 > 0;
    assume {:nonnull} pDevExt_22 != 0;
    assume pDevExt_22 > 0;
    assume {:nonnull} pDevExt_22 != 0;
    assume pDevExt_22 > 0;
    assume {:nonnull} pDevExt_22 != 0;
    assume pDevExt_22 > 0;
    goto L13;

  L13:
    Tmp_1164 := status_35;
    return;

  anon3_Then:
    assume {:partition} 0 > status_35;
    goto L13;
}



procedure {:origName "SerialInitController"} SerialInitController(actual_PDevObj_24: int, actual_PConfigData_2: int) returns (Tmp_1166: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1166 == -1073741670 || Tmp_1166 == -1073741709 || Tmp_1166 == -1073741810 || Tmp_1166 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialInitController"} SerialInitController(actual_PDevObj_24: int, actual_PConfigData_2: int) returns (Tmp_1166: int)
{
  var {:scalar} sdv_898: int;
  var {:scalar} sdv_899: int;
  var {:scalar} sdv_900: int;
  var {:scalar} sdv_901: int;
  var {:scalar} sdv_902: int;
  var {:scalar} sdv_904: int;
  var {:scalar} sdv_905: int;
  var {:scalar} sdv_906: int;
  var {:scalar} sdv_907: int;
  var {:scalar} sdv_908: int;
  var {:scalar} sdv_909: int;
  var {:scalar} sdv_910: int;
  var {:scalar} sdv_911: int;
  var {:scalar} Tmp_1167: int;
  var {:scalar} sdv_912: int;
  var {:scalar} Tmp_1168: int;
  var {:scalar} sdv_913: int;
  var {:scalar} sdv_914: int;
  var {:pointer} Tmp_1169: int;
  var {:pointer} Tmp_1170: int;
  var {:pointer} pDevExt_23: int;
  var {:dopa} {:scalar} junk: int;
  var {:scalar} sdv_916: int;
  var {:scalar} sdv_917: int;
  var {:pointer} sdv_918: int;
  var {:pointer} Tmp_1171: int;
  var {:scalar} Tmp_1172: int;
  var {:scalar} sdv_919: int;
  var {:scalar} Tmp_1173: int;
  var {:scalar} sdv_920: int;
  var {:scalar} sdv_922: int;
  var {:scalar} sdv_923: int;
  var {:pointer} Tmp_1174: int;
  var {:scalar} sdv_925: int;
  var {:scalar} sdv_927: int;
  var {:scalar} Tmp_1175: int;
  var {:pointer} sdv_929: int;
  var {:pointer} sdv_930: int;
  var {:scalar} sdv_931: int;
  var {:scalar} sdv_932: int;
  var {:scalar} Tmp_1177: int;
  var {:scalar} sdv_933: int;
  var {:pointer} Tmp_1178: int;
  var {:scalar} sdv_934: int;
  var {:scalar} sdv_935: int;
  var {:scalar} sdv_936: int;
  var {:scalar} Tmp_1179: int;
  var {:scalar} sdv_937: int;
  var {:pointer} Tmp_1180: int;
  var {:scalar} sdv_939: int;
  var {:scalar} Tmp_1181: int;
  var {:scalar} sdv_940: int;
  var {:scalar} status_36: int;
  var {:scalar} sdv_941: int;
  var {:scalar} allocedISRSw: int;
  var {:scalar} sdv_942: int;
  var {:scalar} sdv_943: int;
  var {:pointer} Tmp_1182: int;
  var {:scalar} Tmp_1183: int;
  var {:scalar} sdv_944: int;
  var {:pointer} Tmp_1184: int;
  var {:scalar} sdv_945: int;
  var {:pointer} Tmp_1185: int;
  var {:scalar} sdv_947: int;
  var {:scalar} Tmp_1187: int;
  var {:pointer} PDevObj_24: int;
  var {:pointer} PConfigData_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_627: int;
  var vslice_dummy_var_628: int;
  var vslice_dummy_var_629: int;
  var vslice_dummy_var_630: int;
  var vslice_dummy_var_631: int;
  var vslice_dummy_var_632: int;
  var vslice_dummy_var_633: int;
  var vslice_dummy_var_634: int;
  var vslice_dummy_var_1831: int;
  var vslice_dummy_var_1832: int;
  var vslice_dummy_var_1833: int;
  var vslice_dummy_var_1834: int;
  var vslice_dummy_var_1835: int;
  var vslice_dummy_var_1836: int;
  var vslice_dummy_var_1837: int;
  var vslice_dummy_var_1838: int;
  var vslice_dummy_var_1839: int;
  var vslice_dummy_var_1840: int;
  var vslice_dummy_var_1841: int;
  var vslice_dummy_var_1842: int;
  var vslice_dummy_var_1843: int;
  var vslice_dummy_var_1844: int;
  var vslice_dummy_var_1845: int;
  var vslice_dummy_var_1846: int;
  var vslice_dummy_var_1847: int;
  var vslice_dummy_var_1848: int;
  var vslice_dummy_var_1849: int;
  var vslice_dummy_var_1850: int;
  var vslice_dummy_var_1851: int;
  var vslice_dummy_var_1852: int;
  var vslice_dummy_var_1853: int;
  var vslice_dummy_var_1854: int;
  var vslice_dummy_var_1855: int;
  var vslice_dummy_var_1856: int;
  var vslice_dummy_var_1857: int;
  var vslice_dummy_var_1858: int;
  var vslice_dummy_var_1859: int;
  var vslice_dummy_var_1860: int;
  var vslice_dummy_var_1861: int;
  var vslice_dummy_var_1862: int;
  var vslice_dummy_var_1863: int;
  var vslice_dummy_var_1864: int;
  var vslice_dummy_var_1865: int;
  var vslice_dummy_var_1866: int;
  var vslice_dummy_var_1867: int;
  var vslice_dummy_var_1868: int;
  var vslice_dummy_var_1869: int;
  var vslice_dummy_var_1870: int;
  var vslice_dummy_var_1871: int;

  anon0:
    call {:si_unique_call 2473} junk := __HAVOC_malloc(4);
    call {:si_unique_call 2474} Tmp_1173 := __HAVOC_malloc(20);
    call {:si_unique_call 2475} Tmp_1177 := __HAVOC_malloc(20);
    call {:si_unique_call 2476} Tmp_1181 := __HAVOC_malloc(20);
    call {:si_unique_call 2477} Tmp_1183 := __HAVOC_malloc(20);
    PDevObj_24 := actual_PDevObj_24;
    PConfigData_2 := actual_PConfigData_2;
    call {:si_unique_call 2478} Tmp_1169 := __HAVOC_malloc(204);
    call {:si_unique_call 2479} Tmp_1170 := __HAVOC_malloc(136);
    call {:si_unique_call 2480} Tmp_1171 := __HAVOC_malloc(140);
    call {:si_unique_call 2481} Tmp_1174 := __HAVOC_malloc(184);
    call {:si_unique_call 2482} Tmp_1178 := __HAVOC_malloc(180);
    call {:si_unique_call 2483} Tmp_1182 := __HAVOC_malloc(840);
    call {:si_unique_call 2484} Tmp_1184 := __HAVOC_malloc(196);
    call {:si_unique_call 2485} Tmp_1185 := __HAVOC_malloc(204);
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    havoc pDevExt_23;
    status_36 := 0;
    allocedISRSw := 0;
    call {:si_unique_call 2486} sdv_do_paged_code_check();
    Tmp_1174 := strConst__li2bpl327;
    call {:si_unique_call 2487} vslice_dummy_var_627 := SerialDbgPrintEx(4, Tmp_1174);
    assume {:nonnull} KdComPortInUse != 0;
    assume KdComPortInUse > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    Tmp_1178 := strConst__li2bpl328;
    call {:si_unique_call 2488} vslice_dummy_var_628 := SerialDbgPrintEx(0, Tmp_1178);
    Tmp_1170 := strConst__li2bpl329;
    call {:si_unique_call 2489} vslice_dummy_var_629 := SerialDbgPrintEx(0, Tmp_1170);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc Tmp_1187;
    assume {:nonnull} Tmp_1177 != 0;
    assume Tmp_1177 > 0;
    assume {:nonnull} Tmp_1177 != 0;
    assume Tmp_1177 > 0;
    assume {:nonnull} Tmp_1177 != 0;
    assume Tmp_1177 > 0;
    assume {:nonnull} Tmp_1177 != 0;
    assume Tmp_1177 > 0;
    assume {:nonnull} Tmp_1177 != 0;
    assume Tmp_1177 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1831;
    havoc vslice_dummy_var_1832;
    call {:si_unique_call 2490} SerialLogError(vslice_dummy_var_1831, 0, vslice_dummy_var_1832, Tmp_1177, 0, 0, 0, 3, 0, -1073348607, Tmp_1187, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_23))], 0, 0);
    Tmp_1166 := -1073741670;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto L36;

  L36:
    call {:si_unique_call 2491} KeInitializeTimer(0);
    call {:si_unique_call 2492} KeInitializeTimer(0);
    call {:si_unique_call 2493} KeInitializeTimer(0);
    call {:si_unique_call 2494} KeInitializeTimer(0);
    call {:si_unique_call 2495} KeInitializeTimer(0);
    call {:si_unique_call 2496} KeInitializeTimer(0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2497} KeInitializeDpc(CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant577, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2498} KeInitializeDpc(CompleteReadDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant723, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2499} KeInitializeDpc(TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant726, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2500} KeInitializeDpc(IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant728, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2501} KeInitializeDpc(TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant579, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2502} KeInitializeDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant1040, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2503} KeInitializeDpc(CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant1041, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2504} KeInitializeDpc(TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant1042, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2505} KeInitializeDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant622, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2506} KeInitializeDpc(XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant581, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2507} KeInitializeDpc(XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant580, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2508} KeInitializeDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant899, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2509} KeInitializeDpc(PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant901, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2510} KeInitializeDpc(IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant678, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2511} KeInitializeDpc(SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_23), li2bplFunctionConstant673, 0);
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_1168;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1833;
    havoc vslice_dummy_var_1834;
    havoc vslice_dummy_var_1835;
    havoc vslice_dummy_var_1836;
    call {:si_unique_call 2512} sdv_929 := SerialGetMappedAddress(vslice_dummy_var_1833, vslice_dummy_var_1834, vslice_dummy_var_1835, vslice_dummy_var_1836, Tmp_1168, UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_23));
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_1167;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1837;
    havoc vslice_dummy_var_1838;
    havoc vslice_dummy_var_1839;
    havoc vslice_dummy_var_1840;
    call {:si_unique_call 2513} sdv_918 := SerialGetMappedAddress(vslice_dummy_var_1837, vslice_dummy_var_1838, vslice_dummy_var_1839, vslice_dummy_var_1840, Tmp_1167, UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_23));
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L113;

  L113:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L154;

  L154:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L174;

  L174:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L177;

  L177:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1841;
    havoc vslice_dummy_var_1842;
    call {:si_unique_call 2514} sdv_923 := SerialDoesPortExist(pDevExt_23, DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_23), vslice_dummy_var_1841, vslice_dummy_var_1842);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} sdv_923 != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    Tmp_1184 := strConst__li2bpl332;
    call {:si_unique_call 2515} vslice_dummy_var_630 := SerialDbgPrintEx(3, Tmp_1184);
    status_36 := -1073741810;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc Tmp_1179;
    assume {:nonnull} Tmp_1181 != 0;
    assume Tmp_1181 > 0;
    assume {:nonnull} Tmp_1181 != 0;
    assume Tmp_1181 > 0;
    assume {:nonnull} Tmp_1181 != 0;
    assume Tmp_1181 > 0;
    assume {:nonnull} Tmp_1181 != 0;
    assume Tmp_1181 > 0;
    assume {:nonnull} Tmp_1181 != 0;
    assume Tmp_1181 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1843;
    havoc vslice_dummy_var_1844;
    call {:si_unique_call 2516} SerialLogError(vslice_dummy_var_1843, PDevObj_24, vslice_dummy_var_1844, Tmp_1181, 0, 0, 0, 57, 0, -1073348574, Tmp_1179, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_23))], 0, 0);
    goto L139;

  L139:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_36 >= 0;
    goto L141;

  L141:
    Tmp_1166 := status_36;
    goto L1;

  anon81_Then:
    assume {:partition} 0 > status_36;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} allocedISRSw != 0;
    call {:si_unique_call 2517} sdv_ExFreePool(0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L142;

  L142:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1845;
    call {:si_unique_call 2518} MmUnmapIoSpace(0, vslice_dummy_var_1845);
    goto L147;

  L147:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1846;
    call {:si_unique_call 2519} MmUnmapIoSpace(0, vslice_dummy_var_1846);
    goto L141;

  anon84_Then:
    goto L141;

  anon83_Then:
    goto L147;

  anon82_Then:
    assume {:partition} allocedISRSw == 0;
    goto L142;

  anon87_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2520} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2521} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    call {:si_unique_call 2522} boogieTmp := corral_nondet();
    Tmp_1182 := strConst__li2bpl334;
    call {:si_unique_call 2523} vslice_dummy_var_631 := SerialDbgPrintEx(4, Tmp_1182);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1847;
    call {:si_unique_call 2524} sdv_906 := SerialGetDivisorFromBaud(vslice_dummy_var_1847, 75, junk);
    call {:si_unique_call 2525} sdv_911 := sdv_NT_ERROR(sdv_906);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_911 != 0;
    goto L218;

  L218:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1848;
    call {:si_unique_call 2526} sdv_932 := SerialGetDivisorFromBaud(vslice_dummy_var_1848, 110, junk);
    call {:si_unique_call 2527} sdv_936 := sdv_NT_ERROR(sdv_932);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_936 != 0;
    goto L226;

  L226:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1849;
    call {:si_unique_call 2528} sdv_941 := SerialGetDivisorFromBaud(vslice_dummy_var_1849, 135, junk);
    call {:si_unique_call 2529} sdv_905 := sdv_NT_ERROR(sdv_941);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_905 != 0;
    goto L234;

  L234:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1850;
    call {:si_unique_call 2530} sdv_916 := SerialGetDivisorFromBaud(vslice_dummy_var_1850, 150, junk);
    call {:si_unique_call 2531} sdv_927 := sdv_NT_ERROR(sdv_916);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_927 != 0;
    goto L242;

  L242:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1851;
    call {:si_unique_call 2532} sdv_919 := SerialGetDivisorFromBaud(vslice_dummy_var_1851, 300, junk);
    call {:si_unique_call 2533} sdv_912 := sdv_NT_ERROR(sdv_919);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_912 != 0;
    goto L250;

  L250:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1852;
    call {:si_unique_call 2534} sdv_943 := SerialGetDivisorFromBaud(vslice_dummy_var_1852, 600, junk);
    call {:si_unique_call 2535} sdv_914 := sdv_NT_ERROR(sdv_943);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_914 != 0;
    goto L258;

  L258:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1853;
    call {:si_unique_call 2536} sdv_947 := SerialGetDivisorFromBaud(vslice_dummy_var_1853, 1200, junk);
    call {:si_unique_call 2537} sdv_909 := sdv_NT_ERROR(sdv_947);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} sdv_909 != 0;
    goto L266;

  L266:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1854;
    call {:si_unique_call 2538} sdv_934 := SerialGetDivisorFromBaud(vslice_dummy_var_1854, 1800, junk);
    call {:si_unique_call 2539} sdv_940 := sdv_NT_ERROR(sdv_934);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_940 != 0;
    goto L274;

  L274:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1855;
    call {:si_unique_call 2540} sdv_900 := SerialGetDivisorFromBaud(vslice_dummy_var_1855, 2400, junk);
    call {:si_unique_call 2541} sdv_917 := sdv_NT_ERROR(sdv_900);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_917 != 0;
    goto L282;

  L282:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1856;
    call {:si_unique_call 2542} sdv_937 := SerialGetDivisorFromBaud(vslice_dummy_var_1856, 4800, junk);
    call {:si_unique_call 2543} sdv_904 := sdv_NT_ERROR(sdv_937);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} sdv_904 != 0;
    goto L290;

  L290:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1857;
    call {:si_unique_call 2544} sdv_925 := SerialGetDivisorFromBaud(vslice_dummy_var_1857, 7200, junk);
    call {:si_unique_call 2545} sdv_933 := sdv_NT_ERROR(sdv_925);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} sdv_933 != 0;
    goto L298;

  L298:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1858;
    call {:si_unique_call 2546} sdv_898 := SerialGetDivisorFromBaud(vslice_dummy_var_1858, 9600, junk);
    call {:si_unique_call 2547} sdv_910 := sdv_NT_ERROR(sdv_898);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_910 != 0;
    goto L306;

  L306:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1859;
    call {:si_unique_call 2548} sdv_902 := SerialGetDivisorFromBaud(vslice_dummy_var_1859, 14400, junk);
    call {:si_unique_call 2549} sdv_913 := sdv_NT_ERROR(sdv_902);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_913 != 0;
    goto L314;

  L314:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1860;
    call {:si_unique_call 2550} sdv_908 := SerialGetDivisorFromBaud(vslice_dummy_var_1860, 19200, junk);
    call {:si_unique_call 2551} sdv_931 := sdv_NT_ERROR(sdv_908);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_931 != 0;
    goto L322;

  L322:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1861;
    call {:si_unique_call 2552} sdv_899 := SerialGetDivisorFromBaud(vslice_dummy_var_1861, 38400, junk);
    call {:si_unique_call 2553} sdv_901 := sdv_NT_ERROR(sdv_899);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} sdv_901 != 0;
    goto L330;

  L330:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1862;
    call {:si_unique_call 2554} sdv_944 := SerialGetDivisorFromBaud(vslice_dummy_var_1862, 56000, junk);
    call {:si_unique_call 2555} sdv_907 := sdv_NT_ERROR(sdv_944);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_907 != 0;
    goto L338;

  L338:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1863;
    call {:si_unique_call 2556} sdv_942 := SerialGetDivisorFromBaud(vslice_dummy_var_1863, 57600, junk);
    call {:si_unique_call 2557} sdv_922 := sdv_NT_ERROR(sdv_942);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} sdv_922 != 0;
    goto L346;

  L346:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1864;
    call {:si_unique_call 2558} sdv_939 := SerialGetDivisorFromBaud(vslice_dummy_var_1864, 115200, junk);
    call {:si_unique_call 2559} sdv_945 := sdv_NT_ERROR(sdv_939);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_945 != 0;
    goto L354;

  L354:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1865;
    call {:si_unique_call 2560} sdv_920 := SerialGetDivisorFromBaud(vslice_dummy_var_1865, 128000, junk);
    call {:si_unique_call 2561} sdv_935 := sdv_NT_ERROR(sdv_920);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} sdv_935 != 0;
    goto L362;

  L362:
    call {:si_unique_call 2562} SetDeviceIsOpened(pDevExt_23, 0, 0);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L139;

  anon106_Then:
    assume {:partition} sdv_935 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L362;

  anon105_Then:
    assume {:partition} sdv_945 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L354;

  anon104_Then:
    assume {:partition} sdv_922 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L346;

  anon103_Then:
    assume {:partition} sdv_907 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L338;

  anon102_Then:
    assume {:partition} sdv_901 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L330;

  anon101_Then:
    assume {:partition} sdv_931 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L322;

  anon100_Then:
    assume {:partition} sdv_913 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L314;

  anon99_Then:
    assume {:partition} sdv_910 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L306;

  anon98_Then:
    assume {:partition} sdv_933 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L298;

  anon97_Then:
    assume {:partition} sdv_904 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L290;

  anon96_Then:
    assume {:partition} sdv_917 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L282;

  anon95_Then:
    assume {:partition} sdv_940 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L274;

  anon94_Then:
    assume {:partition} sdv_909 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L266;

  anon93_Then:
    assume {:partition} sdv_914 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L258;

  anon92_Then:
    assume {:partition} sdv_912 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L250;

  anon91_Then:
    assume {:partition} sdv_927 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L242;

  anon90_Then:
    assume {:partition} sdv_905 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L234;

  anon89_Then:
    assume {:partition} sdv_936 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L226;

  anon88_Then:
    assume {:partition} sdv_911 == 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L218;

  anon86_Then:
    assume {:partition} sdv_923 == 0;
    Tmp_1171 := strConst__li2bpl331;
    call {:si_unique_call 2563} vslice_dummy_var_632 := SerialDbgPrintEx(1, Tmp_1171);
    status_36 := -1073741810;
    goto L139;

  anon85_Then:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L177;

  anon107_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L174;

  anon108_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L174;

  anon109_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L174;

  anon113_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto L174;

  anon79_Then:
    goto L154;

  anon112_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc Tmp_1175;
    assume {:nonnull} Tmp_1173 != 0;
    assume Tmp_1173 > 0;
    assume {:nonnull} Tmp_1173 != 0;
    assume Tmp_1173 > 0;
    assume {:nonnull} Tmp_1173 != 0;
    assume Tmp_1173 > 0;
    assume {:nonnull} Tmp_1173 != 0;
    assume Tmp_1173 > 0;
    assume {:nonnull} Tmp_1173 != 0;
    assume Tmp_1173 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1866;
    havoc vslice_dummy_var_1867;
    call {:si_unique_call 2564} SerialLogError(vslice_dummy_var_1866, PDevObj_24, vslice_dummy_var_1867, Tmp_1173, 0, 0, 0, 8, 0, -1073348598, Tmp_1175, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_23))], 0, 0);
    Tmp_1169 := strConst__li2bpl330;
    call {:si_unique_call 2565} vslice_dummy_var_633 := SerialDbgPrintEx(1, Tmp_1169);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc vslice_dummy_var_1868;
    call {:si_unique_call 2566} MmUnmapIoSpace(0, vslice_dummy_var_1868);
    goto L131;

  L131:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    status_36 := -1073741709;
    goto L139;

  anon80_Then:
    goto L131;

  anon111_Then:
    goto L113;

  anon110_Then:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc Tmp_1172;
    assume {:nonnull} Tmp_1183 != 0;
    assume Tmp_1183 > 0;
    assume {:nonnull} Tmp_1183 != 0;
    assume Tmp_1183 > 0;
    assume {:nonnull} Tmp_1183 != 0;
    assume Tmp_1183 > 0;
    assume {:nonnull} Tmp_1183 != 0;
    assume Tmp_1183 > 0;
    assume {:nonnull} Tmp_1183 != 0;
    assume Tmp_1183 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc vslice_dummy_var_1869;
    havoc vslice_dummy_var_1870;
    havoc vslice_dummy_var_1871;
    call {:si_unique_call 2567} SerialLogError(vslice_dummy_var_1869, vslice_dummy_var_1870, vslice_dummy_var_1871, Tmp_1183, 0, 0, 0, 7, 0, -1073348598, Tmp_1172, Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_23))], 0, 0);
    Tmp_1185 := strConst__li2bpl333;
    call {:si_unique_call 2568} vslice_dummy_var_634 := SerialDbgPrintEx(1, Tmp_1185);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    status_36 := -1073741709;
    goto L139;

  anon78_Then:
    call {:si_unique_call 2569} sdv_930 := ExAllocatePoolWithTag(512, 16, -666022077);
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pDevExt_23 != 0;
    assume pDevExt_23 > 0;
    havoc Tmp_1180;
    assume {:nonnull} Tmp_1180 != 0;
    assume Tmp_1180 > 0;
    call {:si_unique_call 2570} InitializeListHead(SharerList__SERIAL_CISR_SW(Tmp_1180));
    allocedISRSw := 1;
    goto L36;

  anon114_Then:
    Tmp_1166 := -1073741670;
    goto L1;
}



procedure {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_18: int, actual_Irp_18: int) returns (Tmp_1188: int);
  modifies alloc, Mem_T.PVOID, yogi_error, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_18: int, actual_Irp_18: int) returns (Tmp_1188: int)
{
  var {:pointer} Tmp_1189: int;
  var {:pointer} Tmp_1190: int;
  var {:pointer} Tmp_1191: int;
  var {:pointer} Tmp_1192: int;
  var {:pointer} Tmp_1193: int;
  var {:pointer} Extension_27: int;
  var {:scalar} sdv_955: int;
  var {:scalar} status_37: int;
  var {:pointer} Tmp_1195: int;
  var {:pointer} DeviceObject_18: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_635: int;
  var vslice_dummy_var_636: int;
  var vslice_dummy_var_637: int;
  var vslice_dummy_var_638: int;
  var vslice_dummy_var_639: int;
  var vslice_dummy_var_640: int;

  anon0:
    DeviceObject_18 := actual_DeviceObject_18;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 2571} Tmp_1189 := __HAVOC_malloc(84);
    call {:si_unique_call 2572} Tmp_1190 := __HAVOC_malloc(72);
    call {:si_unique_call 2573} Tmp_1191 := __HAVOC_malloc(88);
    call {:si_unique_call 2574} Tmp_1192 := __HAVOC_malloc(84);
    call {:si_unique_call 2575} Tmp_1193 := __HAVOC_malloc(84);
    call {:si_unique_call 2576} Tmp_1195 := __HAVOC_malloc(96);
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc Extension_27;
    call {:si_unique_call 2577} sdv_do_paged_code_check();
    Tmp_1195 := strConst__li2bpl41;
    call {:si_unique_call 2578} vslice_dummy_var_635 := SerialDbgPrintEx(9, Tmp_1195);
    Tmp_1191 := strConst__li2bpl335;
    call {:si_unique_call 2579} vslice_dummy_var_636 := SerialDbgPrintEx(2, Tmp_1191);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    call {:si_unique_call 2580} status_37 := SerialIRPPrologue(Irp_18, Extension_27);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_37 != 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_37 >= 0;
    goto L29;

  L29:
    Tmp_1193 := strConst__li2bpl336;
    call {:si_unique_call 2581} vslice_dummy_var_637 := SerialDbgPrintEx(2, Tmp_1193);
    Tmp_1188 := status_37;
    goto L1;

  L1:
    call {:si_unique_call 2582} SLIC_SerialFlush_exit(strConst__li2bpl0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} 0 > status_37;
    Tmp_1190 := strConst__li2bpl3;
    call {:si_unique_call 2583} vslice_dummy_var_638 := SerialDbgPrintEx(9, Tmp_1190);
    call {:si_unique_call 2584} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2585} SerialIRPEpilogue(Extension_27);
    goto L29;

  anon11_Then:
    assume {:partition} status_37 == 0;
    call {:si_unique_call 2586} sdv_955 := SerialCompleteIfError(DeviceObject_18, Irp_18);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_955 != 0;
    Tmp_1189 := strConst__li2bpl337;
    call {:si_unique_call 2587} vslice_dummy_var_639 := SerialDbgPrintEx(2, Tmp_1189);
    Tmp_1188 := -1073741536;
    goto L1;

  anon12_Then:
    assume {:partition} sdv_955 == 0;
    assume {:nonnull} Extension_27 != 0;
    assume Extension_27 > 0;
    call {:si_unique_call 2588} status_37 := SerialStartOrQueue(Extension_27, Irp_18, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_27), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_27), li2bplFunctionConstant1125);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1192 := strConst__li2bpl338;
    call {:si_unique_call 2589} vslice_dummy_var_640 := SerialDbgPrintEx(2, Tmp_1192);
    Tmp_1188 := status_37;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_641: int;

  anon0:
    call {:si_unique_call 2590} vslice_dummy_var_641 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_28: int) returns (Tmp_1198: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID;
  free ensures {:va_keep} Tmp_1198 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_28: int) returns (Tmp_1198: int)
{
  var {:pointer} NewIrp_4: int;
  var {:pointer} Tmp_1200: int;
  var {:pointer} Extension_28: int;
  var vslice_dummy_var_642: int;

  anon0:
    call {:si_unique_call 2591} NewIrp_4 := __HAVOC_malloc(4);
    Extension_28 := actual_Extension_28;
    call {:si_unique_call 2592} sdv_do_paged_code_check();
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc Tmp_1200;
    assume {:nonnull} Tmp_1200 != 0;
    assume Tmp_1200 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    call {:si_unique_call 2593} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_28), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_28), NewIrp_4, 1, Extension_28);
    assume {:nonnull} NewIrp_4 != 0;
    assume NewIrp_4 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2594} vslice_dummy_var_642 := SerialStartWrite#1(Extension_28);
    goto L12;

  L12:
    Tmp_1198 := 0;
    return;

  anon3_Then:
    goto L12;
}



procedure {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_19: int, actual_Irp_19: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_19: int, actual_Irp_19: int)
{
  var {:pointer} Extension_29: int;
  var {:pointer} DeviceObject_19: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_643: int;
  var vslice_dummy_var_1872: int;

  anon0:
    call {:si_unique_call 2595} vslice_dummy_var_643 := __HAVOC_malloc(4);
    DeviceObject_19 := actual_DeviceObject_19;
    Irp_19 := actual_Irp_19;
    assume {:nonnull} DeviceObject_19 != 0;
    assume DeviceObject_19 > 0;
    havoc Extension_29;
    assume {:nonnull} Extension_29 != 0;
    assume Extension_29 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    havoc vslice_dummy_var_1872;
    call {:si_unique_call 2596} SerialTryToCompleteCurrent#1(Extension_29, li2bplFunctionConstant1089, vslice_dummy_var_1872, -1073741536, CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_29), 0, 0, ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_29), 0, li2bplFunctionConstant1088, 2);
    call {:si_unique_call 2597} SLIC_SerialCancelImmediate_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_644: int;

  anon0:
    call {:si_unique_call 2598} vslice_dummy_var_644 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_30: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_30: int)
{
  var {:pointer} Tmp_1205: int;
  var {:pointer} s_p_e_c_i_a_l_25: int;
  var {:pointer} Tmp_1206: int;
  var {:scalar} TotalTime_1: int;
  var {:pointer} Tmp_1207: int;
  var {:pointer} sdv_959: int;
  var {:scalar} UseATimer_1: int;
  var {:pointer} sdv_960: int;
  var {:pointer} sdv_962: int;
  var {:scalar} OldIrql_13: int;
  var {:scalar} s_p_e_c_i_a_l_26: int;
  var {:pointer} Tmp_1208: int;
  var {:pointer} s_p_e_c_i_a_l_27: int;
  var {:pointer} OldIrp: int;
  var {:pointer} Tmp_1209: int;
  var {:scalar} s_p_e_c_i_a_l_28: int;
  var {:pointer} Tmp_1210: int;
  var {:scalar} Timeouts_1: int;
  var {:pointer} Extension_30: int;
  var vslice_dummy_var_645: int;
  var vslice_dummy_var_646: int;
  var vslice_dummy_var_647: int;
  var vslice_dummy_var_648: int;
  var vslice_dummy_var_649: int;
  var vslice_dummy_var_650: int;
  var vslice_dummy_var_651: int;
  var vslice_dummy_var_1873: int;
  var vslice_dummy_var_1874: int;
  var vslice_dummy_var_1875: int;
  var vslice_dummy_var_1876: int;

  anon0:
    call {:si_unique_call 2599} TotalTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2600} Timeouts_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2601} vslice_dummy_var_645 := __HAVOC_malloc(4);
    Extension_30 := actual_Extension_30;
    call {:si_unique_call 2602} Tmp_1205 := __HAVOC_malloc(108);
    call {:si_unique_call 2603} Tmp_1206 := __HAVOC_malloc(92);
    call {:si_unique_call 2604} Tmp_1207 := __HAVOC_malloc(72);
    Tmp_1205 := strConst__li2bpl339;
    call {:si_unique_call 2605} vslice_dummy_var_649 := SerialDbgPrintEx(2, Tmp_1205);
    UseATimer_1 := 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_1210;
    assume {:nonnull} Tmp_1210 != 0;
    assume Tmp_1210 > 0;
    call {:si_unique_call 2606} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 2607} Tmp_1208 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1208 != 0;
    assume Tmp_1208 > 0;
    call {:si_unique_call 2608} sdv_KeAcquireSpinLock(0, Tmp_1208);
    assume {:nonnull} Tmp_1208 != 0;
    assume Tmp_1208 > 0;
    havoc OldIrql_13;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    call {:si_unique_call 2609} sdv_KeReleaseSpinLock(0, OldIrql_13);
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto L24;

  L24:
    UseATimer_1 := 1;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    goto L28;

  L28:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_1873;
    call {:si_unique_call 2610} sdv_962 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1873);
    assume {:nonnull} sdv_962 != 0;
    assume sdv_962 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_962)))] := 0;
    call {:si_unique_call 2611} Tmp_1208 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1208 != 0;
    assume Tmp_1208 > 0;
    call {:si_unique_call 2612} IoAcquireCancelSpinLock(Tmp_1208);
    assume {:nonnull} Tmp_1208 != 0;
    assume Tmp_1208 > 0;
    havoc OldIrql_13;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_1209;
    assume {:nonnull} Tmp_1209 != 0;
    assume Tmp_1209 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc OldIrp;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 2613} IoReleaseCancelSpinLock(OldIrql_13);
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Tmp_1207 := strConst__li2bpl3;
    call {:si_unique_call 2614} vslice_dummy_var_650 := SerialDbgPrintEx(9, Tmp_1207);
    call {:si_unique_call 2615} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2616} SerialIRPEpilogue(Extension_30);
    goto L56;

  L56:
    Tmp_1206 := strConst__li2bpl340;
    call {:si_unique_call 2617} vslice_dummy_var_651 := SerialDbgPrintEx(2, Tmp_1206);
    return;

  anon11_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_1874;
    call {:si_unique_call 2618} vslice_dummy_var_646 := sdv_IoSetCancelRoutine(vslice_dummy_var_1874, li2bplFunctionConstant1086);
    s_p_e_c_i_a_l_26 := 2;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_1875;
    call {:si_unique_call 2619} sdv_959 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1875);
    assume {:nonnull} sdv_959 != 0;
    assume sdv_959 > 0;
    s_p_e_c_i_a_l_25 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_959)));
    assume {:nonnull} s_p_e_c_i_a_l_25 != 0;
    assume s_p_e_c_i_a_l_25 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} UseATimer_1 != 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 2620} vslice_dummy_var_648 := SerialSetTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_30), TotalTime_1, TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_30), Extension_30);
    s_p_e_c_i_a_l_28 := 4;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_1876;
    call {:si_unique_call 2621} sdv_960 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1876);
    assume {:nonnull} sdv_960 != 0;
    assume sdv_960 > 0;
    s_p_e_c_i_a_l_27 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_960)));
    assume {:nonnull} s_p_e_c_i_a_l_27 != 0;
    assume s_p_e_c_i_a_l_27 > 0;
    goto L68;

  L68:
    call {:si_unique_call 2622} vslice_dummy_var_647 := KeSynchronizeExecution(0, li2bplFunctionConstant1087, 0);
    call {:si_unique_call 2623} IoReleaseCancelSpinLock(OldIrql_13);
    goto L56;

  anon12_Then:
    assume {:partition} UseATimer_1 == 0;
    goto L68;

  anon9_Then:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    goto L28;

  anon10_Then:
    goto L24;
}



procedure {:origName "SerialCompleteImmediate"} SerialCompleteImmediate(actual_Dpc_8: int, actual_DeferredContext_6: int, actual_SystemContext1_7: int, actual_SystemContext2_7: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialCompleteImmediate"} SerialCompleteImmediate(actual_Dpc_8: int, actual_DeferredContext_6: int, actual_SystemContext1_7: int, actual_SystemContext2_7: int)
{
  var {:scalar} OldIrql_14: int;
  var {:pointer} Tmp_1213: int;
  var {:pointer} Extension_31: int;
  var {:pointer} Tmp_1214: int;
  var {:pointer} Tmp_1215: int;
  var {:pointer} Dpc_8: int;
  var {:pointer} DeferredContext_6: int;
  var vslice_dummy_var_652: int;
  var vslice_dummy_var_653: int;
  var vslice_dummy_var_654: int;

  anon0:
    call {:si_unique_call 2624} vslice_dummy_var_652 := __HAVOC_malloc(4);
    Dpc_8 := actual_Dpc_8;
    DeferredContext_6 := actual_DeferredContext_6;
    call {:si_unique_call 2625} Tmp_1214 := __HAVOC_malloc(104);
    call {:si_unique_call 2626} Tmp_1215 := __HAVOC_malloc(120);
    Extension_31 := DeferredContext_6;
    Tmp_1215 := strConst__li2bpl342;
    call {:si_unique_call 2627} vslice_dummy_var_653 := SerialDbgPrintEx(2, Tmp_1215);
    call {:si_unique_call 2628} Tmp_1213 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1213 != 0;
    assume Tmp_1213 > 0;
    call {:si_unique_call 2629} IoAcquireCancelSpinLock(Tmp_1213);
    assume {:nonnull} Tmp_1213 != 0;
    assume Tmp_1213 > 0;
    havoc OldIrql_14;
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    call {:si_unique_call 2630} SerialTryToCompleteCurrent#1(Extension_31, 0, OldIrql_14, 0, CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_31), 0, 0, ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_31), 0, li2bplFunctionConstant1088, 1);
    call {:si_unique_call 2631} SerialDpcEpilogue(Extension_31, Dpc_8);
    Tmp_1214 := strConst__li2bpl341;
    call {:si_unique_call 2632} vslice_dummy_var_654 := SerialDbgPrintEx(2, Tmp_1214);
    call {:si_unique_call 2633} SLIC_SerialCompleteImmediate_exit(strConst__li2bpl0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp_7: int, actual_QueueToProcess_4: int, actual_NewIrp_5: int, actual_CompleteCurrent_4: int, actual_Extension_32: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp_7: int, actual_QueueToProcess_4: int, actual_NewIrp_5: int, actual_CompleteCurrent_4: int, actual_Extension_32: int)
{
  var {:pointer} Tmp_1216: int;
  var {:pointer} Tmp_1217: int;
  var {:scalar} OldIrql_15: int;
  var {:pointer} OldIrp_1: int;
  var {:pointer} CurrentOpIrp_7: int;
  var {:pointer} NewIrp_5: int;
  var {:pointer} Extension_32: int;
  var vslice_dummy_var_655: int;
  var vslice_dummy_var_656: int;
  var vslice_dummy_var_657: int;

  anon0:
    call {:si_unique_call 2634} vslice_dummy_var_655 := __HAVOC_malloc(4);
    CurrentOpIrp_7 := actual_CurrentOpIrp_7;
    NewIrp_5 := actual_NewIrp_5;
    Extension_32 := actual_Extension_32;
    call {:si_unique_call 2635} Tmp_1217 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    havoc OldIrp_1;
    call {:si_unique_call 2636} Tmp_1216 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1216 != 0;
    assume Tmp_1216 > 0;
    call {:si_unique_call 2637} IoAcquireCancelSpinLock(Tmp_1216);
    assume {:nonnull} Tmp_1216 != 0;
    assume Tmp_1216 > 0;
    havoc OldIrql_15;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    assume {:nonnull} NewIrp_5 != 0;
    assume NewIrp_5 > 0;
    call {:si_unique_call 2638} vslice_dummy_var_656 := KeSynchronizeExecution(0, li2bplFunctionConstant574, 0);
    call {:si_unique_call 2639} IoReleaseCancelSpinLock(OldIrql_15);
    Tmp_1217 := strConst__li2bpl3;
    call {:si_unique_call 2640} vslice_dummy_var_657 := SerialDbgPrintEx(9, Tmp_1217);
    call {:si_unique_call 2641} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2642} SerialIRPEpilogue(Extension_32);
    return;
}



procedure {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int)
{
  var vslice_dummy_var_658: int;

  anon0:
    call {:si_unique_call 2643} vslice_dummy_var_658 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint()
{
  var vslice_dummy_var_659: int;

  anon0:
    call {:si_unique_call 2644} vslice_dummy_var_659 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_660: int;

  anon0:
    call {:si_unique_call 2645} vslice_dummy_var_660 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_2: int, actual_FieldOffset: int) returns (Tmp_1225: int);
  free ensures {:va_keep} Tmp_1225 == actual_Address_2;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_2: int, actual_FieldOffset: int) returns (Tmp_1225: int)
{
  var {:pointer} record: int;
  var {:pointer} Address_2: int;

  anon0:
    Address_2 := actual_Address_2;
    record := Address_2;
    Tmp_1225 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_661: int;

  anon0:
    call {:si_unique_call 2646} vslice_dummy_var_661 := __HAVOC_malloc(4);
    p := actual_p;
    assume {:nonnull} p != 0;
    assume p > 0;
    return;
}



procedure {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1_1: int, actual_p2_1: int) returns (Tmp_1229: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1_1: int, actual_p2_1: int) returns (Tmp_1229: int)
{
  var {:scalar} status_38: int;
  var {:pointer} p1_1: int;
  var {:pointer} p2_1: int;

  anon0:
    p1_1 := actual_p1_1;
    p2_1 := actual_p2_1;
    status_38 := 0;
    call {:si_unique_call 2647} sdv_stub_add_begin();
    call {:si_unique_call 2648} status_38 := SerialAddDevice(p1_1, p2_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2649} sdv_stub_add_end();
    Tmp_1229 := status_38;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_1231: int);
  free ensures {:va_keep} Tmp_1231 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_1231: int)
{

  anon0:
    Tmp_1231 := 1;
    return;
}



procedure {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end()
{
  var vslice_dummy_var_662: int;

  anon0:
    call {:si_unique_call 2650} vslice_dummy_var_662 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_663: int;

  anon0:
    call {:si_unique_call 2651} vslice_dummy_var_663 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Dpc_9: int) returns (Tmp_1237: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1237 == 1 || Tmp_1237 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Dpc_9: int) returns (Tmp_1237: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 2652} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1237 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1237 := 0;
    goto L1;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_1239: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_1239: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_1239 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_1239 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_1239 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_10: int, actual_DeferredRoutine: int, actual_DeferredContext_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_10: int, actual_DeferredRoutine: int, actual_DeferredContext_7: int)
{
  var {:pointer} Dpc_10: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_664: int;

  anon0:
    call {:si_unique_call 2653} vslice_dummy_var_664 := __HAVOC_malloc(4);
    Dpc_10 := actual_Dpc_10;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_10 != 0;
    assume Dpc_10 > 0;
    return;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_8: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_20: int) returns (Tmp_1243: int);
  free ensures {:va_keep} Tmp_1243 == -1073741824 || Tmp_1243 == -1073741771 || Tmp_1243 == -1073741670 || Tmp_1243 == -1073741823 || Tmp_1243 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_8: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_20: int) returns (Tmp_1243: int)
{
  var {:pointer} DeviceObject_20: int;

  anon0:
    DeviceObject_20 := actual_DeviceObject_20;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_1243 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_1243 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_1243 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_1243 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    goto L21;

  L21:
    Tmp_1243 := 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    goto L21;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_665: int;

  anon0:
    call {:si_unique_call 2654} vslice_dummy_var_665 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_1247: int);
  modifies Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_1247: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    r := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_2)];
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_2)] := CancelRoutine;
    Tmp_1247 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_666: int;

  anon0:
    call {:si_unique_call 2655} vslice_dummy_var_666 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_1251: int);
  free ensures {:va_keep} Tmp_1251 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_1251: int)
{

  anon0:
    Tmp_1251 := 1;
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_667: int;

  anon0:
    call {:si_unique_call 2656} vslice_dummy_var_667 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_668: int;

  anon0:
    call {:si_unique_call 2657} vslice_dummy_var_668 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_1257: int);
  free ensures {:va_keep} Tmp_1257 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_1257: int)
{

  anon0:
    Tmp_1257 := 1;
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_1259: int);
  free ensures {:va_keep} Tmp_1259 == 1 || Tmp_1259 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_1259: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1259 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1259 := 0;
    goto L1;
}



procedure {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_9: int, actual_Environment: int) returns (Tmp_1261: int);
  free ensures {:va_keep} Tmp_1261 == 0 || Tmp_1261 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_9: int, actual_Environment: int) returns (Tmp_1261: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1261 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1261 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_669: int;

  anon0:
    call {:si_unique_call 2658} vslice_dummy_var_669 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;
}



procedure {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_11: int) returns (Tmp_1265: int);
  free ensures {:va_keep} Tmp_1265 == 1 || Tmp_1265 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_11: int) returns (Tmp_1265: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1265 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1265 := 0;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_1267: int);
  free ensures {:va_keep} Tmp_1267 == 0 || Tmp_1267 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_1267: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1267 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1267 := -1073741823;
    goto L1;
}



procedure {:origName "HalGetInterruptVector"} {:osmodel} HalGetInterruptVector(actual_InterfaceType: int, actual_BusNumber_1: int, actual_BusInterruptLevel: int, actual_BusInterruptVector: int, actual_Irql: int, actual_Affinity: int) returns (Tmp_1269: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "HalGetInterruptVector"} {:osmodel} HalGetInterruptVector(actual_InterfaceType: int, actual_BusNumber_1: int, actual_BusInterruptLevel: int, actual_BusInterruptVector: int, actual_Irql: int, actual_Affinity: int) returns (Tmp_1269: int)
{
  var {:scalar} sdv_982: int;

  anon0:
    Tmp_1269 := sdv_982;
    return;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, SLAM_guard_O_0, handleState, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} handleState == 1 || handleState == 2 || handleState == old(handleState);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:pointer} Tmp_1271: int;
  var {:scalar} sdv_984: int;
  var {:scalar} u: int;
  var {:pointer} sdv_998: int;
  var {:pointer} Tmp_1272: int;
  var {:scalar} sdv_1005: int;
  var {:pointer} sdv_1007: int;
  var {:pointer} Tmp_1273: int;
  var {:pointer} Tmp_1274: int;
  var {:pointer} Tmp_1275: int;
  var {:pointer} Tmp_1276: int;
  var {:pointer} Tmp_1277: int;
  var {:pointer} Tmp_1278: int;
  var {:pointer} Tmp_1280: int;
  var vslice_dummy_var_670: int;
  var vslice_dummy_var_671: int;
  var vslice_dummy_var_672: int;
  var vslice_dummy_var_673: int;
  var vslice_dummy_var_674: int;
  var vslice_dummy_var_675: int;
  var vslice_dummy_var_676: int;
  var vslice_dummy_var_677: int;
  var vslice_dummy_var_678: int;
  var vslice_dummy_var_679: int;
  var vslice_dummy_var_680: int;
  var vslice_dummy_var_681: int;
  var vslice_dummy_var_682: int;
  var vslice_dummy_var_683: int;
  var vslice_dummy_var_684: int;
  var vslice_dummy_var_685: int;
  var vslice_dummy_var_686: int;
  var vslice_dummy_var_687: int;
  var vslice_dummy_var_688: int;
  var vslice_dummy_var_689: int;
  var vslice_dummy_var_690: int;
  var vslice_dummy_var_1877: int;
  var vslice_dummy_var_1878: int;
  var vslice_dummy_var_1879: int;
  var vslice_dummy_var_1880: int;
  var vslice_dummy_var_1881: int;
  var vslice_dummy_var_1882: int;
  var vslice_dummy_var_1883: int;
  var vslice_dummy_var_1884: int;
  var vslice_dummy_var_1885: int;
  var vslice_dummy_var_1886: int;
  var vslice_dummy_var_1887: int;
  var vslice_dummy_var_1888: int;
  var vslice_dummy_var_1889: int;

  anon0:
    call {:si_unique_call 2659} u := __HAVOC_malloc(12);
    call {:si_unique_call 2660} vslice_dummy_var_670 := __HAVOC_malloc(4);
    call {:si_unique_call 2661} sdv_1005 := sdv_CheckDispatchRoutines();
    call {:si_unique_call 2662} sdv_984 := sdv_CheckStartIoRoutines();
    call {:si_unique_call 2663} vslice_dummy_var_671 := sdv_CheckDpcRoutines();
    call {:si_unique_call 2664} vslice_dummy_var_672 := sdv_CheckIsrRoutines();
    call {:si_unique_call 2665} vslice_dummy_var_673 := sdv_CheckCancelRoutines();
    call {:si_unique_call 2666} vslice_dummy_var_674 := sdv_CheckIoDpcRoutines();
    call {:si_unique_call 2667} vslice_dummy_var_675 := sdv_IoCompletionRoutines();
    call {:si_unique_call 2668} vslice_dummy_var_676 := sdv_CheckWorkerRoutines();
    call {:si_unique_call 2669} vslice_dummy_var_677 := sdv_CheckAddDevice();
    call {:si_unique_call 2670} vslice_dummy_var_678 := sdv_CheckIrpMjPnp();
    call {:si_unique_call 2671} vslice_dummy_var_679 := sdv_CheckIrpMjPower();
    call {:si_unique_call 2672} vslice_dummy_var_680 := sdv_CheckDriverUnload();
    goto anon243_Then, anon243_Else;

  anon243_Else:
    goto anon334_Then, anon334_Else;

  anon334_Else:
    goto anon333_Then, anon333_Else;

  anon333_Else:
    goto anon332_Then, anon332_Else;

  anon332_Else:
    goto anon331_Then, anon331_Else;

  anon331_Else:
    goto anon330_Then, anon330_Else;

  anon330_Else:
    goto anon329_Then, anon329_Else;

  anon329_Else:
    goto anon328_Then, anon328_Else;

  anon328_Else:
    goto anon327_Then, anon327_Else;

  anon327_Else:
    goto anon326_Then, anon326_Else;

  anon326_Else:
    goto anon325_Then, anon325_Else;

  anon325_Else:
    goto anon324_Then, anon324_Else;

  anon324_Else:
    goto anon323_Then, anon323_Else;

  anon323_Else:
    goto anon322_Then, anon322_Else;

  anon322_Else:
    goto anon321_Then, anon321_Else;

  anon321_Else:
    goto anon320_Then, anon320_Else;

  anon320_Else:
    goto anon319_Then, anon319_Else;

  anon319_Else:
    goto anon318_Then, anon318_Else;

  anon318_Else:
    goto anon317_Then, anon317_Else;

  anon317_Else:
    goto anon316_Then, anon316_Else;

  anon316_Else:
    goto anon315_Then, anon315_Else;

  anon315_Else:
    goto anon314_Then, anon314_Else;

  anon314_Else:
    goto anon313_Then, anon313_Else;

  anon313_Else:
    goto anon312_Then, anon312_Else;

  anon312_Else:
    goto anon311_Then, anon311_Else;

  anon311_Else:
    goto anon310_Then, anon310_Else;

  anon310_Else:
    goto anon309_Then, anon309_Else;

  anon309_Else:
    goto anon308_Then, anon308_Else;

  anon308_Else:
    goto anon307_Then, anon307_Else;

  anon307_Else:
    goto anon306_Then, anon306_Else;

  anon306_Else:
    goto anon305_Then, anon305_Else;

  anon305_Else:
    goto anon304_Then, anon304_Else;

  anon304_Else:
    goto anon303_Then, anon303_Else;

  anon303_Else:
    goto anon302_Then, anon302_Else;

  anon302_Else:
    goto anon301_Then, anon301_Else;

  anon301_Else:
    goto anon300_Then, anon300_Else;

  anon300_Else:
    goto anon299_Then, anon299_Else;

  anon299_Else:
    goto anon298_Then, anon298_Else;

  anon298_Else:
    goto anon297_Then, anon297_Else;

  anon297_Else:
    goto anon296_Then, anon296_Else;

  anon296_Else:
    goto anon295_Then, anon295_Else;

  anon295_Else:
    goto anon294_Then, anon294_Else;

  anon294_Else:
    goto anon293_Then, anon293_Else;

  anon293_Else:
    goto anon292_Then, anon292_Else;

  anon292_Else:
    goto anon291_Then, anon291_Else;

  anon291_Else:
    goto anon290_Then, anon290_Else;

  anon290_Else:
    goto anon289_Then, anon289_Else;

  anon289_Else:
    goto anon288_Then, anon288_Else;

  anon288_Else:
    goto anon287_Then, anon287_Else;

  anon287_Else:
    goto anon286_Then, anon286_Else;

  anon286_Else:
    goto anon285_Then, anon285_Else;

  anon285_Else:
    goto anon284_Then, anon284_Else;

  anon284_Else:
    goto anon283_Then, anon283_Else;

  anon283_Else:
    goto anon282_Then, anon282_Else;

  anon282_Else:
    goto anon281_Then, anon281_Else;

  anon281_Else:
    goto anon280_Then, anon280_Else;

  anon280_Else:
    goto anon279_Then, anon279_Else;

  anon279_Else:
    goto anon278_Then, anon278_Else;

  anon278_Else:
    goto anon277_Then, anon277_Else;

  anon277_Else:
    goto anon276_Then, anon276_Else;

  anon276_Else:
    goto anon275_Then, anon275_Else;

  anon275_Else:
    goto anon274_Then, anon274_Else;

  anon274_Else:
    goto anon273_Then, anon273_Else;

  anon273_Else:
    goto anon272_Then, anon272_Else;

  anon272_Else:
    goto anon271_Then, anon271_Else;

  anon271_Else:
    goto anon270_Then, anon270_Else;

  anon270_Else:
    goto anon269_Then, anon269_Else;

  anon269_Else:
    goto anon268_Then, anon268_Else;

  anon268_Else:
    goto anon267_Then, anon267_Else;

  anon267_Else:
    goto anon266_Then, anon266_Else;

  anon266_Else:
    goto anon265_Then, anon265_Else;

  anon265_Else:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    goto anon263_Then, anon263_Else;

  anon263_Else:
    goto anon262_Then, anon262_Else;

  anon262_Else:
    goto anon261_Then, anon261_Else;

  anon261_Else:
    goto anon260_Then, anon260_Else;

  anon260_Else:
    goto anon259_Then, anon259_Else;

  anon259_Else:
    goto anon258_Then, anon258_Else;

  anon258_Else:
    goto anon257_Then, anon257_Else;

  anon257_Else:
    goto anon256_Then, anon256_Else;

  anon256_Else:
    goto anon255_Then, anon255_Else;

  anon255_Else:
    goto anon254_Then, anon254_Else;

  anon254_Else:
    goto anon253_Then, anon253_Else;

  anon253_Else:
    goto anon252_Then, anon252_Else;

  anon252_Else:
    goto anon251_Then, anon251_Else;

  anon251_Else:
    goto anon250_Then, anon250_Else;

  anon250_Else:
    goto anon249_Then, anon249_Else;

  anon249_Else:
    goto anon248_Then, anon248_Else;

  anon248_Else:
    goto anon247_Then, anon247_Else;

  anon247_Else:
    goto anon246_Then, anon246_Else;

  anon246_Else:
    call {:si_unique_call 2673} sdv_RunUnload(sdv_driver_object);
    goto anon363_Then, anon363_Else;

  anon363_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon363_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon246_Then:
    goto L1;

  anon247_Then:
    call {:si_unique_call 2674} vslice_dummy_var_682 := sdv_RunRemoveDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon362_Then, anon362_Else;

  anon362_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon362_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon248_Then:
    call {:si_unique_call 2675} sdv_stub_driver_init();
    call {:si_unique_call 2676} vslice_dummy_var_683 := sdv_RunStartDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon361_Then, anon361_Else;

  anon361_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon361_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon249_Then:
    call {:si_unique_call 2677} vslice_dummy_var_681 := sdv_RunAddDevice(sdv_driver_object, sdv_p_devobj_pdo);
    goto anon360_Then, anon360_Else;

  anon360_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon360_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon250_Then:
    call {:si_unique_call 2678} vslice_dummy_var_690 := DriverEntry(sdv_driver_object, u);
    goto anon359_Then, anon359_Else;

  anon359_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon359_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon251_Then:
    goto L1;

  anon252_Then:
    goto L1;

  anon253_Then:
    goto L1;

  anon254_Then:
    goto L1;

  anon255_Then:
    goto L1;

  anon256_Then:
    goto L1;

  anon257_Then:
    goto L1;

  anon258_Then:
    goto L1;

  anon259_Then:
    goto L1;

  anon260_Then:
    goto L1;

  anon261_Then:
    goto L1;

  anon262_Then:
    goto L1;

  anon263_Then:
    goto L1;

  anon264_Then:
    goto L1;

  anon265_Then:
    goto L1;

  anon266_Then:
    goto L1;

  anon267_Then:
    goto L1;

  anon268_Then:
    goto L1;

  anon269_Then:
    goto L1;

  anon270_Then:
    goto L1;

  anon271_Then:
    goto L1;

  anon272_Then:
    goto L1;

  anon273_Then:
    goto L1;

  anon274_Then:
    goto L1;

  anon275_Then:
    goto L1;

  anon276_Then:
    goto L1;

  anon277_Then:
    goto L1;

  anon278_Then:
    goto L1;

  anon279_Then:
    goto L1;

  anon280_Then:
    goto L1;

  anon281_Then:
    goto L1;

  anon282_Then:
    goto L1;

  anon283_Then:
    goto L1;

  anon284_Then:
    goto L1;

  anon285_Then:
    goto L1;

  anon286_Then:
    call {:si_unique_call 2679} sdv_stub_power_completion_begin();
    call {:si_unique_call 2680} sdv_998 := sdv_SetPowerRequestIrpMinorFunction(sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Tmp_1274 := Overlay_unnamed_tag_6(Tail__IRP(sdv_irp));
    assume {:nonnull} Tmp_1274 != 0;
    assume Tmp_1274 > 0;
    havoc Tmp_1271;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Tmp_1277 := Overlay_unnamed_tag_6(Tail__IRP(sdv_irp));
    assume {:nonnull} Tmp_1277 != 0;
    assume Tmp_1277 > 0;
    havoc Tmp_1278;
    assume {:nonnull} Tmp_1271 != 0;
    assume Tmp_1271 > 0;
    assume {:nonnull} Tmp_1278 != 0;
    assume Tmp_1278 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    havoc vslice_dummy_var_1877;
    havoc vslice_dummy_var_1878;
    call {:si_unique_call 2681} SerialWakeCompletion(sdv_p_devobj_fdo, vslice_dummy_var_1877, vslice_dummy_var_1878, sdv_pv2, IoStatus__IRP(sdv_irp));
    goto anon358_Then, anon358_Else;

  anon358_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon358_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon287_Then:
    call {:si_unique_call 2682} sdv_stub_power_completion_begin();
    call {:si_unique_call 2683} sdv_1007 := sdv_SetPowerRequestIrpMinorFunction(sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Tmp_1280 := Overlay_unnamed_tag_6(Tail__IRP(sdv_irp));
    assume {:nonnull} Tmp_1280 != 0;
    assume Tmp_1280 > 0;
    havoc Tmp_1275;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Tmp_1272 := Overlay_unnamed_tag_6(Tail__IRP(sdv_irp));
    assume {:nonnull} Tmp_1272 != 0;
    assume Tmp_1272 > 0;
    havoc Tmp_1273;
    assume {:nonnull} Tmp_1273 != 0;
    assume Tmp_1273 > 0;
    assume {:nonnull} Tmp_1275 != 0;
    assume Tmp_1275 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    havoc vslice_dummy_var_1879;
    havoc vslice_dummy_var_1880;
    call {:si_unique_call 2684} SerialSystemPowerCompletion(sdv_p_devobj_fdo, vslice_dummy_var_1879, vslice_dummy_var_1880, sdv_pv2, IoStatus__IRP(sdv_irp));
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon357_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon288_Then:
    goto L1;

  anon289_Then:
    goto L1;

  anon290_Then:
    goto L1;

  anon291_Then:
    goto L1;

  anon292_Then:
    goto L1;

  anon293_Then:
    goto L1;

  anon294_Then:
    goto L1;

  anon295_Then:
    goto L1;

  anon296_Then:
    call {:si_unique_call 2685} vslice_dummy_var_689 := SerialWaitWakeCompletion(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon356_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon297_Then:
    call {:si_unique_call 2686} vslice_dummy_var_688 := SerialSyncCompletion(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon355_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon298_Then:
    call {:si_unique_call 2687} vslice_dummy_var_687 := SerialSetPowerD0Completion(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon354_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon299_Then:
    call {:si_unique_call 2688} vslice_dummy_var_686 := SerialFinishSystemPower(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    goto anon353_Then, anon353_Else;

  anon353_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon353_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon300_Then:
    call {:si_unique_call 2689} Tmp_1276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2690} IoAcquireCancelSpinLock(Tmp_1276);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2691} SerialFilterCancelQueued(sdv_p_devobj_fdo, sdv_irp);
    goto anon352_Then, anon352_Else;

  anon352_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon352_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon301_Then:
    call {:si_unique_call 2692} Tmp_1276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2693} IoAcquireCancelSpinLock(Tmp_1276);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2694} SerialCancelWait(sdv_p_devobj_fdo, sdv_irp);
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon351_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon302_Then:
    call {:si_unique_call 2695} Tmp_1276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2696} IoAcquireCancelSpinLock(Tmp_1276);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2697} SerialCancelQueued(sdv_p_devobj_fdo, sdv_irp);
    goto anon350_Then, anon350_Else;

  anon350_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon350_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon303_Then:
    call {:si_unique_call 2698} Tmp_1276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2699} IoAcquireCancelSpinLock(Tmp_1276);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2700} SerialCancelImmediate(sdv_p_devobj_fdo, sdv_irp);
    goto anon349_Then, anon349_Else;

  anon349_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon349_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon304_Then:
    call {:si_unique_call 2701} Tmp_1276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2702} IoAcquireCancelSpinLock(Tmp_1276);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2703} SerialCancelCurrentXoff(sdv_p_devobj_fdo, sdv_irp);
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon348_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon305_Then:
    call {:si_unique_call 2704} Tmp_1276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2705} IoAcquireCancelSpinLock(Tmp_1276);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2706} SerialCancelCurrentWrite(sdv_p_devobj_fdo, sdv_irp);
    goto anon347_Then, anon347_Else;

  anon347_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon347_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon306_Then:
    call {:si_unique_call 2707} Tmp_1276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2708} IoAcquireCancelSpinLock(Tmp_1276);
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    call {:si_unique_call 2709} SerialCancelCurrentRead(sdv_p_devobj_fdo, sdv_irp);
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon346_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon307_Then:
    goto L1;

  anon308_Then:
    goto L1;

  anon309_Then:
    goto L1;

  anon310_Then:
    goto L1;

  anon311_Then:
    goto L1;

  anon312_Then:
    goto L1;

  anon313_Then:
    goto L1;

  anon314_Then:
    goto L1;

  anon315_Then:
    goto L1;

  anon316_Then:
    goto L1;

  anon317_Then:
    goto L1;

  anon318_Then:
    goto L1;

  anon319_Then:
    goto L1;

  anon320_Then:
    goto L1;

  anon321_Then:
    goto L1;

  anon322_Then:
    goto L1;

  anon323_Then:
    goto L1;

  anon324_Then:
    call {:si_unique_call 2710} vslice_dummy_var_685 := SerialCIsrSw(sdv_kinterrupt, sdv_pv1);
    goto anon345_Then, anon345_Else;

  anon345_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon345_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon325_Then:
    havoc vslice_dummy_var_1881;
    call {:si_unique_call 2711} SerialUnlockPages(sdv_kdpc, vslice_dummy_var_1881, sdv_pv2, sdv_pv3);
    goto anon344_Then, anon344_Else;

  anon344_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon344_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon326_Then:
    havoc vslice_dummy_var_1882;
    call {:si_unique_call 2712} SerialStartTimerLowerRTS(sdv_kdpc, vslice_dummy_var_1882, sdv_pv2, sdv_pv3);
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon343_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon327_Then:
    havoc vslice_dummy_var_1883;
    call {:si_unique_call 2713} SerialSetPendingDpcEvent(sdv_kdpc, vslice_dummy_var_1883, sdv_pv2, sdv_pv3);
    goto anon342_Then, anon342_Else;

  anon342_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon342_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon328_Then:
    havoc vslice_dummy_var_1884;
    call {:si_unique_call 2714} SerialCompleteXoff(sdv_kdpc, vslice_dummy_var_1884, sdv_pv2, sdv_pv3);
    goto anon341_Then, anon341_Else;

  anon341_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon341_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon329_Then:
    havoc vslice_dummy_var_1885;
    call {:si_unique_call 2715} SerialCompleteWrite(sdv_kdpc, vslice_dummy_var_1885, sdv_pv2, sdv_pv3);
    goto anon340_Then, anon340_Else;

  anon340_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon340_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon330_Then:
    havoc vslice_dummy_var_1886;
    call {:si_unique_call 2716} SerialCompleteWait(sdv_kdpc, vslice_dummy_var_1886, sdv_pv2, sdv_pv3);
    goto anon339_Then, anon339_Else;

  anon339_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon339_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon331_Then:
    havoc vslice_dummy_var_1887;
    call {:si_unique_call 2717} SerialCompleteRead(sdv_kdpc, vslice_dummy_var_1887, sdv_pv2, sdv_pv3);
    goto anon338_Then, anon338_Else;

  anon338_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon338_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon332_Then:
    havoc vslice_dummy_var_1888;
    call {:si_unique_call 2718} SerialCompleteImmediate(sdv_kdpc, vslice_dummy_var_1888, sdv_pv2, sdv_pv3);
    goto anon337_Then, anon337_Else;

  anon337_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon337_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon333_Then:
    havoc vslice_dummy_var_1889;
    call {:si_unique_call 2719} SerialCommError(sdv_kdpc, vslice_dummy_var_1889, sdv_pv2, sdv_pv3);
    goto anon336_Then, anon336_Else;

  anon336_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon336_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon334_Then:
    goto anon245_Then, anon245_Else;

  anon245_Else:
    assume {:partition} sdv_984 != 0;
    call {:si_unique_call 2720} sdv_stub_driver_init();
    call {:si_unique_call 2721} sdv_RunStartIo(0, 0);
    goto L1;

  anon245_Then:
    assume {:partition} sdv_984 == 0;
    goto L1;

  anon243_Then:
    goto anon244_Then, anon244_Else;

  anon244_Else:
    assume {:partition} sdv_1005 != 0;
    call {:si_unique_call 2722} sdv_stub_driver_init();
    call {:si_unique_call 2723} vslice_dummy_var_684 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon335_Then, anon335_Else;

  anon335_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon335_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon244_Then:
    assume {:partition} sdv_1005 == 0;
    goto L1;
}



procedure {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_1281: int);
  free ensures {:va_keep} Tmp_1281 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_1281: int)
{

  anon0:
    Tmp_1281 := 1;
    return;
}



procedure {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_1283: int);
  free ensures {:va_keep} Tmp_1283 == 0 || Tmp_1283 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_1283: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1283 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1283 := -1073741823;
    goto L1;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_1285: int);
  free ensures {:va_keep} Tmp_1285 == 0 || Tmp_1285 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_1285: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1285 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1285 := -1073741823;
    goto L1;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_1287: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_1287: int)
{
  var {:pointer} sdv_1023: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2724} sdv_1023 := __HAVOC_malloc(1);
    Tmp_1287 := sdv_1023;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1287 := 0;
    goto L1;
}



procedure {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag: int) returns (Tmp_1289: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag: int) returns (Tmp_1289: int)
{
  var {:pointer} sdv_1025: int;
  var {:scalar} NumberOfBytes_1: int;

  anon0:
    NumberOfBytes_1 := actual_NumberOfBytes_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2725} sdv_1025 := __HAVOC_malloc(NumberOfBytes_1);
    Tmp_1289 := sdv_1025;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1289 := 0;
    goto L1;
}



procedure {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_1291: int);
  free ensures {:va_keep} Tmp_1291 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_1291: int)
{

  anon0:
    Tmp_1291 := 0;
    return;
}



procedure {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_1293: int);
  free ensures {:va_keep} Tmp_1293 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_1293: int)
{

  anon0:
    Tmp_1293 := 1;
    return;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_21: int, actual_Irp_20: int) returns (Tmp_1295: int);
  free ensures {:va_keep} Tmp_1295 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_21: int, actual_Irp_20: int) returns (Tmp_1295: int)
{
  var {:scalar} status_40: int;
  var {:pointer} Irp_20: int;

  anon0:
    Irp_20 := actual_Irp_20;
    status_40 := 259;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_20;
    goto L25;

  L25:
    Tmp_1295 := status_40;
    return;

  anon33_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon32_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_20;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_20;
    goto L19;

  anon40_Then:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L44;

  L44:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon39_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_20;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_20;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_20;
    goto L44;

  anon41_Then:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L28;

  L28:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_20;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_20;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_20;
    goto L28;

  anon31_Then:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_20;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_20;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_20;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_20;
    goto L36;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_22: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_1297: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1297 == 0 || Tmp_1297 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_22: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_1297: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 2726} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_1297 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    call {:si_unique_call 2727} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 2728} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 2729} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_23: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_23: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 2730} State := __HAVOC_malloc(8);
    call {:si_unique_call 2731} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 2732} Tmp := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int)
{
  var {:scalar} new: int;
  var {:pointer} p_1: int;
  var vslice_dummy_var_691: int;

  anon0:
    call {:si_unique_call 2733} vslice_dummy_var_691 := __HAVOC_malloc(4);
    new := actual_new;
    p_1 := actual_p_1;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_3: int) returns (Tmp_1302: int);
  free ensures {:va_keep} Tmp_1302 == 1 || Tmp_1302 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_3: int) returns (Tmp_1302: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1302 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1302 := 0;
    goto L1;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_692: int;

  anon0:
    call {:si_unique_call 2734} vslice_dummy_var_692 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_10: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_10: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp_4: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_10: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_693: int;

  anon0:
    call {:si_unique_call 2735} vslice_dummy_var_693 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_10 := actual_Context_10;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 2736} irpSp_4 := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    return;
}



procedure {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int)
{
  var vslice_dummy_var_694: int;

  anon0:
    call {:si_unique_call 2737} vslice_dummy_var_694 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin()
{
  var vslice_dummy_var_695: int;

  anon0:
    call {:si_unique_call 2738} vslice_dummy_var_695 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_1312: int);
  free ensures {:va_keep} Tmp_1312 == 1 || Tmp_1312 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_1312: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1312 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1312 := 0;
    goto L1;
}



procedure {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_1314: int);
  free ensures {:va_keep} Tmp_1314 == 0 || Tmp_1314 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_1314: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1314 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1314 := -1073741823;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_21: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_21: int)
{
  var vslice_dummy_var_696: int;

  anon0:
    call {:si_unique_call 2739} vslice_dummy_var_696 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_1318: int);
  free ensures {:va_keep} Tmp_1318 == 258 || Tmp_1318 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_1318: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1318 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1318 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_1318 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_24: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_24: int)
{
  var vslice_dummy_var_697: int;

  anon0:
    call {:si_unique_call 2740} vslice_dummy_var_697 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_1322: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_1322: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_1322 := OldState;
    return;
}



procedure {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_1326: int);
  free ensures {:va_keep} Tmp_1326 == actual_AddressWithinSection;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_1326: int)
{
  var {:pointer} AddressWithinSection: int;

  anon0:
    AddressWithinSection := actual_AddressWithinSection;
    Tmp_1326 := AddressWithinSection;
    return;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_1328: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_1328: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_1328;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a_1: int, actual_r_3: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a_1: int, actual_r_3: int, actual_s_2: int)
{
  var vslice_dummy_var_698: int;

  anon0:
    call {:si_unique_call 2741} vslice_dummy_var_698 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_699: int;

  anon0:
    call {:si_unique_call 2742} vslice_dummy_var_699 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    return;
}



procedure {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin()
{
  var vslice_dummy_var_700: int;

  anon0:
    call {:si_unique_call 2743} vslice_dummy_var_700 := __HAVOC_malloc(4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_25: int, actual_MinorFunction_2: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_11: int, actual_Irp_22: int) returns (Tmp_1336: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1336 == -1073741584 || Tmp_1336 == 259 || Tmp_1336 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_25: int, actual_MinorFunction_2: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_11: int, actual_Irp_22: int) returns (Tmp_1336: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} MinorFunction_2: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 2744} PowerState := __HAVOC_malloc(8);
    MinorFunction_2 := actual_MinorFunction_2;
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction_2 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1336 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction_2 == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1336 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1336 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction_2 == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction_2 == 3;
    goto L13;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_1338: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_O_0, handleState, yogi_error, Mem_T.Buffer__UNICODE_STRING, Mem_T.CancelRoutine__IRP, Mem_T.PVOID;
  free ensures {:va_keep} handleState == 1 || handleState == 2 || handleState == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "main"} {:osmodel} main() returns (Tmp_1338: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_1339: int;
  var {:scalar} Tmp_1341: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var SerialGlobals__Loc: int;
  var SerialPhysicalZero__Loc: int;
  var SerialPhysicalZero_1__Loc: int;
  var GUID_DEVINTERFACE_COMPORT__Loc: int;
  var driverDefaults__Loc: int;
  var SLAM_guard_O_0_init__Loc: int;
  var SerialPortNameGuid__Loc: int;
  var SerailPortPerfGuid__Loc: int;
  var SerialPortPropertiesGuid__Loc: int;
  var SerialPortHWGuid__Loc: int;
  var SerialPortCommGuid__Loc: int;
  var SerialPhysicalZero_2__Loc: int;
  var SerialPhysicalZero_3__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_driver_object__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var sdv_MmMapIoSpace_int__Loc: int;
  var vslice_dummy_var_1890: int;
  var vslice_dummy_var_1891: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 2745} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 2746} SerialGlobals__Loc := __HAVOC_malloc_or_null(28);
    assume SerialGlobals__Loc == SerialGlobals;
    assume SerialGlobals != 0;
    call {:si_unique_call 2747} SerialPhysicalZero__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero__Loc == SerialPhysicalZero;
    assume SerialPhysicalZero != 0;
    call {:si_unique_call 2748} SerialPhysicalZero_1__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_1__Loc == SerialPhysicalZero_1;
    assume SerialPhysicalZero_1 != 0;
    call {:si_unique_call 2749} GUID_DEVINTERFACE_COMPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_COMPORT__Loc == GUID_DEVINTERFACE_COMPORT;
    assume GUID_DEVINTERFACE_COMPORT != 0;
    call {:si_unique_call 2750} driverDefaults__Loc := __HAVOC_malloc_or_null(88);
    assume driverDefaults__Loc == driverDefaults;
    assume driverDefaults != 0;
    call {:si_unique_call 2751} SLAM_guard_O_0_init__Loc := __HAVOC_malloc_or_null(4);
    assume SLAM_guard_O_0_init__Loc == SLAM_guard_O_0_init;
    assume SLAM_guard_O_0_init != 0;
    call {:si_unique_call 2752} SerialPortNameGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortNameGuid__Loc == SerialPortNameGuid;
    assume SerialPortNameGuid != 0;
    call {:si_unique_call 2753} SerailPortPerfGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerailPortPerfGuid__Loc == SerailPortPerfGuid;
    assume SerailPortPerfGuid != 0;
    call {:si_unique_call 2754} SerialPortPropertiesGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortPropertiesGuid__Loc == SerialPortPropertiesGuid;
    assume SerialPortPropertiesGuid != 0;
    call {:si_unique_call 2755} SerialPortHWGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortHWGuid__Loc == SerialPortHWGuid;
    assume SerialPortHWGuid != 0;
    call {:si_unique_call 2756} SerialPortCommGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortCommGuid__Loc == SerialPortCommGuid;
    assume SerialPortCommGuid != 0;
    call {:si_unique_call 2757} SerialPhysicalZero_2__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_2__Loc == SerialPhysicalZero_2;
    assume SerialPhysicalZero_2 != 0;
    call {:si_unique_call 2758} SerialPhysicalZero_3__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_3__Loc == SerialPhysicalZero_3;
    assume SerialPhysicalZero_3 != 0;
    call {:si_unique_call 2759} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 2760} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 2761} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 2762} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 2763} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2764} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 2765} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 2766} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 2767} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 2768} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 2769} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 2770} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2771} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 2772} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 2773} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 2774} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 2775} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 2776} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 2777} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 2778} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 2779} sdv_driver_object__Loc := __HAVOC_malloc_or_null(68);
    assume sdv_driver_object__Loc == sdv_driver_object;
    assume sdv_driver_object != 0;
    call {:si_unique_call 2780} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 2781} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 2782} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 2783} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 2784} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 2785} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2786} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 2787} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 2788} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 2789} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 2790} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 2791} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 2792} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 2793} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 2794} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 2795} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 2796} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 2797} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 2798} sdv_MmMapIoSpace_int__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MmMapIoSpace_int__Loc == sdv_MmMapIoSpace_int;
    assume sdv_MmMapIoSpace_int != 0;
    call {:si_unique_call 2799} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 2800} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdComPortInUse == boogieTmp;
    call {:si_unique_call 2801} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 2802} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 2803} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 2804} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv1 == boogieTmp;
    call {:si_unique_call 2805} boogieTmp := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc == boogieTmp;
    call {:si_unique_call 2806} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 2807} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 2808} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 2809} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 2810} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 2811} vslice_dummy_var_1890 := __HAVOC_malloc(60);
    call {:si_unique_call 2812} vslice_dummy_var_1891 := __HAVOC_malloc(60);
    assume {:mainInitDone} true;
    call {:si_unique_call 2813} corralExtraInit();
    call {:si_unique_call 2814} corralExplainErrorInit();
    call {:si_unique_call 2815} _sdv_init24();
    call {:si_unique_call 2816} _sdv_init22();
    call {:si_unique_call 2817} _sdv_init18();
    call {:si_unique_call 2818} _sdv_init19();
    call {:si_unique_call 2819} _sdv_init17();
    call {:si_unique_call 2820} _sdv_init1();
    call {:si_unique_call 2821} _sdv_init4();
    call {:si_unique_call 2822} _sdv_init5();
    call {:si_unique_call 2823} _sdv_init3();
    call {:si_unique_call 2824} _sdv_init16();
    call {:si_unique_call 2825} _sdv_init14();
    call {:si_unique_call 2826} _sdv_init21();
    call {:si_unique_call 2827} _sdv_init6();
    call {:si_unique_call 2828} _sdv_init15();
    call {:si_unique_call 2829} _sdv_init10();
    call {:si_unique_call 2830} _sdv_init11();
    call {:si_unique_call 2831} _sdv_init9();
    call {:si_unique_call 2832} _sdv_init12();
    call {:si_unique_call 2833} _sdv_init13();
    call {:si_unique_call 2834} _sdv_init7();
    call {:si_unique_call 2835} _sdv_init8();
    call {:si_unique_call 2836} _sdv_init2();
    call {:si_unique_call 2837} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_1341 := 0;
    goto L47;

  L47:
    assume Tmp_1341 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_1339 := 0;
    goto L51;

  L51:
    assume Tmp_1339 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 2838} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L45;

  L45:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L45;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_1339 := 1;
    goto L51;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_1341 := 1;
    goto L47;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data_1: int, actual_DataSize: int) returns (Tmp_1342: int);
  free ensures {:va_keep} Tmp_1342 == -1073741790 || Tmp_1342 == -1073741816 || Tmp_1342 == -1073741823 || Tmp_1342 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data_1: int, actual_DataSize: int) returns (Tmp_1342: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1342 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1342 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_1342 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1342 := 0;
    goto L1;
}



procedure {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_1344: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_1344: int)
{
  var {:pointer} sdv_1037: int;

  anon0:
    call {:si_unique_call 2839} sdv_1037 := __HAVOC_malloc(1);
    Tmp_1344 := sdv_1037;
    return;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_701: int;

  anon0:
    call {:si_unique_call 2840} vslice_dummy_var_701 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_23: int) returns (Tmp_1348: int);
  free ensures {:va_keep} Tmp_1348 == 0 || Tmp_1348 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_23: int) returns (Tmp_1348: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1348 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1348 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_1350: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_1350: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    havoc Tmp_1350;
    return;
}



procedure {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_1352: int);
  modifies Mem_T.CancelRoutine__IRP, alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_1352: int)
{
  var {:pointer} ps: int;
  var {:scalar} status_42: int;
  var {:pointer} po: int;
  var {:pointer} pirp_10: int;

  anon0:
    po := actual_po;
    pirp_10 := actual_pirp_10;
    status_42 := 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    havoc ps;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_10)] := 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2841} sdv_stub_dispatch_begin();
    call {:si_unique_call 2842} sdv_SetStatus(pirp_10);
    call {:si_unique_call 2843} status_42 := SerialPnpDispatch(po, pirp_10);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2844} sdv_stub_dispatch_end(status_42, 0);
    Tmp_1352 := status_42;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end()
{
  var vslice_dummy_var_702: int;

  anon0:
    call {:si_unique_call 2845} vslice_dummy_var_702 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_703: int;

  anon0:
    call {:si_unique_call 2846} vslice_dummy_var_703 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DestinationString)] := SourceString;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int)
{
  var vslice_dummy_var_704: int;

  anon0:
    call {:si_unique_call 2847} vslice_dummy_var_704 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_1360: int);
  free ensures {:va_keep} Tmp_1360 == 0 || Tmp_1360 == actual_TargetDevice_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_1360: int)
{
  var {:pointer} TargetDevice_1: int;

  anon0:
    TargetDevice_1 := actual_TargetDevice_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} TargetDevice_1 == sdv_p_devobj_pdo;
    Tmp_1360 := TargetDevice_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} TargetDevice_1 != sdv_p_devobj_pdo;
    Tmp_1360 := 0;
    goto L1;
}



procedure {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po_1: int, actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po_1: int, actual_pirp_11: int)
{
  var vslice_dummy_var_705: int;
  var vslice_dummy_var_706: int;

  anon0:
    call {:si_unique_call 2848} vslice_dummy_var_705 := __HAVOC_malloc(4);
    call {:si_unique_call 2849} sdv_stub_startio_begin();
    call {:si_unique_call 2850} vslice_dummy_var_706 := sdv_DoNothing();
    call {:si_unique_call 2851} sdv_stub_startio_end();
    return;
}



procedure {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_1364: int);
  free ensures {:va_keep} Tmp_1364 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_1364: int)
{

  anon0:
    Tmp_1364 := 1;
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_707: int;

  anon0:
    call {:si_unique_call 2852} vslice_dummy_var_707 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_2: int, actual_pirp_12: int) returns (Tmp_1368: int);
  modifies Mem_T.CancelRoutine__IRP, alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_2: int, actual_pirp_12: int) returns (Tmp_1368: int)
{
  var {:pointer} ps_1: int;
  var {:scalar} status_43: int;
  var {:pointer} po_2: int;
  var {:pointer} pirp_12: int;

  anon0:
    po_2 := actual_po_2;
    pirp_12 := actual_pirp_12;
    status_43 := 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    havoc ps_1;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_12)] := 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 2853} sdv_SetStatus(pirp_12);
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 2854} sdv_stub_dispatch_begin();
    call {:si_unique_call 2855} status_43 := SerialPnpDispatch(po_2, pirp_12);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2856} sdv_stub_dispatch_end(status_43, 0);
    Tmp_1368 := status_43;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin()
{
  var vslice_dummy_var_708: int;

  anon0:
    call {:si_unique_call 2857} vslice_dummy_var_708 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlIntegerToUnicodeString"} {:osmodel} RtlIntegerToUnicodeString(actual_Value_1: int, actual_Base: int, actual_String: int) returns (Tmp_1372: int);
  free ensures {:va_keep} Tmp_1372 == 0 || Tmp_1372 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "RtlIntegerToUnicodeString"} {:osmodel} RtlIntegerToUnicodeString(actual_Value_1: int, actual_Base: int, actual_String: int) returns (Tmp_1372: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1372 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1372 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_709: int;

  anon0:
    call {:si_unique_call 2858} vslice_dummy_var_709 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwEnumerateKey"} {:osmodel} ZwEnumerateKey(actual_KeyHandle_1: int, actual_Index: int, actual_KeyInformationClass: int, actual_KeyInformation: int, actual_Length_2: int, actual_ResultLength: int) returns (Tmp_1376: int);
  free ensures {:va_keep} Tmp_1376 == -1073741823 || Tmp_1376 == 26 || Tmp_1376 == -1073741811 || Tmp_1376 == 0 || Tmp_1376 == 5 || Tmp_1376 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ZwEnumerateKey"} {:osmodel} ZwEnumerateKey(actual_KeyHandle_1: int, actual_Index: int, actual_KeyInformationClass: int, actual_KeyInformation: int, actual_Length_2: int, actual_ResultLength: int) returns (Tmp_1376: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_1043: int;
  var {:scalar} Length_2: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_2 := actual_Length_2;
    ResultLength := actual_ResultLength;
    L := sdv_1043;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 0 >= L;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} L != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} L == -1;
    Tmp_1376 := -1073741823;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:partition} L != -1;
    Tmp_1376 := 26;
    goto L1;

  anon14_Then:
    assume {:partition} L == 0;
    Tmp_1376 := -1073741811;
    goto L1;

  anon18_Then:
    assume {:partition} L > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L == Length_2;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Length_2 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_1376 := 0;
    goto L1;

  anon16_Then:
    assume {:partition} Length_2 == 0;
    goto L14;

  L14:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} L > Length_2;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_1376 := 5;
    goto L1;

  anon15_Then:
    assume {:partition} Length_2 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_1376 := -1073741789;
    goto L1;

  anon13_Then:
    assume {:partition} L != Length_2;
    goto L14;
}



procedure {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int)
{
  var vslice_dummy_var_710: int;

  anon0:
    call {:si_unique_call 2859} vslice_dummy_var_710 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_711: int;

  anon0:
    call {:si_unique_call 2860} vslice_dummy_var_711 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    return;
}



procedure {:origName "IoReportDetectedDevice"} {:osmodel} IoReportDetectedDevice(actual_DriverObject_9: int, actual_LegacyBusType: int, actual_BusNumber_2: int, actual_SlotNumber: int, actual_ResourceList: int, actual_ResourceRequirements: int, actual_ResourceAssigned: int, actual_DeviceObject_26: int) returns (Tmp_1382: int);
  free ensures {:va_keep} Tmp_1382 == 0 || Tmp_1382 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoReportDetectedDevice"} {:osmodel} IoReportDetectedDevice(actual_DriverObject_9: int, actual_LegacyBusType: int, actual_BusNumber_2: int, actual_SlotNumber: int, actual_ResourceList: int, actual_ResourceRequirements: int, actual_ResourceAssigned: int, actual_DeviceObject_26: int) returns (Tmp_1382: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1382 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1382 := -1073741823;
    goto L1;
}



procedure {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType_1: int, actual_BusNumber_3: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_12: int) returns (Tmp_1384: int);
  free ensures {:va_keep} Tmp_1384 == 0 || Tmp_1384 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType_1: int, actual_BusNumber_3: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_12: int) returns (Tmp_1384: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1384 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1384 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_13: int)
{
  var vslice_dummy_var_712: int;

  anon0:
    call {:si_unique_call 2861} vslice_dummy_var_712 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_14: int)
{
  var vslice_dummy_var_713: int;

  anon0:
    call {:si_unique_call 2862} vslice_dummy_var_713 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_2: int)
{
  var vslice_dummy_var_714: int;

  anon0:
    call {:si_unique_call 2863} vslice_dummy_var_714 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_3: int, actual_pirp_15: int) returns (Tmp_1392: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.Buffer__UNICODE_STRING, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_3: int, actual_pirp_15: int) returns (Tmp_1392: int)
{
  var {:pointer} ps_2: int;
  var {:scalar} Tmp_1393: int;
  var {:scalar} minor: int;
  var {:scalar} sdv_1054: int;
  var {:scalar} Tmp_1395: int;
  var {:scalar} status_44: int;
  var {:pointer} po_3: int;
  var {:pointer} pirp_15: int;

  anon0:
    po_3 := actual_po_3;
    pirp_15 := actual_pirp_15;
    status_44 := 0;
    minor := sdv_1054;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    havoc ps_2;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    call {:si_unique_call 2864} sdv_SetStatus(pirp_15);
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_15)] := 0;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2865} sdv_stub_dispatch_begin();
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    goto L60;

  L60:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    Tmp_1393 := 0;
    goto L220;

  L220:
    assume Tmp_1393 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto L66;

  L66:
    call {:si_unique_call 2866} status_44 := SerialPnpDispatch(po_3, pirp_15);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 2867} sdv_stub_dispatch_end(status_44, 0);
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    Tmp_1392 := status_44;
    goto LM2;

  LM2:
    return;

  anon102_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    goto L66;

  anon73_Then:
    Tmp_1393 := 1;
    goto L220;

  anon71_Then:
    goto L61;

  anon101_Then:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    Tmp_1395 := 0;
    goto L226;

  L226:
    assume Tmp_1395 != 0;
    goto L60;

  anon70_Then:
    Tmp_1395 := 1;
    goto L226;

  anon74_Then:
    call {:si_unique_call 2868} status_44 := sdv_DoNothing();
    goto L72;

  anon75_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2869} status_44 := SerialSystemControlDispatch(po_3, pirp_15);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon100_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2870} sdv_SetPowerIrpMinorFunction(pirp_15);
    call {:si_unique_call 2871} status_44 := SerialPowerDispatch(po_3, pirp_15);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon99_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2872} status_44 := SerialCleanup(po_3, pirp_15);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon98_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    call {:si_unique_call 2873} status_44 := sdv_DoNothing();
    goto L72;

  anon79_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2874} status_44 := sdv_DoNothing();
    goto L72;

  anon80_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2875} status_44 := SerialInternalIoControl(po_3, pirp_15);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon97_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon81_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2876} status_44 := SerialIoControl(po_3, pirp_15);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon82_Then:
    call {:si_unique_call 2877} status_44 := sdv_DoNothing();
    goto L72;

  anon83_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2878} status_44 := SerialFlush(po_3, pirp_15);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon84_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2879} status_44 := SerialSetInformationFile(po_3, pirp_15);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon85_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2880} status_44 := SerialQueryInformationFile(po_3, pirp_15);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2881} status_44 := SerialWrite(po_3, pirp_15);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon87_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2882} status_44 := SerialRead(po_3, pirp_15);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2883} status_44 := SerialClose(po_3, pirp_15);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 2884} status_44 := SerialCreateOpen(po_3, pirp_15);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon89_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_1396: int);
  free ensures {:va_keep} Tmp_1396 == -1073741823 || Tmp_1396 == -1073741808 || Tmp_1396 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_1396: int)
{
  var {:scalar} Tmp_1398: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_1396 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_1396 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName_2)] == 0;
    Tmp_1398 := 0;
    goto L22;

  L22:
    assume Tmp_1398 != 0;
    Tmp_1396 := 0;
    goto L1;

  anon8_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName_2)] != 0;
    Tmp_1398 := 1;
    goto L22;
}



procedure {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_1399: int);
  free ensures {:va_keep} Tmp_1399 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_1399: int)
{

  anon0:
    Tmp_1399 := 1;
    return;
}



procedure {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_1401: int);
  free ensures {:va_keep} Tmp_1401 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_1401: int)
{

  anon0:
    Tmp_1401 := 0;
    return;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int)
{
  var {:scalar} new_2: int;
  var vslice_dummy_var_715: int;

  anon0:
    call {:si_unique_call 2885} vslice_dummy_var_715 := __HAVOC_malloc(4);
    new_2 := actual_new_2;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_16: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_16: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_716: int;

  anon0:
    call {:si_unique_call 2886} vslice_dummy_var_716 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int)
{
  var vslice_dummy_var_717: int;

  anon0:
    call {:si_unique_call 2887} vslice_dummy_var_717 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_2: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength_1: int) returns (Tmp_1409: int);
  free ensures {:va_keep} Tmp_1409 == -1073741811 || Tmp_1409 == -1073741823 || Tmp_1409 == 0 || Tmp_1409 == 5 || Tmp_1409 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_2: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength_1: int) returns (Tmp_1409: int)
{
  var {:scalar} L_1: int;
  var {:scalar} sdv_1066: int;
  var {:scalar} Length_4: int;
  var {:pointer} ResultLength_1: int;

  anon0:
    Length_4 := actual_Length_4;
    ResultLength_1 := actual_ResultLength_1;
    L_1 := sdv_1066;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L_1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L_1 == 0;
    Tmp_1409 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L_1 != 0;
    Tmp_1409 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L_1 == Length_4;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_4 != 0;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Tmp_1409 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_4 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L_1 > Length_4;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Tmp_1409 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_4 >= L_1;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Tmp_1409 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L_1 != Length_4;
    goto L13;
}



procedure {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_3: int, actual_CacheType: int) returns (Tmp_1411: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_3: int, actual_CacheType: int) returns (Tmp_1411: int)
{
  var {:scalar} PhysicalAddress: int;
  var {:pointer} structPtr888PhysicalAddress: int;

  anon0:
    call {:si_unique_call 2888} PhysicalAddress := __HAVOC_malloc(20);
    structPtr888PhysicalAddress := actual_structPtr888PhysicalAddress;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Tmp_1411 := sdv_MmMapIoSpace_int;
    return;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_17: int)
{
  var vslice_dummy_var_718: int;

  anon0:
    call {:si_unique_call 2889} vslice_dummy_var_718 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_1415: int);
  free ensures {:va_keep} Tmp_1415 == 1 || Tmp_1415 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_1415: int)
{
  var {:scalar} b_1: int;

  anon0:
    call {:si_unique_call 2890} b_1 := OneOfTwoBOOLEAN();
    Tmp_1415 := b_1;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_719: int;

  anon0:
    call {:si_unique_call 2891} vslice_dummy_var_719 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_1419: int);
  free ensures {:va_keep} Tmp_1419 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_1419: int)
{

  anon0:
    Tmp_1419 := 1;
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_18: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_18: int)
{
  var vslice_dummy_var_720: int;

  anon0:
    call {:si_unique_call 2892} vslice_dummy_var_720 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_1425: int);
  free ensures {:va_keep} Tmp_1425 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_1425: int)
{

  anon0:
    Tmp_1425 := 0;
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1427: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1427: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    havoc Tmp_1427;
    return;
}



procedure {:origName "_sdv_init22"} {:osmodel} _sdv_init22();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "_sdv_init22"} {:osmodel} _sdv_init22()
{
  var vslice_dummy_var_721: int;

  anon0:
    call {:si_unique_call 2893} vslice_dummy_var_721 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant1245;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant1248;
    assume sdv_p_devobj_top == sdv_devobj_top;
    return;
}



procedure {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int)
{
  var vslice_dummy_var_722: int;

  anon0:
    call {:si_unique_call 2894} vslice_dummy_var_722 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_2: int) returns (Tmp_1433: int);
  free ensures {:va_keep} Tmp_1433 == 1 || Tmp_1433 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_2: int) returns (Tmp_1433: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1433 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1433 := 0;
    goto L1;
}



procedure {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_1435: int);
  free ensures {:va_keep} Tmp_1435 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_1435: int)
{

  anon0:
    Tmp_1435 := 1;
    return;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_27: int, actual_Irp_24: int) returns (Tmp_1437: int);
  free ensures {:va_keep} Tmp_1437 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_27: int, actual_Irp_24: int) returns (Tmp_1437: int)
{
  var {:scalar} status_45: int;
  var {:pointer} Irp_24: int;

  anon0:
    Irp_24 := actual_Irp_24;
    status_45 := 259;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_24;
    goto L25;

  L25:
    Tmp_1437 := status_45;
    return;

  anon32_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon31_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_24;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_24;
    goto L19;

  anon39_Then:
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L44;

  L44:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_24;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_24;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_24;
    goto L44;

  anon40_Then:
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L28;

  L28:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_24;
    goto L25;

  anon33_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_24;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_24;
    goto L28;

  anon41_Then:
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_24;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_24;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_24;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_24;
    goto L36;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject_1: int)
{
  var vslice_dummy_var_723: int;

  anon0:
    call {:si_unique_call 2895} vslice_dummy_var_723 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_3: int, actual_DesiredAccess: int, actual_ObjectAttributes: int) returns (Tmp_1441: int);
  modifies alloc, Mem_T.PVOID;
  free ensures {:va_keep} Tmp_1441 == 0 || Tmp_1441 == -1073741727;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_3: int, actual_DesiredAccess: int, actual_ObjectAttributes: int) returns (Tmp_1441: int)
{
  var {:pointer} sdv_1071: int;
  var {:pointer} KeyHandle_3: int;

  anon0:
    KeyHandle_3 := actual_KeyHandle_3;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2896} sdv_1071 := __HAVOC_malloc(4);
    assume {:nonnull} KeyHandle_3 != 0;
    assume KeyHandle_3 > 0;
    Mem_T.PVOID[KeyHandle_3] := sdv_1071;
    Tmp_1441 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} KeyHandle_3 != 0;
    assume KeyHandle_3 > 0;
    Mem_T.PVOID[KeyHandle_3] := 0;
    Tmp_1441 := -1073741727;
    goto L1;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_2: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_724: int;

  anon0:
    call {:si_unique_call 2897} vslice_dummy_var_724 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_2 := actual_Type_2;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int)
{
  var vslice_dummy_var_725: int;

  anon0:
    call {:si_unique_call 2898} vslice_dummy_var_725 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_28: int, actual_Irp_25: int) returns (Tmp_1447: int);
  free ensures {:va_keep} Tmp_1447 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_28: int, actual_Irp_25: int) returns (Tmp_1447: int)
{
  var {:pointer} Irp_25: int;

  anon0:
    Irp_25 := actual_Irp_25;
    call {:si_unique_call 2899} Tmp_1447 := IofCallDriver(0, Irp_25);
    return;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int)
{
  var {:pointer} p_4: int;
  var vslice_dummy_var_726: int;

  anon0:
    call {:si_unique_call 2900} vslice_dummy_var_726 := __HAVOC_malloc(4);
    p_4 := actual_p_4;
    assume {:nonnull} p_4 != 0;
    assume p_4 > 0;
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_1451: int);
  free ensures {:va_keep} Tmp_1451 == 0 || Tmp_1451 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_1451: int)
{
  var {:scalar} choice_18: int;
  var {:scalar} Tmp_1453: int;
  var {:scalar} Status_4: int;

  anon0:
    Status_4 := actual_Status_4;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_4 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_4;
    Tmp_1451 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_4 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_18 != 0;
    Tmp_1453 := 1;
    goto L14;

  L14:
    Tmp_1451 := Tmp_1453;
    goto L1;

  anon8_Then:
    assume {:partition} choice_18 == 0;
    Tmp_1453 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_4;
    goto L9;
}



procedure {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int)
{
  var {:pointer} SpinLock_2: int;
  var vslice_dummy_var_727: int;

  anon0:
    call {:si_unique_call 2901} vslice_dummy_var_727 := __HAVOC_malloc(4);
    SpinLock_2 := actual_SpinLock_2;
    assume {:nonnull} SpinLock_2 != 0;
    assume SpinLock_2 > 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_4: int, actual_Tag_1: int) returns (Tmp_1456: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_4: int, actual_Tag_1: int) returns (Tmp_1456: int)
{
  var {:pointer} sdv_1075: int;
  var {:scalar} NumberOfBytes_4: int;

  anon0:
    NumberOfBytes_4 := actual_NumberOfBytes_4;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2902} sdv_1075 := __HAVOC_malloc(NumberOfBytes_4);
    Tmp_1456 := sdv_1075;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1456 := 0;
    goto L1;
}



procedure {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_3: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1458: int);
  free ensures {:va_keep} Tmp_1458 == 0 || Tmp_1458 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_3: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1458: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1458 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1458 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, yogi_error;
  free ensures {:va_keep} old(handleState) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(handleState) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(handleState) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int)
{
  var {:pointer} pdrivo: int;
  var vslice_dummy_var_728: int;

  anon0:
    call {:si_unique_call 2903} vslice_dummy_var_728 := __HAVOC_malloc(4);
    pdrivo := actual_pdrivo;
    call {:si_unique_call 2904} SerialUnload(pdrivo);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1462: int);
  free ensures {:va_keep} Tmp_1462 == -1073741772 || Tmp_1462 == -1073741824 || Tmp_1462 == -1073741789 || Tmp_1462 == -1073741670 || Tmp_1462 == -1073741808 || Tmp_1462 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1462: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_1462 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_1462 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_1462 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_1462 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_1462 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_1462 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_2: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_3: int, actual_Vector: int, actual_Irql_1: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1464: int);
  free ensures {:va_keep} Tmp_1464 == -1073741811 || Tmp_1464 == -1073741670 || Tmp_1464 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_2: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_3: int, actual_Vector: int, actual_Irql_1: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1464: int)
{
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_1464 := -1073741811;
    goto L1;

  L1:
    return;

  anon5_Then:
    Tmp_1464 := -1073741670;
    goto L1;

  anon6_Then:
    Tmp_1464 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_729: int;

  anon0:
    call {:si_unique_call 2905} vslice_dummy_var_729 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetPowerRequestIrpMinorFunction"} {:osmodel} sdv_SetPowerRequestIrpMinorFunction(actual_pirp_19: int) returns (Tmp_1468: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_SetPowerRequestIrpMinorFunction"} {:osmodel} sdv_SetPowerRequestIrpMinorFunction(actual_pirp_19: int) returns (Tmp_1468: int)
{
  var {:pointer} r_5: int;
  var {:pointer} pirp_19: int;

  anon0:
    pirp_19 := actual_pirp_19;
    assume {:nonnull} pirp_19 != 0;
    assume pirp_19 > 0;
    havoc r_5;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L37;

  L37:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L40;

  L40:
    Tmp_1468 := r_5;
    return;

  anon45_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L37;

  anon46_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L37;

  anon47_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L37;

  anon48_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L37;

  anon49_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L37;

  anon38_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L37;

  anon39_Then:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L69;

  L69:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L40;

  anon50_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L69;

  anon51_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L69;

  anon36_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L69;

  anon35_Then:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L55;

  L55:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L40;

  anon40_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L55;

  anon41_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L55;

  anon42_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L55;

  anon43_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L55;

  anon44_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L55;

  anon37_Then:
    assume {:nonnull} r_5 != 0;
    assume r_5 > 0;
    goto L55;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_730: int;

  anon0:
    call {:si_unique_call 2906} vslice_dummy_var_730 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_29: int, actual_DevInstKeyType: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_1472: int);
  free ensures {:va_keep} Tmp_1472 == -1073741811 || Tmp_1472 == -1073741808 || Tmp_1472 == -1073741823 || Tmp_1472 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_29: int, actual_DevInstKeyType: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_1472: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1472 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1472 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_1472 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1472 := 0;
    goto L1;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_2: int) returns (Tmp_1474: int);
  free ensures {:va_keep} Tmp_1474 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_2: int) returns (Tmp_1474: int)
{

  anon0:
    Tmp_1474 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1476: int);
  free ensures {:va_keep} Tmp_1476 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1476: int)
{

  anon0:
    Tmp_1476 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_30: int, actual_Action: int) returns (Tmp_1478: int);
  free ensures {:va_keep} Tmp_1478 == -1073741823 || Tmp_1478 == -1073741811 || Tmp_1478 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_30: int, actual_Action: int) returns (Tmp_1478: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1478 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1478 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_1478 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int)
{
  var {:pointer} Event_2: int;
  var vslice_dummy_var_731: int;

  anon0:
    call {:si_unique_call 2907} vslice_dummy_var_731 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    assume (forall x: int :: { Mem_T.CancelRoutine__IRP[x] } Mem_T.CancelRoutine__IRP[x] <= 0 || Mem_T.CancelRoutine__IRP[x] > 1248);
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddDevice__DRIVER_EXTENSION"} {:fieldname "AddDevice"} AddDevice__DRIVER_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__CONFIG_DATA"} {:fieldname "AddressSpace"} AddressSpace__CONFIG_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__SERIAL_DEVICE_EXTENSION"} {:fieldname "AddressSpace"} AddressSpace__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.Affinity__CONFIG_DATA"} {:fieldname "Affinity"} Affinity__CONFIG_DATA(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_45"} {:fieldname "Affinity"} Affinity_unnamed_tag_45(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Alignment_unnamed_tag_58"} {:fieldname "Alignment"} Alignment_unnamed_tag_58(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_40"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResources_unnamed_tag_40"} {:fieldname "AllocatedResources"} AllocatedResources_unnamed_tag_40(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__FILE_STANDARD_INFORMATION"} {:fieldname "AllocationSize"} AllocationSize__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Argument4"} Argument4_unnamed_tag_42(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_3"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BaseIOAddress__SERIAL_WMI_HW_DATA"} {:fieldname "BaseIOAddress"} BaseIOAddress__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.BaudClock__CM_SERIAL_DEVICE_DATA"} {:fieldname "BaudClock"} BaudClock__CM_SERIAL_DEVICE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BaudRate__SERIAL_BAUD_RATE"} {:fieldname "BaudRate"} BaudRate__SERIAL_BAUD_RATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BitsPerByte__SERIAL_WMI_COMM_DATA"} {:fieldname "BitsPerByte"} BitsPerByte__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BreakChar__SERIAL_CHARS"} {:fieldname "BreakChar"} BreakChar__SERIAL_CHARS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BufferSizePt8__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSizePt8"} BufferSizePt8__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.BufferSize__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSize"} BufferSize__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CONFIG_DATA"} {:fieldname "BusNumber"} BusNumber__CONFIG_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "BusNumber"} BusNumber__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__SERIAL_DEVICE_EXTENSION"} {:fieldname "BusNumber"} BusNumber__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.CIsrSw__SERIAL_DEVICE_EXTENSION"} {:fieldname "CIsrSw"} CIsrSw__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2644
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CharsCopied__SERIAL_UPDATE_CHAR"} {:fieldname "CharsCopied"} CharsCopied__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "CharsInInterruptBuffer"} CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ClockRate"} ClockRate__CONFIG_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.ClockRate__SERIAL_DEVICE_EXTENSION"} {:fieldname "ClockRate"} ClockRate__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 424
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommErrorDpc"} CommErrorDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 872
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommWaitDpc"} CommWaitDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 916
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "CommonInterruptObject"} CommonInterruptObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteImmediateDpc"} CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 960
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteReadDpc"} CompleteReadDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 696
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteWriteDpc"} CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 652
}

function {:inline true} {:fieldmap "Mem_T.Completed__SERIAL_UPDATE_CHAR"} {:fieldname "Completed"} Completed__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.Context__SERIAL_CISR_SW"} {:fieldname "Context"} Context__SERIAL_CISR_SW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ControlHandShake__SERIAL_HANDFLOW"} {:fieldname "ControlHandShake"} ControlHandShake__SERIAL_HANDFLOW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ControlLock__SERIAL_DEVICE_EXTENSION"} {:fieldname "ControlLock"} ControlLock__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 644
}

function {:inline true} {:fieldmap "Mem_T.Controller__CONFIG_DATA"} {:fieldname "Controller"} Controller__CONFIG_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__SERIAL_DEVICE_EXTENSION"} {:fieldname "Controller"} Controller__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOfTryingToLowerRTS"} CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 408
}

function {:inline true} {:fieldmap "Mem_T.CountOnLastRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOnLastRead"} CountOnLastRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 392
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Counter__SERIAL_XOFF_COUNTER"} {:fieldname "Counter"} Counter__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSerialCommEntry"} CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 640
}

function {:inline true} {:fieldmap "Mem_T.CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSymbolicLink"} CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 636
}

function {:inline true} {:fieldmap "Mem_T.CurrentBaud__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentBaud"} CurrentBaud__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 400
}

function {:inline true} {:fieldmap "Mem_T.CurrentByteOffset__FILE_POSITION_INFORMATION"} {:fieldname "CurrentByteOffset"} CurrentByteOffset__FILE_POSITION_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentCharSlot"} CurrentCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentImmediateIrp"} CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 308
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentMaskIrp"} CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentPurgeIrp"} CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 300
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentReadIrp"} CurrentReadIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.CurrentRxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentRxQueue"} CurrentRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_69"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_69(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_7"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_7(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentTxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentTxQueue"} CurrentTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWaitIrp"} CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 304
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWriteIrp"} CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentXoffIrp"} CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T.CutOverAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "CutOverAmount"} CutOverAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Data__SERIAL_IOCTL_SYNC"} {:fieldname "Data"} Data__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DebugLevel"} DebugLevel__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DefaultData__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultData"} DefaultData__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DefaultLength__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultLength"} DefaultLength__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DefaultPermitSystemWideShare__SERIAL_USER_DATA"} {:fieldname "DefaultPermitSystemWideShare"} DefaultPermitSystemWideShare__SERIAL_USER_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.DefaultType__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultType"} DefaultType__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DeletePending__FILE_STANDARD_INFORMATION"} {:fieldname "DeletePending"} DeletePending__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceClassSymbolicName"} DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2632
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DeviceIsOpened__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceIsOpened"} DeviceIsOpened__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 524
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceName"} DeviceName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__IO_STACK_LOCATION"} {:fieldname "DeviceObject"} DeviceObject__IO_STACK_LOCATION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DevicePNPAccept"} DevicePNPAccept__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2652
}

function {:inline true} {:fieldmap "Mem_T.DeviceStateMap__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceStateMap"} DeviceStateMap__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2996
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_DEVICE_STATE"} {:fieldname "DeviceState"} DeviceState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2980
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceWake"} DeviceWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3548
}

function {:inline true} {:fieldmap "Mem_T.Directory__FILE_STANDARD_INFORMATION"} {:fieldname "Directory"} Directory__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DisablePort"} DisablePort__CONFIG_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DisablePort"} DisablePort__SERIAL_USER_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DosName"} DosName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DpcCount__SERIAL_DEVICE_EXTENSION"} {:fieldname "DpcCount"} DpcCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3756
}

function {:inline true} {:fieldmap "Mem_T.Dpc__KTIMER"} {:fieldname "Dpc"} Dpc__KTIMER(x: int) : int
{
  x + 184
}

function {:inline true} {:fieldmap "Mem_T.DriverExtension__DRIVER_OBJECT"} {:fieldname "DriverExtension"} DriverExtension__DRIVER_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__DEVICE_OBJECT"} {:fieldname "DriverObject"} DriverObject__DEVICE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DriverObject"} DriverObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2472
}

function {:inline true} {:fieldmap "Mem_T.DriverUnload__DRIVER_OBJECT"} {:fieldname "DriverUnload"} DriverUnload__DRIVER_OBJECT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EndOfFile__FILE_STANDARD_INFORMATION"} {:fieldname "EndOfFile"} EndOfFile__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EntryContext__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "EntryContext"} EntryContext__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.EofChar__SERIAL_CHARS"} {:fieldname "EofChar"} EofChar__SERIAL_CHARS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ErrorChar__SERIAL_CHARS"} {:fieldname "ErrorChar"} ErrorChar__SERIAL_CHARS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ErrorWord__SERIAL_DEVICE_EXTENSION"} {:fieldname "ErrorWord"} ErrorWord__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.EscapeChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "EscapeChar"} EscapeChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 612
}

function {:inline true} {:fieldmap "Mem_T.EventChar__SERIAL_CHARS"} {:fieldname "EventChar"} EventChar__SERIAL_CHARS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_CHECK_OPEN"} {:fieldname "Extension"} Extension__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_IOCTL_SYNC"} {:fieldname "Extension"} Extension__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_RESIZE_PARAMS"} {:fieldname "Extension"} Extension__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_UPDATE_CHAR"} {:fieldname "Extension"} Extension__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extensions__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "Extensions"} Extensions__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FifoPresent__SERIAL_DEVICE_EXTENSION"} {:fieldname "FifoPresent"} FifoPresent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 624
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_15"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_15(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FirstReadableChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "FirstReadableChar"} FirstReadableChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 344
}

function {:inline true} {:fieldmap "Mem_T.FlagsLock__SERIAL_DEVICE_EXTENSION"} {:fieldname "FlagsLock"} FlagsLock__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 648
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Flags__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Flags"} Flags__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Flags"} Flags__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2816
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FlowReplace__SERIAL_HANDFLOW"} {:fieldname "FlowReplace"} FlowReplace__SERIAL_HANDFLOW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnableDefault__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnableDefault"} ForceFIFOEnableDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFIFOEnable"} ForceFIFOEnable__SERIAL_USER_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFifoEnableDefault"} ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFifoEnable"} ForceFifoEnable__CONFIG_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.GlobalsSpinLock__SERIAL_GLOBALS"} {:fieldname "GlobalsSpinLock"} GlobalsSpinLock__SERIAL_GLOBALS(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_HANDFLOW"} {:fieldname "HandFlow"} HandFlow__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.HandFlow__SERIAL_DEVICE_EXTENSION"} {:fieldname "HandFlow"} HandFlow__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HistoryMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "HistoryMask"} HistoryMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.IER__SERIAL_DEVICE_STATE"} {:fieldname "IER"} IER__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_34"} {:fieldname "IdType"} IdType_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ImmediateTotalTimer"} ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1888
}

function {:inline true} {:fieldmap "Mem_T.InSize__SERIAL_QUEUE_SIZE"} {:fieldname "InSize"} InSize__SERIAL_QUEUE_SIZE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Indexed"} Indexed__CONFIG_DATA(x: int) : int
{
  x + 164
}

function {:inline true} {:fieldmap "Mem_T.Indexed__SERIAL_DEVICE_EXTENSION"} {:fieldname "Indexed"} Indexed__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CONFIG_DATA"} {:fieldname "InterfaceType"} InterfaceType__CONFIG_DATA(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "InterfaceType"} InterfaceType__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterfaceType"} InterfaceType__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__CONFIG_DATA"} {:fieldname "InterruptMode"} InterruptMode__CONFIG_DATA(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptReadBuffer"} InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.InterruptShareable__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptShareable"} InterruptShareable__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__CONFIG_DATA"} {:fieldname "InterruptStatus"} InterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptStatus"} InterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.InterruptType__SERIAL_WMI_HW_DATA"} {:fieldname "InterruptType"} InterruptType__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.P_KINTERRUPT"} {:fieldname "Interrupt"} Interrupt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 252
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_43"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_43(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_57"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_57(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IntervalReadTimeoutDpc"} IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.IntervalTimeToUse__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTimeToUse"} IntervalTimeToUse__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.IntervalTime__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTime"} IntervalTime__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_31"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_31(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._IO_STATUS_BLOCK"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IrpMaskLocation__SERIAL_DEVICE_EXTENSION"} {:fieldname "IrpMaskLocation"} IrpMaskLocation__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.IrqAffinityMask__SERIAL_WMI_HW_DATA"} {:fieldname "IrqAffinityMask"} IrqAffinityMask__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IrqLevel__SERIAL_WMI_HW_DATA"} {:fieldname "IrqLevel"} IrqLevel__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IrqNumber__SERIAL_WMI_HW_DATA"} {:fieldname "IrqNumber"} IrqNumber__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IrqVector__SERIAL_WMI_HW_DATA"} {:fieldname "IrqVector"} IrqVector__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Irql__SERIAL_DEVICE_EXTENSION"} {:fieldname "Irql"} Irql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 556
}

function {:inline true} {:fieldmap "Mem_T.IsBusy__SERIAL_WMI_COMM_DATA"} {:fieldname "IsBusy"} IsBusy__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.IsrFunc__SERIAL_CISR_SW"} {:fieldname "IsrFunc"} IsrFunc__SERIAL_CISR_SW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IsrUnlockPagesDpc"} IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1224
}

function {:inline true} {:fieldmap "Mem_T.IsrWaitMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "IsrWaitMask"} IsrWaitMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.LCR__SERIAL_DEVICE_STATE"} {:fieldname "LCR"} LCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.LastCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "LastCharSlot"} LastCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_44"} {:fieldname "Length"} Length_unnamed_tag_44(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_45"} {:fieldname "Level"} Level_unnamed_tag_45(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LineControl__SERIAL_DEVICE_EXTENSION"} {:fieldname "LineControl"} LineControl__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 520
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_7(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ListSize__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "ListSize"} ListSize__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.LogFIFODefault__SERIAL_USER_DATA"} {:fieldname "LogFIFODefault"} LogFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "LogFifoDefault"} LogFifoDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.LogFifo__CONFIG_DATA"} {:fieldname "LogFifo"} LogFifo__CONFIG_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "LongIntervalAmount"} LongIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowerDeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "LowerDeviceObject"} LowerDeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2464
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "LowerRTSTimer"} LowerRTSTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2272
}

function {:inline true} {:fieldmap "Mem_T.MCR__SERIAL_DEVICE_STATE"} {:fieldname "MCR"} MCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MaskInverted"} MaskInverted__CONFIG_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_USER_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MaskQueue"} MaskQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.MaxBaud__SERIAL_COMMPROP"} {:fieldname "MaxBaud"} MaxBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.MaxRxQueue__SERIAL_COMMPROP"} {:fieldname "MaxRxQueue"} MaxRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.MaxTxQueue__SERIAL_COMMPROP"} {:fieldname "MaxTxQueue"} MaxTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.MaximumAddress_unnamed_tag_58"} {:fieldname "MaximumAddress"} MaximumAddress_unnamed_tag_58(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MaximumBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumBaudRate"} MaximumBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.MaximumInputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumInputBufferSize"} MaximumInputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumOutputBufferSize"} MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.MaximumVector_unnamed_tag_59"} {:fieldname "MaximumVector"} MaximumVector_unnamed_tag_59(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_43"} {:fieldname "Memory"} Memory_unnamed_tag_43(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.MinimumAddress_unnamed_tag_58"} {:fieldname "MinimumAddress"} MinimumAddress_unnamed_tag_58(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinimumVector_unnamed_tag_59"} {:fieldname "MinimumVector"} MinimumVector_unnamed_tag_59(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MultiportSiblings"} MultiportSiblings__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.NameLength__KEY_BASIC_INFORMATION"} {:fieldname "NameLength"} NameLength__KEY_BASIC_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Name__KEY_BASIC_INFORMATION"} {:fieldname "Name"} Name__KEY_BASIC_INFORMATION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Name__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Name"} Name__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewBufferSize__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBufferSize"} NewBufferSize__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.NewBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBuffer"} NewBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewDevicePowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewDevicePowerState"} NewDevicePowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3924
}

function {:inline true} {:fieldmap "Mem_T.NewExtension__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewExtension"} NewExtension__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.NewMaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewMaskInverted"} NewMaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 596
}

function {:inline true} {:fieldmap "Mem_T.NewPortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewPortIndex"} NewPortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 592
}

function {:inline true} {:fieldmap "Mem_T.NumberMoved__SERIAL_RESIZE_PARAMS"} {:fieldname "NumberMoved"} NumberMoved__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NumberNeededForRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "NumberNeededForRead"} NumberNeededForRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.NumberOfLinks__FILE_STANDARD_INFORMATION"} {:fieldname "NumberOfLinks"} NumberOfLinks__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NumberOfStrings__IO_ERROR_LOG_PACKET"} {:fieldname "NumberOfStrings"} NumberOfStrings__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "ObjectDirectory"} ObjectDirectory__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T.OldBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "OldBuffer"} OldBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "OpenCount"} OpenCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2820
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalController"} OriginalController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalInterruptStatus"} OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__CONFIG_DATA"} {:fieldname "OriginalIrql"} OriginalIrql__CONFIG_DATA(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalIrql"} OriginalIrql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__CONFIG_DATA"} {:fieldname "OriginalVector"} OriginalVector__CONFIG_DATA(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalVector"} OriginalVector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.OurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsrContext"} OurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.OurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsr"} OurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_7"} {:fieldname "Overlay"} Overlay_unnamed_tag_6(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION"} {:fieldname "OwnsPowerPolicy"} OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3532
}

function {:inline true} {:fieldmap "Mem_T.PAGESER_Handle__SERIAL_GLOBALS"} {:fieldname "PAGESER_Handle"} PAGESER_Handle__SERIAL_GLOBALS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PDevObj__SERIAL_POWER_COMPLETION_CONTEXT"} {:fieldname "PDevObj"} PDevObj__SERIAL_POWER_COMPLETION_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PNPState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PNPState"} PNPState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2812
}

function {:inline true} {:fieldmap "Mem_T.PSIrp__SERIAL_POWER_COMPLETION_CONTEXT"} {:fieldname "PSIrp"} PSIrp__SERIAL_POWER_COMPLETION_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__SERIAL_COMMPROP"} {:fieldname "PacketLength"} PacketLength__SERIAL_COMMPROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketVersion__SERIAL_COMMPROP"} {:fieldname "PacketVersion"} PacketVersion__SERIAL_COMMPROP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParityCheckEnable__SERIAL_WMI_COMM_DATA"} {:fieldname "ParityCheckEnable"} ParityCheckEnable__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_LINE_CONTROL"} {:fieldname "Parity"} Parity__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_WMI_COMM_DATA"} {:fieldname "Parity"} Parity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Pdo__SERIAL_DEVICE_EXTENSION"} {:fieldname "Pdo"} Pdo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3552
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingDpcEvent"} PendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3760
}

function {:inline true} {:fieldmap "Mem_T.PendingIRPCnt__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingIRPCnt"} PendingIRPCnt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2648
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingIRPEvent"} PendingIRPEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2656
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PendingWakeIrp__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingWakeIrp"} PendingWakeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3560
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "PerhapsLowerRTSDpc"} PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1180
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_USER_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PermitShare"} PermitShare__CONFIG_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.PermitShare__SERIAL_DEVICE_EXTENSION"} {:fieldname "PermitShare"} PermitShare__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T.PermitSystemWideShare__CONFIG_DATA"} {:fieldname "PermitSystemWideShare"} PermitSystemWideShare__CONFIG_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.PermitSystemWideShare__SERIAL_FIRMWARE_DATA"} {:fieldname "PermitSystemWideShare"} PermitSystemWideShare__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PortIndex"} PortIndex__CONFIG_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.PortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortIndex"} PortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortOnAMultiportCard"} PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 548
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_43"} {:fieldname "Port"} Port_unnamed_tag_43(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_57"} {:fieldname "Port"} Port_unnamed_tag_57(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerD0Event"} PowerD0Event__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3024
}

function {:inline true} {:fieldmap "Mem_T.PowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PowerState"} PowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2468
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.ProvCapabilities__SERIAL_COMMPROP"} {:fieldname "ProvCapabilities"} ProvCapabilities__SERIAL_COMMPROP(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProvSubType__SERIAL_COMMPROP"} {:fieldname "ProvSubType"} ProvSubType__SERIAL_COMMPROP(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PurgeQueue"} PurgeQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "RXHolding"} RXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.ReadBufferBase__SERIAL_DEVICE_EXTENSION"} {:fieldname "ReadBufferBase"} ReadBufferBase__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.ReadIntervalTimeout__SERIAL_TIMEOUTS"} {:fieldname "ReadIntervalTimeout"} ReadIntervalTimeout__SERIAL_TIMEOUTS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ReadQueue"} ReadQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestIntervalTimer"} ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1504
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestTotalTimer"} ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1312
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutConstant"} ReadTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutMultiplier"} ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.RegistryPath__SERIAL_GLOBALS"} {:fieldname "RegistryPath"} RegistryPath__SERIAL_GLOBALS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reopen__SERIAL_DEVICE_STATE"} {:fieldname "Reopen"} Reopen__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RetainPowerOnClose__SERIAL_DEVICE_EXTENSION"} {:fieldname "RetainPowerOnClose"} RetainPowerOnClose__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3536
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Revision__IO_RESOURCE_LIST"} {:fieldname "Revision"} Revision__IO_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_USER_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFO"} RxFIFO__CONFIG_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFO"} RxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.RxFifoTrigger__SERIAL_DEVICE_EXTENSION"} {:fieldname "RxFifoTrigger"} RxFifoTrigger__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.RxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "RxFifo"} RxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SendWaitWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendWaitWake"} SendWaitWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3556
}

function {:inline true} {:fieldmap "Mem_T.SendXoffChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXoffChar"} SendXoffChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 620
}

function {:inline true} {:fieldmap "Mem_T.SendXonChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXonChar"} SendXonChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 616
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SerialCount"} SerialCount__CONFIGURATION_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "SerialStartEvent"} SerialStartEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2824
}

function {:inline true} {:fieldmap "Mem_T.ServiceMask__SERIAL_COMMPROP"} {:fieldname "ServiceMask"} ServiceMask__SERIAL_COMMPROP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "SetPendingDpcEvent"} SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1268
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.SettableBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableBaudRate"} SettableBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.SettableBaud__SERIAL_COMMPROP"} {:fieldname "SettableBaud"} SettableBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.SettableDataBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableDataBits"} SettableDataBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.SettableData__SERIAL_COMMPROP"} {:fieldname "SettableData"} SettableData__SERIAL_COMMPROP(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SettableFlowControl__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableFlowControl"} SettableFlowControl__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SettableParams__SERIAL_COMMPROP"} {:fieldname "SettableParams"} SettableParams__SERIAL_COMMPROP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SettableParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParityCheck"} SettableParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.SettableParity__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParity"} SettableParity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SettableStopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableStopBits"} SettableStopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.SettableStopParity__SERIAL_COMMPROP"} {:fieldname "SettableStopParity"} SettableStopParity__SERIAL_COMMPROP(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__IO_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SharerList"} SharerList__SERIAL_CISR_SW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "ShortIntervalAmount"} ShortIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ShouldBreakOnEntry"} ShouldBreakOnEntry__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SkipNaming"} SkipNaming__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3916
}

function {:inline true} {:fieldmap "Mem_T.SlotNumber__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "SlotNumber"} SlotNumber__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__CONFIG_DATA"} {:fieldname "SpanOfController"} SpanOfController__CONFIG_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfController"} SpanOfController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 416
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__CONFIG_DATA"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.SpecialChars__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpecialChars"} SpecialChars__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "StalledIrpQueue"} StalledIrpQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3180
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "StartTimerLowerRTSDpc"} StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1136
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_44"} {:fieldname "Start"} Start_unnamed_tag_44(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatusOfOpen__SERIAL_CHECK_OPEN"} {:fieldname "StatusOfOpen"} StatusOfOpen__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_LINE_CONTROL"} {:fieldname "StopBits"} StopBits__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "StopBits"} StopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.StringOffset__IO_ERROR_LOG_PACKET"} {:fieldname "StringOffset"} StringOffset__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Support16BitMode__SERIAL_WMI_COMM_DATA"} {:fieldname "Support16BitMode"} Support16BitMode__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SupportDTRDSR__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportDTRDSR"} SupportDTRDSR__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportIntervalTimeouts"} SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.SupportParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportParityCheck"} SupportParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.SupportRTSCTS__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportRTSCTS"} SupportRTSCTS__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.SupportXonXoff__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportXonXoff"} SupportXonXoff__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.SupportedBauds__SERIAL_DEVICE_EXTENSION"} {:fieldname "SupportedBauds"} SupportedBauds__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "SymbolicLinkName"} SymbolicLinkName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_3"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_3(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SystemWake"} SystemWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3544
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__CONFIG_DATA(x: int) : int
{
  x + 168
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_DEVICE_EXTENSION"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3920
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_USER_DATA"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_USER_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.TXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "TXHolding"} TXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Timeout__SERIAL_XOFF_COUNTER"} {:fieldname "Timeout"} Timeout__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Timeouts__SERIAL_DEVICE_EXTENSION"} {:fieldname "Timeouts"} Timeouts__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 436
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsrContext"} TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsr"} TopLevelOurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "TopLevelSharers"} TopLevelSharers__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.TotalCharsQueued__SERIAL_DEVICE_EXTENSION"} {:fieldname "TotalCharsQueued"} TotalCharsQueued__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 388
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalImmediateTimeoutDpc"} TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1004
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalReadTimeoutDpc"} TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 740
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalWriteTimeoutDpc"} TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 828
}

function {:inline true} {:fieldmap "Mem_T.TrController__CONFIG_DATA"} {:fieldname "TrController"} TrController__CONFIG_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.TrInterruptStatus__CONFIG_DATA"} {:fieldname "TrInterruptStatus"} TrInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.TrIrql__CONFIG_DATA"} {:fieldname "TrIrql"} TrIrql__CONFIG_DATA(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.TrVector__CONFIG_DATA"} {:fieldname "TrVector"} TrVector__CONFIG_DATA(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_USER_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFO"} TxFIFO__CONFIG_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFO"} TxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.TxFifoAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "TxFifoAmount"} TxFifoAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 428
}

function {:inline true} {:fieldmap "Mem_T.TxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "TxFifo"} TxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_22"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_22(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UartRemovalDetect__SERIAL_DEVICE_EXTENSION"} {:fieldname "UartRemovalDetect"} UartRemovalDetect__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3932
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UartRemovalDetect"} UartRemovalDetect__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapRegisters"} UnMapRegisters__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapStatus"} UnMapStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UsablePortMask__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "UsablePortMask"} UsablePortMask__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserAddressSpace"} UserAddressSpace__SERIAL_USER_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserBusNumber"} UserBusNumber__SERIAL_USER_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserClockRate"} UserClockRate__SERIAL_USER_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserIndexed"} UserIndexed__SERIAL_USER_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserInterfaceType"} UserInterfaceType__SERIAL_USER_DATA(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserInterruptMode"} UserInterruptMode__SERIAL_USER_DATA(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.UserInterruptStatus__SERIAL_USER_DATA"} {:fieldname "UserInterruptStatus"} UserInterruptStatus__SERIAL_USER_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserLevel"} UserLevel__SERIAL_USER_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserPortIndex"} UserPortIndex__SERIAL_USER_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.UserPort__SERIAL_USER_DATA"} {:fieldname "UserPort"} UserPort__SERIAL_USER_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "UserSymbolicLink"} UserSymbolicLink__SERIAL_USER_DATA(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserVector"} UserVector__SERIAL_USER_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ValidDataMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "ValidDataMask"} ValidDataMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 608
}

function {:inline true} {:fieldmap "Mem_T.Vector__SERIAL_DEVICE_EXTENSION"} {:fieldname "Vector"} Vector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 552
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_45"} {:fieldname "Vector"} Vector_unnamed_tag_45(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version__IO_RESOURCE_LIST"} {:fieldname "Version"} Version__IO_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WmiCommData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiCommData"} WmiCommData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3608
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WmiHwData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiHwData"} WmiHwData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3708
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "WmiIdentifier"} WmiIdentifier__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3596
}

function {:inline true} {:fieldmap "Mem_T.WmiLibInfo__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiLibInfo"} WmiLibInfo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3564
}

function {:inline true} {:fieldmap "Mem_T.WordLength__SERIAL_LINE_CONTROL"} {:fieldname "WordLength"} WordLength__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WriteQueue"} WriteQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 264
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "WriteRequestTotalTimer"} WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1696
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutConstant"} WriteTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutMultiplier"} WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.XoffChar__SERIAL_CHARS"} {:fieldname "XoffChar"} XoffChar__SERIAL_CHARS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XoffCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffCharacter"} XoffCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountCompleteDpc"} XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1092
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountTimeoutDpc"} XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1048
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "XoffCountTimer"} XoffCountTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2080
}

function {:inline true} {:fieldmap "Mem_T.XoffLimit__SERIAL_HANDFLOW"} {:fieldname "XoffLimit"} XoffLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.XoffXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffXmitThreshold"} XoffXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XonChar__SERIAL_CHARS"} {:fieldname "XonChar"} XonChar__SERIAL_CHARS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XonCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XonCharacter"} XonCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XonLimit__SERIAL_HANDFLOW"} {:fieldname "XonLimit"} XonLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XonXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XonXmitThreshold"} XonXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__IO_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string ""} unique strConst__li2bpl255: int;

const {:string " The default interrupt read buffer size is: %d\n------  The XoffLimit is                         : %d\n------  The XonLimit is                          : %d\n------  The pt 8 size is                         : %d\n"} unique strConst__li2bpl334: int;

const {:string "%x irp was already marked as cancelled\n"} unique strConst__li2bpl33: int;

const {:string "%x was the first irp processed by this\n------- invocation of startmask\n"} unique strConst__li2bpl29: int;

const {:string "%x will become the current wait irp\n"} unique strConst__li2bpl32: int;

const {:string "'user registry info - userAddressSpace: %d\n"} unique strConst__li2bpl277: int;

const {:string "'user registry info - userBusNumber: %d\n"} unique strConst__li2bpl276: int;

const {:string "'user registry info - userClockRate: %d\n"} unique strConst__li2bpl275: int;

const {:string "'user registry info - userIndexed: %d\n"} unique strConst__li2bpl282: int;

const {:string "'user registry info - userInterfaceType: %d\n"} unique strConst__li2bpl279: int;

const {:string "'user registry info - userInterruptMode: %d\n"} unique strConst__li2bpl278: int;

const {:string "'user registry info - userInterruptStatus: %x\n"} unique strConst__li2bpl273: int;

const {:string "'user registry info - userLevel: %d\n"} unique strConst__li2bpl281: int;

const {:string "'user registry info - userPort: %x\n"} unique strConst__li2bpl272: int;

const {:string "'user registry info - userPortIndex: %d\n"} unique strConst__li2bpl274: int;

const {:string "'user registry info - userVector: %d\n"} unique strConst__li2bpl280: int;

const {:string "*PNP0501"} unique strConst__li2bpl160: int;

const {:string "*PNP0502"} unique strConst__li2bpl161: int;

const {:string "------- BusRelations Query\n"} unique strConst__li2bpl167: int;

const {:string "------- EjectionRelations Query\n"} unique strConst__li2bpl168: int;

const {:string "------- PowerRelations Query\n"} unique strConst__li2bpl169: int;

const {:string "------- RemovalRelations Query\n"} unique strConst__li2bpl170: int;

const {:string "------- TargetDeviceRelation Query\n"} unique strConst__li2bpl171: int;

const {:string "------- Unknown Query\n"} unique strConst__li2bpl166: int;

const {:string "------- failing; multiport node\n"} unique strConst__li2bpl178: int;

const {:string "<SerialCommError\n"} unique strConst__li2bpl1: int;

const {:string "<SerialCompleteImmediate\n"} unique strConst__li2bpl341: int;

const {:string "<SerialCompleteRead(%X)\n"} unique strConst__li2bpl65: int;

const {:string "<SerialCompleteWait\n"} unique strConst__li2bpl37: int;

const {:string "<SerialCompleteWrite\n"} unique strConst__li2bpl39: int;

const {:string "<SerialCompleteXoff\n"} unique strConst__li2bpl47: int;

const {:string "<SerialDisableInterfaces\n"} unique strConst__li2bpl324: int;

const {:string "<SerialFlush (1) %X\n"} unique strConst__li2bpl337: int;

const {:string "<SerialFlush (2) %X\n"} unique strConst__li2bpl338: int;

const {:string "<SerialFlush (3) %X\n"} unique strConst__li2bpl336: int;

const {:string "<SerialGetNextWrite\n"} unique strConst__li2bpl49: int;

const {:string "<SerialGetRegistryKeyValue %X\n"} unique strConst__li2bpl214: int;

const {:string "<SerialInitMultiPort (1) %X\n"} unique strConst__li2bpl299: int;

const {:string "<SerialInitMultiPort (2) %X\n"} unique strConst__li2bpl301: int;

const {:string "<SerialInitMultiPort (3) %X\n"} unique strConst__li2bpl300: int;

const {:string "<SerialKillPendingIrps\n"} unique strConst__li2bpl296: int;

const {:string "<SerialPutRegistryKeyValue %X\n"} unique strConst__li2bpl216: int;

const {:string "<SerialRead (1) %X\n"} unique strConst__li2bpl67: int;

const {:string "<SerialRead (2) %X\n"} unique strConst__li2bpl68: int;

const {:string "<SerialRead (3) %X\n"} unique strConst__li2bpl69: int;

const {:string "<SerialRead (4) %X\n"} unique strConst__li2bpl70: int;

const {:string "<SerialReleaseResources\n"} unique strConst__li2bpl305: int;

const {:string "<SerialRemoveDevObj %X\n"} unique strConst__li2bpl294: int;

const {:string "<SerialStartImmediate\n"} unique strConst__li2bpl340: int;

const {:string "<SerialStartRead %X\n"} unique strConst__li2bpl63: int;

const {:string "<SerialStartTimerLowerRTS\n"} unique strConst__li2bpl191: int;

const {:string "<SerialStartWrite %X\n"} unique strConst__li2bpl51: int;

const {:string "<SerialUnstallIrps\n"} unique strConst__li2bpl62: int;

const {:string "<SerialWrite (1) %X\n"} unique strConst__li2bpl42: int;

const {:string "<SerialWrite (2) %X\n"} unique strConst__li2bpl43: int;

const {:string "<SerialWrite (3) %X\n"} unique strConst__li2bpl44: int;

const {:string "<SerialWrite (4) %X\n"} unique strConst__li2bpl45: int;

const {:string ">SerialCommError(%X)\n"} unique strConst__li2bpl2: int;

const {:string ">SerialCompleteImmediate(%X)\n"} unique strConst__li2bpl342: int;

const {:string ">SerialCompleteRead(%X)\n"} unique strConst__li2bpl66: int;

const {:string ">SerialCompleteWait(%X)\n"} unique strConst__li2bpl38: int;

const {:string ">SerialCompleteWrite(%X)\n"} unique strConst__li2bpl40: int;

const {:string ">SerialCompleteXoff(%X)\n"} unique strConst__li2bpl48: int;

const {:string ">SerialDisableInterfaces(%X, %s)\n"} unique strConst__li2bpl323: int;

const {:string ">SerialFindInitController(%X, %X)\n"} unique strConst__li2bpl319: int;

const {:string ">SerialFlush(%X, %X)\n"} unique strConst__li2bpl335: int;

const {:string ">SerialGetNextWrite(XXX)\n"} unique strConst__li2bpl50: int;

const {:string ">SerialGetRegistryKeyValue(XXX)\n"} unique strConst__li2bpl213: int;

const {:string ">SerialInitMultiPort(%X, %X, %X)\n"} unique strConst__li2bpl298: int;

const {:string ">SerialKillPendingIrps(%X)\n"} unique strConst__li2bpl297: int;

const {:string ">SerialPutRegistryKeyValue(XXX)\n"} unique strConst__li2bpl215: int;

const {:string ">SerialRead(%X, %X)\n"} unique strConst__li2bpl71: int;

const {:string ">SerialReleaseResources(%X)\n"} unique strConst__li2bpl302: int;

const {:string ">SerialRemoveDevObj(%X)\n"} unique strConst__li2bpl293: int;

const {:string ">SerialStartImmediate(%X)\n"} unique strConst__li2bpl339: int;

const {:string ">SerialStartRead(%X)\n"} unique strConst__li2bpl64: int;

const {:string ">SerialStartTimerLowerRTS(%X)\n"} unique strConst__li2bpl192: int;

const {:string ">SerialStartWrite(%X)\n"} unique strConst__li2bpl52: int;

const {:string ">SerialUnstallIrps(%X)\n"} unique strConst__li2bpl60: int;

const {:string ">SerialWrite(%X, %X)\n"} unique strConst__li2bpl46: int;

const {:string "About to connect to interrupt for port %wZ\n------- address of extension is %x\n"} unique strConst__li2bpl143: int;

const {:string "AddressSpace"} unique strConst__li2bpl260: int;

const {:string "Aha! It is a multiport node\n"} unique strConst__li2bpl316: int;

const {:string "Aha! It is a standalone node or first multi\n"} unique strConst__li2bpl314: int;

const {:string "Already in requested power state\n"} unique strConst__li2bpl15: int;

const {:string "Attempting to init %wZ\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n------- Interrupt Mode is %d\n"} unique strConst__li2bpl320: int;

const {:string "Bad status returned: %x \nfor the value entries of\n%ws\n"} unique strConst__li2bpl264: int;

const {:string "Bad status returned: %x \non enumeration for subkey # %d of %wZ\n"} unique strConst__li2bpl245: int;

const {:string "Becoming sharer: %08X %08X %08X\n"} unique strConst__li2bpl318: int;

const {:string "Bogus port address %ws\n"} unique strConst__li2bpl292: int;

const {:string "Bogus port address %x\n"} unique strConst__li2bpl116: int;

const {:string "Bogus port index %ws\n"} unique strConst__li2bpl284: int;

const {:string "Bogus port index %x\n"} unique strConst__li2bpl100: int;

const {:string "Bogus vector %ws\n"} unique strConst__li2bpl291: int;

const {:string "Bogus vector %x\n"} unique strConst__li2bpl115: int;

const {:string "BreakOnEntry"} unique strConst__li2bpl217: int;

const {:string "Building cmreslist in %x\n"} unique strConst__li2bpl223: int;

const {:string "BusNumber"} unique strConst__li2bpl257: int;

const {:string "BusType"} unique strConst__li2bpl258: int;

const {:string "Calling next driver\n"} unique strConst__li2bpl8: int;

const {:string "Can't filter NULL resources!\n"} unique strConst__li2bpl163: int;

const {:string "Canceling wait for irp %x\n"} unique strConst__li2bpl25: int;

const {:string "Cleaning up failed start\n"} unique strConst__li2bpl136: int;

const {:string "Clearing DTR for %x\n"} unique strConst__li2bpl194: int;

const {:string "Clearing Rts for %x\n"} unique strConst__li2bpl193: int;

const {:string "ClockRate"} unique strConst__li2bpl126: int;

const {:string "Close open count bad for: 0x%x\n"} unique strConst__li2bpl54: int;

const {:string "Close prologue failed for: %x\n"} unique strConst__li2bpl53: int;

const {:string "Com AddressSpace: %x\n"} unique strConst__li2bpl109: int;

const {:string "Com Indexed: %x\n"} unique strConst__li2bpl114: int;

const {:string "Com InterfaceType: %x\n"} unique strConst__li2bpl111: int;

const {:string "Com Interrupt Status: %x\n"} unique strConst__li2bpl129: int;

const {:string "Com InterruptMode: %x\n"} unique strConst__li2bpl110: int;

const {:string "Com OriginalIrql: %x\n"} unique strConst__li2bpl113: int;

const {:string "Com OriginalVector: %x\n"} unique strConst__li2bpl112: int;

const {:string "Com Port BusNumber: %x\n"} unique strConst__li2bpl108: int;

const {:string "Com Port ClockRate: %x\n"} unique strConst__li2bpl107: int;

const {:string "Com Port Index: %x\n"} unique strConst__li2bpl106: int;

const {:string "Com Port address: %x\n"} unique strConst__li2bpl128: int;

const {:string "Comparing it to %wZ\n------- already in the device list\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n"} unique strConst__li2bpl309: int;

const {:string "Complete Irp: %X\n"} unique strConst__li2bpl3: int;

const {:string "Completing wait for irp %x\n"} unique strConst__li2bpl36: int;

const {:string "Configuration error for %wZ\n------- Same multiport - different interrupts\n"} unique strConst__li2bpl315: int;

const {:string "Connected interrupt %08X\n"} unique strConst__li2bpl140: int;

const {:string "Could not map memory for device registers for %wZ\n"} unique strConst__li2bpl333: int;

const {:string "Could not map memory for interrupt status for %wZ\n"} unique strConst__li2bpl330: int;

const {:string "Could not report legacy device - %x\n"} unique strConst__li2bpl244: int;

const {:string "Couldn't allocate buffer for the PnP ID\nfor parameters items in %wZ"} unique strConst__li2bpl251: int;

const {:string "Couldn't allocate buffer for the PnP link\n"} unique strConst__li2bpl238: int;

const {:string "Couldn't allocate buffer for the legacy keys\n"} unique strConst__li2bpl250: int;

const {:string "Couldn't allocate buffer for the symbolic link\nfor parameters items in %wZ"} unique strConst__li2bpl252: int;

const {:string "Couldn't allocate memory basic information\nstructure to enumerate subkeys for %wZ"} unique strConst__li2bpl248: int;

const {:string "Couldn't allocate memory for DeviceName\n"} unique strConst__li2bpl85: int;

const {:string "Couldn't allocate memory for Dos name\n"} unique strConst__li2bpl79: int;

const {:string "Couldn't allocate memory for WMI name\n"} unique strConst__li2bpl80: int;

const {:string "Couldn't allocate memory for buffer\n"} unique strConst__li2bpl94: int;

const {:string "Couldn't allocate memory for device name\n"} unique strConst__li2bpl87: int;

const {:string "Couldn't allocate memory for the\n------  user configuration record\n"} unique strConst__li2bpl146: int;

const {:string "Couldn't allocate string for path\nto parameters for %wZ"} unique strConst__li2bpl249: int;

const {:string "Couldn't allocate table for rtl query\nto parameters for %wZ"} unique strConst__li2bpl253: int;

const {:string "Couldn't connect to interrupt for %wZ\n"} unique strConst__li2bpl145: int;

const {:string "Couldn't create the device map entry\n------- for port %wZ\n"} unique strConst__li2bpl77: int;

const {:string "Couldn't create the symbolic link\nfor port %wZ\n"} unique strConst__li2bpl78: int;

const {:string "Couldn't delete value entry %wZ\n"} unique strConst__li2bpl190: int;

const {:string "Couldn't mark multiport\n"} unique strConst__li2bpl228: int;

const {:string "Couldn't migrate ClockRate\n"} unique strConst__li2bpl231: int;

const {:string "Couldn't migrate DisablePort\n"} unique strConst__li2bpl233: int;

const {:string "Couldn't migrate ForceFifoEnable\n"} unique strConst__li2bpl234: int;

const {:string "Couldn't migrate Indexed\n"} unique strConst__li2bpl232: int;

const {:string "Couldn't migrate MaskInverted\n"} unique strConst__li2bpl237: int;

const {:string "Couldn't migrate PortIndex\n"} unique strConst__li2bpl230: int;

const {:string "Couldn't migrate PortName\n"} unique strConst__li2bpl227: int;

const {:string "Couldn't migrate RxFIFO\n"} unique strConst__li2bpl235: int;

const {:string "Couldn't migrate TxFIFO\n"} unique strConst__li2bpl236: int;

const {:string "Couldn't open the drivers Parameters key %wZ\n"} unique strConst__li2bpl247: int;

const {:string "Couldn't register class association\nfor port %wZ\n"} unique strConst__li2bpl74: int;

const {:string "Couldn't set class association\n for port %wZ\n"} unique strConst__li2bpl75: int;

const {:string "Couldn't write registry valuefor LegacyDiscovered in %wZ\n"} unique strConst__li2bpl243: int;

const {:string "Count: %x  Addr: 0x%x\n"} unique strConst__li2bpl55: int;

const {:string "DPC's drained: %x\n"} unique strConst__li2bpl57: int;

const {:string "DebugLevel"} unique strConst__li2bpl218: int;

const {:string "Deleting Link %wZ\n"} unique strConst__li2bpl189: int;

const {:string "DevicePowerState\n"} unique strConst__li2bpl14: int;

const {:string "DisablePort"} unique strConst__li2bpl118: int;

const {:string "Dispatch entry for: %x\n"} unique strConst__li2bpl41: int;

const {:string "DoesPortExist test failed for %wZ\n"} unique strConst__li2bpl331: int;

const {:string "DosDevices"} unique strConst__li2bpl91: int;

const {:string "DosName is %wZ\n"} unique strConst__li2bpl73: int;

const {:string "Draining DPC's: %x\n"} unique strConst__li2bpl58: int;

const {:string "EnablePowerManagement"} unique strConst__li2bpl148: int;

const {:string "Enter SerialAddDevice with PPdo 0x%x\n"} unique strConst__li2bpl132: int;

const {:string "Enter SerialBuildRequirementsList\n"} unique strConst__li2bpl269: int;

const {:string "Enter SerialBuildResourceList\n"} unique strConst__li2bpl222: int;

const {:string "Enter SerialEnumerateLegacy\n"} unique strConst__li2bpl239: int;

const {:string "Enter SerialIsUserDataValid\n"} unique strConst__li2bpl271: int;

const {:string "Enter SerialMigrateLegacyRegistry\n"} unique strConst__li2bpl225: int;

const {:string "Enter SerialRestoreDeviceState\n"} unique strConst__li2bpl24: int;

const {:string "Enter SerialTranslateResourceList\n"} unique strConst__li2bpl265: int;

const {:string "EnterSerialCreateDevObj\n"} unique strConst__li2bpl81: int;

const {:string "Entering SerialSaveDeviceState\n"} unique strConst__li2bpl19: int;

const {:string "Error in config record for %wZ\n------  registers wrap around physical memory\n"} unique strConst__li2bpl306: int;

const {:string "Error in config record for %wZ\n------  status wraps around physical memory\n"} unique strConst__li2bpl307: int;

const {:string "Error in config record for %wZ\n------- Interrupt status overlaps regular registers\n"} unique strConst__li2bpl308: int;

const {:string "Error in config record for %wZ\n------- Register address overlaps with\n------- previous serial device\n"} unique strConst__li2bpl310: int;

const {:string "Error in config record for %wZ\n------- register address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl313: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial device registers\n"} unique strConst__li2bpl311: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl312: int;

const {:string "External Naming Failed - Status %x\n"} unique strConst__li2bpl142: int;

const {:string "FALSE"} unique strConst__li2bpl321: int;

const {:string "Fifo's detected at port address: %x\n"} unique strConst__li2bpl325: int;

const {:string "ForceFifoEnable"} unique strConst__li2bpl119: int;

const {:string "Getting PortName/Identifier failed - %x\n"} unique strConst__li2bpl93: int;

const {:string "Globally sharing interrupt for device %x\n"} unique strConst__li2bpl184: int;

const {:string "Going to power state D0\n"} unique strConst__li2bpl16: int;

const {:string "Going to power state D3\n"} unique strConst__li2bpl17: int;

const {:string "Got IRP_MN_CANCEL_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl149: int;

const {:string "Got IRP_MN_CANCEL_STOP_DEVICE Irp\n"} unique strConst__li2bpl150: int;

const {:string "Got IRP_MN_EJECT Irp\n"} unique strConst__li2bpl156: int;

const {:string "Got IRP_MN_FILTER_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl179: int;

const {:string "Got IRP_MN_POWER_SEQUENCE Irp\n"} unique strConst__li2bpl10: int;

const {:string "Got IRP_MN_QUERY_DEVICE_CAPABILITIES IRP\n"} unique strConst__li2bpl164: int;

const {:string "Got IRP_MN_QUERY_DEVICE_RELATIONS Irp\n"} unique strConst__li2bpl151: int;

const {:string "Got IRP_MN_QUERY_ID Irp\n"} unique strConst__li2bpl185: int;

const {:string "Got IRP_MN_QUERY_INTERFACE Irp\n"} unique strConst__li2bpl152: int;

const {:string "Got IRP_MN_QUERY_POWER Irp\n"} unique strConst__li2bpl12: int;

const {:string "Got IRP_MN_QUERY_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl175: int;

const {:string "Got IRP_MN_QUERY_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl153: int;

const {:string "Got IRP_MN_QUERY_STOP_DEVICE Irp\n"} unique strConst__li2bpl172: int;

const {:string "Got IRP_MN_READ_CONFIG Irp\n"} unique strConst__li2bpl154: int;

const {:string "Got IRP_MN_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl174: int;

const {:string "Got IRP_MN_SET_LOCK Irp\n"} unique strConst__li2bpl157: int;

const {:string "Got IRP_MN_SET_POWER Irp\n"} unique strConst__li2bpl11: int;

const {:string "Got IRP_MN_START_DEVICE Irp\n"} unique strConst__li2bpl176: int;

const {:string "Got IRP_MN_STOP_DEVICE Irp\n"} unique strConst__li2bpl173: int;

const {:string "Got IRP_MN_SURPRISE_REMOVAL Irp\n"} unique strConst__li2bpl158: int;

const {:string "Got IRP_MN_WAIT_WAKE Irp\n"} unique strConst__li2bpl9: int;

const {:string "Got IRP_MN_WRITE_CONFIG Irp\n"} unique strConst__li2bpl155: int;

const {:string "ID is sole ID\n"} unique strConst__li2bpl162: int;

const {:string "ISR map failed attempt was \n------- Interface:  %x\n------- Bus Number: %x\n------- IntStatus:  %x\n------- AddrSpace:  %x\n------- PhysAddr:   %x\n"} unique strConst__li2bpl267: int;

const {:string "ISR map was %x\n"} unique strConst__li2bpl266: int;

const {:string "Identifier"} unique strConst__li2bpl89: int;

const {:string "In Ioctl processing for set mask\n"} unique strConst__li2bpl209: int;

const {:string "In Ioctl processing for wait mask\n"} unique strConst__li2bpl206: int;

const {:string "In SerialCancelWait\n"} unique strConst__li2bpl26: int;

const {:string "In SerialClose\n"} unique strConst__li2bpl56: int;

const {:string "In SerialCompleteWait\n"} unique strConst__li2bpl35: int;

const {:string "In SerialCreateOpen\n"} unique strConst__li2bpl59: int;

const {:string "In SerialGotoPowerState\n"} unique strConst__li2bpl4: int;

const {:string "In SerialSetPowerD0\n"} unique strConst__li2bpl6: int;

const {:string "In SerialSetPowerD3\n"} unique strConst__li2bpl21: int;

const {:string "In SerialStartMask\n"} unique strConst__li2bpl34: int;

const {:string "In SerialUndoExternalNaming for\nextension: %x of port %wZ\n"} unique strConst__li2bpl188: int;

const {:string "In SerialUnload\n"} unique strConst__li2bpl295: int;

const {:string "Indexed"} unique strConst__li2bpl125: int;

const {:string "Initializing for configuration record of %wZ\n"} unique strConst__li2bpl327: int;

const {:string "Interrupt"} unique strConst__li2bpl130: int;

const {:string "Interrupt Status"} unique strConst__li2bpl263: int;

const {:string "InterruptLevel"} unique strConst__li2bpl261: int;

const {:string "InterruptMode"} unique strConst__li2bpl259: int;

const {:string "InterruptStatus"} unique strConst__li2bpl256: int;

const {:string "Invalid Bus type %ws\n"} unique strConst__li2bpl286: int;

const {:string "Invalid Bus type %x\n"} unique strConst__li2bpl103: int;

const {:string "Invalid size fo the buffer %d\n"} unique strConst__li2bpl210: int;

const {:string "Invalid size for the buffer %d\n"} unique strConst__li2bpl208: int;

const {:string "IoConnectInterrupt Args:\nInterrupt           %x\nOurIsr              %x\nOurIsrContext       %x\nNULL\nVector              %x\nIrql                %x\nInterruptMode       %x\nInterruptShareable  %x\nProcessorAffinity   %x\nFALSE\n"} unique strConst__li2bpl144: int;

const {:string "IoOpenDeviceRegistryKey failed - %x \n"} unique strConst__li2bpl117: int;

const {:string "Kernel debugger is using port at address %X\n"} unique strConst__li2bpl328: int;

const {:string "Latched interrupts and MicroChannel\nbusses don't mix\n"} unique strConst__li2bpl105: int;

const {:string "Latched interrupts and MicroChannel\nbusses don't mix,%ws\n"} unique strConst__li2bpl287: int;

const {:string "Leave (1) SerialMigrateLegacyRegistry\n"} unique strConst__li2bpl226: int;

const {:string "Leave (2) SerialMigrateLegacyRegistry\n"} unique strConst__li2bpl229: int;

const {:string "Leave SerialAddDevice\n"} unique strConst__li2bpl135: int;

const {:string "Leave SerialBuildRequirementsList\n"} unique strConst__li2bpl270: int;

const {:string "Leave SerialBuildResourceList\n"} unique strConst__li2bpl224: int;

const {:string "Leave SerialCreateDevObj\n"} unique strConst__li2bpl84: int;

const {:string "Leave SerialEnumerateLegacy\n"} unique strConst__li2bpl246: int;

const {:string "Leave SerialIsUserDataValid\n"} unique strConst__li2bpl283: int;

const {:string "Leaving SerialGotoPowerState\n"} unique strConst__li2bpl5: int;

const {:string "Leaving SerialSaveDeviceState\n"} unique strConst__li2bpl20: int;

const {:string "LegacyDiscovered"} unique strConst__li2bpl242: int;

const {:string "List has %x lists (including alternatives)\n"} unique strConst__li2bpl180: int;

const {:string "List has %x resources in it\n"} unique strConst__li2bpl181: int;

const {:string "LogFifo"} unique strConst__li2bpl220: int;

const {:string "Mapping power capabilities\n"} unique strConst__li2bpl165: int;

const {:string "MaskInverted"} unique strConst__li2bpl122: int;

const {:string "Matched to %x\n"} unique strConst__li2bpl317: int;

const {:string "MultiportDevice"} unique strConst__li2bpl98: int;

const {:string "Not doing external naming -- state is %x\n"} unique strConst__li2bpl141: int;

const {:string "Overflowed the enumerate buffer\nfor subkey #%d of %wZ\n"} unique strConst__li2bpl241: int;

const {:string "PDevExt: %x\n"} unique strConst__li2bpl22: int;

const {:string "Parameters"} unique strConst__li2bpl240: int;

const {:string "Perhaps another mask irp was found in the queue\n------- %x/%x <- values should be the same\n"} unique strConst__li2bpl30: int;

const {:string "PermitShare"} unique strConst__li2bpl219: int;

const {:string "PnPDeviceID"} unique strConst__li2bpl262: int;

const {:string "Port index must be > 0 for any\nport on a multiport card: %ws\n"} unique strConst__li2bpl289: int;

const {:string "Port index must be > 0 for any\nport on a multiport card: %x\n"} unique strConst__li2bpl102: int;

const {:string "Port map failed attempt was \n------- Interface:  %x\n------- Bus Number: %x\n------- userPort:  %x\n------- AddrSpace:  %x\n------- PhysAddr:   %x\n"} unique strConst__li2bpl268: int;

const {:string "PortAddress"} unique strConst__li2bpl131: int;

const {:string "PortIndex"} unique strConst__li2bpl124: int;

const {:string "PortName"} unique strConst__li2bpl88: int;

const {:string "Read name %wZ\n"} unique strConst__li2bpl92: int;

const {:string "Release - disconnecting interrupt %X\n"} unique strConst__li2bpl303: int;

const {:string "Release - freeing multi context\n"} unique strConst__li2bpl304: int;

const {:string "Reopening device\n"} unique strConst__li2bpl23: int;

const {:string "RxFIFO"} unique strConst__li2bpl120: int;

const {:string "SERIAL - %x is a SETMASK irp\n"} unique strConst__li2bpl28: int;

const {:string "SERIALCOMM"} unique strConst__li2bpl76: int;

const {:string "STARTMASK - CurrentMaskIrp: %x\n"} unique strConst__li2bpl27: int;

const {:string "Serial driver will not load port\n"} unique strConst__li2bpl329: int;

const {:string "SerialAddDevice - error creating new devobj [%#08lx]\n"} unique strConst__li2bpl134: int;

const {:string "SerialAddDevice: Create device failed - %x \n"} unique strConst__li2bpl83: int;

const {:string "SerialAddDevice: Enumeration request, returning NO_MORE_ENTRIES\n"} unique strConst__li2bpl133: int;

const {:string "SerialCreateDevObj Error, Cleaning up\n"} unique strConst__li2bpl86: int;

const {:string "SerialFinishStartDevice got NULL pDevExt\n"} unique strConst__li2bpl138: int;

const {:string "SerialIoResourcesIndex"} unique strConst__li2bpl99: int;

const {:string "SerialRelinquishPowerPolicy"} unique strConst__li2bpl147: int;

const {:string "SerialSkipExternalNaming"} unique strConst__li2bpl72: int;

const {:string "SetPowerD0 has IRP %x\n"} unique strConst__li2bpl7: int;

const {:string "Share System Interrupt"} unique strConst__li2bpl123: int;

const {:string "Sharing I/O port for device %x\n"} unique strConst__li2bpl182: int;

const {:string "Sharing interrupt for device %x\n"} unique strConst__li2bpl183: int;

const {:string "Starting or queuing set mask irp %x\n"} unique strConst__li2bpl211: int;

const {:string "Starting or queuing wait mask irp%x\n"} unique strConst__li2bpl207: int;

const {:string "SystemPowerState\n"} unique strConst__li2bpl18: int;

const {:string "TL16C550C Auto Flow Control"} unique strConst__li2bpl127: int;

const {:string "TR resource pointer is %x\n"} unique strConst__li2bpl97: int;

const {:string "TRUE"} unique strConst__li2bpl322: int;

const {:string "The driver calls ZwCreateKey with a registry key that has been created already."} unique strConst__li2bpl204: int;

const {:string "The driver is returning without closing an open handle."} unique strConst__li2bpl195: int;

const {:string "The driver is trying to close an invalid handle."} unique strConst__li2bpl198: int;

const {:string "The driver is trying to commit the changes made on a registry key to disk by calling ZwFlushKey with an invalid handle."} unique strConst__li2bpl201: int;

const {:string "The driver is trying to delete a registry key with an invalid handle."} unique strConst__li2bpl199: int;

const {:string "The driver is trying to enumerate a registry key by calling ZwEnumerateKey with an invalid handle."} unique strConst__li2bpl205: int;

const {:string "The driver is trying to obtain information about a registry key and its subkeys by calling ZwQueryKey with an invalid handle."} unique strConst__li2bpl200: int;

const {:string "The driver is trying to obtain information about the value entries of a registry key by calling ZwEnumerateValueKey with an invalid handle."} unique strConst__li2bpl203: int;

const {:string "The driver is trying to obtain the the value entries for a registry key by calling ZwQueryValueKey with an invalid handle."} unique strConst__li2bpl202: int;

const {:string "The driver is trying to replace or create a value entry for a registry key by calling ZwSetValueKey with an invalid handle."} unique strConst__li2bpl197: int;

const {:string "The number of bytes in the extension is: %d\n"} unique strConst__li2bpl326: int;

const {:string "There aren't that many of those\nbusses on this system,%ws\n"} unique strConst__li2bpl288: int;

const {:string "There aren't that many of those\nbusses on this system,%x\n"} unique strConst__li2bpl104: int;

const {:string "TxFIFO"} unique strConst__li2bpl121: int;

const {:string "UNKNOWN PowerState\n"} unique strConst__li2bpl13: int;

const {:string "UartRemovalDetect"} unique strConst__li2bpl221: int;

const {:string "Unknown mask %x\n"} unique strConst__li2bpl212: int;

const {:string "Unstalling Irp 0x%x with 0x%x\n"} unique strConst__li2bpl61: int;

const {:string "WaitIrp is invalid\n------- IsrWaitMask: %x\n------- CurrentWaitIrp: %x\n"} unique strConst__li2bpl31: int;

const {:string "\\"} unique strConst__li2bpl90: int;

const {:string "\\Device\\Serial"} unique strConst__li2bpl82: int;

const {:string "bogus value for %ws\n"} unique strConst__li2bpl290: int;

const {:string "callee"} unique strConst__li2bpl0: int;

const {:string "caller"} unique strConst__li2bpl254: int;

const {:string "disabled port %wZ as requested in configuration\n"} unique strConst__li2bpl332: int;

const {:string "entering SerialGetPortInfo\n"} unique strConst__li2bpl95: int;

const {:string "entering SerialStartDevice\n"} unique strConst__li2bpl186: int;

const {:string "error with IoCallDriver %x\n"} unique strConst__li2bpl187: int;

const {:string "failing; device open\n"} unique strConst__li2bpl177: int;

const {:string "for device %x\n"} unique strConst__li2bpl159: int;

const {:string "halt"} unique strConst__li2bpl196: int;

const {:string "leaving SerialFinishStartDevice\n"} unique strConst__li2bpl137: int;

const {:string "pDevExt: Interrupt %x\n-------               OurIsr %x\n"} unique strConst__li2bpl139: int;

const {:string "port index to large %ws\n"} unique strConst__li2bpl285: int;

const {:string "port index to large %x\n"} unique strConst__li2bpl101: int;

const {:string "resource pointer is %x\n"} unique strConst__li2bpl96: int;

const {:allocated} li2bplFunctionConstant1028: int;

axiom li2bplFunctionConstant1028 == 1028;

const {:allocated} li2bplFunctionConstant1029: int;

axiom li2bplFunctionConstant1029 == 1029;

const {:allocated} li2bplFunctionConstant1030: int;

axiom li2bplFunctionConstant1030 == 1030;

const {:allocated} li2bplFunctionConstant1036: int;

axiom li2bplFunctionConstant1036 == 1036;

const {:allocated} li2bplFunctionConstant1037: int;

axiom li2bplFunctionConstant1037 == 1037;

const {:allocated} li2bplFunctionConstant1040: int;

axiom li2bplFunctionConstant1040 == 1040;

const {:allocated} li2bplFunctionConstant1041: int;

axiom li2bplFunctionConstant1041 == 1041;

const {:allocated} li2bplFunctionConstant1042: int;

axiom li2bplFunctionConstant1042 == 1042;

const {:allocated} li2bplFunctionConstant1048: int;

axiom li2bplFunctionConstant1048 == 1048;

const {:allocated} li2bplFunctionConstant1086: int;

axiom li2bplFunctionConstant1086 == 1086;

const {:allocated} li2bplFunctionConstant1087: int;

axiom li2bplFunctionConstant1087 == 1087;

const {:allocated} li2bplFunctionConstant1088: int;

axiom li2bplFunctionConstant1088 == 1088;

const {:allocated} li2bplFunctionConstant1089: int;

axiom li2bplFunctionConstant1089 == 1089;

const {:allocated} li2bplFunctionConstant1125: int;

axiom li2bplFunctionConstant1125 == 1125;

const {:allocated} li2bplFunctionConstant1243: int;

axiom li2bplFunctionConstant1243 == 1243;

const {:allocated} li2bplFunctionConstant1245: int;

axiom li2bplFunctionConstant1245 == 1245;

const {:allocated} li2bplFunctionConstant1248: int;

axiom li2bplFunctionConstant1248 == 1248;

const {:allocated} li2bplFunctionConstant336: int;

axiom li2bplFunctionConstant336 == 336;

const {:allocated} li2bplFunctionConstant339: int;

axiom li2bplFunctionConstant339 == 339;

const {:allocated} li2bplFunctionConstant340: int;

axiom li2bplFunctionConstant340 == 340;

const {:allocated} li2bplFunctionConstant341: int;

axiom li2bplFunctionConstant341 == 341;

const {:allocated} li2bplFunctionConstant342: int;

axiom li2bplFunctionConstant342 == 342;

const {:allocated} li2bplFunctionConstant343: int;

axiom li2bplFunctionConstant343 == 343;

const {:allocated} li2bplFunctionConstant348: int;

axiom li2bplFunctionConstant348 == 348;

const {:allocated} li2bplFunctionConstant385: int;

axiom li2bplFunctionConstant385 == 385;

const {:allocated} li2bplFunctionConstant393: int;

axiom li2bplFunctionConstant393 == 393;

const {:allocated} li2bplFunctionConstant394: int;

axiom li2bplFunctionConstant394 == 394;

const {:allocated} li2bplFunctionConstant395: int;

axiom li2bplFunctionConstant395 == 395;

const {:allocated} li2bplFunctionConstant396: int;

axiom li2bplFunctionConstant396 == 396;

const {:allocated} li2bplFunctionConstant438: int;

axiom li2bplFunctionConstant438 == 438;

const {:allocated} li2bplFunctionConstant515: int;

axiom li2bplFunctionConstant515 == 515;

const {:allocated} li2bplFunctionConstant517: int;

axiom li2bplFunctionConstant517 == 517;

const {:allocated} li2bplFunctionConstant518: int;

axiom li2bplFunctionConstant518 == 518;

const {:allocated} li2bplFunctionConstant522: int;

axiom li2bplFunctionConstant522 == 522;

const {:allocated} li2bplFunctionConstant523: int;

axiom li2bplFunctionConstant523 == 523;

const {:allocated} li2bplFunctionConstant524: int;

axiom li2bplFunctionConstant524 == 524;

const {:allocated} li2bplFunctionConstant525: int;

axiom li2bplFunctionConstant525 == 525;

const {:allocated} li2bplFunctionConstant526: int;

axiom li2bplFunctionConstant526 == 526;

const {:allocated} li2bplFunctionConstant568: int;

axiom li2bplFunctionConstant568 == 568;

const {:allocated} li2bplFunctionConstant569: int;

axiom li2bplFunctionConstant569 == 569;

const {:allocated} li2bplFunctionConstant570: int;

axiom li2bplFunctionConstant570 == 570;

const {:allocated} li2bplFunctionConstant571: int;

axiom li2bplFunctionConstant571 == 571;

const {:allocated} li2bplFunctionConstant572: int;

axiom li2bplFunctionConstant572 == 572;

const {:allocated} li2bplFunctionConstant573: int;

axiom li2bplFunctionConstant573 == 573;

const {:allocated} li2bplFunctionConstant574: int;

axiom li2bplFunctionConstant574 == 574;

const {:allocated} li2bplFunctionConstant575: int;

axiom li2bplFunctionConstant575 == 575;

const {:allocated} li2bplFunctionConstant576: int;

axiom li2bplFunctionConstant576 == 576;

const {:allocated} li2bplFunctionConstant577: int;

axiom li2bplFunctionConstant577 == 577;

const {:allocated} li2bplFunctionConstant578: int;

axiom li2bplFunctionConstant578 == 578;

const {:allocated} li2bplFunctionConstant579: int;

axiom li2bplFunctionConstant579 == 579;

const {:allocated} li2bplFunctionConstant580: int;

axiom li2bplFunctionConstant580 == 580;

const {:allocated} li2bplFunctionConstant581: int;

axiom li2bplFunctionConstant581 == 581;

const {:allocated} li2bplFunctionConstant617: int;

axiom li2bplFunctionConstant617 == 617;

const {:allocated} li2bplFunctionConstant618: int;

axiom li2bplFunctionConstant618 == 618;

const {:allocated} li2bplFunctionConstant619: int;

axiom li2bplFunctionConstant619 == 619;

const {:allocated} li2bplFunctionConstant620: int;

axiom li2bplFunctionConstant620 == 620;

const {:allocated} li2bplFunctionConstant621: int;

axiom li2bplFunctionConstant621 == 621;

const {:allocated} li2bplFunctionConstant622: int;

axiom li2bplFunctionConstant622 == 622;

const {:allocated} li2bplFunctionConstant660: int;

axiom li2bplFunctionConstant660 == 660;

const {:allocated} li2bplFunctionConstant665: int;

axiom li2bplFunctionConstant665 == 665;

const {:allocated} li2bplFunctionConstant667: int;

axiom li2bplFunctionConstant667 == 667;

const {:allocated} li2bplFunctionConstant673: int;

axiom li2bplFunctionConstant673 == 673;

const {:allocated} li2bplFunctionConstant678: int;

axiom li2bplFunctionConstant678 == 678;

const {:allocated} li2bplFunctionConstant719: int;

axiom li2bplFunctionConstant719 == 719;

const {:allocated} li2bplFunctionConstant720: int;

axiom li2bplFunctionConstant720 == 720;

const {:allocated} li2bplFunctionConstant721: int;

axiom li2bplFunctionConstant721 == 721;

const {:allocated} li2bplFunctionConstant722: int;

axiom li2bplFunctionConstant722 == 722;

const {:allocated} li2bplFunctionConstant723: int;

axiom li2bplFunctionConstant723 == 723;

const {:allocated} li2bplFunctionConstant725: int;

axiom li2bplFunctionConstant725 == 725;

const {:allocated} li2bplFunctionConstant726: int;

axiom li2bplFunctionConstant726 == 726;

const {:allocated} li2bplFunctionConstant728: int;

axiom li2bplFunctionConstant728 == 728;

const {:allocated} li2bplFunctionConstant731: int;

axiom li2bplFunctionConstant731 == 731;

const {:allocated} li2bplFunctionConstant768: int;

axiom li2bplFunctionConstant768 == 768;

const {:allocated} li2bplFunctionConstant769: int;

axiom li2bplFunctionConstant769 == 769;

const {:allocated} li2bplFunctionConstant805: int;

axiom li2bplFunctionConstant805 == 805;

const {:allocated} li2bplFunctionConstant806: int;

axiom li2bplFunctionConstant806 == 806;

const {:allocated} li2bplFunctionConstant842: int;

axiom li2bplFunctionConstant842 == 842;

const {:allocated} li2bplFunctionConstant843: int;

axiom li2bplFunctionConstant843 == 843;

const {:allocated} li2bplFunctionConstant844: int;

axiom li2bplFunctionConstant844 == 844;

const {:allocated} li2bplFunctionConstant845: int;

axiom li2bplFunctionConstant845 == 845;

const {:allocated} li2bplFunctionConstant846: int;

axiom li2bplFunctionConstant846 == 846;

const {:allocated} li2bplFunctionConstant848: int;

axiom li2bplFunctionConstant848 == 848;

const {:allocated} li2bplFunctionConstant849: int;

axiom li2bplFunctionConstant849 == 849;

const {:allocated} li2bplFunctionConstant851: int;

axiom li2bplFunctionConstant851 == 851;

const {:allocated} li2bplFunctionConstant888: int;

axiom li2bplFunctionConstant888 == 888;

const {:allocated} li2bplFunctionConstant889: int;

axiom li2bplFunctionConstant889 == 889;

const {:allocated} li2bplFunctionConstant891: int;

axiom li2bplFunctionConstant891 == 891;

const {:allocated} li2bplFunctionConstant892: int;

axiom li2bplFunctionConstant892 == 892;

const {:allocated} li2bplFunctionConstant893: int;

axiom li2bplFunctionConstant893 == 893;

const {:allocated} li2bplFunctionConstant894: int;

axiom li2bplFunctionConstant894 == 894;

const {:allocated} li2bplFunctionConstant899: int;

axiom li2bplFunctionConstant899 == 899;

const {:allocated} li2bplFunctionConstant900: int;

axiom li2bplFunctionConstant900 == 900;

const {:allocated} li2bplFunctionConstant901: int;

axiom li2bplFunctionConstant901 == 901;

const {:allocated} li2bplFunctionConstant940: int;

axiom li2bplFunctionConstant940 == 940;

const {:allocated} li2bplFunctionConstant978: int;

axiom li2bplFunctionConstant978 == 978;

const {:allocated} li2bplFunctionConstant979: int;

axiom li2bplFunctionConstant979 == 979;

const {:allocated} li2bplFunctionConstant980: int;

axiom li2bplFunctionConstant980 == 980;

const {:allocated} li2bplFunctionConstant981: int;

axiom li2bplFunctionConstant981 == 981;

const {:allocated} li2bplFunctionConstant982: int;

axiom li2bplFunctionConstant982 == 982;

const {:allocated} li2bplFunctionConstant983: int;

axiom li2bplFunctionConstant983 == 983;

const {:allocated} li2bplFunctionConstant984: int;

axiom li2bplFunctionConstant984 == 984;

const {:allocated} li2bplFunctionConstant985: int;

axiom li2bplFunctionConstant985 == 985;

const {:allocated} li2bplFunctionConstant986: int;

axiom li2bplFunctionConstant986 == 986;

const {:allocated} li2bplFunctionConstant987: int;

axiom li2bplFunctionConstant987 == 987;

const {:allocated} li2bplFunctionConstant988: int;

axiom li2bplFunctionConstant988 == 988;

const {:allocated} li2bplFunctionConstant990: int;

axiom li2bplFunctionConstant990 == 990;

implementation {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_9: int) returns (Tmp_145: int)
{
  var {:pointer} Tmp_146: int;
  var {:pointer} Tmp_147: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} FirstStatus_1: int;
  var {:scalar} TotalTime: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_148: int;
  var {:pointer} s_p_e_c_i_a_l_8: int;
  var {:scalar} UseATimer: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} sdv_123: int;
  var {:pointer} Tmp_149: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} sdv_124: int;
  var {:pointer} sdv_125: int;
  var {:pointer} NewIrp_2: int;
  var {:pointer} Tmp_150: int;
  var {:scalar} s_p_e_c_i_a_l_9: int;
  var {:pointer} sdv_126: int;
  var {:scalar} Tmp_151: int;
  var {:pointer} sdv_128: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:scalar} Timeouts: int;
  var {:scalar} s_p_e_c_i_a_l_12: int;
  var {:pointer} Extension_9: int;
  var vslice_dummy_var_732: int;
  var vslice_dummy_var_733: int;
  var vslice_dummy_var_734: int;
  var vslice_dummy_var_735: int;
  var vslice_dummy_var_736: int;
  var vslice_dummy_var_1892: int;
  var vslice_dummy_var_1893: int;
  var vslice_dummy_var_1894: int;
  var vslice_dummy_var_1895: int;
  var vslice_dummy_var_1896: int;
  var vslice_dummy_var_1897: int;
  var vslice_dummy_var_1898: int;

  anon0:
    call {:si_unique_call 2908} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 2909} NewIrp_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2910} Timeouts := __HAVOC_malloc(20);
    Extension_9 := actual_Extension_9;
    call {:si_unique_call 2911} Tmp_148 := __HAVOC_malloc(88);
    call {:si_unique_call 2912} Tmp_149 := __HAVOC_malloc(92);
    SetFirstStatus_1 := 0;
    Tmp_149 := strConst__li2bpl52;
    call {:si_unique_call 2913} vslice_dummy_var_735 := SerialDbgPrintEx(2, Tmp_149);
    goto L14;

  L14:
    call {:si_unique_call 2914} Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_124, Tmp_150, s_p_e_c_i_a_l_9, sdv_126, Tmp_151, sdv_128, Tmp_152 := SerialStartWrite#0_loop_L14(Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, TotalTime, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_124, NewIrp_2, Tmp_150, s_p_e_c_i_a_l_9, sdv_126, Tmp_151, sdv_128, Tmp_152, Timeouts, Extension_9);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2937} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    call {:si_unique_call 2938} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    havoc OldIrql_7;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1892;
    call {:si_unique_call 2915} sdv_124 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1892);
    assume {:nonnull} sdv_124 != 0;
    assume sdv_124 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_124)))] != 0;
    s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1893;
    call {:si_unique_call 2916} sdv_126 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1893);
    assume {:nonnull} sdv_126 != 0;
    assume sdv_126 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_126)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_152;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2917} SerialTryToCompleteCurrent#0(Extension_9, li2bplFunctionConstant570, OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, 16);
    goto L40;

  L40:
    UseATimer := 0;
    call {:si_unique_call 2918} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    call {:si_unique_call 2919} sdv_KeAcquireSpinLock(0, Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    havoc OldIrql_7;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 2920} sdv_KeReleaseSpinLock(0, OldIrql_7);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1894;
    call {:si_unique_call 2921} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1894);
    UseATimer := 1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1895;
    call {:si_unique_call 2922} sdv_128 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1895);
    assume {:nonnull} sdv_128 != 0;
    assume sdv_128 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_128)))] := 0;
    call {:si_unique_call 2923} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    call {:si_unique_call 2924} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    havoc OldIrql_7;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_146;
    assume {:nonnull} Tmp_146 != 0;
    assume Tmp_146 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 2925} IoReleaseCancelSpinLock(OldIrql_7);
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_150;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2926} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_9), NewIrp_2, 1, Extension_9);
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L79;

  L79:
    Tmp_148 := strConst__li2bpl51;
    call {:si_unique_call 2927} vslice_dummy_var_736 := SerialDbgPrintEx(2, Tmp_148);
    Tmp_145 := FirstStatus_1;
    return;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L75;

  anon28_Then:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1896;
    call {:si_unique_call 2928} vslice_dummy_var_732 := sdv_IoSetCancelRoutine(vslice_dummy_var_1896, li2bplFunctionConstant571);
    s_p_e_c_i_a_l_11 := 2;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1897;
    call {:si_unique_call 2929} sdv_123 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1897);
    assume {:nonnull} sdv_123 != 0;
    assume sdv_123 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_123)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2930} vslice_dummy_var_734 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_9), TotalTime, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_9), Extension_9);
    s_p_e_c_i_a_l_12 := 4;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1898;
    call {:si_unique_call 2931} sdv_125 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1898);
    assume {:nonnull} sdv_125 != 0;
    assume sdv_125 > 0;
    s_p_e_c_i_a_l_8 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_125)));
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    goto L99;

  L99:
    call {:si_unique_call 2932} vslice_dummy_var_733 := KeSynchronizeExecution(0, li2bplFunctionConstant572, 0);
    call {:si_unique_call 2933} IoReleaseCancelSpinLock(OldIrql_7);
    goto L79;

  anon30_Then:
    assume {:partition} UseATimer == 0;
    goto L99;

  anon25_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    call {:si_unique_call 2934} sdv_IoMarkIrpPending(0);
    SetFirstStatus_1 := 1;
    FirstStatus_1 := 259;
    goto L87;

  anon27_Then:
    Tmp_151 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon22_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_124)))] == 0;
    call {:si_unique_call 2935} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;

  anon21_Then:
    call {:si_unique_call 2936} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_9: int) returns (Tmp_145: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_9: int) returns (Tmp_145: int)
{
  var {:pointer} Tmp_146: int;
  var {:pointer} Tmp_147: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} FirstStatus_1: int;
  var {:scalar} TotalTime: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_148: int;
  var {:pointer} s_p_e_c_i_a_l_8: int;
  var {:scalar} UseATimer: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} sdv_123: int;
  var {:pointer} Tmp_149: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} sdv_124: int;
  var {:pointer} sdv_125: int;
  var {:pointer} NewIrp_2: int;
  var {:pointer} Tmp_150: int;
  var {:scalar} s_p_e_c_i_a_l_9: int;
  var {:pointer} sdv_126: int;
  var {:scalar} Tmp_151: int;
  var {:pointer} sdv_128: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:scalar} Timeouts: int;
  var {:scalar} s_p_e_c_i_a_l_12: int;
  var {:pointer} Extension_9: int;
  var vslice_dummy_var_737: int;
  var vslice_dummy_var_738: int;
  var vslice_dummy_var_739: int;
  var vslice_dummy_var_740: int;
  var vslice_dummy_var_741: int;
  var vslice_dummy_var_1899: int;
  var vslice_dummy_var_1900: int;
  var vslice_dummy_var_1901: int;
  var vslice_dummy_var_1902: int;
  var vslice_dummy_var_1903: int;
  var vslice_dummy_var_1904: int;
  var vslice_dummy_var_1905: int;

  anon0:
    call {:si_unique_call 2939} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 2940} NewIrp_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2941} Timeouts := __HAVOC_malloc(20);
    Extension_9 := actual_Extension_9;
    call {:si_unique_call 2942} Tmp_148 := __HAVOC_malloc(88);
    call {:si_unique_call 2943} Tmp_149 := __HAVOC_malloc(92);
    SetFirstStatus_1 := 0;
    Tmp_149 := strConst__li2bpl52;
    call {:si_unique_call 2944} vslice_dummy_var_740 := SerialDbgPrintEx(2, Tmp_149);
    goto L14;

  L14:
    call {:si_unique_call 2945} Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_124, Tmp_150, s_p_e_c_i_a_l_9, sdv_126, Tmp_151, sdv_128, Tmp_152 := SerialStartWrite#1_loop_L14(Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, TotalTime, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_124, NewIrp_2, Tmp_150, s_p_e_c_i_a_l_9, sdv_126, Tmp_151, sdv_128, Tmp_152, Timeouts, Extension_9);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2968} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    call {:si_unique_call 2969} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    havoc OldIrql_7;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1899;
    call {:si_unique_call 2946} sdv_124 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1899);
    assume {:nonnull} sdv_124 != 0;
    assume sdv_124 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_124)))] != 0;
    s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1900;
    call {:si_unique_call 2947} sdv_126 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1900);
    assume {:nonnull} sdv_126 != 0;
    assume sdv_126 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_126)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_152;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2948} SerialTryToCompleteCurrent#1(Extension_9, li2bplFunctionConstant570, OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, 16);
    goto L40;

  L40:
    UseATimer := 0;
    call {:si_unique_call 2949} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    call {:si_unique_call 2950} sdv_KeAcquireSpinLock(0, Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    havoc OldIrql_7;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 2951} sdv_KeReleaseSpinLock(0, OldIrql_7);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1901;
    call {:si_unique_call 2952} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1901);
    UseATimer := 1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1902;
    call {:si_unique_call 2953} sdv_128 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1902);
    assume {:nonnull} sdv_128 != 0;
    assume sdv_128 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_128)))] := 0;
    call {:si_unique_call 2954} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    call {:si_unique_call 2955} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    havoc OldIrql_7;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_146;
    assume {:nonnull} Tmp_146 != 0;
    assume Tmp_146 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 2956} IoReleaseCancelSpinLock(OldIrql_7);
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_150;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2957} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_9), NewIrp_2, 1, Extension_9);
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L79;

  L79:
    Tmp_148 := strConst__li2bpl51;
    call {:si_unique_call 2958} vslice_dummy_var_741 := SerialDbgPrintEx(2, Tmp_148);
    Tmp_145 := FirstStatus_1;
    return;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L75;

  anon28_Then:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1903;
    call {:si_unique_call 2959} vslice_dummy_var_737 := sdv_IoSetCancelRoutine(vslice_dummy_var_1903, li2bplFunctionConstant571);
    s_p_e_c_i_a_l_11 := 2;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1904;
    call {:si_unique_call 2960} sdv_123 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1904);
    assume {:nonnull} sdv_123 != 0;
    assume sdv_123 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_123)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2961} vslice_dummy_var_739 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_9), TotalTime, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_9), Extension_9);
    s_p_e_c_i_a_l_12 := 4;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_1905;
    call {:si_unique_call 2962} sdv_125 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1905);
    assume {:nonnull} sdv_125 != 0;
    assume sdv_125 > 0;
    s_p_e_c_i_a_l_8 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_125)));
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    goto L99;

  L99:
    call {:si_unique_call 2963} vslice_dummy_var_738 := KeSynchronizeExecution(0, li2bplFunctionConstant572, 0);
    call {:si_unique_call 2964} IoReleaseCancelSpinLock(OldIrql_7);
    goto L79;

  anon30_Then:
    assume {:partition} UseATimer == 0;
    goto L99;

  anon25_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    call {:si_unique_call 2965} sdv_IoMarkIrpPending(0);
    SetFirstStatus_1 := 1;
    FirstStatus_1 := 259;
    goto L87;

  anon27_Then:
    Tmp_151 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon22_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_124)))] == 0;
    call {:si_unique_call 2966} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;

  anon21_Then:
    call {:si_unique_call 2967} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_9: int) returns (Tmp_145: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_235: int;
  var {:pointer} s_p_e_c_i_a_l_13: int;
  var {:pointer} sdv_213: int;
  var {:pointer} newIrp: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} sdv_215: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_238: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Extension_14: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_742: int;
  var vslice_dummy_var_743: int;
  var vslice_dummy_var_744: int;
  var vslice_dummy_var_745: int;
  var vslice_dummy_var_1906: int;
  var vslice_dummy_var_1907: int;

  anon0:
    call {:si_unique_call 2970} newIrp := __HAVOC_malloc(4);
    call {:si_unique_call 2971} vslice_dummy_var_742 := __HAVOC_malloc(4);
    Extension_14 := actual_Extension_14;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    QueueToProcess_1 := actual_QueueToProcess_1;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2972} Tmp_238 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_14 := RefType;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_1906;
    call {:si_unique_call 2973} sdv_213 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1906);
    assume {:nonnull} sdv_213 != 0;
    assume sdv_213 > 0;
    s_p_e_c_i_a_l_13 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_213)));
    assume {:nonnull} s_p_e_c_i_a_l_13 != 0;
    assume s_p_e_c_i_a_l_13 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2974} vslice_dummy_var_743 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2975} SerialRundownIrpRefs(CurrentOpIrp_2, IntervalTimer, TotalTimer, Extension_14);
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_1907;
    call {:si_unique_call 2976} sdv_215 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1907);
    assume {:nonnull} sdv_215 != 0;
    assume sdv_215 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_215)))] == 0;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_235;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_239;
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    goto L28;

  L28:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc oldIrp;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2977} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_238 := strConst__li2bpl3;
    call {:si_unique_call 2978} vslice_dummy_var_745 := SerialDbgPrintEx(9, Tmp_238);
    call {:si_unique_call 2979} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2980} SerialIRPEpilogue(Extension_14);
    goto L1;

  L1:
    return;

  anon18_Then:
    call {:si_unique_call 2981} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant1088;
    call {:si_unique_call 2982} SerialGetNextImmediate(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto L37;

  L37:
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant720;
    call {:si_unique_call 2983} vslice_dummy_var_744 := SerialStartRead(Extension_14);
    goto L1;

  anon21_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant569;
    assume false;
    return;

  anon20_Then:
    goto L1;

  anon22_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant660;
    call {:si_unique_call 2984} SerialGetNextIrp(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto L37;

  anon19_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant573;
    call {:si_unique_call 2985} SerialGetNextWrite(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto L37;

  anon24_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon17_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_215)))] != 0;
    call {:si_unique_call 2986} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon23_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_235: int;
  var {:pointer} s_p_e_c_i_a_l_13: int;
  var {:pointer} sdv_213: int;
  var {:pointer} newIrp: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} sdv_215: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_238: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Extension_14: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_746: int;
  var vslice_dummy_var_747: int;
  var vslice_dummy_var_748: int;
  var vslice_dummy_var_749: int;
  var vslice_dummy_var_750: int;
  var vslice_dummy_var_1908: int;
  var vslice_dummy_var_1909: int;

  anon0:
    call {:si_unique_call 2987} newIrp := __HAVOC_malloc(4);
    call {:si_unique_call 2988} vslice_dummy_var_746 := __HAVOC_malloc(4);
    Extension_14 := actual_Extension_14;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    QueueToProcess_1 := actual_QueueToProcess_1;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2989} Tmp_238 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_14 := RefType;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_1908;
    call {:si_unique_call 2990} sdv_213 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1908);
    assume {:nonnull} sdv_213 != 0;
    assume sdv_213 > 0;
    s_p_e_c_i_a_l_13 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_213)));
    assume {:nonnull} s_p_e_c_i_a_l_13 != 0;
    assume s_p_e_c_i_a_l_13 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2991} vslice_dummy_var_747 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2992} SerialRundownIrpRefs(CurrentOpIrp_2, IntervalTimer, TotalTimer, Extension_14);
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_1909;
    call {:si_unique_call 2993} sdv_215 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1909);
    assume {:nonnull} sdv_215 != 0;
    assume sdv_215 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_215)))] == 0;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_235;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_239;
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    goto L28;

  L28:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc oldIrp;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2994} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_238 := strConst__li2bpl3;
    call {:si_unique_call 2995} vslice_dummy_var_750 := SerialDbgPrintEx(9, Tmp_238);
    call {:si_unique_call 2996} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2997} SerialIRPEpilogue(Extension_14);
    goto L1;

  L1:
    return;

  anon18_Then:
    call {:si_unique_call 2998} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant1088;
    call {:si_unique_call 2999} SerialGetNextImmediate(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto L37;

  L37:
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant720;
    call {:si_unique_call 3000} vslice_dummy_var_749 := SerialStartRead(Extension_14);
    goto L1;

  anon21_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant569;
    call {:si_unique_call 3001} vslice_dummy_var_748 := SerialStartWrite#0(Extension_14);
    goto L1;

  anon20_Then:
    goto L1;

  anon22_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant660;
    call {:si_unique_call 3002} SerialGetNextIrp(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto L37;

  anon19_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant573;
    call {:si_unique_call 3003} SerialGetNextWrite(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto L37;

  anon24_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon17_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_215)))] != 0;
    call {:si_unique_call 3004} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon23_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation SerialStartMask_loop_L11(in_Tmp_91: int, in_s_p_e_c_i_a_l_1: int, in_Tmp_92: int, in_Tmp_93: int, in_FirstStatus: int, in_Tmp_95: int, in_SetFirstStatus: int, in_Tmp_96: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_Tmp_102: int, in_Tmp_103: int, in_Tmp_104: int, in_Tmp_105: int, in_IrpSp: int, in_OldIrql: int, in_Tmp_106: int, in_NewIrp: int, in_s_p_e_c_i_a_l_2: int, in_sdv_83: int, in_Tmp_107: int, in_sdv_86: int, in_Tmp_108: int, in_Tmp_109: int, in_Extension_2: int, in_vslice_dummy_var_55: int, in_vslice_dummy_var_57: int, in_vslice_dummy_var_58: int, in_vslice_dummy_var_59: int, in_vslice_dummy_var_60: int, in_vslice_dummy_var_61: int, in_vslice_dummy_var_62: int, in_vslice_dummy_var_63: int, in_vslice_dummy_var_64: int, in_vslice_dummy_var_65: int, in_vslice_dummy_var_66: int, in_vslice_dummy_var_67: int, in_vslice_dummy_var_68: int, in_vslice_dummy_var_69: int, in_vslice_dummy_var_70: int, in_vslice_dummy_var_71: int) returns (out_Tmp_91: int, out_s_p_e_c_i_a_l_1: int, out_Tmp_92: int, out_Tmp_93: int, out_FirstStatus: int, out_Tmp_95: int, out_SetFirstStatus: int, out_Tmp_96: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_Tmp_102: int, out_Tmp_103: int, out_Tmp_104: int, out_Tmp_105: int, out_IrpSp: int, out_OldIrql: int, out_Tmp_106: int, out_s_p_e_c_i_a_l_2: int, out_sdv_83: int, out_Tmp_107: int, out_sdv_86: int, out_Tmp_108: int, out_Tmp_109: int, out_vslice_dummy_var_55: int, out_vslice_dummy_var_57: int, out_vslice_dummy_var_58: int, out_vslice_dummy_var_59: int, out_vslice_dummy_var_60: int, out_vslice_dummy_var_61: int, out_vslice_dummy_var_62: int, out_vslice_dummy_var_63: int, out_vslice_dummy_var_64: int, out_vslice_dummy_var_65: int, out_vslice_dummy_var_66: int, out_vslice_dummy_var_67: int, out_vslice_dummy_var_68: int, out_vslice_dummy_var_69: int, out_vslice_dummy_var_70: int, out_vslice_dummy_var_71: int)
{
  var vslice_dummy_var_1910: int;
  var vslice_dummy_var_1911: int;
  var vslice_dummy_var_1912: int;
  var vslice_dummy_var_1913: int;

  entry:
    out_Tmp_91, out_s_p_e_c_i_a_l_1, out_Tmp_92, out_Tmp_93, out_FirstStatus, out_Tmp_95, out_SetFirstStatus, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_102, out_Tmp_103, out_Tmp_104, out_Tmp_105, out_IrpSp, out_OldIrql, out_Tmp_106, out_s_p_e_c_i_a_l_2, out_sdv_83, out_Tmp_107, out_sdv_86, out_Tmp_108, out_Tmp_109, out_vslice_dummy_var_55, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71 := in_Tmp_91, in_s_p_e_c_i_a_l_1, in_Tmp_92, in_Tmp_93, in_FirstStatus, in_Tmp_95, in_SetFirstStatus, in_Tmp_96, in_Tmp_97, in_Tmp_98, in_Tmp_99, in_Tmp_100, in_Tmp_101, in_Tmp_102, in_Tmp_103, in_Tmp_104, in_Tmp_105, in_IrpSp, in_OldIrql, in_Tmp_106, in_s_p_e_c_i_a_l_2, in_sdv_83, in_Tmp_107, in_sdv_86, in_Tmp_108, in_Tmp_109, in_vslice_dummy_var_55, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71;
    goto L11, exit;

  exit:
    return;

  L11:
    out_Tmp_100 := strConst__li2bpl27;
    call {:si_unique_call 3005} out_vslice_dummy_var_57 := SerialDbgPrintEx(7, out_Tmp_100);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_1910;
    call {:si_unique_call 3006} out_IrpSp := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1910);
    assume {:nonnull} out_IrpSp != 0;
    assume out_IrpSp > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    out_Tmp_95 := strConst__li2bpl28;
    call {:si_unique_call 3030} out_vslice_dummy_var_58 := SerialDbgPrintEx(7, out_Tmp_95);
    call {:si_unique_call 3031} out_vslice_dummy_var_55 := KeSynchronizeExecution(0, li2bplFunctionConstant618, 0);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_106;
    assume {:nonnull} out_Tmp_106 != 0;
    assume out_Tmp_106 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L31;

  L31:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 3007} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 1, in_Extension_2);
    out_Tmp_91 := strConst__li2bpl30;
    call {:si_unique_call 3008} out_vslice_dummy_var_59 := SerialDbgPrintEx(7, out_Tmp_91);
    goto L37;

  L37:
    assume {:nonnull} in_NewIrp != 0;
    assume in_NewIrp > 0;
    goto anon21_Then;

  anon21_Then:
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    call {:si_unique_call 3032} {:si_old_unique_call 1} out_Tmp_91, out_s_p_e_c_i_a_l_1, out_Tmp_92, out_Tmp_93, out_FirstStatus, out_Tmp_95, out_SetFirstStatus, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_102, out_Tmp_103, out_Tmp_104, out_Tmp_105, out_IrpSp, out_OldIrql, out_Tmp_106, out_s_p_e_c_i_a_l_2, out_sdv_83, out_Tmp_107, out_sdv_86, out_Tmp_108, out_Tmp_109, out_vslice_dummy_var_55, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71 := SerialStartMask_loop_L11(out_Tmp_91, out_s_p_e_c_i_a_l_1, out_Tmp_92, out_Tmp_93, out_FirstStatus, out_Tmp_95, out_SetFirstStatus, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_102, out_Tmp_103, out_Tmp_104, out_Tmp_105, out_IrpSp, out_OldIrql, out_Tmp_106, in_NewIrp, out_s_p_e_c_i_a_l_2, out_sdv_83, out_Tmp_107, out_sdv_86, out_Tmp_108, out_Tmp_109, in_Extension_2, out_vslice_dummy_var_55, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71);
    return;

  anon24_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_103 := strConst__li2bpl29;
    call {:si_unique_call 3029} out_vslice_dummy_var_60 := SerialDbgPrintEx(7, out_Tmp_103);
    out_FirstStatus := 0;
    out_SetFirstStatus := 1;
    goto L31;

  anon19_Then:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 3024} out_Tmp_101 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_101 != 0;
    assume out_Tmp_101 > 0;
    call {:si_unique_call 3025} IoAcquireCancelSpinLock(out_Tmp_101);
    assume {:nonnull} out_Tmp_101 != 0;
    assume out_Tmp_101 > 0;
    havoc out_OldIrql;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_99;
    assume {:nonnull} out_Tmp_99 != 0;
    assume out_Tmp_99 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    out_Tmp_104 := strConst__li2bpl33;
    call {:si_unique_call 3027} out_vslice_dummy_var_64 := SerialDbgPrintEx(7, out_Tmp_104);
    call {:si_unique_call 3028} IoReleaseCancelSpinLock(out_OldIrql);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_107;
    assume {:nonnull} out_Tmp_107 != 0;
    assume out_Tmp_107 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L64;

  L64:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 3009} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 1, in_Extension_2);
    out_Tmp_105 := strConst__li2bpl30;
    call {:si_unique_call 3010} out_vslice_dummy_var_65 := SerialDbgPrintEx(7, out_Tmp_105);
    goto L37;

  anon27_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_102 := strConst__li2bpl29;
    call {:si_unique_call 3026} out_vslice_dummy_var_66 := SerialDbgPrintEx(7, out_Tmp_102);
    out_FirstStatus := -1073741536;
    out_SetFirstStatus := 1;
    goto L64;

  anon26_Then:
    out_Tmp_92 := strConst__li2bpl32;
    call {:si_unique_call 3023} out_vslice_dummy_var_67 := SerialDbgPrintEx(7, out_Tmp_92);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L76;

  L76:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_1911;
    call {:si_unique_call 3011} out_sdv_83 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1911);
    assume {:nonnull} out_sdv_83 != 0;
    assume out_sdv_83 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_83)))] := 0;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_1912;
    call {:si_unique_call 3012} out_vslice_dummy_var_68 := sdv_IoSetCancelRoutine(vslice_dummy_var_1912, li2bplFunctionConstant619);
    out_s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_1913;
    call {:si_unique_call 3013} out_sdv_86 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1913);
    assume {:nonnull} out_sdv_86 != 0;
    assume out_sdv_86 > 0;
    out_s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_86)));
    assume {:nonnull} out_s_p_e_c_i_a_l_1 != 0;
    assume out_s_p_e_c_i_a_l_1 > 0;
    call {:si_unique_call 3014} out_vslice_dummy_var_69 := KeSynchronizeExecution(0, li2bplFunctionConstant620, 0);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 3015} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 0, in_Extension_2, out_OldIrql);
    out_Tmp_96 := strConst__li2bpl30;
    call {:si_unique_call 3016} out_vslice_dummy_var_70 := SerialDbgPrintEx(7, out_Tmp_96);
    goto L37;

  anon23_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_97 := strConst__li2bpl29;
    call {:si_unique_call 3021} out_vslice_dummy_var_71 := SerialDbgPrintEx(7, out_Tmp_97);
    out_FirstStatus := 259;
    out_SetFirstStatus := 1;
    call {:si_unique_call 3022} sdv_IoMarkIrpPending(0);
    goto L76;

  anon22_Then:
    goto L41;

  L41:
    out_Tmp_108 := strConst__li2bpl31;
    call {:si_unique_call 3020} out_vslice_dummy_var_61 := SerialDbgPrintEx(7, out_Tmp_108);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_109;
    assume {:nonnull} out_Tmp_109 != 0;
    assume out_Tmp_109 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L112;

  L112:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 3017} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 1, in_Extension_2);
    out_Tmp_98 := strConst__li2bpl30;
    call {:si_unique_call 3018} out_vslice_dummy_var_62 := SerialDbgPrintEx(7, out_Tmp_98);
    goto L37;

  anon25_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_93 := strConst__li2bpl29;
    call {:si_unique_call 3019} out_vslice_dummy_var_63 := SerialDbgPrintEx(7, out_Tmp_93);
    out_FirstStatus := -1073741811;
    out_SetFirstStatus := 1;
    goto L112;

  anon20_Then:
    goto L41;
}



procedure {:LoopProcedure} SerialStartMask_loop_L11(in_Tmp_91: int, in_s_p_e_c_i_a_l_1: int, in_Tmp_92: int, in_Tmp_93: int, in_FirstStatus: int, in_Tmp_95: int, in_SetFirstStatus: int, in_Tmp_96: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_Tmp_102: int, in_Tmp_103: int, in_Tmp_104: int, in_Tmp_105: int, in_IrpSp: int, in_OldIrql: int, in_Tmp_106: int, in_NewIrp: int, in_s_p_e_c_i_a_l_2: int, in_sdv_83: int, in_Tmp_107: int, in_sdv_86: int, in_Tmp_108: int, in_Tmp_109: int, in_Extension_2: int, in_vslice_dummy_var_55: int, in_vslice_dummy_var_57: int, in_vslice_dummy_var_58: int, in_vslice_dummy_var_59: int, in_vslice_dummy_var_60: int, in_vslice_dummy_var_61: int, in_vslice_dummy_var_62: int, in_vslice_dummy_var_63: int, in_vslice_dummy_var_64: int, in_vslice_dummy_var_65: int, in_vslice_dummy_var_66: int, in_vslice_dummy_var_67: int, in_vslice_dummy_var_68: int, in_vslice_dummy_var_69: int, in_vslice_dummy_var_70: int, in_vslice_dummy_var_71: int) returns (out_Tmp_91: int, out_s_p_e_c_i_a_l_1: int, out_Tmp_92: int, out_Tmp_93: int, out_FirstStatus: int, out_Tmp_95: int, out_SetFirstStatus: int, out_Tmp_96: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_Tmp_102: int, out_Tmp_103: int, out_Tmp_104: int, out_Tmp_105: int, out_IrpSp: int, out_OldIrql: int, out_Tmp_106: int, out_s_p_e_c_i_a_l_2: int, out_sdv_83: int, out_Tmp_107: int, out_sdv_86: int, out_Tmp_108: int, out_Tmp_109: int, out_vslice_dummy_var_55: int, out_vslice_dummy_var_57: int, out_vslice_dummy_var_58: int, out_vslice_dummy_var_59: int, out_vslice_dummy_var_60: int, out_vslice_dummy_var_61: int, out_vslice_dummy_var_62: int, out_vslice_dummy_var_63: int, out_vslice_dummy_var_64: int, out_vslice_dummy_var_65: int, out_vslice_dummy_var_66: int, out_vslice_dummy_var_67: int, out_vslice_dummy_var_68: int, out_vslice_dummy_var_69: int, out_vslice_dummy_var_70: int, out_vslice_dummy_var_71: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} out_FirstStatus == 0 || out_FirstStatus == -1073741536 || out_FirstStatus == 259 || out_FirstStatus == -1073741811 || out_FirstStatus == in_FirstStatus;
  free ensures {:va_keep} out_SetFirstStatus == 1 || out_SetFirstStatus == in_SetFirstStatus;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_2 == 2 || out_s_p_e_c_i_a_l_2 == in_s_p_e_c_i_a_l_2;
  free ensures {:va_keep} out_vslice_dummy_var_55 == 1 || out_vslice_dummy_var_55 == 0 || out_vslice_dummy_var_55 == in_vslice_dummy_var_55;
  free ensures {:va_keep} out_vslice_dummy_var_57 == 0 || out_vslice_dummy_var_57 == in_vslice_dummy_var_57;
  free ensures {:va_keep} out_vslice_dummy_var_58 == 0 || out_vslice_dummy_var_58 == in_vslice_dummy_var_58;
  free ensures {:va_keep} out_vslice_dummy_var_59 == 0 || out_vslice_dummy_var_59 == in_vslice_dummy_var_59;
  free ensures {:va_keep} out_vslice_dummy_var_60 == 0 || out_vslice_dummy_var_60 == in_vslice_dummy_var_60;
  free ensures {:va_keep} out_vslice_dummy_var_61 == 0 || out_vslice_dummy_var_61 == in_vslice_dummy_var_61;
  free ensures {:va_keep} out_vslice_dummy_var_62 == 0 || out_vslice_dummy_var_62 == in_vslice_dummy_var_62;
  free ensures {:va_keep} out_vslice_dummy_var_63 == 0 || out_vslice_dummy_var_63 == in_vslice_dummy_var_63;
  free ensures {:va_keep} out_vslice_dummy_var_64 == 0 || out_vslice_dummy_var_64 == in_vslice_dummy_var_64;
  free ensures {:va_keep} out_vslice_dummy_var_65 == 0 || out_vslice_dummy_var_65 == in_vslice_dummy_var_65;
  free ensures {:va_keep} out_vslice_dummy_var_66 == 0 || out_vslice_dummy_var_66 == in_vslice_dummy_var_66;
  free ensures {:va_keep} out_vslice_dummy_var_67 == 0 || out_vslice_dummy_var_67 == in_vslice_dummy_var_67;
  free ensures {:va_keep} out_vslice_dummy_var_69 == 1 || out_vslice_dummy_var_69 == 0 || out_vslice_dummy_var_69 == in_vslice_dummy_var_69;
  free ensures {:va_keep} out_vslice_dummy_var_70 == 0 || out_vslice_dummy_var_70 == in_vslice_dummy_var_70;
  free ensures {:va_keep} out_vslice_dummy_var_71 == 0 || out_vslice_dummy_var_71 == in_vslice_dummy_var_71;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_3: int, in_sdv_108: int, in_Irp_3: int, in_OldIrql_5: int, in_sdv_111: int, in_sdv_113: int, in_CompleteCurrent_1: int, in_OldIrql_6: int, in_s_p_e_c_i_a_l_4: int, in_sdv_115: int, in_sdv_116: int, in_sdv_117: int, in_s_p_e_c_i_a_l_5: int, in_Tmp_143: int, in_delta: int, in_Xc: int, in_s_p_e_c_i_a_l_6: int, in_Tmp_144: int, in_CurrentOpIrp: int, in_QueueToProcess: int, in_NewIrp_1: int, in_CompleteCurrent: int, in_Extension_8: int, in_vslice_dummy_var_96: int, in_vslice_dummy_var_99: int, in_vslice_dummy_var_100: int) returns (out_s_p_e_c_i_a_l_3: int, out_sdv_108: int, out_Irp_3: int, out_OldIrql_5: int, out_sdv_111: int, out_sdv_113: int, out_OldIrql_6: int, out_s_p_e_c_i_a_l_4: int, out_sdv_115: int, out_sdv_116: int, out_sdv_117: int, out_s_p_e_c_i_a_l_5: int, out_Tmp_143: int, out_Xc: int, out_s_p_e_c_i_a_l_6: int, out_Tmp_144: int, out_CompleteCurrent: int, out_vslice_dummy_var_96: int, out_vslice_dummy_var_99: int, out_vslice_dummy_var_100: int)
{
  var vslice_dummy_var_1914: int;
  var vslice_dummy_var_1915: int;
  var vslice_dummy_var_1916: int;
  var vslice_dummy_var_1917: int;

  entry:
    out_s_p_e_c_i_a_l_3, out_sdv_108, out_Irp_3, out_OldIrql_5, out_sdv_111, out_sdv_113, out_OldIrql_6, out_s_p_e_c_i_a_l_4, out_sdv_115, out_sdv_116, out_sdv_117, out_s_p_e_c_i_a_l_5, out_Tmp_143, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_144, out_CompleteCurrent, out_vslice_dummy_var_96, out_vslice_dummy_var_99, out_vslice_dummy_var_100 := in_s_p_e_c_i_a_l_3, in_sdv_108, in_Irp_3, in_OldIrql_5, in_sdv_111, in_sdv_113, in_OldIrql_6, in_s_p_e_c_i_a_l_4, in_sdv_115, in_sdv_116, in_sdv_117, in_s_p_e_c_i_a_l_5, in_Tmp_143, in_Xc, in_s_p_e_c_i_a_l_6, in_Tmp_144, in_CompleteCurrent, in_vslice_dummy_var_96, in_vslice_dummy_var_99, in_vslice_dummy_var_100;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc vslice_dummy_var_1914;
    call {:si_unique_call 3033} out_sdv_113 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1914);
    assume {:nonnull} out_sdv_113 != 0;
    assume out_sdv_113 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 3036} out_Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    call {:si_unique_call 3037} IoAcquireCancelSpinLock(out_Tmp_144);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    havoc out_OldIrql_6;
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc vslice_dummy_var_1916;
    call {:si_unique_call 3038} out_sdv_117 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1916);
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    assume {:nonnull} out_sdv_117 != 0;
    assume out_sdv_117 > 0;
    call {:si_unique_call 3039} IoReleaseCancelSpinLock(out_OldIrql_6);
    goto L26;

  L26:
    call {:si_unique_call 3035} SerialGetNextIrp(in_CurrentOpIrp, in_QueueToProcess, in_NewIrp_1, out_CompleteCurrent, in_Extension_8);
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    goto anon16_Then;

  anon16_Then:
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    havoc vslice_dummy_var_1915;
    call {:si_unique_call 3034} out_sdv_116 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1915);
    assume {:nonnull} out_sdv_116 != 0;
    assume out_sdv_116 > 0;
    goto anon17_Then;

  anon17_Then:
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    havoc out_Tmp_143;
    assume {:nonnull} out_Tmp_143 != 0;
    assume out_Tmp_143 > 0;
    out_CompleteCurrent := in_CompleteCurrent_1;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    call {:si_unique_call 3049} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_3, out_sdv_108, out_Irp_3, out_OldIrql_5, out_sdv_111, out_sdv_113, out_OldIrql_6, out_s_p_e_c_i_a_l_4, out_sdv_115, out_sdv_116, out_sdv_117, out_s_p_e_c_i_a_l_5, out_Tmp_143, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_144, out_CompleteCurrent, out_vslice_dummy_var_96, out_vslice_dummy_var_99, out_vslice_dummy_var_100 := SerialGetNextWrite_loop_L8(out_s_p_e_c_i_a_l_3, out_sdv_108, out_Irp_3, out_OldIrql_5, out_sdv_111, out_sdv_113, in_CompleteCurrent_1, out_OldIrql_6, out_s_p_e_c_i_a_l_4, out_sdv_115, out_sdv_116, out_sdv_117, out_s_p_e_c_i_a_l_5, out_Tmp_143, in_delta, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_144, in_CurrentOpIrp, in_QueueToProcess, in_NewIrp_1, out_CompleteCurrent, in_Extension_8, out_vslice_dummy_var_96, out_vslice_dummy_var_99, out_vslice_dummy_var_100);
    return;

  anon15_Then:
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc vslice_dummy_var_1917;
    call {:si_unique_call 3041} out_sdv_115 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1917);
    assume {:nonnull} out_sdv_115 != 0;
    assume out_sdv_115 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 3047} out_Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    call {:si_unique_call 3048} IoAcquireCancelSpinLock(out_Tmp_144);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    havoc out_OldIrql_5;
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc out_Irp_3;
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    havoc out_Xc;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L64;

  L64:
    call {:si_unique_call 3040} IoReleaseCancelSpinLock(out_OldIrql_5);
    goto L26;

  anon21_Then:
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    goto L64;

  anon19_Then:
    call {:si_unique_call 3044} out_vslice_dummy_var_96 := sdv_IoSetCancelRoutine(out_Irp_3, li2bplFunctionConstant575);
    out_s_p_e_c_i_a_l_4 := 2;
    call {:si_unique_call 3045} out_sdv_111 := sdv_IoGetCurrentIrpStackLocation(out_Irp_3);
    assume {:nonnull} out_sdv_111 != 0;
    assume out_sdv_111 > 0;
    out_s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_111)));
    assume {:nonnull} out_s_p_e_c_i_a_l_3 != 0;
    assume out_s_p_e_c_i_a_l_3 > 0;
    out_CompleteCurrent := 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    call {:si_unique_call 3046} out_vslice_dummy_var_99 := KeSynchronizeExecution(0, li2bplFunctionConstant576, 0);
    assume {:nonnull} out_Xc != 0;
    assume out_Xc > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} out_Xc != 0;
    assume out_Xc > 0;
    assume {:nonnull} in_delta != 0;
    assume in_delta > 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    call {:si_unique_call 3042} out_vslice_dummy_var_100 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_8), in_delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(in_Extension_8), in_Extension_8);
    out_s_p_e_c_i_a_l_6 := 4;
    call {:si_unique_call 3043} out_sdv_108 := sdv_IoGetCurrentIrpStackLocation(out_Irp_3);
    assume {:nonnull} out_sdv_108 != 0;
    assume out_sdv_108 > 0;
    out_s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_108)));
    assume {:nonnull} out_s_p_e_c_i_a_l_5 != 0;
    assume out_s_p_e_c_i_a_l_5 > 0;
    goto L64;

  anon20_Then:
    goto L64;

  anon18_Then:
    goto L26;
}



procedure {:LoopProcedure} SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_3: int, in_sdv_108: int, in_Irp_3: int, in_OldIrql_5: int, in_sdv_111: int, in_sdv_113: int, in_CompleteCurrent_1: int, in_OldIrql_6: int, in_s_p_e_c_i_a_l_4: int, in_sdv_115: int, in_sdv_116: int, in_sdv_117: int, in_s_p_e_c_i_a_l_5: int, in_Tmp_143: int, in_delta: int, in_Xc: int, in_s_p_e_c_i_a_l_6: int, in_Tmp_144: int, in_CurrentOpIrp: int, in_QueueToProcess: int, in_NewIrp_1: int, in_CompleteCurrent: int, in_Extension_8: int, in_vslice_dummy_var_96: int, in_vslice_dummy_var_99: int, in_vslice_dummy_var_100: int) returns (out_s_p_e_c_i_a_l_3: int, out_sdv_108: int, out_Irp_3: int, out_OldIrql_5: int, out_sdv_111: int, out_sdv_113: int, out_OldIrql_6: int, out_s_p_e_c_i_a_l_4: int, out_sdv_115: int, out_sdv_116: int, out_sdv_117: int, out_s_p_e_c_i_a_l_5: int, out_Tmp_143: int, out_Xc: int, out_s_p_e_c_i_a_l_6: int, out_Tmp_144: int, out_CompleteCurrent: int, out_vslice_dummy_var_96: int, out_vslice_dummy_var_99: int, out_vslice_dummy_var_100: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_4 == 2 || out_s_p_e_c_i_a_l_4 == in_s_p_e_c_i_a_l_4;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_6 == 4 || out_s_p_e_c_i_a_l_6 == in_s_p_e_c_i_a_l_6;
  free ensures {:va_keep} out_CompleteCurrent == in_CompleteCurrent || out_CompleteCurrent == in_CompleteCurrent_1;
  free ensures {:va_keep} out_vslice_dummy_var_99 == 1 || out_vslice_dummy_var_99 == 0 || out_vslice_dummy_var_99 == in_vslice_dummy_var_99;
  free ensures {:va_keep} out_vslice_dummy_var_100 == 1 || out_vslice_dummy_var_100 == 0 || out_vslice_dummy_var_100 == in_vslice_dummy_var_100;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialClose_loop_L122(in_flushCount: int, in_sdv_134: int, in_Tmp_171: int, in_extension: int, in_vslice_dummy_var_106: int) returns (out_flushCount: int, out_sdv_134: int, out_Tmp_171: int, out_vslice_dummy_var_106: int)
{

  entry:
    out_flushCount, out_sdv_134, out_Tmp_171, out_vslice_dummy_var_106 := in_flushCount, in_sdv_134, in_Tmp_171, in_vslice_dummy_var_106;
    goto L122, exit;

  exit:
    return;

  L122:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon49_Else;

  anon49_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 3051} out_sdv_134 := corral_nondet();
    out_Tmp_171 := BAND(out_sdv_134, BOR(32, 64));
    goto anon57_Else;

  anon57_Else:
    assume {:partition} out_Tmp_171 != 96;
    call {:si_unique_call 3050} out_vslice_dummy_var_106 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon57_Else_dummy;

  anon57_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L122(in_flushCount: int, in_sdv_134: int, in_Tmp_171: int, in_extension: int, in_vslice_dummy_var_106: int) returns (out_flushCount: int, out_sdv_134: int, out_Tmp_171: int, out_vslice_dummy_var_106: int);
  free ensures {:va_keep} out_vslice_dummy_var_106 == 0 || out_vslice_dummy_var_106 == -1073741823 || out_vslice_dummy_var_106 == in_vslice_dummy_var_106;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialClose_loop_L109(in_sdv_155: int, in_extension: int, in_vslice_dummy_var_105: int) returns (out_sdv_155: int, out_vslice_dummy_var_105: int)
{

  entry:
    out_sdv_155, out_vslice_dummy_var_105 := in_sdv_155, in_vslice_dummy_var_105;
    goto L109, exit;

  exit:
    return;

  L109:
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 3052} out_sdv_155 := corral_nondet();
    goto anon48_Then;

  anon48_Then:
    assume {:partition} BAND(out_sdv_155, 32) == 0;
    call {:si_unique_call 3053} out_vslice_dummy_var_105 := KeDelayExecutionThread(0, 0, 0);
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    call {:si_unique_call 3054} {:si_old_unique_call 1} out_sdv_155, out_vslice_dummy_var_105 := SerialClose_loop_L109(out_sdv_155, in_extension, out_vslice_dummy_var_105);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L109(in_sdv_155: int, in_extension: int, in_vslice_dummy_var_105: int) returns (out_sdv_155: int, out_vslice_dummy_var_105: int);
  free ensures {:va_keep} out_vslice_dummy_var_105 == 0 || out_vslice_dummy_var_105 == -1073741823 || out_vslice_dummy_var_105 == in_vslice_dummy_var_105;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialClose_loop_L148(in_extension: int, in_vslice_dummy_var_109: int) returns (out_vslice_dummy_var_109: int)
{

  entry:
    out_vslice_dummy_var_109 := in_vslice_dummy_var_109;
    goto L148, exit;

  exit:
    return;

  L148:
    call {:si_unique_call 3055} out_vslice_dummy_var_109 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    goto anon52_Then;

  anon52_Then:
    goto anon52_Then_dummy;

  anon52_Then_dummy:
    call {:si_unique_call 3056} {:si_old_unique_call 1} out_vslice_dummy_var_109 := SerialClose_loop_L148(in_extension, out_vslice_dummy_var_109);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L148(in_extension: int, in_vslice_dummy_var_109: int) returns (out_vslice_dummy_var_109: int);
  free ensures {:va_keep} out_vslice_dummy_var_109 == 0 || out_vslice_dummy_var_109 == -1073741823 || out_vslice_dummy_var_109 == in_vslice_dummy_var_109;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialClose_loop_L88(in_flushCount: int, in_sdv_133: int, in_Tmp_167: int, in_extension: int, in_vslice_dummy_var_103: int) returns (out_flushCount: int, out_sdv_133: int, out_Tmp_167: int, out_vslice_dummy_var_103: int)
{

  entry:
    out_flushCount, out_sdv_133, out_Tmp_167, out_vslice_dummy_var_103 := in_flushCount, in_sdv_133, in_Tmp_167, in_vslice_dummy_var_103;
    goto L88, exit;

  exit:
    return;

  L88:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon45_Else;

  anon45_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 3058} out_sdv_133 := corral_nondet();
    out_Tmp_167 := BAND(out_sdv_133, BOR(32, 64));
    goto anon56_Else;

  anon56_Else:
    assume {:partition} out_Tmp_167 != 96;
    call {:si_unique_call 3057} out_vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon56_Else_dummy;

  anon56_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L88(in_flushCount: int, in_sdv_133: int, in_Tmp_167: int, in_extension: int, in_vslice_dummy_var_103: int) returns (out_flushCount: int, out_sdv_133: int, out_Tmp_167: int, out_vslice_dummy_var_103: int);
  free ensures {:va_keep} out_vslice_dummy_var_103 == 0 || out_vslice_dummy_var_103 == -1073741823 || out_vslice_dummy_var_103 == in_vslice_dummy_var_103;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialDrainUART_loop_L6(in_Tmp_199: int, in_sdv_190: int, in_PDevExt_5: int, in_vslice_dummy_var_150: int) returns (out_Tmp_199: int, out_sdv_190: int, out_vslice_dummy_var_150: int)
{

  entry:
    out_Tmp_199, out_sdv_190, out_vslice_dummy_var_150 := in_Tmp_199, in_sdv_190, in_vslice_dummy_var_150;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_PDevExt_5 != 0;
    assume in_PDevExt_5 > 0;
    call {:si_unique_call 3059} out_sdv_190 := corral_nondet();
    out_Tmp_199 := BAND(out_sdv_190, BOR(32, 64));
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_Tmp_199 != 96;
    call {:si_unique_call 3060} out_vslice_dummy_var_150 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3061} {:si_old_unique_call 1} out_Tmp_199, out_sdv_190, out_vslice_dummy_var_150 := SerialDrainUART_loop_L6(out_Tmp_199, out_sdv_190, in_PDevExt_5, out_vslice_dummy_var_150);
    return;
}



procedure {:LoopProcedure} SerialDrainUART_loop_L6(in_Tmp_199: int, in_sdv_190: int, in_PDevExt_5: int, in_vslice_dummy_var_150: int) returns (out_Tmp_199: int, out_sdv_190: int, out_vslice_dummy_var_150: int);
  free ensures {:va_keep} out_vslice_dummy_var_150 == 0 || out_vslice_dummy_var_150 == -1073741823 || out_vslice_dummy_var_150 == in_vslice_dummy_var_150;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialStartPurge_loop_L5(in_Tmp_204: int, in_Tmp_205: int, in_Mask: int, in_Tmp_206: int, in_OldIrql_8: int, in_NewIrp_3: int, in_Tmp_207: int, in_Tmp_208: int, in_Extension_12: int, in_vslice_dummy_var_151: int) returns (out_Tmp_204: int, out_Tmp_205: int, out_Mask: int, out_Tmp_206: int, out_OldIrql_8: int, out_Tmp_207: int, out_Tmp_208: int, out_vslice_dummy_var_151: int)
{
  var vslice_dummy_var_1918: int;
  var vslice_dummy_var_1919: int;
  var vslice_dummy_var_1920: int;

  entry:
    out_Tmp_204, out_Tmp_205, out_Mask, out_Tmp_206, out_OldIrql_8, out_Tmp_207, out_Tmp_208, out_vslice_dummy_var_151 := in_Tmp_204, in_Tmp_205, in_Mask, in_Tmp_206, in_OldIrql_8, in_Tmp_207, in_Tmp_208, in_vslice_dummy_var_151;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc out_Tmp_206;
    assume {:nonnull} out_Tmp_206 != 0;
    assume out_Tmp_206 > 0;
    havoc out_Tmp_208;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    havoc out_Mask;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(out_Mask, 1) != 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc vslice_dummy_var_1919;
    call {:si_unique_call 3068} SerialKillAllReadsOrWrites(vslice_dummy_var_1919, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12));
    goto anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc vslice_dummy_var_1918;
    call {:si_unique_call 3067} SerialKillAllReadsOrWrites(vslice_dummy_var_1918, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12));
    goto anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(out_Mask, 2) != 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc vslice_dummy_var_1920;
    call {:si_unique_call 3069} SerialKillAllReadsOrWrites(vslice_dummy_var_1920, ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12));
    goto anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BAND(out_Mask, 8) != 0;
    call {:si_unique_call 3063} out_Tmp_205 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_205 != 0;
    assume out_Tmp_205 > 0;
    call {:si_unique_call 3064} sdv_KeAcquireSpinLock(0, out_Tmp_205);
    assume {:nonnull} out_Tmp_205 != 0;
    assume out_Tmp_205 > 0;
    havoc out_OldIrql_8;
    call {:si_unique_call 3065} out_vslice_dummy_var_151 := KeSynchronizeExecution(0, li2bplFunctionConstant806, 0);
    call {:si_unique_call 3066} sdv_KeReleaseSpinLock(0, out_OldIrql_8);
    goto L18;

  L18:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc out_Tmp_204;
    assume {:nonnull} out_Tmp_204 != 0;
    assume out_Tmp_204 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc out_Tmp_207;
    assume {:nonnull} out_Tmp_207 != 0;
    assume out_Tmp_207 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 3062} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12), PurgeQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), in_NewIrp_3, 1, in_Extension_12);
    assume {:nonnull} in_NewIrp_3 != 0;
    assume in_NewIrp_3 > 0;
    goto anon17_Then;

  anon17_Then:
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    call {:si_unique_call 3070} {:si_old_unique_call 1} out_Tmp_204, out_Tmp_205, out_Mask, out_Tmp_206, out_OldIrql_8, out_Tmp_207, out_Tmp_208, out_vslice_dummy_var_151 := SerialStartPurge_loop_L5(out_Tmp_204, out_Tmp_205, out_Mask, out_Tmp_206, out_OldIrql_8, in_NewIrp_3, out_Tmp_207, out_Tmp_208, in_Extension_12, out_vslice_dummy_var_151);
    return;

  anon16_Then:
    assume {:partition} BAND(out_Mask, 8) == 0;
    goto L18;

  anon15_Then:
    assume {:partition} BAND(out_Mask, 2) == 0;
    goto L14;

  anon18_Then:
    assume {:partition} BAND(out_Mask, 1) == 0;
    goto L7;
}



procedure {:LoopProcedure} SerialStartPurge_loop_L5(in_Tmp_204: int, in_Tmp_205: int, in_Mask: int, in_Tmp_206: int, in_OldIrql_8: int, in_NewIrp_3: int, in_Tmp_207: int, in_Tmp_208: int, in_Extension_12: int, in_vslice_dummy_var_151: int) returns (out_Tmp_204: int, out_Tmp_205: int, out_Mask: int, out_Tmp_206: int, out_OldIrql_8: int, out_Tmp_207: int, out_Tmp_208: int, out_vslice_dummy_var_151: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_vslice_dummy_var_151 == 1 || out_vslice_dummy_var_151 == 0 || out_vslice_dummy_var_151 == in_vslice_dummy_var_151;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_Tmp_240: int, in_sdv_218: int, in_pDevExt_9: int, in_sdv_219: int, in_cancelRoutine: int, in_PDevObj_11: int, in_vslice_dummy_var_170: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_Tmp_240: int, out_sdv_218: int, out_sdv_219: int, out_cancelRoutine: int, out_vslice_dummy_var_170: int)
{
  var vslice_dummy_var_1921: int;

  entry:
    out_currentLastIrp, out_cancelIrql, out_Tmp_240, out_sdv_218, out_sdv_219, out_cancelRoutine, out_vslice_dummy_var_170 := in_currentLastIrp, in_cancelIrql, in_Tmp_240, in_sdv_218, in_sdv_219, in_cancelRoutine, in_vslice_dummy_var_170;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 3071} out_sdv_218 := sdv_IsListEmpty(0);
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_sdv_218 == 0;
    assume {:nonnull} in_pDevExt_9 != 0;
    assume in_pDevExt_9 > 0;
    havoc vslice_dummy_var_1921;
    call {:si_unique_call 3075} out_sdv_219 := sdv_containing_record(vslice_dummy_var_1921, 88);
    out_currentLastIrp := out_sdv_219;
    call {:si_unique_call 3076} out_vslice_dummy_var_170 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    out_cancelRoutine := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp)];
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp)] := 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant571;
    call {:si_unique_call 3081} SerialCancelCurrentWrite(in_PDevObj_11, out_currentLastIrp);
    goto anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    call {:si_unique_call 3072} out_Tmp_240 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_240 != 0;
    assume out_Tmp_240 > 0;
    call {:si_unique_call 3073} IoAcquireCancelSpinLock(out_Tmp_240);
    assume {:nonnull} out_Tmp_240 != 0;
    assume out_Tmp_240 > 0;
    havoc out_cancelIrql;
    goto L32_dummy;

  L32_dummy:
    call {:si_unique_call 3082} {:si_old_unique_call 1} out_currentLastIrp, out_cancelIrql, out_Tmp_240, out_sdv_218, out_sdv_219, out_cancelRoutine, out_vslice_dummy_var_170 := SerialKillAllStalled_loop_L10(out_currentLastIrp, out_cancelIrql, out_Tmp_240, out_sdv_218, in_pDevExt_9, out_sdv_219, out_cancelRoutine, in_PDevObj_11, out_vslice_dummy_var_170);
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant575;
    call {:si_unique_call 3080} SerialCancelCurrentXoff(in_PDevObj_11, out_currentLastIrp);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon28_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant1086;
    call {:si_unique_call 3079} SerialCancelImmediate(in_PDevObj_11, out_currentLastIrp);
    goto anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon27_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant665;
    call {:si_unique_call 3078} SerialCancelQueued(in_PDevObj_11, out_currentLastIrp);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon26_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant619;
    call {:si_unique_call 3077} SerialCancelWait(in_PDevObj_11, out_currentLastIrp);
    goto anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon30_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant667;
    call {:si_unique_call 3074} SerialFilterCancelQueued(in_PDevObj_11, out_currentLastIrp);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L32;
}



procedure {:LoopProcedure} SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_Tmp_240: int, in_sdv_218: int, in_pDevExt_9: int, in_sdv_219: int, in_cancelRoutine: int, in_PDevObj_11: int, in_vslice_dummy_var_170: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_Tmp_240: int, out_sdv_218: int, out_sdv_219: int, out_cancelRoutine: int, out_vslice_dummy_var_170: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_218 == 1 || out_sdv_218 == 0 || out_sdv_218 == in_sdv_218;
  free ensures {:va_keep} out_vslice_dummy_var_170 == 1 || out_vslice_dummy_var_170 == 0 || out_vslice_dummy_var_170 == in_vslice_dummy_var_170;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialUnstallIrps_loop_L16(in_Tmp_252: int, in_sdv_233: int, in_Tmp_253: int, in_Tmp_254: int, in_oldIrql_3: int, in_pIrpStack_4: int, in_pIrp: int, in_pDevObj: int, in_pDrvObj: int, in_pIrpLink: int, in_Tmp_257: int, in_PDevExt_14: int, in_vslice_dummy_var_177: int, in_vslice_dummy_var_178: int, in_vslice_dummy_var_179: int) returns (out_Tmp_252: int, out_sdv_233: int, out_Tmp_253: int, out_Tmp_254: int, out_oldIrql_3: int, out_pIrpStack_4: int, out_pIrp: int, out_pDevObj: int, out_pDrvObj: int, out_pIrpLink: int, out_Tmp_257: int, out_vslice_dummy_var_177: int, out_vslice_dummy_var_178: int, out_vslice_dummy_var_179: int)
{

  entry:
    out_Tmp_252, out_sdv_233, out_Tmp_253, out_Tmp_254, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_257, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179 := in_Tmp_252, in_sdv_233, in_Tmp_253, in_Tmp_254, in_oldIrql_3, in_pIrpStack_4, in_pIrp, in_pDevObj, in_pDrvObj, in_pIrpLink, in_Tmp_257, in_vslice_dummy_var_177, in_vslice_dummy_var_178, in_vslice_dummy_var_179;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon59_Else;

  anon59_Else:
    call {:si_unique_call 3085} out_sdv_233 := sdv_containing_record(out_pIrpLink, 88);
    out_pIrp := out_sdv_233;
    call {:si_unique_call 3086} out_vslice_dummy_var_177 := sdv_RemoveEntryList(0);
    call {:si_unique_call 3087} out_pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(out_pIrp);
    assume {:nonnull} out_pIrpStack_4 != 0;
    assume out_pIrpStack_4 > 0;
    havoc out_pDevObj;
    assume {:nonnull} out_pDevObj != 0;
    assume out_pDevObj > 0;
    havoc out_pDrvObj;
    call {:si_unique_call 3088} out_vslice_dummy_var_178 := sdv_IoSetCancelRoutine(out_pIrp, 0);
    call {:si_unique_call 3089} IoReleaseCancelSpinLock(out_oldIrql_3);
    out_Tmp_253 := strConst__li2bpl61;
    call {:si_unique_call 3090} out_vslice_dummy_var_179 := SerialDbgPrintEx(12, out_Tmp_253);
    assume {:nonnull} out_pIrpStack_4 != 0;
    assume out_pIrpStack_4 > 0;
    havoc out_Tmp_254;
    assume {:nonnull} out_pDrvObj != 0;
    assume out_pDrvObj > 0;
    havoc out_Tmp_257;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume out_Tmp_254 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume out_Tmp_254 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume out_Tmp_254 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume out_Tmp_254 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume out_Tmp_254 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume out_Tmp_254 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume out_Tmp_254 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume out_Tmp_254 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume out_Tmp_254 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume out_Tmp_254 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume out_Tmp_254 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume out_Tmp_254 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume out_Tmp_254 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume out_Tmp_254 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume out_Tmp_254 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume out_Tmp_254 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume out_Tmp_254 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume out_Tmp_254 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume out_Tmp_254 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume out_Tmp_254 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume out_Tmp_254 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume out_Tmp_254 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume out_Tmp_254 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume out_Tmp_254 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume out_Tmp_254 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume out_Tmp_254 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume out_Tmp_254 != 1;
    goto anon87_Then;

  anon87_Then:
    assume out_Tmp_254 == 0;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  L45:
    call {:si_unique_call 3083} out_Tmp_252 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_252 != 0;
    assume out_Tmp_252 > 0;
    call {:si_unique_call 3084} IoAcquireCancelSpinLock(out_Tmp_252);
    assume {:nonnull} out_Tmp_252 != 0;
    assume out_Tmp_252 > 0;
    havoc out_oldIrql_3;
    assume {:nonnull} in_PDevExt_14 != 0;
    assume in_PDevExt_14 > 0;
    havoc out_pIrpLink;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 3091} {:si_old_unique_call 1} out_Tmp_252, out_sdv_233, out_Tmp_253, out_Tmp_254, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_257, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179 := SerialUnstallIrps_loop_L16(out_Tmp_252, out_sdv_233, out_Tmp_253, out_Tmp_254, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_257, in_PDevExt_14, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179);
    return;

  anon86_Then:
    assume out_Tmp_254 == 1;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon85_Then:
    assume out_Tmp_254 == 2;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon84_Then:
    assume out_Tmp_254 == 3;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon83_Then:
    assume out_Tmp_254 == 4;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon82_Then:
    assume out_Tmp_254 == 5;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon81_Then:
    assume out_Tmp_254 == 6;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon80_Then:
    assume out_Tmp_254 == 7;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon79_Then:
    assume out_Tmp_254 == 8;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon78_Then:
    assume out_Tmp_254 == 9;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon77_Then:
    assume out_Tmp_254 == 10;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon76_Then:
    assume out_Tmp_254 == 11;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon75_Then:
    assume out_Tmp_254 == 12;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon74_Then:
    assume out_Tmp_254 == 13;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon73_Then:
    assume out_Tmp_254 == 14;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon72_Then:
    assume out_Tmp_254 == 15;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon71_Then:
    assume out_Tmp_254 == 16;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon70_Then:
    assume out_Tmp_254 == 17;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon69_Then:
    assume out_Tmp_254 == 18;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon68_Then:
    assume out_Tmp_254 == 19;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon67_Then:
    assume out_Tmp_254 == 20;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon66_Then:
    assume out_Tmp_254 == 21;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon65_Then:
    assume out_Tmp_254 == 22;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon64_Then:
    assume out_Tmp_254 == 23;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon63_Then:
    assume out_Tmp_254 == 24;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon62_Then:
    assume out_Tmp_254 == 25;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon61_Then:
    assume out_Tmp_254 == 26;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;

  anon60_Then:
    assume out_Tmp_254 == 27;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    goto L45;
}



procedure {:LoopProcedure} SerialUnstallIrps_loop_L16(in_Tmp_252: int, in_sdv_233: int, in_Tmp_253: int, in_Tmp_254: int, in_oldIrql_3: int, in_pIrpStack_4: int, in_pIrp: int, in_pDevObj: int, in_pDrvObj: int, in_pIrpLink: int, in_Tmp_257: int, in_PDevExt_14: int, in_vslice_dummy_var_177: int, in_vslice_dummy_var_178: int, in_vslice_dummy_var_179: int) returns (out_Tmp_252: int, out_sdv_233: int, out_Tmp_253: int, out_Tmp_254: int, out_oldIrql_3: int, out_pIrpStack_4: int, out_pIrp: int, out_pDevObj: int, out_pDrvObj: int, out_pIrpLink: int, out_Tmp_257: int, out_vslice_dummy_var_177: int, out_vslice_dummy_var_178: int, out_vslice_dummy_var_179: int);
  modifies alloc, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} out_vslice_dummy_var_177 == 1 || out_vslice_dummy_var_177 == 0 || out_vslice_dummy_var_177 == in_vslice_dummy_var_177;
  free ensures {:va_keep} out_vslice_dummy_var_179 == 0 || out_vslice_dummy_var_179 == in_vslice_dummy_var_179;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_Tmp_261: int, in_sdv_238: int, in_sdv_239: int, in_cancelRoutine_1: int, in_DeviceObject_8: int, in_QueueToClean: int, in_vslice_dummy_var_182: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_Tmp_261: int, out_sdv_238: int, out_sdv_239: int, out_cancelRoutine_1: int, out_vslice_dummy_var_182: int)
{
  var vslice_dummy_var_1922: int;

  entry:
    out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_261, out_sdv_238, out_sdv_239, out_cancelRoutine_1, out_vslice_dummy_var_182 := in_currentLastIrp_1, in_cancelIrql_1, in_Tmp_261, in_sdv_238, in_sdv_239, in_cancelRoutine_1, in_vslice_dummy_var_182;
    goto L8, exit;

  exit:
    return;

  L8:
    call {:si_unique_call 3092} out_sdv_238 := sdv_IsListEmpty(0);
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_sdv_238 == 0;
    assume {:nonnull} in_QueueToClean != 0;
    assume in_QueueToClean > 0;
    havoc vslice_dummy_var_1922;
    call {:si_unique_call 3096} out_sdv_239 := sdv_containing_record(vslice_dummy_var_1922, 88);
    out_currentLastIrp_1 := out_sdv_239;
    call {:si_unique_call 3097} out_vslice_dummy_var_182 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    out_cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp_1)];
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp_1)] := 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant571;
    call {:si_unique_call 3102} SerialCancelCurrentWrite(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  L42:
    call {:si_unique_call 3093} out_Tmp_261 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_261 != 0;
    assume out_Tmp_261 > 0;
    call {:si_unique_call 3094} IoAcquireCancelSpinLock(out_Tmp_261);
    assume {:nonnull} out_Tmp_261 != 0;
    assume out_Tmp_261 > 0;
    havoc out_cancelIrql_1;
    goto L42_dummy;

  L42_dummy:
    call {:si_unique_call 3103} {:si_old_unique_call 1} out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_261, out_sdv_238, out_sdv_239, out_cancelRoutine_1, out_vslice_dummy_var_182 := SerialKillAllReadsOrWrites_loop_L8(out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_261, out_sdv_238, out_sdv_239, out_cancelRoutine_1, in_DeviceObject_8, in_QueueToClean, out_vslice_dummy_var_182);
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant575;
    call {:si_unique_call 3101} SerialCancelCurrentXoff(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon59_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant1086;
    call {:si_unique_call 3100} SerialCancelImmediate(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon58_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant665;
    call {:si_unique_call 3099} SerialCancelQueued(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon57_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant619;
    call {:si_unique_call 3098} SerialCancelWait(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon69_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant667;
    call {:si_unique_call 3095} SerialFilterCancelQueued(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L42;
}



procedure {:LoopProcedure} SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_Tmp_261: int, in_sdv_238: int, in_sdv_239: int, in_cancelRoutine_1: int, in_DeviceObject_8: int, in_QueueToClean: int, in_vslice_dummy_var_182: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_Tmp_261: int, out_sdv_238: int, out_sdv_239: int, out_cancelRoutine_1: int, out_vslice_dummy_var_182: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_238 == 1 || out_sdv_238 == 0 || out_sdv_238 == in_sdv_238;
  free ensures {:va_keep} out_vslice_dummy_var_182 == 1 || out_vslice_dummy_var_182 == 0 || out_vslice_dummy_var_182 == in_vslice_dummy_var_182;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialStartRead_loop_L23(in_localStatus_1: int, in_Tmp_307: int, in_Tmp_308: int, in_sdv_273: int, in_Tmp_310: int, in_Tmp_311: int, in_Tmp_312: int, in_Tmp_313: int, in_totalTime: int, in_os2ssreturn: int, in_timeoutsForIrp: int, in_updateChar: int, in_setFirstStatus: int, in_newIrp_1: int, in_useTotalTimer: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_279: int, in_oldIrql_6: int, in_sdv_281: int, in_constantVal: int, in_controlIrql: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_Tmp_315: int, in_sdv_288: int, in_firstStatus: int, in_Extension_15: int, in_boogieTmp: int, in_vslice_dummy_var_204: int, in_vslice_dummy_var_205: int, in_vslice_dummy_var_206: int, in_vslice_dummy_var_209: int) returns (out_localStatus_1: int, out_Tmp_307: int, out_Tmp_308: int, out_sdv_273: int, out_Tmp_310: int, out_Tmp_311: int, out_Tmp_312: int, out_Tmp_313: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_279: int, out_oldIrql_6: int, out_sdv_281: int, out_constantVal: int, out_controlIrql: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_Tmp_315: int, out_sdv_288: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_204: int, out_vslice_dummy_var_205: int, out_vslice_dummy_var_206: int, out_vslice_dummy_var_209: int)
{
  var vslice_dummy_var_1923: int;
  var vslice_dummy_var_1924: int;
  var vslice_dummy_var_1925: int;
  var vslice_dummy_var_1926: int;

  entry:
    out_localStatus_1, out_Tmp_307, out_Tmp_308, out_sdv_273, out_Tmp_310, out_Tmp_311, out_Tmp_312, out_Tmp_313, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_279, out_oldIrql_6, out_sdv_281, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_315, out_sdv_288, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_209 := in_localStatus_1, in_Tmp_307, in_Tmp_308, in_sdv_273, in_Tmp_310, in_Tmp_311, in_Tmp_312, in_Tmp_313, in_os2ssreturn, in_setFirstStatus, in_useTotalTimer, in_multiplierVal, in_crunchDownToOne, in_sdv_279, in_oldIrql_6, in_sdv_281, in_constantVal, in_controlIrql, in_returnWithWhatsPresent, in_useIntervalTimer, in_Tmp_315, in_sdv_288, in_firstStatus, in_boogieTmp, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_209;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_1923;
    call {:si_unique_call 3104} out_sdv_279 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1923);
    assume {:nonnull} out_sdv_279 != 0;
    assume out_sdv_279 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 3126} out_localStatus_1 := SerialResizeBuffer(in_Extension_15);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 3105} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15), ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_newIrp_1, 1, in_Extension_15);
    assume {:nonnull} in_newIrp_1 != 0;
    assume in_newIrp_1 > 0;
    goto anon61_Then;

  anon61_Then:
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    call {:si_unique_call 3127} {:si_old_unique_call 1} out_localStatus_1, out_Tmp_307, out_Tmp_308, out_sdv_273, out_Tmp_310, out_Tmp_311, out_Tmp_312, out_Tmp_313, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_279, out_oldIrql_6, out_sdv_281, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_315, out_sdv_288, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_209 := SerialStartRead_loop_L23(out_localStatus_1, out_Tmp_307, out_Tmp_308, out_sdv_273, out_Tmp_310, out_Tmp_311, out_Tmp_312, out_Tmp_313, in_totalTime, out_os2ssreturn, in_timeoutsForIrp, in_updateChar, out_setFirstStatus, in_newIrp_1, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_279, out_oldIrql_6, out_sdv_281, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_315, out_sdv_288, out_firstStatus, in_Extension_15, out_boogieTmp, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_209);
    return;

  anon60_Then:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := out_localStatus_1;
    out_setFirstStatus := 1;
    goto L37;

  anon59_Then:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_1926;
    call {:si_unique_call 3116} out_sdv_281 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1926);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} out_sdv_281 != 0;
    assume out_sdv_281 > 0;
    out_useTotalTimer := 0;
    out_returnWithWhatsPresent := 0;
    out_os2ssreturn := 0;
    out_crunchDownToOne := 0;
    out_useIntervalTimer := 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 3117} out_vslice_dummy_var_209 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_Extension_15);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 3118} out_vslice_dummy_var_204 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_Extension_15);
    call {:si_unique_call 3119} out_Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    call {:si_unique_call 3120} sdv_KeAcquireSpinLock(0, out_Tmp_313);
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    havoc out_controlIrql;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    call {:si_unique_call 3121} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    out_useIntervalTimer := 1;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto L66;

  L66:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto L76;

  L76:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  L83:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_useTotalTimer != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_totalTime != 0;
    assume in_totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 3113} out_Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    call {:si_unique_call 3114} sdv_KeAcquireSpinLock(0, out_Tmp_313);
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    havoc out_controlIrql;
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    call {:si_unique_call 3115} out_boogieTmp := SerialGetCharsFromIntBuffer(in_Extension_15);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 3124} out_vslice_dummy_var_205 := KeSynchronizeExecution(0, li2bplFunctionConstant721, 0);
    call {:si_unique_call 3125} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_308;
    assume {:nonnull} out_Tmp_308 != 0;
    assume out_Tmp_308 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon83_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon72_Then:
    assume {:partition} out_returnWithWhatsPresent == 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_os2ssreturn != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_307;
    assume {:nonnull} out_Tmp_307 != 0;
    assume out_Tmp_307 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto L105;

  L105:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_1925;
    call {:si_unique_call 3110} out_sdv_288 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1925);
    assume {:nonnull} out_sdv_288 != 0;
    assume out_sdv_288 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_288)))] := 0;
    call {:si_unique_call 3111} out_Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    call {:si_unique_call 3112} IoAcquireCancelSpinLock(out_Tmp_313);
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    havoc out_oldIrql_6;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_310;
    assume {:nonnull} out_Tmp_310 != 0;
    assume out_Tmp_310 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 3122} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 3123} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_315;
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_311;
    assume {:nonnull} out_Tmp_311 != 0;
    assume out_Tmp_311 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := -1073741536;
    out_setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon85_Then:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} out_crunchDownToOne != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_1924;
    call {:si_unique_call 3109} out_sdv_273 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1924);
    assume {:nonnull} out_sdv_273 != 0;
    assume out_sdv_273 > 0;
    goto L126;

  L126:
    call {:si_unique_call 3108} out_vslice_dummy_var_206 := KeSynchronizeExecution(0, li2bplFunctionConstant722, 0);
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    goto anon76_Else;

  anon76_Else:
    call {:si_unique_call 3106} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 3107} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_312;
    assume {:nonnull} out_Tmp_312 != 0;
    assume out_Tmp_312 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon87_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon75_Then:
    assume {:partition} out_crunchDownToOne == 0;
    goto L126;

  anon84_Then:
    goto L94;

  anon74_Then:
    assume {:partition} out_os2ssreturn == 0;
    goto L105;

  anon73_Then:
    goto L94;

  anon71_Then:
    assume {:partition} out_useTotalTimer == 0;
    goto L84;

  anon70_Then:
    goto L77;

  L77:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    out_crunchDownToOne := 1;
    out_multiplierVal := 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon80_Then:
    goto L83;

  anon69_Then:
    goto L83;

  anon68_Then:
    goto L77;

  anon66_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    out_returnWithWhatsPresent := 1;
    goto L83;

  anon67_Then:
    goto L76;

  anon63_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto L192;

  L192:
    out_useTotalTimer := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon65_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto L192;

  anon81_Then:
    goto L83;

  anon82_Then:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto L66;

  anon64_Then:
    goto L66;

  anon62_Then:
    goto L66;
}



procedure {:LoopProcedure} SerialStartRead_loop_L23(in_localStatus_1: int, in_Tmp_307: int, in_Tmp_308: int, in_sdv_273: int, in_Tmp_310: int, in_Tmp_311: int, in_Tmp_312: int, in_Tmp_313: int, in_totalTime: int, in_os2ssreturn: int, in_timeoutsForIrp: int, in_updateChar: int, in_setFirstStatus: int, in_newIrp_1: int, in_useTotalTimer: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_279: int, in_oldIrql_6: int, in_sdv_281: int, in_constantVal: int, in_controlIrql: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_Tmp_315: int, in_sdv_288: int, in_firstStatus: int, in_Extension_15: int, in_boogieTmp: int, in_vslice_dummy_var_204: int, in_vslice_dummy_var_205: int, in_vslice_dummy_var_206: int, in_vslice_dummy_var_209: int) returns (out_localStatus_1: int, out_Tmp_307: int, out_Tmp_308: int, out_sdv_273: int, out_Tmp_310: int, out_Tmp_311: int, out_Tmp_312: int, out_Tmp_313: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_279: int, out_oldIrql_6: int, out_sdv_281: int, out_constantVal: int, out_controlIrql: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_Tmp_315: int, out_sdv_288: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_204: int, out_vslice_dummy_var_205: int, out_vslice_dummy_var_206: int, out_vslice_dummy_var_209: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} out_localStatus_1 == 0 || out_localStatus_1 == in_localStatus_1;
  free ensures {:va_keep} out_os2ssreturn == 0 || out_os2ssreturn == 1 || out_os2ssreturn == in_os2ssreturn;
  free ensures {:va_keep} out_setFirstStatus == 1 || out_setFirstStatus == in_setFirstStatus;
  free ensures {:va_keep} out_useTotalTimer == 0 || out_useTotalTimer == 1 || out_useTotalTimer == in_useTotalTimer;
  free ensures {:va_keep} out_crunchDownToOne == 0 || out_crunchDownToOne == 1 || out_crunchDownToOne == in_crunchDownToOne;
  free ensures {:va_keep} out_returnWithWhatsPresent == 1 || out_returnWithWhatsPresent == 0 || out_returnWithWhatsPresent == in_returnWithWhatsPresent;
  free ensures {:va_keep} out_useIntervalTimer == 1 || out_useIntervalTimer == 0 || out_useIntervalTimer == in_useIntervalTimer;
  free ensures {:va_keep} out_firstStatus == 0 || out_firstStatus == -1073741536 || out_firstStatus == in_firstStatus;
  free ensures {:va_keep} out_vslice_dummy_var_204 == 1 || out_vslice_dummy_var_204 == 0 || out_vslice_dummy_var_204 == in_vslice_dummy_var_204;
  free ensures {:va_keep} out_vslice_dummy_var_205 == 1 || out_vslice_dummy_var_205 == 0 || out_vslice_dummy_var_205 == in_vslice_dummy_var_205;
  free ensures {:va_keep} out_vslice_dummy_var_206 == 1 || out_vslice_dummy_var_206 == 0 || out_vslice_dummy_var_206 == in_vslice_dummy_var_206;
  free ensures {:va_keep} out_vslice_dummy_var_209 == 1 || out_vslice_dummy_var_209 == 0 || out_vslice_dummy_var_209 == in_vslice_dummy_var_209;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int)
{

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_sDeviceData, in_gotISR, in_gotMem;
    goto L95, exit;

  exit:
    return;

  L95:
    goto anon132_Else;

  anon132_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto L105;

  L105:
    out_i := out_i + 1;
    goto L105_dummy;

  L105_dummy:
    call {:si_unique_call 3128} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L95(in_ioResIndex, in_isMulti, in_count, out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem, in_pPartialResourceDesc, in_PConfig);
    return;

  anon171_Then:
    out_sDeviceData := in_pPartialResourceDesc;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} out_sDeviceData != 0;
    assume out_sDeviceData > 0;
    goto L105;

  anon172_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} out_gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} out_gotMem != 0;
    goto L105;

  anon173_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon177_Then:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} out_gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    goto L105;

  anon140_Then:
    assume {:partition} out_gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    out_curIoIndex := out_curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int);
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_sDeviceData == in_sDeviceData || out_sDeviceData == in_pPartialResourceDesc;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int)
{

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_gotISR, in_gotMem;
    goto L148, exit;

  exit:
    return;

  L148:
    goto anon143_Else;

  anon143_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    goto L156;

  L156:
    out_i := out_i + 1;
    goto L156_dummy;

  L156_dummy:
    call {:si_unique_call 3129} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L148(in_ioResIndex, in_isMulti, in_count, out_gotIO, in_pPartialTrResourceDesc, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem, in_PConfig);
    return;

  anon174_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} out_gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} out_gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon175_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} out_gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    goto L156;

  anon151_Then:
    assume {:partition} out_gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    out_curIoIndex := out_curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int);
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_276: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_276: int)
{

  entry:
    out_interfaceType, out_foundOne, out_vslice_dummy_var_276 := in_interfaceType, in_foundOne, in_vslice_dummy_var_276;
    goto L191, exit;

  exit:
    return;

  L191:
    assume {:CounterLoop 18} {:Counter "interfaceType"} true;
    goto anon154_Else;

  anon154_Else:
    assume {:partition} 18 > out_interfaceType;
    out_foundOne := 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} out_interfaceType != 0;
    call {:si_unique_call 3130} out_vslice_dummy_var_276 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon156_Then;

  anon156_Then:
    assume {:partition} out_foundOne == 0;
    goto L198;

  L198:
    out_interfaceType := out_interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    havoc out_interfaceType;
    return;

  anon179_Then:
    assume {:partition} out_interfaceType == 0;
    goto L198;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_276: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_276: int);
  free ensures {:va_keep} out_foundOne == 0 || out_foundOne == in_foundOne;
  free ensures {:va_keep} out_vslice_dummy_var_276 == 0 || out_vslice_dummy_var_276 == -1073741823 || out_vslice_dummy_var_276 == in_vslice_dummy_var_276;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialFinishStartDevice_loop_L219()
{

  entry:
    goto L219, exit;

  exit:
    return;

  L219:
    goto L219_dummy;

  L219_dummy:
    call {:si_unique_call 3131} {:si_old_unique_call 1} SerialFinishStartDevice_loop_L219();
    return;
}



procedure {:LoopProcedure} SerialFinishStartDevice_loop_L219();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialPnpDispatch_loop_L179(in_sdv_442: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int)
{

  entry:
    out_allocLen, out_curStrLen := in_allocLen, in_curStrLen;
    goto L179, exit;

  exit:
    return;

  L179:
    out_curStrLen := in_sdv_442;
    goto anon218_Else;

  anon218_Else:
    assume {:partition} out_curStrLen != 0;
    out_allocLen := out_allocLen + out_curStrLen * 2 + 2;
    goto anon218_Else_dummy;

  anon218_Else_dummy:
    havoc out_allocLen;
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L179(in_sdv_442: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int);
  free ensures {:va_keep} out_curStrLen == in_sdv_442 || out_curStrLen == in_curStrLen;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_14: int, in_Tmp_556: int, in_isMulti_2: int, in_Tmp_566: int, in_pLowerDevObj_4: int, in_Tmp_572: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_579: int, in_Tmp_583: int, in_j: int, in_gotISR_1: int, in_vslice_dummy_var_379: int, in_vslice_dummy_var_380: int, in_vslice_dummy_var_381: int) returns (out_Tmp_556: int, out_Tmp_566: int, out_Tmp_572: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_579: int, out_Tmp_583: int, out_j: int, out_gotISR_1: int, out_vslice_dummy_var_379: int, out_vslice_dummy_var_380: int, out_vslice_dummy_var_381: int)
{

  entry:
    out_Tmp_556, out_Tmp_566, out_Tmp_572, out_gotInt_1, out_pResDesc, out_Tmp_579, out_Tmp_583, out_j, out_gotISR_1, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381 := in_Tmp_556, in_Tmp_566, in_Tmp_572, in_gotInt_1, in_pResDesc, in_Tmp_579, in_Tmp_583, in_j, in_gotISR_1, in_vslice_dummy_var_379, in_vslice_dummy_var_380, in_vslice_dummy_var_381;
    goto L354, exit;

  exit:
    return;

  L354:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon163_Else;

  anon163_Else:
    out_Tmp_556 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_566;
    out_pResDesc := out_Tmp_566 + out_Tmp_556 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon169_Else;

  anon169_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    goto L369;

  L369:
    out_j := out_j + 1;
    goto L369_dummy;

  L369_dummy:
    call {:si_unique_call 3135} {:si_old_unique_call 1} out_Tmp_556, out_Tmp_566, out_Tmp_572, out_gotInt_1, out_pResDesc, out_Tmp_579, out_Tmp_583, out_j, out_gotISR_1, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_14, out_Tmp_556, in_isMulti_2, out_Tmp_566, in_pLowerDevObj_4, out_Tmp_572, out_gotInt_1, out_pResDesc, out_Tmp_579, out_Tmp_583, out_j, out_gotISR_1, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381);
    return;

  anon167_Then:
    goto anon170_Else;

  anon170_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon168_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon166_Then:
    goto L364;

  anon205_Then:
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon165_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_583 := strConst__li2bpl183;
    call {:si_unique_call 3132} out_vslice_dummy_var_380 := SerialDbgPrintEx(12, out_Tmp_583);
    goto L363;

  anon215_Then:
    assume {:nonnull} in_pDevExt_14 != 0;
    assume in_pDevExt_14 > 0;
    out_Tmp_579 := strConst__li2bpl184;
    call {:si_unique_call 3133} out_vslice_dummy_var_381 := SerialDbgPrintEx(12, out_Tmp_579);
    goto L363;

  anon214_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_572 := strConst__li2bpl182;
    call {:si_unique_call 3134} out_vslice_dummy_var_379 := SerialDbgPrintEx(12, out_Tmp_572);
    goto L363;

  anon172_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon171_Then:
    goto L363;

  anon164_Then:
    goto L363;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_14: int, in_Tmp_556: int, in_isMulti_2: int, in_Tmp_566: int, in_pLowerDevObj_4: int, in_Tmp_572: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_579: int, in_Tmp_583: int, in_j: int, in_gotISR_1: int, in_vslice_dummy_var_379: int, in_vslice_dummy_var_380: int, in_vslice_dummy_var_381: int) returns (out_Tmp_556: int, out_Tmp_566: int, out_Tmp_572: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_579: int, out_Tmp_583: int, out_j: int, out_gotISR_1: int, out_vslice_dummy_var_379: int, out_vslice_dummy_var_380: int, out_vslice_dummy_var_381: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_379 == 0 || out_vslice_dummy_var_379 == in_vslice_dummy_var_379;
  free ensures {:va_keep} out_vslice_dummy_var_380 == 0 || out_vslice_dummy_var_380 == in_vslice_dummy_var_380;
  free ensures {:va_keep} out_vslice_dummy_var_381 == 0 || out_vslice_dummy_var_381 == in_vslice_dummy_var_381;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_14: int, in_Tmp_556: int, in_isMulti_2: int, in_Tmp_566: int, in_pLowerDevObj_4: int, in_Tmp_572: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_Tmp_579: int, in_pReqList: int, in_Tmp_583: int, in_j: int, in_gotISR_1: int, in_Tmp_604: int, in_vslice_dummy_var_378: int, in_vslice_dummy_var_379: int, in_vslice_dummy_var_380: int, in_vslice_dummy_var_381: int) returns (out_Tmp_556: int, out_Tmp_566: int, out_Tmp_572: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_579: int, out_Tmp_583: int, out_j: int, out_gotISR_1: int, out_Tmp_604: int, out_vslice_dummy_var_378: int, out_vslice_dummy_var_379: int, out_vslice_dummy_var_380: int, out_vslice_dummy_var_381: int)
{

  entry:
    out_Tmp_556, out_Tmp_566, out_Tmp_572, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_579, out_Tmp_583, out_j, out_gotISR_1, out_Tmp_604, out_vslice_dummy_var_378, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381 := in_Tmp_556, in_Tmp_566, in_Tmp_572, in_gotInt_1, in_pResDesc, in_listNum, in_Tmp_579, in_Tmp_583, in_j, in_gotISR_1, in_Tmp_604, in_vslice_dummy_var_378, in_vslice_dummy_var_379, in_vslice_dummy_var_380, in_vslice_dummy_var_381;
    goto L346, exit;

  exit:
    return;

  L346:
    assume {:nonnull} in_pReqList != 0;
    assume in_pReqList > 0;
    goto anon162_Else;

  anon162_Else:
    out_gotISR_1 := 0;
    out_gotInt_1 := 0;
    out_Tmp_604 := strConst__li2bpl181;
    call {:si_unique_call 3137} out_vslice_dummy_var_378 := SerialDbgPrintEx(12, out_Tmp_604);
    out_j := 0;
    goto L354;

  L354:
    call {:si_unique_call 3136} out_Tmp_556, out_Tmp_566, out_Tmp_572, out_gotInt_1, out_pResDesc, out_Tmp_579, out_Tmp_583, out_j, out_gotISR_1, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_14, out_Tmp_556, in_isMulti_2, out_Tmp_566, in_pLowerDevObj_4, out_Tmp_572, out_gotInt_1, out_pResDesc, out_Tmp_579, out_Tmp_583, out_j, out_gotISR_1, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381);
    goto L354_last;

  L354_last:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    out_Tmp_556 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_566;
    out_pResDesc := out_Tmp_566 + out_Tmp_556 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    goto L369;

  L369:
    out_j := out_j + 1;
    assume false;
    return;

  anon167_Then:
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon170_Then:
    assume {:partition} out_gotInt_1 != 0;
    goto L355;

  L355:
    out_listNum := out_listNum + 1;
    goto L355_dummy;

  L355_dummy:
    call {:si_unique_call 3141} {:si_old_unique_call 1} out_Tmp_556, out_Tmp_566, out_Tmp_572, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_579, out_Tmp_583, out_j, out_gotISR_1, out_Tmp_604, out_vslice_dummy_var_378, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381 := SerialPnpDispatch_loop_L346(in_pResList, in_pDevExt_14, out_Tmp_556, in_isMulti_2, out_Tmp_566, in_pLowerDevObj_4, out_Tmp_572, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_579, in_pReqList, out_Tmp_583, out_j, out_gotISR_1, out_Tmp_604, out_vslice_dummy_var_378, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381);
    return;

  anon169_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L355;

  anon168_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon166_Then:
    goto L364;

  anon205_Then:
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon165_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_583 := strConst__li2bpl183;
    call {:si_unique_call 3138} out_vslice_dummy_var_380 := SerialDbgPrintEx(12, out_Tmp_583);
    goto L363;

  anon215_Then:
    assume {:nonnull} in_pDevExt_14 != 0;
    assume in_pDevExt_14 > 0;
    out_Tmp_579 := strConst__li2bpl184;
    call {:si_unique_call 3139} out_vslice_dummy_var_381 := SerialDbgPrintEx(12, out_Tmp_579);
    goto L363;

  anon214_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_572 := strConst__li2bpl182;
    call {:si_unique_call 3140} out_vslice_dummy_var_379 := SerialDbgPrintEx(12, out_Tmp_572);
    goto L363;

  anon172_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon171_Then:
    goto L363;

  anon164_Then:
    goto L363;

  anon163_Then:
    goto L355;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_14: int, in_Tmp_556: int, in_isMulti_2: int, in_Tmp_566: int, in_pLowerDevObj_4: int, in_Tmp_572: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_Tmp_579: int, in_pReqList: int, in_Tmp_583: int, in_j: int, in_gotISR_1: int, in_Tmp_604: int, in_vslice_dummy_var_378: int, in_vslice_dummy_var_379: int, in_vslice_dummy_var_380: int, in_vslice_dummy_var_381: int) returns (out_Tmp_556: int, out_Tmp_566: int, out_Tmp_572: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_579: int, out_Tmp_583: int, out_j: int, out_gotISR_1: int, out_Tmp_604: int, out_vslice_dummy_var_378: int, out_vslice_dummy_var_379: int, out_vslice_dummy_var_380: int, out_vslice_dummy_var_381: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == 0 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == 0 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_378 == 0 || out_vslice_dummy_var_378 == in_vslice_dummy_var_378;
  free ensures {:va_keep} out_vslice_dummy_var_379 == 0 || out_vslice_dummy_var_379 == in_vslice_dummy_var_379;
  free ensures {:va_keep} out_vslice_dummy_var_380 == 0 || out_vslice_dummy_var_380 == in_vslice_dummy_var_380;
  free ensures {:va_keep} out_vslice_dummy_var_381 == 0 || out_vslice_dummy_var_381 == in_vslice_dummy_var_381;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:SIextraRecBound 5} SerialPnpDispatch_loop_L476(in_pDevExt_14: int, in_cap: int, in_Tmp_567: int, in_Tmp_590: int, in_Tmp_593: int, in_pDevCaps: int, in_Tmp_610: int) returns (out_cap: int, out_Tmp_567: int, out_Tmp_590: int, out_Tmp_593: int, out_Tmp_610: int)
{

  entry:
    out_cap, out_Tmp_567, out_Tmp_590, out_Tmp_593, out_Tmp_610 := in_cap, in_Tmp_567, in_Tmp_590, in_Tmp_593, in_Tmp_610;
    goto L476, exit;

  exit:
    return;

  L476:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon174_Else;

  anon174_Else:
    assume {:partition} 7 > out_cap;
    out_Tmp_593 := out_cap;
    assume {:nonnull} in_pDevExt_14 != 0;
    assume in_pDevExt_14 > 0;
    havoc out_Tmp_567;
    out_Tmp_610 := out_cap;
    assume {:nonnull} in_pDevCaps != 0;
    assume in_pDevCaps > 0;
    havoc out_Tmp_590;
    assume {:nonnull} out_Tmp_567 != 0;
    assume out_Tmp_567 > 0;
    assume {:nonnull} out_Tmp_590 != 0;
    assume out_Tmp_590 > 0;
    out_cap := out_cap + 1;
    goto anon174_Else_dummy;

  anon174_Else_dummy:
    call {:si_unique_call 3142} {:si_old_unique_call 1} out_cap, out_Tmp_567, out_Tmp_590, out_Tmp_593, out_Tmp_610 := SerialPnpDispatch_loop_L476(in_pDevExt_14, out_cap, out_Tmp_567, out_Tmp_590, out_Tmp_593, in_pDevCaps, out_Tmp_610);
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L476(in_pDevExt_14: int, in_cap: int, in_Tmp_567: int, in_Tmp_590: int, in_Tmp_593: int, in_pDevCaps: int, in_Tmp_610: int) returns (out_cap: int, out_Tmp_567: int, out_Tmp_590: int, out_Tmp_593: int, out_Tmp_610: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialInternalIoControl_loop_L126(in_Tmp_705: int, in_pDevExt_16: int, in_cap_1: int, in_Tmp_708: int, in_Tmp_711: int, in_Tmp_713: int) returns (out_Tmp_705: int, out_cap_1: int, out_Tmp_708: int, out_Tmp_711: int, out_Tmp_713: int)
{

  entry:
    out_Tmp_705, out_cap_1, out_Tmp_708, out_Tmp_711, out_Tmp_713 := in_Tmp_705, in_cap_1, in_Tmp_708, in_Tmp_711, in_Tmp_713;
    goto L126, exit;

  exit:
    return;

  L126:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} 7 > out_cap_1;
    out_Tmp_705 := out_cap_1;
    assume {:nonnull} in_pDevExt_16 != 0;
    assume in_pDevExt_16 > 0;
    havoc out_Tmp_711;
    assume {:nonnull} out_Tmp_711 != 0;
    assume out_Tmp_711 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    out_Tmp_713 := out_cap_1;
    assume {:nonnull} in_pDevExt_16 != 0;
    assume in_pDevExt_16 > 0;
    havoc out_Tmp_708;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    assume {:nonnull} in_pDevExt_16 != 0;
    assume in_pDevExt_16 > 0;
    goto anon50_Else;

  anon50_Else:
    goto L129;

  L129:
    out_cap_1 := out_cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    havoc out_cap_1;
    return;

  anon49_Then:
    goto L129;
}



procedure {:LoopProcedure} SerialInternalIoControl_loop_L126(in_Tmp_705: int, in_pDevExt_16: int, in_cap_1: int, in_Tmp_708: int, in_Tmp_711: int, in_Tmp_713: int) returns (out_Tmp_705: int, out_cap_1: int, out_Tmp_708: int, out_Tmp_711: int, out_Tmp_713: int);
  free ensures {:va_keep} out_Tmp_705 == in_cap_1 || out_Tmp_705 == in_Tmp_705;
  free ensures {:va_keep} out_Tmp_713 == in_cap_1 || out_Tmp_713 == in_Tmp_713;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialEnumerateLegacy_loop_L314(in_Tmp_791: int, in_Tmp_792: int, in_Tmp_793: int, in_Tmp_794: int, in_Tmp_795: int, in_countOfPartials_1: int, in_Tmp_797: int, in_Tmp_800: int, in_Tmp_801: int, in_Tmp_804: int, in_Tmp_805: int, in_Tmp_806: int, in_Tmp_808: int, in_trResourceList: int, in_Tmp_809: int, in_Tmp_811: int, in_Tmp_812: int, in_lowerDevice: int, in_Tmp_813: int, in_Tmp_814: int, in_Tmp_817: int, in_actuallyReturned: int, in_Tmp_818: int, in_PnPID: int, in_Tmp_820: int, in_deviceExtension: int, in_countSoFar_1: int, in_i_1: int, in_defaultInterfaceType_1: int, in_newDevObj: int, in_userSubKey: int, in_Tmp_828: int, in_Tmp_829: int, in_Tmp_832: int, in_pRequiredList: int, in_Tmp_834: int, in_Tmp_835: int, in_Tmp_840: int, in_Tmp_841: int, in_resourceList: int, in_Tmp_845: int, in_legacyKeys: int, in_legacyDiscovered: int, in_Tmp_850: int, in_parameters: int, in_parametersKey: int, in_Tmp_852: int, in_status_29: int, in_Tmp_853: int, in_Tmp_855: int, in_sdv_723: int, in_parametersPath: int, in_brokenStatus: int, in_newPdo: int, in_userData: int, in_DriverObject_3: int, in_vslice_dummy_var_496: int, in_vslice_dummy_var_506: int, in_vslice_dummy_var_507: int, in_vslice_dummy_var_508: int, in_vslice_dummy_var_509: int, in_vslice_dummy_var_510: int, in_vslice_dummy_var_511: int, in_vslice_dummy_var_512: int, in_vslice_dummy_var_513: int) returns (out_Tmp_791: int, out_Tmp_793: int, out_Tmp_795: int, out_Tmp_797: int, out_Tmp_800: int, out_Tmp_801: int, out_Tmp_804: int, out_Tmp_805: int, out_Tmp_808: int, out_Tmp_809: int, out_Tmp_811: int, out_Tmp_812: int, out_lowerDevice: int, out_Tmp_813: int, out_Tmp_814: int, out_Tmp_817: int, out_actuallyReturned: int, out_Tmp_818: int, out_deviceExtension: int, out_i_1: int, out_Tmp_828: int, out_Tmp_832: int, out_Tmp_834: int, out_Tmp_840: int, out_Tmp_841: int, out_Tmp_845: int, out_Tmp_850: int, out_status_29: int, out_sdv_723: int, out_newPdo: int, out_vslice_dummy_var_496: int, out_vslice_dummy_var_506: int, out_vslice_dummy_var_507: int, out_vslice_dummy_var_508: int, out_vslice_dummy_var_509: int, out_vslice_dummy_var_510: int, out_vslice_dummy_var_511: int, out_vslice_dummy_var_512: int, out_vslice_dummy_var_513: int)
{
  var vslice_dummy_var_1927: int;
  var vslice_dummy_var_1928: int;
  var vslice_dummy_var_1929: int;
  var vslice_dummy_var_1930: int;
  var vslice_dummy_var_1931: int;
  var vslice_dummy_var_1932: int;
  var vslice_dummy_var_1933: int;
  var vslice_dummy_var_1934: int;

  entry:
    out_Tmp_791, out_Tmp_793, out_Tmp_795, out_Tmp_797, out_Tmp_800, out_Tmp_801, out_Tmp_804, out_Tmp_805, out_Tmp_808, out_Tmp_809, out_Tmp_811, out_Tmp_812, out_lowerDevice, out_Tmp_813, out_Tmp_814, out_Tmp_817, out_actuallyReturned, out_Tmp_818, out_deviceExtension, out_i_1, out_Tmp_828, out_Tmp_832, out_Tmp_834, out_Tmp_840, out_Tmp_841, out_Tmp_845, out_Tmp_850, out_status_29, out_sdv_723, out_newPdo, out_vslice_dummy_var_496, out_vslice_dummy_var_506, out_vslice_dummy_var_507, out_vslice_dummy_var_508, out_vslice_dummy_var_509, out_vslice_dummy_var_510, out_vslice_dummy_var_511, out_vslice_dummy_var_512, out_vslice_dummy_var_513 := in_Tmp_791, in_Tmp_793, in_Tmp_795, in_Tmp_797, in_Tmp_800, in_Tmp_801, in_Tmp_804, in_Tmp_805, in_Tmp_808, in_Tmp_809, in_Tmp_811, in_Tmp_812, in_lowerDevice, in_Tmp_813, in_Tmp_814, in_Tmp_817, in_actuallyReturned, in_Tmp_818, in_deviceExtension, in_i_1, in_Tmp_828, in_Tmp_832, in_Tmp_834, in_Tmp_840, in_Tmp_841, in_Tmp_845, in_Tmp_850, in_status_29, in_sdv_723, in_newPdo, in_vslice_dummy_var_496, in_vslice_dummy_var_506, in_vslice_dummy_var_507, in_vslice_dummy_var_508, in_vslice_dummy_var_509, in_vslice_dummy_var_510, in_vslice_dummy_var_511, in_vslice_dummy_var_512, in_vslice_dummy_var_513;
    goto L314, exit;

  exit:
    return;

  L314:
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    call {:si_unique_call 3143} out_Tmp_812 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_812 != 0;
    assume out_Tmp_812 > 0;
    assume {:nonnull} in_parametersKey != 0;
    assume in_parametersKey > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume Mem_T.PVOID[in_parametersKey] == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 3147} SLIC_ZwEnumerateKey_entry(strConst__li2bpl254);
    goto anon139_Else;

  anon139_Else:
    assume {:partition} yogi_error != 1;
    goto L643;

  L643:
    call {:si_unique_call 3146} out_status_29 := ZwEnumerateKey(0, out_i_1, 0, 0, 534, out_Tmp_812);
    assume {:nonnull} out_Tmp_812 != 0;
    assume out_Tmp_812 > 0;
    havoc out_actuallyReturned;
    goto anon100_Else;

  anon100_Else:
    assume {:partition} out_status_29 != 26;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} out_status_29 == 5;
    assume {:nonnull} in_Tmp_794 != 0;
    assume in_Tmp_794 > 0;
    assume {:nonnull} in_Tmp_794 != 0;
    assume in_Tmp_794 > 0;
    assume {:nonnull} in_Tmp_794 != 0;
    assume in_Tmp_794 > 0;
    assume {:nonnull} in_Tmp_794 != 0;
    assume in_Tmp_794 > 0;
    assume {:nonnull} in_Tmp_794 != 0;
    assume in_Tmp_794 > 0;
    assume {:nonnull} in_Tmp_855 != 0;
    assume in_Tmp_855 > 0;
    assume {:nonnull} in_Tmp_855 != 0;
    assume in_Tmp_855 > 0;
    assume {:nonnull} in_Tmp_855 != 0;
    assume in_Tmp_855 > 0;
    assume {:nonnull} in_Tmp_855 != 0;
    assume in_Tmp_855 > 0;
    assume {:nonnull} in_Tmp_855 != 0;
    assume in_Tmp_855 > 0;
    call {:si_unique_call 3144} SerialLogError(in_DriverObject_3, 0, in_Tmp_855, in_Tmp_794, 0, 0, 0, 84, 0, -1073348589, 0, 0, 0, 0);
    out_Tmp_800 := strConst__li2bpl241;
    call {:si_unique_call 3145} out_vslice_dummy_var_506 := SerialDbgPrintEx(14, out_Tmp_800);
    out_i_1 := out_i_1 + 1;
    goto anon101_Else_dummy;

  anon101_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 3180} {:si_old_unique_call 1} out_Tmp_791, out_Tmp_793, out_Tmp_795, out_Tmp_797, out_Tmp_800, out_Tmp_801, out_Tmp_804, out_Tmp_805, out_Tmp_808, out_Tmp_809, out_Tmp_811, out_Tmp_812, out_lowerDevice, out_Tmp_813, out_Tmp_814, out_Tmp_817, out_actuallyReturned, out_Tmp_818, out_deviceExtension, out_i_1, out_Tmp_828, out_Tmp_832, out_Tmp_834, out_Tmp_840, out_Tmp_841, out_Tmp_845, out_Tmp_850, out_status_29, out_sdv_723, out_newPdo, out_vslice_dummy_var_496, out_vslice_dummy_var_506, out_vslice_dummy_var_507, out_vslice_dummy_var_508, out_vslice_dummy_var_509, out_vslice_dummy_var_510, out_vslice_dummy_var_511, out_vslice_dummy_var_512, out_vslice_dummy_var_513 := SerialEnumerateLegacy_loop_L314(out_Tmp_791, in_Tmp_792, out_Tmp_793, in_Tmp_794, out_Tmp_795, in_countOfPartials_1, out_Tmp_797, out_Tmp_800, out_Tmp_801, out_Tmp_804, out_Tmp_805, in_Tmp_806, out_Tmp_808, in_trResourceList, out_Tmp_809, out_Tmp_811, out_Tmp_812, out_lowerDevice, out_Tmp_813, out_Tmp_814, out_Tmp_817, out_actuallyReturned, out_Tmp_818, in_PnPID, in_Tmp_820, out_deviceExtension, in_countSoFar_1, out_i_1, in_defaultInterfaceType_1, in_newDevObj, in_userSubKey, out_Tmp_828, in_Tmp_829, out_Tmp_832, in_pRequiredList, out_Tmp_834, in_Tmp_835, out_Tmp_840, out_Tmp_841, in_resourceList, out_Tmp_845, in_legacyKeys, in_legacyDiscovered, out_Tmp_850, in_parameters, in_parametersKey, in_Tmp_852, out_status_29, in_Tmp_853, in_Tmp_855, out_sdv_723, in_parametersPath, in_brokenStatus, out_newPdo, in_userData, in_DriverObject_3, out_vslice_dummy_var_496, out_vslice_dummy_var_506, out_vslice_dummy_var_507, out_vslice_dummy_var_508, out_vslice_dummy_var_509, out_vslice_dummy_var_510, out_vslice_dummy_var_511, out_vslice_dummy_var_512, out_vslice_dummy_var_513);
    return;

  anon101_Then:
    assume {:partition} out_status_29 != 5;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} out_status_29 >= 0;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_801;
    call {:si_unique_call 3148} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_805;
    assume {:nonnull} in_parameters != 0;
    assume in_parameters > 0;
    call {:si_unique_call 3149} sdv_RtlZeroMemory(0, 8);
    call {:si_unique_call 3150} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc out_Tmp_828;
    call {:si_unique_call 3151} sdv_RtlZeroMemory(0, out_Tmp_828);
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    call {:si_unique_call 3152} out_status_29 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} out_status_29 >= 0;
    assume {:nonnull} in_PnPID != 0;
    assume in_PnPID > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    out_i_1 := out_i_1 + 1;
    goto anon104_Else_dummy;

  anon104_Else_dummy:
    goto L_BAF_0;

  anon104_Then:
    assume {:nonnull} in_legacyDiscovered != 0;
    assume in_legacyDiscovered > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    out_i_1 := out_i_1 + 1;
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    goto L_BAF_0;

  anon105_Then:
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    call {:si_unique_call 3171} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} in_brokenStatus != 0;
    assume in_brokenStatus > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} in_brokenStatus != 0;
    assume in_brokenStatus > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    goto L369;

  L369:
    assume {:nonnull} in_defaultInterfaceType_1 != 0;
    assume in_defaultInterfaceType_1 > 0;
    havoc vslice_dummy_var_1931;
    call {:si_unique_call 3170} out_sdv_723 := SerialIsUserDataValid(in_DriverObject_3, in_userSubKey, in_parameters, vslice_dummy_var_1931, in_userData);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} out_sdv_723 != 0;
    call {:si_unique_call 3169} out_status_29 := SerialBuildResourceList(in_resourceList, in_countOfPartials_1, in_userData);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} out_status_29 >= 0;
    assume {:nonnull} in_countOfPartials_1 != 0;
    assume in_countOfPartials_1 > 0;
    havoc vslice_dummy_var_1930;
    call {:si_unique_call 3168} out_status_29 := SerialTranslateResourceList(in_DriverObject_3, in_userSubKey, in_trResourceList, in_resourceList, vslice_dummy_var_1930, in_userData);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} out_status_29 >= 0;
    assume {:nonnull} in_countOfPartials_1 != 0;
    assume in_countOfPartials_1 > 0;
    havoc vslice_dummy_var_1929;
    call {:si_unique_call 3167} out_status_29 := SerialBuildRequirementsList(in_pRequiredList, vslice_dummy_var_1929, in_userData);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} out_status_29 >= 0;
    out_newPdo := 0;
    call {:si_unique_call 3166} out_status_29 := IoReportDetectedDevice(0, -1, -1, -1, 0, 0, 0, 0);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} out_status_29 >= 0;
    assume {:nonnull} in_countOfPartials_1 != 0;
    assume in_countOfPartials_1 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    out_Tmp_809 := 1;
    goto L403;

  L403:
    out_Tmp_834 := out_Tmp_809;
    call {:si_unique_call 3165} out_status_29 := SerialMigrateLegacyRegistry(out_newPdo, in_userData, out_Tmp_834);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} out_status_29 >= 0;
    call {:si_unique_call 3164} out_status_29 := SerialCreateDevObj(in_DriverObject_3, in_newDevObj);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} out_status_29 >= 0;
    call {:si_unique_call 3161} out_lowerDevice := IoAttachDeviceToDeviceStack(0, out_newPdo);
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    havoc out_deviceExtension;
    assume {:nonnull} out_deviceExtension != 0;
    assume out_deviceExtension > 0;
    assume {:nonnull} out_deviceExtension != 0;
    assume out_deviceExtension > 0;
    assume {:nonnull} out_deviceExtension != 0;
    assume out_deviceExtension > 0;
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    call {:si_unique_call 3162} MmLockPagableSectionByHandle(0);
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    havoc vslice_dummy_var_1928;
    call {:si_unique_call 3163} out_status_29 := SerialFinishStartDevice(vslice_dummy_var_1928, in_resourceList, in_trResourceList, in_userData);
    goto anon141_Else;

  anon141_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3160} MmUnlockPagableImageSection(0);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} out_status_29 >= 0;
    call {:si_unique_call 3155} out_vslice_dummy_var_507 := corral_nondet();
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_832;
    call {:si_unique_call 3156} out_vslice_dummy_var_508 := corral_nondet();
    call {:si_unique_call 3157} out_status_29 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    assume {:nonnull} in_legacyKeys != 0;
    assume in_legacyKeys > 0;
    havoc out_Tmp_841;
    call {:si_unique_call 3158} sdv_RtlZeroMemory(0, out_Tmp_841);
    assume {:nonnull} in_legacyKeys != 0;
    assume in_legacyKeys > 0;
    call {:si_unique_call 3159} out_vslice_dummy_var_509 := corral_nondet();
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} out_status_29 >= 0;
    goto L460;

  L460:
    out_i_1 := out_i_1 + 1;
    assume {:nonnull} in_countSoFar_1 != 0;
    assume in_countSoFar_1 > 0;
    goto L460_dummy;

  L460_dummy:
    goto L_BAF_0;

  anon117_Then:
    assume {:partition} 0 > out_status_29;
    assume {:nonnull} in_Tmp_852 != 0;
    assume in_Tmp_852 > 0;
    assume {:nonnull} in_Tmp_852 != 0;
    assume in_Tmp_852 > 0;
    assume {:nonnull} in_Tmp_852 != 0;
    assume in_Tmp_852 > 0;
    assume {:nonnull} in_Tmp_852 != 0;
    assume in_Tmp_852 > 0;
    assume {:nonnull} in_Tmp_852 != 0;
    assume in_Tmp_852 > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc vslice_dummy_var_1927;
    call {:si_unique_call 3153} SerialLogError(in_DriverObject_3, 0, vslice_dummy_var_1927, in_Tmp_852, 0, 0, 0, 88, 0, -1073348567, 0, 0, 0, 0);
    out_Tmp_797 := strConst__li2bpl243;
    call {:si_unique_call 3154} out_vslice_dummy_var_510 := SerialDbgPrintEx(14, out_Tmp_797);
    goto L460;

  anon116_Then:
    assume {:partition} 0 > out_status_29;
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    havoc vslice_dummy_var_1932;
    call {:si_unique_call 3172} out_vslice_dummy_var_496 := SerialRemoveDevObj(vslice_dummy_var_1932);
    out_i_1 := out_i_1 + 1;
    goto anon116_Then_dummy;

  anon116_Then_dummy:
    goto L_BAF_0;

  anon115_Then:
    assume {:partition} 0 > out_status_29;
    out_i_1 := out_i_1 + 1;
    goto anon115_Then_dummy;

  anon115_Then_dummy:
    goto L_BAF_0;

  anon114_Then:
    assume {:partition} 0 > out_status_29;
    out_i_1 := out_i_1 + 1;
    goto anon114_Then_dummy;

  anon114_Then_dummy:
    goto L_BAF_0;

  anon113_Then:
    out_Tmp_809 := 0;
    goto L403;

  anon111_Then:
    assume {:partition} 0 > out_status_29;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} out_status_29 == -1073741670;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_793;
    out_Tmp_850 := out_Tmp_793;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_804;
    assume {:nonnull} in_Tmp_792 != 0;
    assume in_Tmp_792 > 0;
    assume {:nonnull} in_Tmp_792 != 0;
    assume in_Tmp_792 > 0;
    assume {:nonnull} in_Tmp_792 != 0;
    assume in_Tmp_792 > 0;
    assume {:nonnull} in_Tmp_792 != 0;
    assume in_Tmp_792 > 0;
    assume {:nonnull} in_Tmp_792 != 0;
    assume in_Tmp_792 > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc vslice_dummy_var_1933;
    call {:si_unique_call 3174} SerialLogError(in_DriverObject_3, 0, vslice_dummy_var_1933, in_Tmp_792, 0, 0, 0, 89, out_status_29, -1073348564, out_Tmp_804, out_Tmp_850, 0, 0);
    goto L479;

  L479:
    out_Tmp_795 := strConst__li2bpl244;
    call {:si_unique_call 3173} out_vslice_dummy_var_511 := SerialDbgPrintEx(14, out_Tmp_795);
    out_i_1 := out_i_1 + 1;
    goto L479_dummy;

  L479_dummy:
    goto L_BAF_0;

  anon112_Then:
    assume {:partition} out_status_29 != -1073741670;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_845;
    out_Tmp_818 := out_Tmp_845;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_791;
    assume {:nonnull} in_Tmp_820 != 0;
    assume in_Tmp_820 > 0;
    assume {:nonnull} in_Tmp_820 != 0;
    assume in_Tmp_820 > 0;
    assume {:nonnull} in_Tmp_820 != 0;
    assume in_Tmp_820 > 0;
    assume {:nonnull} in_Tmp_820 != 0;
    assume in_Tmp_820 > 0;
    assume {:nonnull} in_Tmp_820 != 0;
    assume in_Tmp_820 > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc vslice_dummy_var_1934;
    call {:si_unique_call 3175} SerialLogError(in_DriverObject_3, 0, vslice_dummy_var_1934, in_Tmp_820, 0, 0, 0, 87, out_status_29, -1073348568, out_Tmp_791, out_Tmp_818, 0, 0);
    goto L479;

  anon110_Then:
    assume {:partition} 0 > out_status_29;
    out_i_1 := out_i_1 + 1;
    goto anon110_Then_dummy;

  anon110_Then_dummy:
    goto L_BAF_0;

  anon109_Then:
    assume {:partition} 0 > out_status_29;
    out_i_1 := out_i_1 + 1;
    goto anon109_Then_dummy;

  anon109_Then_dummy:
    goto L_BAF_0;

  anon108_Then:
    assume {:partition} 0 > out_status_29;
    out_i_1 := out_i_1 + 1;
    goto anon108_Then_dummy;

  anon108_Then_dummy:
    goto L_BAF_0;

  anon107_Then:
    assume {:partition} out_sdv_723 == 0;
    out_i_1 := out_i_1 + 1;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    goto L_BAF_0;

  anon106_Then:
    goto L369;

  anon103_Then:
    assume {:partition} 0 > out_status_29;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_817;
    out_Tmp_808 := out_Tmp_817;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_814;
    assume {:nonnull} in_Tmp_806 != 0;
    assume in_Tmp_806 > 0;
    assume {:nonnull} in_Tmp_806 != 0;
    assume in_Tmp_806 > 0;
    assume {:nonnull} in_Tmp_806 != 0;
    assume in_Tmp_806 > 0;
    assume {:nonnull} in_Tmp_806 != 0;
    assume in_Tmp_806 > 0;
    assume {:nonnull} in_Tmp_806 != 0;
    assume in_Tmp_806 > 0;
    assume {:nonnull} in_Tmp_829 != 0;
    assume in_Tmp_829 > 0;
    assume {:nonnull} in_Tmp_829 != 0;
    assume in_Tmp_829 > 0;
    assume {:nonnull} in_Tmp_829 != 0;
    assume in_Tmp_829 > 0;
    assume {:nonnull} in_Tmp_829 != 0;
    assume in_Tmp_829 > 0;
    assume {:nonnull} in_Tmp_829 != 0;
    assume in_Tmp_829 > 0;
    call {:si_unique_call 3176} SerialLogError(in_DriverObject_3, 0, in_Tmp_829, in_Tmp_806, 0, 0, 0, 86, 0, -1073348583, out_Tmp_814, out_Tmp_808, 0, 0);
    assume {:nonnull} in_parameters != 0;
    assume in_parameters > 0;
    havoc out_Tmp_840;
    out_Tmp_813 := strConst__li2bpl264;
    call {:si_unique_call 3177} out_vslice_dummy_var_512 := SerialDbgPrintEx(14, out_Tmp_813);
    out_i_1 := out_i_1 + 1;
    goto anon103_Then_dummy;

  anon103_Then_dummy:
    goto L_BAF_0;

  anon102_Then:
    assume {:partition} 0 > out_status_29;
    assume {:nonnull} in_Tmp_853 != 0;
    assume in_Tmp_853 > 0;
    assume {:nonnull} in_Tmp_853 != 0;
    assume in_Tmp_853 > 0;
    assume {:nonnull} in_Tmp_853 != 0;
    assume in_Tmp_853 > 0;
    assume {:nonnull} in_Tmp_853 != 0;
    assume in_Tmp_853 > 0;
    assume {:nonnull} in_Tmp_853 != 0;
    assume in_Tmp_853 > 0;
    assume {:nonnull} in_Tmp_835 != 0;
    assume in_Tmp_835 > 0;
    assume {:nonnull} in_Tmp_835 != 0;
    assume in_Tmp_835 > 0;
    assume {:nonnull} in_Tmp_835 != 0;
    assume in_Tmp_835 > 0;
    assume {:nonnull} in_Tmp_835 != 0;
    assume in_Tmp_835 > 0;
    assume {:nonnull} in_Tmp_835 != 0;
    assume in_Tmp_835 > 0;
    call {:si_unique_call 3178} SerialLogError(in_DriverObject_3, 0, in_Tmp_835, in_Tmp_853, 0, 0, 0, 85, 0, -1073348589, 0, 0, 0, 0);
    out_Tmp_811 := strConst__li2bpl245;
    call {:si_unique_call 3179} out_vslice_dummy_var_513 := SerialDbgPrintEx(14, out_Tmp_811);
    out_i_1 := out_i_1 + 1;
    goto anon102_Then_dummy;

  anon102_Then_dummy:
    goto L_BAF_0;

  anon138_Then:
    assume !(Mem_T.PVOID[in_parametersKey] == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L643;
}



procedure {:LoopProcedure} SerialEnumerateLegacy_loop_L314(in_Tmp_791: int, in_Tmp_792: int, in_Tmp_793: int, in_Tmp_794: int, in_Tmp_795: int, in_countOfPartials_1: int, in_Tmp_797: int, in_Tmp_800: int, in_Tmp_801: int, in_Tmp_804: int, in_Tmp_805: int, in_Tmp_806: int, in_Tmp_808: int, in_trResourceList: int, in_Tmp_809: int, in_Tmp_811: int, in_Tmp_812: int, in_lowerDevice: int, in_Tmp_813: int, in_Tmp_814: int, in_Tmp_817: int, in_actuallyReturned: int, in_Tmp_818: int, in_PnPID: int, in_Tmp_820: int, in_deviceExtension: int, in_countSoFar_1: int, in_i_1: int, in_defaultInterfaceType_1: int, in_newDevObj: int, in_userSubKey: int, in_Tmp_828: int, in_Tmp_829: int, in_Tmp_832: int, in_pRequiredList: int, in_Tmp_834: int, in_Tmp_835: int, in_Tmp_840: int, in_Tmp_841: int, in_resourceList: int, in_Tmp_845: int, in_legacyKeys: int, in_legacyDiscovered: int, in_Tmp_850: int, in_parameters: int, in_parametersKey: int, in_Tmp_852: int, in_status_29: int, in_Tmp_853: int, in_Tmp_855: int, in_sdv_723: int, in_parametersPath: int, in_brokenStatus: int, in_newPdo: int, in_userData: int, in_DriverObject_3: int, in_vslice_dummy_var_496: int, in_vslice_dummy_var_506: int, in_vslice_dummy_var_507: int, in_vslice_dummy_var_508: int, in_vslice_dummy_var_509: int, in_vslice_dummy_var_510: int, in_vslice_dummy_var_511: int, in_vslice_dummy_var_512: int, in_vslice_dummy_var_513: int) returns (out_Tmp_791: int, out_Tmp_793: int, out_Tmp_795: int, out_Tmp_797: int, out_Tmp_800: int, out_Tmp_801: int, out_Tmp_804: int, out_Tmp_805: int, out_Tmp_808: int, out_Tmp_809: int, out_Tmp_811: int, out_Tmp_812: int, out_lowerDevice: int, out_Tmp_813: int, out_Tmp_814: int, out_Tmp_817: int, out_actuallyReturned: int, out_Tmp_818: int, out_deviceExtension: int, out_i_1: int, out_Tmp_828: int, out_Tmp_832: int, out_Tmp_834: int, out_Tmp_840: int, out_Tmp_841: int, out_Tmp_845: int, out_Tmp_850: int, out_status_29: int, out_sdv_723: int, out_newPdo: int, out_vslice_dummy_var_496: int, out_vslice_dummy_var_506: int, out_vslice_dummy_var_507: int, out_vslice_dummy_var_508: int, out_vslice_dummy_var_509: int, out_vslice_dummy_var_510: int, out_vslice_dummy_var_511: int, out_vslice_dummy_var_512: int, out_vslice_dummy_var_513: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, yogi_error, Mem_T.CancelRoutine__IRP, Mem_T.PVOID;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_Tmp_809 == 1 || out_Tmp_809 == 0 || out_Tmp_809 == in_Tmp_809;
  free ensures {:va_keep} out_lowerDevice == 0 || out_lowerDevice == in_lowerDevice;
  free ensures {:va_keep} out_Tmp_834 == 1 || out_Tmp_834 == 0 || out_Tmp_834 == in_Tmp_834;
  free ensures {:va_keep} out_sdv_723 == 0 || out_sdv_723 == 1 || out_sdv_723 == in_sdv_723;
  free ensures {:va_keep} out_newPdo == 0 || out_newPdo == in_newPdo;
  free ensures {:va_keep} out_vslice_dummy_var_496 == 0 || out_vslice_dummy_var_496 == in_vslice_dummy_var_496;
  free ensures {:va_keep} out_vslice_dummy_var_506 == 0 || out_vslice_dummy_var_506 == in_vslice_dummy_var_506;
  free ensures {:va_keep} out_vslice_dummy_var_510 == 0 || out_vslice_dummy_var_510 == in_vslice_dummy_var_510;
  free ensures {:va_keep} out_vslice_dummy_var_511 == 0 || out_vslice_dummy_var_511 == in_vslice_dummy_var_511;
  free ensures {:va_keep} out_vslice_dummy_var_512 == 0 || out_vslice_dummy_var_512 == in_vslice_dummy_var_512;
  free ensures {:va_keep} out_vslice_dummy_var_513 == 0 || out_vslice_dummy_var_513 == in_vslice_dummy_var_513;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialEnumerateLegacy_loop_L64(in_interfaceType_1: int, in_foundOne_1: int, in_vslice_dummy_var_493: int) returns (out_interfaceType_1: int, out_foundOne_1: int, out_vslice_dummy_var_493: int)
{

  entry:
    out_interfaceType_1, out_foundOne_1, out_vslice_dummy_var_493 := in_interfaceType_1, in_foundOne_1, in_vslice_dummy_var_493;
    goto L64, exit;

  exit:
    return;

  L64:
    assume {:CounterLoop 18} {:Counter "interfaceType_1"} true;
    goto anon95_Else;

  anon95_Else:
    assume {:partition} 18 > out_interfaceType_1;
    out_foundOne_1 := 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} out_interfaceType_1 != 0;
    call {:si_unique_call 3181} out_vslice_dummy_var_493 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon96_Then;

  anon96_Then:
    assume {:partition} out_foundOne_1 == 0;
    goto L71;

  L71:
    out_interfaceType_1 := out_interfaceType_1 + 1;
    goto L71_dummy;

  L71_dummy:
    havoc out_interfaceType_1;
    return;

  anon127_Then:
    assume {:partition} out_interfaceType_1 == 0;
    goto L71;
}



procedure {:LoopProcedure} SerialEnumerateLegacy_loop_L64(in_interfaceType_1: int, in_foundOne_1: int, in_vslice_dummy_var_493: int) returns (out_interfaceType_1: int, out_foundOne_1: int, out_vslice_dummy_var_493: int);
  free ensures {:va_keep} out_foundOne_1 == 0 || out_foundOne_1 == in_foundOne_1;
  free ensures {:va_keep} out_vslice_dummy_var_493 == 0 || out_vslice_dummy_var_493 == -1073741823 || out_vslice_dummy_var_493 == in_vslice_dummy_var_493;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialReleaseResources_loop_L42(in_i_2: int, in_Tmp_1054: int, in_Tmp_1056: int, in_Tmp_1060: int, in_PDevExt_22: int) returns (out_i_2: int, out_Tmp_1054: int, out_Tmp_1056: int, out_Tmp_1060: int)
{

  entry:
    out_i_2, out_Tmp_1054, out_Tmp_1056, out_Tmp_1060 := in_i_2, in_Tmp_1054, in_Tmp_1056, in_Tmp_1060;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:CounterLoop 16} {:Counter "i_2"} true;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} 16 > out_i_2;
    out_Tmp_1056 := out_i_2;
    assume {:nonnull} in_PDevExt_22 != 0;
    assume in_PDevExt_22 > 0;
    havoc out_Tmp_1060;
    assume {:nonnull} out_Tmp_1060 != 0;
    assume out_Tmp_1060 > 0;
    havoc out_Tmp_1054;
    assume {:nonnull} out_Tmp_1054 != 0;
    assume out_Tmp_1054 > 0;
    goto anon66_Else;

  anon66_Else:
    out_i_2 := out_i_2 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    havoc out_i_2;
    return;
}



procedure {:LoopProcedure} SerialReleaseResources_loop_L42(in_i_2: int, in_Tmp_1054: int, in_Tmp_1056: int, in_Tmp_1060: int, in_PDevExt_22: int) returns (out_i_2: int, out_Tmp_1054: int, out_Tmp_1056: int, out_Tmp_1060: int);
  free ensures {:va_keep} out_Tmp_1056 == in_i_2 || out_Tmp_1056 == in_Tmp_1056;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialFindInitController_loop_L182(in_Tmp_1070: int, in_pCurDevObj: int, in_sdv_861: int, in_pExtension: int, in_oldIrql_11: int, in_sdv_873: int, in_PConfig_1: int) returns (out_Tmp_1070: int, out_pCurDevObj: int, out_sdv_861: int, out_pExtension: int, out_oldIrql_11: int, out_sdv_873: int)
{
  var vslice_dummy_var_1935: int;
  var vslice_dummy_var_1936: int;
  var vslice_dummy_var_1937: int;
  var vslice_dummy_var_1938: int;

  entry:
    out_Tmp_1070, out_pCurDevObj, out_sdv_861, out_pExtension, out_oldIrql_11, out_sdv_873 := in_Tmp_1070, in_pCurDevObj, in_sdv_861, in_pExtension, in_oldIrql_11, in_sdv_873;
    goto L182, exit;

  exit:
    return;

  L182:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1935;
    havoc vslice_dummy_var_1936;
    havoc vslice_dummy_var_1937;
    havoc vslice_dummy_var_1938;
    call {:si_unique_call 3186} out_sdv_873 := SerialMemCompare(vslice_dummy_var_1935, vslice_dummy_var_1936, vslice_dummy_var_1937, vslice_dummy_var_1938);
    goto anon101_Then;

  anon101_Then:
    assume {:partition} out_sdv_873 != 0;
    goto L183;

  L183:
    call {:si_unique_call 3184} out_Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1070 != 0;
    assume out_Tmp_1070 > 0;
    call {:si_unique_call 3185} sdv_KeAcquireSpinLock(0, out_Tmp_1070);
    assume {:nonnull} out_Tmp_1070 != 0;
    assume out_Tmp_1070 > 0;
    havoc out_oldIrql_11;
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 3183} out_sdv_861 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_861;
    goto L216;

  L216:
    call {:si_unique_call 3182} sdv_KeReleaseSpinLock(0, out_oldIrql_11);
    goto anon104_Else;

  anon104_Else:
    goto anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    call {:si_unique_call 3187} {:si_old_unique_call 1} out_Tmp_1070, out_pCurDevObj, out_sdv_861, out_pExtension, out_oldIrql_11, out_sdv_873 := SerialFindInitController_loop_L182(out_Tmp_1070, out_pCurDevObj, out_sdv_861, out_pExtension, out_oldIrql_11, out_sdv_873, in_PConfig_1);
    return;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L182(in_Tmp_1070: int, in_pCurDevObj: int, in_sdv_861: int, in_pExtension: int, in_oldIrql_11: int, in_sdv_873: int, in_PConfig_1: int) returns (out_Tmp_1070: int, out_pCurDevObj: int, out_sdv_861: int, out_pExtension: int, out_oldIrql_11: int, out_sdv_873: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_873 == 0 || out_sdv_873 == 2 || out_sdv_873 == 1 || out_sdv_873 == in_sdv_873;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialFindInitController_loop_L246(in_Tmp_1070: int, in_pCurDevObj: int, in_sdv_850: int, in_pExtension: int, in_oldIrql_11: int, in_PConfig_1: int) returns (out_Tmp_1070: int, out_pCurDevObj: int, out_sdv_850: int, out_pExtension: int, out_oldIrql_11: int)
{

  entry:
    out_Tmp_1070, out_pCurDevObj, out_sdv_850, out_pExtension, out_oldIrql_11 := in_Tmp_1070, in_pCurDevObj, in_sdv_850, in_pExtension, in_oldIrql_11;
    goto L246, exit;

  exit:
    return;

  L246:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon110_Then;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 3190} out_Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1070 != 0;
    assume out_Tmp_1070 > 0;
    call {:si_unique_call 3191} sdv_KeAcquireSpinLock(0, out_Tmp_1070);
    assume {:nonnull} out_Tmp_1070 != 0;
    assume out_Tmp_1070 > 0;
    havoc out_oldIrql_11;
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 3189} out_sdv_850 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_850;
    goto L264;

  L264:
    call {:si_unique_call 3188} sdv_KeReleaseSpinLock(0, out_oldIrql_11);
    goto anon111_Else;

  anon111_Else:
    goto anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    call {:si_unique_call 3192} {:si_old_unique_call 1} out_Tmp_1070, out_pCurDevObj, out_sdv_850, out_pExtension, out_oldIrql_11 := SerialFindInitController_loop_L246(out_Tmp_1070, out_pCurDevObj, out_sdv_850, out_pExtension, out_oldIrql_11, in_PConfig_1);
    return;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L246(in_Tmp_1070: int, in_pCurDevObj: int, in_sdv_850: int, in_pExtension: int, in_oldIrql_11: int, in_PConfig_1: int) returns (out_Tmp_1070: int, out_pCurDevObj: int, out_sdv_850: int, out_pExtension: int, out_oldIrql_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialFindInitController_loop_L78(in_sdv_843: int, in_sdv_844: int, in_sdv_849: int, in_Tmp_1070: int, in_pCurDevObj: int, in_sdv_851: int, in_sdv_853: int, in_sdv_856: int, in_Tmp_1077: int, in_pExtension: int, in_oldIrql_11: int, in_Tmp_1083: int, in_Tmp_1084: int, in_sdv_867: int, in_sdv_870: int, in_Tmp_1088: int, in_PConfig_1: int, in_vslice_dummy_var_605: int) returns (out_sdv_843: int, out_sdv_844: int, out_sdv_849: int, out_Tmp_1070: int, out_pCurDevObj: int, out_sdv_851: int, out_sdv_853: int, out_sdv_856: int, out_pExtension: int, out_oldIrql_11: int, out_Tmp_1083: int, out_sdv_867: int, out_sdv_870: int, out_vslice_dummy_var_605: int)
{
  var vslice_dummy_var_1939: int;
  var vslice_dummy_var_1940: int;
  var vslice_dummy_var_1941: int;
  var vslice_dummy_var_1942: int;
  var vslice_dummy_var_1943: int;
  var vslice_dummy_var_1944: int;
  var vslice_dummy_var_1945: int;
  var vslice_dummy_var_1946: int;
  var vslice_dummy_var_1947: int;
  var vslice_dummy_var_1948: int;
  var vslice_dummy_var_1949: int;
  var vslice_dummy_var_1950: int;
  var vslice_dummy_var_1951: int;
  var vslice_dummy_var_1952: int;
  var vslice_dummy_var_1953: int;
  var vslice_dummy_var_1954: int;
  var vslice_dummy_var_1955: int;
  var vslice_dummy_var_1956: int;
  var vslice_dummy_var_1957: int;
  var vslice_dummy_var_1958: int;
  var vslice_dummy_var_1959: int;
  var vslice_dummy_var_1960: int;

  entry:
    out_sdv_843, out_sdv_844, out_sdv_849, out_Tmp_1070, out_pCurDevObj, out_sdv_851, out_sdv_853, out_sdv_856, out_pExtension, out_oldIrql_11, out_Tmp_1083, out_sdv_867, out_sdv_870, out_vslice_dummy_var_605 := in_sdv_843, in_sdv_844, in_sdv_849, in_Tmp_1070, in_pCurDevObj, in_sdv_851, in_sdv_853, in_sdv_856, in_pExtension, in_oldIrql_11, in_Tmp_1083, in_sdv_867, in_sdv_870, in_vslice_dummy_var_605;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon82_Else;

  anon82_Else:
    goto anon83_Else;

  anon83_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    out_Tmp_1083 := strConst__li2bpl309;
    call {:si_unique_call 3199} out_vslice_dummy_var_605 := SerialDbgPrintEx(4, out_Tmp_1083);
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1943;
    havoc vslice_dummy_var_1944;
    havoc vslice_dummy_var_1945;
    havoc vslice_dummy_var_1946;
    call {:si_unique_call 3200} out_sdv_844 := SerialMemCompare(vslice_dummy_var_1943, vslice_dummy_var_1944, vslice_dummy_var_1945, vslice_dummy_var_1946);
    goto anon87_Then;

  anon87_Then:
    assume {:partition} out_sdv_844 == 2;
    assume {:nonnull} in_Tmp_1077 != 0;
    assume in_Tmp_1077 > 0;
    assume {:nonnull} in_Tmp_1077 != 0;
    assume in_Tmp_1077 > 0;
    assume {:nonnull} in_Tmp_1077 != 0;
    assume in_Tmp_1077 > 0;
    assume {:nonnull} in_Tmp_1077 != 0;
    assume in_Tmp_1077 > 0;
    assume {:nonnull} in_Tmp_1077 != 0;
    assume in_Tmp_1077 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_1941;
    havoc vslice_dummy_var_1942;
    call {:si_unique_call 3198} out_sdv_867 := SerialMemCompare(vslice_dummy_var_1941, vslice_dummy_var_1942, in_Tmp_1077, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} out_sdv_867 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1949;
    havoc vslice_dummy_var_1950;
    havoc vslice_dummy_var_1951;
    havoc vslice_dummy_var_1952;
    call {:si_unique_call 3202} out_sdv_870 := SerialMemCompare(vslice_dummy_var_1949, vslice_dummy_var_1950, vslice_dummy_var_1951, vslice_dummy_var_1952);
    goto anon89_Then;

  anon89_Then:
    assume {:partition} out_sdv_870 == 2;
    assume {:nonnull} in_Tmp_1084 != 0;
    assume in_Tmp_1084 > 0;
    assume {:nonnull} in_Tmp_1084 != 0;
    assume in_Tmp_1084 > 0;
    assume {:nonnull} in_Tmp_1084 != 0;
    assume in_Tmp_1084 > 0;
    assume {:nonnull} in_Tmp_1084 != 0;
    assume in_Tmp_1084 > 0;
    assume {:nonnull} in_Tmp_1084 != 0;
    assume in_Tmp_1084 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_1947;
    havoc vslice_dummy_var_1948;
    call {:si_unique_call 3201} out_sdv_843 := SerialMemCompare(vslice_dummy_var_1947, vslice_dummy_var_1948, in_Tmp_1084, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_sdv_843 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1953;
    havoc vslice_dummy_var_1954;
    havoc vslice_dummy_var_1955;
    havoc vslice_dummy_var_1956;
    call {:si_unique_call 3203} out_sdv_853 := SerialMemCompare(vslice_dummy_var_1953, vslice_dummy_var_1954, vslice_dummy_var_1955, vslice_dummy_var_1956);
    goto anon91_Then;

  anon91_Then:
    assume {:partition} out_sdv_853 != 1;
    goto L105;

  L105:
    assume {:nonnull} in_Tmp_1088 != 0;
    assume in_Tmp_1088 > 0;
    assume {:nonnull} in_Tmp_1088 != 0;
    assume in_Tmp_1088 > 0;
    assume {:nonnull} in_Tmp_1088 != 0;
    assume in_Tmp_1088 > 0;
    assume {:nonnull} in_Tmp_1088 != 0;
    assume in_Tmp_1088 > 0;
    assume {:nonnull} in_Tmp_1088 != 0;
    assume in_Tmp_1088 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1939;
    havoc vslice_dummy_var_1940;
    call {:si_unique_call 3197} out_sdv_856 := SerialMemCompare(vslice_dummy_var_1939, vslice_dummy_var_1940, in_Tmp_1088, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} out_sdv_856 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1957;
    havoc vslice_dummy_var_1958;
    havoc vslice_dummy_var_1959;
    havoc vslice_dummy_var_1960;
    call {:si_unique_call 3204} out_sdv_849 := SerialMemCompare(vslice_dummy_var_1957, vslice_dummy_var_1958, vslice_dummy_var_1959, vslice_dummy_var_1960);
    goto anon93_Then;

  anon93_Then:
    assume {:partition} out_sdv_849 != 1;
    goto L84;

  L84:
    call {:si_unique_call 3194} out_Tmp_1070 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1070 != 0;
    assume out_Tmp_1070 > 0;
    call {:si_unique_call 3195} sdv_KeAcquireSpinLock(0, out_Tmp_1070);
    assume {:nonnull} out_Tmp_1070 != 0;
    assume out_Tmp_1070 > 0;
    havoc out_oldIrql_11;
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    call {:si_unique_call 3196} sdv_KeReleaseSpinLock(0, out_oldIrql_11);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 3193} out_sdv_851 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_851;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 3205} {:si_old_unique_call 1} out_sdv_843, out_sdv_844, out_sdv_849, out_Tmp_1070, out_pCurDevObj, out_sdv_851, out_sdv_853, out_sdv_856, out_pExtension, out_oldIrql_11, out_Tmp_1083, out_sdv_867, out_sdv_870, out_vslice_dummy_var_605 := SerialFindInitController_loop_L78(out_sdv_843, out_sdv_844, out_sdv_849, out_Tmp_1070, out_pCurDevObj, out_sdv_851, out_sdv_853, out_sdv_856, in_Tmp_1077, out_pExtension, out_oldIrql_11, out_Tmp_1083, in_Tmp_1084, out_sdv_867, out_sdv_870, in_Tmp_1088, in_PConfig_1, out_vslice_dummy_var_605);
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    goto L_BAF_1;

  anon92_Then:
    assume {:partition} out_sdv_856 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} out_sdv_843 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} out_sdv_867 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L78(in_sdv_843: int, in_sdv_844: int, in_sdv_849: int, in_Tmp_1070: int, in_pCurDevObj: int, in_sdv_851: int, in_sdv_853: int, in_sdv_856: int, in_Tmp_1077: int, in_pExtension: int, in_oldIrql_11: int, in_Tmp_1083: int, in_Tmp_1084: int, in_sdv_867: int, in_sdv_870: int, in_Tmp_1088: int, in_PConfig_1: int, in_vslice_dummy_var_605: int) returns (out_sdv_843: int, out_sdv_844: int, out_sdv_849: int, out_Tmp_1070: int, out_pCurDevObj: int, out_sdv_851: int, out_sdv_853: int, out_sdv_856: int, out_pExtension: int, out_oldIrql_11: int, out_Tmp_1083: int, out_sdv_867: int, out_sdv_870: int, out_vslice_dummy_var_605: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_843 == 0 || out_sdv_843 == 2 || out_sdv_843 == 1 || out_sdv_843 == in_sdv_843;
  free ensures {:va_keep} out_sdv_844 == 0 || out_sdv_844 == 2 || out_sdv_844 == 1 || out_sdv_844 == in_sdv_844;
  free ensures {:va_keep} out_sdv_849 == 0 || out_sdv_849 == 2 || out_sdv_849 == 1 || out_sdv_849 == in_sdv_849;
  free ensures {:va_keep} out_sdv_853 == 0 || out_sdv_853 == 2 || out_sdv_853 == 1 || out_sdv_853 == in_sdv_853;
  free ensures {:va_keep} out_sdv_856 == 0 || out_sdv_856 == 2 || out_sdv_856 == 1 || out_sdv_856 == in_sdv_856;
  free ensures {:va_keep} out_sdv_867 == 0 || out_sdv_867 == 2 || out_sdv_867 == 1 || out_sdv_867 == in_sdv_867;
  free ensures {:va_keep} out_sdv_870 == 0 || out_sdv_870 == 2 || out_sdv_870 == 1 || out_sdv_870 == in_sdv_870;
  free ensures {:va_keep} out_vslice_dummy_var_605 == 0 || out_vslice_dummy_var_605 == in_vslice_dummy_var_605;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialStartWrite#0_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_124: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_126: int, in_Tmp_151: int, in_sdv_128: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_124: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_126: int, out_Tmp_151: int, out_sdv_128: int, out_Tmp_152: int)
{
  var vslice_dummy_var_1961: int;
  var vslice_dummy_var_1962: int;
  var vslice_dummy_var_1963: int;
  var vslice_dummy_var_1964: int;

  entry:
    out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_124, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_126, out_Tmp_151, out_sdv_128, out_Tmp_152 := in_Tmp_146, in_Tmp_147, in_s_p_e_c_i_a_l_7, in_FirstStatus_1, in_SetFirstStatus_1, in_UseATimer, in_IrpSp_1, in_OldIrql_7, in_sdv_124, in_Tmp_150, in_s_p_e_c_i_a_l_9, in_sdv_126, in_Tmp_151, in_sdv_128, in_Tmp_152;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 3206} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    call {:si_unique_call 3207} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    havoc out_OldIrql_7;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1963;
    call {:si_unique_call 3220} out_sdv_124 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1963);
    assume {:nonnull} out_sdv_124 != 0;
    assume out_sdv_124 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_124)))] != 0;
    out_s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1962;
    call {:si_unique_call 3216} out_sdv_126 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1962);
    assume {:nonnull} out_sdv_126 != 0;
    assume out_sdv_126 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_126)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_152;
    assume {:nonnull} out_Tmp_152 != 0;
    assume out_Tmp_152 > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 3217} SerialTryToCompleteCurrent#0(in_Extension_9, li2bplFunctionConstant570, out_OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, 16);
    goto L40;

  L40:
    out_UseATimer := 0;
    call {:si_unique_call 3213} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    call {:si_unique_call 3214} sdv_KeAcquireSpinLock(0, out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    havoc out_OldIrql_7;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    call {:si_unique_call 3215} sdv_KeReleaseSpinLock(0, out_OldIrql_7);
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1964;
    call {:si_unique_call 3221} out_IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1964);
    out_UseATimer := 1;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    havoc out_Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_TotalTime != 0;
    assume in_TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1961;
    call {:si_unique_call 3210} out_sdv_128 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1961);
    assume {:nonnull} out_sdv_128 != 0;
    assume out_sdv_128 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_128)))] := 0;
    call {:si_unique_call 3211} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    call {:si_unique_call 3212} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    havoc out_OldIrql_7;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_146;
    assume {:nonnull} out_Tmp_146 != 0;
    assume out_Tmp_146 > 0;
    goto anon28_Else;

  anon28_Else:
    call {:si_unique_call 3209} IoReleaseCancelSpinLock(out_OldIrql_7);
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_150;
    assume {:nonnull} out_Tmp_150 != 0;
    assume out_Tmp_150 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 3208} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_9), in_NewIrp_2, 1, in_Extension_9);
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon26_Then;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    call {:si_unique_call 3222} {:si_old_unique_call 1} out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_124, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_126, out_Tmp_151, out_sdv_128, out_Tmp_152 := SerialStartWrite#0_loop_L14(out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, in_TotalTime, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_124, in_NewIrp_2, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_126, out_Tmp_151, out_sdv_128, out_Tmp_152, in_Timeouts, in_Extension_9);
    return;

  anon29_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L75;

  anon27_Then:
    out_Tmp_151 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon22_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_124)))] == 0;
    call {:si_unique_call 3218} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;

  anon21_Then:
    call {:si_unique_call 3219} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#0_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_124: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_126: int, in_Tmp_151: int, in_sdv_128: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_124: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_126: int, out_Tmp_151: int, out_sdv_128: int, out_Tmp_152: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_UseATimer == 0 || out_UseATimer == 1 || out_UseATimer == in_UseATimer;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_9 == 16 || out_s_p_e_c_i_a_l_9 == in_s_p_e_c_i_a_l_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation SerialStartWrite#1_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_124: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_126: int, in_Tmp_151: int, in_sdv_128: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_124: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_126: int, out_Tmp_151: int, out_sdv_128: int, out_Tmp_152: int)
{
  var vslice_dummy_var_1965: int;
  var vslice_dummy_var_1966: int;
  var vslice_dummy_var_1967: int;
  var vslice_dummy_var_1968: int;

  entry:
    out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_124, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_126, out_Tmp_151, out_sdv_128, out_Tmp_152 := in_Tmp_146, in_Tmp_147, in_s_p_e_c_i_a_l_7, in_FirstStatus_1, in_SetFirstStatus_1, in_UseATimer, in_IrpSp_1, in_OldIrql_7, in_sdv_124, in_Tmp_150, in_s_p_e_c_i_a_l_9, in_sdv_126, in_Tmp_151, in_sdv_128, in_Tmp_152;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 3223} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    call {:si_unique_call 3224} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    havoc out_OldIrql_7;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1967;
    call {:si_unique_call 3237} out_sdv_124 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1967);
    assume {:nonnull} out_sdv_124 != 0;
    assume out_sdv_124 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_124)))] != 0;
    out_s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1966;
    call {:si_unique_call 3233} out_sdv_126 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1966);
    assume {:nonnull} out_sdv_126 != 0;
    assume out_sdv_126 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_126)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_152;
    assume {:nonnull} out_Tmp_152 != 0;
    assume out_Tmp_152 > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 3234} SerialTryToCompleteCurrent#1(in_Extension_9, li2bplFunctionConstant570, out_OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, 16);
    goto L40;

  L40:
    out_UseATimer := 0;
    call {:si_unique_call 3230} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    call {:si_unique_call 3231} sdv_KeAcquireSpinLock(0, out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    havoc out_OldIrql_7;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    call {:si_unique_call 3232} sdv_KeReleaseSpinLock(0, out_OldIrql_7);
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1968;
    call {:si_unique_call 3238} out_IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1968);
    out_UseATimer := 1;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    havoc out_Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_TotalTime != 0;
    assume in_TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_1965;
    call {:si_unique_call 3227} out_sdv_128 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1965);
    assume {:nonnull} out_sdv_128 != 0;
    assume out_sdv_128 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_128)))] := 0;
    call {:si_unique_call 3228} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    call {:si_unique_call 3229} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    havoc out_OldIrql_7;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_146;
    assume {:nonnull} out_Tmp_146 != 0;
    assume out_Tmp_146 > 0;
    goto anon28_Else;

  anon28_Else:
    call {:si_unique_call 3226} IoReleaseCancelSpinLock(out_OldIrql_7);
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_150;
    assume {:nonnull} out_Tmp_150 != 0;
    assume out_Tmp_150 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 3225} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_9), in_NewIrp_2, 1, in_Extension_9);
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon26_Then;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    call {:si_unique_call 3239} {:si_old_unique_call 1} out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_124, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_126, out_Tmp_151, out_sdv_128, out_Tmp_152 := SerialStartWrite#1_loop_L14(out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, in_TotalTime, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_124, in_NewIrp_2, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_126, out_Tmp_151, out_sdv_128, out_Tmp_152, in_Timeouts, in_Extension_9);
    return;

  anon29_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L75;

  anon27_Then:
    out_Tmp_151 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon22_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_124)))] == 0;
    call {:si_unique_call 3235} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;

  anon21_Then:
    call {:si_unique_call 3236} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#1_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_124: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_126: int, in_Tmp_151: int, in_sdv_128: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_124: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_126: int, out_Tmp_151: int, out_sdv_128: int, out_Tmp_152: int);
  modifies alloc, Mem_T.PVOID, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_UseATimer == 0 || out_UseATimer == 1 || out_UseATimer == in_UseATimer;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_9 == 16 || out_s_p_e_c_i_a_l_9 == in_s_p_e_c_i_a_l_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



procedure fakeMain() returns (Tmp_1338: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_O_0, handleState, yogi_error, Mem_T.Buffer__UNICODE_STRING, Mem_T.CancelRoutine__IRP, Mem_T.PVOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(handleState) == 1 || old(handleState) == 0 || old(handleState) == 2;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || handleState == 1 || handleState == 0 || handleState == 2;



implementation {:entrypoint} fakeMain() returns (Tmp_1338: int, dup_assertVar: bool)
{

  start:
    call Tmp_1338, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


