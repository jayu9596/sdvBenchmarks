var {:scalar} alloc: int;

var {:scalar} sdv_compFset: int;

var {:scalar} sdv_invoke_on_error: int;

var {:scalar} sdv_invoke_on_cancel: int;

var {:scalar} sdv_invoke_on_success: int;

var {:pointer} SLAM_guard_O_0: int;

var {:scalar} s: int;

var {:scalar} yogi_error: int;

var {:scalar} completion: int;

var {:scalar} Mem_T.Buffer__UNICODE_STRING: [int]int;

var {:scalar} Mem_T.CompletionRoutine__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.CurrentStackLocation_unnamed_tag_6: [int]int;

var {:scalar} Mem_T.INT4: [int]int;

var {:scalar} Mem_T.MinorFunction__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.Status__IO_STATUS_BLOCK: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const RegistryPath: int;

const PortInfoMutex: int;

const PowerStateCallbackObject: int;

const Dot3_EndOfFrame2: int;

const Dot3_StartOfFrame1: int;

const Dot3_EndOfFrame1: int;

const Dot3_StartOfFrame2: int;

const PptWmiAllocFreeCountsGuid: int;

const GUID_DEVINTERFACE_PARALLEL: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv1: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_kdpc: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_isr_routine: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_driver_object: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_remove_irp_already_issued: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_pIoDpcContext: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_pDpcContext: int;

const sdv_harnessDeviceExtension: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_dpc_io_registered: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const KeTickCount: int;

const SppNoRaiseIrql: int;

const AllowAsserts: int;

const ParEnableLegacyZip: int;

const PhysicalZero: int;

const AcquirePortTimeout: int;

const PowerStateIsAC: int;

const DbgMaskFdo: int;

const DbgMaskDaisyChain1: int;

const DbgMaskEndOfChain: int;

const DbgMaskRawPort: int;

const DbgMaskDaisyChain0: int;

const DbgMaskNoDevice: int;

const DbgMaskLegacyZip: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_DEVINTERFACE_PARCLASS: int;

const WarmPollPeriod: int;

const PptDot3Retries: int;

const Trace: int;

const DefaultModes: int;

const Break: int;

const ParLegacyZipPseudoId: int;

const sdv_cancelFptr: int;

const SLAM_guard_O_0_init: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const GUID_QUERY_CRASHDUMP_FUNCTIONS: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_1394: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_BUS_TYPE_ISAPNP: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const GUID_BUS_TYPE_ACPI: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const GUID_BUS_TYPE_EISA: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_IRDA: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_BUS_TYPE_SERENUM: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const GUID_BUS_TYPE_MCA: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_BUS_TYPE_AVC: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USB: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USBPRINT: int;

const GUID_BUS_TYPE_PCI: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const PortInfoReferenceCount: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const GUID_BUS_TYPE_SD: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_HID: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_1: int;

  anon0:
    call {:si_unique_call 1} vslice_dummy_var_1 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ParDot3ParseModes"} ParDot3ParseModes(actual_Pdx: int, actual_DOT3M: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParDot3ParseModes"} ParDot3ParseModes(actual_Pdx: int, actual_DOT3M: int)
{
  var {:scalar} numValues: int;
  var {:dopa} {:scalar} rev: int;
  var {:dopa} {:scalar} fwd: int;
  var {:scalar} sdv_4: int;
  var {:scalar} sdv_5: int;
  var {:pointer} Pdx: int;
  var {:pointer} DOT3M: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3091: int;

  anon0:
    call {:si_unique_call 2} vslice_dummy_var_2 := __HAVOC_malloc(4);
    call {:si_unique_call 3} rev := __HAVOC_malloc(4);
    call {:si_unique_call 4} fwd := __HAVOC_malloc(4);
    Pdx := actual_Pdx;
    call {:si_unique_call 5} DOT3M := __HAVOC_malloc(4);
    assume {:nonnull} fwd != 0;
    assume fwd > 0;
    Mem_T.INT4[fwd] := 0;
    assume {:nonnull} rev != 0;
    assume rev > 0;
    Mem_T.INT4[rev] := 0;
    assume {:nonnull} DOT3M != 0;
    assume DOT3M > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DOT3M != 0;
    assume DOT3M > 0;
    havoc vslice_dummy_var_3091;
    call {:si_unique_call 6} numValues := StringCountValues(vslice_dummy_var_3091, 44);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} numValues != 2;
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} numValues == 2;
    call {:si_unique_call 7} sdv_4 := String2Num(DOT3M, 44, fwd);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_4 != 0;
    goto L23;

  L23:
    call {:si_unique_call 8} sdv_5 := String2Num(DOT3M, 44, rev);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_5 == 0;
    assume {:nonnull} rev != 0;
    assume rev > 0;
    Mem_T.INT4[rev] := 2040;
    goto L8;

  L8:
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    assume {:nonnull} fwd != 0;
    assume fwd > 0;
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    assume {:nonnull} rev != 0;
    assume rev > 0;
    goto L1;

  anon11_Then:
    assume {:partition} sdv_5 != 0;
    goto L8;

  anon10_Then:
    assume {:partition} sdv_4 == 0;
    assume {:nonnull} fwd != 0;
    assume fwd > 0;
    Mem_T.INT4[fwd] := 992;
    goto L23;

  anon12_Then:
    goto L8;
}



procedure {:origName "ParMLCCreateObject"} ParMLCCreateObject(actual_Pdx_1: int, actual_CMDField: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParMLCCreateObject"} ParMLCCreateObject(actual_Pdx_1: int, actual_CMDField: int)
{
  var {:pointer} Pdx_1: int;
  var {:pointer} CMDField: int;
  var vslice_dummy_var_3: int;

  anon0:
    call {:si_unique_call 9} vslice_dummy_var_3 := __HAVOC_malloc(4);
    Pdx_1 := actual_Pdx_1;
    CMDField := actual_CMDField;
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} CMDField != 0;
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} CMDField == 0;
    goto L1;
}



procedure {:origName "ParDot3CreateObject"} ParDot3CreateObject(actual_Pdx_2: int, actual_DOT3DL: int, actual_DOT3C: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParDot3CreateObject"} ParDot3CreateObject(actual_Pdx_2: int, actual_DOT3DL: int, actual_DOT3C: int)
{
  var {:scalar} sdv_6: int;
  var {:dopa} {:scalar} pid: int;
  var {:dopa} {:scalar} dataChannel: int;
  var {:scalar} sdv_7: int;
  var {:pointer} Pdx_2: int;
  var {:pointer} DOT3DL: int;
  var {:pointer} DOT3C: int;
  var vslice_dummy_var_4: int;

  anon0:
    call {:si_unique_call 10} pid := __HAVOC_malloc(4);
    call {:si_unique_call 11} dataChannel := __HAVOC_malloc(4);
    call {:si_unique_call 12} vslice_dummy_var_4 := __HAVOC_malloc(4);
    Pdx_2 := actual_Pdx_2;
    call {:si_unique_call 13} DOT3DL := __HAVOC_malloc(4);
    call {:si_unique_call 14} DOT3C := __HAVOC_malloc(4);
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} DOT3DL != 0;
    assume DOT3DL > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} pid != 0;
    assume pid > 0;
    Mem_T.INT4[pid] := 645;
    call {:si_unique_call 15} sdv_6 := String2Num(DOT3DL, 44, dataChannel);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_6 != 0;
    goto L15;

  L15:
    assume {:nonnull} DOT3C != 0;
    assume DOT3C > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 16} sdv_7 := String2Num(DOT3C, 44, pid);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_7 == 0;
    assume {:nonnull} pid != 0;
    assume pid > 0;
    Mem_T.INT4[pid] := 645;
    goto L16;

  L16:
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} dataChannel != 0;
    assume dataChannel > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} pid != 0;
    assume pid > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto L6;

  L6:
    return;

  anon11_Then:
    assume {:partition} sdv_7 != 0;
    goto L16;

  anon10_Then:
    goto L16;

  anon9_Then:
    assume {:partition} sdv_6 == 0;
    assume {:nonnull} dataChannel != 0;
    assume dataChannel > 0;
    Mem_T.INT4[dataChannel] := 77;
    goto L15;

  anon12_Then:
    goto L6;
}



procedure {:origName "_sdv_init43"} _sdv_init43();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init43"} _sdv_init43()
{
  var vslice_dummy_var_5: int;

  anon0:
    call {:si_unique_call 17} vslice_dummy_var_5 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    assume Dot3_StartOfFrame1 == 85;
    assume Dot3_StartOfFrame2 == 170;
    assume Dot3_EndOfFrame1 == 0;
    assume Dot3_EndOfFrame2 == 255;
    return;
}



procedure {:origName "ParDot4CreateObject"} ParDot4CreateObject(actual_Pdx_3: int, actual_DOT4DL: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParDot4CreateObject"} ParDot4CreateObject(actual_Pdx_3: int, actual_DOT4DL: int)
{
  var {:scalar} numValues_1: int;
  var {:dopa} {:scalar} ResetByteCount: int;
  var {:dopa} {:scalar} dataChannel_1: int;
  var {:scalar} sdv_9: int;
  var {:scalar} sdv_10: int;
  var {:scalar} sdv_11: int;
  var {:dopa} {:scalar} resetChannel: int;
  var {:pointer} Pdx_3: int;
  var {:pointer} DOT4DL: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_3092: int;

  anon0:
    call {:si_unique_call 18} ResetByteCount := __HAVOC_malloc(4);
    call {:si_unique_call 19} dataChannel_1 := __HAVOC_malloc(4);
    call {:si_unique_call 20} vslice_dummy_var_6 := __HAVOC_malloc(4);
    call {:si_unique_call 21} resetChannel := __HAVOC_malloc(4);
    Pdx_3 := actual_Pdx_3;
    call {:si_unique_call 22} DOT4DL := __HAVOC_malloc(4);
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    assume {:nonnull} DOT4DL != 0;
    assume DOT4DL > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} DOT4DL != 0;
    assume DOT4DL > 0;
    havoc vslice_dummy_var_3092;
    call {:si_unique_call 23} numValues_1 := StringCountValues(vslice_dummy_var_3092, 44);
    call {:si_unique_call 24} sdv_9 := String2Num(DOT4DL, 44, dataChannel_1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_9 != 0;
    goto L19;

  L19:
    call {:si_unique_call 25} sdv_10 := String2Num(DOT4DL, 44, resetChannel);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_10 != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} numValues_1 > 1;
    assume {:nonnull} resetChannel != 0;
    assume resetChannel > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.INT4[resetChannel] == -1;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto L28;

  L28:
    call {:si_unique_call 26} sdv_11 := String2Num(DOT4DL, 0, ResetByteCount);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_11 != 0;
    goto L33;

  L33:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    assume {:nonnull} dataChannel_1 != 0;
    assume dataChannel_1 > 0;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    assume {:nonnull} resetChannel != 0;
    assume resetChannel > 0;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    assume {:nonnull} ResetByteCount != 0;
    assume ResetByteCount > 0;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto L1;

  L1:
    return;

  anon19_Then:
    assume {:partition} sdv_11 == 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} numValues_1 > 2;
    assume {:nonnull} ResetByteCount != 0;
    assume ResetByteCount > 0;
    Mem_T.INT4[ResetByteCount] := 4;
    goto L33;

  anon20_Then:
    assume {:partition} 2 >= numValues_1;
    goto L33;

  anon18_Then:
    assume {:partition} Mem_T.INT4[resetChannel] != -1;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto L28;

  anon17_Then:
    assume {:partition} 1 >= numValues_1;
    goto L23;

  L23:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto L28;

  anon16_Then:
    assume {:partition} sdv_10 == 0;
    goto L23;

  anon15_Then:
    assume {:partition} sdv_9 == 0;
    assume {:nonnull} dataChannel_1 != 0;
    assume dataChannel_1 > 0;
    Mem_T.INT4[dataChannel_1] := 77;
    goto L19;

  anon21_Then:
    goto L1;
}



procedure {:origName "PptWmiInitWmi"} PptWmiInitWmi(actual_DeviceObject: int) returns (Tmp_15: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_15 == -1073741823 || Tmp_15 == -1073741811 || Tmp_15 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptWmiInitWmi"} PptWmiInitWmi(actual_DeviceObject: int) returns (Tmp_15: int)
{
  var {:pointer} wmiContext: int;
  var {:pointer} devExt: int;
  var {:pointer} DeviceObject: int;

  anon0:
    DeviceObject := actual_DeviceObject;
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc devExt;
    assume {:nonnull} devExt != 0;
    assume devExt > 0;
    wmiContext := WmiLibContext__FDO_EXTENSION(devExt);
    call {:si_unique_call 27} sdv_do_paged_code_check();
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    call {:si_unique_call 28} Tmp_15 := IoWMIRegistrationControl(0, 1);
    return;
}



procedure {:origName "_sdv_init29"} _sdv_init29();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init29"} _sdv_init29()
{
  var vslice_dummy_var_7: int;

  anon0:
    call {:si_unique_call 29} vslice_dummy_var_7 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init48"} _sdv_init48();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init48"} _sdv_init48()
{
  var vslice_dummy_var_8: int;

  anon0:
    call {:si_unique_call 30} vslice_dummy_var_8 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int)
{
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 31} vslice_dummy_var_9 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint()
{
  var vslice_dummy_var_10: int;

  anon0:
    call {:si_unique_call 32} vslice_dummy_var_10 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunKSynchronizeRoutines"} {:osmodel} sdv_RunKSynchronizeRoutines(actual_SynchronizeRoutine: int, actual_Context: int) returns (Tmp_25: int);
  free ensures {:va_keep} Tmp_25 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RunKSynchronizeRoutines"} {:osmodel} sdv_RunKSynchronizeRoutines(actual_SynchronizeRoutine: int, actual_Context: int) returns (Tmp_25: int)
{

  anon0:
    Tmp_25 := 0;
    return;
}



procedure {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int)
{
  var vslice_dummy_var_11: int;

  anon0:
    call {:si_unique_call 33} vslice_dummy_var_11 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_12: int;

  anon0:
    call {:si_unique_call 34} vslice_dummy_var_12 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_31: int);
  free ensures {:va_keep} Tmp_31 == actual_Address;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_31: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    record := Address;
    Tmp_31 := record;
    return;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_33: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_33: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_33 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_33 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_33 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "IoReportResourceUsage"} {:osmodel} IoReportResourceUsage(actual_DriverClassName: int, actual_DriverObject: int, actual_DriverList: int, actual_DriverListSize: int, actual_DeviceObject_1: int, actual_DeviceList: int, actual_DeviceListSize: int, actual_OverrideConflict: int, actual_ConflictDetected: int) returns (Tmp_35: int);
  free ensures {:va_keep} Tmp_35 == 0 || Tmp_35 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoReportResourceUsage"} {:osmodel} IoReportResourceUsage(actual_DriverClassName: int, actual_DriverObject: int, actual_DriverList: int, actual_DriverListSize: int, actual_DeviceObject_1: int, actual_DeviceList: int, actual_DeviceListSize: int, actual_OverrideConflict: int, actual_ConflictDetected: int) returns (Tmp_35: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_35 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_35 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag: int)
{
  var vslice_dummy_var_13: int;

  anon0:
    call {:si_unique_call 35} vslice_dummy_var_13 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_1: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_2: int) returns (Tmp_39: int);
  free ensures {:va_keep} Tmp_39 == -1073741824 || Tmp_39 == -1073741771 || Tmp_39 == -1073741670 || Tmp_39 == -1073741823 || Tmp_39 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_1: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_2: int) returns (Tmp_39: int)
{
  var {:pointer} DeviceObject_2: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_39 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_39 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_39 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_39 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    goto L21;

  L21:
    Tmp_39 := 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    goto L21;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_1: int)
{
  var {:scalar} WorkerRoutine: int;
  var {:scalar} QueueType: int;
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 36} vslice_dummy_var_14 := __HAVOC_malloc(4);
    WorkerRoutine := actual_WorkerRoutine;
    QueueType := actual_QueueType;
    call {:si_unique_call 37} sdv_RunIoQueueWorkItems(0, WorkerRoutine, QueueType, 0);
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_15: int;

  anon0:
    call {:si_unique_call 38} vslice_dummy_var_15 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_45: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_45: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_45 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_16: int;

  anon0:
    call {:si_unique_call 39} vslice_dummy_var_16 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s_1: int, actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s_1: int, actual_pirp_3: int)
{
  var vslice_dummy_var_17: int;

  anon0:
    call {:si_unique_call 40} vslice_dummy_var_17 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_2: int)
{
  var vslice_dummy_var_18: int;

  anon0:
    call {:si_unique_call 41} vslice_dummy_var_18 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_3: int, actual_Environment: int) returns (Tmp_53: int);
  free ensures {:va_keep} Tmp_53 == 0 || Tmp_53 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_3: int, actual_Environment: int) returns (Tmp_53: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_53 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_53 := -1073741823;
    goto L1;
}



procedure {:origName "IoCreateUnprotectedSymbolicLink"} {:osmodel} IoCreateUnprotectedSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_55: int);
  free ensures {:va_keep} Tmp_55 == 0 || Tmp_55 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoCreateUnprotectedSymbolicLink"} {:osmodel} IoCreateUnprotectedSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_55: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_55 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_55 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_4: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_4: int)
{
  var {:pointer} pirp_4: int;
  var vslice_dummy_var_19: int;

  anon0:
    call {:si_unique_call 42} vslice_dummy_var_19 := __HAVOC_malloc(4);
    pirp_4 := actual_pirp_4;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_4 != 0;
    assume pirp_4 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_4))] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_4 != 0;
    assume pirp_4 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_4))] := -1073741637;
    goto L1;
}



procedure {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_59: int);
  free ensures {:va_keep} Tmp_59 == 0 || Tmp_59 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_59: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_59 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_59 := -1073741823;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_61: int);
  free ensures {:va_keep} Tmp_61 == 0 || Tmp_61 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_61: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_61 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_61 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, SLAM_guard_O_0, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} u: int;
  var {:scalar} Tmp_64: int;
  var {:scalar} Tmp_65: int;
  var {:scalar} Tmp_66: int;
  var {:scalar} status: int;
  var vslice_dummy_var_20: int;

  anon0:
    call {:si_unique_call 43} vslice_dummy_var_20 := __HAVOC_malloc(4);
    call {:si_unique_call 44} u := __HAVOC_malloc(12);
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    call {:si_unique_call 45} status := DriverEntry(sdv_driver_object, u);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status < 0;
    Tmp_64 := 0;
    goto L66;

  L66:
    assume Tmp_64 != 0;
    call {:si_unique_call 46} sdv_stub_driver_init();
    SLAM_guard_O_0 := sdv_irp;
    assume SLAM_guard_O_0 != 0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 47} status := sdv_RunStartDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume sdv_irp == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 48} SLIC_sdv_RunStartDevice_exit(strConst__li2bpl0, sdv_irp, status);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L35;

  L35:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status < 0;
    Tmp_65 := 0;
    goto L74;

  L74:
    assume Tmp_65 != 0;
    call {:si_unique_call 49} status := sdv_RunSetPowerUp(sdv_p_devobj_fdo, sdv_irp);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status < 0;
    Tmp_66 := 0;
    goto L78;

  L78:
    assume Tmp_66 != 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} 0 <= status;
    Tmp_66 := 1;
    goto L78;

  anon11_Then:
    assume {:partition} 0 <= status;
    Tmp_65 := 1;
    goto L74;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume !(sdv_irp == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L35;

  anon14_Then:
    assume {:partition} 0 <= status;
    Tmp_64 := 1;
    goto L66;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_68: int);
  free ensures {:va_keep} Tmp_68 == 0 || Tmp_68 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_68: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_68 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_68 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_RunSetPowerUp"} {:osmodel} sdv_RunSetPowerUp(actual_po: int, actual_pirp_5: int) returns (Tmp_70: int);
  modifies Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, alloc, Mem_T.Status__IO_STATUS_BLOCK, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RunSetPowerUp"} {:osmodel} sdv_RunSetPowerUp(actual_po: int, actual_pirp_5: int) returns (Tmp_70: int)
{
  var {:pointer} ps: int;
  var {:scalar} status_1: int;
  var {:pointer} po: int;
  var {:pointer} pirp_5: int;

  anon0:
    po := actual_po;
    pirp_5 := actual_pirp_5;
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    ps := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(pirp_5)))];
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(ps)] := 2;
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(ps)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_harnessStackLocation)] := 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 50} sdv_SetStatus(pirp_5);
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 51} status_1 := PptDispatchPower#1(po, pirp_5);
    Tmp_70 := status_1;
    return;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_72: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_72: int)
{
  var {:pointer} sdv_27: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 52} sdv_27 := __HAVOC_malloc(1);
    Tmp_72 := sdv_27;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_72 := 0;
    goto L1;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_4: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_4: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int)
{
  var {:scalar} State: int;
  var {:scalar} r_1: int;
  var {:scalar} Tmp: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 53} State := __HAVOC_malloc(8);
    call {:si_unique_call 54} r_1 := __HAVOC_malloc(8);
    call {:si_unique_call 55} Tmp := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p: int)
{
  var {:scalar} new: int;
  var {:pointer} p: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_3093: int;

  anon0:
    call {:si_unique_call 56} vslice_dummy_var_21 := __HAVOC_malloc(4);
    new := actual_new;
    p := actual_p;
    assume {:nonnull} p != 0;
    assume p > 0;
    havoc vslice_dummy_var_3093;
    Mem_T.INT4[p] := vslice_dummy_var_3093;
    return;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_22: int;

  anon0:
    call {:si_unique_call 57} vslice_dummy_var_22 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_6: int, actual_CompletionRoutine: int, actual_Context_4: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_6: int, actual_CompletionRoutine: int, actual_Context_4: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_6: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_4: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_23: int;

  anon0:
    call {:si_unique_call 58} vslice_dummy_var_23 := __HAVOC_malloc(4);
    pirp_6 := actual_pirp_6;
    CompletionRoutine := actual_CompletionRoutine;
    Context_4 := actual_Context_4;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 59} irpSp := sdv_IoGetNextIrpStackLocation(pirp_6);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpSp)] := CompletionRoutine;
    sdv_compFset := 1;
    sdv_invoke_on_success := InvokeOnSuccess;
    sdv_invoke_on_error := InvokeOnError;
    sdv_invoke_on_cancel := InvokeOnCancel;
    return;
}



procedure {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int)
{
  var vslice_dummy_var_24: int;

  anon0:
    call {:si_unique_call 60} vslice_dummy_var_24 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_85: int);
  free ensures {:va_keep} Tmp_85 == 1 || Tmp_85 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_85: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_85 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_85 := 0;
    goto L1;
}



procedure {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_87: int);
  free ensures {:va_keep} Tmp_87 == 0 || Tmp_87 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_87: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_87 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_87 := -1073741823;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_1: int)
{
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 61} vslice_dummy_var_25 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_91: int);
  free ensures {:va_keep} Tmp_91 == 258 || Tmp_91 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_91: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_91 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_91 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_91 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_5: int)
{
  var vslice_dummy_var_26: int;

  anon0:
    call {:si_unique_call 62} vslice_dummy_var_26 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_95: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_95: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_95 := OldState;
    return;
}



procedure {:origName "ObReferenceObjectByHandle"} {:osmodel} ObReferenceObjectByHandle(actual_Handle: int, actual_DesiredAccess: int, actual_ObjectType: int, actual_AccessMode: int, actual_Object_1: int, actual_HandleInformation: int) returns (Tmp_99: int);
  free ensures {:va_keep} Tmp_99 == 0 || Tmp_99 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ObReferenceObjectByHandle"} {:osmodel} ObReferenceObjectByHandle(actual_Handle: int, actual_DesiredAccess: int, actual_ObjectType: int, actual_AccessMode: int, actual_Object_1: int, actual_HandleInformation: int) returns (Tmp_99: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_99 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_99 := -1073741823;
    goto L1;
}



procedure {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction: int, actual_CallbackContext: int) returns (Tmp_101: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction: int, actual_CallbackContext: int) returns (Tmp_101: int)
{
  var {:pointer} sdv_39: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_101 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 63} sdv_39 := __HAVOC_malloc(1);
    Tmp_101 := sdv_39;
    goto L1;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_7: int) returns (Tmp_103: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_7: int) returns (Tmp_103: int)
{
  var {:pointer} pirp_7: int;

  anon0:
    pirp_7 := actual_pirp_7;
    assume {:nonnull} pirp_7 != 0;
    assume pirp_7 > 0;
    Tmp_103 := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(pirp_7)))];
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_1: int, actual_n: int, actual_a: int, actual_r_2: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_1: int, actual_n: int, actual_a: int, actual_r_2: int, actual_s_2: int)
{
  var vslice_dummy_var_27: int;

  anon0:
    call {:si_unique_call 64} vslice_dummy_var_27 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_28: int;

  anon0:
    call {:si_unique_call 65} vslice_dummy_var_28 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    return;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_109: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_109: int)
{

  anon0:
    havoc Tmp_109;
    return;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_113: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, Mem_T.CurrentStackLocation_unnamed_tag_6, SLAM_guard_O_0, completion, s, yogi_error, Mem_T.Buffer__UNICODE_STRING, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, sdv_compFset, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures {:va_keep} s == 1 || s == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} completion == 0 || completion == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "main"} {:osmodel} main() returns (Tmp_113: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_115: int;
  var {:scalar} Tmp_116: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var RegistryPath__Loc: int;
  var PptWmiAllocFreeCountsGuid__Loc: int;
  var GUID_DEVINTERFACE_PARALLEL__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_driver_object__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var KeTickCount__Loc: int;
  var SppNoRaiseIrql__Loc: int;
  var AllowAsserts__Loc: int;
  var ParEnableLegacyZip__Loc: int;
  var PhysicalZero__Loc: int;
  var AcquirePortTimeout__Loc: int;
  var DbgMaskFdo__Loc: int;
  var DbgMaskDaisyChain1__Loc: int;
  var DbgMaskEndOfChain__Loc: int;
  var DbgMaskRawPort__Loc: int;
  var DbgMaskDaisyChain0__Loc: int;
  var DbgMaskNoDevice__Loc: int;
  var DbgMaskLegacyZip__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_DEVINTERFACE_PARCLASS__Loc: int;
  var WarmPollPeriod__Loc: int;
  var Trace__Loc: int;
  var DefaultModes__Loc: int;
  var Break__Loc: int;
  var SLAM_guard_O_0_init__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var vslice_dummy_var_3094: int;
  var vslice_dummy_var_3095: int;
  var vslice_dummy_var_3096: int;
  var vslice_dummy_var_3097: int;
  var vslice_dummy_var_3098: int;
  var vslice_dummy_var_3099: int;
  var vslice_dummy_var_3100: int;
  var vslice_dummy_var_3101: int;
  var vslice_dummy_var_3102: int;
  var vslice_dummy_var_3103: int;
  var vslice_dummy_var_3104: int;
  var vslice_dummy_var_3105: int;
  var vslice_dummy_var_3106: int;
  var vslice_dummy_var_3107: int;
  var vslice_dummy_var_3108: int;
  var vslice_dummy_var_3109: int;
  var vslice_dummy_var_3110: int;
  var vslice_dummy_var_3111: int;
  var vslice_dummy_var_3112: int;
  var vslice_dummy_var_3113: int;
  var vslice_dummy_var_3114: int;
  var vslice_dummy_var_3115: int;
  var vslice_dummy_var_3116: int;
  var vslice_dummy_var_3117: int;
  var vslice_dummy_var_3118: int;
  var vslice_dummy_var_3119: int;
  var vslice_dummy_var_3120: int;
  var vslice_dummy_var_3121: int;
  var vslice_dummy_var_3122: int;
  var vslice_dummy_var_3123: int;
  var vslice_dummy_var_3124: int;
  var vslice_dummy_var_3125: int;
  var vslice_dummy_var_3126: int;
  var vslice_dummy_var_3127: int;
  var vslice_dummy_var_3128: int;
  var vslice_dummy_var_3129: int;
  var vslice_dummy_var_3130: int;
  var vslice_dummy_var_3131: int;
  var vslice_dummy_var_3132: int;
  var vslice_dummy_var_3133: int;
  var vslice_dummy_var_3134: int;
  var vslice_dummy_var_3135: int;
  var vslice_dummy_var_3136: int;
  var vslice_dummy_var_3137: int;
  var vslice_dummy_var_3138: int;
  var vslice_dummy_var_3139: int;
  var vslice_dummy_var_3140: int;
  var vslice_dummy_var_3141: int;
  var vslice_dummy_var_3142: int;
  var vslice_dummy_var_3143: int;
  var vslice_dummy_var_3144: int;
  var vslice_dummy_var_3145: int;
  var vslice_dummy_var_3146: int;
  var vslice_dummy_var_3147: int;
  var vslice_dummy_var_3148: int;
  var vslice_dummy_var_3149: int;
  var vslice_dummy_var_3150: int;
  var vslice_dummy_var_3151: int;
  var vslice_dummy_var_3152: int;
  var vslice_dummy_var_3153: int;
  var vslice_dummy_var_3154: int;
  var vslice_dummy_var_3155: int;
  var vslice_dummy_var_3156: int;
  var vslice_dummy_var_3157: int;
  var vslice_dummy_var_3158: int;
  var vslice_dummy_var_3159: int;
  var vslice_dummy_var_3160: int;
  var vslice_dummy_var_3161: int;
  var vslice_dummy_var_3162: int;
  var vslice_dummy_var_3163: int;
  var vslice_dummy_var_3164: int;
  var vslice_dummy_var_3165: int;
  var vslice_dummy_var_3166: int;
  var vslice_dummy_var_3167: int;
  var vslice_dummy_var_3168: int;
  var vslice_dummy_var_3169: int;
  var vslice_dummy_var_3170: int;
  var vslice_dummy_var_3171: int;
  var vslice_dummy_var_3172: int;
  var vslice_dummy_var_3173: int;
  var vslice_dummy_var_3174: int;
  var vslice_dummy_var_3175: int;
  var vslice_dummy_var_3176: int;
  var vslice_dummy_var_3177: int;
  var vslice_dummy_var_3178: int;
  var vslice_dummy_var_3179: int;
  var vslice_dummy_var_3180: int;
  var vslice_dummy_var_3181: int;
  var vslice_dummy_var_3182: int;
  var vslice_dummy_var_3183: int;
  var vslice_dummy_var_3184: int;
  var vslice_dummy_var_3185: int;
  var vslice_dummy_var_3186: int;
  var vslice_dummy_var_3187: int;
  var vslice_dummy_var_3188: int;
  var vslice_dummy_var_3189: int;
  var vslice_dummy_var_3190: int;
  var vslice_dummy_var_3191: int;
  var vslice_dummy_var_3192: int;
  var vslice_dummy_var_3193: int;
  var vslice_dummy_var_3194: int;
  var vslice_dummy_var_3195: int;
  var vslice_dummy_var_3196: int;
  var vslice_dummy_var_3197: int;
  var vslice_dummy_var_3198: int;
  var vslice_dummy_var_3199: int;
  var vslice_dummy_var_3200: int;
  var vslice_dummy_var_3201: int;
  var vslice_dummy_var_3202: int;
  var vslice_dummy_var_3203: int;
  var vslice_dummy_var_3204: int;
  var vslice_dummy_var_3205: int;
  var vslice_dummy_var_3206: int;
  var vslice_dummy_var_3207: int;
  var vslice_dummy_var_3208: int;
  var vslice_dummy_var_3209: int;
  var vslice_dummy_var_3210: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 66} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 67} RegistryPath__Loc := __HAVOC_malloc_or_null(12);
    assume RegistryPath__Loc == RegistryPath;
    assume RegistryPath != 0;
    call {:si_unique_call 68} PptWmiAllocFreeCountsGuid__Loc := __HAVOC_malloc_or_null(16);
    assume PptWmiAllocFreeCountsGuid__Loc == PptWmiAllocFreeCountsGuid;
    assume PptWmiAllocFreeCountsGuid != 0;
    call {:si_unique_call 69} GUID_DEVINTERFACE_PARALLEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_PARALLEL__Loc == GUID_DEVINTERFACE_PARALLEL;
    assume GUID_DEVINTERFACE_PARALLEL != 0;
    call {:si_unique_call 70} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 71} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 72} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 73} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 74} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 75} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 76} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 77} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 78} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 79} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 80} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 81} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 82} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 83} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 84} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 85} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 86} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 87} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 88} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 89} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 90} sdv_driver_object__Loc := __HAVOC_malloc_or_null(68);
    assume sdv_driver_object__Loc == sdv_driver_object;
    assume sdv_driver_object != 0;
    call {:si_unique_call 91} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 92} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 93} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 94} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 95} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 96} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 97} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 98} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 99} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 100} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 101} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 102} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 103} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 104} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 105} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 106} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 107} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 108} KeTickCount__Loc := __HAVOC_malloc_or_null(12);
    assume KeTickCount__Loc == KeTickCount;
    assume KeTickCount != 0;
    call {:si_unique_call 109} SppNoRaiseIrql__Loc := __HAVOC_malloc_or_null(4);
    assume SppNoRaiseIrql__Loc == SppNoRaiseIrql;
    assume SppNoRaiseIrql != 0;
    call {:si_unique_call 110} AllowAsserts__Loc := __HAVOC_malloc_or_null(4);
    assume AllowAsserts__Loc == AllowAsserts;
    assume AllowAsserts != 0;
    call {:si_unique_call 111} ParEnableLegacyZip__Loc := __HAVOC_malloc_or_null(4);
    assume ParEnableLegacyZip__Loc == ParEnableLegacyZip;
    assume ParEnableLegacyZip != 0;
    call {:si_unique_call 112} PhysicalZero__Loc := __HAVOC_malloc_or_null(20);
    assume PhysicalZero__Loc == PhysicalZero;
    assume PhysicalZero != 0;
    call {:si_unique_call 113} AcquirePortTimeout__Loc := __HAVOC_malloc_or_null(20);
    assume AcquirePortTimeout__Loc == AcquirePortTimeout;
    assume AcquirePortTimeout != 0;
    call {:si_unique_call 114} DbgMaskFdo__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskFdo__Loc == DbgMaskFdo;
    assume DbgMaskFdo != 0;
    call {:si_unique_call 115} DbgMaskDaisyChain1__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskDaisyChain1__Loc == DbgMaskDaisyChain1;
    assume DbgMaskDaisyChain1 != 0;
    call {:si_unique_call 116} DbgMaskEndOfChain__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskEndOfChain__Loc == DbgMaskEndOfChain;
    assume DbgMaskEndOfChain != 0;
    call {:si_unique_call 117} DbgMaskRawPort__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskRawPort__Loc == DbgMaskRawPort;
    assume DbgMaskRawPort != 0;
    call {:si_unique_call 118} DbgMaskDaisyChain0__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskDaisyChain0__Loc == DbgMaskDaisyChain0;
    assume DbgMaskDaisyChain0 != 0;
    call {:si_unique_call 119} DbgMaskNoDevice__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskNoDevice__Loc == DbgMaskNoDevice;
    assume DbgMaskNoDevice != 0;
    call {:si_unique_call 120} DbgMaskLegacyZip__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskLegacyZip__Loc == DbgMaskLegacyZip;
    assume DbgMaskLegacyZip != 0;
    call {:si_unique_call 121} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 122} GUID_DEVINTERFACE_PARCLASS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_PARCLASS__Loc == GUID_DEVINTERFACE_PARCLASS;
    assume GUID_DEVINTERFACE_PARCLASS != 0;
    call {:si_unique_call 123} WarmPollPeriod__Loc := __HAVOC_malloc_or_null(4);
    assume WarmPollPeriod__Loc == WarmPollPeriod;
    assume WarmPollPeriod != 0;
    call {:si_unique_call 124} Trace__Loc := __HAVOC_malloc_or_null(4);
    assume Trace__Loc == Trace;
    assume Trace != 0;
    call {:si_unique_call 125} DefaultModes__Loc := __HAVOC_malloc_or_null(4);
    assume DefaultModes__Loc == DefaultModes;
    assume DefaultModes != 0;
    call {:si_unique_call 126} Break__Loc := __HAVOC_malloc_or_null(4);
    assume Break__Loc == Break;
    assume Break != 0;
    call {:si_unique_call 127} SLAM_guard_O_0_init__Loc := __HAVOC_malloc_or_null(240);
    assume SLAM_guard_O_0_init__Loc == SLAM_guard_O_0_init;
    assume SLAM_guard_O_0_init != 0;
    call {:si_unique_call 128} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 129} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 130} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 131} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 132} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 133} GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc == GUID_QUERY_CRASHDUMP_FUNCTIONS;
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS != 0;
    call {:si_unique_call 134} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 135} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 136} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 137} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 138} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 139} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 140} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 141} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 142} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 143} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 144} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 145} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 146} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 147} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 148} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 149} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 150} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 151} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 152} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 153} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 154} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 155} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 156} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 157} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 158} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 159} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 160} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 161} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 162} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 163} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 164} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 165} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 166} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 167} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 168} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 169} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 170} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 171} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 172} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 173} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 174} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 175} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 176} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 177} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 178} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 179} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 180} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 181} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 182} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 183} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 184} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 185} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 186} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 187} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 188} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 189} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 190} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 191} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 192} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 193} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 194} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 195} boogieTmp := __HAVOC_malloc_or_null(44);
    call {:si_unique_call 196} boogieTmp := __HAVOC_malloc_or_null(36);
    call {:si_unique_call 197} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 198} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 199} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 200} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 201} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 202} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 203} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 204} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 205} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv1 == boogieTmp;
    call {:si_unique_call 206} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 207} boogieTmp := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc == boogieTmp;
    call {:si_unique_call 208} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 209} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pIoDpcContext == boogieTmp;
    call {:si_unique_call 210} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pDpcContext == boogieTmp;
    call {:si_unique_call 211} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 212} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 213} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 214} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 215} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 216} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 217} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 218} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 219} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 220} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 221} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 222} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 223} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 224} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 225} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 226} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 227} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 228} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 229} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 230} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 231} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 232} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 233} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 234} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 235} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 236} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 237} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 238} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 239} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 240} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 241} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 242} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 243} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 244} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 245} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 246} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 247} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 248} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 249} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 250} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 251} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 252} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 253} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 254} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 255} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 256} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 257} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 258} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 259} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 260} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 261} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 262} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 263} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 264} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 265} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 266} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 267} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 268} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 269} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 270} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 271} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 272} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 273} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 274} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 275} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 276} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 277} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 278} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 279} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 280} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 281} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 282} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 283} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 284} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 285} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 286} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 287} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 288} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 289} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 290} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 291} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 292} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 293} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 294} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 295} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 296} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 297} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 298} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 299} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 300} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 301} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 302} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 303} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 304} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 305} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 306} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 307} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 308} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 309} vslice_dummy_var_3094 := __HAVOC_malloc(28);
    call {:si_unique_call 310} vslice_dummy_var_3095 := __HAVOC_malloc(12);
    call {:si_unique_call 311} vslice_dummy_var_3096 := __HAVOC_malloc(28);
    call {:si_unique_call 312} vslice_dummy_var_3097 := __HAVOC_malloc(12);
    call {:si_unique_call 313} vslice_dummy_var_3098 := __HAVOC_malloc(28);
    call {:si_unique_call 314} vslice_dummy_var_3099 := __HAVOC_malloc(4);
    call {:si_unique_call 315} vslice_dummy_var_3100 := __HAVOC_malloc(4);
    call {:si_unique_call 316} vslice_dummy_var_3101 := __HAVOC_malloc(12);
    call {:si_unique_call 317} vslice_dummy_var_3102 := __HAVOC_malloc(28);
    call {:si_unique_call 318} vslice_dummy_var_3103 := __HAVOC_malloc(12);
    call {:si_unique_call 319} vslice_dummy_var_3104 := __HAVOC_malloc(12);
    call {:si_unique_call 320} vslice_dummy_var_3105 := __HAVOC_malloc(28);
    call {:si_unique_call 321} vslice_dummy_var_3106 := __HAVOC_malloc(12);
    call {:si_unique_call 322} vslice_dummy_var_3107 := __HAVOC_malloc(28);
    call {:si_unique_call 323} vslice_dummy_var_3108 := __HAVOC_malloc(12);
    call {:si_unique_call 324} vslice_dummy_var_3109 := __HAVOC_malloc(28);
    call {:si_unique_call 325} vslice_dummy_var_3110 := __HAVOC_malloc(12);
    call {:si_unique_call 326} vslice_dummy_var_3111 := __HAVOC_malloc(28);
    call {:si_unique_call 327} vslice_dummy_var_3112 := __HAVOC_malloc(12);
    call {:si_unique_call 328} vslice_dummy_var_3113 := __HAVOC_malloc(28);
    call {:si_unique_call 329} vslice_dummy_var_3114 := __HAVOC_malloc(12);
    call {:si_unique_call 330} vslice_dummy_var_3115 := __HAVOC_malloc(28);
    call {:si_unique_call 331} vslice_dummy_var_3116 := __HAVOC_malloc(12);
    call {:si_unique_call 332} vslice_dummy_var_3117 := __HAVOC_malloc(28);
    call {:si_unique_call 333} vslice_dummy_var_3118 := __HAVOC_malloc(12);
    call {:si_unique_call 334} vslice_dummy_var_3119 := __HAVOC_malloc(28);
    call {:si_unique_call 335} vslice_dummy_var_3120 := __HAVOC_malloc(12);
    call {:si_unique_call 336} vslice_dummy_var_3121 := __HAVOC_malloc(28);
    call {:si_unique_call 337} vslice_dummy_var_3122 := __HAVOC_malloc(12);
    call {:si_unique_call 338} vslice_dummy_var_3123 := __HAVOC_malloc(28);
    call {:si_unique_call 339} vslice_dummy_var_3124 := __HAVOC_malloc(12);
    call {:si_unique_call 340} vslice_dummy_var_3125 := __HAVOC_malloc(28);
    call {:si_unique_call 341} vslice_dummy_var_3126 := __HAVOC_malloc(4);
    call {:si_unique_call 342} vslice_dummy_var_3127 := __HAVOC_malloc(12);
    call {:si_unique_call 343} vslice_dummy_var_3128 := __HAVOC_malloc(28);
    call {:si_unique_call 344} vslice_dummy_var_3129 := __HAVOC_malloc(4);
    call {:si_unique_call 345} vslice_dummy_var_3130 := __HAVOC_malloc(4);
    call {:si_unique_call 346} vslice_dummy_var_3131 := __HAVOC_malloc(12);
    call {:si_unique_call 347} vslice_dummy_var_3132 := __HAVOC_malloc(28);
    call {:si_unique_call 348} vslice_dummy_var_3133 := __HAVOC_malloc(100);
    call {:si_unique_call 349} vslice_dummy_var_3134 := __HAVOC_malloc(52);
    call {:si_unique_call 350} vslice_dummy_var_3135 := __HAVOC_malloc(12);
    call {:si_unique_call 351} vslice_dummy_var_3136 := __HAVOC_malloc(28);
    call {:si_unique_call 352} vslice_dummy_var_3137 := __HAVOC_malloc(12);
    call {:si_unique_call 353} vslice_dummy_var_3138 := __HAVOC_malloc(28);
    call {:si_unique_call 354} vslice_dummy_var_3139 := __HAVOC_malloc(396);
    call {:si_unique_call 355} vslice_dummy_var_3140 := __HAVOC_malloc(288);
    call {:si_unique_call 356} vslice_dummy_var_3141 := __HAVOC_malloc(12);
    call {:si_unique_call 357} vslice_dummy_var_3142 := __HAVOC_malloc(28);
    call {:si_unique_call 358} vslice_dummy_var_3143 := __HAVOC_malloc(12);
    call {:si_unique_call 359} vslice_dummy_var_3144 := __HAVOC_malloc(28);
    call {:si_unique_call 360} vslice_dummy_var_3145 := __HAVOC_malloc(12);
    call {:si_unique_call 361} vslice_dummy_var_3146 := __HAVOC_malloc(28);
    call {:si_unique_call 362} vslice_dummy_var_3147 := __HAVOC_malloc(12);
    call {:si_unique_call 363} vslice_dummy_var_3148 := __HAVOC_malloc(28);
    call {:si_unique_call 364} vslice_dummy_var_3149 := __HAVOC_malloc(12);
    call {:si_unique_call 365} vslice_dummy_var_3150 := __HAVOC_malloc(28);
    call {:si_unique_call 366} vslice_dummy_var_3151 := __HAVOC_malloc(12);
    call {:si_unique_call 367} vslice_dummy_var_3152 := __HAVOC_malloc(28);
    call {:si_unique_call 368} vslice_dummy_var_3153 := __HAVOC_malloc(12);
    call {:si_unique_call 369} vslice_dummy_var_3154 := __HAVOC_malloc(28);
    call {:si_unique_call 370} vslice_dummy_var_3155 := __HAVOC_malloc(12);
    call {:si_unique_call 371} vslice_dummy_var_3156 := __HAVOC_malloc(28);
    call {:si_unique_call 372} vslice_dummy_var_3157 := __HAVOC_malloc(12);
    call {:si_unique_call 373} vslice_dummy_var_3158 := __HAVOC_malloc(28);
    call {:si_unique_call 374} vslice_dummy_var_3159 := __HAVOC_malloc(12);
    call {:si_unique_call 375} vslice_dummy_var_3160 := __HAVOC_malloc(28);
    call {:si_unique_call 376} vslice_dummy_var_3161 := __HAVOC_malloc(12);
    call {:si_unique_call 377} vslice_dummy_var_3162 := __HAVOC_malloc(28);
    call {:si_unique_call 378} vslice_dummy_var_3163 := __HAVOC_malloc(12);
    call {:si_unique_call 379} vslice_dummy_var_3164 := __HAVOC_malloc(28);
    call {:si_unique_call 380} vslice_dummy_var_3165 := __HAVOC_malloc(100);
    call {:si_unique_call 381} vslice_dummy_var_3166 := __HAVOC_malloc(12);
    call {:si_unique_call 382} vslice_dummy_var_3167 := __HAVOC_malloc(28);
    call {:si_unique_call 383} vslice_dummy_var_3168 := __HAVOC_malloc(12);
    call {:si_unique_call 384} vslice_dummy_var_3169 := __HAVOC_malloc(28);
    call {:si_unique_call 385} vslice_dummy_var_3170 := __HAVOC_malloc(12);
    call {:si_unique_call 386} vslice_dummy_var_3171 := __HAVOC_malloc(28);
    call {:si_unique_call 387} vslice_dummy_var_3172 := __HAVOC_malloc(12);
    call {:si_unique_call 388} vslice_dummy_var_3173 := __HAVOC_malloc(28);
    call {:si_unique_call 389} vslice_dummy_var_3174 := __HAVOC_malloc(12);
    call {:si_unique_call 390} vslice_dummy_var_3175 := __HAVOC_malloc(28);
    call {:si_unique_call 391} vslice_dummy_var_3176 := __HAVOC_malloc(12);
    call {:si_unique_call 392} vslice_dummy_var_3177 := __HAVOC_malloc(28);
    call {:si_unique_call 393} vslice_dummy_var_3178 := __HAVOC_malloc(12);
    call {:si_unique_call 394} vslice_dummy_var_3179 := __HAVOC_malloc(28);
    call {:si_unique_call 395} vslice_dummy_var_3180 := __HAVOC_malloc(12);
    call {:si_unique_call 396} vslice_dummy_var_3181 := __HAVOC_malloc(28);
    call {:si_unique_call 397} vslice_dummy_var_3182 := __HAVOC_malloc(12);
    call {:si_unique_call 398} vslice_dummy_var_3183 := __HAVOC_malloc(28);
    call {:si_unique_call 399} vslice_dummy_var_3184 := __HAVOC_malloc(12);
    call {:si_unique_call 400} vslice_dummy_var_3185 := __HAVOC_malloc(28);
    call {:si_unique_call 401} vslice_dummy_var_3186 := __HAVOC_malloc(12);
    call {:si_unique_call 402} vslice_dummy_var_3187 := __HAVOC_malloc(28);
    call {:si_unique_call 403} vslice_dummy_var_3188 := __HAVOC_malloc(12);
    call {:si_unique_call 404} vslice_dummy_var_3189 := __HAVOC_malloc(28);
    call {:si_unique_call 405} vslice_dummy_var_3190 := __HAVOC_malloc(112);
    call {:si_unique_call 406} vslice_dummy_var_3191 := __HAVOC_malloc(12);
    call {:si_unique_call 407} vslice_dummy_var_3192 := __HAVOC_malloc(28);
    call {:si_unique_call 408} vslice_dummy_var_3193 := __HAVOC_malloc(12);
    call {:si_unique_call 409} vslice_dummy_var_3194 := __HAVOC_malloc(28);
    call {:si_unique_call 410} vslice_dummy_var_3195 := __HAVOC_malloc(4);
    call {:si_unique_call 411} vslice_dummy_var_3196 := __HAVOC_malloc(4);
    call {:si_unique_call 412} vslice_dummy_var_3197 := __HAVOC_malloc(12);
    call {:si_unique_call 413} vslice_dummy_var_3198 := __HAVOC_malloc(28);
    call {:si_unique_call 414} vslice_dummy_var_3199 := __HAVOC_malloc(100);
    call {:si_unique_call 415} vslice_dummy_var_3200 := __HAVOC_malloc(12);
    call {:si_unique_call 416} vslice_dummy_var_3201 := __HAVOC_malloc(28);
    call {:si_unique_call 417} vslice_dummy_var_3202 := __HAVOC_malloc(12);
    call {:si_unique_call 418} vslice_dummy_var_3203 := __HAVOC_malloc(28);
    call {:si_unique_call 419} vslice_dummy_var_3204 := __HAVOC_malloc(4);
    call {:si_unique_call 420} vslice_dummy_var_3205 := __HAVOC_malloc(4);
    call {:si_unique_call 421} vslice_dummy_var_3206 := __HAVOC_malloc(12);
    call {:si_unique_call 422} vslice_dummy_var_3207 := __HAVOC_malloc(28);
    call {:si_unique_call 423} vslice_dummy_var_3208 := __HAVOC_malloc(12);
    call {:si_unique_call 424} vslice_dummy_var_3209 := __HAVOC_malloc(28);
    call {:si_unique_call 425} vslice_dummy_var_3210 := __HAVOC_malloc(12);
    assume {:mainInitDone} true;
    call {:si_unique_call 426} corralExtraInit();
    call {:si_unique_call 427} corralExplainErrorInit();
    call {:si_unique_call 428} _sdv_init53();
    call {:si_unique_call 429} _sdv_init22();
    call {:si_unique_call 430} _sdv_init45();
    call {:si_unique_call 431} _sdv_init18();
    call {:si_unique_call 432} _sdv_init19();
    call {:si_unique_call 433} _sdv_init32();
    call {:si_unique_call 434} _sdv_init17();
    call {:si_unique_call 435} _sdv_init50();
    call {:si_unique_call 436} _sdv_init1();
    call {:si_unique_call 437} _sdv_init28();
    call {:si_unique_call 438} _sdv_init23();
    call {:si_unique_call 439} _sdv_init25();
    call {:si_unique_call 440} _sdv_init40();
    call {:si_unique_call 441} _sdv_init47();
    call {:si_unique_call 442} _sdv_init44();
    call {:si_unique_call 443} _sdv_init49();
    call {:si_unique_call 444} _sdv_init4();
    call {:si_unique_call 445} _sdv_init5();
    call {:si_unique_call 446} _sdv_init3();
    call {:si_unique_call 447} _sdv_init30();
    call {:si_unique_call 448} _sdv_init16();
    call {:si_unique_call 449} _sdv_init24();
    call {:si_unique_call 450} _sdv_init14();
    call {:si_unique_call 451} _sdv_init21();
    call {:si_unique_call 452} _sdv_init33();
    call {:si_unique_call 453} _sdv_init37();
    call {:si_unique_call 454} _sdv_init36();
    call {:si_unique_call 455} _sdv_init6();
    call {:si_unique_call 456} _sdv_init15();
    call {:si_unique_call 457} _sdv_init41();
    call {:si_unique_call 458} _sdv_init27();
    call {:si_unique_call 459} _sdv_init10();
    call {:si_unique_call 460} _sdv_init26();
    call {:si_unique_call 461} _sdv_init38();
    call {:si_unique_call 462} _sdv_init42();
    call {:si_unique_call 463} _sdv_init11();
    call {:si_unique_call 464} _sdv_init9();
    call {:si_unique_call 465} _sdv_init31();
    call {:si_unique_call 466} _sdv_init12();
    call {:si_unique_call 467} _sdv_init46();
    call {:si_unique_call 468} _sdv_init13();
    call {:si_unique_call 469} _sdv_init39();
    call {:si_unique_call 470} _sdv_init7();
    call {:si_unique_call 471} _sdv_init34();
    call {:si_unique_call 472} _sdv_init8();
    call {:si_unique_call 473} _sdv_init35();
    call {:si_unique_call 474} _sdv_init51();
    call {:si_unique_call 475} _sdv_init48();
    call {:si_unique_call 476} _sdv_init29();
    call {:si_unique_call 477} _sdv_init43();
    call {:si_unique_call 478} _sdv_init2();
    call {:si_unique_call 479} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_116 := 0;
    goto L76;

  L76:
    assume Tmp_116 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_115 := 0;
    goto L80;

  L80:
    assume Tmp_115 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(sdv_irp)))] := sdv_harnessStackLocation;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(sdv_other_irp)))] := sdv_other_harnessStackLocation;
    call {:si_unique_call 480} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L74;

  L74:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L74;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_115 := 1;
    goto L80;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_116 := 1;
    goto L76;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data: int, actual_DataSize: int) returns (Tmp_117: int);
  free ensures {:va_keep} Tmp_117 == -1073741790 || Tmp_117 == -1073741816 || Tmp_117 == -1073741823 || Tmp_117 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data: int, actual_DataSize: int) returns (Tmp_117: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_117 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_117 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_117 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_117 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_8: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_8: int)
{
  var {:pointer} pirp_8: int;
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 481} vslice_dummy_var_29 := __HAVOC_malloc(4);
    pirp_8 := actual_pirp_8;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_8 == sdv_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_8 == sdv_other_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_8 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_8 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_3: int) returns (Tmp_121: int);
  free ensures {:va_keep} Tmp_121 == 0 || Tmp_121 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_3: int) returns (Tmp_121: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_121 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_121 := 1;
    goto L1;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines(actual_DeviceObject_7: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_6: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_123: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_123 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines(actual_DeviceObject_7: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_6: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_123: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 482} PowerState := __HAVOC_malloc(8);
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    Tmp_123 := CompletionFunction_2;
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 483} vslice_dummy_var_30 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DestinationString)] := SourceString;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "RtlCompareMemory"} {:osmodel} RtlCompareMemory(actual_Source1: int, actual_Source2: int, actual_Length_1: int) returns (Tmp_127: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "RtlCompareMemory"} {:osmodel} RtlCompareMemory(actual_Source1: int, actual_Source2: int, actual_Length_1: int) returns (Tmp_127: int)
{
  var {:scalar} r_3: int;
  var {:scalar} sdv_46: int;

  anon0:
    r_3 := sdv_46;
    Tmp_127 := r_3;
    return;
}



procedure {:origName "PsCreateSystemThread"} {:osmodel} PsCreateSystemThread(actual_ThreadHandle: int, actual_DesiredAccess_1: int, actual_ObjectAttributes_1: int, actual_ProcessHandle: int, actual_ClientId: int, actual_StartRoutine: int, actual_StartContext: int) returns (Tmp_129: int);
  free ensures {:va_keep} Tmp_129 == 0 || Tmp_129 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PsCreateSystemThread"} {:osmodel} PsCreateSystemThread(actual_ThreadHandle: int, actual_DesiredAccess_1: int, actual_ObjectAttributes_1: int, actual_ProcessHandle: int, actual_ClientId: int, actual_StartRoutine: int, actual_StartContext: int) returns (Tmp_129: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_129 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_129 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_2: int)
{
  var vslice_dummy_var_31: int;

  anon0:
    call {:si_unique_call 484} vslice_dummy_var_31 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeSemaphore"} {:osmodel} KeInitializeSemaphore(actual_Semaphore: int, actual_Count: int, actual_Limit: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "KeInitializeSemaphore"} {:osmodel} KeInitializeSemaphore(actual_Semaphore: int, actual_Count: int, actual_Limit: int)
{
  var vslice_dummy_var_32: int;

  anon0:
    call {:si_unique_call 485} vslice_dummy_var_32 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_1: int, actual_pirp_9: int) returns (Tmp_135: int);
  modifies Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, completion;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_1: int, actual_pirp_9: int) returns (Tmp_135: int)
{
  var {:pointer} ps_1: int;
  var {:scalar} status_4: int;
  var {:pointer} po_1: int;
  var {:pointer} pirp_9: int;

  anon0:
    po_1 := actual_po_1;
    pirp_9 := actual_pirp_9;
    status_4 := 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    ps_1 := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(pirp_9)))];
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(ps_1)] := 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_9))] := 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    call {:si_unique_call 486} sdv_SetStatus(pirp_9);
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(ps_1)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_harnessStackLocation)] := 0;
    call {:si_unique_call 487} sdv_stub_dispatch_begin();
    call {:si_unique_call 488} status_4 := PptDispatchPnp(po_1, pirp_9);
    call {:si_unique_call 489} sdv_stub_dispatch_end(status_4, 0);
    Tmp_135 := status_4;
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_33: int;

  anon0:
    call {:si_unique_call 490} vslice_dummy_var_33 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_34: int;

  anon0:
    call {:si_unique_call 491} vslice_dummy_var_34 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    return;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int)
{
  var vslice_dummy_var_35: int;

  anon0:
    call {:si_unique_call 492} vslice_dummy_var_35 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_36: int;

  anon0:
    call {:si_unique_call 493} vslice_dummy_var_36 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_145: int);
  free ensures {:va_keep} Tmp_145 == -1073741823 || Tmp_145 == -1073741808 || Tmp_145 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_145: int)
{
  var {:scalar} Tmp_146: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_145 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_145 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName_2)] == 0;
    Tmp_146 := 0;
    goto L22;

  L22:
    assume Tmp_146 != 0;
    Tmp_145 := 0;
    goto L1;

  anon8_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(SymbolicLinkName_2)] != 0;
    Tmp_146 := 1;
    goto L22;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_11: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_11: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_37: int;

  anon0:
    call {:si_unique_call 494} vslice_dummy_var_37 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int)
{
  var vslice_dummy_var_38: int;

  anon0:
    call {:si_unique_call 495} vslice_dummy_var_38 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine_1: int, actual_SynchronizeContext: int) returns (Tmp_152: int);
  free ensures {:va_keep} Tmp_152 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine_1: int, actual_SynchronizeContext: int) returns (Tmp_152: int)
{
  var {:scalar} b: int;
  var {:scalar} SynchronizeRoutine_1: int;

  anon0:
    SynchronizeRoutine_1 := actual_SynchronizeRoutine_1;
    call {:si_unique_call 496} b := sdv_RunKSynchronizeRoutines(SynchronizeRoutine_1, 0);
    Tmp_152 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_39: int;

  anon0:
    call {:si_unique_call 497} vslice_dummy_var_39 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_1: int) returns (Tmp_158: int);
  free ensures {:va_keep} Tmp_158 == -1073741823 || Tmp_158 == -1073741738 || Tmp_158 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_1: int) returns (Tmp_158: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_158 := -1073741823;
    goto L1;

  L1:
    call {:si_unique_call 498} SLIC_sdv_IoAcquireRemoveLock_exit(0, Tmp_158);
    return;

  anon5_Then:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_158 := -1073741738;
    goto L1;

  anon6_Then:
    Tmp_158 := 0;
    goto L1;
}



procedure {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int)
{
  var vslice_dummy_var_40: int;

  anon0:
    call {:si_unique_call 499} vslice_dummy_var_40 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_162: int);
  free ensures {:va_keep} Tmp_162 == 1 || Tmp_162 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_162: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_162 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_162 := 0;
    goto L1;
}



procedure {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_164: int);
  modifies Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_164: int)
{
  var {:pointer} irpSp_1: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 500} irpSp_1 := sdv_IoGetNextIrpStackLocation(sdv_other_irp);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpSp_1)] := 0;
    sdv_compFset := 0;
    Tmp_164 := sdv_other_irp;
    goto L1;

  L1:
    call {:si_unique_call 501} SLIC_IoAllocateIrp_exit(0, Tmp_164);
    return;

  anon3_Then:
    Tmp_164 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_8: int, actual_Irp_4: int) returns (Tmp_166: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_166 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_8: int, actual_Irp_4: int) returns (Tmp_166: int)
{
  var {:dopa} {:scalar} completion_2: int;
  var {:scalar} status_5: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_3211: int;
  var vslice_dummy_var_3212: int;
  var vslice_dummy_var_3213: int;
  var vslice_dummy_var_3214: int;

  anon0:
    call {:si_unique_call 502} completion_2 := __HAVOC_malloc(4);
    Irp_4 := actual_Irp_4;
    assume {:nonnull} completion_2 != 0;
    assume completion_2 > 0;
    Mem_T.INT4[completion_2] := 0;
    status_5 := 259;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_4))] := 259;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_4;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L19;

  L19:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  L29:
    Tmp_166 := status_5;
    return;

  anon47_Then:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3211;
    call {:si_unique_call 503} vslice_dummy_var_41 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_4, vslice_dummy_var_3211, completion_2);
    goto L29;

  anon46_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_4;
    goto L23;

  anon45_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_4;
    goto L21;

  anon65_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_4;
    goto L19;

  anon60_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_4))] := -1073741823;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_4;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L58;

  L58:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_invoke_on_error != 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3212;
    call {:si_unique_call 504} vslice_dummy_var_44 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_4, vslice_dummy_var_3212, completion_2);
    goto L29;

  anon59_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon58_Then:
    assume {:partition} sdv_invoke_on_error == 0;
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_4;
    goto L62;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_4;
    goto L60;

  anon66_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_4;
    goto L58;

  anon61_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_4))] := -1073741536;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_4;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L32;

  L32:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_invoke_on_cancel != 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3213;
    call {:si_unique_call 505} vslice_dummy_var_42 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_4, vslice_dummy_var_3213, completion_2);
    goto L29;

  anon51_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon50_Then:
    assume {:partition} sdv_invoke_on_cancel == 0;
    goto L29;

  anon49_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_4;
    goto L36;

  anon48_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_4;
    goto L34;

  anon64_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_4;
    goto L32;

  anon62_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_4))] := 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_4;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L45;

  L45:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_4;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_invoke_on_success != 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3214;
    call {:si_unique_call 506} vslice_dummy_var_43 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_4, vslice_dummy_var_3214, completion_2);
    goto L29;

  anon55_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon54_Then:
    assume {:partition} sdv_invoke_on_success == 0;
    goto L29;

  anon53_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_4;
    goto L49;

  anon52_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_4;
    goto L47;

  anon63_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_4;
    goto L45;
}



procedure {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_2: int) returns (Tmp_168: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_2: int) returns (Tmp_168: int)
{
  var {:scalar} p_3: int;

  anon0:
    Tmp_168 := p_3;
    return;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_2: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_45: int;

  anon0:
    call {:si_unique_call 507} vslice_dummy_var_45 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_2 := actual_Type_2;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_10: int, actual_Irp_6: int) returns (Tmp_174: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, s, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_174 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_10: int, actual_Irp_6: int) returns (Tmp_174: int)
{
  var {:pointer} Irp_6: int;

  anon0:
    Irp_6 := actual_Irp_6;
    call {:si_unique_call 508} Tmp_174 := IofCallDriver(0, Irp_6);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume Irp_6 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 509} SLIC_IofCallDriver_exit(0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume !(Irp_6 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L1;
}



procedure {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_11: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_2: int, actual_IoStatusBlock: int) returns (Tmp_176: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_11: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_2: int, actual_IoStatusBlock: int) returns (Tmp_176: int)
{
  var {:pointer} Tmp_177: int;
  var {:pointer} Tmp_179: int;
  var {:scalar} InternalDeviceIoControl: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    InternalDeviceIoControl := actual_InternalDeviceIoControl;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} InternalDeviceIoControl != 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    Tmp_177 := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(sdv_IoBuildDeviceIoControlRequest_irp)))];
    assume {:nonnull} Tmp_177 != 0;
    assume Tmp_177 > 0;
    goto L14;

  L14:
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatusBlock)] := 0;
    Tmp_176 := sdv_IoBuildDeviceIoControlRequest_irp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} InternalDeviceIoControl == 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    Tmp_179 := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(sdv_IoBuildDeviceIoControlRequest_irp)))];
    assume {:nonnull} Tmp_179 != 0;
    assume Tmp_179 > 0;
    goto L14;

  anon5_Then:
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatusBlock)] := -1073741823;
    Tmp_176 := 0;
    goto L1;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int)
{
  var {:pointer} p_4: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_3215: int;

  anon0:
    call {:si_unique_call 510} vslice_dummy_var_46 := __HAVOC_malloc(4);
    p_4 := actual_p_4;
    assume {:nonnull} p_4 != 0;
    assume p_4 > 0;
    havoc vslice_dummy_var_3215;
    Mem_T.INT4[p_4] := vslice_dummy_var_3215;
    return;
}



procedure {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_12: int)
{
  var vslice_dummy_var_47: int;

  anon0:
    call {:si_unique_call 511} vslice_dummy_var_47 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag_2: int) returns (Tmp_184: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag_2: int) returns (Tmp_184: int)
{
  var {:pointer} sdv_69: int;
  var {:scalar} NumberOfBytes: int;

  anon0:
    NumberOfBytes := actual_NumberOfBytes;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 512} sdv_69 := __HAVOC_malloc(NumberOfBytes);
    Tmp_184 := sdv_69;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_184 := 0;
    goto L1;
}



procedure {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_186: int);
  free ensures {:va_keep} Tmp_186 == 0 || Tmp_186 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_186: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_186 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_186 := -1073741823;
    goto L1;
}



procedure {:origName "_sdv_init51"} {:osmodel} _sdv_init51();
  modifies alloc, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, sdv_compFset;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init51"} {:osmodel} _sdv_init51()
{
  var vslice_dummy_var_48: int;

  anon0:
    call {:si_unique_call 513} vslice_dummy_var_48 := __HAVOC_malloc(4);
    assume sdv_dpc_io_registered == 0;
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    sdv_invoke_on_success := 0;
    sdv_invoke_on_error := 0;
    sdv_invoke_on_cancel := 0;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_remove_irp_already_issued == 0;
    sdv_compFset := 0;
    assume sdv_isr_routine == li2bplFunctionConstant1051;
    assume sdv_ke_dpc == li2bplFunctionConstant1053;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant1056;
    assume sdv_p_devobj_top == sdv_devobj_top;
    assume sdv_MmMapIoSpace_int == 0;
    return;
}



procedure {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_12: int) returns (Tmp_190: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_12: int) returns (Tmp_190: int)
{
  var {:pointer} ioWorkItem: int;
  var {:pointer} sdv_72: int;
  var {:scalar} Tmp_191: int;

  anon0:
    call {:si_unique_call 514} sdv_72 := __HAVOC_malloc(1);
    ioWorkItem := sdv_72;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ioWorkItem == 0;
    Tmp_191 := 0;
    goto L27;

  L27:
    assume Tmp_191 != 0;
    assume {:nonnull} ioWorkItem != 0;
    assume ioWorkItem > 0;
    Tmp_190 := ioWorkItem;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} ioWorkItem != 0;
    Tmp_191 := 1;
    goto L27;

  anon6_Then:
    Tmp_190 := 0;
    goto L1;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_193: int);
  free ensures {:va_keep} Tmp_193 == -1073741772 || Tmp_193 == -1073741824 || Tmp_193 == -1073741789 || Tmp_193 == -1073741670 || Tmp_193 == -1073741808 || Tmp_193 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_193: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_193 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_193 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_193 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_193 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_193 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_193 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_49: int;

  anon0:
    call {:si_unique_call 515} vslice_dummy_var_49 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_50: int;

  anon0:
    call {:si_unique_call 516} vslice_dummy_var_50 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_13: int, actual_DevInstKeyType: int, actual_DesiredAccess_2: int, actual_DevInstRegKey: int) returns (Tmp_199: int);
  free ensures {:va_keep} Tmp_199 == -1073741811 || Tmp_199 == -1073741808 || Tmp_199 == -1073741823 || Tmp_199 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_13: int, actual_DevInstKeyType: int, actual_DesiredAccess_2: int, actual_DevInstRegKey: int) returns (Tmp_199: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_199 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_199 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_199 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_199 := 0;
    goto L1;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_3: int) returns (Tmp_201: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_3: int) returns (Tmp_201: int)
{
  var {:scalar} p_5: int;

  anon0:
    Tmp_201 := p_5;
    return;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_203: int);
  free ensures {:va_keep} Tmp_203 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_203: int)
{

  anon0:
    Tmp_203 := 0;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_14: int, actual_Action: int) returns (Tmp_205: int);
  free ensures {:va_keep} Tmp_205 == -1073741823 || Tmp_205 == -1073741811 || Tmp_205 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_14: int, actual_Action: int) returns (Tmp_205: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_205 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_205 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_205 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int)
{
  var {:pointer} Event_3: int;
  var vslice_dummy_var_51: int;

  anon0:
    call {:si_unique_call 517} vslice_dummy_var_51 := __HAVOC_malloc(4);
    Event_3 := actual_Event_3;
    assume {:nonnull} Event_3 != 0;
    assume Event_3 > 0;
    return;
}



procedure {:origName "_sdv_init35"} _sdv_init35();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init35"} _sdv_init35()
{
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 518} vslice_dummy_var_52 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_53: int;

  anon0:
    call {:si_unique_call 519} vslice_dummy_var_53 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init34"} _sdv_init34();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init34"} _sdv_init34()
{
  var vslice_dummy_var_54: int;

  anon0:
    call {:si_unique_call 520} vslice_dummy_var_54 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_55: int;

  anon0:
    call {:si_unique_call 521} vslice_dummy_var_55 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init39"} _sdv_init39();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init39"} _sdv_init39()
{
  var vslice_dummy_var_56: int;

  anon0:
    call {:si_unique_call 522} vslice_dummy_var_56 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "P5SelectDaisyChainDevice"} P5SelectDaisyChainDevice(actual_Controller: int, actual_DeviceId: int) returns (Tmp_219: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_219 == 1 || Tmp_219 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5SelectDaisyChainDevice"} P5SelectDaisyChainDevice(actual_Controller: int, actual_DeviceId: int) returns (Tmp_219: int)
{
  var {:scalar} Tmp_220: int;
  var {:scalar} maxRetries: int;
  var {:scalar} selected: int;
  var {:scalar} retryCount: int;
  var {:pointer} Controller: int;
  var {:scalar} DeviceId: int;

  anon0:
    Controller := actual_Controller;
    DeviceId := actual_DeviceId;
    maxRetries := 4;
    retryCount := 0;
    selected := 0;
    goto L9;

  L9:
    call {:si_unique_call 523} Tmp_220, selected, retryCount := P5SelectDaisyChainDevice_loop_L9(Tmp_220, maxRetries, selected, retryCount, Controller, DeviceId);
    goto L9_last;

  L9_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} selected != 0;
    goto L11;

  L11:
    Tmp_219 := selected;
    return;

  anon5_Then:
    assume {:partition} selected == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} maxRetries > retryCount;
    Tmp_220 := BOR(BOR(BOR(32, 64), 128), DeviceId);
    call {:si_unique_call 524} selected := PptSend1284_3Command(Controller, Tmp_220);
    retryCount := retryCount + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} retryCount >= maxRetries;
    goto L11;
}



procedure {:origName "PptPnpStartValidateResources"} PptPnpStartValidateResources(actual_DeviceObject_15: int, actual_FoundPort: int, actual_FoundIrq: int, actual_FoundDma: int) returns (Tmp_222: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_222 == 0 || Tmp_222 == -1073741709 || Tmp_222 == -1073741810;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpStartValidateResources"} PptPnpStartValidateResources(actual_DeviceObject_15: int, actual_FoundPort: int, actual_FoundIrq: int, actual_FoundDma: int) returns (Tmp_222: int)
{
  var {:scalar} Tmp_223: int;
  var {:pointer} fdx: int;
  var {:scalar} status_6: int;
  var {:pointer} DeviceObject_15: int;
  var {:scalar} FoundPort: int;
  var vslice_dummy_var_3216: int;
  var vslice_dummy_var_3217: int;

  anon0:
    call {:si_unique_call 525} Tmp_223 := __HAVOC_malloc(20);
    DeviceObject_15 := actual_DeviceObject_15;
    FoundPort := actual_FoundPort;
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc fdx;
    status_6 := 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} FoundPort != 0;
    assume {:nonnull} fdx != 0;
    assume fdx > 0;
    assume {:nonnull} fdx != 0;
    assume fdx > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L12;

  L12:
    Tmp_222 := status_6;
    return;

  anon6_Then:
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    assume {:nonnull} fdx != 0;
    assume fdx > 0;
    havoc vslice_dummy_var_3216;
    havoc vslice_dummy_var_3217;
    call {:si_unique_call 526} PptLogError(vslice_dummy_var_3216, DeviceObject_15, vslice_dummy_var_3217, Tmp_223, 0, 0, 0, 10, 0, -1073283068);
    status_6 := -1073741709;
    goto L12;

  anon5_Then:
    assume {:partition} FoundPort == 0;
    status_6 := -1073741810;
    goto L12;
}



procedure {:origName "P4MakePdoDeviceName"} P4MakePdoDeviceName(actual_LptName: int, actual_PdoType: int, actual_DaisyChainId: int, actual_RetryNumber: int) returns (Tmp_225: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4MakePdoDeviceName"} P4MakePdoDeviceName(actual_LptName: int, actual_PdoType: int, actual_DaisyChainId: int, actual_RetryNumber: int) returns (Tmp_225: int)
{
  var {:scalar} legacyZipSuffix: int;
  var {:scalar} maxDaisyChainSuffix: int;
  var {:scalar} endOfChainSuffix: int;
  var {:scalar} sdv_78: int;
  var {:scalar} maxDeviceNameLength: int;
  var {:scalar} sdv_82: int;
  var {:pointer} buffer: int;
  var {:scalar} sdv_83: int;
  var {:pointer} sdv_84: int;
  var {:pointer} sdv_86: int;
  var {:scalar} lptNumber: int;
  var {:pointer} LptName: int;
  var {:scalar} PdoType: int;
  var {:scalar} DaisyChainId: int;
  var {:scalar} RetryNumber: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;

  anon0:
    LptName := actual_LptName;
    PdoType := actual_PdoType;
    DaisyChainId := actual_DaisyChainId;
    RetryNumber := actual_RetryNumber;
    call {:si_unique_call 527} vslice_dummy_var_57 := __HAVOC_malloc(96);
    call {:si_unique_call 528} vslice_dummy_var_58 := __HAVOC_malloc(92);
    call {:si_unique_call 529} vslice_dummy_var_59 := __HAVOC_malloc(108);
    call {:si_unique_call 530} vslice_dummy_var_60 := __HAVOC_malloc(80);
    maxDaisyChainSuffix := 3;
    endOfChainSuffix := 4;
    legacyZipSuffix := 5;
    buffer := 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} LptName != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} PdoType != 1;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} PdoType != 2;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} PdoType != 4;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} PdoType == 8;
    goto L27;

  L27:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_78 != 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_82 != 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_83 != 0;
    Tmp_225 := 0;
    goto L1;

  L1:
    return;

  anon35_Then:
    assume {:partition} sdv_83 == 0;
    lptNumber := 3;
    goto L41;

  L41:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} RetryNumber != 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} 9 < RetryNumber;
    goto L63;

  L63:
    Tmp_225 := buffer;
    goto L1;

  anon37_Then:
    assume {:partition} RetryNumber <= 9;
    maxDeviceNameLength := 44;
    call {:si_unique_call 531} sdv_84 := ExAllocatePoolWithTag(257, maxDeviceNameLength, -797810352);
    buffer := sdv_84;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} buffer == 0;
    goto L63;

  anon44_Then:
    assume {:partition} buffer != 0;
    call {:si_unique_call 532} sdv_RtlZeroMemory(0, maxDeviceNameLength);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 1 == PdoType;
    call {:si_unique_call 533} vslice_dummy_var_61 := corral_nondet();
    goto L63;

  anon38_Then:
    assume {:partition} 1 != PdoType;
    call {:si_unique_call 534} vslice_dummy_var_62 := corral_nondet();
    goto L63;

  anon36_Then:
    assume {:partition} RetryNumber == 0;
    maxDeviceNameLength := 40;
    call {:si_unique_call 535} sdv_86 := ExAllocatePoolWithTag(257, maxDeviceNameLength, -797810352);
    buffer := sdv_86;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 536} sdv_RtlZeroMemory(0, maxDeviceNameLength);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 1 == PdoType;
    call {:si_unique_call 537} vslice_dummy_var_63 := corral_nondet();
    goto L63;

  anon39_Then:
    assume {:partition} 1 != PdoType;
    call {:si_unique_call 538} vslice_dummy_var_64 := corral_nondet();
    goto L63;

  anon45_Then:
    assume {:partition} buffer == 0;
    goto L63;

  anon34_Then:
    assume {:partition} sdv_82 == 0;
    lptNumber := 2;
    goto L41;

  anon33_Then:
    assume {:partition} sdv_78 == 0;
    lptNumber := 1;
    goto L41;

  anon40_Then:
    assume {:partition} PdoType != 8;
    Tmp_225 := 0;
    goto L1;

  anon41_Then:
    assume {:partition} PdoType == 4;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} DaisyChainId > maxDaisyChainSuffix;
    Tmp_225 := 0;
    goto L1;

  anon32_Then:
    assume {:partition} maxDaisyChainSuffix >= DaisyChainId;
    goto L27;

  anon42_Then:
    assume {:partition} PdoType == 2;
    goto L27;

  anon31_Then:
    assume {:partition} PdoType == 1;
    goto L27;

  anon43_Then:
    assume {:partition} LptName == 0;
    Tmp_225 := 0;
    goto L1;
}



procedure {:origName "PptWriteMfgMdlToDevNode"} PptWriteMfgMdlToDevNode(actual_Pdo: int, actual_Mfg: int, actual_Mdl: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptWriteMfgMdlToDevNode"} PptWriteMfgMdlToDevNode(actual_Pdo: int, actual_Mfg: int, actual_Mdl: int)
{
  var {:scalar} maxLen: int;
  var {:scalar} bufLen: int;
  var {:pointer} Tmp_235: int;
  var {:scalar} Tmp_236: int;
  var {:scalar} sdv_87: int;
  var {:scalar} uniValueName: int;
  var {:scalar} mfgLen: int;
  var {:scalar} mdlLen: int;
  var {:scalar} sdv_91: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} buffer_1: int;
  var {:pointer} sdv_92: int;
  var {:scalar} Tmp_241: int;
  var {:scalar} Tmp_243: int;
  var {:scalar} status_7: int;
  var {:scalar} wcharCount: int;
  var {:pointer} Pdo: int;
  var {:pointer} Mfg: int;
  var {:pointer} Mdl: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 539} uniValueName := __HAVOC_malloc(12);
    call {:si_unique_call 540} vslice_dummy_var_65 := __HAVOC_malloc(4);
    Pdo := actual_Pdo;
    Mfg := actual_Mfg;
    Mdl := actual_Mdl;
    call {:si_unique_call 541} Tmp_235 := __HAVOC_malloc(92);
    call {:si_unique_call 542} Tmp_239 := __HAVOC_malloc(64);
    call {:si_unique_call 543} vslice_dummy_var_67 := __HAVOC_malloc(12);
    call {:si_unique_call 544} vslice_dummy_var_68 := __HAVOC_malloc(12);
    assume {:nonnull} Pdo != 0;
    assume Pdo > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mfg != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Mdl != 0;
    mfgLen := sdv_87;
    mdlLen := sdv_91;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} mfgLen > mdlLen;
    Tmp_236 := mfgLen;
    goto L24;

  L24:
    maxLen := Tmp_236;
    bufLen := (maxLen + 1) * 2;
    call {:si_unique_call 545} sdv_92 := ExAllocatePoolWithTag(257, bufLen, -797810352);
    buffer_1 := sdv_92;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} buffer_1 != 0;
    call {:si_unique_call 546} status_7 := IoOpenDeviceRegistryKey(0, 1, 983103, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_7 == 0;
    Tmp_235 := strConst__li2bpl5;
    call {:si_unique_call 547} RtlInitUnicodeString(uniValueName, Tmp_235);
    call {:si_unique_call 548} wcharCount := corral_nondet();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} wcharCount <= 0;
    goto L60;

  L60:
    Tmp_239 := strConst__li2bpl6;
    call {:si_unique_call 549} RtlInitUnicodeString(uniValueName, Tmp_239);
    call {:si_unique_call 550} wcharCount := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} wcharCount <= 0;
    goto L77;

  L77:
    call {:si_unique_call 551} vslice_dummy_var_66 := ZwClose(0);
    goto L39;

  L39:
    call {:si_unique_call 552} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} 0 < wcharCount;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} INTDIV(bufLen, 2) <= wcharCount;
    goto L77;

  anon24_Then:
    assume {:partition} wcharCount < INTDIV(bufLen, 2);
    Tmp_243 := (wcharCount + 1) * 2;
    call {:si_unique_call 553} status_7 := ZwSetValueKey(0, 0, 0, 1, 0, Tmp_243);
    goto L77;

  anon21_Then:
    assume {:partition} 0 < wcharCount;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} INTDIV(bufLen, 2) <= wcharCount;
    goto L60;

  anon22_Then:
    assume {:partition} wcharCount < INTDIV(bufLen, 2);
    Tmp_241 := (wcharCount + 1) * 2;
    call {:si_unique_call 554} status_7 := ZwSetValueKey(0, 0, 0, 1, 0, Tmp_241);
    goto L60;

  anon20_Then:
    assume {:partition} status_7 != 0;
    goto L39;

  anon27_Then:
    assume {:partition} buffer_1 == 0;
    goto L1;

  anon26_Then:
    assume {:partition} mdlLen >= mfgLen;
    Tmp_236 := mdlLen;
    goto L24;

  anon19_Then:
    assume {:partition} Mdl == 0;
    goto L1;

  anon25_Then:
    assume {:partition} Mfg == 0;
    goto L1;
}



procedure {:origName "P4SanitizeMultiSzId"} P4SanitizeMultiSzId(actual_WCharBuffer: int, actual_BufWCharCount: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4SanitizeMultiSzId"} P4SanitizeMultiSzId(actual_WCharBuffer: int, actual_BufWCharCount: int)
{
  var {:scalar} i: int;
  var {:pointer} p_6: int;
  var {:pointer} WCharBuffer: int;
  var {:scalar} BufWCharCount: int;
  var vslice_dummy_var_69: int;

  anon0:
    call {:si_unique_call 555} vslice_dummy_var_69 := __HAVOC_malloc(4);
    WCharBuffer := actual_WCharBuffer;
    BufWCharCount := actual_BufWCharCount;
    p_6 := WCharBuffer;
    i := 0;
    goto L7;

  L7:
    call {:si_unique_call 556} i := P4SanitizeMultiSzId_loop_L7(i, p_6, BufWCharCount);
    goto L7_last;

  L7_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BufWCharCount > i;
    assume {:nonnull} p_6 != 0;
    assume p_6 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[p_6] == 0;
    goto L13;

  L13:
    i := i + 1;
    goto L13_dummy;

  L13_dummy:
    assume false;
    return;

  anon12_Then:
    assume {:partition} Mem_T.INT4[p_6] != 0;
    assume {:nonnull} p_6 != 0;
    assume p_6 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 32 >= Mem_T.INT4[p_6];
    goto L12;

  L12:
    assume {:nonnull} p_6 != 0;
    assume p_6 > 0;
    Mem_T.INT4[p_6] := 95;
    goto L13;

  anon13_Then:
    assume {:partition} Mem_T.INT4[p_6] > 32;
    assume {:nonnull} p_6 != 0;
    assume p_6 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.INT4[p_6] <= 127;
    assume {:nonnull} p_6 != 0;
    assume p_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 44 != Mem_T.INT4[p_6];
    goto L13;

  anon15_Then:
    assume {:partition} 44 == Mem_T.INT4[p_6];
    goto L12;

  anon14_Then:
    assume {:partition} 127 < Mem_T.INT4[p_6];
    goto L12;

  anon11_Then:
    assume {:partition} i >= BufWCharCount;
    return;
}



procedure {:origName "PptIsPci"} PptIsPci(actual_Fdx: int, actual_Irp_7: int) returns (Tmp_248: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_248 == 0 || Tmp_248 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptIsPci"} PptIsPci(actual_Fdx: int, actual_Irp_7: int) returns (Tmp_248: int)
{
  var {:scalar} i_1: int;
  var {:pointer} FullResourceDescriptor: int;
  var {:pointer} irpStack: int;
  var {:scalar} largePortRangeFound: int;
  var {:pointer} PartialResourceDescriptor: int;
  var {:scalar} rangeLength: int;
  var {:pointer} Tmp_249: int;
  var {:scalar} Tmp_250: int;
  var {:pointer} Tmp_251: int;
  var {:pointer} ResourceList: int;
  var {:scalar} portResourceDescriptorCount: int;
  var {:pointer} PartialResourceList: int;
  var {:pointer} Irp_7: int;

  anon0:
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 557} Tmp_249 := __HAVOC_malloc(312);
    call {:si_unique_call 558} Tmp_251 := __HAVOC_malloc(292);
    call {:si_unique_call 559} irpStack := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    portResourceDescriptorCount := 0;
    largePortRangeFound := 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    havoc ResourceList;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ResourceList != 0;
    assume {:nonnull} ResourceList != 0;
    assume ResourceList > 0;
    havoc Tmp_249;
    FullResourceDescriptor := Tmp_249;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} FullResourceDescriptor != 0;
    assume {:nonnull} FullResourceDescriptor != 0;
    assume FullResourceDescriptor > 0;
    PartialResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(FullResourceDescriptor);
    i_1 := 0;
    goto L26;

  L26:
    call {:si_unique_call 560} i_1, largePortRangeFound, PartialResourceDescriptor, rangeLength, Tmp_250, Tmp_251, portResourceDescriptorCount := PptIsPci_loop_L26(i_1, largePortRangeFound, PartialResourceDescriptor, rangeLength, Tmp_250, Tmp_251, portResourceDescriptorCount, PartialResourceList);
    goto L26_last;

  L26_last:
    assume {:nonnull} PartialResourceList != 0;
    assume PartialResourceList > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    Tmp_250 := i_1;
    assume {:nonnull} PartialResourceList != 0;
    assume PartialResourceList > 0;
    havoc Tmp_251;
    PartialResourceDescriptor := Tmp_251 + Tmp_250 * 292;
    assume {:nonnull} PartialResourceDescriptor != 0;
    assume PartialResourceDescriptor > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} PartialResourceDescriptor != 0;
    assume PartialResourceDescriptor > 0;
    havoc rangeLength;
    portResourceDescriptorCount := portResourceDescriptorCount + 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} rangeLength > 8;
    largePortRangeFound := 1;
    goto L29;

  L29:
    i_1 := i_1 + 1;
    goto L29_dummy;

  L29_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} 8 >= rangeLength;
    goto L29;

  anon20_Then:
    goto L29;

  anon16_Then:
    goto L23;

  L23:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} portResourceDescriptorCount > 2;
    goto L37;

  L37:
    Tmp_248 := 1;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} 2 >= portResourceDescriptorCount;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 1 != largePortRangeFound;
    Tmp_248 := 0;
    goto L1;

  anon17_Then:
    assume {:partition} 1 == largePortRangeFound;
    goto L37;

  anon19_Then:
    assume {:partition} FullResourceDescriptor == 0;
    goto L23;

  anon18_Then:
    assume {:partition} ResourceList == 0;
    Tmp_248 := 0;
    goto L1;
}



procedure {:origName "PptPnpBounceAndCatchPnpIrp"} PptPnpBounceAndCatchPnpIrp(actual_Fdx_1: int, actual_Irp_8: int) returns (Tmp_253: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, completion, s;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpBounceAndCatchPnpIrp"} PptPnpBounceAndCatchPnpIrp(actual_Fdx_1: int, actual_Irp_8: int) returns (Tmp_253: int)
{
  var {:pointer} parentDevObj: int;
  var {:scalar} status_8: int;
  var {:scalar} event: int;
  var {:pointer} Fdx_1: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_70: int;

  anon0:
    call {:si_unique_call 561} event := __HAVOC_malloc(156);
    Fdx_1 := actual_Fdx_1;
    Irp_8 := actual_Irp_8;
    assume {:nonnull} Fdx_1 != 0;
    assume Fdx_1 > 0;
    havoc parentDevObj;
    call {:si_unique_call 562} KeInitializeEvent(event, 0, 0);
    call {:si_unique_call 563} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_8);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume Irp_8 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 564} SLIC_sdv_IoSetCompletionRoutine_entry(0);
    goto L28;

  L28:
    call {:si_unique_call 565} sdv_IoSetCompletionRoutine(Irp_8, li2bplFunctionConstant187, event, 1, 1, 1);
    call {:si_unique_call 566} status_8 := sdv_IoCallDriver(parentDevObj, Irp_8);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume Irp_8 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 567} SLIC_sdv_IoCallDriver_exit(0);
    goto L20;

  L20:
    call {:si_unique_call 568} vslice_dummy_var_70 := KeWaitForSingleObject(0, 5, 0, 0, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_8 == 259;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    status_8 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_8))];
    goto L24;

  L24:
    Tmp_253 := status_8;
    return;

  anon8_Then:
    assume {:partition} status_8 != 259;
    goto L24;

  anon9_Then:
    assume !(Irp_8 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L20;

  anon7_Then:
    assume !(Irp_8 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L28;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_71: int;

  anon0:
    call {:si_unique_call 569} vslice_dummy_var_71 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPnpListContainsIrqResourceDescriptor"} PptPnpListContainsIrqResourceDescriptor(actual_List: int) returns (Tmp_257: int);
  free ensures {:va_keep} Tmp_257 == 1 || Tmp_257 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpListContainsIrqResourceDescriptor"} PptPnpListContainsIrqResourceDescriptor(actual_List: int) returns (Tmp_257: int)
{
  var {:scalar} i_2: int;
  var {:pointer} curDesc: int;
  var {:pointer} List: int;

  anon0:
    List := actual_List;
    assume {:nonnull} List != 0;
    assume List > 0;
    havoc curDesc;
    i_2 := 0;
    goto L7;

  L7:
    call {:si_unique_call 570} i_2 := PptPnpListContainsIrqResourceDescriptor_loop_L7(i_2, curDesc, List);
    goto L7_last;

  L7_last:
    assume {:nonnull} List != 0;
    assume List > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} curDesc != 0;
    assume curDesc > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_257 := 1;
    goto L1;

  L1:
    return;

  anon6_Then:
    i_2 := i_2 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    Tmp_257 := 0;
    goto L1;
}



procedure {:origName "PptPnpPassThroughPnpIrpAndReleaseRemoveLock"} PptPnpPassThroughPnpIrpAndReleaseRemoveLock(actual_Fdx_2: int, actual_Irp_9: int) returns (Tmp_259: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_259 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpPassThroughPnpIrpAndReleaseRemoveLock"} PptPnpPassThroughPnpIrpAndReleaseRemoveLock(actual_Fdx_2: int, actual_Irp_9: int) returns (Tmp_259: int)
{
  var {:scalar} status_9: int;
  var {:pointer} Fdx_2: int;
  var {:pointer} Irp_9: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_3218: int;

  anon0:
    Fdx_2 := actual_Fdx_2;
    Irp_9 := actual_Irp_9;
    call {:si_unique_call 571} sdv_IoSkipCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} Fdx_2 != 0;
    assume Fdx_2 > 0;
    havoc vslice_dummy_var_3218;
    call {:si_unique_call 572} status_9 := sdv_IoCallDriver(vslice_dummy_var_3218, Irp_9);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume Irp_9 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 573} SLIC_sdv_IoCallDriver_exit(0);
    goto L11;

  L11:
    assume {:nonnull} Fdx_2 != 0;
    assume Fdx_2 > 0;
    call {:si_unique_call 574} vslice_dummy_var_72 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(Fdx_2), Irp_9);
    Tmp_259 := status_9;
    return;

  anon3_Then:
    assume !(Irp_9 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L11;
}



procedure {:origName "P5MarkPdoAsHardwareGone"} P5MarkPdoAsHardwareGone(actual_Fdo: int, actual_PdoType_1: int, actual_DaisyChainId_1: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5MarkPdoAsHardwareGone"} P5MarkPdoAsHardwareGone(actual_Fdo: int, actual_PdoType_1: int, actual_DaisyChainId_1: int)
{
  var {:scalar} Tmp_262: int;
  var {:pointer} pdx_1: int;
  var {:scalar} Tmp_264: int;
  var {:pointer} pdo: int;
  var {:pointer} fdx_1: int;
  var {:pointer} Tmp_265: int;
  var {:pointer} Tmp_266: int;
  var {:pointer} Fdo: int;
  var {:scalar} PdoType_1: int;
  var {:scalar} DaisyChainId_1: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 575} vslice_dummy_var_73 := __HAVOC_malloc(4);
    Fdo := actual_Fdo;
    PdoType_1 := actual_PdoType_1;
    DaisyChainId_1 := actual_DaisyChainId_1;
    call {:si_unique_call 576} Tmp_265 := __HAVOC_malloc(16);
    call {:si_unique_call 577} Tmp_266 := __HAVOC_malloc(16);
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    havoc fdx_1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} PdoType_1 != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} PdoType_1 != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} PdoType_1 != 4;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} PdoType_1 == 8;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    havoc pdo;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    goto L15;

  L15:
    assume {:nonnull} pdo != 0;
    assume pdo > 0;
    havoc pdx_1;
    call {:si_unique_call 578} P5DeletePdoSymLink(pdo);
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    assume {:nonnull} pdx_1 != 0;
    assume pdx_1 > 0;
    call {:si_unique_call 579} vslice_dummy_var_74 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(fdx_1), DevDeletionList__PDO_EXTENSION(pdx_1));
    assume {:nonnull} pdx_1 != 0;
    assume pdx_1 > 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} PdoType_1 != 8;
    goto L1;

  anon10_Then:
    assume {:partition} PdoType_1 == 4;
    Tmp_264 := DaisyChainId_1;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    havoc Tmp_265;
    assume {:nonnull} Tmp_265 != 0;
    assume Tmp_265 > 0;
    havoc pdo;
    Tmp_262 := DaisyChainId_1;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    havoc Tmp_266;
    assume {:nonnull} Tmp_266 != 0;
    assume Tmp_266 > 0;
    goto L15;

  anon11_Then:
    assume {:partition} PdoType_1 == 2;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    havoc pdo;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    goto L15;

  anon12_Then:
    assume {:partition} PdoType_1 == 1;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    havoc pdo;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    goto L15;
}



procedure {:origName "P5DeletePdoSymLink"} P5DeletePdoSymLink(actual_Pdo_1: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5DeletePdoSymLink"} P5DeletePdoSymLink(actual_Pdo_1: int)
{
  var {:pointer} pdx_2: int;
  var {:scalar} uniSymLinkName: int;
  var {:pointer} Pdo_1: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_3219: int;

  anon0:
    call {:si_unique_call 580} uniSymLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 581} vslice_dummy_var_75 := __HAVOC_malloc(4);
    Pdo_1 := actual_Pdo_1;
    assume {:nonnull} Pdo_1 != 0;
    assume Pdo_1 > 0;
    havoc pdx_2;
    assume {:nonnull} pdx_2 != 0;
    assume pdx_2 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pdx_2 != 0;
    assume pdx_2 > 0;
    havoc vslice_dummy_var_3219;
    call {:si_unique_call 582} RtlInitUnicodeString(uniSymLinkName, vslice_dummy_var_3219);
    call {:si_unique_call 583} vslice_dummy_var_76 := IoDeleteSymbolicLink(0);
    call {:si_unique_call 584} sdv_ExFreePool(0);
    assume {:nonnull} pdx_2 != 0;
    assume pdx_2 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "PptPnpFilterExistsNonIrqResourceList"} PptPnpFilterExistsNonIrqResourceList(actual_ResourceRequirementsList: int) returns (Tmp_269: int);
  free ensures {:va_keep} Tmp_269 == 1 || Tmp_269 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpFilterExistsNonIrqResourceList"} PptPnpFilterExistsNonIrqResourceList(actual_ResourceRequirementsList: int) returns (Tmp_269: int)
{
  var {:scalar} i_3: int;
  var {:scalar} remain: int;
  var {:scalar} listCount: int;
  var {:pointer} curList: int;
  var {:scalar} foundIrq: int;
  var {:pointer} curDesc_1: int;
  var {:pointer} ResourceRequirementsList: int;

  anon0:
    ResourceRequirementsList := actual_ResourceRequirementsList;
    assume {:nonnull} ResourceRequirementsList != 0;
    assume ResourceRequirementsList > 0;
    havoc listCount;
    i_3 := 0;
    assume {:nonnull} ResourceRequirementsList != 0;
    assume ResourceRequirementsList > 0;
    havoc curList;
    goto L9;

  L9:
    call {:si_unique_call 585} i_3, remain, curList, foundIrq, curDesc_1 := PptPnpFilterExistsNonIrqResourceList_loop_L9(i_3, remain, listCount, curList, foundIrq, curDesc_1);
    goto L9_last;

  L9_last:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} listCount > i_3;
    assume {:nonnull} curList != 0;
    assume curList > 0;
    havoc remain;
    assume {:nonnull} curList != 0;
    assume curList > 0;
    havoc curDesc_1;
    foundIrq := 0;
    goto L17;

  L17:
    call {:si_unique_call 586} remain := PptPnpFilterExistsNonIrqResourceList_loop_L17(remain, curDesc_1);
    goto L17_last;

  L17_last:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} remain != 0;
    assume {:nonnull} curDesc_1 != 0;
    assume curDesc_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    foundIrq := 1;
    goto L18;

  L18:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} foundIrq != 0;
    assume {:nonnull} curList != 0;
    assume curList > 0;
    havoc curList;
    i_3 := i_3 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} foundIrq == 0;
    Tmp_269 := 1;
    goto L1;

  L1:
    return;

  anon12_Then:
    remain := remain - 1;
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    assume false;
    return;

  anon10_Then:
    assume {:partition} remain == 0;
    goto L18;

  anon9_Then:
    assume {:partition} i_3 >= listCount;
    Tmp_269 := 0;
    goto L1;
}



procedure {:origName "P5DeselectAllDaisyChainDevices"} P5DeselectAllDaisyChainDevices(actual_Controller_1: int) returns (Tmp_271: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_271 == 1 || Tmp_271 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5DeselectAllDaisyChainDevices"} P5DeselectAllDaisyChainDevices(actual_Controller_1: int) returns (Tmp_271: int)
{
  var {:scalar} maxRetries_1: int;
  var {:scalar} deselected: int;
  var {:scalar} retryCount_1: int;
  var {:pointer} Controller_1: int;

  anon0:
    Controller_1 := actual_Controller_1;
    maxRetries_1 := 4;
    retryCount_1 := 0;
    deselected := 0;
    goto L9;

  L9:
    call {:si_unique_call 587} deselected, retryCount_1 := P5DeselectAllDaisyChainDevices_loop_L9(maxRetries_1, deselected, retryCount_1, Controller_1);
    goto L9_last;

  L9_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} deselected != 0;
    goto L11;

  L11:
    Tmp_271 := deselected;
    return;

  anon5_Then:
    assume {:partition} deselected == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} maxRetries_1 > retryCount_1;
    call {:si_unique_call 588} deselected := PptSend1284_3Command(Controller_1, 48);
    retryCount_1 := retryCount_1 + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} retryCount_1 >= maxRetries_1;
    goto L11;
}



procedure {:origName "PptPnpFilterNukeIrqResourceDescriptorsFromAllLists"} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists(actual_ResourceRequirementsList_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpFilterNukeIrqResourceDescriptorsFromAllLists"} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists(actual_ResourceRequirementsList_1: int)
{
  var {:scalar} i_4: int;
  var {:scalar} listCount_1: int;
  var {:pointer} curList_1: int;
  var {:pointer} ResourceRequirementsList_1: int;
  var vslice_dummy_var_77: int;

  anon0:
    call {:si_unique_call 589} vslice_dummy_var_77 := __HAVOC_malloc(4);
    ResourceRequirementsList_1 := actual_ResourceRequirementsList_1;
    assume {:nonnull} ResourceRequirementsList_1 != 0;
    assume ResourceRequirementsList_1 > 0;
    havoc listCount_1;
    i_4 := 0;
    assume {:nonnull} ResourceRequirementsList_1 != 0;
    assume ResourceRequirementsList_1 > 0;
    havoc curList_1;
    goto L9;

  L9:
    call {:si_unique_call 590} i_4, curList_1 := PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(i_4, listCount_1, curList_1);
    goto L9_last;

  L9_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} listCount_1 > i_4;
    call {:si_unique_call 591} PptPnpFilterNukeIrqResourceDescriptors(curList_1);
    assume {:nonnull} curList_1 != 0;
    assume curList_1 > 0;
    havoc curList_1;
    i_4 := i_4 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_4 >= listCount_1;
    return;
}



procedure {:origName "PptPnpStartScanPciCardCmResourceList"} PptPnpStartScanPciCardCmResourceList(actual_Fdx_3: int, actual_Irp_10: int, actual_FoundPort_1: int, actual_FoundIrq_1: int, actual_FoundDma_1: int) returns (Tmp_275: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_275 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpStartScanPciCardCmResourceList"} PptPnpStartScanPciCardCmResourceList(actual_Fdx_3: int, actual_Irp_10: int, actual_FoundPort_1: int, actual_FoundIrq_1: int, actual_FoundDma_1: int) returns (Tmp_275: int)
{
  var {:scalar} i_5: int;
  var {:pointer} irpStack_1: int;
  var {:pointer} FullResourceDescriptor_1: int;
  var {:pointer} Tmp_276: int;
  var {:pointer} PartialResourceDescriptor_1: int;
  var {:scalar} length: int;
  var {:scalar} Tmp_277: int;
  var {:pointer} ResourceList_1: int;
  var {:scalar} status_11: int;
  var {:pointer} Tmp_279: int;
  var {:pointer} PartialResourceList_1: int;
  var {:pointer} Fdx_3: int;
  var {:pointer} Irp_10: int;
  var {:pointer} FoundPort_1: int;
  var {:pointer} FoundIrq_1: int;
  var {:pointer} FoundDma_1: int;

  anon0:
    Fdx_3 := actual_Fdx_3;
    Irp_10 := actual_Irp_10;
    FoundPort_1 := actual_FoundPort_1;
    FoundIrq_1 := actual_FoundIrq_1;
    FoundDma_1 := actual_FoundDma_1;
    call {:si_unique_call 592} Tmp_276 := __HAVOC_malloc(312);
    call {:si_unique_call 593} Tmp_279 := __HAVOC_malloc(292);
    status_11 := 0;
    call {:si_unique_call 594} irpStack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_10);
    assume {:nonnull} FoundPort_1 != 0;
    assume FoundPort_1 > 0;
    Mem_T.INT4[FoundPort_1] := 0;
    assume {:nonnull} FoundIrq_1 != 0;
    assume FoundIrq_1 > 0;
    Mem_T.INT4[FoundIrq_1] := 0;
    assume {:nonnull} FoundDma_1 != 0;
    assume FoundDma_1 > 0;
    Mem_T.INT4[FoundDma_1] := 0;
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    havoc ResourceList_1;
    assume {:nonnull} ResourceList_1 != 0;
    assume ResourceList_1 > 0;
    havoc Tmp_276;
    FullResourceDescriptor_1 := Tmp_276;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} FullResourceDescriptor_1 != 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} FullResourceDescriptor_1 != 0;
    assume FullResourceDescriptor_1 > 0;
    assume {:nonnull} FullResourceDescriptor_1 != 0;
    assume FullResourceDescriptor_1 > 0;
    PartialResourceList_1 := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(FullResourceDescriptor_1);
    i_5 := 0;
    goto L26;

  L26:
    call {:si_unique_call 595} i_5, PartialResourceDescriptor_1, length, Tmp_277, Tmp_279 := PptPnpStartScanPciCardCmResourceList_loop_L26(i_5, PartialResourceDescriptor_1, length, Tmp_277, Tmp_279, PartialResourceList_1, Fdx_3, FoundPort_1, FoundIrq_1);
    goto L26_last;

  L26_last:
    assume {:nonnull} PartialResourceList_1 != 0;
    assume PartialResourceList_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_277 := i_5;
    assume {:nonnull} PartialResourceList_1 != 0;
    assume PartialResourceList_1 > 0;
    havoc Tmp_279;
    PartialResourceDescriptor_1 := Tmp_279 + Tmp_277 * 292;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L34;

  L34:
    i_5 := i_5 + 1;
    goto L34_dummy;

  L34_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto L34;

  anon21_Then:
    goto L34;

  anon22_Then:
    assume {:nonnull} FoundIrq_1 != 0;
    assume FoundIrq_1 > 0;
    Mem_T.INT4[FoundIrq_1] := 1;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    goto L34;

  anon27_Then:
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    goto L34;

  anon25_Then:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    havoc length;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} length != 4;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} length == 8;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} FoundPort_1 != 0;
    assume FoundPort_1 > 0;
    Mem_T.INT4[FoundPort_1] := 1;
    goto L34;

  anon23_Then:
    assume {:partition} length != 8;
    goto L34;

  anon26_Then:
    assume {:partition} length == 4;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto L34;

  anon19_Then:
    goto L22;

  L22:
    Tmp_275 := status_11;
    return;

  anon24_Then:
    assume {:partition} FullResourceDescriptor_1 == 0;
    goto L22;
}



procedure {:origName "P4CreatePdo"} P4CreatePdo(actual_Fdo_1: int, actual_PdoType_2: int, actual_DaisyChainId_2: int, actual_Ieee1284Id: int) returns (Tmp_280: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4CreatePdo"} P4CreatePdo(actual_Fdo_1: int, actual_PdoType_2: int, actual_DaisyChainId_2: int, actual_Ieee1284Id: int) returns (Tmp_280: int)
{
  var {:dopa} {:scalar} DeviceIdSize: int;
  var {:scalar} retryNumber: int;
  var {:pointer} pdx_3: int;
  var {:scalar} bBuildStlDeviceId: int;
  var {:scalar} symLinkName: int;
  var {:scalar} deviceName: int;
  var {:pointer} PortInfo: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} pdo_1: int;
  var {:pointer} fdx_2: int;
  var {:scalar} status_12: int;
  var {:scalar} createdSymLink: int;
  var {:pointer} wstrSymLinkName: int;
  var {:pointer} wstrDeviceName: int;
  var {:pointer} lptName: int;
  var {:pointer} Fdo_1: int;
  var {:scalar} PdoType_2: int;
  var {:scalar} DaisyChainId_2: int;
  var {:pointer} Ieee1284Id: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_3220: int;
  var vslice_dummy_var_3221: int;

  anon0:
    call {:si_unique_call 596} DeviceIdSize := __HAVOC_malloc(4);
    call {:si_unique_call 597} symLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 598} deviceName := __HAVOC_malloc(12);
    call {:si_unique_call 599} pdo_1 := __HAVOC_malloc(4);
    Fdo_1 := actual_Fdo_1;
    PdoType_2 := actual_PdoType_2;
    DaisyChainId_2 := actual_DaisyChainId_2;
    Ieee1284Id := actual_Ieee1284Id;
    assume {:nonnull} Fdo_1 != 0;
    assume Fdo_1 > 0;
    havoc fdx_2;
    assume {:nonnull} fdx_2 != 0;
    assume fdx_2 > 0;
    havoc lptName;
    status_12 := -1073741823;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    wstrDeviceName := 0;
    wstrSymLinkName := 0;
    createdSymLink := 0;
    retryNumber := 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} lptName == 0;
    goto L64;

  L64:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_12 != 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} createdSymLink != 0;
    call {:si_unique_call 600} vslice_dummy_var_78 := IoDeleteSymbolicLink(0);
    goto L67;

  L67:
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 601} IoDeleteDevice(0);
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    goto L71;

  L71:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} wstrDeviceName != 0;
    call {:si_unique_call 602} sdv_ExFreePool(0);
    goto L76;

  L76:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} wstrSymLinkName != 0;
    call {:si_unique_call 603} sdv_ExFreePool(0);
    goto L65;

  L65:
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc Tmp_280;
    return;

  anon39_Then:
    assume {:partition} wstrSymLinkName == 0;
    goto L65;

  anon38_Then:
    assume {:partition} wstrDeviceName == 0;
    goto L76;

  anon37_Then:
    goto L71;

  anon36_Then:
    assume {:partition} createdSymLink == 0;
    goto L67;

  anon35_Then:
    assume {:partition} status_12 == 0;
    goto L65;

  anon46_Then:
    assume {:partition} lptName != 0;
    goto L23;

  L23:
    call {:si_unique_call 604} retryNumber, status_12, wstrDeviceName := P4CreatePdo_loop_L23(retryNumber, deviceName, pdo_1, status_12, wstrDeviceName, lptName, PdoType_2, DaisyChainId_2);
    goto L23_last;

  L23_last:
    call {:si_unique_call 618} wstrDeviceName := P4MakePdoDeviceName(lptName, PdoType_2, DaisyChainId_2, retryNumber);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} wstrDeviceName == 0;
    goto L64;

  anon33_Then:
    assume {:partition} wstrDeviceName != 0;
    call {:si_unique_call 605} RtlInitUnicodeString(deviceName, wstrDeviceName);
    call {:si_unique_call 606} status_12 := IoCreateDevice(0, 1248, 0, 22, 256, 1, pdo_1);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_12 != 0;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} -1073741771 != status_12;
    goto L64;

  anon47_Then:
    assume {:partition} -1073741771 == status_12;
    call {:si_unique_call 607} sdv_ExFreePool(0);
    retryNumber := retryNumber + 1;
    goto anon47_Then_dummy;

  anon47_Then_dummy:
    assume false;
    return;

  anon34_Then:
    assume {:partition} status_12 == 0;
    retryNumber := 0;
    goto L83;

  L83:
    call {:si_unique_call 608} retryNumber, status_12, wstrSymLinkName := P4CreatePdo_loop_L83(retryNumber, symLinkName, status_12, wstrSymLinkName, lptName, PdoType_2, DaisyChainId_2);
    goto L83_last;

  L83_last:
    call {:si_unique_call 617} wstrSymLinkName := P4MakePdoSymLinkName(lptName, PdoType_2, DaisyChainId_2, retryNumber);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} wstrSymLinkName != 0;
    call {:si_unique_call 609} RtlInitUnicodeString(symLinkName, wstrSymLinkName);
    call {:si_unique_call 610} status_12 := IoCreateUnprotectedSymbolicLink(0, 0);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_12 != 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} -1073741771 == status_12;
    call {:si_unique_call 611} sdv_ExFreePool(0);
    retryNumber := retryNumber + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} -1073741771 != status_12;
    goto L64;

  anon41_Then:
    assume {:partition} status_12 == 0;
    createdSymLink := 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Ieee1284Id != 0;
    goto L107;

  L107:
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc vslice_dummy_var_3220;
    call {:si_unique_call 612} vslice_dummy_var_79 := P4InitializePdo(Fdo_1, vslice_dummy_var_3220, PdoType_2, DaisyChainId_2, Ieee1284Id, wstrDeviceName, wstrSymLinkName);
    goto L64;

  anon48_Then:
    assume {:partition} Ieee1284Id == 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} 4 == PdoType_2;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc pdx_3;
    assume {:nonnull} fdx_2 != 0;
    assume fdx_2 > 0;
    PortInfo := PortInfo__FDO_EXTENSION(fdx_2);
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    Tmp_282 := DaisyChainId_2;
    call {:si_unique_call 613} bBuildStlDeviceId := ParStlCheckIfStl(pdx_3, Tmp_282);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} 1 == bBuildStlDeviceId;
    call {:si_unique_call 614} Ieee1284Id := ParStlQueryStlDeviceId(pdx_3, 0, 0, DeviceIdSize, 0);
    goto L123;

  L123:
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc vslice_dummy_var_3221;
    call {:si_unique_call 615} vslice_dummy_var_80 := P4InitializePdo(Fdo_1, vslice_dummy_var_3221, PdoType_2, DaisyChainId_2, Ieee1284Id, wstrDeviceName, wstrSymLinkName);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Ieee1284Id != 0;
    call {:si_unique_call 616} sdv_ExFreePool(0);
    Ieee1284Id := 0;
    goto L64;

  anon45_Then:
    assume {:partition} Ieee1284Id == 0;
    goto L64;

  anon44_Then:
    assume {:partition} 1 != bBuildStlDeviceId;
    goto L123;

  anon43_Then:
    assume {:partition} 4 != PdoType_2;
    goto L107;

  anon40_Then:
    assume {:partition} wstrSymLinkName == 0;
    goto L64;
}



procedure {:origName "P4InitializePdo"} P4InitializePdo(actual_Fdo_2: int, actual_Pdo_2: int, actual_PdoType_3: int, actual_DaisyChainId_3: int, actual_Ieee1284Id_1: int, actual_PdoName: int, actual_SymLinkName: int) returns (Tmp_283: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_283 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4InitializePdo"} P4InitializePdo(actual_Fdo_2: int, actual_Pdo_2: int, actual_PdoType_3: int, actual_DaisyChainId_3: int, actual_Ieee1284Id_1: int, actual_PdoName: int, actual_SymLinkName: int) returns (Tmp_283: int)
{
  var {:pointer} buffer_2: int;
  var {:pointer} copyOfIeee1284Id: int;
  var {:scalar} bufLen_1: int;
  var {:scalar} bufLen_2: int;
  var {:pointer} aid: int;
  var {:pointer} des: int;
  var {:pointer} cls: int;
  var {:scalar} tmpBufLen: int;
  var {:pointer} rawPortMdl: int;
  var {:pointer} sdv_117: int;
  var {:pointer} rawPortMfg: int;
  var {:pointer} legacyZipMfg: int;
  var {:pointer} buffer_3: int;
  var {:scalar} Tmp_286: int;
  var {:scalar} length_1: int;
  var {:scalar} sdv_120: int;
  var {:scalar} Tmp_288: int;
  var {:pointer} tmpBuffer: int;
  var {:pointer} pdx_4: int;
  var {:scalar} sdv_121: int;
  var {:pointer} legacyZipMdl: int;
  var {:scalar} mfgLen_1: int;
  var {:scalar} Tmp_289: int;
  var {:pointer} sdv_124: int;
  var {:scalar} mdlLen_1: int;
  var {:pointer} sdv_126: int;
  var {:pointer} mfg: int;
  var {:pointer} sdv_127: int;
  var {:pointer} sdv_128: int;
  var {:pointer} buffer_4: int;
  var {:pointer} sdv_131: int;
  var {:scalar} sdv_132: int;
  var {:scalar} bufLen_3: int;
  var {:pointer} sdv_134: int;
  var {:scalar} sdv_135: int;
  var {:pointer} buffer_5: int;
  var {:pointer} cid: int;
  var {:scalar} sdv_136: int;
  var {:pointer} buffer_6: int;
  var {:pointer} sdv_137: int;
  var {:pointer} sdv_138: int;
  var {:scalar} bufLen_4: int;
  var {:pointer} sdv_139: int;
  var {:pointer} mdl: int;
  var {:scalar} sdv_140: int;
  var {:pointer} sdv_141: int;
  var {:pointer} Fdo_2: int;
  var {:pointer} Pdo_2: int;
  var {:scalar} PdoType_3: int;
  var {:scalar} DaisyChainId_3: int;
  var {:pointer} Ieee1284Id_1: int;
  var {:pointer} PdoName: int;
  var {:pointer} SymLinkName: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;

  anon0:
    call {:si_unique_call 619} aid := __HAVOC_malloc(4);
    call {:si_unique_call 620} des := __HAVOC_malloc(4);
    call {:si_unique_call 621} cls := __HAVOC_malloc(4);
    call {:si_unique_call 622} mfg := __HAVOC_malloc(4);
    call {:si_unique_call 623} cid := __HAVOC_malloc(4);
    call {:si_unique_call 624} mdl := __HAVOC_malloc(4);
    Fdo_2 := actual_Fdo_2;
    Pdo_2 := actual_Pdo_2;
    PdoType_3 := actual_PdoType_3;
    DaisyChainId_3 := actual_DaisyChainId_3;
    Ieee1284Id_1 := actual_Ieee1284Id_1;
    PdoName := actual_PdoName;
    SymLinkName := actual_SymLinkName;
    call {:si_unique_call 625} vslice_dummy_var_81 := __HAVOC_malloc(12);
    call {:si_unique_call 626} rawPortMdl := __HAVOC_malloc(32);
    call {:si_unique_call 627} rawPortMfg := __HAVOC_malloc(40);
    call {:si_unique_call 628} legacyZipMfg := __HAVOC_malloc(16);
    call {:si_unique_call 629} vslice_dummy_var_82 := __HAVOC_malloc(20);
    call {:si_unique_call 630} vslice_dummy_var_83 := __HAVOC_malloc(60);
    call {:si_unique_call 631} legacyZipMdl := __HAVOC_malloc(16);
    call {:si_unique_call 632} vslice_dummy_var_84 := __HAVOC_malloc(28);
    call {:si_unique_call 633} vslice_dummy_var_85 := __HAVOC_malloc(20);
    assume {:nonnull} Fdo_2 != 0;
    assume Fdo_2 > 0;
    assume {:nonnull} Pdo_2 != 0;
    assume Pdo_2 > 0;
    havoc pdx_4;
    assume {:nonnull} Pdo_2 != 0;
    assume Pdo_2 > 0;
    assume {:nonnull} Fdo_2 != 0;
    assume Fdo_2 > 0;
    assume {:nonnull} Pdo_2 != 0;
    assume Pdo_2 > 0;
    assume {:nonnull} Fdo_2 != 0;
    assume Fdo_2 > 0;
    assume {:nonnull} Pdo_2 != 0;
    assume Pdo_2 > 0;
    call {:si_unique_call 634} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Ieee1284Id_1 == 0;
    rawPortMfg := strConst__li2bpl11;
    rawPortMdl := strConst__li2bpl13;
    legacyZipMfg := strConst__li2bpl14;
    legacyZipMdl := strConst__li2bpl15;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} 1 == PdoType_3;
    mfgLen_1 := 10;
    mdlLen_1 := 8;
    goto L258;

  L258:
    call {:si_unique_call 635} sdv_134 := ExAllocatePoolWithTag(257, mfgLen_1, -797810352);
    buffer_5 := sdv_134;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} buffer_5 != 0;
    call {:si_unique_call 636} sdv_RtlZeroMemory(0, mfgLen_1);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L263;

  L263:
    call {:si_unique_call 637} sdv_138 := ExAllocatePoolWithTag(257, mdlLen_1, -797810352);
    buffer_5 := sdv_138;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} buffer_5 != 0;
    call {:si_unique_call 638} sdv_RtlZeroMemory(0, mdlLen_1);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L275;

  L275:
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L107;

  L107:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} PdoType_3 != 1;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} PdoType_3 != 2;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} PdoType_3 != 4;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} PdoType_3 != 8;
    goto L126;

  L126:
    call {:si_unique_call 639} sdv_ExInitializeFastMutex(0);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    call {:si_unique_call 640} InitializeListHead(WorkQueue__PDO_EXTENSION(pdx_4));
    call {:si_unique_call 641} KeInitializeSemaphore(0, 0, -1);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    call {:si_unique_call 642} KeInitializeEvent(PauseEvent__PDO_EXTENSION(pdx_4), 0, 1);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} 2 == PdoType_3;
    Tmp_288 := 1;
    goto L143;

  L143:
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} 4 == PdoType_3;
    Tmp_286 := DaisyChainId_3;
    goto L147;

  L147:
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    call {:si_unique_call 643} ParInitializeExtension1284Info(pdx_4);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Ieee1284Id_1 == 0;
    goto L190;

  L190:
    Tmp_289 := sdv_121 * 2 + 2;
    call {:si_unique_call 644} vslice_dummy_var_87 := RtlWriteRegistryValue(4, 0, 0, 1, 0, Tmp_289);
    assume {:nonnull} Pdo_2 != 0;
    assume Pdo_2 > 0;
    Tmp_283 := 0;
    return;

  anon62_Then:
    assume {:partition} Ieee1284Id_1 != 0;
    length_1 := sdv_135 + 1;
    call {:si_unique_call 645} sdv_137 := ExAllocatePoolWithTag(257, length_1, -797810352);
    copyOfIeee1284Id := sdv_137;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} copyOfIeee1284Id == 0;
    goto L190;

  anon63_Then:
    assume {:partition} copyOfIeee1284Id != 0;
    call {:si_unique_call 646} sdv_RtlZeroMemory(0, length_1);
    call {:si_unique_call 647} ParDetectDot3DataLink(pdx_4, Ieee1284Id_1);
    call {:si_unique_call 648} sdv_ExFreePool(0);
    goto L190;

  anon61_Then:
    assume {:partition} 4 != PdoType_3;
    Tmp_286 := 0;
    goto L147;

  anon60_Then:
    assume {:partition} 2 != PdoType_3;
    Tmp_288 := 0;
    goto L143;

  anon51_Then:
    assume {:partition} PdoType_3 == 8;
    bufLen_4 := 7;
    call {:si_unique_call 649} sdv_117 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    buffer_3 := sdv_117;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} buffer_3 == 0;
    goto L126;

  anon66_Then:
    assume {:partition} buffer_3 != 0;
    call {:si_unique_call 650} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 651} vslice_dummy_var_90 := corral_nondet();
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L126;

  anon52_Then:
    assume {:partition} PdoType_3 == 4;
    bufLen_4 := 7;
    call {:si_unique_call 652} sdv_124 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    buffer_3 := sdv_124;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} buffer_3 != 0;
    call {:si_unique_call 653} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 654} vslice_dummy_var_89 := corral_nondet();
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L126;

  anon65_Then:
    assume {:partition} buffer_3 == 0;
    goto L126;

  anon53_Then:
    assume {:partition} PdoType_3 == 2;
    bufLen_4 := 7;
    call {:si_unique_call 655} sdv_139 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    buffer_3 := sdv_139;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} buffer_3 != 0;
    call {:si_unique_call 656} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 657} vslice_dummy_var_88 := corral_nondet();
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L126;

  anon64_Then:
    assume {:partition} buffer_3 == 0;
    goto L126;

  anon50_Then:
    assume {:partition} PdoType_3 == 1;
    bufLen_4 := 5;
    call {:si_unique_call 658} sdv_141 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    buffer_3 := sdv_141;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} buffer_3 != 0;
    call {:si_unique_call 659} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 660} vslice_dummy_var_86 := corral_nondet();
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L126;

  anon59_Then:
    assume {:partition} buffer_3 == 0;
    goto L126;

  anon69_Then:
    assume {:partition} buffer_5 == 0;
    goto L275;

  anon68_Then:
    assume {:partition} buffer_5 == 0;
    goto L263;

  anon67_Then:
    assume {:partition} 1 != PdoType_3;
    mfgLen_1 := 4;
    mdlLen_1 := 4;
    goto L258;

  anon54_Then:
    assume {:partition} Ieee1284Id_1 != 0;
    tmpBufLen := sdv_120 + 1;
    call {:si_unique_call 661} sdv_127 := ExAllocatePoolWithTag(1, tmpBufLen, -797810352);
    tmpBuffer := sdv_127;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} tmpBuffer == 0;
    goto L107;

  anon55_Then:
    assume {:partition} tmpBuffer != 0;
    call {:si_unique_call 662} sdv_RtlZeroMemory(0, tmpBufLen);
    call {:si_unique_call 663} ParPnpFindDeviceIdKeys(mfg, mdl, cls, des, aid, cid, tmpBuffer);
    assume {:nonnull} mfg != 0;
    assume mfg > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    bufLen_2 := sdv_132 + 1;
    call {:si_unique_call 664} sdv_131 := ExAllocatePoolWithTag(257, bufLen_2, -797810352);
    buffer_4 := sdv_131;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} buffer_4 != 0;
    call {:si_unique_call 665} sdv_RtlZeroMemory(0, bufLen_2);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L48;

  L48:
    assume {:nonnull} mdl != 0;
    assume mdl > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    bufLen_3 := sdv_136 + 1;
    call {:si_unique_call 666} sdv_126 := ExAllocatePoolWithTag(257, bufLen_3, -797810352);
    buffer_6 := sdv_126;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} buffer_6 != 0;
    call {:si_unique_call 667} sdv_RtlZeroMemory(0, bufLen_3);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L67;

  L67:
    assume {:nonnull} cid != 0;
    assume cid > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    bufLen_1 := sdv_140 + 1;
    call {:si_unique_call 668} sdv_128 := ExAllocatePoolWithTag(257, bufLen_1, -797810352);
    buffer_2 := sdv_128;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} buffer_2 != 0;
    call {:si_unique_call 669} sdv_RtlZeroMemory(0, bufLen_1);
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    goto L86;

  L86:
    call {:si_unique_call 670} sdv_ExFreePool(0);
    goto L107;

  anon58_Then:
    assume {:partition} buffer_2 == 0;
    goto L86;

  anon49_Then:
    goto L86;

  anon57_Then:
    assume {:partition} buffer_6 == 0;
    goto L67;

  anon48_Then:
    goto L67;

  anon56_Then:
    assume {:partition} buffer_4 == 0;
    goto L48;

  anon47_Then:
    goto L48;
}



procedure {:origName "PptFdoHandleBusRelations"} PptFdoHandleBusRelations(actual_Fdo_3: int, actual_Irp_11: int) returns (Tmp_293: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.Buffer__UNICODE_STRING, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, completion;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_293 == 259 || Tmp_293 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoHandleBusRelations"} PptFdoHandleBusRelations(actual_Fdo_3: int, actual_Irp_11: int) returns (Tmp_293: int)
{
  var {:pointer} tmpBuffer_1: int;
  var {:pointer} sdv_143: int;
  var {:pointer} Tmp_294: int;
  var {:scalar} Tmp_295: int;
  var {:pointer} devRel: int;
  var {:pointer} des_1: int;
  var {:scalar} count: int;
  var {:pointer} cls_1: int;
  var {:pointer} sdv_147: int;
  var {:scalar} Tmp_296: int;
  var {:pointer} cid_1: int;
  var {:scalar} Tmp_297: int;
  var {:scalar} Tmp_298: int;
  var {:pointer} tmpBuffer_2: int;
  var {:pointer} pdx_5: int;
  var {:scalar} maxDaisyChainId: int;
  var {:scalar} bBuildStlDeviceId_1: int;
  var {:pointer} oldWorkItem: int;
  var {:pointer} legacyZipPdo: int;
  var {:scalar} sdv_151: int;
  var {:scalar} deviceCount: int;
  var {:pointer} sdv_153: int;
  var {:scalar} Tmp_300: int;
  var {:pointer} Tmp_301: int;
  var {:pointer} devId: int;
  var {:pointer} Tmp_302: int;
  var {:pointer} Tmp_303: int;
  var {:scalar} id: int;
  var {:scalar} sdv_157: int;
  var {:scalar} Tmp_304: int;
  var {:pointer} sdv_159: int;
  var {:pointer} Tmp_305: int;
  var {:scalar} Tmp_306: int;
  var {:scalar} sdv_160: int;
  var {:scalar} id_1: int;
  var {:pointer} Tmp_307: int;
  var {:scalar} daisyChainDevCount: int;
  var {:scalar} sdv_161: int;
  var {:scalar} maxId: int;
  var {:pointer} Tmp_308: int;
  var {:scalar} Tmp_309: int;
  var {:scalar} acquirePortTimeout: int;
  var {:pointer} Tmp_310: int;
  var {:scalar} maxId_1: int;
  var {:scalar} Tmp_311: int;
  var {:pointer} Tmp_312: int;
  var {:pointer} Tmp_313: int;
  var {:pointer} mdl_1: int;
  var {:scalar} acquiredPort: int;
  var {:scalar} Tmp_314: int;
  var {:pointer} Tmp_315: int;
  var {:scalar} i_6: int;
  var {:scalar} count_1: int;
  var {:pointer} Tmp_316: int;
  var {:scalar} changeDetected: int;
  var {:scalar} Tmp_317: int;
  var {:scalar} Tmp_318: int;
  var {:scalar} Tmp_319: int;
  var {:scalar} Tmp_320: int;
  var {:pointer} aid_1: int;
  var {:pointer} Tmp_321: int;
  var {:scalar} Tmp_322: int;
  var {:scalar} i_7: int;
  var {:scalar} maxId_2: int;
  var {:dopa} {:scalar} DeviceIdSize_1: int;
  var {:pointer} Tmp_323: int;
  var {:pointer} des_2: int;
  var {:pointer} Tmp_324: int;
  var {:pointer} cls_2: int;
  var {:scalar} sdv_166: int;
  var {:scalar} tmpBufLen_1: int;
  var {:pointer} devId_1: int;
  var {:pointer} workItem: int;
  var {:pointer} aid_2: int;
  var {:scalar} Tmp_326: int;
  var {:scalar} sdv_167: int;
  var {:pointer} Tmp_327: int;
  var {:pointer} Tmp_328: int;
  var {:pointer} Tmp_329: int;
  var {:scalar} Tmp_330: int;
  var {:pointer} sdv_172: int;
  var {:pointer} mfg_1: int;
  var {:scalar} sdv_173: int;
  var {:scalar} Tmp_331: int;
  var {:pointer} sdv_175: int;
  var {:scalar} delay: int;
  var {:scalar} devRelSize: int;
  var {:scalar} Tmp_332: int;
  var {:pointer} Tmp_333: int;
  var {:scalar} id_2: int;
  var {:scalar} Tmp_334: int;
  var {:pointer} Tmp_335: int;
  var {:scalar} id_3: int;
  var {:pointer} Tmp_336: int;
  var {:pointer} Tmp_337: int;
  var {:pointer} Tmp_338: int;
  var {:pointer} fdx_4: int;
  var {:scalar} idx: int;
  var {:pointer} mdl_2: int;
  var {:pointer} cid_2: int;
  var {:pointer} Tmp_339: int;
  var {:scalar} maxDaisyChainId_1: int;
  var {:pointer} Tmp_340: int;
  var {:scalar} status_14: int;
  var {:scalar} Tmp_341: int;
  var {:scalar} i_8: int;
  var {:pointer} controller: int;
  var {:pointer} Tmp_342: int;
  var {:pointer} sdv_180: int;
  var {:pointer} mfg_2: int;
  var {:pointer} EndOfChainPdo: int;
  var {:scalar} tmpBufLen_2: int;
  var {:pointer} Fdo_3: int;
  var {:pointer} Irp_11: int;
  var boogieTmp: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_3222: int;
  var vslice_dummy_var_3223: int;
  var vslice_dummy_var_3224: int;

  anon0:
    call {:si_unique_call 671} des_1 := __HAVOC_malloc(4);
    call {:si_unique_call 672} cls_1 := __HAVOC_malloc(4);
    call {:si_unique_call 673} cid_1 := __HAVOC_malloc(4);
    call {:si_unique_call 674} acquirePortTimeout := __HAVOC_malloc(20);
    call {:si_unique_call 675} mdl_1 := __HAVOC_malloc(4);
    call {:si_unique_call 676} aid_1 := __HAVOC_malloc(4);
    call {:si_unique_call 677} DeviceIdSize_1 := __HAVOC_malloc(4);
    call {:si_unique_call 678} des_2 := __HAVOC_malloc(4);
    call {:si_unique_call 679} cls_2 := __HAVOC_malloc(4);
    call {:si_unique_call 680} aid_2 := __HAVOC_malloc(4);
    call {:si_unique_call 681} mfg_1 := __HAVOC_malloc(4);
    call {:si_unique_call 682} delay := __HAVOC_malloc(20);
    call {:si_unique_call 683} mdl_2 := __HAVOC_malloc(4);
    call {:si_unique_call 684} cid_2 := __HAVOC_malloc(4);
    call {:si_unique_call 685} mfg_2 := __HAVOC_malloc(4);
    Fdo_3 := actual_Fdo_3;
    Irp_11 := actual_Irp_11;
    call {:si_unique_call 686} Tmp_294 := __HAVOC_malloc(76);
    call {:si_unique_call 687} Tmp_301 := __HAVOC_malloc(4);
    call {:si_unique_call 688} Tmp_302 := __HAVOC_malloc(16);
    call {:si_unique_call 689} Tmp_303 := __HAVOC_malloc(16);
    call {:si_unique_call 690} Tmp_305 := __HAVOC_malloc(76);
    call {:si_unique_call 691} Tmp_308 := __HAVOC_malloc(4);
    call {:si_unique_call 692} Tmp_310 := __HAVOC_malloc(16);
    call {:si_unique_call 693} Tmp_312 := __HAVOC_malloc(16);
    call {:si_unique_call 694} Tmp_313 := __HAVOC_malloc(16);
    call {:si_unique_call 695} Tmp_315 := __HAVOC_malloc(16);
    call {:si_unique_call 696} Tmp_316 := __HAVOC_malloc(16);
    call {:si_unique_call 697} Tmp_321 := __HAVOC_malloc(16);
    call {:si_unique_call 698} Tmp_323 := __HAVOC_malloc(76);
    call {:si_unique_call 699} Tmp_324 := __HAVOC_malloc(76);
    call {:si_unique_call 700} Tmp_327 := __HAVOC_malloc(16);
    call {:si_unique_call 701} Tmp_328 := __HAVOC_malloc(4);
    call {:si_unique_call 702} Tmp_329 := __HAVOC_malloc(4);
    call {:si_unique_call 703} Tmp_335 := __HAVOC_malloc(76);
    call {:si_unique_call 704} Tmp_336 := __HAVOC_malloc(16);
    call {:si_unique_call 705} Tmp_339 := __HAVOC_malloc(80);
    call {:si_unique_call 706} Tmp_340 := __HAVOC_malloc(16);
    call {:si_unique_call 707} Tmp_342 := __HAVOC_malloc(16);
    assume {:nonnull} Fdo_3 != 0;
    assume Fdo_3 > 0;
    havoc fdx_4;
    deviceCount := 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc controller;
    assume {:nonnull} acquirePortTimeout != 0;
    assume acquirePortTimeout > 0;
    call {:si_unique_call 708} status_14 := PptAcquirePortViaIoctl(Fdo_3, acquirePortTimeout);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} status_14 != 0;
    acquiredPort := 0;
    goto L25;

  L25:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    deviceCount := deviceCount + 1;
    goto L26;

  L26:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    deviceCount := deviceCount + 1;
    goto L28;

  L28:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    goto L32;

  L32:
    maxDaisyChainId_1 := 1;
    i_6 := 0;
    goto L35;

  L35:
    call {:si_unique_call 709} deviceCount, i_6, Tmp_332, Tmp_340 := PptFdoHandleBusRelations_loop_L35(deviceCount, i_6, Tmp_332, fdx_4, maxDaisyChainId_1, Tmp_340);
    goto L35_last;

  L35_last:
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} maxDaisyChainId_1 >= i_6;
    Tmp_332 := i_6;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_340;
    assume {:nonnull} Tmp_340 != 0;
    assume Tmp_340 > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    deviceCount := deviceCount + 1;
    i_6 := i_6 + 1;
    goto anon165_Else_dummy;

  anon165_Else_dummy:
    assume false;
    return;

  anon165_Then:
    goto L36;

  L36:
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} deviceCount <= 0;
    goto L92;

  L92:
    call {:si_unique_call 710} status_14 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_4, Irp_11);
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} acquiredPort != 0;
    call {:si_unique_call 711} workItem := IoAllocateWorkItem(0);
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} workItem != 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    call {:si_unique_call 712} sdv_153 := _InlineInterlockedCompareExchangePointer(FreePortWorkItem__FDO_EXTENSION(fdx_4), workItem, 0);
    oldWorkItem := sdv_153;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} oldWorkItem != 0;
    call {:si_unique_call 713} IoFreeWorkItem(0);
    call {:si_unique_call 714} PptFreePort#1(fdx_4);
    goto L97;

  L97:
    Tmp_293 := status_14;
    goto L1;

  L1:
    return;

  anon169_Then:
    assume {:partition} oldWorkItem == 0;
    call {:si_unique_call 715} IoQueueWorkItem(workItem, li2bplFunctionConstant433, 1, fdx_4);
    goto L97;

  anon131_Then:
    assume {:partition} workItem == 0;
    call {:si_unique_call 716} PptFreePort#1(fdx_4);
    goto L97;

  anon130_Then:
    assume {:partition} acquiredPort == 0;
    goto L97;

  anon126_Then:
    assume {:partition} 0 < deviceCount;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    goto L92;

  anon127_Then:
    devRelSize := 8 + (deviceCount - 1) * 4;
    call {:si_unique_call 717} sdv_172 := ExAllocatePoolWithTag(257, devRelSize, -797810352);
    devRel := sdv_172;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} devRel != 0;
    idx := 0;
    call {:si_unique_call 718} sdv_RtlZeroMemory(0, devRelSize);
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    call {:si_unique_call 719} vslice_dummy_var_93 := sdv_ObReferenceObject(0);
    Tmp_297 := idx;
    idx := idx + 1;
    Tmp_317 := Tmp_297;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_328;
    assume {:nonnull} Tmp_328 != 0;
    assume Tmp_328 > 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    call {:si_unique_call 720} vslice_dummy_var_94 := sdv_ObReferenceObject(0);
    Tmp_326 := idx;
    idx := idx + 1;
    Tmp_304 := Tmp_326;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_329;
    assume {:nonnull} Tmp_329 != 0;
    assume Tmp_329 > 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L63;

  L63:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    goto L75;

  L75:
    maxDaisyChainId := 3;
    i_7 := 0;
    goto L78;

  L78:
    call {:si_unique_call 721} Tmp_300, Tmp_301, Tmp_302, Tmp_303, Tmp_309, Tmp_312, Tmp_318, Tmp_319, i_7, Tmp_330, idx, vslice_dummy_var_96 := PptFdoHandleBusRelations_loop_L78(devRel, maxDaisyChainId, Tmp_300, Tmp_301, Tmp_302, Tmp_303, Tmp_309, Tmp_312, Tmp_318, Tmp_319, i_7, Tmp_330, fdx_4, idx, vslice_dummy_var_96);
    goto L78_last;

  L78_last:
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} maxDaisyChainId >= i_7;
    Tmp_318 := i_7;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_302;
    assume {:nonnull} Tmp_302 != 0;
    assume Tmp_302 > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    Tmp_330 := i_7;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_312;
    assume {:nonnull} Tmp_312 != 0;
    assume Tmp_312 > 0;
    call {:si_unique_call 722} vslice_dummy_var_96 := sdv_ObReferenceObject(0);
    Tmp_300 := idx;
    idx := idx + 1;
    Tmp_319 := Tmp_300;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_301;
    Tmp_309 := i_7;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_303;
    assume {:nonnull} Tmp_301 != 0;
    assume Tmp_301 > 0;
    assume {:nonnull} Tmp_303 != 0;
    assume Tmp_303 > 0;
    i_7 := i_7 + 1;
    goto anon168_Else_dummy;

  anon168_Else_dummy:
    assume false;
    return;

  anon168_Then:
    goto L79;

  L79:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto L92;

  anon129_Then:
    assume {:partition} i_7 > maxDaisyChainId;
    goto L79;

  anon128_Then:
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    call {:si_unique_call 723} vslice_dummy_var_95 := sdv_ObReferenceObject(0);
    Tmp_311 := idx;
    idx := idx + 1;
    Tmp_341 := Tmp_311;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_308;
    assume {:nonnull} Tmp_308 != 0;
    assume Tmp_308 > 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L75;

  anon167_Then:
    goto L63;

  anon166_Then:
    assume {:partition} devRel == 0;
    call {:si_unique_call 724} P4ReleaseBus(Fdo_3);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc vslice_dummy_var_3222;
    call {:si_unique_call 725} Tmp_293 := P4CompleteRequestReleaseRemLock(Irp_11, -1073741670, vslice_dummy_var_3222, RemoveLock__FDO_EXTENSION(fdx_4));
    goto L1;

  anon125_Then:
    assume {:partition} i_6 > maxDaisyChainId_1;
    goto L36;

  anon124_Then:
    deviceCount := deviceCount + 1;
    goto L32;

  anon123_Then:
    goto L28;

  anon122_Then:
    goto L26;

  anon121_Then:
    assume {:partition} status_14 == 0;
    acquiredPort := 1;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    goto L131;

  L131:
    call {:si_unique_call 726} vslice_dummy_var_91 := P5DeselectAllDaisyChainDevices(controller);
    assume {:nonnull} delay != 0;
    assume delay > 0;
    call {:si_unique_call 727} vslice_dummy_var_97 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc vslice_dummy_var_3223;
    call {:si_unique_call 728} sdv_157 := P5IsDeviceStillThere(Fdo_3, vslice_dummy_var_3223);
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} sdv_157 == 0;
    call {:si_unique_call 729} P5MarkPdoAsHardwareGone(Fdo_3, 2, 0);
    goto L140;

  L140:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    call {:si_unique_call 730} devId_1 := P4ReadRawIeee1284DeviceId(controller);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} devId_1 != 0;
    tmpBufLen_2 := sdv_167 + 1;
    call {:si_unique_call 731} sdv_147 := ExAllocatePoolWithTag(1, tmpBufLen_2, -797810352);
    tmpBuffer_1 := sdv_147;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} tmpBuffer_1 != 0;
    call {:si_unique_call 732} sdv_RtlZeroMemory(0, tmpBufLen_2);
    call {:si_unique_call 733} ParPnpFindDeviceIdKeys(mfg_2, mdl_2, cls_1, des_1, aid_2, cid_1, tmpBuffer_1);
    assume {:nonnull} mfg_2 != 0;
    assume mfg_2 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:nonnull} mdl_2 != 0;
    assume mdl_2 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    Tmp_307 := devId_1;
    call {:si_unique_call 734} EndOfChainPdo := P4CreatePdo(Fdo_3, 2, 0, Tmp_307);
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} EndOfChainPdo != 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L391;

  L391:
    call {:si_unique_call 735} sdv_ExFreePool(0);
    goto L371;

  L371:
    call {:si_unique_call 736} sdv_ExFreePool(0);
    goto L150;

  L150:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc vslice_dummy_var_3224;
    call {:si_unique_call 737} sdv_160 := P5IsDeviceStillThere(Fdo_3, vslice_dummy_var_3224);
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} sdv_160 == 0;
    call {:si_unique_call 738} P5MarkPdoAsHardwareGone(Fdo_3, 8, 0);
    goto L151;

  L151:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    goto L160;

  L160:
    call {:si_unique_call 739} daisyChainDevCount := PptInitiate1284_3(fdx_4);
    changeDetected := 0;
    maxId_2 := 1;
    count := 0;
    id_1 := 0;
    goto L171;

  L171:
    call {:si_unique_call 740} count, Tmp_306, id_1, Tmp_310 := PptFdoHandleBusRelations_loop_L171(count, Tmp_306, id_1, Tmp_310, maxId_2, fdx_4);
    goto L171_last;

  L171_last:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} maxId_2 >= id_1;
    Tmp_306 := id_1;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_310;
    assume {:nonnull} Tmp_310 != 0;
    assume Tmp_310 > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    count := count + 1;
    goto L174;

  L174:
    id_1 := id_1 + 1;
    goto L174_dummy;

  L174_dummy:
    assume false;
    return;

  anon171_Then:
    goto L174;

  anon140_Then:
    assume {:partition} id_1 > maxId_2;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} count != daisyChainDevCount;
    changeDetected := 1;
    goto L176;

  L176:
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} changeDetected == 0;
    maxId := 1;
    id_2 := 0;
    goto L321;

  L321:
    call {:si_unique_call 741} sdv_161, Tmp_315, Tmp_321, Tmp_322, Tmp_331, id_2, Tmp_338 := PptFdoHandleBusRelations_loop_L321(sdv_161, maxId, Tmp_315, Tmp_321, Tmp_322, Tmp_331, id_2, Tmp_338, fdx_4, Fdo_3);
    goto L321_last;

  L321_last:
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} maxId >= id_2;
    Tmp_331 := id_2;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_315;
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    Tmp_322 := id_2;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_321;
    assume {:nonnull} Tmp_321 != 0;
    assume Tmp_321 > 0;
    havoc Tmp_338;
    call {:si_unique_call 742} sdv_161 := P5IsDeviceStillThere(Fdo_3, Tmp_338);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} sdv_161 == 0;
    changeDetected := 1;
    goto L179;

  L179:
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} changeDetected != 0;
    maxId_1 := 1;
    id := 0;
    goto L187;

  L187:
    call {:si_unique_call 743} id, Tmp_320, Tmp_342 := PptFdoHandleBusRelations_loop_L187(id, maxId_1, Tmp_320, fdx_4, Tmp_342, Fdo_3);
    goto L187_last;

  L187_last:
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:partition} maxId_1 >= id;
    Tmp_320 := id;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_342;
    assume {:nonnull} Tmp_342 != 0;
    assume Tmp_342 > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    call {:si_unique_call 744} P5MarkPdoAsHardwareGone(Fdo_3, 4, id);
    goto L190;

  L190:
    id := id + 1;
    goto L190_dummy;

  L190_dummy:
    assume false;
    return;

  anon172_Then:
    goto L190;

  anon144_Then:
    assume {:partition} id > maxId_1;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L180;

  L180:
    call {:si_unique_call 745} daisyChainDevCount := PptInitiate1284_3(fdx_4);
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:partition} daisyChainDevCount > 2;
    daisyChainDevCount := 2;
    goto L197;

  L197:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} changeDetected == 0;
    goto L308;

  L308:
    count_1 := 0;
    i_8 := 0;
    i_8 := 0;
    goto L311;

  L311:
    call {:si_unique_call 746} Tmp_295, Tmp_313, count_1, i_8 := PptFdoHandleBusRelations_loop_L311(Tmp_295, Tmp_313, count_1, fdx_4, i_8);
    goto L311_last;

  L311_last:
    assume {:CounterLoop 2} {:Counter "i_8"} true;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} 2 > i_8;
    Tmp_295 := i_8;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_313;
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    count_1 := count_1 + 1;
    goto L314;

  L314:
    i_8 := i_8 + 1;
    goto L314_dummy;

  L314_dummy:
    assume false;
    return;

  anon178_Then:
    goto L314;

  anon153_Then:
    assume {:partition} i_8 >= 2;
    goto L25;

  anon146_Then:
    assume {:partition} changeDetected != 0;
    id_3 := 0;
    goto L203;

  L203:
    call {:si_unique_call 747} sdv_143, Tmp_296, Tmp_298, tmpBuffer_2, pdx_5, bBuildStlDeviceId_1, sdv_151, devId, sdv_159, Tmp_314, Tmp_316, tmpBufLen_1, Tmp_327, sdv_175, Tmp_333, Tmp_334, id_3, Tmp_336, Tmp_337, sdv_180, vslice_dummy_var_92, vslice_dummy_var_98 := PptFdoHandleBusRelations_loop_L203(sdv_143, Tmp_296, Tmp_298, tmpBuffer_2, pdx_5, bBuildStlDeviceId_1, sdv_151, devId, sdv_159, daisyChainDevCount, mdl_1, Tmp_314, Tmp_316, aid_1, DeviceIdSize_1, des_2, cls_2, sdv_166, tmpBufLen_1, Tmp_327, mfg_1, sdv_175, Tmp_333, Tmp_334, id_3, Tmp_336, Tmp_337, fdx_4, cid_2, controller, sdv_180, Fdo_3, vslice_dummy_var_92, vslice_dummy_var_98);
    goto L203_last;

  L203_last:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} daisyChainDevCount <= id_3;
    goto L308;

  anon147_Then:
    assume {:partition} id_3 < daisyChainDevCount;
    bBuildStlDeviceId_1 := 0;
    pdx_5 := 0;
    call {:si_unique_call 748} sdv_151 := P5SelectDaisyChainDevice(controller, id_3);
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} sdv_151 != 0;
    devId := 0;
    call {:si_unique_call 749} sdv_175 := ExAllocatePoolWithTag(257, 1248, -797810352);
    pdx_5 := sdv_175;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} pdx_5 != 0;
    call {:si_unique_call 750} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    Tmp_334 := id_3;
    call {:si_unique_call 751} bBuildStlDeviceId_1 := ParStlCheckIfStl(pdx_5, Tmp_334);
    call {:si_unique_call 752} sdv_ExFreePool(0);
    goto L220;

  L220:
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} bBuildStlDeviceId_1 != 0;
    call {:si_unique_call 753} sdv_180 := ExAllocatePoolWithTag(257, 1248, -797810352);
    pdx_5 := sdv_180;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} pdx_5 != 0;
    call {:si_unique_call 754} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    call {:si_unique_call 755} devId := ParStlQueryStlDeviceId(pdx_5, 0, 0, DeviceIdSize_1, 1);
    call {:si_unique_call 756} sdv_ExFreePool(0);
    goto L241;

  L241:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} devId != 0;
    tmpBufLen_1 := sdv_166 + 1;
    call {:si_unique_call 757} sdv_159 := ExAllocatePoolWithTag(1, tmpBufLen_1, -797810352);
    tmpBuffer_2 := sdv_159;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} tmpBuffer_2 != 0;
    call {:si_unique_call 758} sdv_RtlZeroMemory(0, tmpBufLen_1);
    call {:si_unique_call 759} ParPnpFindDeviceIdKeys(mfg_1, mdl_1, cls_2, des_2, aid_1, cid_2, tmpBuffer_2);
    assume {:nonnull} mfg_1 != 0;
    assume mfg_1 > 0;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:nonnull} mdl_1 != 0;
    assume mdl_1 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    Tmp_333 := devId;
    call {:si_unique_call 760} sdv_143 := P4CreatePdo(Fdo_3, 4, id_3, Tmp_333);
    Tmp_314 := id_3;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_327;
    assume {:nonnull} Tmp_327 != 0;
    assume Tmp_327 > 0;
    Tmp_296 := id_3;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_336;
    assume {:nonnull} Tmp_336 != 0;
    assume Tmp_336 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} bBuildStlDeviceId_1 != 0;
    Tmp_298 := id_3;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_316;
    assume {:nonnull} Tmp_316 != 0;
    assume Tmp_316 > 0;
    havoc Tmp_337;
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    havoc pdx_5;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    call {:si_unique_call 761} vslice_dummy_var_98 := ParStlCheckIfStl(pdx_5, 0);
    goto L289;

  L289:
    call {:si_unique_call 762} sdv_ExFreePool(0);
    goto L269;

  L269:
    call {:si_unique_call 763} sdv_ExFreePool(0);
    goto L254;

  L254:
    call {:si_unique_call 764} vslice_dummy_var_92 := P5DeselectAllDaisyChainDevices(controller);
    goto L212;

  L212:
    id_3 := id_3 + 1;
    goto L212_dummy;

  L212_dummy:
    assume false;
    return;

  anon177_Then:
    assume {:partition} bBuildStlDeviceId_1 == 0;
    goto L289;

  anon176_Then:
    goto L289;

  anon152_Then:
    goto L289;

  anon151_Then:
    goto L289;

  anon175_Then:
    assume {:partition} tmpBuffer_2 == 0;
    goto L269;

  anon150_Then:
    assume {:partition} devId == 0;
    goto L254;

  anon174_Then:
    assume {:partition} pdx_5 == 0;
    goto L241;

  anon149_Then:
    assume {:partition} bBuildStlDeviceId_1 == 0;
    call {:si_unique_call 765} devId := P4ReadRawIeee1284DeviceId(controller);
    goto L241;

  anon173_Then:
    assume {:partition} pdx_5 == 0;
    goto L220;

  anon148_Then:
    assume {:partition} sdv_151 == 0;
    goto L212;

  anon145_Then:
    assume {:partition} 2 >= daisyChainDevCount;
    goto L197;

  anon143_Then:
    assume {:partition} changeDetected == 0;
    goto L180;

  anon155_Then:
    assume {:partition} sdv_161 != 0;
    goto L323;

  L323:
    id_2 := id_2 + 1;
    goto L323_dummy;

  L323_dummy:
    assume false;
    return;

  anon179_Then:
    goto L323;

  anon154_Then:
    assume {:partition} id_2 > maxId;
    goto L179;

  anon142_Then:
    assume {:partition} changeDetected != 0;
    goto L179;

  anon141_Then:
    assume {:partition} count == daisyChainDevCount;
    goto L176;

  anon137_Then:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    goto L334;

  L334:
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    call {:si_unique_call 766} sdv_173 := P5LegacyZipDetected(controller);
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} sdv_173 != 0;
    call {:si_unique_call 767} legacyZipPdo := P4CreatePdo(Fdo_3, 8, 0, 0);
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} legacyZipPdo != 0;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L160;

  anon158_Then:
    assume {:partition} legacyZipPdo == 0;
    goto L160;

  anon157_Then:
    assume {:partition} sdv_173 == 0;
    goto L160;

  anon156_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    goto L160;

  anon139_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    Tmp_294 := strConst__li2bpl16;
    Tmp_335 := strConst__li2bpl18;
    call {:si_unique_call 768} vslice_dummy_var_99 := PptRegGetDword(1, Tmp_294, Tmp_335, ParEnableLegacyZip);
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    Tmp_339 := strConst__li2bpl17;
    Tmp_324 := strConst__li2bpl18;
    call {:si_unique_call 769} vslice_dummy_var_100 := PptRegGetDword(1, Tmp_339, Tmp_324, ParEnableLegacyZip);
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    Tmp_305 := strConst__li2bpl16;
    Tmp_323 := strConst__li2bpl18;
    call {:si_unique_call 770} vslice_dummy_var_101 := PptRegSetDword(1, Tmp_305, Tmp_323, ParEnableLegacyZip);
    goto L334;

  anon160_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    goto L334;

  anon159_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    goto L334;

  anon138_Then:
    assume {:partition} sdv_160 != 0;
    goto L151;

  anon136_Then:
    goto L151;

  anon164_Then:
    assume {:partition} EndOfChainPdo == 0;
    goto L391;

  anon163_Then:
    goto L391;

  anon162_Then:
    goto L391;

  anon180_Then:
    assume {:partition} tmpBuffer_1 == 0;
    goto L371;

  anon161_Then:
    assume {:partition} devId_1 == 0;
    goto L150;

  anon133_Then:
    goto L150;

  anon135_Then:
    assume {:partition} sdv_157 != 0;
    goto L140;

  anon134_Then:
    goto L140;

  anon132_Then:
    goto L140;

  anon170_Then:
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    call {:si_unique_call 771} boogieTmp := P4CreatePdo(Fdo_3, 1, 0, 0);
    goto L131;
}



procedure {:origName "P5IsDeviceStillThere"} P5IsDeviceStillThere(actual_Fdo_4: int, actual_Pdo_3: int) returns (Tmp_343: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_343 == 1 || Tmp_343 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5IsDeviceStillThere"} P5IsDeviceStillThere(actual_Fdo_4: int, actual_Pdo_3: int) returns (Tmp_343: int)
{
  var {:pointer} devIdString: int;
  var {:pointer} aid_3: int;
  var {:pointer} des_3: int;
  var {:dopa} {:scalar} DeviceIdSize_2: int;
  var {:pointer} des_4: int;
  var {:pointer} cls_3: int;
  var {:scalar} sdv_182: int;
  var {:pointer} cls_4: int;
  var {:scalar} sdv_183: int;
  var {:pointer} cid_3: int;
  var {:scalar} daisyChainId: int;
  var {:pointer} aid_4: int;
  var {:scalar} tryNumber: int;
  var {:pointer} Tmp_345: int;
  var {:pointer} pdx_6: int;
  var {:scalar} bBuildStlDeviceId_2: int;
  var {:scalar} deviceStillThere: int;
  var {:scalar} maxTries: int;
  var {:scalar} sdv_187: int;
  var {:pointer} mfg_3: int;
  var {:scalar} sdv_188: int;
  var {:scalar} sdv_189: int;
  var {:scalar} delay_1: int;
  var {:scalar} Tmp_346: int;
  var {:pointer} sdv_190: int;
  var {:pointer} fdx_5: int;
  var {:pointer} mdl_3: int;
  var {:pointer} cid_4: int;
  var {:scalar} sdv_194: int;
  var {:pointer} dummyPdx: int;
  var {:pointer} Tmp_347: int;
  var {:pointer} controller_1: int;
  var {:pointer} mfg_4: int;
  var {:pointer} mdl_4: int;
  var {:pointer} Fdo_4: int;
  var {:pointer} Pdo_3: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_3225: int;

  anon0:
    call {:si_unique_call 772} aid_3 := __HAVOC_malloc(4);
    call {:si_unique_call 773} des_3 := __HAVOC_malloc(4);
    call {:si_unique_call 774} DeviceIdSize_2 := __HAVOC_malloc(4);
    call {:si_unique_call 775} des_4 := __HAVOC_malloc(4);
    call {:si_unique_call 776} cls_3 := __HAVOC_malloc(4);
    call {:si_unique_call 777} cls_4 := __HAVOC_malloc(4);
    call {:si_unique_call 778} cid_3 := __HAVOC_malloc(4);
    call {:si_unique_call 779} aid_4 := __HAVOC_malloc(4);
    call {:si_unique_call 780} mfg_3 := __HAVOC_malloc(4);
    call {:si_unique_call 781} delay_1 := __HAVOC_malloc(20);
    call {:si_unique_call 782} mdl_3 := __HAVOC_malloc(4);
    call {:si_unique_call 783} cid_4 := __HAVOC_malloc(4);
    call {:si_unique_call 784} mfg_4 := __HAVOC_malloc(4);
    call {:si_unique_call 785} mdl_4 := __HAVOC_malloc(4);
    Fdo_4 := actual_Fdo_4;
    Pdo_3 := actual_Pdo_3;
    assume {:nonnull} Fdo_4 != 0;
    assume Fdo_4 > 0;
    havoc fdx_5;
    assume {:nonnull} Pdo_3 != 0;
    assume Pdo_3 > 0;
    havoc pdx_6;
    deviceStillThere := 0;
    devIdString := 0;
    assume {:nonnull} fdx_5 != 0;
    assume fdx_5 > 0;
    havoc controller_1;
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} fdx_5 != 0;
    assume fdx_5 > 0;
    havoc vslice_dummy_var_3225;
    call {:si_unique_call 786} deviceStillThere := P5LegacyZipDetected(vslice_dummy_var_3225);
    goto L26;

  L26:
    Tmp_343 := deviceStillThere;
    return;

  anon65_Then:
    deviceStillThere := 1;
    goto L26;

  anon66_Then:
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    havoc daisyChainId;
    call {:si_unique_call 787} sdv_188 := P5SelectDaisyChainDevice(controller_1, daisyChainId);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_188 != 0;
    bBuildStlDeviceId_2 := 0;
    dummyPdx := 0;
    devIdString := 0;
    call {:si_unique_call 788} sdv_190 := ExAllocatePoolWithTag(1, 1248, -797810352);
    dummyPdx := sdv_190;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} dummyPdx != 0;
    call {:si_unique_call 789} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} dummyPdx != 0;
    assume dummyPdx > 0;
    assume {:nonnull} fdx_5 != 0;
    assume fdx_5 > 0;
    Tmp_346 := daisyChainId;
    call {:si_unique_call 790} bBuildStlDeviceId_2 := ParStlCheckIfStl(dummyPdx, Tmp_346);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} bBuildStlDeviceId_2 != 0;
    call {:si_unique_call 791} devIdString := ParStlQueryStlDeviceId(dummyPdx, 0, 0, DeviceIdSize_2, 1);
    goto L62;

  L62:
    call {:si_unique_call 792} sdv_ExFreePool(0);
    goto L43;

  L43:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} devIdString != 0;
    Tmp_347 := devIdString;
    call {:si_unique_call 793} ParPnpFindDeviceIdKeys(mfg_3, mdl_4, cls_4, des_4, aid_3, cid_4, Tmp_347);
    assume {:nonnull} mfg_3 != 0;
    assume mfg_3 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} mdl_4 != 0;
    assume mdl_4 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_194 == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_187 == 0;
    deviceStillThere := 1;
    goto L88;

  L88:
    call {:si_unique_call 794} sdv_ExFreePool(0);
    goto L91;

  L91:
    call {:si_unique_call 795} vslice_dummy_var_102 := P5DeselectAllDaisyChainDevices(controller_1);
    goto L26;

  anon53_Then:
    assume {:partition} sdv_187 != 0;
    goto L87;

  L87:
    deviceStillThere := 0;
    goto L88;

  anon52_Then:
    assume {:partition} sdv_194 != 0;
    goto L87;

  anon51_Then:
    goto L78;

  L78:
    deviceStillThere := 0;
    goto L88;

  anon50_Then:
    goto L78;

  anon48_Then:
    assume {:partition} devIdString == 0;
    deviceStillThere := 0;
    goto L91;

  anon49_Then:
    assume {:partition} bBuildStlDeviceId_2 == 0;
    call {:si_unique_call 796} devIdString := P4ReadRawIeee1284DeviceId(controller_1);
    goto L62;

  anon69_Then:
    assume {:partition} dummyPdx == 0;
    goto L43;

  anon47_Then:
    assume {:partition} sdv_188 == 0;
    deviceStillThere := 0;
    goto L26;

  anon67_Then:
    tryNumber := 0;
    maxTries := 5;
    goto L100;

  L100:
    call {:si_unique_call 797} devIdString, sdv_183, tryNumber, Tmp_345, deviceStillThere, vslice_dummy_var_103 := P5IsDeviceStillThere_loop_L100(devIdString, des_3, cls_3, sdv_182, sdv_183, cid_3, aid_4, tryNumber, Tmp_345, pdx_6, deviceStillThere, maxTries, sdv_189, delay_1, mdl_3, controller_1, mfg_4, vslice_dummy_var_103);
    goto L100_last;

  L100_last:
    tryNumber := tryNumber + 1;
    call {:si_unique_call 802} devIdString := P4ReadRawIeee1284DeviceId(controller_1);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} devIdString != 0;
    Tmp_345 := devIdString;
    call {:si_unique_call 798} ParPnpFindDeviceIdKeys(mfg_4, mdl_3, cls_3, des_3, aid_4, cid_3, Tmp_345);
    assume {:nonnull} mfg_4 != 0;
    assume mfg_4 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} mdl_3 != 0;
    assume mdl_3 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_189 == 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_182 == 0;
    deviceStillThere := 1;
    goto L130;

  L130:
    call {:si_unique_call 799} sdv_ExFreePool(0);
    goto L133;

  L133:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} deviceStillThere != 0;
    goto L137;

  L137:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} deviceStillThere == 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} maxTries > tryNumber;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} tryNumber >= maxTries;
    goto L26;

  anon61_Then:
    assume {:partition} deviceStillThere != 0;
    goto L26;

  anon60_Then:
    assume {:partition} deviceStillThere == 0;
    call {:si_unique_call 800} sdv_183 := sdv_KeGetCurrentIrql();
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_183 == 0;
    assume {:nonnull} delay_1 != 0;
    assume delay_1 > 0;
    call {:si_unique_call 801} vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    goto L137;

  anon63_Then:
    assume {:partition} sdv_183 != 0;
    goto L137;

  anon64_Then:
    assume {:partition} sdv_182 != 0;
    goto L129;

  L129:
    deviceStillThere := 0;
    goto L130;

  anon59_Then:
    assume {:partition} sdv_189 != 0;
    goto L129;

  anon58_Then:
    goto L118;

  L118:
    deviceStillThere := 0;
    goto L130;

  anon57_Then:
    goto L118;

  anon56_Then:
    goto L118;

  anon55_Then:
    goto L118;

  anon54_Then:
    assume {:partition} devIdString == 0;
    deviceStillThere := 0;
    goto L133;

  anon68_Then:
    deviceStillThere := 1;
    goto L26;
}



procedure {:origName "PptAcquirePortViaIoctl"} PptAcquirePortViaIoctl(actual_PortDeviceObject: int, actual_Timeout_1: int) returns (Tmp_348: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, s, Mem_T.MinorFunction__IO_STACK_LOCATION, completion;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptAcquirePortViaIoctl"} PptAcquirePortViaIoctl(actual_PortDeviceObject: int, actual_Timeout_1: int) returns (Tmp_348: int)
{
  var {:scalar} localTimeout: int;
  var {:pointer} PortDeviceObject: int;
  var {:pointer} Timeout_1: int;

  anon0:
    call {:si_unique_call 803} localTimeout := __HAVOC_malloc(20);
    PortDeviceObject := actual_PortDeviceObject;
    Timeout_1 := actual_Timeout_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Timeout_1 != 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    goto L7;

  L7:
    call {:si_unique_call 804} Tmp_348 := ParBuildSendInternalIoctl(1441836, PortDeviceObject, 0, 0, 0, 0, localTimeout);
    return;

  anon3_Then:
    assume {:partition} Timeout_1 == 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    goto L7;
}



procedure {:origName "P4DestroyPdo"} P4DestroyPdo(actual_Pdo_4: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4DestroyPdo"} P4DestroyPdo(actual_Pdo_4: int)
{
  var {:scalar} sdv_197: int;
  var {:pointer} pdx_7: int;
  var {:scalar} done: int;
  var {:pointer} sdv_201: int;
  var {:pointer} fdo: int;
  var {:pointer} current: int;
  var {:pointer} fdx_6: int;
  var {:pointer} Pdo_4: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;

  anon0:
    call {:si_unique_call 805} vslice_dummy_var_104 := __HAVOC_malloc(4);
    Pdo_4 := actual_Pdo_4;
    call {:si_unique_call 806} vslice_dummy_var_107 := __HAVOC_malloc(60);
    assume {:nonnull} Pdo_4 != 0;
    assume Pdo_4 > 0;
    havoc pdx_7;
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    havoc fdo;
    assume {:nonnull} fdo != 0;
    assume fdo > 0;
    havoc fdx_6;
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    call {:si_unique_call 807} vslice_dummy_var_108 := RtlDeleteRegistryValue(4, 0, 0);
    goto L10;

  L10:
    call {:si_unique_call 808} sdv_197 := sdv_IsListEmpty(0);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} sdv_197 == 0;
    done := 0;
    goto L77;

  L77:
    call {:si_unique_call 809} done, sdv_201, current, vslice_dummy_var_106, vslice_dummy_var_109 := P4DestroyPdo_loop_L77(pdx_7, done, sdv_201, current, fdx_6, vslice_dummy_var_106, vslice_dummy_var_109);
    goto L77_last;

  L77_last:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} done == 0;
    assume {:nonnull} fdx_6 != 0;
    assume fdx_6 > 0;
    call {:si_unique_call 810} current := RemoveHeadList(DevDeletionListHead__FDO_EXTENSION(fdx_6));
    call {:si_unique_call 811} sdv_201 := sdv_containing_record(current, 100);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_201 != pdx_7;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} fdx_6 != 0;
    assume fdx_6 > 0;
    call {:si_unique_call 812} InsertHeadList(DevDeletionListHead__FDO_EXTENSION(fdx_6), current);
    done := 1;
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} fdx_6 != 0;
    assume fdx_6 > 0;
    call {:si_unique_call 813} vslice_dummy_var_106 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(fdx_6), current);
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:nonnull} fdx_6 != 0;
    assume fdx_6 > 0;
    call {:si_unique_call 814} vslice_dummy_var_109 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(fdx_6), current);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    assume false;
    return;

  anon39_Then:
    assume {:partition} sdv_201 == pdx_7;
    done := 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    assume false;
    return;

  anon38_Then:
    assume {:partition} done != 0;
    goto L21;

  L21:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    call {:si_unique_call 815} vslice_dummy_var_105 := Queue_Delete(ShadowBuffer__PDO_EXTENSION(pdx_7));
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto L22;

  L22:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    call {:si_unique_call 816} P5DeletePdoSymLink(Pdo_4);
    goto L32;

  L32:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    call {:si_unique_call 817} sdv_ExFreePool(0);
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto L36;

  L36:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 818} sdv_ExFreePool(0);
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto L42;

  L42:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    call {:si_unique_call 819} sdv_ExFreePool(0);
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto L48;

  L48:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_7))] != 0;
    call {:si_unique_call 820} RtlFreeUnicodeString(0);
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto L54;

  L54:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 821} sdv_ExFreePool(0);
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto L60;

  L60:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 822} sdv_ExFreePool(0);
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto L66;

  L66:
    call {:si_unique_call 823} IoDeleteDevice(0);
    return;

  anon37_Then:
    goto L66;

  anon36_Then:
    goto L60;

  anon35_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_7))] == 0;
    goto L54;

  anon34_Then:
    goto L48;

  anon33_Then:
    goto L42;

  anon32_Then:
    goto L36;

  anon31_Then:
    goto L32;

  anon30_Then:
    goto L22;

  anon29_Then:
    assume {:partition} sdv_197 != 0;
    goto L21;

  anon42_Then:
    goto L10;
}



procedure {:origName "P4MakePdoSymLinkName"} P4MakePdoSymLinkName(actual_LptName_1: int, actual_PdoType_4: int, actual_DaisyChainId_4: int, actual_RetryNumber_1: int) returns (Tmp_353: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4MakePdoSymLinkName"} P4MakePdoSymLinkName(actual_LptName_1: int, actual_PdoType_4: int, actual_DaisyChainId_4: int, actual_RetryNumber_1: int) returns (Tmp_353: int)
{
  var {:scalar} legacyZipSuffix_1: int;
  var {:scalar} maxDaisyChainSuffix_1: int;
  var {:scalar} endOfChainSuffix_1: int;
  var {:pointer} sdv_202: int;
  var {:scalar} maxSymLinkNameLength: int;
  var {:pointer} sdv_204: int;
  var {:pointer} buffer_7: int;
  var {:pointer} LptName_1: int;
  var {:scalar} PdoType_4: int;
  var {:scalar} DaisyChainId_4: int;
  var {:scalar} RetryNumber_1: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;

  anon0:
    LptName_1 := actual_LptName_1;
    PdoType_4 := actual_PdoType_4;
    DaisyChainId_4 := actual_DaisyChainId_4;
    RetryNumber_1 := actual_RetryNumber_1;
    call {:si_unique_call 824} vslice_dummy_var_110 := __HAVOC_malloc(92);
    call {:si_unique_call 825} vslice_dummy_var_111 := __HAVOC_malloc(64);
    call {:si_unique_call 826} vslice_dummy_var_112 := __HAVOC_malloc(76);
    call {:si_unique_call 827} vslice_dummy_var_113 := __HAVOC_malloc(80);
    maxDaisyChainSuffix_1 := 3;
    endOfChainSuffix_1 := 4;
    legacyZipSuffix_1 := 5;
    maxSymLinkNameLength := 42;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} LptName_1 != 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} PdoType_4 != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} PdoType_4 != 2;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} PdoType_4 != 4;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} PdoType_4 == 8;
    goto L23;

  L23:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} RetryNumber_1 != 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 9 >= RetryNumber_1;
    call {:si_unique_call 828} sdv_204 := ExAllocatePoolWithTag(257, maxSymLinkNameLength, -797810352);
    buffer_7 := sdv_204;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} buffer_7 != 0;
    call {:si_unique_call 829} sdv_RtlZeroMemory(0, maxSymLinkNameLength);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} 1 == PdoType_4;
    call {:si_unique_call 830} vslice_dummy_var_114 := corral_nondet();
    goto L34;

  L34:
    Tmp_353 := buffer_7;
    goto L1;

  L1:
    return;

  anon29_Then:
    assume {:partition} 1 != PdoType_4;
    call {:si_unique_call 831} vslice_dummy_var_115 := corral_nondet();
    goto L34;

  anon35_Then:
    assume {:partition} buffer_7 == 0;
    goto L34;

  anon28_Then:
    assume {:partition} RetryNumber_1 > 9;
    buffer_7 := 0;
    goto L34;

  anon27_Then:
    assume {:partition} RetryNumber_1 == 0;
    call {:si_unique_call 832} sdv_202 := ExAllocatePoolWithTag(257, maxSymLinkNameLength, -797810352);
    buffer_7 := sdv_202;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} buffer_7 != 0;
    call {:si_unique_call 833} sdv_RtlZeroMemory(0, maxSymLinkNameLength);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} 1 == PdoType_4;
    call {:si_unique_call 834} vslice_dummy_var_116 := corral_nondet();
    goto L34;

  anon30_Then:
    assume {:partition} 1 != PdoType_4;
    call {:si_unique_call 835} vslice_dummy_var_117 := corral_nondet();
    goto L34;

  anon36_Then:
    assume {:partition} buffer_7 == 0;
    goto L34;

  anon31_Then:
    assume {:partition} PdoType_4 != 8;
    Tmp_353 := 0;
    goto L1;

  anon32_Then:
    assume {:partition} PdoType_4 == 4;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} DaisyChainId_4 > maxDaisyChainSuffix_1;
    Tmp_353 := 0;
    goto L1;

  anon26_Then:
    assume {:partition} maxDaisyChainSuffix_1 >= DaisyChainId_4;
    goto L23;

  anon33_Then:
    assume {:partition} PdoType_4 == 2;
    goto L23;

  anon25_Then:
    assume {:partition} PdoType_4 == 1;
    goto L23;

  anon34_Then:
    assume {:partition} LptName_1 == 0;
    Tmp_353 := 0;
    goto L1;
}



procedure {:origName "PptPnpFilterNukeIrqResourceDescriptors"} PptPnpFilterNukeIrqResourceDescriptors(actual_IoResourceList: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpFilterNukeIrqResourceDescriptors"} PptPnpFilterNukeIrqResourceDescriptors(actual_IoResourceList: int)
{
  var {:scalar} i_9: int;
  var {:pointer} pIoResourceDescriptorIn: int;
  var {:pointer} IoResourceList: int;
  var vslice_dummy_var_118: int;

  anon0:
    call {:si_unique_call 836} vslice_dummy_var_118 := __HAVOC_malloc(4);
    IoResourceList := actual_IoResourceList;
    assume {:nonnull} IoResourceList != 0;
    assume IoResourceList > 0;
    havoc pIoResourceDescriptorIn;
    i_9 := 0;
    goto L7;

  L7:
    call {:si_unique_call 837} i_9 := PptPnpFilterNukeIrqResourceDescriptors_loop_L7(i_9, pIoResourceDescriptorIn, IoResourceList);
    goto L7_last;

  L7_last:
    assume {:nonnull} IoResourceList != 0;
    assume IoResourceList > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} pIoResourceDescriptorIn != 0;
    assume pIoResourceDescriptorIn > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} pIoResourceDescriptorIn != 0;
    assume pIoResourceDescriptorIn > 0;
    goto L9;

  L9:
    i_9 := i_9 + 1;
    goto L9_dummy;

  L9_dummy:
    assume false;
    return;

  anon6_Then:
    goto L9;

  anon5_Then:
    return;
}



procedure {:origName "PptPnpFilterRemoveIrqResourceLists"} PptPnpFilterRemoveIrqResourceLists(actual_ResourceRequirementsList_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpFilterRemoveIrqResourceLists"} PptPnpFilterRemoveIrqResourceLists(actual_ResourceRequirementsList_2: int)
{
  var {:scalar} i_10: int;
  var {:pointer} sdv_208: int;
  var {:scalar} listCount_2: int;
  var {:scalar} sdv_209: int;
  var {:pointer} curList_2: int;
  var {:scalar} bytesToMove: int;
  var {:pointer} currentEndOfResourceRequirementsList: int;
  var {:pointer} ResourceRequirementsList_2: int;
  var vslice_dummy_var_119: int;

  anon0:
    call {:si_unique_call 838} vslice_dummy_var_119 := __HAVOC_malloc(4);
    ResourceRequirementsList_2 := actual_ResourceRequirementsList_2;
    assume {:nonnull} ResourceRequirementsList_2 != 0;
    assume ResourceRequirementsList_2 > 0;
    havoc listCount_2;
    call {:si_unique_call 839} sdv_208 := PptPnpFilterGetEndOfResourceRequirementsList(ResourceRequirementsList_2);
    currentEndOfResourceRequirementsList := sdv_208;
    i_10 := 0;
    assume {:nonnull} ResourceRequirementsList_2 != 0;
    assume ResourceRequirementsList_2 > 0;
    havoc curList_2;
    goto L16;

  L16:
    call {:si_unique_call 840} i_10, listCount_2, sdv_209, curList_2, bytesToMove := PptPnpFilterRemoveIrqResourceLists_loop_L16(i_10, listCount_2, sdv_209, curList_2, bytesToMove, currentEndOfResourceRequirementsList);
    goto L16_last;

  L16_last:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} listCount_2 > i_10;
    call {:si_unique_call 841} sdv_209 := PptPnpListContainsIrqResourceDescriptor(curList_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_209 != 0;
    assume {:nonnull} curList_2 != 0;
    assume curList_2 > 0;
    bytesToMove := currentEndOfResourceRequirementsList;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} bytesToMove > 0;
    call {:si_unique_call 842} sdv_RtlMoveMemory(0, 0, bytesToMove);
    goto L26;

  L26:
    listCount_2 := listCount_2 - 1;
    goto L26_dummy;

  L26_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} 0 >= bytesToMove;
    goto L26;

  anon8_Then:
    assume {:partition} sdv_209 == 0;
    assume {:nonnull} curList_2 != 0;
    assume curList_2 > 0;
    havoc curList_2;
    i_10 := i_10 + 1;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    assume false;
    return;

  anon7_Then:
    assume {:partition} i_10 >= listCount_2;
    assume {:nonnull} ResourceRequirementsList_2 != 0;
    assume ResourceRequirementsList_2 > 0;
    return;
}



procedure {:origName "P4SanitizeId"} P4SanitizeId(actual_DeviceId_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4SanitizeId"} P4SanitizeId(actual_DeviceId_1: int)
{
  var {:pointer} p_7: int;
  var {:pointer} DeviceId_1: int;
  var vslice_dummy_var_120: int;

  anon0:
    call {:si_unique_call 843} vslice_dummy_var_120 := __HAVOC_malloc(4);
    DeviceId_1 := actual_DeviceId_1;
    p_7 := DeviceId_1;
    goto L5;

  L5:
    call {:si_unique_call 844} P4SanitizeId_loop_L5(p_7);
    goto L5_last;

  L5_last:
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[p_7] != 0;
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 32 >= Mem_T.INT4[p_7];
    goto L8;

  L8:
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    Mem_T.INT4[p_7] := 95;
    goto L9;

  L9:
    goto L9_dummy;

  L9_dummy:
    assume false;
    return;

  anon10_Then:
    assume {:partition} Mem_T.INT4[p_7] > 32;
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[p_7] <= 127;
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[p_7] != 44;
    goto L9;

  anon12_Then:
    assume {:partition} Mem_T.INT4[p_7] == 44;
    goto L8;

  anon11_Then:
    assume {:partition} 127 < Mem_T.INT4[p_7];
    goto L8;

  anon9_Then:
    assume {:partition} Mem_T.INT4[p_7] == 0;
    return;
}



procedure {:origName "PptPnpStartScanCmResourceList"} PptPnpStartScanCmResourceList(actual_Fdx_4: int, actual_Irp_12: int, actual_FoundPort_2: int, actual_FoundIrq_2: int, actual_FoundDma_2: int) returns (Tmp_365: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_365 == 0 || Tmp_365 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpStartScanCmResourceList"} PptPnpStartScanCmResourceList(actual_Fdx_4: int, actual_Irp_12: int, actual_FoundPort_2: int, actual_FoundIrq_2: int, actual_FoundDma_2: int) returns (Tmp_365: int)
{
  var {:scalar} i_11: int;
  var {:pointer} FullResourceDescriptor_2: int;
  var {:pointer} irpStack_2: int;
  var {:pointer} PartialResourceDescriptor_2: int;
  var {:pointer} Tmp_367: int;
  var {:scalar} sdv_211: int;
  var {:pointer} Tmp_368: int;
  var {:scalar} start: int;
  var {:scalar} Tmp_369: int;
  var {:pointer} ResourceList_2: int;
  var {:scalar} status_16: int;
  var {:pointer} PartialResourceList_2: int;
  var {:pointer} Fdx_4: int;
  var {:pointer} Irp_12: int;
  var {:pointer} FoundPort_2: int;
  var {:pointer} FoundIrq_2: int;
  var {:pointer} FoundDma_2: int;

  anon0:
    call {:si_unique_call 845} start := __HAVOC_malloc(20);
    Fdx_4 := actual_Fdx_4;
    Irp_12 := actual_Irp_12;
    FoundPort_2 := actual_FoundPort_2;
    FoundIrq_2 := actual_FoundIrq_2;
    FoundDma_2 := actual_FoundDma_2;
    call {:si_unique_call 846} Tmp_367 := __HAVOC_malloc(312);
    call {:si_unique_call 847} Tmp_368 := __HAVOC_malloc(292);
    status_16 := 0;
    call {:si_unique_call 848} irpStack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} FoundPort_2 != 0;
    assume FoundPort_2 > 0;
    Mem_T.INT4[FoundPort_2] := 0;
    assume {:nonnull} FoundIrq_2 != 0;
    assume FoundIrq_2 > 0;
    Mem_T.INT4[FoundIrq_2] := 0;
    assume {:nonnull} FoundDma_2 != 0;
    assume FoundDma_2 > 0;
    Mem_T.INT4[FoundDma_2] := 0;
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    havoc ResourceList_2;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} ResourceList_2 != 0;
    call {:si_unique_call 849} sdv_211 := PptIsPci(Fdx_4, Irp_12);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 1 == sdv_211;
    call {:si_unique_call 850} status_16 := PptPnpStartScanPciCardCmResourceList(Fdx_4, Irp_12, FoundPort_2, FoundIrq_2, FoundDma_2);
    goto L38;

  L38:
    Tmp_365 := status_16;
    return;

  anon33_Then:
    assume {:partition} 1 != sdv_211;
    assume {:nonnull} ResourceList_2 != 0;
    assume ResourceList_2 > 0;
    havoc Tmp_367;
    FullResourceDescriptor_2 := Tmp_367;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} FullResourceDescriptor_2 != 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} FullResourceDescriptor_2 != 0;
    assume FullResourceDescriptor_2 > 0;
    assume {:nonnull} FullResourceDescriptor_2 != 0;
    assume FullResourceDescriptor_2 > 0;
    PartialResourceList_2 := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(FullResourceDescriptor_2);
    i_11 := 0;
    goto L45;

  L45:
    call {:si_unique_call 851} i_11, PartialResourceDescriptor_2, Tmp_368, Tmp_369 := PptPnpStartScanCmResourceList_loop_L45(i_11, PartialResourceDescriptor_2, Tmp_368, start, Tmp_369, PartialResourceList_2, Fdx_4, FoundPort_2, FoundIrq_2);
    goto L45_last;

  L45_last:
    assume {:nonnull} PartialResourceList_2 != 0;
    assume PartialResourceList_2 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    Tmp_369 := i_11;
    assume {:nonnull} PartialResourceList_2 != 0;
    assume PartialResourceList_2 > 0;
    havoc Tmp_368;
    PartialResourceDescriptor_2 := Tmp_368 + Tmp_369 * 292;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L53;

  L53:
    i_11 := i_11 + 1;
    goto L53_dummy;

  L53_dummy:
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon42_Then:
    goto L53;

  anon43_Then:
    assume {:nonnull} FoundIrq_2 != 0;
    assume FoundIrq_2 > 0;
    Mem_T.INT4[FoundIrq_2] := 1;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto L53;

  anon48_Then:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto L53;

  anon46_Then:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} FoundPort_2 != 0;
    assume FoundPort_2 > 0;
    Mem_T.INT4[FoundPort_2] := 1;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L66;

  L66:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 0 != 1;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon40_Then:
    goto L71;

  L71:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon39_Then:
    goto L71;

  anon38_Then:
    assume {:partition} 0 == 1;
    goto L53;

  anon37_Then:
    goto L53;

  anon36_Then:
    goto L53;

  anon47_Then:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon35_Then:
    goto L66;

  anon34_Then:
    goto L38;

  anon45_Then:
    assume {:partition} FullResourceDescriptor_2 == 0;
    goto L38;

  anon44_Then:
    assume {:partition} ResourceList_2 == 0;
    status_16 := -1073741670;
    goto L38;
}



procedure {:origName "PptPnpFilterGetEndOfResourceRequirementsList"} PptPnpFilterGetEndOfResourceRequirementsList(actual_ResourceRequirementsList_3: int) returns (Tmp_370: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPnpFilterGetEndOfResourceRequirementsList"} PptPnpFilterGetEndOfResourceRequirementsList(actual_ResourceRequirementsList_3: int) returns (Tmp_370: int)
{
  var {:scalar} i_12: int;
  var {:scalar} listCount_3: int;
  var {:pointer} curList_3: int;
  var {:pointer} ResourceRequirementsList_3: int;

  anon0:
    ResourceRequirementsList_3 := actual_ResourceRequirementsList_3;
    assume {:nonnull} ResourceRequirementsList_3 != 0;
    assume ResourceRequirementsList_3 > 0;
    havoc listCount_3;
    i_12 := 0;
    assume {:nonnull} ResourceRequirementsList_3 != 0;
    assume ResourceRequirementsList_3 > 0;
    havoc curList_3;
    goto L9;

  L9:
    call {:si_unique_call 852} i_12, curList_3 := PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(i_12, listCount_3, curList_3);
    goto L9_last;

  L9_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} listCount_3 > i_12;
    assume {:nonnull} curList_3 != 0;
    assume curList_3 > 0;
    havoc curList_3;
    i_12 := i_12 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_12 >= listCount_3;
    Tmp_370 := curList_3;
    return;
}



procedure {:origName "_sdv_init46"} _sdv_init46();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init46"} _sdv_init46()
{
  var vslice_dummy_var_121: int;

  anon0:
    call {:si_unique_call 853} vslice_dummy_var_121 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "Queue_Delete"} Queue_Delete(actual_pQueue: int) returns (Tmp_374: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_374 == 1 || Tmp_374 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "Queue_Delete"} Queue_Delete(actual_pQueue: int) returns (Tmp_374: int)
{
  var {:pointer} pQueue: int;

  anon0:
    pQueue := actual_pQueue;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pQueue != 0;
    assume {:nonnull} pQueue != 0;
    assume pQueue > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 854} sdv_ExFreePool(0);
    assume {:nonnull} pQueue != 0;
    assume pQueue > 0;
    goto L6;

  L6:
    assume {:nonnull} pQueue != 0;
    assume pQueue > 0;
    assume {:nonnull} pQueue != 0;
    assume pQueue > 0;
    assume {:nonnull} pQueue != 0;
    assume pQueue > 0;
    Tmp_374 := 1;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    assume {:partition} pQueue == 0;
    Tmp_374 := 0;
    goto L1;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_122: int;

  anon0:
    call {:si_unique_call 855} vslice_dummy_var_122 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init31"} _sdv_init31();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init31"} _sdv_init31()
{
  var vslice_dummy_var_123: int;

  anon0:
    call {:si_unique_call 856} vslice_dummy_var_123 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ParStlCheckIfStl1284_3"} ParStlCheckIfStl1284_3(actual_Extension: int, actual_ulDaisyIndex: int, actual_bNoStrobe: int) returns (Tmp_384: int);
  free ensures {:va_keep} Tmp_384 == 0 || Tmp_384 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfStl1284_3"} ParStlCheckIfStl1284_3(actual_Extension: int, actual_ulDaisyIndex: int, actual_bNoStrobe: int) returns (Tmp_384: int)
{
  var {:scalar} i_13: int;
  var {:scalar} bReturnValue: int;
  var {:scalar} Tmp_387: int;
  var {:scalar} Tmp_388: int;
  var {:scalar} Tmp_390: int;
  var {:scalar} Tmp_393: int;
  var {:scalar} Tmp_395: int;
  var {:pointer} CurrentPort: int;
  var {:scalar} ucReadPattern: int;
  var {:scalar} status_18: int;
  var {:scalar} ucReadValue: int;
  var {:scalar} newvalue: int;
  var {:scalar} value: int;
  var {:scalar} ucExpectedPattern: int;
  var {:pointer} Extension: int;
  var {:scalar} ulDaisyIndex: int;
  var {:scalar} bNoStrobe: int;

  anon0:
    Extension := actual_Extension;
    ulDaisyIndex := actual_ulDaisyIndex;
    bNoStrobe := actual_bNoStrobe;
    bReturnValue := 0;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    havoc CurrentPort;
    call {:si_unique_call 857} value := corral_nondet();
    Tmp_393 := BAND(value, BNOT(8));
    newvalue := BOR(Tmp_393, 4);
    newvalue := BAND(newvalue, BNOT(32));
    i_13 := 0;
    goto L35;

  L35:
    call {:si_unique_call 858} i_13, Tmp_390 := ParStlCheckIfStl1284_3_loop_L35(i_13, Tmp_390);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_13"} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4 > i_13;
    Tmp_390 := i_13;
    i_13 := i_13 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} i_13 >= 4;
    call {:si_unique_call 859} status_18 := corral_nondet();
    Tmp_388 := BAND(status_18, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Tmp_388 == 184;
    call {:si_unique_call 860} status_18 := corral_nondet();
    Tmp_387 := BAND(status_18, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_387 == 24;
    call {:si_unique_call 861} status_18 := corral_nondet();
    Tmp_395 := BAND(status_18, BOR(16, 32));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_395 == 48;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ulDaisyIndex != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} bNoStrobe == 0;
    goto L90;

  L90:
    ucExpectedPattern := 240;
    bReturnValue := 1;
    goto L111;

  L111:
    call {:si_unique_call 862} ucReadPattern, ucReadValue, ucExpectedPattern := ParStlCheckIfStl1284_3_loop_L111(ucReadPattern, ucReadValue, ucExpectedPattern, ulDaisyIndex);
    goto L111_last;

  L111_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} ucExpectedPattern != 0;
    call {:si_unique_call 863} ucReadValue := corral_nondet();
    call {:si_unique_call 864} ucReadPattern := corral_nondet();
    ucReadPattern := BOR(ucReadPattern, BAND(ucReadValue, 128));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ucReadPattern != ucExpectedPattern;
    bReturnValue := 0;
    goto L112;

  L112:
    goto L50;

  L50:
    Tmp_384 := bReturnValue;
    return;

  anon24_Then:
    assume {:partition} ucReadPattern == ucExpectedPattern;
    ucExpectedPattern := ucExpectedPattern - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} ucExpectedPattern == 0;
    goto L112;

  anon19_Then:
    assume {:partition} bNoStrobe != 0;
    goto L90;

  anon18_Then:
    assume {:partition} ulDaisyIndex == 0;
    goto L90;

  anon23_Then:
    assume {:partition} Tmp_395 != 48;
    goto L50;

  anon22_Then:
    assume {:partition} Tmp_387 != 24;
    goto L50;

  anon21_Then:
    assume {:partition} Tmp_388 != 184;
    goto L50;
}



procedure {:origName "ParStlCheckIfAtaDevice"} ParStlCheckIfAtaDevice(actual_Extension_1: int, actual_atapiParams: int) returns (Tmp_402: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_402 == 1 || Tmp_402 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfAtaDevice"} ParStlCheckIfAtaDevice(actual_Extension_1: int, actual_atapiParams: int) returns (Tmp_402: int)
{
  var {:scalar} bReturnValue_1: int;
  var {:pointer} Extension_1: int;
  var {:pointer} atapiParams: int;

  anon0:
    Extension_1 := actual_Extension_1;
    atapiParams := actual_atapiParams;
    bReturnValue_1 := 0;
    call {:si_unique_call 865} bReturnValue_1 := ParStlAtaInitialize(Extension_1, atapiParams);
    Tmp_402 := bReturnValue_1;
    return;
}



procedure {:origName "ParStlCheckIfNon1284_3Present"} ParStlCheckIfNon1284_3Present(actual_Extension_2: int) returns (Tmp_404: int);
  free ensures {:va_keep} Tmp_404 == 1 || Tmp_404 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfNon1284_3Present"} ParStlCheckIfNon1284_3Present(actual_Extension_2: int) returns (Tmp_404: int)
{
  var {:scalar} i_14: int;
  var {:scalar} ucAckStatus: int;
  var {:scalar} Tmp_405: int;
  var {:scalar} Tmp_406: int;
  var {:scalar} bReturnValue_2: int;
  var {:scalar} Tmp_407: int;
  var {:scalar} Tmp_409: int;
  var {:pointer} CurrentPort_1: int;
  var {:scalar} Tmp_414: int;
  var {:scalar} status_19: int;
  var {:scalar} Tmp_416: int;
  var {:scalar} newvalue_1: int;
  var {:scalar} value_1: int;
  var {:pointer} Extension_2: int;

  anon0:
    Extension_2 := actual_Extension_2;
    bReturnValue_2 := 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc CurrentPort_1;
    call {:si_unique_call 866} value_1 := corral_nondet();
    Tmp_407 := BAND(value_1, BNOT(8));
    newvalue_1 := BOR(Tmp_407, 4);
    newvalue_1 := BAND(newvalue_1, BNOT(32));
    i_14 := 0;
    goto L33;

  L33:
    call {:si_unique_call 867} i_14, Tmp_406 := ParStlCheckIfNon1284_3Present_loop_L33(i_14, Tmp_406);
    goto L33_last;

  L33_last:
    assume {:CounterLoop 4} {:Counter "i_14"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 4 > i_14;
    Tmp_406 := i_14;
    i_14 := i_14 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} i_14 >= 4;
    call {:si_unique_call 868} status_19 := corral_nondet();
    Tmp_416 := BAND(status_19, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_416 == 184;
    ucAckStatus := BAND(status_19, 64);
    call {:si_unique_call 869} status_19 := corral_nondet();
    Tmp_414 := BAND(status_19, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_414 == 24;
    Tmp_409 := BAND(status_19, 64);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} ucAckStatus != Tmp_409;
    ucAckStatus := BAND(status_19, 64);
    call {:si_unique_call 870} status_19 := corral_nondet();
    Tmp_405 := BAND(status_19, BOR(16, 32));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_405 == 48;
    bReturnValue_2 := 1;
    goto L67;

  L67:
    goto L48;

  L48:
    Tmp_404 := bReturnValue_2;
    return;

  anon15_Then:
    assume {:partition} Tmp_405 != 48;
    goto L67;

  anon14_Then:
    assume {:partition} ucAckStatus == Tmp_409;
    goto L67;

  anon13_Then:
    assume {:partition} Tmp_414 != 24;
    goto L48;

  anon12_Then:
    assume {:partition} Tmp_416 != 184;
    goto L48;
}



procedure {:origName "ParStlCheckDrivePresent"} ParStlCheckDrivePresent(actual_Extension_3: int, actual_atapiParams_1: int) returns (Tmp_417: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_417 == 1 || Tmp_417 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckDrivePresent"} ParStlCheckDrivePresent(actual_Extension_3: int, actual_atapiParams_1: int) returns (Tmp_417: int)
{
  var {:scalar} i_15: int;
  var {:scalar} byOrgCylHigh: int;
  var {:scalar} sdv_233: int;
  var {:scalar} Tmp_418: int;
  var {:scalar} bReturnValue_3: int;
  var {:scalar} sdv_234: int;
  var {:scalar} Tmp_419: int;
  var {:scalar} Tmp_420: int;
  var {:pointer} nDrvHdArray: int;
  var {:scalar} Tmp_421: int;
  var {:scalar} Tmp_422: int;
  var {:pointer} Tmp_423: int;
  var {:scalar} nCurrentDrive: int;
  var {:scalar} sdv_237: int;
  var {:scalar} Tmp_424: int;
  var {:scalar} sdv_238: int;
  var {:scalar} sdv_241: int;
  var {:scalar} sdv_242: int;
  var {:pointer} Tmp_425: int;
  var {:scalar} Tmp_426: int;
  var {:scalar} Tmp_427: int;
  var {:scalar} Tmp_428: int;
  var {:scalar} Tmp_429: int;
  var {:scalar} sdv_246: int;
  var {:scalar} byOrgCylLow: int;
  var {:pointer} Extension_3: int;
  var {:pointer} atapiParams_1: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;

  anon0:
    Extension_3 := actual_Extension_3;
    atapiParams_1 := actual_atapiParams_1;
    call {:si_unique_call 871} nDrvHdArray := __HAVOC_malloc(8);
    call {:si_unique_call 872} Tmp_423 := __HAVOC_malloc(8);
    call {:si_unique_call 873} Tmp_425 := __HAVOC_malloc(8);
    bReturnValue_3 := 0;
    nCurrentDrive := 0;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    Mem_T.INT4[nDrvHdArray] := 160;
    goto L12;

  L12:
    call {:si_unique_call 874} i_15, byOrgCylHigh, sdv_233, Tmp_418, bReturnValue_3, sdv_234, Tmp_419, Tmp_420, Tmp_421, Tmp_422, Tmp_423, nCurrentDrive, sdv_237, Tmp_424, sdv_238, sdv_241, sdv_242, Tmp_425, Tmp_426, Tmp_427, Tmp_428, Tmp_429, sdv_246, byOrgCylLow, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131 := ParStlCheckDrivePresent_loop_L12(i_15, byOrgCylHigh, sdv_233, Tmp_418, bReturnValue_3, sdv_234, Tmp_419, Tmp_420, nDrvHdArray, Tmp_421, Tmp_422, Tmp_423, nCurrentDrive, sdv_237, Tmp_424, sdv_238, sdv_241, sdv_242, Tmp_425, Tmp_426, Tmp_427, Tmp_428, Tmp_429, sdv_246, byOrgCylLow, Extension_3, atapiParams_1, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131);
    goto L12_last;

  L12_last:
    Tmp_426 := nCurrentDrive;
    assume {:nonnull} atapiParams_1 != 0;
    assume atapiParams_1 > 0;
    havoc Tmp_423;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[Tmp_423 + Tmp_426 * 4] == 1;
    bReturnValue_3 := 1;
    goto L16;

  L16:
    call {:si_unique_call 875} vslice_dummy_var_124 := ParStlWriteIoPort(Extension_3, 6, 160);
    Tmp_417 := bReturnValue_3;
    return;

  anon25_Then:
    assume {:partition} Mem_T.INT4[Tmp_423 + Tmp_426 * 4] != 1;
    Tmp_422 := nCurrentDrive;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    Tmp_418 := Mem_T.INT4[nDrvHdArray + Tmp_422 * 4];
    call {:si_unique_call 876} vslice_dummy_var_127 := ParStlWriteIoPort(Extension_3, 6, Tmp_418);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} nCurrentDrive != 0;
    call {:si_unique_call 877} ParStlWaitForMicroSeconds(1000000);
    goto L24;

  L24:
    i_15 := 0;
    goto L28;

  L28:
    call {:si_unique_call 878} i_15, sdv_242, vslice_dummy_var_125 := ParStlCheckDrivePresent_loop_L28(i_15, sdv_242, Extension_3, vslice_dummy_var_125);
    goto L28_last;

  L28_last:
    assume {:CounterLoop 16} {:Counter "i_15"} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} 16 > i_15;
    call {:si_unique_call 879} vslice_dummy_var_125 := ParStlWriteReg(Extension_3, 14, i_15);
    call {:si_unique_call 880} sdv_242 := ParStlReadIoPort(Extension_3, 7);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(sdv_242, 128) != 0;
    i_15 := i_15 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} BAND(sdv_242, 128) == 0;
    goto L29;

  L29:
    call {:si_unique_call 881} sdv_241 := ParStlWaitForBusyToClear(Extension_3, 7);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_241 == 0;
    goto L56;

  L56:
    nCurrentDrive := nCurrentDrive + 1;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 2 <= nCurrentDrive;
    goto L16;

  anon27_Then:
    assume {:partition} nCurrentDrive < 2;
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} sdv_241 != 0;
    Tmp_421 := nCurrentDrive;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    Tmp_424 := Mem_T.INT4[nDrvHdArray + Tmp_421 * 4];
    call {:si_unique_call 882} vslice_dummy_var_128 := ParStlWriteIoPort(Extension_3, 6, Tmp_424);
    call {:si_unique_call 883} sdv_246 := ParStlReadIoPort(Extension_3, 6);
    Tmp_428 := BAND(sdv_246, BOR(BOR(16, 32), 128));
    Tmp_419 := nCurrentDrive;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Tmp_428 != Mem_T.INT4[nDrvHdArray + Tmp_419 * 4];
    goto L56;

  anon26_Then:
    assume {:partition} Tmp_428 == Mem_T.INT4[nDrvHdArray + Tmp_419 * 4];
    call {:si_unique_call 884} sdv_238 := ParStlReadIoPort(Extension_3, 4);
    byOrgCylLow := sdv_238;
    call {:si_unique_call 885} sdv_237 := ParStlReadIoPort(Extension_3, 5);
    byOrgCylHigh := sdv_237;
    call {:si_unique_call 886} vslice_dummy_var_129 := ParStlWriteIoPort(Extension_3, 4, 85);
    call {:si_unique_call 887} vslice_dummy_var_126 := ParStlWriteIoPort(Extension_3, 5, 170);
    call {:si_unique_call 888} sdv_233 := ParStlReadIoPort(Extension_3, 4);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} 85 == sdv_233;
    call {:si_unique_call 889} sdv_234 := ParStlReadIoPort(Extension_3, 5);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 170 == sdv_234;
    Tmp_427 := byOrgCylLow;
    call {:si_unique_call 890} vslice_dummy_var_130 := ParStlWriteIoPort(Extension_3, 4, Tmp_427);
    Tmp_429 := byOrgCylHigh;
    call {:si_unique_call 891} vslice_dummy_var_131 := ParStlWriteIoPort(Extension_3, 5, Tmp_429);
    bReturnValue_3 := 1;
    Tmp_420 := nCurrentDrive;
    assume {:nonnull} atapiParams_1 != 0;
    assume atapiParams_1 > 0;
    havoc Tmp_425;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    Mem_T.INT4[Tmp_425 + Tmp_420 * 4] := 1;
    goto L56;

  anon24_Then:
    assume {:partition} 170 != sdv_234;
    goto L56;

  anon23_Then:
    assume {:partition} 85 != sdv_233;
    goto L56;

  anon20_Then:
    assume {:partition} i_15 >= 16;
    goto L29;

  anon19_Then:
    assume {:partition} nCurrentDrive == 0;
    goto L24;
}



procedure {:origName "ParStlWriteIoPort"} ParStlWriteIoPort(actual_Extension_4: int, actual_reg: int, actual_databyte: int) returns (Tmp_431: int);
  free ensures {:va_keep} Tmp_431 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlWriteIoPort"} ParStlWriteIoPort(actual_Extension_4: int, actual_reg: int, actual_databyte: int) returns (Tmp_431: int)
{
  var {:pointer} Extension_4: int;
  var {:scalar} reg: int;
  var {:scalar} databyte: int;

  anon0:
    Extension_4 := actual_Extension_4;
    reg := actual_reg;
    databyte := actual_databyte;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} reg != 8;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} reg == 9;
    reg := 23;
    goto L8;

  L8:
    call {:si_unique_call 892} Tmp_431 := ParStlWriteReg(Extension_4, reg, databyte);
    return;

  anon6_Then:
    assume {:partition} reg != 9;
    reg := BOR(reg, BOR(8, 16));
    goto L8;

  anon5_Then:
    assume {:partition} reg == 8;
    reg := 22;
    goto L8;
}



procedure {:origName "ParStlCheckUMAXScannerPresence"} ParStlCheckUMAXScannerPresence(actual_Extension_5: int) returns (Tmp_433: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_433 == 0 || Tmp_433 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckUMAXScannerPresence"} ParStlCheckUMAXScannerPresence(actual_Extension_5: int) returns (Tmp_433: int)
{
  var {:pointer} Tmp_434: int;
  var {:pointer} commandPacket: int;
  var {:pointer} commandPacket_1: int;
  var {:scalar} Tmp_435: int;
  var {:scalar} Tmp_436: int;
  var {:scalar} Tmp_437: int;
  var {:pointer} saveCommandPacket: int;
  var {:scalar} Tmp_438: int;
  var {:scalar} Tmp_439: int;
  var {:scalar} sdv_256: int;
  var {:scalar} dataLength: int;
  var {:scalar} idx_1: int;
  var {:scalar} status_20: int;
  var {:scalar} Tmp_441: int;
  var {:pointer} Extension_5: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;

  anon0:
    Extension_5 := actual_Extension_5;
    call {:si_unique_call 893} commandPacket_1 := __HAVOC_malloc(24);
    assume {:nonnull} commandPacket_1 != 0;
    assume commandPacket_1 > 0;
    Mem_T.INT4[commandPacket_1] := 85;
    call {:si_unique_call 894} vslice_dummy_var_133 := ParStlWriteReg(Extension_5, 26, 0);
    call {:si_unique_call 895} vslice_dummy_var_132 := ParStlWriteReg(Extension_5, 26, 12);
    commandPacket := commandPacket_1;
    saveCommandPacket := commandPacket;
    call {:si_unique_call 896} sdv_256 := ParStlSetEPPMode(Extension_5);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} 1 == sdv_256;
    Tmp_434 := commandPacket;
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    dataLength := Mem_T.INT4[Tmp_434];
    dataLength := BAND(dataLength, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(16777216, 33554432), 67108864), 134217728), 268435456), 536870912), 1073741824), -2147483648)));
    commandPacket := saveCommandPacket;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_438 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 897} status_20 := ParStlEPPWrite(Extension_5, Tmp_438);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  L1:
    return;

  anon32_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_435 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 898} status_20 := ParStlEPPWrite(Extension_5, Tmp_435);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  anon33_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    idx_1 := 0;
    goto L45;

  L45:
    call {:si_unique_call 899} idx_1, status_20 := ParStlCheckUMAXScannerPresence_loop_L45(idx_1, status_20, Extension_5);
    goto L45_last;

  L45_last:
    assume {:CounterLoop 6} {:Counter "idx_1"} true;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 6 >= idx_1;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} BAND(status_20, 2048) == 0;
    call {:si_unique_call 900} status_20 := ParStlEPPRead(Extension_5);
    idx_1 := idx_1 + 1;
    goto anon36_Else_dummy;

  anon36_Else_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:partition} BAND(status_20, 2048) != 0;
    goto L46;

  L46:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} idx_1 == 7;
    Tmp_439 := BAND(status_20, BOR(BOR(BOR(BOR(2048, 4096), 8192), 16384), 32768));
    status_20 := BOR(Tmp_439, 256);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  anon44_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    goto L54;

  L54:
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_441 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 901} status_20 := ParStlEPPWrite(Extension_5, Tmp_441);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  anon37_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_437 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 902} status_20 := ParStlEPPWrite(Extension_5, Tmp_437);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  anon38_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_436 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 903} status_20 := ParStlEPPWrite(Extension_5, Tmp_436);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  anon39_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    call {:si_unique_call 904} status_20 := ParStlEPPWrite(Extension_5, Mem_T.INT4[commandPacket]);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  anon40_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    call {:si_unique_call 905} status_20 := ParStlEPPRead(Extension_5);
    commandPacket := saveCommandPacket;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    goto L92;

  L92:
    Tmp_433 := 1;
    goto L1;

  anon45_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Mem_T.INT4[commandPacket + 5 * 4] == 194;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} dataLength == 0;
    call {:si_unique_call 906} status_20 := ParStlEPPRead(Extension_5);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(status_20, 1792) != 0;
    Tmp_433 := 0;
    goto L1;

  anon43_Then:
    assume {:partition} BAND(status_20, 1792) == 0;
    goto L92;

  anon42_Then:
    assume {:partition} dataLength != 0;
    goto L92;

  anon41_Then:
    assume {:partition} Mem_T.INT4[commandPacket + 5 * 4] != 194;
    goto L92;

  anon35_Then:
    assume {:partition} idx_1 != 7;
    goto L54;

  anon34_Then:
    assume {:partition} idx_1 > 6;
    goto L46;

  anon31_Then:
    assume {:partition} 1 != sdv_256;
    Tmp_433 := 0;
    goto L1;
}



procedure {:origName "ParStlSet16BitOperation"} ParStlSet16BitOperation(actual_Extension_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlSet16BitOperation"} ParStlSet16BitOperation(actual_Extension_6: int)
{
  var {:scalar} nModeReg: int;
  var {:scalar} Tmp_444: int;
  var {:pointer} Extension_6: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;

  anon0:
    call {:si_unique_call 907} vslice_dummy_var_134 := __HAVOC_malloc(4);
    Extension_6 := actual_Extension_6;
    call {:si_unique_call 908} nModeReg := ParStlReadReg(Extension_6, 12);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} BAND(nModeReg, 16) == 0;
    Tmp_444 := BOR(nModeReg, 16);
    call {:si_unique_call 909} vslice_dummy_var_135 := ParStlWriteReg(Extension_6, 12, Tmp_444);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} BAND(nModeReg, 16) != 0;
    goto L1;
}



procedure {:origName "ParStlCheckIfScsiDevice"} ParStlCheckIfScsiDevice(actual_Extension_7: int) returns (Tmp_445: int);
  free ensures {:va_keep} Tmp_445 == 0 || Tmp_445 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfScsiDevice"} ParStlCheckIfScsiDevice(actual_Extension_7: int) returns (Tmp_445: int)
{
  var {:scalar} bReturnValue_4: int;
  var {:scalar} sdv_263: int;
  var {:pointer} Extension_7: int;

  anon0:
    Extension_7 := actual_Extension_7;
    bReturnValue_4 := 0;
    call {:si_unique_call 910} sdv_263 := ParStlReadReg(Extension_7, 11);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 178 != sdv_263;
    goto L11;

  L11:
    Tmp_445 := bReturnValue_4;
    return;

  anon3_Then:
    assume {:partition} 178 == sdv_263;
    bReturnValue_4 := 1;
    goto L11;
}



procedure {:origName "ParStlAtaInitialize"} ParStlAtaInitialize(actual_Extension_8: int, actual_atapiParams_2: int) returns (Tmp_447: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_447 == 1 || Tmp_447 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlAtaInitialize"} ParStlAtaInitialize(actual_Extension_8: int, actual_atapiParams_2: int) returns (Tmp_447: int)
{
  var {:scalar} bReturnValue_5: int;
  var {:scalar} Tmp_448: int;
  var {:scalar} sdv_265: int;
  var {:scalar} byTempValue: int;
  var {:scalar} nCurrentDrive_1: int;
  var {:scalar} sdv_266: int;
  var {:scalar} Tmp_450: int;
  var {:scalar} sdv_269: int;
  var {:scalar} sdv_271: int;
  var {:pointer} Tmp_451: int;
  var {:pointer} Extension_8: int;
  var {:pointer} atapiParams_2: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;

  anon0:
    Extension_8 := actual_Extension_8;
    atapiParams_2 := actual_atapiParams_2;
    call {:si_unique_call 911} Tmp_451 := __HAVOC_malloc(8);
    bReturnValue_5 := 0;
    nCurrentDrive_1 := 0;
    goto L8;

  L8:
    call {:si_unique_call 912} Tmp_448, sdv_265, byTempValue, nCurrentDrive_1, sdv_266, Tmp_450, sdv_269, sdv_271, Tmp_451, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139 := ParStlAtaInitialize_loop_L8(Tmp_448, sdv_265, byTempValue, nCurrentDrive_1, sdv_266, Tmp_450, sdv_269, sdv_271, Tmp_451, Extension_8, atapiParams_2, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139);
    goto L8_last;

  L8_last:
    Tmp_450 := nCurrentDrive_1;
    assume {:nonnull} atapiParams_2 != 0;
    assume atapiParams_2 > 0;
    havoc Tmp_451;
    assume {:nonnull} Tmp_451 != 0;
    assume Tmp_451 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} 1 != Mem_T.INT4[Tmp_451 + Tmp_450 * 4];
    goto L11;

  L11:
    nCurrentDrive_1 := nCurrentDrive_1 + 1;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} 2 <= nCurrentDrive_1;
    goto L12;

  L12:
    call {:si_unique_call 913} vslice_dummy_var_136 := ParStlWriteIoPort(Extension_8, 6, 160);
    Tmp_447 := bReturnValue_5;
    return;

  anon22_Then:
    assume {:partition} nCurrentDrive_1 < 2;
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} 1 == Mem_T.INT4[Tmp_451 + Tmp_450 * 4];
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} nCurrentDrive_1 != 0;
    call {:si_unique_call 914} vslice_dummy_var_138 := ParStlWriteIoPort(Extension_8, 6, 176);
    goto L22;

  L22:
    call {:si_unique_call 915} sdv_269 := ParStlWaitForBusyToClear(Extension_8, 7);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_269 != 0;
    call {:si_unique_call 916} vslice_dummy_var_139 := ParStlWriteIoPort(Extension_8, 7, 0);
    call {:si_unique_call 917} sdv_265 := ParStlWaitForBusyToClear(Extension_8, 7);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_265 != 0;
    call {:si_unique_call 918} sdv_271 := ParStlReadIoPort(Extension_8, 7);
    byTempValue := sdv_271;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} byTempValue != 255;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(byTempValue, 1) != 0;
    call {:si_unique_call 919} sdv_266 := ParStlReadIoPort(Extension_8, 1);
    Tmp_448 := BAND(sdv_266, BOR(BOR(BOR(1, 2), 4), 8));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 4 == Tmp_448;
    bReturnValue_5 := 1;
    goto L12;

  anon24_Then:
    assume {:partition} 4 != Tmp_448;
    goto L11;

  anon20_Then:
    assume {:partition} BAND(byTempValue, 1) == 0;
    goto L11;

  anon23_Then:
    assume {:partition} byTempValue == 255;
    goto L11;

  anon19_Then:
    assume {:partition} sdv_265 == 0;
    goto L11;

  anon18_Then:
    assume {:partition} sdv_269 == 0;
    goto L11;

  anon17_Then:
    assume {:partition} nCurrentDrive_1 == 0;
    call {:si_unique_call 920} vslice_dummy_var_137 := ParStlWriteIoPort(Extension_8, 6, 160);
    goto L22;
}



procedure {:origName "ParStlCheckIfMMC"} ParStlCheckIfMMC(actual_Extension_9: int, actual_atapiParams_3: int) returns (Tmp_452: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_452 == 0 || Tmp_452 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfMMC"} ParStlCheckIfMMC(actual_Extension_9: int, actual_atapiParams_3: int) returns (Tmp_452: int)
{
  var {:scalar} bReturnValue_6: int;
  var {:scalar} sdv_272: int;
  var {:scalar} sdv_273: int;
  var {:pointer} Extension_9: int;
  var {:pointer} atapiParams_3: int;

  anon0:
    Extension_9 := actual_Extension_9;
    atapiParams_3 := actual_atapiParams_3;
    bReturnValue_6 := 0;
    call {:si_unique_call 921} sdv_272 := ParStlReadReg(Extension_9, 11);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 198 != sdv_272;
    goto L18;

  L18:
    Tmp_452 := bReturnValue_6;
    return;

  anon5_Then:
    assume {:partition} 198 == sdv_272;
    call {:si_unique_call 922} sdv_273 := ParStlCheckIfAtaAtapiDevice(Extension_9, atapiParams_3);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 1 == sdv_273;
    goto L18;

  anon6_Then:
    assume {:partition} 1 != sdv_273;
    call {:si_unique_call 923} bReturnValue_6 := ParStlIsMMCEnginePresent(Extension_9);
    goto L18;
}



procedure {:origName "ParStlAtapiInitialize"} ParStlAtapiInitialize(actual_Extension_10: int, actual_atapiParams_4: int) returns (Tmp_454: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_454 == 1 || Tmp_454 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlAtapiInitialize"} ParStlAtapiInitialize(actual_Extension_10: int, actual_atapiParams_4: int) returns (Tmp_454: int)
{
  var {:scalar} i_16: int;
  var {:scalar} sdv_275: int;
  var {:scalar} Tmp_455: int;
  var {:scalar} bReturnValue_7: int;
  var {:scalar} sdv_276: int;
  var {:pointer} chAtapiIdentifyBuffer: int;
  var {:scalar} Tmp_457: int;
  var {:pointer} Tmp_458: int;
  var {:scalar} byTempValue_1: int;
  var {:scalar} nCurrentDrive_2: int;
  var {:scalar} sdv_279: int;
  var {:scalar} sdv_280: int;
  var {:scalar} Tmp_459: int;
  var {:scalar} sdv_284: int;
  var {:scalar} sdv_285: int;
  var {:pointer} Tmp_460: int;
  var {:scalar} sdv_286: int;
  var {:scalar} sdv_287: int;
  var {:scalar} Tmp_461: int;
  var {:scalar} sdv_288: int;
  var {:scalar} Tmp_462: int;
  var {:pointer} Tmp_463: int;
  var {:pointer} Tmp_464: int;
  var {:scalar} sdv_290: int;
  var {:pointer} Extension_10: int;
  var {:pointer} atapiParams_4: int;
  var boogieTmp: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_3226: int;

  anon0:
    call {:si_unique_call 924} chAtapiIdentifyBuffer := __HAVOC_malloc(4);
    Extension_10 := actual_Extension_10;
    atapiParams_4 := actual_atapiParams_4;
    assume {:nonnull} chAtapiIdentifyBuffer != 0;
    assume chAtapiIdentifyBuffer > 0;
    call {:si_unique_call 925} boogieTmp := __HAVOC_malloc(2048);
    call {:si_unique_call 926} Tmp_458 := __HAVOC_malloc(8);
    call {:si_unique_call 927} Tmp_460 := __HAVOC_malloc(8);
    call {:si_unique_call 928} Tmp_463 := __HAVOC_malloc(8);
    call {:si_unique_call 929} Tmp_464 := __HAVOC_malloc(40);
    bReturnValue_7 := 0;
    nCurrentDrive_2 := 0;
    goto L10;

  L10:
    call {:si_unique_call 930} i_16, sdv_275, Tmp_455, bReturnValue_7, sdv_276, Tmp_457, Tmp_458, byTempValue_1, nCurrentDrive_2, sdv_279, sdv_280, Tmp_459, sdv_284, sdv_285, Tmp_460, sdv_286, sdv_287, Tmp_461, sdv_288, Tmp_462, Tmp_463, Tmp_464, sdv_290, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145 := ParStlAtapiInitialize_loop_L10(i_16, sdv_275, Tmp_455, bReturnValue_7, sdv_276, chAtapiIdentifyBuffer, Tmp_457, Tmp_458, byTempValue_1, nCurrentDrive_2, sdv_279, sdv_280, Tmp_459, sdv_284, sdv_285, Tmp_460, sdv_286, sdv_287, Tmp_461, sdv_288, Tmp_462, Tmp_463, Tmp_464, sdv_290, Extension_10, atapiParams_4, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145);
    goto L10_last;

  L10_last:
    Tmp_457 := nCurrentDrive_2;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_458;
    assume {:nonnull} Tmp_458 != 0;
    assume Tmp_458 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 1 != Mem_T.INT4[Tmp_458 + Tmp_457 * 4];
    goto L13;

  L13:
    nCurrentDrive_2 := nCurrentDrive_2 + 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} 2 <= nCurrentDrive_2;
    call {:si_unique_call 931} vslice_dummy_var_140 := ParStlWriteIoPort(Extension_10, 6, 160);
    Tmp_454 := bReturnValue_7;
    return;

  anon41_Then:
    assume {:partition} nCurrentDrive_2 < 2;
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} 1 == Mem_T.INT4[Tmp_458 + Tmp_457 * 4];
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} nCurrentDrive_2 != 0;
    call {:si_unique_call 932} vslice_dummy_var_142 := ParStlWriteIoPort(Extension_10, 6, 176);
    goto L24;

  L24:
    call {:si_unique_call 933} sdv_285 := ParStlWaitForBusyToClear(Extension_10, 7);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} sdv_285 != 0;
    call {:si_unique_call 934} sdv_284 := ParStlReadIoPort(Extension_10, 4);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_284 == 20;
    call {:si_unique_call 935} sdv_288 := ParStlReadIoPort(Extension_10, 5);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_288 == 235;
    bReturnValue_7 := 1;
    Tmp_455 := nCurrentDrive_2;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_463;
    assume {:nonnull} Tmp_463 != 0;
    assume Tmp_463 > 0;
    Mem_T.INT4[Tmp_463 + Tmp_455 * 4] := 2;
    call {:si_unique_call 936} sdv_280 := ParStlReadReg(Extension_10, 11);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 200 == sdv_280;
    goto L33;

  L33:
    call {:si_unique_call 937} vslice_dummy_var_143 := ParStlWriteIoPort(Extension_10, 7, 0);
    call {:si_unique_call 938} sdv_279 := ParStlWaitForIrq(Extension_10);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_279 != 0;
    call {:si_unique_call 939} sdv_290 := ParStlWaitForBusyToClear(Extension_10, 7);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_290 != 0;
    call {:si_unique_call 940} vslice_dummy_var_144 := ParStlWriteIoPort(Extension_10, 7, 161);
    call {:si_unique_call 941} sdv_275 := ParStlWaitForIrq(Extension_10);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_275 != 0;
    call {:si_unique_call 942} sdv_276 := ParStlWaitForBusyToClear(Extension_10, 7);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_276 != 0;
    call {:si_unique_call 943} sdv_286 := ParStlReadIoPort(Extension_10, 7);
    byTempValue_1 := sdv_286;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(byTempValue_1, 1) == 0;
    call {:si_unique_call 944} sdv_287 := ParStlWaitForDrq(Extension_10);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_287 != 0;
    bReturnValue_7 := 1;
    call {:si_unique_call 945} vslice_dummy_var_145 := ParStlReceiveData(Extension_10, chAtapiIdentifyBuffer, -1, 512);
    i_16 := 0;
    goto L85;

  L85:
    call {:si_unique_call 946} i_16, Tmp_459, Tmp_461, Tmp_464 := ParStlAtapiInitialize_loop_L85(i_16, chAtapiIdentifyBuffer, Tmp_459, Tmp_461, Tmp_464, atapiParams_4);
    goto L85_last;

  L85_last:
    assume {:CounterLoop 10} {:Counter "i_16"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 10 > i_16;
    Tmp_459 := i_16;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_464;
    Tmp_461 := 84 + i_16;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    assume {:nonnull} chAtapiIdentifyBuffer != 0;
    assume chAtapiIdentifyBuffer > 0;
    havoc vslice_dummy_var_3226;
    Mem_T.INT4[Tmp_464 + Tmp_459 * 4] := vslice_dummy_var_3226;
    i_16 := i_16 + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    assume false;
    return;

  anon39_Then:
    assume {:partition} i_16 >= 10;
    Tmp_462 := nCurrentDrive_2;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_460;
    assume {:nonnull} Tmp_460 != 0;
    assume Tmp_460 > 0;
    Mem_T.INT4[Tmp_460 + Tmp_462 * 4] := 2;
    goto L13;

  anon38_Then:
    assume {:partition} sdv_287 == 0;
    goto L13;

  anon42_Then:
    assume {:partition} BAND(byTempValue_1, 1) != 0;
    goto L13;

  anon37_Then:
    assume {:partition} sdv_276 == 0;
    goto L13;

  anon36_Then:
    assume {:partition} sdv_275 == 0;
    goto L13;

  anon35_Then:
    assume {:partition} sdv_290 == 0;
    goto L13;

  anon34_Then:
    assume {:partition} sdv_279 == 0;
    goto L13;

  anon33_Then:
    assume {:partition} 200 != sdv_280;
    goto L13;

  anon32_Then:
    assume {:partition} sdv_288 != 235;
    goto L33;

  anon31_Then:
    assume {:partition} sdv_284 != 20;
    goto L33;

  anon30_Then:
    assume {:partition} sdv_285 == 0;
    goto L13;

  anon29_Then:
    assume {:partition} nCurrentDrive_2 == 0;
    call {:si_unique_call 947} vslice_dummy_var_141 := ParStlWriteIoPort(Extension_10, 6, 160);
    goto L24;
}



procedure {:origName "ParStlWaitForBusyToClear"} ParStlWaitForBusyToClear(actual_Extension_11: int, actual_nRegisterToWaitOn: int) returns (Tmp_465: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_465 == 1 || Tmp_465 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlWaitForBusyToClear"} ParStlWaitForBusyToClear(actual_Extension_11: int, actual_nRegisterToWaitOn: int) returns (Tmp_465: int)
{
  var {:scalar} nMaxRetrials: int;
  var {:scalar} sdv_291: int;
  var {:scalar} bRetVal: int;
  var {:scalar} Tmp_467: int;
  var {:pointer} Extension_11: int;
  var {:scalar} nRegisterToWaitOn: int;

  anon0:
    Extension_11 := actual_Extension_11;
    nRegisterToWaitOn := actual_nRegisterToWaitOn;
    nMaxRetrials := 10000;
    bRetVal := 0;
    goto L7;

  L7:
    call {:si_unique_call 948} nMaxRetrials, sdv_291, Tmp_467 := ParStlWaitForBusyToClear_loop_L7(nMaxRetrials, sdv_291, Tmp_467, Extension_11, nRegisterToWaitOn);
    goto L7_last;

  L7_last:
    Tmp_467 := nMaxRetrials;
    nMaxRetrials := nMaxRetrials - 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_467 != 0;
    call {:si_unique_call 949} ParStlWaitForMicroSeconds(1000);
    call {:si_unique_call 950} sdv_291 := ParStlReadIoPort(Extension_11, nRegisterToWaitOn);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(sdv_291, 128) == 0;
    bRetVal := 1;
    goto L8;

  L8:
    Tmp_465 := bRetVal;
    return;

  anon5_Then:
    assume {:partition} BAND(sdv_291, 128) != 0;
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_467 == 0;
    goto L8;
}



procedure {:origName "ParStlCheckIfStlProductId"} ParStlCheckIfStlProductId(actual_Extension_12: int, actual_ulDaisyIndex_1: int) returns (Tmp_468: int);
  free ensures {:va_keep} Tmp_468 == 0 || Tmp_468 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfStlProductId"} ParStlCheckIfStlProductId(actual_Extension_12: int, actual_ulDaisyIndex_1: int) returns (Tmp_468: int)
{
  var {:scalar} i_17: int;
  var {:scalar} Tmp_470: int;
  var {:scalar} Tmp_473: int;
  var {:scalar} ucProdIdLoByteHiNibble: int;
  var {:scalar} bReturnValue_8: int;
  var {:scalar} ucProdIdHiByteLoNibble: int;
  var {:scalar} ucProdIdHiByteHiNibble: int;
  var {:pointer} CurrentPort_2: int;
  var {:scalar} ucProdIdLoByteLoNibble: int;
  var {:scalar} Tmp_485: int;
  var {:scalar} usProdId: int;
  var {:scalar} status_21: int;
  var {:scalar} value_2: int;
  var {:scalar} newvalue_2: int;
  var {:scalar} Tmp_490: int;
  var {:scalar} Tmp_491: int;
  var {:pointer} Extension_12: int;
  var {:scalar} ulDaisyIndex_1: int;

  anon0:
    Extension_12 := actual_Extension_12;
    ulDaisyIndex_1 := actual_ulDaisyIndex_1;
    bReturnValue_8 := 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc CurrentPort_2;
    call {:si_unique_call 951} value_2 := corral_nondet();
    Tmp_491 := BAND(value_2, BNOT(8));
    newvalue_2 := BOR(Tmp_491, 4);
    newvalue_2 := BAND(newvalue_2, BNOT(32));
    i_17 := 0;
    goto L39;

  L39:
    call {:si_unique_call 952} i_17, Tmp_470 := ParStlCheckIfStlProductId_loop_L39(i_17, Tmp_470);
    goto L39_last;

  L39_last:
    assume {:CounterLoop 4} {:Counter "i_17"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 4 > i_17;
    Tmp_470 := i_17;
    i_17 := i_17 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} i_17 >= 4;
    call {:si_unique_call 953} status_21 := corral_nondet();
    Tmp_485 := BAND(status_21, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_485 == 184;
    call {:si_unique_call 954} status_21 := corral_nondet();
    Tmp_473 := BAND(status_21, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Tmp_473 == 24;
    call {:si_unique_call 955} status_21 := corral_nondet();
    Tmp_490 := BAND(status_21, BOR(16, 32));
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_490 == 48;
    call {:si_unique_call 956} ucProdIdLoByteHiNibble := corral_nondet();
    ucProdIdLoByteHiNibble := BAND(ucProdIdLoByteHiNibble, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 957} ucProdIdLoByteLoNibble := corral_nondet();
    call {:si_unique_call 958} ucProdIdLoByteLoNibble := corral_nondet();
    call {:si_unique_call 959} ucProdIdHiByteHiNibble := corral_nondet();
    ucProdIdHiByteHiNibble := BAND(ucProdIdHiByteHiNibble, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 960} ucProdIdHiByteLoNibble := corral_nondet();
    call {:si_unique_call 961} ucProdIdHiByteLoNibble := corral_nondet();
    call {:si_unique_call 962} usProdId := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 43775 == usProdId;
    goto L202;

  L202:
    bReturnValue_8 := 1;
    goto L203;

  L203:
    goto L54;

  L54:
    Tmp_468 := bReturnValue_8;
    return;

  anon18_Then:
    assume {:partition} 43775 != usProdId;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 43263 != usProdId;
    goto L203;

  anon14_Then:
    assume {:partition} 43263 == usProdId;
    goto L202;

  anon17_Then:
    assume {:partition} Tmp_490 != 48;
    goto L54;

  anon16_Then:
    assume {:partition} Tmp_473 != 24;
    goto L54;

  anon15_Then:
    assume {:partition} Tmp_485 != 184;
    goto L54;
}



procedure {:origName "ParStlGetMemorySize"} ParStlGetMemorySize(actual_Extension_13: int) returns (Tmp_493: int);
  free ensures {:va_keep} Tmp_493 == 1 || Tmp_493 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlGetMemorySize"} ParStlGetMemorySize(actual_Extension_13: int) returns (Tmp_493: int)
{
  var {:scalar} Tmp_494: int;
  var {:scalar} sdv_300: int;
  var {:scalar} sdv_301: int;
  var {:scalar} bReturnValue_9: int;
  var {:scalar} Tmp_495: int;
  var {:scalar} sdv_303: int;
  var {:scalar} sdv_304: int;
  var {:scalar} Tmp_496: int;
  var {:scalar} Tmp_497: int;
  var {:scalar} sdv_306: int;
  var {:scalar} byTempValue_2: int;
  var {:scalar} sdv_307: int;
  var {:scalar} Tmp_498: int;
  var {:scalar} Tmp_499: int;
  var {:scalar} sdv_308: int;
  var {:scalar} sdv_311: int;
  var {:scalar} Tmp_501: int;
  var {:scalar} sdv_320: int;
  var {:scalar} Tmp_502: int;
  var {:pointer} Extension_13: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;

  anon0:
    Extension_13 := actual_Extension_13;
    bReturnValue_9 := 0;
    call {:si_unique_call 963} sdv_304 := ParStlReadReg(Extension_13, 19);
    byTempValue_2 := sdv_304;
    byTempValue_2 := BOR(byTempValue_2, BOR(BOR(1, 4), 128));
    Tmp_502 := byTempValue_2;
    call {:si_unique_call 964} vslice_dummy_var_150 := ParStlWriteReg(Extension_13, 19, Tmp_502);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_495 := byTempValue_2;
    call {:si_unique_call 965} vslice_dummy_var_151 := ParStlWriteReg(Extension_13, 19, Tmp_495);
    call {:si_unique_call 966} vslice_dummy_var_146 := ParStlWriteReg(Extension_13, 16, 85);
    call {:si_unique_call 967} vslice_dummy_var_147 := ParStlWriteReg(Extension_13, 16, 170);
    call {:si_unique_call 968} sdv_306 := ParStlReadReg(Extension_13, 19);
    byTempValue_2 := sdv_306;
    byTempValue_2 := BOR(byTempValue_2, BOR(BOR(1, 4), 128));
    Tmp_501 := byTempValue_2;
    call {:si_unique_call 969} vslice_dummy_var_152 := ParStlWriteReg(Extension_13, 19, Tmp_501);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_499 := byTempValue_2;
    call {:si_unique_call 970} vslice_dummy_var_153 := ParStlWriteReg(Extension_13, 19, Tmp_499);
    call {:si_unique_call 971} sdv_308 := ParStlReadReg(Extension_13, 16);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 85 == sdv_308;
    call {:si_unique_call 972} sdv_311 := ParStlReadReg(Extension_13, 16);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 170 == sdv_311;
    bReturnValue_9 := 1;
    goto L53;

  L53:
    Tmp_493 := bReturnValue_9;
    return;

  anon12_Then:
    assume {:partition} 170 != sdv_311;
    goto L44;

  L44:
    call {:si_unique_call 973} sdv_320 := ParStlReadReg(Extension_13, 11);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 200 == sdv_320;
    call {:si_unique_call 974} sdv_300 := ParStlReadReg(Extension_13, 19);
    byTempValue_2 := sdv_300;
    byTempValue_2 := BOR(byTempValue_2, BOR(1, 4));
    byTempValue_2 := BAND(byTempValue_2, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_498 := byTempValue_2;
    call {:si_unique_call 975} vslice_dummy_var_154 := ParStlWriteReg(Extension_13, 19, Tmp_498);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_494 := byTempValue_2;
    call {:si_unique_call 976} vslice_dummy_var_155 := ParStlWriteReg(Extension_13, 19, Tmp_494);
    call {:si_unique_call 977} vslice_dummy_var_148 := ParStlWriteReg(Extension_13, 16, 85);
    call {:si_unique_call 978} vslice_dummy_var_149 := ParStlWriteReg(Extension_13, 16, 170);
    call {:si_unique_call 979} sdv_301 := ParStlReadReg(Extension_13, 19);
    byTempValue_2 := sdv_301;
    byTempValue_2 := BOR(byTempValue_2, BOR(1, 4));
    Tmp_496 := byTempValue_2;
    call {:si_unique_call 980} vslice_dummy_var_156 := ParStlWriteReg(Extension_13, 19, Tmp_496);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_497 := byTempValue_2;
    call {:si_unique_call 981} vslice_dummy_var_157 := ParStlWriteReg(Extension_13, 19, Tmp_497);
    call {:si_unique_call 982} sdv_307 := ParStlReadReg(Extension_13, 16);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 85 == sdv_307;
    call {:si_unique_call 983} sdv_303 := ParStlReadReg(Extension_13, 16);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 170 == sdv_303;
    bReturnValue_9 := 1;
    goto L53;

  anon15_Then:
    assume {:partition} 170 != sdv_303;
    goto L53;

  anon14_Then:
    assume {:partition} 85 != sdv_307;
    goto L53;

  anon13_Then:
    assume {:partition} 200 != sdv_320;
    goto L53;

  anon11_Then:
    assume {:partition} 85 != sdv_308;
    goto L44;
}



procedure {:origName "ParStlWaitForIrq"} ParStlWaitForIrq(actual_Extension_14: int) returns (Tmp_503: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_503 == 1 || Tmp_503 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlWaitForIrq"} ParStlWaitForIrq(actual_Extension_14: int) returns (Tmp_503: int)
{
  var {:scalar} nMaxRetrials_1: int;
  var {:scalar} bRetVal_1: int;
  var {:scalar} sdv_321: int;
  var {:scalar} Tmp_505: int;
  var {:pointer} Extension_14: int;

  anon0:
    Extension_14 := actual_Extension_14;
    nMaxRetrials_1 := 10000;
    bRetVal_1 := 0;
    goto L7;

  L7:
    call {:si_unique_call 984} nMaxRetrials_1, sdv_321, Tmp_505 := ParStlWaitForIrq_loop_L7(nMaxRetrials_1, sdv_321, Tmp_505, Extension_14);
    goto L7_last;

  L7_last:
    Tmp_505 := nMaxRetrials_1;
    nMaxRetrials_1 := nMaxRetrials_1 - 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_505 != 0;
    call {:si_unique_call 985} sdv_321 := ParStlReadReg(Extension_14, 18);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(sdv_321, 32) != 0;
    bRetVal_1 := 1;
    goto L8;

  L8:
    Tmp_503 := bRetVal_1;
    return;

  anon5_Then:
    assume {:partition} BAND(sdv_321, 32) == 0;
    call {:si_unique_call 986} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_505 == 0;
    goto L8;
}



procedure {:origName "ParStlSetEPPMode"} ParStlSetEPPMode(actual_Extension_15: int) returns (Tmp_506: int);
  free ensures {:va_keep} Tmp_506 == 1 || Tmp_506 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlSetEPPMode"} ParStlSetEPPMode(actual_Extension_15: int) returns (Tmp_506: int)
{
  var {:scalar} timeout: int;
  var {:scalar} Tmp_508: int;
  var {:scalar} sdv_323: int;
  var {:scalar} sdv_325: int;
  var {:scalar} sdv_330: int;
  var {:scalar} idx_2: int;
  var {:scalar} Tmp_509: int;
  var {:scalar} Tmp_510: int;
  var {:scalar} sdv_332: int;
  var {:pointer} Extension_15: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;

  anon0:
    Extension_15 := actual_Extension_15;
    timeout := 1;
    call {:si_unique_call 987} vslice_dummy_var_163 := ParStlWriteReg(Extension_15, 26, 12);
    call {:si_unique_call 988} vslice_dummy_var_158 := ParStlWriteReg(Extension_15, 24, 64);
    call {:si_unique_call 989} vslice_dummy_var_159 := ParStlWriteReg(Extension_15, 26, 6);
    idx_2 := 0;
    goto L16;

  L16:
    call {:si_unique_call 990} Tmp_508, sdv_330, idx_2 := ParStlSetEPPMode_loop_L16(Tmp_508, sdv_330, idx_2, Extension_15);
    goto L16_last;

  L16_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 991} sdv_330 := ParStlReadReg(Extension_15, 25);
    Tmp_508 := BAND(sdv_330, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Tmp_508 == 56;
    timeout := 0;
    goto L17;

  L17:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} timeout != 0;
    goto L29;

  L29:
    Tmp_506 := 0;
    goto L1;

  L1:
    return;

  anon26_Then:
    assume {:partition} timeout == 0;
    call {:si_unique_call 992} vslice_dummy_var_160 := ParStlWriteReg(Extension_15, 26, 7);
    timeout := 1;
    idx_2 := 0;
    goto L32;

  L32:
    call {:si_unique_call 993} sdv_323, idx_2, Tmp_510 := ParStlSetEPPMode_loop_L32(sdv_323, idx_2, Tmp_510, Extension_15);
    goto L32_last;

  L32_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 994} sdv_323 := ParStlReadReg(Extension_15, 25);
    Tmp_510 := BAND(sdv_323, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Tmp_510 == 56;
    timeout := 0;
    goto L33;

  L33:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} timeout == 0;
    call {:si_unique_call 995} vslice_dummy_var_161 := ParStlWriteReg(Extension_15, 26, 4);
    timeout := 1;
    idx_2 := 0;
    goto L47;

  L47:
    call {:si_unique_call 996} sdv_325, idx_2, Tmp_509 := ParStlSetEPPMode_loop_L47(sdv_325, idx_2, Tmp_509, Extension_15);
    goto L47_last;

  L47_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 997} sdv_325 := ParStlReadReg(Extension_15, 25);
    Tmp_509 := BAND(sdv_325, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_509 == 248;
    timeout := 0;
    goto L48;

  L48:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} timeout == 0;
    timeout := 1;
    call {:si_unique_call 998} vslice_dummy_var_164 := ParStlWriteReg(Extension_15, 26, 5);
    idx_2 := 0;
    goto L62;

  L62:
    call {:si_unique_call 999} idx_2, sdv_332 := ParStlSetEPPMode_loop_L62(idx_2, sdv_332, Extension_15);
    goto L62_last;

  L62_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 1000} sdv_332 := ParStlReadReg(Extension_15, 26);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_332 == 5;
    timeout := 0;
    goto L63;

  L63:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} timeout == 0;
    call {:si_unique_call 1001} vslice_dummy_var_162 := ParStlWriteReg(Extension_15, 26, 132);
    Tmp_506 := 1;
    goto L1;

  anon32_Then:
    assume {:partition} timeout != 0;
    goto L29;

  anon33_Then:
    assume {:partition} sdv_332 != 5;
    idx_2 := idx_2 + 1;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    assume false;
    return;

  anon31_Then:
    assume {:partition} idx_2 >= 10;
    goto L63;

  anon30_Then:
    assume {:partition} timeout != 0;
    goto L29;

  anon36_Then:
    assume {:partition} Tmp_509 != 248;
    idx_2 := idx_2 + 1;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} idx_2 >= 10;
    goto L48;

  anon28_Then:
    assume {:partition} timeout != 0;
    goto L29;

  anon35_Then:
    assume {:partition} Tmp_510 != 56;
    idx_2 := idx_2 + 1;
    goto anon35_Then_dummy;

  anon35_Then_dummy:
    assume false;
    return;

  anon27_Then:
    assume {:partition} idx_2 >= 10;
    goto L33;

  anon34_Then:
    assume {:partition} Tmp_508 != 56;
    idx_2 := idx_2 + 1;
    goto anon34_Then_dummy;

  anon34_Then_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} idx_2 >= 10;
    goto L17;
}



procedure {:origName "ParStlCheckIfDazzle"} ParStlCheckIfDazzle(actual_Extension_16: int) returns (Tmp_511: int);
  free ensures {:va_keep} Tmp_511 == 0 || Tmp_511 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfDazzle"} ParStlCheckIfDazzle(actual_Extension_16: int) returns (Tmp_511: int)
{
  var {:scalar} bReturnValue_10: int;
  var {:scalar} sdv_333: int;
  var {:scalar} sdv_334: int;
  var {:scalar} sdv_336: int;
  var {:scalar} ucSignature: int;
  var {:pointer} Extension_16: int;
  var vslice_dummy_var_165: int;

  anon0:
    Extension_16 := actual_Extension_16;
    bReturnValue_10 := 0;
    call {:si_unique_call 1002} sdv_333 := ParStlReadReg(Extension_16, 11);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 199 != sdv_333;
    goto L19;

  L19:
    Tmp_511 := bReturnValue_10;
    return;

  anon9_Then:
    assume {:partition} 199 == sdv_333;
    call {:si_unique_call 1003} sdv_334 := ParStlCheckCardInsertionStatus(Extension_16);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 1 == sdv_334;
    goto L19;

  anon10_Then:
    assume {:partition} 1 != sdv_334;
    call {:si_unique_call 1004} vslice_dummy_var_165 := ParStlWriteReg(Extension_16, 24, 0);
    call {:si_unique_call 1005} sdv_336 := ParStlReadReg(Extension_16, 25);
    ucSignature := sdv_336;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} ucSignature == 90;
    goto L26;

  L26:
    bReturnValue_10 := 1;
    goto L19;

  anon12_Then:
    assume {:partition} ucSignature != 90;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} ucSignature == 188;
    goto L26;

  anon11_Then:
    assume {:partition} ucSignature != 188;
    goto L19;
}



procedure {:origName "ParStlWaitForMicroSeconds"} ParStlWaitForMicroSeconds(actual_nMicroSecondsToWait: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlWaitForMicroSeconds"} ParStlWaitForMicroSeconds(actual_nMicroSecondsToWait: int)
{
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 1006} vslice_dummy_var_166 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ParStlCheckIfLS120"} ParStlCheckIfLS120(actual_Extension_17: int) returns (Tmp_515: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_515 == 0 || Tmp_515 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfLS120"} ParStlCheckIfLS120(actual_Extension_17: int) returns (Tmp_515: int)
{
  var {:scalar} bReturnValue_11: int;
  var {:scalar} sdv_337: int;
  var {:scalar} sdv_338: int;
  var {:pointer} Extension_17: int;
  var vslice_dummy_var_167: int;

  anon0:
    Extension_17 := actual_Extension_17;
    bReturnValue_11 := 0;
    call {:si_unique_call 1007} sdv_337 := ParStlSelectAdapterSocket(Extension_17, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_337 == 0;
    goto L18;

  L18:
    Tmp_515 := bReturnValue_11;
    return;

  anon5_Then:
    assume {:partition} sdv_337 != 0;
    call {:si_unique_call 1008} sdv_338 := ParStlReadIoPort(Extension_17, 7);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 226 == sdv_338;
    bReturnValue_11 := 1;
    goto L14;

  L14:
    call {:si_unique_call 1009} vslice_dummy_var_167 := ParStlSelectAdapterSocket(Extension_17, 0);
    goto L18;

  anon6_Then:
    assume {:partition} 226 != sdv_338;
    goto L14;
}



procedure {:origName "ParStlEPPRead"} ParStlEPPRead(actual_Extension_18: int) returns (Tmp_517: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlEPPRead"} ParStlEPPRead(actual_Extension_18: int) returns (Tmp_517: int)
{
  var {:scalar} Tmp_518: int;
  var {:scalar} sdv_340: int;
  var {:scalar} timeout_1: int;
  var {:scalar} sdv_341: int;
  var {:scalar} statusData: int;
  var {:scalar} idx_3: int;
  var {:pointer} Extension_18: int;

  anon0:
    Extension_18 := actual_Extension_18;
    statusData := 0;
    timeout_1 := 1;
    idx_3 := 0;
    goto L10;

  L10:
    call {:si_unique_call 1010} sdv_340, statusData, idx_3 := ParStlEPPRead_loop_L10(sdv_340, statusData, idx_3, Extension_18);
    goto L10_last;

  L10_last:
    assume {:CounterLoop 10} {:Counter "idx_3"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 10 > idx_3;
    call {:si_unique_call 1011} sdv_340 := ParStlReadReg(Extension_18, 25);
    statusData := sdv_340;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(statusData, 8) != 0;
    idx_3 := idx_3 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} BAND(statusData, 8) == 0;
    timeout_1 := 0;
    goto L11;

  L11:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} timeout_1 == 1;
    call {:si_unique_call 1012} Tmp_518 := corral_nondet();
    Tmp_517 := BOR(Tmp_518, 256);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} timeout_1 != 1;
    call {:si_unique_call 1013} sdv_341 := ParStlReadReg(Extension_18, 28);
    call {:si_unique_call 1014} Tmp_517 := corral_nondet();
    goto L1;

  anon7_Then:
    assume {:partition} idx_3 >= 10;
    goto L11;
}



procedure {:origName "ParStlCheckIfSSFDC"} ParStlCheckIfSSFDC(actual_Extension_19: int) returns (Tmp_521: int);
  free ensures {:va_keep} Tmp_521 == 0 || Tmp_521 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfSSFDC"} ParStlCheckIfSSFDC(actual_Extension_19: int) returns (Tmp_521: int)
{
  var {:scalar} bReturnValue_12: int;
  var {:scalar} sdv_342: int;
  var {:scalar} sdv_346: int;
  var {:scalar} sdv_348: int;
  var {:pointer} Extension_19: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_171: int;

  anon0:
    Extension_19 := actual_Extension_19;
    bReturnValue_12 := 0;
    call {:si_unique_call 1015} sdv_342 := ParStlReadReg(Extension_19, 11);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 199 != sdv_342;
    goto L23;

  L23:
    Tmp_521 := bReturnValue_12;
    return;

  anon7_Then:
    assume {:partition} 199 == sdv_342;
    call {:si_unique_call 1016} vslice_dummy_var_168 := ParStlWriteReg(Extension_19, 14, 0);
    call {:si_unique_call 1017} vslice_dummy_var_169 := ParStlWriteReg(Extension_19, 15, 16);
    call {:si_unique_call 1018} vslice_dummy_var_170 := ParStlWriteReg(Extension_19, 15, 18);
    call {:si_unique_call 1019} sdv_346 := ParStlReadReg(Extension_19, 15);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 26 == sdv_346;
    call {:si_unique_call 1020} vslice_dummy_var_171 := ParStlWriteReg(Extension_19, 15, 16);
    call {:si_unique_call 1021} sdv_348 := ParStlReadReg(Extension_19, 15);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(sdv_348, 8) == 0;
    bReturnValue_12 := 1;
    goto L23;

  anon9_Then:
    assume {:partition} BAND(sdv_348, 8) != 0;
    goto L23;

  anon8_Then:
    assume {:partition} 26 != sdv_346;
    goto L23;
}



procedure {:origName "ParStlHIFDCheckIfControllerReady"} ParStlHIFDCheckIfControllerReady(actual_Extension_20: int) returns (Tmp_523: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_523 == 1 || Tmp_523 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlHIFDCheckIfControllerReady"} ParStlHIFDCheckIfControllerReady(actual_Extension_20: int) returns (Tmp_523: int)
{
  var {:scalar} bReturnValue_13: int;
  var {:scalar} Tmp_524: int;
  var {:scalar} bySCRControlReg: int;
  var {:scalar} sdv_350: int;
  var {:scalar} sdv_351: int;
  var {:scalar} Tmp_526: int;
  var {:pointer} Extension_20: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_176: int;

  anon0:
    Extension_20 := actual_Extension_20;
    bReturnValue_13 := 0;
    call {:si_unique_call 1022} vslice_dummy_var_174 := ParStlWriteReg(Extension_20, 14, 12);
    call {:si_unique_call 1023} sdv_351 := ParStlReadReg(Extension_20, 15);
    bySCRControlReg := sdv_351;
    bySCRControlReg := BOR(bySCRControlReg, 32);
    Tmp_524 := bySCRControlReg;
    call {:si_unique_call 1024} vslice_dummy_var_175 := ParStlWriteReg(Extension_20, 15, Tmp_524);
    call {:si_unique_call 1025} ParStlWaitForMicroSeconds(10000);
    call {:si_unique_call 1026} vslice_dummy_var_172 := ParStlWriteIoPort(Extension_20, 2, 0);
    call {:si_unique_call 1027} ParStlWaitForMicroSeconds(1000);
    call {:si_unique_call 1028} vslice_dummy_var_173 := ParStlWriteIoPort(Extension_20, 2, 12);
    call {:si_unique_call 1029} ParStlWaitForMicroSeconds(10000);
    call {:si_unique_call 1030} sdv_350 := ParStlReadIoPort(Extension_20, 4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 128 == sdv_350;
    bReturnValue_13 := 1;
    goto L37;

  L37:
    bySCRControlReg := BAND(bySCRControlReg, BNOT(32));
    Tmp_526 := bySCRControlReg;
    call {:si_unique_call 1031} vslice_dummy_var_176 := ParStlWriteReg(Extension_20, 15, Tmp_526);
    Tmp_523 := bReturnValue_13;
    return;

  anon3_Then:
    assume {:partition} 128 != sdv_350;
    goto L37;
}



procedure {:origName "ParStlReadReg"} ParStlReadReg(actual_Extension_21: int, actual_reg_1: int) returns (Tmp_527: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlReadReg"} ParStlReadReg(actual_Extension_21: int, actual_reg_1: int) returns (Tmp_527: int)
{
  var {:scalar} byReadNibble: int;
  var {:pointer} CurrentPort_3: int;
  var {:scalar} sdv_357: int;
  var {:pointer} Extension_21: int;
  var {:scalar} reg_1: int;

  anon0:
    Extension_21 := actual_Extension_21;
    reg_1 := actual_reg_1;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc CurrentPort_3;
    call {:si_unique_call 1032} byReadNibble := corral_nondet();
    call {:si_unique_call 1033} byReadNibble := corral_nondet();
    call {:si_unique_call 1034} sdv_357 := corral_nondet();
    byReadNibble := BOR(byReadNibble, BAND(sdv_357, BOR(BOR(BOR(16, 32), 64), 128)));
    Tmp_527 := byReadNibble;
    return;
}



procedure {:origName "ParStlCheckIfHiFD"} ParStlCheckIfHiFD(actual_Extension_22: int) returns (Tmp_530: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_530 == 0 || Tmp_530 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfHiFD"} ParStlCheckIfHiFD(actual_Extension_22: int) returns (Tmp_530: int)
{
  var {:scalar} bReturnValue_14: int;
  var {:scalar} sdv_358: int;
  var {:scalar} sdv_359: int;
  var {:scalar} sdv_360: int;
  var {:pointer} Extension_22: int;
  var vslice_dummy_var_177: int;

  anon0:
    Extension_22 := actual_Extension_22;
    bReturnValue_14 := 0;
    call {:si_unique_call 1035} sdv_358 := ParStlSelectAdapterSocket(Extension_22, 1);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_358 == 0;
    goto L21;

  L21:
    call {:si_unique_call 1036} vslice_dummy_var_177 := ParStlSelectAdapterSocket(Extension_22, 0);
    Tmp_530 := bReturnValue_14;
    return;

  anon7_Then:
    assume {:partition} sdv_358 != 0;
    call {:si_unique_call 1037} sdv_359 := ParStlHIFDCheckIfControllerReady(Extension_22);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_359 == 0;
    goto L21;

  anon8_Then:
    assume {:partition} sdv_359 != 0;
    call {:si_unique_call 1038} sdv_360 := ParStlHIFDCheckSMCController(Extension_22);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_360 == 0;
    goto L21;

  anon9_Then:
    assume {:partition} sdv_360 != 0;
    bReturnValue_14 := 1;
    goto L21;
}



procedure {:origName "ParStlHIFDCheckSMCController"} ParStlHIFDCheckSMCController(actual_Extension_23: int) returns (Tmp_532: int);
  free ensures {:va_keep} Tmp_532 == 1 || Tmp_532 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlHIFDCheckSMCController"} ParStlHIFDCheckSMCController(actual_Extension_23: int) returns (Tmp_532: int)
{
  var {:scalar} bReturnValue_15: int;
  var {:scalar} sdv_367: int;
  var {:pointer} Extension_23: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_179: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_183: int;

  anon0:
    Extension_23 := actual_Extension_23;
    bReturnValue_15 := 0;
    call {:si_unique_call 1039} vslice_dummy_var_182 := ParStlWriteIoPort(Extension_23, 0, 85);
    call {:si_unique_call 1040} vslice_dummy_var_178 := ParStlWriteIoPort(Extension_23, 0, 85);
    call {:si_unique_call 1041} vslice_dummy_var_179 := ParStlWriteIoPort(Extension_23, 0, 13);
    call {:si_unique_call 1042} sdv_367 := ParStlReadIoPort(Extension_23, 1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 120 == sdv_367;
    bReturnValue_15 := 1;
    call {:si_unique_call 1043} vslice_dummy_var_183 := ParStlWriteIoPort(Extension_23, 0, 3);
    call {:si_unique_call 1044} vslice_dummy_var_181 := ParStlWriteIoPort(Extension_23, 1, 114);
    goto L18;

  L18:
    call {:si_unique_call 1045} vslice_dummy_var_180 := ParStlWriteReg(Extension_23, 0, 170);
    Tmp_532 := bReturnValue_15;
    return;

  anon3_Then:
    assume {:partition} 120 != sdv_367;
    goto L18;
}



procedure {:origName "ParStlReceiveData"} ParStlReceiveData(actual_Extension_24: int, actual_hostBufferPointer: int, actual_shuttleMemoryAddress: int, actual_count_2: int) returns (Tmp_534: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_534 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlReceiveData"} ParStlReceiveData(actual_Extension_24: int, actual_hostBufferPointer: int, actual_shuttleMemoryAddress: int, actual_count_2: int) returns (Tmp_534: int)
{
  var {:scalar} i_18: int;
  var {:scalar} Tmp_536: int;
  var {:scalar} Tmp_537: int;
  var {:scalar} Tmp_538: int;
  var {:pointer} pchDataBuffer: int;
  var {:scalar} Tmp_539: int;
  var {:scalar} Tmp_540: int;
  var {:scalar} Tmp_541: int;
  var {:scalar} Tmp_542: int;
  var {:pointer} CurrentPort_4: int;
  var {:scalar} sdv_371: int;
  var {:scalar} sdv_372: int;
  var {:scalar} Tmp_543: int;
  var {:scalar} Tmp_544: int;
  var {:scalar} Tmp_545: int;
  var {:pointer} Extension_24: int;
  var {:pointer} hostBufferPointer: int;
  var {:scalar} count_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;

  anon0:
    Extension_24 := actual_Extension_24;
    hostBufferPointer := actual_hostBufferPointer;
    count_2 := actual_count_2;
    pchDataBuffer := hostBufferPointer;
    i_18 := 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc CurrentPort_4;
    call {:si_unique_call 1046} vslice_dummy_var_186 := ParStlWriteReg(Extension_24, 10, 24);
    goto L42;

  L42:
    call {:si_unique_call 1047} i_18, Tmp_536, Tmp_537, Tmp_538, Tmp_539, Tmp_540, Tmp_541, Tmp_542, sdv_371, sdv_372, Tmp_543, Tmp_544, Tmp_545, boogieTmp, vslice_dummy_var_184, vslice_dummy_var_185 := ParStlReceiveData_loop_L42(i_18, Tmp_536, Tmp_537, Tmp_538, pchDataBuffer, Tmp_539, Tmp_540, Tmp_541, Tmp_542, sdv_371, sdv_372, Tmp_543, Tmp_544, Tmp_545, count_2, boogieTmp, vslice_dummy_var_184, vslice_dummy_var_185);
    goto L42_last;

  L42_last:
    call {:si_unique_call 1051} vslice_dummy_var_184 := corral_nondet();
    Tmp_541 := i_18;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    call {:si_unique_call 1052} boogieTmp := corral_nondet();
    Mem_T.INT4[pchDataBuffer + Tmp_541 * 4] := boogieTmp;
    call {:si_unique_call 1053} sdv_371 := corral_nondet();
    Tmp_538 := i_18;
    i_18 := i_18 + 1;
    Tmp_542 := Tmp_538;
    Tmp_540 := i_18;
    i_18 := i_18 + 1;
    Tmp_537 := Tmp_540;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    Mem_T.INT4[pchDataBuffer + Tmp_542 * 4] := BOR(Mem_T.INT4[pchDataBuffer + Tmp_537 * 4], BAND(sdv_371, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} count_2 - 1 == i_18;
    goto L69;

  L69:
    call {:si_unique_call 1048} vslice_dummy_var_185 := corral_nondet();
    Tmp_539 := i_18;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    call {:si_unique_call 1049} boogieTmp := corral_nondet();
    Mem_T.INT4[pchDataBuffer + Tmp_539 * 4] := boogieTmp;
    call {:si_unique_call 1050} sdv_372 := corral_nondet();
    Tmp_536 := i_18;
    i_18 := i_18 + 1;
    Tmp_545 := Tmp_536;
    Tmp_544 := i_18;
    i_18 := i_18 + 1;
    Tmp_543 := Tmp_544;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    Mem_T.INT4[pchDataBuffer + Tmp_545 * 4] := BOR(Mem_T.INT4[pchDataBuffer + Tmp_543 * 4], BAND(sdv_372, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} count_2 <= i_18;
    Tmp_534 := 0;
    return;

  anon6_Then:
    assume {:partition} i_18 < count_2;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} count_2 - 1 != i_18;
    goto L69;
}



procedure {:origName "ParBuildStlDeviceId"} ParBuildStlDeviceId(actual_Extension_25: int, actual_bReturnRawString: int) returns (Tmp_546: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParBuildStlDeviceId"} ParBuildStlDeviceId(actual_Extension_25: int, actual_bReturnRawString: int) returns (Tmp_546: int)
{
  var {:scalar} size: int;
  var {:pointer} szDeviceIdString: int;
  var {:scalar} dtDeviceType: int;
  var {:scalar} charsWritten: int;
  var {:pointer} sdv_376: int;
  var {:pointer} szVidPidStringScan: int;
  var {:pointer} id_4: int;
  var {:scalar} Tmp_551: int;
  var {:scalar} Tmp_552: int;
  var {:pointer} szVidPidString: int;
  var {:pointer} Extension_25: int;
  var {:scalar} bReturnRawString: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;

  anon0:
    Extension_25 := actual_Extension_25;
    bReturnRawString := actual_bReturnRawString;
    call {:si_unique_call 1054} vslice_dummy_var_187 := __HAVOC_malloc(152);
    call {:si_unique_call 1055} vslice_dummy_var_188 := __HAVOC_malloc(32);
    call {:si_unique_call 1056} szDeviceIdString := __HAVOC_malloc(512);
    call {:si_unique_call 1057} szVidPidStringScan := __HAVOC_malloc(128);
    call {:si_unique_call 1058} szVidPidString := __HAVOC_malloc(152);
    call {:si_unique_call 1059} vslice_dummy_var_189 := __HAVOC_malloc(128);
    call {:si_unique_call 1060} vslice_dummy_var_190 := __HAVOC_malloc(32);
    size := 128;
    assume {:nonnull} szDeviceIdString != 0;
    assume szDeviceIdString > 0;
    Mem_T.INT4[szDeviceIdString] := 0;
    szVidPidString := strConst__li2bpl23;
    szVidPidStringScan := strConst__li2bpl24;
    call {:si_unique_call 1061} sdv_RtlZeroMemory(0, 128);
    call {:si_unique_call 1062} dtDeviceType := ParStlGetDeviceType(Extension_25, -1);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} dtDeviceType != 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} dtDeviceType == 7;
    dtDeviceType := BOR(dtDeviceType, 0);
    call {:si_unique_call 1063} charsWritten := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} charsWritten >= size;
    goto L32;

  L32:
    Tmp_546 := 0;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} size > charsWritten;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} 0 <= charsWritten;
    goto L34;

  L34:
    call {:si_unique_call 1064} sdv_376 := ExAllocatePoolWithTag(1, size, -797810352);
    id_4 := sdv_376;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} id_4 != 0;
    call {:si_unique_call 1065} sdv_RtlZeroMemory(0, size);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} bReturnRawString != 0;
    assume {:nonnull} id_4 != 0;
    assume id_4 > 0;
    Mem_T.INT4[id_4] := 0;
    assume {:nonnull} id_4 != 0;
    assume id_4 > 0;
    Mem_T.INT4[id_4] := 126;
    Tmp_552 := size - 4 - 2;
    call {:si_unique_call 1066} sdv_RtlCopyMemory(0, 0, Tmp_552);
    goto L52;

  L52:
    Tmp_546 := id_4;
    goto L1;

  anon20_Then:
    assume {:partition} bReturnRawString == 0;
    Tmp_551 := size - 4;
    call {:si_unique_call 1067} sdv_RtlCopyMemory(0, 0, Tmp_551);
    goto L52;

  anon24_Then:
    assume {:partition} id_4 == 0;
    Tmp_546 := 0;
    goto L1;

  anon19_Then:
    assume {:partition} charsWritten < 0;
    goto L32;

  anon23_Then:
    assume {:partition} dtDeviceType != 7;
    dtDeviceType := BOR(dtDeviceType, 0);
    call {:si_unique_call 1068} charsWritten := corral_nondet();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} charsWritten >= size;
    goto L63;

  L63:
    Tmp_546 := 0;
    goto L1;

  anon21_Then:
    assume {:partition} size > charsWritten;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} 0 > charsWritten;
    goto L63;

  anon22_Then:
    assume {:partition} charsWritten >= 0;
    goto L34;

  anon17_Then:
    assume {:partition} dtDeviceType == 0;
    Tmp_546 := 0;
    goto L1;
}



procedure {:origName "ParStlGetDeviceType"} ParStlGetDeviceType(actual_Extension_26: int, actual_nPreferredDeviceType: int) returns (Tmp_555: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlGetDeviceType"} ParStlGetDeviceType(actual_Extension_26: int, actual_nPreferredDeviceType: int) returns (Tmp_555: int)
{
  var {:scalar} i_19: int;
  var {:scalar} sdv_378: int;
  var {:scalar} sdv_379: int;
  var {:scalar} sdv_380: int;
  var {:scalar} sdv_381: int;
  var {:scalar} Tmp_557: int;
  var {:scalar} sdv_382: int;
  var {:scalar} dtDeviceType_1: int;
  var {:scalar} sdv_384: int;
  var {:scalar} sdv_385: int;
  var {:scalar} sdv_386: int;
  var {:scalar} sdv_388: int;
  var {:scalar} sdv_389: int;
  var {:scalar} sdv_393: int;
  var {:scalar} sdv_394: int;
  var {:scalar} atapiParams_5: int;
  var {:scalar} sdv_395: int;
  var {:scalar} sdv_396: int;
  var {:scalar} sdv_397: int;
  var {:pointer} Extension_26: int;
  var {:scalar} nPreferredDeviceType: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 1069} atapiParams_5 := __HAVOC_malloc(8);
    Extension_26 := actual_Extension_26;
    nPreferredDeviceType := actual_nPreferredDeviceType;
    dtDeviceType_1 := 0;
    i_19 := 0;
    goto L8;

  L8:
    call {:si_unique_call 1070} i_19, Tmp_557 := ParStlGetDeviceType_loop_L8(i_19, Tmp_557, atapiParams_5);
    goto L8_last;

  L8_last:
    assume {:CounterLoop 2} {:Counter "i_19"} true;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} 2 > i_19;
    Tmp_557 := i_19;
    assume {:nonnull} atapiParams_5 != 0;
    assume atapiParams_5 > 0;
    havoc Mem_T.INT4;
    i_19 := i_19 + 1;
    goto anon35_Else_dummy;

  anon35_Else_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} i_19 >= 2;
    call {:si_unique_call 1071} sdv_381 := ParStlCheckIfScsiDevice(Extension_26);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} 1 == sdv_381;
    dtDeviceType_1 := BOR(dtDeviceType_1, 4);
    goto L20;

  L20:
    Tmp_555 := BAND(dtDeviceType_1, nPreferredDeviceType);
    return;

  anon36_Then:
    assume {:partition} 1 != sdv_381;
    call {:si_unique_call 1072} vslice_dummy_var_191 := ParStlReadReg(Extension_26, 11);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 1073} vslice_dummy_var_193 := ParStlWriteReg(Extension_26, 14, 15);
    call {:si_unique_call 1074} vslice_dummy_var_194 := ParStlWriteReg(Extension_26, 15, 4);
    goto L22;

  L22:
    call {:si_unique_call 1075} vslice_dummy_var_192 := ParStlReadReg(Extension_26, 11);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    call {:si_unique_call 1076} sdv_395 := ParStlGetImpactSDeviceType(Extension_26, atapiParams_5, nPreferredDeviceType);
    dtDeviceType_1 := BOR(dtDeviceType_1, sdv_395);
    goto L20;

  anon38_Then:
    call {:si_unique_call 1077} vslice_dummy_var_195 := ParStlReadReg(Extension_26, 11);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    call {:si_unique_call 1078} sdv_385 := ParStlGetImpactDeviceType(Extension_26, atapiParams_5, nPreferredDeviceType);
    dtDeviceType_1 := BOR(dtDeviceType_1, sdv_385);
    goto L20;

  anon39_Then:
    call {:si_unique_call 1079} sdv_386 := ParStlCheckIfEppDevice(Extension_26);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 1 == sdv_386;
    call {:si_unique_call 1080} sdv_388 := ParStlCheckUMAXScannerPresence(Extension_26);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} 1 == sdv_388;
    dtDeviceType_1 := BOR(dtDeviceType_1, 8192);
    goto L20;

  anon41_Then:
    assume {:partition} 1 != sdv_388;
    call {:si_unique_call 1081} sdv_378 := ParStlCheckAvisionScannerPresence(Extension_26);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} 1 == sdv_378;
    dtDeviceType_1 := BOR(dtDeviceType_1, 16384);
    goto L20;

  anon42_Then:
    assume {:partition} 1 != sdv_378;
    dtDeviceType_1 := BOR(dtDeviceType_1, 64);
    goto L20;

  anon40_Then:
    assume {:partition} 1 != sdv_386;
    call {:si_unique_call 1082} sdv_397 := ParStlCheckIfSSFDC(Extension_26);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} 1 == sdv_397;
    dtDeviceType_1 := BOR(dtDeviceType_1, 8);
    goto L20;

  anon43_Then:
    assume {:partition} 1 != sdv_397;
    call {:si_unique_call 1083} sdv_380 := ParStlCheckIfMMC(Extension_26, atapiParams_5);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} 1 == sdv_380;
    dtDeviceType_1 := BOR(dtDeviceType_1, 16);
    goto L20;

  anon44_Then:
    assume {:partition} 1 != sdv_380;
    call {:si_unique_call 1084} ParStlSet16BitOperation(Extension_26);
    call {:si_unique_call 1085} sdv_393 := ParStlCheckIfAtaAtapiDevice(Extension_26, atapiParams_5);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 1 == sdv_393;
    call {:si_unique_call 1086} sdv_396 := ParStlCheckIfAtapiDevice(Extension_26, atapiParams_5);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} 1 == sdv_396;
    call {:si_unique_call 1087} sdv_382 := ParStlCheckIfLS120(Extension_26);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} 1 == sdv_382;
    dtDeviceType_1 := BOR(dtDeviceType_1, 512);
    goto L20;

  anon47_Then:
    assume {:partition} 1 != sdv_382;
    call {:si_unique_call 1088} sdv_389 := ParStlCheckIfHiFD(Extension_26);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} 1 == sdv_389;
    dtDeviceType_1 := BOR(dtDeviceType_1, 256);
    goto L20;

  anon48_Then:
    assume {:partition} 1 != sdv_389;
    dtDeviceType_1 := BOR(dtDeviceType_1, 2);
    goto L20;

  anon46_Then:
    assume {:partition} 1 != sdv_396;
    call {:si_unique_call 1089} sdv_379 := ParStlCheckIfAtaDevice(Extension_26, atapiParams_5);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} 1 == sdv_379;
    dtDeviceType_1 := BOR(dtDeviceType_1, 1);
    goto L20;

  anon49_Then:
    assume {:partition} 1 != sdv_379;
    goto L83;

  L83:
    call {:si_unique_call 1090} sdv_394 := ParStlCheckIfDazzle(Extension_26);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} 1 == sdv_394;
    dtDeviceType_1 := BOR(dtDeviceType_1, 32768);
    goto L20;

  anon50_Then:
    assume {:partition} 1 != sdv_394;
    call {:si_unique_call 1091} sdv_384 := ParStlCheckIfFlash(Extension_26);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} 1 == sdv_384;
    dtDeviceType_1 := BOR(dtDeviceType_1, 32);
    goto L20;

  anon51_Then:
    assume {:partition} 1 != sdv_384;
    goto L20;

  anon45_Then:
    assume {:partition} 1 != sdv_393;
    goto L83;

  anon37_Then:
    goto L22;
}



procedure {:origName "ParStlGetImpactDeviceType"} ParStlGetImpactDeviceType(actual_Extension_27: int, actual_atapiParams_6: int, actual_nPreferredDeviceType_1: int) returns (Tmp_558: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlGetImpactDeviceType"} ParStlGetImpactDeviceType(actual_Extension_27: int, actual_atapiParams_6: int, actual_nPreferredDeviceType_1: int) returns (Tmp_558: int)
{
  var {:scalar} idtImpactDeviceType: int;
  var {:scalar} sdv_399: int;
  var {:scalar} dtDeviceType_2: int;
  var {:scalar} sdv_401: int;
  var {:scalar} sdv_402: int;
  var {:scalar} sdv_403: int;
  var {:pointer} Extension_27: int;
  var {:pointer} atapiParams_6: int;
  var {:scalar} nPreferredDeviceType_1: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;

  anon0:
    Extension_27 := actual_Extension_27;
    atapiParams_6 := actual_atapiParams_6;
    nPreferredDeviceType_1 := actual_nPreferredDeviceType_1;
    dtDeviceType_2 := 0;
    call {:si_unique_call 1092} vslice_dummy_var_197 := ParStlWriteReg(Extension_27, 14, 1);
    call {:si_unique_call 1093} vslice_dummy_var_196 := ParStlReadReg(Extension_27, 15);
    call {:si_unique_call 1094} idtImpactDeviceType := corral_nondet();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} idtImpactDeviceType != 1;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} idtImpactDeviceType != 2;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} idtImpactDeviceType != 3;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} idtImpactDeviceType != 4;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} idtImpactDeviceType != 5;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} idtImpactDeviceType != 6;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} idtImpactDeviceType != 7;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} idtImpactDeviceType != 8;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} idtImpactDeviceType != 9;
    goto L27;

  L27:
    Tmp_558 := BAND(dtDeviceType_2, nPreferredDeviceType_1);
    return;

  anon31_Then:
    assume {:partition} idtImpactDeviceType == 9;
    dtDeviceType_2 := BOR(dtDeviceType_2, 4096);
    goto L27;

  anon32_Then:
    assume {:partition} idtImpactDeviceType == 8;
    dtDeviceType_2 := BOR(dtDeviceType_2, 32);
    goto L27;

  anon33_Then:
    assume {:partition} idtImpactDeviceType == 7;
    dtDeviceType_2 := BOR(dtDeviceType_2, 2048);
    goto L27;

  anon34_Then:
    assume {:partition} idtImpactDeviceType == 6;
    dtDeviceType_2 := BOR(dtDeviceType_2, 128);
    goto L27;

  anon35_Then:
    assume {:partition} idtImpactDeviceType == 5;
    dtDeviceType_2 := BOR(dtDeviceType_2, 256);
    goto L27;

  anon36_Then:
    assume {:partition} idtImpactDeviceType == 4;
    dtDeviceType_2 := BOR(dtDeviceType_2, 16);
    goto L27;

  anon37_Then:
    assume {:partition} idtImpactDeviceType == 3;
    dtDeviceType_2 := BOR(dtDeviceType_2, 8);
    goto L27;

  anon38_Then:
    assume {:partition} idtImpactDeviceType == 2;
    dtDeviceType_2 := BOR(dtDeviceType_2, 1024);
    goto L27;

  anon39_Then:
    assume {:partition} idtImpactDeviceType == 1;
    call {:si_unique_call 1095} ParStlSet16BitOperation(Extension_27);
    call {:si_unique_call 1096} sdv_401 := ParStlCheckIfAtaAtapiDevice(Extension_27, atapiParams_6);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 1 == sdv_401;
    call {:si_unique_call 1097} sdv_403 := ParStlCheckIfAtapiDevice(Extension_27, atapiParams_6);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 1 == sdv_403;
    call {:si_unique_call 1098} sdv_399 := ParStlCheckIfImpactLS120(Extension_27, atapiParams_6);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} 1 == sdv_399;
    dtDeviceType_2 := BOR(dtDeviceType_2, 512);
    goto L27;

  anon29_Then:
    assume {:partition} 1 != sdv_399;
    dtDeviceType_2 := BOR(dtDeviceType_2, 2);
    goto L27;

  anon28_Then:
    assume {:partition} 1 != sdv_403;
    call {:si_unique_call 1099} sdv_402 := ParStlCheckIfAtaDevice(Extension_27, atapiParams_6);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} 1 == sdv_402;
    dtDeviceType_2 := BOR(dtDeviceType_2, 1);
    goto L27;

  anon30_Then:
    assume {:partition} 1 != sdv_402;
    goto L27;

  anon27_Then:
    assume {:partition} 1 != sdv_401;
    goto L27;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_198: int;

  anon0:
    call {:si_unique_call 1100} vslice_dummy_var_198 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ParStlCheckPersonalityForEppDevice"} ParStlCheckPersonalityForEppDevice(actual_Extension_28: int) returns (Tmp_562: int);
  free ensures {:va_keep} Tmp_562 == 1 || Tmp_562 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckPersonalityForEppDevice"} ParStlCheckPersonalityForEppDevice(actual_Extension_28: int) returns (Tmp_562: int)
{
  var {:scalar} bReturnValue_16: int;
  var {:scalar} sdv_405: int;
  var {:scalar} Tmp_564: int;
  var {:pointer} Extension_28: int;
  var vslice_dummy_var_199: int;

  anon0:
    Extension_28 := actual_Extension_28;
    bReturnValue_16 := 0;
    call {:si_unique_call 1101} vslice_dummy_var_199 := ParStlWriteReg(Extension_28, 14, 1);
    call {:si_unique_call 1102} sdv_405 := ParStlReadReg(Extension_28, 15);
    Tmp_564 := BAND(sdv_405, BOR(1, 2));
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 3 == Tmp_564;
    bReturnValue_16 := 1;
    goto L13;

  L13:
    Tmp_562 := bReturnValue_16;
    return;

  anon3_Then:
    assume {:partition} 3 != Tmp_564;
    goto L13;
}



procedure {:origName "ParStlAssertIdleState"} ParStlAssertIdleState(actual_Extension_29: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlAssertIdleState"} ParStlAssertIdleState(actual_Extension_29: int)
{
  var {:pointer} CurrentPort_5: int;
  var {:pointer} Extension_29: int;
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 1103} vslice_dummy_var_200 := __HAVOC_malloc(4);
    Extension_29 := actual_Extension_29;
    assume {:nonnull} Extension_29 != 0;
    assume Extension_29 > 0;
    havoc CurrentPort_5;
    return;
}



procedure {:origName "ParStlCheckIfImpactLS120"} ParStlCheckIfImpactLS120(actual_Extension_30: int, actual_atapiParams_7: int) returns (Tmp_567: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_567 == 0 || Tmp_567 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfImpactLS120"} ParStlCheckIfImpactLS120(actual_Extension_30: int, actual_atapiParams_7: int) returns (Tmp_567: int)
{
  var {:scalar} i_20: int;
  var {:scalar} bLs120NameFound: int;
  var {:scalar} bReturnValue_17: int;
  var {:scalar} nMemoryOnBoard: int;
  var {:pointer} chLs120Name: int;
  var {:scalar} Tmp_569: int;
  var {:pointer} pszAtapiName: int;
  var {:scalar} Tmp_570: int;
  var {:pointer} Extension_30: int;
  var {:pointer} atapiParams_7: int;

  anon0:
    Extension_30 := actual_Extension_30;
    atapiParams_7 := actual_atapiParams_7;
    call {:si_unique_call 1104} chLs120Name := __HAVOC_malloc(44);
    bReturnValue_17 := 0;
    bLs120NameFound := 1;
    chLs120Name := strConst__li2bpl26;
    assume {:nonnull} atapiParams_7 != 0;
    assume atapiParams_7 > 0;
    havoc pszAtapiName;
    i_20 := 0;
    goto L14;

  L14:
    call {:si_unique_call 1105} i_20, Tmp_569, Tmp_570 := ParStlCheckIfImpactLS120_loop_L14(i_20, chLs120Name, Tmp_569, pszAtapiName, Tmp_570);
    goto L14_last;

  L14_last:
    assume {:CounterLoop 10} {:Counter "i_20"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 10 > i_20;
    Tmp_570 := i_20;
    Tmp_569 := i_20;
    assume {:nonnull} chLs120Name != 0;
    assume chLs120Name > 0;
    assume {:nonnull} pszAtapiName != 0;
    assume pszAtapiName > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.INT4[pszAtapiName + Tmp_570 * 4] != Mem_T.INT4[chLs120Name + Tmp_569 * 4];
    bLs120NameFound := 0;
    goto L15;

  L15:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 1 != bLs120NameFound;
    goto L24;

  L24:
    Tmp_567 := bReturnValue_17;
    return;

  anon12_Then:
    assume {:partition} 1 == bLs120NameFound;
    call {:si_unique_call 1106} nMemoryOnBoard := ParStlGetMemorySize(Extension_30);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} BAND(nMemoryOnBoard, 32768) == 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} nMemoryOnBoard != 0;
    bReturnValue_17 := 1;
    goto L24;

  anon14_Then:
    assume {:partition} nMemoryOnBoard == 0;
    goto L24;

  anon13_Then:
    assume {:partition} BAND(nMemoryOnBoard, 32768) != 0;
    goto L24;

  anon15_Then:
    assume {:partition} Mem_T.INT4[pszAtapiName + Tmp_570 * 4] == Mem_T.INT4[chLs120Name + Tmp_569 * 4];
    i_20 := i_20 + 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} i_20 >= 10;
    goto L15;
}



procedure {:origName "ParStlCheckFlashPersonality"} ParStlCheckFlashPersonality(actual_Extension_31: int) returns (Tmp_571: int);
  free ensures {:va_keep} Tmp_571 == 1 || Tmp_571 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckFlashPersonality"} ParStlCheckFlashPersonality(actual_Extension_31: int) returns (Tmp_571: int)
{
  var {:scalar} bReturnValue_18: int;
  var {:scalar} Tmp_573: int;
  var {:scalar} sdv_407: int;
  var {:scalar} sdv_409: int;
  var {:pointer} Extension_31: int;
  var vslice_dummy_var_201: int;

  anon0:
    Extension_31 := actual_Extension_31;
    bReturnValue_18 := 0;
    call {:si_unique_call 1107} sdv_407 := ParStlReadReg(Extension_31, 11);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 199 == sdv_407;
    call {:si_unique_call 1108} vslice_dummy_var_201 := ParStlWriteReg(Extension_31, 14, 1);
    call {:si_unique_call 1109} sdv_409 := ParStlReadReg(Extension_31, 15);
    Tmp_573 := BAND(sdv_409, BOR(1, 2));
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 1 == Tmp_573;
    bReturnValue_18 := 1;
    goto L18;

  L18:
    Tmp_571 := bReturnValue_18;
    return;

  anon6_Then:
    assume {:partition} 1 != Tmp_573;
    goto L18;

  anon5_Then:
    assume {:partition} 199 != sdv_407;
    bReturnValue_18 := 1;
    goto L18;
}



procedure {:origName "ParStlWriteReg"} ParStlWriteReg(actual_Extension_32: int, actual_reg_2: int, actual_databyte_1: int) returns (Tmp_574: int);
  free ensures {:va_keep} Tmp_574 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlWriteReg"} ParStlWriteReg(actual_Extension_32: int, actual_reg_2: int, actual_databyte_1: int) returns (Tmp_574: int)
{
  var {:pointer} CurrentPort_6: int;
  var {:pointer} Extension_32: int;
  var {:scalar} reg_2: int;
  var {:scalar} databyte_1: int;

  anon0:
    Extension_32 := actual_Extension_32;
    reg_2 := actual_reg_2;
    databyte_1 := actual_databyte_1;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc CurrentPort_6;
    Tmp_574 := 0;
    return;
}



procedure {:origName "ParStlCheckIfStl"} ParStlCheckIfStl(actual_Extension_33: int, actual_ulDaisyIndex_2: int) returns (Tmp_578: int);
  free ensures {:va_keep} Tmp_578 == 1 || Tmp_578 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfStl"} ParStlCheckIfStl(actual_Extension_33: int, actual_ulDaisyIndex_2: int) returns (Tmp_578: int)
{
  var {:scalar} bStlNon1284: int;
  var {:scalar} sdv_411: int;
  var {:scalar} sdv_412: int;
  var {:pointer} Extension_33: int;
  var {:scalar} ulDaisyIndex_2: int;
  var boogieTmp: int;

  anon0:
    Extension_33 := actual_Extension_33;
    ulDaisyIndex_2 := actual_ulDaisyIndex_2;
    bStlNon1284 := 0;
    assume {:nonnull} Extension_33 != 0;
    assume Extension_33 > 0;
    call {:si_unique_call 1110} boogieTmp := corral_nondet();
    call {:si_unique_call 1111} bStlNon1284 := ParStlCheckIfNon1284_3Present(Extension_33);
    call {:si_unique_call 1112} sdv_411 := ParStlCheckIfStl1284_3(Extension_33, ulDaisyIndex_2, bStlNon1284);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 1 == sdv_411;
    assume {:nonnull} Extension_33 != 0;
    assume Extension_33 > 0;
    call {:si_unique_call 1113} boogieTmp := corral_nondet();
    Tmp_578 := 1;
    goto L1;

  L1:
    return;

  anon7_Then:
    assume {:partition} 1 != sdv_411;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 1 == bStlNon1284;
    call {:si_unique_call 1114} sdv_412 := ParStlCheckIfStlProductId(Extension_33, ulDaisyIndex_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 1 == sdv_412;
    assume {:nonnull} Extension_33 != 0;
    assume Extension_33 > 0;
    call {:si_unique_call 1115} boogieTmp := corral_nondet();
    Tmp_578 := 1;
    goto L1;

  anon9_Then:
    assume {:partition} 1 != sdv_412;
    goto L17;

  L17:
    Tmp_578 := 0;
    goto L1;

  anon8_Then:
    assume {:partition} 1 != bStlNon1284;
    goto L17;
}



procedure {:origName "ParStlIsMMCEnginePresent"} ParStlIsMMCEnginePresent(actual_Extension_34: int) returns (Tmp_580: int);
  free ensures {:va_keep} Tmp_580 == 0 || Tmp_580 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlIsMMCEnginePresent"} ParStlIsMMCEnginePresent(actual_Extension_34: int) returns (Tmp_580: int)
{
  var {:scalar} sdv_414: int;
  var {:scalar} bReturnValue_19: int;
  var {:scalar} sdv_415: int;
  var {:scalar} sdv_420: int;
  var {:scalar} sdv_421: int;
  var {:scalar} sdv_422: int;
  var {:pointer} Extension_34: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;

  anon0:
    Extension_34 := actual_Extension_34;
    bReturnValue_19 := 0;
    call {:si_unique_call 1116} sdv_415 := ParStlReadIoPort(Extension_34, 4);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_415 == 20;
    call {:si_unique_call 1117} sdv_421 := ParStlReadIoPort(Extension_34, 5);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_421 == 235;
    goto L17;

  L17:
    Tmp_580 := bReturnValue_19;
    return;

  anon12_Then:
    assume {:partition} sdv_421 != 235;
    goto L9;

  L9:
    call {:si_unique_call 1118} vslice_dummy_var_202 := ParStlWriteReg(Extension_34, 30, 6);
    call {:si_unique_call 1119} vslice_dummy_var_203 := ParStlWriteReg(Extension_34, 31, 0);
    call {:si_unique_call 1120} sdv_422 := ParStlReadReg(Extension_34, 31);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_422 == 0;
    call {:si_unique_call 1121} vslice_dummy_var_204 := ParStlWriteReg(Extension_34, 30, 0);
    call {:si_unique_call 1122} vslice_dummy_var_205 := ParStlWriteReg(Extension_34, 31, 161);
    call {:si_unique_call 1123} vslice_dummy_var_206 := ParStlWriteReg(Extension_34, 30, 6);
    call {:si_unique_call 1124} vslice_dummy_var_207 := ParStlWriteReg(Extension_34, 31, 0);
    call {:si_unique_call 1125} vslice_dummy_var_208 := ParStlWriteReg(Extension_34, 30, 0);
    call {:si_unique_call 1126} sdv_420 := ParStlReadReg(Extension_34, 31);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 161 == sdv_420;
    call {:si_unique_call 1127} vslice_dummy_var_209 := ParStlWriteReg(Extension_34, 30, 6);
    call {:si_unique_call 1128} sdv_414 := ParStlReadReg(Extension_34, 31);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_414 == 0;
    bReturnValue_19 := 1;
    goto L17;

  anon15_Then:
    assume {:partition} sdv_414 != 0;
    goto L17;

  anon14_Then:
    assume {:partition} 161 != sdv_420;
    goto L17;

  anon13_Then:
    assume {:partition} sdv_422 != 0;
    goto L17;

  anon11_Then:
    assume {:partition} sdv_415 != 20;
    goto L9;
}



procedure {:origName "ParStlCheckIfFlash"} ParStlCheckIfFlash(actual_Extension_35: int) returns (Tmp_582: int);
  free ensures {:va_keep} Tmp_582 == 0 || Tmp_582 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfFlash"} ParStlCheckIfFlash(actual_Extension_35: int) returns (Tmp_582: int)
{
  var {:scalar} bReturnValue_20: int;
  var {:scalar} sdv_426: int;
  var {:scalar} sdv_427: int;
  var {:scalar} sdv_429: int;
  var {:pointer} Extension_35: int;

  anon0:
    Extension_35 := actual_Extension_35;
    bReturnValue_20 := 0;
    call {:si_unique_call 1129} sdv_426 := ParStlReadReg(Extension_35, 11);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 199 == sdv_426;
    goto L12;

  L12:
    call {:si_unique_call 1130} bReturnValue_20 := ParStlCheckFlashPersonality(Extension_35);
    goto L16;

  L16:
    Tmp_582 := bReturnValue_20;
    return;

  anon7_Then:
    assume {:partition} 199 != sdv_426;
    call {:si_unique_call 1131} sdv_427 := ParStlReadReg(Extension_35, 11);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 200 != sdv_427;
    call {:si_unique_call 1132} sdv_429 := ParStlReadReg(Extension_35, 11);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 198 != sdv_429;
    goto L16;

  anon9_Then:
    assume {:partition} 198 == sdv_429;
    goto L12;

  anon8_Then:
    assume {:partition} 200 == sdv_427;
    goto L12;
}



procedure {:origName "ParStlCheckIfEppDevice"} ParStlCheckIfEppDevice(actual_Extension_36: int) returns (Tmp_584: int);
  free ensures {:va_keep} Tmp_584 == 0 || Tmp_584 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfEppDevice"} ParStlCheckIfEppDevice(actual_Extension_36: int) returns (Tmp_584: int)
{
  var {:scalar} bReturnValue_21: int;
  var {:scalar} sdv_430: int;
  var {:pointer} Extension_36: int;

  anon0:
    Extension_36 := actual_Extension_36;
    bReturnValue_21 := 0;
    call {:si_unique_call 1133} sdv_430 := ParStlReadReg(Extension_36, 11);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 199 != sdv_430;
    goto L14;

  L14:
    Tmp_584 := bReturnValue_21;
    return;

  anon3_Then:
    assume {:partition} 199 == sdv_430;
    call {:si_unique_call 1134} bReturnValue_21 := ParStlCheckPersonalityForEppDevice(Extension_36);
    goto L14;
}



procedure {:origName "ParStlCheckCardInsertionStatus"} ParStlCheckCardInsertionStatus(actual_Extension_37: int) returns (Tmp_586: int);
  free ensures {:va_keep} Tmp_586 == 0 || Tmp_586 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckCardInsertionStatus"} ParStlCheckCardInsertionStatus(actual_Extension_37: int) returns (Tmp_586: int)
{
  var {:scalar} bReturnValue_22: int;
  var {:scalar} sdv_432: int;
  var {:scalar} byPowerRegData: int;
  var {:scalar} sdv_434: int;
  var {:pointer} Extension_37: int;
  var vslice_dummy_var_210: int;

  anon0:
    Extension_37 := actual_Extension_37;
    bReturnValue_22 := 0;
    call {:si_unique_call 1135} sdv_432 := ParStlReadReg(Extension_37, 11);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 199 != sdv_432;
    goto L21;

  L21:
    Tmp_586 := bReturnValue_22;
    return;

  anon5_Then:
    assume {:partition} 199 == sdv_432;
    call {:si_unique_call 1136} vslice_dummy_var_210 := ParStlWriteReg(Extension_37, 14, 15);
    call {:si_unique_call 1137} sdv_434 := ParStlReadReg(Extension_37, 15);
    byPowerRegData := sdv_434;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} BAND(byPowerRegData, 2) != 0;
    goto L21;

  anon6_Then:
    assume {:partition} BAND(byPowerRegData, 2) == 0;
    bReturnValue_22 := 1;
    goto L21;
}



procedure {:origName "ParStlCheckAvisionScannerPresence"} ParStlCheckAvisionScannerPresence(actual_Extension_38: int) returns (Tmp_588: int);
  free ensures {:va_keep} Tmp_588 == 0 || Tmp_588 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckAvisionScannerPresence"} ParStlCheckAvisionScannerPresence(actual_Extension_38: int) returns (Tmp_588: int)
{
  var {:scalar} bReturnValue_23: int;
  var {:scalar} sdv_436: int;
  var {:scalar} sdv_437: int;
  var {:scalar} sdv_445: int;
  var {:scalar} data: int;
  var {:scalar} sdv_446: int;
  var {:scalar} sdv_447: int;
  var {:pointer} Extension_38: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;

  anon0:
    Extension_38 := actual_Extension_38;
    bReturnValue_23 := 0;
    call {:si_unique_call 1138} sdv_437 := ParStlReadReg(Extension_38, 25);
    data := sdv_437;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BAND(data, 128) == 0;
    goto L27;

  L27:
    Tmp_588 := bReturnValue_23;
    return;

  anon11_Then:
    assume {:partition} BAND(data, 128) != 0;
    call {:si_unique_call 1139} vslice_dummy_var_211 := ParStlWriteReg(Extension_38, 26, 8);
    call {:si_unique_call 1140} vslice_dummy_var_212 := ParStlWriteReg(Extension_38, 26, 8);
    call {:si_unique_call 1141} sdv_445 := ParStlReadReg(Extension_38, 25);
    data := sdv_445;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(data, 128) != 0;
    goto L27;

  anon12_Then:
    assume {:partition} BAND(data, 128) == 0;
    call {:si_unique_call 1142} vslice_dummy_var_213 := ParStlWriteReg(Extension_38, 26, 0);
    call {:si_unique_call 1143} vslice_dummy_var_214 := ParStlWriteReg(Extension_38, 26, 0);
    call {:si_unique_call 1144} sdv_446 := ParStlReadReg(Extension_38, 25);
    data := sdv_446;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} BAND(data, 128) != 0;
    call {:si_unique_call 1145} vslice_dummy_var_215 := ParStlWriteReg(Extension_38, 26, 2);
    call {:si_unique_call 1146} vslice_dummy_var_216 := ParStlWriteReg(Extension_38, 26, 2);
    call {:si_unique_call 1147} sdv_447 := ParStlReadReg(Extension_38, 25);
    data := sdv_447;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} BAND(data, 128) == 0;
    call {:si_unique_call 1148} vslice_dummy_var_217 := ParStlWriteReg(Extension_38, 26, 0);
    call {:si_unique_call 1149} vslice_dummy_var_218 := ParStlWriteReg(Extension_38, 26, 0);
    call {:si_unique_call 1150} sdv_436 := ParStlReadReg(Extension_38, 25);
    data := sdv_436;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(data, 128) != 0;
    bReturnValue_23 := 1;
    goto L27;

  anon15_Then:
    assume {:partition} BAND(data, 128) == 0;
    goto L27;

  anon14_Then:
    assume {:partition} BAND(data, 128) != 0;
    goto L27;

  anon13_Then:
    assume {:partition} BAND(data, 128) == 0;
    goto L27;
}



procedure {:origName "ParStlWaitForDrq"} ParStlWaitForDrq(actual_Extension_39: int) returns (Tmp_590: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_590 == 1 || Tmp_590 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlWaitForDrq"} ParStlWaitForDrq(actual_Extension_39: int) returns (Tmp_590: int)
{
  var {:scalar} nMaxRetrials_2: int;
  var {:scalar} bRetVal_2: int;
  var {:scalar} sdv_448: int;
  var {:scalar} Tmp_592: int;
  var {:pointer} Extension_39: int;

  anon0:
    Extension_39 := actual_Extension_39;
    nMaxRetrials_2 := 5000;
    bRetVal_2 := 0;
    goto L7;

  L7:
    call {:si_unique_call 1151} nMaxRetrials_2, sdv_448, Tmp_592 := ParStlWaitForDrq_loop_L7(nMaxRetrials_2, sdv_448, Tmp_592, Extension_39);
    goto L7_last;

  L7_last:
    Tmp_592 := nMaxRetrials_2;
    nMaxRetrials_2 := nMaxRetrials_2 - 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_592 != 0;
    call {:si_unique_call 1152} sdv_448 := ParStlReadIoPort(Extension_39, 7);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(sdv_448, 8) != 0;
    bRetVal_2 := 1;
    goto L8;

  L8:
    Tmp_590 := bRetVal_2;
    return;

  anon5_Then:
    assume {:partition} BAND(sdv_448, 8) == 0;
    call {:si_unique_call 1153} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_592 == 0;
    goto L8;
}



procedure {:origName "ParStlQueryStlDeviceId"} ParStlQueryStlDeviceId(actual_Extension_40: int, actual_CallerDeviceIdBuffer: int, actual_CallerBufferSize: int, actual_DeviceIdSize_3: int, actual_bReturnRawString_1: int) returns (Tmp_593: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlQueryStlDeviceId"} ParStlQueryStlDeviceId(actual_Extension_40: int, actual_CallerDeviceIdBuffer: int, actual_CallerBufferSize: int, actual_DeviceIdSize_3: int, actual_bReturnRawString_1: int) returns (Tmp_593: int)
{
  var {:scalar} deviceIdBufferSize: int;
  var {:scalar} Tmp_595: int;
  var {:scalar} maxValidDevId: int;
  var {:scalar} Tmp_597: int;
  var {:scalar} Status_1: int;
  var {:scalar} minValidDevId: int;
  var {:scalar} Tmp_600: int;
  var {:scalar} bytesToRead: int;
  var {:scalar} Tmp_602: int;
  var {:scalar} deviceIdSize: int;
  var {:pointer} Controller_2: int;
  var {:scalar} sdv_451: int;
  var {:pointer} idSizeBuffer: int;
  var {:dopa} {:scalar} bytesRead: int;
  var {:scalar} Tmp_603: int;
  var {:pointer} readPtr: int;
  var {:scalar} sdv_454: int;
  var {:pointer} sdv_455: int;
  var {:scalar} Tmp_604: int;
  var {:pointer} sdv_456: int;
  var {:pointer} deviceIdBuffer: int;
  var {:pointer} Extension_40: int;
  var {:pointer} CallerDeviceIdBuffer: int;
  var {:scalar} CallerBufferSize: int;
  var {:pointer} DeviceIdSize_3: int;
  var {:scalar} bReturnRawString_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_3227: int;
  var vslice_dummy_var_3228: int;

  anon0:
    call {:si_unique_call 1154} idSizeBuffer := __HAVOC_malloc(4);
    call {:si_unique_call 1155} bytesRead := __HAVOC_malloc(4);
    Extension_40 := actual_Extension_40;
    CallerDeviceIdBuffer := actual_CallerDeviceIdBuffer;
    CallerBufferSize := actual_CallerBufferSize;
    DeviceIdSize_3 := actual_DeviceIdSize_3;
    bReturnRawString_1 := actual_bReturnRawString_1;
    call {:si_unique_call 1156} vslice_dummy_var_219 := __HAVOC_malloc(20);
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    call {:si_unique_call 1157} boogieTmp := __HAVOC_malloc(8);
    assume {:nonnull} Extension_40 != 0;
    assume Extension_40 > 0;
    havoc Controller_2;
    assume {:nonnull} bytesRead != 0;
    assume bytesRead > 0;
    Mem_T.INT4[bytesRead] := 0;
    assume {:nonnull} DeviceIdSize_3 != 0;
    assume DeviceIdSize_3 > 0;
    Mem_T.INT4[DeviceIdSize_3] := 0;
    call {:si_unique_call 1158} ParStlAssertIdleState(Extension_40);
    assume {:nonnull} Extension_40 != 0;
    assume Extension_40 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Extension_40 != 0;
    assume Extension_40 > 0;
    havoc Tmp_597;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} Extension_40 != 0;
    assume Extension_40 > 0;
    havoc Tmp_595;
    goto L19;

  L19:
    call {:si_unique_call 1159} Status_1 := ParEnterNibbleMode(Extension_40, 1);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Status_1 >= 0;
    bytesToRead := 2;
    call {:si_unique_call 1160} Status_1 := ParNibbleModeRead(Extension_40, idSizeBuffer, bytesToRead, bytesRead);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Status_1 < 0;
    goto L47;

  L47:
    call {:si_unique_call 1161} ParStlAssertIdleState(Extension_40);
    call {:si_unique_call 1162} deviceIdBuffer := ParBuildStlDeviceId(Extension_40, bReturnRawString_1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} deviceIdBuffer != 0;
    deviceIdSize := sdv_454;
    assume {:nonnull} DeviceIdSize_3 != 0;
    assume DeviceIdSize_3 > 0;
    Mem_T.INT4[DeviceIdSize_3] := deviceIdSize;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} CallerDeviceIdBuffer != 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} CallerBufferSize >= deviceIdSize + 1;
    call {:si_unique_call 1163} sdv_RtlZeroMemory(0, CallerBufferSize);
    Tmp_603 := deviceIdSize;
    call {:si_unique_call 1164} sdv_RtlCopyMemory(0, 0, Tmp_603);
    call {:si_unique_call 1165} sdv_ExFreePool(0);
    Tmp_593 := CallerDeviceIdBuffer;
    goto L1;

  L1:
    return;

  anon45_Then:
    assume {:partition} deviceIdSize + 1 > CallerBufferSize;
    goto L80;

  L80:
    Tmp_593 := deviceIdBuffer;
    goto L1;

  anon53_Then:
    assume {:partition} CallerDeviceIdBuffer == 0;
    goto L80;

  anon44_Then:
    assume {:partition} deviceIdBuffer == 0;
    Tmp_593 := 0;
    goto L1;

  anon41_Then:
    assume {:partition} 0 <= Status_1;
    assume {:nonnull} bytesRead != 0;
    assume bytesRead > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.INT4[bytesRead] != bytesToRead;
    goto L47;

  anon42_Then:
    assume {:partition} Mem_T.INT4[bytesRead] == bytesToRead;
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    havoc deviceIdSize;
    minValidDevId := 14;
    maxValidDevId := 2048;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} minValidDevId > deviceIdSize;
    goto L47;

  anon54_Then:
    assume {:partition} deviceIdSize >= minValidDevId;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} deviceIdSize <= maxValidDevId;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} bReturnRawString_1 != 0;
    assume {:nonnull} DeviceIdSize_3 != 0;
    assume DeviceIdSize_3 > 0;
    Mem_T.INT4[DeviceIdSize_3] := deviceIdSize;
    deviceIdBufferSize := deviceIdSize + 1;
    goto L97;

  L97:
    Tmp_604 := deviceIdBufferSize;
    call {:si_unique_call 1166} sdv_455 := ExAllocatePoolWithTag(1, Tmp_604, -797810352);
    deviceIdBuffer := sdv_455;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} deviceIdBuffer != 0;
    Tmp_602 := deviceIdBufferSize;
    call {:si_unique_call 1167} sdv_RtlZeroMemory(0, Tmp_602);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} bReturnRawString_1 != 0;
    assume {:nonnull} deviceIdBuffer != 0;
    assume deviceIdBuffer > 0;
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    havoc vslice_dummy_var_3227;
    Mem_T.INT4[deviceIdBuffer] := vslice_dummy_var_3227;
    assume {:nonnull} deviceIdBuffer != 0;
    assume deviceIdBuffer > 0;
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    havoc vslice_dummy_var_3228;
    Mem_T.INT4[deviceIdBuffer] := vslice_dummy_var_3228;
    readPtr := deviceIdBuffer;
    goto L113;

  L113:
    bytesToRead := deviceIdSize - 2;
    call {:si_unique_call 1168} Status_1 := ParNibbleModeRead(Extension_40, readPtr, bytesToRead, bytesRead);
    call {:si_unique_call 1169} ParTerminateNibbleMode(Extension_40);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Status_1 >= 0;
    assume {:nonnull} bytesRead != 0;
    assume bytesRead > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} 1 <= Mem_T.INT4[bytesRead];
    goto anon56_Then, anon56_Else;

  anon56_Else:
    sdv_456 := 0;
    goto L129;

  L129:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_456 != 0;
    deviceIdSize := sdv_451;
    assume {:nonnull} DeviceIdSize_3 != 0;
    assume DeviceIdSize_3 > 0;
    Mem_T.INT4[DeviceIdSize_3] := deviceIdSize;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} CallerDeviceIdBuffer != 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} CallerBufferSize >= deviceIdSize + 1;
    call {:si_unique_call 1170} sdv_RtlZeroMemory(0, CallerBufferSize);
    Tmp_600 := deviceIdSize;
    call {:si_unique_call 1171} sdv_RtlCopyMemory(0, 0, Tmp_600);
    call {:si_unique_call 1172} sdv_ExFreePool(0);
    Tmp_593 := CallerDeviceIdBuffer;
    goto L1;

  anon51_Then:
    assume {:partition} deviceIdSize + 1 > CallerBufferSize;
    goto L139;

  L139:
    Tmp_593 := deviceIdBuffer;
    goto L1;

  anon57_Then:
    assume {:partition} CallerDeviceIdBuffer == 0;
    goto L139;

  anon50_Then:
    assume {:partition} sdv_456 == 0;
    call {:si_unique_call 1173} sdv_ExFreePool(0);
    goto L47;

  anon56_Then:
    call {:si_unique_call 1174} sdv_456 := __HAVOC_malloc(1);
    goto L129;

  anon49_Then:
    assume {:partition} Mem_T.INT4[bytesRead] < 1;
    goto L122;

  L122:
    call {:si_unique_call 1175} sdv_ExFreePool(0);
    goto L47;

  anon48_Then:
    assume {:partition} 0 > Status_1;
    goto L122;

  anon47_Then:
    assume {:partition} bReturnRawString_1 == 0;
    readPtr := deviceIdBuffer;
    goto L113;

  anon55_Then:
    assume {:partition} deviceIdBuffer == 0;
    goto L47;

  anon46_Then:
    assume {:partition} bReturnRawString_1 == 0;
    assume {:nonnull} DeviceIdSize_3 != 0;
    assume DeviceIdSize_3 > 0;
    Mem_T.INT4[DeviceIdSize_3] := deviceIdSize - 2;
    deviceIdBufferSize := deviceIdSize - 2 + 1;
    goto L97;

  anon43_Then:
    assume {:partition} maxValidDevId < deviceIdSize;
    goto L47;

  anon40_Then:
    assume {:partition} 0 > Status_1;
    call {:si_unique_call 1176} ParTerminateNibbleMode(Extension_40);
    goto L47;

  anon52_Then:
    goto L19;

  anon39_Then:
    goto L19;
}



procedure {:origName "ParStlGetImpactSDeviceType"} ParStlGetImpactSDeviceType(actual_Extension_41: int, actual_atapiParams_8: int, actual_nPreferredDeviceType_2: int) returns (Tmp_605: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlGetImpactSDeviceType"} ParStlGetImpactSDeviceType(actual_Extension_41: int, actual_atapiParams_8: int, actual_nPreferredDeviceType_2: int) returns (Tmp_605: int)
{
  var {:scalar} idtImpactDeviceType_1: int;
  var {:scalar} sdv_458: int;
  var {:scalar} dtDeviceType_3: int;
  var {:scalar} sdv_461: int;
  var {:scalar} sdv_462: int;
  var {:scalar} idtImpactSDeviceType: int;
  var {:scalar} sdv_463: int;
  var {:pointer} Extension_41: int;
  var {:pointer} atapiParams_8: int;
  var {:scalar} nPreferredDeviceType_2: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;

  anon0:
    Extension_41 := actual_Extension_41;
    atapiParams_8 := actual_atapiParams_8;
    nPreferredDeviceType_2 := actual_nPreferredDeviceType_2;
    dtDeviceType_3 := 0;
    call {:si_unique_call 1177} vslice_dummy_var_222 := ParStlWriteReg(Extension_41, 14, 1);
    call {:si_unique_call 1178} vslice_dummy_var_220 := ParStlReadReg(Extension_41, 15);
    call {:si_unique_call 1179} idtImpactDeviceType_1 := corral_nondet();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} idtImpactDeviceType_1 != 1;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} idtImpactDeviceType_1 != 2;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} idtImpactDeviceType_1 != 3;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} idtImpactDeviceType_1 != 4;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} idtImpactDeviceType_1 != 5;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} idtImpactDeviceType_1 != 6;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} idtImpactDeviceType_1 != 7;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} idtImpactDeviceType_1 != 8;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} idtImpactDeviceType_1 != 9;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} idtImpactDeviceType_1 != 10;
    goto L37;

  L37:
    Tmp_605 := BAND(dtDeviceType_3, nPreferredDeviceType_2);
    return;

  anon30_Then:
    assume {:partition} idtImpactDeviceType_1 == 10;
    call {:si_unique_call 1180} vslice_dummy_var_221 := ParStlWriteReg(Extension_41, 14, 41);
    call {:si_unique_call 1181} sdv_461 := ParStlReadReg(Extension_41, 15);
    idtImpactSDeviceType := sdv_461;
    dtDeviceType_3 := -1073741824;
    dtDeviceType_3 := BOR(dtDeviceType_3, idtImpactSDeviceType);
    goto L37;

  anon31_Then:
    assume {:partition} idtImpactDeviceType_1 == 9;
    dtDeviceType_3 := BOR(dtDeviceType_3, 4096);
    goto L37;

  anon32_Then:
    assume {:partition} idtImpactDeviceType_1 == 8;
    dtDeviceType_3 := BOR(dtDeviceType_3, 32);
    goto L37;

  anon33_Then:
    assume {:partition} idtImpactDeviceType_1 == 7;
    dtDeviceType_3 := BOR(dtDeviceType_3, 2048);
    goto L37;

  anon34_Then:
    assume {:partition} idtImpactDeviceType_1 == 6;
    dtDeviceType_3 := BOR(dtDeviceType_3, 128);
    goto L37;

  anon35_Then:
    assume {:partition} idtImpactDeviceType_1 == 5;
    dtDeviceType_3 := BOR(dtDeviceType_3, 256);
    goto L37;

  anon36_Then:
    assume {:partition} idtImpactDeviceType_1 == 4;
    dtDeviceType_3 := BOR(dtDeviceType_3, 16);
    goto L37;

  anon37_Then:
    assume {:partition} idtImpactDeviceType_1 == 3;
    dtDeviceType_3 := BOR(dtDeviceType_3, 8);
    goto L37;

  anon38_Then:
    assume {:partition} idtImpactDeviceType_1 == 2;
    dtDeviceType_3 := BOR(dtDeviceType_3, 1024);
    goto L37;

  anon39_Then:
    assume {:partition} idtImpactDeviceType_1 == 1;
    call {:si_unique_call 1182} ParStlSet16BitOperation(Extension_41);
    call {:si_unique_call 1183} sdv_462 := ParStlCheckIfAtaAtapiDevice(Extension_41, atapiParams_8);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 1 == sdv_462;
    call {:si_unique_call 1184} sdv_458 := ParStlCheckIfAtapiDevice(Extension_41, atapiParams_8);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 1 == sdv_458;
    dtDeviceType_3 := BOR(dtDeviceType_3, 2);
    goto L37;

  anon28_Then:
    assume {:partition} 1 != sdv_458;
    call {:si_unique_call 1185} sdv_463 := ParStlCheckIfAtaDevice(Extension_41, atapiParams_8);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} 1 == sdv_463;
    dtDeviceType_3 := BOR(dtDeviceType_3, 1);
    goto L37;

  anon29_Then:
    assume {:partition} 1 != sdv_463;
    goto L37;

  anon27_Then:
    assume {:partition} 1 != sdv_462;
    goto L37;
}



procedure {:origName "ParStlReadIoPort"} ParStlReadIoPort(actual_Extension_42: int, actual_reg_3: int) returns (Tmp_607: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlReadIoPort"} ParStlReadIoPort(actual_Extension_42: int, actual_reg_3: int) returns (Tmp_607: int)
{
  var {:pointer} Extension_42: int;
  var {:scalar} reg_3: int;

  anon0:
    Extension_42 := actual_Extension_42;
    reg_3 := actual_reg_3;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} reg_3 != 8;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} reg_3 == 9;
    reg_3 := 23;
    goto L8;

  L8:
    call {:si_unique_call 1186} Tmp_607 := ParStlReadReg(Extension_42, reg_3);
    return;

  anon6_Then:
    assume {:partition} reg_3 != 9;
    reg_3 := BOR(reg_3, BOR(8, 16));
    goto L8;

  anon5_Then:
    assume {:partition} reg_3 == 8;
    reg_3 := 22;
    goto L8;
}



procedure {:origName "ParStlEPPWrite"} ParStlEPPWrite(actual_Extension_43: int, actual_value_3: int) returns (Tmp_609: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlEPPWrite"} ParStlEPPWrite(actual_Extension_43: int, actual_value_3: int) returns (Tmp_609: int)
{
  var {:scalar} sdv_465: int;
  var {:scalar} timeout_2: int;
  var {:scalar} Tmp_611: int;
  var {:scalar} statusData_1: int;
  var {:scalar} idx_4: int;
  var {:scalar} Tmp_613: int;
  var {:pointer} Extension_43: int;
  var {:scalar} value_3: int;
  var vslice_dummy_var_223: int;

  anon0:
    Extension_43 := actual_Extension_43;
    value_3 := actual_value_3;
    statusData_1 := 0;
    timeout_2 := 1;
    idx_4 := 0;
    goto L9;

  L9:
    call {:si_unique_call 1187} sdv_465, statusData_1, idx_4 := ParStlEPPWrite_loop_L9(sdv_465, statusData_1, idx_4, Extension_43);
    goto L9_last;

  L9_last:
    assume {:CounterLoop 10} {:Counter "idx_4"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 10 > idx_4;
    call {:si_unique_call 1188} sdv_465 := ParStlReadReg(Extension_43, 25);
    statusData_1 := sdv_465;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(statusData_1, 32) != 0;
    idx_4 := idx_4 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} BAND(statusData_1, 32) == 0;
    timeout_2 := 0;
    goto L10;

  L10:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} timeout_2 == 1;
    call {:si_unique_call 1189} Tmp_613 := corral_nondet();
    Tmp_609 := BOR(Tmp_613, 256);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} timeout_2 != 1;
    Tmp_611 := value_3;
    call {:si_unique_call 1190} vslice_dummy_var_223 := ParStlWriteReg(Extension_43, 28, Tmp_611);
    call {:si_unique_call 1191} Tmp_609 := corral_nondet();
    goto L1;

  anon7_Then:
    assume {:partition} idx_4 >= 10;
    goto L10;
}



procedure {:origName "ParStlSelectAdapterSocket"} ParStlSelectAdapterSocket(actual_Extension_44: int, actual_nSocketNumber: int) returns (Tmp_614: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_614 == 0 || Tmp_614 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlSelectAdapterSocket"} ParStlSelectAdapterSocket(actual_Extension_44: int, actual_nSocketNumber: int) returns (Tmp_614: int)
{
  var {:scalar} Tmp_615: int;
  var {:scalar} bReturnValue_24: int;
  var {:scalar} bySCRControlReg_1: int;
  var {:scalar} sdv_471: int;
  var {:scalar} Tmp_616: int;
  var {:scalar} Tmp_617: int;
  var {:scalar} sdv_473: int;
  var {:scalar} byISAControlReg: int;
  var {:pointer} Extension_44: int;
  var {:scalar} nSocketNumber: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;

  anon0:
    Extension_44 := actual_Extension_44;
    nSocketNumber := actual_nSocketNumber;
    bReturnValue_24 := 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} nSocketNumber != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} nSocketNumber != 1;
    goto L13;

  L13:
    Tmp_614 := bReturnValue_24;
    return;

  anon9_Then:
    assume {:partition} nSocketNumber == 1;
    goto L8;

  L8:
    call {:si_unique_call 1192} vslice_dummy_var_224 := ParStlWriteReg(Extension_44, 14, 12);
    call {:si_unique_call 1193} sdv_471 := ParStlReadReg(Extension_44, 15);
    bySCRControlReg_1 := sdv_471;
    call {:si_unique_call 1194} vslice_dummy_var_227 := ParStlWriteReg(Extension_44, 14, 13);
    call {:si_unique_call 1195} sdv_473 := ParStlReadReg(Extension_44, 15);
    byISAControlReg := sdv_473;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 1 == nSocketNumber;
    bySCRControlReg_1 := BOR(bySCRControlReg_1, 1);
    bySCRControlReg_1 := BOR(bySCRControlReg_1, 32);
    byISAControlReg := BAND(byISAControlReg, BNOT(32));
    goto L30;

  L30:
    call {:si_unique_call 1196} vslice_dummy_var_225 := ParStlWriteReg(Extension_44, 14, 13);
    Tmp_615 := byISAControlReg;
    call {:si_unique_call 1197} vslice_dummy_var_228 := ParStlWriteReg(Extension_44, 15, Tmp_615);
    call {:si_unique_call 1198} vslice_dummy_var_226 := ParStlWriteReg(Extension_44, 14, 12);
    Tmp_616 := bySCRControlReg_1;
    call {:si_unique_call 1199} vslice_dummy_var_229 := ParStlWriteReg(Extension_44, 15, Tmp_616);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 1 == nSocketNumber;
    call {:si_unique_call 1200} ParStlWaitForMicroSeconds(1000);
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(32));
    goto L50;

  L50:
    Tmp_617 := bySCRControlReg_1;
    call {:si_unique_call 1201} vslice_dummy_var_230 := ParStlWriteReg(Extension_44, 15, Tmp_617);
    bReturnValue_24 := 1;
    goto L13;

  anon10_Then:
    assume {:partition} 1 != nSocketNumber;
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(16));
    goto L50;

  anon12_Then:
    assume {:partition} 1 != nSocketNumber;
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(1));
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(16));
    goto L30;

  anon11_Then:
    assume {:partition} nSocketNumber == 0;
    goto L8;
}



procedure {:origName "ParStlCheckIfAtapiDevice"} ParStlCheckIfAtapiDevice(actual_Extension_45: int, actual_atapiParams_9: int) returns (Tmp_619: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_619 == 1 || Tmp_619 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfAtapiDevice"} ParStlCheckIfAtapiDevice(actual_Extension_45: int, actual_atapiParams_9: int) returns (Tmp_619: int)
{
  var {:scalar} bReturnValue_25: int;
  var {:pointer} Extension_45: int;
  var {:pointer} atapiParams_9: int;

  anon0:
    Extension_45 := actual_Extension_45;
    atapiParams_9 := actual_atapiParams_9;
    bReturnValue_25 := 0;
    call {:si_unique_call 1202} bReturnValue_25 := ParStlAtapiInitialize(Extension_45, atapiParams_9);
    Tmp_619 := bReturnValue_25;
    return;
}



procedure {:origName "ParStlCheckIfAtaAtapiDevice"} ParStlCheckIfAtaAtapiDevice(actual_Extension_46: int, actual_atapiParams_10: int) returns (Tmp_621: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_621 == 0 || Tmp_621 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParStlCheckIfAtaAtapiDevice"} ParStlCheckIfAtaAtapiDevice(actual_Extension_46: int, actual_atapiParams_10: int) returns (Tmp_621: int)
{
  var {:scalar} bReturnValue_26: int;
  var {:scalar} sdv_477: int;
  var {:scalar} sdv_478: int;
  var {:pointer} Extension_46: int;
  var {:pointer} atapiParams_10: int;

  anon0:
    Extension_46 := actual_Extension_46;
    atapiParams_10 := actual_atapiParams_10;
    bReturnValue_26 := 0;
    call {:si_unique_call 1203} sdv_477 := ParStlCheckCardInsertionStatus(Extension_46);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 1 == sdv_477;
    goto L13;

  L13:
    Tmp_621 := bReturnValue_26;
    return;

  anon5_Then:
    assume {:partition} 1 != sdv_477;
    call {:si_unique_call 1204} sdv_478 := ParStlCheckDrivePresent(Extension_46, atapiParams_10);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_478 != 0;
    bReturnValue_26 := 1;
    goto L13;

  anon6_Then:
    assume {:partition} sdv_478 == 0;
    goto L13;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_231: int;

  anon0:
    call {:si_unique_call 1205} vslice_dummy_var_231 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init42"} _sdv_init42();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init42"} _sdv_init42()
{
  var vslice_dummy_var_232: int;

  anon0:
    call {:si_unique_call 1206} vslice_dummy_var_232 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    Mem_T.INT4[AllowAsserts] := 0;
    Mem_T.INT4[DbgMaskFdo] := 0;
    Mem_T.INT4[DbgMaskRawPort] := 0;
    Mem_T.INT4[DbgMaskDaisyChain0] := 0;
    Mem_T.INT4[DbgMaskDaisyChain1] := 0;
    Mem_T.INT4[DbgMaskEndOfChain] := 0;
    Mem_T.INT4[DbgMaskLegacyZip] := 0;
    Mem_T.INT4[DbgMaskNoDevice] := 0;
    return;
}



procedure {:origName "_sdv_init38"} _sdv_init38();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init38"} _sdv_init38()
{
  var vslice_dummy_var_233: int;

  anon0:
    call {:si_unique_call 1207} vslice_dummy_var_233 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "IeeeEnter1284Mode"} IeeeEnter1284Mode(actual_Pdx_4: int, actual_Extensibility: int) returns (Tmp_629: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_629 == -1073741808 || Tmp_629 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IeeeEnter1284Mode"} IeeeEnter1284Mode(actual_Pdx_4: int, actual_Extensibility: int) returns (Tmp_629: int)
{
  var {:scalar} Tmp_630: int;
  var {:scalar} Tmp_631: int;
  var {:scalar} dcr: int;
  var {:scalar} Tmp_632: int;
  var {:pointer} Tmp_635: int;
  var {:pointer} Controller_3: int;
  var {:scalar} sdv_480: int;
  var {:scalar} Tmp_636: int;
  var {:scalar} Tmp_637: int;
  var {:scalar} sdv_481: int;
  var {:scalar} sdv_482: int;
  var {:scalar} sdv_483: int;
  var {:scalar} Tmp_639: int;
  var {:pointer} Tmp_641: int;
  var {:scalar} Tmp_642: int;
  var {:scalar} Tmp_643: int;
  var {:scalar} sPeriphResponseTime: int;
  var {:scalar} Tmp_644: int;
  var {:scalar} Tmp_645: int;
  var {:scalar} Tmp_646: int;
  var {:pointer} Pdx_4: int;

  anon0:
    Pdx_4 := actual_Pdx_4;
    sPeriphResponseTime := 35;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    havoc Controller_3;
    call {:si_unique_call 1208} dcr := corral_nondet();
    Tmp_646 := BAND(dcr, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr := BOR(Tmp_646, BOR(4, 8));
    Tmp_631 := BAND(dcr, BOR(4, 8));
    dcr := BOR(Tmp_631, BOR(4, 8));
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    Tmp_645 := BAND(dcr, BOR(BOR(BOR(2, 4), 16), 32));
    dcr := BOR(Tmp_645, 2);
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    call {:si_unique_call 1209} sdv_480 := corral_nondet();
    Tmp_643 := BAND(sdv_480, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Tmp_643 == 56;
    Tmp_644 := 1;
    goto L53;

  L53:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Tmp_644 == 0;
    Tmp_637 := BAND(dcr, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr := BOR(Tmp_637, 8);
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    Tmp_629 := -1073741808;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Tmp_644 != 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    Tmp_642 := BAND(dcr, BOR(BOR(BOR(BOR(1, 2), 4), 16), 32));
    dcr := BOR(Tmp_642, BOR(1, 2));
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    Tmp_632 := BAND(dcr, BOR(BOR(4, 16), 32));
    dcr := BOR(Tmp_632, 0);
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    call {:si_unique_call 1210} sdv_481 := corral_nondet();
    Tmp_630 := BAND(sdv_481, 64);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_630 == 64;
    Tmp_636 := 1;
    goto L81;

  L81:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Tmp_636 != 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    Tmp_629 := 0;
    goto L1;

  anon10_Then:
    assume {:partition} Tmp_636 == 0;
    Tmp_639 := BAND(dcr, BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32));
    dcr := BOR(Tmp_639, 8);
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    Tmp_629 := -1073741808;
    goto L1;

  anon12_Then:
    assume {:partition} Tmp_630 != 64;
    Tmp_641 := Controller_3;
    call {:si_unique_call 1211} sdv_483 := CheckPort(Tmp_641, 64, 64, sPeriphResponseTime);
    Tmp_636 := sdv_483;
    goto L81;

  anon11_Then:
    assume {:partition} Tmp_643 != 56;
    Tmp_635 := Controller_3;
    call {:si_unique_call 1212} sdv_482 := CheckPort(Tmp_635, 120, 56, sPeriphResponseTime);
    Tmp_644 := sdv_482;
    goto L53;
}



procedure {:origName "IeeeTerminate1284Mode"} IeeeTerminate1284Mode(actual_Pdx_5: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "IeeeTerminate1284Mode"} IeeeTerminate1284Mode(actual_Pdx_5: int)
{
  var {:scalar} Tmp_647: int;
  var {:scalar} dsrValue: int;
  var {:scalar} Tmp_650: int;
  var {:scalar} bUseXFlag: int;
  var {:scalar} dcr_1: int;
  var {:scalar} Tmp_651: int;
  var {:scalar} bXFlag: int;
  var {:pointer} Tmp_652: int;
  var {:scalar} Tmp_653: int;
  var {:scalar} dsrMask: int;
  var {:scalar} Tmp_654: int;
  var {:scalar} Tmp_655: int;
  var {:scalar} Tmp_656: int;
  var {:pointer} Controller_4: int;
  var {:scalar} Tmp_658: int;
  var {:scalar} sdv_487: int;
  var {:pointer} Tmp_660: int;
  var {:scalar} sdv_489: int;
  var {:scalar} sdv_490: int;
  var {:scalar} Tmp_663: int;
  var {:scalar} Tmp_665: int;
  var {:scalar} Tmp_666: int;
  var {:scalar} sdv_491: int;
  var {:scalar} Tmp_667: int;
  var {:scalar} Tmp_668: int;
  var {:pointer} Pdx_5: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;

  anon0:
    call {:si_unique_call 1213} vslice_dummy_var_234 := __HAVOC_malloc(4);
    Pdx_5 := actual_Pdx_5;
    bUseXFlag := 0;
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    havoc Controller_4;
    call {:si_unique_call 1214} dcr_1 := corral_nondet();
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L20;

  L20:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    Tmp_666 := BAND(dcr_1, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_1 := BOR(Tmp_666, 8);
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    return;

  anon33_Then:
    call {:si_unique_call 1215} sdv_487 := corral_nondet();
    bXFlag := BAND(sdv_487, 16);
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    call {:si_unique_call 1216} dcr_1 := corral_nondet();
    Tmp_658 := BAND(dcr_1, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_1 := BOR(Tmp_658, 8);
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_5)] != 0;
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_5)] <= 1000;
    goto L127;

  L127:
    goto L42;

  L42:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L56;

  L56:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    havoc Tmp_651;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L58;

  L58:
    bUseXFlag := 1;
    goto L59;

  L59:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} bUseXFlag != 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} bXFlag != 0;
    Tmp_663 := 0;
    goto L64;

  L64:
    dsrMask := BOR(BOR(64, Tmp_663), 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} bXFlag == 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} bXFlag != 0;
    Tmp_653 := 0;
    goto L109;

  L109:
    Tmp_656 := Tmp_653;
    Tmp_655 := Tmp_656;
    goto L68;

  L68:
    dsrValue := BOR(BOR(0, Tmp_655), 0);
    goto L69;

  L69:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    Tmp_652 := Controller_4;
    call {:si_unique_call 1217} sdv_489 := CheckPort(Tmp_652, dsrMask, dsrValue, 35);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_489 != 0;
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    Tmp_654 := BAND(dcr_1, BOR(BOR(BOR(BOR(2, 4), 8), 16), 32));
    dcr_1 := BOR(Tmp_654, BOR(2, 8));
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    call {:si_unique_call 1218} sdv_490 := corral_nondet();
    Tmp_668 := BAND(sdv_490, BOR(64, 128));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Tmp_668 == 64;
    Tmp_667 := 1;
    goto L91;

  L91:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Tmp_667 == 0;
    call {:si_unique_call 1219} vslice_dummy_var_235 := corral_nondet();
    goto L20;

  anon40_Then:
    assume {:partition} Tmp_667 != 0;
    goto L20;

  anon45_Then:
    assume {:partition} Tmp_668 != 64;
    Tmp_660 := Controller_4;
    call {:si_unique_call 1220} sdv_491 := CheckPort(Tmp_660, 192, 64, 35);
    Tmp_667 := sdv_491;
    goto L91;

  anon39_Then:
    assume {:partition} sdv_489 == 0;
    call {:si_unique_call 1221} vslice_dummy_var_236 := corral_nondet();
    goto L20;

  anon41_Then:
    assume {:partition} bXFlag == 0;
    Tmp_653 := 16;
    goto L109;

  anon44_Then:
    assume {:partition} bXFlag != 0;
    Tmp_655 := 0;
    goto L68;

  anon38_Then:
    assume {:partition} bXFlag == 0;
    Tmp_663 := 16;
    goto L64;

  anon37_Then:
    assume {:partition} bUseXFlag == 0;
    dsrMask := 64;
    dsrValue := 0;
    goto L69;

  anon43_Then:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    havoc Tmp_665;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    bUseXFlag := 0;
    goto L59;

  anon46_Then:
    goto L58;

  anon35_Then:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    havoc Tmp_647;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L114;

  L114:
    bUseXFlag := 1;
    goto L59;

  anon47_Then:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    havoc Tmp_650;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    bUseXFlag := 0;
    goto L59;

  anon48_Then:
    goto L114;

  anon36_Then:
    goto L56;

  anon34_Then:
    assume {:partition} 1000 < Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_5)];
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_5)] := 1000;
    goto L127;

  anon42_Then:
    assume {:partition} Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_5)] == 0;
    goto L42;
}



procedure {:origName "_sdv_init26"} _sdv_init26();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init26"} _sdv_init26()
{
  var vslice_dummy_var_237: int;

  anon0:
    call {:si_unique_call 1222} vslice_dummy_var_237 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptRegGetDword"} PptRegGetDword(actual_RelativeTo_3: int, actual_Path_3: int, actual_ParameterName: int, actual_ParameterValue: int) returns (Tmp_671: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_671 == 0 || Tmp_671 == -1073741823 || Tmp_671 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptRegGetDword"} PptRegGetDword(actual_RelativeTo_3: int, actual_Path_3: int, actual_ParameterName: int, actual_ParameterValue: int) returns (Tmp_671: int)
{
  var {:pointer} paramTable: int;
  var {:dopa} {:scalar} defaultValue: int;
  var {:scalar} Tmp_673: int;
  var {:scalar} status_22: int;
  var {:scalar} RelativeTo_3: int;
  var {:pointer} Path_3: int;
  var {:pointer} ParameterName: int;
  var {:pointer} ParameterValue: int;

  anon0:
    call {:si_unique_call 1223} defaultValue := __HAVOC_malloc(4);
    RelativeTo_3 := actual_RelativeTo_3;
    Path_3 := actual_Path_3;
    ParameterName := actual_ParameterName;
    ParameterValue := actual_ParameterValue;
    call {:si_unique_call 1224} paramTable := __HAVOC_malloc(56);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Path_3 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} ParameterName != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ParameterValue != 0;
    call {:si_unique_call 1225} sdv_RtlZeroMemory(0, 56);
    assume {:nonnull} ParameterValue != 0;
    assume ParameterValue > 0;
    assume {:nonnull} defaultValue != 0;
    assume defaultValue > 0;
    Mem_T.INT4[defaultValue] := Mem_T.INT4[ParameterValue];
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    Tmp_673 := BOR(RelativeTo_3, 0);
    call {:si_unique_call 1226} status_22 := sdv_RtlQueryRegistryValues(Tmp_673, 0, 0, 0, 0);
    Tmp_671 := status_22;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} ParameterValue == 0;
    goto L7;

  L7:
    Tmp_671 := -1073741811;
    goto L1;

  anon8_Then:
    assume {:partition} ParameterName == 0;
    goto L7;

  anon7_Then:
    assume {:partition} Path_3 == 0;
    goto L7;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_238: int;

  anon0:
    call {:si_unique_call 1227} vslice_dummy_var_238 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptRegGetDeviceParameterDword"} PptRegGetDeviceParameterDword(actual_Pdo_5: int, actual_ParameterName_1: int, actual_ParameterValue_1: int) returns (Tmp_677: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_677 == 0 || Tmp_677 == -1073741823 || Tmp_677 == -1073741811 || Tmp_677 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptRegGetDeviceParameterDword"} PptRegGetDeviceParameterDword(actual_Pdo_5: int, actual_ParameterName_1: int, actual_ParameterValue_1: int) returns (Tmp_677: int)
{
  var {:dopa} {:scalar} defaultValue_1: int;
  var {:pointer} queryTable: int;
  var {:scalar} status_23: int;
  var {:pointer} ParameterName_1: int;
  var {:pointer} ParameterValue_1: int;
  var vslice_dummy_var_239: int;

  anon0:
    call {:si_unique_call 1228} defaultValue_1 := __HAVOC_malloc(4);
    ParameterName_1 := actual_ParameterName_1;
    ParameterValue_1 := actual_ParameterValue_1;
    call {:si_unique_call 1229} queryTable := __HAVOC_malloc(56);
    call {:si_unique_call 1230} sdv_do_paged_code_check();
    call {:si_unique_call 1231} status_23 := IoOpenDeviceRegistryKey(0, 1, 131097, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_23 >= 0;
    assume {:nonnull} ParameterValue_1 != 0;
    assume ParameterValue_1 > 0;
    assume {:nonnull} defaultValue_1 != 0;
    assume defaultValue_1 > 0;
    Mem_T.INT4[defaultValue_1] := Mem_T.INT4[ParameterValue_1];
    call {:si_unique_call 1232} sdv_RtlZeroMemory(0, 56);
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    call {:si_unique_call 1233} status_23 := sdv_RtlQueryRegistryValues(-1073741824, 0, 0, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_23 >= 0;
    goto L32;

  L32:
    call {:si_unique_call 1234} vslice_dummy_var_239 := ZwClose(0);
    Tmp_677 := status_23;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} 0 > status_23;
    assume {:nonnull} ParameterValue_1 != 0;
    assume ParameterValue_1 > 0;
    assume {:nonnull} defaultValue_1 != 0;
    assume defaultValue_1 > 0;
    Mem_T.INT4[ParameterValue_1] := Mem_T.INT4[defaultValue_1];
    goto L32;

  anon5_Then:
    assume {:partition} 0 > status_23;
    Tmp_677 := status_23;
    goto L1;
}



procedure {:origName "PptRegSetDeviceParameterDword"} PptRegSetDeviceParameterDword(actual_Pdo_6: int, actual_ParameterName_2: int, actual_ParameterValue_2: int) returns (Tmp_679: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_679 == -1073741790 || Tmp_679 == -1073741816 || Tmp_679 == -1073741823 || Tmp_679 == 0 || Tmp_679 == -1073741811 || Tmp_679 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptRegSetDeviceParameterDword"} PptRegSetDeviceParameterDword(actual_Pdo_6: int, actual_ParameterName_2: int, actual_ParameterValue_2: int) returns (Tmp_679: int)
{
  var {:scalar} valueName: int;
  var {:scalar} status_24: int;
  var {:pointer} Pdo_6: int;
  var {:pointer} ParameterName_2: int;
  var vslice_dummy_var_240: int;

  anon0:
    call {:si_unique_call 1235} valueName := __HAVOC_malloc(12);
    Pdo_6 := actual_Pdo_6;
    ParameterName_2 := actual_ParameterName_2;
    assume {:nonnull} Pdo_6 != 0;
    assume Pdo_6 > 0;
    call {:si_unique_call 1236} sdv_do_paged_code_check();
    call {:si_unique_call 1237} status_24 := IoOpenDeviceRegistryKey(0, 1, 131078, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_24 >= 0;
    call {:si_unique_call 1238} RtlInitUnicodeString(valueName, ParameterName_2);
    call {:si_unique_call 1239} status_24 := ZwSetValueKey(0, 0, 0, 4, 0, 4);
    call {:si_unique_call 1240} vslice_dummy_var_240 := ZwClose(0);
    Tmp_679 := status_24;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} 0 > status_24;
    Tmp_679 := status_24;
    goto L1;
}



procedure {:origName "PptRegSetDword"} PptRegSetDword(actual_RelativeTo_4: int, actual_Path_4: int, actual_ParameterName_3: int, actual_ParameterValue_3: int) returns (Tmp_681: int);
  free ensures {:va_keep} Tmp_681 == 0 || Tmp_681 == -1073741823 || Tmp_681 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptRegSetDword"} PptRegSetDword(actual_RelativeTo_4: int, actual_Path_4: int, actual_ParameterName_3: int, actual_ParameterValue_3: int) returns (Tmp_681: int)
{
  var {:scalar} status_25: int;
  var {:scalar} RelativeTo_4: int;
  var {:pointer} Path_4: int;
  var {:pointer} ParameterName_3: int;
  var {:pointer} ParameterValue_3: int;

  anon0:
    RelativeTo_4 := actual_RelativeTo_4;
    Path_4 := actual_Path_4;
    ParameterName_3 := actual_ParameterName_3;
    ParameterValue_3 := actual_ParameterValue_3;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Path_4 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} ParameterName_3 != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ParameterValue_3 != 0;
    call {:si_unique_call 1241} status_25 := RtlWriteRegistryValue(RelativeTo_4, 0, 0, 4, 0, 4);
    goto L12;

  L12:
    Tmp_681 := status_25;
    return;

  anon9_Then:
    assume {:partition} ParameterValue_3 == 0;
    goto L5;

  L5:
    status_25 := -1073741811;
    goto L12;

  anon8_Then:
    assume {:partition} ParameterName_3 == 0;
    goto L5;

  anon7_Then:
    assume {:partition} Path_4 == 0;
    goto L5;
}



procedure {:origName "_sdv_init27"} _sdv_init27();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init27"} _sdv_init27()
{
  var vslice_dummy_var_241: int;

  anon0:
    call {:si_unique_call 1242} vslice_dummy_var_241 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init41"} _sdv_init41();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init41"} _sdv_init41()
{
  var vslice_dummy_var_242: int;

  anon0:
    call {:si_unique_call 1243} vslice_dummy_var_242 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptDispatchPnp"} PptDispatchPnp(actual_DevObj: int, actual_Irp_13: int) returns (Tmp_687: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, completion;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDispatchPnp"} PptDispatchPnp(actual_DevObj: int, actual_Irp_13: int) returns (Tmp_687: int)
{
  var {:pointer} fdx_8: int;
  var {:pointer} DevObj: int;
  var {:pointer} Irp_13: int;

  anon0:
    DevObj := actual_DevObj;
    Irp_13 := actual_Irp_13;
    assume {:nonnull} DevObj != 0;
    assume DevObj > 0;
    havoc fdx_8;
    assume {:nonnull} fdx_8 != 0;
    assume fdx_8 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1244} Tmp_687 := PptFdoPnp(DevObj, Irp_13);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1245} Tmp_687 := PptPdoPnp(DevObj, Irp_13);
    goto L1;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_243: int;

  anon0:
    call {:si_unique_call 1246} vslice_dummy_var_243 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoPower"} PptPdoPower(actual_Pdo_7: int, actual_Irp_15: int) returns (Tmp_693: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoPower"} PptPdoPower(actual_Pdo_7: int, actual_Irp_15: int) returns (Tmp_693: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:pointer} irpSp_2: int;
  var {:pointer} pdx_9: int;
  var {:scalar} powerState_2: int;
  var {:scalar} sdv: int;
  var {:scalar} status_26: int;
  var {:scalar} info: int;
  var {:scalar} minorFunction: int;
  var {:scalar} powerType_2: int;
  var {:pointer} Pdo_7: int;
  var {:pointer} Irp_15: int;
  var vslice_dummy_var_244: int;

  anon0:
    call {:si_unique_call 1247} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1248} sdv := __HAVOC_malloc(8);
    Pdo_7 := actual_Pdo_7;
    Irp_15 := actual_Irp_15;
    assume {:nonnull} Pdo_7 != 0;
    assume Pdo_7 > 0;
    havoc pdx_9;
    call {:si_unique_call 1249} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_15);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc info;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    havoc powerType_2;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    minorFunction := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(irpSp_2)];
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} minorFunction != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} minorFunction == 3;
    status_26 := 0;
    goto L24;

  L24:
    call {:si_unique_call 1250} PoStartNextPowerIrp(0);
    call {:si_unique_call 1251} vslice_dummy_var_244 := P4CompleteRequest(Irp_15, status_26, info);
    Tmp_693 := status_26;
    return;

  anon10_Then:
    assume {:partition} minorFunction != 3;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    status_26 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))];
    goto L24;

  anon12_Then:
    assume {:partition} minorFunction == 2;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} powerType_2 != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} powerType_2 == 1;
    call {:si_unique_call 1252} structPtr888sdv := PoSetPowerState(0, powerType_2, powerState_2);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} pdx_9 != 0;
    assume pdx_9 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    status_26 := 0;
    goto L24;

  anon11_Then:
    assume {:partition} powerType_2 != 1;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    status_26 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))];
    goto L24;

  anon9_Then:
    assume {:partition} powerType_2 == 0;
    status_26 := 0;
    goto L24;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_245: int;

  anon0:
    call {:si_unique_call 1253} vslice_dummy_var_245 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init36"} _sdv_init36();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init36"} _sdv_init36()
{
  var vslice_dummy_var_246: int;

  anon0:
    call {:si_unique_call 1254} vslice_dummy_var_246 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptLogError"} PptLogError(actual_DriverObject_2: int, actual_DeviceObject_16: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptLogError"} PptLogError(actual_DriverObject_2: int, actual_DeviceObject_16: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int)
{
  var {:scalar} P1: int;
  var {:scalar} P2: int;
  var {:pointer} sdv_506: int;
  var {:scalar} Tmp_701: int;
  var {:scalar} DumpToAllocate: int;
  var {:pointer} ErrorLogEntry: int;
  var {:pointer} DriverObject_2: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} structPtr888P1: int;
  var {:pointer} structPtr888P2: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var vslice_dummy_var_247: int;

  anon0:
    call {:si_unique_call 1255} P1 := __HAVOC_malloc(20);
    call {:si_unique_call 1256} P2 := __HAVOC_malloc(20);
    call {:si_unique_call 1257} vslice_dummy_var_247 := __HAVOC_malloc(4);
    DriverObject_2 := actual_DriverObject_2;
    DeviceObject_16 := actual_DeviceObject_16;
    structPtr888P1 := actual_structPtr888P1;
    structPtr888P2 := actual_structPtr888P2;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} DeviceObject_16 != 0;
    goto L9;

  L9:
    DumpToAllocate := 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L12;

  L12:
    DumpToAllocate := 8;
    goto L13;

  L13:
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L15;

  L15:
    DumpToAllocate := DumpToAllocate + 8;
    goto L16;

  L16:
    Tmp_701 := 48 + DumpToAllocate;
    call {:si_unique_call 1258} sdv_506 := IoAllocateErrorLogEntry(0, Tmp_701);
    ErrorLogEntry := sdv_506;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} ErrorLogEntry != 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} DumpToAllocate != 0;
    call {:si_unique_call 1259} sdv_RtlCopyMemory(0, 0, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} DumpToAllocate > 8;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    call {:si_unique_call 1260} sdv_RtlCopyMemory(0, 0, 8);
    goto L31;

  L31:
    call {:si_unique_call 1261} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:partition} 8 >= DumpToAllocate;
    goto L31;

  anon24_Then:
    assume {:partition} DumpToAllocate == 0;
    goto L31;

  anon23_Then:
    assume {:partition} ErrorLogEntry == 0;
    goto L1;

  anon19_Then:
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L16;

  anon20_Then:
    goto L15;

  anon22_Then:
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L13;

  anon18_Then:
    goto L12;

  anon17_Then:
    assume {:partition} DeviceObject_16 == 0;
    goto L9;
}



procedure {:origName "_sdv_init37"} _sdv_init37();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init37"} _sdv_init37()
{
  var vslice_dummy_var_248: int;

  anon0:
    call {:si_unique_call 1262} vslice_dummy_var_248 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init33"} _sdv_init33();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init33"} _sdv_init33()
{
  var vslice_dummy_var_249: int;

  anon0:
    call {:si_unique_call 1263} vslice_dummy_var_249 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init21"} _sdv_init21();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init21"} _sdv_init21()
{
  var vslice_dummy_var_250: int;

  anon0:
    call {:si_unique_call 1264} vslice_dummy_var_250 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_251: int;

  anon0:
    call {:si_unique_call 1265} vslice_dummy_var_251 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFindNatChip"} PptFindNatChip(actual_Fdx_6: int) returns (Tmp_711: int);
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} Tmp_711 == 0 || Tmp_711 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFindNatChip"} PptFindNatChip(actual_Fdx_6: int) returns (Tmp_711: int)
{
  var {:scalar} Tmp_712: int;
  var {:scalar} Port: int;
  var {:scalar} sdv_509: int;
  var {:scalar} found: int;
  var {:pointer} ChipAddr: int;
  var {:scalar} OkToLook: int;
  var {:dopa} {:scalar} NationalChecked: int;
  var {:pointer} Tmp_715: int;
  var {:scalar} ii: int;
  var {:pointer} PortAddr: int;
  var {:scalar} ResourcesSize: int;
  var {:scalar} Status_2: int;
  var {:scalar} sdv_511: int;
  var {:pointer} Tmp_718: int;
  var {:scalar} sdv_513: int;
  var {:scalar} sdv_514: int;
  var {:scalar} ResourceDescriptorCount: int;
  var {:scalar} sdv_517: int;
  var {:pointer} Resources: int;
  var {:scalar} Conflict: int;
  var {:pointer} Tmp_719: int;
  var {:dopa} {:scalar} NationalChipFound: int;
  var {:pointer} sdv_519: int;
  var {:pointer} Tmp_720: int;
  var {:pointer} pdo_2: int;
  var {:scalar} sdv_522: int;
  var {:scalar} cr: int;
  var {:scalar} sdv_525: int;
  var {:pointer} AddrList: int;
  var {:scalar} Tmp_723: int;
  var {:scalar} Tmp_725: int;
  var {:pointer} Tmp_726: int;
  var {:pointer} Fdx_6: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_3229: int;
  var vslice_dummy_var_3230: int;

  anon0:
    call {:si_unique_call 1266} NationalChecked := __HAVOC_malloc(4);
    call {:si_unique_call 1267} NationalChipFound := __HAVOC_malloc(4);
    Fdx_6 := actual_Fdx_6;
    call {:si_unique_call 1268} ChipAddr := __HAVOC_malloc(16);
    call {:si_unique_call 1269} Tmp_718 := __HAVOC_malloc(72);
    call {:si_unique_call 1270} Tmp_719 := __HAVOC_malloc(64);
    call {:si_unique_call 1271} Tmp_720 := __HAVOC_malloc(72);
    call {:si_unique_call 1272} AddrList := __HAVOC_malloc(16);
    call {:si_unique_call 1273} Tmp_726 := __HAVOC_malloc(64);
    found := 0;
    OkToLook := 0;
    assume {:nonnull} ChipAddr != 0;
    assume ChipAddr > 0;
    assume {:nonnull} AddrList != 0;
    assume AddrList > 0;
    assume {:nonnull} NationalChecked != 0;
    assume NationalChecked > 0;
    Mem_T.INT4[NationalChecked] := 0;
    assume {:nonnull} NationalChipFound != 0;
    assume NationalChipFound > 0;
    Mem_T.INT4[NationalChipFound] := 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    Tmp_711 := 0;
    goto L1;

  L1:
    return;

  anon81_Then:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    Tmp_719 := strConst__li2bpl31;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    havoc vslice_dummy_var_3229;
    call {:si_unique_call 1274} vslice_dummy_var_254 := PptRegGetDeviceParameterDword(vslice_dummy_var_3229, Tmp_719, NationalChecked);
    assume {:nonnull} NationalChecked != 0;
    assume NationalChecked > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} Mem_T.INT4[NationalChecked] != 0;
    Tmp_718 := strConst__li2bpl30;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    havoc vslice_dummy_var_3230;
    call {:si_unique_call 1275} vslice_dummy_var_255 := PptRegGetDeviceParameterDword(vslice_dummy_var_3230, Tmp_718, NationalChipFound);
    assume {:nonnull} NationalChipFound != 0;
    assume NationalChipFound > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Mem_T.INT4[NationalChipFound] != 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L39;

  L39:
    Tmp_711 := 0;
    goto L1;

  anon60_Then:
    assume {:partition} Mem_T.INT4[NationalChipFound] == 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L39;

  anon59_Then:
    assume {:partition} Mem_T.INT4[NationalChecked] == 0;
    ResourceDescriptorCount := 4;
    ResourcesSize := 36 + (ResourceDescriptorCount - 1) * 16;
    call {:si_unique_call 1276} sdv_519 := ExAllocatePoolWithTag(512, ResourcesSize, -797810352);
    Resources := sdv_519;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Resources != 0;
    call {:si_unique_call 1277} sdv_RtlZeroMemory(0, ResourcesSize);
    Tmp_715 := ChipAddr;
    call {:si_unique_call 1278} Status_2 := PptBuildResourceList(Fdx_6, 4, Tmp_715, Resources);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Status_2 >= 0;
    call {:si_unique_call 1279} Status_2 := IoReportResourceUsage(0, 0, 0, 4, 0, 0, 0, 0, 0);
    call {:si_unique_call 1280} sdv_ExFreePool(0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Status_2 >= 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Conflict != 0;
    Tmp_711 := -1073741823;
    goto L1;

  anon63_Then:
    assume {:partition} Conflict == 0;
    ii := 0;
    goto L71;

  L71:
    call {:si_unique_call 1281} Tmp_712, Port, sdv_509, found, OkToLook, ii, PortAddr, sdv_511, sdv_513, sdv_514, sdv_517, sdv_522, cr, sdv_525, Tmp_723, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_258 := PptFindNatChip_loop_L71(Tmp_712, Port, sdv_509, found, ChipAddr, OkToLook, ii, PortAddr, sdv_511, sdv_513, sdv_514, sdv_517, sdv_522, cr, sdv_525, AddrList, Tmp_723, Fdx_6, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_258);
    goto L71_last;

  L71_last:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} found != 0;
    goto L74;

  L74:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    havoc pdo_2;
    assume {:nonnull} NationalChecked != 0;
    assume NationalChecked > 0;
    Mem_T.INT4[NationalChecked] := 1;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    Tmp_725 := 1;
    goto L79;

  L79:
    assume {:nonnull} NationalChipFound != 0;
    assume NationalChipFound > 0;
    Mem_T.INT4[NationalChipFound] := Tmp_725;
    Tmp_726 := strConst__li2bpl31;
    call {:si_unique_call 1282} vslice_dummy_var_256 := PptRegSetDeviceParameterDword(pdo_2, Tmp_726, NationalChecked);
    Tmp_720 := strConst__li2bpl30;
    call {:si_unique_call 1283} vslice_dummy_var_257 := PptRegSetDeviceParameterDword(pdo_2, Tmp_720, NationalChipFound);
    call {:si_unique_call 1284} Status_2 := IoReportResourceUsage(0, 0, 0, 0, 0, 0, 0, 0, 0);
    Tmp_711 := Status_2;
    goto L1;

  anon83_Then:
    Tmp_725 := 0;
    goto L79;

  anon64_Then:
    assume {:partition} found == 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} 4 > ii;
    Tmp_723 := ii;
    assume {:nonnull} ChipAddr != 0;
    assume ChipAddr > 0;
    havoc PortAddr;
    call {:si_unique_call 1285} sdv_514 := corral_nondet();
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_514 == 136;
    call {:si_unique_call 1286} sdv_517 := corral_nondet();
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} 32 > sdv_517;
    OkToLook := 1;
    goto L105;

  L105:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} OkToLook != 0;
    OkToLook := 0;
    call {:si_unique_call 1287} cr := corral_nondet();
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} cr == 8;
    call {:si_unique_call 1288} sdv_509 := corral_nondet();
    cr := BAND(sdv_509, BOR(BOR(BOR(16, 32), 64), 128));
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} cr == 16;
    goto L123;

  L123:
    found := 1;
    call {:si_unique_call 1289} sdv_522 := corral_nondet();
    Port := BAND(sdv_522, BOR(1, 2));
    Tmp_712 := Port;
    assume {:nonnull} AddrList != 0;
    assume AddrList > 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L106;

  L106:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} found != 0;
    goto L143;

  L143:
    ii := ii + 1;
    goto L143_dummy;

  L143_dummy:
    assume false;
    return;

  anon69_Then:
    assume {:partition} found == 0;
    call {:si_unique_call 1290} vslice_dummy_var_253 := corral_nondet();
    call {:si_unique_call 1291} sdv_525 := corral_nondet();
    cr := BAND(sdv_525, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} cr == 192;
    goto L159;

  L159:
    found := 1;
    call {:si_unique_call 1292} vslice_dummy_var_258 := corral_nondet();
    call {:si_unique_call 1293} Port := corral_nondet();
    call {:si_unique_call 1294} sdv_511 := corral_nondet();
    Port := BOR(Port, sdv_511);
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L143;

  anon87_Then:
    goto L143;

  anon86_Then:
    assume {:partition} cr != 192;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} cr != 160;
    goto L143;

  anon78_Then:
    assume {:partition} cr == 160;
    goto L159;

  anon85_Then:
    goto L106;

  anon84_Then:
    assume {:partition} cr != 16;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} cr != 80;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} cr != 112;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} cr != 48;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} cr != 32;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} cr != 144;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} cr != 176;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} cr == 96;
    goto L123;

  anon77_Then:
    assume {:partition} cr != 96;
    goto L106;

  anon76_Then:
    assume {:partition} cr == 176;
    goto L123;

  anon75_Then:
    assume {:partition} cr == 144;
    goto L123;

  anon74_Then:
    assume {:partition} cr == 32;
    goto L123;

  anon73_Then:
    assume {:partition} cr == 48;
    goto L123;

  anon72_Then:
    assume {:partition} cr == 112;
    goto L123;

  anon71_Then:
    assume {:partition} cr == 80;
    goto L123;

  anon70_Then:
    assume {:partition} cr != 8;
    goto L106;

  anon68_Then:
    assume {:partition} OkToLook == 0;
    goto L106;

  anon67_Then:
    assume {:partition} sdv_517 >= 32;
    goto L97;

  L97:
    call {:si_unique_call 1295} vslice_dummy_var_252 := corral_nondet();
    call {:si_unique_call 1296} cr := corral_nondet();
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} cr != 255;
    call {:si_unique_call 1297} sdv_513 := corral_nondet();
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} sdv_513 == cr;
    OkToLook := 1;
    goto L105;

  anon80_Then:
    assume {:partition} sdv_513 != cr;
    goto L105;

  anon79_Then:
    assume {:partition} cr == 255;
    goto L105;

  anon66_Then:
    assume {:partition} sdv_514 != 136;
    goto L97;

  anon65_Then:
    assume {:partition} ii >= 4;
    goto L74;

  anon62_Then:
    assume {:partition} 0 > Status_2;
    Tmp_711 := Status_2;
    goto L1;

  anon61_Then:
    assume {:partition} 0 > Status_2;
    call {:si_unique_call 1298} sdv_ExFreePool(0);
    Tmp_711 := Status_2;
    goto L1;

  anon82_Then:
    assume {:partition} Resources == 0;
    Tmp_711 := -1073741823;
    goto L1;
}



procedure {:origName "_sdv_init24"} _sdv_init24();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init24"} _sdv_init24()
{
  var vslice_dummy_var_259: int;

  anon0:
    call {:si_unique_call 1299} vslice_dummy_var_259 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoStartDevice"} PptPdoStartDevice(actual_Pdo_8: int, actual_Irp_16: int) returns (Tmp_730: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_730 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoStartDevice"} PptPdoStartDevice(actual_Pdo_8: int, actual_Irp_16: int) returns (Tmp_730: int)
{
  var {:pointer} pdx_10: int;
  var {:scalar} setActive: int;
  var {:pointer} Tmp_731: int;
  var {:scalar} status_27: int;
  var {:pointer} Pdo_8: int;
  var {:pointer} Irp_16: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_3231: int;

  anon0:
    Pdo_8 := actual_Pdo_8;
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 1300} Tmp_731 := __HAVOC_malloc(52);
    assume {:nonnull} Pdo_8 != 0;
    assume Pdo_8 > 0;
    havoc pdx_10;
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    call {:si_unique_call 1301} vslice_dummy_var_260 := KeSetEvent(PauseEvent__PDO_EXTENSION(pdx_10), 0, 0);
    Tmp_731 := strConst__li2bpl32;
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    call {:si_unique_call 1302} vslice_dummy_var_261 := PptRegGetDeviceParameterDword(Pdo_8, Tmp_731, Event22Delay__PDO_EXTENSION(pdx_10));
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    setActive := 0;
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_10))] != 0;
    goto L23;

  L23:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 1 == setActive;
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1303} status_27 := IoSetDeviceInterfaceState(0, 1);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status_27 == 0;
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    goto L13;

  L13:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc vslice_dummy_var_3231;
    call {:si_unique_call 1304} Tmp_730 := P4CompleteRequest(Irp_16, 0, vslice_dummy_var_3231);
    return;

  anon16_Then:
    assume {:partition} status_27 != 0;
    goto L13;

  anon15_Then:
    goto L13;

  anon14_Then:
    assume {:partition} 1 != setActive;
    goto L13;

  anon18_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_10))] == 0;
    assume {:nonnull} pdx_10 != 0;
    assume pdx_10 > 0;
    call {:si_unique_call 1305} status_27 := IoRegisterDeviceInterface(0, 0, 0, DeviceInterface__PDO_EXTENSION(pdx_10));
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_27 == 0;
    setActive := 1;
    goto L23;

  anon17_Then:
    assume {:partition} status_27 != 0;
    goto L23;

  anon13_Then:
    goto L13;
}



procedure {:origName "PptPdoCancelRemove"} PptPdoCancelRemove(actual_Pdo_9: int, actual_Irp_17: int) returns (Tmp_733: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc;
  free ensures {:va_keep} Tmp_733 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoCancelRemove"} PptPdoCancelRemove(actual_Pdo_9: int, actual_Irp_17: int) returns (Tmp_733: int)
{
  var {:pointer} pdx_11: int;
  var {:pointer} Pdo_9: int;
  var {:pointer} Irp_17: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_3232: int;

  anon0:
    Pdo_9 := actual_Pdo_9;
    Irp_17 := actual_Irp_17;
    assume {:nonnull} Pdo_9 != 0;
    assume Pdo_9 > 0;
    havoc pdx_11;
    assume {:nonnull} pdx_11 != 0;
    assume pdx_11 > 0;
    assume {:nonnull} pdx_11 != 0;
    assume pdx_11 > 0;
    call {:si_unique_call 1306} vslice_dummy_var_262 := KeSetEvent(PauseEvent__PDO_EXTENSION(pdx_11), 0, 0);
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc vslice_dummy_var_3232;
    call {:si_unique_call 1307} Tmp_733 := P4CompleteRequest(Irp_17, 0, vslice_dummy_var_3232);
    return;
}



procedure {:origName "PptPdoQueryDeviceRelations"} PptPdoQueryDeviceRelations(actual_Pdo_10: int, actual_Irp_18: int) returns (Tmp_735: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryDeviceRelations"} PptPdoQueryDeviceRelations(actual_Pdo_10: int, actual_Irp_18: int) returns (Tmp_735: int)
{
  var {:pointer} Tmp_736: int;
  var {:pointer} devRel_1: int;
  var {:pointer} irpSp_3: int;
  var {:scalar} requestType: int;
  var {:pointer} sdv_536: int;
  var {:scalar} status_28: int;
  var {:scalar} info_1: int;
  var {:pointer} Pdo_10: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_263: int;

  anon0:
    Pdo_10 := actual_Pdo_10;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 1308} Tmp_736 := __HAVOC_malloc(4);
    assume {:nonnull} Pdo_10 != 0;
    assume Pdo_10 > 0;
    call {:si_unique_call 1309} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_18);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    havoc requestType;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    status_28 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_18))];
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc info_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 4 == requestType;
    call {:si_unique_call 1310} sdv_536 := ExAllocatePoolWithTag(1, 8, -797810352);
    devRel_1 := sdv_536;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} devRel_1 != 0;
    assume {:nonnull} devRel_1 != 0;
    assume devRel_1 > 0;
    call {:si_unique_call 1311} vslice_dummy_var_263 := sdv_ObReferenceObject(0);
    assume {:nonnull} devRel_1 != 0;
    assume devRel_1 > 0;
    havoc Tmp_736;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    status_28 := 0;
    info_1 := devRel_1;
    goto L17;

  L17:
    call {:si_unique_call 1312} Tmp_735 := P4CompleteRequest(Irp_18, status_28, info_1);
    return;

  anon6_Then:
    assume {:partition} devRel_1 == 0;
    status_28 := -1073741801;
    goto L17;

  anon5_Then:
    assume {:partition} 4 != requestType;
    goto L17;
}



procedure {:origName "PptPdoQueryRemove"} PptPdoQueryRemove(actual_Pdo_11: int, actual_Irp_19: int) returns (Tmp_738: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_738 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryRemove"} PptPdoQueryRemove(actual_Pdo_11: int, actual_Irp_19: int) returns (Tmp_738: int)
{
  var {:pointer} pdx_13: int;
  var {:pointer} Pdo_11: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_3233: int;

  anon0:
    Pdo_11 := actual_Pdo_11;
    Irp_19 := actual_Irp_19;
    assume {:nonnull} Pdo_11 != 0;
    assume Pdo_11 > 0;
    havoc pdx_13;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    call {:si_unique_call 1313} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_13));
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    havoc vslice_dummy_var_3233;
    call {:si_unique_call 1314} Tmp_738 := P4CompleteRequest(Irp_19, 0, vslice_dummy_var_3233);
    return;
}



procedure {:origName "PptPdoStopDevice"} PptPdoStopDevice(actual_Pdo_12: int, actual_Irp_20: int) returns (Tmp_740: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_740 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoStopDevice"} PptPdoStopDevice(actual_Pdo_12: int, actual_Irp_20: int) returns (Tmp_740: int)
{
  var {:pointer} pdx_14: int;
  var {:pointer} Pdo_12: int;
  var {:pointer} Irp_20: int;
  var vslice_dummy_var_3234: int;

  anon0:
    Pdo_12 := actual_Pdo_12;
    Irp_20 := actual_Irp_20;
    assume {:nonnull} Pdo_12 != 0;
    assume Pdo_12 > 0;
    havoc pdx_14;
    assume {:nonnull} pdx_14 != 0;
    assume pdx_14 > 0;
    assume {:nonnull} pdx_14 != 0;
    assume pdx_14 > 0;
    assume {:nonnull} pdx_14 != 0;
    assume pdx_14 > 0;
    call {:si_unique_call 1315} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_14));
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    havoc vslice_dummy_var_3234;
    call {:si_unique_call 1316} Tmp_740 := P4CompleteRequest(Irp_20, 0, vslice_dummy_var_3234);
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_264: int;

  anon0:
    call {:si_unique_call 1317} vslice_dummy_var_264 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoSurpriseRemoval"} PptPdoSurpriseRemoval(actual_Pdo_13: int, actual_Irp_21: int) returns (Tmp_744: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_744 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoSurpriseRemoval"} PptPdoSurpriseRemoval(actual_Pdo_13: int, actual_Irp_21: int) returns (Tmp_744: int)
{
  var {:pointer} pdx_15: int;
  var {:pointer} Pdo_13: int;
  var {:pointer} Irp_21: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_3235: int;

  anon0:
    Pdo_13 := actual_Pdo_13;
    Irp_21 := actual_Irp_21;
    assume {:nonnull} Pdo_13 != 0;
    assume Pdo_13 > 0;
    havoc pdx_15;
    assume {:nonnull} pdx_15 != 0;
    assume pdx_15 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} pdx_15 != 0;
    assume pdx_15 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_15))] != 0;
    assume {:nonnull} pdx_15 != 0;
    assume pdx_15 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 1318} vslice_dummy_var_265 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} pdx_15 != 0;
    assume pdx_15 > 0;
    goto L6;

  L6:
    assume {:nonnull} pdx_15 != 0;
    assume pdx_15 > 0;
    assume {:nonnull} pdx_15 != 0;
    assume pdx_15 > 0;
    call {:si_unique_call 1319} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_15));
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    havoc vslice_dummy_var_3235;
    call {:si_unique_call 1320} Tmp_744 := P4CompleteRequest(Irp_21, 0, vslice_dummy_var_3235);
    return;

  anon8_Then:
    goto L6;

  anon7_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_15))] == 0;
    goto L6;

  anon9_Then:
    goto L6;
}



procedure {:origName "PptPdoCancelStop"} PptPdoCancelStop(actual_Pdo_14: int, actual_Irp_22: int) returns (Tmp_746: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc;
  free ensures {:va_keep} Tmp_746 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoCancelStop"} PptPdoCancelStop(actual_Pdo_14: int, actual_Irp_22: int) returns (Tmp_746: int)
{
  var {:pointer} pdx_16: int;
  var {:pointer} Pdo_14: int;
  var {:pointer} Irp_22: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_3236: int;

  anon0:
    Pdo_14 := actual_Pdo_14;
    Irp_22 := actual_Irp_22;
    assume {:nonnull} Pdo_14 != 0;
    assume Pdo_14 > 0;
    havoc pdx_16;
    assume {:nonnull} pdx_16 != 0;
    assume pdx_16 > 0;
    assume {:nonnull} pdx_16 != 0;
    assume pdx_16 > 0;
    call {:si_unique_call 1321} vslice_dummy_var_266 := KeSetEvent(PauseEvent__PDO_EXTENSION(pdx_16), 0, 0);
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    havoc vslice_dummy_var_3236;
    call {:si_unique_call 1322} Tmp_746 := P4CompleteRequest(Irp_22, 0, vslice_dummy_var_3236);
    return;
}



procedure {:origName "PptPdoQueryDeviceText"} PptPdoQueryDeviceText(actual_Pdo_15: int, actual_Irp_23: int) returns (Tmp_748: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryDeviceText"} PptPdoQueryDeviceText(actual_Pdo_15: int, actual_Irp_23: int) returns (Tmp_748: int)
{
  var {:scalar} bufLen_5: int;
  var {:pointer} irpSp_4: int;
  var {:pointer} pdx_17: int;
  var {:scalar} sdv_545: int;
  var {:pointer} sdv_547: int;
  var {:scalar} sdv_548: int;
  var {:pointer} buffer_8: int;
  var {:pointer} sdv_549: int;
  var {:scalar} sdv_552: int;
  var {:scalar} status_29: int;
  var {:scalar} info_2: int;
  var {:pointer} Pdo_15: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;

  anon0:
    Pdo_15 := actual_Pdo_15;
    Irp_23 := actual_Irp_23;
    call {:si_unique_call 1323} vslice_dummy_var_267 := __HAVOC_malloc(24);
    call {:si_unique_call 1324} vslice_dummy_var_268 := __HAVOC_malloc(12);
    assume {:nonnull} Pdo_15 != 0;
    assume Pdo_15 > 0;
    havoc pdx_17;
    call {:si_unique_call 1325} irpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_23);
    buffer_8 := 0;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} pdx_17 != 0;
    assume pdx_17 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    bufLen_5 := sdv_548 + 1;
    bufLen_5 := bufLen_5 * 2;
    call {:si_unique_call 1326} sdv_549 := ExAllocatePoolWithTag(257, bufLen_5, -797810352);
    buffer_8 := sdv_549;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} buffer_8 != 0;
    call {:si_unique_call 1327} sdv_RtlZeroMemory(0, bufLen_5);
    call {:si_unique_call 1328} vslice_dummy_var_269 := corral_nondet();
    status_29 := 0;
    goto L40;

  L40:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} status_29 != 0;
    goto L42;

  L42:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} buffer_8 != 0;
    call {:si_unique_call 1329} sdv_ExFreePool(0);
    goto L43;

  L43:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc info_2;
    goto L47;

  L47:
    call {:si_unique_call 1330} Tmp_748 := P4CompleteRequest(Irp_23, status_29, info_2);
    return;

  anon26_Then:
    assume {:partition} buffer_8 == 0;
    goto L43;

  anon24_Then:
    assume {:partition} status_29 == 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} buffer_8 != 0;
    info_2 := buffer_8;
    goto L47;

  anon25_Then:
    assume {:partition} buffer_8 == 0;
    goto L42;

  anon29_Then:
    assume {:partition} buffer_8 == 0;
    status_29 := -1073741801;
    goto L40;

  anon23_Then:
    status_29 := -1073741823;
    goto L40;

  anon22_Then:
    buffer_8 := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_29 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))];
    goto L40;

  anon28_Then:
    assume {:nonnull} pdx_17 != 0;
    assume pdx_17 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} pdx_17 != 0;
    assume pdx_17 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    bufLen_5 := sdv_545 + sdv_552 + 2;
    bufLen_5 := bufLen_5 * 2;
    call {:si_unique_call 1331} sdv_547 := ExAllocatePoolWithTag(257, bufLen_5, -797810352);
    buffer_8 := sdv_547;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} buffer_8 != 0;
    call {:si_unique_call 1332} sdv_RtlZeroMemory(0, bufLen_5);
    call {:si_unique_call 1333} vslice_dummy_var_270 := corral_nondet();
    status_29 := 0;
    goto L40;

  anon30_Then:
    assume {:partition} buffer_8 == 0;
    status_29 := -1073741801;
    goto L40;

  anon27_Then:
    goto L53;

  L53:
    status_29 := -1073741823;
    goto L40;

  anon21_Then:
    goto L53;
}



procedure {:origName "PptPdoQueryPnpDeviceState"} PptPdoQueryPnpDeviceState(actual_Pdo_16: int, actual_Irp_24: int) returns (Tmp_754: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryPnpDeviceState"} PptPdoQueryPnpDeviceState(actual_Pdo_16: int, actual_Irp_24: int) returns (Tmp_754: int)
{
  var {:pointer} pdx_18: int;
  var {:scalar} status_30: int;
  var {:scalar} info_3: int;
  var {:pointer} Pdo_16: int;
  var {:pointer} Irp_24: int;

  anon0:
    Pdo_16 := actual_Pdo_16;
    Irp_24 := actual_Irp_24;
    assume {:nonnull} Pdo_16 != 0;
    assume Pdo_16 > 0;
    havoc pdx_18;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    status_30 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_24))];
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    havoc info_3;
    assume {:nonnull} pdx_18 != 0;
    assume pdx_18 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    info_3 := BOR(info_3, 2);
    status_30 := 0;
    goto L10;

  L10:
    call {:si_unique_call 1334} Tmp_754 := P4CompleteRequest(Irp_24, status_30, info_3);
    return;

  anon3_Then:
    goto L10;
}



procedure {:origName "PptPdoQueryBusInformation"} PptPdoQueryBusInformation(actual_Pdo_17: int, actual_Irp_25: int) returns (Tmp_756: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryBusInformation"} PptPdoQueryBusInformation(actual_Pdo_17: int, actual_Irp_25: int) returns (Tmp_756: int)
{
  var {:pointer} sdv_554: int;
  var {:pointer} pdx_19: int;
  var {:pointer} pBusInfo: int;
  var {:scalar} status_31: int;
  var {:scalar} info_4: int;
  var {:pointer} Pdo_17: int;
  var {:pointer} Irp_25: int;

  anon0:
    Pdo_17 := actual_Pdo_17;
    Irp_25 := actual_Irp_25;
    assume {:nonnull} Pdo_17 != 0;
    assume Pdo_17 > 0;
    havoc pdx_19;
    assume {:nonnull} pdx_19 != 0;
    assume pdx_19 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1335} sdv_554 := ExAllocatePoolWithTag(1, 24, -797810352);
    pBusInfo := sdv_554;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pBusInfo != 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    status_31 := 0;
    info_4 := pBusInfo;
    goto L21;

  L21:
    call {:si_unique_call 1336} Tmp_756 := P4CompleteRequest(Irp_25, status_31, info_4);
    return;

  anon6_Then:
    assume {:partition} pBusInfo == 0;
    status_31 := -1073741801;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    havoc info_4;
    goto L21;

  anon5_Then:
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    status_31 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))];
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    havoc info_4;
    goto L21;
}



procedure {:origName "PptPdoDefaultPnpHandler"} PptPdoDefaultPnpHandler(actual_Pdo_18: int, actual_Irp_26: int) returns (Tmp_758: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoDefaultPnpHandler"} PptPdoDefaultPnpHandler(actual_Pdo_18: int, actual_Irp_26: int) returns (Tmp_758: int)
{
  var {:pointer} Irp_26: int;
  var vslice_dummy_var_3237: int;

  anon0:
    Irp_26 := actual_Irp_26;
    assume {:nonnull} Irp_26 != 0;
    assume Irp_26 > 0;
    havoc vslice_dummy_var_3237;
    call {:si_unique_call 1337} Tmp_758 := P4CompleteRequest(Irp_26, Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_26))], vslice_dummy_var_3237);
    return;
}



procedure {:origName "PptPdoRemoveDevice"} PptPdoRemoveDevice(actual_Pdo_19: int, actual_Irp_27: int) returns (Tmp_760: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_760 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoRemoveDevice"} PptPdoRemoveDevice(actual_Pdo_19: int, actual_Irp_27: int) returns (Tmp_760: int)
{
  var {:pointer} pdx_20: int;
  var {:scalar} status_32: int;
  var {:pointer} Pdo_19: int;
  var {:pointer} Irp_27: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_3238: int;
  var vslice_dummy_var_3239: int;

  anon0:
    Pdo_19 := actual_Pdo_19;
    Irp_27 := actual_Irp_27;
    assume {:nonnull} Pdo_19 != 0;
    assume Pdo_19 > 0;
    havoc pdx_20;
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    call {:si_unique_call 1338} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_20));
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_20))] != 0;
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 1339} vslice_dummy_var_271 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto L11;

  L11:
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 1340} P4DestroyPdo(Pdo_19);
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    havoc vslice_dummy_var_3238;
    call {:si_unique_call 1341} status_32 := P4CompleteRequest(Irp_27, 0, vslice_dummy_var_3238);
    Tmp_760 := status_32;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    havoc vslice_dummy_var_3239;
    call {:si_unique_call 1342} Tmp_760 := P4CompleteRequest(Irp_27, 0, vslice_dummy_var_3239);
    goto L1;

  anon12_Then:
    goto L11;

  anon11_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(DeviceInterface__PDO_EXTENSION(pdx_20))] == 0;
    goto L11;

  anon9_Then:
    goto L11;
}



procedure {:origName "PptPdoPnp"} PptPdoPnp(actual_Pdo_20: int, actual_Irp_28: int) returns (Tmp_762: int);
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoPnp"} PptPdoPnp(actual_Pdo_20: int, actual_Irp_28: int) returns (Tmp_762: int)
{
  var {:pointer} irpSp_5: int;
  var {:scalar} Tmp_763: int;
  var {:pointer} pdx_21: int;
  var {:pointer} Pdo_20: int;
  var {:pointer} Irp_28: int;
  var vslice_dummy_var_3240: int;

  anon0:
    Pdo_20 := actual_Pdo_20;
    Irp_28 := actual_Irp_28;
    assume {:nonnull} Pdo_20 != 0;
    assume Pdo_20 > 0;
    havoc pdx_21;
    call {:si_unique_call 1343} irpSp_5 := sdv_IoGetCurrentIrpStackLocation(Irp_28);
    assume {:nonnull} pdx_21 != 0;
    assume pdx_21 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} Irp_28 != 0;
    assume Irp_28 > 0;
    havoc vslice_dummy_var_3240;
    call {:si_unique_call 1344} Tmp_762 := P4CompleteRequest(Irp_28, -1073741738, vslice_dummy_var_3240);
    goto L1;

  L1:
    return;

  anon55_Then:
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} 25 <= Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(irpSp_5)];
    call {:si_unique_call 1345} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon56_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(irpSp_5)] < 25;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    Tmp_763 := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(irpSp_5)];
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume Tmp_763 != 24;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume Tmp_763 != 23;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume Tmp_763 != 22;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Tmp_763 != 21;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_763 != 20;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_763 != 19;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_763 != 18;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_763 != 17;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_763 != 16;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_763 != 15;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_763 != 14;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_763 != 13;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_763 != 12;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_763 != 11;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_763 != 10;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_763 != 9;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_763 != 8;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_763 != 7;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_763 != 6;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_763 != 5;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_763 != 4;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_763 != 3;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_763 != 2;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_763 != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume false;
    return;

  anon81_Then:
    assume Tmp_763 == 0;
    assume {:IndirectCall} true;
    call {:si_unique_call 1346} Tmp_762 := PptPdoStartDevice(Pdo_20, Irp_28);
    goto L1;

  anon80_Then:
    assume Tmp_763 == 1;
    assume {:IndirectCall} true;
    call {:si_unique_call 1347} Tmp_762 := PptPdoQueryRemove(Pdo_20, Irp_28);
    goto L1;

  anon79_Then:
    assume Tmp_763 == 2;
    assume {:IndirectCall} true;
    call {:si_unique_call 1348} Tmp_762 := PptPdoRemoveDevice(Pdo_20, Irp_28);
    goto L1;

  anon78_Then:
    assume Tmp_763 == 3;
    assume {:IndirectCall} true;
    call {:si_unique_call 1349} Tmp_762 := PptPdoCancelRemove(Pdo_20, Irp_28);
    goto L1;

  anon77_Then:
    assume Tmp_763 == 4;
    assume {:IndirectCall} true;
    call {:si_unique_call 1350} Tmp_762 := PptPdoStopDevice(Pdo_20, Irp_28);
    goto L1;

  anon76_Then:
    assume Tmp_763 == 5;
    assume {:IndirectCall} true;
    call {:si_unique_call 1351} Tmp_762 := PptPdoQueryStop(Pdo_20, Irp_28);
    goto L1;

  anon75_Then:
    assume Tmp_763 == 6;
    assume {:IndirectCall} true;
    call {:si_unique_call 1352} Tmp_762 := PptPdoCancelStop(Pdo_20, Irp_28);
    goto L1;

  anon74_Then:
    assume Tmp_763 == 7;
    assume {:IndirectCall} true;
    call {:si_unique_call 1353} Tmp_762 := PptPdoQueryDeviceRelations(Pdo_20, Irp_28);
    goto L1;

  anon73_Then:
    assume Tmp_763 == 8;
    assume {:IndirectCall} true;
    call {:si_unique_call 1354} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon72_Then:
    assume Tmp_763 == 9;
    assume {:IndirectCall} true;
    call {:si_unique_call 1355} Tmp_762 := PptPdoQueryCapabilities(Pdo_20, Irp_28);
    goto L1;

  anon71_Then:
    assume Tmp_763 == 10;
    assume {:IndirectCall} true;
    call {:si_unique_call 1356} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon70_Then:
    assume Tmp_763 == 11;
    assume {:IndirectCall} true;
    call {:si_unique_call 1357} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon69_Then:
    assume Tmp_763 == 12;
    assume {:IndirectCall} true;
    call {:si_unique_call 1358} Tmp_762 := PptPdoQueryDeviceText(Pdo_20, Irp_28);
    goto L1;

  anon68_Then:
    assume Tmp_763 == 13;
    assume {:IndirectCall} true;
    call {:si_unique_call 1359} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon67_Then:
    assume Tmp_763 == 14;
    assume {:IndirectCall} true;
    call {:si_unique_call 1360} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon66_Then:
    assume Tmp_763 == 15;
    assume {:IndirectCall} true;
    call {:si_unique_call 1361} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon65_Then:
    assume Tmp_763 == 16;
    assume {:IndirectCall} true;
    call {:si_unique_call 1362} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon64_Then:
    assume Tmp_763 == 17;
    assume {:IndirectCall} true;
    call {:si_unique_call 1363} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon63_Then:
    assume Tmp_763 == 18;
    assume {:IndirectCall} true;
    call {:si_unique_call 1364} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon62_Then:
    assume Tmp_763 == 19;
    assume {:IndirectCall} true;
    call {:si_unique_call 1365} Tmp_762 := PptPdoQueryId(Pdo_20, Irp_28);
    goto L1;

  anon61_Then:
    assume Tmp_763 == 20;
    assume {:IndirectCall} true;
    call {:si_unique_call 1366} Tmp_762 := PptPdoQueryPnpDeviceState(Pdo_20, Irp_28);
    goto L1;

  anon60_Then:
    assume Tmp_763 == 21;
    assume {:IndirectCall} true;
    call {:si_unique_call 1367} Tmp_762 := PptPdoQueryBusInformation(Pdo_20, Irp_28);
    goto L1;

  anon59_Then:
    assume Tmp_763 == 22;
    assume {:IndirectCall} true;
    call {:si_unique_call 1368} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;

  anon58_Then:
    assume Tmp_763 == 23;
    assume {:IndirectCall} true;
    call {:si_unique_call 1369} Tmp_762 := PptPdoSurpriseRemoval(Pdo_20, Irp_28);
    goto L1;

  anon57_Then:
    assume Tmp_763 == 24;
    assume {:IndirectCall} true;
    call {:si_unique_call 1370} Tmp_762 := PptPdoDefaultPnpHandler(Pdo_20, Irp_28);
    goto L1;
}



procedure {:origName "PptPdoQueryId"} PptPdoQueryId(actual_Pdo_21: int, actual_Irp_29: int) returns (Tmp_765: int);
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryId"} PptPdoQueryId(actual_Pdo_21: int, actual_Irp_29: int) returns (Tmp_765: int)
{
  var {:scalar} bufLen_6: int;
  var {:scalar} sdv_564: int;
  var {:pointer} sdv_565: int;
  var {:scalar} sdv_566: int;
  var {:pointer} mfgMdlBuffer: int;
  var {:pointer} irpSp_6: int;
  var {:pointer} pdx_22: int;
  var {:pointer} sdv_568: int;
  var {:scalar} sdv_569: int;
  var {:scalar} wcharsWritten: int;
  var {:scalar} checksumLength: int;
  var {:scalar} Tmp_772: int;
  var {:pointer} sdv_571: int;
  var {:scalar} sdv_572: int;
  var {:scalar} sdv_573: int;
  var {:scalar} Tmp_774: int;
  var {:pointer} buffer_9: int;
  var {:scalar} lengthOfMfgMdlBuffer: int;
  var {:dopa} {:scalar} checksum: int;
  var {:pointer} sdv_575: int;
  var {:pointer} prefix: int;
  var {:scalar} mfgMdlTruncationLimit: int;
  var {:pointer} prefix_1: int;
  var {:scalar} sdv_580: int;
  var {:scalar} sdv_581: int;
  var {:scalar} status_33: int;
  var {:scalar} info_5: int;
  var {:scalar} sdv_582: int;
  var {:pointer} Pdo_21: int;
  var {:pointer} Irp_29: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_3241: int;
  var vslice_dummy_var_3242: int;
  var vslice_dummy_var_3243: int;

  anon0:
    call {:si_unique_call 1371} checksum := __HAVOC_malloc(4);
    Pdo_21 := actual_Pdo_21;
    Irp_29 := actual_Irp_29;
    call {:si_unique_call 1372} vslice_dummy_var_272 := __HAVOC_malloc(36);
    call {:si_unique_call 1373} vslice_dummy_var_273 := __HAVOC_malloc(48);
    call {:si_unique_call 1374} vslice_dummy_var_274 := __HAVOC_malloc(12);
    call {:si_unique_call 1375} vslice_dummy_var_275 := __HAVOC_malloc(20);
    call {:si_unique_call 1376} vslice_dummy_var_276 := __HAVOC_malloc(36);
    call {:si_unique_call 1377} prefix := __HAVOC_malloc(36);
    call {:si_unique_call 1378} prefix_1 := __HAVOC_malloc(36);
    call {:si_unique_call 1379} vslice_dummy_var_277 := __HAVOC_malloc(40);
    call {:si_unique_call 1380} vslice_dummy_var_278 := __HAVOC_malloc(28);
    assume {:nonnull} Pdo_21 != 0;
    assume Pdo_21 > 0;
    havoc pdx_22;
    call {:si_unique_call 1381} irpSp_6 := sdv_IoGetCurrentIrpStackLocation(Irp_29);
    buffer_9 := 0;
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    bufLen_6 := sdv_572 + 1;
    bufLen_6 := bufLen_6 * 2;
    call {:si_unique_call 1382} sdv_575 := ExAllocatePoolWithTag(257, bufLen_6, -797810352);
    buffer_9 := sdv_575;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} buffer_9 != 0;
    call {:si_unique_call 1383} sdv_RtlZeroMemory(0, bufLen_6);
    call {:si_unique_call 1384} vslice_dummy_var_282 := corral_nondet();
    call {:si_unique_call 1385} P4SanitizeId(buffer_9);
    status_33 := 0;
    goto L45;

  L45:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} status_33 != 0;
    goto L47;

  L47:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} buffer_9 != 0;
    call {:si_unique_call 1386} sdv_ExFreePool(0);
    goto L48;

  L48:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    havoc info_5;
    goto L52;

  L52:
    call {:si_unique_call 1387} Tmp_765 := P4CompleteRequest(Irp_29, status_33, info_5);
    return;

  anon38_Then:
    assume {:partition} buffer_9 == 0;
    goto L48;

  anon36_Then:
    assume {:partition} status_33 == 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} buffer_9 != 0;
    info_5 := buffer_9;
    goto L52;

  anon37_Then:
    assume {:partition} buffer_9 == 0;
    goto L47;

  anon48_Then:
    assume {:partition} buffer_9 == 0;
    status_33 := -1073741801;
    goto L45;

  anon35_Then:
    status_33 := -1073741823;
    goto L45;

  anon41_Then:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    status_33 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_29))];
    goto L45;

  anon42_Then:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    status_33 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_29))];
    goto L45;

  anon43_Then:
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    lengthOfMfgMdlBuffer := sdv_569 + sdv_580 + 1;
    call {:si_unique_call 1388} sdv_571 := ExAllocatePoolWithTag(257, lengthOfMfgMdlBuffer, -797810352);
    mfgMdlBuffer := sdv_571;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} mfgMdlBuffer != 0;
    prefix_1 := strConst__li2bpl34;
    mfgMdlTruncationLimit := 20;
    checksumLength := 4;
    call {:si_unique_call 1389} sdv_RtlZeroMemory(0, lengthOfMfgMdlBuffer);
    call {:si_unique_call 1390} vslice_dummy_var_280 := corral_nondet();
    Tmp_774 := sdv_582;
    call {:si_unique_call 1391} GetCheckSum(mfgMdlBuffer, Tmp_774, checksum);
    bufLen_6 := sdv_573 + 2 * mfgMdlTruncationLimit + 2 * checksumLength + 3;
    bufLen_6 := bufLen_6 * 2;
    call {:si_unique_call 1392} sdv_565 := ExAllocatePoolWithTag(257, bufLen_6, -797810352);
    buffer_9 := sdv_565;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} buffer_9 != 0;
    call {:si_unique_call 1393} sdv_RtlZeroMemory(0, bufLen_6);
    call {:si_unique_call 1394} sdv_566 := corral_nondet();
    wcharsWritten := sdv_566;
    call {:si_unique_call 1395} vslice_dummy_var_281 := corral_nondet();
    call {:si_unique_call 1396} sdv_ExFreePool(0);
    Tmp_772 := INTDIV(bufLen_6, 2);
    call {:si_unique_call 1397} P4SanitizeMultiSzId(buffer_9, Tmp_772);
    status_33 := 0;
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    havoc vslice_dummy_var_3241;
    call {:si_unique_call 1398} P4WritePortNameToDevNode(Pdo_21, vslice_dummy_var_3241);
    goto L138;

  L138:
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    havoc vslice_dummy_var_3242;
    havoc vslice_dummy_var_3243;
    call {:si_unique_call 1399} PptWriteMfgMdlToDevNode(Pdo_21, vslice_dummy_var_3242, vslice_dummy_var_3243);
    goto L45;

  anon47_Then:
    assume {:partition} buffer_9 == 0;
    call {:si_unique_call 1400} sdv_ExFreePool(0);
    status_33 := -1073741670;
    goto L138;

  anon46_Then:
    assume {:partition} mfgMdlBuffer == 0;
    status_33 := -1073741670;
    goto L138;

  anon39_Then:
    goto L58;

  L58:
    status_33 := -1073741823;
    goto L138;

  anon34_Then:
    goto L58;

  anon44_Then:
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    prefix := strConst__li2bpl34;
    bufLen_6 := 9 + sdv_581 + sdv_564;
    bufLen_6 := bufLen_6 * 2;
    call {:si_unique_call 1401} sdv_568 := ExAllocatePoolWithTag(257, bufLen_6, -797810352);
    buffer_9 := sdv_568;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} buffer_9 != 0;
    call {:si_unique_call 1402} sdv_RtlZeroMemory(0, bufLen_6);
    call {:si_unique_call 1403} vslice_dummy_var_279 := corral_nondet();
    call {:si_unique_call 1404} P4SanitizeId(buffer_9);
    status_33 := 0;
    goto L45;

  anon45_Then:
    assume {:partition} buffer_9 == 0;
    status_33 := -1073741801;
    goto L45;

  anon40_Then:
    goto L143;

  L143:
    status_33 := -1073741823;
    goto L45;

  anon33_Then:
    goto L143;
}



procedure {:origName "PptPdoQueryCapabilities"} PptPdoQueryCapabilities(actual_Pdo_22: int, actual_Irp_30: int) returns (Tmp_781: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc;
  free ensures {:va_keep} Tmp_781 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryCapabilities"} PptPdoQueryCapabilities(actual_Pdo_22: int, actual_Irp_30: int) returns (Tmp_781: int)
{
  var {:pointer} Tmp_782: int;
  var {:pointer} irpSp_7: int;
  var {:pointer} pdx_23: int;
  var {:pointer} Tmp_783: int;
  var {:pointer} Pdo_22: int;
  var {:pointer} Irp_30: int;
  var vslice_dummy_var_3244: int;

  anon0:
    Pdo_22 := actual_Pdo_22;
    Irp_30 := actual_Irp_30;
    assume {:nonnull} Pdo_22 != 0;
    assume Pdo_22 > 0;
    havoc pdx_23;
    call {:si_unique_call 1405} irpSp_7 := sdv_IoGetCurrentIrpStackLocation(Irp_30);
    assume {:nonnull} irpSp_7 != 0;
    assume irpSp_7 > 0;
    havoc Tmp_783;
    assume {:nonnull} Tmp_783 != 0;
    assume Tmp_783 > 0;
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} irpSp_7 != 0;
    assume irpSp_7 > 0;
    havoc Tmp_782;
    assume {:nonnull} Tmp_782 != 0;
    assume Tmp_782 > 0;
    goto L12;

  L12:
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    havoc vslice_dummy_var_3244;
    call {:si_unique_call 1406} Tmp_781 := P4CompleteRequest(Irp_30, 0, vslice_dummy_var_3244);
    return;

  anon3_Then:
    goto L12;
}



procedure {:origName "PptPdoQueryStop"} PptPdoQueryStop(actual_Pdo_23: int, actual_Irp_31: int) returns (Tmp_785: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_785 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPdoQueryStop"} PptPdoQueryStop(actual_Pdo_23: int, actual_Irp_31: int) returns (Tmp_785: int)
{
  var {:pointer} pdx_24: int;
  var {:pointer} Pdo_23: int;
  var {:pointer} Irp_31: int;
  var vslice_dummy_var_3245: int;

  anon0:
    Pdo_23 := actual_Pdo_23;
    Irp_31 := actual_Irp_31;
    assume {:nonnull} Pdo_23 != 0;
    assume Pdo_23 > 0;
    havoc pdx_24;
    assume {:nonnull} pdx_24 != 0;
    assume pdx_24 > 0;
    assume {:nonnull} pdx_24 != 0;
    assume pdx_24 > 0;
    call {:si_unique_call 1407} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_24));
    assume {:nonnull} Irp_31 != 0;
    assume Irp_31 > 0;
    havoc vslice_dummy_var_3245;
    call {:si_unique_call 1408} Tmp_785 := P4CompleteRequest(Irp_31, 0, vslice_dummy_var_3245);
    return;
}



procedure {:origName "P5FdoCreateThread"} P5FdoCreateThread(actual_Fdx_7: int) returns (Tmp_787: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_787 == 0 || Tmp_787 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5FdoCreateThread"} P5FdoCreateThread(actual_Fdx_7: int) returns (Tmp_787: int)
{
  var {:scalar} status_34: int;
  var {:pointer} Fdx_7: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_285: int;

  anon0:
    call {:si_unique_call 1409} vslice_dummy_var_283 := __HAVOC_malloc(24);
    Fdx_7 := actual_Fdx_7;
    call {:si_unique_call 1410} sdv_InitializeObjectAttributes(0, 0, 512, 0, 0);
    call {:si_unique_call 1411} status_34 := PsCreateSystemThread(0, 2097151, 0, 0, 0, li2bplFunctionConstant761, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_34 != 0;
    goto L19;

  L19:
    Tmp_787 := status_34;
    return;

  anon5_Then:
    assume {:partition} status_34 == 0;
    call {:si_unique_call 1412} status_34 := ObReferenceObjectByHandle(0, 2097151, 0, 0, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_34 != 0;
    assume {:nonnull} Fdx_7 != 0;
    assume Fdx_7 > 0;
    call {:si_unique_call 1413} vslice_dummy_var_285 := ZwClose(0);
    goto L19;

  anon6_Then:
    assume {:partition} status_34 == 0;
    call {:si_unique_call 1414} vslice_dummy_var_284 := ZwClose(0);
    goto L19;
}



procedure {:origName "_sdv_init30"} _sdv_init30();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init30"} _sdv_init30()
{
  var vslice_dummy_var_286: int;

  anon0:
    call {:si_unique_call 1415} vslice_dummy_var_286 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_287: int;

  anon0:
    call {:si_unique_call 1416} vslice_dummy_var_287 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_288: int;

  anon0:
    call {:si_unique_call 1417} vslice_dummy_var_288 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "P4IeeeEnter1284Mode"} P4IeeeEnter1284Mode(actual_Controller_5: int, actual_Extensibility_1: int, actual_IeeeState: int) returns (Tmp_795: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_795 == -1073741808 || Tmp_795 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4IeeeEnter1284Mode"} P4IeeeEnter1284Mode(actual_Controller_5: int, actual_Extensibility_1: int, actual_IeeeState: int) returns (Tmp_795: int)
{
  var {:scalar} Tmp_796: int;
  var {:scalar} Tmp_797: int;
  var {:scalar} dcr_2: int;
  var {:scalar} Tmp_798: int;
  var {:pointer} Tmp_801: int;
  var {:scalar} sdv_591: int;
  var {:scalar} Tmp_803: int;
  var {:scalar} Tmp_804: int;
  var {:pointer} Tmp_805: int;
  var {:scalar} Tmp_806: int;
  var {:scalar} Tmp_808: int;
  var {:scalar} sdv_592: int;
  var {:scalar} sdv_593: int;
  var {:scalar} sdv_594: int;
  var {:scalar} Tmp_809: int;
  var {:scalar} Tmp_810: int;
  var {:scalar} sPeriphResponseTime_1: int;
  var {:scalar} Tmp_811: int;
  var {:scalar} Tmp_812: int;
  var {:pointer} Controller_5: int;
  var {:pointer} IeeeState: int;

  anon0:
    Controller_5 := actual_Controller_5;
    IeeeState := actual_IeeeState;
    sPeriphResponseTime_1 := 35;
    call {:si_unique_call 1418} dcr_2 := corral_nondet();
    Tmp_812 := BAND(dcr_2, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr_2 := BOR(Tmp_812, BOR(4, 8));
    Tmp_797 := BAND(dcr_2, BOR(4, 8));
    dcr_2 := BOR(Tmp_797, BOR(4, 8));
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_809 := BAND(dcr_2, BOR(BOR(BOR(2, 4), 16), 32));
    dcr_2 := BOR(Tmp_809, 2);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    call {:si_unique_call 1419} sdv_591 := corral_nondet();
    Tmp_798 := BAND(sdv_591, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Tmp_798 == 56;
    Tmp_804 := 1;
    goto L51;

  L51:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Tmp_804 == 0;
    Tmp_808 := BAND(dcr_2, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr_2 := BOR(Tmp_808, 8);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_795 := -1073741808;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Tmp_804 != 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_811 := BAND(dcr_2, BOR(BOR(BOR(BOR(1, 2), 4), 16), 32));
    dcr_2 := BOR(Tmp_811, BOR(1, 2));
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_810 := BAND(dcr_2, BOR(BOR(4, 16), 32));
    dcr_2 := BOR(Tmp_810, 0);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    call {:si_unique_call 1420} sdv_592 := corral_nondet();
    Tmp_806 := BAND(sdv_592, 64);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_806 == 64;
    Tmp_796 := 1;
    goto L79;

  L79:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Tmp_796 != 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_795 := 0;
    goto L1;

  anon10_Then:
    assume {:partition} Tmp_796 == 0;
    Tmp_803 := BAND(dcr_2, BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32));
    dcr_2 := BOR(Tmp_803, 8);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_795 := -1073741808;
    goto L1;

  anon12_Then:
    assume {:partition} Tmp_806 != 64;
    Tmp_805 := Controller_5;
    call {:si_unique_call 1421} sdv_593 := CheckPort(Tmp_805, 64, 64, sPeriphResponseTime_1);
    Tmp_796 := sdv_593;
    goto L79;

  anon11_Then:
    assume {:partition} Tmp_798 != 56;
    Tmp_801 := Controller_5;
    call {:si_unique_call 1422} sdv_594 := CheckPort(Tmp_801, 120, 56, sPeriphResponseTime_1);
    Tmp_804 := sdv_594;
    goto L51;
}



procedure {:origName "P4IeeeTerminate1284Mode"} P4IeeeTerminate1284Mode(actual_Controller_6: int, actual_IeeeState_1: int, actual_XFlagOnEvent24: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4IeeeTerminate1284Mode"} P4IeeeTerminate1284Mode(actual_Controller_6: int, actual_IeeeState_1: int, actual_XFlagOnEvent24: int)
{
  var {:pointer} Tmp_815: int;
  var {:scalar} dsrValue_1: int;
  var {:pointer} Tmp_817: int;
  var {:scalar} bUseXFlag_1: int;
  var {:scalar} dcr_3: int;
  var {:scalar} bXFlag_1: int;
  var {:scalar} dsrMask_1: int;
  var {:scalar} Tmp_818: int;
  var {:scalar} Tmp_821: int;
  var {:scalar} Tmp_822: int;
  var {:scalar} Tmp_823: int;
  var {:scalar} sdv_598: int;
  var {:scalar} Tmp_825: int;
  var {:scalar} sdv_600: int;
  var {:scalar} sdv_601: int;
  var {:scalar} Tmp_826: int;
  var {:scalar} Tmp_827: int;
  var {:scalar} sdv_602: int;
  var {:scalar} Tmp_828: int;
  var {:scalar} Tmp_829: int;
  var {:pointer} Controller_6: int;
  var {:pointer} IeeeState_1: int;
  var {:scalar} XFlagOnEvent24: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;

  anon0:
    call {:si_unique_call 1423} vslice_dummy_var_289 := __HAVOC_malloc(4);
    Controller_6 := actual_Controller_6;
    IeeeState_1 := actual_IeeeState_1;
    XFlagOnEvent24 := actual_XFlagOnEvent24;
    bUseXFlag_1 := 0;
    call {:si_unique_call 1424} dcr_3 := corral_nondet();
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto L18;

  L18:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    Tmp_821 := BAND(dcr_3, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_3 := BOR(Tmp_821, 8);
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    return;

  anon31_Then:
    call {:si_unique_call 1425} sdv_598 := corral_nondet();
    bXFlag_1 := BAND(sdv_598, 16);
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    call {:si_unique_call 1426} dcr_3 := corral_nondet();
    Tmp_827 := BAND(dcr_3, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_3 := BOR(Tmp_827, 8);
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L48;

  L48:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto L50;

  L50:
    bUseXFlag_1 := 1;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} XFlagOnEvent24 != 0;
    goto L53;

  L53:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} bUseXFlag_1 != 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} bXFlag_1 != 0;
    Tmp_826 := 0;
    goto L58;

  L58:
    dsrMask_1 := BOR(BOR(64, Tmp_826), 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} bXFlag_1 == 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} bXFlag_1 != 0;
    Tmp_828 := 0;
    goto L103;

  L103:
    Tmp_818 := Tmp_828;
    Tmp_829 := Tmp_818;
    goto L62;

  L62:
    dsrValue_1 := BOR(BOR(0, Tmp_829), 0);
    goto L63;

  L63:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    Tmp_815 := Controller_6;
    call {:si_unique_call 1427} sdv_600 := CheckPort(Tmp_815, dsrMask_1, dsrValue_1, 35);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_600 != 0;
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    Tmp_825 := BAND(dcr_3, BOR(BOR(BOR(BOR(2, 4), 8), 16), 32));
    dcr_3 := BOR(Tmp_825, BOR(2, 8));
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    call {:si_unique_call 1428} sdv_601 := corral_nondet();
    Tmp_822 := BAND(sdv_601, BOR(64, 128));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Tmp_822 == 64;
    Tmp_823 := 1;
    goto L85;

  L85:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Tmp_823 == 0;
    call {:si_unique_call 1429} vslice_dummy_var_290 := corral_nondet();
    goto L18;

  anon39_Then:
    assume {:partition} Tmp_823 != 0;
    goto L18;

  anon45_Then:
    assume {:partition} Tmp_822 != 64;
    Tmp_817 := Controller_6;
    call {:si_unique_call 1430} sdv_602 := CheckPort(Tmp_817, 192, 64, 35);
    Tmp_823 := sdv_602;
    goto L85;

  anon38_Then:
    assume {:partition} sdv_600 == 0;
    call {:si_unique_call 1431} vslice_dummy_var_291 := corral_nondet();
    goto L18;

  anon40_Then:
    assume {:partition} bXFlag_1 == 0;
    Tmp_828 := 16;
    goto L103;

  anon44_Then:
    assume {:partition} bXFlag_1 != 0;
    Tmp_829 := 0;
    goto L62;

  anon37_Then:
    assume {:partition} bXFlag_1 == 0;
    Tmp_826 := 16;
    goto L58;

  anon36_Then:
    assume {:partition} bUseXFlag_1 == 0;
    dsrMask_1 := 64;
    dsrValue_1 := 0;
    goto L63;

  anon43_Then:
    assume {:partition} XFlagOnEvent24 == 0;
    bUseXFlag_1 := 0;
    goto L53;

  anon34_Then:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    bUseXFlag_1 := 0;
    goto L53;

  anon35_Then:
    goto L50;

  anon32_Then:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L108;

  L108:
    bUseXFlag_1 := 1;
    goto L53;

  anon41_Then:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    bUseXFlag_1 := 0;
    goto L53;

  anon42_Then:
    goto L108;

  anon33_Then:
    goto L48;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_292: int;

  anon0:
    call {:si_unique_call 1432} vslice_dummy_var_292 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "P4NibbleModeRead"} P4NibbleModeRead(actual_Controller_7: int, actual_Buffer: int, actual_BufferSize: int, actual_BytesTransferred: int, actual_IeeeState_2: int) returns (Tmp_833: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_833 == -1073741435 || Tmp_833 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4NibbleModeRead"} P4NibbleModeRead(actual_Controller_7: int, actual_Buffer: int, actual_BufferSize: int, actual_BytesTransferred: int, actual_IeeeState_2: int) returns (Tmp_833: int)
{
  var {:scalar} i_21: int;
  var {:scalar} Tmp_834: int;
  var {:scalar} sdv_603: int;
  var {:scalar} sdv_604: int;
  var {:scalar} dcr_4: int;
  var {:scalar} Tmp_838: int;
  var {:scalar} Tmp_839: int;
  var {:scalar} Tmp_840: int;
  var {:scalar} Tmp_841: int;
  var {:scalar} Status_3: int;
  var {:scalar} j: int;
  var {:scalar} Tmp_843: int;
  var {:scalar} Tmp_845: int;
  var {:scalar} sdv_606: int;
  var {:scalar} Tmp_846: int;
  var {:scalar} Tmp_847: int;
  var {:scalar} Tmp_849: int;
  var {:scalar} Tmp_850: int;
  var {:pointer} Tmp_851: int;
  var {:scalar} Tmp_852: int;
  var {:pointer} Tmp_853: int;
  var {:scalar} Tmp_854: int;
  var {:pointer} nibble: int;
  var {:scalar} sdv_611: int;
  var {:scalar} Tmp_855: int;
  var {:pointer} Tmp_856: int;
  var {:scalar} sdv_612: int;
  var {:scalar} sdv_613: int;
  var {:scalar} Tmp_857: int;
  var {:scalar} sdv_614: int;
  var {:scalar} Tmp_858: int;
  var {:scalar} dsr: int;
  var {:pointer} p_8: int;
  var {:pointer} Controller_7: int;
  var {:pointer} Buffer: int;
  var {:scalar} BufferSize: int;
  var {:pointer} BytesTransferred: int;
  var {:pointer} IeeeState_2: int;

  anon0:
    Controller_7 := actual_Controller_7;
    Buffer := actual_Buffer;
    BufferSize := actual_BufferSize;
    BytesTransferred := actual_BytesTransferred;
    IeeeState_2 := actual_IeeeState_2;
    call {:si_unique_call 1433} nibble := __HAVOC_malloc(8);
    Status_3 := 0;
    p_8 := Buffer;
    call {:si_unique_call 1434} dcr_4 := corral_nondet();
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L26;

  L26:
    i_21 := 0;
    goto L27;

  L27:
    call {:si_unique_call 1435} i_21, dcr_4, Tmp_838, Tmp_840, j, Tmp_843, sdv_606, Tmp_846, Tmp_847, Tmp_849, Tmp_850, Tmp_851, Tmp_853, Tmp_854, sdv_611, Tmp_855, sdv_612, sdv_613, Tmp_857, sdv_614, Tmp_858, dsr := P4NibbleModeRead_loop_L27(i_21, dcr_4, Tmp_838, Tmp_840, j, Tmp_843, sdv_606, Tmp_846, Tmp_847, Tmp_849, Tmp_850, Tmp_851, Tmp_853, Tmp_854, nibble, sdv_611, Tmp_855, sdv_612, sdv_613, Tmp_857, sdv_614, Tmp_858, dsr, p_8, Controller_7, BufferSize, IeeeState_2);
    goto L27_last;

  L27_last:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BufferSize > i_21;
    j := 0;
    goto L30;

  L30:
    call {:si_unique_call 1436} dcr_4, Tmp_838, j, sdv_606, Tmp_850, Tmp_851, Tmp_853, sdv_611, Tmp_855, sdv_612, sdv_613, sdv_614, Tmp_858 := P4NibbleModeRead_loop_L30(dcr_4, Tmp_838, j, sdv_606, Tmp_850, Tmp_851, Tmp_853, nibble, sdv_611, Tmp_855, sdv_612, sdv_613, sdv_614, Tmp_858, Controller_7, IeeeState_2);
    goto L30_last;

  L30_last:
    assume {:CounterLoop 2} {:Counter "j"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > j;
    dcr_4 := BOR(dcr_4, 2);
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1437} sdv_611 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(sdv_611, 64) != 0;
    Tmp_853 := Controller_7;
    call {:si_unique_call 1438} sdv_613 := CheckPort(Tmp_853, 64, 0, 35);
    Tmp_855 := sdv_613;
    goto L48;

  L48:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Tmp_855 != 0;
    call {:si_unique_call 1439} sdv_612 := corral_nondet();
    Tmp_838 := j;
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    Mem_T.INT4[nibble + Tmp_838 * 4] := sdv_612;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    dcr_4 := BAND(dcr_4, BNOT(2));
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1440} sdv_606 := corral_nondet();
    Tmp_850 := BAND(sdv_606, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Tmp_850 == 64;
    Tmp_858 := 1;
    goto L68;

  L68:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Tmp_858 != 0;
    j := j + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} Tmp_858 == 0;
    Status_3 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  L74:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    dcr_4 := BOR(dcr_4, 2);
    goto L75;

  L75:
    Tmp_833 := Status_3;
    return;

  anon43_Then:
    goto L75;

  anon52_Then:
    assume {:partition} Tmp_850 != 64;
    Tmp_851 := Controller_7;
    call {:si_unique_call 1441} sdv_614 := CheckPort(Tmp_851, 64, 64, 35);
    Tmp_858 := sdv_614;
    goto L68;

  anon41_Then:
    assume {:partition} Tmp_855 == 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_3 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon40_Then:
    assume {:partition} BAND(sdv_611, 64) == 0;
    Tmp_855 := 1;
    goto L48;

  anon39_Then:
    assume {:partition} j >= 2;
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    call {:si_unique_call 1442} Tmp_840 := corral_nondet();
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble], 128) != 0;
    Tmp_854 := 0;
    goto L92;

  L92:
    Tmp_847 := i_21;
    assume {:nonnull} p_8 != 0;
    assume p_8 > 0;
    Mem_T.INT4[p_8 + Tmp_847 * 4] := BOR(Tmp_840, Tmp_854);
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    call {:si_unique_call 1443} Tmp_846 := corral_nondet();
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble + 1 * 4], 128) != 0;
    Tmp_857 := 0;
    goto L98;

  L98:
    Tmp_843 := i_21;
    Tmp_849 := i_21;
    assume {:nonnull} p_8 != 0;
    assume p_8 > 0;
    Mem_T.INT4[p_8 + Tmp_843 * 4] := BOR(Mem_T.INT4[p_8 + Tmp_849 * 4], BOR(Tmp_846, Tmp_857));
    call {:si_unique_call 1444} dsr := corral_nondet();
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(dsr, 8) != 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    i_21 := i_21 + 1;
    goto L28;

  L28:
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := i_21;
    goto L74;

  anon44_Then:
    assume {:partition} BAND(dsr, 8) == 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    i_21 := i_21 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble + 1 * 4], 128) == 0;
    Tmp_857 := 128;
    goto L98;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble], 128) == 0;
    Tmp_854 := 8;
    goto L92;

  anon38_Then:
    assume {:partition} i_21 >= BufferSize;
    goto L28;

  anon48_Then:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_3 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon49_Then:
    goto L25;

  L25:
    call {:si_unique_call 1445} dsr := corral_nondet();
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(dsr, 8) != 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1446} dsr := corral_nondet();
    Tmp_841 := BAND(dsr, BOR(16, 32));
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Tmp_841 == 32;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon51_Then:
    assume {:partition} Tmp_841 != 32;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_3 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon45_Then:
    assume {:partition} BAND(dsr, 8) == 0;
    call {:si_unique_call 1447} dcr_4 := corral_nondet();
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Tmp_852 := BAND(dcr_4, BOR(BOR(4, 16), 32));
    dcr_4 := BOR(Tmp_852, 0);
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1448} sdv_603 := corral_nondet();
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(sdv_603, 32) != 0;
    Tmp_856 := Controller_7;
    call {:si_unique_call 1449} sdv_604 := CheckPort(Tmp_856, 32, 0, 35);
    Tmp_845 := sdv_604;
    goto L150;

  L150:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Tmp_845 != 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L26;

  anon47_Then:
    assume {:partition} Tmp_845 == 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_3 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon46_Then:
    assume {:partition} BAND(sdv_603, 32) == 0;
    Tmp_845 := 1;
    goto L150;

  anon37_Then:
    call {:si_unique_call 1450} dsr := corral_nondet();
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Tmp_839 := BAND(dsr, 8);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Tmp_839 == 8;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Tmp_834 := BAND(dcr_4, BOR(BOR(BOR(2, 4), 16), 32));
    dcr_4 := BOR(Tmp_834, 2);
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L25;

  anon50_Then:
    assume {:partition} Tmp_839 != 8;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L26;
}



procedure {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_616: int, actual_sdv_617: int) returns (Tmp_861: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_616: int, actual_sdv_617: int) returns (Tmp_861: int)
{
  var {:scalar} sdv_618: int;

  anon0:
    call {:si_unique_call 1451} Tmp_861 := __HAVOC_malloc(4);
    call {:si_unique_call 1452} sdv_618 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    assume {:nonnull} sdv_618 != 0;
    assume sdv_618 > 0;
    Mem_T.INT4[Tmp_861] := Mem_T.INT4[sdv_618];
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_635: int, actual_sdv_636: int) returns (Tmp_873: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_635: int, actual_sdv_636: int) returns (Tmp_873: int)
{
  var {:scalar} sdv_637: int;

  anon0:
    call {:si_unique_call 1453} Tmp_873 := __HAVOC_malloc(4);
    call {:si_unique_call 1454} sdv_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_873 != 0;
    assume Tmp_873 > 0;
    assume {:nonnull} sdv_637 != 0;
    assume sdv_637 > 0;
    Mem_T.INT4[Tmp_873] := Mem_T.INT4[sdv_637];
    return;
}



procedure {:origName "_sdv_init49"} _sdv_init49();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init49"} _sdv_init49()
{
  var vslice_dummy_var_293: int;

  anon0:
    call {:si_unique_call 1455} vslice_dummy_var_293 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptCheckIfStlProductId"} PptCheckIfStlProductId(actual_DeviceExtension: int, actual_ulDaisyIndex_3: int) returns (Tmp_889: int);
  free ensures {:va_keep} Tmp_889 == 0 || Tmp_889 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptCheckIfStlProductId"} PptCheckIfStlProductId(actual_DeviceExtension: int, actual_ulDaisyIndex_3: int) returns (Tmp_889: int)
{
  var {:scalar} i_23: int;
  var {:scalar} ucProdIdLoByteHiNibble_1: int;
  var {:scalar} bReturnValue_27: int;
  var {:scalar} ucProdIdHiByteLoNibble_1: int;
  var {:scalar} Tmp_892: int;
  var {:scalar} Tmp_893: int;
  var {:scalar} Tmp_897: int;
  var {:scalar} Tmp_898: int;
  var {:scalar} ucProdIdHiByteHiNibble_1: int;
  var {:pointer} CurrentPort_7: int;
  var {:scalar} Tmp_903: int;
  var {:scalar} ucProdIdLoByteLoNibble_1: int;
  var {:scalar} usProdId_1: int;
  var {:scalar} status_35: int;
  var {:scalar} value_4: int;
  var {:scalar} newvalue_3: int;
  var {:pointer} DeviceExtension: int;
  var {:scalar} ulDaisyIndex_3: int;

  anon0:
    DeviceExtension := actual_DeviceExtension;
    ulDaisyIndex_3 := actual_ulDaisyIndex_3;
    bReturnValue_27 := 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc CurrentPort_7;
    call {:si_unique_call 1456} value_4 := corral_nondet();
    Tmp_898 := BAND(value_4, BNOT(8));
    newvalue_3 := BOR(Tmp_898, 4);
    newvalue_3 := BAND(newvalue_3, BNOT(32));
    i_23 := 0;
    goto L39;

  L39:
    call {:si_unique_call 1457} i_23, Tmp_892 := PptCheckIfStlProductId_loop_L39(i_23, Tmp_892);
    goto L39_last;

  L39_last:
    assume {:CounterLoop 4} {:Counter "i_23"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 4 > i_23;
    Tmp_892 := i_23;
    i_23 := i_23 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} i_23 >= 4;
    call {:si_unique_call 1458} status_35 := corral_nondet();
    Tmp_893 := BAND(status_35, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_893 == 184;
    call {:si_unique_call 1459} status_35 := corral_nondet();
    Tmp_903 := BAND(status_35, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Tmp_903 == 24;
    call {:si_unique_call 1460} status_35 := corral_nondet();
    Tmp_897 := BAND(status_35, BOR(16, 32));
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_897 == 48;
    call {:si_unique_call 1461} ucProdIdLoByteHiNibble_1 := corral_nondet();
    ucProdIdLoByteHiNibble_1 := BAND(ucProdIdLoByteHiNibble_1, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 1462} ucProdIdLoByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1463} ucProdIdLoByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1464} ucProdIdHiByteHiNibble_1 := corral_nondet();
    ucProdIdHiByteHiNibble_1 := BAND(ucProdIdHiByteHiNibble_1, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 1465} ucProdIdHiByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1466} ucProdIdHiByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1467} usProdId_1 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 43775 == usProdId_1;
    goto L202;

  L202:
    bReturnValue_27 := 1;
    goto L203;

  L203:
    goto L54;

  L54:
    Tmp_889 := bReturnValue_27;
    return;

  anon18_Then:
    assume {:partition} 43775 != usProdId_1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 43263 != usProdId_1;
    goto L203;

  anon14_Then:
    assume {:partition} 43263 == usProdId_1;
    goto L202;

  anon17_Then:
    assume {:partition} Tmp_897 != 48;
    goto L54;

  anon16_Then:
    assume {:partition} Tmp_903 != 24;
    goto L54;

  anon15_Then:
    assume {:partition} Tmp_893 != 184;
    goto L54;
}



procedure {:origName "_sdv_init44"} _sdv_init44();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init44"} _sdv_init44()
{
  var vslice_dummy_var_294: int;

  anon0:
    call {:si_unique_call 1468} vslice_dummy_var_294 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptInitiate1284_3"} PptInitiate1284_3(actual_Extension_48: int) returns (Tmp_916: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptInitiate1284_3"} PptInitiate1284_3(actual_Extension_48: int) returns (Tmp_916: int)
{
  var {:scalar} loopCount: int;
  var {:scalar} maxTries_1: int;
  var {:scalar} deviceCount2: int;
  var {:scalar} deviceCount1: int;
  var {:pointer} Extension_48: int;

  anon0:
    Extension_48 := actual_Extension_48;
    deviceCount1 := 0;
    deviceCount2 := 0;
    loopCount := 0;
    maxTries_1 := 3;
    goto L35;

  L35:
    call {:si_unique_call 1469} loopCount, deviceCount2, deviceCount1 := PptInitiate1284_3_loop_L35(loopCount, maxTries_1, deviceCount2, deviceCount1, Extension_48);
    goto L35_last;

  L35_last:
    call {:si_unique_call 1470} deviceCount1 := Ppt1284_3AssignAddress(Extension_48);
    call {:si_unique_call 1471} deviceCount2 := Ppt1284_3AssignAddress(Extension_48);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} deviceCount1 != deviceCount2;
    loopCount := loopCount + 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} maxTries_1 > loopCount;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} loopCount >= maxTries_1;
    goto L28;

  L28:
    Tmp_916 := deviceCount2;
    return;

  anon5_Then:
    assume {:partition} deviceCount1 == deviceCount2;
    goto L28;
}



procedure {:origName "PptDeselectDevice"} PptDeselectDevice(actual_Context_9: int, actual_DeselectCommand: int) returns (Tmp_918: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_918 == -1073741811 || Tmp_918 == 0 || Tmp_918 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDeselectDevice"} PptDeselectDevice(actual_Context_9: int, actual_DeselectCommand: int) returns (Tmp_918: int)
{
  var {:scalar} i_24: int;
  var {:scalar} success_1: int;
  var {:scalar} Status_5: int;
  var {:pointer} Command_1: int;
  var {:pointer} fdx_10: int;
  var {:scalar} DeviceID_1: int;
  var {:pointer} Context_9: int;
  var {:pointer} DeselectCommand: int;
  var vslice_dummy_var_3246: int;

  anon0:
    Context_9 := actual_Context_9;
    DeselectCommand := actual_DeselectCommand;
    Status_5 := 0;
    fdx_10 := Context_9;
    Command_1 := DeselectCommand;
    success_1 := 0;
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L15;

  L15:
    call {:si_unique_call 1472} Tmp_918 := PptDeselectLegacyZip#1(Context_9, DeselectCommand);
    goto L1;

  L1:
    return;

  anon32_Then:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    havoc DeviceID_1;
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L22;

  L22:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L24;

  L24:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L28;

  L28:
    Status_5 := 0;
    goto L29;

  L29:
    Tmp_918 := Status_5;
    goto L1;

  anon27_Then:
    call {:si_unique_call 1473} PptFreePort#1(fdx_10);
    goto L28;

  anon25_Then:
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    i_24 := 0;
    goto L31;

  L31:
    call {:si_unique_call 1474} i_24, success_1 := PptDeselectDevice_loop_L31(i_24, success_1, fdx_10);
    goto L31_last;

  L31_last:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} PptDot3Retries > i_24;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} success_1 == 0;
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    havoc vslice_dummy_var_3246;
    call {:si_unique_call 1475} success_1 := PptSend1284_3Command(vslice_dummy_var_3246, 48);
    i_24 := i_24 + 1;
    goto anon30_Else_dummy;

  anon30_Else_dummy:
    assume false;
    return;

  anon30_Then:
    assume {:partition} success_1 != 0;
    goto L32;

  L32:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} success_1 != 0;
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto L47;

  L47:
    Status_5 := 0;
    goto L29;

  anon31_Then:
    call {:si_unique_call 1476} PptFreePort#1(fdx_10);
    goto L47;

  anon29_Then:
    assume {:partition} success_1 == 0;
    Status_5 := -1073741823;
    goto L29;

  anon28_Then:
    assume {:partition} i_24 >= PptDot3Retries;
    goto L32;

  anon26_Then:
    goto L24;

  anon33_Then:
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    Status_5 := -1073741811;
    goto L29;

  anon24_Then:
    goto L22;

  anon23_Then:
    goto L15;
}



procedure {:origName "PptSend1284_3Command"} PptSend1284_3Command(actual_CurrentPort_8: int, actual_Command_2: int) returns (Tmp_920: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_920 == 1 || Tmp_920 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptSend1284_3Command"} PptSend1284_3Command(actual_CurrentPort_8: int, actual_Command_2: int) returns (Tmp_920: int)
{
  var {:scalar} i_25: int;
  var {:scalar} Tmp_921: int;
  var {:scalar} Tmp_923: int;
  var {:scalar} success_2: int;
  var {:pointer} Tmp_924: int;
  var {:scalar} Tmp_925: int;
  var {:scalar} ii_1: int;
  var {:scalar} Tmp_926: int;
  var {:scalar} Tmp_928: int;
  var {:scalar} Tmp_929: int;
  var {:scalar} sdv_665: int;
  var {:scalar} sdv_666: int;
  var {:scalar} sdv_667: int;
  var {:scalar} sdv_668: int;
  var {:scalar} Tmp_933: int;
  var {:scalar} Tmp_934: int;
  var {:scalar} sdv_669: int;
  var {:scalar} sdv_670: int;
  var {:scalar} sdv_671: int;
  var {:scalar} test: int;
  var {:pointer} Tmp_939: int;
  var {:scalar} sdv_672: int;
  var {:scalar} Tmp_941: int;
  var {:scalar} value_5: int;
  var {:scalar} newvalue_4: int;
  var {:scalar} Tmp_944: int;
  var {:pointer} Tmp_945: int;
  var {:pointer} CurrentPort_8: int;
  var {:scalar} Command_2: int;

  anon0:
    CurrentPort_8 := actual_CurrentPort_8;
    Command_2 := actual_Command_2;
    success_2 := 0;
    test := BAND(Command_2, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    call {:si_unique_call 1477} value_5 := corral_nondet();
    Tmp_921 := BAND(value_5, BNOT(8));
    newvalue_4 := BOR(Tmp_921, 4);
    newvalue_4 := BAND(newvalue_4, BNOT(32));
    i_25 := 0;
    goto L35;

  L35:
    call {:si_unique_call 1478} i_25, Tmp_929 := PptSend1284_3Command_loop_L35(i_25, Tmp_929);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_25"} true;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 4 > i_25;
    Tmp_929 := i_25;
    i_25 := i_25 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    assume {:partition} i_25 >= 4;
    call {:si_unique_call 1479} sdv_668 := corral_nondet();
    Tmp_926 := BAND(sdv_668, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Tmp_926 == 184;
    Tmp_941 := 1;
    goto L52;

  L52:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Tmp_941 != 0;
    call {:si_unique_call 1480} sdv_669 := corral_nondet();
    Tmp_925 := BAND(sdv_669, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_925 == 24;
    Tmp_928 := 1;
    goto L71;

  L71:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Tmp_928 != 0;
    call {:si_unique_call 1481} sdv_671 := corral_nondet();
    Tmp_933 := BAND(sdv_671, BOR(16, 32));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Tmp_933 == 48;
    Tmp_934 := 1;
    goto L87;

  L87:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Tmp_934 != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} test != 48;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} test != 224;
    success_2 := 1;
    goto L124;

  L124:
    goto L53;

  L53:
    Tmp_920 := success_2;
    return;

  anon34_Then:
    assume {:partition} test == 224;
    ii_1 := 25000;
    goto L114;

  L114:
    call {:si_unique_call 1482} Tmp_923, ii_1, sdv_670 := PptSend1284_3Command_loop_L114(Tmp_923, ii_1, sdv_670);
    goto L114_last;

  L114_last:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} ii_1 <= 0;
    goto L124;

  anon32_Then:
    assume {:partition} 0 < ii_1;
    call {:si_unique_call 1483} sdv_670 := corral_nondet();
    Tmp_923 := BAND(sdv_670, 8);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Tmp_923 == 8;
    success_2 := 1;
    goto L124;

  anon39_Then:
    assume {:partition} Tmp_923 != 8;
    ii_1 := ii_1 - 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    assume false;
    return;

  anon31_Then:
    assume {:partition} test == 48;
    ii_1 := 25000;
    goto L135;

  L135:
    call {:si_unique_call 1484} ii_1, sdv_665, Tmp_944 := PptSend1284_3Command_loop_L135(ii_1, sdv_665, Tmp_944);
    goto L135_last;

  L135_last:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} ii_1 > 0;
    call {:si_unique_call 1485} sdv_665 := corral_nondet();
    Tmp_944 := BAND(sdv_665, 8);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Tmp_944 != 8;
    success_2 := 1;
    goto L124;

  anon38_Then:
    assume {:partition} Tmp_944 == 8;
    ii_1 := ii_1 - 1;
    goto anon38_Then_dummy;

  anon38_Then_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} 0 >= ii_1;
    goto L124;

  anon30_Then:
    assume {:partition} Tmp_934 == 0;
    goto L53;

  anon37_Then:
    assume {:partition} Tmp_933 != 48;
    Tmp_945 := CurrentPort_8;
    call {:si_unique_call 1486} sdv_672 := CheckPort(Tmp_945, 48, 48, 5);
    Tmp_934 := sdv_672;
    goto L87;

  anon29_Then:
    assume {:partition} Tmp_928 == 0;
    goto L53;

  anon36_Then:
    assume {:partition} Tmp_925 != 24;
    Tmp_924 := CurrentPort_8;
    call {:si_unique_call 1487} sdv_667 := CheckPort(Tmp_924, 184, 24, 5);
    Tmp_928 := sdv_667;
    goto L71;

  anon28_Then:
    assume {:partition} Tmp_941 == 0;
    goto L53;

  anon35_Then:
    assume {:partition} Tmp_926 != 184;
    Tmp_939 := CurrentPort_8;
    call {:si_unique_call 1488} sdv_666 := CheckPort(Tmp_939, 184, 184, 5);
    Tmp_941 := sdv_666;
    goto L52;
}



procedure {:origName "Ppt1284_3AssignAddress"} Ppt1284_3AssignAddress(actual_DeviceExtension_1: int) returns (Tmp_946: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "Ppt1284_3AssignAddress"} Ppt1284_3AssignAddress(actual_DeviceExtension_1: int) returns (Tmp_946: int)
{
  var {:scalar} i_26: int;
  var {:scalar} Tmp_947: int;
  var {:scalar} number: int;
  var {:scalar} bStlNon1284_1: int;
  var {:scalar} bStlNon1284_2: int;
  var {:scalar} Tmp_950: int;
  var {:scalar} Tmp_952: int;
  var {:scalar} Tmp_954: int;
  var {:scalar} Tmp_955: int;
  var {:scalar} Tmp_956: int;
  var {:pointer} CurrentPort_9: int;
  var {:scalar} sdv_675: int;
  var {:scalar} sdv_678: int;
  var {:scalar} Tmp_958: int;
  var {:scalar} idx_5: int;
  var {:scalar} sdv_680: int;
  var {:scalar} status_36: int;
  var {:scalar} lastdevice: int;
  var {:scalar} newvalue_5: int;
  var {:scalar} value_6: int;
  var {:pointer} DeviceExtension_1: int;

  anon0:
    DeviceExtension_1 := actual_DeviceExtension_1;
    number := 0;
    lastdevice := 0;
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    havoc CurrentPort_9;
    call {:si_unique_call 1489} value_6 := corral_nondet();
    Tmp_950 := BAND(value_6, BNOT(8));
    newvalue_5 := BOR(Tmp_950, 4);
    newvalue_5 := BAND(newvalue_5, BNOT(32));
    i_26 := 0;
    goto L35;

  L35:
    call {:si_unique_call 1490} i_26, Tmp_955 := Ppt1284_3AssignAddress_loop_L35(i_26, Tmp_955);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_26"} true;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 4 > i_26;
    Tmp_955 := i_26;
    i_26 := i_26 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    assume {:partition} i_26 >= 4;
    call {:si_unique_call 1491} status_36 := corral_nondet();
    Tmp_954 := BAND(status_36, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Tmp_954 == 184;
    call {:si_unique_call 1492} status_36 := corral_nondet();
    Tmp_958 := BAND(status_36, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Tmp_958 == 24;
    call {:si_unique_call 1493} status_36 := corral_nondet();
    Tmp_947 := BAND(status_36, BOR(16, 32));
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Tmp_947 == 48;
    goto L82;

  L82:
    call {:si_unique_call 1494} number, sdv_678, lastdevice := Ppt1284_3AssignAddress_loop_L82(number, sdv_678, lastdevice, newvalue_5);
    goto L82_last;

  L82_last:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 4 > number;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} lastdevice == 0;
    number := number + 1;
    call {:si_unique_call 1495} sdv_678 := corral_nondet();
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(sdv_678, 128) != 0;
    goto L97;

  L97:
    goto L97_dummy;

  L97_dummy:
    assume false;
    return;

  anon30_Then:
    assume {:partition} BAND(sdv_678, 128) == 0;
    lastdevice := 1;
    goto L97;

  anon29_Then:
    assume {:partition} lastdevice != 0;
    goto L83;

  L83:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} number != 0;
    call {:si_unique_call 1496} bStlNon1284_2 := PptCheckIfNon1284_3Present(DeviceExtension_1);
    bStlNon1284_1 := 0;
    idx_5 := 0;
    goto L127;

  L127:
    call {:si_unique_call 1497} bStlNon1284_1, Tmp_952, Tmp_956, sdv_675, idx_5, sdv_680 := Ppt1284_3AssignAddress_loop_L127(number, bStlNon1284_1, bStlNon1284_2, Tmp_952, Tmp_956, sdv_675, idx_5, sdv_680, DeviceExtension_1);
    goto L127_last;

  L127_last:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} number > idx_5;
    Tmp_956 := idx_5;
    call {:si_unique_call 1498} sdv_680 := PptCheckIfStl1284_3(DeviceExtension_1, Tmp_956, bStlNon1284_2);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 1 == sdv_680;
    goto L136;

  L136:
    idx_5 := idx_5 + 1;
    goto L136_dummy;

  L136_dummy:
    assume false;
    return;

  anon34_Then:
    assume {:partition} 1 != sdv_680;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} 1 == bStlNon1284_2;
    Tmp_952 := idx_5;
    call {:si_unique_call 1499} sdv_675 := PptCheckIfStlProductId(DeviceExtension_1, Tmp_952);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} 1 == sdv_675;
    bStlNon1284_1 := 1;
    goto L136;

  anon36_Then:
    assume {:partition} 1 != sdv_675;
    goto L128;

  L128:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 1 == bStlNon1284_1;
    number := idx_5;
    goto L50;

  L50:
    Tmp_946 := number;
    return;

  anon33_Then:
    assume {:partition} 1 != bStlNon1284_1;
    goto L50;

  anon35_Then:
    assume {:partition} 1 != bStlNon1284_2;
    goto L128;

  anon32_Then:
    assume {:partition} idx_5 >= number;
    goto L128;

  anon31_Then:
    assume {:partition} number == 0;
    goto L50;

  anon28_Then:
    assume {:partition} number >= 4;
    goto L83;

  anon39_Then:
    assume {:partition} Tmp_947 != 48;
    goto L50;

  anon38_Then:
    assume {:partition} Tmp_958 != 24;
    goto L50;

  anon37_Then:
    assume {:partition} Tmp_954 != 184;
    goto L50;
}



procedure {:origName "PptCheckIfNon1284_3Present"} PptCheckIfNon1284_3Present(actual_Extension_49: int) returns (Tmp_963: int);
  free ensures {:va_keep} Tmp_963 == 1 || Tmp_963 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptCheckIfNon1284_3Present"} PptCheckIfNon1284_3Present(actual_Extension_49: int) returns (Tmp_963: int)
{
  var {:scalar} i_27: int;
  var {:scalar} ucAckStatus_1: int;
  var {:scalar} Tmp_966: int;
  var {:scalar} bReturnValue_28: int;
  var {:scalar} Tmp_967: int;
  var {:pointer} CurrentPort_10: int;
  var {:scalar} Tmp_969: int;
  var {:scalar} Tmp_970: int;
  var {:scalar} Tmp_971: int;
  var {:scalar} Tmp_972: int;
  var {:scalar} status_37: int;
  var {:scalar} value_7: int;
  var {:scalar} newvalue_6: int;
  var {:pointer} Extension_49: int;

  anon0:
    Extension_49 := actual_Extension_49;
    bReturnValue_28 := 0;
    assume {:nonnull} Extension_49 != 0;
    assume Extension_49 > 0;
    havoc CurrentPort_10;
    call {:si_unique_call 1500} value_7 := corral_nondet();
    Tmp_970 := BAND(value_7, BNOT(8));
    newvalue_6 := BOR(Tmp_970, 4);
    newvalue_6 := BAND(newvalue_6, BNOT(32));
    i_27 := 0;
    goto L33;

  L33:
    call {:si_unique_call 1501} i_27, Tmp_971 := PptCheckIfNon1284_3Present_loop_L33(i_27, Tmp_971);
    goto L33_last;

  L33_last:
    assume {:CounterLoop 4} {:Counter "i_27"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 4 > i_27;
    Tmp_971 := i_27;
    i_27 := i_27 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} i_27 >= 4;
    call {:si_unique_call 1502} status_37 := corral_nondet();
    Tmp_967 := BAND(status_37, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_967 == 184;
    ucAckStatus_1 := BAND(status_37, 64);
    call {:si_unique_call 1503} status_37 := corral_nondet();
    Tmp_966 := BAND(status_37, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_966 == 24;
    Tmp_969 := BAND(status_37, 64);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} ucAckStatus_1 != Tmp_969;
    ucAckStatus_1 := BAND(status_37, 64);
    call {:si_unique_call 1504} status_37 := corral_nondet();
    Tmp_972 := BAND(status_37, BOR(16, 32));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_972 == 48;
    bReturnValue_28 := 1;
    goto L67;

  L67:
    goto L48;

  L48:
    Tmp_963 := bReturnValue_28;
    return;

  anon15_Then:
    assume {:partition} Tmp_972 != 48;
    goto L67;

  anon14_Then:
    assume {:partition} ucAckStatus_1 == Tmp_969;
    goto L67;

  anon13_Then:
    assume {:partition} Tmp_966 != 24;
    goto L48;

  anon12_Then:
    assume {:partition} Tmp_967 != 184;
    goto L48;
}



procedure {:origName "PptCheckIfStl1284_3"} PptCheckIfStl1284_3(actual_DeviceExtension_2: int, actual_ulDaisyIndex_4: int, actual_bNoStrobe_1: int) returns (Tmp_976: int);
  free ensures {:va_keep} Tmp_976 == 0 || Tmp_976 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptCheckIfStl1284_3"} PptCheckIfStl1284_3(actual_DeviceExtension_2: int, actual_ulDaisyIndex_4: int, actual_bNoStrobe_1: int) returns (Tmp_976: int)
{
  var {:scalar} i_28: int;
  var {:scalar} Tmp_977: int;
  var {:scalar} bReturnValue_29: int;
  var {:scalar} Tmp_985: int;
  var {:scalar} Tmp_986: int;
  var {:scalar} Tmp_987: int;
  var {:pointer} CurrentPort_11: int;
  var {:scalar} Tmp_988: int;
  var {:scalar} ucReadPattern_1: int;
  var {:scalar} status_38: int;
  var {:scalar} ucReadValue_1: int;
  var {:scalar} newvalue_7: int;
  var {:scalar} value_8: int;
  var {:scalar} ucExpectedPattern_1: int;
  var {:pointer} DeviceExtension_2: int;
  var {:scalar} ulDaisyIndex_4: int;
  var {:scalar} bNoStrobe_1: int;

  anon0:
    DeviceExtension_2 := actual_DeviceExtension_2;
    ulDaisyIndex_4 := actual_ulDaisyIndex_4;
    bNoStrobe_1 := actual_bNoStrobe_1;
    bReturnValue_29 := 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc CurrentPort_11;
    call {:si_unique_call 1505} value_8 := corral_nondet();
    Tmp_977 := BAND(value_8, BNOT(8));
    newvalue_7 := BOR(Tmp_977, 4);
    newvalue_7 := BAND(newvalue_7, BNOT(32));
    i_28 := 0;
    goto L35;

  L35:
    call {:si_unique_call 1506} i_28, Tmp_988 := PptCheckIfStl1284_3_loop_L35(i_28, Tmp_988);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_28"} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4 > i_28;
    Tmp_988 := i_28;
    i_28 := i_28 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} i_28 >= 4;
    call {:si_unique_call 1507} status_38 := corral_nondet();
    Tmp_986 := BAND(status_38, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Tmp_986 == 184;
    call {:si_unique_call 1508} status_38 := corral_nondet();
    Tmp_985 := BAND(status_38, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_985 == 24;
    call {:si_unique_call 1509} status_38 := corral_nondet();
    Tmp_987 := BAND(status_38, BOR(16, 32));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_987 == 48;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ulDaisyIndex_4 != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} bNoStrobe_1 == 0;
    goto L90;

  L90:
    ucExpectedPattern_1 := 240;
    bReturnValue_29 := 1;
    goto L111;

  L111:
    call {:si_unique_call 1510} ucReadPattern_1, ucReadValue_1, ucExpectedPattern_1 := PptCheckIfStl1284_3_loop_L111(ucReadPattern_1, ucReadValue_1, ucExpectedPattern_1, ulDaisyIndex_4);
    goto L111_last;

  L111_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} ucExpectedPattern_1 != 0;
    call {:si_unique_call 1511} ucReadValue_1 := corral_nondet();
    call {:si_unique_call 1512} ucReadPattern_1 := corral_nondet();
    ucReadPattern_1 := BOR(ucReadPattern_1, BAND(ucReadValue_1, 128));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ucReadPattern_1 != ucExpectedPattern_1;
    bReturnValue_29 := 0;
    goto L112;

  L112:
    goto L50;

  L50:
    Tmp_976 := bReturnValue_29;
    return;

  anon24_Then:
    assume {:partition} ucReadPattern_1 == ucExpectedPattern_1;
    ucExpectedPattern_1 := ucExpectedPattern_1 - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} ucExpectedPattern_1 == 0;
    goto L112;

  anon19_Then:
    assume {:partition} bNoStrobe_1 != 0;
    goto L90;

  anon18_Then:
    assume {:partition} ulDaisyIndex_4 == 0;
    goto L90;

  anon23_Then:
    assume {:partition} Tmp_987 != 48;
    goto L50;

  anon22_Then:
    assume {:partition} Tmp_985 != 24;
    goto L50;

  anon21_Then:
    assume {:partition} Tmp_986 != 184;
    goto L50;
}



procedure {:origName "_sdv_init47"} _sdv_init47();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init47"} _sdv_init47()
{
  var vslice_dummy_var_295: int;

  anon0:
    call {:si_unique_call 1513} vslice_dummy_var_295 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "DriverEntry"} DriverEntry(actual_DriverObject_3: int, actual_RegPath: int) returns (Tmp_996: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4;
  free ensures {:va_keep} Tmp_996 == 0 || Tmp_996 == -1073741801;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "DriverEntry"} DriverEntry(actual_DriverObject_3: int, actual_RegPath: int) returns (Tmp_996: int)
{
  var {:scalar} fiveSeconds: int;
  var {:pointer} Tmp_997: int;
  var {:pointer} Tmp_998: int;
  var {:pointer} Tmp_999: int;
  var {:pointer} Tmp_1000: int;
  var {:scalar} halfSecond: int;
  var {:scalar} localStatus: int;
  var {:scalar} size_1: int;
  var {:pointer} Tmp_1001: int;
  var {:pointer} sdv_690: int;
  var {:dopa} {:scalar} requestedTimeout: int;
  var {:pointer} Tmp_1002: int;
  var {:pointer} Tmp_1003: int;
  var {:pointer} Tmp_1005: int;
  var {:pointer} Tmp_1006: int;
  var {:pointer} Tmp_1007: int;
  var {:pointer} sdv_693: int;
  var {:pointer} Tmp_1009: int;
  var {:pointer} Tmp_1010: int;
  var {:pointer} Tmp_1011: int;
  var {:pointer} Tmp_1012: int;
  var {:pointer} Tmp_1013: int;
  var {:pointer} Tmp_1014: int;
  var {:scalar} callbackName: int;
  var {:pointer} Tmp_1015: int;
  var {:pointer} Tmp_1016: int;
  var {:pointer} Tmp_1017: int;
  var {:pointer} Tmp_1018: int;
  var {:pointer} Tmp_1019: int;
  var {:pointer} Tmp_1020: int;
  var {:pointer} Tmp_1021: int;
  var {:pointer} Tmp_1022: int;
  var {:pointer} Tmp_1023: int;
  var {:pointer} Tmp_1024: int;
  var {:pointer} Tmp_1025: int;
  var {:pointer} Tmp_1026: int;
  var {:pointer} Tmp_1027: int;
  var {:pointer} Tmp_1028: int;
  var {:pointer} Tmp_1029: int;
  var {:pointer} Tmp_1030: int;
  var {:pointer} Tmp_1031: int;
  var {:pointer} Tmp_1032: int;
  var {:pointer} Tmp_1033: int;
  var {:pointer} Tmp_1034: int;
  var {:pointer} Tmp_1035: int;
  var {:pointer} Tmp_1036: int;
  var {:pointer} Tmp_1037: int;
  var {:pointer} Tmp_1038: int;
  var {:pointer} Tmp_1039: int;
  var {:pointer} Tmp_1040: int;
  var {:scalar} Tmp_1041: int;
  var {:scalar} Tmp_1042: int;
  var {:pointer} DriverObject_3: int;
  var {:pointer} RegPath: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;

  anon0:
    call {:si_unique_call 1514} requestedTimeout := __HAVOC_malloc(4);
    call {:si_unique_call 1515} callbackName := __HAVOC_malloc(12);
    call {:si_unique_call 1516} vslice_dummy_var_296 := __HAVOC_malloc(24);
    DriverObject_3 := actual_DriverObject_3;
    RegPath := actual_RegPath;
    call {:si_unique_call 1517} Tmp_997 := __HAVOC_malloc(76);
    call {:si_unique_call 1518} Tmp_998 := __HAVOC_malloc(112);
    call {:si_unique_call 1519} Tmp_999 := __HAVOC_malloc(76);
    call {:si_unique_call 1520} Tmp_1000 := __HAVOC_malloc(68);
    call {:si_unique_call 1521} Tmp_1001 := __HAVOC_malloc(44);
    call {:si_unique_call 1522} Tmp_1002 := __HAVOC_malloc(76);
    call {:si_unique_call 1523} Tmp_1003 := __HAVOC_malloc(52);
    call {:si_unique_call 1524} Tmp_1006 := __HAVOC_malloc(112);
    call {:si_unique_call 1525} Tmp_1007 := __HAVOC_malloc(76);
    call {:si_unique_call 1526} vslice_dummy_var_297 := __HAVOC_malloc(196);
    call {:si_unique_call 1527} Tmp_1009 := __HAVOC_malloc(64);
    call {:si_unique_call 1528} Tmp_1010 := __HAVOC_malloc(76);
    call {:si_unique_call 1529} Tmp_1011 := __HAVOC_malloc(60);
    call {:si_unique_call 1530} Tmp_1012 := __HAVOC_malloc(24);
    call {:si_unique_call 1531} Tmp_1013 := __HAVOC_malloc(112);
    call {:si_unique_call 1532} Tmp_1014 := __HAVOC_malloc(72);
    call {:si_unique_call 1533} Tmp_1015 := __HAVOC_malloc(52);
    call {:si_unique_call 1534} Tmp_1016 := __HAVOC_malloc(76);
    call {:si_unique_call 1535} Tmp_1017 := __HAVOC_malloc(76);
    call {:si_unique_call 1536} Tmp_1018 := __HAVOC_malloc(112);
    call {:si_unique_call 1537} Tmp_1019 := __HAVOC_malloc(76);
    call {:si_unique_call 1538} Tmp_1020 := __HAVOC_malloc(76);
    call {:si_unique_call 1539} Tmp_1021 := __HAVOC_malloc(76);
    call {:si_unique_call 1540} Tmp_1022 := __HAVOC_malloc(112);
    call {:si_unique_call 1541} Tmp_1023 := __HAVOC_malloc(76);
    call {:si_unique_call 1542} Tmp_1024 := __HAVOC_malloc(76);
    call {:si_unique_call 1543} Tmp_1025 := __HAVOC_malloc(112);
    call {:si_unique_call 1544} Tmp_1026 := __HAVOC_malloc(112);
    call {:si_unique_call 1545} Tmp_1027 := __HAVOC_malloc(112);
    call {:si_unique_call 1546} Tmp_1028 := __HAVOC_malloc(76);
    call {:si_unique_call 1547} Tmp_1029 := __HAVOC_malloc(112);
    call {:si_unique_call 1548} Tmp_1030 := __HAVOC_malloc(60);
    call {:si_unique_call 1549} Tmp_1031 := __HAVOC_malloc(24);
    call {:si_unique_call 1550} Tmp_1032 := __HAVOC_malloc(76);
    call {:si_unique_call 1551} Tmp_1033 := __HAVOC_malloc(76);
    call {:si_unique_call 1552} Tmp_1034 := __HAVOC_malloc(84);
    call {:si_unique_call 1553} Tmp_1035 := __HAVOC_malloc(76);
    call {:si_unique_call 1554} Tmp_1036 := __HAVOC_malloc(76);
    call {:si_unique_call 1555} Tmp_1037 := __HAVOC_malloc(76);
    call {:si_unique_call 1556} Tmp_1038 := __HAVOC_malloc(112);
    call {:si_unique_call 1557} Tmp_1039 := __HAVOC_malloc(112);
    call {:si_unique_call 1558} Tmp_1040 := __HAVOC_malloc(112);
    assume {:nonnull} RegPath != 0;
    assume RegPath > 0;
    havoc size_1;
    Tmp_1041 := size_1;
    call {:si_unique_call 1559} sdv_693 := ExAllocatePoolWithTag(257, Tmp_1041, -797810352);
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath)] := sdv_693;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath)] != 0;
    Tmp_1042 := INTDIV(size_1, 2) - 1;
    assume {:nonnull} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath)] != 0;
    assume Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath)] > 0;
    Mem_T.INT4[Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath)] + Tmp_1042 * 4] := 0;
    Mem_T.INT4[SppNoRaiseIrql] := 0;
    Tmp_1019 := strConst__li2bpl16;
    Tmp_1011 := strConst__li2bpl40;
    call {:si_unique_call 1560} vslice_dummy_var_298 := PptRegGetDword(1, Tmp_1019, Tmp_1011, SppNoRaiseIrql);
    Mem_T.INT4[DefaultModes] := 0;
    Tmp_1036 := strConst__li2bpl16;
    Tmp_1003 := strConst__li2bpl41;
    call {:si_unique_call 1561} vslice_dummy_var_299 := PptRegGetDword(1, Tmp_1036, Tmp_1003, DefaultModes);
    Mem_T.INT4[Trace] := 0;
    Tmp_1023 := strConst__li2bpl16;
    Tmp_1031 := strConst__li2bpl42;
    call {:si_unique_call 1562} vslice_dummy_var_300 := PptRegGetDword(1, Tmp_1023, Tmp_1031, Trace);
    Mem_T.INT4[Break] := 0;
    Tmp_1016 := strConst__li2bpl16;
    Tmp_1012 := strConst__li2bpl43;
    call {:si_unique_call 1563} vslice_dummy_var_301 := PptRegGetDword(1, Tmp_1016, Tmp_1012, Break);
    Mem_T.INT4[DbgMaskFdo] := 0;
    Tmp_1021 := strConst__li2bpl16;
    Tmp_1001 := strConst__li2bpl44;
    call {:si_unique_call 1564} vslice_dummy_var_302 := PptRegGetDword(1, Tmp_1021, Tmp_1001, DbgMaskFdo);
    Mem_T.INT4[DbgMaskRawPort] := 0;
    Tmp_1024 := strConst__li2bpl16;
    Tmp_1030 := strConst__li2bpl45;
    call {:si_unique_call 1565} vslice_dummy_var_303 := PptRegGetDword(1, Tmp_1024, Tmp_1030, DbgMaskRawPort);
    Mem_T.INT4[DbgMaskDaisyChain0] := 0;
    Tmp_1017 := strConst__li2bpl16;
    Tmp_1033 := strConst__li2bpl46;
    call {:si_unique_call 1566} vslice_dummy_var_304 := PptRegGetDword(1, Tmp_1017, Tmp_1033, DbgMaskDaisyChain0);
    Mem_T.INT4[DbgMaskDaisyChain1] := 0;
    Tmp_1007 := strConst__li2bpl16;
    Tmp_1002 := strConst__li2bpl47;
    call {:si_unique_call 1567} vslice_dummy_var_305 := PptRegGetDword(1, Tmp_1007, Tmp_1002, DbgMaskDaisyChain1);
    Mem_T.INT4[DbgMaskEndOfChain] := 0;
    Tmp_997 := strConst__li2bpl16;
    Tmp_1014 := strConst__li2bpl48;
    call {:si_unique_call 1568} vslice_dummy_var_306 := PptRegGetDword(1, Tmp_997, Tmp_1014, DbgMaskEndOfChain);
    Mem_T.INT4[DbgMaskLegacyZip] := 0;
    Tmp_1032 := strConst__li2bpl16;
    Tmp_1000 := strConst__li2bpl49;
    call {:si_unique_call 1569} vslice_dummy_var_307 := PptRegGetDword(1, Tmp_1032, Tmp_1000, DbgMaskLegacyZip);
    Mem_T.INT4[DbgMaskNoDevice] := 0;
    Tmp_1010 := strConst__li2bpl16;
    Tmp_1009 := strConst__li2bpl50;
    call {:si_unique_call 1570} vslice_dummy_var_308 := PptRegGetDword(1, Tmp_1010, Tmp_1009, DbgMaskNoDevice);
    Mem_T.INT4[AllowAsserts] := 0;
    Tmp_1037 := strConst__li2bpl16;
    Tmp_1015 := strConst__li2bpl51;
    call {:si_unique_call 1571} vslice_dummy_var_309 := PptRegGetDword(1, Tmp_1037, Tmp_1015, AllowAsserts);
    Mem_T.INT4[ParEnableLegacyZip] := 0;
    Tmp_999 := strConst__li2bpl16;
    Tmp_1028 := strConst__li2bpl18;
    call {:si_unique_call 1572} vslice_dummy_var_310 := PptRegGetDword(1, Tmp_999, Tmp_1028, ParEnableLegacyZip);
    halfSecond := 500;
    fiveSeconds := 5000;
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Mem_T.INT4[requestedTimeout] := halfSecond;
    Tmp_1035 := strConst__li2bpl16;
    Tmp_1020 := strConst__li2bpl52;
    call {:si_unique_call 1573} vslice_dummy_var_311 := PptRegGetDword(1, Tmp_1035, Tmp_1020, requestedTimeout);
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} halfSecond > Mem_T.INT4[requestedTimeout];
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Mem_T.INT4[requestedTimeout] := halfSecond;
    goto L82;

  L82:
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Tmp_1034 := strConst__li2bpl53;
    call {:si_unique_call 1574} RtlInitUnicodeString(callbackName, Tmp_1034);
    call {:si_unique_call 1575} sdv_InitializeObjectAttributes(0, 0, 64, 0, 0);
    call {:si_unique_call 1576} localStatus := ExCreateCallback(0, 0, 0, 1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} localStatus != 0;
    goto L100;

  L100:
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1022;
    assume {:nonnull} Tmp_1022 != 0;
    assume Tmp_1022 > 0;
    Mem_T.INT4[Tmp_1022] := li2bplFunctionConstant859;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1018;
    assume {:nonnull} Tmp_1018 != 0;
    assume Tmp_1018 > 0;
    Mem_T.INT4[Tmp_1018 + 2 * 4] := li2bplFunctionConstant860;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1026;
    assume {:nonnull} Tmp_1026 != 0;
    assume Tmp_1026 > 0;
    Mem_T.INT4[Tmp_1026 + 18 * 4] := li2bplFunctionConstant861;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1027;
    assume {:nonnull} Tmp_1027 != 0;
    assume Tmp_1027 > 0;
    Mem_T.INT4[Tmp_1027 + 3 * 4] := li2bplFunctionConstant862;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1038;
    assume {:nonnull} Tmp_1038 != 0;
    assume Tmp_1038 > 0;
    Mem_T.INT4[Tmp_1038 + 4 * 4] := li2bplFunctionConstant863;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_998;
    assume {:nonnull} Tmp_998 != 0;
    assume Tmp_998 > 0;
    Mem_T.INT4[Tmp_998 + 14 * 4] := li2bplFunctionConstant864;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1006;
    assume {:nonnull} Tmp_1006 != 0;
    assume Tmp_1006 > 0;
    Mem_T.INT4[Tmp_1006 + 15 * 4] := li2bplFunctionConstant865;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1025;
    assume {:nonnull} Tmp_1025 != 0;
    assume Tmp_1025 > 0;
    Mem_T.INT4[Tmp_1025 + 5 * 4] := li2bplFunctionConstant866;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1029;
    assume {:nonnull} Tmp_1029 != 0;
    assume Tmp_1029 > 0;
    Mem_T.INT4[Tmp_1029 + 6 * 4] := li2bplFunctionConstant867;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1040;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    Mem_T.INT4[Tmp_1040 + 27 * 4] := li2bplFunctionConstant868;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1013;
    assume {:nonnull} Tmp_1013 != 0;
    assume Tmp_1013 > 0;
    Mem_T.INT4[Tmp_1013 + 22 * 4] := li2bplFunctionConstant869;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1039;
    assume {:nonnull} Tmp_1039 != 0;
    assume Tmp_1039 > 0;
    Mem_T.INT4[Tmp_1039 + 23 * 4] := li2bplFunctionConstant870;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_1005;
    assume {:nonnull} Tmp_1005 != 0;
    assume Tmp_1005 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(Mem_T.INT4[Break], 1) != 0;
    call {:si_unique_call 1577} vslice_dummy_var_312 := corral_nondet();
    call {:si_unique_call 1578} sdv_DbgBreakPoint();
    goto L115;

  L115:
    Tmp_996 := 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} BAND(Mem_T.INT4[Break], 1) == 0;
    goto L115;

  anon13_Then:
    assume {:partition} localStatus == 0;
    call {:si_unique_call 1579} sdv_690 := ExRegisterCallback(0, li2bplFunctionConstant770, 0);
    goto L100;

  anon11_Then:
    assume {:partition} Mem_T.INT4[requestedTimeout] >= halfSecond;
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[requestedTimeout] > fiveSeconds;
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Mem_T.INT4[requestedTimeout] := fiveSeconds;
    goto L82;

  anon12_Then:
    assume {:partition} fiveSeconds >= Mem_T.INT4[requestedTimeout];
    goto L82;

  anon14_Then:
    assume {:partition} Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath)] == 0;
    Tmp_996 := -1073741801;
    goto L1;
}



procedure {:origName "_sdv_init40"} _sdv_init40();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init40"} _sdv_init40()
{
  var vslice_dummy_var_313: int;

  anon0:
    call {:si_unique_call 1580} vslice_dummy_var_313 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptLegacyZipSetDiskMode"} PptLegacyZipSetDiskMode(actual_Controller_8: int, actual_Mode: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptLegacyZipSetDiskMode"} PptLegacyZipSetDiskMode(actual_Controller_8: int, actual_Mode: int)
{
  var {:scalar} i_29: int;
  var {:scalar} Tmp_1046: int;
  var {:scalar} Tmp_1047: int;
  var {:pointer} Controller_8: int;
  var {:scalar} Mode: int;
  var vslice_dummy_var_314: int;

  anon0:
    call {:si_unique_call 1581} vslice_dummy_var_314 := __HAVOC_malloc(4);
    Controller_8 := actual_Controller_8;
    Mode := actual_Mode;
    i_29 := 0;
    goto L5;

  L5:
    call {:si_unique_call 1582} i_29, Tmp_1046, Tmp_1047 := PptLegacyZipSetDiskMode_loop_L5(i_29, Tmp_1046, Tmp_1047, Controller_8);
    goto L5_last;

  L5_last:
    assume {:CounterLoop 3} {:Counter "i_29"} true;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 3 > i_29;
    Tmp_1047 := i_29;
    havoc Tmp_1046;
    call {:si_unique_call 1583} PptLegacyZipClockDiskModeByte(Controller_8, Tmp_1046);
    i_29 := i_29 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_29 >= 3;
    call {:si_unique_call 1584} PptLegacyZipClockDiskModeByte(Controller_8, Mode);
    return;
}



procedure {:origName "P5DeselectLegacyZip"} P5DeselectLegacyZip(actual_Controller_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5DeselectLegacyZip"} P5DeselectLegacyZip(actual_Controller_10: int)
{
  var {:scalar} i_31: int;
  var {:scalar} Tmp_1053: int;
  var {:scalar} Tmp_1055: int;
  var {:pointer} Controller_10: int;
  var vslice_dummy_var_315: int;

  anon0:
    call {:si_unique_call 1585} vslice_dummy_var_315 := __HAVOC_malloc(4);
    Controller_10 := actual_Controller_10;
    i_31 := 0;
    goto L5;

  L5:
    call {:si_unique_call 1586} i_31, Tmp_1053, Tmp_1055 := P5DeselectLegacyZip_loop_L5(i_31, Tmp_1053, Tmp_1055, Controller_10);
    goto L5_last;

  L5_last:
    assume {:CounterLoop 3} {:Counter "i_31"} true;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 3 > i_31;
    Tmp_1055 := i_31;
    havoc Tmp_1053;
    call {:si_unique_call 1587} PptLegacyZipClockPrtModeByte(Controller_10, Tmp_1053);
    i_31 := i_31 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_31 >= 3;
    call {:si_unique_call 1588} PptLegacyZipClockPrtModeByte(Controller_10, 15);
    return;
}



procedure {:origName "P5LegacyZipDetected"} P5LegacyZipDetected(actual_Controller_11: int) returns (Tmp_1057: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1057 == 1 || Tmp_1057 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5LegacyZipDetected"} P5LegacyZipDetected(actual_Controller_11: int) returns (Tmp_1057: int)
{
  var {:scalar} sdv_708: int;
  var {:scalar} foundZip: int;
  var {:pointer} Controller_11: int;

  anon0:
    Controller_11 := actual_Controller_11;
    call {:si_unique_call 1589} P5SelectLegacyZip(Controller_11);
    call {:si_unique_call 1590} sdv_708 := PptLegacyZipCheckDevice(Controller_11);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_708 != 0;
    foundZip := 1;
    goto L13;

  L13:
    call {:si_unique_call 1591} P5DeselectLegacyZip(Controller_11);
    Tmp_1057 := foundZip;
    return;

  anon3_Then:
    assume {:partition} sdv_708 == 0;
    foundZip := 0;
    goto L13;
}



procedure {:origName "PptLegacyZipClockDiskModeByte"} PptLegacyZipClockDiskModeByte(actual_Controller_12: int, actual_ModeByte: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptLegacyZipClockDiskModeByte"} PptLegacyZipClockDiskModeByte(actual_Controller_12: int, actual_ModeByte: int)
{
  var {:pointer} Controller_12: int;
  var vslice_dummy_var_316: int;

  anon0:
    call {:si_unique_call 1592} vslice_dummy_var_316 := __HAVOC_malloc(4);
    Controller_12 := actual_Controller_12;
    return;
}



procedure {:origName "P5SelectLegacyZip"} P5SelectLegacyZip(actual_Controller_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P5SelectLegacyZip"} P5SelectLegacyZip(actual_Controller_13: int)
{
  var {:pointer} Controller_13: int;
  var vslice_dummy_var_317: int;

  anon0:
    call {:si_unique_call 1593} vslice_dummy_var_317 := __HAVOC_malloc(4);
    Controller_13 := actual_Controller_13;
    call {:si_unique_call 1594} PptLegacyZipSetDiskMode(Controller_13, 143);
    return;
}



procedure {:origName "PptLegacyZipCheckDevice"} PptLegacyZipCheckDevice(actual_Controller_15: int) returns (Tmp_1069: int);
  free ensures {:va_keep} Tmp_1069 == 1 || Tmp_1069 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptLegacyZipCheckDevice"} PptLegacyZipCheckDevice(actual_Controller_15: int) returns (Tmp_1069: int)
{
  var {:scalar} Tmp_1070: int;
  var {:scalar} sdv_713: int;
  var {:scalar} Tmp_1073: int;
  var {:scalar} sdv_714: int;
  var {:pointer} Controller_15: int;

  anon0:
    Controller_15 := actual_Controller_15;
    call {:si_unique_call 1595} sdv_713 := corral_nondet();
    Tmp_1070 := BAND(sdv_713, 8);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Tmp_1070 == 8;
    call {:si_unique_call 1596} sdv_714 := corral_nondet();
    Tmp_1073 := BAND(sdv_714, 8);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_1073 != 8;
    Tmp_1069 := 1;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} Tmp_1073 == 8;
    goto L13;

  L13:
    Tmp_1069 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Tmp_1070 != 8;
    goto L13;
}



procedure {:origName "_sdv_init25"} _sdv_init25();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init25"} _sdv_init25()
{
  var vslice_dummy_var_318: int;

  anon0:
    call {:si_unique_call 1597} vslice_dummy_var_318 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptLegacyZipClockPrtModeByte"} PptLegacyZipClockPrtModeByte(actual_Controller_16: int, actual_ModeByte_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptLegacyZipClockPrtModeByte"} PptLegacyZipClockPrtModeByte(actual_Controller_16: int, actual_ModeByte_1: int)
{
  var {:pointer} Controller_16: int;
  var vslice_dummy_var_319: int;

  anon0:
    call {:si_unique_call 1598} vslice_dummy_var_319 := __HAVOC_malloc(4);
    Controller_16 := actual_Controller_16;
    return;
}



procedure {:origName "ParNibbleModeRead"} ParNibbleModeRead(actual_Pdx_6: int, actual_Buffer_1: int, actual_BufferSize_1: int, actual_BytesTransferred_1: int) returns (Tmp_1086: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1086 == -1073741435 || Tmp_1086 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParNibbleModeRead"} ParNibbleModeRead(actual_Pdx_6: int, actual_Buffer_1: int, actual_BufferSize_1: int, actual_BytesTransferred_1: int) returns (Tmp_1086: int)
{
  var {:scalar} i_32: int;
  var {:scalar} Tmp_1087: int;
  var {:scalar} Tmp_1088: int;
  var {:scalar} Tmp_1089: int;
  var {:scalar} Tmp_1090: int;
  var {:scalar} Tmp_1091: int;
  var {:scalar} sdv_715: int;
  var {:scalar} Tmp_1092: int;
  var {:scalar} sdv_716: int;
  var {:scalar} Tmp_1093: int;
  var {:scalar} dcr_5: int;
  var {:scalar} Tmp_1094: int;
  var {:scalar} Tmp_1095: int;
  var {:scalar} Tmp_1096: int;
  var {:scalar} j_1: int;
  var {:scalar} Status_7: int;
  var {:scalar} Tmp_1097: int;
  var {:scalar} sdv_718: int;
  var {:pointer} Tmp_1099: int;
  var {:pointer} Tmp_1101: int;
  var {:scalar} Tmp_1102: int;
  var {:pointer} Controller_17: int;
  var {:scalar} Tmp_1105: int;
  var {:pointer} nibble_1: int;
  var {:scalar} sdv_723: int;
  var {:scalar} sdv_724: int;
  var {:scalar} sdv_725: int;
  var {:pointer} Tmp_1108: int;
  var {:scalar} Tmp_1109: int;
  var {:scalar} sdv_726: int;
  var {:scalar} dsr_1: int;
  var {:scalar} Tmp_1112: int;
  var {:pointer} p_9: int;
  var {:scalar} Tmp_1113: int;
  var {:pointer} Pdx_6: int;
  var {:pointer} Buffer_1: int;
  var {:scalar} BufferSize_1: int;
  var {:pointer} BytesTransferred_1: int;

  anon0:
    Pdx_6 := actual_Pdx_6;
    Buffer_1 := actual_Buffer_1;
    BufferSize_1 := actual_BufferSize_1;
    BytesTransferred_1 := actual_BytesTransferred_1;
    call {:si_unique_call 1599} nibble_1 := __HAVOC_malloc(8);
    Status_7 := 0;
    p_9 := Buffer_1;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    havoc Controller_17;
    call {:si_unique_call 1600} dcr_5 := corral_nondet();
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L28;

  L28:
    i_32 := 0;
    goto L29;

  L29:
    call {:si_unique_call 1601} i_32, Tmp_1087, Tmp_1088, Tmp_1089, Tmp_1090, Tmp_1091, Tmp_1092, Tmp_1093, dcr_5, Tmp_1095, Tmp_1096, j_1, sdv_718, Tmp_1099, sdv_723, sdv_724, sdv_725, Tmp_1108, sdv_726, dsr_1, Tmp_1112, Tmp_1113 := ParNibbleModeRead_loop_L29(i_32, Tmp_1087, Tmp_1088, Tmp_1089, Tmp_1090, Tmp_1091, Tmp_1092, Tmp_1093, dcr_5, Tmp_1095, Tmp_1096, j_1, sdv_718, Tmp_1099, Controller_17, nibble_1, sdv_723, sdv_724, sdv_725, Tmp_1108, sdv_726, dsr_1, Tmp_1112, p_9, Tmp_1113, Pdx_6, BufferSize_1);
    goto L29_last;

  L29_last:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BufferSize_1 > i_32;
    j_1 := 0;
    goto L32;

  L32:
    call {:si_unique_call 1602} Tmp_1087, dcr_5, Tmp_1095, j_1, sdv_718, Tmp_1099, sdv_723, sdv_724, sdv_725, Tmp_1108, sdv_726, Tmp_1112, Tmp_1113 := ParNibbleModeRead_loop_L32(Tmp_1087, dcr_5, Tmp_1095, j_1, sdv_718, Tmp_1099, Controller_17, nibble_1, sdv_723, sdv_724, sdv_725, Tmp_1108, sdv_726, Tmp_1112, Tmp_1113, Pdx_6);
    goto L32_last;

  L32_last:
    assume {:CounterLoop 2} {:Counter "j_1"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > j_1;
    dcr_5 := BOR(dcr_5, 2);
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    call {:si_unique_call 1603} sdv_723 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(sdv_723, 64) != 0;
    Tmp_1108 := Controller_17;
    call {:si_unique_call 1604} sdv_724 := CheckPort(Tmp_1108, 64, 0, 35);
    Tmp_1095 := sdv_724;
    goto L50;

  L50:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Tmp_1095 != 0;
    call {:si_unique_call 1605} sdv_725 := corral_nondet();
    Tmp_1087 := j_1;
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    Mem_T.INT4[nibble_1 + Tmp_1087 * 4] := sdv_725;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    dcr_5 := BAND(dcr_5, BNOT(2));
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    call {:si_unique_call 1606} sdv_718 := corral_nondet();
    Tmp_1113 := BAND(sdv_718, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Tmp_1113 == 64;
    Tmp_1112 := 1;
    goto L70;

  L70:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Tmp_1112 != 0;
    j_1 := j_1 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} Tmp_1112 == 0;
    Status_7 := -1073741435;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L76;

  L76:
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L82;

  L82:
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Tmp_1086 := Status_7;
    return;

  anon43_Then:
    dcr_5 := BOR(dcr_5, 2);
    goto L82;

  anon52_Then:
    assume {:partition} Tmp_1113 != 64;
    Tmp_1099 := Controller_17;
    call {:si_unique_call 1607} sdv_726 := CheckPort(Tmp_1099, 64, 64, 35);
    Tmp_1112 := sdv_726;
    goto L70;

  anon41_Then:
    assume {:partition} Tmp_1095 == 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Status_7 := -1073741435;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L76;

  anon40_Then:
    assume {:partition} BAND(sdv_723, 64) == 0;
    Tmp_1095 := 1;
    goto L50;

  anon39_Then:
    assume {:partition} j_1 >= 2;
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    call {:si_unique_call 1608} Tmp_1090 := corral_nondet();
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble_1], 128) != 0;
    Tmp_1091 := 0;
    goto L95;

  L95:
    Tmp_1088 := i_32;
    assume {:nonnull} p_9 != 0;
    assume p_9 > 0;
    Mem_T.INT4[p_9 + Tmp_1088 * 4] := BOR(Tmp_1090, Tmp_1091);
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    call {:si_unique_call 1609} Tmp_1089 := corral_nondet();
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble_1 + 1 * 4], 128) != 0;
    Tmp_1096 := 0;
    goto L101;

  L101:
    Tmp_1093 := i_32;
    Tmp_1092 := i_32;
    assume {:nonnull} p_9 != 0;
    assume p_9 > 0;
    Mem_T.INT4[p_9 + Tmp_1093 * 4] := BOR(Mem_T.INT4[p_9 + Tmp_1092 * 4], BOR(Tmp_1089, Tmp_1096));
    call {:si_unique_call 1610} dsr_1 := corral_nondet();
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(dsr_1, 8) != 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    i_32 := i_32 + 1;
    goto L30;

  L30:
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := i_32;
    goto L76;

  anon44_Then:
    assume {:partition} BAND(dsr_1, 8) == 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    i_32 := i_32 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble_1 + 1 * 4], 128) == 0;
    Tmp_1096 := 128;
    goto L101;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble_1], 128) == 0;
    Tmp_1091 := 8;
    goto L95;

  anon38_Then:
    assume {:partition} i_32 >= BufferSize_1;
    goto L30;

  anon48_Then:
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Status_7 := -1073741435;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L76;

  anon49_Then:
    goto L27;

  L27:
    call {:si_unique_call 1611} dsr_1 := corral_nondet();
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(dsr_1, 8) != 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    call {:si_unique_call 1612} dsr_1 := corral_nondet();
    Tmp_1109 := BAND(dsr_1, BOR(16, 32));
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Tmp_1109 == 32;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L76;

  anon51_Then:
    assume {:partition} Tmp_1109 != 32;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Status_7 := -1073741435;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L76;

  anon45_Then:
    assume {:partition} BAND(dsr_1, 8) == 0;
    call {:si_unique_call 1613} dcr_5 := corral_nondet();
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Tmp_1105 := BAND(dcr_5, BOR(BOR(4, 16), 32));
    dcr_5 := BOR(Tmp_1105, 0);
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    call {:si_unique_call 1614} sdv_715 := corral_nondet();
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(sdv_715, 32) != 0;
    Tmp_1101 := Controller_17;
    call {:si_unique_call 1615} sdv_716 := CheckPort(Tmp_1101, 32, 0, 35);
    Tmp_1094 := sdv_716;
    goto L153;

  L153:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Tmp_1094 != 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L28;

  anon47_Then:
    assume {:partition} Tmp_1094 == 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Status_7 := -1073741435;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L76;

  anon46_Then:
    assume {:partition} BAND(sdv_715, 32) == 0;
    Tmp_1094 := 1;
    goto L153;

  anon37_Then:
    call {:si_unique_call 1616} dsr_1 := corral_nondet();
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Tmp_1102 := BAND(dsr_1, 8);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Tmp_1102 == 8;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    Tmp_1097 := BAND(dcr_5, BOR(BOR(BOR(2, 4), 16), 32));
    dcr_5 := BOR(Tmp_1097, 2);
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L27;

  anon50_Then:
    assume {:partition} Tmp_1102 != 8;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L28;
}



procedure {:origName "ParTerminateNibbleMode"} ParTerminateNibbleMode(actual_Pdx_7: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParTerminateNibbleMode"} ParTerminateNibbleMode(actual_Pdx_7: int)
{
  var {:pointer} Pdx_7: int;
  var vslice_dummy_var_320: int;

  anon0:
    call {:si_unique_call 1617} vslice_dummy_var_320 := __HAVOC_malloc(4);
    Pdx_7 := actual_Pdx_7;
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1618} IeeeTerminate1284Mode(Pdx_7);
    goto L1;
}



procedure {:origName "ParEnterNibbleMode"} ParEnterNibbleMode(actual_Pdx_8: int, actual_DeviceIdRequest: int) returns (Tmp_1116: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1116 == 0 || Tmp_1116 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParEnterNibbleMode"} ParEnterNibbleMode(actual_Pdx_8: int, actual_DeviceIdRequest: int) returns (Tmp_1116: int)
{
  var {:scalar} Status_8: int;
  var {:pointer} Pdx_8: int;
  var {:scalar} DeviceIdRequest: int;

  anon0:
    Pdx_8 := actual_Pdx_8;
    DeviceIdRequest := actual_DeviceIdRequest;
    Status_8 := 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto L8;

  L8:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Status_8 >= 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto L15;

  L15:
    Tmp_1116 := Status_8;
    return;

  anon8_Then:
    assume {:partition} 0 > Status_8;
    call {:si_unique_call 1619} ParTerminateNibbleMode(Pdx_8);
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto L15;

  anon9_Then:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} DeviceIdRequest != 0;
    call {:si_unique_call 1620} Status_8 := IeeeEnter1284Mode(Pdx_8, 4);
    goto L8;

  anon7_Then:
    assume {:partition} DeviceIdRequest == 0;
    call {:si_unique_call 1621} Status_8 := IeeeEnter1284Mode(Pdx_8, 0);
    goto L8;
}



procedure {:origName "_sdv_init23"} _sdv_init23();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init23"} _sdv_init23()
{
  var vslice_dummy_var_321: int;

  anon0:
    call {:si_unique_call 1622} vslice_dummy_var_321 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init53"} {:osmodel} _sdv_init53();
  modifies SLAM_guard_O_0, completion, s, yogi_error;
  free ensures {:va_keep} old(completion) == 1 ==> completion != 0;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 1;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} s == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} completion == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init53"} {:osmodel} _sdv_init53()
{

  anon0:
    SLAM_guard_O_0 := SLAM_guard_O_0_init;
    completion := 1;
    s := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_sdv_IoAcquireRemoveLock_exit"} {:osmodel} SLIC_sdv_IoAcquireRemoveLock_exit(actual_caller_1: int, actual_sdv_730: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_sdv_IoAcquireRemoveLock_exit"} {:osmodel} SLIC_sdv_IoAcquireRemoveLock_exit(actual_caller_1: int, actual_sdv_730: int)
{
  var {:scalar} sdv_730: int;

  anon0:
    sdv_730 := actual_sdv_730;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_730 != 0;
    call {:si_unique_call 1623} SLIC_EXIT_ROUTINE(strConst__li2bpl54);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} sdv_730 == 0;
    goto L2;
}



procedure {:origName "SLIC_sdv_IoSetCompletionRoutine_entry"} {:osmodel} SLIC_sdv_IoSetCompletionRoutine_entry(actual_caller_2: int);
  modifies completion;
  free ensures {:va_keep} old(completion) == 1 ==> completion != 1;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} completion == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_sdv_IoSetCompletionRoutine_entry"} {:osmodel} SLIC_sdv_IoSetCompletionRoutine_entry(actual_caller_2: int)
{

  anon0:
    completion := 0;
    return;
}



procedure {:origName "SLIC_sdv_RunStartDevice_exit"} {:osmodel} SLIC_sdv_RunStartDevice_exit(actual_caller_4: int, actual_sdv_731: int, actual_sdv_732: int);
  modifies yogi_error;
  free ensures {:va_keep} old(completion) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(completion) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_sdv_RunStartDevice_exit"} {:osmodel} SLIC_sdv_RunStartDevice_exit(actual_caller_4: int, actual_sdv_731: int, actual_sdv_732: int)
{
  var {:pointer} Tmp_1120: int;
  var {:pointer} caller_4: int;
  var {:pointer} sdv_731: int;
  var {:scalar} sdv_732: int;

  anon0:
    caller_4 := actual_caller_4;
    sdv_731 := actual_sdv_731;
    sdv_732 := actual_sdv_732;
    assume {:nonnull} sdv_731 != 0;
    assume sdv_731 > 0;
    Tmp_1120 := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(sdv_731)))];
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} sdv_732 != -1073741738;
    assume {:nonnull} Tmp_1120 != 0;
    assume Tmp_1120 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} completion != 0;
    goto L8;

  L8:
    call {:si_unique_call 1624} SLIC_EXIT_ROUTINE(strConst__li2bpl54);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} completion == 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_732 != -1073741436;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_732 != -1073741637;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} sdv_732 != -1073741810;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} s == 1;
    call {:si_unique_call 1625} SLIC_ABORT_13_0(caller_4, sdv_731, sdv_732);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} s != 1;
    goto L2;

  anon20_Then:
    assume {:partition} sdv_732 == -1073741810;
    goto L2;

  anon21_Then:
    assume {:partition} sdv_732 == -1073741637;
    goto L2;

  anon17_Then:
    assume {:partition} sdv_732 == -1073741436;
    goto L2;

  anon22_Then:
    goto L8;

  anon23_Then:
    assume {:partition} sdv_732 == -1073741738;
    goto L8;
}



procedure {:origName "SLIC_PoCallDriver_exit"} {:osmodel} SLIC_PoCallDriver_exit(actual_caller_6: int);
  modifies s;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_PoCallDriver_exit"} {:osmodel} SLIC_PoCallDriver_exit(actual_caller_6: int)
{

  anon0:
    s := 1;
    return;
}



procedure {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_7: int);
  modifies s;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_7: int)
{

  anon0:
    s := 1;
    return;
}



procedure {:origName "SLIC_IoAllocateIrp_exit"} {:osmodel} SLIC_IoAllocateIrp_exit(actual_caller_9: int, actual_IoAllocateIrp_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_IoAllocateIrp_exit"} {:osmodel} SLIC_IoAllocateIrp_exit(actual_caller_9: int, actual_IoAllocateIrp_1: int)
{
  var {:pointer} IoAllocateIrp_1: int;

  anon0:
    IoAllocateIrp_1 := actual_IoAllocateIrp_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} IoAllocateIrp_1 == 0;
    call {:si_unique_call 1626} SLIC_EXIT_ROUTINE(strConst__li2bpl54);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} IoAllocateIrp_1 != 0;
    goto L2;
}



procedure {:origName "SLIC_IofCallDriver_exit"} {:osmodel} SLIC_IofCallDriver_exit(actual_caller_10: int);
  modifies s;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_IofCallDriver_exit"} {:osmodel} SLIC_IofCallDriver_exit(actual_caller_10: int)
{

  anon0:
    s := 1;
    return;
}



procedure {:origName "SLIC_sdv_IoMarkIrpPending_exit"} SLIC_sdv_IoMarkIrpPending_exit(actual_caller_12: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_sdv_IoMarkIrpPending_exit"} SLIC_sdv_IoMarkIrpPending_exit(actual_caller_12: int)
{

  anon0:
    call {:si_unique_call 1627} SLIC_EXIT_ROUTINE(strConst__li2bpl54);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} old(completion) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(completion) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_13: int, actual_sdv_733: int, actual_sdv_734: int);
  modifies yogi_error;
  free ensures {:va_keep} old(completion) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(completion) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_13: int, actual_sdv_733: int, actual_sdv_734: int)
{
  var {:pointer} caller_13: int;
  var {:pointer} sdv_733: int;
  var {:scalar} sdv_734: int;

  anon0:
    caller_13 := actual_caller_13;
    sdv_733 := actual_sdv_733;
    sdv_734 := actual_sdv_734;
    call {:si_unique_call 1628} SLIC_ERROR_ROUTINE(strConst__li2bpl55);
    return;
}



procedure {:origName "_sdv_init28"} _sdv_init28();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init28"} _sdv_init28()
{
  var vslice_dummy_var_322: int;

  anon0:
    call {:si_unique_call 1629} vslice_dummy_var_322 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int)
{
  var vslice_dummy_var_323: int;

  anon0:
    call {:si_unique_call 1630} vslice_dummy_var_323 := __HAVOC_malloc(4);
    call {:si_unique_call 1631} RtlFailFast(3);
    return;
}



procedure {:origName "ParInitializeExtension1284Info"} ParInitializeExtension1284Info(actual_Pdx_9: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParInitializeExtension1284Info"} ParInitializeExtension1284Info(actual_Pdx_9: int)
{
  var {:scalar} i_33: int;
  var {:scalar} Tmp_1125: int;
  var {:scalar} rev_1: int;
  var {:scalar} fwd_1: int;
  var {:pointer} Tmp_1128: int;
  var {:pointer} Pdx_9: int;
  var vslice_dummy_var_324: int;

  anon0:
    call {:si_unique_call 1632} vslice_dummy_var_324 := __HAVOC_malloc(4);
    Pdx_9 := actual_Pdx_9;
    call {:si_unique_call 1633} Tmp_1128 := __HAVOC_malloc(20);
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[DefaultModes] != 0;
    rev_1 := BAND(Mem_T.INT4[DefaultModes], BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768));
    call {:si_unique_call 1634} fwd_1 := corral_nondet();
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} fwd_1 != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} fwd_1 != 2;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} fwd_1 != 32;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} fwd_1 != 64;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} fwd_1 != 128;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} fwd_1 != 256;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} fwd_1 != 512;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} fwd_1 == 1024;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L21;

  L21:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} rev_1 != 4;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} rev_1 != 8;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} rev_1 != 16;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} rev_1 != 32;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} rev_1 != 64;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} rev_1 != 128;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} rev_1 != 256;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} rev_1 != 512;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} rev_1 == 1024;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;

  L30:
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    i_33 := 0;
    goto L42;

  L42:
    call {:si_unique_call 1635} i_33, Tmp_1125, Tmp_1128 := ParInitializeExtension1284Info_loop_L42(i_33, Tmp_1125, Tmp_1128, Pdx_9);
    goto L42_last;

  L42_last:
    assume {:CounterLoop 5} {:Counter "i_33"} true;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 5 > i_33;
    Tmp_1125 := i_33;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    havoc Tmp_1128;
    assume {:nonnull} Tmp_1128 != 0;
    assume Tmp_1128 > 0;
    Mem_T.INT4[Tmp_1128 + Tmp_1125 * 4] := 0;
    i_33 := i_33 + 1;
    goto anon40_Else_dummy;

  anon40_Else_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} i_33 >= 5;
    return;

  anon48_Then:
    assume {:partition} rev_1 != 1024;
    goto L22;

  L22:
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;

  anon49_Then:
    assume {:partition} rev_1 == 512;
    goto L27;

  L27:
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;

  anon50_Then:
    assume {:partition} rev_1 == 256;
    goto L27;

  anon51_Then:
    assume {:partition} rev_1 == 128;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;

  anon52_Then:
    assume {:partition} rev_1 == 64;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;

  anon53_Then:
    assume {:partition} rev_1 == 32;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;

  anon54_Then:
    assume {:partition} rev_1 == 16;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;

  anon55_Then:
    assume {:partition} rev_1 == 8;
    goto L22;

  anon39_Then:
    assume {:partition} rev_1 == 4;
    goto L22;

  anon41_Then:
    assume {:partition} fwd_1 != 1024;
    goto L13;

  L13:
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L21;

  anon42_Then:
    assume {:partition} fwd_1 == 512;
    goto L18;

  L18:
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L21;

  anon43_Then:
    assume {:partition} fwd_1 == 256;
    goto L18;

  anon44_Then:
    assume {:partition} fwd_1 == 128;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L21;

  anon45_Then:
    assume {:partition} fwd_1 == 64;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L21;

  anon46_Then:
    assume {:partition} fwd_1 == 32;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L21;

  anon47_Then:
    assume {:partition} fwd_1 == 2;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L21;

  anon57_Then:
    assume {:partition} fwd_1 == 1;
    goto L13;

  anon56_Then:
    assume {:partition} Mem_T.INT4[DefaultModes] == 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L30;
}



procedure {:origName "StringCountValues"} StringCountValues(actual_string: int, actual_delimeter: int) returns (Tmp_1130: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "StringCountValues"} StringCountValues(actual_string: int, actual_delimeter: int) returns (Tmp_1130: int)
{
  var {:scalar} cnt: int;
  var {:pointer} lpKey: int;
  var {:pointer} string: int;
  var {:scalar} delimeter: int;

  anon0:
    string := actual_string;
    delimeter := actual_delimeter;
    lpKey := string;
    cnt := 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} string != 0;
    goto L9;

  L9:
    call {:si_unique_call 1636} cnt := StringCountValues_loop_L9(cnt, lpKey, delimeter);
    goto L9_last;

  L9_last:
    assume {:nonnull} lpKey != 0;
    assume lpKey > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.INT4[lpKey] != 0;
    assume {:nonnull} lpKey != 0;
    assume lpKey > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[lpKey] == delimeter;
    cnt := cnt + 1;
    goto L12;

  L12:
    goto L12_dummy;

  L12_dummy:
    assume false;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[lpKey] != delimeter;
    goto L12;

  anon7_Then:
    assume {:partition} Mem_T.INT4[lpKey] == 0;
    Tmp_1130 := cnt;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} string == 0;
    Tmp_1130 := 0;
    goto L1;
}



procedure {:origName "P4CompleteRequestReleaseRemLock"} P4CompleteRequestReleaseRemLock(actual_Irp_32: int, actual_Status_9: int, actual_Information: int, actual_RemLock: int) returns (Tmp_1132: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_1132 == actual_Status_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4CompleteRequestReleaseRemLock"} P4CompleteRequestReleaseRemLock(actual_Irp_32: int, actual_Status_9: int, actual_Information: int, actual_RemLock: int) returns (Tmp_1132: int)
{
  var {:pointer} Irp_32: int;
  var {:scalar} Status_9: int;
  var {:scalar} Information: int;
  var {:pointer} RemLock: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;

  anon0:
    Irp_32 := actual_Irp_32;
    Status_9 := actual_Status_9;
    Information := actual_Information;
    RemLock := actual_RemLock;
    call {:si_unique_call 1637} vslice_dummy_var_325 := P4CompleteRequest(Irp_32, Status_9, Information);
    call {:si_unique_call 1638} vslice_dummy_var_326 := sdv_IoReleaseRemoveLock(RemLock, Irp_32);
    Tmp_1132 := Status_9;
    return;
}



procedure {:origName "GetCheckSum"} GetCheckSum(actual_Block: int, actual_Len: int, actual_CheckSum: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "GetCheckSum"} GetCheckSum(actual_Block: int, actual_Len: int, actual_CheckSum: int)
{
  var {:scalar} i_34: int;
  var {:scalar} crc: int;
  var {:scalar} Tmp_1139: int;
  var {:pointer} crc16a: int;
  var {:scalar} tmp: int;
  var {:pointer} crc16b: int;
  var {:scalar} Len: int;
  var {:pointer} CheckSum: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;

  anon0:
    call {:si_unique_call 1639} vslice_dummy_var_327 := __HAVOC_malloc(4);
    Len := actual_Len;
    CheckSum := actual_CheckSum;
    call {:si_unique_call 1640} crc16a := __HAVOC_malloc(64);
    call {:si_unique_call 1641} crc16b := __HAVOC_malloc(64);
    crc := 0;
    assume {:nonnull} crc16a != 0;
    assume crc16a > 0;
    Mem_T.INT4[crc16a] := 0;
    assume {:nonnull} crc16b != 0;
    assume crc16b > 0;
    Mem_T.INT4[crc16b] := 0;
    i_34 := 0;
    goto L12;

  L12:
    call {:si_unique_call 1642} i_34, crc, Tmp_1139, tmp, vslice_dummy_var_328 := GetCheckSum_loop_L12(i_34, crc, Tmp_1139, tmp, Len, vslice_dummy_var_328);
    goto L12_last;

  L12_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Len > i_34;
    call {:si_unique_call 1643} tmp := corral_nondet();
    Tmp_1139 := BAND(tmp, BOR(BOR(BOR(1, 2), 4), 8));
    call {:si_unique_call 1644} vslice_dummy_var_328 := corral_nondet();
    call {:si_unique_call 1645} crc := corral_nondet();
    i_34 := i_34 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_34 >= Len;
    assume {:nonnull} CheckSum != 0;
    assume CheckSum > 0;
    Mem_T.INT4[CheckSum] := crc;
    return;
}



procedure {:origName "ParPnpFindDeviceIdKeys"} ParPnpFindDeviceIdKeys(actual_lppMFG: int, actual_lppMDL: int, actual_lppCLS: int, actual_lppDES: int, actual_lppAID: int, actual_lppCID: int, actual_lpDeviceID: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParPnpFindDeviceIdKeys"} ParPnpFindDeviceIdKeys(actual_lppMFG: int, actual_lppMDL: int, actual_lppCLS: int, actual_lppDES: int, actual_lppAID: int, actual_lppCID: int, actual_lpDeviceID: int)
{
  var {:scalar} Tmp_1141: int;
  var {:scalar} Tmp_1142: int;
  var {:scalar} sdv_736: int;
  var {:scalar} sdv_737: int;
  var {:scalar} Tmp_1143: int;
  var {:scalar} sdv_739: int;
  var {:scalar} sdv_740: int;
  var {:scalar} Tmp_1145: int;
  var {:scalar} Tmp_1146: int;
  var {:scalar} Tmp_1147: int;
  var {:pointer} lpKey_1: int;
  var {:scalar} Tmp_1148: int;
  var {:scalar} sdv_743: int;
  var {:scalar} Tmp_1150: int;
  var {:scalar} Tmp_1151: int;
  var {:scalar} sdv_746: int;
  var {:scalar} Tmp_1153: int;
  var {:scalar} sdv_749: int;
  var {:scalar} sdv_750: int;
  var {:scalar} Tmp_1154: int;
  var {:scalar} sdv_751: int;
  var {:scalar} Tmp_1156: int;
  var {:scalar} sdv_753: int;
  var {:pointer} lpValue: int;
  var {:scalar} sdv_756: int;
  var {:scalar} sdv_758: int;
  var {:scalar} wKeyLength: int;
  var {:pointer} lppMFG: int;
  var {:pointer} lppMDL: int;
  var {:pointer} lppCLS: int;
  var {:pointer} lppDES: int;
  var {:pointer} lppAID: int;
  var {:pointer} lppCID: int;
  var {:pointer} lpDeviceID: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;

  anon0:
    call {:si_unique_call 1646} vslice_dummy_var_329 := __HAVOC_malloc(4);
    lppMFG := actual_lppMFG;
    lppMDL := actual_lppMDL;
    lppCLS := actual_lppCLS;
    lppDES := actual_lppDES;
    lppAID := actual_lppAID;
    lppCID := actual_lppCID;
    lpDeviceID := actual_lpDeviceID;
    call {:si_unique_call 1647} vslice_dummy_var_330 := __HAVOC_malloc(16);
    call {:si_unique_call 1648} vslice_dummy_var_331 := __HAVOC_malloc(24);
    call {:si_unique_call 1649} vslice_dummy_var_332 := __HAVOC_malloc(16);
    call {:si_unique_call 1650} vslice_dummy_var_333 := __HAVOC_malloc(16);
    call {:si_unique_call 1651} vslice_dummy_var_334 := __HAVOC_malloc(52);
    call {:si_unique_call 1652} vslice_dummy_var_335 := __HAVOC_malloc(16);
    call {:si_unique_call 1653} vslice_dummy_var_336 := __HAVOC_malloc(16);
    call {:si_unique_call 1654} vslice_dummy_var_337 := __HAVOC_malloc(24);
    call {:si_unique_call 1655} vslice_dummy_var_338 := __HAVOC_malloc(48);
    call {:si_unique_call 1656} vslice_dummy_var_339 := __HAVOC_malloc(48);
    call {:si_unique_call 1657} vslice_dummy_var_340 := __HAVOC_malloc(16);
    call {:si_unique_call 1658} vslice_dummy_var_341 := __HAVOC_malloc(52);
    lpKey_1 := lpDeviceID;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} lppMFG != 0;
    assume {:nonnull} lppMFG != 0;
    assume lppMFG > 0;
    goto L8;

  L8:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} lppMDL != 0;
    assume {:nonnull} lppMDL != 0;
    assume lppMDL > 0;
    goto L10;

  L10:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} lppCLS != 0;
    assume {:nonnull} lppCLS != 0;
    assume lppCLS > 0;
    goto L12;

  L12:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} lppDES != 0;
    assume {:nonnull} lppDES != 0;
    assume lppDES > 0;
    goto L14;

  L14:
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} lppAID != 0;
    assume {:nonnull} lppAID != 0;
    assume lppAID > 0;
    goto L16;

  L16:
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} lppCID != 0;
    assume {:nonnull} lppCID != 0;
    assume lppCID > 0;
    goto L18;

  L18:
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} lpDeviceID != 0;
    goto L21;

  L21:
    call {:si_unique_call 1659} Tmp_1141, Tmp_1142, sdv_736, sdv_737, Tmp_1143, sdv_739, sdv_740, Tmp_1145, Tmp_1146, Tmp_1147, lpKey_1, Tmp_1148, sdv_743, Tmp_1150, Tmp_1151, sdv_746, Tmp_1153, sdv_749, sdv_750, Tmp_1154, sdv_751, Tmp_1156, sdv_753, lpValue, sdv_756, sdv_758, wKeyLength := ParPnpFindDeviceIdKeys_loop_L21(Tmp_1141, Tmp_1142, sdv_736, sdv_737, Tmp_1143, sdv_739, sdv_740, Tmp_1145, Tmp_1146, Tmp_1147, lpKey_1, Tmp_1148, sdv_743, Tmp_1150, Tmp_1151, sdv_746, Tmp_1153, sdv_749, sdv_750, Tmp_1154, sdv_751, Tmp_1156, sdv_753, lpValue, sdv_756, sdv_758, wKeyLength, lppMFG, lppMDL, lppCLS, lppDES, lppAID, lppCID);
    goto L21_last;

  L21_last:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} lpKey_1 != 0;
    goto L22;

  L22:
    call {:si_unique_call 1660} ParPnpFindDeviceIdKeys_loop_L22(lpKey_1);
    goto L22_last;

  L22_last:
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] == 32;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    assume false;
    return;

  anon94_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] != 32;
    call {:si_unique_call 1661} lpValue := StringChr(lpKey_1, 58);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} lpValue != 0;
    wKeyLength := lpValue;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] != 65;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] != 67;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] != 68;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] == 77;
    Tmp_1146 := wKeyLength;
    call {:si_unique_call 1662} sdv_750 := RtlCompareMemory(0, 0, Tmp_1146);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_750 > 5;
    goto L45;

  L45:
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} lppMFG != 0;
    assume {:nonnull} lppMFG != 0;
    assume lppMFG > 0;
    call {:si_unique_call 1663} lpKey_1 := StringChr(lpValue, 59);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon98_Else_dummy;

  anon98_Else_dummy:
    assume false;
    return;

  anon98_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon98_Then_dummy;

  anon98_Then_dummy:
    assume false;
    return;

  anon97_Then:
    assume {:partition} lppMFG == 0;
    goto L1;

  L1:
    return;

  anon96_Then:
    assume {:partition} 5 >= sdv_750;
    Tmp_1150 := wKeyLength;
    call {:si_unique_call 1664} sdv_751 := RtlCompareMemory(0, 0, Tmp_1150);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_751 != 3;
    Tmp_1154 := wKeyLength;
    call {:si_unique_call 1665} sdv_743 := RtlCompareMemory(0, 0, Tmp_1154);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_743 == 5;
    goto L66;

  L66:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} lppMDL != 0;
    assume {:nonnull} lppMDL != 0;
    assume lppMDL > 0;
    call {:si_unique_call 1666} lpKey_1 := StringChr(lpValue, 59);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon102_Else_dummy;

  anon102_Else_dummy:
    assume false;
    return;

  anon102_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon102_Then_dummy;

  anon102_Then_dummy:
    assume false;
    return;

  anon101_Then:
    assume {:partition} lppMDL == 0;
    goto L1;

  anon100_Then:
    assume {:partition} sdv_743 != 5;
    Tmp_1151 := wKeyLength;
    call {:si_unique_call 1667} sdv_746 := RtlCompareMemory(0, 0, Tmp_1151);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_746 != 3;
    call {:si_unique_call 1668} lpKey_1 := StringChr(lpValue, 59);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon104_Else_dummy;

  anon104_Else_dummy:
    assume false;
    return;

  anon104_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon104_Then_dummy;

  anon104_Then_dummy:
    assume false;
    return;

  anon103_Then:
    assume {:partition} sdv_746 == 3;
    goto L66;

  anon99_Then:
    assume {:partition} sdv_751 == 3;
    goto L45;

  anon125_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] != 77;
    call {:si_unique_call 1669} lpKey_1 := StringChr(lpValue, 59);
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon124_Else_dummy;

  anon124_Else_dummy:
    assume false;
    return;

  anon124_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon124_Then_dummy;

  anon124_Then_dummy:
    assume false;
    return;

  anon126_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] == 68;
    Tmp_1153 := wKeyLength;
    call {:si_unique_call 1670} sdv_758 := RtlCompareMemory(0, 0, Tmp_1153);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_758 != 0;
    goto L92;

  L92:
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} lppDES != 0;
    assume {:nonnull} lppDES != 0;
    assume lppDES > 0;
    call {:si_unique_call 1671} lpKey_1 := StringChr(lpValue, 59);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon107_Else_dummy;

  anon107_Else_dummy:
    assume false;
    return;

  anon107_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    assume false;
    return;

  anon106_Then:
    assume {:partition} lppDES == 0;
    goto L1;

  anon105_Then:
    assume {:partition} sdv_758 == 0;
    Tmp_1145 := wKeyLength;
    call {:si_unique_call 1672} sdv_737 := RtlCompareMemory(0, 0, Tmp_1145);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} sdv_737 == 0;
    call {:si_unique_call 1673} lpKey_1 := StringChr(lpValue, 59);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon109_Else_dummy;

  anon109_Else_dummy:
    assume false;
    return;

  anon109_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon109_Then_dummy;

  anon109_Then_dummy:
    assume false;
    return;

  anon108_Then:
    assume {:partition} sdv_737 != 0;
    goto L92;

  anon127_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] == 67;
    Tmp_1142 := wKeyLength;
    call {:si_unique_call 1674} sdv_753 := RtlCompareMemory(0, 0, Tmp_1142);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} sdv_753 == 5;
    goto L119;

  L119:
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} lppCLS != 0;
    assume {:nonnull} lppCLS != 0;
    assume lppCLS > 0;
    call {:si_unique_call 1675} lpKey_1 := StringChr(lpValue, 59);
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    assume false;
    return;

  anon112_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon112_Then_dummy;

  anon112_Then_dummy:
    assume false;
    return;

  anon111_Then:
    assume {:partition} lppCLS == 0;
    goto L1;

  anon110_Then:
    assume {:partition} sdv_753 != 5;
    Tmp_1147 := wKeyLength;
    call {:si_unique_call 1676} sdv_756 := RtlCompareMemory(0, 0, Tmp_1147);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} sdv_756 != 3;
    Tmp_1148 := wKeyLength;
    call {:si_unique_call 1677} sdv_736 := RtlCompareMemory(0, 0, Tmp_1148);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} sdv_736 > 5;
    goto L140;

  L140:
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} lppCID != 0;
    assume {:nonnull} lppCID != 0;
    assume lppCID > 0;
    call {:si_unique_call 1678} lpKey_1 := StringChr(lpValue, 59);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    assume false;
    return;

  anon116_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon116_Then_dummy;

  anon116_Then_dummy:
    assume false;
    return;

  anon115_Then:
    assume {:partition} lppCID == 0;
    goto L1;

  anon114_Then:
    assume {:partition} 5 >= sdv_736;
    Tmp_1143 := wKeyLength;
    call {:si_unique_call 1679} sdv_749 := RtlCompareMemory(0, 0, Tmp_1143);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} sdv_749 != 3;
    call {:si_unique_call 1680} lpKey_1 := StringChr(lpValue, 59);
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon118_Else_dummy;

  anon118_Else_dummy:
    assume false;
    return;

  anon118_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon118_Then_dummy;

  anon118_Then_dummy:
    assume false;
    return;

  anon117_Then:
    assume {:partition} sdv_749 == 3;
    goto L140;

  anon113_Then:
    assume {:partition} sdv_756 == 3;
    goto L119;

  anon129_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] == 65;
    Tmp_1156 := wKeyLength;
    call {:si_unique_call 1681} sdv_739 := RtlCompareMemory(0, 0, Tmp_1156);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} sdv_739 != 0;
    goto L166;

  L166:
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} lppAID != 0;
    assume {:nonnull} lppAID != 0;
    assume lppAID > 0;
    call {:si_unique_call 1682} lpKey_1 := StringChr(lpValue, 59);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon121_Else_dummy;

  anon121_Else_dummy:
    assume false;
    return;

  anon121_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon121_Then_dummy;

  anon121_Then_dummy:
    assume false;
    return;

  anon120_Then:
    assume {:partition} lppAID == 0;
    goto L1;

  anon119_Then:
    assume {:partition} sdv_739 == 0;
    Tmp_1141 := wKeyLength;
    call {:si_unique_call 1683} sdv_740 := RtlCompareMemory(0, 0, Tmp_1141);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} sdv_740 == 0;
    call {:si_unique_call 1684} lpKey_1 := StringChr(lpValue, 59);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon123_Else_dummy;

  anon123_Else_dummy:
    assume false;
    return;

  anon123_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon123_Then_dummy;

  anon123_Then_dummy:
    assume false;
    return;

  anon122_Then:
    assume {:partition} sdv_740 != 0;
    goto L166;

  anon95_Then:
    assume {:partition} lpValue == 0;
    goto L1;

  anon93_Then:
    assume {:partition} lpKey_1 == 0;
    goto L1;

  anon92_Then:
    assume {:partition} lpDeviceID == 0;
    goto L1;

  anon91_Then:
    assume {:partition} lppCID == 0;
    goto L18;

  anon90_Then:
    assume {:partition} lppAID == 0;
    goto L16;

  anon89_Then:
    assume {:partition} lppDES == 0;
    goto L14;

  anon88_Then:
    assume {:partition} lppCLS == 0;
    goto L12;

  anon87_Then:
    assume {:partition} lppMDL == 0;
    goto L10;

  anon128_Then:
    assume {:partition} lppMFG == 0;
    goto L8;
}



procedure {:origName "PptSynchronizedDecrement"} PptSynchronizedDecrement(actual_SyncContext_3: int) returns (Tmp_1168: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1168 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptSynchronizedDecrement"} PptSynchronizedDecrement(actual_SyncContext_3: int) returns (Tmp_1168: int)
{
  var {:pointer} Tmp_1169: int;
  var {:pointer} Tmp_1171: int;
  var {:pointer} Tmp_1172: int;
  var {:pointer} Tmp_1173: int;
  var {:pointer} Tmp_1174: int;
  var {:pointer} SyncContext_3: int;

  anon0:
    SyncContext_3 := actual_SyncContext_3;
    Tmp_1173 := SyncContext_3;
    Tmp_1171 := SyncContext_3;
    assume {:nonnull} Tmp_1171 != 0;
    assume Tmp_1171 > 0;
    havoc Tmp_1174;
    Tmp_1172 := SyncContext_3;
    assume {:nonnull} Tmp_1172 != 0;
    assume Tmp_1172 > 0;
    havoc Tmp_1169;
    assume {:nonnull} Tmp_1169 != 0;
    assume Tmp_1169 > 0;
    assume {:nonnull} Tmp_1174 != 0;
    assume Tmp_1174 > 0;
    Mem_T.INT4[Tmp_1174] := Mem_T.INT4[Tmp_1169] - 1;
    assume {:nonnull} Tmp_1169 != 0;
    assume Tmp_1169 > 0;
    assume {:nonnull} Tmp_1173 != 0;
    assume Tmp_1173 > 0;
    Tmp_1168 := 1;
    return;
}



procedure {:origName "CheckPort"} CheckPort(actual_wPortAddr: int, actual_bMask: int, actual_bValue: int, actual_msTimeDelay: int) returns (Tmp_1175: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1175 == 1 || Tmp_1175 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "CheckPort"} CheckPort(actual_wPortAddr: int, actual_bMask: int, actual_bValue: int, actual_msTimeDelay: int) returns (Tmp_1175: int)
{
  var {:pointer} Tmp_1177: int;
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:scalar} Tmp_1178: int;
  var {:scalar} Wait_1: int;
  var {:scalar} sdv_772: int;
  var {:pointer} s_p_e_c_i_a_l_2: int;
  var {:scalar} sdv_775: int;
  var {:scalar} End: int;
  var {:scalar} Start: int;
  var {:scalar} Tmp_1179: int;
  var {:scalar} dsr_2: int;
  var {:scalar} Tmp_1180: int;
  var {:pointer} Tmp_1181: int;
  var {:scalar} bMask: int;
  var {:scalar} bValue: int;
  var {:scalar} msTimeDelay: int;

  anon0:
    call {:si_unique_call 1685} Wait_1 := __HAVOC_malloc(20);
    call {:si_unique_call 1686} End := __HAVOC_malloc(20);
    call {:si_unique_call 1687} Start := __HAVOC_malloc(20);
    bMask := actual_bMask;
    bValue := actual_bValue;
    msTimeDelay := actual_msTimeDelay;
    call {:si_unique_call 1688} dsr_2 := corral_nondet();
    Tmp_1179 := BAND(dsr_2, bMask);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Tmp_1179 == bValue;
    Tmp_1175 := 1;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} Tmp_1179 != bValue;
    call {:si_unique_call 1689} sdv_772 := corral_nondet();
    assume {:nonnull} Wait_1 != 0;
    assume Wait_1 > 0;
    Tmp_1177 := KeTickCount;
    assume {:nonnull} Tmp_1177 != 0;
    assume Tmp_1177 > 0;
    havoc s_p_e_c_i_a_l_1;
    goto L21;

  L21:
    call {:si_unique_call 1690} CheckPort_loop_L21(s_p_e_c_i_a_l_1, Start);
    goto L21_last;

  L21_last:
    assume {:nonnull} Start != 0;
    assume Start > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} Start != 0;
    assume Start > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} Start != 0;
    assume Start > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L29;

  L29:
    call {:si_unique_call 1691} Tmp_1178, s_p_e_c_i_a_l_2, sdv_775, dsr_2, Tmp_1181 := CheckPort_loop_L29(Tmp_1178, Wait_1, s_p_e_c_i_a_l_2, sdv_775, End, Start, dsr_2, Tmp_1181, bMask, bValue);
    goto L29_last;

  L29_last:
    Tmp_1181 := KeTickCount;
    assume {:nonnull} Tmp_1181 != 0;
    assume Tmp_1181 > 0;
    havoc s_p_e_c_i_a_l_2;
    goto L31;

  L31:
    call {:si_unique_call 1692} CheckPort_loop_L31(s_p_e_c_i_a_l_2, End);
    goto L31_last;

  L31_last:
    assume {:nonnull} End != 0;
    assume End > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} End != 0;
    assume End > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} End != 0;
    assume End > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 1693} dsr_2 := corral_nondet();
    Tmp_1178 := BAND(dsr_2, bMask);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_1178 == bValue;
    Tmp_1175 := 1;
    goto L1;

  anon17_Then:
    assume {:partition} Tmp_1178 != bValue;
    call {:si_unique_call 1694} sdv_775 := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    assume {:nonnull} Start != 0;
    assume Start > 0;
    assume {:nonnull} Wait_1 != 0;
    assume Wait_1 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 1695} dsr_2 := corral_nondet();
    Tmp_1180 := BAND(dsr_2, bMask);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1180 != bValue;
    Tmp_1175 := 0;
    goto L1;

  anon18_Then:
    assume {:partition} Tmp_1180 == bValue;
    Tmp_1175 := 1;
    goto L1;

  anon13_Then:
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    assume false;
    return;

  anon16_Then:
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    assume false;
    return;

  anon15_Then:
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;
}



procedure {:origName "P4ReleaseBus"} P4ReleaseBus(actual_Fdo_5: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4ReleaseBus"} P4ReleaseBus(actual_Fdo_5: int)
{
  var {:pointer} fdx_14: int;
  var {:pointer} Fdo_5: int;
  var vslice_dummy_var_342: int;

  anon0:
    call {:si_unique_call 1696} vslice_dummy_var_342 := __HAVOC_malloc(4);
    Fdo_5 := actual_Fdo_5;
    assume {:nonnull} Fdo_5 != 0;
    assume Fdo_5 > 0;
    havoc fdx_14;
    assume {:nonnull} fdx_14 != 0;
    assume fdx_14 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1697} PptFreePort#1(fdx_14);
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "P4CompleteRequest"} P4CompleteRequest(actual_Irp_34: int, actual_Status_10: int, actual_Information_1: int) returns (Tmp_1184: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc;
  free ensures {:va_keep} Tmp_1184 == actual_Status_10;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4CompleteRequest"} P4CompleteRequest(actual_Irp_34: int, actual_Status_10: int, actual_Information_1: int) returns (Tmp_1184: int)
{
  var {:pointer} Irp_34: int;
  var {:scalar} Status_10: int;
  var {:scalar} Information_1: int;

  anon0:
    Irp_34 := actual_Irp_34;
    Status_10 := actual_Status_10;
    Information_1 := actual_Information_1;
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_34))] := Status_10;
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    call {:si_unique_call 1698} sdv_IoCompleteRequest(0, 0);
    Tmp_1184 := Status_10;
    return;
}



procedure {:origName "ParDetectDot3DataLink"} ParDetectDot3DataLink(actual_Pdx_10: int, actual_DeviceId_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParDetectDot3DataLink"} ParDetectDot3DataLink(actual_Pdx_10: int, actual_DeviceId_2: int)
{
  var {:pointer} DOT4DL_1: int;
  var {:pointer} DOT3DL_1: int;
  var {:pointer} DOT3M_1: int;
  var {:pointer} CMDField_1: int;
  var {:pointer} DOT3C_1: int;
  var {:pointer} Pdx_10: int;
  var {:pointer} DeviceId_2: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_3247: int;
  var vslice_dummy_var_3248: int;
  var vslice_dummy_var_3249: int;
  var vslice_dummy_var_3250: int;
  var vslice_dummy_var_3251: int;

  anon0:
    call {:si_unique_call 1699} DOT4DL_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1700} DOT3DL_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1701} vslice_dummy_var_343 := __HAVOC_malloc(4);
    call {:si_unique_call 1702} DOT3M_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1703} CMDField_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1704} DOT3C_1 := __HAVOC_malloc(4);
    Pdx_10 := actual_Pdx_10;
    DeviceId_2 := actual_DeviceId_2;
    assume {:nonnull} DOT3DL_1 != 0;
    assume DOT3DL_1 > 0;
    assume {:nonnull} DOT3C_1 != 0;
    assume DOT3C_1 > 0;
    assume {:nonnull} DOT4DL_1 != 0;
    assume DOT4DL_1 > 0;
    assume {:nonnull} CMDField_1 != 0;
    assume CMDField_1 > 0;
    assume {:nonnull} DOT3M_1 != 0;
    assume DOT3M_1 > 0;
    call {:si_unique_call 1705} ParDot3ParseDevId(DOT3DL_1, DOT3C_1, CMDField_1, DOT4DL_1, DOT3M_1, DeviceId_2);
    assume {:nonnull} DOT3M_1 != 0;
    assume DOT3M_1 > 0;
    havoc vslice_dummy_var_3247;
    call {:si_unique_call 1706} ParDot3ParseModes(Pdx_10, vslice_dummy_var_3247);
    assume {:nonnull} DOT4DL_1 != 0;
    assume DOT4DL_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} DOT4DL_1 != 0;
    assume DOT4DL_1 > 0;
    havoc vslice_dummy_var_3248;
    call {:si_unique_call 1707} ParDot4CreateObject(Pdx_10, vslice_dummy_var_3248);
    goto L1;

  L1:
    return;

  anon7_Then:
    assume {:nonnull} DOT3DL_1 != 0;
    assume DOT3DL_1 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} DOT3C_1 != 0;
    assume DOT3C_1 > 0;
    assume {:nonnull} DOT3DL_1 != 0;
    assume DOT3DL_1 > 0;
    havoc vslice_dummy_var_3249;
    havoc vslice_dummy_var_3250;
    call {:si_unique_call 1708} ParDot3CreateObject(Pdx_10, vslice_dummy_var_3249, vslice_dummy_var_3250);
    goto L1;

  anon8_Then:
    assume {:nonnull} CMDField_1 != 0;
    assume CMDField_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} CMDField_1 != 0;
    assume CMDField_1 > 0;
    havoc vslice_dummy_var_3251;
    call {:si_unique_call 1709} ParMLCCreateObject(Pdx_10, vslice_dummy_var_3251);
    goto L1;

  anon9_Then:
    goto L1;
}



procedure {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_3: int, actual_Value: int) returns (Tmp_1188: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_3: int, actual_Value: int) returns (Tmp_1188: int)
{
  var {:scalar} sdv_776: int;

  anon0:
    Tmp_1188 := sdv_776;
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var {:scalar} Tmp_1190: int;
  var {:scalar} Tmp_1191: int;
  var {:scalar} Tmp_1192: int;
  var {:scalar} Tmp_1193: int;
  var {:scalar} Tmp_1194: int;
  var {:scalar} Tmp_1195: int;
  var {:scalar} Tmp_1196: int;
  var {:scalar} Tmp_1197: int;
  var {:scalar} Tmp_1198: int;
  var {:scalar} Tmp_1200: int;
  var {:scalar} Tmp_1202: int;
  var {:scalar} Tmp_1203: int;
  var {:scalar} Tmp_1204: int;
  var {:scalar} Tmp_1205: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_3252: int;
  var vslice_dummy_var_3253: int;
  var vslice_dummy_var_3254: int;
  var vslice_dummy_var_3255: int;
  var vslice_dummy_var_3256: int;
  var vslice_dummy_var_3257: int;
  var vslice_dummy_var_3258: int;
  var vslice_dummy_var_3259: int;
  var vslice_dummy_var_3260: int;
  var vslice_dummy_var_3261: int;
  var vslice_dummy_var_3262: int;
  var vslice_dummy_var_3263: int;
  var vslice_dummy_var_3264: int;
  var vslice_dummy_var_3265: int;

  anon0:
    call {:si_unique_call 1710} Tmp_1190 := __HAVOC_malloc(4);
    call {:si_unique_call 1711} Tmp_1191 := __HAVOC_malloc(4);
    call {:si_unique_call 1712} Tmp_1192 := __HAVOC_malloc(4);
    call {:si_unique_call 1713} Tmp_1193 := __HAVOC_malloc(4);
    call {:si_unique_call 1714} Tmp_1194 := __HAVOC_malloc(4);
    call {:si_unique_call 1715} Tmp_1195 := __HAVOC_malloc(4);
    call {:si_unique_call 1716} Tmp_1196 := __HAVOC_malloc(4);
    call {:si_unique_call 1717} Tmp_1197 := __HAVOC_malloc(4);
    call {:si_unique_call 1718} Tmp_1198 := __HAVOC_malloc(4);
    call {:si_unique_call 1719} Tmp_1200 := __HAVOC_malloc(4);
    call {:si_unique_call 1720} vslice_dummy_var_344 := __HAVOC_malloc(4);
    call {:si_unique_call 1721} Tmp_1202 := __HAVOC_malloc(4);
    call {:si_unique_call 1722} Tmp_1203 := __HAVOC_malloc(4);
    call {:si_unique_call 1723} Tmp_1204 := __HAVOC_malloc(4);
    call {:si_unique_call 1724} Tmp_1205 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    assume {:nonnull} Tmp_1194 != 0;
    assume Tmp_1194 > 0;
    havoc vslice_dummy_var_3252;
    Mem_T.INT4[Tmp_1194] := vslice_dummy_var_3252;
    assume {:nonnull} Tmp_1193 != 0;
    assume Tmp_1193 > 0;
    havoc vslice_dummy_var_3253;
    Mem_T.INT4[Tmp_1193] := vslice_dummy_var_3253;
    assume {:nonnull} Tmp_1197 != 0;
    assume Tmp_1197 > 0;
    havoc vslice_dummy_var_3254;
    Mem_T.INT4[Tmp_1197] := vslice_dummy_var_3254;
    assume {:nonnull} Tmp_1191 != 0;
    assume Tmp_1191 > 0;
    havoc vslice_dummy_var_3255;
    Mem_T.INT4[Tmp_1191] := vslice_dummy_var_3255;
    assume {:nonnull} Tmp_1205 != 0;
    assume Tmp_1205 > 0;
    havoc vslice_dummy_var_3256;
    Mem_T.INT4[Tmp_1205] := vslice_dummy_var_3256;
    assume {:nonnull} Tmp_1192 != 0;
    assume Tmp_1192 > 0;
    havoc vslice_dummy_var_3257;
    Mem_T.INT4[Tmp_1192] := vslice_dummy_var_3257;
    assume {:nonnull} Tmp_1202 != 0;
    assume Tmp_1202 > 0;
    havoc vslice_dummy_var_3258;
    Mem_T.INT4[Tmp_1202] := vslice_dummy_var_3258;
    assume {:nonnull} Tmp_1200 != 0;
    assume Tmp_1200 > 0;
    havoc vslice_dummy_var_3259;
    Mem_T.INT4[Tmp_1200] := vslice_dummy_var_3259;
    assume {:nonnull} Tmp_1195 != 0;
    assume Tmp_1195 > 0;
    havoc vslice_dummy_var_3260;
    Mem_T.INT4[Tmp_1195] := vslice_dummy_var_3260;
    assume {:nonnull} Tmp_1203 != 0;
    assume Tmp_1203 > 0;
    havoc vslice_dummy_var_3261;
    Mem_T.INT4[Tmp_1203] := vslice_dummy_var_3261;
    assume {:nonnull} Tmp_1196 != 0;
    assume Tmp_1196 > 0;
    havoc vslice_dummy_var_3262;
    Mem_T.INT4[Tmp_1196] := vslice_dummy_var_3262;
    assume {:nonnull} Tmp_1190 != 0;
    assume Tmp_1190 > 0;
    havoc vslice_dummy_var_3263;
    Mem_T.INT4[Tmp_1190] := vslice_dummy_var_3263;
    assume {:nonnull} Tmp_1204 != 0;
    assume Tmp_1204 > 0;
    havoc vslice_dummy_var_3264;
    Mem_T.INT4[Tmp_1204] := vslice_dummy_var_3264;
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    havoc vslice_dummy_var_3265;
    Mem_T.INT4[Tmp_1198] := vslice_dummy_var_3265;
    return;
}



procedure {:origName "ParCallDriver"} ParCallDriver(actual_DeviceObject_17: int, actual_Irp_35: int) returns (Tmp_1206: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, s, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1206 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParCallDriver"} ParCallDriver(actual_DeviceObject_17: int, actual_Irp_35: int) returns (Tmp_1206: int)
{
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_35: int;

  anon0:
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_35 := actual_Irp_35;
    call {:si_unique_call 1725} Tmp_1206 := sdv_IoCallDriver(DeviceObject_17, Irp_35);
    return;
}



procedure {:origName "InsertHeadList"} InsertHeadList(actual_ListHead_1: int, actual_Entry_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "InsertHeadList"} InsertHeadList(actual_ListHead_1: int, actual_Entry_1: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} ListHead_1: int;
  var {:pointer} Entry_1: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_3266: int;

  anon0:
    call {:si_unique_call 1726} vslice_dummy_var_345 := __HAVOC_malloc(4);
    ListHead_1 := actual_ListHead_1;
    Entry_1 := actual_Entry_1;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    havoc NextEntry;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    havoc vslice_dummy_var_3266;
    call {:si_unique_call 1727} FatalListEntryError(ListHead_1, NextEntry, vslice_dummy_var_3266);
    goto L8;

  L8:
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    return;

  anon3_Then:
    goto L8;
}



procedure {:origName "ParDot3ParseDevId"} ParDot3ParseDevId(actual_lpp: int, actual_lpp_1: int, actual_lpp_2: int, actual_lpp_3: int, actual_lpp_4: int, actual_lpDeviceID_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParDot3ParseDevId"} ParDot3ParseDevId(actual_lpp: int, actual_lpp_1: int, actual_lpp_2: int, actual_lpp_3: int, actual_lpp_4: int, actual_lpDeviceID_1: int)
{
  var {:scalar} Tmp_1211: int;
  var {:scalar} sdv_780: int;
  var {:scalar} Tmp_1215: int;
  var {:scalar} Tmp_1216: int;
  var {:scalar} Tmp_1217: int;
  var {:pointer} lpKey_2: int;
  var {:scalar} sdv_782: int;
  var {:scalar} Tmp_1218: int;
  var {:scalar} sdv_785: int;
  var {:scalar} Tmp_1222: int;
  var {:scalar} sdv_788: int;
  var {:scalar} sdv_790: int;
  var {:scalar} sdv_791: int;
  var {:scalar} Tmp_1225: int;
  var {:scalar} sdv_795: int;
  var {:pointer} lpValue_1: int;
  var {:scalar} Tmp_1227: int;
  var {:scalar} sdv_796: int;
  var {:scalar} wKeyLength_1: int;
  var {:pointer} lpp: int;
  var {:pointer} lpp_1: int;
  var {:pointer} lpp_2: int;
  var {:pointer} lpp_3: int;
  var {:pointer} lpp_4: int;
  var {:pointer} lpDeviceID_1: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;

  anon0:
    call {:si_unique_call 1728} vslice_dummy_var_346 := __HAVOC_malloc(4);
    lpp := actual_lpp;
    lpp_1 := actual_lpp_1;
    lpp_2 := actual_lpp_2;
    lpp_3 := actual_lpp_3;
    lpp_4 := actual_lpp_4;
    lpDeviceID_1 := actual_lpDeviceID_1;
    call {:si_unique_call 1729} vslice_dummy_var_347 := __HAVOC_malloc(36);
    call {:si_unique_call 1730} vslice_dummy_var_348 := __HAVOC_malloc(20);
    call {:si_unique_call 1731} vslice_dummy_var_349 := __HAVOC_malloc(20);
    call {:si_unique_call 1732} vslice_dummy_var_350 := __HAVOC_malloc(20);
    call {:si_unique_call 1733} vslice_dummy_var_351 := __HAVOC_malloc(40);
    call {:si_unique_call 1734} vslice_dummy_var_352 := __HAVOC_malloc(36);
    call {:si_unique_call 1735} vslice_dummy_var_353 := __HAVOC_malloc(40);
    call {:si_unique_call 1736} vslice_dummy_var_354 := __HAVOC_malloc(52);
    lpKey_2 := lpDeviceID_1;
    goto L7;

  L7:
    call {:si_unique_call 1737} Tmp_1211, sdv_780, Tmp_1215, Tmp_1216, Tmp_1217, lpKey_2, sdv_782, Tmp_1218, sdv_785, Tmp_1222, sdv_788, sdv_790, sdv_791, Tmp_1225, sdv_795, lpValue_1, Tmp_1227, sdv_796, wKeyLength_1 := ParDot3ParseDevId_loop_L7(Tmp_1211, sdv_780, Tmp_1215, Tmp_1216, Tmp_1217, lpKey_2, sdv_782, Tmp_1218, sdv_785, Tmp_1222, sdv_788, sdv_790, sdv_791, Tmp_1225, sdv_795, lpValue_1, Tmp_1227, sdv_796, wKeyLength_1, lpp, lpp_1, lpp_2, lpp_3, lpp_4);
    goto L7_last;

  L7_last:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} lpKey_2 != 0;
    goto L8;

  L8:
    call {:si_unique_call 1738} ParDot3ParseDevId_loop_L8(lpKey_2);
    goto L8_last;

  L8_last:
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] == 32;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    assume false;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] != 32;
    call {:si_unique_call 1739} lpValue_1 := StringChr(lpKey_2, 58);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} lpValue_1 != 0;
    wKeyLength_1 := lpValue_1;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] != 46;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] != 49;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] == 67;
    Tmp_1222 := wKeyLength_1;
    call {:si_unique_call 1740} sdv_790 := RtlCompareMemory(0, 0, Tmp_1222);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_790 == 4;
    goto L30;

  L30:
    assume {:nonnull} lpp_2 != 0;
    assume lpp_2 > 0;
    call {:si_unique_call 1741} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon55_Else_dummy;

  anon55_Else_dummy:
    assume false;
    return;

  anon55_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} sdv_790 != 4;
    Tmp_1225 := wKeyLength_1;
    call {:si_unique_call 1742} sdv_791 := RtlCompareMemory(0, 0, Tmp_1225);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_791 != 12;
    call {:si_unique_call 1743} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon57_Else_dummy;

  anon57_Else_dummy:
    assume false;
    return;

  anon57_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon57_Then_dummy;

  anon57_Then_dummy:
    assume false;
    return;

  anon56_Then:
    assume {:partition} sdv_791 == 12;
    goto L30;

  anon73_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] != 67;
    call {:si_unique_call 1744} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon72_Else_dummy;

  anon72_Else_dummy:
    assume false;
    return;

  anon72_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon72_Then_dummy;

  anon72_Then_dummy:
    assume false;
    return;

  anon74_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] == 49;
    Tmp_1218 := wKeyLength_1;
    call {:si_unique_call 1745} sdv_795 := RtlCompareMemory(0, 0, Tmp_1218);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_795 == 9;
    assume {:nonnull} lpp_3 != 0;
    assume lpp_3 > 0;
    call {:si_unique_call 1746} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon59_Else_dummy;

  anon59_Else_dummy:
    assume false;
    return;

  anon59_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    assume false;
    return;

  anon58_Then:
    assume {:partition} sdv_795 != 9;
    Tmp_1211 := wKeyLength_1;
    call {:si_unique_call 1747} sdv_785 := RtlCompareMemory(0, 0, Tmp_1211);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_785 == 9;
    assume {:nonnull} lpp != 0;
    assume lpp > 0;
    call {:si_unique_call 1748} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    assume false;
    return;

  anon61_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon60_Then:
    assume {:partition} sdv_785 != 9;
    Tmp_1227 := wKeyLength_1;
    call {:si_unique_call 1749} sdv_788 := RtlCompareMemory(0, 0, Tmp_1227);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_788 == 8;
    assume {:nonnull} lpp_1 != 0;
    assume lpp_1 > 0;
    call {:si_unique_call 1750} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    assume false;
    return;

  anon63_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} sdv_788 != 8;
    Tmp_1217 := wKeyLength_1;
    call {:si_unique_call 1751} sdv_780 := RtlCompareMemory(0, 0, Tmp_1217);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_780 == 8;
    assume {:nonnull} lpp_4 != 0;
    assume lpp_4 > 0;
    call {:si_unique_call 1752} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    assume false;
    return;

  anon65_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    assume false;
    return;

  anon64_Then:
    assume {:partition} sdv_780 != 8;
    call {:si_unique_call 1753} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    assume false;
    return;

  anon66_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] == 46;
    Tmp_1215 := wKeyLength_1;
    call {:si_unique_call 1754} sdv_796 := RtlCompareMemory(0, 0, Tmp_1215);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} sdv_796 == 4;
    assume {:nonnull} lpp_1 != 0;
    assume lpp_1 > 0;
    call {:si_unique_call 1755} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon68_Else_dummy;

  anon68_Else_dummy:
    assume false;
    return;

  anon68_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon68_Then_dummy;

  anon68_Then_dummy:
    assume false;
    return;

  anon67_Then:
    assume {:partition} sdv_796 != 4;
    Tmp_1216 := wKeyLength_1;
    call {:si_unique_call 1756} sdv_782 := RtlCompareMemory(0, 0, Tmp_1216);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} sdv_782 == 4;
    assume {:nonnull} lpp_4 != 0;
    assume lpp_4 > 0;
    call {:si_unique_call 1757} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon70_Then_dummy;

  anon70_Then_dummy:
    assume false;
    return;

  anon69_Then:
    assume {:partition} sdv_782 != 4;
    call {:si_unique_call 1758} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    assume false;
    return;

  anon71_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon71_Then_dummy;

  anon71_Then_dummy:
    assume false;
    return;

  anon53_Then:
    assume {:partition} lpValue_1 == 0;
    goto L1;

  L1:
    return;

  anon51_Then:
    assume {:partition} lpKey_2 == 0;
    goto L1;
}



procedure {:origName "PptCancelRoutine"} PptCancelRoutine(actual_DeviceObject_18: int, actual_Irp_36: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptCancelRoutine"} PptCancelRoutine(actual_DeviceObject_18: int, actual_Irp_36: int)
{
  var {:pointer} Fdx_9: int;
  var {:scalar} SyncContext_4: int;
  var {:pointer} DeviceObject_18: int;
  var {:pointer} Irp_36: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_3267: int;

  anon0:
    call {:si_unique_call 1759} vslice_dummy_var_355 := __HAVOC_malloc(4);
    call {:si_unique_call 1760} SyncContext_4 := __HAVOC_malloc(8);
    DeviceObject_18 := actual_DeviceObject_18;
    Irp_36 := actual_Irp_36;
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc Fdx_9;
    assume {:nonnull} Fdx_9 != 0;
    assume Fdx_9 > 0;
    assume {:nonnull} SyncContext_4 != 0;
    assume SyncContext_4 > 0;
    assume {:nonnull} Fdx_9 != 0;
    assume Fdx_9 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1761} vslice_dummy_var_357 := KeSynchronizeExecution(0, li2bplFunctionConstant193, SyncContext_4);
    goto L14;

  L14:
    call {:si_unique_call 1762} vslice_dummy_var_358 := sdv_RemoveEntryList(0);
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    havoc vslice_dummy_var_3267;
    call {:si_unique_call 1763} IoReleaseCancelSpinLock(vslice_dummy_var_3267);
    assume {:nonnull} Fdx_9 != 0;
    assume Fdx_9 > 0;
    call {:si_unique_call 1764} vslice_dummy_var_359 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(Fdx_9), Irp_36);
    call {:si_unique_call 1765} vslice_dummy_var_360 := P4CompleteRequest(Irp_36, -1073741536, 0);
    return;

  anon3_Then:
    call {:si_unique_call 1766} vslice_dummy_var_356 := PptSynchronizedDecrement(SyncContext_4);
    goto L14;
}



procedure {:origName "ParSynchCompletionRoutine"} ParSynchCompletionRoutine(actual_DeviceObject_19: int, actual_Irp_37: int, actual_Event_4: int) returns (Tmp_1230: int);
  free ensures {:va_keep} Tmp_1230 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParSynchCompletionRoutine"} ParSynchCompletionRoutine(actual_DeviceObject_19: int, actual_Irp_37: int, actual_Event_4: int) returns (Tmp_1230: int)
{
  var {:pointer} Event_4: int;
  var vslice_dummy_var_361: int;

  anon0:
    Event_4 := actual_Event_4;
    call {:si_unique_call 1767} vslice_dummy_var_361 := KeSetEvent(Event_4, 0, 0);
    Tmp_1230 := -1073741802;
    return;
}



procedure {:origName "String2Num"} String2Num(actual_lpp_5: int, actual_c: int, actual_num: int) returns (Tmp_1232: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1232 == 0 || Tmp_1232 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "String2Num"} String2Num(actual_lpp_5: int, actual_c: int, actual_num: int) returns (Tmp_1232: int)
{
  var {:scalar} cnt_1: int;
  var {:pointer} Tmp_1233: int;
  var {:scalar} Tmp_1235: int;
  var {:scalar} cc: int;
  var {:pointer} lpp_5: int;
  var {:scalar} c: int;
  var {:pointer} num: int;

  anon0:
    lpp_5 := actual_lpp_5;
    c := actual_c;
    num := actual_num;
    cnt_1 := 0;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto L9;

  L9:
    call {:si_unique_call 1768} cnt_1, Tmp_1233, Tmp_1235, cc := String2Num_loop_L9(cnt_1, Tmp_1233, Tmp_1235, cc, lpp_5, num);
    goto L9_last;

  L9_last:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    havoc Tmp_1233;
    assume {:nonnull} Tmp_1233 != 0;
    assume Tmp_1233 > 0;
    cc := Mem_T.INT4[Tmp_1233];
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} cc >= 48;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 57 >= cc;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 16 * Mem_T.INT4[num] + cc - 48;
    goto L14;

  L14:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    Tmp_1235 := cnt_1;
    cnt_1 := cnt_1 + 1;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_1235 > 100;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    Tmp_1232 := 0;
    goto L1;

  L1:
    return;

  anon36_Then:
    assume {:partition} 100 >= Tmp_1235;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    assume false;
    return;

  anon26_Then:
    assume {:partition} cc > 57;
    goto L11;

  L11:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} cc >= 65;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 70 >= cc;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 16 * Mem_T.INT4[num] + cc - 55;
    goto L14;

  anon28_Then:
    assume {:partition} cc > 70;
    goto L20;

  L20:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} cc >= 97;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} 102 >= cc;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 16 * Mem_T.INT4[num] + cc - 87;
    goto L14;

  anon30_Then:
    assume {:partition} cc > 102;
    goto L23;

  L23:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} cc == c;
    goto L27;

  L27:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    Tmp_1232 := 1;
    goto L1;

  anon29_Then:
    assume {:partition} cc != c;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} cc != 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} cc == 121;
    goto L31;

  L31:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := -1;
    Tmp_1232 := 0;
    goto L1;

  anon32_Then:
    assume {:partition} cc != 121;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} cc != 89;
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    Tmp_1232 := 0;
    goto L1;

  anon33_Then:
    assume {:partition} cc == 89;
    goto L31;

  anon31_Then:
    assume {:partition} cc == 0;
    goto L27;

  anon27_Then:
    assume {:partition} 97 > cc;
    goto L23;

  anon25_Then:
    assume {:partition} 65 > cc;
    goto L20;

  anon35_Then:
    assume {:partition} 48 > cc;
    goto L11;

  anon34_Then:
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    Tmp_1232 := 0;
    goto L1;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_2: int)
{
  var {:pointer} ListHead_2: int;
  var vslice_dummy_var_362: int;

  anon0:
    call {:si_unique_call 1769} vslice_dummy_var_362 := __HAVOC_malloc(4);
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    return;
}



procedure {:origName "P4ReadRawIeee1284DeviceId"} P4ReadRawIeee1284DeviceId(actual_Controller_18: int) returns (Tmp_1238: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4ReadRawIeee1284DeviceId"} P4ReadRawIeee1284DeviceId(actual_Controller_18: int) returns (Tmp_1238: int)
{
  var {:scalar} Tmp_1239: int;
  var {:pointer} Tmp_1240: int;
  var {:scalar} deviceIndex: int;
  var {:scalar} tmpBufLen_3: int;
  var {:scalar} Tmp_1242: int;
  var {:scalar} length_3: int;
  var {:scalar} tryCount: int;
  var {:scalar} minValidDevId_1: int;
  var {:scalar} ignoreXflag: int;
  var {:scalar} truncationIndex: int;
  var {:scalar} ieeeState: int;
  var {:scalar} Tmp_1246: int;
  var {:scalar} Tmp_1248: int;
  var {:pointer} sdv_804: int;
  var {:scalar} Tmp_1249: int;
  var {:scalar} maxTries_2: int;
  var {:scalar} Tmp_1253: int;
  var {:pointer} sdv_805: int;
  var {:pointer} sdv_806: int;
  var {:pointer} sdv_807: int;
  var {:pointer} sdv_808: int;
  var {:scalar} Tmp_1257: int;
  var {:scalar} lowLengthByte: int;
  var {:dopa} {:scalar} bytesTransferred: int;
  var {:pointer} sdv_810: int;
  var {:pointer} sdv_811: int;
  var {:pointer} Tmp_1258: int;
  var {:pointer} tmpBuf: int;
  var {:pointer} Tmp_1259: int;
  var {:scalar} highLengthByte: int;
  var {:pointer} sdv_812: int;
  var {:scalar} status_39: int;
  var {:pointer} devIdBuffer: int;
  var {:pointer} sdv_813: int;
  var {:pointer} Controller_18: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;

  anon0:
    call {:si_unique_call 1770} ieeeState := __HAVOC_malloc(20);
    call {:si_unique_call 1771} bytesTransferred := __HAVOC_malloc(4);
    Controller_18 := actual_Controller_18;
    call {:si_unique_call 1772} Tmp_1240 := __HAVOC_malloc(8);
    call {:si_unique_call 1773} vslice_dummy_var_363 := __HAVOC_malloc(48);
    call {:si_unique_call 1774} vslice_dummy_var_364 := __HAVOC_malloc(28);
    call {:si_unique_call 1775} vslice_dummy_var_365 := __HAVOC_malloc(28);
    call {:si_unique_call 1776} Tmp_1258 := __HAVOC_malloc(8);
    call {:si_unique_call 1777} Tmp_1259 := __HAVOC_malloc(8);
    call {:si_unique_call 1778} vslice_dummy_var_366 := __HAVOC_malloc(32);
    call {:si_unique_call 1779} vslice_dummy_var_367 := __HAVOC_malloc(16);
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    devIdBuffer := 0;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    Mem_T.INT4[bytesTransferred] := 0;
    tryCount := 1;
    maxTries_2 := 3;
    minValidDevId_1 := 14;
    ignoreXflag := 0;
    goto L23;

  L23:
    call {:si_unique_call 1780} Tmp_1239, Tmp_1240, deviceIndex, tmpBufLen_3, Tmp_1242, length_3, tryCount, ignoreXflag, truncationIndex, Tmp_1246, Tmp_1248, sdv_804, Tmp_1249, Tmp_1253, sdv_805, sdv_806, sdv_807, sdv_808, Tmp_1257, lowLengthByte, sdv_810, sdv_811, Tmp_1258, tmpBuf, Tmp_1259, highLengthByte, sdv_812, status_39, devIdBuffer, sdv_813 := P4ReadRawIeee1284DeviceId_loop_L23(Tmp_1239, Tmp_1240, deviceIndex, tmpBufLen_3, Tmp_1242, length_3, tryCount, minValidDevId_1, ignoreXflag, truncationIndex, ieeeState, Tmp_1246, Tmp_1248, sdv_804, Tmp_1249, maxTries_2, Tmp_1253, sdv_805, sdv_806, sdv_807, sdv_808, Tmp_1257, lowLengthByte, bytesTransferred, sdv_810, sdv_811, Tmp_1258, tmpBuf, Tmp_1259, highLengthByte, sdv_812, status_39, devIdBuffer, sdv_813, Controller_18);
    goto L23_last;

  L23_last:
    call {:si_unique_call 1797} status_39 := P4IeeeEnter1284Mode(Controller_18, 4, ieeeState);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} status_39 == 0;
    tmpBufLen_3 := 1024;
    call {:si_unique_call 1781} sdv_807 := ExAllocatePoolWithTag(1, tmpBufLen_3, -797810352);
    tmpBuf := sdv_807;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} tmpBuf != 0;
    call {:si_unique_call 1782} sdv_RtlZeroMemory(0, tmpBufLen_3);
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    Tmp_1257 := tmpBufLen_3 - 1;
    call {:si_unique_call 1783} status_39 := P4NibbleModeRead(Controller_18, tmpBuf, Tmp_1257, bytesTransferred, ieeeState);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} status_39 >= 0;
    assume {:nonnull} tmpBuf != 0;
    assume tmpBuf > 0;
    highLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[tmpBuf]);
    assume {:nonnull} tmpBuf != 0;
    assume tmpBuf > 0;
    lowLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[tmpBuf + 1 * 4]);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} highLengthByte > 2;
    devIdBuffer := 0;
    goto L55;

  L55:
    call {:si_unique_call 1784} sdv_ExFreePool(0);
    goto L44;

  L44:
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} devIdBuffer != 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    sdv_810 := 0;
    goto L91;

  L91:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} sdv_810 != 0;
    goto L93;

  L93:
    deviceIndex := 0;
    goto L94;

  L94:
    call {:si_unique_call 1785} Tmp_1240, deviceIndex, Tmp_1246, Tmp_1248, sdv_804, Tmp_1253, Tmp_1258, Tmp_1259, sdv_812 := P4ReadRawIeee1284DeviceId_loop_L94(Tmp_1240, deviceIndex, Tmp_1246, Tmp_1248, sdv_804, Tmp_1253, Tmp_1258, Tmp_1259, sdv_812, devIdBuffer);
    goto L94_last;

  L94_last:
    assume {:CounterLoop 14} {:Counter "deviceIndex"} true;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} 14 > deviceIndex;
    Tmp_1246 := deviceIndex;
    havoc Tmp_1259;
    assume {:nonnull} Tmp_1259 != 0;
    assume Tmp_1259 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    Tmp_1253 := deviceIndex;
    havoc Tmp_1240;
    assume {:nonnull} Tmp_1240 != 0;
    assume Tmp_1240 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    sdv_804 := 0;
    goto L102;

  L102:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} sdv_804 != 0;
    Tmp_1248 := deviceIndex;
    havoc Tmp_1258;
    assume {:nonnull} Tmp_1258 != 0;
    assume Tmp_1258 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    sdv_812 := 0;
    goto L109;

  L109:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_812 != 0;
    ignoreXflag := 1;
    goto L86;

  L86:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} ignoreXflag != 0;
    call {:si_unique_call 1786} P4IeeeTerminate1284Mode(Controller_18, ieeeState, 0);
    goto L29;

  L29:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} devIdBuffer != 0;
    goto L31;

  L31:
    Tmp_1238 := devIdBuffer;
    return;

  anon62_Then:
    assume {:partition} devIdBuffer == 0;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.INT4[bytesTransferred] > 0;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} minValidDevId_1 > Mem_T.INT4[bytesTransferred];
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} maxTries_2 > tryCount;
    tryCount := tryCount + 1;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    Mem_T.INT4[bytesTransferred] := 0;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    assume false;
    return;

  anon65_Then:
    assume {:partition} tryCount >= maxTries_2;
    goto L31;

  anon64_Then:
    assume {:partition} Mem_T.INT4[bytesTransferred] >= minValidDevId_1;
    goto L31;

  anon63_Then:
    assume {:partition} 0 >= Mem_T.INT4[bytesTransferred];
    goto L31;

  anon69_Then:
    assume {:partition} ignoreXflag == 0;
    call {:si_unique_call 1787} P4IeeeTerminate1284Mode(Controller_18, ieeeState, 1);
    goto L29;

  anon73_Then:
    assume {:partition} sdv_812 == 0;
    goto L103;

  L103:
    deviceIndex := deviceIndex + 1;
    goto L103_dummy;

  L103_dummy:
    assume false;
    return;

  anon84_Then:
    call {:si_unique_call 1788} sdv_812 := __HAVOC_malloc(1);
    goto L109;

  anon72_Then:
    assume {:partition} sdv_804 == 0;
    goto L103;

  anon83_Then:
    call {:si_unique_call 1789} sdv_804 := __HAVOC_malloc(1);
    goto L102;

  anon82_Then:
    goto L86;

  anon71_Then:
    assume {:partition} deviceIndex >= 14;
    goto L86;

  anon70_Then:
    assume {:partition} sdv_810 == 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    sdv_806 := 0;
    goto L115;

  L115:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} sdv_806 == 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    sdv_805 := 0;
    goto L120;

  L120:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_805 == 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    sdv_813 := 0;
    goto L125;

  L125:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} sdv_813 == 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    sdv_808 := 0;
    goto L130;

  L130:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_808 != 0;
    goto L93;

  anon77_Then:
    assume {:partition} sdv_808 == 0;
    goto L86;

  anon88_Then:
    call {:si_unique_call 1790} sdv_808 := __HAVOC_malloc(1);
    goto L130;

  anon76_Then:
    assume {:partition} sdv_813 != 0;
    goto L93;

  anon87_Then:
    call {:si_unique_call 1791} sdv_813 := __HAVOC_malloc(1);
    goto L125;

  anon75_Then:
    assume {:partition} sdv_805 != 0;
    goto L93;

  anon86_Then:
    call {:si_unique_call 1792} sdv_805 := __HAVOC_malloc(1);
    goto L120;

  anon74_Then:
    assume {:partition} sdv_806 != 0;
    goto L93;

  anon85_Then:
    call {:si_unique_call 1793} sdv_806 := __HAVOC_malloc(1);
    goto L115;

  anon81_Then:
    call {:si_unique_call 1794} sdv_810 := __HAVOC_malloc(1);
    goto L91;

  anon80_Then:
    assume {:partition} devIdBuffer == 0;
    goto L86;

  anon79_Then:
    assume {:partition} 2 >= highLengthByte;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Mem_T.INT4[bytesTransferred] >= minValidDevId_1;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    Tmp_1239 := Mem_T.INT4[bytesTransferred] + 1;
    call {:si_unique_call 1795} sdv_811 := ExAllocatePoolWithTag(1, Tmp_1239, -797810352);
    devIdBuffer := sdv_811;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} devIdBuffer != 0;
    length_3 := highLengthByte * 256 + lowLengthByte;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} length_3 >= minValidDevId_1;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Mem_T.INT4[bytesTransferred] > length_3;
    Tmp_1249 := length_3;
    goto L80;

  L80:
    truncationIndex := Tmp_1249;
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    call {:si_unique_call 1796} sdv_RtlCopyMemory(0, 0, Mem_T.INT4[bytesTransferred]);
    Tmp_1242 := truncationIndex;
    assume {:nonnull} devIdBuffer != 0;
    assume devIdBuffer > 0;
    Mem_T.INT4[devIdBuffer + Tmp_1242 * 4] := 0;
    goto L55;

  anon68_Then:
    assume {:partition} length_3 >= Mem_T.INT4[bytesTransferred];
    goto L77;

  L77:
    assume {:nonnull} bytesTransferred != 0;
    assume bytesTransferred > 0;
    Tmp_1249 := Mem_T.INT4[bytesTransferred];
    goto L80;

  anon90_Then:
    assume {:partition} minValidDevId_1 > length_3;
    goto L77;

  anon89_Then:
    assume {:partition} devIdBuffer == 0;
    goto L55;

  anon67_Then:
    assume {:partition} minValidDevId_1 > Mem_T.INT4[bytesTransferred];
    goto L55;

  anon66_Then:
    assume {:partition} 0 > status_39;
    goto L55;

  anon78_Then:
    assume {:partition} tmpBuf == 0;
    goto L44;

  anon61_Then:
    assume {:partition} status_39 != 0;
    goto L29;
}



procedure {:origName "P4WritePortNameToDevNode"} P4WritePortNameToDevNode(actual_Pdo_24: int, actual_Location: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "P4WritePortNameToDevNode"} P4WritePortNameToDevNode(actual_Pdo_24: int, actual_Location: int)
{
  var {:scalar} name: int;
  var {:scalar} Tmp_1264: int;
  var {:pointer} pdx_25: int;
  var {:scalar} sdv_819: int;
  var {:scalar} status_40: int;
  var {:pointer} Tmp_1269: int;
  var {:pointer} Pdo_24: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;

  anon0:
    call {:si_unique_call 1798} name := __HAVOC_malloc(12);
    call {:si_unique_call 1799} vslice_dummy_var_368 := __HAVOC_malloc(4);
    Pdo_24 := actual_Pdo_24;
    call {:si_unique_call 1800} vslice_dummy_var_370 := __HAVOC_malloc(40);
    call {:si_unique_call 1801} vslice_dummy_var_371 := __HAVOC_malloc(28);
    call {:si_unique_call 1802} vslice_dummy_var_372 := __HAVOC_malloc(28);
    call {:si_unique_call 1803} Tmp_1269 := __HAVOC_malloc(36);
    assume {:nonnull} Pdo_24 != 0;
    assume Pdo_24 > 0;
    havoc pdx_25;
    call {:si_unique_call 1804} sdv_RtlZeroMemory(0, 20);
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L24;

  L24:
    call {:si_unique_call 1805} status_40 := IoOpenDeviceRegistryKey(0, 1, 983103, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_40 == 0;
    Tmp_1269 := strConst__li2bpl83;
    call {:si_unique_call 1806} RtlInitUnicodeString(name, Tmp_1269);
    Tmp_1264 := (sdv_819 + 1) * 2;
    call {:si_unique_call 1807} vslice_dummy_var_374 := ZwSetValueKey(0, 0, 0, 1, 0, Tmp_1264);
    call {:si_unique_call 1808} vslice_dummy_var_369 := ZwClose(0);
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} status_40 != 0;
    goto L1;

  anon13_Then:
    goto L17;

  L17:
    call {:si_unique_call 1809} vslice_dummy_var_375 := corral_nondet();
    goto L24;

  anon14_Then:
    goto L17;

  anon15_Then:
    goto L14;

  L14:
    call {:si_unique_call 1810} vslice_dummy_var_373 := corral_nondet();
    goto L24;

  anon11_Then:
    goto L14;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_3: int) returns (Tmp_1270: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_3: int) returns (Tmp_1270: int)
{
  var {:pointer} NextEntry_1: int;
  var {:pointer} Entry_2: int;
  var {:pointer} ListHead_3: int;

  anon0:
    ListHead_3 := actual_ListHead_3;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    havoc Entry_2;
    assume {:nonnull} Entry_2 != 0;
    assume Entry_2 > 0;
    havoc NextEntry_1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 1811} FatalListEntryError(ListHead_3, Entry_2, NextEntry_1);
    goto L12;

  L12:
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    assume {:nonnull} NextEntry_1 != 0;
    assume NextEntry_1 > 0;
    Tmp_1270 := Entry_2;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_376: int;

  anon0:
    call {:si_unique_call 1812} vslice_dummy_var_376 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "StringChr"} StringChr(actual_string_1: int, actual_c_1: int) returns (Tmp_1274: int);
  free ensures {:va_keep} Tmp_1274 == 0 || Tmp_1274 == actual_string_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "StringChr"} StringChr(actual_string_1: int, actual_c_1: int) returns (Tmp_1274: int)
{
  var {:pointer} string_1: int;
  var {:scalar} c_1: int;

  anon0:
    string_1 := actual_string_1;
    c_1 := actual_c_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} string_1 != 0;
    goto L5;

  L5:
    call {:si_unique_call 1813} StringChr_loop_L5(string_1, c_1);
    goto L5_last;

  L5_last:
    assume {:nonnull} string_1 != 0;
    assume string_1 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[string_1] != 0;
    assume {:nonnull} string_1 != 0;
    assume string_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[string_1] == c_1;
    Tmp_1274 := string_1;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Mem_T.INT4[string_1] != c_1;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    assume false;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[string_1] == 0;
    Tmp_1274 := 0;
    goto L1;

  anon7_Then:
    assume {:partition} string_1 == 0;
    Tmp_1274 := 0;
    goto L1;
}



procedure {:origName "ParAllocPortCompletionRoutine"} ParAllocPortCompletionRoutine(actual_DeviceObject_20: int, actual_Irp_38: int, actual_Event_5: int) returns (Tmp_1276: int);
  free ensures {:va_keep} Tmp_1276 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParAllocPortCompletionRoutine"} ParAllocPortCompletionRoutine(actual_DeviceObject_20: int, actual_Irp_38: int, actual_Event_5: int) returns (Tmp_1276: int)
{
  var {:pointer} Event_5: int;
  var vslice_dummy_var_377: int;

  anon0:
    Event_5 := actual_Event_5;
    call {:si_unique_call 1814} vslice_dummy_var_377 := KeSetEvent(Event_5, 0, 0);
    Tmp_1276 := -1073741802;
    return;
}



procedure {:origName "PptSetCancelRoutine"} PptSetCancelRoutine(actual_Irp_39: int, actual_CancelRoutine_1: int) returns (Tmp_1278: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptSetCancelRoutine"} PptSetCancelRoutine(actual_Irp_39: int, actual_CancelRoutine_1: int) returns (Tmp_1278: int)
{
  var {:scalar} sdv_821: int;
  var {:pointer} Irp_39: int;
  var {:scalar} CancelRoutine_1: int;

  anon0:
    Irp_39 := actual_Irp_39;
    CancelRoutine_1 := actual_CancelRoutine_1;
    call {:si_unique_call 1815} sdv_821 := sdv_IoSetCancelRoutine(Irp_39, CancelRoutine_1);
    Tmp_1278 := sdv_821;
    return;
}



procedure {:origName "ParBuildSendInternalIoctl"} ParBuildSendInternalIoctl(actual_IoControlCode_1: int, actual_TargetDeviceObject: int, actual_InputBuffer_1: int, actual_InputBufferLength_1: int, actual_OutputBuffer_1: int, actual_OutputBufferLength_1: int, actual_RequestedTimeout: int) returns (Tmp_1280: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, s, Mem_T.MinorFunction__IO_STACK_LOCATION, completion;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "ParBuildSendInternalIoctl"} ParBuildSendInternalIoctl(actual_IoControlCode_1: int, actual_TargetDeviceObject: int, actual_InputBuffer_1: int, actual_InputBufferLength_1: int, actual_OutputBuffer_1: int, actual_OutputBufferLength_1: int, actual_RequestedTimeout: int) returns (Tmp_1280: int)
{
  var {:pointer} irpSp_8: int;
  var {:scalar} Tmp_1281: int;
  var {:scalar} timeout_3: int;
  var {:scalar} Tmp_1282: int;
  var {:pointer} irp: int;
  var {:scalar} status_41: int;
  var {:scalar} event_1: int;
  var {:scalar} IoControlCode_1: int;
  var {:pointer} TargetDeviceObject: int;
  var {:pointer} InputBuffer_1: int;
  var {:scalar} InputBufferLength_1: int;
  var {:pointer} OutputBuffer_1: int;
  var {:scalar} OutputBufferLength_1: int;
  var {:pointer} RequestedTimeout: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;

  anon0:
    call {:si_unique_call 1816} timeout_3 := __HAVOC_malloc(20);
    call {:si_unique_call 1817} Tmp_1282 := __HAVOC_malloc(20);
    call {:si_unique_call 1818} event_1 := __HAVOC_malloc(156);
    IoControlCode_1 := actual_IoControlCode_1;
    TargetDeviceObject := actual_TargetDeviceObject;
    InputBuffer_1 := actual_InputBuffer_1;
    InputBufferLength_1 := actual_InputBufferLength_1;
    OutputBuffer_1 := actual_OutputBuffer_1;
    OutputBufferLength_1 := actual_OutputBufferLength_1;
    RequestedTimeout := actual_RequestedTimeout;
    call {:si_unique_call 1819} sdv_do_paged_code_check();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} InputBufferLength_1 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} OutputBufferLength_1 != 0;
    Tmp_1280 := -1073741823;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} OutputBufferLength_1 == 0;
    goto L12;

  L12:
    assume {:nonnull} TargetDeviceObject != 0;
    assume TargetDeviceObject > 0;
    havoc Tmp_1281;
    call {:si_unique_call 1820} irp := IoAllocateIrp(Tmp_1281, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} irp != 0;
    call {:si_unique_call 1821} irpSp_8 := sdv_IoGetNextIrpStackLocation(irp);
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} InputBufferLength_1 != 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    goto L32;

  L32:
    call {:si_unique_call 1822} KeInitializeEvent(event_1, 0, 0);
    call {:si_unique_call 1823} sdv_IoSetCompletionRoutine(irp, li2bplFunctionConstant226, event_1, 1, 1, 1);
    call {:si_unique_call 1824} status_41 := ParCallDriver(TargetDeviceObject, irp);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_41 >= 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} RequestedTimeout != 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    goto L49;

  L49:
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    call {:si_unique_call 1825} status_41 := KeWaitForSingleObject(0, 0, 0, 0, timeout_3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} status_41 == 258;
    call {:si_unique_call 1826} vslice_dummy_var_378 := IoCancelIrp(0);
    call {:si_unique_call 1827} vslice_dummy_var_379 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L55;

  L55:
    assume {:nonnull} irp != 0;
    assume irp > 0;
    status_41 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(irp))];
    call {:si_unique_call 1828} IoFreeIrp(0);
    Tmp_1280 := status_41;
    goto L1;

  anon23_Then:
    assume {:partition} status_41 != 258;
    goto L55;

  anon22_Then:
    assume {:partition} RequestedTimeout == 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    goto L49;

  anon21_Then:
    assume {:partition} 0 > status_41;
    call {:si_unique_call 1829} IoFreeIrp(0);
    Tmp_1280 := status_41;
    goto L1;

  anon24_Then:
    assume {:partition} InputBufferLength_1 == 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} OutputBufferLength_1 != 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    goto L32;

  anon20_Then:
    assume {:partition} OutputBufferLength_1 == 0;
    goto L32;

  anon19_Then:
    assume {:partition} irp == 0;
    Tmp_1280 := -1073741670;
    goto L1;

  anon17_Then:
    assume {:partition} InputBufferLength_1 == 0;
    goto L12;
}



procedure {:origName "PptSynchCompletionRoutine"} PptSynchCompletionRoutine(actual_DevObj_2: int, actual_Irp_40: int, actual_EventIn: int) returns (Tmp_1284: int);
  free ensures {:va_keep} Tmp_1284 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptSynchCompletionRoutine"} PptSynchCompletionRoutine(actual_DevObj_2: int, actual_Irp_40: int, actual_EventIn: int) returns (Tmp_1284: int)
{
  var {:pointer} Event_6: int;
  var {:pointer} EventIn: int;
  var vslice_dummy_var_380: int;

  anon0:
    EventIn := actual_EventIn;
    Event_6 := EventIn;
    call {:si_unique_call 1830} vslice_dummy_var_380 := KeSetEvent(Event_6, 0, 0);
    Tmp_1284 := -1073741802;
    return;
}



procedure {:origName "_InlineInterlockedCompareExchangePointer"} _InlineInterlockedCompareExchangePointer(actual_Destination_4: int, actual_ExChange: int, actual_Comperand: int) returns (Tmp_1286: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_InlineInterlockedCompareExchangePointer"} _InlineInterlockedCompareExchangePointer(actual_Destination_4: int, actual_ExChange: int, actual_Comperand: int) returns (Tmp_1286: int)
{
  var {:scalar} sdv_829: int;

  anon0:
    Tmp_1286 := sdv_829;
    return;
}



procedure {:origName "PptSynchronizedIncrement"} PptSynchronizedIncrement(actual_SyncContext_5: int) returns (Tmp_1288: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1288 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptSynchronizedIncrement"} PptSynchronizedIncrement(actual_SyncContext_5: int) returns (Tmp_1288: int)
{
  var {:pointer} Tmp_1290: int;
  var {:pointer} Tmp_1291: int;
  var {:pointer} Tmp_1292: int;
  var {:pointer} Tmp_1293: int;
  var {:pointer} Tmp_1294: int;
  var {:pointer} SyncContext_5: int;

  anon0:
    SyncContext_5 := actual_SyncContext_5;
    Tmp_1292 := SyncContext_5;
    Tmp_1294 := SyncContext_5;
    assume {:nonnull} Tmp_1294 != 0;
    assume Tmp_1294 > 0;
    havoc Tmp_1293;
    Tmp_1291 := SyncContext_5;
    assume {:nonnull} Tmp_1291 != 0;
    assume Tmp_1291 > 0;
    havoc Tmp_1290;
    assume {:nonnull} Tmp_1290 != 0;
    assume Tmp_1290 > 0;
    assume {:nonnull} Tmp_1293 != 0;
    assume Tmp_1293 > 0;
    Mem_T.INT4[Tmp_1293] := Mem_T.INT4[Tmp_1290] + 1;
    assume {:nonnull} Tmp_1290 != 0;
    assume Tmp_1290 > 0;
    assume {:nonnull} Tmp_1292 != 0;
    assume Tmp_1292 > 0;
    Tmp_1288 := 1;
    return;
}



procedure {:origName "_sdv_init50"} _sdv_init50();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init50"} _sdv_init50()
{
  var vslice_dummy_var_381: int;

  anon0:
    call {:si_unique_call 1831} vslice_dummy_var_381 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_382: int;

  anon0:
    call {:si_unique_call 1832} vslice_dummy_var_382 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoCancelRemove"} PptFdoCancelRemove(actual_DeviceObject_21: int, actual_Irp_41: int) returns (Tmp_1299: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1299 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoCancelRemove"} PptFdoCancelRemove(actual_DeviceObject_21: int, actual_Irp_41: int) returns (Tmp_1299: int)
{
  var {:pointer} fdx_15: int;
  var {:pointer} DeviceObject_21: int;
  var {:pointer} Irp_41: int;

  anon0:
    DeviceObject_21 := actual_DeviceObject_21;
    Irp_41 := actual_Irp_41;
    assume {:nonnull} DeviceObject_21 != 0;
    assume DeviceObject_21 > 0;
    havoc fdx_15;
    call {:si_unique_call 1833} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_15 != 0;
    assume fdx_15 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} fdx_15 != 0;
    assume fdx_15 > 0;
    goto L9;

  L9:
    call {:si_unique_call 1834} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_41 != 0;
    assume Irp_41 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_41))] := 0;
    call {:si_unique_call 1835} Tmp_1299 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_15, Irp_41);
    return;

  anon3_Then:
    goto L9;
}



procedure {:origName "PptFdoPnp"} PptFdoPnp(actual_Fdo_6: int, actual_Irp_42: int) returns (Tmp_1301: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, Mem_T.Buffer__UNICODE_STRING, s, completion;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoPnp"} PptFdoPnp(actual_Fdo_6: int, actual_Irp_42: int) returns (Tmp_1301: int)
{
  var {:pointer} irpSp_9: int;
  var {:scalar} Tmp_1303: int;
  var {:scalar} status_42: int;
  var {:pointer} Fdo_6: int;
  var {:pointer} Irp_42: int;
  var vslice_dummy_var_3268: int;

  anon0:
    Fdo_6 := actual_Fdo_6;
    Irp_42 := actual_Irp_42;
    assume {:nonnull} Fdo_6 != 0;
    assume Fdo_6 > 0;
    call {:si_unique_call 1836} irpSp_9 := sdv_IoGetCurrentIrpStackLocation(Irp_42);
    call {:si_unique_call 1837} status_42 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_42 != 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    havoc vslice_dummy_var_3268;
    call {:si_unique_call 1838} Tmp_1301 := P4CompleteRequest(Irp_42, -1073741738, vslice_dummy_var_3268);
    goto L1;

  L1:
    return;

  anon55_Then:
    assume {:partition} status_42 == 0;
    assume {:nonnull} irpSp_9 != 0;
    assume irpSp_9 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} 25 > Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(irpSp_9)];
    assume {:nonnull} irpSp_9 != 0;
    assume irpSp_9 > 0;
    Tmp_1303 := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(irpSp_9)];
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume Tmp_1303 != 24;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume Tmp_1303 != 23;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume Tmp_1303 != 22;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Tmp_1303 != 21;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_1303 != 20;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_1303 != 19;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_1303 != 18;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_1303 != 17;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_1303 != 16;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_1303 != 15;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_1303 != 14;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_1303 != 13;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_1303 != 12;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_1303 != 11;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_1303 != 10;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_1303 != 9;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_1303 != 8;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_1303 != 7;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_1303 != 6;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_1303 != 5;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_1303 != 4;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_1303 != 3;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_1303 != 2;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_1303 != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume false;
    return;

  anon81_Then:
    assume Tmp_1303 == 0;
    assume {:IndirectCall} true;
    call {:si_unique_call 1839} Tmp_1301 := PptFdoStartDevice(Fdo_6, Irp_42);
    goto L1;

  anon80_Then:
    assume Tmp_1303 == 1;
    assume {:IndirectCall} true;
    call {:si_unique_call 1840} Tmp_1301 := PptFdoQueryRemove(Fdo_6, Irp_42);
    goto L1;

  anon79_Then:
    assume Tmp_1303 == 2;
    assume {:IndirectCall} true;
    call {:si_unique_call 1841} Tmp_1301 := PptFdoRemoveDevice(Fdo_6, Irp_42);
    goto L1;

  anon78_Then:
    assume Tmp_1303 == 3;
    assume {:IndirectCall} true;
    call {:si_unique_call 1842} Tmp_1301 := PptFdoCancelRemove(Fdo_6, Irp_42);
    goto L1;

  anon77_Then:
    assume Tmp_1303 == 4;
    assume {:IndirectCall} true;
    call {:si_unique_call 1843} Tmp_1301 := PptFdoStopDevice(Fdo_6, Irp_42);
    goto L1;

  anon76_Then:
    assume Tmp_1303 == 5;
    assume {:IndirectCall} true;
    call {:si_unique_call 1844} Tmp_1301 := PptFdoQueryStop(Fdo_6, Irp_42);
    goto L1;

  anon75_Then:
    assume Tmp_1303 == 6;
    assume {:IndirectCall} true;
    call {:si_unique_call 1845} Tmp_1301 := PptFdoCancelStop(Fdo_6, Irp_42);
    goto L1;

  anon74_Then:
    assume Tmp_1303 == 7;
    assume {:IndirectCall} true;
    call {:si_unique_call 1846} Tmp_1301 := PptFdoQueryDeviceRelations(Fdo_6, Irp_42);
    goto L1;

  anon73_Then:
    assume Tmp_1303 == 8;
    assume {:IndirectCall} true;
    call {:si_unique_call 1847} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon72_Then:
    assume Tmp_1303 == 9;
    assume {:IndirectCall} true;
    call {:si_unique_call 1848} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon71_Then:
    assume Tmp_1303 == 10;
    assume {:IndirectCall} true;
    call {:si_unique_call 1849} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon70_Then:
    assume Tmp_1303 == 11;
    assume {:IndirectCall} true;
    call {:si_unique_call 1850} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon69_Then:
    assume Tmp_1303 == 12;
    assume {:IndirectCall} true;
    call {:si_unique_call 1851} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon68_Then:
    assume Tmp_1303 == 13;
    assume {:IndirectCall} true;
    call {:si_unique_call 1852} Tmp_1301 := PptFdoFilterResourceRequirements(Fdo_6, Irp_42);
    goto L1;

  anon67_Then:
    assume Tmp_1303 == 14;
    assume {:IndirectCall} true;
    call {:si_unique_call 1853} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon66_Then:
    assume Tmp_1303 == 15;
    assume {:IndirectCall} true;
    call {:si_unique_call 1854} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon65_Then:
    assume Tmp_1303 == 16;
    assume {:IndirectCall} true;
    call {:si_unique_call 1855} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon64_Then:
    assume Tmp_1303 == 17;
    assume {:IndirectCall} true;
    call {:si_unique_call 1856} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon63_Then:
    assume Tmp_1303 == 18;
    assume {:IndirectCall} true;
    call {:si_unique_call 1857} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon62_Then:
    assume Tmp_1303 == 19;
    assume {:IndirectCall} true;
    call {:si_unique_call 1858} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon61_Then:
    assume Tmp_1303 == 20;
    assume {:IndirectCall} true;
    call {:si_unique_call 1859} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon60_Then:
    assume Tmp_1303 == 21;
    assume {:IndirectCall} true;
    call {:si_unique_call 1860} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon59_Then:
    assume Tmp_1303 == 22;
    assume {:IndirectCall} true;
    call {:si_unique_call 1861} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon58_Then:
    assume Tmp_1303 == 23;
    assume {:IndirectCall} true;
    call {:si_unique_call 1862} Tmp_1301 := PptFdoSurpriseRemoval(Fdo_6, Irp_42);
    goto L1;

  anon57_Then:
    assume Tmp_1303 == 24;
    assume {:IndirectCall} true;
    call {:si_unique_call 1863} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;

  anon56_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(irpSp_9)] >= 25;
    call {:si_unique_call 1864} Tmp_1301 := PptFdoDefaultPnpHandler(Fdo_6, Irp_42);
    goto L1;
}



procedure {:origName "PptFdoQueryStop"} PptFdoQueryStop(actual_DeviceObject_22: int, actual_Irp_43: int) returns (Tmp_1304: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.INT4, Mem_T.MinorFunction__IO_STACK_LOCATION, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1304 == 17 || Tmp_1304 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoQueryStop"} PptFdoQueryStop(actual_DeviceObject_22: int, actual_Irp_43: int) returns (Tmp_1304: int)
{
  var {:scalar} handlesOpen: int;
  var {:pointer} fdx_17: int;
  var {:scalar} status_43: int;
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Irp_43: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_3269: int;

  anon0:
    DeviceObject_22 := actual_DeviceObject_22;
    Irp_43 := actual_Irp_43;
    status_43 := 0;
    assume {:nonnull} DeviceObject_22 != 0;
    assume DeviceObject_22 > 0;
    havoc fdx_17;
    call {:si_unique_call 1865} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_17 != 0;
    assume fdx_17 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    handlesOpen := 0;
    goto L41;

  L41:
    call {:si_unique_call 1866} ExReleaseFastMutex(0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} handlesOpen != 0;
    status_43 := 17;
    assume {:nonnull} Irp_43 != 0;
    assume Irp_43 > 0;
    havoc vslice_dummy_var_3269;
    call {:si_unique_call 1867} vslice_dummy_var_384 := P4CompleteRequest(Irp_43, status_43, vslice_dummy_var_3269);
    assume {:nonnull} fdx_17 != 0;
    assume fdx_17 > 0;
    call {:si_unique_call 1868} vslice_dummy_var_383 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_17), Irp_43);
    goto L24;

  L24:
    Tmp_1304 := status_43;
    return;

  anon6_Then:
    assume {:partition} handlesOpen == 0;
    assume {:nonnull} Irp_43 != 0;
    assume Irp_43 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_43))] := 0;
    call {:si_unique_call 1869} status_43 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_17, Irp_43);
    call {:si_unique_call 1870} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_17 != 0;
    assume fdx_17 > 0;
    call {:si_unique_call 1871} ExReleaseFastMutex(0);
    goto L24;

  anon5_Then:
    handlesOpen := 1;
    goto L41;
}



procedure {:origName "PptFdoQueryRemove"} PptFdoQueryRemove(actual_DeviceObject_23: int, actual_Irp_44: int) returns (Tmp_1306: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1306 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoQueryRemove"} PptFdoQueryRemove(actual_DeviceObject_23: int, actual_Irp_44: int) returns (Tmp_1306: int)
{
  var {:pointer} fdx_18: int;
  var {:pointer} DeviceObject_23: int;
  var {:pointer} Irp_44: int;

  anon0:
    DeviceObject_23 := actual_DeviceObject_23;
    Irp_44 := actual_Irp_44;
    assume {:nonnull} DeviceObject_23 != 0;
    assume DeviceObject_23 > 0;
    havoc fdx_18;
    call {:si_unique_call 1872} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_18 != 0;
    assume fdx_18 > 0;
    call {:si_unique_call 1873} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_44 != 0;
    assume Irp_44 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_44))] := 0;
    call {:si_unique_call 1874} Tmp_1306 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_18, Irp_44);
    return;
}



procedure {:origName "PptFdoStartDevice"} PptFdoStartDevice(actual_DeviceObject_24: int, actual_Irp_45: int) returns (Tmp_1308: int);
  modifies alloc, Mem_T.INT4, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, Mem_T.Status__IO_STATUS_BLOCK, completion, s, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoStartDevice"} PptFdoStartDevice(actual_DeviceObject_24: int, actual_Irp_45: int) returns (Tmp_1308: int)
{
  var {:dopa} {:scalar} foundDma: int;
  var {:pointer} Tmp_1309: int;
  var {:pointer} Tmp_1310: int;
  var {:pointer} Tmp_1311: int;
  var {:pointer} Tmp_1312: int;
  var {:pointer} Tmp_1313: int;
  var {:dopa} {:scalar} foundPort: int;
  var {:dopa} {:scalar} foundIrq_1: int;
  var {:dopa} {:scalar} DellNationalPC87364: int;
  var {:pointer} fdx_19: int;
  var {:pointer} Tmp_1315: int;
  var {:scalar} status_44: int;
  var {:dopa} {:scalar} DisableWarmPoll: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} Irp_45: int;
  var boogieTmp: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_3270: int;

  anon0:
    call {:si_unique_call 1875} foundDma := __HAVOC_malloc(4);
    call {:si_unique_call 1876} foundPort := __HAVOC_malloc(4);
    call {:si_unique_call 1877} foundIrq_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1878} DellNationalPC87364 := __HAVOC_malloc(4);
    call {:si_unique_call 1879} DisableWarmPoll := __HAVOC_malloc(4);
    DeviceObject_24 := actual_DeviceObject_24;
    Irp_45 := actual_Irp_45;
    call {:si_unique_call 1880} Tmp_1309 := __HAVOC_malloc(76);
    call {:si_unique_call 1881} Tmp_1310 := __HAVOC_malloc(80);
    call {:si_unique_call 1882} Tmp_1311 := __HAVOC_malloc(76);
    call {:si_unique_call 1883} Tmp_1312 := __HAVOC_malloc(60);
    call {:si_unique_call 1884} Tmp_1313 := __HAVOC_malloc(76);
    call {:si_unique_call 1885} Tmp_1315 := __HAVOC_malloc(64);
    assume {:nonnull} DeviceObject_24 != 0;
    assume DeviceObject_24 > 0;
    havoc fdx_19;
    assume {:nonnull} foundPort != 0;
    assume foundPort > 0;
    Mem_T.INT4[foundPort] := 0;
    assume {:nonnull} foundIrq_1 != 0;
    assume foundIrq_1 > 0;
    Mem_T.INT4[foundIrq_1] := 0;
    assume {:nonnull} foundDma != 0;
    assume foundDma > 0;
    Mem_T.INT4[foundDma] := 0;
    call {:si_unique_call 1886} status_44 := PptPnpBounceAndCatchPnpIrp(fdx_19, Irp_45);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_44 >= 0;
    goto L18;

  L18:
    call {:si_unique_call 1887} status_44 := PptPnpStartScanCmResourceList(fdx_19, Irp_45, foundPort, foundIrq_1, foundDma);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_44 < 0;
    goto L67;

  L67:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} status_44 >= 0;
    call {:si_unique_call 1888} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    call {:si_unique_call 1889} ExReleaseFastMutex(0);
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    assume {:nonnull} DisableWarmPoll != 0;
    assume DisableWarmPoll > 0;
    Mem_T.INT4[DisableWarmPoll] := 0;
    Tmp_1311 := strConst__li2bpl16;
    Tmp_1315 := strConst__li2bpl85;
    call {:si_unique_call 1890} vslice_dummy_var_390 := PptRegGetDword(1, Tmp_1311, Tmp_1315, DisableWarmPoll);
    assume {:nonnull} DisableWarmPoll != 0;
    assume DisableWarmPoll > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.INT4[DisableWarmPoll] == 0;
    Tmp_1309 := strConst__li2bpl16;
    Tmp_1312 := strConst__li2bpl86;
    call {:si_unique_call 1891} vslice_dummy_var_391 := PptRegGetDword(1, Tmp_1309, Tmp_1312, WarmPollPeriod);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} 5 > Mem_T.INT4[WarmPollPeriod];
    Mem_T.INT4[WarmPollPeriod] := 5;
    goto L92;

  L92:
    call {:si_unique_call 1892} vslice_dummy_var_387 := P5FdoCreateThread(fdx_19);
    goto L68;

  L68:
    call {:si_unique_call 1893} vslice_dummy_var_386 := P4CompleteRequest(Irp_45, status_44, 0);
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    call {:si_unique_call 1894} vslice_dummy_var_388 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_19), Irp_45);
    Tmp_1308 := status_44;
    return;

  anon47_Then:
    assume {:partition} Mem_T.INT4[WarmPollPeriod] >= 5;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.INT4[WarmPollPeriod] > 20;
    Mem_T.INT4[WarmPollPeriod] := 20;
    goto L92;

  anon48_Then:
    assume {:partition} 20 >= Mem_T.INT4[WarmPollPeriod];
    goto L92;

  anon46_Then:
    assume {:partition} Mem_T.INT4[DisableWarmPoll] != 0;
    goto L68;

  anon45_Then:
    goto L68;

  anon44_Then:
    assume {:partition} 0 > status_44;
    goto L68;

  anon35_Then:
    assume {:partition} 0 <= status_44;
    assume {:nonnull} foundDma != 0;
    assume foundDma > 0;
    assume {:nonnull} foundIrq_1 != 0;
    assume foundIrq_1 > 0;
    assume {:nonnull} foundPort != 0;
    assume foundPort > 0;
    call {:si_unique_call 1895} status_44 := PptPnpStartValidateResources(DeviceObject_24, Mem_T.INT4[foundPort], Mem_T.INT4[foundIrq_1], Mem_T.INT4[foundDma]);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} status_44 < 0;
    goto L67;

  anon36_Then:
    assume {:partition} 0 <= status_44;
    assume {:nonnull} DellNationalPC87364 != 0;
    assume DellNationalPC87364 > 0;
    Mem_T.INT4[DellNationalPC87364] := 0;
    Tmp_1313 := strConst__li2bpl16;
    Tmp_1310 := strConst__li2bpl84;
    call {:si_unique_call 1896} vslice_dummy_var_389 := PptRegGetDword(1, Tmp_1313, Tmp_1310, DellNationalPC87364);
    assume {:nonnull} DellNationalPC87364 != 0;
    assume DellNationalPC87364 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Mem_T.INT4[DellNationalPC87364] != 0;
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto L42;

  L42:
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    havoc vslice_dummy_var_3270;
    call {:si_unique_call 1897} PptDellNationalPC87364WorkAround(vslice_dummy_var_3270);
    goto L36;

  L36:
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    call {:si_unique_call 1898} boogieTmp := PptInitiate1284_3(fdx_19);
    call {:si_unique_call 1899} status_44 := PptDetectChipFilter(fdx_19);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_44 >= 0;
    goto L54;

  L54:
    call {:si_unique_call 1900} status_44 := PptWmiInitWmi(DeviceObject_24);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} status_44 < 0;
    goto L67;

  anon42_Then:
    assume {:partition} 0 <= status_44;
    call {:si_unique_call 1901} status_44 := IoSetDeviceInterfaceState(0, 1);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_44 >= 0;
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    goto L67;

  anon43_Then:
    assume {:partition} 0 > status_44;
    status_44 := -1073741637;
    goto L67;

  anon41_Then:
    assume {:partition} 0 > status_44;
    call {:si_unique_call 1902} vslice_dummy_var_385 := PptDetectPortType(fdx_19);
    goto L54;

  anon39_Then:
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L42;

  anon40_Then:
    goto L36;

  anon38_Then:
    goto L36;

  anon37_Then:
    assume {:partition} Mem_T.INT4[DellNationalPC87364] == 0;
    goto L36;

  anon33_Then:
    assume {:partition} 0 > status_44;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_44 != -1073741637;
    goto L67;

  anon34_Then:
    assume {:partition} status_44 == -1073741637;
    goto L18;
}



procedure {:origName "PptFdoStopDevice"} PptFdoStopDevice(actual_DeviceObject_25: int, actual_Irp_46: int) returns (Tmp_1316: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1316 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoStopDevice"} PptFdoStopDevice(actual_DeviceObject_25: int, actual_Irp_46: int) returns (Tmp_1316: int)
{
  var {:pointer} fdx_20: int;
  var {:pointer} DeviceObject_25: int;
  var {:pointer} Irp_46: int;

  anon0:
    DeviceObject_25 := actual_DeviceObject_25;
    Irp_46 := actual_Irp_46;
    assume {:nonnull} DeviceObject_25 != 0;
    assume DeviceObject_25 > 0;
    havoc fdx_20;
    call {:si_unique_call 1903} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_20 != 0;
    assume fdx_20 > 0;
    assume {:nonnull} fdx_20 != 0;
    assume fdx_20 > 0;
    call {:si_unique_call 1904} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_46 != 0;
    assume Irp_46 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_46))] := 0;
    call {:si_unique_call 1905} Tmp_1316 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_20, Irp_46);
    return;
}



procedure {:origName "PptDellNationalPC87364WorkAround"} PptDellNationalPC87364WorkAround(actual_EcpController: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDellNationalPC87364WorkAround"} PptDellNationalPC87364WorkAround(actual_EcpController: int)
{
  var {:pointer} Tmp_1318: int;
  var {:scalar} oldIrql: int;
  var {:pointer} EcpController: int;
  var vslice_dummy_var_392: int;

  anon0:
    call {:si_unique_call 1906} vslice_dummy_var_392 := __HAVOC_malloc(4);
    EcpController := actual_EcpController;
    call {:si_unique_call 1907} Tmp_1318 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1318 != 0;
    assume Tmp_1318 > 0;
    Mem_T.INT4[Tmp_1318] := oldIrql;
    call {:si_unique_call 1908} sdv_KeRaiseIrql(31, Tmp_1318);
    assume {:nonnull} Tmp_1318 != 0;
    assume Tmp_1318 > 0;
    oldIrql := Mem_T.INT4[Tmp_1318];
    call {:si_unique_call 1909} sdv_KeLowerIrql(oldIrql);
    return;
}



procedure {:origName "PptFdoFilterResourceRequirements"} PptFdoFilterResourceRequirements(actual_DeviceObject_26: int, actual_Irp_47: int) returns (Tmp_1320: int);
  modifies alloc, Mem_T.INT4, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, Mem_T.Status__IO_STATUS_BLOCK, completion, s;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoFilterResourceRequirements"} PptFdoFilterResourceRequirements(actual_DeviceObject_26: int, actual_Irp_47: int) returns (Tmp_1320: int)
{
  var {:pointer} IrpStack: int;
  var {:pointer} pResourceRequirementsIn: int;
  var {:dopa} {:scalar} filterResourceMethod: int;
  var {:scalar} sdv_857: int;
  var {:scalar} sdv_858: int;
  var {:pointer} fdx_21: int;
  var {:scalar} status_45: int;
  var {:pointer} Tmp_1322: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} Irp_47: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_3271: int;
  var vslice_dummy_var_3272: int;

  anon0:
    call {:si_unique_call 1910} filterResourceMethod := __HAVOC_malloc(4);
    DeviceObject_26 := actual_DeviceObject_26;
    Irp_47 := actual_Irp_47;
    call {:si_unique_call 1911} Tmp_1322 := __HAVOC_malloc(84);
    assume {:nonnull} DeviceObject_26 != 0;
    assume DeviceObject_26 > 0;
    havoc fdx_21;
    assume {:nonnull} filterResourceMethod != 0;
    assume filterResourceMethod > 0;
    Mem_T.INT4[filterResourceMethod] := 1;
    call {:si_unique_call 1912} status_45 := PptPnpBounceAndCatchPnpIrp(fdx_21, Irp_47);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_45 >= 0;
    goto L15;

  L15:
    assume {:nonnull} Irp_47 != 0;
    assume Irp_47 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 1913} IrpStack := sdv_IoGetCurrentIrpStackLocation(Irp_47);
    assume {:nonnull} IrpStack != 0;
    assume IrpStack > 0;
    havoc pResourceRequirementsIn;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} pResourceRequirementsIn == 0;
    goto L22;

  L22:
    assume {:nonnull} Irp_47 != 0;
    assume Irp_47 > 0;
    havoc vslice_dummy_var_3271;
    call {:si_unique_call 1914} vslice_dummy_var_393 := P4CompleteRequest(Irp_47, status_45, vslice_dummy_var_3271);
    assume {:nonnull} fdx_21 != 0;
    assume fdx_21 > 0;
    call {:si_unique_call 1915} vslice_dummy_var_394 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_21), Irp_47);
    Tmp_1320 := status_45;
    return;

  anon24_Then:
    assume {:partition} pResourceRequirementsIn != 0;
    goto L18;

  L18:
    Tmp_1322 := strConst__li2bpl87;
    assume {:nonnull} fdx_21 != 0;
    assume fdx_21 > 0;
    havoc vslice_dummy_var_3272;
    call {:si_unique_call 1916} vslice_dummy_var_395 := PptRegGetDeviceParameterDword(vslice_dummy_var_3272, Tmp_1322, filterResourceMethod);
    assume {:nonnull} filterResourceMethod != 0;
    assume filterResourceMethod > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.INT4[filterResourceMethod] != 0;
    assume {:nonnull} filterResourceMethod != 0;
    assume filterResourceMethod > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[filterResourceMethod] == 1;
    call {:si_unique_call 1917} sdv_858 := PptPnpFilterExistsNonIrqResourceList(pResourceRequirementsIn);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_858 != 0;
    call {:si_unique_call 1918} PptPnpFilterRemoveIrqResourceLists(pResourceRequirementsIn);
    goto L22;

  anon21_Then:
    assume {:partition} sdv_858 == 0;
    call {:si_unique_call 1919} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists(pResourceRequirementsIn);
    goto L22;

  anon23_Then:
    assume {:partition} Mem_T.INT4[filterResourceMethod] != 1;
    goto L22;

  anon20_Then:
    assume {:partition} Mem_T.INT4[filterResourceMethod] == 0;
    call {:si_unique_call 1920} sdv_857 := PptPnpFilterExistsNonIrqResourceList(pResourceRequirementsIn);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_857 != 0;
    call {:si_unique_call 1921} PptPnpFilterRemoveIrqResourceLists(pResourceRequirementsIn);
    goto L22;

  anon22_Then:
    assume {:partition} sdv_857 == 0;
    goto L22;

  anon19_Then:
    assume {:nonnull} Irp_47 != 0;
    assume Irp_47 > 0;
    havoc pResourceRequirementsIn;
    goto L18;

  anon17_Then:
    assume {:partition} 0 > status_45;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_45 != -1073741637;
    goto L22;

  anon18_Then:
    assume {:partition} status_45 == -1073741637;
    goto L15;
}



procedure {:origName "PptFdoSurpriseRemoval"} PptFdoSurpriseRemoval(actual_DeviceObject_27: int, actual_Irp_48: int) returns (Tmp_1323: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1323 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoSurpriseRemoval"} PptFdoSurpriseRemoval(actual_DeviceObject_27: int, actual_Irp_48: int) returns (Tmp_1323: int)
{
  var {:pointer} Tmp_1324: int;
  var {:scalar} cancelIrql: int;
  var {:scalar} sdv_859: int;
  var {:pointer} sdv_860: int;
  var {:pointer} fdx_22: int;
  var {:pointer} nextIrp: int;
  var {:pointer} DeviceObject_27: int;
  var {:pointer} Irp_48: int;
  var vslice_dummy_var_396: int;
  var vslice_dummy_var_3273: int;

  anon0:
    DeviceObject_27 := actual_DeviceObject_27;
    Irp_48 := actual_Irp_48;
    assume {:nonnull} DeviceObject_27 != 0;
    assume DeviceObject_27 > 0;
    havoc fdx_22;
    call {:si_unique_call 1922} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_22 != 0;
    assume fdx_22 > 0;
    call {:si_unique_call 1923} ExReleaseFastMutex(0);
    call {:si_unique_call 1924} Tmp_1324 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1324 != 0;
    assume Tmp_1324 > 0;
    Mem_T.INT4[Tmp_1324] := cancelIrql;
    call {:si_unique_call 1925} IoAcquireCancelSpinLock(Tmp_1324);
    assume {:nonnull} Tmp_1324 != 0;
    assume Tmp_1324 > 0;
    cancelIrql := Mem_T.INT4[Tmp_1324];
    goto L17;

  L17:
    call {:si_unique_call 1926} Tmp_1324, cancelIrql, sdv_859, sdv_860, nextIrp := PptFdoSurpriseRemoval_loop_L17(Tmp_1324, cancelIrql, sdv_859, sdv_860, fdx_22, nextIrp, DeviceObject_27);
    goto L17_last;

  L17_last:
    call {:si_unique_call 1934} sdv_859 := sdv_IsListEmpty(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_859 != 0;
    call {:si_unique_call 1927} IoReleaseCancelSpinLock(cancelIrql);
    call {:si_unique_call 1928} vslice_dummy_var_396 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} fdx_22 != 0;
    assume fdx_22 > 0;
    assume {:nonnull} Irp_48 != 0;
    assume Irp_48 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_48))] := 0;
    call {:si_unique_call 1929} Tmp_1323 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_22, Irp_48);
    return;

  anon3_Then:
    assume {:partition} sdv_859 == 0;
    assume {:nonnull} fdx_22 != 0;
    assume fdx_22 > 0;
    havoc vslice_dummy_var_3273;
    call {:si_unique_call 1930} sdv_860 := sdv_containing_record(vslice_dummy_var_3273, 88);
    nextIrp := sdv_860;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 1931} PptCancelRoutine(DeviceObject_27, nextIrp);
    call {:si_unique_call 1932} Tmp_1324 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1324 != 0;
    assume Tmp_1324 > 0;
    Mem_T.INT4[Tmp_1324] := cancelIrql;
    call {:si_unique_call 1933} IoAcquireCancelSpinLock(Tmp_1324);
    assume {:nonnull} Tmp_1324 != 0;
    assume Tmp_1324 > 0;
    cancelIrql := Mem_T.INT4[Tmp_1324];
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PptFdoCancelStop"} PptFdoCancelStop(actual_DeviceObject_28: int, actual_Irp_49: int) returns (Tmp_1325: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1325 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoCancelStop"} PptFdoCancelStop(actual_DeviceObject_28: int, actual_Irp_49: int) returns (Tmp_1325: int)
{
  var {:pointer} fdx_23: int;
  var {:pointer} DeviceObject_28: int;
  var {:pointer} Irp_49: int;

  anon0:
    DeviceObject_28 := actual_DeviceObject_28;
    Irp_49 := actual_Irp_49;
    assume {:nonnull} DeviceObject_28 != 0;
    assume DeviceObject_28 > 0;
    havoc fdx_23;
    call {:si_unique_call 1935} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_23 != 0;
    assume fdx_23 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} fdx_23 != 0;
    assume fdx_23 > 0;
    goto L9;

  L9:
    call {:si_unique_call 1936} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_49 != 0;
    assume Irp_49 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_49))] := 0;
    call {:si_unique_call 1937} Tmp_1325 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_23, Irp_49);
    return;

  anon3_Then:
    goto L9;
}



procedure {:origName "_sdv_init32"} _sdv_init32();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init32"} _sdv_init32()
{
  var vslice_dummy_var_397: int;

  anon0:
    call {:si_unique_call 1938} vslice_dummy_var_397 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoDefaultPnpHandler"} PptFdoDefaultPnpHandler(actual_DeviceObject_29: int, actual_Irp_50: int) returns (Tmp_1329: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1329 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoDefaultPnpHandler"} PptFdoDefaultPnpHandler(actual_DeviceObject_29: int, actual_Irp_50: int) returns (Tmp_1329: int)
{
  var {:pointer} DeviceObject_29: int;
  var {:pointer} Irp_50: int;
  var vslice_dummy_var_3274: int;

  anon0:
    DeviceObject_29 := actual_DeviceObject_29;
    Irp_50 := actual_Irp_50;
    assume {:nonnull} DeviceObject_29 != 0;
    assume DeviceObject_29 > 0;
    havoc vslice_dummy_var_3274;
    call {:si_unique_call 1939} Tmp_1329 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(vslice_dummy_var_3274, Irp_50);
    return;
}



procedure {:origName "PptFdoRemoveDevice"} PptFdoRemoveDevice(actual_Fdo_7: int, actual_Irp_51: int) returns (Tmp_1331: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1331 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoRemoveDevice"} PptFdoRemoveDevice(actual_Fdo_7: int, actual_Irp_51: int) returns (Tmp_1331: int)
{
  var {:scalar} Tmp_1332: int;
  var {:scalar} daisyChainId_1: int;
  var {:pointer} pdo_3: int;
  var {:pointer} Tmp_1334: int;
  var {:scalar} daisyChainMaxId: int;
  var {:scalar} Tmp_1335: int;
  var {:pointer} pdo_4: int;
  var {:pointer} fdx_24: int;
  var {:pointer} threadObjPointer: int;
  var {:pointer} Tmp_1337: int;
  var {:pointer} pdo_5: int;
  var {:scalar} status_46: int;
  var {:scalar} Tmp_1338: int;
  var {:pointer} Tmp_1339: int;
  var {:pointer} Fdo_7: int;
  var {:pointer} Irp_51: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_3275: int;

  anon0:
    Fdo_7 := actual_Fdo_7;
    Irp_51 := actual_Irp_51;
    call {:si_unique_call 1940} Tmp_1334 := __HAVOC_malloc(16);
    call {:si_unique_call 1941} Tmp_1337 := __HAVOC_malloc(16);
    call {:si_unique_call 1942} Tmp_1339 := __HAVOC_malloc(16);
    assume {:nonnull} Fdo_7 != 0;
    assume Fdo_7 > 0;
    havoc fdx_24;
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    havoc pdo_4;
    call {:si_unique_call 1943} P4DestroyPdo(pdo_4);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto L7;

  L7:
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L22;

  L22:
    daisyChainMaxId := 1;
    daisyChainId_1 := 0;
    goto L24;

  L24:
    call {:si_unique_call 1944} Tmp_1332, daisyChainId_1, Tmp_1334, Tmp_1335, Tmp_1337, pdo_5, Tmp_1338, Tmp_1339 := PptFdoRemoveDevice_loop_L24(Tmp_1332, daisyChainId_1, Tmp_1334, daisyChainMaxId, Tmp_1335, fdx_24, Tmp_1337, pdo_5, Tmp_1338, Tmp_1339);
    goto L24_last;

  L24_last:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} daisyChainMaxId >= daisyChainId_1;
    Tmp_1332 := daisyChainId_1;
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    havoc Tmp_1337;
    assume {:nonnull} Tmp_1337 != 0;
    assume Tmp_1337 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    Tmp_1335 := daisyChainId_1;
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    havoc Tmp_1334;
    assume {:nonnull} Tmp_1334 != 0;
    assume Tmp_1334 > 0;
    havoc pdo_5;
    call {:si_unique_call 1945} P4DestroyPdo(pdo_5);
    Tmp_1338 := daisyChainId_1;
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    havoc Tmp_1339;
    assume {:nonnull} Tmp_1339 != 0;
    assume Tmp_1339 > 0;
    goto L27;

  L27:
    daisyChainId_1 := daisyChainId_1 + 1;
    goto L27_dummy;

  L27_dummy:
    assume false;
    return;

  anon24_Then:
    goto L27;

  anon18_Then:
    assume {:partition} daisyChainId_1 > daisyChainMaxId;
    call {:si_unique_call 1946} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    call {:si_unique_call 1947} ExReleaseFastMutex(0);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    call {:si_unique_call 1948} threadObjPointer := _InlineInterlockedExchangePointer(ThreadObjectPointer__FDO_EXTENSION(fdx_24), 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} threadObjPointer != 0;
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    call {:si_unique_call 1949} vslice_dummy_var_402 := KeSetEvent(FdoThreadEvent__FDO_EXTENSION(fdx_24), 0, 1);
    call {:si_unique_call 1950} vslice_dummy_var_399 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 1951} vslice_dummy_var_400 := sdv_ObDereferenceObject(0);
    goto L47;

  L47:
    call {:si_unique_call 1952} vslice_dummy_var_398 := IoWMIRegistrationControl(0, 2);
    call {:si_unique_call 1953} vslice_dummy_var_401 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    assume {:nonnull} Irp_51 != 0;
    assume Irp_51 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_51))] := 0;
    call {:si_unique_call 1954} sdv_IoSkipCurrentIrpStackLocation(Irp_51);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    havoc vslice_dummy_var_3275;
    call {:si_unique_call 1955} status_46 := sdv_IoCallDriver(vslice_dummy_var_3275, Irp_51);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume Irp_51 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 1956} SLIC_sdv_IoCallDriver_exit(0);
    goto L72;

  L72:
    call {:si_unique_call 1957} sdv_IoReleaseRemoveLockAndWait(0, 0);
    call {:si_unique_call 1958} RtlFreeUnicodeString(0);
    call {:si_unique_call 1959} RtlFreeUnicodeString(0);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    call {:si_unique_call 1960} sdv_ExFreePool(0);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto L82;

  L82:
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 1961} sdv_ExFreePool(0);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto L87;

  L87:
    call {:si_unique_call 1962} IoDetachDevice(0);
    call {:si_unique_call 1963} IoDeleteDevice(0);
    Tmp_1331 := status_46;
    return;

  anon21_Then:
    goto L87;

  anon20_Then:
    goto L82;

  anon22_Then:
    assume !(Irp_51 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L72;

  anon19_Then:
    assume {:partition} threadObjPointer == 0;
    goto L47;

  anon17_Then:
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    havoc pdo_3;
    call {:si_unique_call 1964} P4DestroyPdo(pdo_3);
    assume {:nonnull} fdx_24 != 0;
    assume fdx_24 > 0;
    goto L22;

  anon23_Then:
    goto L7;
}



procedure {:origName "PptFdoQueryDeviceRelations"} PptFdoQueryDeviceRelations(actual_DeviceObject_30: int, actual_Irp_52: int) returns (Tmp_1340: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.Buffer__UNICODE_STRING, s, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, completion;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_1340 == 259 || Tmp_1340 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoQueryDeviceRelations"} PptFdoQueryDeviceRelations(actual_DeviceObject_30: int, actual_Irp_52: int) returns (Tmp_1340: int)
{
  var {:pointer} irpSp_10: int;
  var {:scalar} type_1: int;
  var {:pointer} DeviceObject_30: int;
  var {:pointer} Irp_52: int;
  var vslice_dummy_var_3276: int;

  anon0:
    DeviceObject_30 := actual_DeviceObject_30;
    Irp_52 := actual_Irp_52;
    call {:si_unique_call 1965} irpSp_10 := sdv_IoGetCurrentIrpStackLocation(Irp_52);
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    havoc type_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} type_1 != 0;
    assume {:nonnull} DeviceObject_30 != 0;
    assume DeviceObject_30 > 0;
    havoc vslice_dummy_var_3276;
    call {:si_unique_call 1966} Tmp_1340 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(vslice_dummy_var_3276, Irp_52);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} type_1 == 0;
    call {:si_unique_call 1967} Tmp_1340 := PptFdoHandleBusRelations(DeviceObject_30, Irp_52);
    goto L1;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_403: int;

  anon0:
    call {:si_unique_call 1968} vslice_dummy_var_403 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_404: int;

  anon0:
    call {:si_unique_call 1969} vslice_dummy_var_404 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptDetermineFifoWidth"} PptDetermineFifoWidth(actual_Fdx_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetermineFifoWidth"} PptDetermineFifoWidth(actual_Fdx_10: int)
{
  var {:scalar} bConfigA: int;
  var {:pointer} Fdx_10: int;
  var boogieTmp: int;
  var vslice_dummy_var_405: int;

  anon0:
    call {:si_unique_call 1970} vslice_dummy_var_405 := __HAVOC_malloc(4);
    Fdx_10 := actual_Fdx_10;
    assume {:nonnull} Fdx_10 != 0;
    assume Fdx_10 > 0;
    assume {:nonnull} Fdx_10 != 0;
    assume Fdx_10 > 0;
    call {:si_unique_call 1971} bConfigA := corral_nondet();
    assume {:nonnull} Fdx_10 != 0;
    assume Fdx_10 > 0;
    call {:si_unique_call 1972} boogieTmp := corral_nondet();
    return;
}



procedure {:origName "PptEcrSetMode"} PptEcrSetMode(actual_Fdx_11: int, actual_ChipMode: int) returns (Tmp_1349: int);
  free ensures {:va_keep} Tmp_1349 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptEcrSetMode"} PptEcrSetMode(actual_Fdx_11: int, actual_ChipMode: int) returns (Tmp_1349: int)
{
  var {:scalar} ecr_1: int;
  var {:pointer} Fdx_11: int;

  anon0:
    Fdx_11 := actual_Fdx_11;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    call {:si_unique_call 1973} ecr_1 := corral_nondet();
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    ecr_1 := BAND(ecr_1, BOR(BOR(BOR(BOR(1, 2), 4), 8), 16));
    Tmp_1349 := 0;
    return;
}



procedure {:origName "PptDetectEppPort"} PptDetectEppPort(actual_Fdx_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectEppPort"} PptDetectEppPort(actual_Fdx_12: int)
{
  var {:scalar} i_35: int;
  var {:pointer} Controller_21: int;
  var {:scalar} sdv_880: int;
  var {:pointer} Fdx_12: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;

  anon0:
    call {:si_unique_call 1974} vslice_dummy_var_406 := __HAVOC_malloc(4);
    Fdx_12 := actual_Fdx_12;
    assume {:nonnull} Fdx_12 != 0;
    assume Fdx_12 > 0;
    havoc Controller_21;
    call {:si_unique_call 1975} vslice_dummy_var_408 := corral_nondet();
    assume {:nonnull} Fdx_12 != 0;
    assume Fdx_12 > 0;
    call {:si_unique_call 1976} vslice_dummy_var_409 := PptEcrSetMode(Fdx_12, 148);
    i_35 := 1;
    goto L21;

  L21:
    call {:si_unique_call 1977} i_35, sdv_880 := PptDetectEppPort_loop_L21(i_35, Controller_21, sdv_880);
    goto L21_last;

  L21_last:
    assume {:CounterLoop 1} {:Counter "i_35"} true;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 2 >= i_35;
    call {:si_unique_call 1978} sdv_880 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_880 != i_35;
    assume {:nonnull} Fdx_12 != 0;
    assume Fdx_12 > 0;
    goto L22;

  L22:
    call {:si_unique_call 1979} vslice_dummy_var_407 := PptEcrClearMode(Fdx_12);
    assume {:nonnull} Fdx_12 != 0;
    assume Fdx_12 > 0;
    return;

  anon6_Then:
    assume {:partition} sdv_880 == i_35;
    i_35 := i_35 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} i_35 > 2;
    goto L22;
}



procedure {:origName "PptSetByteMode"} PptSetByteMode(actual_Fdx_13: int, actual_ChipMode_1: int) returns (Tmp_1359: int);
  free ensures {:va_keep} Tmp_1359 == -1073741823 || Tmp_1359 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptSetByteMode"} PptSetByteMode(actual_Fdx_13: int, actual_ChipMode_1: int) returns (Tmp_1359: int)
{
  var {:scalar} Status_11: int;
  var {:pointer} Fdx_13: int;
  var {:scalar} ChipMode_1: int;

  anon0:
    Fdx_13 := actual_Fdx_13;
    ChipMode_1 := actual_ChipMode_1;
    assume {:nonnull} Fdx_13 != 0;
    assume Fdx_13 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1980} Status_11 := PptEcrSetMode(Fdx_13, ChipMode_1);
    goto L5;

  L5:
    call {:si_unique_call 1981} Status_11 := PptCheckByteMode(Fdx_13);
    Tmp_1359 := Status_11;
    return;

  anon3_Then:
    goto L5;
}



procedure {:origName "PptDetectEppPortIfDot3DevicePresent"} PptDetectEppPortIfDot3DevicePresent(actual_Fdx_14: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectEppPortIfDot3DevicePresent"} PptDetectEppPortIfDot3DevicePresent(actual_Fdx_14: int)
{
  var {:scalar} Command_6: int;
  var {:scalar} status_47: int;
  var {:pointer} Fdx_14: int;
  var vslice_dummy_var_410: int;

  anon0:
    call {:si_unique_call 1982} vslice_dummy_var_410 := __HAVOC_malloc(4);
    call {:si_unique_call 1983} Command_6 := __HAVOC_malloc(12);
    Fdx_14 := actual_Fdx_14;
    assume {:nonnull} Fdx_14 != 0;
    assume Fdx_14 > 0;
    assume {:nonnull} Fdx_14 != 0;
    assume Fdx_14 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    call {:si_unique_call 1984} status_47 := PptTrySelectDevice#1(Fdx_14, Command_6);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_47 >= 0;
    call {:si_unique_call 1985} PptDetectEppPort(Fdx_14);
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    call {:si_unique_call 1986} status_47 := PptDeselectDevice(Fdx_14, Command_6);
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} 0 > status_47;
    goto L1;

  anon6_Then:
    goto L1;
}



procedure {:origName "PptDetectEppPortIfUserRequested"} PptDetectEppPortIfUserRequested(actual_Fdx_15: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectEppPortIfUserRequested"} PptDetectEppPortIfUserRequested(actual_Fdx_15: int)
{
  var {:dopa} {:scalar} RequestEppTest: int;
  var {:pointer} Tmp_1365: int;
  var {:pointer} Fdx_15: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_3277: int;

  anon0:
    call {:si_unique_call 1987} RequestEppTest := __HAVOC_malloc(4);
    call {:si_unique_call 1988} vslice_dummy_var_411 := __HAVOC_malloc(4);
    Fdx_15 := actual_Fdx_15;
    call {:si_unique_call 1989} Tmp_1365 := __HAVOC_malloc(60);
    assume {:nonnull} RequestEppTest != 0;
    assume RequestEppTest > 0;
    Mem_T.INT4[RequestEppTest] := 0;
    Tmp_1365 := strConst__li2bpl88;
    assume {:nonnull} Fdx_15 != 0;
    assume Fdx_15 > 0;
    havoc vslice_dummy_var_3277;
    call {:si_unique_call 1990} vslice_dummy_var_412 := PptRegGetDeviceParameterDword(vslice_dummy_var_3277, Tmp_1365, RequestEppTest);
    assume {:nonnull} RequestEppTest != 0;
    assume RequestEppTest > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[RequestEppTest] != 0;
    call {:si_unique_call 1991} PptDetectEppPort(Fdx_15);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[RequestEppTest] == 0;
    goto L1;
}



procedure {:origName "PptBuildResourceList"} PptBuildResourceList(actual_Fdx_16: int, actual_Partial: int, actual_Addresses: int, actual_Resources_1: int) returns (Tmp_1366: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1366 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptBuildResourceList"} PptBuildResourceList(actual_Fdx_16: int, actual_Partial: int, actual_Addresses: int, actual_Resources_1: int) returns (Tmp_1366: int)
{
  var {:scalar} i_36: int;
  var {:pointer} Tmp_1367: int;
  var {:pointer} Tmp_1368: int;
  var {:pointer} Tmp_1370: int;
  var {:pointer} Tmp_1371: int;
  var {:scalar} Tmp_1372: int;
  var {:pointer} Tmp_1373: int;
  var {:scalar} Tmp_1374: int;
  var {:pointer} Tmp_1375: int;
  var {:pointer} Tmp_1376: int;
  var {:pointer} Tmp_1377: int;
  var {:scalar} Tmp_1378: int;
  var {:pointer} Tmp_1379: int;
  var {:pointer} Tmp_1380: int;
  var {:pointer} Tmp_1381: int;
  var {:pointer} Tmp_1382: int;
  var {:scalar} Tmp_1383: int;
  var {:scalar} Tmp_1384: int;
  var {:scalar} Tmp_1385: int;
  var {:pointer} Tmp_1386: int;
  var {:pointer} Tmp_1387: int;
  var {:pointer} Tmp_1388: int;
  var {:pointer} Fdx_16: int;
  var {:scalar} Partial: int;
  var {:pointer} Addresses: int;
  var {:pointer} Resources_1: int;

  anon0:
    Fdx_16 := actual_Fdx_16;
    Partial := actual_Partial;
    Addresses := actual_Addresses;
    Resources_1 := actual_Resources_1;
    call {:si_unique_call 1992} Tmp_1367 := __HAVOC_malloc(312);
    call {:si_unique_call 1993} Tmp_1368 := __HAVOC_malloc(292);
    call {:si_unique_call 1994} Tmp_1370 := __HAVOC_malloc(312);
    call {:si_unique_call 1995} Tmp_1371 := __HAVOC_malloc(312);
    call {:si_unique_call 1996} Tmp_1373 := __HAVOC_malloc(312);
    call {:si_unique_call 1997} Tmp_1375 := __HAVOC_malloc(292);
    call {:si_unique_call 1998} Tmp_1376 := __HAVOC_malloc(292);
    call {:si_unique_call 1999} Tmp_1377 := __HAVOC_malloc(292);
    call {:si_unique_call 2000} Tmp_1379 := __HAVOC_malloc(312);
    call {:si_unique_call 2001} Tmp_1380 := __HAVOC_malloc(312);
    call {:si_unique_call 2002} Tmp_1381 := __HAVOC_malloc(312);
    call {:si_unique_call 2003} Tmp_1382 := __HAVOC_malloc(312);
    call {:si_unique_call 2004} Tmp_1386 := __HAVOC_malloc(292);
    call {:si_unique_call 2005} Tmp_1387 := __HAVOC_malloc(312);
    call {:si_unique_call 2006} Tmp_1388 := __HAVOC_malloc(312);
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1367;
    assume {:nonnull} Fdx_16 != 0;
    assume Fdx_16 > 0;
    assume {:nonnull} Tmp_1367 != 0;
    assume Tmp_1367 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1379;
    assume {:nonnull} Fdx_16 != 0;
    assume Fdx_16 > 0;
    assume {:nonnull} Tmp_1379 != 0;
    assume Tmp_1379 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1380;
    assume {:nonnull} Tmp_1380 != 0;
    assume Tmp_1380 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1382;
    assume {:nonnull} Tmp_1382 != 0;
    assume Tmp_1382 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1371;
    assume {:nonnull} Tmp_1371 != 0;
    assume Tmp_1371 > 0;
    i_36 := 0;
    goto L11;

  L11:
    call {:si_unique_call 2007} i_36, Tmp_1368, Tmp_1370, Tmp_1372, Tmp_1373, Tmp_1374, Tmp_1375, Tmp_1376, Tmp_1377, Tmp_1378, Tmp_1381, Tmp_1383, Tmp_1384, Tmp_1385, Tmp_1386, Tmp_1387, Tmp_1388 := PptBuildResourceList_loop_L11(i_36, Tmp_1368, Tmp_1370, Tmp_1372, Tmp_1373, Tmp_1374, Tmp_1375, Tmp_1376, Tmp_1377, Tmp_1378, Tmp_1381, Tmp_1383, Tmp_1384, Tmp_1385, Tmp_1386, Tmp_1387, Tmp_1388, Partial, Addresses, Resources_1);
    goto L11_last;

  L11_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Partial > i_36;
    Tmp_1374 := i_36;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1387;
    assume {:nonnull} Tmp_1387 != 0;
    assume Tmp_1387 > 0;
    havoc Tmp_1368;
    assume {:nonnull} Tmp_1368 != 0;
    assume Tmp_1368 > 0;
    Tmp_1378 := i_36;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1381;
    assume {:nonnull} Tmp_1381 != 0;
    assume Tmp_1381 > 0;
    havoc Tmp_1377;
    assume {:nonnull} Tmp_1377 != 0;
    assume Tmp_1377 > 0;
    Tmp_1383 := i_36;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1388;
    assume {:nonnull} Tmp_1388 != 0;
    assume Tmp_1388 > 0;
    havoc Tmp_1376;
    assume {:nonnull} Tmp_1376 != 0;
    assume Tmp_1376 > 0;
    Tmp_1372 := i_36;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1373;
    assume {:nonnull} Tmp_1373 != 0;
    assume Tmp_1373 > 0;
    havoc Tmp_1386;
    Tmp_1384 := i_36;
    assume {:nonnull} Addresses != 0;
    assume Addresses > 0;
    assume {:nonnull} Tmp_1386 != 0;
    assume Tmp_1386 > 0;
    Tmp_1385 := i_36;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1370;
    assume {:nonnull} Tmp_1370 != 0;
    assume Tmp_1370 > 0;
    havoc Tmp_1375;
    assume {:nonnull} Tmp_1375 != 0;
    assume Tmp_1375 > 0;
    i_36 := i_36 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_36 >= Partial;
    Tmp_1366 := 0;
    return;
}



procedure {:origName "PptDetermineFifoDepth"} PptDetermineFifoDepth(actual_Fdx_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetermineFifoDepth"} PptDetermineFifoDepth(actual_Fdx_17: int)
{
  var {:scalar} Tmp_1389: int;
  var {:scalar} Tmp_1391: int;
  var {:scalar} limitCount: int;
  var {:scalar} writeFifoDepth: int;
  var {:scalar} sdv_888: int;
  var {:scalar} testData: int;
  var {:scalar} sdv_889: int;
  var {:scalar} wFifoDepth: int;
  var {:scalar} Tmp_1393: int;
  var {:scalar} ecr_2: int;
  var {:scalar} readFifoDepth: int;
  var {:scalar} Tmp_1395: int;
  var {:pointer} Fdx_17: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;

  anon0:
    call {:si_unique_call 2008} vslice_dummy_var_413 := __HAVOC_malloc(4);
    Fdx_17 := actual_Fdx_17;
    assume {:nonnull} Fdx_17 != 0;
    assume Fdx_17 > 0;
    assume {:nonnull} Fdx_17 != 0;
    assume Fdx_17 > 0;
    assume {:nonnull} Fdx_17 != 0;
    assume Fdx_17 > 0;
    wFifoDepth := 0;
    call {:si_unique_call 2009} vslice_dummy_var_414 := corral_nondet();
    call {:si_unique_call 2010} ecr_2 := corral_nondet();
    Tmp_1391 := BAND(ecr_2, BOR(1, 2));
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1391 == 1;
    writeFifoDepth := 0;
    limitCount := 0;
    goto L35;

  L35:
    call {:si_unique_call 2011} limitCount, writeFifoDepth, sdv_888, Tmp_1393 := PptDetermineFifoDepth_loop_L35(limitCount, writeFifoDepth, sdv_888, Tmp_1393);
    goto L35_last;

  L35_last:
    call {:si_unique_call 2015} sdv_888 := corral_nondet();
    Tmp_1393 := BAND(sdv_888, BOR(1, 2));
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Tmp_1393 != 2;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 4098 >= limitCount;
    writeFifoDepth := writeFifoDepth + 1;
    limitCount := limitCount + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} limitCount > 4098;
    goto L40;

  L40:
    readFifoDepth := 0;
    limitCount := 0;
    goto L49;

  L49:
    call {:si_unique_call 2012} Tmp_1389, limitCount, testData, sdv_889, readFifoDepth, Tmp_1395 := PptDetermineFifoDepth_loop_L49(Tmp_1389, limitCount, testData, sdv_889, readFifoDepth, Tmp_1395);
    goto L49_last;

  L49_last:
    call {:si_unique_call 2014} sdv_889 := corral_nondet();
    Tmp_1395 := BAND(sdv_889, BOR(1, 2));
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Tmp_1395 != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4098 >= limitCount;
    call {:si_unique_call 2013} testData := corral_nondet();
    Tmp_1389 := BAND(readFifoDepth, BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} testData != Tmp_1389;
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:partition} testData == Tmp_1389;
    readFifoDepth := readFifoDepth + 1;
    limitCount := limitCount + 1;
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} limitCount > 4098;
    goto L54;

  L54:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} writeFifoDepth == readFifoDepth;
    wFifoDepth := readFifoDepth;
    assume {:nonnull} Fdx_17 != 0;
    assume Fdx_17 > 0;
    goto L1;

  anon16_Then:
    assume {:partition} writeFifoDepth != readFifoDepth;
    goto L1;

  anon20_Then:
    assume {:partition} Tmp_1395 == 1;
    goto L54;

  anon19_Then:
    assume {:partition} Tmp_1393 == 2;
    goto L40;

  anon18_Then:
    assume {:partition} Tmp_1391 != 1;
    goto L1;
}



procedure {:origName "PptDetectBytePort"} PptDetectBytePort(actual_Fdx_18: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectBytePort"} PptDetectBytePort(actual_Fdx_18: int)
{
  var {:scalar} Status_12: int;
  var {:pointer} Fdx_18: int;
  var vslice_dummy_var_415: int;
  var vslice_dummy_var_416: int;

  anon0:
    call {:si_unique_call 2016} vslice_dummy_var_415 := __HAVOC_malloc(4);
    Fdx_18 := actual_Fdx_18;
    Status_12 := 0;
    call {:si_unique_call 2017} Status_12 := PptSetByteMode(Fdx_18, 52);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Status_12 >= 0;
    assume {:nonnull} Fdx_18 != 0;
    assume Fdx_18 > 0;
    goto L10;

  L10:
    call {:si_unique_call 2018} vslice_dummy_var_416 := PptClearByteMode(Fdx_18);
    return;

  anon3_Then:
    assume {:partition} 0 > Status_12;
    goto L10;
}



procedure {:origName "_sdv_init45"} _sdv_init45();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init45"} _sdv_init45()
{
  var vslice_dummy_var_417: int;

  anon0:
    call {:si_unique_call 2019} vslice_dummy_var_417 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptDetectPortCapabilities"} PptDetectPortCapabilities(actual_Fdx_19: int) returns (Tmp_1400: int);
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_1400 == 0 || Tmp_1400 == -1073741810;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectPortCapabilities"} PptDetectPortCapabilities(actual_Fdx_19: int) returns (Tmp_1400: int)
{
  var {:scalar} Tmp_1402: int;
  var {:scalar} Status_13: int;
  var {:pointer} Fdx_19: int;

  anon0:
    Fdx_19 := actual_Fdx_19;
    call {:si_unique_call 2020} PptDetectEcpPort(Fdx_19);
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    havoc Tmp_1402;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1402 != 12;
    call {:si_unique_call 2021} Status_13 := PptFindNatChip(Fdx_19);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Status_13 >= 0;
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    goto L16;

  L16:
    call {:si_unique_call 2022} PptDetectBytePort(Fdx_19);
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_1400 := 0;
    goto L1;

  L1:
    return;

  anon17_Then:
    Tmp_1400 := -1073741810;
    goto L1;

  anon15_Then:
    call {:si_unique_call 2023} PptDetectEppPortIfDot3DevicePresent(Fdx_19);
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 2024} PptDetectEppPortIfUserRequested(Fdx_19);
    goto L16;

  anon16_Then:
    goto L16;

  anon14_Then:
    assume {:partition} 0 > Status_13;
    goto L16;

  anon18_Then:
    assume {:partition} Tmp_1402 == 12;
    goto L8;

  L8:
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    goto L16;

  anon13_Then:
    goto L8;
}



procedure {:origName "PptCheckByteMode"} PptCheckByteMode(actual_Fdx_20: int) returns (Tmp_1403: int);
  free ensures {:va_keep} Tmp_1403 == -1073741823 || Tmp_1403 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptCheckByteMode"} PptCheckByteMode(actual_Fdx_20: int) returns (Tmp_1403: int)
{
  var {:scalar} dcr_7: int;
  var {:pointer} Controller_24: int;
  var {:scalar} sdv_895: int;
  var {:scalar} sdv_896: int;
  var {:pointer} Fdx_20: int;

  anon0:
    Fdx_20 := actual_Fdx_20;
    assume {:nonnull} Fdx_20 != 0;
    assume Fdx_20 > 0;
    havoc Controller_24;
    call {:si_unique_call 2025} dcr_7 := corral_nondet();
    call {:si_unique_call 2026} sdv_895 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_895 == 85;
    call {:si_unique_call 2027} sdv_896 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_896 == 170;
    Tmp_1403 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_896 != 170;
    goto L23;

  L23:
    Tmp_1403 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} sdv_895 != 85;
    goto L23;
}



procedure {:origName "PptEcrClearMode"} PptEcrClearMode(actual_Fdx_21: int) returns (Tmp_1409: int);
  free ensures {:va_keep} Tmp_1409 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptEcrClearMode"} PptEcrClearMode(actual_Fdx_21: int) returns (Tmp_1409: int)
{
  var {:scalar} ecr_3: int;
  var {:pointer} Fdx_21: int;

  anon0:
    Fdx_21 := actual_Fdx_21;
    assume {:nonnull} Fdx_21 != 0;
    assume Fdx_21 > 0;
    assume {:nonnull} Fdx_21 != 0;
    assume Fdx_21 > 0;
    havoc ecr_3;
    assume {:nonnull} Fdx_21 != 0;
    assume Fdx_21 > 0;
    assume {:nonnull} Fdx_21 != 0;
    assume Fdx_21 > 0;
    Tmp_1409 := 0;
    return;
}



procedure {:origName "PptClearByteMode"} PptClearByteMode(actual_Fdx_22: int) returns (Tmp_1412: int);
  free ensures {:va_keep} Tmp_1412 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptClearByteMode"} PptClearByteMode(actual_Fdx_22: int) returns (Tmp_1412: int)
{
  var {:scalar} Status_14: int;
  var {:pointer} Fdx_22: int;

  anon0:
    Fdx_22 := actual_Fdx_22;
    Status_14 := 0;
    assume {:nonnull} Fdx_22 != 0;
    assume Fdx_22 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2028} Status_14 := PptEcrClearMode(Fdx_22);
    goto L6;

  L6:
    Tmp_1412 := Status_14;
    return;

  anon3_Then:
    goto L6;
}



procedure {:origName "PptDetectEcpPort"} PptDetectEcpPort(actual_Fdx_23: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectEcpPort"} PptDetectEcpPort(actual_Fdx_23: int)
{
  var {:scalar} ecrLast_1: int;
  var {:pointer} Controller_26: int;
  var {:scalar} Tmp_1415: int;
  var {:scalar} Tmp_1416: int;
  var {:scalar} Tmp_1417: int;
  var {:scalar} ecr_4: int;
  var {:pointer} Fdx_23: int;
  var vslice_dummy_var_418: int;

  anon0:
    call {:si_unique_call 2029} vslice_dummy_var_418 := __HAVOC_malloc(4);
    Fdx_23 := actual_Fdx_23;
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    havoc Controller_26;
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    call {:si_unique_call 2030} ecr_4 := corral_nondet();
    ecrLast_1 := ecr_4;
    call {:si_unique_call 2031} ecr_4 := corral_nondet();
    ecrLast_1 := ecr_4;
    Tmp_1415 := BAND(ecr_4, BOR(1, 2));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_1415 == 3;
    goto L31;

  L31:
    goto L1;

  L1:
    return;

  anon22_Then:
    assume {:partition} Tmp_1415 != 3;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} ecrLast_1 != 255;
    Tmp_1416 := BAND(ecr_4, BOR(1, 2));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_1416 == 2;
    call {:si_unique_call 2032} ecr_4 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(ecr_4, 3) == 0;
    goto L1;

  anon18_Then:
    assume {:partition} BAND(ecr_4, 3) != 0;
    goto L38;

  L38:
    call {:si_unique_call 2033} ecr_4 := corral_nondet();
    Tmp_1417 := BAND(ecr_4, BOR(1, 2));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Tmp_1417 == 1;
    call {:si_unique_call 2034} ecrLast_1 := corral_nondet();
    ecr_4 := BAND(ecrLast_1, BOR(BOR(BOR(BOR(1, 2), 4), 8), 16));
    call {:si_unique_call 2035} PptDetermineFifoWidth(Fdx_23);
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    call {:si_unique_call 2036} PptDetermineFifoDepth(Fdx_23);
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto L78;

  L78:
    goto L1;

  anon20_Then:
    goto L78;

  anon19_Then:
    goto L78;

  anon24_Then:
    assume {:partition} Tmp_1417 != 1;
    goto L1;

  anon23_Then:
    assume {:partition} Tmp_1416 != 2;
    goto L38;

  anon17_Then:
    assume {:partition} ecrLast_1 == 255;
    goto L31;

  anon21_Then:
    goto L1;
}



procedure {:origName "PptDetectChipFilter"} PptDetectChipFilter(actual_Fdx_24: int) returns (Tmp_1420: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.INT4, s, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectChipFilter"} PptDetectChipFilter(actual_Fdx_24: int) returns (Tmp_1420: int)
{
  var {:pointer} Irp_53: int;
  var {:pointer} EcpController_1: int;
  var {:scalar} Status_15: int;
  var {:scalar} Event_7: int;
  var {:pointer} Controller_27: int;
  var {:scalar} IoStatus_1: int;
  var {:pointer} Fdx_24: int;
  var vslice_dummy_var_419: int;
  var vslice_dummy_var_420: int;
  var vslice_dummy_var_3278: int;

  anon0:
    call {:si_unique_call 2037} Event_7 := __HAVOC_malloc(156);
    call {:si_unique_call 2038} IoStatus_1 := __HAVOC_malloc(12);
    Fdx_24 := actual_Fdx_24;
    Status_15 := -1073741810;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    havoc Controller_27;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    havoc EcpController_1;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    call {:si_unique_call 2039} KeInitializeEvent(Event_7, 0, 0);
    call {:si_unique_call 2040} Irp_53 := IoBuildDeviceIoControlRequest(1441864, 0, 0, 28, 0, 28, 1, 0, IoStatus_1);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Irp_53 != 0;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    havoc vslice_dummy_var_3278;
    call {:si_unique_call 2041} Status_15 := sdv_IoCallDriver(vslice_dummy_var_3278, Irp_53);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Status_15 == 259;
    call {:si_unique_call 2042} vslice_dummy_var_419 := KeWaitForSingleObject(0, 5, 0, 0, 0);
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    Status_15 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus_1)];
    goto L30;

  L30:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Status_15 >= 0;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    havoc EcpController_1;
    goto L39;

  L39:
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    goto L35;

  L35:
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Status_15 >= 0;
    call {:si_unique_call 2043} vslice_dummy_var_420 := corral_nondet();
    call {:si_unique_call 2044} PptDetermineFifoWidth(Fdx_24);
    call {:si_unique_call 2045} PptDetermineFifoDepth(Fdx_24);
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    goto L42;

  L42:
    Tmp_1420 := Status_15;
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} 0 > Status_15;
    goto L42;

  anon22_Then:
    goto L42;

  anon20_Then:
    goto L42;

  anon24_Then:
    goto L39;

  anon21_Then:
    goto L35;

  anon19_Then:
    assume {:partition} 0 > Status_15;
    goto L35;

  anon18_Then:
    assume {:partition} Status_15 != 259;
    goto L30;

  anon17_Then:
    assume {:partition} Irp_53 == 0;
    Tmp_1420 := -1073741670;
    goto L1;
}



procedure {:origName "PptDetectPortType"} PptDetectPortType(actual_Fdx_25: int) returns (Tmp_1422: int);
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_1422 == 0 || Tmp_1422 == -1073741810 || Tmp_1422 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDetectPortType"} PptDetectPortType(actual_Fdx_25: int) returns (Tmp_1422: int)
{
  var {:scalar} Status_16: int;
  var {:scalar} ParportPath: int;
  var {:pointer} Tmp_1426: int;
  var {:dopa} {:scalar} IdentifierHex: int;
  var {:pointer} RegTable: int;
  var {:dopa} {:scalar} zero: int;
  var {:pointer} Fdx_25: int;
  var vslice_dummy_var_421: int;
  var vslice_dummy_var_422: int;

  anon0:
    call {:si_unique_call 2046} ParportPath := __HAVOC_malloc(12);
    call {:si_unique_call 2047} IdentifierHex := __HAVOC_malloc(4);
    call {:si_unique_call 2048} zero := __HAVOC_malloc(4);
    Fdx_25 := actual_Fdx_25;
    call {:si_unique_call 2049} vslice_dummy_var_421 := __HAVOC_malloc(76);
    call {:si_unique_call 2050} vslice_dummy_var_422 := __HAVOC_malloc(76);
    call {:si_unique_call 2051} Tmp_1426 := __HAVOC_malloc(32);
    call {:si_unique_call 2052} RegTable := __HAVOC_malloc(56);
    assume {:nonnull} IdentifierHex != 0;
    assume IdentifierHex > 0;
    Mem_T.INT4[IdentifierHex] := 12169;
    assume {:nonnull} zero != 0;
    assume zero > 0;
    Mem_T.INT4[zero] := 0;
    Tmp_1426 := strConst__li2bpl90;
    call {:si_unique_call 2053} RtlInitUnicodeString(ParportPath, Tmp_1426);
    call {:si_unique_call 2054} sdv_RtlZeroMemory(0, 56);
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    call {:si_unique_call 2055} Status_16 := sdv_RtlQueryRegistryValues(1, 0, 0, 0, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Status_16 >= 0;
    assume {:nonnull} IdentifierHex != 0;
    assume IdentifierHex > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[IdentifierHex] == 0;
    goto L29;

  L29:
    assume {:nonnull} IdentifierHex != 0;
    assume IdentifierHex > 0;
    Mem_T.INT4[IdentifierHex] := 12169;
    call {:si_unique_call 2056} Status_16 := RtlWriteRegistryValue(1, 0, 0, 4, 0, 4);
    call {:si_unique_call 2057} Status_16 := PptDetectPortCapabilities(Fdx_25);
    call {:si_unique_call 2058} Status_16 := RtlDeleteRegistryValue(1, 0, 0);
    Tmp_1422 := Status_16;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} Mem_T.INT4[IdentifierHex] != 0;
    goto L27;

  L27:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Status_16 != -1073741772;
    call {:si_unique_call 2059} PptDetectEcpPort(Fdx_25);
    call {:si_unique_call 2060} PptDetectBytePort(Fdx_25);
    assume {:nonnull} Fdx_25 != 0;
    assume Fdx_25 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_1422 := 0;
    goto L1;

  anon12_Then:
    Tmp_1422 := -1073741810;
    goto L1;

  anon10_Then:
    assume {:partition} Status_16 == -1073741772;
    goto L29;

  anon9_Then:
    assume {:partition} 0 > Status_16;
    goto L27;
}



procedure {:origName "_sdv_init22"} _sdv_init22();
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "_sdv_init22"} _sdv_init22()
{
  var vslice_dummy_var_423: int;

  anon0:
    call {:si_unique_call 2061} vslice_dummy_var_423 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    Mem_T.INT4[ParEnableLegacyZip] := 0;
    assume ParLegacyZipPseudoId == strConst__li2bpl91;
    Mem_T.INT4[SppNoRaiseIrql] := 0;
    Mem_T.INT4[DefaultModes] := 0;
    Mem_T.Buffer__UNICODE_STRING[Buffer__UNICODE_STRING(RegistryPath)] := 0;
    assume PortInfoReferenceCount == -1;
    assume PortInfoMutex == 0;
    assume PptDot3Retries == 5;
    Mem_T.INT4[WarmPollPeriod] := 5;
    assume PowerStateIsAC == 1;
    assume PowerStateCallbackObject == 0;
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    assume (forall x: int :: { Mem_T.CompletionRoutine__IO_STACK_LOCATION[x] } Mem_T.CompletionRoutine__IO_STACK_LOCATION[x] <= 0 || Mem_T.CompletionRoutine__IO_STACK_LOCATION[x] > 1056);
    return;
}



function {:inline true} {:fieldmap "Mem_T.AbsoluteOneSecond__PDO_EXTENSION"} {:fieldname "AbsoluteOneSecond"} AbsoluteOneSecond__PDO_EXTENSION(x: int) : int
{
  x + 996
}

function {:inline true} {:fieldmap "Mem_T.AddDevice__DRIVER_EXTENSION"} {:fieldname "AddDevice"} AddDevice__DRIVER_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__FDO_EXTENSION"} {:fieldname "AddressSpace"} AddressSpace__FDO_EXTENSION(x: int) : int
{
  x + 468
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_45"} {:fieldname "Affinity"} Affinity_unnamed_tag_45(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_40"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BadProtocolModes__PDO_EXTENSION"} {:fieldname "BadProtocolModes"} BadProtocolModes__PDO_EXTENSION(x: int) : int
{
  x + 1496
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__FDO_EXTENSION"} {:fieldname "BusNumber"} BusNumber__FDO_EXTENSION(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__PNP_BUS_INFORMATION"} {:fieldname "BusNumber"} BusNumber__PNP_BUS_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.BusNumber_unnamed_tag_43"} {:fieldname "BusNumber"} BusNumber_unnamed_tag_43(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.BusTypeGuid__PNP_BUS_INFORMATION"} {:fieldname "BusTypeGuid"} BusTypeGuid__PNP_BUS_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BusyDelayDetermined__PDO_EXTENSION"} {:fieldname "BusyDelayDetermined"} BusyDelayDetermined__PDO_EXTENSION(x: int) : int
{
  x + 980
}

function {:inline true} {:fieldmap "Mem_T.BusyDelay__PDO_EXTENSION"} {:fieldname "BusyDelay"} BusyDelay__PDO_EXTENSION(x: int) : int
{
  x + 976
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CheckedForGenericEpp__FDO_EXTENSION"} {:fieldname "CheckedForGenericEpp"} CheckedForGenericEpp__FDO_EXTENSION(x: int) : int
{
  x + 1176
}

function {:inline true} {:fieldmap "Mem_T.ChipInfo__FDO_EXTENSION"} {:fieldname "ChipInfo"} ChipInfo__FDO_EXTENSION(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.Cid__PDO_EXTENSION"} {:fieldname "Cid"} Cid__PDO_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.CommandFlags__PARALLEL_1284_COMMAND"} {:fieldname "CommandFlags"} CommandFlags__PARALLEL_1284_COMMAND(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.Connected__IEEE_STATE"} {:fieldname "Connected"} Connected__IEEE_STATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Connected__PDO_EXTENSION"} {:fieldname "Connected"} Connected__PDO_EXTENSION(x: int) : int
{
  x + 1044
}

function {:inline true} {:fieldmap "Mem_T.Controller__PARALLEL_PARCHIP_INFO"} {:fieldname "Controller"} Controller__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__PARALLEL_PORT_INFORMATION"} {:fieldname "Controller"} Controller__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Controller__PDO_EXTENSION"} {:fieldname "Controller"} Controller__PDO_EXTENSION(x: int) : int
{
  x + 916
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__DEVICE_RELATIONS"} {:fieldname "Count"} Count__DEVICE_RELATIONS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__SYNCHRONIZED_COUNT_CONTEXT"} {:fieldname "Count"} Count__SYNCHRONIZED_COUNT_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentEvent__IEEE_STATE"} {:fieldname "CurrentEvent"} CurrentEvent__IEEE_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentEvent__PDO_EXTENSION"} {:fieldname "CurrentEvent"} CurrentEvent__PDO_EXTENSION(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.CurrentPID__DOT3DL_PCTL"} {:fieldname "CurrentPID"} CurrentPID__DOT3DL_PCTL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.CurrentPhase__IEEE_STATE"} {:fieldname "CurrentPhase"} CurrentPhase__IEEE_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CurrentPhase__PDO_EXTENSION"} {:fieldname "CurrentPhase"} CurrentPhase__PDO_EXTENSION(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_6"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_6(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.DaisyChainPdo__FDO_EXTENSION"} {:fieldname "DaisyChainPdo"} DaisyChainPdo__FDO_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataChannel__DOT3DL_PCTL"} {:fieldname "DataChannel"} DataChannel__DOT3DL_PCTL(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DataLinkMode__DOT3DL_PCTL"} {:fieldname "DataLinkMode"} DataLinkMode__DOT3DL_PCTL(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DefaultData__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultData"} DefaultData__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DefaultLength__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultLength"} DefaultLength__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DefaultType__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultType"} DefaultType__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeleteOnRemoveOk__PDO_EXTENSION"} {:fieldname "DeleteOnRemoveOk"} DeleteOnRemoveOk__PDO_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "DevDeletionListHead"} DevDeletionListHead__FDO_EXTENSION(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "DevDeletionList"} DevDeletionList__PDO_EXTENSION(x: int) : int
{
  x + 260
}

function {:inline true} {:fieldmap "Mem_T.DevType__FDO_EXTENSION"} {:fieldname "DevType"} DevType__FDO_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DevType__PDO_EXTENSION"} {:fieldname "DevType"} DevType__PDO_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceInterfaceState__FDO_EXTENSION"} {:fieldname "DeviceInterfaceState"} DeviceInterfaceState__FDO_EXTENSION(x: int) : int
{
  x + 212
}

function {:inline true} {:fieldmap "Mem_T.DeviceInterfaceState__PDO_EXTENSION"} {:fieldname "DeviceInterfaceState"} DeviceInterfaceState__PDO_EXTENSION(x: int) : int
{
  x + 212
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceInterface"} DeviceInterface__PDO_EXTENSION(x: int) : int
{
  x + 200
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__FDO_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__FDO_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__PDO_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__PDO_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceStateFlags__PDO_EXTENSION"} {:fieldname "DeviceStateFlags"} DeviceStateFlags__PDO_EXTENSION(x: int) : int
{
  x + 224
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__FDO_EXTENSION"} {:fieldname "DeviceState"} DeviceState__FDO_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__PDO_EXTENSION"} {:fieldname "DeviceState"} DeviceState__PDO_EXTENSION(x: int) : int
{
  x + 1288
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceTextType_unnamed_tag_35"} {:fieldname "DeviceTextType"} DeviceTextType_unnamed_tag_35(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceType__PDO_EXTENSION"} {:fieldname "DeviceType"} DeviceType__PDO_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.DisableEndOfChainBusRescan__FDO_EXTENSION"} {:fieldname "DisableEndOfChainBusRescan"} DisableEndOfChainBusRescan__FDO_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.DriverExtension__DRIVER_OBJECT"} {:fieldname "DriverExtension"} DriverExtension__DRIVER_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__DEVICE_OBJECT"} {:fieldname "DriverObject"} DriverObject__DEVICE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DriverUnload__DRIVER_OBJECT"} {:fieldname "DriverUnload"} DriverUnload__DRIVER_OBJECT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EcpAddressSpace__FDO_EXTENSION"} {:fieldname "EcpAddressSpace"} EcpAddressSpace__FDO_EXTENSION(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.EcpController__PARALLEL_PNP_INFORMATION"} {:fieldname "EcpController"} EcpController__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EcrController__PARALLEL_PARCHIP_INFO"} {:fieldname "EcrController"} EcrController__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.EcrPortData__FDO_EXTENSION"} {:fieldname "EcrPortData"} EcrPortData__FDO_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.EndOfChainPdo__FDO_EXTENSION"} {:fieldname "EndOfChainPdo"} EndOfChainPdo__FDO_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.EndOfChain__PDO_EXTENSION"} {:fieldname "EndOfChain"} EndOfChain__PDO_EXTENSION(x: int) : int
{
  x + 276
}

function {:inline true} {:fieldmap "Mem_T.EntryContext__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "EntryContext"} EntryContext__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Event22Delay"} Event22Delay__PDO_EXTENSION(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "FdoThreadEvent"} FdoThreadEvent__FDO_EXTENSION(x: int) : int
{
  x + 980
}

function {:inline true} {:fieldmap "Mem_T.FdoWaitingOnPort__FDO_EXTENSION"} {:fieldname "FdoWaitingOnPort"} FdoWaitingOnPort__FDO_EXTENSION(x: int) : int
{
  x + 1180
}

function {:inline true} {:fieldmap "Mem_T.Fdo__PDO_EXTENSION"} {:fieldname "Fdo"} Fdo__PDO_EXTENSION(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.FifoDepth__PARALLEL_PNP_INFORMATION"} {:fieldname "FifoDepth"} FifoDepth__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.FifoWidth__PARALLEL_PNP_INFORMATION"} {:fieldname "FifoWidth"} FifoWidth__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.FilterMode__FDO_EXTENSION"} {:fieldname "FilterMode"} FilterMode__FDO_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Flags"} Flags__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ForwardInterfaceAddress__PDO_EXTENSION"} {:fieldname "ForwardInterfaceAddress"} ForwardInterfaceAddress__PDO_EXTENSION(x: int) : int
{
  x + 1100
}

function {:inline true} {:fieldmap "Mem_T.FoundInterrupt__FDO_EXTENSION"} {:fieldname "FoundInterrupt"} FoundInterrupt__FDO_EXTENSION(x: int) : int
{
  x + 484
}

function {:inline true} {:fieldmap "Mem_T.P_IO_WORKITEM"} {:fieldname "FreePortWorkItem"} FreePortWorkItem__FDO_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.FwdSkipMask__DOT3DL_PCTL"} {:fieldname "FwdSkipMask"} FwdSkipMask__DOT3DL_PCTL(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HardwareCapabilities__PARALLEL_PNP_INFORMATION"} {:fieldname "HardwareCapabilities"} HardwareCapabilities__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.HardwareModes__PARALLEL_PARCHIP_INFO"} {:fieldname "HardwareModes"} HardwareModes__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.High1Time__KSYSTEM_TIME"} {:fieldname "High1Time"} High1Time__KSYSTEM_TIME(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.High2Time__KSYSTEM_TIME"} {:fieldname "High2Time"} High2Time__KSYSTEM_TIME(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ID__PARALLEL_1284_COMMAND"} {:fieldname "ID"} ID__PARALLEL_1284_COMMAND(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_34"} {:fieldname "IdType"} IdType_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IdleTimeout__PDO_EXTENSION"} {:fieldname "IdleTimeout"} IdleTimeout__PDO_EXTENSION(x: int) : int
{
  x + 1060
}

function {:inline true} {:fieldmap "Mem_T.IdxForwardProtocol__PDO_EXTENSION"} {:fieldname "IdxForwardProtocol"} IdxForwardProtocol__PDO_EXTENSION(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.IdxReverseProtocol__PDO_EXTENSION"} {:fieldname "IdxReverseProtocol"} IdxReverseProtocol__PDO_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.Ieee1284Flags__PDO_EXTENSION"} {:fieldname "Ieee1284Flags"} Ieee1284Flags__PDO_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.Ieee1284_3DeviceCount__PARALLEL_PNP_INFORMATION"} {:fieldname "Ieee1284_3DeviceCount"} Ieee1284_3DeviceCount__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.Ieee1284_3DeviceId__PDO_EXTENSION"} {:fieldname "Ieee1284_3DeviceId"} Ieee1284_3DeviceId__PDO_EXTENSION(x: int) : int
{
  x + 268
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__FDO_EXTENSION"} {:fieldname "InterfaceType"} InterfaceType__FDO_EXTENSION(x: int) : int
{
  x + 476
}

function {:inline true} {:fieldmap "Mem_T.InterruptAffinity__FDO_EXTENSION"} {:fieldname "InterruptAffinity"} InterruptAffinity__FDO_EXTENSION(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.InterruptLevel__FDO_EXTENSION"} {:fieldname "InterruptLevel"} InterruptLevel__FDO_EXTENSION(x: int) : int
{
  x + 488
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__FDO_EXTENSION"} {:fieldname "InterruptMode"} InterruptMode__FDO_EXTENSION(x: int) : int
{
  x + 500
}

function {:inline true} {:fieldmap "Mem_T.InterruptRefCount__FDO_EXTENSION"} {:fieldname "InterruptRefCount"} InterruptRefCount__FDO_EXTENSION(x: int) : int
{
  x + 516
}

function {:inline true} {:fieldmap "Mem_T.InterruptVector__FDO_EXTENSION"} {:fieldname "InterruptVector"} InterruptVector__FDO_EXTENSION(x: int) : int
{
  x + 492
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_43"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_43(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_31"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_31(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IsIeeeTerminateOk__IEEE_STATE"} {:fieldname "IsIeeeTerminateOk"} IsIeeeTerminateOk__IEEE_STATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IsIeeeTerminateOk__PDO_EXTENSION"} {:fieldname "IsIeeeTerminateOk"} IsIeeeTerminateOk__PDO_EXTENSION(x: int) : int
{
  x + 1504
}

function {:inline true} {:fieldmap "Mem_T.IsPdo__PDO_EXTENSION"} {:fieldname "IsPdo"} IsPdo__PDO_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.LegacyBusType__PNP_BUS_INFORMATION"} {:fieldname "LegacyBusType"} LegacyBusType__PNP_BUS_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.LegacyZipPdo__FDO_EXTENSION"} {:fieldname "LegacyZipPdo"} LegacyZipPdo__FDO_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_44"} {:fieldname "Length"} Length_unnamed_tag_44(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_45"} {:fieldname "Level"} Level_unnamed_tag_45(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.List__WORK_QUEUE_ITEM"} {:fieldname "List"} List__WORK_QUEUE_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Location__FDO_EXTENSION"} {:fieldname "Location"} Location__FDO_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Location__PDO_EXTENSION"} {:fieldname "Location"} Location__PDO_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.LowPart__KSYSTEM_TIME"} {:fieldname "LowPart"} LowPart__KSYSTEM_TIME(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Mdl__PDO_EXTENSION"} {:fieldname "Mdl"} Mdl__PDO_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.Mfg__PDO_EXTENSION"} {:fieldname "Mfg"} Mfg__PDO_EXTENSION(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ModeSafety__PDO_EXTENSION"} {:fieldname "ModeSafety"} ModeSafety__PDO_EXTENSION(x: int) : int
{
  x + 1500
}

function {:inline true} {:fieldmap "Mem_T.Name__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Name"} Name__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NationalChecked__FDO_EXTENSION"} {:fieldname "NationalChecked"} NationalChecked__FDO_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.NationalChipFound__FDO_EXTENSION"} {:fieldname "NationalChipFound"} NationalChipFound__FDO_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.NewCount__SYNCHRONIZED_COUNT_CONTEXT"} {:fieldname "NewCount"} NewCount__SYNCHRONIZED_COUNT_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NibbleReadCount__PARALLEL_WMI_LOG_INFO"} {:fieldname "NibbleReadCount"} NibbleReadCount__PARALLEL_WMI_LOG_INFO(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Objects__DEVICE_RELATIONS"} {:fieldname "Objects"} Objects__DEVICE_RELATIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OneSecond__PDO_EXTENSION"} {:fieldname "OneSecond"} OneSecond__PDO_EXTENSION(x: int) : int
{
  x + 1016
}

function {:inline true} {:fieldmap "Mem_T.OpenCloseRefCount__FDO_EXTENSION"} {:fieldname "OpenCloseRefCount"} OpenCloseRefCount__FDO_EXTENSION(x: int) : int
{
  x + 196
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__PARALLEL_PORT_INFORMATION"} {:fieldname "OriginalController"} OriginalController__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__PDO_EXTENSION"} {:fieldname "OriginalController"} OriginalController__PDO_EXTENSION(x: int) : int
{
  x + 896
}

function {:inline true} {:fieldmap "Mem_T.OriginalEcpController__PARALLEL_PNP_INFORMATION"} {:fieldname "OriginalEcpController"} OriginalEcpController__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_5"} {:fieldname "Overlay"} Overlay_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.P12843DL__PDO_EXTENSION"} {:fieldname "P12843DL"} P12843DL__PDO_EXTENSION(x: int) : int
{
  x + 1508
}

function {:inline true} {:fieldmap "Mem_T.ParChipClearMode__PARALLEL_PARCHIP_INFO"} {:fieldname "ParChipClearMode"} ParChipClearMode__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParChipSetMode__PARALLEL_PARCHIP_INFO"} {:fieldname "ParChipSetMode"} ParChipSetMode__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ParClassFdo__PDO_EXTENSION"} {:fieldname "ParClassFdo"} ParClassFdo__PDO_EXTENSION(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParentDeviceObject__FDO_EXTENSION"} {:fieldname "ParentDeviceObject"} ParentDeviceObject__FDO_EXTENSION(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PauseEvent"} PauseEvent__PDO_EXTENSION(x: int) : int
{
  x + 1336
}

function {:inline true} {:fieldmap "Mem_T.PdoName__PDO_EXTENSION"} {:fieldname "PdoName"} PdoName__PDO_EXTENSION(x: int) : int
{
  x + 252
}

function {:inline true} {:fieldmap "Mem_T.PdoType__PDO_EXTENSION"} {:fieldname "PdoType"} PdoType__PDO_EXTENSION(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PhysicalDeviceObject__FDO_EXTENSION"} {:fieldname "PhysicalDeviceObject"} PhysicalDeviceObject__FDO_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T._PARALLEL_PNP_INFORMATION"} {:fieldname "PnpInfo"} PnpInfo__FDO_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.PnpState__FDO_EXTENSION"} {:fieldname "PnpState"} PnpState__FDO_EXTENSION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PollingFailureCounter__FDO_EXTENSION"} {:fieldname "PollingFailureCounter"} PollingFailureCounter__FDO_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.PortAllocates__PARPORT_WMI_ALLOC_FREE_COUNTS"} {:fieldname "PortAllocates"} PortAllocates__PARPORT_WMI_ALLOC_FREE_COUNTS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PortDeviceObject__PDO_EXTENSION"} {:fieldname "PortDeviceObject"} PortDeviceObject__PDO_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.PortFrees__PARPORT_WMI_ALLOC_FREE_COUNTS"} {:fieldname "PortFrees"} PortFrees__PARPORT_WMI_ALLOC_FREE_COUNTS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._PARALLEL_PORT_INFORMATION"} {:fieldname "PortInfo"} PortInfo__FDO_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.PortName__PARALLEL_PNP_INFORMATION"} {:fieldname "PortName"} PortName__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.Port__PARALLEL_1284_COMMAND"} {:fieldname "Port"} Port__PARALLEL_1284_COMMAND(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_43"} {:fieldname "Port"} Port_unnamed_tag_43(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.ProtocolData__PDO_EXTENSION"} {:fieldname "ProtocolData"} ProtocolData__PDO_EXTENSION(x: int) : int
{
  x + 1080
}

function {:inline true} {:fieldmap "Mem_T.ProtocolFamily__FORWARD_PTCL"} {:fieldname "ProtocolFamily"} ProtocolFamily__FORWARD_PTCL(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProtocolFamily__IEEE_STATE"} {:fieldname "ProtocolFamily"} ProtocolFamily__IEEE_STATE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ProtocolFamily__REVERSE_PTCL"} {:fieldname "ProtocolFamily"} ProtocolFamily__REVERSE_PTCL(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ProtocolModesSupported__PDO_EXTENSION"} {:fieldname "ProtocolModesSupported"} ProtocolModesSupported__PDO_EXTENSION(x: int) : int
{
  x + 1492
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceText_unnamed_tag_8"} {:fieldname "QueryDeviceText"} QueryDeviceText_unnamed_tag_8(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RawDeviceOK__DEVICE_CAPABILITIES"} {:fieldname "RawDeviceOK"} RawDeviceOK__DEVICE_CAPABILITIES(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.RawPortPdo__FDO_EXTENSION"} {:fieldname "RawPortPdo"} RawPortPdo__FDO_EXTENSION(x: int) : int
{
  x + 224
}

function {:inline true} {:fieldmap "Mem_T._IO_REMOVE_LOCK"} {:fieldname "RemoveLock"} RemoveLock__FDO_EXTENSION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ResetByteCount__DOT3DL_PCTL"} {:fieldname "ResetByteCount"} ResetByteCount__DOT3DL_PCTL(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.ResetChannel__DOT3DL_PCTL"} {:fieldname "ResetChannel"} ResetChannel__DOT3DL_PCTL(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RevSkipMask__DOT3DL_PCTL"} {:fieldname "RevSkipMask"} RevSkipMask__DOT3DL_PCTL(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ReverseInterfaceAddress__PDO_EXTENSION"} {:fieldname "ReverseInterfaceAddress"} ReverseInterfaceAddress__PDO_EXTENSION(x: int) : int
{
  x + 1104
}

function {:inline true} {:fieldmap "Mem_T.Revision__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Revision"} Revision__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SetForwardAddress__PDO_EXTENSION"} {:fieldname "SetForwardAddress"} SetForwardAddress__PDO_EXTENSION(x: int) : int
{
  x + 1108
}

function {:inline true} {:fieldmap "Mem_T.SetReverseAddress__PDO_EXTENSION"} {:fieldname "SetReverseAddress"} SetReverseAddress__PDO_EXTENSION(x: int) : int
{
  x + 1112
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._Queue"} {:fieldname "ShadowBuffer"} ShadowBuffer__PDO_EXTENSION(x: int) : int
{
  x + 1304
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Signature1__PDO_EXTENSION"} {:fieldname "Signature1"} Signature1__PDO_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Signature2__PDO_EXTENSION"} {:fieldname "Signature2"} Signature2__PDO_EXTENSION(x: int) : int
{
  x + 3724
}

function {:inline true} {:fieldmap "Mem_T.SilentInstall__DEVICE_CAPABILITIES"} {:fieldname "SilentInstall"} SilentInstall__DEVICE_CAPABILITIES(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__PARALLEL_PORT_INFORMATION"} {:fieldname "SpanOfController"} SpanOfController__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.SpanOfEcpController__PARALLEL_PNP_INFORMATION"} {:fieldname "SpanOfEcpController"} SpanOfEcpController__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.StackSize__DEVICE_OBJECT"} {:fieldname "StackSize"} StackSize__DEVICE_OBJECT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_44"} {:fieldname "Start"} Start_unnamed_tag_44(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_51"} {:fieldname "Start"} Start_unnamed_tag_51(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SymLinkName__PDO_EXTENSION"} {:fieldname "SymLinkName"} SymLinkName__PDO_EXTENSION(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_1"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_1(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__FDO_EXTENSION"} {:fieldname "SystemState"} SystemState__FDO_EXTENSION(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "ThreadObjectPointer"} ThreadObjectPointer__FDO_EXTENSION(x: int) : int
{
  x + 220
}

function {:inline true} {:fieldmap "Mem_T.TimeToTerminateThread__FDO_EXTENSION"} {:fieldname "TimeToTerminateThread"} TimeToTerminateThread__FDO_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.TimerStart__PDO_EXTENSION"} {:fieldname "TimerStart"} TimerStart__PDO_EXTENSION(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_45"} {:fieldname "Vector"} Vector_unnamed_tag_45(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Version"} Version__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._WMILIB_CONTEXT"} {:fieldname "WmiLibContext"} WmiLibContext__FDO_EXTENSION(x: int) : int
{
  x + 1136
}

function {:inline true} {:fieldmap "Mem_T.WmiPortAllocFreeCounts__FDO_EXTENSION"} {:fieldname "WmiPortAllocFreeCounts"} WmiPortAllocFreeCounts__FDO_EXTENSION(x: int) : int
{
  x + 1168
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__IO_WORKITEM"} {:fieldname "WorkItem"} WorkItem__IO_WORKITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "WorkQueueCount"} WorkQueueCount__FDO_EXTENSION(x: int) : int
{
  x + 320
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WorkQueue"} WorkQueue__FDO_EXTENSION(x: int) : int
{
  x + 300
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WorkQueue"} WorkQueue__PDO_EXTENSION(x: int) : int
{
  x + 728
}

function {:inline true} {:fieldmap "Mem_T.bIsHostRecoverSupported__PDO_EXTENSION"} {:fieldname "bIsHostRecoverSupported"} bIsHostRecoverSupported__PDO_EXTENSION(x: int) : int
{
  x + 1332
}

function {:inline true} {:fieldmap "Mem_T.bShadowBuffer__PDO_EXTENSION"} {:fieldname "bShadowBuffer"} bShadowBuffer__PDO_EXTENSION(x: int) : int
{
  x + 1300
}

function {:inline true} {:fieldmap "Mem_T.dsDeviceState__ATAPI_PARAMS"} {:fieldname "dsDeviceState"} dsDeviceState__ATAPI_PARAMS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fnConnect__FORWARD_PTCL"} {:fieldname "fnConnect"} fnConnect__FORWARD_PTCL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.fnConnect__REVERSE_PTCL"} {:fieldname "fnConnect"} fnConnect__REVERSE_PTCL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.fnDisconnect__FORWARD_PTCL"} {:fieldname "fnDisconnect"} fnDisconnect__FORWARD_PTCL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.fnDisconnect__REVERSE_PTCL"} {:fieldname "fnDisconnect"} fnDisconnect__REVERSE_PTCL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.fnEnterForward__FORWARD_PTCL"} {:fieldname "fnEnterForward"} fnEnterForward__FORWARD_PTCL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.fnEnterReverse__REVERSE_PTCL"} {:fieldname "fnEnterReverse"} fnEnterReverse__REVERSE_PTCL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.fnExitForward__FORWARD_PTCL"} {:fieldname "fnExitForward"} fnExitForward__FORWARD_PTCL(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.fnExitReverse__REVERSE_PTCL"} {:fieldname "fnExitReverse"} fnExitReverse__REVERSE_PTCL(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.fnHaveReadData__REVERSE_PTCL"} {:fieldname "fnHaveReadData"} fnHaveReadData__REVERSE_PTCL(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.fnIsModeSupported__FORWARD_PTCL"} {:fieldname "fnIsModeSupported"} fnIsModeSupported__FORWARD_PTCL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fnIsModeSupported__REVERSE_PTCL"} {:fieldname "fnIsModeSupported"} fnIsModeSupported__REVERSE_PTCL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fnReadShadow__REVERSE_PTCL"} {:fieldname "fnReadShadow"} fnReadShadow__REVERSE_PTCL(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.fnRead__PDO_EXTENSION"} {:fieldname "fnRead"} fnRead__PDO_EXTENSION(x: int) : int
{
  x + 1036
}

function {:inline true} {:fieldmap "Mem_T.fnRead__REVERSE_PTCL"} {:fieldname "fnRead"} fnRead__REVERSE_PTCL(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.fnReset__DOT3DL_PCTL"} {:fieldname "fnReset"} fnReset__DOT3DL_PCTL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.fnSetInterfaceAddress__FORWARD_PTCL"} {:fieldname "fnSetInterfaceAddress"} fnSetInterfaceAddress__FORWARD_PTCL(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.fnSetInterfaceAddress__REVERSE_PTCL"} {:fieldname "fnSetInterfaceAddress"} fnSetInterfaceAddress__REVERSE_PTCL(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.fnWrite__FORWARD_PTCL"} {:fieldname "fnWrite"} fnWrite__FORWARD_PTCL(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.fnWrite__PDO_EXTENSION"} {:fieldname "fnWrite"} fnWrite__PDO_EXTENSION(x: int) : int
{
  x + 1040
}

function {:inline true} {:fieldmap "Mem_T.head__Queue"} {:fieldname "head"} head__Queue(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.log__PDO_EXTENSION"} {:fieldname "log"} log__PDO_EXTENSION(x: int) : int
{
  x + 1560
}

function {:inline true} {:fieldmap "Mem_T.max__Queue"} {:fieldname "max"} max__Queue(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.success__PARALLEL_PARCHIP_INFO"} {:fieldname "success"} success__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.szAtapiNameString__ATAPI_PARAMS"} {:fieldname "szAtapiNameString"} szAtapiNameString__ATAPI_PARAMS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.tail__Queue"} {:fieldname "tail"} tail__Queue(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.theArray__Queue"} {:fieldname "theArray"} theArray__Queue(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string "%.20S%04X"} unique strConst__li2bpl38: int;

const {:string "%.4S:"} unique strConst__li2bpl81: int;

const {:string "%.6S:"} unique strConst__li2bpl82: int;

const {:string "%S"} unique strConst__li2bpl7: int;

const {:string "%S %S"} unique strConst__li2bpl33: int;

const {:string "%S%.20S%04X"} unique strConst__li2bpl37: int;

const {:string "%S%S%S"} unique strConst__li2bpl36: int;

const {:string "%S.%1d"} unique strConst__li2bpl9: int;

const {:string "%S.4"} unique strConst__li2bpl10: int;

const {:string "%S.5"} unique strConst__li2bpl8: int;

const {:string "%s%08X;"} unique strConst__li2bpl25: int;

const {:string "%s%s"} unique strConst__li2bpl35: int;

const {:string ".3C:"} unique strConst__li2bpl68: int;

const {:string ".3M:"} unique strConst__li2bpl69: int;

const {:string "0x00 - IRP_MN_START_DEVICE"} unique strConst__li2bpl28: int;

const {:string "1284.3C:"} unique strConst__li2bpl72: int;

const {:string "1284.3DL:"} unique strConst__li2bpl71: int;

const {:string "1284.3M:"} unique strConst__li2bpl73: int;

const {:string "1284.4DL:"} unique strConst__li2bpl70: int;

const {:string "AID"} unique strConst__li2bpl57: int;

const {:string "AUTOMATICID"} unique strConst__li2bpl56: int;

const {:string "AcquirePortTimeout"} unique strConst__li2bpl52: int;

const {:string "AllowAsserts"} unique strConst__li2bpl51: int;

const {:string "Break"} unique strConst__li2bpl43: int;

const {:string "Brother"} unique strConst__li2bpl76: int;

const {:string "CID"} unique strConst__li2bpl61: int;

const {:string "CLASS"} unique strConst__li2bpl58: int;

const {:string "CLS"} unique strConst__li2bpl59: int;

const {:string "CMD:"} unique strConst__li2bpl74: int;

const {:string "COMMAND SET:"} unique strConst__li2bpl75: int;

const {:string "COMPATIBLEID"} unique strConst__li2bpl60: int;

const {:string "DES"} unique strConst__li2bpl63: int;

const {:string "DESCRIPTION"} unique strConst__li2bpl62: int;

const {:string "DbgMaskDaisyChain0"} unique strConst__li2bpl46: int;

const {:string "DbgMaskDaisyChain1"} unique strConst__li2bpl47: int;

const {:string "DbgMaskEndOfChain"} unique strConst__li2bpl48: int;

const {:string "DbgMaskFdo"} unique strConst__li2bpl44: int;

const {:string "DbgMaskLegacyZip"} unique strConst__li2bpl49: int;

const {:string "DbgMaskNoDevice"} unique strConst__li2bpl50: int;

const {:string "DbgMaskRawPort"} unique strConst__li2bpl45: int;

const {:string "DefaultModes"} unique strConst__li2bpl41: int;

const {:string "DellNationalPC87364"} unique strConst__li2bpl84: int;

const {:string "DisableWarmPoll"} unique strConst__li2bpl85: int;

const {:string "Event22Delay"} unique strConst__li2bpl32: int;

const {:string "FilterResourceMethod"} unique strConst__li2bpl87: int;

const {:string "HBP"} unique strConst__li2bpl80: int;

const {:string "HU DlFpoyp"} unique strConst__li2bpl26: int;

const {:string "IEEE_1284_Manufacturer"} unique strConst__li2bpl5: int;

const {:string "IEEE_1284_Model"} unique strConst__li2bpl6: int;

const {:string "IMG"} unique strConst__li2bpl14: int;

const {:string "LEGEND"} unique strConst__li2bpl78: int;

const {:string "LPTENUM\\"} unique strConst__li2bpl34: int;

const {:string "Legend"} unique strConst__li2bpl79: int;

const {:string "MANUFACTURER"} unique strConst__li2bpl64: int;

const {:string "MDL"} unique strConst__li2bpl67: int;

const {:string "MFG"} unique strConst__li2bpl65: int;

const {:string "MFG:"} unique strConst__li2bpl27: int;

const {:string "MFG:IMG;CMD:;MDL:VP0;CLS:SCSIADAPTER;DES:IOMEGA PARALLEL PORT"} unique strConst__li2bpl91: int;

const {:string "MFG:VID_04E6;CLS:IMAGE;MDL:PID_"} unique strConst__li2bpl24: int;

const {:string "MFG:VID_04E6;CLS:SCSIADAPTER;MDL:PID_"} unique strConst__li2bpl23: int;

const {:string "MODEL"} unique strConst__li2bpl66: int;

const {:string "Microsoft"} unique strConst__li2bpl11: int;

const {:string "ModeCheckedStalled"} unique strConst__li2bpl89: int;

const {:string "NationalChecked"} unique strConst__li2bpl31: int;

const {:string "NationalChipFound"} unique strConst__li2bpl30: int;

const {:string "PARALLEL PORTS"} unique strConst__li2bpl12: int;

const {:string "PHASE_UNKNOWN"} unique strConst__li2bpl29: int;

const {:string "PPT_BREAK_ON_DRIVER_ENTRY - BreakPoint requested"} unique strConst__li2bpl39: int;

const {:string "ParEnableLegacyZip"} unique strConst__li2bpl18: int;

const {:string "Parallel\\Parameters"} unique strConst__li2bpl17: int;

const {:string "Parport"} unique strConst__li2bpl90: int;

const {:string "Parport\\Parameters"} unique strConst__li2bpl16: int;

const {:string "PitneyBowes"} unique strConst__li2bpl77: int;

const {:string "PortName"} unique strConst__li2bpl83: int;

const {:string "RawPort"} unique strConst__li2bpl13: int;

const {:string "RequestEppTest"} unique strConst__li2bpl88: int;

const {:string "SppNoRaiseIrql"} unique strConst__li2bpl40: int;

const {:string "Start Device Irp is not pended."} unique strConst__li2bpl55: int;

const {:string "Trace"} unique strConst__li2bpl42: int;

const {:string "VP0"} unique strConst__li2bpl15: int;

const {:string "WarmPollPeriod"} unique strConst__li2bpl86: int;

const {:string "\\Callback\\PowerState"} unique strConst__li2bpl53: int;

const {:string "\\Device\\Parallel%d"} unique strConst__li2bpl3: int;

const {:string "\\Device\\Parallel%d-%1d"} unique strConst__li2bpl1: int;

const {:string "\\Device\\Parallel%d.%d"} unique strConst__li2bpl4: int;

const {:string "\\Device\\Parallel%d.%d-%1d"} unique strConst__li2bpl2: int;

const {:string "\\DosDevices\\%s"} unique strConst__li2bpl22: int;

const {:string "\\DosDevices\\%s-%1d"} unique strConst__li2bpl20: int;

const {:string "\\DosDevices\\%s.%d"} unique strConst__li2bpl21: int;

const {:string "\\DosDevices\\%s.%d-%1d"} unique strConst__li2bpl19: int;

const {:string "caller"} unique strConst__li2bpl0: int;

const {:string "halt"} unique strConst__li2bpl54: int;

const {:allocated} li2bplFunctionConstant1051: int;

axiom li2bplFunctionConstant1051 == 1051;

const {:allocated} li2bplFunctionConstant1053: int;

axiom li2bplFunctionConstant1053 == 1053;

const {:allocated} li2bplFunctionConstant1056: int;

axiom li2bplFunctionConstant1056 == 1056;

const {:allocated} li2bplFunctionConstant187: int;

axiom li2bplFunctionConstant187 == 187;

const {:allocated} li2bplFunctionConstant192: int;

axiom li2bplFunctionConstant192 == 192;

const {:allocated} li2bplFunctionConstant193: int;

axiom li2bplFunctionConstant193 == 193;

const {:allocated} li2bplFunctionConstant202: int;

axiom li2bplFunctionConstant202 == 202;

const {:allocated} li2bplFunctionConstant226: int;

axiom li2bplFunctionConstant226 == 226;

const {:allocated} li2bplFunctionConstant245: int;

axiom li2bplFunctionConstant245 == 245;

const {:allocated} li2bplFunctionConstant254: int;

axiom li2bplFunctionConstant254 == 254;

const {:allocated} li2bplFunctionConstant282: int;

axiom li2bplFunctionConstant282 == 282;

const {:allocated} li2bplFunctionConstant283: int;

axiom li2bplFunctionConstant283 == 283;

const {:allocated} li2bplFunctionConstant284: int;

axiom li2bplFunctionConstant284 == 284;

const {:allocated} li2bplFunctionConstant285: int;

axiom li2bplFunctionConstant285 == 285;

const {:allocated} li2bplFunctionConstant286: int;

axiom li2bplFunctionConstant286 == 286;

const {:allocated} li2bplFunctionConstant287: int;

axiom li2bplFunctionConstant287 == 287;

const {:allocated} li2bplFunctionConstant295: int;

axiom li2bplFunctionConstant295 == 295;

const {:allocated} li2bplFunctionConstant296: int;

axiom li2bplFunctionConstant296 == 296;

const {:allocated} li2bplFunctionConstant297: int;

axiom li2bplFunctionConstant297 == 297;

const {:allocated} li2bplFunctionConstant299: int;

axiom li2bplFunctionConstant299 == 299;

const {:allocated} li2bplFunctionConstant300: int;

axiom li2bplFunctionConstant300 == 300;

const {:allocated} li2bplFunctionConstant301: int;

axiom li2bplFunctionConstant301 == 301;

const {:allocated} li2bplFunctionConstant302: int;

axiom li2bplFunctionConstant302 == 302;

const {:allocated} li2bplFunctionConstant303: int;

axiom li2bplFunctionConstant303 == 303;

const {:allocated} li2bplFunctionConstant304: int;

axiom li2bplFunctionConstant304 == 304;

const {:allocated} li2bplFunctionConstant312: int;

axiom li2bplFunctionConstant312 == 312;

const {:allocated} li2bplFunctionConstant320: int;

axiom li2bplFunctionConstant320 == 320;

const {:allocated} li2bplFunctionConstant323: int;

axiom li2bplFunctionConstant323 == 323;

const {:allocated} li2bplFunctionConstant325: int;

axiom li2bplFunctionConstant325 == 325;

const {:allocated} li2bplFunctionConstant433: int;

axiom li2bplFunctionConstant433 == 433;

const {:allocated} li2bplFunctionConstant487: int;

axiom li2bplFunctionConstant487 == 487;

const {:allocated} li2bplFunctionConstant488: int;

axiom li2bplFunctionConstant488 == 488;

const {:allocated} li2bplFunctionConstant489: int;

axiom li2bplFunctionConstant489 == 489;

const {:allocated} li2bplFunctionConstant490: int;

axiom li2bplFunctionConstant490 == 490;

const {:allocated} li2bplFunctionConstant491: int;

axiom li2bplFunctionConstant491 == 491;

const {:allocated} li2bplFunctionConstant492: int;

axiom li2bplFunctionConstant492 == 492;

const {:allocated} li2bplFunctionConstant493: int;

axiom li2bplFunctionConstant493 == 493;

const {:allocated} li2bplFunctionConstant494: int;

axiom li2bplFunctionConstant494 == 494;

const {:allocated} li2bplFunctionConstant495: int;

axiom li2bplFunctionConstant495 == 495;

const {:allocated} li2bplFunctionConstant496: int;

axiom li2bplFunctionConstant496 == 496;

const {:allocated} li2bplFunctionConstant497: int;

axiom li2bplFunctionConstant497 == 497;

const {:allocated} li2bplFunctionConstant498: int;

axiom li2bplFunctionConstant498 == 498;

const {:allocated} li2bplFunctionConstant499: int;

axiom li2bplFunctionConstant499 == 499;

const {:allocated} li2bplFunctionConstant500: int;

axiom li2bplFunctionConstant500 == 500;

const {:allocated} li2bplFunctionConstant501: int;

axiom li2bplFunctionConstant501 == 501;

const {:allocated} li2bplFunctionConstant647: int;

axiom li2bplFunctionConstant647 == 647;

const {:allocated} li2bplFunctionConstant648: int;

axiom li2bplFunctionConstant648 == 648;

const {:allocated} li2bplFunctionConstant649: int;

axiom li2bplFunctionConstant649 == 649;

const {:allocated} li2bplFunctionConstant650: int;

axiom li2bplFunctionConstant650 == 650;

const {:allocated} li2bplFunctionConstant651: int;

axiom li2bplFunctionConstant651 == 651;

const {:allocated} li2bplFunctionConstant652: int;

axiom li2bplFunctionConstant652 == 652;

const {:allocated} li2bplFunctionConstant687: int;

axiom li2bplFunctionConstant687 == 687;

const {:allocated} li2bplFunctionConstant688: int;

axiom li2bplFunctionConstant688 == 688;

const {:allocated} li2bplFunctionConstant689: int;

axiom li2bplFunctionConstant689 == 689;

const {:allocated} li2bplFunctionConstant690: int;

axiom li2bplFunctionConstant690 == 690;

const {:allocated} li2bplFunctionConstant691: int;

axiom li2bplFunctionConstant691 == 691;

const {:allocated} li2bplFunctionConstant692: int;

axiom li2bplFunctionConstant692 == 692;

const {:allocated} li2bplFunctionConstant693: int;

axiom li2bplFunctionConstant693 == 693;

const {:allocated} li2bplFunctionConstant694: int;

axiom li2bplFunctionConstant694 == 694;

const {:allocated} li2bplFunctionConstant695: int;

axiom li2bplFunctionConstant695 == 695;

const {:allocated} li2bplFunctionConstant696: int;

axiom li2bplFunctionConstant696 == 696;

const {:allocated} li2bplFunctionConstant697: int;

axiom li2bplFunctionConstant697 == 697;

const {:allocated} li2bplFunctionConstant698: int;

axiom li2bplFunctionConstant698 == 698;

const {:allocated} li2bplFunctionConstant699: int;

axiom li2bplFunctionConstant699 == 699;

const {:allocated} li2bplFunctionConstant700: int;

axiom li2bplFunctionConstant700 == 700;

const {:allocated} li2bplFunctionConstant701: int;

axiom li2bplFunctionConstant701 == 701;

const {:allocated} li2bplFunctionConstant703: int;

axiom li2bplFunctionConstant703 == 703;

const {:allocated} li2bplFunctionConstant704: int;

axiom li2bplFunctionConstant704 == 704;

const {:allocated} li2bplFunctionConstant705: int;

axiom li2bplFunctionConstant705 == 705;

const {:allocated} li2bplFunctionConstant706: int;

axiom li2bplFunctionConstant706 == 706;

const {:allocated} li2bplFunctionConstant707: int;

axiom li2bplFunctionConstant707 == 707;

const {:allocated} li2bplFunctionConstant708: int;

axiom li2bplFunctionConstant708 == 708;

const {:allocated} li2bplFunctionConstant709: int;

axiom li2bplFunctionConstant709 == 709;

const {:allocated} li2bplFunctionConstant710: int;

axiom li2bplFunctionConstant710 == 710;

const {:allocated} li2bplFunctionConstant711: int;

axiom li2bplFunctionConstant711 == 711;

const {:allocated} li2bplFunctionConstant712: int;

axiom li2bplFunctionConstant712 == 712;

const {:allocated} li2bplFunctionConstant713: int;

axiom li2bplFunctionConstant713 == 713;

const {:allocated} li2bplFunctionConstant714: int;

axiom li2bplFunctionConstant714 == 714;

const {:allocated} li2bplFunctionConstant715: int;

axiom li2bplFunctionConstant715 == 715;

const {:allocated} li2bplFunctionConstant751: int;

axiom li2bplFunctionConstant751 == 751;

const {:allocated} li2bplFunctionConstant752: int;

axiom li2bplFunctionConstant752 == 752;

const {:allocated} li2bplFunctionConstant761: int;

axiom li2bplFunctionConstant761 == 761;

const {:allocated} li2bplFunctionConstant770: int;

axiom li2bplFunctionConstant770 == 770;

const {:allocated} li2bplFunctionConstant771: int;

axiom li2bplFunctionConstant771 == 771;

const {:allocated} li2bplFunctionConstant781: int;

axiom li2bplFunctionConstant781 == 781;

const {:allocated} li2bplFunctionConstant782: int;

axiom li2bplFunctionConstant782 == 782;

const {:allocated} li2bplFunctionConstant783: int;

axiom li2bplFunctionConstant783 == 783;

const {:allocated} li2bplFunctionConstant784: int;

axiom li2bplFunctionConstant784 == 784;

const {:allocated} li2bplFunctionConstant785: int;

axiom li2bplFunctionConstant785 == 785;

const {:allocated} li2bplFunctionConstant786: int;

axiom li2bplFunctionConstant786 == 786;

const {:allocated} li2bplFunctionConstant787: int;

axiom li2bplFunctionConstant787 == 787;

const {:allocated} li2bplFunctionConstant788: int;

axiom li2bplFunctionConstant788 == 788;

const {:allocated} li2bplFunctionConstant789: int;

axiom li2bplFunctionConstant789 == 789;

const {:allocated} li2bplFunctionConstant790: int;

axiom li2bplFunctionConstant790 == 790;

const {:allocated} li2bplFunctionConstant791: int;

axiom li2bplFunctionConstant791 == 791;

const {:allocated} li2bplFunctionConstant859: int;

axiom li2bplFunctionConstant859 == 859;

const {:allocated} li2bplFunctionConstant860: int;

axiom li2bplFunctionConstant860 == 860;

const {:allocated} li2bplFunctionConstant861: int;

axiom li2bplFunctionConstant861 == 861;

const {:allocated} li2bplFunctionConstant862: int;

axiom li2bplFunctionConstant862 == 862;

const {:allocated} li2bplFunctionConstant863: int;

axiom li2bplFunctionConstant863 == 863;

const {:allocated} li2bplFunctionConstant864: int;

axiom li2bplFunctionConstant864 == 864;

const {:allocated} li2bplFunctionConstant865: int;

axiom li2bplFunctionConstant865 == 865;

const {:allocated} li2bplFunctionConstant866: int;

axiom li2bplFunctionConstant866 == 866;

const {:allocated} li2bplFunctionConstant867: int;

axiom li2bplFunctionConstant867 == 867;

const {:allocated} li2bplFunctionConstant868: int;

axiom li2bplFunctionConstant868 == 868;

const {:allocated} li2bplFunctionConstant869: int;

axiom li2bplFunctionConstant869 == 869;

const {:allocated} li2bplFunctionConstant870: int;

axiom li2bplFunctionConstant870 == 870;

const {:allocated} li2bplFunctionConstant871: int;

axiom li2bplFunctionConstant871 == 871;

const {:allocated} li2bplFunctionConstant916: int;

axiom li2bplFunctionConstant916 == 916;

const {:allocated} li2bplFunctionConstant917: int;

axiom li2bplFunctionConstant917 == 917;

implementation {:origName "PptTrySelectDevice"} PptTrySelectDevice#0(actual_Context_8: int, actual_TrySelectCommand: int) returns (Tmp_885: int)
{
  var {:scalar} i_22: int;
  var {:scalar} Tmp_886: int;
  var {:scalar} success: int;
  var {:pointer} Tmp_887: int;
  var {:scalar} Status_4: int;
  var {:pointer} Extension_47: int;
  var {:pointer} Command: int;
  var {:scalar} DeviceID: int;
  var {:scalar} CancelIrql: int;
  var {:scalar} SyncContext: int;
  var {:scalar} Tmp_888: int;
  var {:pointer} Context_8: int;
  var {:pointer} TrySelectCommand: int;
  var vslice_dummy_var_424: int;
  var vslice_dummy_var_425: int;
  var vslice_dummy_var_3279: int;
  var vslice_dummy_var_3280: int;

  anon0:
    call {:si_unique_call 2062} SyncContext := __HAVOC_malloc(8);
    Context_8 := actual_Context_8;
    TrySelectCommand := actual_TrySelectCommand;
    Status_4 := 0;
    Extension_47 := Context_8;
    Command := TrySelectCommand;
    success := 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L17;

  L17:
    call {:si_unique_call 2063} Status_4 := PptTrySelectLegacyZip#0(Context_8, TrySelectCommand);
    Tmp_885 := Status_4;
    goto L1;

  L1:
    return;

  anon48_Then:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    havoc DeviceID;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto L25;

  L25:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L31;

  L31:
    Status_4 := 0;
    goto L32;

  L32:
    Tmp_885 := Status_4;
    goto L1;

  anon38_Then:
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    i_22 := 0;
    goto L34;

  L34:
    call {:si_unique_call 2064} i_22, Tmp_886, success := PptTrySelectDevice#0_loop_L34(i_22, Tmp_886, success, Extension_47, DeviceID);
    goto L34_last;

  L34_last:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > i_22;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} success == 0;
    Tmp_886 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    havoc vslice_dummy_var_3279;
    call {:si_unique_call 2065} success := PptSend1284_3Command(vslice_dummy_var_3279, Tmp_886);
    i_22 := i_22 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} success != 0;
    goto L35;

  L35:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} success != 0;
    Status_4 := 0;
    goto L32;

  anon41_Then:
    assume {:partition} success == 0;
    Status_4 := -1073741823;
    goto L32;

  anon40_Then:
    assume {:partition} i_22 >= PptDot3Retries;
    goto L35;

  anon39_Then:
    goto L31;

  anon37_Then:
    call {:si_unique_call 2066} Tmp_887 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    Mem_T.INT4[Tmp_887] := CancelIrql;
    call {:si_unique_call 2067} IoAcquireCancelSpinLock(Tmp_887);
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    CancelIrql := Mem_T.INT4[Tmp_887];
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    assume {:nonnull} SyncContext != 0;
    assume SyncContext > 0;
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 2068} vslice_dummy_var_425 := KeSynchronizeExecution(0, li2bplFunctionConstant192, SyncContext);
    goto L56;

  L56:
    assume {:nonnull} SyncContext != 0;
    assume SyncContext > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 2069} IoReleaseCancelSpinLock(CancelIrql);
    Status_4 := 259;
    goto L32;

  anon43_Then:
    call {:si_unique_call 2070} IoReleaseCancelSpinLock(CancelIrql);
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L67;

  L67:
    Status_4 := 0;
    goto L32;

  anon51_Then:
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    i_22 := 0;
    goto L69;

  L69:
    call {:si_unique_call 2071} i_22, success, Tmp_888 := PptTrySelectDevice#0_loop_L69(i_22, success, Extension_47, DeviceID, Tmp_888);
    goto L69_last;

  L69_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > i_22;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} success == 0;
    Tmp_888 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    havoc vslice_dummy_var_3280;
    call {:si_unique_call 2072} success := PptSend1284_3Command(vslice_dummy_var_3280, Tmp_888);
    i_22 := i_22 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    assume false;
    return;

  anon47_Then:
    assume {:partition} success != 0;
    goto L70;

  L70:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} success != 0;
    Status_4 := 0;
    goto L32;

  anon46_Then:
    assume {:partition} success == 0;
    Status_4 := -1073741823;
    goto L32;

  anon45_Then:
    assume {:partition} i_22 >= PptDot3Retries;
    goto L70;

  anon44_Then:
    goto L67;

  anon50_Then:
    call {:si_unique_call 2073} vslice_dummy_var_424 := PptSynchronizedIncrement(SyncContext);
    goto L56;

  anon49_Then:
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Status_4 := -1073741811;
    goto L32;

  anon36_Then:
    goto L25;

  anon35_Then:
    goto L17;
}



procedure {:origName "PptTrySelectDevice"} PptTrySelectDevice#0(actual_Context_8: int, actual_TrySelectCommand: int) returns (Tmp_885: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_885 == -1073741811 || Tmp_885 == 0 || Tmp_885 == -1073741823 || Tmp_885 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptTrySelectDevice"} PptTrySelectDevice#1(actual_Context_8: int, actual_TrySelectCommand: int) returns (Tmp_885: int)
{
  var {:scalar} i_22: int;
  var {:scalar} Tmp_886: int;
  var {:scalar} success: int;
  var {:pointer} Tmp_887: int;
  var {:scalar} Status_4: int;
  var {:pointer} Extension_47: int;
  var {:pointer} Command: int;
  var {:scalar} DeviceID: int;
  var {:scalar} CancelIrql: int;
  var {:scalar} SyncContext: int;
  var {:scalar} Tmp_888: int;
  var {:pointer} Context_8: int;
  var {:pointer} TrySelectCommand: int;
  var vslice_dummy_var_426: int;
  var vslice_dummy_var_427: int;
  var vslice_dummy_var_3281: int;
  var vslice_dummy_var_3282: int;

  anon0:
    call {:si_unique_call 2074} SyncContext := __HAVOC_malloc(8);
    Context_8 := actual_Context_8;
    TrySelectCommand := actual_TrySelectCommand;
    Status_4 := 0;
    Extension_47 := Context_8;
    Command := TrySelectCommand;
    success := 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L17;

  L17:
    call {:si_unique_call 2075} Status_4 := PptTrySelectLegacyZip#1(Context_8, TrySelectCommand);
    Tmp_885 := Status_4;
    goto L1;

  L1:
    return;

  anon48_Then:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    havoc DeviceID;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto L25;

  L25:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L31;

  L31:
    Status_4 := 0;
    goto L32;

  L32:
    Tmp_885 := Status_4;
    goto L1;

  anon38_Then:
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    i_22 := 0;
    goto L34;

  L34:
    call {:si_unique_call 2076} i_22, Tmp_886, success := PptTrySelectDevice#1_loop_L34(i_22, Tmp_886, success, Extension_47, DeviceID);
    goto L34_last;

  L34_last:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > i_22;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} success == 0;
    Tmp_886 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    havoc vslice_dummy_var_3281;
    call {:si_unique_call 2077} success := PptSend1284_3Command(vslice_dummy_var_3281, Tmp_886);
    i_22 := i_22 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} success != 0;
    goto L35;

  L35:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} success != 0;
    Status_4 := 0;
    goto L32;

  anon41_Then:
    assume {:partition} success == 0;
    Status_4 := -1073741823;
    goto L32;

  anon40_Then:
    assume {:partition} i_22 >= PptDot3Retries;
    goto L35;

  anon39_Then:
    goto L31;

  anon37_Then:
    call {:si_unique_call 2078} Tmp_887 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    Mem_T.INT4[Tmp_887] := CancelIrql;
    call {:si_unique_call 2079} IoAcquireCancelSpinLock(Tmp_887);
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    CancelIrql := Mem_T.INT4[Tmp_887];
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    assume {:nonnull} SyncContext != 0;
    assume SyncContext > 0;
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 2080} vslice_dummy_var_427 := KeSynchronizeExecution(0, li2bplFunctionConstant192, SyncContext);
    goto L56;

  L56:
    assume {:nonnull} SyncContext != 0;
    assume SyncContext > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 2081} IoReleaseCancelSpinLock(CancelIrql);
    Status_4 := 259;
    goto L32;

  anon43_Then:
    call {:si_unique_call 2082} IoReleaseCancelSpinLock(CancelIrql);
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L67;

  L67:
    Status_4 := 0;
    goto L32;

  anon51_Then:
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    i_22 := 0;
    goto L69;

  L69:
    call {:si_unique_call 2083} i_22, success, Tmp_888 := PptTrySelectDevice#1_loop_L69(i_22, success, Extension_47, DeviceID, Tmp_888);
    goto L69_last;

  L69_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > i_22;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} success == 0;
    Tmp_888 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    havoc vslice_dummy_var_3282;
    call {:si_unique_call 2084} success := PptSend1284_3Command(vslice_dummy_var_3282, Tmp_888);
    i_22 := i_22 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    assume false;
    return;

  anon47_Then:
    assume {:partition} success != 0;
    goto L70;

  L70:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} success != 0;
    Status_4 := 0;
    goto L32;

  anon46_Then:
    assume {:partition} success == 0;
    Status_4 := -1073741823;
    goto L32;

  anon45_Then:
    assume {:partition} i_22 >= PptDot3Retries;
    goto L70;

  anon44_Then:
    goto L67;

  anon50_Then:
    call {:si_unique_call 2085} vslice_dummy_var_426 := PptSynchronizedIncrement(SyncContext);
    goto L56;

  anon49_Then:
    assume {:nonnull} Extension_47 != 0;
    assume Extension_47 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Status_4 := -1073741811;
    goto L32;

  anon36_Then:
    goto L25;

  anon35_Then:
    goto L17;
}



procedure {:origName "PptTrySelectDevice"} PptTrySelectDevice#1(actual_Context_8: int, actual_TrySelectCommand: int) returns (Tmp_885: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_885 == -1073741811 || Tmp_885 == 0 || Tmp_885 == -1073741823 || Tmp_885 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#0(actual_Context_11: int, actual_TrySelectCommand_1: int) returns (Tmp_1067: int)
{
  var {:pointer} Tmp_1068: int;
  var {:scalar} sdv_709: int;
  var {:scalar} Status_6: int;
  var {:pointer} Controller_14: int;
  var {:pointer} Command_4: int;
  var {:pointer} fdx_12: int;
  var {:scalar} CancelIrql_1: int;
  var {:scalar} SyncContext_1: int;
  var {:pointer} Context_11: int;
  var {:pointer} TrySelectCommand_1: int;
  var vslice_dummy_var_428: int;
  var vslice_dummy_var_429: int;
  var vslice_dummy_var_430: int;

  anon0:
    call {:si_unique_call 2086} SyncContext_1 := __HAVOC_malloc(8);
    Context_11 := actual_Context_11;
    TrySelectCommand_1 := actual_TrySelectCommand_1;
    fdx_12 := Context_11;
    Command_4 := TrySelectCommand_1;
    Status_6 := 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    havoc Controller_14;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L17;

  L17:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_6 >= 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Status_6 != 259;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 2087} PptLegacyZipSetDiskMode(Controller_14, 207);
    goto L27;

  L27:
    call {:si_unique_call 2088} sdv_709 := PptLegacyZipCheckDevice(Controller_14);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_709 != 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2089} PptDetectEppPort(fdx_12);
    goto L36;

  L36:
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto L18;

  L18:
    Tmp_1067 := Status_6;
    return;

  anon27_Then:
    goto L36;

  anon26_Then:
    goto L36;

  anon25_Then:
    goto L18;

  anon24_Then:
    assume {:partition} sdv_709 == 0;
    call {:si_unique_call 2090} vslice_dummy_var_428 := PptDeselectLegacyZip#0(Context_11, TrySelectCommand_1);
    Status_6 := -1073741823;
    goto L18;

  anon23_Then:
    call {:si_unique_call 2091} PptLegacyZipSetDiskMode(Controller_14, 143);
    goto L27;

  anon22_Then:
    assume {:partition} Status_6 == 259;
    goto L18;

  anon21_Then:
    assume {:partition} 0 > Status_6;
    goto L18;

  anon29_Then:
    call {:si_unique_call 2092} Tmp_1068 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1068 != 0;
    assume Tmp_1068 > 0;
    Mem_T.INT4[Tmp_1068] := CancelIrql_1;
    call {:si_unique_call 2093} IoAcquireCancelSpinLock(Tmp_1068);
    assume {:nonnull} Tmp_1068 != 0;
    assume Tmp_1068 > 0;
    CancelIrql_1 := Mem_T.INT4[Tmp_1068];
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2094} vslice_dummy_var_430 := KeSynchronizeExecution(0, li2bplFunctionConstant192, SyncContext_1);
    goto L50;

  L50:
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    Status_6 := 259;
    goto L51;

  L51:
    call {:si_unique_call 2095} IoReleaseCancelSpinLock(CancelIrql_1);
    goto L17;

  anon28_Then:
    goto L51;

  anon30_Then:
    call {:si_unique_call 2096} vslice_dummy_var_429 := PptSynchronizedIncrement(SyncContext_1);
    goto L50;
}



procedure {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#0(actual_Context_11: int, actual_TrySelectCommand_1: int) returns (Tmp_1067: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_1067 == 0 || Tmp_1067 == 259 || Tmp_1067 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#1(actual_Context_11: int, actual_TrySelectCommand_1: int) returns (Tmp_1067: int)
{
  var {:pointer} Tmp_1068: int;
  var {:scalar} sdv_709: int;
  var {:scalar} Status_6: int;
  var {:pointer} Controller_14: int;
  var {:pointer} Command_4: int;
  var {:pointer} fdx_12: int;
  var {:scalar} CancelIrql_1: int;
  var {:scalar} SyncContext_1: int;
  var {:pointer} Context_11: int;
  var {:pointer} TrySelectCommand_1: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;

  anon0:
    call {:si_unique_call 2097} SyncContext_1 := __HAVOC_malloc(8);
    Context_11 := actual_Context_11;
    TrySelectCommand_1 := actual_TrySelectCommand_1;
    fdx_12 := Context_11;
    Command_4 := TrySelectCommand_1;
    Status_6 := 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    havoc Controller_14;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L17;

  L17:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_6 >= 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Status_6 != 259;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 2098} PptLegacyZipSetDiskMode(Controller_14, 207);
    goto L27;

  L27:
    call {:si_unique_call 2099} sdv_709 := PptLegacyZipCheckDevice(Controller_14);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_709 != 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2100} PptDetectEppPort(fdx_12);
    goto L36;

  L36:
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto L18;

  L18:
    Tmp_1067 := Status_6;
    return;

  anon27_Then:
    goto L36;

  anon26_Then:
    goto L36;

  anon25_Then:
    goto L18;

  anon24_Then:
    assume {:partition} sdv_709 == 0;
    call {:si_unique_call 2101} vslice_dummy_var_431 := PptDeselectLegacyZip#1(Context_11, TrySelectCommand_1);
    Status_6 := -1073741823;
    goto L18;

  anon23_Then:
    call {:si_unique_call 2102} PptLegacyZipSetDiskMode(Controller_14, 143);
    goto L27;

  anon22_Then:
    assume {:partition} Status_6 == 259;
    goto L18;

  anon21_Then:
    assume {:partition} 0 > Status_6;
    goto L18;

  anon29_Then:
    call {:si_unique_call 2103} Tmp_1068 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1068 != 0;
    assume Tmp_1068 > 0;
    Mem_T.INT4[Tmp_1068] := CancelIrql_1;
    call {:si_unique_call 2104} IoAcquireCancelSpinLock(Tmp_1068);
    assume {:nonnull} Tmp_1068 != 0;
    assume Tmp_1068 > 0;
    CancelIrql_1 := Mem_T.INT4[Tmp_1068];
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2105} vslice_dummy_var_433 := KeSynchronizeExecution(0, li2bplFunctionConstant192, SyncContext_1);
    goto L50;

  L50:
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    Status_6 := 259;
    goto L51;

  L51:
    call {:si_unique_call 2106} IoReleaseCancelSpinLock(CancelIrql_1);
    goto L17;

  anon28_Then:
    goto L51;

  anon30_Then:
    call {:si_unique_call 2107} vslice_dummy_var_432 := PptSynchronizedIncrement(SyncContext_1);
    goto L50;
}



procedure {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#1(actual_Context_11: int, actual_TrySelectCommand_1: int) returns (Tmp_1067: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_1067 == 0 || Tmp_1067 == 259 || Tmp_1067 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#0(actual_Context_10: int, actual_DeselectCommand_1: int) returns (Tmp_1049: int)
{
  var {:scalar} i_30: int;
  var {:scalar} Tmp_1051: int;
  var {:pointer} Controller_9: int;
  var {:scalar} Tmp_1052: int;
  var {:pointer} Command_3: int;
  var {:pointer} fdx_11: int;
  var {:pointer} Context_10: int;
  var {:pointer} DeselectCommand_1: int;

  anon0:
    Context_10 := actual_Context_10;
    DeselectCommand_1 := actual_DeselectCommand_1;
    fdx_11 := Context_10;
    assume {:nonnull} fdx_11 != 0;
    assume fdx_11 > 0;
    havoc Controller_9;
    Command_3 := DeselectCommand_1;
    i_30 := 0;
    goto L11;

  L11:
    call {:si_unique_call 2108} i_30, Tmp_1051, Tmp_1052 := PptDeselectLegacyZip#0_loop_L11(i_30, Tmp_1051, Controller_9, Tmp_1052);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 3} {:Counter "i_30"} true;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 3 > i_30;
    Tmp_1052 := i_30;
    havoc Tmp_1051;
    call {:si_unique_call 2109} PptLegacyZipClockPrtModeByte(Controller_9, Tmp_1051);
    i_30 := i_30 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} i_30 >= 3;
    call {:si_unique_call 2110} PptLegacyZipClockPrtModeByte(Controller_9, 15);
    assume {:nonnull} Command_3 != 0;
    assume Command_3 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L24;

  L24:
    Tmp_1049 := 0;
    return;

  anon6_Then:
    call {:si_unique_call 2111} PptFreePort#0(fdx_11);
    goto L24;
}



procedure {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#0(actual_Context_10: int, actual_DeselectCommand_1: int) returns (Tmp_1049: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_1049 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#1(actual_Context_10: int, actual_DeselectCommand_1: int) returns (Tmp_1049: int)
{
  var {:scalar} i_30: int;
  var {:scalar} Tmp_1051: int;
  var {:pointer} Controller_9: int;
  var {:scalar} Tmp_1052: int;
  var {:pointer} Command_3: int;
  var {:pointer} fdx_11: int;
  var {:pointer} Context_10: int;
  var {:pointer} DeselectCommand_1: int;

  anon0:
    Context_10 := actual_Context_10;
    DeselectCommand_1 := actual_DeselectCommand_1;
    fdx_11 := Context_10;
    assume {:nonnull} fdx_11 != 0;
    assume fdx_11 > 0;
    havoc Controller_9;
    Command_3 := DeselectCommand_1;
    i_30 := 0;
    goto L11;

  L11:
    call {:si_unique_call 2112} i_30, Tmp_1051, Tmp_1052 := PptDeselectLegacyZip#1_loop_L11(i_30, Tmp_1051, Controller_9, Tmp_1052);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 3} {:Counter "i_30"} true;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 3 > i_30;
    Tmp_1052 := i_30;
    havoc Tmp_1051;
    call {:si_unique_call 2113} PptLegacyZipClockPrtModeByte(Controller_9, Tmp_1051);
    i_30 := i_30 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} i_30 >= 3;
    call {:si_unique_call 2114} PptLegacyZipClockPrtModeByte(Controller_9, 15);
    assume {:nonnull} Command_3 != 0;
    assume Command_3 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L24;

  L24:
    Tmp_1049 := 0;
    return;

  anon6_Then:
    call {:si_unique_call 2115} PptFreePort#1(fdx_11);
    goto L24;
}



procedure {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#1(actual_Context_10: int, actual_DeselectCommand_1: int) returns (Tmp_1049: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_1049 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFreePort"} PptFreePort#0(actual_Fdx_8: int)
{
  var {:pointer} Irp_33: int;
  var {:scalar} Allocated: int;
  var {:pointer} IrpSp: int;
  var {:scalar} InterruptRefCount: int;
  var {:pointer} sdv_767: int;
  var {:pointer} Tmp_1167: int;
  var {:pointer} Command_5: int;
  var {:pointer} Head: int;
  var {:pointer} fdx_13: int;
  var {:scalar} CancelIrql_2: int;
  var {:scalar} SyncContext_2: int;
  var {:pointer} Fdx_8: int;
  var boogieTmp: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_3283: int;

  anon0:
    call {:si_unique_call 2116} vslice_dummy_var_434 := __HAVOC_malloc(4);
    call {:si_unique_call 2117} SyncContext_2 := __HAVOC_malloc(8);
    Fdx_8 := actual_Fdx_8;
    fdx_13 := Fdx_8;
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    call {:si_unique_call 2118} Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    Mem_T.INT4[Tmp_1167] := CancelIrql_2;
    call {:si_unique_call 2119} IoAcquireCancelSpinLock(Tmp_1167);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    CancelIrql_2 := Mem_T.INT4[Tmp_1167];
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2120} vslice_dummy_var_436 := KeSynchronizeExecution(0, li2bplFunctionConstant193, SyncContext_2);
    goto L24;

  L24:
    call {:si_unique_call 2121} IoReleaseCancelSpinLock(CancelIrql_2);
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    Allocated := 0;
    goto L29;

  L29:
    call {:si_unique_call 2122} Irp_33, Allocated, IrpSp, sdv_767, Tmp_1167, Head, CancelIrql_2, vslice_dummy_var_438, vslice_dummy_var_439, vslice_dummy_var_440, vslice_dummy_var_441, vslice_dummy_var_442 := PptFreePort#0_loop_L29(Irp_33, Allocated, IrpSp, sdv_767, Tmp_1167, Head, fdx_13, CancelIrql_2, SyncContext_2, vslice_dummy_var_438, vslice_dummy_var_439, vslice_dummy_var_440, vslice_dummy_var_441, vslice_dummy_var_442);
    goto L29_last;

  L29_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Allocated != 0;
    goto L31;

  L31:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Allocated == 0;
    call {:si_unique_call 2123} Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    Mem_T.INT4[Tmp_1167] := CancelIrql_2;
    call {:si_unique_call 2124} IoAcquireCancelSpinLock(Tmp_1167);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    CancelIrql_2 := Mem_T.INT4[Tmp_1167];
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    havoc InterruptRefCount;
    call {:si_unique_call 2125} IoReleaseCancelSpinLock(CancelIrql_2);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} InterruptRefCount != 0;
    call {:si_unique_call 2126} vslice_dummy_var_437 := KeSynchronizeExecution(0, li2bplFunctionConstant202, fdx_13);
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} InterruptRefCount == 0;
    goto L1;

  anon22_Then:
    assume {:partition} Allocated != 0;
    goto L1;

  anon20_Then:
    assume {:partition} Allocated == 0;
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2127} Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    Mem_T.INT4[Tmp_1167] := CancelIrql_2;
    call {:si_unique_call 2128} IoAcquireCancelSpinLock(Tmp_1167);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    CancelIrql_2 := Mem_T.INT4[Tmp_1167];
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    call {:si_unique_call 2129} Head := RemoveHeadList(WorkQueue__FDO_EXTENSION(fdx_13));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 2130} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L31;

  anon24_Then:
    call {:si_unique_call 2131} sdv_767 := sdv_containing_record(Head, 88);
    Irp_33 := sdv_767;
    call {:si_unique_call 2132} vslice_dummy_var_442 := PptSetCancelRoutine(Irp_33, 0);
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))] := -1073741536;
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2133} vslice_dummy_var_439 := KeSynchronizeExecution(0, li2bplFunctionConstant193, SyncContext_2);
    goto L74;

  L74:
    call {:si_unique_call 2134} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L77;

  L77:
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    call {:si_unique_call 2135} vslice_dummy_var_440 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_13), Irp_33);
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    havoc vslice_dummy_var_3283;
    call {:si_unique_call 2136} vslice_dummy_var_441 := P4CompleteRequest(Irp_33, Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))], vslice_dummy_var_3283);
    goto L77_dummy;

  L77_dummy:
    assume false;
    return;

  anon27_Then:
    call {:si_unique_call 2137} vslice_dummy_var_438 := PptSynchronizedDecrement(SyncContext_2);
    goto L74;

  anon25_Then:
    Allocated := 1;
    call {:si_unique_call 2138} IoReleaseCancelSpinLock(CancelIrql_2);
    call {:si_unique_call 2139} IrpSp := sdv_IoGetCurrentIrpStackLocation(Irp_33);
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    havoc Command_5;
    assume {:nonnull} Command_5 != 0;
    assume Command_5 > 0;
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    assume false;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))] := boogieTmp;
    return;

  anon26_Then:
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))] := 0;
    goto L98;

  L98:
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    goto L77;

  anon21_Then:
    goto L31;

  anon19_Then:
    call {:si_unique_call 2140} vslice_dummy_var_435 := PptSynchronizedDecrement(SyncContext_2);
    goto L24;
}



procedure {:origName "PptFreePort"} PptFreePort#0(actual_Fdx_8: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFreePort"} PptFreePort#1(actual_Fdx_8: int)
{
  var {:pointer} Irp_33: int;
  var {:scalar} Allocated: int;
  var {:pointer} IrpSp: int;
  var {:scalar} InterruptRefCount: int;
  var {:pointer} sdv_767: int;
  var {:pointer} Tmp_1167: int;
  var {:pointer} Command_5: int;
  var {:pointer} Head: int;
  var {:pointer} fdx_13: int;
  var {:scalar} CancelIrql_2: int;
  var {:scalar} SyncContext_2: int;
  var {:pointer} Fdx_8: int;
  var boogieTmp: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_3284: int;

  anon0:
    call {:si_unique_call 2141} vslice_dummy_var_443 := __HAVOC_malloc(4);
    call {:si_unique_call 2142} SyncContext_2 := __HAVOC_malloc(8);
    Fdx_8 := actual_Fdx_8;
    fdx_13 := Fdx_8;
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    call {:si_unique_call 2143} Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    Mem_T.INT4[Tmp_1167] := CancelIrql_2;
    call {:si_unique_call 2144} IoAcquireCancelSpinLock(Tmp_1167);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    CancelIrql_2 := Mem_T.INT4[Tmp_1167];
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2145} vslice_dummy_var_445 := KeSynchronizeExecution(0, li2bplFunctionConstant193, SyncContext_2);
    goto L24;

  L24:
    call {:si_unique_call 2146} IoReleaseCancelSpinLock(CancelIrql_2);
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    Allocated := 0;
    goto L29;

  L29:
    call {:si_unique_call 2147} Irp_33, Allocated, IrpSp, sdv_767, Tmp_1167, Command_5, Head, CancelIrql_2, boogieTmp, vslice_dummy_var_447, vslice_dummy_var_448, vslice_dummy_var_449, vslice_dummy_var_450, vslice_dummy_var_451 := PptFreePort#1_loop_L29(Irp_33, Allocated, IrpSp, sdv_767, Tmp_1167, Command_5, Head, fdx_13, CancelIrql_2, SyncContext_2, Fdx_8, boogieTmp, vslice_dummy_var_447, vslice_dummy_var_448, vslice_dummy_var_449, vslice_dummy_var_450, vslice_dummy_var_451);
    goto L29_last;

  L29_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Allocated != 0;
    goto L31;

  L31:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Allocated == 0;
    call {:si_unique_call 2148} Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    Mem_T.INT4[Tmp_1167] := CancelIrql_2;
    call {:si_unique_call 2149} IoAcquireCancelSpinLock(Tmp_1167);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    CancelIrql_2 := Mem_T.INT4[Tmp_1167];
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    havoc InterruptRefCount;
    call {:si_unique_call 2150} IoReleaseCancelSpinLock(CancelIrql_2);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} InterruptRefCount != 0;
    call {:si_unique_call 2151} vslice_dummy_var_446 := KeSynchronizeExecution(0, li2bplFunctionConstant202, fdx_13);
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} InterruptRefCount == 0;
    goto L1;

  anon22_Then:
    assume {:partition} Allocated != 0;
    goto L1;

  anon20_Then:
    assume {:partition} Allocated == 0;
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2152} Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    Mem_T.INT4[Tmp_1167] := CancelIrql_2;
    call {:si_unique_call 2153} IoAcquireCancelSpinLock(Tmp_1167);
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    CancelIrql_2 := Mem_T.INT4[Tmp_1167];
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    call {:si_unique_call 2154} Head := RemoveHeadList(WorkQueue__FDO_EXTENSION(fdx_13));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 2155} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L31;

  anon24_Then:
    call {:si_unique_call 2156} sdv_767 := sdv_containing_record(Head, 88);
    Irp_33 := sdv_767;
    call {:si_unique_call 2157} vslice_dummy_var_451 := PptSetCancelRoutine(Irp_33, 0);
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))] := -1073741536;
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2158} vslice_dummy_var_448 := KeSynchronizeExecution(0, li2bplFunctionConstant193, SyncContext_2);
    goto L74;

  L74:
    call {:si_unique_call 2159} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L77;

  L77:
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    call {:si_unique_call 2160} vslice_dummy_var_449 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_13), Irp_33);
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    havoc vslice_dummy_var_3284;
    call {:si_unique_call 2161} vslice_dummy_var_450 := P4CompleteRequest(Irp_33, Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))], vslice_dummy_var_3284);
    goto L77_dummy;

  L77_dummy:
    assume false;
    return;

  anon27_Then:
    call {:si_unique_call 2162} vslice_dummy_var_447 := PptSynchronizedDecrement(SyncContext_2);
    goto L74;

  anon25_Then:
    Allocated := 1;
    call {:si_unique_call 2163} IoReleaseCancelSpinLock(CancelIrql_2);
    call {:si_unique_call 2164} IrpSp := sdv_IoGetCurrentIrpStackLocation(Irp_33);
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    havoc Command_5;
    assume {:nonnull} Command_5 != 0;
    assume Command_5 > 0;
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    call {:si_unique_call 2165} boogieTmp := PptTrySelectDevice#0(Fdx_8, Command_5);
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))] := boogieTmp;
    goto L98;

  L98:
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    goto L77;

  anon26_Then:
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_33))] := 0;
    goto L98;

  anon21_Then:
    goto L31;

  anon19_Then:
    call {:si_unique_call 2166} vslice_dummy_var_444 := PptSynchronizedDecrement(SyncContext_2);
    goto L24;
}



procedure {:origName "PptFreePort"} PptFreePort#1(actual_Fdx_8: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoPower"} PptFdoPower#0(actual_pDeviceObject_1: int, actual_pIrp_1: int) returns (Tmp_382: int)
{
  var {:pointer} SD1_1: int;
  var {:scalar} hookit: int;
  var {:scalar} bogusIrp: int;
  var {:scalar} powerState_1: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} fdx_7: int;
  var {:scalar} sdv_1: int;
  var {:scalar} status_17: int;
  var {:scalar} powerType_1: int;
  var {:pointer} pDeviceObject_1: int;
  var {:pointer} pIrp_1: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_3285: int;
  var vslice_dummy_var_3286: int;

  anon0:
    call {:si_unique_call 2167} powerState_1 := __HAVOC_malloc(8);
    call {:si_unique_call 2168} sdv_1 := __HAVOC_malloc(8);
    pDeviceObject_1 := actual_pDeviceObject_1;
    pIrp_1 := actual_pIrp_1;
    hookit := 0;
    bogusIrp := 0;
    assume {:nonnull} pDeviceObject_1 != 0;
    assume pDeviceObject_1 > 0;
    havoc fdx_7;
    call {:si_unique_call 2169} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(pIrp_1);
    call {:si_unique_call 2170} status_17 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_17 >= 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc powerType_1;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] != 2;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] == 3;
    status_17 := 0;
    goto L32;

  L32:
    call {:si_unique_call 2171} sdv_IoCopyCurrentIrpStackLocationToNext(pIrp_1);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_17 >= 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} hookit != 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2172} SLIC_sdv_IoSetCompletionRoutine_entry(0);
    goto L102;

  L102:
    call {:si_unique_call 2173} sdv_IoSetCompletionRoutine(pIrp_1, li2bplFunctionConstant771, fdx_7, 1, 1, 1);
    call {:si_unique_call 2174} status_17 := PoCallDriver#0(0, pIrp_1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2175} SLIC_PoCallDriver_exit(0);
    goto L50;

  L50:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    call {:si_unique_call 2176} vslice_dummy_var_452 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_7), pIrp_1);
    Tmp_382 := status_17;
    goto L1;

  L1:
    return;

  anon44_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L50;

  anon36_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L102;

  anon35_Then:
    assume {:partition} hookit == 0;
    call {:si_unique_call 2177} PoStartNextPowerIrp(0);
    call {:si_unique_call 2178} status_17 := PoCallDriver#0(0, pIrp_1);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2179} SLIC_PoCallDriver_exit(0);
    goto L50;

  anon45_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L50;

  anon34_Then:
    assume {:partition} 0 > status_17;
    call {:si_unique_call 2180} PoStartNextPowerIrp(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} bogusIrp != 0;
    call {:si_unique_call 2181} status_17 := PoCallDriver#0(0, pIrp_1);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2182} SLIC_PoCallDriver_exit(0);
    goto L50;

  anon46_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L50;

  anon37_Then:
    assume {:partition} bogusIrp == 0;
    assume {:nonnull} pIrp_1 != 0;
    assume pIrp_1 > 0;
    havoc vslice_dummy_var_3285;
    call {:si_unique_call 2183} vslice_dummy_var_453 := P4CompleteRequest(pIrp_1, status_17, vslice_dummy_var_3285);
    goto L50;

  anon42_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] != 3;
    bogusIrp := 1;
    status_17 := -1073741637;
    goto L32;

  anon47_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] == 2;
    status_17 := 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} powerType_1 != 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} powerType_1 == 1;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    call {:si_unique_call 2184} SD1_1 := PoSetPowerState(0, powerType_1, powerState_1);
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L32;

  anon39_Then:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    hookit := 1;
    goto L32;

  anon40_Then:
    goto L32;

  anon43_Then:
    assume {:partition} powerType_1 != 1;
    goto L32;

  anon48_Then:
    assume {:partition} powerType_1 == 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume false;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    return;

  anon38_Then:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    hookit := 1;
    goto L32;

  anon41_Then:
    goto L32;

  anon33_Then:
    assume {:partition} 0 > status_17;
    call {:si_unique_call 2185} PoStartNextPowerIrp(0);
    assume {:nonnull} pIrp_1 != 0;
    assume pIrp_1 > 0;
    havoc vslice_dummy_var_3286;
    call {:si_unique_call 2186} Tmp_382 := P4CompleteRequest(pIrp_1, status_17, vslice_dummy_var_3286);
    goto L1;
}



procedure {:origName "PptFdoPower"} PptFdoPower#0(actual_pDeviceObject_1: int, actual_pIrp_1: int) returns (Tmp_382: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, completion, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_382 == 259 || Tmp_382 == 0 || Tmp_382 == -1073741637 || Tmp_382 == -1073741823 || Tmp_382 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptFdoPower"} PptFdoPower#1(actual_pDeviceObject_1: int, actual_pIrp_1: int) returns (Tmp_382: int)
{
  var {:pointer} SD1_1: int;
  var {:scalar} hookit: int;
  var {:scalar} bogusIrp: int;
  var {:scalar} powerState_1: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} fdx_7: int;
  var {:scalar} sdv_1: int;
  var {:scalar} status_17: int;
  var {:scalar} powerType_1: int;
  var {:pointer} pDeviceObject_1: int;
  var {:pointer} pIrp_1: int;
  var vslice_dummy_var_454: int;
  var vslice_dummy_var_455: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_3287: int;
  var vslice_dummy_var_3288: int;
  var vslice_dummy_var_3289: int;

  anon0:
    call {:si_unique_call 2187} powerState_1 := __HAVOC_malloc(8);
    call {:si_unique_call 2188} sdv_1 := __HAVOC_malloc(8);
    pDeviceObject_1 := actual_pDeviceObject_1;
    pIrp_1 := actual_pIrp_1;
    hookit := 0;
    bogusIrp := 0;
    assume {:nonnull} pDeviceObject_1 != 0;
    assume pDeviceObject_1 > 0;
    havoc fdx_7;
    call {:si_unique_call 2189} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(pIrp_1);
    call {:si_unique_call 2190} status_17 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_17 >= 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc powerType_1;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] != 2;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] == 3;
    status_17 := 0;
    goto L32;

  L32:
    call {:si_unique_call 2191} sdv_IoCopyCurrentIrpStackLocationToNext(pIrp_1);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_17 >= 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} hookit != 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2192} SLIC_sdv_IoSetCompletionRoutine_entry(0);
    goto L102;

  L102:
    call {:si_unique_call 2193} sdv_IoSetCompletionRoutine(pIrp_1, li2bplFunctionConstant771, fdx_7, 1, 1, 1);
    call {:si_unique_call 2194} status_17 := PoCallDriver#1(0, pIrp_1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2195} SLIC_PoCallDriver_exit(0);
    goto L50;

  L50:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    call {:si_unique_call 2196} vslice_dummy_var_454 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_7), pIrp_1);
    Tmp_382 := status_17;
    goto L1;

  L1:
    return;

  anon44_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L50;

  anon36_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L102;

  anon35_Then:
    assume {:partition} hookit == 0;
    call {:si_unique_call 2197} PoStartNextPowerIrp(0);
    call {:si_unique_call 2198} status_17 := PoCallDriver#1(0, pIrp_1);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2199} SLIC_PoCallDriver_exit(0);
    goto L50;

  anon45_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L50;

  anon34_Then:
    assume {:partition} 0 > status_17;
    call {:si_unique_call 2200} PoStartNextPowerIrp(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} bogusIrp != 0;
    call {:si_unique_call 2201} status_17 := PoCallDriver#1(0, pIrp_1);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume pIrp_1 == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2202} SLIC_PoCallDriver_exit(0);
    goto L50;

  anon46_Then:
    assume !(pIrp_1 == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L50;

  anon37_Then:
    assume {:partition} bogusIrp == 0;
    assume {:nonnull} pIrp_1 != 0;
    assume pIrp_1 > 0;
    havoc vslice_dummy_var_3287;
    call {:si_unique_call 2203} vslice_dummy_var_455 := P4CompleteRequest(pIrp_1, status_17, vslice_dummy_var_3287);
    goto L50;

  anon42_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] != 3;
    bogusIrp := 1;
    status_17 := -1073741637;
    goto L32;

  anon47_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack_1)] == 2;
    status_17 := 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} powerType_1 != 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} powerType_1 == 1;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    call {:si_unique_call 2204} SD1_1 := PoSetPowerState(0, powerType_1, powerState_1);
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L32;

  anon39_Then:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    hookit := 1;
    goto L32;

  anon40_Then:
    goto L32;

  anon43_Then:
    assume {:partition} powerType_1 != 1;
    goto L32;

  anon48_Then:
    assume {:partition} powerType_1 == 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc vslice_dummy_var_3288;
    call {:si_unique_call 2205} vslice_dummy_var_456 := PoRequestPowerIrp#0(vslice_dummy_var_3288, 2, powerState_1, 0, 0, 0);
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L32;

  anon38_Then:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    hookit := 1;
    goto L32;

  anon41_Then:
    goto L32;

  anon33_Then:
    assume {:partition} 0 > status_17;
    call {:si_unique_call 2206} PoStartNextPowerIrp(0);
    assume {:nonnull} pIrp_1 != 0;
    assume pIrp_1 > 0;
    havoc vslice_dummy_var_3289;
    call {:si_unique_call 2207} Tmp_382 := P4CompleteRequest(pIrp_1, status_17, vslice_dummy_var_3289);
    goto L1;
}



procedure {:origName "PptFdoPower"} PptFdoPower#1(actual_pDeviceObject_1: int, actual_pIrp_1: int) returns (Tmp_382: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, completion, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_382 == 259 || Tmp_382 == 0 || Tmp_382 == -1073741637 || Tmp_382 == -1073741823 || Tmp_382 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver#0(actual_DeviceObject_3: int, actual_Irp: int) returns (Tmp_74: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_2: int;
  var {:pointer} Irp: int;

  anon0:
    call {:si_unique_call 2208} completion_1 := __HAVOC_malloc(4);
    Irp := actual_Irp;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_2 := 259;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := 259;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L19;

  L19:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  L29:
    Tmp_74 := status_2;
    return;

  anon48_Then:
    assume {:partition} sdv_compFset != 0;
    assume false;
    return;

  anon47_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L23;

  anon46_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L21;

  anon65_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L19;

  anon61_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := -1073741823;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L58;

  L58:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_invoke_on_error != 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_compFset != 0;
    assume false;
    return;

  anon60_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon59_Then:
    assume {:partition} sdv_invoke_on_error == 0;
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L62;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L60;

  anon66_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L58;

  anon62_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := -1073741536;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L32;

  L32:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_invoke_on_cancel != 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_compFset != 0;
    assume false;
    return;

  anon52_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon51_Then:
    assume {:partition} sdv_invoke_on_cancel == 0;
    goto L29;

  anon50_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L36;

  anon49_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L34;

  anon64_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L32;

  anon45_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L45;

  L45:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_invoke_on_success != 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_compFset != 0;
    assume false;
    return;

  anon56_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon55_Then:
    assume {:partition} sdv_invoke_on_success == 0;
    goto L29;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L49;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L47;

  anon63_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L45;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver#0(actual_DeviceObject_3: int, actual_Irp: int) returns (Tmp_74: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} Tmp_74 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver#1(actual_DeviceObject_3: int, actual_Irp: int) returns (Tmp_74: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_2: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_457: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_3290: int;
  var vslice_dummy_var_3291: int;
  var vslice_dummy_var_3292: int;
  var vslice_dummy_var_3293: int;

  anon0:
    call {:si_unique_call 2209} completion_1 := __HAVOC_malloc(4);
    Irp := actual_Irp;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_2 := 259;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := 259;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L19;

  L19:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  L29:
    Tmp_74 := status_2;
    return;

  anon48_Then:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3290;
    call {:si_unique_call 2210} vslice_dummy_var_457 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp, vslice_dummy_var_3290, completion_1);
    goto L29;

  anon47_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L23;

  anon46_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L21;

  anon65_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L19;

  anon61_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := -1073741823;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L58;

  L58:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_invoke_on_error != 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3291;
    call {:si_unique_call 2211} vslice_dummy_var_460 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp, vslice_dummy_var_3291, completion_1);
    goto L29;

  anon60_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon59_Then:
    assume {:partition} sdv_invoke_on_error == 0;
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L62;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L60;

  anon66_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L58;

  anon62_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := -1073741536;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L32;

  L32:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_invoke_on_cancel != 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3292;
    call {:si_unique_call 2212} vslice_dummy_var_458 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp, vslice_dummy_var_3292, completion_1);
    goto L29;

  anon52_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon51_Then:
    assume {:partition} sdv_invoke_on_cancel == 0;
    goto L29;

  anon50_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L36;

  anon49_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L34;

  anon64_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L32;

  anon45_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L45;

  L45:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_invoke_on_success != 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_compFset != 0;
    havoc vslice_dummy_var_3293;
    call {:si_unique_call 2213} vslice_dummy_var_459 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp, vslice_dummy_var_3293, completion_1);
    goto L29;

  anon56_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon55_Then:
    assume {:partition} sdv_invoke_on_success == 0;
    goto L29;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp;
    goto L49;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp;
    goto L47;

  anon63_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp;
    goto L45;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver#1(actual_DeviceObject_3: int, actual_Irp: int) returns (Tmp_74: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_74 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_9: int, actual_Irp_5: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_170: int)
{
  var {:scalar} Status: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} Irp_5: int;
  var {:pointer} Context_7: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_9 := actual_DeviceObject_9;
    Irp_5 := actual_Irp_5;
    Context_7 := actual_Context_7;
    Completion := actual_Completion;
    call {:si_unique_call 2214} irpsp := sdv_IoGetNextIrpStackLocation(Irp_5);
    Status := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant245;
    call {:si_unique_call 2215} Status := ParAllocPortCompletionRoutine(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant226;
    call {:si_unique_call 2216} Status := ParSynchCompletionRoutine(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant771;
    call {:si_unique_call 2217} Status := PptPowerComplete#0(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant187;
    call {:si_unique_call 2218} Status := PptSynchCompletionRoutine(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    Tmp_170 := Status;
    return;

  anon11_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant187;
    goto L62;

  anon10_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant771;
    goto L45;

  anon9_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant226;
    goto L28;

  anon12_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant245;
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_9: int, actual_Irp_5: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_170: int);
  modifies Mem_T.INT4, alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_170 == -1073741802 || Tmp_170 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_9: int, actual_Irp_5: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_170: int)
{
  var {:scalar} Status: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} Irp_5: int;
  var {:pointer} Context_7: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_9 := actual_DeviceObject_9;
    Irp_5 := actual_Irp_5;
    Context_7 := actual_Context_7;
    Completion := actual_Completion;
    call {:si_unique_call 2219} irpsp := sdv_IoGetNextIrpStackLocation(Irp_5);
    Status := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant245;
    call {:si_unique_call 2220} Status := ParAllocPortCompletionRoutine(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant226;
    call {:si_unique_call 2221} Status := ParSynchCompletionRoutine(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant771;
    call {:si_unique_call 2222} Status := PptPowerComplete#1(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant187;
    call {:si_unique_call 2223} Status := PptSynchCompletionRoutine(DeviceObject_9, Irp_5, Context_7);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    Tmp_170 := Status;
    return;

  anon11_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant187;
    goto L62;

  anon10_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant771;
    goto L45;

  anon9_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant226;
    goto L28;

  anon12_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant245;
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_9: int, actual_Irp_5: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_170: int);
  modifies Mem_T.INT4, alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_170 == -1073741802 || Tmp_170 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPowerComplete"} PptPowerComplete#0(actual_pDeviceObject: int, actual_pIrp: int, actual_FdxIn: int) returns (Tmp_380: int)
{
  var {:pointer} SD2: int;
  var {:scalar} powerState: int;
  var {:scalar} sdv_2: int;
  var {:pointer} pIrpStack: int;
  var {:pointer} Fdx_5: int;
  var {:scalar} powerType: int;
  var {:pointer} pIrp: int;
  var {:pointer} FdxIn: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_3294: int;

  anon0:
    call {:si_unique_call 2224} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 2225} sdv_2 := __HAVOC_malloc(8);
    pIrp := actual_pIrp;
    FdxIn := actual_FdxIn;
    Fdx_5 := FdxIn;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    call {:si_unique_call 2226} sdv_IoMarkIrpPending(0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume pIrp == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2227} SLIC_sdv_IoMarkIrpPending_exit(strConst__li2bpl0);
    goto L9;

  L9:
    call {:si_unique_call 2228} pIrpStack := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    havoc powerType;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack)] == 2;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} powerType != 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} powerType == 1;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 2229} SD2 := PoSetPowerState(0, powerType, powerState);
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto L19;

  L19:
    call {:si_unique_call 2230} PoStartNextPowerIrp(0);
    Tmp_380 := 0;
    return;

  anon24_Then:
    goto L19;

  anon23_Then:
    goto L19;

  anon27_Then:
    assume {:partition} powerType != 1;
    goto L19;

  anon21_Then:
    assume {:partition} powerType == 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    havoc vslice_dummy_var_3294;
    call {:si_unique_call 2231} vslice_dummy_var_461 := PoRequestPowerIrp#0(vslice_dummy_var_3294, 2, powerState, 0, 0, 0);
    goto L39;

  L39:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto L19;

  anon26_Then:
    goto L39;

  anon25_Then:
    goto L19;

  anon22_Then:
    goto L19;

  anon30_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack)] != 2;
    goto L19;

  anon28_Then:
    assume !(pIrp == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L9;

  anon29_Then:
    goto L9;
}



procedure {:origName "PptPowerComplete"} PptPowerComplete#0(actual_pDeviceObject: int, actual_pIrp: int, actual_FdxIn: int) returns (Tmp_380: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_380 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptPowerComplete"} PptPowerComplete#1(actual_pDeviceObject: int, actual_pIrp: int, actual_FdxIn: int) returns (Tmp_380: int)
{
  var {:pointer} SD2: int;
  var {:scalar} powerState: int;
  var {:scalar} sdv_2: int;
  var {:pointer} pIrpStack: int;
  var {:pointer} Fdx_5: int;
  var {:scalar} powerType: int;
  var {:pointer} pIrp: int;
  var {:pointer} FdxIn: int;
  var vslice_dummy_var_462: int;
  var vslice_dummy_var_3295: int;

  anon0:
    call {:si_unique_call 2232} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 2233} sdv_2 := __HAVOC_malloc(8);
    pIrp := actual_pIrp;
    FdxIn := actual_FdxIn;
    Fdx_5 := FdxIn;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    call {:si_unique_call 2234} sdv_IoMarkIrpPending(0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume pIrp == SLAM_guard_O_0;
    assume SLAM_guard_O_0 != SLAM_guard_O_0_init;
    call {:si_unique_call 2235} SLIC_sdv_IoMarkIrpPending_exit(strConst__li2bpl0);
    goto L9;

  L9:
    call {:si_unique_call 2236} pIrpStack := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    havoc powerType;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack)] == 2;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} powerType != 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} powerType == 1;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 2237} SD2 := PoSetPowerState(0, powerType, powerState);
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto L19;

  L19:
    call {:si_unique_call 2238} PoStartNextPowerIrp(0);
    Tmp_380 := 0;
    return;

  anon24_Then:
    goto L19;

  anon23_Then:
    goto L19;

  anon27_Then:
    assume {:partition} powerType != 1;
    goto L19;

  anon21_Then:
    assume {:partition} powerType == 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    havoc vslice_dummy_var_3295;
    call {:si_unique_call 2239} vslice_dummy_var_462 := PoRequestPowerIrp#1(vslice_dummy_var_3295, 2, powerState, 0, 0, 0);
    goto L39;

  L39:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto L19;

  anon26_Then:
    goto L39;

  anon25_Then:
    goto L19;

  anon22_Then:
    goto L19;

  anon30_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(pIrpStack)] != 2;
    goto L19;

  anon28_Then:
    assume !(pIrp == SLAM_guard_O_0 && SLAM_guard_O_0 != SLAM_guard_O_0_init);
    goto L9;

  anon29_Then:
    goto L9;
}



procedure {:origName "PptPowerComplete"} PptPowerComplete#1(actual_pDeviceObject: int, actual_pIrp: int, actual_FdxIn: int) returns (Tmp_380: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_380 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_6: int, actual_MinorFunction: int, actual_SD1: int, actual_CompletionFunction: int, actual_Context_5: int, actual_Irp_2: int) returns (Tmp_111: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} sdv_43: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} SD1: int;
  var {:scalar} CompletionFunction: int;
  var vslice_dummy_var_463: int;
  var vslice_dummy_var_464: int;

  anon0:
    call {:si_unique_call 2240} PowerState_1 := __HAVOC_malloc(8);
    MinorFunction := actual_MinorFunction;
    SD1 := actual_SD1;
    CompletionFunction := actual_CompletionFunction;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_111 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    sdv_43 := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(sdv_power_irp)))];
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_43)] := MinorFunction;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_43)] := 0;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    call {:si_unique_call 2241} vslice_dummy_var_464 := PptDispatchPower#0(sdv_p_devobj_fdo, sdv_power_irp);
    call {:si_unique_call 2242} vslice_dummy_var_463 := sdv_RunPowerCompletionRoutines(0, MinorFunction, PowerState_1, 0, 0, CompletionFunction);
    Tmp_111 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_111 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_6: int, actual_MinorFunction: int, actual_SD1: int, actual_CompletionFunction: int, actual_Context_5: int, actual_Irp_2: int) returns (Tmp_111: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_111 == -1073741584 || Tmp_111 == 259 || Tmp_111 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_6: int, actual_MinorFunction: int, actual_SD1: int, actual_CompletionFunction: int, actual_Context_5: int, actual_Irp_2: int) returns (Tmp_111: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} sdv_43: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} SD1: int;
  var {:scalar} CompletionFunction: int;
  var vslice_dummy_var_465: int;
  var vslice_dummy_var_466: int;

  anon0:
    call {:si_unique_call 2243} PowerState_1 := __HAVOC_malloc(8);
    MinorFunction := actual_MinorFunction;
    SD1 := actual_SD1;
    CompletionFunction := actual_CompletionFunction;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_111 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    sdv_43 := Mem_T.CurrentStackLocation_unnamed_tag_6[CurrentStackLocation_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(sdv_power_irp)))];
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_43)] := MinorFunction;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_43)] := 0;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} sdv_43 != 0;
    assume sdv_43 > 0;
    call {:si_unique_call 2244} vslice_dummy_var_466 := PptDispatchPower#1(sdv_p_devobj_fdo, sdv_power_irp);
    call {:si_unique_call 2245} vslice_dummy_var_465 := sdv_RunPowerCompletionRoutines(0, MinorFunction, PowerState_1, 0, 0, CompletionFunction);
    Tmp_111 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_111 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_6: int, actual_MinorFunction: int, actual_SD1: int, actual_CompletionFunction: int, actual_Context_5: int, actual_Irp_2: int) returns (Tmp_111: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.CompletionRoutine__IO_STACK_LOCATION, completion, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} Tmp_111 == -1073741584 || Tmp_111 == 259 || Tmp_111 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDispatchPower"} PptDispatchPower#0(actual_DevObj_1: int, actual_Irp_14: int) returns (Tmp_689: int)
{
  var {:pointer} fdx_9: int;
  var {:pointer} DevObj_1: int;
  var {:pointer} Irp_14: int;

  anon0:
    DevObj_1 := actual_DevObj_1;
    Irp_14 := actual_Irp_14;
    assume {:nonnull} DevObj_1 != 0;
    assume DevObj_1 > 0;
    havoc fdx_9;
    assume {:nonnull} fdx_9 != 0;
    assume fdx_9 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2246} Tmp_689 := PptFdoPower#0(DevObj_1, Irp_14);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 2247} Tmp_689 := PptPdoPower(DevObj_1, Irp_14);
    goto L1;
}



procedure {:origName "PptDispatchPower"} PptDispatchPower#0(actual_DevObj_1: int, actual_Irp_14: int) returns (Tmp_689: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, completion, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:origName "PptDispatchPower"} PptDispatchPower#1(actual_DevObj_1: int, actual_Irp_14: int) returns (Tmp_689: int)
{
  var {:pointer} fdx_9: int;
  var {:pointer} DevObj_1: int;
  var {:pointer} Irp_14: int;

  anon0:
    DevObj_1 := actual_DevObj_1;
    Irp_14 := actual_Irp_14;
    assume {:nonnull} DevObj_1 != 0;
    assume DevObj_1 > 0;
    havoc fdx_9;
    assume {:nonnull} fdx_9 != 0;
    assume fdx_9 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2248} Tmp_689 := PptFdoPower#1(DevObj_1, Irp_14);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 2249} Tmp_689 := PptPdoPower(DevObj_1, Irp_14);
    goto L1;
}



procedure {:origName "PptDispatchPower"} PptDispatchPower#1(actual_DevObj_1: int, actual_Irp_14: int) returns (Tmp_689: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, completion, Mem_T.CompletionRoutine__IO_STACK_LOCATION, sdv_compFset, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, s, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(completion) == 0 ==> completion != 1;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> completion == old(completion);
  free ensures {:va_keep} old(SLAM_guard_O_0) == old(SLAM_guard_O_0_init) ==> s == old(s);
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} completion == 0 || completion == old(completion);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation {:SIextraRecBound 2} P5SelectDaisyChainDevice_loop_L9(in_Tmp_220: int, in_maxRetries: int, in_selected: int, in_retryCount: int, in_Controller: int, in_DeviceId: int) returns (out_Tmp_220: int, out_selected: int, out_retryCount: int)
{

  entry:
    out_Tmp_220, out_selected, out_retryCount := in_Tmp_220, in_selected, in_retryCount;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_selected == 0;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} in_maxRetries > out_retryCount;
    out_Tmp_220 := BOR(BOR(BOR(32, 64), 128), in_DeviceId);
    call {:si_unique_call 2250} out_selected := PptSend1284_3Command(in_Controller, out_Tmp_220);
    out_retryCount := out_retryCount + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 2251} {:si_old_unique_call 1} out_Tmp_220, out_selected, out_retryCount := P5SelectDaisyChainDevice_loop_L9(out_Tmp_220, in_maxRetries, out_selected, out_retryCount, in_Controller, in_DeviceId);
    return;
}



procedure {:LoopProcedure} P5SelectDaisyChainDevice_loop_L9(in_Tmp_220: int, in_maxRetries: int, in_selected: int, in_retryCount: int, in_Controller: int, in_DeviceId: int) returns (out_Tmp_220: int, out_selected: int, out_retryCount: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_220 == in_Tmp_220 || out_Tmp_220 == BOR(BOR(BOR(32, 64), 128), in_DeviceId);
  free ensures {:va_keep} out_selected == 1 || out_selected == 0 || out_selected == in_selected;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4SanitizeMultiSzId_loop_L7(in_i: int, in_p_6: int, in_BufWCharCount: int) returns (out_i: int)
{

  entry:
    out_i := in_i;
    goto L7, exit;

  exit:
    return;

  L7:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} in_BufWCharCount > out_i;
    assume {:nonnull} in_p_6 != 0;
    assume in_p_6 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[in_p_6] == 0;
    goto L13;

  L13:
    out_i := out_i + 1;
    goto L13_dummy;

  L13_dummy:
    havoc out_i;
    return;

  anon12_Then:
    assume {:partition} Mem_T.INT4[in_p_6] != 0;
    assume {:nonnull} in_p_6 != 0;
    assume in_p_6 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 32 >= Mem_T.INT4[in_p_6];
    goto L12;

  L12:
    assume {:nonnull} in_p_6 != 0;
    assume in_p_6 > 0;
    Mem_T.INT4[in_p_6] := 95;
    goto L13;

  anon13_Then:
    assume {:partition} Mem_T.INT4[in_p_6] > 32;
    assume {:nonnull} in_p_6 != 0;
    assume in_p_6 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.INT4[in_p_6] <= 127;
    assume {:nonnull} in_p_6 != 0;
    assume in_p_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 44 != Mem_T.INT4[in_p_6];
    goto L13;

  anon15_Then:
    assume {:partition} 44 == Mem_T.INT4[in_p_6];
    goto L12;

  anon14_Then:
    assume {:partition} 127 < Mem_T.INT4[in_p_6];
    goto L12;
}



procedure {:LoopProcedure} P4SanitizeMultiSzId_loop_L7(in_i: int, in_p_6: int, in_BufWCharCount: int) returns (out_i: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptIsPci_loop_L26(in_i_1: int, in_largePortRangeFound: int, in_PartialResourceDescriptor: int, in_rangeLength: int, in_Tmp_250: int, in_Tmp_251: int, in_portResourceDescriptorCount: int, in_PartialResourceList: int) returns (out_i_1: int, out_largePortRangeFound: int, out_PartialResourceDescriptor: int, out_rangeLength: int, out_Tmp_250: int, out_Tmp_251: int, out_portResourceDescriptorCount: int)
{

  entry:
    out_i_1, out_largePortRangeFound, out_PartialResourceDescriptor, out_rangeLength, out_Tmp_250, out_Tmp_251, out_portResourceDescriptorCount := in_i_1, in_largePortRangeFound, in_PartialResourceDescriptor, in_rangeLength, in_Tmp_250, in_Tmp_251, in_portResourceDescriptorCount;
    goto L26, exit;

  exit:
    return;

  L26:
    assume {:nonnull} in_PartialResourceList != 0;
    assume in_PartialResourceList > 0;
    goto anon16_Else;

  anon16_Else:
    out_Tmp_250 := out_i_1;
    assume {:nonnull} in_PartialResourceList != 0;
    assume in_PartialResourceList > 0;
    havoc out_Tmp_251;
    out_PartialResourceDescriptor := out_Tmp_251 + out_Tmp_250 * 292;
    assume {:nonnull} out_PartialResourceDescriptor != 0;
    assume out_PartialResourceDescriptor > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} out_PartialResourceDescriptor != 0;
    assume out_PartialResourceDescriptor > 0;
    havoc out_rangeLength;
    out_portResourceDescriptorCount := out_portResourceDescriptorCount + 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_rangeLength > 8;
    out_largePortRangeFound := 1;
    goto L29;

  L29:
    out_i_1 := out_i_1 + 1;
    goto L29_dummy;

  L29_dummy:
    call {:si_unique_call 2252} {:si_old_unique_call 1} out_i_1, out_largePortRangeFound, out_PartialResourceDescriptor, out_rangeLength, out_Tmp_250, out_Tmp_251, out_portResourceDescriptorCount := PptIsPci_loop_L26(out_i_1, out_largePortRangeFound, out_PartialResourceDescriptor, out_rangeLength, out_Tmp_250, out_Tmp_251, out_portResourceDescriptorCount, in_PartialResourceList);
    return;

  anon21_Then:
    assume {:partition} 8 >= out_rangeLength;
    goto L29;

  anon20_Then:
    goto L29;
}



procedure {:LoopProcedure} PptIsPci_loop_L26(in_i_1: int, in_largePortRangeFound: int, in_PartialResourceDescriptor: int, in_rangeLength: int, in_Tmp_250: int, in_Tmp_251: int, in_portResourceDescriptorCount: int, in_PartialResourceList: int) returns (out_i_1: int, out_largePortRangeFound: int, out_PartialResourceDescriptor: int, out_rangeLength: int, out_Tmp_250: int, out_Tmp_251: int, out_portResourceDescriptorCount: int);
  free ensures {:va_keep} out_largePortRangeFound == 1 || out_largePortRangeFound == in_largePortRangeFound;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpListContainsIrqResourceDescriptor_loop_L7(in_i_2: int, in_curDesc: int, in_List: int) returns (out_i_2: int)
{

  entry:
    out_i_2 := in_i_2;
    goto L7, exit;

  exit:
    return;

  L7:
    assume {:nonnull} in_List != 0;
    assume in_List > 0;
    goto anon5_Else;

  anon5_Else:
    assume {:nonnull} in_curDesc != 0;
    assume in_curDesc > 0;
    goto anon6_Then;

  anon6_Then:
    out_i_2 := out_i_2 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    havoc out_i_2;
    return;
}



procedure {:LoopProcedure} PptPnpListContainsIrqResourceDescriptor_loop_L7(in_i_2: int, in_curDesc: int, in_List: int) returns (out_i_2: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpFilterExistsNonIrqResourceList_loop_L17(in_remain: int, in_curDesc_1: int) returns (out_remain: int)
{

  entry:
    out_remain := in_remain;
    goto L17, exit;

  exit:
    return;

  L17:
    goto anon10_Else;

  anon10_Else:
    assume {:partition} out_remain != 0;
    assume {:nonnull} in_curDesc_1 != 0;
    assume in_curDesc_1 > 0;
    goto anon12_Then;

  anon12_Then:
    out_remain := out_remain - 1;
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    havoc out_remain;
    return;
}



procedure {:LoopProcedure} PptPnpFilterExistsNonIrqResourceList_loop_L17(in_remain: int, in_curDesc_1: int) returns (out_remain: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpFilterExistsNonIrqResourceList_loop_L9(in_i_3: int, in_remain: int, in_listCount: int, in_curList: int, in_foundIrq: int, in_curDesc_1: int) returns (out_i_3: int, out_remain: int, out_curList: int, out_foundIrq: int, out_curDesc_1: int)
{

  entry:
    out_i_3, out_remain, out_curList, out_foundIrq, out_curDesc_1 := in_i_3, in_remain, in_curList, in_foundIrq, in_curDesc_1;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon9_Else;

  anon9_Else:
    assume {:partition} in_listCount > out_i_3;
    assume {:nonnull} out_curList != 0;
    assume out_curList > 0;
    havoc out_remain;
    assume {:nonnull} out_curList != 0;
    assume out_curList > 0;
    havoc out_curDesc_1;
    out_foundIrq := 0;
    goto L17;

  L17:
    call {:si_unique_call 2253} out_remain := PptPnpFilterExistsNonIrqResourceList_loop_L17(out_remain, out_curDesc_1);
    goto L17_last;

  L17_last:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} out_remain != 0;
    assume {:nonnull} out_curDesc_1 != 0;
    assume out_curDesc_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    out_foundIrq := 1;
    goto L18;

  L18:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} out_foundIrq != 0;
    assume {:nonnull} out_curList != 0;
    assume out_curList > 0;
    havoc out_curList;
    out_i_3 := out_i_3 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    call {:si_unique_call 2254} {:si_old_unique_call 1} out_i_3, out_remain, out_curList, out_foundIrq, out_curDesc_1 := PptPnpFilterExistsNonIrqResourceList_loop_L9(out_i_3, out_remain, in_listCount, out_curList, out_foundIrq, out_curDesc_1);
    return;

  anon12_Then:
    out_remain := out_remain - 1;
    assume false;
    return;

  anon10_Then:
    assume {:partition} out_remain == 0;
    goto L18;
}



procedure {:LoopProcedure} PptPnpFilterExistsNonIrqResourceList_loop_L9(in_i_3: int, in_remain: int, in_listCount: int, in_curList: int, in_foundIrq: int, in_curDesc_1: int) returns (out_i_3: int, out_remain: int, out_curList: int, out_foundIrq: int, out_curDesc_1: int);
  free ensures {:va_keep} out_foundIrq == 1 || out_foundIrq == 0 || out_foundIrq == in_foundIrq;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 2} P5DeselectAllDaisyChainDevices_loop_L9(in_maxRetries_1: int, in_deselected: int, in_retryCount_1: int, in_Controller_1: int) returns (out_deselected: int, out_retryCount_1: int)
{

  entry:
    out_deselected, out_retryCount_1 := in_deselected, in_retryCount_1;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_deselected == 0;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} in_maxRetries_1 > out_retryCount_1;
    call {:si_unique_call 2255} out_deselected := PptSend1284_3Command(in_Controller_1, 48);
    out_retryCount_1 := out_retryCount_1 + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 2256} {:si_old_unique_call 1} out_deselected, out_retryCount_1 := P5DeselectAllDaisyChainDevices_loop_L9(in_maxRetries_1, out_deselected, out_retryCount_1, in_Controller_1);
    return;
}



procedure {:LoopProcedure} P5DeselectAllDaisyChainDevices_loop_L9(in_maxRetries_1: int, in_deselected: int, in_retryCount_1: int, in_Controller_1: int) returns (out_deselected: int, out_retryCount_1: int);
  modifies alloc;
  free ensures {:va_keep} out_deselected == 1 || out_deselected == 0 || out_deselected == in_deselected;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(in_i_4: int, in_listCount_1: int, in_curList_1: int) returns (out_i_4: int, out_curList_1: int)
{

  entry:
    out_i_4, out_curList_1 := in_i_4, in_curList_1;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_listCount_1 > out_i_4;
    call {:si_unique_call 2257} PptPnpFilterNukeIrqResourceDescriptors(out_curList_1);
    assume {:nonnull} out_curList_1 != 0;
    assume out_curList_1 > 0;
    havoc out_curList_1;
    out_i_4 := out_i_4 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2258} {:si_old_unique_call 1} out_i_4, out_curList_1 := PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(out_i_4, in_listCount_1, out_curList_1);
    return;
}



procedure {:LoopProcedure} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(in_i_4: int, in_listCount_1: int, in_curList_1: int) returns (out_i_4: int, out_curList_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpStartScanPciCardCmResourceList_loop_L26(in_i_5: int, in_PartialResourceDescriptor_1: int, in_length: int, in_Tmp_277: int, in_Tmp_279: int, in_PartialResourceList_1: int, in_Fdx_3: int, in_FoundPort_1: int, in_FoundIrq_1: int) returns (out_i_5: int, out_PartialResourceDescriptor_1: int, out_length: int, out_Tmp_277: int, out_Tmp_279: int)
{

  entry:
    out_i_5, out_PartialResourceDescriptor_1, out_length, out_Tmp_277, out_Tmp_279 := in_i_5, in_PartialResourceDescriptor_1, in_length, in_Tmp_277, in_Tmp_279;
    goto L26, exit;

  exit:
    return;

  L26:
    assume {:nonnull} in_PartialResourceList_1 != 0;
    assume in_PartialResourceList_1 > 0;
    goto anon19_Else;

  anon19_Else:
    out_Tmp_277 := out_i_5;
    assume {:nonnull} in_PartialResourceList_1 != 0;
    assume in_PartialResourceList_1 > 0;
    havoc out_Tmp_279;
    out_PartialResourceDescriptor_1 := out_Tmp_279 + out_Tmp_277 * 292;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L34;

  L34:
    out_i_5 := out_i_5 + 1;
    goto L34_dummy;

  L34_dummy:
    call {:si_unique_call 2259} {:si_old_unique_call 1} out_i_5, out_PartialResourceDescriptor_1, out_length, out_Tmp_277, out_Tmp_279 := PptPnpStartScanPciCardCmResourceList_loop_L26(out_i_5, out_PartialResourceDescriptor_1, out_length, out_Tmp_277, out_Tmp_279, in_PartialResourceList_1, in_Fdx_3, in_FoundPort_1, in_FoundIrq_1);
    return;

  anon20_Then:
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto L34;

  anon21_Then:
    goto L34;

  anon22_Then:
    assume {:nonnull} in_FoundIrq_1 != 0;
    assume in_FoundIrq_1 > 0;
    Mem_T.INT4[in_FoundIrq_1] := 1;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    goto L34;

  anon27_Then:
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    goto L34;

  anon25_Then:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    havoc out_length;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} out_length != 4;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_length == 8;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_FoundPort_1 != 0;
    assume in_FoundPort_1 > 0;
    Mem_T.INT4[in_FoundPort_1] := 1;
    goto L34;

  anon23_Then:
    assume {:partition} out_length != 8;
    goto L34;

  anon26_Then:
    assume {:partition} out_length == 4;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto L34;
}



procedure {:LoopProcedure} PptPnpStartScanPciCardCmResourceList_loop_L26(in_i_5: int, in_PartialResourceDescriptor_1: int, in_length: int, in_Tmp_277: int, in_Tmp_279: int, in_PartialResourceList_1: int, in_Fdx_3: int, in_FoundPort_1: int, in_FoundIrq_1: int) returns (out_i_5: int, out_PartialResourceDescriptor_1: int, out_length: int, out_Tmp_277: int, out_Tmp_279: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4CreatePdo_loop_L83(in_retryNumber: int, in_symLinkName: int, in_status_12: int, in_wstrSymLinkName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_12: int, out_wstrSymLinkName: int)
{

  entry:
    out_retryNumber, out_status_12, out_wstrSymLinkName := in_retryNumber, in_status_12, in_wstrSymLinkName;
    goto L83, exit;

  exit:
    return;

  L83:
    call {:si_unique_call 2260} out_wstrSymLinkName := P4MakePdoSymLinkName(in_lptName, in_PdoType_2, in_DaisyChainId_2, out_retryNumber);
    goto anon40_Else;

  anon40_Else:
    assume {:partition} out_wstrSymLinkName != 0;
    call {:si_unique_call 2262} RtlInitUnicodeString(in_symLinkName, out_wstrSymLinkName);
    call {:si_unique_call 2263} out_status_12 := IoCreateUnprotectedSymbolicLink(0, 0);
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_status_12 != 0;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} -1073741771 == out_status_12;
    call {:si_unique_call 2261} sdv_ExFreePool(0);
    out_retryNumber := out_retryNumber + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    havoc out_retryNumber;
    return;
}



procedure {:LoopProcedure} P4CreatePdo_loop_L83(in_retryNumber: int, in_symLinkName: int, in_status_12: int, in_wstrSymLinkName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_12: int, out_wstrSymLinkName: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} out_status_12 == 0 || out_status_12 == -1073741823 || out_status_12 == in_status_12;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4CreatePdo_loop_L23(in_retryNumber: int, in_deviceName: int, in_pdo_1: int, in_status_12: int, in_wstrDeviceName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_12: int, out_wstrDeviceName: int)
{

  entry:
    out_retryNumber, out_status_12, out_wstrDeviceName := in_retryNumber, in_status_12, in_wstrDeviceName;
    goto L23, exit;

  exit:
    return;

  L23:
    call {:si_unique_call 2264} out_wstrDeviceName := P4MakePdoDeviceName(in_lptName, in_PdoType_2, in_DaisyChainId_2, out_retryNumber);
    goto anon33_Then;

  anon33_Then:
    assume {:partition} out_wstrDeviceName != 0;
    call {:si_unique_call 2266} RtlInitUnicodeString(in_deviceName, out_wstrDeviceName);
    call {:si_unique_call 2267} out_status_12 := IoCreateDevice(0, 1248, 0, 22, 256, 1, in_pdo_1);
    goto anon34_Else;

  anon34_Else:
    assume {:partition} out_status_12 != 0;
    assume {:nonnull} in_pdo_1 != 0;
    assume in_pdo_1 > 0;
    goto anon47_Then;

  anon47_Then:
    assume {:partition} -1073741771 == out_status_12;
    call {:si_unique_call 2265} sdv_ExFreePool(0);
    out_retryNumber := out_retryNumber + 1;
    goto anon47_Then_dummy;

  anon47_Then_dummy:
    call {:si_unique_call 2268} {:si_old_unique_call 1} out_retryNumber, out_status_12, out_wstrDeviceName := P4CreatePdo_loop_L23(out_retryNumber, in_deviceName, in_pdo_1, out_status_12, out_wstrDeviceName, in_lptName, in_PdoType_2, in_DaisyChainId_2);
    return;
}



procedure {:LoopProcedure} P4CreatePdo_loop_L23(in_retryNumber: int, in_deviceName: int, in_pdo_1: int, in_status_12: int, in_wstrDeviceName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_12: int, out_wstrDeviceName: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} out_status_12 == -1073741824 || out_status_12 == -1073741771 || out_status_12 == -1073741670 || out_status_12 == -1073741823 || out_status_12 == 0 || out_status_12 == in_status_12;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptFdoHandleBusRelations_loop_L78(in_devRel: int, in_maxDaisyChainId: int, in_Tmp_300: int, in_Tmp_301: int, in_Tmp_302: int, in_Tmp_303: int, in_Tmp_309: int, in_Tmp_312: int, in_Tmp_318: int, in_Tmp_319: int, in_i_7: int, in_Tmp_330: int, in_fdx_4: int, in_idx: int, in_vslice_dummy_var_96: int) returns (out_Tmp_300: int, out_Tmp_301: int, out_Tmp_302: int, out_Tmp_303: int, out_Tmp_309: int, out_Tmp_312: int, out_Tmp_318: int, out_Tmp_319: int, out_i_7: int, out_Tmp_330: int, out_idx: int, out_vslice_dummy_var_96: int)
{

  entry:
    out_Tmp_300, out_Tmp_301, out_Tmp_302, out_Tmp_303, out_Tmp_309, out_Tmp_312, out_Tmp_318, out_Tmp_319, out_i_7, out_Tmp_330, out_idx, out_vslice_dummy_var_96 := in_Tmp_300, in_Tmp_301, in_Tmp_302, in_Tmp_303, in_Tmp_309, in_Tmp_312, in_Tmp_318, in_Tmp_319, in_i_7, in_Tmp_330, in_idx, in_vslice_dummy_var_96;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon129_Else;

  anon129_Else:
    assume {:partition} in_maxDaisyChainId >= out_i_7;
    out_Tmp_318 := out_i_7;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_302;
    assume {:nonnull} out_Tmp_302 != 0;
    assume out_Tmp_302 > 0;
    goto anon168_Else;

  anon168_Else:
    assume {:nonnull} in_devRel != 0;
    assume in_devRel > 0;
    out_Tmp_330 := out_i_7;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_312;
    assume {:nonnull} out_Tmp_312 != 0;
    assume out_Tmp_312 > 0;
    call {:si_unique_call 2269} out_vslice_dummy_var_96 := sdv_ObReferenceObject(0);
    out_Tmp_300 := out_idx;
    out_idx := out_idx + 1;
    out_Tmp_319 := out_Tmp_300;
    assume {:nonnull} in_devRel != 0;
    assume in_devRel > 0;
    havoc out_Tmp_301;
    out_Tmp_309 := out_i_7;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_303;
    assume {:nonnull} out_Tmp_301 != 0;
    assume out_Tmp_301 > 0;
    assume {:nonnull} out_Tmp_303 != 0;
    assume out_Tmp_303 > 0;
    out_i_7 := out_i_7 + 1;
    goto anon168_Else_dummy;

  anon168_Else_dummy:
    call {:si_unique_call 2270} {:si_old_unique_call 1} out_Tmp_300, out_Tmp_301, out_Tmp_302, out_Tmp_303, out_Tmp_309, out_Tmp_312, out_Tmp_318, out_Tmp_319, out_i_7, out_Tmp_330, out_idx, out_vslice_dummy_var_96 := PptFdoHandleBusRelations_loop_L78(in_devRel, in_maxDaisyChainId, out_Tmp_300, out_Tmp_301, out_Tmp_302, out_Tmp_303, out_Tmp_309, out_Tmp_312, out_Tmp_318, out_Tmp_319, out_i_7, out_Tmp_330, in_fdx_4, out_idx, out_vslice_dummy_var_96);
    return;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L78(in_devRel: int, in_maxDaisyChainId: int, in_Tmp_300: int, in_Tmp_301: int, in_Tmp_302: int, in_Tmp_303: int, in_Tmp_309: int, in_Tmp_312: int, in_Tmp_318: int, in_Tmp_319: int, in_i_7: int, in_Tmp_330: int, in_fdx_4: int, in_idx: int, in_vslice_dummy_var_96: int) returns (out_Tmp_300: int, out_Tmp_301: int, out_Tmp_302: int, out_Tmp_303: int, out_Tmp_309: int, out_Tmp_312: int, out_Tmp_318: int, out_Tmp_319: int, out_i_7: int, out_Tmp_330: int, out_idx: int, out_vslice_dummy_var_96: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptFdoHandleBusRelations_loop_L35(in_deviceCount: int, in_i_6: int, in_Tmp_332: int, in_fdx_4: int, in_maxDaisyChainId_1: int, in_Tmp_340: int) returns (out_deviceCount: int, out_i_6: int, out_Tmp_332: int, out_Tmp_340: int)
{

  entry:
    out_deviceCount, out_i_6, out_Tmp_332, out_Tmp_340 := in_deviceCount, in_i_6, in_Tmp_332, in_Tmp_340;
    goto L35, exit;

  exit:
    return;

  L35:
    goto anon125_Else;

  anon125_Else:
    assume {:partition} in_maxDaisyChainId_1 >= out_i_6;
    out_Tmp_332 := out_i_6;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_340;
    assume {:nonnull} out_Tmp_340 != 0;
    assume out_Tmp_340 > 0;
    goto anon165_Else;

  anon165_Else:
    out_deviceCount := out_deviceCount + 1;
    out_i_6 := out_i_6 + 1;
    goto anon165_Else_dummy;

  anon165_Else_dummy:
    call {:si_unique_call 2271} {:si_old_unique_call 1} out_deviceCount, out_i_6, out_Tmp_332, out_Tmp_340 := PptFdoHandleBusRelations_loop_L35(out_deviceCount, out_i_6, out_Tmp_332, in_fdx_4, in_maxDaisyChainId_1, out_Tmp_340);
    return;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L35(in_deviceCount: int, in_i_6: int, in_Tmp_332: int, in_fdx_4: int, in_maxDaisyChainId_1: int, in_Tmp_340: int) returns (out_deviceCount: int, out_i_6: int, out_Tmp_332: int, out_Tmp_340: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 3} PptFdoHandleBusRelations_loop_L187(in_id: int, in_maxId_1: int, in_Tmp_320: int, in_fdx_4: int, in_Tmp_342: int, in_Fdo_3: int) returns (out_id: int, out_Tmp_320: int, out_Tmp_342: int)
{

  entry:
    out_id, out_Tmp_320, out_Tmp_342 := in_id, in_Tmp_320, in_Tmp_342;
    goto L187, exit;

  exit:
    return;

  L187:
    goto anon144_Else;

  anon144_Else:
    assume {:partition} in_maxId_1 >= out_id;
    out_Tmp_320 := out_id;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_342;
    assume {:nonnull} out_Tmp_342 != 0;
    assume out_Tmp_342 > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    call {:si_unique_call 2272} P5MarkPdoAsHardwareGone(in_Fdo_3, 4, out_id);
    goto L190;

  L190:
    out_id := out_id + 1;
    goto L190_dummy;

  L190_dummy:
    call {:si_unique_call 2273} {:si_old_unique_call 1} out_id, out_Tmp_320, out_Tmp_342 := PptFdoHandleBusRelations_loop_L187(out_id, in_maxId_1, out_Tmp_320, in_fdx_4, out_Tmp_342, in_Fdo_3);
    return;

  anon172_Then:
    goto L190;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L187(in_id: int, in_maxId_1: int, in_Tmp_320: int, in_fdx_4: int, in_Tmp_342: int, in_Fdo_3: int) returns (out_id: int, out_Tmp_320: int, out_Tmp_342: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 2} PptFdoHandleBusRelations_loop_L311(in_Tmp_295: int, in_Tmp_313: int, in_count_1: int, in_fdx_4: int, in_i_8: int) returns (out_Tmp_295: int, out_Tmp_313: int, out_count_1: int, out_i_8: int)
{

  entry:
    out_Tmp_295, out_Tmp_313, out_count_1, out_i_8 := in_Tmp_295, in_Tmp_313, in_count_1, in_i_8;
    goto L311, exit;

  exit:
    return;

  L311:
    assume {:CounterLoop 2} {:Counter "i_8"} true;
    goto anon153_Else;

  anon153_Else:
    assume {:partition} 2 > out_i_8;
    out_Tmp_295 := out_i_8;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_313;
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    out_count_1 := out_count_1 + 1;
    goto L314;

  L314:
    out_i_8 := out_i_8 + 1;
    goto L314_dummy;

  L314_dummy:
    call {:si_unique_call 2274} {:si_old_unique_call 1} out_Tmp_295, out_Tmp_313, out_count_1, out_i_8 := PptFdoHandleBusRelations_loop_L311(out_Tmp_295, out_Tmp_313, out_count_1, in_fdx_4, out_i_8);
    return;

  anon178_Then:
    goto L314;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L311(in_Tmp_295: int, in_Tmp_313: int, in_count_1: int, in_fdx_4: int, in_i_8: int) returns (out_Tmp_295: int, out_Tmp_313: int, out_count_1: int, out_i_8: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptFdoHandleBusRelations_loop_L203(in_sdv_143: int, in_Tmp_296: int, in_Tmp_298: int, in_tmpBuffer_2: int, in_pdx_5: int, in_bBuildStlDeviceId_1: int, in_sdv_151: int, in_devId: int, in_sdv_159: int, in_daisyChainDevCount: int, in_mdl_1: int, in_Tmp_314: int, in_Tmp_316: int, in_aid_1: int, in_DeviceIdSize_1: int, in_des_2: int, in_cls_2: int, in_sdv_166: int, in_tmpBufLen_1: int, in_Tmp_327: int, in_mfg_1: int, in_sdv_175: int, in_Tmp_333: int, in_Tmp_334: int, in_id_3: int, in_Tmp_336: int, in_Tmp_337: int, in_fdx_4: int, in_cid_2: int, in_controller: int, in_sdv_180: int, in_Fdo_3: int, in_vslice_dummy_var_92: int, in_vslice_dummy_var_98: int) returns (out_sdv_143: int, out_Tmp_296: int, out_Tmp_298: int, out_tmpBuffer_2: int, out_pdx_5: int, out_bBuildStlDeviceId_1: int, out_sdv_151: int, out_devId: int, out_sdv_159: int, out_Tmp_314: int, out_Tmp_316: int, out_tmpBufLen_1: int, out_Tmp_327: int, out_sdv_175: int, out_Tmp_333: int, out_Tmp_334: int, out_id_3: int, out_Tmp_336: int, out_Tmp_337: int, out_sdv_180: int, out_vslice_dummy_var_92: int, out_vslice_dummy_var_98: int)
{

  entry:
    out_sdv_143, out_Tmp_296, out_Tmp_298, out_tmpBuffer_2, out_pdx_5, out_bBuildStlDeviceId_1, out_sdv_151, out_devId, out_sdv_159, out_Tmp_314, out_Tmp_316, out_tmpBufLen_1, out_Tmp_327, out_sdv_175, out_Tmp_333, out_Tmp_334, out_id_3, out_Tmp_336, out_Tmp_337, out_sdv_180, out_vslice_dummy_var_92, out_vslice_dummy_var_98 := in_sdv_143, in_Tmp_296, in_Tmp_298, in_tmpBuffer_2, in_pdx_5, in_bBuildStlDeviceId_1, in_sdv_151, in_devId, in_sdv_159, in_Tmp_314, in_Tmp_316, in_tmpBufLen_1, in_Tmp_327, in_sdv_175, in_Tmp_333, in_Tmp_334, in_id_3, in_Tmp_336, in_Tmp_337, in_sdv_180, in_vslice_dummy_var_92, in_vslice_dummy_var_98;
    goto L203, exit;

  exit:
    return;

  L203:
    goto anon147_Then;

  anon147_Then:
    assume {:partition} out_id_3 < in_daisyChainDevCount;
    out_bBuildStlDeviceId_1 := 0;
    out_pdx_5 := 0;
    call {:si_unique_call 2276} out_sdv_151 := P5SelectDaisyChainDevice(in_controller, out_id_3);
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} out_sdv_151 != 0;
    out_devId := 0;
    call {:si_unique_call 2285} out_sdv_175 := ExAllocatePoolWithTag(257, 1248, -797810352);
    out_pdx_5 := out_sdv_175;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} out_pdx_5 != 0;
    call {:si_unique_call 2282} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    assume {:nonnull} out_pdx_5 != 0;
    assume out_pdx_5 > 0;
    out_Tmp_334 := out_id_3;
    call {:si_unique_call 2283} out_bBuildStlDeviceId_1 := ParStlCheckIfStl(out_pdx_5, out_Tmp_334);
    call {:si_unique_call 2284} sdv_ExFreePool(0);
    goto L220;

  L220:
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} out_bBuildStlDeviceId_1 != 0;
    call {:si_unique_call 2286} out_sdv_180 := ExAllocatePoolWithTag(257, 1248, -797810352);
    out_pdx_5 := out_sdv_180;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} out_pdx_5 != 0;
    call {:si_unique_call 2278} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    assume {:nonnull} out_pdx_5 != 0;
    assume out_pdx_5 > 0;
    call {:si_unique_call 2279} out_devId := ParStlQueryStlDeviceId(out_pdx_5, 0, 0, in_DeviceIdSize_1, 1);
    call {:si_unique_call 2280} sdv_ExFreePool(0);
    goto L241;

  L241:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} out_devId != 0;
    out_tmpBufLen_1 := in_sdv_166 + 1;
    call {:si_unique_call 2288} out_sdv_159 := ExAllocatePoolWithTag(1, out_tmpBufLen_1, -797810352);
    out_tmpBuffer_2 := out_sdv_159;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} out_tmpBuffer_2 != 0;
    call {:si_unique_call 2290} sdv_RtlZeroMemory(0, out_tmpBufLen_1);
    call {:si_unique_call 2291} ParPnpFindDeviceIdKeys(in_mfg_1, in_mdl_1, in_cls_2, in_des_2, in_aid_1, in_cid_2, out_tmpBuffer_2);
    assume {:nonnull} in_mfg_1 != 0;
    assume in_mfg_1 > 0;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:nonnull} in_mdl_1 != 0;
    assume in_mdl_1 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    out_Tmp_333 := out_devId;
    call {:si_unique_call 2292} out_sdv_143 := P4CreatePdo(in_Fdo_3, 4, out_id_3, out_Tmp_333);
    out_Tmp_314 := out_id_3;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_327;
    assume {:nonnull} out_Tmp_327 != 0;
    assume out_Tmp_327 > 0;
    out_Tmp_296 := out_id_3;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_336;
    assume {:nonnull} out_Tmp_336 != 0;
    assume out_Tmp_336 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} out_bBuildStlDeviceId_1 != 0;
    out_Tmp_298 := out_id_3;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_316;
    assume {:nonnull} out_Tmp_316 != 0;
    assume out_Tmp_316 > 0;
    havoc out_Tmp_337;
    assume {:nonnull} out_Tmp_337 != 0;
    assume out_Tmp_337 > 0;
    havoc out_pdx_5;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    assume {:nonnull} out_pdx_5 != 0;
    assume out_pdx_5 > 0;
    call {:si_unique_call 2289} out_vslice_dummy_var_98 := ParStlCheckIfStl(out_pdx_5, 0);
    goto L289;

  L289:
    call {:si_unique_call 2287} sdv_ExFreePool(0);
    goto L269;

  L269:
    call {:si_unique_call 2277} sdv_ExFreePool(0);
    goto L254;

  L254:
    call {:si_unique_call 2275} out_vslice_dummy_var_92 := P5DeselectAllDaisyChainDevices(in_controller);
    goto L212;

  L212:
    out_id_3 := out_id_3 + 1;
    goto L212_dummy;

  L212_dummy:
    call {:si_unique_call 2293} {:si_old_unique_call 1} out_sdv_143, out_Tmp_296, out_Tmp_298, out_tmpBuffer_2, out_pdx_5, out_bBuildStlDeviceId_1, out_sdv_151, out_devId, out_sdv_159, out_Tmp_314, out_Tmp_316, out_tmpBufLen_1, out_Tmp_327, out_sdv_175, out_Tmp_333, out_Tmp_334, out_id_3, out_Tmp_336, out_Tmp_337, out_sdv_180, out_vslice_dummy_var_92, out_vslice_dummy_var_98 := PptFdoHandleBusRelations_loop_L203(out_sdv_143, out_Tmp_296, out_Tmp_298, out_tmpBuffer_2, out_pdx_5, out_bBuildStlDeviceId_1, out_sdv_151, out_devId, out_sdv_159, in_daisyChainDevCount, in_mdl_1, out_Tmp_314, out_Tmp_316, in_aid_1, in_DeviceIdSize_1, in_des_2, in_cls_2, in_sdv_166, out_tmpBufLen_1, out_Tmp_327, in_mfg_1, out_sdv_175, out_Tmp_333, out_Tmp_334, out_id_3, out_Tmp_336, out_Tmp_337, in_fdx_4, in_cid_2, in_controller, out_sdv_180, in_Fdo_3, out_vslice_dummy_var_92, out_vslice_dummy_var_98);
    return;

  anon177_Then:
    assume {:partition} out_bBuildStlDeviceId_1 == 0;
    goto L289;

  anon176_Then:
    goto L289;

  anon152_Then:
    goto L289;

  anon151_Then:
    goto L289;

  anon175_Then:
    assume {:partition} out_tmpBuffer_2 == 0;
    goto L269;

  anon150_Then:
    assume {:partition} out_devId == 0;
    goto L254;

  anon174_Then:
    assume {:partition} out_pdx_5 == 0;
    goto L241;

  anon149_Then:
    assume {:partition} out_bBuildStlDeviceId_1 == 0;
    call {:si_unique_call 2281} out_devId := P4ReadRawIeee1284DeviceId(in_controller);
    goto L241;

  anon173_Then:
    assume {:partition} out_pdx_5 == 0;
    goto L220;

  anon148_Then:
    assume {:partition} out_sdv_151 == 0;
    goto L212;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L203(in_sdv_143: int, in_Tmp_296: int, in_Tmp_298: int, in_tmpBuffer_2: int, in_pdx_5: int, in_bBuildStlDeviceId_1: int, in_sdv_151: int, in_devId: int, in_sdv_159: int, in_daisyChainDevCount: int, in_mdl_1: int, in_Tmp_314: int, in_Tmp_316: int, in_aid_1: int, in_DeviceIdSize_1: int, in_des_2: int, in_cls_2: int, in_sdv_166: int, in_tmpBufLen_1: int, in_Tmp_327: int, in_mfg_1: int, in_sdv_175: int, in_Tmp_333: int, in_Tmp_334: int, in_id_3: int, in_Tmp_336: int, in_Tmp_337: int, in_fdx_4: int, in_cid_2: int, in_controller: int, in_sdv_180: int, in_Fdo_3: int, in_vslice_dummy_var_92: int, in_vslice_dummy_var_98: int) returns (out_sdv_143: int, out_Tmp_296: int, out_Tmp_298: int, out_tmpBuffer_2: int, out_pdx_5: int, out_bBuildStlDeviceId_1: int, out_sdv_151: int, out_devId: int, out_sdv_159: int, out_Tmp_314: int, out_Tmp_316: int, out_tmpBufLen_1: int, out_Tmp_327: int, out_sdv_175: int, out_Tmp_333: int, out_Tmp_334: int, out_id_3: int, out_Tmp_336: int, out_Tmp_337: int, out_sdv_180: int, out_vslice_dummy_var_92: int, out_vslice_dummy_var_98: int);
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__UNICODE_STRING;
  free ensures {:va_keep} out_bBuildStlDeviceId_1 == 1 || out_bBuildStlDeviceId_1 == 0 || out_bBuildStlDeviceId_1 == in_bBuildStlDeviceId_1;
  free ensures {:va_keep} out_sdv_151 == 1 || out_sdv_151 == 0 || out_sdv_151 == in_sdv_151;
  free ensures {:va_keep} out_tmpBufLen_1 == in_tmpBufLen_1 || out_tmpBufLen_1 == in_sdv_166 + 1;
  free ensures {:va_keep} out_vslice_dummy_var_92 == 1 || out_vslice_dummy_var_92 == 0 || out_vslice_dummy_var_92 == in_vslice_dummy_var_92;
  free ensures {:va_keep} out_vslice_dummy_var_98 == 1 || out_vslice_dummy_var_98 == 0 || out_vslice_dummy_var_98 == in_vslice_dummy_var_98;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptFdoHandleBusRelations_loop_L321(in_sdv_161: int, in_maxId: int, in_Tmp_315: int, in_Tmp_321: int, in_Tmp_322: int, in_Tmp_331: int, in_id_2: int, in_Tmp_338: int, in_fdx_4: int, in_Fdo_3: int) returns (out_sdv_161: int, out_Tmp_315: int, out_Tmp_321: int, out_Tmp_322: int, out_Tmp_331: int, out_id_2: int, out_Tmp_338: int)
{

  entry:
    out_sdv_161, out_Tmp_315, out_Tmp_321, out_Tmp_322, out_Tmp_331, out_id_2, out_Tmp_338 := in_sdv_161, in_Tmp_315, in_Tmp_321, in_Tmp_322, in_Tmp_331, in_id_2, in_Tmp_338;
    goto L321, exit;

  exit:
    return;

  L321:
    goto anon154_Else;

  anon154_Else:
    assume {:partition} in_maxId >= out_id_2;
    out_Tmp_331 := out_id_2;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_315;
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    out_Tmp_322 := out_id_2;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_321;
    assume {:nonnull} out_Tmp_321 != 0;
    assume out_Tmp_321 > 0;
    havoc out_Tmp_338;
    call {:si_unique_call 2294} out_sdv_161 := P5IsDeviceStillThere(in_Fdo_3, out_Tmp_338);
    goto anon155_Then;

  anon155_Then:
    assume {:partition} out_sdv_161 != 0;
    goto L323;

  L323:
    out_id_2 := out_id_2 + 1;
    goto L323_dummy;

  L323_dummy:
    call {:si_unique_call 2295} {:si_old_unique_call 1} out_sdv_161, out_Tmp_315, out_Tmp_321, out_Tmp_322, out_Tmp_331, out_id_2, out_Tmp_338 := PptFdoHandleBusRelations_loop_L321(out_sdv_161, in_maxId, out_Tmp_315, out_Tmp_321, out_Tmp_322, out_Tmp_331, out_id_2, out_Tmp_338, in_fdx_4, in_Fdo_3);
    return;

  anon179_Then:
    goto L323;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L321(in_sdv_161: int, in_maxId: int, in_Tmp_315: int, in_Tmp_321: int, in_Tmp_322: int, in_Tmp_331: int, in_id_2: int, in_Tmp_338: int, in_fdx_4: int, in_Fdo_3: int) returns (out_sdv_161: int, out_Tmp_315: int, out_Tmp_321: int, out_Tmp_322: int, out_Tmp_331: int, out_id_2: int, out_Tmp_338: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_161 == 1 || out_sdv_161 == 0 || out_sdv_161 == in_sdv_161;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 3} PptFdoHandleBusRelations_loop_L171(in_count: int, in_Tmp_306: int, in_id_1: int, in_Tmp_310: int, in_maxId_2: int, in_fdx_4: int) returns (out_count: int, out_Tmp_306: int, out_id_1: int, out_Tmp_310: int)
{

  entry:
    out_count, out_Tmp_306, out_id_1, out_Tmp_310 := in_count, in_Tmp_306, in_id_1, in_Tmp_310;
    goto L171, exit;

  exit:
    return;

  L171:
    goto anon140_Else;

  anon140_Else:
    assume {:partition} in_maxId_2 >= out_id_1;
    out_Tmp_306 := out_id_1;
    assume {:nonnull} in_fdx_4 != 0;
    assume in_fdx_4 > 0;
    havoc out_Tmp_310;
    assume {:nonnull} out_Tmp_310 != 0;
    assume out_Tmp_310 > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    out_count := out_count + 1;
    goto L174;

  L174:
    out_id_1 := out_id_1 + 1;
    goto L174_dummy;

  L174_dummy:
    call {:si_unique_call 2296} {:si_old_unique_call 1} out_count, out_Tmp_306, out_id_1, out_Tmp_310 := PptFdoHandleBusRelations_loop_L171(out_count, out_Tmp_306, out_id_1, out_Tmp_310, in_maxId_2, in_fdx_4);
    return;

  anon171_Then:
    goto L174;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L171(in_count: int, in_Tmp_306: int, in_id_1: int, in_Tmp_310: int, in_maxId_2: int, in_fdx_4: int) returns (out_count: int, out_Tmp_306: int, out_id_1: int, out_Tmp_310: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P5IsDeviceStillThere_loop_L100(in_devIdString: int, in_des_3: int, in_cls_3: int, in_sdv_182: int, in_sdv_183: int, in_cid_3: int, in_aid_4: int, in_tryNumber: int, in_Tmp_345: int, in_pdx_6: int, in_deviceStillThere: int, in_maxTries: int, in_sdv_189: int, in_delay_1: int, in_mdl_3: int, in_controller_1: int, in_mfg_4: int, in_vslice_dummy_var_103: int) returns (out_devIdString: int, out_sdv_183: int, out_tryNumber: int, out_Tmp_345: int, out_deviceStillThere: int, out_vslice_dummy_var_103: int)
{

  entry:
    out_devIdString, out_sdv_183, out_tryNumber, out_Tmp_345, out_deviceStillThere, out_vslice_dummy_var_103 := in_devIdString, in_sdv_183, in_tryNumber, in_Tmp_345, in_deviceStillThere, in_vslice_dummy_var_103;
    goto L100, exit;

  exit:
    return;

  L100:
    out_tryNumber := out_tryNumber + 1;
    call {:si_unique_call 2297} out_devIdString := P4ReadRawIeee1284DeviceId(in_controller_1);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} out_devIdString != 0;
    out_Tmp_345 := out_devIdString;
    call {:si_unique_call 2301} ParPnpFindDeviceIdKeys(in_mfg_4, in_mdl_3, in_cls_3, in_des_3, in_aid_4, in_cid_3, out_Tmp_345);
    assume {:nonnull} in_mfg_4 != 0;
    assume in_mfg_4 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} in_mdl_3 != 0;
    assume in_mdl_3 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} in_pdx_6 != 0;
    assume in_pdx_6 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} in_pdx_6 != 0;
    assume in_pdx_6 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} in_sdv_189 == 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} in_sdv_182 == 0;
    out_deviceStillThere := 1;
    goto L130;

  L130:
    call {:si_unique_call 2300} sdv_ExFreePool(0);
    goto L133;

  L133:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_deviceStillThere != 0;
    goto L137;

  L137:
    goto anon61_Else;

  anon61_Else:
    assume {:partition} out_deviceStillThere == 0;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} in_maxTries > out_tryNumber;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    call {:si_unique_call 2302} {:si_old_unique_call 1} out_devIdString, out_sdv_183, out_tryNumber, out_Tmp_345, out_deviceStillThere, out_vslice_dummy_var_103 := P5IsDeviceStillThere_loop_L100(out_devIdString, in_des_3, in_cls_3, in_sdv_182, out_sdv_183, in_cid_3, in_aid_4, out_tryNumber, out_Tmp_345, in_pdx_6, out_deviceStillThere, in_maxTries, in_sdv_189, in_delay_1, in_mdl_3, in_controller_1, in_mfg_4, out_vslice_dummy_var_103);
    return;

  anon60_Then:
    assume {:partition} out_deviceStillThere == 0;
    call {:si_unique_call 2299} out_sdv_183 := sdv_KeGetCurrentIrql();
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} out_sdv_183 == 0;
    assume {:nonnull} in_delay_1 != 0;
    assume in_delay_1 > 0;
    call {:si_unique_call 2298} out_vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    goto L137;

  anon63_Then:
    assume {:partition} out_sdv_183 != 0;
    goto L137;

  anon64_Then:
    assume {:partition} in_sdv_182 != 0;
    goto L129;

  L129:
    out_deviceStillThere := 0;
    goto L130;

  anon59_Then:
    assume {:partition} in_sdv_189 != 0;
    goto L129;

  anon58_Then:
    goto L118;

  L118:
    out_deviceStillThere := 0;
    goto L130;

  anon57_Then:
    goto L118;

  anon56_Then:
    goto L118;

  anon55_Then:
    goto L118;

  anon54_Then:
    assume {:partition} out_devIdString == 0;
    out_deviceStillThere := 0;
    goto L133;
}



procedure {:LoopProcedure} P5IsDeviceStillThere_loop_L100(in_devIdString: int, in_des_3: int, in_cls_3: int, in_sdv_182: int, in_sdv_183: int, in_cid_3: int, in_aid_4: int, in_tryNumber: int, in_Tmp_345: int, in_pdx_6: int, in_deviceStillThere: int, in_maxTries: int, in_sdv_189: int, in_delay_1: int, in_mdl_3: int, in_controller_1: int, in_mfg_4: int, in_vslice_dummy_var_103: int) returns (out_devIdString: int, out_sdv_183: int, out_tryNumber: int, out_Tmp_345: int, out_deviceStillThere: int, out_vslice_dummy_var_103: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_deviceStillThere == 1 || out_deviceStillThere == 0 || out_deviceStillThere == in_deviceStillThere;
  free ensures {:va_keep} out_vslice_dummy_var_103 == 0 || out_vslice_dummy_var_103 == -1073741823 || out_vslice_dummy_var_103 == in_vslice_dummy_var_103;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 2} P4DestroyPdo_loop_L77(in_pdx_7: int, in_done: int, in_sdv_201: int, in_current: int, in_fdx_6: int, in_vslice_dummy_var_106: int, in_vslice_dummy_var_109: int) returns (out_done: int, out_sdv_201: int, out_current: int, out_vslice_dummy_var_106: int, out_vslice_dummy_var_109: int)
{

  entry:
    out_done, out_sdv_201, out_current, out_vslice_dummy_var_106, out_vslice_dummy_var_109 := in_done, in_sdv_201, in_current, in_vslice_dummy_var_106, in_vslice_dummy_var_109;
    goto L77, exit;

  exit:
    return;

  L77:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} out_done == 0;
    assume {:nonnull} in_fdx_6 != 0;
    assume in_fdx_6 > 0;
    call {:si_unique_call 2304} out_current := RemoveHeadList(DevDeletionListHead__FDO_EXTENSION(in_fdx_6));
    call {:si_unique_call 2305} out_sdv_201 := sdv_containing_record(out_current, 100);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} out_sdv_201 != in_pdx_7;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} in_fdx_6 != 0;
    assume in_fdx_6 > 0;
    call {:si_unique_call 2303} InsertHeadList(DevDeletionListHead__FDO_EXTENSION(in_fdx_6), out_current);
    out_done := 1;
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 2308} {:si_old_unique_call 1} out_done, out_sdv_201, out_current, out_vslice_dummy_var_106, out_vslice_dummy_var_109 := P4DestroyPdo_loop_L77(in_pdx_7, out_done, out_sdv_201, out_current, in_fdx_6, out_vslice_dummy_var_106, out_vslice_dummy_var_109);
    return;

  anon41_Then:
    assume {:nonnull} in_fdx_6 != 0;
    assume in_fdx_6 > 0;
    call {:si_unique_call 2306} out_vslice_dummy_var_106 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(in_fdx_6), out_current);
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    goto L_BAF_0;

  anon40_Then:
    assume {:nonnull} in_fdx_6 != 0;
    assume in_fdx_6 > 0;
    call {:si_unique_call 2307} out_vslice_dummy_var_109 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(in_fdx_6), out_current);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    goto L_BAF_0;

  anon39_Then:
    assume {:partition} out_sdv_201 == in_pdx_7;
    out_done := 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    goto L_BAF_0;
}



procedure {:LoopProcedure} P4DestroyPdo_loop_L77(in_pdx_7: int, in_done: int, in_sdv_201: int, in_current: int, in_fdx_6: int, in_vslice_dummy_var_106: int, in_vslice_dummy_var_109: int) returns (out_done: int, out_sdv_201: int, out_current: int, out_vslice_dummy_var_106: int, out_vslice_dummy_var_109: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_done == 1 || out_done == in_done;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpFilterNukeIrqResourceDescriptors_loop_L7(in_i_9: int, in_pIoResourceDescriptorIn: int, in_IoResourceList: int) returns (out_i_9: int)
{

  entry:
    out_i_9 := in_i_9;
    goto L7, exit;

  exit:
    return;

  L7:
    assume {:nonnull} in_IoResourceList != 0;
    assume in_IoResourceList > 0;
    goto anon5_Else;

  anon5_Else:
    assume {:nonnull} in_pIoResourceDescriptorIn != 0;
    assume in_pIoResourceDescriptorIn > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} in_pIoResourceDescriptorIn != 0;
    assume in_pIoResourceDescriptorIn > 0;
    goto L9;

  L9:
    out_i_9 := out_i_9 + 1;
    goto L9_dummy;

  L9_dummy:
    havoc out_i_9;
    return;

  anon6_Then:
    goto L9;
}



procedure {:LoopProcedure} PptPnpFilterNukeIrqResourceDescriptors_loop_L7(in_i_9: int, in_pIoResourceDescriptorIn: int, in_IoResourceList: int) returns (out_i_9: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpFilterRemoveIrqResourceLists_loop_L16(in_i_10: int, in_listCount_2: int, in_sdv_209: int, in_curList_2: int, in_bytesToMove: int, in_currentEndOfResourceRequirementsList: int) returns (out_i_10: int, out_listCount_2: int, out_sdv_209: int, out_curList_2: int, out_bytesToMove: int)
{

  entry:
    out_i_10, out_listCount_2, out_sdv_209, out_curList_2, out_bytesToMove := in_i_10, in_listCount_2, in_sdv_209, in_curList_2, in_bytesToMove;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_listCount_2 > out_i_10;
    call {:si_unique_call 2310} out_sdv_209 := PptPnpListContainsIrqResourceDescriptor(out_curList_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} out_sdv_209 != 0;
    assume {:nonnull} out_curList_2 != 0;
    assume out_curList_2 > 0;
    out_bytesToMove := in_currentEndOfResourceRequirementsList;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} out_bytesToMove > 0;
    call {:si_unique_call 2309} sdv_RtlMoveMemory(0, 0, out_bytesToMove);
    goto L26;

  L26:
    out_listCount_2 := out_listCount_2 - 1;
    goto L26_dummy;

  L26_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 2311} {:si_old_unique_call 1} out_i_10, out_listCount_2, out_sdv_209, out_curList_2, out_bytesToMove := PptPnpFilterRemoveIrqResourceLists_loop_L16(out_i_10, out_listCount_2, out_sdv_209, out_curList_2, out_bytesToMove, in_currentEndOfResourceRequirementsList);
    return;

  anon9_Then:
    assume {:partition} 0 >= out_bytesToMove;
    goto L26;

  anon8_Then:
    assume {:partition} out_sdv_209 == 0;
    assume {:nonnull} out_curList_2 != 0;
    assume out_curList_2 > 0;
    havoc out_curList_2;
    out_i_10 := out_i_10 + 1;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    goto L_BAF_1;
}



procedure {:LoopProcedure} PptPnpFilterRemoveIrqResourceLists_loop_L16(in_i_10: int, in_listCount_2: int, in_sdv_209: int, in_curList_2: int, in_bytesToMove: int, in_currentEndOfResourceRequirementsList: int) returns (out_i_10: int, out_listCount_2: int, out_sdv_209: int, out_curList_2: int, out_bytesToMove: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_209 == 1 || out_sdv_209 == 0 || out_sdv_209 == in_sdv_209;
  free ensures {:va_keep} out_bytesToMove == in_bytesToMove || out_bytesToMove == in_currentEndOfResourceRequirementsList;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4SanitizeId_loop_L5(in_p_7: int)
{

  entry:
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[in_p_7] != 0;
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 32 >= Mem_T.INT4[in_p_7];
    goto L8;

  L8:
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    Mem_T.INT4[in_p_7] := 95;
    goto L9;

  L9:
    goto L9_dummy;

  L9_dummy:
    call {:si_unique_call 2312} {:si_old_unique_call 1} P4SanitizeId_loop_L5(in_p_7);
    return;

  anon10_Then:
    assume {:partition} Mem_T.INT4[in_p_7] > 32;
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[in_p_7] <= 127;
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[in_p_7] != 44;
    goto L9;

  anon12_Then:
    assume {:partition} Mem_T.INT4[in_p_7] == 44;
    goto L8;

  anon11_Then:
    assume {:partition} 127 < Mem_T.INT4[in_p_7];
    goto L8;
}



procedure {:LoopProcedure} P4SanitizeId_loop_L5(in_p_7: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpStartScanCmResourceList_loop_L45(in_i_11: int, in_PartialResourceDescriptor_2: int, in_Tmp_368: int, in_start: int, in_Tmp_369: int, in_PartialResourceList_2: int, in_Fdx_4: int, in_FoundPort_2: int, in_FoundIrq_2: int) returns (out_i_11: int, out_PartialResourceDescriptor_2: int, out_Tmp_368: int, out_Tmp_369: int)
{

  entry:
    out_i_11, out_PartialResourceDescriptor_2, out_Tmp_368, out_Tmp_369 := in_i_11, in_PartialResourceDescriptor_2, in_Tmp_368, in_Tmp_369;
    goto L45, exit;

  exit:
    return;

  L45:
    assume {:nonnull} in_PartialResourceList_2 != 0;
    assume in_PartialResourceList_2 > 0;
    goto anon34_Else;

  anon34_Else:
    out_Tmp_369 := out_i_11;
    assume {:nonnull} in_PartialResourceList_2 != 0;
    assume in_PartialResourceList_2 > 0;
    havoc out_Tmp_368;
    out_PartialResourceDescriptor_2 := out_Tmp_368 + out_Tmp_369 * 292;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L53;

  L53:
    out_i_11 := out_i_11 + 1;
    goto L53_dummy;

  L53_dummy:
    call {:si_unique_call 2313} {:si_old_unique_call 1} out_i_11, out_PartialResourceDescriptor_2, out_Tmp_368, out_Tmp_369 := PptPnpStartScanCmResourceList_loop_L45(out_i_11, out_PartialResourceDescriptor_2, out_Tmp_368, in_start, out_Tmp_369, in_PartialResourceList_2, in_Fdx_4, in_FoundPort_2, in_FoundIrq_2);
    return;

  anon41_Then:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon42_Then:
    goto L53;

  anon43_Then:
    assume {:nonnull} in_FoundIrq_2 != 0;
    assume in_FoundIrq_2 > 0;
    Mem_T.INT4[in_FoundIrq_2] := 1;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto L53;

  anon48_Then:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto L53;

  anon46_Then:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_FoundPort_2 != 0;
    assume in_FoundPort_2 > 0;
    Mem_T.INT4[in_FoundPort_2] := 1;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L66;

  L66:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 0 != 1;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon40_Then:
    goto L71;

  L71:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon39_Then:
    goto L71;

  anon38_Then:
    assume {:partition} 0 == 1;
    goto L53;

  anon37_Then:
    goto L53;

  anon36_Then:
    goto L53;

  anon47_Then:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon35_Then:
    goto L66;
}



procedure {:LoopProcedure} PptPnpStartScanCmResourceList_loop_L45(in_i_11: int, in_PartialResourceDescriptor_2: int, in_Tmp_368: int, in_start: int, in_Tmp_369: int, in_PartialResourceList_2: int, in_Fdx_4: int, in_FoundPort_2: int, in_FoundIrq_2: int) returns (out_i_11: int, out_PartialResourceDescriptor_2: int, out_Tmp_368: int, out_Tmp_369: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(in_i_12: int, in_listCount_3: int, in_curList_3: int) returns (out_i_12: int, out_curList_3: int)
{

  entry:
    out_i_12, out_curList_3 := in_i_12, in_curList_3;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_listCount_3 > out_i_12;
    assume {:nonnull} out_curList_3 != 0;
    assume out_curList_3 > 0;
    havoc out_curList_3;
    out_i_12 := out_i_12 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2314} {:si_old_unique_call 1} out_i_12, out_curList_3 := PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(out_i_12, in_listCount_3, out_curList_3);
    return;
}



procedure {:LoopProcedure} PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(in_i_12: int, in_listCount_3: int, in_curList_3: int) returns (out_i_12: int, out_curList_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckIfStl1284_3_loop_L111(in_ucReadPattern: int, in_ucReadValue: int, in_ucExpectedPattern: int, in_ulDaisyIndex: int) returns (out_ucReadPattern: int, out_ucReadValue: int, out_ucExpectedPattern: int)
{

  entry:
    out_ucReadPattern, out_ucReadValue, out_ucExpectedPattern := in_ucReadPattern, in_ucReadValue, in_ucExpectedPattern;
    goto L111, exit;

  exit:
    return;

  L111:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_ucExpectedPattern != 0;
    call {:si_unique_call 2315} out_ucReadValue := corral_nondet();
    call {:si_unique_call 2316} out_ucReadPattern := corral_nondet();
    out_ucReadPattern := BOR(out_ucReadPattern, BAND(out_ucReadValue, 128));
    goto anon24_Then;

  anon24_Then:
    assume {:partition} out_ucReadPattern == out_ucExpectedPattern;
    out_ucExpectedPattern := out_ucExpectedPattern - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    call {:si_unique_call 2317} {:si_old_unique_call 1} out_ucReadPattern, out_ucReadValue, out_ucExpectedPattern := ParStlCheckIfStl1284_3_loop_L111(out_ucReadPattern, out_ucReadValue, out_ucExpectedPattern, in_ulDaisyIndex);
    return;
}



procedure {:LoopProcedure} ParStlCheckIfStl1284_3_loop_L111(in_ucReadPattern: int, in_ucReadValue: int, in_ucExpectedPattern: int, in_ulDaisyIndex: int) returns (out_ucReadPattern: int, out_ucReadValue: int, out_ucExpectedPattern: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckIfStl1284_3_loop_L35(in_i_13: int, in_Tmp_390: int) returns (out_i_13: int, out_Tmp_390: int)
{

  entry:
    out_i_13, out_Tmp_390 := in_i_13, in_Tmp_390;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_13"} true;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 4 > out_i_13;
    out_Tmp_390 := out_i_13;
    out_i_13 := out_i_13 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    havoc out_i_13;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfStl1284_3_loop_L35(in_i_13: int, in_Tmp_390: int) returns (out_i_13: int, out_Tmp_390: int);
  free ensures {:va_keep} out_Tmp_390 == in_i_13 || out_Tmp_390 == in_Tmp_390;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckIfNon1284_3Present_loop_L33(in_i_14: int, in_Tmp_406: int) returns (out_i_14: int, out_Tmp_406: int)
{

  entry:
    out_i_14, out_Tmp_406 := in_i_14, in_Tmp_406;
    goto L33, exit;

  exit:
    return;

  L33:
    assume {:CounterLoop 4} {:Counter "i_14"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 4 > out_i_14;
    out_Tmp_406 := out_i_14;
    out_i_14 := out_i_14 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    havoc out_i_14;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfNon1284_3Present_loop_L33(in_i_14: int, in_Tmp_406: int) returns (out_i_14: int, out_Tmp_406: int);
  free ensures {:va_keep} out_Tmp_406 == in_i_14 || out_Tmp_406 == in_Tmp_406;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckDrivePresent_loop_L28(in_i_15: int, in_sdv_242: int, in_Extension_3: int, in_vslice_dummy_var_125: int) returns (out_i_15: int, out_sdv_242: int, out_vslice_dummy_var_125: int)
{

  entry:
    out_i_15, out_sdv_242, out_vslice_dummy_var_125 := in_i_15, in_sdv_242, in_vslice_dummy_var_125;
    goto L28, exit;

  exit:
    return;

  L28:
    assume {:CounterLoop 16} {:Counter "i_15"} true;
    goto anon20_Else;

  anon20_Else:
    assume {:partition} 16 > out_i_15;
    call {:si_unique_call 2318} out_vslice_dummy_var_125 := ParStlWriteReg(in_Extension_3, 14, out_i_15);
    call {:si_unique_call 2319} out_sdv_242 := ParStlReadIoPort(in_Extension_3, 7);
    goto anon21_Else;

  anon21_Else:
    assume {:partition} BAND(out_sdv_242, 128) != 0;
    out_i_15 := out_i_15 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    havoc out_i_15;
    return;
}



procedure {:LoopProcedure} ParStlCheckDrivePresent_loop_L28(in_i_15: int, in_sdv_242: int, in_Extension_3: int, in_vslice_dummy_var_125: int) returns (out_i_15: int, out_sdv_242: int, out_vslice_dummy_var_125: int);
  free ensures {:va_keep} out_vslice_dummy_var_125 == 0 || out_vslice_dummy_var_125 == in_vslice_dummy_var_125;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckDrivePresent_loop_L12(in_i_15: int, in_byOrgCylHigh: int, in_sdv_233: int, in_Tmp_418: int, in_bReturnValue_3: int, in_sdv_234: int, in_Tmp_419: int, in_Tmp_420: int, in_nDrvHdArray: int, in_Tmp_421: int, in_Tmp_422: int, in_Tmp_423: int, in_nCurrentDrive: int, in_sdv_237: int, in_Tmp_424: int, in_sdv_238: int, in_sdv_241: int, in_sdv_242: int, in_Tmp_425: int, in_Tmp_426: int, in_Tmp_427: int, in_Tmp_428: int, in_Tmp_429: int, in_sdv_246: int, in_byOrgCylLow: int, in_Extension_3: int, in_atapiParams_1: int, in_vslice_dummy_var_125: int, in_vslice_dummy_var_126: int, in_vslice_dummy_var_127: int, in_vslice_dummy_var_128: int, in_vslice_dummy_var_129: int, in_vslice_dummy_var_130: int, in_vslice_dummy_var_131: int) returns (out_i_15: int, out_byOrgCylHigh: int, out_sdv_233: int, out_Tmp_418: int, out_bReturnValue_3: int, out_sdv_234: int, out_Tmp_419: int, out_Tmp_420: int, out_Tmp_421: int, out_Tmp_422: int, out_Tmp_423: int, out_nCurrentDrive: int, out_sdv_237: int, out_Tmp_424: int, out_sdv_238: int, out_sdv_241: int, out_sdv_242: int, out_Tmp_425: int, out_Tmp_426: int, out_Tmp_427: int, out_Tmp_428: int, out_Tmp_429: int, out_sdv_246: int, out_byOrgCylLow: int, out_vslice_dummy_var_125: int, out_vslice_dummy_var_126: int, out_vslice_dummy_var_127: int, out_vslice_dummy_var_128: int, out_vslice_dummy_var_129: int, out_vslice_dummy_var_130: int, out_vslice_dummy_var_131: int)
{

  entry:
    out_i_15, out_byOrgCylHigh, out_sdv_233, out_Tmp_418, out_bReturnValue_3, out_sdv_234, out_Tmp_419, out_Tmp_420, out_Tmp_421, out_Tmp_422, out_Tmp_423, out_nCurrentDrive, out_sdv_237, out_Tmp_424, out_sdv_238, out_sdv_241, out_sdv_242, out_Tmp_425, out_Tmp_426, out_Tmp_427, out_Tmp_428, out_Tmp_429, out_sdv_246, out_byOrgCylLow, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131 := in_i_15, in_byOrgCylHigh, in_sdv_233, in_Tmp_418, in_bReturnValue_3, in_sdv_234, in_Tmp_419, in_Tmp_420, in_Tmp_421, in_Tmp_422, in_Tmp_423, in_nCurrentDrive, in_sdv_237, in_Tmp_424, in_sdv_238, in_sdv_241, in_sdv_242, in_Tmp_425, in_Tmp_426, in_Tmp_427, in_Tmp_428, in_Tmp_429, in_sdv_246, in_byOrgCylLow, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131;
    goto L12, exit;

  exit:
    return;

  L12:
    out_Tmp_426 := out_nCurrentDrive;
    assume {:nonnull} in_atapiParams_1 != 0;
    assume in_atapiParams_1 > 0;
    havoc out_Tmp_423;
    assume {:nonnull} out_Tmp_423 != 0;
    assume out_Tmp_423 > 0;
    goto anon25_Then;

  anon25_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_423 + out_Tmp_426 * 4] != 1;
    out_Tmp_422 := out_nCurrentDrive;
    assume {:nonnull} in_nDrvHdArray != 0;
    assume in_nDrvHdArray > 0;
    out_Tmp_418 := Mem_T.INT4[in_nDrvHdArray + out_Tmp_422 * 4];
    call {:si_unique_call 2334} out_vslice_dummy_var_127 := ParStlWriteIoPort(in_Extension_3, 6, out_Tmp_418);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_nCurrentDrive != 0;
    call {:si_unique_call 2333} ParStlWaitForMicroSeconds(1000000);
    goto L24;

  L24:
    out_i_15 := 0;
    goto L28;

  L28:
    call {:si_unique_call 2330} out_i_15, out_sdv_242, out_vslice_dummy_var_125 := ParStlCheckDrivePresent_loop_L28(out_i_15, out_sdv_242, in_Extension_3, out_vslice_dummy_var_125);
    goto L28_last;

  L28_last:
    assume {:CounterLoop 16} {:Counter "i_15"} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} 16 > out_i_15;
    call {:si_unique_call 2331} out_vslice_dummy_var_125 := ParStlWriteReg(in_Extension_3, 14, out_i_15);
    call {:si_unique_call 2332} out_sdv_242 := ParStlReadIoPort(in_Extension_3, 7);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(out_sdv_242, 128) != 0;
    out_i_15 := out_i_15 + 1;
    assume false;
    return;

  anon21_Then:
    assume {:partition} BAND(out_sdv_242, 128) == 0;
    goto L29;

  L29:
    call {:si_unique_call 2329} out_sdv_241 := ParStlWaitForBusyToClear(in_Extension_3, 7);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} out_sdv_241 == 0;
    goto L56;

  L56:
    out_nCurrentDrive := out_nCurrentDrive + 1;
    goto anon27_Then;

  anon27_Then:
    assume {:partition} out_nCurrentDrive < 2;
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    call {:si_unique_call 2336} {:si_old_unique_call 1} out_i_15, out_byOrgCylHigh, out_sdv_233, out_Tmp_418, out_bReturnValue_3, out_sdv_234, out_Tmp_419, out_Tmp_420, out_Tmp_421, out_Tmp_422, out_Tmp_423, out_nCurrentDrive, out_sdv_237, out_Tmp_424, out_sdv_238, out_sdv_241, out_sdv_242, out_Tmp_425, out_Tmp_426, out_Tmp_427, out_Tmp_428, out_Tmp_429, out_sdv_246, out_byOrgCylLow, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131 := ParStlCheckDrivePresent_loop_L12(out_i_15, out_byOrgCylHigh, out_sdv_233, out_Tmp_418, out_bReturnValue_3, out_sdv_234, out_Tmp_419, out_Tmp_420, in_nDrvHdArray, out_Tmp_421, out_Tmp_422, out_Tmp_423, out_nCurrentDrive, out_sdv_237, out_Tmp_424, out_sdv_238, out_sdv_241, out_sdv_242, out_Tmp_425, out_Tmp_426, out_Tmp_427, out_Tmp_428, out_Tmp_429, out_sdv_246, out_byOrgCylLow, in_Extension_3, in_atapiParams_1, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131);
    return;

  anon22_Then:
    assume {:partition} out_sdv_241 != 0;
    out_Tmp_421 := out_nCurrentDrive;
    assume {:nonnull} in_nDrvHdArray != 0;
    assume in_nDrvHdArray > 0;
    out_Tmp_424 := Mem_T.INT4[in_nDrvHdArray + out_Tmp_421 * 4];
    call {:si_unique_call 2327} out_vslice_dummy_var_128 := ParStlWriteIoPort(in_Extension_3, 6, out_Tmp_424);
    call {:si_unique_call 2328} out_sdv_246 := ParStlReadIoPort(in_Extension_3, 6);
    out_Tmp_428 := BAND(out_sdv_246, BOR(BOR(16, 32), 128));
    out_Tmp_419 := out_nCurrentDrive;
    assume {:nonnull} in_nDrvHdArray != 0;
    assume in_nDrvHdArray > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} out_Tmp_428 != Mem_T.INT4[in_nDrvHdArray + out_Tmp_419 * 4];
    goto L56;

  anon26_Then:
    assume {:partition} out_Tmp_428 == Mem_T.INT4[in_nDrvHdArray + out_Tmp_419 * 4];
    call {:si_unique_call 2322} out_sdv_238 := ParStlReadIoPort(in_Extension_3, 4);
    out_byOrgCylLow := out_sdv_238;
    call {:si_unique_call 2323} out_sdv_237 := ParStlReadIoPort(in_Extension_3, 5);
    out_byOrgCylHigh := out_sdv_237;
    call {:si_unique_call 2324} out_vslice_dummy_var_129 := ParStlWriteIoPort(in_Extension_3, 4, 85);
    call {:si_unique_call 2325} out_vslice_dummy_var_126 := ParStlWriteIoPort(in_Extension_3, 5, 170);
    call {:si_unique_call 2326} out_sdv_233 := ParStlReadIoPort(in_Extension_3, 4);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} 85 == out_sdv_233;
    call {:si_unique_call 2335} out_sdv_234 := ParStlReadIoPort(in_Extension_3, 5);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 170 == out_sdv_234;
    out_Tmp_427 := out_byOrgCylLow;
    call {:si_unique_call 2320} out_vslice_dummy_var_130 := ParStlWriteIoPort(in_Extension_3, 4, out_Tmp_427);
    out_Tmp_429 := out_byOrgCylHigh;
    call {:si_unique_call 2321} out_vslice_dummy_var_131 := ParStlWriteIoPort(in_Extension_3, 5, out_Tmp_429);
    out_bReturnValue_3 := 1;
    out_Tmp_420 := out_nCurrentDrive;
    assume {:nonnull} in_atapiParams_1 != 0;
    assume in_atapiParams_1 > 0;
    havoc out_Tmp_425;
    assume {:nonnull} out_Tmp_425 != 0;
    assume out_Tmp_425 > 0;
    Mem_T.INT4[out_Tmp_425 + out_Tmp_420 * 4] := 1;
    goto L56;

  anon24_Then:
    assume {:partition} 170 != out_sdv_234;
    goto L56;

  anon23_Then:
    assume {:partition} 85 != out_sdv_233;
    goto L56;

  anon20_Then:
    assume {:partition} out_i_15 >= 16;
    goto L29;

  anon19_Then:
    assume {:partition} out_nCurrentDrive == 0;
    goto L24;
}



procedure {:LoopProcedure} ParStlCheckDrivePresent_loop_L12(in_i_15: int, in_byOrgCylHigh: int, in_sdv_233: int, in_Tmp_418: int, in_bReturnValue_3: int, in_sdv_234: int, in_Tmp_419: int, in_Tmp_420: int, in_nDrvHdArray: int, in_Tmp_421: int, in_Tmp_422: int, in_Tmp_423: int, in_nCurrentDrive: int, in_sdv_237: int, in_Tmp_424: int, in_sdv_238: int, in_sdv_241: int, in_sdv_242: int, in_Tmp_425: int, in_Tmp_426: int, in_Tmp_427: int, in_Tmp_428: int, in_Tmp_429: int, in_sdv_246: int, in_byOrgCylLow: int, in_Extension_3: int, in_atapiParams_1: int, in_vslice_dummy_var_125: int, in_vslice_dummy_var_126: int, in_vslice_dummy_var_127: int, in_vslice_dummy_var_128: int, in_vslice_dummy_var_129: int, in_vslice_dummy_var_130: int, in_vslice_dummy_var_131: int) returns (out_i_15: int, out_byOrgCylHigh: int, out_sdv_233: int, out_Tmp_418: int, out_bReturnValue_3: int, out_sdv_234: int, out_Tmp_419: int, out_Tmp_420: int, out_Tmp_421: int, out_Tmp_422: int, out_Tmp_423: int, out_nCurrentDrive: int, out_sdv_237: int, out_Tmp_424: int, out_sdv_238: int, out_sdv_241: int, out_sdv_242: int, out_Tmp_425: int, out_Tmp_426: int, out_Tmp_427: int, out_Tmp_428: int, out_Tmp_429: int, out_sdv_246: int, out_byOrgCylLow: int, out_vslice_dummy_var_125: int, out_vslice_dummy_var_126: int, out_vslice_dummy_var_127: int, out_vslice_dummy_var_128: int, out_vslice_dummy_var_129: int, out_vslice_dummy_var_130: int, out_vslice_dummy_var_131: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_bReturnValue_3 == 1 || out_bReturnValue_3 == in_bReturnValue_3;
  free ensures {:va_keep} out_sdv_241 == 1 || out_sdv_241 == 0 || out_sdv_241 == in_sdv_241;
  free ensures {:va_keep} out_vslice_dummy_var_125 == 0 || out_vslice_dummy_var_125 == in_vslice_dummy_var_125;
  free ensures {:va_keep} out_vslice_dummy_var_126 == 0 || out_vslice_dummy_var_126 == in_vslice_dummy_var_126;
  free ensures {:va_keep} out_vslice_dummy_var_127 == 0 || out_vslice_dummy_var_127 == in_vslice_dummy_var_127;
  free ensures {:va_keep} out_vslice_dummy_var_128 == 0 || out_vslice_dummy_var_128 == in_vslice_dummy_var_128;
  free ensures {:va_keep} out_vslice_dummy_var_129 == 0 || out_vslice_dummy_var_129 == in_vslice_dummy_var_129;
  free ensures {:va_keep} out_vslice_dummy_var_130 == 0 || out_vslice_dummy_var_130 == in_vslice_dummy_var_130;
  free ensures {:va_keep} out_vslice_dummy_var_131 == 0 || out_vslice_dummy_var_131 == in_vslice_dummy_var_131;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckUMAXScannerPresence_loop_L45(in_idx_1: int, in_status_20: int, in_Extension_5: int) returns (out_idx_1: int, out_status_20: int)
{

  entry:
    out_idx_1, out_status_20 := in_idx_1, in_status_20;
    goto L45, exit;

  exit:
    return;

  L45:
    assume {:CounterLoop 6} {:Counter "idx_1"} true;
    goto anon34_Else;

  anon34_Else:
    assume {:partition} 6 >= out_idx_1;
    goto anon36_Else;

  anon36_Else:
    assume {:partition} BAND(out_status_20, 2048) == 0;
    call {:si_unique_call 2337} out_status_20 := ParStlEPPRead(in_Extension_5);
    out_idx_1 := out_idx_1 + 1;
    goto anon36_Else_dummy;

  anon36_Else_dummy:
    call {:si_unique_call 2338} {:si_old_unique_call 1} out_idx_1, out_status_20 := ParStlCheckUMAXScannerPresence_loop_L45(out_idx_1, out_status_20, in_Extension_5);
    return;
}



procedure {:LoopProcedure} ParStlCheckUMAXScannerPresence_loop_L45(in_idx_1: int, in_status_20: int, in_Extension_5: int) returns (out_idx_1: int, out_status_20: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlAtaInitialize_loop_L8(in_Tmp_448: int, in_sdv_265: int, in_byTempValue: int, in_nCurrentDrive_1: int, in_sdv_266: int, in_Tmp_450: int, in_sdv_269: int, in_sdv_271: int, in_Tmp_451: int, in_Extension_8: int, in_atapiParams_2: int, in_vslice_dummy_var_137: int, in_vslice_dummy_var_138: int, in_vslice_dummy_var_139: int) returns (out_Tmp_448: int, out_sdv_265: int, out_byTempValue: int, out_nCurrentDrive_1: int, out_sdv_266: int, out_Tmp_450: int, out_sdv_269: int, out_sdv_271: int, out_Tmp_451: int, out_vslice_dummy_var_137: int, out_vslice_dummy_var_138: int, out_vslice_dummy_var_139: int)
{

  entry:
    out_Tmp_448, out_sdv_265, out_byTempValue, out_nCurrentDrive_1, out_sdv_266, out_Tmp_450, out_sdv_269, out_sdv_271, out_Tmp_451, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139 := in_Tmp_448, in_sdv_265, in_byTempValue, in_nCurrentDrive_1, in_sdv_266, in_Tmp_450, in_sdv_269, in_sdv_271, in_Tmp_451, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139;
    goto L8, exit;

  exit:
    return;

  L8:
    out_Tmp_450 := out_nCurrentDrive_1;
    assume {:nonnull} in_atapiParams_2 != 0;
    assume in_atapiParams_2 > 0;
    havoc out_Tmp_451;
    assume {:nonnull} out_Tmp_451 != 0;
    assume out_Tmp_451 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} 1 != Mem_T.INT4[out_Tmp_451 + out_Tmp_450 * 4];
    goto L11;

  L11:
    out_nCurrentDrive_1 := out_nCurrentDrive_1 + 1;
    goto anon22_Then;

  anon22_Then:
    assume {:partition} out_nCurrentDrive_1 < 2;
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    call {:si_unique_call 2346} {:si_old_unique_call 1} out_Tmp_448, out_sdv_265, out_byTempValue, out_nCurrentDrive_1, out_sdv_266, out_Tmp_450, out_sdv_269, out_sdv_271, out_Tmp_451, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139 := ParStlAtaInitialize_loop_L8(out_Tmp_448, out_sdv_265, out_byTempValue, out_nCurrentDrive_1, out_sdv_266, out_Tmp_450, out_sdv_269, out_sdv_271, out_Tmp_451, in_Extension_8, in_atapiParams_2, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139);
    return;

  anon21_Then:
    assume {:partition} 1 == Mem_T.INT4[out_Tmp_451 + out_Tmp_450 * 4];
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_nCurrentDrive_1 != 0;
    call {:si_unique_call 2340} out_vslice_dummy_var_138 := ParStlWriteIoPort(in_Extension_8, 6, 176);
    goto L22;

  L22:
    call {:si_unique_call 2339} out_sdv_269 := ParStlWaitForBusyToClear(in_Extension_8, 7);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_sdv_269 != 0;
    call {:si_unique_call 2342} out_vslice_dummy_var_139 := ParStlWriteIoPort(in_Extension_8, 7, 0);
    call {:si_unique_call 2343} out_sdv_265 := ParStlWaitForBusyToClear(in_Extension_8, 7);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_sdv_265 != 0;
    call {:si_unique_call 2344} out_sdv_271 := ParStlReadIoPort(in_Extension_8, 7);
    out_byTempValue := out_sdv_271;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_byTempValue != 255;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(out_byTempValue, 1) != 0;
    call {:si_unique_call 2345} out_sdv_266 := ParStlReadIoPort(in_Extension_8, 1);
    out_Tmp_448 := BAND(out_sdv_266, BOR(BOR(BOR(1, 2), 4), 8));
    goto anon24_Then;

  anon24_Then:
    assume {:partition} 4 != out_Tmp_448;
    goto L11;

  anon20_Then:
    assume {:partition} BAND(out_byTempValue, 1) == 0;
    goto L11;

  anon23_Then:
    assume {:partition} out_byTempValue == 255;
    goto L11;

  anon19_Then:
    assume {:partition} out_sdv_265 == 0;
    goto L11;

  anon18_Then:
    assume {:partition} out_sdv_269 == 0;
    goto L11;

  anon17_Then:
    assume {:partition} out_nCurrentDrive_1 == 0;
    call {:si_unique_call 2341} out_vslice_dummy_var_137 := ParStlWriteIoPort(in_Extension_8, 6, 160);
    goto L22;
}



procedure {:LoopProcedure} ParStlAtaInitialize_loop_L8(in_Tmp_448: int, in_sdv_265: int, in_byTempValue: int, in_nCurrentDrive_1: int, in_sdv_266: int, in_Tmp_450: int, in_sdv_269: int, in_sdv_271: int, in_Tmp_451: int, in_Extension_8: int, in_atapiParams_2: int, in_vslice_dummy_var_137: int, in_vslice_dummy_var_138: int, in_vslice_dummy_var_139: int) returns (out_Tmp_448: int, out_sdv_265: int, out_byTempValue: int, out_nCurrentDrive_1: int, out_sdv_266: int, out_Tmp_450: int, out_sdv_269: int, out_sdv_271: int, out_Tmp_451: int, out_vslice_dummy_var_137: int, out_vslice_dummy_var_138: int, out_vslice_dummy_var_139: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_265 == 1 || out_sdv_265 == 0 || out_sdv_265 == in_sdv_265;
  free ensures {:va_keep} out_sdv_269 == 1 || out_sdv_269 == 0 || out_sdv_269 == in_sdv_269;
  free ensures {:va_keep} out_vslice_dummy_var_137 == 0 || out_vslice_dummy_var_137 == in_vslice_dummy_var_137;
  free ensures {:va_keep} out_vslice_dummy_var_138 == 0 || out_vslice_dummy_var_138 == in_vslice_dummy_var_138;
  free ensures {:va_keep} out_vslice_dummy_var_139 == 0 || out_vslice_dummy_var_139 == in_vslice_dummy_var_139;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlAtapiInitialize_loop_L85(in_i_16: int, in_chAtapiIdentifyBuffer: int, in_Tmp_459: int, in_Tmp_461: int, in_Tmp_464: int, in_atapiParams_4: int) returns (out_i_16: int, out_Tmp_459: int, out_Tmp_461: int, out_Tmp_464: int)
{
  var vslice_dummy_var_3296: int;

  entry:
    out_i_16, out_Tmp_459, out_Tmp_461, out_Tmp_464 := in_i_16, in_Tmp_459, in_Tmp_461, in_Tmp_464;
    goto L85, exit;

  exit:
    return;

  L85:
    assume {:CounterLoop 10} {:Counter "i_16"} true;
    goto anon39_Else;

  anon39_Else:
    assume {:partition} 10 > out_i_16;
    out_Tmp_459 := out_i_16;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_464;
    out_Tmp_461 := 84 + out_i_16;
    assume {:nonnull} out_Tmp_464 != 0;
    assume out_Tmp_464 > 0;
    assume {:nonnull} in_chAtapiIdentifyBuffer != 0;
    assume in_chAtapiIdentifyBuffer > 0;
    havoc vslice_dummy_var_3296;
    Mem_T.INT4[out_Tmp_464 + out_Tmp_459 * 4] := vslice_dummy_var_3296;
    out_i_16 := out_i_16 + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    call {:si_unique_call 2347} {:si_old_unique_call 1} out_i_16, out_Tmp_459, out_Tmp_461, out_Tmp_464 := ParStlAtapiInitialize_loop_L85(out_i_16, in_chAtapiIdentifyBuffer, out_Tmp_459, out_Tmp_461, out_Tmp_464, in_atapiParams_4);
    return;
}



procedure {:LoopProcedure} ParStlAtapiInitialize_loop_L85(in_i_16: int, in_chAtapiIdentifyBuffer: int, in_Tmp_459: int, in_Tmp_461: int, in_Tmp_464: int, in_atapiParams_4: int) returns (out_i_16: int, out_Tmp_459: int, out_Tmp_461: int, out_Tmp_464: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 2} ParStlAtapiInitialize_loop_L10(in_i_16: int, in_sdv_275: int, in_Tmp_455: int, in_bReturnValue_7: int, in_sdv_276: int, in_chAtapiIdentifyBuffer: int, in_Tmp_457: int, in_Tmp_458: int, in_byTempValue_1: int, in_nCurrentDrive_2: int, in_sdv_279: int, in_sdv_280: int, in_Tmp_459: int, in_sdv_284: int, in_sdv_285: int, in_Tmp_460: int, in_sdv_286: int, in_sdv_287: int, in_Tmp_461: int, in_sdv_288: int, in_Tmp_462: int, in_Tmp_463: int, in_Tmp_464: int, in_sdv_290: int, in_Extension_10: int, in_atapiParams_4: int, in_vslice_dummy_var_141: int, in_vslice_dummy_var_142: int, in_vslice_dummy_var_143: int, in_vslice_dummy_var_144: int, in_vslice_dummy_var_145: int) returns (out_i_16: int, out_sdv_275: int, out_Tmp_455: int, out_bReturnValue_7: int, out_sdv_276: int, out_Tmp_457: int, out_Tmp_458: int, out_byTempValue_1: int, out_nCurrentDrive_2: int, out_sdv_279: int, out_sdv_280: int, out_Tmp_459: int, out_sdv_284: int, out_sdv_285: int, out_Tmp_460: int, out_sdv_286: int, out_sdv_287: int, out_Tmp_461: int, out_sdv_288: int, out_Tmp_462: int, out_Tmp_463: int, out_Tmp_464: int, out_sdv_290: int, out_vslice_dummy_var_141: int, out_vslice_dummy_var_142: int, out_vslice_dummy_var_143: int, out_vslice_dummy_var_144: int, out_vslice_dummy_var_145: int)
{
  var vslice_dummy_var_3297: int;

  entry:
    out_i_16, out_sdv_275, out_Tmp_455, out_bReturnValue_7, out_sdv_276, out_Tmp_457, out_Tmp_458, out_byTempValue_1, out_nCurrentDrive_2, out_sdv_279, out_sdv_280, out_Tmp_459, out_sdv_284, out_sdv_285, out_Tmp_460, out_sdv_286, out_sdv_287, out_Tmp_461, out_sdv_288, out_Tmp_462, out_Tmp_463, out_Tmp_464, out_sdv_290, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145 := in_i_16, in_sdv_275, in_Tmp_455, in_bReturnValue_7, in_sdv_276, in_Tmp_457, in_Tmp_458, in_byTempValue_1, in_nCurrentDrive_2, in_sdv_279, in_sdv_280, in_Tmp_459, in_sdv_284, in_sdv_285, in_Tmp_460, in_sdv_286, in_sdv_287, in_Tmp_461, in_sdv_288, in_Tmp_462, in_Tmp_463, in_Tmp_464, in_sdv_290, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145;
    goto L10, exit;

  exit:
    return;

  L10:
    out_Tmp_457 := out_nCurrentDrive_2;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_458;
    assume {:nonnull} out_Tmp_458 != 0;
    assume out_Tmp_458 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 1 != Mem_T.INT4[out_Tmp_458 + out_Tmp_457 * 4];
    goto L13;

  L13:
    out_nCurrentDrive_2 := out_nCurrentDrive_2 + 1;
    goto anon41_Then;

  anon41_Then:
    assume {:partition} out_nCurrentDrive_2 < 2;
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    call {:si_unique_call 2364} {:si_old_unique_call 1} out_i_16, out_sdv_275, out_Tmp_455, out_bReturnValue_7, out_sdv_276, out_Tmp_457, out_Tmp_458, out_byTempValue_1, out_nCurrentDrive_2, out_sdv_279, out_sdv_280, out_Tmp_459, out_sdv_284, out_sdv_285, out_Tmp_460, out_sdv_286, out_sdv_287, out_Tmp_461, out_sdv_288, out_Tmp_462, out_Tmp_463, out_Tmp_464, out_sdv_290, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145 := ParStlAtapiInitialize_loop_L10(out_i_16, out_sdv_275, out_Tmp_455, out_bReturnValue_7, out_sdv_276, in_chAtapiIdentifyBuffer, out_Tmp_457, out_Tmp_458, out_byTempValue_1, out_nCurrentDrive_2, out_sdv_279, out_sdv_280, out_Tmp_459, out_sdv_284, out_sdv_285, out_Tmp_460, out_sdv_286, out_sdv_287, out_Tmp_461, out_sdv_288, out_Tmp_462, out_Tmp_463, out_Tmp_464, out_sdv_290, in_Extension_10, in_atapiParams_4, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145);
    return;

  anon40_Then:
    assume {:partition} 1 == Mem_T.INT4[out_Tmp_458 + out_Tmp_457 * 4];
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_nCurrentDrive_2 != 0;
    call {:si_unique_call 2349} out_vslice_dummy_var_142 := ParStlWriteIoPort(in_Extension_10, 6, 176);
    goto L24;

  L24:
    call {:si_unique_call 2348} out_sdv_285 := ParStlWaitForBusyToClear(in_Extension_10, 7);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} out_sdv_285 != 0;
    call {:si_unique_call 2353} out_sdv_284 := ParStlReadIoPort(in_Extension_10, 4);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_sdv_284 == 20;
    call {:si_unique_call 2352} out_sdv_288 := ParStlReadIoPort(in_Extension_10, 5);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} out_sdv_288 == 235;
    out_bReturnValue_7 := 1;
    out_Tmp_455 := out_nCurrentDrive_2;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_463;
    assume {:nonnull} out_Tmp_463 != 0;
    assume out_Tmp_463 > 0;
    Mem_T.INT4[out_Tmp_463 + out_Tmp_455 * 4] := 2;
    call {:si_unique_call 2351} out_sdv_280 := ParStlReadReg(in_Extension_10, 11);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 200 == out_sdv_280;
    goto L33;

  L33:
    call {:si_unique_call 2354} out_vslice_dummy_var_143 := ParStlWriteIoPort(in_Extension_10, 7, 0);
    call {:si_unique_call 2355} out_sdv_279 := ParStlWaitForIrq(in_Extension_10);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_sdv_279 != 0;
    call {:si_unique_call 2356} out_sdv_290 := ParStlWaitForBusyToClear(in_Extension_10, 7);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} out_sdv_290 != 0;
    call {:si_unique_call 2357} out_vslice_dummy_var_144 := ParStlWriteIoPort(in_Extension_10, 7, 161);
    call {:si_unique_call 2358} out_sdv_275 := ParStlWaitForIrq(in_Extension_10);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} out_sdv_275 != 0;
    call {:si_unique_call 2359} out_sdv_276 := ParStlWaitForBusyToClear(in_Extension_10, 7);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} out_sdv_276 != 0;
    call {:si_unique_call 2360} out_sdv_286 := ParStlReadIoPort(in_Extension_10, 7);
    out_byTempValue_1 := out_sdv_286;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(out_byTempValue_1, 1) == 0;
    call {:si_unique_call 2361} out_sdv_287 := ParStlWaitForDrq(in_Extension_10);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} out_sdv_287 != 0;
    out_bReturnValue_7 := 1;
    call {:si_unique_call 2363} out_vslice_dummy_var_145 := ParStlReceiveData(in_Extension_10, in_chAtapiIdentifyBuffer, -1, 512);
    out_i_16 := 0;
    goto L85;

  L85:
    call {:si_unique_call 2362} out_i_16, out_Tmp_459, out_Tmp_461, out_Tmp_464 := ParStlAtapiInitialize_loop_L85(out_i_16, in_chAtapiIdentifyBuffer, out_Tmp_459, out_Tmp_461, out_Tmp_464, in_atapiParams_4);
    goto L85_last;

  L85_last:
    assume {:CounterLoop 10} {:Counter "i_16"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 10 > out_i_16;
    out_Tmp_459 := out_i_16;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_464;
    out_Tmp_461 := 84 + out_i_16;
    assume {:nonnull} out_Tmp_464 != 0;
    assume out_Tmp_464 > 0;
    assume {:nonnull} in_chAtapiIdentifyBuffer != 0;
    assume in_chAtapiIdentifyBuffer > 0;
    havoc vslice_dummy_var_3297;
    Mem_T.INT4[out_Tmp_464 + out_Tmp_459 * 4] := vslice_dummy_var_3297;
    out_i_16 := out_i_16 + 1;
    assume false;
    return;

  anon39_Then:
    assume {:partition} out_i_16 >= 10;
    out_Tmp_462 := out_nCurrentDrive_2;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_460;
    assume {:nonnull} out_Tmp_460 != 0;
    assume out_Tmp_460 > 0;
    Mem_T.INT4[out_Tmp_460 + out_Tmp_462 * 4] := 2;
    goto L13;

  anon38_Then:
    assume {:partition} out_sdv_287 == 0;
    goto L13;

  anon42_Then:
    assume {:partition} BAND(out_byTempValue_1, 1) != 0;
    goto L13;

  anon37_Then:
    assume {:partition} out_sdv_276 == 0;
    goto L13;

  anon36_Then:
    assume {:partition} out_sdv_275 == 0;
    goto L13;

  anon35_Then:
    assume {:partition} out_sdv_290 == 0;
    goto L13;

  anon34_Then:
    assume {:partition} out_sdv_279 == 0;
    goto L13;

  anon33_Then:
    assume {:partition} 200 != out_sdv_280;
    goto L13;

  anon32_Then:
    assume {:partition} out_sdv_288 != 235;
    goto L33;

  anon31_Then:
    assume {:partition} out_sdv_284 != 20;
    goto L33;

  anon30_Then:
    assume {:partition} out_sdv_285 == 0;
    goto L13;

  anon29_Then:
    assume {:partition} out_nCurrentDrive_2 == 0;
    call {:si_unique_call 2350} out_vslice_dummy_var_141 := ParStlWriteIoPort(in_Extension_10, 6, 160);
    goto L24;
}



procedure {:LoopProcedure} ParStlAtapiInitialize_loop_L10(in_i_16: int, in_sdv_275: int, in_Tmp_455: int, in_bReturnValue_7: int, in_sdv_276: int, in_chAtapiIdentifyBuffer: int, in_Tmp_457: int, in_Tmp_458: int, in_byTempValue_1: int, in_nCurrentDrive_2: int, in_sdv_279: int, in_sdv_280: int, in_Tmp_459: int, in_sdv_284: int, in_sdv_285: int, in_Tmp_460: int, in_sdv_286: int, in_sdv_287: int, in_Tmp_461: int, in_sdv_288: int, in_Tmp_462: int, in_Tmp_463: int, in_Tmp_464: int, in_sdv_290: int, in_Extension_10: int, in_atapiParams_4: int, in_vslice_dummy_var_141: int, in_vslice_dummy_var_142: int, in_vslice_dummy_var_143: int, in_vslice_dummy_var_144: int, in_vslice_dummy_var_145: int) returns (out_i_16: int, out_sdv_275: int, out_Tmp_455: int, out_bReturnValue_7: int, out_sdv_276: int, out_Tmp_457: int, out_Tmp_458: int, out_byTempValue_1: int, out_nCurrentDrive_2: int, out_sdv_279: int, out_sdv_280: int, out_Tmp_459: int, out_sdv_284: int, out_sdv_285: int, out_Tmp_460: int, out_sdv_286: int, out_sdv_287: int, out_Tmp_461: int, out_sdv_288: int, out_Tmp_462: int, out_Tmp_463: int, out_Tmp_464: int, out_sdv_290: int, out_vslice_dummy_var_141: int, out_vslice_dummy_var_142: int, out_vslice_dummy_var_143: int, out_vslice_dummy_var_144: int, out_vslice_dummy_var_145: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_sdv_275 == 1 || out_sdv_275 == 0 || out_sdv_275 == in_sdv_275;
  free ensures {:va_keep} out_bReturnValue_7 == 1 || out_bReturnValue_7 == in_bReturnValue_7;
  free ensures {:va_keep} out_sdv_276 == 1 || out_sdv_276 == 0 || out_sdv_276 == in_sdv_276;
  free ensures {:va_keep} out_sdv_279 == 1 || out_sdv_279 == 0 || out_sdv_279 == in_sdv_279;
  free ensures {:va_keep} out_sdv_285 == 1 || out_sdv_285 == 0 || out_sdv_285 == in_sdv_285;
  free ensures {:va_keep} out_sdv_287 == 1 || out_sdv_287 == 0 || out_sdv_287 == in_sdv_287;
  free ensures {:va_keep} out_sdv_290 == 1 || out_sdv_290 == 0 || out_sdv_290 == in_sdv_290;
  free ensures {:va_keep} out_vslice_dummy_var_141 == 0 || out_vslice_dummy_var_141 == in_vslice_dummy_var_141;
  free ensures {:va_keep} out_vslice_dummy_var_142 == 0 || out_vslice_dummy_var_142 == in_vslice_dummy_var_142;
  free ensures {:va_keep} out_vslice_dummy_var_143 == 0 || out_vslice_dummy_var_143 == in_vslice_dummy_var_143;
  free ensures {:va_keep} out_vslice_dummy_var_144 == 0 || out_vslice_dummy_var_144 == in_vslice_dummy_var_144;
  free ensures {:va_keep} out_vslice_dummy_var_145 == 0 || out_vslice_dummy_var_145 == in_vslice_dummy_var_145;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlWaitForBusyToClear_loop_L7(in_nMaxRetrials: int, in_sdv_291: int, in_Tmp_467: int, in_Extension_11: int, in_nRegisterToWaitOn: int) returns (out_nMaxRetrials: int, out_sdv_291: int, out_Tmp_467: int)
{

  entry:
    out_nMaxRetrials, out_sdv_291, out_Tmp_467 := in_nMaxRetrials, in_sdv_291, in_Tmp_467;
    goto L7, exit;

  exit:
    return;

  L7:
    out_Tmp_467 := out_nMaxRetrials;
    out_nMaxRetrials := out_nMaxRetrials - 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_467 != 0;
    call {:si_unique_call 2365} ParStlWaitForMicroSeconds(1000);
    call {:si_unique_call 2366} out_sdv_291 := ParStlReadIoPort(in_Extension_11, in_nRegisterToWaitOn);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} BAND(out_sdv_291, 128) != 0;
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    havoc out_nMaxRetrials;
    return;
}



procedure {:LoopProcedure} ParStlWaitForBusyToClear_loop_L7(in_nMaxRetrials: int, in_sdv_291: int, in_Tmp_467: int, in_Extension_11: int, in_nRegisterToWaitOn: int) returns (out_nMaxRetrials: int, out_sdv_291: int, out_Tmp_467: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_467 == in_nMaxRetrials || out_Tmp_467 == in_Tmp_467;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckIfStlProductId_loop_L39(in_i_17: int, in_Tmp_470: int) returns (out_i_17: int, out_Tmp_470: int)
{

  entry:
    out_i_17, out_Tmp_470 := in_i_17, in_Tmp_470;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:CounterLoop 4} {:Counter "i_17"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} 4 > out_i_17;
    out_Tmp_470 := out_i_17;
    out_i_17 := out_i_17 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    havoc out_i_17;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfStlProductId_loop_L39(in_i_17: int, in_Tmp_470: int) returns (out_i_17: int, out_Tmp_470: int);
  free ensures {:va_keep} out_Tmp_470 == in_i_17 || out_Tmp_470 == in_Tmp_470;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlWaitForIrq_loop_L7(in_nMaxRetrials_1: int, in_sdv_321: int, in_Tmp_505: int, in_Extension_14: int) returns (out_nMaxRetrials_1: int, out_sdv_321: int, out_Tmp_505: int)
{

  entry:
    out_nMaxRetrials_1, out_sdv_321, out_Tmp_505 := in_nMaxRetrials_1, in_sdv_321, in_Tmp_505;
    goto L7, exit;

  exit:
    return;

  L7:
    out_Tmp_505 := out_nMaxRetrials_1;
    out_nMaxRetrials_1 := out_nMaxRetrials_1 - 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_505 != 0;
    call {:si_unique_call 2368} out_sdv_321 := ParStlReadReg(in_Extension_14, 18);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} BAND(out_sdv_321, 32) == 0;
    call {:si_unique_call 2367} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    havoc out_nMaxRetrials_1;
    return;
}



procedure {:LoopProcedure} ParStlWaitForIrq_loop_L7(in_nMaxRetrials_1: int, in_sdv_321: int, in_Tmp_505: int, in_Extension_14: int) returns (out_nMaxRetrials_1: int, out_sdv_321: int, out_Tmp_505: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_505 == in_nMaxRetrials_1 || out_Tmp_505 == in_Tmp_505;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlSetEPPMode_loop_L62(in_idx_2: int, in_sdv_332: int, in_Extension_15: int) returns (out_idx_2: int, out_sdv_332: int)
{

  entry:
    out_idx_2, out_sdv_332 := in_idx_2, in_sdv_332;
    goto L62, exit;

  exit:
    return;

  L62:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon31_Else;

  anon31_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 2369} out_sdv_332 := ParStlReadReg(in_Extension_15, 26);
    goto anon33_Then;

  anon33_Then:
    assume {:partition} out_sdv_332 != 5;
    out_idx_2 := out_idx_2 + 1;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L62(in_idx_2: int, in_sdv_332: int, in_Extension_15: int) returns (out_idx_2: int, out_sdv_332: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlSetEPPMode_loop_L47(in_sdv_325: int, in_idx_2: int, in_Tmp_509: int, in_Extension_15: int) returns (out_sdv_325: int, out_idx_2: int, out_Tmp_509: int)
{

  entry:
    out_sdv_325, out_idx_2, out_Tmp_509 := in_sdv_325, in_idx_2, in_Tmp_509;
    goto L47, exit;

  exit:
    return;

  L47:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon29_Else;

  anon29_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 2370} out_sdv_325 := ParStlReadReg(in_Extension_15, 25);
    out_Tmp_509 := BAND(out_sdv_325, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon36_Then;

  anon36_Then:
    assume {:partition} out_Tmp_509 != 248;
    out_idx_2 := out_idx_2 + 1;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L47(in_sdv_325: int, in_idx_2: int, in_Tmp_509: int, in_Extension_15: int) returns (out_sdv_325: int, out_idx_2: int, out_Tmp_509: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlSetEPPMode_loop_L32(in_sdv_323: int, in_idx_2: int, in_Tmp_510: int, in_Extension_15: int) returns (out_sdv_323: int, out_idx_2: int, out_Tmp_510: int)
{

  entry:
    out_sdv_323, out_idx_2, out_Tmp_510 := in_sdv_323, in_idx_2, in_Tmp_510;
    goto L32, exit;

  exit:
    return;

  L32:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon27_Else;

  anon27_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 2371} out_sdv_323 := ParStlReadReg(in_Extension_15, 25);
    out_Tmp_510 := BAND(out_sdv_323, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon35_Then;

  anon35_Then:
    assume {:partition} out_Tmp_510 != 56;
    out_idx_2 := out_idx_2 + 1;
    goto anon35_Then_dummy;

  anon35_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L32(in_sdv_323: int, in_idx_2: int, in_Tmp_510: int, in_Extension_15: int) returns (out_sdv_323: int, out_idx_2: int, out_Tmp_510: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlSetEPPMode_loop_L16(in_Tmp_508: int, in_sdv_330: int, in_idx_2: int, in_Extension_15: int) returns (out_Tmp_508: int, out_sdv_330: int, out_idx_2: int)
{

  entry:
    out_Tmp_508, out_sdv_330, out_idx_2 := in_Tmp_508, in_sdv_330, in_idx_2;
    goto L16, exit;

  exit:
    return;

  L16:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 2372} out_sdv_330 := ParStlReadReg(in_Extension_15, 25);
    out_Tmp_508 := BAND(out_sdv_330, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon34_Then;

  anon34_Then:
    assume {:partition} out_Tmp_508 != 56;
    out_idx_2 := out_idx_2 + 1;
    goto anon34_Then_dummy;

  anon34_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L16(in_Tmp_508: int, in_sdv_330: int, in_idx_2: int, in_Extension_15: int) returns (out_Tmp_508: int, out_sdv_330: int, out_idx_2: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlEPPRead_loop_L10(in_sdv_340: int, in_statusData: int, in_idx_3: int, in_Extension_18: int) returns (out_sdv_340: int, out_statusData: int, out_idx_3: int)
{

  entry:
    out_sdv_340, out_statusData, out_idx_3 := in_sdv_340, in_statusData, in_idx_3;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:CounterLoop 10} {:Counter "idx_3"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} 10 > out_idx_3;
    call {:si_unique_call 2373} out_sdv_340 := ParStlReadReg(in_Extension_18, 25);
    out_statusData := out_sdv_340;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} BAND(out_statusData, 8) != 0;
    out_idx_3 := out_idx_3 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_idx_3;
    return;
}



procedure {:LoopProcedure} ParStlEPPRead_loop_L10(in_sdv_340: int, in_statusData: int, in_idx_3: int, in_Extension_18: int) returns (out_sdv_340: int, out_statusData: int, out_idx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlReceiveData_loop_L42(in_i_18: int, in_Tmp_536: int, in_Tmp_537: int, in_Tmp_538: int, in_pchDataBuffer: int, in_Tmp_539: int, in_Tmp_540: int, in_Tmp_541: int, in_Tmp_542: int, in_sdv_371: int, in_sdv_372: int, in_Tmp_543: int, in_Tmp_544: int, in_Tmp_545: int, in_count_2: int, in_boogieTmp: int, in_vslice_dummy_var_184: int, in_vslice_dummy_var_185: int) returns (out_i_18: int, out_Tmp_536: int, out_Tmp_537: int, out_Tmp_538: int, out_Tmp_539: int, out_Tmp_540: int, out_Tmp_541: int, out_Tmp_542: int, out_sdv_371: int, out_sdv_372: int, out_Tmp_543: int, out_Tmp_544: int, out_Tmp_545: int, out_boogieTmp: int, out_vslice_dummy_var_184: int, out_vslice_dummy_var_185: int)
{

  entry:
    out_i_18, out_Tmp_536, out_Tmp_537, out_Tmp_538, out_Tmp_539, out_Tmp_540, out_Tmp_541, out_Tmp_542, out_sdv_371, out_sdv_372, out_Tmp_543, out_Tmp_544, out_Tmp_545, out_boogieTmp, out_vslice_dummy_var_184, out_vslice_dummy_var_185 := in_i_18, in_Tmp_536, in_Tmp_537, in_Tmp_538, in_Tmp_539, in_Tmp_540, in_Tmp_541, in_Tmp_542, in_sdv_371, in_sdv_372, in_Tmp_543, in_Tmp_544, in_Tmp_545, in_boogieTmp, in_vslice_dummy_var_184, in_vslice_dummy_var_185;
    goto L42, exit;

  exit:
    return;

  L42:
    call {:si_unique_call 2374} out_vslice_dummy_var_184 := corral_nondet();
    out_Tmp_541 := out_i_18;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    call {:si_unique_call 2375} out_boogieTmp := corral_nondet();
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_541 * 4] := out_boogieTmp;
    call {:si_unique_call 2376} out_sdv_371 := corral_nondet();
    out_Tmp_538 := out_i_18;
    out_i_18 := out_i_18 + 1;
    out_Tmp_542 := out_Tmp_538;
    out_Tmp_540 := out_i_18;
    out_i_18 := out_i_18 + 1;
    out_Tmp_537 := out_Tmp_540;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_542 * 4] := BOR(Mem_T.INT4[in_pchDataBuffer + out_Tmp_537 * 4], BAND(out_sdv_371, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} in_count_2 - 1 == out_i_18;
    goto L69;

  L69:
    call {:si_unique_call 2377} out_vslice_dummy_var_185 := corral_nondet();
    out_Tmp_539 := out_i_18;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    call {:si_unique_call 2378} out_boogieTmp := corral_nondet();
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_539 * 4] := out_boogieTmp;
    call {:si_unique_call 2379} out_sdv_372 := corral_nondet();
    out_Tmp_536 := out_i_18;
    out_i_18 := out_i_18 + 1;
    out_Tmp_545 := out_Tmp_536;
    out_Tmp_544 := out_i_18;
    out_i_18 := out_i_18 + 1;
    out_Tmp_543 := out_Tmp_544;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_545 * 4] := BOR(Mem_T.INT4[in_pchDataBuffer + out_Tmp_543 * 4], BAND(out_sdv_372, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon6_Then;

  anon6_Then:
    assume {:partition} out_i_18 < in_count_2;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    call {:si_unique_call 2380} {:si_old_unique_call 1} out_i_18, out_Tmp_536, out_Tmp_537, out_Tmp_538, out_Tmp_539, out_Tmp_540, out_Tmp_541, out_Tmp_542, out_sdv_371, out_sdv_372, out_Tmp_543, out_Tmp_544, out_Tmp_545, out_boogieTmp, out_vslice_dummy_var_184, out_vslice_dummy_var_185 := ParStlReceiveData_loop_L42(out_i_18, out_Tmp_536, out_Tmp_537, out_Tmp_538, in_pchDataBuffer, out_Tmp_539, out_Tmp_540, out_Tmp_541, out_Tmp_542, out_sdv_371, out_sdv_372, out_Tmp_543, out_Tmp_544, out_Tmp_545, in_count_2, out_boogieTmp, out_vslice_dummy_var_184, out_vslice_dummy_var_185);
    return;

  anon5_Then:
    assume {:partition} in_count_2 - 1 != out_i_18;
    goto L69;
}



procedure {:LoopProcedure} ParStlReceiveData_loop_L42(in_i_18: int, in_Tmp_536: int, in_Tmp_537: int, in_Tmp_538: int, in_pchDataBuffer: int, in_Tmp_539: int, in_Tmp_540: int, in_Tmp_541: int, in_Tmp_542: int, in_sdv_371: int, in_sdv_372: int, in_Tmp_543: int, in_Tmp_544: int, in_Tmp_545: int, in_count_2: int, in_boogieTmp: int, in_vslice_dummy_var_184: int, in_vslice_dummy_var_185: int) returns (out_i_18: int, out_Tmp_536: int, out_Tmp_537: int, out_Tmp_538: int, out_Tmp_539: int, out_Tmp_540: int, out_Tmp_541: int, out_Tmp_542: int, out_sdv_371: int, out_sdv_372: int, out_Tmp_543: int, out_Tmp_544: int, out_Tmp_545: int, out_boogieTmp: int, out_vslice_dummy_var_184: int, out_vslice_dummy_var_185: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 2} ParStlGetDeviceType_loop_L8(in_i_19: int, in_Tmp_557: int, in_atapiParams_5: int) returns (out_i_19: int, out_Tmp_557: int)
{

  entry:
    out_i_19, out_Tmp_557 := in_i_19, in_Tmp_557;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:CounterLoop 2} {:Counter "i_19"} true;
    goto anon35_Else;

  anon35_Else:
    assume {:partition} 2 > out_i_19;
    out_Tmp_557 := out_i_19;
    assume {:nonnull} in_atapiParams_5 != 0;
    assume in_atapiParams_5 > 0;
    havoc Mem_T.INT4;
    out_i_19 := out_i_19 + 1;
    goto anon35_Else_dummy;

  anon35_Else_dummy:
    call {:si_unique_call 2381} {:si_old_unique_call 1} out_i_19, out_Tmp_557 := ParStlGetDeviceType_loop_L8(out_i_19, out_Tmp_557, in_atapiParams_5);
    return;
}



procedure {:LoopProcedure} ParStlGetDeviceType_loop_L8(in_i_19: int, in_Tmp_557: int, in_atapiParams_5: int) returns (out_i_19: int, out_Tmp_557: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlCheckIfImpactLS120_loop_L14(in_i_20: int, in_chLs120Name: int, in_Tmp_569: int, in_pszAtapiName: int, in_Tmp_570: int) returns (out_i_20: int, out_Tmp_569: int, out_Tmp_570: int)
{

  entry:
    out_i_20, out_Tmp_569, out_Tmp_570 := in_i_20, in_Tmp_569, in_Tmp_570;
    goto L14, exit;

  exit:
    return;

  L14:
    assume {:CounterLoop 10} {:Counter "i_20"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 10 > out_i_20;
    out_Tmp_570 := out_i_20;
    out_Tmp_569 := out_i_20;
    assume {:nonnull} in_chLs120Name != 0;
    assume in_chLs120Name > 0;
    assume {:nonnull} in_pszAtapiName != 0;
    assume in_pszAtapiName > 0;
    goto anon15_Then;

  anon15_Then:
    assume {:partition} Mem_T.INT4[in_pszAtapiName + out_Tmp_570 * 4] == Mem_T.INT4[in_chLs120Name + out_Tmp_569 * 4];
    out_i_20 := out_i_20 + 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    havoc out_i_20;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfImpactLS120_loop_L14(in_i_20: int, in_chLs120Name: int, in_Tmp_569: int, in_pszAtapiName: int, in_Tmp_570: int) returns (out_i_20: int, out_Tmp_569: int, out_Tmp_570: int);
  free ensures {:va_keep} out_Tmp_569 == in_i_20 || out_Tmp_569 == in_Tmp_569;
  free ensures {:va_keep} out_Tmp_570 == in_i_20 || out_Tmp_570 == in_Tmp_570;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlWaitForDrq_loop_L7(in_nMaxRetrials_2: int, in_sdv_448: int, in_Tmp_592: int, in_Extension_39: int) returns (out_nMaxRetrials_2: int, out_sdv_448: int, out_Tmp_592: int)
{

  entry:
    out_nMaxRetrials_2, out_sdv_448, out_Tmp_592 := in_nMaxRetrials_2, in_sdv_448, in_Tmp_592;
    goto L7, exit;

  exit:
    return;

  L7:
    out_Tmp_592 := out_nMaxRetrials_2;
    out_nMaxRetrials_2 := out_nMaxRetrials_2 - 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_592 != 0;
    call {:si_unique_call 2383} out_sdv_448 := ParStlReadIoPort(in_Extension_39, 7);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} BAND(out_sdv_448, 8) == 0;
    call {:si_unique_call 2382} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    havoc out_nMaxRetrials_2;
    return;
}



procedure {:LoopProcedure} ParStlWaitForDrq_loop_L7(in_nMaxRetrials_2: int, in_sdv_448: int, in_Tmp_592: int, in_Extension_39: int) returns (out_nMaxRetrials_2: int, out_sdv_448: int, out_Tmp_592: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_592 == in_nMaxRetrials_2 || out_Tmp_592 == in_Tmp_592;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParStlEPPWrite_loop_L9(in_sdv_465: int, in_statusData_1: int, in_idx_4: int, in_Extension_43: int) returns (out_sdv_465: int, out_statusData_1: int, out_idx_4: int)
{

  entry:
    out_sdv_465, out_statusData_1, out_idx_4 := in_sdv_465, in_statusData_1, in_idx_4;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:CounterLoop 10} {:Counter "idx_4"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} 10 > out_idx_4;
    call {:si_unique_call 2384} out_sdv_465 := ParStlReadReg(in_Extension_43, 25);
    out_statusData_1 := out_sdv_465;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} BAND(out_statusData_1, 32) != 0;
    out_idx_4 := out_idx_4 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_idx_4;
    return;
}



procedure {:LoopProcedure} ParStlEPPWrite_loop_L9(in_sdv_465: int, in_statusData_1: int, in_idx_4: int, in_Extension_43: int) returns (out_sdv_465: int, out_statusData_1: int, out_idx_4: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 2} PptFindNatChip_loop_L71(in_Tmp_712: int, in_Port: int, in_sdv_509: int, in_found: int, in_ChipAddr: int, in_OkToLook: int, in_ii: int, in_PortAddr: int, in_sdv_511: int, in_sdv_513: int, in_sdv_514: int, in_sdv_517: int, in_sdv_522: int, in_cr: int, in_sdv_525: int, in_AddrList: int, in_Tmp_723: int, in_Fdx_6: int, in_vslice_dummy_var_252: int, in_vslice_dummy_var_253: int, in_vslice_dummy_var_258: int) returns (out_Tmp_712: int, out_Port: int, out_sdv_509: int, out_found: int, out_OkToLook: int, out_ii: int, out_PortAddr: int, out_sdv_511: int, out_sdv_513: int, out_sdv_514: int, out_sdv_517: int, out_sdv_522: int, out_cr: int, out_sdv_525: int, out_Tmp_723: int, out_vslice_dummy_var_252: int, out_vslice_dummy_var_253: int, out_vslice_dummy_var_258: int)
{

  entry:
    out_Tmp_712, out_Port, out_sdv_509, out_found, out_OkToLook, out_ii, out_PortAddr, out_sdv_511, out_sdv_513, out_sdv_514, out_sdv_517, out_sdv_522, out_cr, out_sdv_525, out_Tmp_723, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_258 := in_Tmp_712, in_Port, in_sdv_509, in_found, in_OkToLook, in_ii, in_PortAddr, in_sdv_511, in_sdv_513, in_sdv_514, in_sdv_517, in_sdv_522, in_cr, in_sdv_525, in_Tmp_723, in_vslice_dummy_var_252, in_vslice_dummy_var_253, in_vslice_dummy_var_258;
    goto L71, exit;

  exit:
    return;

  L71:
    goto anon64_Then;

  anon64_Then:
    assume {:partition} out_found == 0;
    goto anon65_Else;

  anon65_Else:
    assume {:partition} 4 > out_ii;
    out_Tmp_723 := out_ii;
    assume {:nonnull} in_ChipAddr != 0;
    assume in_ChipAddr > 0;
    havoc out_PortAddr;
    call {:si_unique_call 2389} out_sdv_514 := corral_nondet();
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_sdv_514 == 136;
    call {:si_unique_call 2390} out_sdv_517 := corral_nondet();
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} 32 > out_sdv_517;
    out_OkToLook := 1;
    goto L105;

  L105:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_OkToLook != 0;
    out_OkToLook := 0;
    call {:si_unique_call 2392} out_cr := corral_nondet();
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_cr == 8;
    call {:si_unique_call 2393} out_sdv_509 := corral_nondet();
    out_cr := BAND(out_sdv_509, BOR(BOR(BOR(16, 32), 64), 128));
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} out_cr == 16;
    goto L123;

  L123:
    out_found := 1;
    call {:si_unique_call 2394} out_sdv_522 := corral_nondet();
    out_Port := BAND(out_sdv_522, BOR(1, 2));
    out_Tmp_712 := out_Port;
    assume {:nonnull} in_AddrList != 0;
    assume in_AddrList > 0;
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto L106;

  L106:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} out_found != 0;
    goto L143;

  L143:
    out_ii := out_ii + 1;
    goto L143_dummy;

  L143_dummy:
    call {:si_unique_call 2398} {:si_old_unique_call 1} out_Tmp_712, out_Port, out_sdv_509, out_found, out_OkToLook, out_ii, out_PortAddr, out_sdv_511, out_sdv_513, out_sdv_514, out_sdv_517, out_sdv_522, out_cr, out_sdv_525, out_Tmp_723, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_258 := PptFindNatChip_loop_L71(out_Tmp_712, out_Port, out_sdv_509, out_found, in_ChipAddr, out_OkToLook, out_ii, out_PortAddr, out_sdv_511, out_sdv_513, out_sdv_514, out_sdv_517, out_sdv_522, out_cr, out_sdv_525, in_AddrList, out_Tmp_723, in_Fdx_6, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_258);
    return;

  anon69_Then:
    assume {:partition} out_found == 0;
    call {:si_unique_call 2385} out_vslice_dummy_var_253 := corral_nondet();
    call {:si_unique_call 2386} out_sdv_525 := corral_nondet();
    out_cr := BAND(out_sdv_525, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_cr == 192;
    goto L159;

  L159:
    out_found := 1;
    call {:si_unique_call 2395} out_vslice_dummy_var_258 := corral_nondet();
    call {:si_unique_call 2396} out_Port := corral_nondet();
    call {:si_unique_call 2397} out_sdv_511 := corral_nondet();
    out_Port := BOR(out_Port, out_sdv_511);
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto L143;

  anon87_Then:
    goto L143;

  anon86_Then:
    assume {:partition} out_cr != 192;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_cr != 160;
    goto L143;

  anon78_Then:
    assume {:partition} out_cr == 160;
    goto L159;

  anon85_Then:
    goto L106;

  anon84_Then:
    assume {:partition} out_cr != 16;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_cr != 80;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_cr != 112;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_cr != 48;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_cr != 32;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} out_cr != 144;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} out_cr != 176;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_cr == 96;
    goto L123;

  anon77_Then:
    assume {:partition} out_cr != 96;
    goto L106;

  anon76_Then:
    assume {:partition} out_cr == 176;
    goto L123;

  anon75_Then:
    assume {:partition} out_cr == 144;
    goto L123;

  anon74_Then:
    assume {:partition} out_cr == 32;
    goto L123;

  anon73_Then:
    assume {:partition} out_cr == 48;
    goto L123;

  anon72_Then:
    assume {:partition} out_cr == 112;
    goto L123;

  anon71_Then:
    assume {:partition} out_cr == 80;
    goto L123;

  anon70_Then:
    assume {:partition} out_cr != 8;
    goto L106;

  anon68_Then:
    assume {:partition} out_OkToLook == 0;
    goto L106;

  anon67_Then:
    assume {:partition} out_sdv_517 >= 32;
    goto L97;

  L97:
    call {:si_unique_call 2387} out_vslice_dummy_var_252 := corral_nondet();
    call {:si_unique_call 2388} out_cr := corral_nondet();
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} out_cr != 255;
    call {:si_unique_call 2391} out_sdv_513 := corral_nondet();
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} out_sdv_513 == out_cr;
    out_OkToLook := 1;
    goto L105;

  anon80_Then:
    assume {:partition} out_sdv_513 != out_cr;
    goto L105;

  anon79_Then:
    assume {:partition} out_cr == 255;
    goto L105;

  anon66_Then:
    assume {:partition} out_sdv_514 != 136;
    goto L97;
}



procedure {:LoopProcedure} PptFindNatChip_loop_L71(in_Tmp_712: int, in_Port: int, in_sdv_509: int, in_found: int, in_ChipAddr: int, in_OkToLook: int, in_ii: int, in_PortAddr: int, in_sdv_511: int, in_sdv_513: int, in_sdv_514: int, in_sdv_517: int, in_sdv_522: int, in_cr: int, in_sdv_525: int, in_AddrList: int, in_Tmp_723: int, in_Fdx_6: int, in_vslice_dummy_var_252: int, in_vslice_dummy_var_253: int, in_vslice_dummy_var_258: int) returns (out_Tmp_712: int, out_Port: int, out_sdv_509: int, out_found: int, out_OkToLook: int, out_ii: int, out_PortAddr: int, out_sdv_511: int, out_sdv_513: int, out_sdv_514: int, out_sdv_517: int, out_sdv_522: int, out_cr: int, out_sdv_525: int, out_Tmp_723: int, out_vslice_dummy_var_252: int, out_vslice_dummy_var_253: int, out_vslice_dummy_var_258: int);
  free ensures {:va_keep} out_found == 1 || out_found == in_found;
  free ensures {:va_keep} out_OkToLook == 0 || out_OkToLook == 1 || out_OkToLook == in_OkToLook;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4NibbleModeRead_loop_L30(in_dcr_4: int, in_Tmp_838: int, in_j: int, in_sdv_606: int, in_Tmp_850: int, in_Tmp_851: int, in_Tmp_853: int, in_nibble: int, in_sdv_611: int, in_Tmp_855: int, in_sdv_612: int, in_sdv_613: int, in_sdv_614: int, in_Tmp_858: int, in_Controller_7: int, in_IeeeState_2: int) returns (out_dcr_4: int, out_Tmp_838: int, out_j: int, out_sdv_606: int, out_Tmp_850: int, out_Tmp_851: int, out_Tmp_853: int, out_sdv_611: int, out_Tmp_855: int, out_sdv_612: int, out_sdv_613: int, out_sdv_614: int, out_Tmp_858: int)
{

  entry:
    out_dcr_4, out_Tmp_838, out_j, out_sdv_606, out_Tmp_850, out_Tmp_851, out_Tmp_853, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_sdv_614, out_Tmp_858 := in_dcr_4, in_Tmp_838, in_j, in_sdv_606, in_Tmp_850, in_Tmp_851, in_Tmp_853, in_sdv_611, in_Tmp_855, in_sdv_612, in_sdv_613, in_sdv_614, in_Tmp_858;
    goto L30, exit;

  exit:
    return;

  L30:
    assume {:CounterLoop 2} {:Counter "j"} true;
    goto anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j;
    out_dcr_4 := BOR(out_dcr_4, 2);
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 2403} out_sdv_611 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_611, 64) != 0;
    out_Tmp_853 := in_Controller_7;
    call {:si_unique_call 2402} out_sdv_613 := CheckPort(out_Tmp_853, 64, 0, 35);
    out_Tmp_855 := out_sdv_613;
    goto L48;

  L48:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_855 != 0;
    call {:si_unique_call 2400} out_sdv_612 := corral_nondet();
    out_Tmp_838 := out_j;
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    Mem_T.INT4[in_nibble + out_Tmp_838 * 4] := out_sdv_612;
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    out_dcr_4 := BAND(out_dcr_4, BNOT(2));
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 2401} out_sdv_606 := corral_nondet();
    out_Tmp_850 := BAND(out_sdv_606, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_850 == 64;
    out_Tmp_858 := 1;
    goto L68;

  L68:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_858 != 0;
    out_j := out_j + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 2404} {:si_old_unique_call 1} out_dcr_4, out_Tmp_838, out_j, out_sdv_606, out_Tmp_850, out_Tmp_851, out_Tmp_853, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_sdv_614, out_Tmp_858 := P4NibbleModeRead_loop_L30(out_dcr_4, out_Tmp_838, out_j, out_sdv_606, out_Tmp_850, out_Tmp_851, out_Tmp_853, in_nibble, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_sdv_614, out_Tmp_858, in_Controller_7, in_IeeeState_2);
    return;

  anon52_Then:
    assume {:partition} out_Tmp_850 != 64;
    out_Tmp_851 := in_Controller_7;
    call {:si_unique_call 2399} out_sdv_614 := CheckPort(out_Tmp_851, 64, 64, 35);
    out_Tmp_858 := out_sdv_614;
    goto L68;

  anon40_Then:
    assume {:partition} BAND(out_sdv_611, 64) == 0;
    out_Tmp_855 := 1;
    goto L48;
}



procedure {:LoopProcedure} P4NibbleModeRead_loop_L30(in_dcr_4: int, in_Tmp_838: int, in_j: int, in_sdv_606: int, in_Tmp_850: int, in_Tmp_851: int, in_Tmp_853: int, in_nibble: int, in_sdv_611: int, in_Tmp_855: int, in_sdv_612: int, in_sdv_613: int, in_sdv_614: int, in_Tmp_858: int, in_Controller_7: int, in_IeeeState_2: int) returns (out_dcr_4: int, out_Tmp_838: int, out_j: int, out_sdv_606: int, out_Tmp_850: int, out_Tmp_851: int, out_Tmp_853: int, out_sdv_611: int, out_Tmp_855: int, out_sdv_612: int, out_sdv_613: int, out_sdv_614: int, out_Tmp_858: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_851 == in_Tmp_851 || out_Tmp_851 == in_Controller_7;
  free ensures {:va_keep} out_Tmp_853 == in_Tmp_853 || out_Tmp_853 == in_Controller_7;
  free ensures {:va_keep} out_Tmp_855 == 1 || out_Tmp_855 == 0 || out_Tmp_855 == in_Tmp_855;
  free ensures {:va_keep} out_sdv_613 == 1 || out_sdv_613 == 0 || out_sdv_613 == in_sdv_613;
  free ensures {:va_keep} out_sdv_614 == 1 || out_sdv_614 == 0 || out_sdv_614 == in_sdv_614;
  free ensures {:va_keep} out_Tmp_858 == 1 || out_Tmp_858 == 0 || out_Tmp_858 == in_Tmp_858;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4NibbleModeRead_loop_L27(in_i_21: int, in_dcr_4: int, in_Tmp_838: int, in_Tmp_840: int, in_j: int, in_Tmp_843: int, in_sdv_606: int, in_Tmp_846: int, in_Tmp_847: int, in_Tmp_849: int, in_Tmp_850: int, in_Tmp_851: int, in_Tmp_853: int, in_Tmp_854: int, in_nibble: int, in_sdv_611: int, in_Tmp_855: int, in_sdv_612: int, in_sdv_613: int, in_Tmp_857: int, in_sdv_614: int, in_Tmp_858: int, in_dsr: int, in_p_8: int, in_Controller_7: int, in_BufferSize: int, in_IeeeState_2: int) returns (out_i_21: int, out_dcr_4: int, out_Tmp_838: int, out_Tmp_840: int, out_j: int, out_Tmp_843: int, out_sdv_606: int, out_Tmp_846: int, out_Tmp_847: int, out_Tmp_849: int, out_Tmp_850: int, out_Tmp_851: int, out_Tmp_853: int, out_Tmp_854: int, out_sdv_611: int, out_Tmp_855: int, out_sdv_612: int, out_sdv_613: int, out_Tmp_857: int, out_sdv_614: int, out_Tmp_858: int, out_dsr: int)
{

  entry:
    out_i_21, out_dcr_4, out_Tmp_838, out_Tmp_840, out_j, out_Tmp_843, out_sdv_606, out_Tmp_846, out_Tmp_847, out_Tmp_849, out_Tmp_850, out_Tmp_851, out_Tmp_853, out_Tmp_854, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_Tmp_857, out_sdv_614, out_Tmp_858, out_dsr := in_i_21, in_dcr_4, in_Tmp_838, in_Tmp_840, in_j, in_Tmp_843, in_sdv_606, in_Tmp_846, in_Tmp_847, in_Tmp_849, in_Tmp_850, in_Tmp_851, in_Tmp_853, in_Tmp_854, in_sdv_611, in_Tmp_855, in_sdv_612, in_sdv_613, in_Tmp_857, in_sdv_614, in_Tmp_858, in_dsr;
    goto L27, exit;

  exit:
    return;

  L27:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} in_BufferSize > out_i_21;
    out_j := 0;
    goto L30;

  L30:
    call {:si_unique_call 2408} out_dcr_4, out_Tmp_838, out_j, out_sdv_606, out_Tmp_850, out_Tmp_851, out_Tmp_853, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_sdv_614, out_Tmp_858 := P4NibbleModeRead_loop_L30(out_dcr_4, out_Tmp_838, out_j, out_sdv_606, out_Tmp_850, out_Tmp_851, out_Tmp_853, in_nibble, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_sdv_614, out_Tmp_858, in_Controller_7, in_IeeeState_2);
    goto L30_last;

  L30_last:
    assume {:CounterLoop 2} {:Counter "j"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j;
    out_dcr_4 := BOR(out_dcr_4, 2);
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 2413} out_sdv_611 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_611, 64) != 0;
    out_Tmp_853 := in_Controller_7;
    call {:si_unique_call 2412} out_sdv_613 := CheckPort(out_Tmp_853, 64, 0, 35);
    out_Tmp_855 := out_sdv_613;
    goto L48;

  L48:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_855 != 0;
    call {:si_unique_call 2410} out_sdv_612 := corral_nondet();
    out_Tmp_838 := out_j;
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    Mem_T.INT4[in_nibble + out_Tmp_838 * 4] := out_sdv_612;
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    out_dcr_4 := BAND(out_dcr_4, BNOT(2));
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 2411} out_sdv_606 := corral_nondet();
    out_Tmp_850 := BAND(out_sdv_606, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_850 == 64;
    out_Tmp_858 := 1;
    goto L68;

  L68:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_858 != 0;
    out_j := out_j + 1;
    assume false;
    return;

  anon52_Then:
    assume {:partition} out_Tmp_850 != 64;
    out_Tmp_851 := in_Controller_7;
    call {:si_unique_call 2409} out_sdv_614 := CheckPort(out_Tmp_851, 64, 64, 35);
    out_Tmp_858 := out_sdv_614;
    goto L68;

  anon40_Then:
    assume {:partition} BAND(out_sdv_611, 64) == 0;
    out_Tmp_855 := 1;
    goto L48;

  anon39_Then:
    assume {:partition} out_j >= 2;
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    call {:si_unique_call 2407} out_Tmp_840 := corral_nondet();
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble], 128) != 0;
    out_Tmp_854 := 0;
    goto L92;

  L92:
    out_Tmp_847 := out_i_21;
    assume {:nonnull} in_p_8 != 0;
    assume in_p_8 > 0;
    Mem_T.INT4[in_p_8 + out_Tmp_847 * 4] := BOR(out_Tmp_840, out_Tmp_854);
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    call {:si_unique_call 2406} out_Tmp_846 := corral_nondet();
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble + 1 * 4], 128) != 0;
    out_Tmp_857 := 0;
    goto L98;

  L98:
    out_Tmp_843 := out_i_21;
    out_Tmp_849 := out_i_21;
    assume {:nonnull} in_p_8 != 0;
    assume in_p_8 > 0;
    Mem_T.INT4[in_p_8 + out_Tmp_843 * 4] := BOR(Mem_T.INT4[in_p_8 + out_Tmp_849 * 4], BOR(out_Tmp_846, out_Tmp_857));
    call {:si_unique_call 2405} out_dsr := corral_nondet();
    goto anon44_Then;

  anon44_Then:
    assume {:partition} BAND(out_dsr, 8) == 0;
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    out_i_21 := out_i_21 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    call {:si_unique_call 2414} {:si_old_unique_call 1} out_i_21, out_dcr_4, out_Tmp_838, out_Tmp_840, out_j, out_Tmp_843, out_sdv_606, out_Tmp_846, out_Tmp_847, out_Tmp_849, out_Tmp_850, out_Tmp_851, out_Tmp_853, out_Tmp_854, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_Tmp_857, out_sdv_614, out_Tmp_858, out_dsr := P4NibbleModeRead_loop_L27(out_i_21, out_dcr_4, out_Tmp_838, out_Tmp_840, out_j, out_Tmp_843, out_sdv_606, out_Tmp_846, out_Tmp_847, out_Tmp_849, out_Tmp_850, out_Tmp_851, out_Tmp_853, out_Tmp_854, in_nibble, out_sdv_611, out_Tmp_855, out_sdv_612, out_sdv_613, out_Tmp_857, out_sdv_614, out_Tmp_858, out_dsr, in_p_8, in_Controller_7, in_BufferSize, in_IeeeState_2);
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble + 1 * 4], 128) == 0;
    out_Tmp_857 := 128;
    goto L98;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble], 128) == 0;
    out_Tmp_854 := 8;
    goto L92;
}



procedure {:LoopProcedure} P4NibbleModeRead_loop_L27(in_i_21: int, in_dcr_4: int, in_Tmp_838: int, in_Tmp_840: int, in_j: int, in_Tmp_843: int, in_sdv_606: int, in_Tmp_846: int, in_Tmp_847: int, in_Tmp_849: int, in_Tmp_850: int, in_Tmp_851: int, in_Tmp_853: int, in_Tmp_854: int, in_nibble: int, in_sdv_611: int, in_Tmp_855: int, in_sdv_612: int, in_sdv_613: int, in_Tmp_857: int, in_sdv_614: int, in_Tmp_858: int, in_dsr: int, in_p_8: int, in_Controller_7: int, in_BufferSize: int, in_IeeeState_2: int) returns (out_i_21: int, out_dcr_4: int, out_Tmp_838: int, out_Tmp_840: int, out_j: int, out_Tmp_843: int, out_sdv_606: int, out_Tmp_846: int, out_Tmp_847: int, out_Tmp_849: int, out_Tmp_850: int, out_Tmp_851: int, out_Tmp_853: int, out_Tmp_854: int, out_sdv_611: int, out_Tmp_855: int, out_sdv_612: int, out_sdv_613: int, out_Tmp_857: int, out_sdv_614: int, out_Tmp_858: int, out_dsr: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_Tmp_851 == in_Tmp_851 || out_Tmp_851 == in_Controller_7;
  free ensures {:va_keep} out_Tmp_853 == in_Tmp_853 || out_Tmp_853 == in_Controller_7;
  free ensures {:va_keep} out_Tmp_854 == 0 || out_Tmp_854 == 8 || out_Tmp_854 == in_Tmp_854;
  free ensures {:va_keep} out_Tmp_855 == 1 || out_Tmp_855 == 0 || out_Tmp_855 == in_Tmp_855;
  free ensures {:va_keep} out_sdv_613 == 1 || out_sdv_613 == 0 || out_sdv_613 == in_sdv_613;
  free ensures {:va_keep} out_Tmp_857 == 0 || out_Tmp_857 == 128 || out_Tmp_857 == in_Tmp_857;
  free ensures {:va_keep} out_sdv_614 == 1 || out_sdv_614 == 0 || out_sdv_614 == in_sdv_614;
  free ensures {:va_keep} out_Tmp_858 == 1 || out_Tmp_858 == 0 || out_Tmp_858 == in_Tmp_858;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptCheckIfStlProductId_loop_L39(in_i_23: int, in_Tmp_892: int) returns (out_i_23: int, out_Tmp_892: int)
{

  entry:
    out_i_23, out_Tmp_892 := in_i_23, in_Tmp_892;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:CounterLoop 4} {:Counter "i_23"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} 4 > out_i_23;
    out_Tmp_892 := out_i_23;
    out_i_23 := out_i_23 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    havoc out_i_23;
    return;
}



procedure {:LoopProcedure} PptCheckIfStlProductId_loop_L39(in_i_23: int, in_Tmp_892: int) returns (out_i_23: int, out_Tmp_892: int);
  free ensures {:va_keep} out_Tmp_892 == in_i_23 || out_Tmp_892 == in_Tmp_892;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptInitiate1284_3_loop_L35(in_loopCount: int, in_maxTries_1: int, in_deviceCount2: int, in_deviceCount1: int, in_Extension_48: int) returns (out_loopCount: int, out_deviceCount2: int, out_deviceCount1: int)
{

  entry:
    out_loopCount, out_deviceCount2, out_deviceCount1 := in_loopCount, in_deviceCount2, in_deviceCount1;
    goto L35, exit;

  exit:
    return;

  L35:
    call {:si_unique_call 2415} out_deviceCount1 := Ppt1284_3AssignAddress(in_Extension_48);
    call {:si_unique_call 2416} out_deviceCount2 := Ppt1284_3AssignAddress(in_Extension_48);
    goto anon5_Else;

  anon5_Else:
    assume {:partition} out_deviceCount1 != out_deviceCount2;
    out_loopCount := out_loopCount + 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} in_maxTries_1 > out_loopCount;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 2417} {:si_old_unique_call 1} out_loopCount, out_deviceCount2, out_deviceCount1 := PptInitiate1284_3_loop_L35(out_loopCount, in_maxTries_1, out_deviceCount2, out_deviceCount1, in_Extension_48);
    return;
}



procedure {:LoopProcedure} PptInitiate1284_3_loop_L35(in_loopCount: int, in_maxTries_1: int, in_deviceCount2: int, in_deviceCount1: int, in_Extension_48: int) returns (out_loopCount: int, out_deviceCount2: int, out_deviceCount1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptDeselectDevice_loop_L31(in_i_24: int, in_success_1: int, in_fdx_10: int) returns (out_i_24: int, out_success_1: int)
{
  var vslice_dummy_var_3298: int;

  entry:
    out_i_24, out_success_1 := in_i_24, in_success_1;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon28_Else;

  anon28_Else:
    assume {:partition} PptDot3Retries > out_i_24;
    goto anon30_Else;

  anon30_Else:
    assume {:partition} out_success_1 == 0;
    assume {:nonnull} in_fdx_10 != 0;
    assume in_fdx_10 > 0;
    havoc vslice_dummy_var_3298;
    call {:si_unique_call 2418} out_success_1 := PptSend1284_3Command(vslice_dummy_var_3298, 48);
    out_i_24 := out_i_24 + 1;
    goto anon30_Else_dummy;

  anon30_Else_dummy:
    call {:si_unique_call 2419} {:si_old_unique_call 1} out_i_24, out_success_1 := PptDeselectDevice_loop_L31(out_i_24, out_success_1, in_fdx_10);
    return;
}



procedure {:LoopProcedure} PptDeselectDevice_loop_L31(in_i_24: int, in_success_1: int, in_fdx_10: int) returns (out_i_24: int, out_success_1: int);
  modifies alloc;
  free ensures {:va_keep} out_success_1 == 1 || out_success_1 == 0 || out_success_1 == in_success_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptSend1284_3Command_loop_L114(in_Tmp_923: int, in_ii_1: int, in_sdv_670: int) returns (out_Tmp_923: int, out_ii_1: int, out_sdv_670: int)
{

  entry:
    out_Tmp_923, out_ii_1, out_sdv_670 := in_Tmp_923, in_ii_1, in_sdv_670;
    goto L114, exit;

  exit:
    return;

  L114:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon32_Then;

  anon32_Then:
    assume {:partition} 0 < out_ii_1;
    call {:si_unique_call 2420} out_sdv_670 := corral_nondet();
    out_Tmp_923 := BAND(out_sdv_670, 8);
    goto anon39_Then;

  anon39_Then:
    assume {:partition} out_Tmp_923 != 8;
    out_ii_1 := out_ii_1 - 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    havoc out_ii_1;
    return;
}



procedure {:LoopProcedure} PptSend1284_3Command_loop_L114(in_Tmp_923: int, in_ii_1: int, in_sdv_670: int) returns (out_Tmp_923: int, out_ii_1: int, out_sdv_670: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptSend1284_3Command_loop_L135(in_ii_1: int, in_sdv_665: int, in_Tmp_944: int) returns (out_ii_1: int, out_sdv_665: int, out_Tmp_944: int)
{

  entry:
    out_ii_1, out_sdv_665, out_Tmp_944 := in_ii_1, in_sdv_665, in_Tmp_944;
    goto L135, exit;

  exit:
    return;

  L135:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon33_Else;

  anon33_Else:
    assume {:partition} out_ii_1 > 0;
    call {:si_unique_call 2421} out_sdv_665 := corral_nondet();
    out_Tmp_944 := BAND(out_sdv_665, 8);
    goto anon38_Then;

  anon38_Then:
    assume {:partition} out_Tmp_944 == 8;
    out_ii_1 := out_ii_1 - 1;
    goto anon38_Then_dummy;

  anon38_Then_dummy:
    havoc out_ii_1;
    return;
}



procedure {:LoopProcedure} PptSend1284_3Command_loop_L135(in_ii_1: int, in_sdv_665: int, in_Tmp_944: int) returns (out_ii_1: int, out_sdv_665: int, out_Tmp_944: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptSend1284_3Command_loop_L35(in_i_25: int, in_Tmp_929: int) returns (out_i_25: int, out_Tmp_929: int)
{

  entry:
    out_i_25, out_Tmp_929 := in_i_25, in_Tmp_929;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_25"} true;
    goto anon27_Else;

  anon27_Else:
    assume {:partition} 4 > out_i_25;
    out_Tmp_929 := out_i_25;
    out_i_25 := out_i_25 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    havoc out_i_25;
    return;
}



procedure {:LoopProcedure} PptSend1284_3Command_loop_L35(in_i_25: int, in_Tmp_929: int) returns (out_i_25: int, out_Tmp_929: int);
  free ensures {:va_keep} out_Tmp_929 == in_i_25 || out_Tmp_929 == in_Tmp_929;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation Ppt1284_3AssignAddress_loop_L127(in_number: int, in_bStlNon1284_1: int, in_bStlNon1284_2: int, in_Tmp_952: int, in_Tmp_956: int, in_sdv_675: int, in_idx_5: int, in_sdv_680: int, in_DeviceExtension_1: int) returns (out_bStlNon1284_1: int, out_Tmp_952: int, out_Tmp_956: int, out_sdv_675: int, out_idx_5: int, out_sdv_680: int)
{

  entry:
    out_bStlNon1284_1, out_Tmp_952, out_Tmp_956, out_sdv_675, out_idx_5, out_sdv_680 := in_bStlNon1284_1, in_Tmp_952, in_Tmp_956, in_sdv_675, in_idx_5, in_sdv_680;
    goto L127, exit;

  exit:
    return;

  L127:
    goto anon32_Else;

  anon32_Else:
    assume {:partition} in_number > out_idx_5;
    out_Tmp_956 := out_idx_5;
    call {:si_unique_call 2423} out_sdv_680 := PptCheckIfStl1284_3(in_DeviceExtension_1, out_Tmp_956, in_bStlNon1284_2);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 1 == out_sdv_680;
    goto L136;

  L136:
    out_idx_5 := out_idx_5 + 1;
    goto L136_dummy;

  L136_dummy:
    call {:si_unique_call 2424} {:si_old_unique_call 1} out_bStlNon1284_1, out_Tmp_952, out_Tmp_956, out_sdv_675, out_idx_5, out_sdv_680 := Ppt1284_3AssignAddress_loop_L127(in_number, out_bStlNon1284_1, in_bStlNon1284_2, out_Tmp_952, out_Tmp_956, out_sdv_675, out_idx_5, out_sdv_680, in_DeviceExtension_1);
    return;

  anon34_Then:
    assume {:partition} 1 != out_sdv_680;
    goto anon35_Else;

  anon35_Else:
    assume {:partition} 1 == in_bStlNon1284_2;
    out_Tmp_952 := out_idx_5;
    call {:si_unique_call 2422} out_sdv_675 := PptCheckIfStlProductId(in_DeviceExtension_1, out_Tmp_952);
    goto anon36_Else;

  anon36_Else:
    assume {:partition} 1 == out_sdv_675;
    out_bStlNon1284_1 := 1;
    goto L136;
}



procedure {:LoopProcedure} Ppt1284_3AssignAddress_loop_L127(in_number: int, in_bStlNon1284_1: int, in_bStlNon1284_2: int, in_Tmp_952: int, in_Tmp_956: int, in_sdv_675: int, in_idx_5: int, in_sdv_680: int, in_DeviceExtension_1: int) returns (out_bStlNon1284_1: int, out_Tmp_952: int, out_Tmp_956: int, out_sdv_675: int, out_idx_5: int, out_sdv_680: int);
  free ensures {:va_keep} out_bStlNon1284_1 == 1 || out_bStlNon1284_1 == in_bStlNon1284_1;
  free ensures {:va_keep} out_sdv_675 == 0 || out_sdv_675 == 1 || out_sdv_675 == in_sdv_675;
  free ensures {:va_keep} out_sdv_680 == 0 || out_sdv_680 == 1 || out_sdv_680 == in_sdv_680;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation Ppt1284_3AssignAddress_loop_L82(in_number: int, in_sdv_678: int, in_lastdevice: int, in_newvalue_5: int) returns (out_number: int, out_sdv_678: int, out_lastdevice: int)
{

  entry:
    out_number, out_sdv_678, out_lastdevice := in_number, in_sdv_678, in_lastdevice;
    goto L82, exit;

  exit:
    return;

  L82:
    goto anon28_Else;

  anon28_Else:
    assume {:partition} 4 > out_number;
    goto anon29_Else;

  anon29_Else:
    assume {:partition} out_lastdevice == 0;
    out_number := out_number + 1;
    call {:si_unique_call 2425} out_sdv_678 := corral_nondet();
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(out_sdv_678, 128) != 0;
    goto L97;

  L97:
    goto L97_dummy;

  L97_dummy:
    havoc out_number;
    return;

  anon30_Then:
    assume {:partition} BAND(out_sdv_678, 128) == 0;
    out_lastdevice := 1;
    goto L97;
}



procedure {:LoopProcedure} Ppt1284_3AssignAddress_loop_L82(in_number: int, in_sdv_678: int, in_lastdevice: int, in_newvalue_5: int) returns (out_number: int, out_sdv_678: int, out_lastdevice: int);
  free ensures {:va_keep} out_lastdevice == 1 || out_lastdevice == in_lastdevice;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation Ppt1284_3AssignAddress_loop_L35(in_i_26: int, in_Tmp_955: int) returns (out_i_26: int, out_Tmp_955: int)
{

  entry:
    out_i_26, out_Tmp_955 := in_i_26, in_Tmp_955;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_26"} true;
    goto anon27_Else;

  anon27_Else:
    assume {:partition} 4 > out_i_26;
    out_Tmp_955 := out_i_26;
    out_i_26 := out_i_26 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    havoc out_i_26;
    return;
}



procedure {:LoopProcedure} Ppt1284_3AssignAddress_loop_L35(in_i_26: int, in_Tmp_955: int) returns (out_i_26: int, out_Tmp_955: int);
  free ensures {:va_keep} out_Tmp_955 == in_i_26 || out_Tmp_955 == in_Tmp_955;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptCheckIfNon1284_3Present_loop_L33(in_i_27: int, in_Tmp_971: int) returns (out_i_27: int, out_Tmp_971: int)
{

  entry:
    out_i_27, out_Tmp_971 := in_i_27, in_Tmp_971;
    goto L33, exit;

  exit:
    return;

  L33:
    assume {:CounterLoop 4} {:Counter "i_27"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 4 > out_i_27;
    out_Tmp_971 := out_i_27;
    out_i_27 := out_i_27 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    havoc out_i_27;
    return;
}



procedure {:LoopProcedure} PptCheckIfNon1284_3Present_loop_L33(in_i_27: int, in_Tmp_971: int) returns (out_i_27: int, out_Tmp_971: int);
  free ensures {:va_keep} out_Tmp_971 == in_i_27 || out_Tmp_971 == in_Tmp_971;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptCheckIfStl1284_3_loop_L111(in_ucReadPattern_1: int, in_ucReadValue_1: int, in_ucExpectedPattern_1: int, in_ulDaisyIndex_4: int) returns (out_ucReadPattern_1: int, out_ucReadValue_1: int, out_ucExpectedPattern_1: int)
{

  entry:
    out_ucReadPattern_1, out_ucReadValue_1, out_ucExpectedPattern_1 := in_ucReadPattern_1, in_ucReadValue_1, in_ucExpectedPattern_1;
    goto L111, exit;

  exit:
    return;

  L111:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_ucExpectedPattern_1 != 0;
    call {:si_unique_call 2426} out_ucReadValue_1 := corral_nondet();
    call {:si_unique_call 2427} out_ucReadPattern_1 := corral_nondet();
    out_ucReadPattern_1 := BOR(out_ucReadPattern_1, BAND(out_ucReadValue_1, 128));
    goto anon24_Then;

  anon24_Then:
    assume {:partition} out_ucReadPattern_1 == out_ucExpectedPattern_1;
    out_ucExpectedPattern_1 := out_ucExpectedPattern_1 - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    call {:si_unique_call 2428} {:si_old_unique_call 1} out_ucReadPattern_1, out_ucReadValue_1, out_ucExpectedPattern_1 := PptCheckIfStl1284_3_loop_L111(out_ucReadPattern_1, out_ucReadValue_1, out_ucExpectedPattern_1, in_ulDaisyIndex_4);
    return;
}



procedure {:LoopProcedure} PptCheckIfStl1284_3_loop_L111(in_ucReadPattern_1: int, in_ucReadValue_1: int, in_ucExpectedPattern_1: int, in_ulDaisyIndex_4: int) returns (out_ucReadPattern_1: int, out_ucReadValue_1: int, out_ucExpectedPattern_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptCheckIfStl1284_3_loop_L35(in_i_28: int, in_Tmp_988: int) returns (out_i_28: int, out_Tmp_988: int)
{

  entry:
    out_i_28, out_Tmp_988 := in_i_28, in_Tmp_988;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_28"} true;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 4 > out_i_28;
    out_Tmp_988 := out_i_28;
    out_i_28 := out_i_28 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    havoc out_i_28;
    return;
}



procedure {:LoopProcedure} PptCheckIfStl1284_3_loop_L35(in_i_28: int, in_Tmp_988: int) returns (out_i_28: int, out_Tmp_988: int);
  free ensures {:va_keep} out_Tmp_988 == in_i_28 || out_Tmp_988 == in_Tmp_988;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptLegacyZipSetDiskMode_loop_L5(in_i_29: int, in_Tmp_1046: int, in_Tmp_1047: int, in_Controller_8: int) returns (out_i_29: int, out_Tmp_1046: int, out_Tmp_1047: int)
{

  entry:
    out_i_29, out_Tmp_1046, out_Tmp_1047 := in_i_29, in_Tmp_1046, in_Tmp_1047;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:CounterLoop 3} {:Counter "i_29"} true;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} 3 > out_i_29;
    out_Tmp_1047 := out_i_29;
    havoc out_Tmp_1046;
    call {:si_unique_call 2429} PptLegacyZipClockDiskModeByte(in_Controller_8, out_Tmp_1046);
    out_i_29 := out_i_29 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_i_29;
    return;
}



procedure {:LoopProcedure} PptLegacyZipSetDiskMode_loop_L5(in_i_29: int, in_Tmp_1046: int, in_Tmp_1047: int, in_Controller_8: int) returns (out_i_29: int, out_Tmp_1046: int, out_Tmp_1047: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1047 == in_i_29 || out_Tmp_1047 == in_Tmp_1047;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P5DeselectLegacyZip_loop_L5(in_i_31: int, in_Tmp_1053: int, in_Tmp_1055: int, in_Controller_10: int) returns (out_i_31: int, out_Tmp_1053: int, out_Tmp_1055: int)
{

  entry:
    out_i_31, out_Tmp_1053, out_Tmp_1055 := in_i_31, in_Tmp_1053, in_Tmp_1055;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:CounterLoop 3} {:Counter "i_31"} true;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} 3 > out_i_31;
    out_Tmp_1055 := out_i_31;
    havoc out_Tmp_1053;
    call {:si_unique_call 2430} PptLegacyZipClockPrtModeByte(in_Controller_10, out_Tmp_1053);
    out_i_31 := out_i_31 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_i_31;
    return;
}



procedure {:LoopProcedure} P5DeselectLegacyZip_loop_L5(in_i_31: int, in_Tmp_1053: int, in_Tmp_1055: int, in_Controller_10: int) returns (out_i_31: int, out_Tmp_1053: int, out_Tmp_1055: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1055 == in_i_31 || out_Tmp_1055 == in_Tmp_1055;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParNibbleModeRead_loop_L32(in_Tmp_1087: int, in_dcr_5: int, in_Tmp_1095: int, in_j_1: int, in_sdv_718: int, in_Tmp_1099: int, in_Controller_17: int, in_nibble_1: int, in_sdv_723: int, in_sdv_724: int, in_sdv_725: int, in_Tmp_1108: int, in_sdv_726: int, in_Tmp_1112: int, in_Tmp_1113: int, in_Pdx_6: int) returns (out_Tmp_1087: int, out_dcr_5: int, out_Tmp_1095: int, out_j_1: int, out_sdv_718: int, out_Tmp_1099: int, out_sdv_723: int, out_sdv_724: int, out_sdv_725: int, out_Tmp_1108: int, out_sdv_726: int, out_Tmp_1112: int, out_Tmp_1113: int)
{

  entry:
    out_Tmp_1087, out_dcr_5, out_Tmp_1095, out_j_1, out_sdv_718, out_Tmp_1099, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_Tmp_1112, out_Tmp_1113 := in_Tmp_1087, in_dcr_5, in_Tmp_1095, in_j_1, in_sdv_718, in_Tmp_1099, in_sdv_723, in_sdv_724, in_sdv_725, in_Tmp_1108, in_sdv_726, in_Tmp_1112, in_Tmp_1113;
    goto L32, exit;

  exit:
    return;

  L32:
    assume {:CounterLoop 2} {:Counter "j_1"} true;
    goto anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j_1;
    out_dcr_5 := BOR(out_dcr_5, 2);
    assume {:nonnull} in_Pdx_6 != 0;
    assume in_Pdx_6 > 0;
    call {:si_unique_call 2435} out_sdv_723 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_723, 64) != 0;
    out_Tmp_1108 := in_Controller_17;
    call {:si_unique_call 2434} out_sdv_724 := CheckPort(out_Tmp_1108, 64, 0, 35);
    out_Tmp_1095 := out_sdv_724;
    goto L50;

  L50:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_1095 != 0;
    call {:si_unique_call 2432} out_sdv_725 := corral_nondet();
    out_Tmp_1087 := out_j_1;
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    Mem_T.INT4[in_nibble_1 + out_Tmp_1087 * 4] := out_sdv_725;
    assume {:nonnull} in_Pdx_6 != 0;
    assume in_Pdx_6 > 0;
    out_dcr_5 := BAND(out_dcr_5, BNOT(2));
    assume {:nonnull} in_Pdx_6 != 0;
    assume in_Pdx_6 > 0;
    call {:si_unique_call 2433} out_sdv_718 := corral_nondet();
    out_Tmp_1113 := BAND(out_sdv_718, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_1113 == 64;
    out_Tmp_1112 := 1;
    goto L70;

  L70:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_1112 != 0;
    out_j_1 := out_j_1 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 2436} {:si_old_unique_call 1} out_Tmp_1087, out_dcr_5, out_Tmp_1095, out_j_1, out_sdv_718, out_Tmp_1099, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_Tmp_1112, out_Tmp_1113 := ParNibbleModeRead_loop_L32(out_Tmp_1087, out_dcr_5, out_Tmp_1095, out_j_1, out_sdv_718, out_Tmp_1099, in_Controller_17, in_nibble_1, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_Tmp_1112, out_Tmp_1113, in_Pdx_6);
    return;

  anon52_Then:
    assume {:partition} out_Tmp_1113 != 64;
    out_Tmp_1099 := in_Controller_17;
    call {:si_unique_call 2431} out_sdv_726 := CheckPort(out_Tmp_1099, 64, 64, 35);
    out_Tmp_1112 := out_sdv_726;
    goto L70;

  anon40_Then:
    assume {:partition} BAND(out_sdv_723, 64) == 0;
    out_Tmp_1095 := 1;
    goto L50;
}



procedure {:LoopProcedure} ParNibbleModeRead_loop_L32(in_Tmp_1087: int, in_dcr_5: int, in_Tmp_1095: int, in_j_1: int, in_sdv_718: int, in_Tmp_1099: int, in_Controller_17: int, in_nibble_1: int, in_sdv_723: int, in_sdv_724: int, in_sdv_725: int, in_Tmp_1108: int, in_sdv_726: int, in_Tmp_1112: int, in_Tmp_1113: int, in_Pdx_6: int) returns (out_Tmp_1087: int, out_dcr_5: int, out_Tmp_1095: int, out_j_1: int, out_sdv_718: int, out_Tmp_1099: int, out_sdv_723: int, out_sdv_724: int, out_sdv_725: int, out_Tmp_1108: int, out_sdv_726: int, out_Tmp_1112: int, out_Tmp_1113: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1095 == 1 || out_Tmp_1095 == 0 || out_Tmp_1095 == in_Tmp_1095;
  free ensures {:va_keep} out_Tmp_1099 == in_Tmp_1099 || out_Tmp_1099 == in_Controller_17;
  free ensures {:va_keep} out_sdv_724 == 1 || out_sdv_724 == 0 || out_sdv_724 == in_sdv_724;
  free ensures {:va_keep} out_Tmp_1108 == in_Tmp_1108 || out_Tmp_1108 == in_Controller_17;
  free ensures {:va_keep} out_sdv_726 == 1 || out_sdv_726 == 0 || out_sdv_726 == in_sdv_726;
  free ensures {:va_keep} out_Tmp_1112 == 1 || out_Tmp_1112 == 0 || out_Tmp_1112 == in_Tmp_1112;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParNibbleModeRead_loop_L29(in_i_32: int, in_Tmp_1087: int, in_Tmp_1088: int, in_Tmp_1089: int, in_Tmp_1090: int, in_Tmp_1091: int, in_Tmp_1092: int, in_Tmp_1093: int, in_dcr_5: int, in_Tmp_1095: int, in_Tmp_1096: int, in_j_1: int, in_sdv_718: int, in_Tmp_1099: int, in_Controller_17: int, in_nibble_1: int, in_sdv_723: int, in_sdv_724: int, in_sdv_725: int, in_Tmp_1108: int, in_sdv_726: int, in_dsr_1: int, in_Tmp_1112: int, in_p_9: int, in_Tmp_1113: int, in_Pdx_6: int, in_BufferSize_1: int) returns (out_i_32: int, out_Tmp_1087: int, out_Tmp_1088: int, out_Tmp_1089: int, out_Tmp_1090: int, out_Tmp_1091: int, out_Tmp_1092: int, out_Tmp_1093: int, out_dcr_5: int, out_Tmp_1095: int, out_Tmp_1096: int, out_j_1: int, out_sdv_718: int, out_Tmp_1099: int, out_sdv_723: int, out_sdv_724: int, out_sdv_725: int, out_Tmp_1108: int, out_sdv_726: int, out_dsr_1: int, out_Tmp_1112: int, out_Tmp_1113: int)
{

  entry:
    out_i_32, out_Tmp_1087, out_Tmp_1088, out_Tmp_1089, out_Tmp_1090, out_Tmp_1091, out_Tmp_1092, out_Tmp_1093, out_dcr_5, out_Tmp_1095, out_Tmp_1096, out_j_1, out_sdv_718, out_Tmp_1099, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_dsr_1, out_Tmp_1112, out_Tmp_1113 := in_i_32, in_Tmp_1087, in_Tmp_1088, in_Tmp_1089, in_Tmp_1090, in_Tmp_1091, in_Tmp_1092, in_Tmp_1093, in_dcr_5, in_Tmp_1095, in_Tmp_1096, in_j_1, in_sdv_718, in_Tmp_1099, in_sdv_723, in_sdv_724, in_sdv_725, in_Tmp_1108, in_sdv_726, in_dsr_1, in_Tmp_1112, in_Tmp_1113;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} in_BufferSize_1 > out_i_32;
    out_j_1 := 0;
    goto L32;

  L32:
    call {:si_unique_call 2440} out_Tmp_1087, out_dcr_5, out_Tmp_1095, out_j_1, out_sdv_718, out_Tmp_1099, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_Tmp_1112, out_Tmp_1113 := ParNibbleModeRead_loop_L32(out_Tmp_1087, out_dcr_5, out_Tmp_1095, out_j_1, out_sdv_718, out_Tmp_1099, in_Controller_17, in_nibble_1, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_Tmp_1112, out_Tmp_1113, in_Pdx_6);
    goto L32_last;

  L32_last:
    assume {:CounterLoop 2} {:Counter "j_1"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j_1;
    out_dcr_5 := BOR(out_dcr_5, 2);
    assume {:nonnull} in_Pdx_6 != 0;
    assume in_Pdx_6 > 0;
    call {:si_unique_call 2445} out_sdv_723 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_723, 64) != 0;
    out_Tmp_1108 := in_Controller_17;
    call {:si_unique_call 2444} out_sdv_724 := CheckPort(out_Tmp_1108, 64, 0, 35);
    out_Tmp_1095 := out_sdv_724;
    goto L50;

  L50:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_1095 != 0;
    call {:si_unique_call 2442} out_sdv_725 := corral_nondet();
    out_Tmp_1087 := out_j_1;
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    Mem_T.INT4[in_nibble_1 + out_Tmp_1087 * 4] := out_sdv_725;
    assume {:nonnull} in_Pdx_6 != 0;
    assume in_Pdx_6 > 0;
    out_dcr_5 := BAND(out_dcr_5, BNOT(2));
    assume {:nonnull} in_Pdx_6 != 0;
    assume in_Pdx_6 > 0;
    call {:si_unique_call 2443} out_sdv_718 := corral_nondet();
    out_Tmp_1113 := BAND(out_sdv_718, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_1113 == 64;
    out_Tmp_1112 := 1;
    goto L70;

  L70:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_1112 != 0;
    out_j_1 := out_j_1 + 1;
    assume false;
    return;

  anon52_Then:
    assume {:partition} out_Tmp_1113 != 64;
    out_Tmp_1099 := in_Controller_17;
    call {:si_unique_call 2441} out_sdv_726 := CheckPort(out_Tmp_1099, 64, 64, 35);
    out_Tmp_1112 := out_sdv_726;
    goto L70;

  anon40_Then:
    assume {:partition} BAND(out_sdv_723, 64) == 0;
    out_Tmp_1095 := 1;
    goto L50;

  anon39_Then:
    assume {:partition} out_j_1 >= 2;
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    call {:si_unique_call 2439} out_Tmp_1090 := corral_nondet();
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1], 128) != 0;
    out_Tmp_1091 := 0;
    goto L95;

  L95:
    out_Tmp_1088 := out_i_32;
    assume {:nonnull} in_p_9 != 0;
    assume in_p_9 > 0;
    Mem_T.INT4[in_p_9 + out_Tmp_1088 * 4] := BOR(out_Tmp_1090, out_Tmp_1091);
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    call {:si_unique_call 2438} out_Tmp_1089 := corral_nondet();
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1 + 1 * 4], 128) != 0;
    out_Tmp_1096 := 0;
    goto L101;

  L101:
    out_Tmp_1093 := out_i_32;
    out_Tmp_1092 := out_i_32;
    assume {:nonnull} in_p_9 != 0;
    assume in_p_9 > 0;
    Mem_T.INT4[in_p_9 + out_Tmp_1093 * 4] := BOR(Mem_T.INT4[in_p_9 + out_Tmp_1092 * 4], BOR(out_Tmp_1089, out_Tmp_1096));
    call {:si_unique_call 2437} out_dsr_1 := corral_nondet();
    goto anon44_Then;

  anon44_Then:
    assume {:partition} BAND(out_dsr_1, 8) == 0;
    assume {:nonnull} in_Pdx_6 != 0;
    assume in_Pdx_6 > 0;
    out_i_32 := out_i_32 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    call {:si_unique_call 2446} {:si_old_unique_call 1} out_i_32, out_Tmp_1087, out_Tmp_1088, out_Tmp_1089, out_Tmp_1090, out_Tmp_1091, out_Tmp_1092, out_Tmp_1093, out_dcr_5, out_Tmp_1095, out_Tmp_1096, out_j_1, out_sdv_718, out_Tmp_1099, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_dsr_1, out_Tmp_1112, out_Tmp_1113 := ParNibbleModeRead_loop_L29(out_i_32, out_Tmp_1087, out_Tmp_1088, out_Tmp_1089, out_Tmp_1090, out_Tmp_1091, out_Tmp_1092, out_Tmp_1093, out_dcr_5, out_Tmp_1095, out_Tmp_1096, out_j_1, out_sdv_718, out_Tmp_1099, in_Controller_17, in_nibble_1, out_sdv_723, out_sdv_724, out_sdv_725, out_Tmp_1108, out_sdv_726, out_dsr_1, out_Tmp_1112, in_p_9, out_Tmp_1113, in_Pdx_6, in_BufferSize_1);
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1 + 1 * 4], 128) == 0;
    out_Tmp_1096 := 128;
    goto L101;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1], 128) == 0;
    out_Tmp_1091 := 8;
    goto L95;
}



procedure {:LoopProcedure} ParNibbleModeRead_loop_L29(in_i_32: int, in_Tmp_1087: int, in_Tmp_1088: int, in_Tmp_1089: int, in_Tmp_1090: int, in_Tmp_1091: int, in_Tmp_1092: int, in_Tmp_1093: int, in_dcr_5: int, in_Tmp_1095: int, in_Tmp_1096: int, in_j_1: int, in_sdv_718: int, in_Tmp_1099: int, in_Controller_17: int, in_nibble_1: int, in_sdv_723: int, in_sdv_724: int, in_sdv_725: int, in_Tmp_1108: int, in_sdv_726: int, in_dsr_1: int, in_Tmp_1112: int, in_p_9: int, in_Tmp_1113: int, in_Pdx_6: int, in_BufferSize_1: int) returns (out_i_32: int, out_Tmp_1087: int, out_Tmp_1088: int, out_Tmp_1089: int, out_Tmp_1090: int, out_Tmp_1091: int, out_Tmp_1092: int, out_Tmp_1093: int, out_dcr_5: int, out_Tmp_1095: int, out_Tmp_1096: int, out_j_1: int, out_sdv_718: int, out_Tmp_1099: int, out_sdv_723: int, out_sdv_724: int, out_sdv_725: int, out_Tmp_1108: int, out_sdv_726: int, out_dsr_1: int, out_Tmp_1112: int, out_Tmp_1113: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_Tmp_1091 == 0 || out_Tmp_1091 == 8 || out_Tmp_1091 == in_Tmp_1091;
  free ensures {:va_keep} out_Tmp_1095 == 1 || out_Tmp_1095 == 0 || out_Tmp_1095 == in_Tmp_1095;
  free ensures {:va_keep} out_Tmp_1096 == 0 || out_Tmp_1096 == 128 || out_Tmp_1096 == in_Tmp_1096;
  free ensures {:va_keep} out_Tmp_1099 == in_Tmp_1099 || out_Tmp_1099 == in_Controller_17;
  free ensures {:va_keep} out_sdv_724 == 1 || out_sdv_724 == 0 || out_sdv_724 == in_sdv_724;
  free ensures {:va_keep} out_Tmp_1108 == in_Tmp_1108 || out_Tmp_1108 == in_Controller_17;
  free ensures {:va_keep} out_sdv_726 == 1 || out_sdv_726 == 0 || out_sdv_726 == in_sdv_726;
  free ensures {:va_keep} out_Tmp_1112 == 1 || out_Tmp_1112 == 0 || out_Tmp_1112 == in_Tmp_1112;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 5} ParInitializeExtension1284Info_loop_L42(in_i_33: int, in_Tmp_1125: int, in_Tmp_1128: int, in_Pdx_9: int) returns (out_i_33: int, out_Tmp_1125: int, out_Tmp_1128: int)
{

  entry:
    out_i_33, out_Tmp_1125, out_Tmp_1128 := in_i_33, in_Tmp_1125, in_Tmp_1128;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:CounterLoop 5} {:Counter "i_33"} true;
    goto anon40_Else;

  anon40_Else:
    assume {:partition} 5 > out_i_33;
    out_Tmp_1125 := out_i_33;
    assume {:nonnull} in_Pdx_9 != 0;
    assume in_Pdx_9 > 0;
    havoc out_Tmp_1128;
    assume {:nonnull} out_Tmp_1128 != 0;
    assume out_Tmp_1128 > 0;
    Mem_T.INT4[out_Tmp_1128 + out_Tmp_1125 * 4] := 0;
    out_i_33 := out_i_33 + 1;
    goto anon40_Else_dummy;

  anon40_Else_dummy:
    call {:si_unique_call 2447} {:si_old_unique_call 1} out_i_33, out_Tmp_1125, out_Tmp_1128 := ParInitializeExtension1284Info_loop_L42(out_i_33, out_Tmp_1125, out_Tmp_1128, in_Pdx_9);
    return;
}



procedure {:LoopProcedure} ParInitializeExtension1284Info_loop_L42(in_i_33: int, in_Tmp_1125: int, in_Tmp_1128: int, in_Pdx_9: int) returns (out_i_33: int, out_Tmp_1125: int, out_Tmp_1128: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation StringCountValues_loop_L9(in_cnt: int, in_lpKey: int, in_delimeter: int) returns (out_cnt: int)
{

  entry:
    out_cnt := in_cnt;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:nonnull} in_lpKey != 0;
    assume in_lpKey > 0;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.INT4[in_lpKey] != 0;
    assume {:nonnull} in_lpKey != 0;
    assume in_lpKey > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[in_lpKey] == in_delimeter;
    out_cnt := out_cnt + 1;
    goto L12;

  L12:
    goto L12_dummy;

  L12_dummy:
    havoc out_cnt;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[in_lpKey] != in_delimeter;
    goto L12;
}



procedure {:LoopProcedure} StringCountValues_loop_L9(in_cnt: int, in_lpKey: int, in_delimeter: int) returns (out_cnt: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation GetCheckSum_loop_L12(in_i_34: int, in_crc: int, in_Tmp_1139: int, in_tmp: int, in_Len: int, in_vslice_dummy_var_328: int) returns (out_i_34: int, out_crc: int, out_Tmp_1139: int, out_tmp: int, out_vslice_dummy_var_328: int)
{

  entry:
    out_i_34, out_crc, out_Tmp_1139, out_tmp, out_vslice_dummy_var_328 := in_i_34, in_crc, in_Tmp_1139, in_tmp, in_vslice_dummy_var_328;
    goto L12, exit;

  exit:
    return;

  L12:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_Len > out_i_34;
    call {:si_unique_call 2448} out_tmp := corral_nondet();
    out_Tmp_1139 := BAND(out_tmp, BOR(BOR(BOR(1, 2), 4), 8));
    call {:si_unique_call 2449} out_vslice_dummy_var_328 := corral_nondet();
    call {:si_unique_call 2450} out_crc := corral_nondet();
    out_i_34 := out_i_34 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_i_34;
    return;
}



procedure {:LoopProcedure} GetCheckSum_loop_L12(in_i_34: int, in_crc: int, in_Tmp_1139: int, in_tmp: int, in_Len: int, in_vslice_dummy_var_328: int) returns (out_i_34: int, out_crc: int, out_Tmp_1139: int, out_tmp: int, out_vslice_dummy_var_328: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParPnpFindDeviceIdKeys_loop_L22(in_lpKey_1: int)
{

  entry:
    goto L22, exit;

  exit:
    return;

  L22:
    assume {:nonnull} in_lpKey_1 != 0;
    assume in_lpKey_1 > 0;
    goto anon94_Else;

  anon94_Else:
    assume {:partition} Mem_T.INT4[in_lpKey_1] == 32;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    call {:si_unique_call 2451} {:si_old_unique_call 1} ParPnpFindDeviceIdKeys_loop_L22(in_lpKey_1);
    return;
}



procedure {:LoopProcedure} ParPnpFindDeviceIdKeys_loop_L22(in_lpKey_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParPnpFindDeviceIdKeys_loop_L21(in_Tmp_1141: int, in_Tmp_1142: int, in_sdv_736: int, in_sdv_737: int, in_Tmp_1143: int, in_sdv_739: int, in_sdv_740: int, in_Tmp_1145: int, in_Tmp_1146: int, in_Tmp_1147: int, in_lpKey_1: int, in_Tmp_1148: int, in_sdv_743: int, in_Tmp_1150: int, in_Tmp_1151: int, in_sdv_746: int, in_Tmp_1153: int, in_sdv_749: int, in_sdv_750: int, in_Tmp_1154: int, in_sdv_751: int, in_Tmp_1156: int, in_sdv_753: int, in_lpValue: int, in_sdv_756: int, in_sdv_758: int, in_wKeyLength: int, in_lppMFG: int, in_lppMDL: int, in_lppCLS: int, in_lppDES: int, in_lppAID: int, in_lppCID: int) returns (out_Tmp_1141: int, out_Tmp_1142: int, out_sdv_736: int, out_sdv_737: int, out_Tmp_1143: int, out_sdv_739: int, out_sdv_740: int, out_Tmp_1145: int, out_Tmp_1146: int, out_Tmp_1147: int, out_lpKey_1: int, out_Tmp_1148: int, out_sdv_743: int, out_Tmp_1150: int, out_Tmp_1151: int, out_sdv_746: int, out_Tmp_1153: int, out_sdv_749: int, out_sdv_750: int, out_Tmp_1154: int, out_sdv_751: int, out_Tmp_1156: int, out_sdv_753: int, out_lpValue: int, out_sdv_756: int, out_sdv_758: int, out_wKeyLength: int)
{

  entry:
    out_Tmp_1141, out_Tmp_1142, out_sdv_736, out_sdv_737, out_Tmp_1143, out_sdv_739, out_sdv_740, out_Tmp_1145, out_Tmp_1146, out_Tmp_1147, out_lpKey_1, out_Tmp_1148, out_sdv_743, out_Tmp_1150, out_Tmp_1151, out_sdv_746, out_Tmp_1153, out_sdv_749, out_sdv_750, out_Tmp_1154, out_sdv_751, out_Tmp_1156, out_sdv_753, out_lpValue, out_sdv_756, out_sdv_758, out_wKeyLength := in_Tmp_1141, in_Tmp_1142, in_sdv_736, in_sdv_737, in_Tmp_1143, in_sdv_739, in_sdv_740, in_Tmp_1145, in_Tmp_1146, in_Tmp_1147, in_lpKey_1, in_Tmp_1148, in_sdv_743, in_Tmp_1150, in_Tmp_1151, in_sdv_746, in_Tmp_1153, in_sdv_749, in_sdv_750, in_Tmp_1154, in_sdv_751, in_Tmp_1156, in_sdv_753, in_lpValue, in_sdv_756, in_sdv_758, in_wKeyLength;
    goto L21, exit;

  exit:
    return;

  L21:
    goto anon93_Else;

  anon93_Else:
    assume {:partition} out_lpKey_1 != 0;
    goto L22;

  L22:
    call {:si_unique_call 2456} ParPnpFindDeviceIdKeys_loop_L22(out_lpKey_1);
    goto L22_last;

  L22_last:
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 32;
    assume false;
    return;

  anon94_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 32;
    call {:si_unique_call 2455} out_lpValue := StringChr(out_lpKey_1, 58);
    goto anon95_Else;

  anon95_Else:
    assume {:partition} out_lpValue != 0;
    out_wKeyLength := out_lpValue;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 65;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 67;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 68;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 77;
    out_Tmp_1146 := out_wKeyLength;
    call {:si_unique_call 2454} out_sdv_750 := RtlCompareMemory(0, 0, out_Tmp_1146);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} out_sdv_750 > 5;
    goto L45;

  L45:
    goto anon97_Else;

  anon97_Else:
    assume {:partition} in_lppMFG != 0;
    assume {:nonnull} in_lppMFG != 0;
    assume in_lppMFG > 0;
    call {:si_unique_call 2452} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon98_Else_dummy;

  anon98_Else_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 2477} {:si_old_unique_call 1} out_Tmp_1141, out_Tmp_1142, out_sdv_736, out_sdv_737, out_Tmp_1143, out_sdv_739, out_sdv_740, out_Tmp_1145, out_Tmp_1146, out_Tmp_1147, out_lpKey_1, out_Tmp_1148, out_sdv_743, out_Tmp_1150, out_Tmp_1151, out_sdv_746, out_Tmp_1153, out_sdv_749, out_sdv_750, out_Tmp_1154, out_sdv_751, out_Tmp_1156, out_sdv_753, out_lpValue, out_sdv_756, out_sdv_758, out_wKeyLength := ParPnpFindDeviceIdKeys_loop_L21(out_Tmp_1141, out_Tmp_1142, out_sdv_736, out_sdv_737, out_Tmp_1143, out_sdv_739, out_sdv_740, out_Tmp_1145, out_Tmp_1146, out_Tmp_1147, out_lpKey_1, out_Tmp_1148, out_sdv_743, out_Tmp_1150, out_Tmp_1151, out_sdv_746, out_Tmp_1153, out_sdv_749, out_sdv_750, out_Tmp_1154, out_sdv_751, out_Tmp_1156, out_sdv_753, out_lpValue, out_sdv_756, out_sdv_758, out_wKeyLength, in_lppMFG, in_lppMDL, in_lppCLS, in_lppDES, in_lppAID, in_lppCID);
    return;

  anon98_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon98_Then_dummy;

  anon98_Then_dummy:
    goto L_BAF_2;

  anon96_Then:
    assume {:partition} 5 >= out_sdv_750;
    out_Tmp_1150 := out_wKeyLength;
    call {:si_unique_call 2453} out_sdv_751 := RtlCompareMemory(0, 0, out_Tmp_1150);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} out_sdv_751 != 3;
    out_Tmp_1154 := out_wKeyLength;
    call {:si_unique_call 2459} out_sdv_743 := RtlCompareMemory(0, 0, out_Tmp_1154);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} out_sdv_743 == 5;
    goto L66;

  L66:
    goto anon101_Else;

  anon101_Else:
    assume {:partition} in_lppMDL != 0;
    assume {:nonnull} in_lppMDL != 0;
    assume in_lppMDL > 0;
    call {:si_unique_call 2457} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon102_Else_dummy;

  anon102_Else_dummy:
    goto L_BAF_2;

  anon102_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon102_Then_dummy;

  anon102_Then_dummy:
    goto L_BAF_2;

  anon100_Then:
    assume {:partition} out_sdv_743 != 5;
    out_Tmp_1151 := out_wKeyLength;
    call {:si_unique_call 2458} out_sdv_746 := RtlCompareMemory(0, 0, out_Tmp_1151);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} out_sdv_746 != 3;
    call {:si_unique_call 2460} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon104_Else_dummy;

  anon104_Else_dummy:
    goto L_BAF_2;

  anon104_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon104_Then_dummy;

  anon104_Then_dummy:
    goto L_BAF_2;

  anon103_Then:
    assume {:partition} out_sdv_746 == 3;
    goto L66;

  anon99_Then:
    assume {:partition} out_sdv_751 == 3;
    goto L45;

  anon125_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 77;
    call {:si_unique_call 2461} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon124_Else_dummy;

  anon124_Else_dummy:
    goto L_BAF_2;

  anon124_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon124_Then_dummy;

  anon124_Then_dummy:
    goto L_BAF_2;

  anon126_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 68;
    out_Tmp_1153 := out_wKeyLength;
    call {:si_unique_call 2464} out_sdv_758 := RtlCompareMemory(0, 0, out_Tmp_1153);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} out_sdv_758 != 0;
    goto L92;

  L92:
    goto anon106_Else;

  anon106_Else:
    assume {:partition} in_lppDES != 0;
    assume {:nonnull} in_lppDES != 0;
    assume in_lppDES > 0;
    call {:si_unique_call 2462} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon107_Else_dummy;

  anon107_Else_dummy:
    goto L_BAF_2;

  anon107_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    goto L_BAF_2;

  anon105_Then:
    assume {:partition} out_sdv_758 == 0;
    out_Tmp_1145 := out_wKeyLength;
    call {:si_unique_call 2463} out_sdv_737 := RtlCompareMemory(0, 0, out_Tmp_1145);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} out_sdv_737 == 0;
    call {:si_unique_call 2465} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon109_Else_dummy;

  anon109_Else_dummy:
    goto L_BAF_2;

  anon109_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon109_Then_dummy;

  anon109_Then_dummy:
    goto L_BAF_2;

  anon108_Then:
    assume {:partition} out_sdv_737 != 0;
    goto L92;

  anon127_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 67;
    out_Tmp_1142 := out_wKeyLength;
    call {:si_unique_call 2468} out_sdv_753 := RtlCompareMemory(0, 0, out_Tmp_1142);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} out_sdv_753 == 5;
    goto L119;

  L119:
    goto anon111_Else;

  anon111_Else:
    assume {:partition} in_lppCLS != 0;
    assume {:nonnull} in_lppCLS != 0;
    assume in_lppCLS > 0;
    call {:si_unique_call 2466} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    goto L_BAF_2;

  anon112_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon112_Then_dummy;

  anon112_Then_dummy:
    goto L_BAF_2;

  anon110_Then:
    assume {:partition} out_sdv_753 != 5;
    out_Tmp_1147 := out_wKeyLength;
    call {:si_unique_call 2467} out_sdv_756 := RtlCompareMemory(0, 0, out_Tmp_1147);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} out_sdv_756 != 3;
    out_Tmp_1148 := out_wKeyLength;
    call {:si_unique_call 2471} out_sdv_736 := RtlCompareMemory(0, 0, out_Tmp_1148);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} out_sdv_736 > 5;
    goto L140;

  L140:
    goto anon115_Else;

  anon115_Else:
    assume {:partition} in_lppCID != 0;
    assume {:nonnull} in_lppCID != 0;
    assume in_lppCID > 0;
    call {:si_unique_call 2469} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    goto L_BAF_2;

  anon116_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon116_Then_dummy;

  anon116_Then_dummy:
    goto L_BAF_2;

  anon114_Then:
    assume {:partition} 5 >= out_sdv_736;
    out_Tmp_1143 := out_wKeyLength;
    call {:si_unique_call 2470} out_sdv_749 := RtlCompareMemory(0, 0, out_Tmp_1143);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} out_sdv_749 != 3;
    call {:si_unique_call 2472} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon118_Else_dummy;

  anon118_Else_dummy:
    goto L_BAF_2;

  anon118_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon118_Then_dummy;

  anon118_Then_dummy:
    goto L_BAF_2;

  anon117_Then:
    assume {:partition} out_sdv_749 == 3;
    goto L140;

  anon113_Then:
    assume {:partition} out_sdv_756 == 3;
    goto L119;

  anon129_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 65;
    out_Tmp_1156 := out_wKeyLength;
    call {:si_unique_call 2475} out_sdv_739 := RtlCompareMemory(0, 0, out_Tmp_1156);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} out_sdv_739 != 0;
    goto L166;

  L166:
    goto anon120_Else;

  anon120_Else:
    assume {:partition} in_lppAID != 0;
    assume {:nonnull} in_lppAID != 0;
    assume in_lppAID > 0;
    call {:si_unique_call 2473} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon121_Else_dummy;

  anon121_Else_dummy:
    goto L_BAF_2;

  anon121_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon121_Then_dummy;

  anon121_Then_dummy:
    goto L_BAF_2;

  anon119_Then:
    assume {:partition} out_sdv_739 == 0;
    out_Tmp_1141 := out_wKeyLength;
    call {:si_unique_call 2474} out_sdv_740 := RtlCompareMemory(0, 0, out_Tmp_1141);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} out_sdv_740 == 0;
    call {:si_unique_call 2476} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon123_Else_dummy;

  anon123_Else_dummy:
    goto L_BAF_2;

  anon123_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon123_Then_dummy;

  anon123_Then_dummy:
    goto L_BAF_2;

  anon122_Then:
    assume {:partition} out_sdv_740 != 0;
    goto L166;
}



procedure {:LoopProcedure} ParPnpFindDeviceIdKeys_loop_L21(in_Tmp_1141: int, in_Tmp_1142: int, in_sdv_736: int, in_sdv_737: int, in_Tmp_1143: int, in_sdv_739: int, in_sdv_740: int, in_Tmp_1145: int, in_Tmp_1146: int, in_Tmp_1147: int, in_lpKey_1: int, in_Tmp_1148: int, in_sdv_743: int, in_Tmp_1150: int, in_Tmp_1151: int, in_sdv_746: int, in_Tmp_1153: int, in_sdv_749: int, in_sdv_750: int, in_Tmp_1154: int, in_sdv_751: int, in_Tmp_1156: int, in_sdv_753: int, in_lpValue: int, in_sdv_756: int, in_sdv_758: int, in_wKeyLength: int, in_lppMFG: int, in_lppMDL: int, in_lppCLS: int, in_lppDES: int, in_lppAID: int, in_lppCID: int) returns (out_Tmp_1141: int, out_Tmp_1142: int, out_sdv_736: int, out_sdv_737: int, out_Tmp_1143: int, out_sdv_739: int, out_sdv_740: int, out_Tmp_1145: int, out_Tmp_1146: int, out_Tmp_1147: int, out_lpKey_1: int, out_Tmp_1148: int, out_sdv_743: int, out_Tmp_1150: int, out_Tmp_1151: int, out_sdv_746: int, out_Tmp_1153: int, out_sdv_749: int, out_sdv_750: int, out_Tmp_1154: int, out_sdv_751: int, out_Tmp_1156: int, out_sdv_753: int, out_lpValue: int, out_sdv_756: int, out_sdv_758: int, out_wKeyLength: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1141 == 0 || out_Tmp_1141 == in_Tmp_1141 || out_Tmp_1141 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1142 == 0 || out_Tmp_1142 == in_Tmp_1142 || out_Tmp_1142 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1143 == 0 || out_Tmp_1143 == in_Tmp_1143 || out_Tmp_1143 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1145 == 0 || out_Tmp_1145 == in_Tmp_1145 || out_Tmp_1145 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1146 == 0 || out_Tmp_1146 == in_Tmp_1146 || out_Tmp_1146 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1147 == 0 || out_Tmp_1147 == in_Tmp_1147 || out_Tmp_1147 == in_lpKey_1;
  free ensures {:va_keep} out_lpKey_1 == 0 || out_lpKey_1 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1148 == 0 || out_Tmp_1148 == in_Tmp_1148 || out_Tmp_1148 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1150 == 0 || out_Tmp_1150 == in_Tmp_1150 || out_Tmp_1150 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1151 == 0 || out_Tmp_1151 == in_Tmp_1151 || out_Tmp_1151 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1153 == 0 || out_Tmp_1153 == in_Tmp_1153 || out_Tmp_1153 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1154 == 0 || out_Tmp_1154 == in_Tmp_1154 || out_Tmp_1154 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1156 == 0 || out_Tmp_1156 == in_Tmp_1156 || out_Tmp_1156 == in_lpKey_1;
  free ensures {:va_keep} out_lpValue == 0 || out_lpValue == in_lpValue || out_lpValue == in_lpKey_1;
  free ensures {:va_keep} out_wKeyLength == 0 || out_wKeyLength == in_wKeyLength || out_wKeyLength == in_lpKey_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation CheckPort_loop_L31(in_s_p_e_c_i_a_l_2: int, in_End: int)
{

  entry:
    goto L31, exit;

  exit:
    return;

  L31:
    assume {:nonnull} in_End != 0;
    assume in_End > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_End != 0;
    assume in_End > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_End != 0;
    assume in_End > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    goto anon16_Then;

  anon16_Then:
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    call {:si_unique_call 2478} {:si_old_unique_call 1} CheckPort_loop_L31(in_s_p_e_c_i_a_l_2, in_End);
    return;
}



procedure {:LoopProcedure} CheckPort_loop_L31(in_s_p_e_c_i_a_l_2: int, in_End: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation CheckPort_loop_L29(in_Tmp_1178: int, in_Wait_1: int, in_s_p_e_c_i_a_l_2: int, in_sdv_775: int, in_End: int, in_Start: int, in_dsr_2: int, in_Tmp_1181: int, in_bMask: int, in_bValue: int) returns (out_Tmp_1178: int, out_s_p_e_c_i_a_l_2: int, out_sdv_775: int, out_dsr_2: int, out_Tmp_1181: int)
{

  entry:
    out_Tmp_1178, out_s_p_e_c_i_a_l_2, out_sdv_775, out_dsr_2, out_Tmp_1181 := in_Tmp_1178, in_s_p_e_c_i_a_l_2, in_sdv_775, in_dsr_2, in_Tmp_1181;
    goto L29, exit;

  exit:
    return;

  L29:
    out_Tmp_1181 := KeTickCount;
    assume {:nonnull} out_Tmp_1181 != 0;
    assume out_Tmp_1181 > 0;
    havoc out_s_p_e_c_i_a_l_2;
    goto L31;

  L31:
    call {:si_unique_call 2481} CheckPort_loop_L31(out_s_p_e_c_i_a_l_2, in_End);
    goto L31_last;

  L31_last:
    assume {:nonnull} in_End != 0;
    assume in_End > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_End != 0;
    assume in_End > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_End != 0;
    assume in_End > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 2480} out_dsr_2 := corral_nondet();
    out_Tmp_1178 := BAND(out_dsr_2, in_bMask);
    goto anon17_Then;

  anon17_Then:
    assume {:partition} out_Tmp_1178 != in_bValue;
    call {:si_unique_call 2479} out_sdv_775 := corral_nondet();
    assume {:nonnull} in_End != 0;
    assume in_End > 0;
    assume {:nonnull} in_Start != 0;
    assume in_Start > 0;
    assume {:nonnull} in_Wait_1 != 0;
    assume in_Wait_1 > 0;
    goto anon13_Then;

  anon13_Then:
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    call {:si_unique_call 2482} {:si_old_unique_call 1} out_Tmp_1178, out_s_p_e_c_i_a_l_2, out_sdv_775, out_dsr_2, out_Tmp_1181 := CheckPort_loop_L29(out_Tmp_1178, in_Wait_1, out_s_p_e_c_i_a_l_2, out_sdv_775, in_End, in_Start, out_dsr_2, out_Tmp_1181, in_bMask, in_bValue);
    return;

  anon16_Then:
    assume false;
    return;
}



procedure {:LoopProcedure} CheckPort_loop_L29(in_Tmp_1178: int, in_Wait_1: int, in_s_p_e_c_i_a_l_2: int, in_sdv_775: int, in_End: int, in_Start: int, in_dsr_2: int, in_Tmp_1181: int, in_bMask: int, in_bValue: int) returns (out_Tmp_1178: int, out_s_p_e_c_i_a_l_2: int, out_sdv_775: int, out_dsr_2: int, out_Tmp_1181: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation CheckPort_loop_L21(in_s_p_e_c_i_a_l_1: int, in_Start: int)
{

  entry:
    goto L21, exit;

  exit:
    return;

  L21:
    assume {:nonnull} in_Start != 0;
    assume in_Start > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_Start != 0;
    assume in_Start > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_Start != 0;
    assume in_Start > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    goto anon15_Then;

  anon15_Then:
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    call {:si_unique_call 2483} {:si_old_unique_call 1} CheckPort_loop_L21(in_s_p_e_c_i_a_l_1, in_Start);
    return;
}



procedure {:LoopProcedure} CheckPort_loop_L21(in_s_p_e_c_i_a_l_1: int, in_Start: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParDot3ParseDevId_loop_L8(in_lpKey_2: int)
{

  entry:
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:nonnull} in_lpKey_2 != 0;
    assume in_lpKey_2 > 0;
    goto anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[in_lpKey_2] == 32;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    call {:si_unique_call 2484} {:si_old_unique_call 1} ParDot3ParseDevId_loop_L8(in_lpKey_2);
    return;
}



procedure {:LoopProcedure} ParDot3ParseDevId_loop_L8(in_lpKey_2: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation ParDot3ParseDevId_loop_L7(in_Tmp_1211: int, in_sdv_780: int, in_Tmp_1215: int, in_Tmp_1216: int, in_Tmp_1217: int, in_lpKey_2: int, in_sdv_782: int, in_Tmp_1218: int, in_sdv_785: int, in_Tmp_1222: int, in_sdv_788: int, in_sdv_790: int, in_sdv_791: int, in_Tmp_1225: int, in_sdv_795: int, in_lpValue_1: int, in_Tmp_1227: int, in_sdv_796: int, in_wKeyLength_1: int, in_lpp: int, in_lpp_1: int, in_lpp_2: int, in_lpp_3: int, in_lpp_4: int) returns (out_Tmp_1211: int, out_sdv_780: int, out_Tmp_1215: int, out_Tmp_1216: int, out_Tmp_1217: int, out_lpKey_2: int, out_sdv_782: int, out_Tmp_1218: int, out_sdv_785: int, out_Tmp_1222: int, out_sdv_788: int, out_sdv_790: int, out_sdv_791: int, out_Tmp_1225: int, out_sdv_795: int, out_lpValue_1: int, out_Tmp_1227: int, out_sdv_796: int, out_wKeyLength_1: int)
{

  entry:
    out_Tmp_1211, out_sdv_780, out_Tmp_1215, out_Tmp_1216, out_Tmp_1217, out_lpKey_2, out_sdv_782, out_Tmp_1218, out_sdv_785, out_Tmp_1222, out_sdv_788, out_sdv_790, out_sdv_791, out_Tmp_1225, out_sdv_795, out_lpValue_1, out_Tmp_1227, out_sdv_796, out_wKeyLength_1 := in_Tmp_1211, in_sdv_780, in_Tmp_1215, in_Tmp_1216, in_Tmp_1217, in_lpKey_2, in_sdv_782, in_Tmp_1218, in_sdv_785, in_Tmp_1222, in_sdv_788, in_sdv_790, in_sdv_791, in_Tmp_1225, in_sdv_795, in_lpValue_1, in_Tmp_1227, in_sdv_796, in_wKeyLength_1;
    goto L7, exit;

  exit:
    return;

  L7:
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_lpKey_2 != 0;
    goto L8;

  L8:
    call {:si_unique_call 2489} ParDot3ParseDevId_loop_L8(out_lpKey_2);
    goto L8_last;

  L8_last:
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 32;
    assume false;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 32;
    call {:si_unique_call 2488} out_lpValue_1 := StringChr(out_lpKey_2, 58);
    goto anon53_Else;

  anon53_Else:
    assume {:partition} out_lpValue_1 != 0;
    out_wKeyLength_1 := out_lpValue_1;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 46;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 49;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 67;
    out_Tmp_1222 := out_wKeyLength_1;
    call {:si_unique_call 2487} out_sdv_790 := RtlCompareMemory(0, 0, out_Tmp_1222);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} out_sdv_790 == 4;
    goto L30;

  L30:
    assume {:nonnull} in_lpp_2 != 0;
    assume in_lpp_2 > 0;
    call {:si_unique_call 2485} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon55_Else_dummy;

  anon55_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 2506} {:si_old_unique_call 1} out_Tmp_1211, out_sdv_780, out_Tmp_1215, out_Tmp_1216, out_Tmp_1217, out_lpKey_2, out_sdv_782, out_Tmp_1218, out_sdv_785, out_Tmp_1222, out_sdv_788, out_sdv_790, out_sdv_791, out_Tmp_1225, out_sdv_795, out_lpValue_1, out_Tmp_1227, out_sdv_796, out_wKeyLength_1 := ParDot3ParseDevId_loop_L7(out_Tmp_1211, out_sdv_780, out_Tmp_1215, out_Tmp_1216, out_Tmp_1217, out_lpKey_2, out_sdv_782, out_Tmp_1218, out_sdv_785, out_Tmp_1222, out_sdv_788, out_sdv_790, out_sdv_791, out_Tmp_1225, out_sdv_795, out_lpValue_1, out_Tmp_1227, out_sdv_796, out_wKeyLength_1, in_lpp, in_lpp_1, in_lpp_2, in_lpp_3, in_lpp_4);
    return;

  anon55_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    goto L_BAF_3;

  anon54_Then:
    assume {:partition} out_sdv_790 != 4;
    out_Tmp_1225 := out_wKeyLength_1;
    call {:si_unique_call 2486} out_sdv_791 := RtlCompareMemory(0, 0, out_Tmp_1225);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} out_sdv_791 != 12;
    call {:si_unique_call 2490} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon57_Else_dummy;

  anon57_Else_dummy:
    goto L_BAF_3;

  anon57_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon57_Then_dummy;

  anon57_Then_dummy:
    goto L_BAF_3;

  anon56_Then:
    assume {:partition} out_sdv_791 == 12;
    goto L30;

  anon73_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 67;
    call {:si_unique_call 2491} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon72_Else_dummy;

  anon72_Else_dummy:
    goto L_BAF_3;

  anon72_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon72_Then_dummy;

  anon72_Then_dummy:
    goto L_BAF_3;

  anon74_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 49;
    out_Tmp_1218 := out_wKeyLength_1;
    call {:si_unique_call 2493} out_sdv_795 := RtlCompareMemory(0, 0, out_Tmp_1218);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} out_sdv_795 == 9;
    assume {:nonnull} in_lpp_3 != 0;
    assume in_lpp_3 > 0;
    call {:si_unique_call 2492} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon59_Else_dummy;

  anon59_Else_dummy:
    goto L_BAF_3;

  anon59_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    goto L_BAF_3;

  anon58_Then:
    assume {:partition} out_sdv_795 != 9;
    out_Tmp_1211 := out_wKeyLength_1;
    call {:si_unique_call 2495} out_sdv_785 := RtlCompareMemory(0, 0, out_Tmp_1211);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_sdv_785 == 9;
    assume {:nonnull} in_lpp != 0;
    assume in_lpp > 0;
    call {:si_unique_call 2494} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    goto L_BAF_3;

  anon61_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    goto L_BAF_3;

  anon60_Then:
    assume {:partition} out_sdv_785 != 9;
    out_Tmp_1227 := out_wKeyLength_1;
    call {:si_unique_call 2497} out_sdv_788 := RtlCompareMemory(0, 0, out_Tmp_1227);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_sdv_788 == 8;
    assume {:nonnull} in_lpp_1 != 0;
    assume in_lpp_1 > 0;
    call {:si_unique_call 2496} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    goto L_BAF_3;

  anon63_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    goto L_BAF_3;

  anon62_Then:
    assume {:partition} out_sdv_788 != 8;
    out_Tmp_1217 := out_wKeyLength_1;
    call {:si_unique_call 2499} out_sdv_780 := RtlCompareMemory(0, 0, out_Tmp_1217);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} out_sdv_780 == 8;
    assume {:nonnull} in_lpp_4 != 0;
    assume in_lpp_4 > 0;
    call {:si_unique_call 2498} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    goto L_BAF_3;

  anon65_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    goto L_BAF_3;

  anon64_Then:
    assume {:partition} out_sdv_780 != 8;
    call {:si_unique_call 2500} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    goto L_BAF_3;

  anon66_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    goto L_BAF_3;

  anon75_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 46;
    out_Tmp_1215 := out_wKeyLength_1;
    call {:si_unique_call 2502} out_sdv_796 := RtlCompareMemory(0, 0, out_Tmp_1215);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} out_sdv_796 == 4;
    assume {:nonnull} in_lpp_1 != 0;
    assume in_lpp_1 > 0;
    call {:si_unique_call 2501} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon68_Else_dummy;

  anon68_Else_dummy:
    goto L_BAF_3;

  anon68_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon68_Then_dummy;

  anon68_Then_dummy:
    goto L_BAF_3;

  anon67_Then:
    assume {:partition} out_sdv_796 != 4;
    out_Tmp_1216 := out_wKeyLength_1;
    call {:si_unique_call 2504} out_sdv_782 := RtlCompareMemory(0, 0, out_Tmp_1216);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} out_sdv_782 == 4;
    assume {:nonnull} in_lpp_4 != 0;
    assume in_lpp_4 > 0;
    call {:si_unique_call 2503} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    goto L_BAF_3;

  anon70_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon70_Then_dummy;

  anon70_Then_dummy:
    goto L_BAF_3;

  anon69_Then:
    assume {:partition} out_sdv_782 != 4;
    call {:si_unique_call 2505} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    goto L_BAF_3;

  anon71_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon71_Then_dummy;

  anon71_Then_dummy:
    goto L_BAF_3;
}



procedure {:LoopProcedure} ParDot3ParseDevId_loop_L7(in_Tmp_1211: int, in_sdv_780: int, in_Tmp_1215: int, in_Tmp_1216: int, in_Tmp_1217: int, in_lpKey_2: int, in_sdv_782: int, in_Tmp_1218: int, in_sdv_785: int, in_Tmp_1222: int, in_sdv_788: int, in_sdv_790: int, in_sdv_791: int, in_Tmp_1225: int, in_sdv_795: int, in_lpValue_1: int, in_Tmp_1227: int, in_sdv_796: int, in_wKeyLength_1: int, in_lpp: int, in_lpp_1: int, in_lpp_2: int, in_lpp_3: int, in_lpp_4: int) returns (out_Tmp_1211: int, out_sdv_780: int, out_Tmp_1215: int, out_Tmp_1216: int, out_Tmp_1217: int, out_lpKey_2: int, out_sdv_782: int, out_Tmp_1218: int, out_sdv_785: int, out_Tmp_1222: int, out_sdv_788: int, out_sdv_790: int, out_sdv_791: int, out_Tmp_1225: int, out_sdv_795: int, out_lpValue_1: int, out_Tmp_1227: int, out_sdv_796: int, out_wKeyLength_1: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1211 == 0 || out_Tmp_1211 == in_Tmp_1211 || out_Tmp_1211 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1215 == 0 || out_Tmp_1215 == in_Tmp_1215 || out_Tmp_1215 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1216 == 0 || out_Tmp_1216 == in_Tmp_1216 || out_Tmp_1216 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1217 == 0 || out_Tmp_1217 == in_Tmp_1217 || out_Tmp_1217 == in_lpKey_2;
  free ensures {:va_keep} out_lpKey_2 == 0 || out_lpKey_2 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1218 == 0 || out_Tmp_1218 == in_Tmp_1218 || out_Tmp_1218 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1222 == 0 || out_Tmp_1222 == in_Tmp_1222 || out_Tmp_1222 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1225 == 0 || out_Tmp_1225 == in_Tmp_1225 || out_Tmp_1225 == in_lpKey_2;
  free ensures {:va_keep} out_lpValue_1 == 0 || out_lpValue_1 == in_lpValue_1 || out_lpValue_1 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1227 == 0 || out_Tmp_1227 == in_Tmp_1227 || out_Tmp_1227 == in_lpKey_2;
  free ensures {:va_keep} out_wKeyLength_1 == 0 || out_wKeyLength_1 == in_wKeyLength_1 || out_wKeyLength_1 == in_lpKey_2;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation String2Num_loop_L9(in_cnt_1: int, in_Tmp_1233: int, in_Tmp_1235: int, in_cc: int, in_lpp_5: int, in_num: int) returns (out_cnt_1: int, out_Tmp_1233: int, out_Tmp_1235: int, out_cc: int)
{

  entry:
    out_cnt_1, out_Tmp_1233, out_Tmp_1235, out_cc := in_cnt_1, in_Tmp_1233, in_Tmp_1235, in_cc;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:nonnull} in_lpp_5 != 0;
    assume in_lpp_5 > 0;
    havoc out_Tmp_1233;
    assume {:nonnull} out_Tmp_1233 != 0;
    assume out_Tmp_1233 > 0;
    out_cc := Mem_T.INT4[out_Tmp_1233];
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} out_cc >= 48;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 57 >= out_cc;
    assume {:nonnull} in_num != 0;
    assume in_num > 0;
    Mem_T.INT4[in_num] := 16 * Mem_T.INT4[in_num] + out_cc - 48;
    goto L14;

  L14:
    assume {:nonnull} in_lpp_5 != 0;
    assume in_lpp_5 > 0;
    out_Tmp_1235 := out_cnt_1;
    out_cnt_1 := out_cnt_1 + 1;
    goto anon36_Then;

  anon36_Then:
    assume {:partition} 100 >= out_Tmp_1235;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    call {:si_unique_call 2507} {:si_old_unique_call 1} out_cnt_1, out_Tmp_1233, out_Tmp_1235, out_cc := String2Num_loop_L9(out_cnt_1, out_Tmp_1233, out_Tmp_1235, out_cc, in_lpp_5, in_num);
    return;

  anon26_Then:
    assume {:partition} out_cc > 57;
    goto L11;

  L11:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_cc >= 65;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 70 >= out_cc;
    assume {:nonnull} in_num != 0;
    assume in_num > 0;
    Mem_T.INT4[in_num] := 16 * Mem_T.INT4[in_num] + out_cc - 55;
    goto L14;

  anon28_Then:
    assume {:partition} out_cc > 70;
    goto L20;

  L20:
    goto anon27_Else;

  anon27_Else:
    assume {:partition} out_cc >= 97;
    goto anon30_Else;

  anon30_Else:
    assume {:partition} 102 >= out_cc;
    assume {:nonnull} in_num != 0;
    assume in_num > 0;
    Mem_T.INT4[in_num] := 16 * Mem_T.INT4[in_num] + out_cc - 87;
    goto L14;

  anon25_Then:
    assume {:partition} 65 > out_cc;
    goto L20;

  anon35_Then:
    assume {:partition} 48 > out_cc;
    goto L11;
}



procedure {:LoopProcedure} String2Num_loop_L9(in_cnt_1: int, in_Tmp_1233: int, in_Tmp_1235: int, in_cc: int, in_lpp_5: int, in_num: int) returns (out_cnt_1: int, out_Tmp_1233: int, out_Tmp_1235: int, out_cc: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4ReadRawIeee1284DeviceId_loop_L94(in_Tmp_1240: int, in_deviceIndex: int, in_Tmp_1246: int, in_Tmp_1248: int, in_sdv_804: int, in_Tmp_1253: int, in_Tmp_1258: int, in_Tmp_1259: int, in_sdv_812: int, in_devIdBuffer: int) returns (out_Tmp_1240: int, out_deviceIndex: int, out_Tmp_1246: int, out_Tmp_1248: int, out_sdv_804: int, out_Tmp_1253: int, out_Tmp_1258: int, out_Tmp_1259: int, out_sdv_812: int)
{

  entry:
    out_Tmp_1240, out_deviceIndex, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1253, out_Tmp_1258, out_Tmp_1259, out_sdv_812 := in_Tmp_1240, in_deviceIndex, in_Tmp_1246, in_Tmp_1248, in_sdv_804, in_Tmp_1253, in_Tmp_1258, in_Tmp_1259, in_sdv_812;
    goto L94, exit;

  exit:
    return;

  L94:
    assume {:CounterLoop 14} {:Counter "deviceIndex"} true;
    goto anon71_Else;

  anon71_Else:
    assume {:partition} 14 > out_deviceIndex;
    out_Tmp_1246 := out_deviceIndex;
    havoc out_Tmp_1259;
    assume {:nonnull} out_Tmp_1259 != 0;
    assume out_Tmp_1259 > 0;
    goto anon82_Else;

  anon82_Else:
    out_Tmp_1253 := out_deviceIndex;
    havoc out_Tmp_1240;
    assume {:nonnull} out_Tmp_1240 != 0;
    assume out_Tmp_1240 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    out_sdv_804 := 0;
    goto L102;

  L102:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_sdv_804 != 0;
    out_Tmp_1248 := out_deviceIndex;
    havoc out_Tmp_1258;
    assume {:nonnull} out_Tmp_1258 != 0;
    assume out_Tmp_1258 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    out_sdv_812 := 0;
    goto L109;

  L109:
    goto anon73_Then;

  anon73_Then:
    assume {:partition} out_sdv_812 == 0;
    goto L103;

  L103:
    out_deviceIndex := out_deviceIndex + 1;
    goto L103_dummy;

  L103_dummy:
    call {:si_unique_call 2510} {:si_old_unique_call 1} out_Tmp_1240, out_deviceIndex, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1253, out_Tmp_1258, out_Tmp_1259, out_sdv_812 := P4ReadRawIeee1284DeviceId_loop_L94(out_Tmp_1240, out_deviceIndex, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1253, out_Tmp_1258, out_Tmp_1259, out_sdv_812, in_devIdBuffer);
    return;

  anon84_Then:
    call {:si_unique_call 2509} out_sdv_812 := __HAVOC_malloc(1);
    goto L109;

  anon72_Then:
    assume {:partition} out_sdv_804 == 0;
    goto L103;

  anon83_Then:
    call {:si_unique_call 2508} out_sdv_804 := __HAVOC_malloc(1);
    goto L102;
}



procedure {:LoopProcedure} P4ReadRawIeee1284DeviceId_loop_L94(in_Tmp_1240: int, in_deviceIndex: int, in_Tmp_1246: int, in_Tmp_1248: int, in_sdv_804: int, in_Tmp_1253: int, in_Tmp_1258: int, in_Tmp_1259: int, in_sdv_812: int, in_devIdBuffer: int) returns (out_Tmp_1240: int, out_deviceIndex: int, out_Tmp_1246: int, out_Tmp_1248: int, out_sdv_804: int, out_Tmp_1253: int, out_Tmp_1258: int, out_Tmp_1259: int, out_sdv_812: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation P4ReadRawIeee1284DeviceId_loop_L23(in_Tmp_1239: int, in_Tmp_1240: int, in_deviceIndex: int, in_tmpBufLen_3: int, in_Tmp_1242: int, in_length_3: int, in_tryCount: int, in_minValidDevId_1: int, in_ignoreXflag: int, in_truncationIndex: int, in_ieeeState: int, in_Tmp_1246: int, in_Tmp_1248: int, in_sdv_804: int, in_Tmp_1249: int, in_maxTries_2: int, in_Tmp_1253: int, in_sdv_805: int, in_sdv_806: int, in_sdv_807: int, in_sdv_808: int, in_Tmp_1257: int, in_lowLengthByte: int, in_bytesTransferred: int, in_sdv_810: int, in_sdv_811: int, in_Tmp_1258: int, in_tmpBuf: int, in_Tmp_1259: int, in_highLengthByte: int, in_sdv_812: int, in_status_39: int, in_devIdBuffer: int, in_sdv_813: int, in_Controller_18: int) returns (out_Tmp_1239: int, out_Tmp_1240: int, out_deviceIndex: int, out_tmpBufLen_3: int, out_Tmp_1242: int, out_length_3: int, out_tryCount: int, out_ignoreXflag: int, out_truncationIndex: int, out_Tmp_1246: int, out_Tmp_1248: int, out_sdv_804: int, out_Tmp_1249: int, out_Tmp_1253: int, out_sdv_805: int, out_sdv_806: int, out_sdv_807: int, out_sdv_808: int, out_Tmp_1257: int, out_lowLengthByte: int, out_sdv_810: int, out_sdv_811: int, out_Tmp_1258: int, out_tmpBuf: int, out_Tmp_1259: int, out_highLengthByte: int, out_sdv_812: int, out_status_39: int, out_devIdBuffer: int, out_sdv_813: int)
{

  entry:
    out_Tmp_1239, out_Tmp_1240, out_deviceIndex, out_tmpBufLen_3, out_Tmp_1242, out_length_3, out_tryCount, out_ignoreXflag, out_truncationIndex, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1249, out_Tmp_1253, out_sdv_805, out_sdv_806, out_sdv_807, out_sdv_808, out_Tmp_1257, out_lowLengthByte, out_sdv_810, out_sdv_811, out_Tmp_1258, out_tmpBuf, out_Tmp_1259, out_highLengthByte, out_sdv_812, out_status_39, out_devIdBuffer, out_sdv_813 := in_Tmp_1239, in_Tmp_1240, in_deviceIndex, in_tmpBufLen_3, in_Tmp_1242, in_length_3, in_tryCount, in_ignoreXflag, in_truncationIndex, in_Tmp_1246, in_Tmp_1248, in_sdv_804, in_Tmp_1249, in_Tmp_1253, in_sdv_805, in_sdv_806, in_sdv_807, in_sdv_808, in_Tmp_1257, in_lowLengthByte, in_sdv_810, in_sdv_811, in_Tmp_1258, in_tmpBuf, in_Tmp_1259, in_highLengthByte, in_sdv_812, in_status_39, in_devIdBuffer, in_sdv_813;
    goto L23, exit;

  exit:
    return;

  L23:
    call {:si_unique_call 2511} out_status_39 := P4IeeeEnter1284Mode(in_Controller_18, 4, in_ieeeState);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} out_status_39 == 0;
    out_tmpBufLen_3 := 1024;
    call {:si_unique_call 2515} out_sdv_807 := ExAllocatePoolWithTag(1, out_tmpBufLen_3, -797810352);
    out_tmpBuf := out_sdv_807;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_tmpBuf != 0;
    call {:si_unique_call 2517} sdv_RtlZeroMemory(0, out_tmpBufLen_3);
    assume {:nonnull} in_ieeeState != 0;
    assume in_ieeeState > 0;
    out_Tmp_1257 := out_tmpBufLen_3 - 1;
    call {:si_unique_call 2518} out_status_39 := P4NibbleModeRead(in_Controller_18, out_tmpBuf, out_Tmp_1257, in_bytesTransferred, in_ieeeState);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_status_39 >= 0;
    assume {:nonnull} out_tmpBuf != 0;
    assume out_tmpBuf > 0;
    out_highLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[out_tmpBuf]);
    assume {:nonnull} out_tmpBuf != 0;
    assume out_tmpBuf > 0;
    out_lowLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[out_tmpBuf + 1 * 4]);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} out_highLengthByte > 2;
    out_devIdBuffer := 0;
    goto L55;

  L55:
    call {:si_unique_call 2514} sdv_ExFreePool(0);
    goto L44;

  L44:
    assume {:nonnull} in_ieeeState != 0;
    assume in_ieeeState > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} out_devIdBuffer != 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    out_sdv_810 := 0;
    goto L91;

  L91:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_sdv_810 != 0;
    goto L93;

  L93:
    out_deviceIndex := 0;
    goto L94;

  L94:
    call {:si_unique_call 2525} out_Tmp_1240, out_deviceIndex, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1253, out_Tmp_1258, out_Tmp_1259, out_sdv_812 := P4ReadRawIeee1284DeviceId_loop_L94(out_Tmp_1240, out_deviceIndex, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1253, out_Tmp_1258, out_Tmp_1259, out_sdv_812, out_devIdBuffer);
    goto L94_last;

  L94_last:
    assume {:CounterLoop 14} {:Counter "deviceIndex"} true;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} 14 > out_deviceIndex;
    out_Tmp_1246 := out_deviceIndex;
    havoc out_Tmp_1259;
    assume {:nonnull} out_Tmp_1259 != 0;
    assume out_Tmp_1259 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    out_Tmp_1253 := out_deviceIndex;
    havoc out_Tmp_1240;
    assume {:nonnull} out_Tmp_1240 != 0;
    assume out_Tmp_1240 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    out_sdv_804 := 0;
    goto L102;

  L102:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_sdv_804 != 0;
    out_Tmp_1248 := out_deviceIndex;
    havoc out_Tmp_1258;
    assume {:nonnull} out_Tmp_1258 != 0;
    assume out_Tmp_1258 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    out_sdv_812 := 0;
    goto L109;

  L109:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_sdv_812 != 0;
    out_ignoreXflag := 1;
    goto L86;

  L86:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} out_ignoreXflag != 0;
    call {:si_unique_call 2512} P4IeeeTerminate1284Mode(in_Controller_18, in_ieeeState, 0);
    goto L29;

  L29:
    goto anon62_Then;

  anon62_Then:
    assume {:partition} out_devIdBuffer == 0;
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    goto anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.INT4[in_bytesTransferred] > 0;
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    goto anon64_Else;

  anon64_Else:
    assume {:partition} in_minValidDevId_1 > Mem_T.INT4[in_bytesTransferred];
    goto anon65_Else;

  anon65_Else:
    assume {:partition} in_maxTries_2 > out_tryCount;
    out_tryCount := out_tryCount + 1;
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    Mem_T.INT4[in_bytesTransferred] := 0;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    call {:si_unique_call 2528} {:si_old_unique_call 1} out_Tmp_1239, out_Tmp_1240, out_deviceIndex, out_tmpBufLen_3, out_Tmp_1242, out_length_3, out_tryCount, out_ignoreXflag, out_truncationIndex, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1249, out_Tmp_1253, out_sdv_805, out_sdv_806, out_sdv_807, out_sdv_808, out_Tmp_1257, out_lowLengthByte, out_sdv_810, out_sdv_811, out_Tmp_1258, out_tmpBuf, out_Tmp_1259, out_highLengthByte, out_sdv_812, out_status_39, out_devIdBuffer, out_sdv_813 := P4ReadRawIeee1284DeviceId_loop_L23(out_Tmp_1239, out_Tmp_1240, out_deviceIndex, out_tmpBufLen_3, out_Tmp_1242, out_length_3, out_tryCount, in_minValidDevId_1, out_ignoreXflag, out_truncationIndex, in_ieeeState, out_Tmp_1246, out_Tmp_1248, out_sdv_804, out_Tmp_1249, in_maxTries_2, out_Tmp_1253, out_sdv_805, out_sdv_806, out_sdv_807, out_sdv_808, out_Tmp_1257, out_lowLengthByte, in_bytesTransferred, out_sdv_810, out_sdv_811, out_Tmp_1258, out_tmpBuf, out_Tmp_1259, out_highLengthByte, out_sdv_812, out_status_39, out_devIdBuffer, out_sdv_813, in_Controller_18);
    return;

  anon69_Then:
    assume {:partition} out_ignoreXflag == 0;
    call {:si_unique_call 2513} P4IeeeTerminate1284Mode(in_Controller_18, in_ieeeState, 1);
    goto L29;

  anon73_Then:
    assume {:partition} out_sdv_812 == 0;
    goto L103;

  L103:
    out_deviceIndex := out_deviceIndex + 1;
    assume false;
    return;

  anon84_Then:
    call {:si_unique_call 2527} out_sdv_812 := __HAVOC_malloc(1);
    goto L109;

  anon72_Then:
    assume {:partition} out_sdv_804 == 0;
    goto L103;

  anon83_Then:
    call {:si_unique_call 2526} out_sdv_804 := __HAVOC_malloc(1);
    goto L102;

  anon82_Then:
    goto L86;

  anon71_Then:
    assume {:partition} out_deviceIndex >= 14;
    goto L86;

  anon70_Then:
    assume {:partition} out_sdv_810 == 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    out_sdv_806 := 0;
    goto L115;

  L115:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_sdv_806 == 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    out_sdv_805 := 0;
    goto L120;

  L120:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} out_sdv_805 == 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    out_sdv_813 := 0;
    goto L125;

  L125:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} out_sdv_813 == 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    out_sdv_808 := 0;
    goto L130;

  L130:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_sdv_808 != 0;
    goto L93;

  anon77_Then:
    assume {:partition} out_sdv_808 == 0;
    goto L86;

  anon88_Then:
    call {:si_unique_call 2520} out_sdv_808 := __HAVOC_malloc(1);
    goto L130;

  anon76_Then:
    assume {:partition} out_sdv_813 != 0;
    goto L93;

  anon87_Then:
    call {:si_unique_call 2521} out_sdv_813 := __HAVOC_malloc(1);
    goto L125;

  anon75_Then:
    assume {:partition} out_sdv_805 != 0;
    goto L93;

  anon86_Then:
    call {:si_unique_call 2522} out_sdv_805 := __HAVOC_malloc(1);
    goto L120;

  anon74_Then:
    assume {:partition} out_sdv_806 != 0;
    goto L93;

  anon85_Then:
    call {:si_unique_call 2523} out_sdv_806 := __HAVOC_malloc(1);
    goto L115;

  anon81_Then:
    call {:si_unique_call 2524} out_sdv_810 := __HAVOC_malloc(1);
    goto L91;

  anon80_Then:
    assume {:partition} out_devIdBuffer == 0;
    goto L86;

  anon79_Then:
    assume {:partition} 2 >= out_highLengthByte;
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Mem_T.INT4[in_bytesTransferred] >= in_minValidDevId_1;
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    out_Tmp_1239 := Mem_T.INT4[in_bytesTransferred] + 1;
    call {:si_unique_call 2519} out_sdv_811 := ExAllocatePoolWithTag(1, out_Tmp_1239, -797810352);
    out_devIdBuffer := out_sdv_811;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} out_devIdBuffer != 0;
    out_length_3 := out_highLengthByte * 256 + out_lowLengthByte;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_length_3 >= in_minValidDevId_1;
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Mem_T.INT4[in_bytesTransferred] > out_length_3;
    out_Tmp_1249 := out_length_3;
    goto L80;

  L80:
    out_truncationIndex := out_Tmp_1249;
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    call {:si_unique_call 2516} sdv_RtlCopyMemory(0, 0, Mem_T.INT4[in_bytesTransferred]);
    out_Tmp_1242 := out_truncationIndex;
    assume {:nonnull} out_devIdBuffer != 0;
    assume out_devIdBuffer > 0;
    Mem_T.INT4[out_devIdBuffer + out_Tmp_1242 * 4] := 0;
    goto L55;

  anon68_Then:
    assume {:partition} out_length_3 >= Mem_T.INT4[in_bytesTransferred];
    goto L77;

  L77:
    assume {:nonnull} in_bytesTransferred != 0;
    assume in_bytesTransferred > 0;
    out_Tmp_1249 := Mem_T.INT4[in_bytesTransferred];
    goto L80;

  anon90_Then:
    assume {:partition} in_minValidDevId_1 > out_length_3;
    goto L77;

  anon89_Then:
    assume {:partition} out_devIdBuffer == 0;
    goto L55;

  anon67_Then:
    assume {:partition} in_minValidDevId_1 > Mem_T.INT4[in_bytesTransferred];
    goto L55;

  anon66_Then:
    assume {:partition} 0 > out_status_39;
    goto L55;

  anon78_Then:
    assume {:partition} out_tmpBuf == 0;
    goto L44;

  anon61_Then:
    assume {:partition} out_status_39 != 0;
    goto L29;
}



procedure {:LoopProcedure} P4ReadRawIeee1284DeviceId_loop_L23(in_Tmp_1239: int, in_Tmp_1240: int, in_deviceIndex: int, in_tmpBufLen_3: int, in_Tmp_1242: int, in_length_3: int, in_tryCount: int, in_minValidDevId_1: int, in_ignoreXflag: int, in_truncationIndex: int, in_ieeeState: int, in_Tmp_1246: int, in_Tmp_1248: int, in_sdv_804: int, in_Tmp_1249: int, in_maxTries_2: int, in_Tmp_1253: int, in_sdv_805: int, in_sdv_806: int, in_sdv_807: int, in_sdv_808: int, in_Tmp_1257: int, in_lowLengthByte: int, in_bytesTransferred: int, in_sdv_810: int, in_sdv_811: int, in_Tmp_1258: int, in_tmpBuf: int, in_Tmp_1259: int, in_highLengthByte: int, in_sdv_812: int, in_status_39: int, in_devIdBuffer: int, in_sdv_813: int, in_Controller_18: int) returns (out_Tmp_1239: int, out_Tmp_1240: int, out_deviceIndex: int, out_tmpBufLen_3: int, out_Tmp_1242: int, out_length_3: int, out_tryCount: int, out_ignoreXflag: int, out_truncationIndex: int, out_Tmp_1246: int, out_Tmp_1248: int, out_sdv_804: int, out_Tmp_1249: int, out_Tmp_1253: int, out_sdv_805: int, out_sdv_806: int, out_sdv_807: int, out_sdv_808: int, out_Tmp_1257: int, out_lowLengthByte: int, out_sdv_810: int, out_sdv_811: int, out_Tmp_1258: int, out_tmpBuf: int, out_Tmp_1259: int, out_highLengthByte: int, out_sdv_812: int, out_status_39: int, out_devIdBuffer: int, out_sdv_813: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_tmpBufLen_3 == 1024 || out_tmpBufLen_3 == in_tmpBufLen_3;
  free ensures {:va_keep} out_ignoreXflag == 1 || out_ignoreXflag == in_ignoreXflag;
  free ensures {:va_keep} out_status_39 == -1073741435 || out_status_39 == 0 || out_status_39 == -1073741808 || out_status_39 == in_status_39;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation StringChr_loop_L5(in_string_1: int, in_c_1: int)
{

  entry:
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_string_1 != 0;
    assume in_string_1 > 0;
    goto anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[in_string_1] != 0;
    assume {:nonnull} in_string_1 != 0;
    assume in_string_1 > 0;
    goto anon9_Then;

  anon9_Then:
    assume {:partition} Mem_T.INT4[in_string_1] != in_c_1;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    call {:si_unique_call 2529} {:si_old_unique_call 1} StringChr_loop_L5(in_string_1, in_c_1);
    return;
}



procedure {:LoopProcedure} StringChr_loop_L5(in_string_1: int, in_c_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptFdoSurpriseRemoval_loop_L17(in_Tmp_1324: int, in_cancelIrql: int, in_sdv_859: int, in_sdv_860: int, in_fdx_22: int, in_nextIrp: int, in_DeviceObject_27: int) returns (out_Tmp_1324: int, out_cancelIrql: int, out_sdv_859: int, out_sdv_860: int, out_nextIrp: int)
{
  var vslice_dummy_var_3299: int;

  entry:
    out_Tmp_1324, out_cancelIrql, out_sdv_859, out_sdv_860, out_nextIrp := in_Tmp_1324, in_cancelIrql, in_sdv_859, in_sdv_860, in_nextIrp;
    goto L17, exit;

  exit:
    return;

  L17:
    call {:si_unique_call 2530} out_sdv_859 := sdv_IsListEmpty(0);
    goto anon3_Then;

  anon3_Then:
    assume {:partition} out_sdv_859 == 0;
    assume {:nonnull} in_fdx_22 != 0;
    assume in_fdx_22 > 0;
    havoc vslice_dummy_var_3299;
    call {:si_unique_call 2531} out_sdv_860 := sdv_containing_record(vslice_dummy_var_3299, 88);
    out_nextIrp := out_sdv_860;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2532} PptCancelRoutine(in_DeviceObject_27, out_nextIrp);
    call {:si_unique_call 2533} out_Tmp_1324 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1324 != 0;
    assume out_Tmp_1324 > 0;
    Mem_T.INT4[out_Tmp_1324] := out_cancelIrql;
    call {:si_unique_call 2534} IoAcquireCancelSpinLock(out_Tmp_1324);
    assume {:nonnull} out_Tmp_1324 != 0;
    assume out_Tmp_1324 > 0;
    out_cancelIrql := Mem_T.INT4[out_Tmp_1324];
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    call {:si_unique_call 2535} {:si_old_unique_call 1} out_Tmp_1324, out_cancelIrql, out_sdv_859, out_sdv_860, out_nextIrp := PptFdoSurpriseRemoval_loop_L17(out_Tmp_1324, out_cancelIrql, out_sdv_859, out_sdv_860, in_fdx_22, out_nextIrp, in_DeviceObject_27);
    return;
}



procedure {:LoopProcedure} PptFdoSurpriseRemoval_loop_L17(in_Tmp_1324: int, in_cancelIrql: int, in_sdv_859: int, in_sdv_860: int, in_fdx_22: int, in_nextIrp: int, in_DeviceObject_27: int) returns (out_Tmp_1324: int, out_cancelIrql: int, out_sdv_859: int, out_sdv_860: int, out_nextIrp: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} out_sdv_859 == 1 || out_sdv_859 == 0 || out_sdv_859 == in_sdv_859;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:SIextraRecBound 3} PptFdoRemoveDevice_loop_L24(in_Tmp_1332: int, in_daisyChainId_1: int, in_Tmp_1334: int, in_daisyChainMaxId: int, in_Tmp_1335: int, in_fdx_24: int, in_Tmp_1337: int, in_pdo_5: int, in_Tmp_1338: int, in_Tmp_1339: int) returns (out_Tmp_1332: int, out_daisyChainId_1: int, out_Tmp_1334: int, out_Tmp_1335: int, out_Tmp_1337: int, out_pdo_5: int, out_Tmp_1338: int, out_Tmp_1339: int)
{

  entry:
    out_Tmp_1332, out_daisyChainId_1, out_Tmp_1334, out_Tmp_1335, out_Tmp_1337, out_pdo_5, out_Tmp_1338, out_Tmp_1339 := in_Tmp_1332, in_daisyChainId_1, in_Tmp_1334, in_Tmp_1335, in_Tmp_1337, in_pdo_5, in_Tmp_1338, in_Tmp_1339;
    goto L24, exit;

  exit:
    return;

  L24:
    goto anon18_Else;

  anon18_Else:
    assume {:partition} in_daisyChainMaxId >= out_daisyChainId_1;
    out_Tmp_1332 := out_daisyChainId_1;
    assume {:nonnull} in_fdx_24 != 0;
    assume in_fdx_24 > 0;
    havoc out_Tmp_1337;
    assume {:nonnull} out_Tmp_1337 != 0;
    assume out_Tmp_1337 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    out_Tmp_1335 := out_daisyChainId_1;
    assume {:nonnull} in_fdx_24 != 0;
    assume in_fdx_24 > 0;
    havoc out_Tmp_1334;
    assume {:nonnull} out_Tmp_1334 != 0;
    assume out_Tmp_1334 > 0;
    havoc out_pdo_5;
    call {:si_unique_call 2536} P4DestroyPdo(out_pdo_5);
    out_Tmp_1338 := out_daisyChainId_1;
    assume {:nonnull} in_fdx_24 != 0;
    assume in_fdx_24 > 0;
    havoc out_Tmp_1339;
    assume {:nonnull} out_Tmp_1339 != 0;
    assume out_Tmp_1339 > 0;
    goto L27;

  L27:
    out_daisyChainId_1 := out_daisyChainId_1 + 1;
    goto L27_dummy;

  L27_dummy:
    call {:si_unique_call 2537} {:si_old_unique_call 1} out_Tmp_1332, out_daisyChainId_1, out_Tmp_1334, out_Tmp_1335, out_Tmp_1337, out_pdo_5, out_Tmp_1338, out_Tmp_1339 := PptFdoRemoveDevice_loop_L24(out_Tmp_1332, out_daisyChainId_1, out_Tmp_1334, in_daisyChainMaxId, out_Tmp_1335, in_fdx_24, out_Tmp_1337, out_pdo_5, out_Tmp_1338, out_Tmp_1339);
    return;

  anon24_Then:
    goto L27;
}



procedure {:LoopProcedure} PptFdoRemoveDevice_loop_L24(in_Tmp_1332: int, in_daisyChainId_1: int, in_Tmp_1334: int, in_daisyChainMaxId: int, in_Tmp_1335: int, in_fdx_24: int, in_Tmp_1337: int, in_pdo_5: int, in_Tmp_1338: int, in_Tmp_1339: int) returns (out_Tmp_1332: int, out_daisyChainId_1: int, out_Tmp_1334: int, out_Tmp_1335: int, out_Tmp_1337: int, out_pdo_5: int, out_Tmp_1338: int, out_Tmp_1339: int);
  modifies alloc, Mem_T.Buffer__UNICODE_STRING, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptDetectEppPort_loop_L21(in_i_35: int, in_Controller_21: int, in_sdv_880: int) returns (out_i_35: int, out_sdv_880: int)
{

  entry:
    out_i_35, out_sdv_880 := in_i_35, in_sdv_880;
    goto L21, exit;

  exit:
    return;

  L21:
    assume {:CounterLoop 1} {:Counter "i_35"} true;
    goto anon5_Else;

  anon5_Else:
    assume {:partition} 2 >= out_i_35;
    call {:si_unique_call 2538} out_sdv_880 := corral_nondet();
    goto anon6_Then;

  anon6_Then:
    assume {:partition} out_sdv_880 == out_i_35;
    out_i_35 := out_i_35 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    havoc out_i_35;
    return;
}



procedure {:LoopProcedure} PptDetectEppPort_loop_L21(in_i_35: int, in_Controller_21: int, in_sdv_880: int) returns (out_i_35: int, out_sdv_880: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptBuildResourceList_loop_L11(in_i_36: int, in_Tmp_1368: int, in_Tmp_1370: int, in_Tmp_1372: int, in_Tmp_1373: int, in_Tmp_1374: int, in_Tmp_1375: int, in_Tmp_1376: int, in_Tmp_1377: int, in_Tmp_1378: int, in_Tmp_1381: int, in_Tmp_1383: int, in_Tmp_1384: int, in_Tmp_1385: int, in_Tmp_1386: int, in_Tmp_1387: int, in_Tmp_1388: int, in_Partial: int, in_Addresses: int, in_Resources_1: int) returns (out_i_36: int, out_Tmp_1368: int, out_Tmp_1370: int, out_Tmp_1372: int, out_Tmp_1373: int, out_Tmp_1374: int, out_Tmp_1375: int, out_Tmp_1376: int, out_Tmp_1377: int, out_Tmp_1378: int, out_Tmp_1381: int, out_Tmp_1383: int, out_Tmp_1384: int, out_Tmp_1385: int, out_Tmp_1386: int, out_Tmp_1387: int, out_Tmp_1388: int)
{

  entry:
    out_i_36, out_Tmp_1368, out_Tmp_1370, out_Tmp_1372, out_Tmp_1373, out_Tmp_1374, out_Tmp_1375, out_Tmp_1376, out_Tmp_1377, out_Tmp_1378, out_Tmp_1381, out_Tmp_1383, out_Tmp_1384, out_Tmp_1385, out_Tmp_1386, out_Tmp_1387, out_Tmp_1388 := in_i_36, in_Tmp_1368, in_Tmp_1370, in_Tmp_1372, in_Tmp_1373, in_Tmp_1374, in_Tmp_1375, in_Tmp_1376, in_Tmp_1377, in_Tmp_1378, in_Tmp_1381, in_Tmp_1383, in_Tmp_1384, in_Tmp_1385, in_Tmp_1386, in_Tmp_1387, in_Tmp_1388;
    goto L11, exit;

  exit:
    return;

  L11:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_Partial > out_i_36;
    out_Tmp_1374 := out_i_36;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1387;
    assume {:nonnull} out_Tmp_1387 != 0;
    assume out_Tmp_1387 > 0;
    havoc out_Tmp_1368;
    assume {:nonnull} out_Tmp_1368 != 0;
    assume out_Tmp_1368 > 0;
    out_Tmp_1378 := out_i_36;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1381;
    assume {:nonnull} out_Tmp_1381 != 0;
    assume out_Tmp_1381 > 0;
    havoc out_Tmp_1377;
    assume {:nonnull} out_Tmp_1377 != 0;
    assume out_Tmp_1377 > 0;
    out_Tmp_1383 := out_i_36;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1388;
    assume {:nonnull} out_Tmp_1388 != 0;
    assume out_Tmp_1388 > 0;
    havoc out_Tmp_1376;
    assume {:nonnull} out_Tmp_1376 != 0;
    assume out_Tmp_1376 > 0;
    out_Tmp_1372 := out_i_36;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1373;
    assume {:nonnull} out_Tmp_1373 != 0;
    assume out_Tmp_1373 > 0;
    havoc out_Tmp_1386;
    out_Tmp_1384 := out_i_36;
    assume {:nonnull} in_Addresses != 0;
    assume in_Addresses > 0;
    assume {:nonnull} out_Tmp_1386 != 0;
    assume out_Tmp_1386 > 0;
    out_Tmp_1385 := out_i_36;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1370;
    assume {:nonnull} out_Tmp_1370 != 0;
    assume out_Tmp_1370 > 0;
    havoc out_Tmp_1375;
    assume {:nonnull} out_Tmp_1375 != 0;
    assume out_Tmp_1375 > 0;
    out_i_36 := out_i_36 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2539} {:si_old_unique_call 1} out_i_36, out_Tmp_1368, out_Tmp_1370, out_Tmp_1372, out_Tmp_1373, out_Tmp_1374, out_Tmp_1375, out_Tmp_1376, out_Tmp_1377, out_Tmp_1378, out_Tmp_1381, out_Tmp_1383, out_Tmp_1384, out_Tmp_1385, out_Tmp_1386, out_Tmp_1387, out_Tmp_1388 := PptBuildResourceList_loop_L11(out_i_36, out_Tmp_1368, out_Tmp_1370, out_Tmp_1372, out_Tmp_1373, out_Tmp_1374, out_Tmp_1375, out_Tmp_1376, out_Tmp_1377, out_Tmp_1378, out_Tmp_1381, out_Tmp_1383, out_Tmp_1384, out_Tmp_1385, out_Tmp_1386, out_Tmp_1387, out_Tmp_1388, in_Partial, in_Addresses, in_Resources_1);
    return;
}



procedure {:LoopProcedure} PptBuildResourceList_loop_L11(in_i_36: int, in_Tmp_1368: int, in_Tmp_1370: int, in_Tmp_1372: int, in_Tmp_1373: int, in_Tmp_1374: int, in_Tmp_1375: int, in_Tmp_1376: int, in_Tmp_1377: int, in_Tmp_1378: int, in_Tmp_1381: int, in_Tmp_1383: int, in_Tmp_1384: int, in_Tmp_1385: int, in_Tmp_1386: int, in_Tmp_1387: int, in_Tmp_1388: int, in_Partial: int, in_Addresses: int, in_Resources_1: int) returns (out_i_36: int, out_Tmp_1368: int, out_Tmp_1370: int, out_Tmp_1372: int, out_Tmp_1373: int, out_Tmp_1374: int, out_Tmp_1375: int, out_Tmp_1376: int, out_Tmp_1377: int, out_Tmp_1378: int, out_Tmp_1381: int, out_Tmp_1383: int, out_Tmp_1384: int, out_Tmp_1385: int, out_Tmp_1386: int, out_Tmp_1387: int, out_Tmp_1388: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptDetermineFifoDepth_loop_L49(in_Tmp_1389: int, in_limitCount: int, in_testData: int, in_sdv_889: int, in_readFifoDepth: int, in_Tmp_1395: int) returns (out_Tmp_1389: int, out_limitCount: int, out_testData: int, out_sdv_889: int, out_readFifoDepth: int, out_Tmp_1395: int)
{

  entry:
    out_Tmp_1389, out_limitCount, out_testData, out_sdv_889, out_readFifoDepth, out_Tmp_1395 := in_Tmp_1389, in_limitCount, in_testData, in_sdv_889, in_readFifoDepth, in_Tmp_1395;
    goto L49, exit;

  exit:
    return;

  L49:
    call {:si_unique_call 2540} out_sdv_889 := corral_nondet();
    out_Tmp_1395 := BAND(out_sdv_889, BOR(1, 2));
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_Tmp_1395 != 1;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 4098 >= out_limitCount;
    call {:si_unique_call 2541} out_testData := corral_nondet();
    out_Tmp_1389 := BAND(out_readFifoDepth, BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128));
    goto anon21_Then;

  anon21_Then:
    assume {:partition} out_testData == out_Tmp_1389;
    out_readFifoDepth := out_readFifoDepth + 1;
    out_limitCount := out_limitCount + 1;
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    call {:si_unique_call 2542} {:si_old_unique_call 1} out_Tmp_1389, out_limitCount, out_testData, out_sdv_889, out_readFifoDepth, out_Tmp_1395 := PptDetermineFifoDepth_loop_L49(out_Tmp_1389, out_limitCount, out_testData, out_sdv_889, out_readFifoDepth, out_Tmp_1395);
    return;
}



procedure {:LoopProcedure} PptDetermineFifoDepth_loop_L49(in_Tmp_1389: int, in_limitCount: int, in_testData: int, in_sdv_889: int, in_readFifoDepth: int, in_Tmp_1395: int) returns (out_Tmp_1389: int, out_limitCount: int, out_testData: int, out_sdv_889: int, out_readFifoDepth: int, out_Tmp_1395: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptDetermineFifoDepth_loop_L35(in_limitCount: int, in_writeFifoDepth: int, in_sdv_888: int, in_Tmp_1393: int) returns (out_limitCount: int, out_writeFifoDepth: int, out_sdv_888: int, out_Tmp_1393: int)
{

  entry:
    out_limitCount, out_writeFifoDepth, out_sdv_888, out_Tmp_1393 := in_limitCount, in_writeFifoDepth, in_sdv_888, in_Tmp_1393;
    goto L35, exit;

  exit:
    return;

  L35:
    call {:si_unique_call 2543} out_sdv_888 := corral_nondet();
    out_Tmp_1393 := BAND(out_sdv_888, BOR(1, 2));
    goto anon19_Else;

  anon19_Else:
    assume {:partition} out_Tmp_1393 != 2;
    goto anon15_Else;

  anon15_Else:
    assume {:partition} 4098 >= out_limitCount;
    out_writeFifoDepth := out_writeFifoDepth + 1;
    out_limitCount := out_limitCount + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    call {:si_unique_call 2544} {:si_old_unique_call 1} out_limitCount, out_writeFifoDepth, out_sdv_888, out_Tmp_1393 := PptDetermineFifoDepth_loop_L35(out_limitCount, out_writeFifoDepth, out_sdv_888, out_Tmp_1393);
    return;
}



procedure {:LoopProcedure} PptDetermineFifoDepth_loop_L35(in_limitCount: int, in_writeFifoDepth: int, in_sdv_888: int, in_Tmp_1393: int) returns (out_limitCount: int, out_writeFifoDepth: int, out_sdv_888: int, out_Tmp_1393: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptTrySelectDevice#0_loop_L34(in_i_22: int, in_Tmp_886: int, in_success: int, in_Extension_47: int, in_DeviceID: int) returns (out_i_22: int, out_Tmp_886: int, out_success: int)
{
  var vslice_dummy_var_3300: int;

  entry:
    out_i_22, out_Tmp_886, out_success := in_i_22, in_Tmp_886, in_success;
    goto L34, exit;

  exit:
    return;

  L34:
    goto anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > out_i_22;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_success == 0;
    out_Tmp_886 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_47 != 0;
    assume in_Extension_47 > 0;
    havoc vslice_dummy_var_3300;
    call {:si_unique_call 2545} out_success := PptSend1284_3Command(vslice_dummy_var_3300, out_Tmp_886);
    out_i_22 := out_i_22 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 2546} {:si_old_unique_call 1} out_i_22, out_Tmp_886, out_success := PptTrySelectDevice#0_loop_L34(out_i_22, out_Tmp_886, out_success, in_Extension_47, in_DeviceID);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#0_loop_L34(in_i_22: int, in_Tmp_886: int, in_success: int, in_Extension_47: int, in_DeviceID: int) returns (out_i_22: int, out_Tmp_886: int, out_success: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_886 == in_Tmp_886 || out_Tmp_886 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptTrySelectDevice#0_loop_L69(in_i_22: int, in_success: int, in_Extension_47: int, in_DeviceID: int, in_Tmp_888: int) returns (out_i_22: int, out_success: int, out_Tmp_888: int)
{
  var vslice_dummy_var_3301: int;

  entry:
    out_i_22, out_success, out_Tmp_888 := in_i_22, in_success, in_Tmp_888;
    goto L69, exit;

  exit:
    return;

  L69:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > out_i_22;
    goto anon47_Else;

  anon47_Else:
    assume {:partition} out_success == 0;
    out_Tmp_888 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_47 != 0;
    assume in_Extension_47 > 0;
    havoc vslice_dummy_var_3301;
    call {:si_unique_call 2547} out_success := PptSend1284_3Command(vslice_dummy_var_3301, out_Tmp_888);
    out_i_22 := out_i_22 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    call {:si_unique_call 2548} {:si_old_unique_call 1} out_i_22, out_success, out_Tmp_888 := PptTrySelectDevice#0_loop_L69(out_i_22, out_success, in_Extension_47, in_DeviceID, out_Tmp_888);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#0_loop_L69(in_i_22: int, in_success: int, in_Extension_47: int, in_DeviceID: int, in_Tmp_888: int) returns (out_i_22: int, out_success: int, out_Tmp_888: int);
  modifies alloc;
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} out_Tmp_888 == in_Tmp_888 || out_Tmp_888 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptTrySelectDevice#1_loop_L34(in_i_22: int, in_Tmp_886: int, in_success: int, in_Extension_47: int, in_DeviceID: int) returns (out_i_22: int, out_Tmp_886: int, out_success: int)
{
  var vslice_dummy_var_3302: int;

  entry:
    out_i_22, out_Tmp_886, out_success := in_i_22, in_Tmp_886, in_success;
    goto L34, exit;

  exit:
    return;

  L34:
    goto anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > out_i_22;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_success == 0;
    out_Tmp_886 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_47 != 0;
    assume in_Extension_47 > 0;
    havoc vslice_dummy_var_3302;
    call {:si_unique_call 2549} out_success := PptSend1284_3Command(vslice_dummy_var_3302, out_Tmp_886);
    out_i_22 := out_i_22 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 2550} {:si_old_unique_call 1} out_i_22, out_Tmp_886, out_success := PptTrySelectDevice#1_loop_L34(out_i_22, out_Tmp_886, out_success, in_Extension_47, in_DeviceID);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#1_loop_L34(in_i_22: int, in_Tmp_886: int, in_success: int, in_Extension_47: int, in_DeviceID: int) returns (out_i_22: int, out_Tmp_886: int, out_success: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_886 == in_Tmp_886 || out_Tmp_886 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptTrySelectDevice#1_loop_L69(in_i_22: int, in_success: int, in_Extension_47: int, in_DeviceID: int, in_Tmp_888: int) returns (out_i_22: int, out_success: int, out_Tmp_888: int)
{
  var vslice_dummy_var_3303: int;

  entry:
    out_i_22, out_success, out_Tmp_888 := in_i_22, in_success, in_Tmp_888;
    goto L69, exit;

  exit:
    return;

  L69:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > out_i_22;
    goto anon47_Else;

  anon47_Else:
    assume {:partition} out_success == 0;
    out_Tmp_888 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_47 != 0;
    assume in_Extension_47 > 0;
    havoc vslice_dummy_var_3303;
    call {:si_unique_call 2551} out_success := PptSend1284_3Command(vslice_dummy_var_3303, out_Tmp_888);
    out_i_22 := out_i_22 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    call {:si_unique_call 2552} {:si_old_unique_call 1} out_i_22, out_success, out_Tmp_888 := PptTrySelectDevice#1_loop_L69(out_i_22, out_success, in_Extension_47, in_DeviceID, out_Tmp_888);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#1_loop_L69(in_i_22: int, in_success: int, in_Extension_47: int, in_DeviceID: int, in_Tmp_888: int) returns (out_i_22: int, out_success: int, out_Tmp_888: int);
  modifies alloc;
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} out_Tmp_888 == in_Tmp_888 || out_Tmp_888 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptDeselectLegacyZip#0_loop_L11(in_i_30: int, in_Tmp_1051: int, in_Controller_9: int, in_Tmp_1052: int) returns (out_i_30: int, out_Tmp_1051: int, out_Tmp_1052: int)
{

  entry:
    out_i_30, out_Tmp_1051, out_Tmp_1052 := in_i_30, in_Tmp_1051, in_Tmp_1052;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 3} {:Counter "i_30"} true;
    goto anon5_Else;

  anon5_Else:
    assume {:partition} 3 > out_i_30;
    out_Tmp_1052 := out_i_30;
    havoc out_Tmp_1051;
    call {:si_unique_call 2553} PptLegacyZipClockPrtModeByte(in_Controller_9, out_Tmp_1051);
    out_i_30 := out_i_30 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    havoc out_i_30;
    return;
}



procedure {:LoopProcedure} PptDeselectLegacyZip#0_loop_L11(in_i_30: int, in_Tmp_1051: int, in_Controller_9: int, in_Tmp_1052: int) returns (out_i_30: int, out_Tmp_1051: int, out_Tmp_1052: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1052 == in_i_30 || out_Tmp_1052 == in_Tmp_1052;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptDeselectLegacyZip#1_loop_L11(in_i_30: int, in_Tmp_1051: int, in_Controller_9: int, in_Tmp_1052: int) returns (out_i_30: int, out_Tmp_1051: int, out_Tmp_1052: int)
{

  entry:
    out_i_30, out_Tmp_1051, out_Tmp_1052 := in_i_30, in_Tmp_1051, in_Tmp_1052;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 3} {:Counter "i_30"} true;
    goto anon5_Else;

  anon5_Else:
    assume {:partition} 3 > out_i_30;
    out_Tmp_1052 := out_i_30;
    havoc out_Tmp_1051;
    call {:si_unique_call 2554} PptLegacyZipClockPrtModeByte(in_Controller_9, out_Tmp_1051);
    out_i_30 := out_i_30 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    havoc out_i_30;
    return;
}



procedure {:LoopProcedure} PptDeselectLegacyZip#1_loop_L11(in_i_30: int, in_Tmp_1051: int, in_Controller_9: int, in_Tmp_1052: int) returns (out_i_30: int, out_Tmp_1051: int, out_Tmp_1052: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1052 == in_i_30 || out_Tmp_1052 == in_Tmp_1052;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptFreePort#0_loop_L29(in_Irp_33: int, in_Allocated: int, in_IrpSp: int, in_sdv_767: int, in_Tmp_1167: int, in_Head: int, in_fdx_13: int, in_CancelIrql_2: int, in_SyncContext_2: int, in_vslice_dummy_var_438: int, in_vslice_dummy_var_439: int, in_vslice_dummy_var_440: int, in_vslice_dummy_var_441: int, in_vslice_dummy_var_442: int) returns (out_Irp_33: int, out_Allocated: int, out_IrpSp: int, out_sdv_767: int, out_Tmp_1167: int, out_Head: int, out_CancelIrql_2: int, out_vslice_dummy_var_438: int, out_vslice_dummy_var_439: int, out_vslice_dummy_var_440: int, out_vslice_dummy_var_441: int, out_vslice_dummy_var_442: int)
{
  var vslice_dummy_var_3304: int;

  entry:
    out_Irp_33, out_Allocated, out_IrpSp, out_sdv_767, out_Tmp_1167, out_Head, out_CancelIrql_2, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442 := in_Irp_33, in_Allocated, in_IrpSp, in_sdv_767, in_Tmp_1167, in_Head, in_CancelIrql_2, in_vslice_dummy_var_438, in_vslice_dummy_var_439, in_vslice_dummy_var_440, in_vslice_dummy_var_441, in_vslice_dummy_var_442;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon20_Then;

  anon20_Then:
    assume {:partition} out_Allocated == 0;
    assume {:nonnull} in_SyncContext_2 != 0;
    assume in_SyncContext_2 > 0;
    goto anon21_Else;

  anon21_Else:
    call {:si_unique_call 2562} out_Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1167 != 0;
    assume out_Tmp_1167 > 0;
    Mem_T.INT4[out_Tmp_1167] := out_CancelIrql_2;
    call {:si_unique_call 2563} IoAcquireCancelSpinLock(out_Tmp_1167);
    assume {:nonnull} out_Tmp_1167 != 0;
    assume out_Tmp_1167 > 0;
    out_CancelIrql_2 := Mem_T.INT4[out_Tmp_1167];
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    call {:si_unique_call 2564} out_Head := RemoveHeadList(WorkQueue__FDO_EXTENSION(in_fdx_13));
    goto anon24_Then;

  anon24_Then:
    call {:si_unique_call 2560} out_sdv_767 := sdv_containing_record(out_Head, 88);
    out_Irp_33 := out_sdv_767;
    call {:si_unique_call 2561} out_vslice_dummy_var_442 := PptSetCancelRoutine(out_Irp_33, 0);
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_33))] := -1073741536;
    assume {:nonnull} in_SyncContext_2 != 0;
    assume in_SyncContext_2 > 0;
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2565} out_vslice_dummy_var_439 := KeSynchronizeExecution(0, li2bplFunctionConstant193, in_SyncContext_2);
    goto L74;

  L74:
    call {:si_unique_call 2557} IoReleaseCancelSpinLock(out_CancelIrql_2);
    goto L77;

  L77:
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    call {:si_unique_call 2555} out_vslice_dummy_var_440 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(in_fdx_13), out_Irp_33);
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    havoc vslice_dummy_var_3304;
    call {:si_unique_call 2556} out_vslice_dummy_var_441 := P4CompleteRequest(out_Irp_33, Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_33))], vslice_dummy_var_3304);
    goto L77_dummy;

  L77_dummy:
    call {:si_unique_call 2567} {:si_old_unique_call 1} out_Irp_33, out_Allocated, out_IrpSp, out_sdv_767, out_Tmp_1167, out_Head, out_CancelIrql_2, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442 := PptFreePort#0_loop_L29(out_Irp_33, out_Allocated, out_IrpSp, out_sdv_767, out_Tmp_1167, out_Head, in_fdx_13, out_CancelIrql_2, in_SyncContext_2, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442);
    return;

  anon27_Then:
    call {:si_unique_call 2566} out_vslice_dummy_var_438 := PptSynchronizedDecrement(in_SyncContext_2);
    goto L74;

  anon25_Then:
    out_Allocated := 1;
    call {:si_unique_call 2558} IoReleaseCancelSpinLock(out_CancelIrql_2);
    call {:si_unique_call 2559} out_IrpSp := sdv_IoGetCurrentIrpStackLocation(out_Irp_33);
    assume {:nonnull} out_IrpSp != 0;
    assume out_IrpSp > 0;
    goto anon26_Then;

  anon26_Then:
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_33))] := 0;
    goto L98;

  L98:
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    goto L77;
}



procedure {:LoopProcedure} PptFreePort#0_loop_L29(in_Irp_33: int, in_Allocated: int, in_IrpSp: int, in_sdv_767: int, in_Tmp_1167: int, in_Head: int, in_fdx_13: int, in_CancelIrql_2: int, in_SyncContext_2: int, in_vslice_dummy_var_438: int, in_vslice_dummy_var_439: int, in_vslice_dummy_var_440: int, in_vslice_dummy_var_441: int, in_vslice_dummy_var_442: int) returns (out_Irp_33: int, out_Allocated: int, out_IrpSp: int, out_sdv_767: int, out_Tmp_1167: int, out_Head: int, out_CancelIrql_2: int, out_vslice_dummy_var_438: int, out_vslice_dummy_var_439: int, out_vslice_dummy_var_440: int, out_vslice_dummy_var_441: int, out_vslice_dummy_var_442: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} out_Allocated == 1 || out_Allocated == in_Allocated;
  free ensures {:va_keep} out_vslice_dummy_var_438 == 1 || out_vslice_dummy_var_438 == in_vslice_dummy_var_438;
  free ensures {:va_keep} out_vslice_dummy_var_439 == 0 || out_vslice_dummy_var_439 == in_vslice_dummy_var_439;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation PptFreePort#1_loop_L29(in_Irp_33: int, in_Allocated: int, in_IrpSp: int, in_sdv_767: int, in_Tmp_1167: int, in_Command_5: int, in_Head: int, in_fdx_13: int, in_CancelIrql_2: int, in_SyncContext_2: int, in_Fdx_8: int, in_boogieTmp: int, in_vslice_dummy_var_447: int, in_vslice_dummy_var_448: int, in_vslice_dummy_var_449: int, in_vslice_dummy_var_450: int, in_vslice_dummy_var_451: int) returns (out_Irp_33: int, out_Allocated: int, out_IrpSp: int, out_sdv_767: int, out_Tmp_1167: int, out_Command_5: int, out_Head: int, out_CancelIrql_2: int, out_boogieTmp: int, out_vslice_dummy_var_447: int, out_vslice_dummy_var_448: int, out_vslice_dummy_var_449: int, out_vslice_dummy_var_450: int, out_vslice_dummy_var_451: int)
{
  var vslice_dummy_var_3305: int;

  entry:
    out_Irp_33, out_Allocated, out_IrpSp, out_sdv_767, out_Tmp_1167, out_Command_5, out_Head, out_CancelIrql_2, out_boogieTmp, out_vslice_dummy_var_447, out_vslice_dummy_var_448, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451 := in_Irp_33, in_Allocated, in_IrpSp, in_sdv_767, in_Tmp_1167, in_Command_5, in_Head, in_CancelIrql_2, in_boogieTmp, in_vslice_dummy_var_447, in_vslice_dummy_var_448, in_vslice_dummy_var_449, in_vslice_dummy_var_450, in_vslice_dummy_var_451;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon20_Then;

  anon20_Then:
    assume {:partition} out_Allocated == 0;
    assume {:nonnull} in_SyncContext_2 != 0;
    assume in_SyncContext_2 > 0;
    goto anon21_Else;

  anon21_Else:
    call {:si_unique_call 2576} out_Tmp_1167 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1167 != 0;
    assume out_Tmp_1167 > 0;
    Mem_T.INT4[out_Tmp_1167] := out_CancelIrql_2;
    call {:si_unique_call 2577} IoAcquireCancelSpinLock(out_Tmp_1167);
    assume {:nonnull} out_Tmp_1167 != 0;
    assume out_Tmp_1167 > 0;
    out_CancelIrql_2 := Mem_T.INT4[out_Tmp_1167];
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    call {:si_unique_call 2578} out_Head := RemoveHeadList(WorkQueue__FDO_EXTENSION(in_fdx_13));
    goto anon24_Then;

  anon24_Then:
    call {:si_unique_call 2574} out_sdv_767 := sdv_containing_record(out_Head, 88);
    out_Irp_33 := out_sdv_767;
    call {:si_unique_call 2575} out_vslice_dummy_var_451 := PptSetCancelRoutine(out_Irp_33, 0);
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_33))] := -1073741536;
    assume {:nonnull} in_SyncContext_2 != 0;
    assume in_SyncContext_2 > 0;
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2579} out_vslice_dummy_var_448 := KeSynchronizeExecution(0, li2bplFunctionConstant193, in_SyncContext_2);
    goto L74;

  L74:
    call {:si_unique_call 2570} IoReleaseCancelSpinLock(out_CancelIrql_2);
    goto L77;

  L77:
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    call {:si_unique_call 2568} out_vslice_dummy_var_449 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(in_fdx_13), out_Irp_33);
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    havoc vslice_dummy_var_3305;
    call {:si_unique_call 2569} out_vslice_dummy_var_450 := P4CompleteRequest(out_Irp_33, Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_33))], vslice_dummy_var_3305);
    goto L77_dummy;

  L77_dummy:
    call {:si_unique_call 2581} {:si_old_unique_call 1} out_Irp_33, out_Allocated, out_IrpSp, out_sdv_767, out_Tmp_1167, out_Command_5, out_Head, out_CancelIrql_2, out_boogieTmp, out_vslice_dummy_var_447, out_vslice_dummy_var_448, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451 := PptFreePort#1_loop_L29(out_Irp_33, out_Allocated, out_IrpSp, out_sdv_767, out_Tmp_1167, out_Command_5, out_Head, in_fdx_13, out_CancelIrql_2, in_SyncContext_2, in_Fdx_8, out_boogieTmp, out_vslice_dummy_var_447, out_vslice_dummy_var_448, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451);
    return;

  anon27_Then:
    call {:si_unique_call 2580} out_vslice_dummy_var_447 := PptSynchronizedDecrement(in_SyncContext_2);
    goto L74;

  anon25_Then:
    out_Allocated := 1;
    call {:si_unique_call 2572} IoReleaseCancelSpinLock(out_CancelIrql_2);
    call {:si_unique_call 2573} out_IrpSp := sdv_IoGetCurrentIrpStackLocation(out_Irp_33);
    assume {:nonnull} out_IrpSp != 0;
    assume out_IrpSp > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    havoc out_Command_5;
    assume {:nonnull} out_Command_5 != 0;
    assume out_Command_5 > 0;
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    call {:si_unique_call 2571} out_boogieTmp := PptTrySelectDevice#0(in_Fdx_8, out_Command_5);
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_33))] := out_boogieTmp;
    goto L98;

  L98:
    assume {:nonnull} in_fdx_13 != 0;
    assume in_fdx_13 > 0;
    goto L77;

  anon26_Then:
    assume {:nonnull} out_Irp_33 != 0;
    assume out_Irp_33 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_33))] := 0;
    goto L98;
}



procedure {:LoopProcedure} PptFreePort#1_loop_L29(in_Irp_33: int, in_Allocated: int, in_IrpSp: int, in_sdv_767: int, in_Tmp_1167: int, in_Command_5: int, in_Head: int, in_fdx_13: int, in_CancelIrql_2: int, in_SyncContext_2: int, in_Fdx_8: int, in_boogieTmp: int, in_vslice_dummy_var_447: int, in_vslice_dummy_var_448: int, in_vslice_dummy_var_449: int, in_vslice_dummy_var_450: int, in_vslice_dummy_var_451: int) returns (out_Irp_33: int, out_Allocated: int, out_IrpSp: int, out_sdv_767: int, out_Tmp_1167: int, out_Command_5: int, out_Head: int, out_CancelIrql_2: int, out_boogieTmp: int, out_vslice_dummy_var_447: int, out_vslice_dummy_var_448: int, out_vslice_dummy_var_449: int, out_vslice_dummy_var_450: int, out_vslice_dummy_var_451: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} out_Allocated == 1 || out_Allocated == in_Allocated;
  free ensures {:va_keep} out_boogieTmp == -1073741811 || out_boogieTmp == 0 || out_boogieTmp == -1073741823 || out_boogieTmp == 259 || out_boogieTmp == in_boogieTmp;
  free ensures {:va_keep} out_vslice_dummy_var_447 == 1 || out_vslice_dummy_var_447 == in_vslice_dummy_var_447;
  free ensures {:va_keep} out_vslice_dummy_var_448 == 0 || out_vslice_dummy_var_448 == in_vslice_dummy_var_448;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



procedure fakeMain() returns (Tmp_113: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, Mem_T.CurrentStackLocation_unnamed_tag_6, SLAM_guard_O_0, completion, s, yogi_error, Mem_T.Buffer__UNICODE_STRING, sdv_invoke_on_success, sdv_invoke_on_error, sdv_invoke_on_cancel, sdv_compFset, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(completion) == 1 || old(completion) == 0;
  free ensures {:va_keep} false || old(s) == 0 || old(s) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || completion == 1 || completion == 0;
  free ensures {:va_keep} false || s == 0 || s == 1;



implementation {:entrypoint} fakeMain() returns (Tmp_113: int, dup_assertVar: bool)
{

  start:
    call Tmp_113, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


