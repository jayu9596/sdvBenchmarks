var {:scalar} alloc: int;

var {:scalar} sdv_irql_previous_5: int;

var {:scalar} sdv_irql_previous_2: int;

var {:scalar} sdv_irql_current: int;

var {:scalar} sdv_irql_previous: int;

var {:scalar} sdv_irql_previous_4: int;

var {:scalar} sdv_irql_previous_3: int;

var {:scalar} yogi_error: int;

var {:scalar} Mem_T.CancelIrql__IRP: [int]int;

var {:scalar} Mem_T.VOID: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WPP_GLOBAL_Control: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const WPP_ThisDir_CTLGUID_USBCCGP: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const GUID_USB_CAPABILITY_DEVICE_CONNECTION_FULL_SPEED_COMPATIBLE: int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const GUID_BUS_TYPE_1394: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const IID_IDrmAudioStream: int;

const GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_BUS_TYPE_ISAPNP: int;

const WPP_TRACE_CONTROL_NULL_GUID: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const GUID_USB_CAPABILITY_STATIC_STREAMS: int;

const GUID_USB_CAPABILITY_FUNCTION_SUSPEND: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const GUID_DEVINTERFACE_USB_HUB: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const GUID_DEVINTERFACE_USB_DEVICE: int;

const GUID_USB_CAPABILITY_DEVICE_CONNECTION_LOW_SPEED_COMPATIBLE: int;

const DefaultTraceSecurityGuid: int;

const GUID_USB_CAPABILITY_SELECTIVE_SUSPEND: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const GUID_BUS_TYPE_ACPI: int;

const g_RecorderLog: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const GUID_BUS_TYPE_EISA: int;

const SystemTraceControlGuid: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_IRDA: int;

const IID_IKsControl: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_BUS_TYPE_SERENUM: int;

const GUID_DEVINTERFACE_USB_HOST_CONTROLLER: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const GUID_BUS_TYPE_MCA: int;

const GUID_USB_TRANSFER_TRACING: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const IID_IKsDeviceFunctions: int;

const USB_BUS_INTERFACE_USBC_CONFIGURATION_GUID: int;

const EventTraceConfigGuid: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const IID_IUnknown: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_USB_WMI_DEVICE_PERF_INFO: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_BUS_TYPE_AVC: int;

const GUID_USB_CAPABILITY_CHAINED_MDLS: int;

const GUID_USB_WMI_TRACING: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USB: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const GUID_USBD_INTERFACE_V1: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USBPRINT: int;

const IID_IKsFastClock: int;

const GUID_BUS_TYPE_PCI: int;

const GUID_USB_MSOS20_PLATFORM_CAPABILITY_ID: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const GUID_USB_CAPABILITY_DEVICE_CONNECTION_SUPER_SPEED_COMPATIBLE: int;

const GUID_USB_WMI_SURPRISE_REMOVAL_NOTIFICATION: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_USB_WMI_STD_DATA: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const GUID_BUS_TYPE_SD: int;

const EventTraceGuid: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_USB_WMI_NODE_INFO: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const GUID_USB_PERFORMANCE_TRACING: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const GUID_USB_WMI_STD_NOTIFICATION: int;

const USB_BUS_INTERFACE_USBDI_GUID: int;

const GUID_BUS_TYPE_HID: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

const ClassCompatibleIDs: int;

const GenericCompositeUSBDeviceString: int;

const gSetD0Tag: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_isr_routine: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_pDpcContext: int;

const sdv_harnessDeviceExtension: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_inside_init_entrypoint: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const gSetIdleTag: int;

const wmiInit: int;

const fdoGuidCount: int;

const wmiRegistryPath: int;

const sdv_cancelFptr: int;

procedure {:origName "USBC_DeviceControl"} USBC_DeviceControl(actual_devExt: int, actual_irp: int) returns (Tmp_2: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_DeviceControl"} USBC_DeviceControl(actual_devExt: int, actual_irp: int) returns (Tmp_2: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} parentFdoExt: int;
  var {:pointer} functionPdoExt: int;
  var {:scalar} ioControlCode: int;
  var {:scalar} status: int;
  var {:pointer} devExt: int;
  var {:pointer} irp: int;
  var vslice_dummy_var_0: int;

  anon0:
    devExt := actual_devExt;
    irp := actual_irp;
    call {:si_unique_call 0} irpSp := sdv_IoGetCurrentIrpStackLocation(irp);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    havoc ioControlCode;
    call {:si_unique_call 1} sdv_do_paged_code_check();
    assume {:nonnull} devExt != 0;
    assume devExt > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} devExt != 0;
    assume devExt > 0;
    parentFdoExt := parentFdoExt_DEVICE_EXTENSION(devExt);
    goto L19;

  L19:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 3080195 == ioControlCode;
    call {:si_unique_call 2} status := corral_nondet();
    call {:si_unique_call 3} UsbcCompleteIrp(parentFdoExt, status, irp);
    goto L28;

  L28:
    Tmp_2 := status;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} 3080195 != ioControlCode;
    assume {:nonnull} devExt != 0;
    assume devExt > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 4} status := DispatchFdoDeviceControl(parentFdoExt, irp);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:nonnull} parentFdoExt != 0;
    assume parentFdoExt > 0;
    havoc vslice_dummy_var_0;
    call {:si_unique_call 5} status := UsbcForwardIrp(parentFdoExt, vslice_dummy_var_0, irp);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:nonnull} devExt != 0;
    assume devExt > 0;
    functionPdoExt := functionPdoExt_DEVICE_EXTENSION(devExt);
    assume {:nonnull} functionPdoExt != 0;
    assume functionPdoExt > 0;
    havoc parentFdoExt;
    goto L19;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var {:scalar} Tmp_6: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_1: int;

  anon0:
    call {:si_unique_call 6} vslice_dummy_var_0 := __HAVOC_malloc(4);
    call {:si_unique_call 7} Tmp_6 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_6 != 0;
    assume Tmp_6 > 0;
    havoc vslice_dummy_var_1;
    Mem_T.VOID[Tmp_6] := vslice_dummy_var_1;
    return;
}



procedure {:origName "USBC_Dispatch"} USBC_Dispatch(actual_devObj: int, actual_irp_1: int) returns (Tmp_7: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_Dispatch"} USBC_Dispatch(actual_devObj: int, actual_irp_1: int) returns (Tmp_7: int)
{
  var {:scalar} pdoLatched: int;
  var {:scalar} majorFunction: int;
  var {:pointer} Tmp_8: int;
  var {:pointer} irpSp_1: int;
  var {:pointer} devExt_1: int;
  var {:pointer} Tmp_10: int;
  var {:pointer} parentFdoExt_1: int;
  var {:pointer} Tmp_11: int;
  var {:pointer} functionPdoExt_1: int;
  var {:scalar} isParentFdo: int;
  var {:scalar} status_1: int;
  var {:scalar} minorFunction: int;
  var {:pointer} devObj: int;
  var {:pointer} irp_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;

  anon0:
    devObj := actual_devObj;
    irp_1 := actual_irp_1;
    status_1 := 0;
    pdoLatched := 0;
    assume {:nonnull} devObj != 0;
    assume devObj > 0;
    havoc devExt_1;
    call {:si_unique_call 8} irpSp_1 := sdv_IoGetCurrentIrpStackLocation(irp_1);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    havoc majorFunction;
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    havoc minorFunction;
    assume {:nonnull} devExt_1 != 0;
    assume devExt_1 > 0;
    havoc isParentFdo;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} isParentFdo != 0;
    assume {:nonnull} devExt_1 != 0;
    assume devExt_1 > 0;
    parentFdoExt_1 := parentFdoExt_DEVICE_EXTENSION(devExt_1);
    functionPdoExt_1 := 0;
    goto L26;

  L26:
    call {:si_unique_call 9} status_1 := UsbcAcquireRemoveLock(parentFdoExt_1, -999263671, irp_1);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} status_1 < 0;
    havoc Tmp_11;
    call {:si_unique_call 10} WPP_RECORDER_SF_q(g_RecorderLog, 4, 1, 10, Tmp_11, irp_1);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} majorFunction == 22;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} minorFunction != 0;
    call {:si_unique_call 11} PoStartNextPowerIrp(0);
    goto L110;

  L110:
    status_1 := -1073741738;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    call {:si_unique_call 12} sdv_IoCompleteRequest(0, 0);
    goto L70;

  L70:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} pdoLatched != 0;
    call {:si_unique_call 13} UsbcDereferencePdo(functionPdoExt_1);
    goto L71;

  L71:
    Tmp_7 := status_1;
    goto LM2;

  LM2:
    return;

  anon54_Then:
    assume {:partition} pdoLatched == 0;
    goto L71;

  anon57_Then:
    assume {:partition} minorFunction == 0;
    goto L110;

  anon56_Then:
    assume {:partition} majorFunction != 22;
    goto L110;

  anon51_Then:
    assume {:partition} 0 <= status_1;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L43;

  L43:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} majorFunction != 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} majorFunction != 2;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} majorFunction != 14;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} majorFunction != 15;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} majorFunction != 22;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} majorFunction != 23;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} majorFunction != 27;
    havoc Tmp_10;
    assume {:nonnull} parentFdoExt_1 != 0;
    assume parentFdoExt_1 > 0;
    havoc vslice_dummy_var_2;
    call {:si_unique_call 14} WPP_RECORDER_SF_D(vslice_dummy_var_2, 2, 9, 12, Tmp_10, majorFunction);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} isParentFdo != 0;
    assume {:nonnull} parentFdoExt_1 != 0;
    assume parentFdoExt_1 > 0;
    havoc vslice_dummy_var_3;
    call {:si_unique_call 15} status_1 := UsbcForwardIrp(parentFdoExt_1, vslice_dummy_var_3, irp_1);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} isParentFdo == 0;
    status_1 := -1073741637;
    call {:si_unique_call 16} UsbcCompleteIrp(parentFdoExt_1, status_1, irp_1);
    goto L70;

  anon61_Then:
    assume {:partition} majorFunction == 27;
    call {:si_unique_call 17} status_1 := USBC_PnP(devExt_1, irp_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:partition} majorFunction == 23;
    call {:si_unique_call 18} status_1 := USBC_SystemControl(devExt_1, irp_1);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    assume {:partition} majorFunction == 22;
    call {:si_unique_call 19} status_1 := USBC_Power(devExt_1, irp_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    assume {:partition} majorFunction == 15;
    call {:si_unique_call 20} status_1 := USBC_InternalDeviceControl(devExt_1, irp_1);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon71_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    assume {:partition} majorFunction == 14;
    call {:si_unique_call 21} status_1 := USBC_DeviceControl(devExt_1, irp_1);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon70_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon66_Then:
    assume {:partition} majorFunction == 2;
    call {:si_unique_call 22} status_1 := USBC_Close(devExt_1, irp_1);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon69_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:partition} majorFunction == 0;
    call {:si_unique_call 23} status_1 := USBC_Create(devExt_1, irp_1);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} yogi_error != 1;
    goto L70;

  anon68_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    havoc Tmp_8;
    assume {:nonnull} parentFdoExt_1 != 0;
    assume parentFdoExt_1 > 0;
    havoc vslice_dummy_var_4;
    call {:si_unique_call 24} WPP_RECORDER_SF_qdd(vslice_dummy_var_4, 5, 9, 11, Tmp_8, devObj, majorFunction, minorFunction);
    goto L43;

  anon67_Then:
    assume {:partition} isParentFdo == 0;
    assume {:nonnull} devExt_1 != 0;
    assume devExt_1 > 0;
    functionPdoExt_1 := functionPdoExt_DEVICE_EXTENSION(devExt_1);
    assume {:nonnull} functionPdoExt_1 != 0;
    assume functionPdoExt_1 > 0;
    havoc parentFdoExt_1;
    call {:si_unique_call 25} status_1 := UsbcReferencePdo(functionPdoExt_1);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_1 >= 0;
    pdoLatched := 1;
    goto L26;

  anon58_Then:
    assume {:partition} 0 > status_1;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} majorFunction == 22;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} minorFunction != 0;
    call {:si_unique_call 26} PoStartNextPowerIrp(0);
    goto L129;

  L129:
    status_1 := -1073741738;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    call {:si_unique_call 27} sdv_IoCompleteRequest(0, 0);
    goto L70;

  anon60_Then:
    assume {:partition} minorFunction == 0;
    goto L129;

  anon59_Then:
    assume {:partition} majorFunction != 22;
    goto L129;
}



procedure {:origName "USBC_InternalDeviceControl"} USBC_InternalDeviceControl(actual_devExt_2: int, actual_irp_2: int) returns (Tmp_12: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_InternalDeviceControl"} USBC_InternalDeviceControl(actual_devExt_2: int, actual_irp_2: int) returns (Tmp_12: int)
{
  var {:pointer} irpSp_2: int;
  var {:pointer} parentFdoExt_2: int;
  var {:pointer} functionPdoExt_2: int;
  var {:scalar} status_2: int;
  var {:pointer} devExt_2: int;
  var {:pointer} irp_2: int;

  anon0:
    devExt_2 := actual_devExt_2;
    irp_2 := actual_irp_2;
    call {:si_unique_call 28} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(irp_2);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    assume {:nonnull} devExt_2 != 0;
    assume devExt_2 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} devExt_2 != 0;
    assume devExt_2 > 0;
    functionPdoExt_2 := functionPdoExt_DEVICE_EXTENSION(devExt_2);
    call {:si_unique_call 29} status_2 := DispatchPdoInternalDeviceControl(functionPdoExt_2, irp_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  L19:
    Tmp_12 := status_2;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:nonnull} devExt_2 != 0;
    assume devExt_2 > 0;
    parentFdoExt_2 := parentFdoExt_DEVICE_EXTENSION(devExt_2);
    call {:si_unique_call 30} status_2 := DispatchFdoInternalDeviceControl(parentFdoExt_2, irp_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "USBC_Power"} USBC_Power(actual_devExt_3: int, actual_irp_3: int) returns (Tmp_14: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_Power"} USBC_Power(actual_devExt_3: int, actual_irp_3: int) returns (Tmp_14: int)
{
  var {:pointer} irpSp_3: int;
  var {:pointer} Tmp_16: int;
  var {:pointer} parentFdoExt_3: int;
  var {:pointer} functionPdoExt_3: int;
  var {:scalar} status_3: int;
  var {:pointer} Tmp_17: int;
  var {:pointer} devExt_3: int;
  var {:pointer} irp_3: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;

  anon0:
    devExt_3 := actual_devExt_3;
    irp_3 := actual_irp_3;
    call {:si_unique_call 31} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(irp_3);
    call {:si_unique_call 32} sdv_do_paged_code_check();
    assume {:nonnull} devExt_3 != 0;
    assume devExt_3 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} devExt_3 != 0;
    assume devExt_3 > 0;
    functionPdoExt_3 := functionPdoExt_DEVICE_EXTENSION(devExt_3);
    havoc Tmp_16;
    assume {:nonnull} functionPdoExt_3 != 0;
    assume functionPdoExt_3 > 0;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    havoc vslice_dummy_var_5;
    havoc vslice_dummy_var_6;
    havoc vslice_dummy_var_7;
    havoc vslice_dummy_var_8;
    havoc vslice_dummy_var_9;
    call {:si_unique_call 33} WPP_RECORDER_SF_qcqLL(vslice_dummy_var_5, 4, 9, 14, Tmp_16, vslice_dummy_var_6, vslice_dummy_var_7, irp_3, vslice_dummy_var_8, vslice_dummy_var_9);
    call {:si_unique_call 34} status_3 := DispatchPdoPower(functionPdoExt_3, irp_3);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  L29:
    Tmp_14 := status_3;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:nonnull} devExt_3 != 0;
    assume devExt_3 > 0;
    parentFdoExt_3 := parentFdoExt_DEVICE_EXTENSION(devExt_3);
    havoc Tmp_17;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    assume {:nonnull} parentFdoExt_3 != 0;
    assume parentFdoExt_3 > 0;
    havoc vslice_dummy_var_10;
    havoc vslice_dummy_var_11;
    havoc vslice_dummy_var_12;
    havoc vslice_dummy_var_13;
    havoc vslice_dummy_var_14;
    call {:si_unique_call 35} WPP_RECORDER_SF_qcqLL(vslice_dummy_var_10, 4, 9, 13, Tmp_17, vslice_dummy_var_11, vslice_dummy_var_12, irp_3, vslice_dummy_var_13, vslice_dummy_var_14);
    call {:si_unique_call 36} status_3 := DispatchFdoPower(parentFdoExt_3, irp_3);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "USBC_SystemControl"} USBC_SystemControl(actual_devExt_4: int, actual_irp_4: int) returns (Tmp_18: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_SystemControl"} USBC_SystemControl(actual_devExt_4: int, actual_irp_4: int) returns (Tmp_18: int)
{
  var {:pointer} parentFdoExt_4: int;
  var {:pointer} functionPdoExt_4: int;
  var {:scalar} status_4: int;
  var {:pointer} devExt_4: int;
  var {:pointer} irp_4: int;

  anon0:
    devExt_4 := actual_devExt_4;
    irp_4 := actual_irp_4;
    call {:si_unique_call 37} sdv_do_paged_code_check();
    assume {:nonnull} devExt_4 != 0;
    assume devExt_4 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} devExt_4 != 0;
    assume devExt_4 > 0;
    functionPdoExt_4 := functionPdoExt_DEVICE_EXTENSION(devExt_4);
    assume {:nonnull} functionPdoExt_4 != 0;
    assume functionPdoExt_4 > 0;
    havoc parentFdoExt_4;
    status_4 := -1073741637;
    call {:si_unique_call 38} UsbcCompleteIrp(parentFdoExt_4, status_4, irp_4);
    goto L15;

  L15:
    Tmp_18 := status_4;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:nonnull} devExt_4 != 0;
    assume devExt_4 > 0;
    parentFdoExt_4 := parentFdoExt_DEVICE_EXTENSION(devExt_4);
    call {:si_unique_call 39} status_4 := USBC_ParentSystemControl(parentFdoExt_4, irp_4);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L15;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WPP_RECORDER_SF_qdd"} WPP_RECORDER_SF_qdd(actual_AutoLogContext: int, actual_level: int, actual_flags: int, actual_id: int, actual_traceGuid: int, actual_s_p_e_c_i_a_l_2: int, actual_s_p_e_c_i_a_l_3: int, actual_s_p_e_c_i_a_l_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qdd"} WPP_RECORDER_SF_qdd(actual_AutoLogContext: int, actual_level: int, actual_flags: int, actual_id: int, actual_traceGuid: int, actual_s_p_e_c_i_a_l_2: int, actual_s_p_e_c_i_a_l_3: int, actual_s_p_e_c_i_a_l_4: int)
{
  var {:scalar} Tmp_21: int;
  var {:scalar} Tmp_26: int;
  var {:scalar} Tmp_28: int;
  var {:scalar} Tmp_29: int;
  var {:scalar} level: int;
  var {:scalar} flags: int;
  var {:pointer} traceGuid: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;

  anon0:
    call {:si_unique_call 40} vslice_dummy_var_1 := __HAVOC_malloc(4);
    level := actual_level;
    flags := actual_flags;
    traceGuid := actual_traceGuid;
    call {:si_unique_call 41} vslice_dummy_var_3 := __HAVOC_malloc(4);
    Tmp_21 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags - 1);
    call {:si_unique_call 42} Tmp_29 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 43} Tmp_26 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 44} Tmp_28 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 45} vslice_dummy_var_2 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_qcqLL"} WPP_RECORDER_SF_qcqLL(actual_AutoLogContext_1: int, actual_level_1: int, actual_flags_1: int, actual_id_1: int, actual_traceGuid_1: int, actual_s_p_e_c_i_a_l_5: int, actual_s_p_e_c_i_a_l_6: int, actual_s_p_e_c_i_a_l_7: int, actual_s_p_e_c_i_a_l_8: int, actual_s_p_e_c_i_a_l_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qcqLL"} WPP_RECORDER_SF_qcqLL(actual_AutoLogContext_1: int, actual_level_1: int, actual_flags_1: int, actual_id_1: int, actual_traceGuid_1: int, actual_s_p_e_c_i_a_l_5: int, actual_s_p_e_c_i_a_l_6: int, actual_s_p_e_c_i_a_l_7: int, actual_s_p_e_c_i_a_l_8: int, actual_s_p_e_c_i_a_l_9: int)
{
  var {:scalar} Tmp_33: int;
  var {:scalar} Tmp_35: int;
  var {:scalar} Tmp_38: int;
  var {:scalar} Tmp_39: int;
  var {:scalar} level_1: int;
  var {:scalar} flags_1: int;
  var {:pointer} traceGuid_1: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_6: int;

  anon0:
    call {:si_unique_call 46} vslice_dummy_var_4 := __HAVOC_malloc(4);
    level_1 := actual_level_1;
    flags_1 := actual_flags_1;
    traceGuid_1 := actual_traceGuid_1;
    call {:si_unique_call 47} vslice_dummy_var_6 := __HAVOC_malloc(4);
    Tmp_38 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_1 - 1);
    call {:si_unique_call 48} Tmp_33 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 49} Tmp_35 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 50} Tmp_39 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 51} vslice_dummy_var_5 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "USBC_Close"} USBC_Close(actual_devExt_5: int, actual_irp_5: int) returns (Tmp_42: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_Close"} USBC_Close(actual_devExt_5: int, actual_irp_5: int) returns (Tmp_42: int)
{
  var {:pointer} parentFdoExt_5: int;
  var {:scalar} status_5: int;
  var {:pointer} devExt_5: int;
  var {:pointer} irp_5: int;
  var vslice_dummy_var_15: int;

  anon0:
    devExt_5 := actual_devExt_5;
    irp_5 := actual_irp_5;
    assume {:nonnull} devExt_5 != 0;
    assume devExt_5 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} devExt_5 != 0;
    assume devExt_5 > 0;
    parentFdoExt_5 := parentFdoExt_DEVICE_EXTENSION(devExt_5);
    assume {:nonnull} parentFdoExt_5 != 0;
    assume parentFdoExt_5 > 0;
    havoc vslice_dummy_var_15;
    call {:si_unique_call 52} status_5 := UsbcForwardIrp(parentFdoExt_5, vslice_dummy_var_15, irp_5);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  L12:
    Tmp_42 := status_5;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:nonnull} devExt_5 != 0;
    assume devExt_5 > 0;
    havoc parentFdoExt_5;
    status_5 := -1073741637;
    call {:si_unique_call 53} UsbcCompleteIrp(parentFdoExt_5, status_5, irp_5);
    goto L12;
}



procedure {:origName "USBC_Create"} USBC_Create(actual_devExt_6: int, actual_irp_6: int) returns (Tmp_44: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_Create"} USBC_Create(actual_devExt_6: int, actual_irp_6: int) returns (Tmp_44: int)
{
  var {:pointer} parentFdoExt_6: int;
  var {:scalar} status_6: int;
  var {:pointer} devExt_6: int;
  var {:pointer} irp_6: int;
  var vslice_dummy_var_16: int;

  anon0:
    devExt_6 := actual_devExt_6;
    irp_6 := actual_irp_6;
    call {:si_unique_call 54} sdv_do_paged_code_check();
    assume {:nonnull} devExt_6 != 0;
    assume devExt_6 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} devExt_6 != 0;
    assume devExt_6 > 0;
    parentFdoExt_6 := parentFdoExt_DEVICE_EXTENSION(devExt_6);
    assume {:nonnull} parentFdoExt_6 != 0;
    assume parentFdoExt_6 > 0;
    havoc vslice_dummy_var_16;
    call {:si_unique_call 55} status_6 := UsbcForwardIrp(parentFdoExt_6, vslice_dummy_var_16, irp_6);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L15;

  L15:
    Tmp_44 := status_6;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:nonnull} devExt_6 != 0;
    assume devExt_6 > 0;
    havoc parentFdoExt_6;
    status_6 := -1073741637;
    call {:si_unique_call 56} UsbcCompleteIrp(parentFdoExt_6, status_6, irp_6);
    goto L15;
}



procedure {:origName "WPP_RECORDER_SF_D"} WPP_RECORDER_SF_D(actual_AutoLogContext_2: int, actual_level_2: int, actual_flags_2: int, actual_id_2: int, actual_traceGuid_2: int, actual_s_p_e_c_i_a_l_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_D"} WPP_RECORDER_SF_D(actual_AutoLogContext_2: int, actual_level_2: int, actual_flags_2: int, actual_id_2: int, actual_traceGuid_2: int, actual_s_p_e_c_i_a_l_10: int)
{
  var {:scalar} Tmp_46: int;
  var {:scalar} Tmp_49: int;
  var {:scalar} Tmp_50: int;
  var {:scalar} Tmp_52: int;
  var {:scalar} level_2: int;
  var {:scalar} flags_2: int;
  var {:pointer} traceGuid_2: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 57} vslice_dummy_var_7 := __HAVOC_malloc(4);
    level_2 := actual_level_2;
    flags_2 := actual_flags_2;
    traceGuid_2 := actual_traceGuid_2;
    call {:si_unique_call 58} vslice_dummy_var_9 := __HAVOC_malloc(4);
    Tmp_49 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_2 - 1);
    call {:si_unique_call 59} Tmp_52 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 60} Tmp_50 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 61} Tmp_46 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 62} vslice_dummy_var_8 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "USBC_PnP"} USBC_PnP(actual_devExt_7: int, actual_irp_7: int) returns (Tmp_57: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_PnP"} USBC_PnP(actual_devExt_7: int, actual_irp_7: int) returns (Tmp_57: int)
{
  var {:pointer} irpSp_4: int;
  var {:pointer} parentFdoExt_7: int;
  var {:pointer} Tmp_59: int;
  var {:pointer} functionPdoExt_5: int;
  var {:pointer} Tmp_60: int;
  var {:scalar} status_7: int;
  var {:pointer} Tmp_61: int;
  var {:pointer} Tmp_62: int;
  var {:pointer} devExt_7: int;
  var {:pointer} irp_7: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;

  anon0:
    devExt_7 := actual_devExt_7;
    irp_7 := actual_irp_7;
    call {:si_unique_call 63} irpSp_4 := sdv_IoGetCurrentIrpStackLocation(irp_7);
    call {:si_unique_call 64} sdv_do_paged_code_check();
    assume {:nonnull} devExt_7 != 0;
    assume devExt_7 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} devExt_7 != 0;
    assume devExt_7 > 0;
    functionPdoExt_5 := functionPdoExt_DEVICE_EXTENSION(devExt_7);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    havoc Tmp_60;
    assume {:nonnull} functionPdoExt_5 != 0;
    assume functionPdoExt_5 > 0;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    havoc vslice_dummy_var_17;
    havoc vslice_dummy_var_18;
    havoc vslice_dummy_var_19;
    havoc vslice_dummy_var_20;
    havoc vslice_dummy_var_21;
    call {:si_unique_call 65} WPP_RECORDER_SF_qcqLL(vslice_dummy_var_17, 4, 9, 18, Tmp_60, vslice_dummy_var_18, vslice_dummy_var_19, irp_7, vslice_dummy_var_20, vslice_dummy_var_21);
    goto L57;

  L57:
    call {:si_unique_call 66} status_7 := DispatchPdoPnp(functionPdoExt_5, irp_7);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    goto L34;

  L34:
    Tmp_57 := status_7;
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    goto L51;

  L51:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L57;

  anon43_Then:
    havoc Tmp_62;
    assume {:nonnull} functionPdoExt_5 != 0;
    assume functionPdoExt_5 > 0;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    havoc vslice_dummy_var_22;
    havoc vslice_dummy_var_23;
    havoc vslice_dummy_var_24;
    havoc vslice_dummy_var_25;
    havoc vslice_dummy_var_26;
    call {:si_unique_call 67} WPP_RECORDER_SF_qcqLL(vslice_dummy_var_22, 5, 9, 17, Tmp_62, vslice_dummy_var_23, vslice_dummy_var_24, irp_7, vslice_dummy_var_25, vslice_dummy_var_26);
    goto L57;

  anon50_Then:
    goto L51;

  anon51_Then:
    goto L51;

  anon52_Then:
    goto L51;

  anon53_Then:
    goto L51;

  anon54_Then:
    goto L51;

  anon55_Then:
    goto L51;

  anon56_Then:
    goto L51;

  anon59_Then:
    goto L51;

  anon41_Then:
    assume {:nonnull} devExt_7 != 0;
    assume devExt_7 > 0;
    parentFdoExt_7 := parentFdoExt_DEVICE_EXTENSION(devExt_7);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    havoc Tmp_59;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    assume {:nonnull} parentFdoExt_7 != 0;
    assume parentFdoExt_7 > 0;
    havoc vslice_dummy_var_27;
    havoc vslice_dummy_var_28;
    havoc vslice_dummy_var_29;
    havoc vslice_dummy_var_30;
    havoc vslice_dummy_var_31;
    call {:si_unique_call 68} WPP_RECORDER_SF_qcqLL(vslice_dummy_var_27, 4, 9, 16, Tmp_59, vslice_dummy_var_28, vslice_dummy_var_29, irp_7, vslice_dummy_var_30, vslice_dummy_var_31);
    goto L30;

  L30:
    call {:si_unique_call 69} status_7 := DispatchFdoPnp(parentFdoExt_7, irp_7);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    goto L34;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    goto L24;

  L24:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto L30;

  anon42_Then:
    havoc Tmp_61;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    assume {:nonnull} parentFdoExt_7 != 0;
    assume parentFdoExt_7 > 0;
    havoc vslice_dummy_var_32;
    havoc vslice_dummy_var_33;
    havoc vslice_dummy_var_34;
    havoc vslice_dummy_var_35;
    havoc vslice_dummy_var_36;
    call {:si_unique_call 70} WPP_RECORDER_SF_qcqLL(vslice_dummy_var_32, 5, 9, 15, Tmp_61, vslice_dummy_var_33, vslice_dummy_var_34, irp_7, vslice_dummy_var_35, vslice_dummy_var_36);
    goto L30;

  anon45_Then:
    goto L24;

  anon46_Then:
    goto L24;

  anon47_Then:
    goto L24;

  anon48_Then:
    goto L24;

  anon57_Then:
    goto L24;
}



procedure {:origName "LegacyGroupInterfaces"} LegacyGroupInterfaces(actual_parentFdoExt_9: int, actual_functionAssoc: int, actual_numFunctions: int) returns (Tmp_65: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_65 == -1073741668 || Tmp_65 == -1073741670 || Tmp_65 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "LegacyGroupInterfaces"} LegacyGroupInterfaces(actual_parentFdoExt_9: int, actual_functionAssoc: int, actual_numFunctions: int) returns (Tmp_65: int)
{
  var {:scalar} i: int;
  var {:scalar} Tmp_66: int;
  var {:scalar} Tmp_67: int;
  var {:pointer} Tmp_69: int;
  var {:scalar} Tmp_70: int;
  var {:scalar} Tmp_71: int;
  var {:pointer} interfaceListEntry: int;
  var {:pointer} internalFunctionAssoc: int;
  var {:scalar} Tmp_72: int;
  var {:scalar} Tmp_73: int;
  var {:pointer} sdv_51: int;
  var {:scalar} ntStatus: int;
  var {:scalar} internalNumFunctions: int;
  var {:pointer} Tmp_74: int;
  var {:dopa} {:scalar} numFuncIfaces: int;
  var {:pointer} Tmp_75: int;
  var {:pointer} Tmp_76: int;
  var {:pointer} Tmp_77: int;
  var {:pointer} parentFdoExt_9: int;
  var {:pointer} functionAssoc: int;
  var {:pointer} numFunctions: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;

  anon0:
    call {:si_unique_call 71} numFuncIfaces := __HAVOC_malloc(4);
    parentFdoExt_9 := actual_parentFdoExt_9;
    functionAssoc := actual_functionAssoc;
    numFunctions := actual_numFunctions;
    ntStatus := 0;
    i := 0;
    internalNumFunctions := 0;
    assume {:nonnull} numFuncIfaces != 0;
    assume numFuncIfaces > 0;
    Mem_T.VOID[numFuncIfaces] := 0;
    internalFunctionAssoc := 0;
    call {:si_unique_call 72} sdv_do_paged_code_check();
    assume {:nonnull} functionAssoc != 0;
    assume functionAssoc > 0;
    assume {:nonnull} numFunctions != 0;
    assume numFunctions > 0;
    Mem_T.VOID[numFunctions] := 0;
    i := 0;
    goto L19;

  L19:
    call {:si_unique_call 73} i, vslice_dummy_var_10 := LegacyGroupInterfaces_loop_L19(i, numFuncIfaces, parentFdoExt_9, vslice_dummy_var_10);
    goto L19_last;

  L19_last:
    call {:si_unique_call 84} vslice_dummy_var_10 := GetFunctionInterfaceListBase(parentFdoExt_9, i, numFuncIfaces);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    i := i + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    internalNumFunctions := i;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} internalNumFunctions == 0;
    havoc Tmp_75;
    assume {:nonnull} parentFdoExt_9 != 0;
    assume parentFdoExt_9 > 0;
    havoc vslice_dummy_var_37;
    call {:si_unique_call 74} WPP_RECORDER_SF_(vslice_dummy_var_37, 2, 8, 58, Tmp_75);
    assume {:nonnull} parentFdoExt_9 != 0;
    assume parentFdoExt_9 > 0;
    havoc Tmp_74;
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    Tmp_66 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(Tmp_74)];
    assume {:nonnull} parentFdoExt_9 != 0;
    assume parentFdoExt_9 > 0;
    havoc vslice_dummy_var_38;
    havoc vslice_dummy_var_39;
    call {:si_unique_call 75} RecordFailure(parentFdoExt_9, vslice_dummy_var_38, -1073741668, 0, 536870918, -1018803151, vslice_dummy_var_39, Tmp_66);
    Tmp_65 := -1073741668;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:partition} internalNumFunctions != 0;
    Tmp_72 := 48 * internalNumFunctions;
    call {:si_unique_call 76} sdv_51 := ExAllocatePoolWithTag(512, Tmp_72, -1016958123);
    internalFunctionAssoc := sdv_51;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} internalFunctionAssoc != 0;
    Tmp_67 := 48 * internalNumFunctions;
    call {:si_unique_call 77} sdv_RtlZeroMemory(0, Tmp_67);
    goto L35;

  L35:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} internalFunctionAssoc == 0;
    havoc Tmp_69;
    assume {:nonnull} parentFdoExt_9 != 0;
    assume parentFdoExt_9 > 0;
    havoc vslice_dummy_var_40;
    call {:si_unique_call 78} WPP_RECORDER_SF_(vslice_dummy_var_40, 2, 8, 59, Tmp_69);
    assume {:nonnull} parentFdoExt_9 != 0;
    assume parentFdoExt_9 > 0;
    havoc vslice_dummy_var_41;
    call {:si_unique_call 79} RecordFailure(parentFdoExt_9, vslice_dummy_var_41, -1073741670, 0, 536870917, -1018803150, 0, 0);
    Tmp_65 := -1073741670;
    goto L1;

  anon16_Then:
    assume {:partition} internalFunctionAssoc != 0;
    i := 0;
    goto L44;

  L44:
    call {:si_unique_call 80} i, Tmp_70, Tmp_71, interfaceListEntry, Tmp_73, ntStatus, Tmp_76, Tmp_77 := LegacyGroupInterfaces_loop_L44(i, Tmp_70, Tmp_71, interfaceListEntry, internalFunctionAssoc, Tmp_73, ntStatus, internalNumFunctions, numFuncIfaces, Tmp_76, Tmp_77, parentFdoExt_9);
    goto L44_last;

  L44_last:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} internalNumFunctions > i;
    call {:si_unique_call 81} interfaceListEntry := GetFunctionInterfaceListBase(parentFdoExt_9, i, numFuncIfaces);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} interfaceListEntry != 0;
    assume interfaceListEntry > 0;
    havoc Tmp_76;
    assume {:nonnull} Tmp_76 != 0;
    assume Tmp_76 > 0;
    Tmp_71 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_76)];
    Tmp_73 := i;
    Tmp_77 := internalFunctionAssoc + Tmp_73 * 68;
    assume {:nonnull} numFuncIfaces != 0;
    assume numFuncIfaces > 0;
    call {:si_unique_call 82} ntStatus := InitializeFunctionAssoc(parentFdoExt_9, Tmp_77, Tmp_71, Mem_T.VOID[numFuncIfaces]);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} ntStatus < 0;
    call {:si_unique_call 83} CleanFunctionList(internalFunctionAssoc, internalNumFunctions);
    Tmp_65 := ntStatus;
    goto L1;

  anon19_Then:
    assume {:partition} 0 <= ntStatus;
    goto L52;

  L52:
    Tmp_70 := i;
    assume {:nonnull} internalFunctionAssoc != 0;
    assume internalFunctionAssoc > 0;
    i := i + 1;
    goto L52_dummy;

  L52_dummy:
    assume false;
    return;

  anon18_Then:
    goto L52;

  anon17_Then:
    assume {:partition} i >= internalNumFunctions;
    assume {:nonnull} functionAssoc != 0;
    assume functionAssoc > 0;
    assume {:nonnull} numFunctions != 0;
    assume numFunctions > 0;
    Mem_T.VOID[numFunctions] := internalNumFunctions;
    Tmp_65 := 0;
    goto L1;

  anon21_Then:
    assume {:partition} internalFunctionAssoc == 0;
    goto L35;
}



procedure {:origName "ParentResetOrCyclePort"} ParentResetOrCyclePort(actual_parentFdoExt_10: int, actual_irp_8: int, actual_ioControlCode_2: int) returns (Tmp_78: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentResetOrCyclePort"} ParentResetOrCyclePort(actual_parentFdoExt_10: int, actual_irp_8: int, actual_ioControlCode_2: int) returns (Tmp_78: int)
{
  var {:pointer} pendingIrpQueue: int;
  var {:pointer} Tmp_79: int;
  var {:pointer} listEntry_1: int;
  var {:scalar} proceed: int;
  var {:pointer} sdv_55: int;
  var {:scalar} sdv_56: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} Tmp_80: int;
  var {:scalar} sdv_58: int;
  var {:pointer} dequeuedIrp: int;
  var {:scalar} irpsToComplete: int;
  var {:pointer} actionInProgress: int;
  var {:scalar} status_8: int;
  var {:pointer} parentFdoExt_10: int;
  var {:pointer} irp_8: int;
  var {:scalar} ioControlCode_2: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_42: int;

  anon0:
    call {:si_unique_call 85} irpsToComplete := __HAVOC_malloc(8);
    parentFdoExt_10 := actual_parentFdoExt_10;
    irp_8 := actual_irp_8;
    ioControlCode_2 := actual_ioControlCode_2;
    status_8 := -1073741823;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} ioControlCode_2 == 2228255;
    assume {:nonnull} parentFdoExt_10 != 0;
    assume parentFdoExt_10 > 0;
    actionInProgress := cyclePortInProgress_PARENT_FDO_EXTENSION(parentFdoExt_10);
    assume {:nonnull} parentFdoExt_10 != 0;
    assume parentFdoExt_10 > 0;
    pendingIrpQueue := pendingCyclePortIrpQueue_PARENT_FDO_EXTENSION(parentFdoExt_10);
    goto L13;

  L13:
    call {:si_unique_call 86} Tmp_80 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    Mem_T.VOID[Tmp_80] := oldIrql_1;
    call {:si_unique_call 87} sdv_KeAcquireSpinLock(0, Tmp_80);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    oldIrql_1 := Mem_T.VOID[Tmp_80];
    assume {:nonnull} actionInProgress != 0;
    assume actionInProgress > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.VOID[actionInProgress] != 0;
    havoc Tmp_79;
    assume {:nonnull} parentFdoExt_10 != 0;
    assume parentFdoExt_10 > 0;
    havoc vslice_dummy_var_42;
    call {:si_unique_call 88} WPP_RECORDER_SF_(vslice_dummy_var_42, 2, 8, 51, Tmp_79);
    call {:si_unique_call 89} sdv_IoMarkIrpPending(0);
    status_8 := 259;
    assume {:nonnull} irp_8 != 0;
    assume irp_8 > 0;
    call {:si_unique_call 90} vslice_dummy_var_13 := sdv_InsertTailList(pendingIrpQueue, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irp_8))));
    proceed := 0;
    goto L35;

  L35:
    call {:si_unique_call 91} sdv_KeReleaseSpinLock(0, oldIrql_1);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} proceed != 0;
    call {:si_unique_call 92} sdv_IoCopyCurrentIrpStackLocationToNext(irp_8);
    call {:si_unique_call 93} status_8 := CallNextDriverSync(parentFdoExt_10, irp_8, 1);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 94} InitializeListHead(irpsToComplete);
    call {:si_unique_call 95} Tmp_80 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    Mem_T.VOID[Tmp_80] := oldIrql_1;
    call {:si_unique_call 96} sdv_KeAcquireSpinLock(0, Tmp_80);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    oldIrql_1 := Mem_T.VOID[Tmp_80];
    assume {:nonnull} actionInProgress != 0;
    assume actionInProgress > 0;
    Mem_T.VOID[actionInProgress] := 0;
    goto L56;

  L56:
    call {:si_unique_call 97} listEntry_1, sdv_56, vslice_dummy_var_12 := ParentResetOrCyclePort_loop_L56(pendingIrpQueue, listEntry_1, sdv_56, irpsToComplete, vslice_dummy_var_12);
    goto L56_last;

  L56_last:
    call {:si_unique_call 108} sdv_56 := sdv_IsListEmpty(0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_56 != 0;
    call {:si_unique_call 98} sdv_KeReleaseSpinLock(0, oldIrql_1);
    goto L66;

  L66:
    call {:si_unique_call 99} listEntry_1, sdv_55, sdv_58, dequeuedIrp, vslice_dummy_var_11 := ParentResetOrCyclePort_loop_L66(listEntry_1, sdv_55, sdv_58, dequeuedIrp, irpsToComplete, status_8, parentFdoExt_10, vslice_dummy_var_11);
    goto L66_last;

  L66_last:
    call {:si_unique_call 107} sdv_58 := sdv_IsListEmpty(0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} sdv_58 == 0;
    call {:si_unique_call 100} listEntry_1 := RemoveHeadList(irpsToComplete);
    call {:si_unique_call 101} sdv_55 := sdv_containing_record(listEntry_1, 88);
    dequeuedIrp := sdv_55;
    assume {:nonnull} dequeuedIrp != 0;
    assume dequeuedIrp > 0;
    call {:si_unique_call 102} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 103} UsbcReleaseRemoveLock(parentFdoExt_10, dequeuedIrp);
    assume {:nonnull} parentFdoExt_10 != 0;
    assume parentFdoExt_10 > 0;
    call {:si_unique_call 104} vslice_dummy_var_11 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_10), dequeuedIrp);
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} sdv_58 != 0;
    goto L39;

  L39:
    Tmp_78 := status_8;
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} sdv_56 == 0;
    call {:si_unique_call 105} listEntry_1 := RemoveHeadList(pendingIrpQueue);
    call {:si_unique_call 106} vslice_dummy_var_12 := sdv_InsertTailList(irpsToComplete, listEntry_1);
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} proceed == 0;
    goto L39;

  anon17_Then:
    assume {:partition} Mem_T.VOID[actionInProgress] == 0;
    assume {:nonnull} actionInProgress != 0;
    assume actionInProgress > 0;
    Mem_T.VOID[actionInProgress] := 1;
    proceed := 1;
    goto L35;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} ioControlCode_2 != 2228255;
    assume {:nonnull} parentFdoExt_10 != 0;
    assume parentFdoExt_10 > 0;
    actionInProgress := resetPortInProgress_PARENT_FDO_EXTENSION(parentFdoExt_10);
    assume {:nonnull} parentFdoExt_10 != 0;
    assume parentFdoExt_10 > 0;
    pendingIrpQueue := pendingResetPortIrpQueue_PARENT_FDO_EXTENSION(parentFdoExt_10);
    goto L13;
}



procedure {:origName "StartCleanup"} StartCleanup(actual_parentFdoExt_11: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "StartCleanup"} StartCleanup(actual_parentFdoExt_11: int)
{
  var {:pointer} parentFdoExt_11: int;
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 109} vslice_dummy_var_14 := __HAVOC_malloc(4);
    parentFdoExt_11 := actual_parentFdoExt_11;
    call {:si_unique_call 110} sdv_do_paged_code_check();
    call {:si_unique_call 111} FreeInterfaceList(parentFdoExt_11, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_11 != 0;
    assume parentFdoExt_11 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 112} ExFreePoolWithTag(0, -1016958123);
    goto L10;

  L10:
    assume {:nonnull} parentFdoExt_11 != 0;
    assume parentFdoExt_11 > 0;
    assume {:nonnull} parentFdoExt_11 != 0;
    assume parentFdoExt_11 > 0;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    goto L10;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "QueryParentDeviceRelations"} QueryParentDeviceRelations(actual_parentFdoExt_12: int, actual_irp_9: int) returns (Tmp_83: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QueryParentDeviceRelations"} QueryParentDeviceRelations(actual_parentFdoExt_12: int, actual_irp_9: int) returns (Tmp_83: int)
{
  var {:scalar} i_1: int;
  var {:scalar} Tmp_84: int;
  var {:pointer} Tmp_85: int;
  var {:scalar} Tmp_86: int;
  var {:pointer} Tmp_87: int;
  var {:scalar} size: int;
  var {:pointer} Tmp_88: int;
  var {:scalar} Tmp_89: int;
  var {:pointer} oldRelations: int;
  var {:pointer} irpSp_5: int;
  var {:pointer} Tmp_90: int;
  var {:pointer} Tmp_91: int;
  var {:scalar} j: int;
  var {:scalar} Tmp_92: int;
  var {:scalar} newCount: int;
  var {:scalar} Tmp_93: int;
  var {:scalar} Tmp_94: int;
  var {:pointer} Tmp_95: int;
  var {:pointer} Tmp_96: int;
  var {:pointer} Tmp_97: int;
  var {:pointer} Tmp_98: int;
  var {:pointer} Tmp_99: int;
  var {:scalar} Tmp_100: int;
  var {:pointer} sdv_62: int;
  var {:pointer} Tmp_101: int;
  var {:pointer} Tmp_102: int;
  var {:pointer} Tmp_104: int;
  var {:scalar} Tmp_105: int;
  var {:pointer} newRelations: int;
  var {:scalar} oldCount: int;
  var {:pointer} Tmp_106: int;
  var {:pointer} Tmp_107: int;
  var {:scalar} Tmp_108: int;
  var {:pointer} Tmp_110: int;
  var {:scalar} status_9: int;
  var {:pointer} Tmp_111: int;
  var {:pointer} Tmp_112: int;
  var {:scalar} ourCount: int;
  var {:pointer} parentFdoExt_12: int;
  var {:pointer} irp_9: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;

  anon0:
    parentFdoExt_12 := actual_parentFdoExt_12;
    irp_9 := actual_irp_9;
    call {:si_unique_call 113} Tmp_88 := __HAVOC_malloc(4);
    call {:si_unique_call 114} Tmp_90 := __HAVOC_malloc(4);
    call {:si_unique_call 115} Tmp_91 := __HAVOC_malloc(4);
    call {:si_unique_call 116} Tmp_95 := __HAVOC_malloc(4);
    call {:si_unique_call 117} Tmp_97 := __HAVOC_malloc(4);
    call {:si_unique_call 118} Tmp_98 := __HAVOC_malloc(4);
    call {:si_unique_call 119} Tmp_101 := __HAVOC_malloc(4);
    call {:si_unique_call 120} Tmp_107 := __HAVOC_malloc(4);
    call {:si_unique_call 121} Tmp_111 := __HAVOC_malloc(4);
    status_9 := 0;
    oldRelations := 0;
    newRelations := 0;
    newCount := 0;
    oldCount := 0;
    ourCount := 0;
    size := 0;
    i_1 := 0;
    j := 0;
    call {:si_unique_call 122} sdv_do_paged_code_check();
    call {:si_unique_call 123} irpSp_5 := sdv_IoGetCurrentIrpStackLocation(irp_9);
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc vslice_dummy_var_43;
    call {:si_unique_call 124} status_9 := UsbcForwardIrp(parentFdoExt_12, vslice_dummy_var_43, irp_9);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L35;

  L35:
    Tmp_83 := status_9;
    goto LM2;

  LM2:
    return;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    havoc Tmp_102;
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc vslice_dummy_var_44;
    call {:si_unique_call 125} WPP_RECORDER_SF_(vslice_dummy_var_44, 2, 8, 47, Tmp_102);
    status_9 := -1073741668;
    goto L100;

  L100:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_9 < 0;
    havoc Tmp_104;
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc vslice_dummy_var_45;
    call {:si_unique_call 126} WPP_RECORDER_SF_D(vslice_dummy_var_45, 2, 8, 50, Tmp_104, status_9);
    call {:si_unique_call 127} UsbcCompleteIrp(parentFdoExt_12, status_9, irp_9);
    goto L35;

  anon34_Then:
    assume {:partition} 0 <= status_9;
    assume {:nonnull} irp_9 != 0;
    assume irp_9 > 0;
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc vslice_dummy_var_46;
    call {:si_unique_call 128} status_9 := UsbcForwardIrp(parentFdoExt_12, vslice_dummy_var_46, irp_9);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L35;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:nonnull} irp_9 != 0;
    assume irp_9 > 0;
    havoc oldRelations;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} oldRelations != 0;
    assume {:nonnull} oldRelations != 0;
    assume oldRelations > 0;
    havoc oldCount;
    havoc Tmp_87;
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc vslice_dummy_var_47;
    call {:si_unique_call 129} WPP_RECORDER_SF_d(vslice_dummy_var_47, 4, 2, 48, Tmp_87, oldCount);
    goto L41;

  L41:
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc Tmp_96;
    assume {:nonnull} Tmp_96 != 0;
    assume Tmp_96 > 0;
    havoc ourCount;
    newCount := ourCount + oldCount;
    size := 8 + 4 * (newCount - 1);
    call {:si_unique_call 130} sdv_62 := ExAllocatePoolWithTag(1, size, -1016958123);
    newRelations := sdv_62;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} newRelations != 0;
    call {:si_unique_call 131} sdv_RtlZeroMemory(0, size);
    goto L59;

  L59:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} newRelations != 0;
    i_1 := 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} oldRelations != 0;
    j := 0;
    goto L68;

  L68:
    call {:si_unique_call 132} i_1, Tmp_84, j, Tmp_94, Tmp_95, Tmp_105, Tmp_107, Tmp_111 := QueryParentDeviceRelations_loop_L68(i_1, Tmp_84, oldRelations, j, Tmp_94, Tmp_95, Tmp_105, newRelations, oldCount, Tmp_107, Tmp_111);
    goto L68_last;

  L68_last:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} oldCount > j;
    Tmp_84 := j;
    assume {:nonnull} oldRelations != 0;
    assume oldRelations > 0;
    havoc Tmp_95;
    assume {:nonnull} Tmp_95 != 0;
    assume Tmp_95 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    Tmp_94 := i_1;
    assume {:nonnull} newRelations != 0;
    assume newRelations > 0;
    havoc Tmp_107;
    Tmp_105 := j;
    assume {:nonnull} oldRelations != 0;
    assume oldRelations > 0;
    havoc Tmp_111;
    assume {:nonnull} Tmp_107 != 0;
    assume Tmp_107 > 0;
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    i_1 := i_1 + 1;
    j := j + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    assume false;
    return;

  anon39_Then:
    goto L66;

  L66:
    j := 0;
    goto L74;

  L74:
    call {:si_unique_call 133} i_1, Tmp_85, Tmp_86, Tmp_88, Tmp_89, Tmp_90, Tmp_91, j, Tmp_92, Tmp_93, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, Tmp_106, Tmp_108, Tmp_110, vslice_dummy_var_15 := QueryParentDeviceRelations_loop_L74(i_1, Tmp_85, Tmp_86, Tmp_88, Tmp_89, Tmp_90, Tmp_91, j, Tmp_92, Tmp_93, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, newRelations, Tmp_106, Tmp_108, Tmp_110, ourCount, parentFdoExt_12, vslice_dummy_var_15);
    goto L74_last;

  L74_last:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} ourCount > j;
    Tmp_86 := j;
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc Tmp_99;
    assume {:nonnull} Tmp_99 != 0;
    assume Tmp_99 > 0;
    havoc Tmp_90;
    assume {:nonnull} Tmp_90 != 0;
    assume Tmp_90 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    Tmp_89 := i_1;
    assume {:nonnull} newRelations != 0;
    assume newRelations > 0;
    havoc Tmp_101;
    Tmp_92 := j;
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc Tmp_85;
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    havoc Tmp_88;
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    assume {:nonnull} Tmp_88 != 0;
    assume Tmp_88 > 0;
    Tmp_93 := i_1;
    assume {:nonnull} newRelations != 0;
    assume newRelations > 0;
    havoc Tmp_91;
    assume {:nonnull} Tmp_91 != 0;
    assume Tmp_91 > 0;
    havoc Tmp_106;
    Tmp_100 := i_1;
    assume {:nonnull} newRelations != 0;
    assume newRelations > 0;
    havoc Tmp_98;
    assume {:nonnull} Tmp_98 != 0;
    assume Tmp_98 > 0;
    havoc Tmp_110;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    Tmp_108 := i_1;
    assume {:nonnull} newRelations != 0;
    assume newRelations > 0;
    havoc Tmp_97;
    assume {:nonnull} Tmp_97 != 0;
    assume Tmp_97 > 0;
    call {:si_unique_call 134} vslice_dummy_var_15 := sdv_ObReferenceObject(0);
    i_1 := i_1 + 1;
    j := j + 1;
    goto anon40_Else_dummy;

  anon40_Else_dummy:
    assume false;
    return;

  anon40_Then:
    goto L75;

  L75:
    assume {:nonnull} newRelations != 0;
    assume newRelations > 0;
    assume {:nonnull} irp_9 != 0;
    assume irp_9 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} oldRelations == 0;
    goto L96;

  L96:
    havoc Tmp_112;
    assume {:nonnull} parentFdoExt_12 != 0;
    assume parentFdoExt_12 > 0;
    havoc vslice_dummy_var_48;
    call {:si_unique_call 135} WPP_RECORDER_SF_d(vslice_dummy_var_48, 4, 2, 49, Tmp_112, newCount);
    goto L100;

  anon41_Then:
    assume {:partition} oldRelations != 0;
    call {:si_unique_call 136} sdv_ExFreePool(0);
    goto L96;

  anon33_Then:
    assume {:partition} j >= ourCount;
    goto L75;

  anon32_Then:
    assume {:partition} j >= oldCount;
    goto L66;

  anon38_Then:
    assume {:partition} oldRelations == 0;
    goto L66;

  anon31_Then:
    assume {:partition} newRelations == 0;
    status_9 := -1073741670;
    goto L100;

  anon37_Then:
    assume {:partition} newRelations == 0;
    goto L59;

  anon36_Then:
    assume {:partition} oldRelations == 0;
    goto L41;
}



procedure {:origName "WPP_RECORDER_SF_qs"} WPP_RECORDER_SF_qs(actual_AutoLogContext_3: int, actual_level_3: int, actual_flags_3: int, actual_id_3: int, actual_traceGuid_3: int, actual_s_p_e_c_i_a_l_11: int, actual_s_p_e_c_i_a_l_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qs"} WPP_RECORDER_SF_qs(actual_AutoLogContext_3: int, actual_level_3: int, actual_flags_3: int, actual_id_3: int, actual_traceGuid_3: int, actual_s_p_e_c_i_a_l_11: int, actual_s_p_e_c_i_a_l_12: int)
{
  var {:scalar} Tmp_114: int;
  var {:scalar} sdv_65: int;
  var {:scalar} sdv_67: int;
  var {:scalar} Tmp_119: int;
  var {:scalar} Tmp_123: int;
  var {:scalar} Tmp_125: int;
  var {:scalar} level_3: int;
  var {:scalar} flags_3: int;
  var {:pointer} traceGuid_3: int;
  var {:pointer} s_p_e_c_i_a_l_12: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;

  anon0:
    call {:si_unique_call 137} vslice_dummy_var_16 := __HAVOC_malloc(4);
    level_3 := actual_level_3;
    flags_3 := actual_flags_3;
    traceGuid_3 := actual_traceGuid_3;
    s_p_e_c_i_a_l_12 := actual_s_p_e_c_i_a_l_12;
    call {:si_unique_call 138} vslice_dummy_var_18 := __HAVOC_malloc(4);
    Tmp_114 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_3 - 1);
    call {:si_unique_call 139} Tmp_119 := corral_nondet();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 140} Tmp_125 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} s_p_e_c_i_a_l_12 != 0;
    goto L14;

  L14:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} s_p_e_c_i_a_l_12 != 0;
    goto L17;

  L17:
    call {:si_unique_call 141} Tmp_123 := corral_nondet();
    goto L6;

  L6:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} s_p_e_c_i_a_l_12 != 0;
    goto L27;

  L27:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} s_p_e_c_i_a_l_12 != 0;
    goto L30;

  L30:
    call {:si_unique_call 142} vslice_dummy_var_17 := corral_nondet();
    return;

  anon16_Then:
    assume {:partition} s_p_e_c_i_a_l_12 == 0;
    goto L30;

  anon13_Then:
    assume {:partition} s_p_e_c_i_a_l_12 == 0;
    goto L27;

  anon15_Then:
    assume {:partition} s_p_e_c_i_a_l_12 == 0;
    goto L17;

  anon14_Then:
    assume {:partition} s_p_e_c_i_a_l_12 == 0;
    goto L14;

  anon18_Then:
    goto L6;

  anon17_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_i"} WPP_RECORDER_SF_i(actual_AutoLogContext_4: int, actual_level_4: int, actual_flags_4: int, actual_id_4: int, actual_traceGuid_4: int, actual_s_p_e_c_i_a_l_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_i"} WPP_RECORDER_SF_i(actual_AutoLogContext_4: int, actual_level_4: int, actual_flags_4: int, actual_id_4: int, actual_traceGuid_4: int, actual_s_p_e_c_i_a_l_13: int)
{
  var {:scalar} Tmp_130: int;
  var {:scalar} Tmp_133: int;
  var {:scalar} Tmp_135: int;
  var {:scalar} Tmp_137: int;
  var {:scalar} level_4: int;
  var {:scalar} flags_4: int;
  var {:pointer} traceGuid_4: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;

  anon0:
    call {:si_unique_call 143} vslice_dummy_var_19 := __HAVOC_malloc(4);
    level_4 := actual_level_4;
    flags_4 := actual_flags_4;
    traceGuid_4 := actual_traceGuid_4;
    call {:si_unique_call 144} vslice_dummy_var_21 := __HAVOC_malloc(4);
    Tmp_133 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_4 - 1);
    call {:si_unique_call 145} Tmp_137 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 146} Tmp_130 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 147} Tmp_135 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 148} vslice_dummy_var_20 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "DispatchFdoDeviceControl"} DispatchFdoDeviceControl(actual_parentFdoExt_13: int, actual_irp_10: int) returns (Tmp_139: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchFdoDeviceControl"} DispatchFdoDeviceControl(actual_parentFdoExt_13: int, actual_irp_10: int) returns (Tmp_139: int)
{
  var {:pointer} irpSp_6: int;
  var {:pointer} Tmp_141: int;
  var {:pointer} Tmp_142: int;
  var {:scalar} ioControlCode_3: int;
  var {:scalar} status_10: int;
  var {:pointer} parentFdoExt_13: int;
  var {:pointer} irp_10: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;

  anon0:
    parentFdoExt_13 := actual_parentFdoExt_13;
    irp_10 := actual_irp_10;
    call {:si_unique_call 149} irpSp_6 := sdv_IoGetCurrentIrpStackLocation(irp_10);
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    havoc ioControlCode_3;
    status_10 := 0;
    assume {:nonnull} parentFdoExt_13 != 0;
    assume parentFdoExt_13 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 150} vslice_dummy_var_22 := ParentSetD0(parentFdoExt_13, 1, 0, 0, 0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_142;
    assume {:nonnull} parentFdoExt_13 != 0;
    assume parentFdoExt_13 > 0;
    havoc vslice_dummy_var_49;
    havoc vslice_dummy_var_50;
    call {:si_unique_call 151} WPP_RECORDER_SF_qL(vslice_dummy_var_49, 4, 3, 52, Tmp_142, irp_10, vslice_dummy_var_50);
    goto L13;

  L13:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} ioControlCode_3 == 2952208;
    assume {:nonnull} parentFdoExt_13 != 0;
    assume parentFdoExt_13 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    havoc Tmp_141;
    assume {:nonnull} parentFdoExt_13 != 0;
    assume parentFdoExt_13 > 0;
    havoc vslice_dummy_var_51;
    call {:si_unique_call 152} WPP_RECORDER_SF_(vslice_dummy_var_51, 4, 6, 53, Tmp_141);
    assume {:nonnull} parentFdoExt_13 != 0;
    assume parentFdoExt_13 > 0;
    havoc vslice_dummy_var_52;
    call {:si_unique_call 153} status_10 := UsbcForwardIrp(parentFdoExt_13, vslice_dummy_var_52, irp_10);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L41;

  L41:
    Tmp_139 := status_10;
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    call {:si_unique_call 154} status_10 := GetMediaSerialNumber(parentFdoExt_13, irp_10);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 155} UsbcCompleteIrp(parentFdoExt_13, status_10, irp_10);
    goto L41;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} ioControlCode_3 != 2952208;
    assume {:nonnull} parentFdoExt_13 != 0;
    assume parentFdoExt_13 > 0;
    havoc vslice_dummy_var_53;
    call {:si_unique_call 156} status_10 := UsbcForwardIrp(parentFdoExt_13, vslice_dummy_var_53, irp_10);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L41;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    goto L13;
}



procedure {:origName "SubmitUrb"} SubmitUrb(actual_parentFdoExt_15: int, actual_urb: int, actual_synchronous: int, actual_completionRoutine: int, actual_completionContext: int, actual_IsUsbdUrb: int) returns (Tmp_145: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SubmitUrb"} SubmitUrb(actual_parentFdoExt_15: int, actual_urb: int, actual_synchronous: int, actual_completionRoutine: int, actual_completionContext: int, actual_IsUsbdUrb: int) returns (Tmp_145: int)
{
  var {:pointer} nextSp: int;
  var {:pointer} Tmp_146: int;
  var {:pointer} irp_11: int;
  var {:scalar} status_11: int;
  var {:pointer} parentFdoExt_15: int;
  var {:pointer} urb: int;
  var {:scalar} synchronous: int;
  var {:scalar} completionRoutine: int;
  var {:pointer} completionContext: int;
  var {:scalar} IsUsbdUrb: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;

  anon0:
    parentFdoExt_15 := actual_parentFdoExt_15;
    urb := actual_urb;
    synchronous := actual_synchronous;
    completionRoutine := actual_completionRoutine;
    completionContext := actual_completionContext;
    IsUsbdUrb := actual_IsUsbdUrb;
    assume {:nonnull} parentFdoExt_15 != 0;
    assume parentFdoExt_15 > 0;
    havoc Tmp_146;
    assume {:nonnull} Tmp_146 != 0;
    assume Tmp_146 > 0;
    havoc vslice_dummy_var_54;
    call {:si_unique_call 157} irp_11 := IoAllocateIrp(vslice_dummy_var_54, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} irp_11 != 0;
    call {:si_unique_call 158} nextSp := sdv_IoGetNextIrpStackLocation(irp_11);
    assume {:nonnull} nextSp != 0;
    assume nextSp > 0;
    assume {:nonnull} nextSp != 0;
    assume nextSp > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} IsUsbdUrb != 0;
    goto L23;

  L23:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} synchronous != 0;
    call {:si_unique_call 159} status_11 := CallNextDriverSync(parentFdoExt_15, irp_11, 1);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 160} IoFreeIrp(0);
    goto L34;

  L34:
    Tmp_145 := status_11;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} synchronous == 0;
    assume {:nonnull} parentFdoExt_15 != 0;
    assume parentFdoExt_15 > 0;
    havoc vslice_dummy_var_55;
    havoc vslice_dummy_var_56;
    call {:si_unique_call 161} SetCompletionRoutine(vslice_dummy_var_55, vslice_dummy_var_56, irp_11, completionRoutine, completionContext, 1, 1, 1);
    assume {:nonnull} parentFdoExt_15 != 0;
    assume parentFdoExt_15 > 0;
    havoc vslice_dummy_var_57;
    call {:si_unique_call 162} status_11 := sdv_IoCallDriver#1(vslice_dummy_var_57, irp_11);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L34;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} IsUsbdUrb == 0;
    assume {:nonnull} nextSp != 0;
    assume nextSp > 0;
    goto L23;

  anon11_Then:
    assume {:partition} irp_11 == 0;
    status_11 := -1073741670;
    goto L34;
}



procedure {:origName "GetParentFdoCapabilities"} GetParentFdoCapabilities(actual_parentFdoExt_16: int) returns (Tmp_148: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetParentFdoCapabilities"} GetParentFdoCapabilities(actual_parentFdoExt_16: int) returns (Tmp_148: int)
{
  var {:pointer} nextSp_1: int;
  var {:pointer} Tmp_149: int;
  var {:pointer} Tmp_150: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} irp_12: int;
  var {:scalar} status_12: int;
  var {:pointer} parentFdoExt_16: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;

  anon0:
    parentFdoExt_16 := actual_parentFdoExt_16;
    call {:si_unique_call 163} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    havoc Tmp_152;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    havoc vslice_dummy_var_58;
    call {:si_unique_call 164} irp_12 := IoAllocateIrp(vslice_dummy_var_58, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_12 != 0;
    call {:si_unique_call 165} nextSp_1 := sdv_IoGetNextIrpStackLocation(irp_12);
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    call {:si_unique_call 166} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    assume {:nonnull} irp_12 != 0;
    assume irp_12 > 0;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    havoc vslice_dummy_var_59;
    havoc vslice_dummy_var_60;
    call {:si_unique_call 167} status_12 := CallDriverSync(vslice_dummy_var_59, irp_12, 1, vslice_dummy_var_60);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 168} IoFreeIrp(0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_12 >= 0;
    goto L41;

  L41:
    Tmp_148 := status_12;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} 0 > status_12;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    havoc vslice_dummy_var_61;
    call {:si_unique_call 169} RecordFailure(parentFdoExt_16, vslice_dummy_var_61, status_12, 0, 536870915, -951040445, 0, 0);
    havoc Tmp_149;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    havoc vslice_dummy_var_62;
    call {:si_unique_call 170} WPP_RECORDER_SF_d(vslice_dummy_var_62, 2, 8, 37, Tmp_149, status_12);
    goto L41;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_12 == 0;
    status_12 := -1073741670;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    havoc vslice_dummy_var_63;
    call {:si_unique_call 171} RecordFailure(parentFdoExt_16, vslice_dummy_var_63, -1073741670, 0, 536870917, -951040445, 0, 0);
    havoc Tmp_150;
    assume {:nonnull} parentFdoExt_16 != 0;
    assume parentFdoExt_16 > 0;
    havoc vslice_dummy_var_64;
    call {:si_unique_call 172} WPP_RECORDER_SF_(vslice_dummy_var_64, 2, 8, 36, Tmp_150);
    Tmp_148 := status_12;
    goto L1;
}



procedure {:origName "TryGetConfigDescriptor"} TryGetConfigDescriptor(actual_parentFdoExt_17: int, actual_configurationNum: int, actual_validateFail: int, actual_usbdStatus: int, actual_bytesReturned: int) returns (Tmp_153: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "TryGetConfigDescriptor"} TryGetConfigDescriptor(actual_parentFdoExt_17: int, actual_configurationNum: int, actual_validateFail: int, actual_usbdStatus: int, actual_bytesReturned: int) returns (Tmp_153: int)
{
  var {:pointer} SD11: int;
  var {:pointer} Tmp_154: int;
  var {:scalar} configDescLen: int;
  var {:pointer} Tmp_155: int;
  var {:pointer} Tmp_156: int;
  var {:pointer} Tmp_157: int;
  var {:scalar} Tmp_158: int;
  var {:scalar} sdv_11: int;
  var {:pointer} Tmp_159: int;
  var {:pointer} sdv_88: int;
  var {:scalar} configDescBase: int;
  var {:pointer} Tmp_160: int;
  var {:pointer} urb_1: int;
  var {:pointer} Tmp_162: int;
  var {:scalar} status_13: int;
  var {:pointer} Tmp_163: int;
  var {:scalar} validateLevel: int;
  var {:pointer} Tmp_164: int;
  var {:pointer} offset: int;
  var {:pointer} Tmp_165: int;
  var {:pointer} parentFdoExt_17: int;
  var {:scalar} configurationNum: int;
  var {:pointer} validateFail: int;
  var {:pointer} usbdStatus: int;
  var {:pointer} bytesReturned: int;
  var boogieTmp: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 173} sdv_11 := __HAVOC_malloc(8);
    call {:si_unique_call 174} configDescBase := __HAVOC_malloc(32);
    call {:si_unique_call 175} offset := __HAVOC_malloc(4);
    parentFdoExt_17 := actual_parentFdoExt_17;
    configurationNum := actual_configurationNum;
    validateFail := actual_validateFail;
    usbdStatus := actual_usbdStatus;
    bytesReturned := actual_bytesReturned;
    urb_1 := 0;
    assume {:nonnull} offset != 0;
    assume offset > 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(configDescBase)] := 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(configDescBase)] := 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(configDescBase)] := 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    configDescLen := 0;
    validateLevel := 2;
    call {:si_unique_call 176} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    call {:si_unique_call 177} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    goto L25;

  L25:
    assume {:nonnull} validateFail != 0;
    assume validateFail > 0;
    Mem_T.VOID[validateFail] := 0;
    assume {:nonnull} usbdStatus != 0;
    assume usbdStatus > 0;
    Mem_T.VOID[usbdStatus] := 0;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.VOID[bytesReturned] := 0;
    call {:si_unique_call 178} status_13 := corral_nondet();
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} status_13 < 0;
    havoc Tmp_156;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc vslice_dummy_var_65;
    call {:si_unique_call 179} WPP_RECORDER_SF_d(vslice_dummy_var_65, 2, 8, 18, Tmp_156, status_13);
    goto L71;

  L71:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} urb_1 != 0;
    goto L72;

  L72:
    Tmp_153 := status_13;
    goto LM2;

  LM2:
    return;

  anon35_Then:
    assume {:partition} urb_1 == 0;
    goto L72;

  anon32_Then:
    assume {:partition} 0 <= status_13;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_1))] := 9;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    call {:si_unique_call 180} status_13 := SubmitUrb(parentFdoExt_17, urb_1, 1, 0, 0, 1);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_13 < 0;
    havoc Tmp_164;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc vslice_dummy_var_66;
    call {:si_unique_call 181} WPP_RECORDER_SF_d(vslice_dummy_var_66, 2, 8, 19, Tmp_164, status_13);
    goto L71;

  anon33_Then:
    assume {:partition} 0 <= status_13;
    assume {:nonnull} configDescBase != 0;
    assume configDescBase > 0;
    configDescLen := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(configDescBase)];
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} 9 > configDescLen;
    goto L60;

  L60:
    status_13 := -1073741668;
    havoc Tmp_154;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc vslice_dummy_var_67;
    call {:si_unique_call 182} WPP_RECORDER_SF_d(vslice_dummy_var_67, 2, 8, 20, Tmp_154, status_13);
    goto L71;

  anon43_Then:
    assume {:partition} configDescLen >= 9;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 9 <= Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_1))];
    call {:si_unique_call 183} sdv_88 := ExAllocatePoolWithTag(512, configDescLen, -1016958123);
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    call {:si_unique_call 184} sdv_RtlZeroMemory(0, configDescLen);
    goto L81;

  L81:
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.VOID[bytesReturned] := configDescLen;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_1))] := configDescLen;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    call {:si_unique_call 185} status_13 := SubmitUrb(parentFdoExt_17, urb_1, 1, 0, 0, 1);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_13 < 0;
    havoc Tmp_160;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc vslice_dummy_var_68;
    call {:si_unique_call 186} WPP_RECORDER_SF_d(vslice_dummy_var_68, 2, 8, 22, Tmp_160, status_13);
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    assume {:nonnull} usbdStatus != 0;
    assume usbdStatus > 0;
    havoc vslice_dummy_var_69;
    Mem_T.VOID[usbdStatus] := vslice_dummy_var_69;
    goto L71;

  anon37_Then:
    assume {:partition} 0 <= status_13;
    assume {:nonnull} urb_1 != 0;
    assume urb_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} configDescLen > Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_1))];
    status_13 := -1073741668;
    havoc Tmp_159;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc vslice_dummy_var_70;
    call {:si_unique_call 187} WPP_RECORDER_SF_d(vslice_dummy_var_70, 2, 8, 23, Tmp_159, status_13);
    goto L71;

  anon38_Then:
    assume {:partition} Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_1))] >= configDescLen;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    validateLevel := 3;
    goto L119;

  L119:
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    assume {:nonnull} usbdStatus != 0;
    assume usbdStatus > 0;
    havoc vslice_dummy_var_71;
    call {:si_unique_call 188} boogieTmp := USBD_ValidateConfigurationDescriptorInternal(vslice_dummy_var_71, configDescLen, validateLevel, offset, -1016958123);
    Mem_T.VOID[usbdStatus] := boogieTmp;
    assume {:nonnull} usbdStatus != 0;
    assume usbdStatus > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Mem_T.VOID[usbdStatus] < 0;
    assume {:nonnull} offset != 0;
    assume offset > 0;
    havoc Tmp_158;
    havoc Tmp_163;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    assume {:nonnull} usbdStatus != 0;
    assume usbdStatus > 0;
    havoc vslice_dummy_var_72;
    call {:si_unique_call 189} WPP_RECORDER_SF_Dd(vslice_dummy_var_72, 2, 8, 24, Tmp_163, Mem_T.VOID[usbdStatus], Tmp_158);
    status_13 := -1073741593;
    assume {:nonnull} validateFail != 0;
    assume validateFail > 0;
    Mem_T.VOID[validateFail] := 1;
    goto L71;

  anon41_Then:
    assume {:partition} 0 <= Mem_T.VOID[usbdStatus];
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc Tmp_165;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc Tmp_162;
    assume {:nonnull} Tmp_162 != 0;
    assume Tmp_162 > 0;
    call {:si_unique_call 190} SD11 := log_xstr(Tmp_165, Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_162)]);
    assume {:nonnull} SD11 != 0;
    assume SD11 > 0;
    assume {:nonnull} sdv_11 != 0;
    assume sdv_11 > 0;
    assume {:nonnull} SD11 != 0;
    assume SD11 > 0;
    assume {:nonnull} sdv_11 != 0;
    assume sdv_11 > 0;
    havoc Tmp_155;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc vslice_dummy_var_73;
    call {:si_unique_call 191} WPP_RECORDER_SF__HEX_(vslice_dummy_var_73, 4, 1, 25, Tmp_155, sdv_11);
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    goto L71;

  anon39_Then:
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    validateLevel := 1;
    goto L119;

  anon40_Then:
    goto L119;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    status_13 := -1073741670;
    havoc Tmp_157;
    assume {:nonnull} parentFdoExt_17 != 0;
    assume parentFdoExt_17 > 0;
    havoc vslice_dummy_var_74;
    call {:si_unique_call 192} WPP_RECORDER_SF_d(vslice_dummy_var_74, 2, 8, 21, Tmp_157, status_13);
    goto L71;

  anon44_Then:
    goto L81;

  anon34_Then:
    assume {:partition} Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_1))] < 9;
    goto L60;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    goto L25;
}



procedure {:origName "WPP_RECORDER_SF_Dd"} WPP_RECORDER_SF_Dd(actual_AutoLogContext_5: int, actual_level_5: int, actual_flags_5: int, actual_id_5: int, actual_traceGuid_5: int, actual_s_p_e_c_i_a_l_14: int, actual_s_p_e_c_i_a_l_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_Dd"} WPP_RECORDER_SF_Dd(actual_AutoLogContext_5: int, actual_level_5: int, actual_flags_5: int, actual_id_5: int, actual_traceGuid_5: int, actual_s_p_e_c_i_a_l_14: int, actual_s_p_e_c_i_a_l_15: int)
{
  var {:scalar} Tmp_167: int;
  var {:scalar} Tmp_168: int;
  var {:scalar} Tmp_169: int;
  var {:scalar} Tmp_176: int;
  var {:scalar} level_5: int;
  var {:scalar} flags_5: int;
  var {:pointer} traceGuid_5: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 193} vslice_dummy_var_23 := __HAVOC_malloc(4);
    level_5 := actual_level_5;
    flags_5 := actual_flags_5;
    traceGuid_5 := actual_traceGuid_5;
    call {:si_unique_call 194} vslice_dummy_var_25 := __HAVOC_malloc(4);
    Tmp_176 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_5 - 1);
    call {:si_unique_call 195} Tmp_167 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 196} Tmp_168 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 197} Tmp_169 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 198} vslice_dummy_var_24 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "QueryUSBStackAndDeviceCapabilities"} QueryUSBStackAndDeviceCapabilities(actual_parentFdoExt_18: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QueryUSBStackAndDeviceCapabilities"} QueryUSBStackAndDeviceCapabilities(actual_parentFdoExt_18: int)
{
  var {:scalar} sdv_93: int;
  var {:scalar} sdv_95: int;
  var {:pointer} Tmp_181: int;
  var {:scalar} streamCount: int;
  var {:scalar} status_14: int;
  var {:pointer} parentFdoExt_18: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 199} vslice_dummy_var_26 := __HAVOC_malloc(4);
    parentFdoExt_18 := actual_parentFdoExt_18;
    assume {:nonnull} parentFdoExt_18 != 0;
    assume parentFdoExt_18 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 200} sdv_93 := corral_nondet();
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} sdv_93 != 0;
    assume {:nonnull} parentFdoExt_18 != 0;
    assume parentFdoExt_18 > 0;
    call {:si_unique_call 201} status_14 := corral_nondet();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_14 < 0;
    havoc Tmp_181;
    assume {:nonnull} parentFdoExt_18 != 0;
    assume parentFdoExt_18 > 0;
    havoc vslice_dummy_var_75;
    call {:si_unique_call 202} WPP_RECORDER_SF_d(vslice_dummy_var_75, 4, 1, 71, Tmp_181, status_14);
    goto L24;

  L24:
    call {:si_unique_call 203} status_14 := corral_nondet();
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_14 >= 0;
    call {:si_unique_call 204} status_14 := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} status_14 >= 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} streamCount == 0;
    goto L39;

  L39:
    assume {:nonnull} parentFdoExt_18 != 0;
    assume parentFdoExt_18 > 0;
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:partition} streamCount != 0;
    goto L1;

  anon23_Then:
    assume {:partition} 0 > status_14;
    goto L39;

  anon22_Then:
    assume {:partition} 0 > status_14;
    call {:si_unique_call 205} status_14 := corral_nondet();
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_14 < 0;
    assume {:nonnull} parentFdoExt_18 != 0;
    assume parentFdoExt_18 > 0;
    goto L1;

  anon25_Then:
    assume {:partition} 0 <= status_14;
    goto L1;

  anon21_Then:
    assume {:partition} 0 <= status_14;
    assume {:nonnull} parentFdoExt_18 != 0;
    assume parentFdoExt_18 > 0;
    goto L24;

  anon20_Then:
    assume {:partition} sdv_93 == 0;
    call {:si_unique_call 206} sdv_95 := corral_nondet();
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_95 != 0;
    call {:si_unique_call 207} status_14 := corral_nondet();
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_14 < 0;
    assume {:nonnull} parentFdoExt_18 != 0;
    assume parentFdoExt_18 > 0;
    goto L1;

  anon27_Then:
    assume {:partition} 0 <= status_14;
    goto L1;

  anon26_Then:
    assume {:partition} sdv_95 == 0;
    goto L1;

  anon19_Then:
    goto L1;
}



procedure {:origName "ParentFindOriginalConfiguration"} ParentFindOriginalConfiguration(actual_parentFdoExt_19: int, actual_configurationNum_1: int) returns (Tmp_185: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_185 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentFindOriginalConfiguration"} ParentFindOriginalConfiguration(actual_parentFdoExt_19: int, actual_configurationNum_1: int) returns (Tmp_185: int)
{
  var {:pointer} OriginalConfigurationKey: int;
  var {:scalar} intStatus: int;
  var {:pointer} Tmp_186: int;
  var {:dopa} {:scalar} type_1: int;
  var {:scalar} status_15: int;
  var {:pointer} Tmp_188: int;
  var {:dopa} {:scalar} newConfigurationNum: int;
  var {:pointer} parentFdoExt_19: int;
  var {:pointer} configurationNum_1: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;

  anon0:
    call {:si_unique_call 208} type_1 := __HAVOC_malloc(4);
    call {:si_unique_call 209} newConfigurationNum := __HAVOC_malloc(4);
    parentFdoExt_19 := actual_parentFdoExt_19;
    configurationNum_1 := actual_configurationNum_1;
    assume {:nonnull} type_1 != 0;
    assume type_1 > 0;
    Mem_T.VOID[type_1] := 0;
    assume {:nonnull} newConfigurationNum != 0;
    assume newConfigurationNum > 0;
    Mem_T.VOID[newConfigurationNum] := 0;
    status_15 := 0;
    intStatus := 0;
    OriginalConfigurationKey := strConst__li2bpl1;
    call {:si_unique_call 210} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_19 != 0;
    assume parentFdoExt_19 > 0;
    havoc vslice_dummy_var_76;
    call {:si_unique_call 211} intStatus := GetPdoRegistryParameter(vslice_dummy_var_76, OriginalConfigurationKey, newConfigurationNum, 4, type_1, 0, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} intStatus < 0;
    havoc Tmp_186;
    assume {:nonnull} parentFdoExt_19 != 0;
    assume parentFdoExt_19 > 0;
    havoc vslice_dummy_var_77;
    call {:si_unique_call 212} WPP_RECORDER_SF_d(vslice_dummy_var_77, 3, 8, 65, Tmp_186, intStatus);
    assume {:nonnull} newConfigurationNum != 0;
    assume newConfigurationNum > 0;
    Mem_T.VOID[newConfigurationNum] := 0;
    goto L25;

  L25:
    assume {:nonnull} configurationNum_1 != 0;
    assume configurationNum_1 > 0;
    assume {:nonnull} newConfigurationNum != 0;
    assume newConfigurationNum > 0;
    Mem_T.VOID[configurationNum_1] := Mem_T.VOID[newConfigurationNum];
    Tmp_185 := status_15;
    return;

  anon5_Then:
    assume {:partition} 0 <= intStatus;
    assume {:nonnull} type_1 != 0;
    assume type_1 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.VOID[type_1] != 4;
    havoc Tmp_188;
    assume {:nonnull} parentFdoExt_19 != 0;
    assume parentFdoExt_19 > 0;
    havoc vslice_dummy_var_78;
    call {:si_unique_call 213} WPP_RECORDER_SF_(vslice_dummy_var_78, 2, 8, 66, Tmp_188);
    assume {:nonnull} newConfigurationNum != 0;
    assume newConfigurationNum > 0;
    Mem_T.VOID[newConfigurationNum] := 0;
    goto L25;

  anon6_Then:
    assume {:partition} Mem_T.VOID[type_1] == 4;
    goto L25;
}



procedure {:origName "WPP_RECORDER_SF_qDD"} WPP_RECORDER_SF_qDD(actual_AutoLogContext_6: int, actual_level_6: int, actual_flags_6: int, actual_id_6: int, actual_traceGuid_6: int, actual_s_p_e_c_i_a_l_16: int, actual_s_p_e_c_i_a_l_17: int, actual_s_p_e_c_i_a_l_18: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qDD"} WPP_RECORDER_SF_qDD(actual_AutoLogContext_6: int, actual_level_6: int, actual_flags_6: int, actual_id_6: int, actual_traceGuid_6: int, actual_s_p_e_c_i_a_l_16: int, actual_s_p_e_c_i_a_l_17: int, actual_s_p_e_c_i_a_l_18: int)
{
  var {:scalar} Tmp_189: int;
  var {:scalar} Tmp_195: int;
  var {:scalar} Tmp_198: int;
  var {:scalar} Tmp_199: int;
  var {:scalar} level_6: int;
  var {:scalar} flags_6: int;
  var {:pointer} traceGuid_6: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 214} vslice_dummy_var_27 := __HAVOC_malloc(4);
    level_6 := actual_level_6;
    flags_6 := actual_flags_6;
    traceGuid_6 := actual_traceGuid_6;
    call {:si_unique_call 215} vslice_dummy_var_29 := __HAVOC_malloc(4);
    Tmp_189 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_6 - 1);
    call {:si_unique_call 216} Tmp_198 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 217} Tmp_199 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 218} Tmp_195 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 219} vslice_dummy_var_28 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "ChangeParentD3ColdStateLocked"} ChangeParentD3ColdStateLocked(actual_parentFdoExt_20: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ChangeParentD3ColdStateLocked"} ChangeParentD3ColdStateLocked(actual_parentFdoExt_20: int)
{
  var {:scalar} i_2: int;
  var {:pointer} Tmp_200: int;
  var {:pointer} Tmp_201: int;
  var {:pointer} thisFuncPdoExt: int;
  var {:pointer} devExt_8: int;
  var {:pointer} Tmp_202: int;
  var {:pointer} Tmp_203: int;
  var {:pointer} Tmp_204: int;
  var {:scalar} newState: int;
  var {:scalar} Tmp_206: int;
  var {:scalar} Tmp_207: int;
  var {:pointer} devObj_1: int;
  var {:pointer} Tmp_209: int;
  var {:pointer} parentFdoExt_20: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;

  anon0:
    call {:si_unique_call 220} vslice_dummy_var_30 := __HAVOC_malloc(4);
    parentFdoExt_20 := actual_parentFdoExt_20;
    call {:si_unique_call 221} Tmp_200 := __HAVOC_malloc(4);
    call {:si_unique_call 222} Tmp_203 := __HAVOC_malloc(68);
    call {:si_unique_call 223} sdv_do_paged_code_check();
    newState := 0;
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    goto L14;

  L14:
    call {:si_unique_call 224} i_2, Tmp_200, Tmp_201, thisFuncPdoExt, devExt_8, Tmp_202, Tmp_203, Tmp_204, newState, Tmp_206, Tmp_207, devObj_1, Tmp_209, vslice_dummy_var_31 := ChangeParentD3ColdStateLocked_loop_L14(i_2, Tmp_200, Tmp_201, thisFuncPdoExt, devExt_8, Tmp_202, Tmp_203, Tmp_204, newState, Tmp_206, Tmp_207, devObj_1, Tmp_209, parentFdoExt_20, vslice_dummy_var_31);
    goto L14_last;

  L14_last:
    i_2 := 0;
    goto L15;

  L15:
    call {:si_unique_call 225} i_2, Tmp_200, thisFuncPdoExt, devExt_8, Tmp_202, newState, Tmp_206, Tmp_207, devObj_1, Tmp_209 := ChangeParentD3ColdStateLocked_loop_L15(i_2, Tmp_200, thisFuncPdoExt, devExt_8, Tmp_202, newState, Tmp_206, Tmp_207, devObj_1, Tmp_209, parentFdoExt_20);
    goto L15_last;

  L15_last:
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    havoc Tmp_202;
    assume {:nonnull} Tmp_202 != 0;
    assume Tmp_202 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_206 := i_2;
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    havoc Tmp_209;
    assume {:nonnull} Tmp_209 != 0;
    assume Tmp_209 > 0;
    havoc Tmp_200;
    assume {:nonnull} Tmp_200 != 0;
    assume Tmp_200 > 0;
    havoc devObj_1;
    assume {:nonnull} devObj_1 != 0;
    assume devObj_1 > 0;
    havoc devExt_8;
    assume {:nonnull} devExt_8 != 0;
    assume devExt_8 > 0;
    thisFuncPdoExt := functionPdoExt_DEVICE_EXTENSION(devExt_8);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} i_2 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} newState != 0;
    assume {:nonnull} thisFuncPdoExt != 0;
    assume thisFuncPdoExt > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_207 := 1;
    goto L29;

  L29:
    newState := Tmp_207;
    goto L30;

  L30:
    i_2 := i_2 + 1;
    goto L30_dummy;

  L30_dummy:
    assume false;
    return;

  anon19_Then:
    goto L26;

  L26:
    Tmp_207 := 0;
    goto L29;

  anon18_Then:
    assume {:partition} newState == 0;
    goto L26;

  anon23_Then:
    assume {:partition} i_2 == 0;
    assume {:nonnull} thisFuncPdoExt != 0;
    assume thisFuncPdoExt > 0;
    havoc newState;
    goto L30;

  anon22_Then:
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    call {:si_unique_call 226} vslice_dummy_var_31 := KeReleaseMutex(0, 0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} newState != 0;
    Tmp_201 := strConst__li2bpl3;
    goto L44;

  L44:
    havoc Tmp_204;
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    havoc vslice_dummy_var_79;
    call {:si_unique_call 227} WPP_RECORDER_SF_qs(vslice_dummy_var_79, 4, 1, 72, Tmp_204, parentFdoExt_20, Tmp_201);
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    Tmp_203 := strConst__li2bpl4;
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    havoc vslice_dummy_var_80;
    call {:si_unique_call 228} AcquireMutex(D3ColdStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_20), Tmp_203, vslice_dummy_var_80);
    goto L44_dummy;

  L44_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} newState == 0;
    Tmp_201 := strConst__li2bpl2;
    goto L44;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:nonnull} parentFdoExt_20 != 0;
    assume parentFdoExt_20 > 0;
    goto L1;

  L1:
    goto LM2;

  anon21_Then:
    goto L1;
}



procedure {:origName "ParentSelectConfiguration"} ParentSelectConfiguration(actual_parentFdoExt_21: int, actual_configDesc: int, actual_bufferLength: int, actual_interfaceList: int, actual_numberOfInterfaces: int) returns (Tmp_210: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentSelectConfiguration"} ParentSelectConfiguration(actual_parentFdoExt_21: int, actual_configDesc: int, actual_bufferLength: int, actual_interfaceList: int, actual_numberOfInterfaces: int) returns (Tmp_210: int)
{
  var {:scalar} i_3: int;
  var {:pointer} Tmp_211: int;
  var {:scalar} Tmp_212: int;
  var {:scalar} Tmp_213: int;
  var {:scalar} Tmp_215: int;
  var {:scalar} length: int;
  var {:scalar} Tmp_218: int;
  var {:pointer} sdv_106: int;
  var {:scalar} Tmp_219: int;
  var {:scalar} Tmp_220: int;
  var {:pointer} interfaceInfo: int;
  var {:pointer} index: int;
  var {:pointer} Tmp_221: int;
  var {:pointer} urb_2: int;
  var {:pointer} Tmp_222: int;
  var {:scalar} status_16: int;
  var {:pointer} parentFdoExt_21: int;
  var {:pointer} configDesc: int;
  var {:pointer} interfaceList: int;
  var {:scalar} numberOfInterfaces: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;

  anon0:
    parentFdoExt_21 := actual_parentFdoExt_21;
    configDesc := actual_configDesc;
    interfaceList := actual_interfaceList;
    numberOfInterfaces := actual_numberOfInterfaces;
    urb_2 := 0;
    index := 0;
    call {:si_unique_call 229} sdv_do_paged_code_check();
    call {:si_unique_call 230} urb_2 := BuildSelectConfigUrb(parentFdoExt_21, configDesc, interfaceList, numberOfInterfaces);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} urb_2 == 0;
    havoc Tmp_211;
    assume {:nonnull} parentFdoExt_21 != 0;
    assume parentFdoExt_21 > 0;
    havoc vslice_dummy_var_81;
    call {:si_unique_call 231} WPP_RECORDER_SF_(vslice_dummy_var_81, 2, 8, 13, Tmp_211);
    assume {:nonnull} parentFdoExt_21 != 0;
    assume parentFdoExt_21 > 0;
    havoc vslice_dummy_var_82;
    call {:si_unique_call 232} RecordFailure(parentFdoExt_21, vslice_dummy_var_82, -1073741670, 0, 536870917, -799849643, 0, 0);
    Tmp_210 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} urb_2 != 0;
    call {:si_unique_call 233} status_16 := SubmitUrb(parentFdoExt_21, urb_2, 1, 0, 0, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_16 < 0;
    havoc Tmp_222;
    assume {:nonnull} parentFdoExt_21 != 0;
    assume parentFdoExt_21 > 0;
    havoc vslice_dummy_var_83;
    call {:si_unique_call 234} WPP_RECORDER_SF_D(vslice_dummy_var_83, 2, 8, 14, Tmp_222, status_16);
    assume {:nonnull} configDesc != 0;
    assume configDesc > 0;
    Tmp_218 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(configDesc)];
    assume {:nonnull} parentFdoExt_21 != 0;
    assume parentFdoExt_21 > 0;
    assume {:nonnull} urb_2 != 0;
    assume urb_2 > 0;
    havoc vslice_dummy_var_84;
    havoc vslice_dummy_var_85;
    call {:si_unique_call 235} RecordFailure(parentFdoExt_21, vslice_dummy_var_84, status_16, vslice_dummy_var_85, 536870920, -799849658, configDesc, Tmp_218);
    goto L32;

  L32:
    call {:si_unique_call 236} ExFreePoolWithTag(0, -1016958123);
    Tmp_210 := status_16;
    goto L1;

  anon14_Then:
    assume {:partition} 0 <= status_16;
    assume {:nonnull} parentFdoExt_21 != 0;
    assume parentFdoExt_21 > 0;
    assume {:nonnull} urb_2 != 0;
    assume urb_2 > 0;
    assume {:nonnull} urb_2 != 0;
    assume urb_2 > 0;
    index := Interface__URB_SELECT_CONFIGURATION(UrbSelectConfiguration__URB(urb_2));
    i_3 := 0;
    goto L31;

  L31:
    call {:si_unique_call 237} i_3, Tmp_212, Tmp_213, Tmp_215, length, sdv_106, Tmp_219, Tmp_220, interfaceInfo := ParentSelectConfiguration_loop_L31(i_3, Tmp_212, Tmp_213, Tmp_215, length, sdv_106, Tmp_219, Tmp_220, interfaceInfo, index, interfaceList, numberOfInterfaces);
    goto L31_last;

  L31_last:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} numberOfInterfaces > i_3;
    interfaceInfo := index;
    assume {:nonnull} interfaceInfo != 0;
    assume interfaceInfo > 0;
    havoc length;
    call {:si_unique_call 238} sdv_106 := ExAllocatePoolWithTag(512, length, -1016958123);
    Tmp_213 := i_3;
    assume {:nonnull} interfaceList != 0;
    assume interfaceList > 0;
    Tmp_212 := i_3;
    assume {:nonnull} interfaceList != 0;
    assume interfaceList > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_220 := i_3;
    assume {:nonnull} interfaceList != 0;
    assume interfaceList > 0;
    call {:si_unique_call 239} sdv_RtlZeroMemory(0, length);
    goto L44;

  L44:
    Tmp_219 := i_3;
    assume {:nonnull} interfaceList != 0;
    assume interfaceList > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    havoc Tmp_221;
    assume {:nonnull} parentFdoExt_21 != 0;
    assume parentFdoExt_21 > 0;
    havoc vslice_dummy_var_86;
    call {:si_unique_call 240} WPP_RECORDER_SF_(vslice_dummy_var_86, 2, 8, 15, Tmp_221);
    assume {:nonnull} parentFdoExt_21 != 0;
    assume parentFdoExt_21 > 0;
    havoc vslice_dummy_var_87;
    call {:si_unique_call 241} RecordFailure(parentFdoExt_21, vslice_dummy_var_87, -1073741670, 0, 536870917, -799849655, 0, 0);
    status_16 := -1073741670;
    goto L32;

  anon18_Then:
    Tmp_215 := i_3;
    assume {:nonnull} interfaceList != 0;
    assume interfaceList > 0;
    call {:si_unique_call 242} sdv_RtlCopyMemory(0, 0, length);
    i_3 := i_3 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    assume false;
    return;

  anon17_Then:
    goto L44;

  anon15_Then:
    assume {:partition} i_3 >= numberOfInterfaces;
    goto L32;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "GetInterfaceList"} GetInterfaceList(actual_parentFdoExt_22: int, actual_configDesc_1: int, actual_bufferLength_1: int) returns (Tmp_223: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetInterfaceList"} GetInterfaceList(actual_parentFdoExt_22: int, actual_configDesc_1: int, actual_bufferLength_1: int) returns (Tmp_223: int)
{
  var {:scalar} i_4: int;
  var {:pointer} Tmp_224: int;
  var {:scalar} Tmp_225: int;
  var {:scalar} Tmp_226: int;
  var {:pointer} interfaceDesc: int;
  var {:scalar} Tmp_228: int;
  var {:pointer} sdv_107: int;
  var {:pointer} Tmp_229: int;
  var {:scalar} Tmp_230: int;
  var {:pointer} interfaceList_1: int;
  var {:pointer} Tmp_231: int;
  var {:scalar} Tmp_232: int;
  var {:scalar} Tmp_233: int;
  var {:scalar} Tmp_234: int;
  var {:scalar} Tmp_235: int;
  var {:scalar} interfaceNumber: int;
  var {:pointer} parentFdoExt_22: int;
  var {:pointer} configDesc_1: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;

  anon0:
    parentFdoExt_22 := actual_parentFdoExt_22;
    configDesc_1 := actual_configDesc_1;
    assume {:nonnull} configDesc_1 != 0;
    assume configDesc_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} configDesc_1 != 0;
    assume configDesc_1 > 0;
    havoc Tmp_232;
    call {:si_unique_call 243} sdv_107 := ExAllocatePoolWithTag(512, Tmp_232, -1016958123);
    interfaceList_1 := sdv_107;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} configDesc_1 != 0;
    assume configDesc_1 > 0;
    havoc Tmp_226;
    call {:si_unique_call 244} sdv_RtlZeroMemory(0, Tmp_226);
    goto L12;

  L12:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    interfaceNumber := 0;
    i_4 := interfaceNumber;
    goto L22;

  L22:
    call {:si_unique_call 245} i_4, Tmp_225, interfaceDesc, Tmp_233, interfaceNumber := GetInterfaceList_loop_L22(i_4, Tmp_225, interfaceDesc, interfaceList_1, Tmp_233, interfaceNumber, configDesc_1);
    goto L22_last;

  L22_last:
    assume {:nonnull} configDesc_1 != 0;
    assume configDesc_1 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    interfaceDesc := 0;
    goto L29;

  L29:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} interfaceDesc != 0;
    Tmp_233 := i_4;
    assume {:nonnull} interfaceList_1 != 0;
    assume interfaceList_1 > 0;
    Tmp_225 := i_4;
    assume {:nonnull} interfaceList_1 != 0;
    assume interfaceList_1 > 0;
    i_4 := i_4 + 1;
    goto L30;

  L30:
    interfaceNumber := interfaceNumber + 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} interfaceNumber > 256;
    call {:si_unique_call 246} ExFreePoolWithTag(0, -1016958123);
    havoc Tmp_231;
    assume {:nonnull} parentFdoExt_22 != 0;
    assume parentFdoExt_22 > 0;
    havoc vslice_dummy_var_88;
    call {:si_unique_call 247} WPP_RECORDER_SF_(vslice_dummy_var_88, 2, 8, 10, Tmp_231);
    assume {:nonnull} configDesc_1 != 0;
    assume configDesc_1 > 0;
    Tmp_230 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(configDesc_1)];
    assume {:nonnull} parentFdoExt_22 != 0;
    assume parentFdoExt_22 > 0;
    havoc vslice_dummy_var_89;
    call {:si_unique_call 248} RecordFailure(parentFdoExt_22, vslice_dummy_var_89, -1073741668, 0, 536870918, -917613489, configDesc_1, Tmp_230);
    Tmp_223 := 0;
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:partition} 256 >= interfaceNumber;
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} interfaceDesc == 0;
    goto L30;

  anon18_Then:
    call {:si_unique_call 249} interfaceDesc := __HAVOC_malloc(1);
    goto L29;

  anon17_Then:
    Tmp_234 := i_4;
    assume {:nonnull} interfaceList_1 != 0;
    assume interfaceList_1 > 0;
    Tmp_228 := i_4;
    assume {:nonnull} interfaceList_1 != 0;
    assume interfaceList_1 > 0;
    goto L53;

  L53:
    Tmp_223 := interfaceList_1;
    goto L1;

  anon16_Then:
    interfaceList_1 := 0;
    havoc Tmp_224;
    assume {:nonnull} parentFdoExt_22 != 0;
    assume parentFdoExt_22 > 0;
    havoc vslice_dummy_var_90;
    call {:si_unique_call 250} WPP_RECORDER_SF_(vslice_dummy_var_90, 2, 8, 11, Tmp_224);
    assume {:nonnull} parentFdoExt_22 != 0;
    assume parentFdoExt_22 > 0;
    havoc vslice_dummy_var_91;
    call {:si_unique_call 251} RecordFailure(parentFdoExt_22, vslice_dummy_var_91, -1073741670, 0, 536870917, -917613492, 0, 0);
    goto L53;

  anon20_Then:
    goto L12;

  anon15_Then:
    interfaceList_1 := 0;
    havoc Tmp_229;
    assume {:nonnull} parentFdoExt_22 != 0;
    assume parentFdoExt_22 > 0;
    havoc vslice_dummy_var_92;
    call {:si_unique_call 252} WPP_RECORDER_SF_(vslice_dummy_var_92, 2, 8, 12, Tmp_229);
    assume {:nonnull} configDesc_1 != 0;
    assume configDesc_1 > 0;
    Tmp_235 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(configDesc_1)];
    assume {:nonnull} parentFdoExt_22 != 0;
    assume parentFdoExt_22 > 0;
    havoc vslice_dummy_var_93;
    call {:si_unique_call 253} RecordFailure(parentFdoExt_22, vslice_dummy_var_93, -1073741668, 0, 536870918, 811748937, configDesc_1, Tmp_235);
    goto L53;
}



procedure {:origName "WPP_RECORDER_SF__HEX_"} WPP_RECORDER_SF__HEX_(actual_AutoLogContext_7: int, actual_level_7: int, actual_flags_7: int, actual_id_7: int, actual_traceGuid_7: int, actual_p: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF__HEX_"} WPP_RECORDER_SF__HEX_(actual_AutoLogContext_7: int, actual_level_7: int, actual_flags_7: int, actual_id_7: int, actual_traceGuid_7: int, actual_p: int)
{
  var {:scalar} s_p_e_c_i_a_l_1: int;
  var {:scalar} Tmp_240: int;
  var {:scalar} Tmp_241: int;
  var {:scalar} Tmp_246: int;
  var {:scalar} Tmp_247: int;
  var {:scalar} level_7: int;
  var {:scalar} flags_7: int;
  var {:pointer} traceGuid_7: int;
  var {:pointer} p: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;

  anon0:
    call {:si_unique_call 254} s_p_e_c_i_a_l_1 := __HAVOC_malloc(8);
    call {:si_unique_call 255} vslice_dummy_var_32 := __HAVOC_malloc(4);
    level_7 := actual_level_7;
    flags_7 := actual_flags_7;
    traceGuid_7 := actual_traceGuid_7;
    p := actual_p;
    assume {:nonnull} p != 0;
    assume p > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} p != 0;
    assume p > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    call {:si_unique_call 256} vslice_dummy_var_33 := __HAVOC_malloc(4);
    Tmp_247 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_7 - 1);
    call {:si_unique_call 257} Tmp_246 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 258} Tmp_240 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    call {:si_unique_call 259} Tmp_241 := corral_nondet();
    goto L6;

  L6:
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    call {:si_unique_call 260} vslice_dummy_var_34 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "StartParentFdo"} StartParentFdo(actual_parentFdoExt_23: int, actual_irp_13: int) returns (Tmp_249: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "StartParentFdo"} StartParentFdo(actual_parentFdoExt_23: int, actual_irp_13: int) returns (Tmp_249: int)
{
  var {:scalar} Tmp_250: int;
  var {:scalar} Tmp_251: int;
  var {:pointer} Tmp_252: int;
  var {:scalar} Tmp_253: int;
  var {:pointer} Tmp_254: int;
  var {:scalar} Tmp_255: int;
  var {:pointer} Tmp_256: int;
  var {:pointer} Tmp_257: int;
  var {:scalar} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:scalar} beginTime: int;
  var {:scalar} currentTime: int;
  var {:pointer} Tmp_260: int;
  var {:pointer} Tmp_261: int;
  var {:pointer} Tmp_262: int;
  var {:scalar} vidPidFlags: int;
  var {:scalar} oldPnpState: int;
  var {:scalar} Tmp_264: int;
  var {:pointer} Tmp_265: int;
  var {:pointer} Tmp_266: int;
  var {:scalar} altStatus: int;
  var {:pointer} Tmp_267: int;
  var {:scalar} Tmp_268: int;
  var {:pointer} Tmp_269: int;
  var {:scalar} Tmp_270: int;
  var {:pointer} Tmp_271: int;
  var {:scalar} status_17: int;
  var {:pointer} Tmp_272: int;
  var {:dopa} {:scalar} configurationNum_2: int;
  var {:scalar} vidPidRevFlags: int;
  var {:scalar} retryCount: int;
  var {:scalar} Tmp_273: int;
  var {:pointer} parentFdoExt_23: int;
  var {:pointer} irp_13: int;
  var boogieTmp: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;

  anon0:
    call {:si_unique_call 261} beginTime := __HAVOC_malloc(20);
    call {:si_unique_call 262} currentTime := __HAVOC_malloc(20);
    call {:si_unique_call 263} vidPidFlags := __HAVOC_malloc(128);
    call {:si_unique_call 264} configurationNum_2 := __HAVOC_malloc(4);
    call {:si_unique_call 265} vidPidRevFlags := __HAVOC_malloc(128);
    parentFdoExt_23 := actual_parentFdoExt_23;
    irp_13 := actual_irp_13;
    assume {:nonnull} configurationNum_2 != 0;
    assume configurationNum_2 > 0;
    Mem_T.VOID[configurationNum_2] := 0;
    retryCount := 0;
    call {:si_unique_call 266} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc oldPnpState;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    call {:si_unique_call 267} sdv_IoCopyCurrentIrpStackLocationToNext(irp_13);
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_94;
    havoc vslice_dummy_var_95;
    call {:si_unique_call 268} status_17 := CallDriverSync(vslice_dummy_var_94, irp_13, 0, vslice_dummy_var_95);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} status_17 < 0;
    havoc Tmp_269;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_96;
    call {:si_unique_call 269} WPP_RECORDER_SF_d(vslice_dummy_var_96, 2, 8, 38, Tmp_269, status_17);
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_97;
    call {:si_unique_call 270} RecordFailure(parentFdoExt_23, vslice_dummy_var_97, status_17, 0, 536870916, -967618490, 0, 0);
    goto L74;

  L74:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} status_17 < 0;
    havoc Tmp_267;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_98;
    call {:si_unique_call 271} WPP_RECORDER_SF_d(vslice_dummy_var_98, 2, 8, 45, Tmp_267, status_17);
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    call {:si_unique_call 272} ReportStartFailData(parentFdoExt_23);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} yogi_error != 1;
    goto L95;

  L95:
    call {:si_unique_call 273} UsbcCompleteIrp(parentFdoExt_23, status_17, irp_13);
    Tmp_249 := status_17;
    goto LM2;

  LM2:
    return;

  anon107_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    assume {:partition} 0 <= status_17;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    assume {:nonnull} beginTime != 0;
    assume beginTime > 0;
    assume {:nonnull} currentTime != 0;
    assume currentTime > 0;
    havoc Tmp_255;
    havoc Tmp_272;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_99;
    call {:si_unique_call 274} WPP_RECORDER_SF_i(vslice_dummy_var_99, 2, 1, 46, Tmp_272, Tmp_255);
    call {:si_unique_call 275} USBC_RegisterWmi(parentFdoExt_23);
    goto L95;

  anon75_Then:
    assume {:partition} 0 <= status_17;
    assume {:nonnull} beginTime != 0;
    assume beginTime > 0;
    assume {:nonnull} currentTime != 0;
    assume currentTime > 0;
    havoc Tmp_264;
    havoc Tmp_259;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_100;
    call {:si_unique_call 276} WPP_RECORDER_SF_i(vslice_dummy_var_100, 2, 2, 39, Tmp_259, Tmp_264);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} oldPnpState != 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} oldPnpState != 2;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} oldPnpState == 6;
    havoc Tmp_271;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_101;
    call {:si_unique_call 277} WPP_RECORDER_SF_(vslice_dummy_var_101, 4, 2, 40, Tmp_271);
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc Tmp_256;
    assume {:nonnull} Tmp_256 != 0;
    assume Tmp_256 > 0;
    havoc Tmp_273;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc Tmp_254;
    assume {:nonnull} Tmp_254 != 0;
    assume Tmp_254 > 0;
    Tmp_258 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_254)];
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_102;
    havoc vslice_dummy_var_103;
    call {:si_unique_call 278} status_17 := ParentSelectConfiguration(parentFdoExt_23, vslice_dummy_var_102, Tmp_258, vslice_dummy_var_103, Tmp_273);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    call {:si_unique_call 279} EnableIdleTimer(parentFdoExt_23, 1, -800107437);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} yogi_error != 1;
    goto L74;

  anon111_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon110_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon94_Then:
    assume {:partition} oldPnpState != 6;
    status_17 := -1073741436;
    havoc Tmp_261;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_104;
    call {:si_unique_call 280} WPP_RECORDER_SF_L(vslice_dummy_var_104, 2, 8, 44, Tmp_261, oldPnpState);
    goto L74;

  anon95_Then:
    assume {:partition} oldPnpState == 2;
    goto L74;

  anon76_Then:
    assume {:partition} oldPnpState == 0;
    call {:si_unique_call 281} QueryUSBStackAndDeviceCapabilities(parentFdoExt_23);
    call {:si_unique_call 282} vslice_dummy_var_35 := ParentGetD3ColdInterface(parentFdoExt_23);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 283} vslice_dummy_var_36 := ParentQueryForInterface(parentFdoExt_23);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 284} status_17 := ParentFindOriginalConfiguration(parentFdoExt_23, configurationNum_2);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} status_17 >= 0;
    goto L121;

  L121:
    call {:si_unique_call 285} Tmp_250, Tmp_251, Tmp_252, Tmp_253, Tmp_257, Tmp_260, Tmp_262, Tmp_265, Tmp_266, altStatus, Tmp_268, Tmp_270, status_17, retryCount, boogieTmp, vslice_dummy_var_38 := StartParentFdo_loop_L121(Tmp_250, Tmp_251, Tmp_252, Tmp_253, Tmp_257, Tmp_260, Tmp_262, vidPidFlags, Tmp_265, Tmp_266, altStatus, Tmp_268, Tmp_270, status_17, configurationNum_2, vidPidRevFlags, retryCount, parentFdoExt_23, boogieTmp, vslice_dummy_var_38);
    goto L121_last;

  L121_last:
    call {:si_unique_call 304} status_17 := GetDeviceDescriptor(parentFdoExt_23);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} status_17 < 0;
    goto L163;

  L163:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} status_17 < 0;
    havoc Tmp_262;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_105;
    call {:si_unique_call 286} WPP_RECORDER_SF_dD(vslice_dummy_var_105, 2, 8, 43, Tmp_262, retryCount, status_17);
    call {:si_unique_call 287} StartCleanup(parentFdoExt_23);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 288} vslice_dummy_var_38 := ResetDevice(parentFdoExt_23);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} yogi_error != 1;
    retryCount := retryCount + 1;
    goto L167;

  L167:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} status_17 >= 0;
    goto L169;

  L169:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} status_17 >= 0;
    call {:si_unique_call 289} status_17 := CreateFunctionList(parentFdoExt_23);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} status_17 >= 0;
    call {:si_unique_call 290} vslice_dummy_var_37 := GetMsExtendedConfigDescriptor(parentFdoExt_23);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    call {:si_unique_call 291} RegisterCompositeDevice(parentFdoExt_23);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} yogi_error != 1;
    goto L181;

  L181:
    call {:si_unique_call 292} status_17 := CreateStaticFunctionPDOs(parentFdoExt_23);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} yogi_error != 1;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} status_17 >= 0;
    call {:si_unique_call 293} IoInvalidateDeviceRelations(0, 0);
    goto L189;

  L189:
    call {:si_unique_call 294} CheckParentIdle(parentFdoExt_23);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} yogi_error != 1;
    goto L74;

  anon106_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    assume {:partition} 0 > status_17;
    goto L189;

  anon105_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon104_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon91_Then:
    goto L181;

  anon103_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon90_Then:
    assume {:partition} 0 > status_17;
    goto L74;

  anon89_Then:
    assume {:partition} 0 > status_17;
    goto L74;

  anon87_Then:
    assume {:partition} 0 > status_17;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} 3 <= retryCount;
    goto L169;

  anon88_Then:
    assume {:partition} retryCount < 3;
    goto anon88_Then_dummy;

  anon88_Then_dummy:
    assume false;
    return;

  anon109_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon108_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    assume {:partition} 0 <= status_17;
    goto L167;

  anon79_Then:
    assume {:partition} 0 <= status_17;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_106;
    havoc vslice_dummy_var_107;
    havoc vslice_dummy_var_108;
    call {:si_unique_call 295} SetRecorderLogIdentifier(vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108);
    assume {:nonnull} configurationNum_2 != 0;
    assume configurationNum_2 > 0;
    call {:si_unique_call 296} status_17 := GetConfigDescriptor(parentFdoExt_23, Mem_T.VOID[configurationNum_2]);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} yogi_error != 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} status_17 < 0;
    goto L163;

  anon80_Then:
    assume {:partition} 0 <= status_17;
    call {:si_unique_call 297} status_17 := GetParentFdoCapabilities(parentFdoExt_23);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_17 < 0;
    goto L163;

  anon81_Then:
    assume {:partition} 0 <= status_17;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_109;
    havoc vslice_dummy_var_110;
    havoc vslice_dummy_var_111;
    havoc vslice_dummy_var_112;
    call {:si_unique_call 298} USBC_QueryKseDeviceFlags(vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vidPidRevFlags, vidPidFlags, vslice_dummy_var_112);
    assume {:nonnull} vidPidRevFlags != 0;
    assume vidPidRevFlags > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto L147;

  L147:
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    goto L148;

  L148:
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc Tmp_260;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    Tmp_251 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_260)];
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_113;
    call {:si_unique_call 299} boogieTmp := GetInterfaceList(parentFdoExt_23, vslice_dummy_var_113, Tmp_251);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc Tmp_266;
    assume {:nonnull} Tmp_266 != 0;
    assume Tmp_266 > 0;
    havoc Tmp_253;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc Tmp_265;
    assume {:nonnull} Tmp_265 != 0;
    assume Tmp_265 > 0;
    Tmp_270 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_265)];
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_114;
    havoc vslice_dummy_var_115;
    call {:si_unique_call 300} status_17 := ParentSelectConfiguration(parentFdoExt_23, vslice_dummy_var_114, Tmp_270, vslice_dummy_var_115, Tmp_253);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} yogi_error != 1;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} status_17 < 0;
    altStatus := 0;
    call {:si_unique_call 301} altStatus := ParentFindAltConfiguration(parentFdoExt_23, configurationNum_2);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} altStatus < 0;
    assume {:nonnull} configurationNum_2 != 0;
    assume configurationNum_2 > 0;
    Tmp_268 := Mem_T.VOID[configurationNum_2];
    havoc Tmp_257;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_116;
    call {:si_unique_call 302} WPP_RECORDER_SF_d(vslice_dummy_var_116, 2, 8, 42, Tmp_257, Tmp_268);
    goto L163;

  anon93_Then:
    assume {:partition} 0 <= altStatus;
    assume {:nonnull} configurationNum_2 != 0;
    assume configurationNum_2 > 0;
    Tmp_250 := Mem_T.VOID[configurationNum_2];
    havoc Tmp_252;
    assume {:nonnull} parentFdoExt_23 != 0;
    assume parentFdoExt_23 > 0;
    havoc vslice_dummy_var_117;
    call {:si_unique_call 303} WPP_RECORDER_SF_d(vslice_dummy_var_117, 4, 1, 41, Tmp_252, Tmp_250);
    goto L163;

  anon85_Then:
    assume {:partition} 0 <= status_17;
    goto L163;

  anon102_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon84_Then:
    status_17 := -1073741668;
    goto L163;

  anon82_Then:
    assume {:nonnull} vidPidFlags != 0;
    assume vidPidFlags > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L148;

  anon83_Then:
    goto L147;

  anon101_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon100_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon99_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} configurationNum_2 != 0;
    assume configurationNum_2 > 0;
    Mem_T.VOID[configurationNum_2] := 0;
    status_17 := 0;
    goto L121;

  anon98_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon97_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentSetD0"} ParentSetD0(actual_parentFdoExt_24: int, actual_synchronous_1: int, actual_functionPdoExt_7: int, actual_D0Irp: int, actual_ParentSetD0Completion: int) returns (Tmp_274: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentSetD0"} ParentSetD0(actual_parentFdoExt_24: int, actual_synchronous_1: int, actual_functionPdoExt_7: int, actual_D0Irp: int, actual_ParentSetD0Completion: int) returns (Tmp_274: int)
{
  var {:pointer} Tmp_275: int;
  var {:pointer} Tmp_276: int;
  var {:scalar} powerState_6: int;
  var {:pointer} Tmp_277: int;
  var {:scalar} ntStatus_1: int;
  var {:pointer} Tmp_278: int;
  var {:scalar} oldIrql_3: int;
  var {:scalar} enableIdleTimerBeforeExit: int;
  var {:scalar} status_18: int;
  var {:pointer} parentFdoExt_24: int;
  var {:scalar} synchronous_1: int;
  var {:pointer} functionPdoExt_7: int;
  var {:pointer} D0Irp: int;
  var {:scalar} ParentSetD0Completion: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;

  anon0:
    call {:si_unique_call 305} powerState_6 := __HAVOC_malloc(8);
    parentFdoExt_24 := actual_parentFdoExt_24;
    synchronous_1 := actual_synchronous_1;
    functionPdoExt_7 := actual_functionPdoExt_7;
    D0Irp := actual_D0Irp;
    ParentSetD0Completion := actual_ParentSetD0Completion;
    call {:si_unique_call 306} Tmp_277 := __HAVOC_malloc(188);
    ntStatus_1 := 0;
    call {:si_unique_call 307} DisableIdleTimer(parentFdoExt_24, 1, -799849424);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    enableIdleTimerBeforeExit := 1;
    call {:si_unique_call 308} CancelFdoIdleIrp(parentFdoExt_24, 1);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    havoc Tmp_275;
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    havoc vslice_dummy_var_118;
    havoc vslice_dummy_var_119;
    call {:si_unique_call 309} WPP_RECORDER_SF_q(vslice_dummy_var_118, 4, 3, 57, Tmp_275, vslice_dummy_var_119);
    goto L44;

  L44:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} enableIdleTimerBeforeExit != 0;
    call {:si_unique_call 310} EnableIdleTimer(parentFdoExt_24, 1, -799849424);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto L46;

  L46:
    Tmp_274 := ntStatus_1;
    goto LM2;

  LM2:
    return;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} enableIdleTimerBeforeExit == 0;
    goto L46;

  anon27_Then:
    havoc Tmp_278;
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    havoc vslice_dummy_var_120;
    havoc vslice_dummy_var_121;
    call {:si_unique_call 311} WPP_RECORDER_SF_q(vslice_dummy_var_120, 4, 3, 56, Tmp_278, vslice_dummy_var_121);
    assume {:nonnull} powerState_6 != 0;
    assume powerState_6 > 0;
    call {:si_unique_call 312} status_18 := FdoSendSetPowerRequest#1(powerState_6, 0, 0, parentFdoExt_24);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} yogi_error != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_18 == 259;
    goto L36;

  L36:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} synchronous_1 != 0;
    Tmp_277 := strConst__li2bpl5;
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    havoc vslice_dummy_var_122;
    call {:si_unique_call 313} WaitForSignal(parentD0Event_PARENT_FDO_EXTENSION(parentFdoExt_24), Tmp_277, vslice_dummy_var_122);
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    ntStatus_1 := -1073741668;
    goto L44;

  anon31_Then:
    goto L44;

  anon30_Then:
    assume {:partition} synchronous_1 == 0;
    call {:si_unique_call 314} Tmp_276 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_276 != 0;
    assume Tmp_276 > 0;
    Mem_T.VOID[Tmp_276] := oldIrql_3;
    call {:si_unique_call 315} sdv_KeAcquireSpinLock(0, Tmp_276);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_276 != 0;
    assume Tmp_276 > 0;
    oldIrql_3 := Mem_T.VOID[Tmp_276];
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 316} sdv_IoMarkIrpPending(0);
    assume {:nonnull} functionPdoExt_7 != 0;
    assume functionPdoExt_7 > 0;
    assume {:nonnull} functionPdoExt_7 != 0;
    assume functionPdoExt_7 > 0;
    assume {:nonnull} functionPdoExt_7 != 0;
    assume functionPdoExt_7 > 0;
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    call {:si_unique_call 317} vslice_dummy_var_39 := sdv_InsertTailList(pendingD0List_PARENT_FDO_EXTENSION(parentFdoExt_24), pendingD0ListEntry_FUNCTION_PDO_EXTENSION(functionPdoExt_7));
    ntStatus_1 := 259;
    enableIdleTimerBeforeExit := 0;
    goto L62;

  L62:
    call {:si_unique_call 318} sdv_KeReleaseSpinLock(0, oldIrql_3);
    goto L44;

  anon33_Then:
    assume {:nonnull} parentFdoExt_24 != 0;
    assume parentFdoExt_24 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    ntStatus_1 := -1073741668;
    goto L62;

  anon34_Then:
    goto L62;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:partition} status_18 != 259;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_18 != 17;
    ntStatus_1 := status_18;
    goto L44;

  anon29_Then:
    assume {:partition} status_18 == 17;
    goto L36;

  anon37_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "UnregisterCompositeDevice"} UnregisterCompositeDevice(actual_parentFdoExt_25: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UnregisterCompositeDevice"} UnregisterCompositeDevice(actual_parentFdoExt_25: int)
{
  var {:pointer} nextSp_2: int;
  var {:pointer} Tmp_279: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} irp_14: int;
  var {:scalar} status_19: int;
  var {:pointer} Tmp_283: int;
  var {:pointer} parentFdoExt_25: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;

  anon0:
    call {:si_unique_call 319} vslice_dummy_var_40 := __HAVOC_malloc(4);
    parentFdoExt_25 := actual_parentFdoExt_25;
    call {:si_unique_call 320} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_25 != 0;
    assume parentFdoExt_25 > 0;
    havoc Tmp_280;
    assume {:nonnull} Tmp_280 != 0;
    assume Tmp_280 > 0;
    havoc vslice_dummy_var_123;
    call {:si_unique_call 321} irp_14 := IoAllocateIrp(vslice_dummy_var_123, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_14 != 0;
    call {:si_unique_call 322} nextSp_2 := sdv_IoGetNextIrpStackLocation(irp_14);
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    call {:si_unique_call 323} status_19 := CallNextDriverSync(parentFdoExt_25, irp_14, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_19 < 0;
    havoc Tmp_279;
    assume {:nonnull} parentFdoExt_25 != 0;
    assume parentFdoExt_25 > 0;
    havoc vslice_dummy_var_124;
    call {:si_unique_call 324} WPP_RECORDER_SF_d(vslice_dummy_var_124, 2, 8, 70, Tmp_279, status_19);
    goto L30;

  L30:
    call {:si_unique_call 325} IoFreeIrp(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} 0 <= status_19;
    assume {:nonnull} parentFdoExt_25 != 0;
    assume parentFdoExt_25 > 0;
    goto L30;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_14 == 0;
    status_19 := -1073741670;
    havoc Tmp_283;
    assume {:nonnull} parentFdoExt_25 != 0;
    assume parentFdoExt_25 > 0;
    havoc vslice_dummy_var_125;
    call {:si_unique_call 326} WPP_RECORDER_SF_d(vslice_dummy_var_125, 2, 8, 69, Tmp_283, status_19);
    goto L1;
}



procedure {:origName "GetConfigDescriptor"} GetConfigDescriptor(actual_parentFdoExt_26: int, actual_configurationNum_3: int) returns (Tmp_284: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetConfigDescriptor"} GetConfigDescriptor(actual_parentFdoExt_26: int, actual_configurationNum_3: int) returns (Tmp_284: int)
{
  var {:scalar} i_5: int;
  var {:pointer} Tmp_285: int;
  var {:pointer} Tmp_286: int;
  var {:pointer} Tmp_287: int;
  var {:pointer} Tmp_288: int;
  var {:dopa} {:scalar} validationFail: int;
  var {:dopa} {:scalar} usbdStatus_1: int;
  var {:dopa} {:scalar} bytesReturned_2: int;
  var {:scalar} numAttempts: int;
  var {:scalar} Tmp_289: int;
  var {:scalar} status_20: int;
  var {:pointer} parentFdoExt_26: int;
  var {:scalar} configurationNum_3: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;

  anon0:
    call {:si_unique_call 327} validationFail := __HAVOC_malloc(4);
    call {:si_unique_call 328} usbdStatus_1 := __HAVOC_malloc(4);
    call {:si_unique_call 329} bytesReturned_2 := __HAVOC_malloc(4);
    parentFdoExt_26 := actual_parentFdoExt_26;
    configurationNum_3 := actual_configurationNum_3;
    numAttempts := 3;
    assume {:nonnull} validationFail != 0;
    assume validationFail > 0;
    Mem_T.VOID[validationFail] := 0;
    i_5 := 0;
    assume {:nonnull} bytesReturned_2 != 0;
    assume bytesReturned_2 > 0;
    Mem_T.VOID[bytesReturned_2] := 0;
    call {:si_unique_call 330} sdv_do_paged_code_check();
    status_20 := -1073741823;
    i_5 := 1;
    goto L18;

  L18:
    call {:si_unique_call 331} i_5, Tmp_285, Tmp_287, Tmp_288, Tmp_289, status_20 := GetConfigDescriptor_loop_L18(i_5, Tmp_285, Tmp_287, Tmp_288, validationFail, usbdStatus_1, bytesReturned_2, numAttempts, Tmp_289, status_20, parentFdoExt_26, configurationNum_3);
    goto L18_last;

  L18_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} numAttempts >= i_5;
    call {:si_unique_call 332} status_20 := TryGetConfigDescriptor(parentFdoExt_26, configurationNum_3, validationFail, usbdStatus_1, bytesReturned_2);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_20 >= 0;
    havoc Tmp_286;
    assume {:nonnull} parentFdoExt_26 != 0;
    assume parentFdoExt_26 > 0;
    havoc vslice_dummy_var_126;
    call {:si_unique_call 333} WPP_RECORDER_SF_d(vslice_dummy_var_126, 4, 1, 26, Tmp_286, i_5);
    goto L19;

  L19:
    Tmp_284 := status_20;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} 0 > status_20;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} numAttempts > i_5;
    Tmp_289 := configurationNum_3;
    havoc Tmp_288;
    assume {:nonnull} parentFdoExt_26 != 0;
    assume parentFdoExt_26 > 0;
    havoc vslice_dummy_var_127;
    call {:si_unique_call 334} WPP_RECORDER_SF_ddd(vslice_dummy_var_127, 2, 8, 27, Tmp_288, Tmp_289, status_20, i_5);
    assume {:nonnull} validationFail != 0;
    assume validationFail > 0;
    Mem_T.VOID[validationFail] := 0;
    goto L48;

  L48:
    i_5 := i_5 + 1;
    goto L48_dummy;

  L48_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} i_5 >= numAttempts;
    assume {:nonnull} validationFail != 0;
    assume validationFail > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.VOID[validationFail] == 0;
    havoc Tmp_287;
    assume {:nonnull} parentFdoExt_26 != 0;
    assume parentFdoExt_26 > 0;
    havoc vslice_dummy_var_128;
    call {:si_unique_call 335} WPP_RECORDER_SF_dd(vslice_dummy_var_128, 2, 8, 29, Tmp_287, numAttempts, status_20);
    assume {:nonnull} bytesReturned_2 != 0;
    assume bytesReturned_2 > 0;
    assume {:nonnull} parentFdoExt_26 != 0;
    assume parentFdoExt_26 > 0;
    assume {:nonnull} usbdStatus_1 != 0;
    assume usbdStatus_1 > 0;
    havoc vslice_dummy_var_129;
    havoc vslice_dummy_var_130;
    call {:si_unique_call 336} RecordFailure(parentFdoExt_26, vslice_dummy_var_129, status_20, Mem_T.VOID[usbdStatus_1], 536870913, -951892922, vslice_dummy_var_130, Mem_T.VOID[bytesReturned_2]);
    goto L48;

  anon14_Then:
    assume {:partition} Mem_T.VOID[validationFail] != 0;
    havoc Tmp_285;
    assume {:nonnull} parentFdoExt_26 != 0;
    assume parentFdoExt_26 > 0;
    havoc vslice_dummy_var_131;
    call {:si_unique_call 337} WPP_RECORDER_SF_dD(vslice_dummy_var_131, 2, 8, 28, Tmp_285, numAttempts, status_20);
    assume {:nonnull} bytesReturned_2 != 0;
    assume bytesReturned_2 > 0;
    assume {:nonnull} parentFdoExt_26 != 0;
    assume parentFdoExt_26 > 0;
    assume {:nonnull} usbdStatus_1 != 0;
    assume usbdStatus_1 > 0;
    havoc vslice_dummy_var_132;
    havoc vslice_dummy_var_133;
    call {:si_unique_call 338} RecordFailure(parentFdoExt_26, vslice_dummy_var_132, status_20, Mem_T.VOID[usbdStatus_1], 536870918, -1018931642, vslice_dummy_var_133, Mem_T.VOID[bytesReturned_2]);
    goto L48;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} i_5 > numAttempts;
    goto L19;
}



procedure {:origName "CreateFunctionList"} CreateFunctionList(actual_parentFdoExt_27: int) returns (Tmp_291: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_291 == 0 || Tmp_291 == -1073741811 || Tmp_291 == -1073741670 || Tmp_291 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CreateFunctionList"} CreateFunctionList(actual_parentFdoExt_27: int) returns (Tmp_291: int)
{
  var {:pointer} functionAssoc_1: int;
  var {:pointer} Tmp_292: int;
  var {:pointer} Tmp_293: int;
  var {:dopa} {:scalar} numFunctions_1: int;
  var {:pointer} Tmp_294: int;
  var {:scalar} status_21: int;
  var {:pointer} parentFdoExt_27: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;

  anon0:
    call {:si_unique_call 339} functionAssoc_1 := __HAVOC_malloc(4);
    call {:si_unique_call 340} numFunctions_1 := __HAVOC_malloc(4);
    parentFdoExt_27 := actual_parentFdoExt_27;
    status_21 := 0;
    assume {:nonnull} functionAssoc_1 != 0;
    assume functionAssoc_1 > 0;
    assume {:nonnull} numFunctions_1 != 0;
    assume numFunctions_1 > 0;
    Mem_T.VOID[numFunctions_1] := 0;
    call {:si_unique_call 341} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    call {:si_unique_call 342} status_21 := InvokeDeviceClassCallback(parentFdoExt_27, functionAssoc_1, numFunctions_1);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_21 < 0;
    goto L34;

  L34:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} status_21 >= 0;
    assume {:nonnull} functionAssoc_1 != 0;
    assume functionAssoc_1 > 0;
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    assume {:nonnull} numFunctions_1 != 0;
    assume numFunctions_1 > 0;
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    goto L38;

  L38:
    Tmp_291 := status_21;
    return;

  anon24_Then:
    assume {:partition} 0 > status_21;
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    goto L38;

  anon21_Then:
    assume {:partition} 0 <= status_21;
    assume {:nonnull} numFunctions_1 != 0;
    assume numFunctions_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.VOID[numFunctions_1] != 0;
    assume {:nonnull} functionAssoc_1 != 0;
    assume functionAssoc_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    havoc Tmp_292;
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    havoc vslice_dummy_var_134;
    call {:si_unique_call 343} WPP_RECORDER_SF_(vslice_dummy_var_134, 4, 1, 60, Tmp_292);
    goto L34;

  anon23_Then:
    goto L20;

  L20:
    call {:si_unique_call 344} status_21 := ParseUSBInterfaceAssociationDescriptors(parentFdoExt_27, functionAssoc_1, numFunctions_1);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_21 >= 0;
    assume {:nonnull} numFunctions_1 != 0;
    assume numFunctions_1 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.VOID[numFunctions_1] != 0;
    assume {:nonnull} functionAssoc_1 != 0;
    assume functionAssoc_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    havoc Tmp_294;
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    havoc vslice_dummy_var_135;
    call {:si_unique_call 345} WPP_RECORDER_SF_(vslice_dummy_var_135, 4, 1, 61, Tmp_294);
    goto L34;

  anon27_Then:
    goto L44;

  L44:
    call {:si_unique_call 346} status_21 := LegacyGroupInterfaces(parentFdoExt_27, functionAssoc_1, numFunctions_1);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_21 >= 0;
    assume {:nonnull} numFunctions_1 != 0;
    assume numFunctions_1 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.VOID[numFunctions_1] != 0;
    assume {:nonnull} functionAssoc_1 != 0;
    assume functionAssoc_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    havoc Tmp_293;
    assume {:nonnull} parentFdoExt_27 != 0;
    assume parentFdoExt_27 > 0;
    havoc vslice_dummy_var_136;
    call {:si_unique_call 347} WPP_RECORDER_SF_(vslice_dummy_var_136, 4, 1, 62, Tmp_293);
    goto L34;

  anon30_Then:
    goto L34;

  anon29_Then:
    assume {:partition} Mem_T.VOID[numFunctions_1] == 0;
    goto L34;

  anon28_Then:
    assume {:partition} 0 > status_21;
    goto L34;

  anon26_Then:
    assume {:partition} Mem_T.VOID[numFunctions_1] == 0;
    goto L44;

  anon25_Then:
    assume {:partition} 0 > status_21;
    goto L34;

  anon22_Then:
    assume {:partition} Mem_T.VOID[numFunctions_1] == 0;
    goto L20;
}



procedure {:origName "PrepareParentFDOForRemove"} PrepareParentFDOForRemove(actual_parentFdoExt_28: int, actual_irp_15: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PrepareParentFDOForRemove"} PrepareParentFDOForRemove(actual_parentFdoExt_28: int, actual_irp_15: int)
{
  var {:pointer} Tmp_296: int;
  var {:scalar} Tmp_297: int;
  var {:pointer} devExt_9: int;
  var {:pointer} Tmp_298: int;
  var {:pointer} Tmp_299: int;
  var {:scalar} Tmp_300: int;
  var {:pointer} Tmp_301: int;
  var {:pointer} Tmp_302: int;
  var {:scalar} oldPnpState_1: int;
  var {:pointer} Tmp_303: int;
  var {:pointer} Tmp_304: int;
  var {:pointer} Tmp_305: int;
  var {:pointer} Tmp_306: int;
  var {:scalar} oldIrql_4: int;
  var {:pointer} functionPdoExt_8: int;
  var {:pointer} Tmp_307: int;
  var {:pointer} Tmp_308: int;
  var {:pointer} Tmp_310: int;
  var {:pointer} Tmp_311: int;
  var {:pointer} devObj_2: int;
  var {:pointer} parentFdoExt_28: int;
  var {:pointer} irp_15: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;

  anon0:
    call {:si_unique_call 348} vslice_dummy_var_41 := __HAVOC_malloc(4);
    parentFdoExt_28 := actual_parentFdoExt_28;
    irp_15 := actual_irp_15;
    call {:si_unique_call 349} Tmp_296 := __HAVOC_malloc(4);
    call {:si_unique_call 350} Tmp_303 := __HAVOC_malloc(4);
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc oldPnpState_1;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    call {:si_unique_call 351} TerminateIdleTimer(parentFdoExt_28);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 352} CancelFdoIdleIrp(parentFdoExt_28, 1);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 353} CancelParentWaitWake(parentFdoExt_28);
    call {:si_unique_call 354} USBC_UnregisterWmi(parentFdoExt_28);
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    call {:si_unique_call 355} UnregisterCompositeDevice(parentFdoExt_28);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L20;

  L20:
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc vslice_dummy_var_137;
    call {:si_unique_call 356} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_137);
    goto L24;

  L24:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} oldPnpState_1 != 7;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} oldPnpState_1 != 8;
    havoc Tmp_305;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc vslice_dummy_var_138;
    call {:si_unique_call 357} WPP_RECORDER_SF_(vslice_dummy_var_138, 4, 2, 33, Tmp_305);
    call {:si_unique_call 358} sdv_IoReleaseRemoveLockAndWait(0, 0);
    call {:si_unique_call 359} UsbcReleaseRemoveLock(parentFdoExt_28, irp_15);
    goto L29;

  L29:
    call {:si_unique_call 360} Tmp_302 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_302 != 0;
    assume Tmp_302 > 0;
    Mem_T.VOID[Tmp_302] := oldIrql_4;
    call {:si_unique_call 361} sdv_KeAcquireSpinLock(0, Tmp_302);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_302 != 0;
    assume Tmp_302 > 0;
    oldIrql_4 := Mem_T.VOID[Tmp_302];
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    havoc Tmp_307;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_306;
    assume {:nonnull} Tmp_306 != 0;
    assume Tmp_306 > 0;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc vslice_dummy_var_139;
    havoc vslice_dummy_var_140;
    call {:si_unique_call 362} WPP_RECORDER_SF_d(vslice_dummy_var_139, 4, 2, 34, Tmp_307, vslice_dummy_var_140);
    goto L61;

  L61:
    call {:si_unique_call 363} Tmp_296, Tmp_297, devExt_9, Tmp_298, Tmp_299, Tmp_300, Tmp_301, Tmp_302, Tmp_303, Tmp_304, oldIrql_4, functionPdoExt_8, Tmp_308, Tmp_310, Tmp_311, devObj_2 := PrepareParentFDOForRemove_loop_L61(Tmp_296, Tmp_297, devExt_9, Tmp_298, Tmp_299, Tmp_300, Tmp_301, Tmp_302, Tmp_303, Tmp_304, oldIrql_4, functionPdoExt_8, Tmp_308, Tmp_310, Tmp_311, devObj_2, parentFdoExt_28);
    goto L61_last;

  L61_last:
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_311;
    assume {:nonnull} Tmp_311 != 0;
    assume Tmp_311 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_301;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_310;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    assume {:nonnull} Tmp_301 != 0;
    assume Tmp_301 > 0;
    assume {:nonnull} Tmp_310 != 0;
    assume Tmp_310 > 0;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_308;
    assume {:nonnull} Tmp_308 != 0;
    assume Tmp_308 > 0;
    havoc Tmp_297;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_299;
    assume {:nonnull} Tmp_299 != 0;
    assume Tmp_299 > 0;
    havoc Tmp_303;
    assume {:nonnull} Tmp_303 != 0;
    assume Tmp_303 > 0;
    havoc devObj_2;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_304;
    assume {:nonnull} Tmp_304 != 0;
    assume Tmp_304 > 0;
    havoc Tmp_300;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc Tmp_298;
    assume {:nonnull} Tmp_298 != 0;
    assume Tmp_298 > 0;
    havoc Tmp_296;
    assume {:nonnull} Tmp_296 != 0;
    assume Tmp_296 > 0;
    assume {:nonnull} devObj_2 != 0;
    assume devObj_2 > 0;
    havoc devExt_9;
    assume {:nonnull} devExt_9 != 0;
    assume devExt_9 > 0;
    functionPdoExt_8 := functionPdoExt_DEVICE_EXTENSION(devExt_9);
    call {:si_unique_call 364} sdv_KeReleaseSpinLock(0, oldIrql_4);
    call {:si_unique_call 365} FreeFunctionPDOResources(functionPdoExt_8);
    call {:si_unique_call 366} Tmp_302 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_302 != 0;
    assume Tmp_302 > 0;
    Mem_T.VOID[Tmp_302] := oldIrql_4;
    call {:si_unique_call 367} sdv_KeAcquireSpinLock(0, Tmp_302);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_302 != 0;
    assume Tmp_302 > 0;
    oldIrql_4 := Mem_T.VOID[Tmp_302];
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    assume false;
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon44_Then:
    goto L49;

  L49:
    call {:si_unique_call 368} sdv_KeReleaseSpinLock(0, oldIrql_4);
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    goto L1;

  L1:
    goto LM2;

  anon36_Then:
    goto L1;

  anon35_Then:
    goto L49;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} oldPnpState_1 == 8;
    goto L29;

  anon33_Then:
    assume {:partition} oldPnpState_1 == 7;
    goto L29;

  anon37_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc vslice_dummy_var_141;
    call {:si_unique_call 369} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_141);
    goto L24;

  anon41_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    assume {:nonnull} parentFdoExt_28 != 0;
    assume parentFdoExt_28 > 0;
    havoc vslice_dummy_var_142;
    call {:si_unique_call 370} ParentIdleNotificationCallback#1(vslice_dummy_var_142);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    goto L24;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    goto L20;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentGetD3ColdInterface"} ParentGetD3ColdInterface(actual_parentFdoExt_29: int) returns (Tmp_313: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentGetD3ColdInterface"} ParentGetD3ColdInterface(actual_parentFdoExt_29: int) returns (Tmp_313: int)
{
  var {:pointer} irpStack: int;
  var {:scalar} completionEvent: int;
  var {:pointer} targetDevice: int;
  var {:pointer} irp_16: int;
  var {:scalar} ioStatus: int;
  var {:scalar} status_22: int;
  var {:pointer} parentFdoExt_29: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_143: int;

  anon0:
    call {:si_unique_call 371} completionEvent := __HAVOC_malloc(156);
    call {:si_unique_call 372} ioStatus := __HAVOC_malloc(12);
    parentFdoExt_29 := actual_parentFdoExt_29;
    irp_16 := 0;
    status_22 := -1073741823;
    targetDevice := 0;
    irpStack := 0;
    call {:si_unique_call 373} sdv_do_paged_code_check();
    call {:si_unique_call 374} KeInitializeEvent(completionEvent, 0, 0);
    assume {:nonnull} parentFdoExt_29 != 0;
    assume parentFdoExt_29 > 0;
    havoc vslice_dummy_var_143;
    call {:si_unique_call 375} targetDevice := IoGetAttachedDeviceReference(vslice_dummy_var_143);
    call {:si_unique_call 376} irp_16 := IoBuildSynchronousFsdRequest(27, 0, 0, 0, 0, 0, ioStatus);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} irp_16 != 0;
    assume {:nonnull} irp_16 != 0;
    assume irp_16 > 0;
    assume {:nonnull} irp_16 != 0;
    assume irp_16 > 0;
    call {:si_unique_call 377} irpStack := sdv_IoGetNextIrpStackLocation(irp_16);
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} parentFdoExt_29 != 0;
    assume parentFdoExt_29 > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    call {:si_unique_call 378} status_22 := sdv_IoCallDriver#1(targetDevice, irp_16);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_22 == 259;
    call {:si_unique_call 379} vslice_dummy_var_43 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} ioStatus != 0;
    assume ioStatus > 0;
    havoc status_22;
    goto L46;

  L46:
    call {:si_unique_call 380} vslice_dummy_var_42 := sdv_ObDereferenceObject(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_22 >= 0;
    assume {:nonnull} parentFdoExt_29 != 0;
    assume parentFdoExt_29 > 0;
    goto L54;

  L54:
    Tmp_313 := status_22;
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:partition} 0 > status_22;
    goto L54;

  anon10_Then:
    assume {:partition} status_22 != 259;
    goto L46;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} irp_16 == 0;
    status_22 := -1073741670;
    goto L46;
}



procedure {:origName "FreeInterfaceList"} FreeInterfaceList(actual_parentFdoExt_30: int, actual_freeListItself: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FreeInterfaceList"} FreeInterfaceList(actual_parentFdoExt_30: int, actual_freeListItself: int)
{
  var {:scalar} i_6: int;
  var {:pointer} Tmp_316: int;
  var {:pointer} Tmp_317: int;
  var {:pointer} Tmp_318: int;
  var {:scalar} Tmp_319: int;
  var {:pointer} Tmp_320: int;
  var {:scalar} oldIrql_5: int;
  var {:scalar} Tmp_321: int;
  var {:pointer} iface: int;
  var {:pointer} parentFdoExt_30: int;
  var {:scalar} freeListItself: int;
  var vslice_dummy_var_44: int;

  anon0:
    call {:si_unique_call 381} vslice_dummy_var_44 := __HAVOC_malloc(4);
    parentFdoExt_30 := actual_parentFdoExt_30;
    freeListItself := actual_freeListItself;
    call {:si_unique_call 382} Tmp_318 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_318 != 0;
    assume Tmp_318 > 0;
    Mem_T.VOID[Tmp_318] := oldIrql_5;
    call {:si_unique_call 383} sdv_KeAcquireSpinLock(0, Tmp_318);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_318 != 0;
    assume Tmp_318 > 0;
    oldIrql_5 := Mem_T.VOID[Tmp_318];
    goto anon11_Then, anon11_Else;

  anon11_Else:
    i_6 := 0;
    goto L13;

  L13:
    call {:si_unique_call 384} i_6, Tmp_316, Tmp_317, Tmp_319, Tmp_320, Tmp_321, iface := FreeInterfaceList_loop_L13(i_6, Tmp_316, Tmp_317, Tmp_319, Tmp_320, Tmp_321, iface, parentFdoExt_30);
    goto L13_last;

  L13_last:
    assume {:nonnull} parentFdoExt_30 != 0;
    assume parentFdoExt_30 > 0;
    havoc Tmp_317;
    assume {:nonnull} Tmp_317 != 0;
    assume Tmp_317 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    Tmp_321 := i_6;
    assume {:nonnull} parentFdoExt_30 != 0;
    assume parentFdoExt_30 > 0;
    havoc Tmp_316;
    assume {:nonnull} Tmp_316 != 0;
    assume Tmp_316 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_319 := i_6;
    assume {:nonnull} parentFdoExt_30 != 0;
    assume parentFdoExt_30 > 0;
    havoc Tmp_320;
    iface := Tmp_320 + Tmp_319 * 8;
    call {:si_unique_call 385} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} iface != 0;
    assume iface > 0;
    goto L16;

  L16:
    i_6 := i_6 + 1;
    goto L16_dummy;

  L16_dummy:
    assume false;
    return;

  anon15_Then:
    goto L16;

  anon14_Then:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} freeListItself != 0;
    call {:si_unique_call 386} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} parentFdoExt_30 != 0;
    assume parentFdoExt_30 > 0;
    goto L8;

  L8:
    call {:si_unique_call 387} sdv_KeReleaseSpinLock(0, oldIrql_5);
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} freeListItself == 0;
    goto L8;

  anon11_Then:
    goto L8;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentCloseConfiguration"} ParentCloseConfiguration(actual_parentFdoExt_31: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentCloseConfiguration"} ParentCloseConfiguration(actual_parentFdoExt_31: int)
{
  var {:pointer} Tmp_322: int;
  var {:pointer} Tmp_323: int;
  var {:pointer} urb_3: int;
  var {:scalar} status_23: int;
  var {:pointer} parentFdoExt_31: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;

  anon0:
    call {:si_unique_call 388} vslice_dummy_var_45 := __HAVOC_malloc(4);
    parentFdoExt_31 := actual_parentFdoExt_31;
    call {:si_unique_call 389} status_23 := corral_nondet();
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_23 < 0;
    havoc Tmp_323;
    assume {:nonnull} parentFdoExt_31 != 0;
    assume parentFdoExt_31 > 0;
    havoc vslice_dummy_var_144;
    call {:si_unique_call 390} WPP_RECORDER_SF_d(vslice_dummy_var_144, 2, 8, 16, Tmp_323, status_23);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} 0 <= status_23;
    assume {:nonnull} urb_3 != 0;
    assume urb_3 > 0;
    assume {:nonnull} urb_3 != 0;
    assume urb_3 > 0;
    assume {:nonnull} urb_3 != 0;
    assume urb_3 > 0;
    call {:si_unique_call 391} status_23 := SubmitUrb(parentFdoExt_31, urb_3, 1, 0, 0, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_23 < 0;
    havoc Tmp_322;
    assume {:nonnull} parentFdoExt_31 != 0;
    assume parentFdoExt_31 > 0;
    havoc vslice_dummy_var_145;
    call {:si_unique_call 392} WPP_RECORDER_SF_d(vslice_dummy_var_145, 2, 8, 17, Tmp_322, status_23);
    goto L24;

  L24:
    goto L1;

  anon8_Then:
    assume {:partition} 0 <= status_23;
    goto L24;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WPP_RECORDER_SF_ddd"} WPP_RECORDER_SF_ddd(actual_AutoLogContext_8: int, actual_level_8: int, actual_flags_8: int, actual_id_8: int, actual_traceGuid_8: int, actual_s_p_e_c_i_a_l_19: int, actual_s_p_e_c_i_a_l_20: int, actual_s_p_e_c_i_a_l_21: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_ddd"} WPP_RECORDER_SF_ddd(actual_AutoLogContext_8: int, actual_level_8: int, actual_flags_8: int, actual_id_8: int, actual_traceGuid_8: int, actual_s_p_e_c_i_a_l_19: int, actual_s_p_e_c_i_a_l_20: int, actual_s_p_e_c_i_a_l_21: int)
{
  var {:scalar} Tmp_327: int;
  var {:scalar} Tmp_330: int;
  var {:scalar} Tmp_333: int;
  var {:scalar} Tmp_335: int;
  var {:scalar} level_8: int;
  var {:scalar} flags_8: int;
  var {:pointer} traceGuid_8: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;

  anon0:
    call {:si_unique_call 393} vslice_dummy_var_46 := __HAVOC_malloc(4);
    level_8 := actual_level_8;
    flags_8 := actual_flags_8;
    traceGuid_8 := actual_traceGuid_8;
    call {:si_unique_call 394} vslice_dummy_var_48 := __HAVOC_malloc(4);
    Tmp_330 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_8 - 1);
    call {:si_unique_call 395} Tmp_335 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 396} Tmp_327 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 397} Tmp_333 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 398} vslice_dummy_var_47 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var {:scalar} Tmp_337: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_146: int;

  anon0:
    call {:si_unique_call 399} Tmp_337 := __HAVOC_malloc(4);
    call {:si_unique_call 400} vslice_dummy_var_49 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    havoc vslice_dummy_var_146;
    Mem_T.VOID[Tmp_337] := vslice_dummy_var_146;
    return;
}



procedure {:origName "DispatchFdoInternalDeviceControl"} DispatchFdoInternalDeviceControl(actual_parentFdoExt_32: int, actual_irp_17: int) returns (Tmp_340: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchFdoInternalDeviceControl"} DispatchFdoInternalDeviceControl(actual_parentFdoExt_32: int, actual_irp_17: int) returns (Tmp_340: int)
{
  var {:pointer} Tmp_341: int;
  var {:pointer} irpSp_7: int;
  var {:pointer} Tmp_342: int;
  var {:scalar} ioControlCode_4: int;
  var {:scalar} status_24: int;
  var {:pointer} parentFdoExt_32: int;
  var {:pointer} irp_17: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;

  anon0:
    parentFdoExt_32 := actual_parentFdoExt_32;
    irp_17 := actual_irp_17;
    call {:si_unique_call 401} irpSp_7 := sdv_IoGetCurrentIrpStackLocation(irp_17);
    assume {:nonnull} irpSp_7 != 0;
    assume irpSp_7 > 0;
    havoc ioControlCode_4;
    status_24 := 0;
    assume {:nonnull} parentFdoExt_32 != 0;
    assume parentFdoExt_32 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} parentFdoExt_32 != 0;
    assume parentFdoExt_32 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    havoc Tmp_341;
    assume {:nonnull} parentFdoExt_32 != 0;
    assume parentFdoExt_32 > 0;
    havoc vslice_dummy_var_147;
    havoc vslice_dummy_var_148;
    call {:si_unique_call 402} WPP_RECORDER_SF_qd(vslice_dummy_var_147, 2, 8, 54, Tmp_341, parentFdoExt_32, vslice_dummy_var_148);
    status_24 := -1073741661;
    goto L26;

  L26:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_24 == 0;
    assume {:nonnull} parentFdoExt_32 != 0;
    assume parentFdoExt_32 > 0;
    havoc vslice_dummy_var_149;
    call {:si_unique_call 403} status_24 := UsbcForwardIrp(parentFdoExt_32, vslice_dummy_var_149, irp_17);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    Tmp_340 := status_24;
    goto LM2;

  LM2:
    return;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} status_24 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_24 != 259;
    call {:si_unique_call 404} UsbcCompleteIrp(parentFdoExt_32, status_24, irp_17);
    goto L32;

  anon22_Then:
    assume {:partition} status_24 == 259;
    goto L32;

  anon20_Then:
    goto L13;

  L13:
    assume {:nonnull} parentFdoExt_32 != 0;
    assume parentFdoExt_32 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    havoc Tmp_342;
    assume {:nonnull} parentFdoExt_32 != 0;
    assume parentFdoExt_32 > 0;
    havoc vslice_dummy_var_150;
    havoc vslice_dummy_var_151;
    call {:si_unique_call 405} WPP_RECORDER_SF_qL(vslice_dummy_var_150, 2, 8, 55, Tmp_342, parentFdoExt_32, vslice_dummy_var_151);
    status_24 := -1073741661;
    goto L26;

  anon19_Then:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} ioControlCode_4 != 2228231;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ioControlCode_4 == 2228255;
    goto L49;

  L49:
    call {:si_unique_call 406} status_24 := ParentResetOrCyclePort(parentFdoExt_32, irp_17, ioControlCode_4);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} ioControlCode_4 != 2228255;
    status_24 := 0;
    goto L26;

  anon23_Then:
    assume {:partition} ioControlCode_4 == 2228231;
    goto L49;

  anon25_Then:
    goto L13;
}



procedure {:origName "FreeParentFDOResources"} FreeParentFDOResources(actual_parentFdoExt_33: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FreeParentFDOResources"} FreeParentFDOResources(actual_parentFdoExt_33: int)
{
  var {:pointer} Tmp_344: int;
  var {:pointer} parentFdoExt_33: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;

  anon0:
    call {:si_unique_call 407} vslice_dummy_var_50 := __HAVOC_malloc(4);
    parentFdoExt_33 := actual_parentFdoExt_33;
    call {:si_unique_call 408} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    call {:si_unique_call 409} FreeInterfaceList(parentFdoExt_33, 1);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 410} ExFreePoolWithTag(0, -1016958123);
    goto L11;

  L11:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 411} ExFreePoolWithTag(0, -1016958123);
    goto L16;

  L16:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 412} ExFreePoolWithTag(0, -1016958123);
    goto L22;

  L22:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    havoc vslice_dummy_var_152;
    havoc vslice_dummy_var_153;
    call {:si_unique_call 413} CleanFunctionList(vslice_dummy_var_152, vslice_dummy_var_153);
    goto L27;

  L27:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 414} IoFreeIrp(0);
    goto L32;

  L32:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    call {:si_unique_call 415} ExFreePoolWithTag(0, -1016958123);
    goto L37;

  L37:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto L42;

  L42:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 416} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto L47;

  L47:
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L61;

  L61:
    havoc Tmp_344;
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    havoc vslice_dummy_var_154;
    call {:si_unique_call 417} WPP_RECORDER_SF_(vslice_dummy_var_154, 4, 2, 35, Tmp_344);
    call {:si_unique_call 418} IoDeleteDevice(0);
    goto LM2;

  LM2:
    return;

  anon23_Then:
    call {:si_unique_call 419} IoFreeWorkItem(0);
    assume {:nonnull} parentFdoExt_33 != 0;
    assume parentFdoExt_33 > 0;
    goto L61;

  anon22_Then:
    goto L47;

  anon30_Then:
    goto L42;

  anon29_Then:
    goto L37;

  anon28_Then:
    goto L32;

  anon27_Then:
    goto L27;

  anon26_Then:
    goto L22;

  anon25_Then:
    goto L16;

  anon21_Then:
    goto L11;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentFindAltConfiguration"} ParentFindAltConfiguration(actual_parentFdoExt_34: int, actual_configurationNum_4: int) returns (Tmp_347: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_347 == 0 || Tmp_347 == -1073741811 || Tmp_347 == -1073741823 || Tmp_347 == 5 || Tmp_347 == -1073741789 || Tmp_347 == -1073741670 || Tmp_347 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentFindAltConfiguration"} ParentFindAltConfiguration(actual_parentFdoExt_34: int, actual_configurationNum_4: int) returns (Tmp_347: int)
{
  var {:pointer} Tmp_348: int;
  var {:scalar} numConfigurations: int;
  var {:pointer} Tmp_349: int;
  var {:dopa} {:scalar} type_2: int;
  var {:scalar} status_25: int;
  var {:pointer} AltConfigurationKey: int;
  var {:dopa} {:scalar} newConfigurationNum_1: int;
  var {:pointer} parentFdoExt_34: int;
  var {:pointer} configurationNum_4: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;

  anon0:
    call {:si_unique_call 420} type_2 := __HAVOC_malloc(4);
    call {:si_unique_call 421} newConfigurationNum_1 := __HAVOC_malloc(4);
    parentFdoExt_34 := actual_parentFdoExt_34;
    configurationNum_4 := actual_configurationNum_4;
    assume {:nonnull} type_2 != 0;
    assume type_2 > 0;
    Mem_T.VOID[type_2] := 0;
    assume {:nonnull} newConfigurationNum_1 != 0;
    assume newConfigurationNum_1 > 0;
    Mem_T.VOID[newConfigurationNum_1] := 0;
    numConfigurations := 0;
    status_25 := 0;
    AltConfigurationKey := strConst__li2bpl6;
    call {:si_unique_call 422} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_34 != 0;
    assume parentFdoExt_34 > 0;
    havoc vslice_dummy_var_155;
    call {:si_unique_call 423} status_25 := GetPdoRegistryParameter(vslice_dummy_var_155, AltConfigurationKey, newConfigurationNum_1, 4, type_2, 0, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_25 < 0;
    havoc Tmp_349;
    assume {:nonnull} parentFdoExt_34 != 0;
    assume parentFdoExt_34 > 0;
    havoc vslice_dummy_var_156;
    call {:si_unique_call 424} WPP_RECORDER_SF_d(vslice_dummy_var_156, 2, 1, 63, Tmp_349, status_25);
    goto L38;

  L38:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_25 >= 0;
    assume {:nonnull} configurationNum_4 != 0;
    assume configurationNum_4 > 0;
    assume {:nonnull} newConfigurationNum_1 != 0;
    assume newConfigurationNum_1 > 0;
    Mem_T.VOID[configurationNum_4] := Mem_T.VOID[newConfigurationNum_1];
    goto L39;

  L39:
    Tmp_347 := status_25;
    return;

  anon13_Then:
    assume {:partition} 0 > status_25;
    goto L39;

  anon11_Then:
    assume {:partition} 0 <= status_25;
    assume {:nonnull} parentFdoExt_34 != 0;
    assume parentFdoExt_34 > 0;
    havoc numConfigurations;
    assume {:nonnull} type_2 != 0;
    assume type_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.VOID[type_2] != 4;
    goto L32;

  L32:
    havoc Tmp_348;
    assume {:nonnull} newConfigurationNum_1 != 0;
    assume newConfigurationNum_1 > 0;
    assume {:nonnull} parentFdoExt_34 != 0;
    assume parentFdoExt_34 > 0;
    havoc vslice_dummy_var_157;
    call {:si_unique_call 425} WPP_RECORDER_SF_d(vslice_dummy_var_157, 2, 8, 64, Tmp_348, Mem_T.VOID[newConfigurationNum_1]);
    status_25 := -1073741811;
    goto L38;

  anon15_Then:
    assume {:partition} Mem_T.VOID[type_2] == 4;
    assume {:nonnull} configurationNum_4 != 0;
    assume configurationNum_4 > 0;
    assume {:nonnull} newConfigurationNum_1 != 0;
    assume newConfigurationNum_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.VOID[newConfigurationNum_1] != Mem_T.VOID[configurationNum_4];
    assume {:nonnull} newConfigurationNum_1 != 0;
    assume newConfigurationNum_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.VOID[newConfigurationNum_1] < numConfigurations;
    goto L38;

  anon14_Then:
    assume {:partition} numConfigurations <= Mem_T.VOID[newConfigurationNum_1];
    goto L32;

  anon12_Then:
    assume {:partition} Mem_T.VOID[newConfigurationNum_1] == Mem_T.VOID[configurationNum_4];
    goto L32;
}



procedure {:origName "GetDeviceDescriptor"} GetDeviceDescriptor(actual_parentFdoExt_35: int) returns (Tmp_351: int);
  modifies Mem_T.VOID, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetDeviceDescriptor"} GetDeviceDescriptor(actual_parentFdoExt_35: int) returns (Tmp_351: int)
{
  var {:pointer} Tmp_352: int;
  var {:pointer} Tmp_354: int;
  var {:pointer} urb_4: int;
  var {:pointer} Tmp_355: int;
  var {:pointer} Tmp_356: int;
  var {:scalar} status_26: int;
  var {:pointer} parentFdoExt_35: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_162: int;

  anon0:
    parentFdoExt_35 := actual_parentFdoExt_35;
    call {:si_unique_call 426} sdv_do_paged_code_check();
    call {:si_unique_call 427} sdv_RtlZeroMemory(0, 18);
    call {:si_unique_call 428} status_26 := corral_nondet();
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_26 < 0;
    havoc Tmp_356;
    assume {:nonnull} parentFdoExt_35 != 0;
    assume parentFdoExt_35 > 0;
    havoc vslice_dummy_var_158;
    call {:si_unique_call 429} WPP_RECORDER_SF_d(vslice_dummy_var_158, 2, 8, 30, Tmp_356, status_26);
    Tmp_351 := status_26;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} 0 <= status_26;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_4))] := 18;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    assume {:nonnull} parentFdoExt_35 != 0;
    assume parentFdoExt_35 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    call {:si_unique_call 430} status_26 := SubmitUrb(parentFdoExt_35, urb_4, 1, 0, 0, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_26 < 0;
    havoc Tmp_355;
    assume {:nonnull} parentFdoExt_35 != 0;
    assume parentFdoExt_35 > 0;
    havoc vslice_dummy_var_159;
    call {:si_unique_call 431} WPP_RECORDER_SF_d(vslice_dummy_var_159, 2, 8, 32, Tmp_355, status_26);
    assume {:nonnull} parentFdoExt_35 != 0;
    assume parentFdoExt_35 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    havoc vslice_dummy_var_160;
    havoc vslice_dummy_var_161;
    call {:si_unique_call 432} RecordFailure(parentFdoExt_35, vslice_dummy_var_160, status_26, vslice_dummy_var_161, 536870914, -951827386, 0, 0);
    goto L46;

  L46:
    Tmp_351 := status_26;
    goto L1;

  anon8_Then:
    assume {:partition} 0 <= status_26;
    assume {:nonnull} parentFdoExt_35 != 0;
    assume parentFdoExt_35 > 0;
    Tmp_354 := deviceDesc_PARENT_FDO_EXTENSION(parentFdoExt_35);
    havoc Tmp_352;
    assume {:nonnull} parentFdoExt_35 != 0;
    assume parentFdoExt_35 > 0;
    assume {:nonnull} urb_4 != 0;
    assume urb_4 > 0;
    havoc vslice_dummy_var_162;
    call {:si_unique_call 433} WPP_RECORDER_SF_qDD(vslice_dummy_var_162, 4, 1, 31, Tmp_352, Tmp_354, Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_4))], 18);
    goto L46;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "RegisterCompositeDevice"} RegisterCompositeDevice(actual_parentFdoExt_37: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RegisterCompositeDevice"} RegisterCompositeDevice(actual_parentFdoExt_37: int)
{
  var {:pointer} nextSp_3: int;
  var {:scalar} capabilities: int;
  var {:pointer} Tmp_359: int;
  var {:scalar} registerInfo: int;
  var {:scalar} bufSize: int;
  var {:pointer} buffer: int;
  var {:pointer} irp_18: int;
  var {:pointer} Tmp_361: int;
  var {:pointer} Tmp_362: int;
  var {:scalar} status_27: int;
  var {:pointer} parentFdoExt_37: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;

  anon0:
    call {:si_unique_call 434} capabilities := __HAVOC_malloc(8);
    call {:si_unique_call 435} vslice_dummy_var_51 := __HAVOC_malloc(4);
    call {:si_unique_call 436} registerInfo := __HAVOC_malloc(24);
    parentFdoExt_37 := actual_parentFdoExt_37;
    assume {:nonnull} capabilities != 0;
    assume capabilities > 0;
    assume {:nonnull} capabilities != 0;
    assume capabilities > 0;
    call {:si_unique_call 437} sdv_do_paged_code_check();
    buffer := 0;
    call {:si_unique_call 438} COMPOSITE_DEVICE_CAPABILITIES_INIT(capabilities);
    assume {:nonnull} capabilities != 0;
    assume capabilities > 0;
    assume {:nonnull} parentFdoExt_37 != 0;
    assume parentFdoExt_37 > 0;
    assume {:nonnull} parentFdoExt_37 != 0;
    assume parentFdoExt_37 > 0;
    havoc Tmp_359;
    assume {:nonnull} Tmp_359 != 0;
    assume Tmp_359 > 0;
    havoc vslice_dummy_var_163;
    call {:si_unique_call 439} irp_18 := IoAllocateIrp(vslice_dummy_var_163, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} irp_18 != 0;
    call {:si_unique_call 440} nextSp_3 := sdv_IoGetNextIrpStackLocation(irp_18);
    assume {:nonnull} parentFdoExt_37 != 0;
    assume parentFdoExt_37 > 0;
    havoc bufSize;
    call {:si_unique_call 441} buffer := ExAllocatePoolWithTag(512, bufSize, -1016958123);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 442} sdv_RtlZeroMemory(0, bufSize);
    goto L39;

  L39:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} buffer != 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irp_18 != 0;
    assume irp_18 > 0;
    call {:si_unique_call 443} status_27 := CallNextDriverSync(parentFdoExt_37, irp_18, 0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_27 < 0;
    goto L56;

  L56:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_27 >= 0;
    goto L58;

  L58:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} irp_18 != 0;
    call {:si_unique_call 444} IoFreeIrp(0);
    irp_18 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon23_Then:
    assume {:partition} irp_18 == 0;
    goto L1;

  anon21_Then:
    assume {:partition} 0 > status_27;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 445} ExFreePoolWithTag(0, -1016958123);
    buffer := 0;
    goto L58;

  anon22_Then:
    assume {:partition} buffer == 0;
    goto L58;

  anon20_Then:
    assume {:partition} 0 <= status_27;
    assume {:nonnull} parentFdoExt_37 != 0;
    assume parentFdoExt_37 > 0;
    assume {:nonnull} parentFdoExt_37 != 0;
    assume parentFdoExt_37 > 0;
    goto L56;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} buffer == 0;
    status_27 := -1073741670;
    havoc Tmp_361;
    assume {:nonnull} parentFdoExt_37 != 0;
    assume parentFdoExt_37 > 0;
    havoc vslice_dummy_var_164;
    call {:si_unique_call 446} WPP_RECORDER_SF_d(vslice_dummy_var_164, 2, 8, 68, Tmp_361, status_27);
    goto L56;

  anon18_Then:
    assume {:partition} buffer == 0;
    goto L39;

  anon17_Then:
    assume {:partition} irp_18 == 0;
    status_27 := -1073741670;
    havoc Tmp_362;
    assume {:nonnull} parentFdoExt_37 != 0;
    assume parentFdoExt_37 > 0;
    havoc vslice_dummy_var_165;
    call {:si_unique_call 447} WPP_RECORDER_SF_d(vslice_dummy_var_165, 2, 8, 67, Tmp_362, status_27);
    goto L56;
}



procedure {:origName "ParentQueryForInterface"} ParentQueryForInterface(actual_parentFdoExt_38: int) returns (Tmp_364: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentQueryForInterface"} ParentQueryForInterface(actual_parentFdoExt_38: int) returns (Tmp_364: int)
{
  var {:pointer} Tmp_365: int;
  var {:scalar} size_1: int;
  var {:pointer} irpSp_8: int;
  var {:pointer} sdv_155: int;
  var {:scalar} Tmp_367: int;
  var {:scalar} Tmp_368: int;
  var {:scalar} Tmp_369: int;
  var {:pointer} topDeviceObject: int;
  var {:scalar} Tmp_370: int;
  var {:scalar} ntStatus_3: int;
  var {:pointer} irp_19: int;
  var {:pointer} busI: int;
  var {:scalar} event: int;
  var {:pointer} parentFdoExt_38: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_166: int;
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 448} event := __HAVOC_malloc(156);
    parentFdoExt_38 := actual_parentFdoExt_38;
    call {:si_unique_call 449} Tmp_365 := __HAVOC_malloc(192);
    ntStatus_3 := 0;
    topDeviceObject := 0;
    call {:si_unique_call 450} sdv_do_paged_code_check();
    size_1 := 52;
    Tmp_370 := size_1;
    call {:si_unique_call 451} sdv_155 := ExAllocatePoolWithTag(1, Tmp_370, -1016958123);
    busI := sdv_155;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} busI != 0;
    Tmp_367 := size_1;
    call {:si_unique_call 452} sdv_RtlZeroMemory(0, Tmp_367);
    goto L22;

  L22:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} busI != 0;
    assume {:nonnull} parentFdoExt_38 != 0;
    assume parentFdoExt_38 > 0;
    havoc vslice_dummy_var_166;
    call {:si_unique_call 453} topDeviceObject := IoGetAttachedDeviceReference(vslice_dummy_var_166);
    assume {:nonnull} topDeviceObject != 0;
    assume topDeviceObject > 0;
    havoc Tmp_368;
    call {:si_unique_call 454} irp_19 := IoAllocateIrp(Tmp_368, 0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} irp_19 != 0;
    assume {:nonnull} irp_19 != 0;
    assume irp_19 > 0;
    call {:si_unique_call 455} KeInitializeEvent(event, 0, 0);
    call {:si_unique_call 456} sdv_IoSetCompletionRoutine(irp_19, li2bplFunctionConstant1628, event, 1, 1, 1);
    call {:si_unique_call 457} irpSp_8 := sdv_IoGetNextIrpStackLocation(irp_19);
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    call {:si_unique_call 458} ntStatus_3 := sdv_IoCallDriver#1(topDeviceObject, irp_19);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} ntStatus_3 == 259;
    Tmp_365 := strConst__li2bpl7;
    assume {:nonnull} parentFdoExt_38 != 0;
    assume parentFdoExt_38 > 0;
    havoc vslice_dummy_var_167;
    call {:si_unique_call 459} WaitForSignal(event, Tmp_365, vslice_dummy_var_167);
    assume {:nonnull} irp_19 != 0;
    assume irp_19 > 0;
    havoc ntStatus_3;
    goto L64;

  L64:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} ntStatus_3 >= 0;
    assume {:nonnull} busI != 0;
    assume busI > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L74;

  L74:
    ntStatus_3 := -1073741811;
    assume {:nonnull} busI != 0;
    assume busI > 0;
    goto L69;

  L69:
    call {:si_unique_call 460} IoFreeIrp(0);
    call {:si_unique_call 461} ExFreePoolWithTag(0, -1016958123);
    call {:si_unique_call 462} vslice_dummy_var_52 := sdv_ObDereferenceObject(0);
    Tmp_364 := ntStatus_3;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon21_Then:
    assume {:nonnull} busI != 0;
    assume busI > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_369 := size_1;
    call {:si_unique_call 463} sdv_RtlCopyMemory(0, 0, Tmp_369);
    assume {:nonnull} parentFdoExt_38 != 0;
    assume parentFdoExt_38 > 0;
    goto L69;

  anon22_Then:
    goto L74;

  anon20_Then:
    assume {:partition} 0 > ntStatus_3;
    goto L69;

  anon19_Then:
    assume {:partition} ntStatus_3 != 259;
    goto L64;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} irp_19 == 0;
    call {:si_unique_call 464} ExFreePoolWithTag(0, -1016958123);
    call {:si_unique_call 465} vslice_dummy_var_53 := sdv_ObDereferenceObject(0);
    Tmp_364 := -1073741670;
    goto L1;

  anon17_Then:
    assume {:partition} busI == 0;
    Tmp_364 := -1073741670;
    goto L1;

  anon23_Then:
    assume {:partition} busI == 0;
    goto L22;
}



procedure {:origName "WPP_RECORDER_SF_dD"} WPP_RECORDER_SF_dD(actual_AutoLogContext_9: int, actual_level_9: int, actual_flags_9: int, actual_id_9: int, actual_traceGuid_9: int, actual_s_p_e_c_i_a_l_22: int, actual_s_p_e_c_i_a_l_23: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_dD"} WPP_RECORDER_SF_dD(actual_AutoLogContext_9: int, actual_level_9: int, actual_flags_9: int, actual_id_9: int, actual_traceGuid_9: int, actual_s_p_e_c_i_a_l_22: int, actual_s_p_e_c_i_a_l_23: int)
{
  var {:scalar} Tmp_372: int;
  var {:scalar} Tmp_375: int;
  var {:scalar} Tmp_376: int;
  var {:scalar} Tmp_378: int;
  var {:scalar} level_9: int;
  var {:scalar} flags_9: int;
  var {:pointer} traceGuid_9: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;

  anon0:
    call {:si_unique_call 466} vslice_dummy_var_54 := __HAVOC_malloc(4);
    level_9 := actual_level_9;
    flags_9 := actual_flags_9;
    traceGuid_9 := actual_traceGuid_9;
    call {:si_unique_call 467} vslice_dummy_var_56 := __HAVOC_malloc(4);
    Tmp_376 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_9 - 1);
    call {:si_unique_call 468} Tmp_375 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 469} Tmp_372 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 470} Tmp_378 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 471} vslice_dummy_var_55 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var {:scalar} Tmp_382: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_168: int;

  anon0:
    call {:si_unique_call 472} Tmp_382 := __HAVOC_malloc(4);
    call {:si_unique_call 473} vslice_dummy_var_57 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_382 != 0;
    assume Tmp_382 > 0;
    havoc vslice_dummy_var_168;
    Mem_T.VOID[Tmp_382] := vslice_dummy_var_168;
    return;
}



procedure {:origName "WPP_RECORDER_SF_dd"} WPP_RECORDER_SF_dd(actual_AutoLogContext_10: int, actual_level_10: int, actual_flags_10: int, actual_id_10: int, actual_traceGuid_10: int, actual_s_p_e_c_i_a_l_24: int, actual_s_p_e_c_i_a_l_25: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_dd"} WPP_RECORDER_SF_dd(actual_AutoLogContext_10: int, actual_level_10: int, actual_flags_10: int, actual_id_10: int, actual_traceGuid_10: int, actual_s_p_e_c_i_a_l_24: int, actual_s_p_e_c_i_a_l_25: int)
{
  var {:scalar} Tmp_387: int;
  var {:scalar} Tmp_388: int;
  var {:scalar} Tmp_390: int;
  var {:scalar} Tmp_392: int;
  var {:scalar} level_10: int;
  var {:scalar} flags_10: int;
  var {:pointer} traceGuid_10: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;

  anon0:
    call {:si_unique_call 474} vslice_dummy_var_58 := __HAVOC_malloc(4);
    level_10 := actual_level_10;
    flags_10 := actual_flags_10;
    traceGuid_10 := actual_traceGuid_10;
    call {:si_unique_call 475} vslice_dummy_var_60 := __HAVOC_malloc(4);
    Tmp_387 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_10 - 1);
    call {:si_unique_call 476} Tmp_390 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 477} Tmp_388 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 478} Tmp_392 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 479} vslice_dummy_var_59 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "UsbcForwardIrp"} UsbcForwardIrp(actual_parentFdoExt_40: int, actual_forwardObject: int, actual_irp_20: int) returns (Tmp_409: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcForwardIrp"} UsbcForwardIrp(actual_parentFdoExt_40: int, actual_forwardObject: int, actual_irp_20: int) returns (Tmp_409: int)
{
  var {:scalar} status_28: int;
  var {:pointer} parentFdoExt_40: int;
  var {:pointer} forwardObject: int;
  var {:pointer} irp_20: int;
  var vslice_dummy_var_61: int;

  anon0:
    parentFdoExt_40 := actual_parentFdoExt_40;
    forwardObject := actual_forwardObject;
    irp_20 := actual_irp_20;
    call {:si_unique_call 480} sdv_IoSkipCurrentIrpStackLocation(irp_20);
    call {:si_unique_call 481} status_28 := sdv_IoCallDriver#1(forwardObject, irp_20);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 482} UsbcReleaseRemoveLock(parentFdoExt_40, irp_20);
    assume {:nonnull} parentFdoExt_40 != 0;
    assume parentFdoExt_40 > 0;
    call {:si_unique_call 483} vslice_dummy_var_61 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_40), irp_20);
    Tmp_409 := status_28;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ReportStartFailData"} ReportStartFailData(actual_parentFdoExt_41: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ReportStartFailData"} ReportStartFailData(actual_parentFdoExt_41: int)
{
  var {:pointer} failData: int;
  var {:pointer} sdv_170: int;
  var {:pointer} Tmp_412: int;
  var {:scalar} failDataSize: int;
  var {:pointer} ioStack: int;
  var {:scalar} ntStatus_5: int;
  var {:pointer} irp_21: int;
  var {:pointer} Tmp_414: int;
  var {:scalar} ioStatus_1: int;
  var {:scalar} event_1: int;
  var {:pointer} parentFdoExt_41: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;

  anon0:
    call {:si_unique_call 484} vslice_dummy_var_62 := __HAVOC_malloc(4);
    call {:si_unique_call 485} ioStatus_1 := __HAVOC_malloc(12);
    call {:si_unique_call 486} event_1 := __HAVOC_malloc(156);
    parentFdoExt_41 := actual_parentFdoExt_41;
    call {:si_unique_call 487} Tmp_412 := __HAVOC_malloc(264);
    irp_21 := 0;
    failData := 0;
    failDataSize := 0;
    assume {:nonnull} parentFdoExt_41 != 0;
    assume parentFdoExt_41 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L48;

  L48:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} failData != 0;
    call {:si_unique_call 488} ExFreePoolWithTag(0, -1016958123);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} failData == 0;
    goto L1;

  anon19_Then:
    assume {:nonnull} parentFdoExt_41 != 0;
    assume parentFdoExt_41 > 0;
    havoc Tmp_414;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    havoc failDataSize;
    call {:si_unique_call 489} sdv_170 := ExAllocatePoolWithTag(512, failDataSize, -1016958123);
    failData := sdv_170;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} failData != 0;
    call {:si_unique_call 490} sdv_RtlZeroMemory(0, failDataSize);
    goto L21;

  L21:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} failData == 0;
    goto L48;

  anon15_Then:
    assume {:partition} failData != 0;
    call {:si_unique_call 491} sdv_RtlCopyMemory(0, 0, failDataSize);
    call {:si_unique_call 492} KeInitializeEvent(event_1, 0, 0);
    call {:si_unique_call 493} irp_21 := IoBuildDeviceIoControlRequest(2228267, 0, 0, 0, 0, 0, 1, 0, ioStatus_1);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} irp_21 == 0;
    goto L48;

  anon16_Then:
    assume {:partition} irp_21 != 0;
    call {:si_unique_call 494} ioStack := sdv_IoGetNextIrpStackLocation(irp_21);
    assume {:nonnull} ioStack != 0;
    assume ioStack > 0;
    assume {:nonnull} parentFdoExt_41 != 0;
    assume parentFdoExt_41 > 0;
    havoc vslice_dummy_var_169;
    call {:si_unique_call 495} ntStatus_5 := sdv_IoCallDriver#1(vslice_dummy_var_169, irp_21);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} ntStatus_5 == 259;
    Tmp_412 := strConst__li2bpl8;
    assume {:nonnull} parentFdoExt_41 != 0;
    assume parentFdoExt_41 > 0;
    havoc vslice_dummy_var_170;
    call {:si_unique_call 496} WaitForSignal(event_1, Tmp_412, vslice_dummy_var_170);
    goto L48;

  anon17_Then:
    assume {:partition} ntStatus_5 != 259;
    goto L48;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} failData == 0;
    goto L21;
}



procedure {:origName "BuildSelectConfigUrb"} BuildSelectConfigUrb(actual_parentFdoExt_42: int, actual_ConfigurationDescriptor: int, actual_InterfaceList: int, actual_NumberOfInterfaces: int) returns (Tmp_415: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "BuildSelectConfigUrb"} BuildSelectConfigUrb(actual_parentFdoExt_42: int, actual_ConfigurationDescriptor: int, actual_InterfaceList: int, actual_NumberOfInterfaces: int) returns (Tmp_415: int)
{
  var {:scalar} interfaceCount: int;
  var {:scalar} i_7: int;
  var {:pointer} interfaceDescriptor: int;
  var {:scalar} Tmp_416: int;
  var {:scalar} Tmp_417: int;
  var {:pointer} Tmp_418: int;
  var {:scalar} siz: int;
  var {:scalar} Tmp_419: int;
  var {:scalar} Tmp_420: int;
  var {:pointer} sdv_174: int;
  var {:scalar} numEndpoints: int;
  var {:scalar} j_1: int;
  var {:pointer} Tmp_421: int;
  var {:pointer} iface_1: int;
  var {:pointer} urb_5: int;
  var {:scalar} Tmp_423: int;
  var {:scalar} Tmp_424: int;
  var {:scalar} Tmp_425: int;
  var {:pointer} Tmp_426: int;
  var {:pointer} Tmp_427: int;
  var {:pointer} Tmp_428: int;
  var {:pointer} parentFdoExt_42: int;
  var {:pointer} ConfigurationDescriptor: int;
  var {:pointer} InterfaceList: int;
  var {:scalar} NumberOfInterfaces: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;

  anon0:
    parentFdoExt_42 := actual_parentFdoExt_42;
    ConfigurationDescriptor := actual_ConfigurationDescriptor;
    InterfaceList := actual_InterfaceList;
    NumberOfInterfaces := actual_NumberOfInterfaces;
    call {:si_unique_call 497} Tmp_418 := __HAVOC_malloc(28);
    call {:si_unique_call 498} Tmp_427 := __HAVOC_malloc(28);
    urb_5 := 0;
    interfaceCount := 0;
    i_7 := 0;
    havoc Tmp_426;
    assume {:nonnull} parentFdoExt_42 != 0;
    assume parentFdoExt_42 > 0;
    havoc vslice_dummy_var_171;
    call {:si_unique_call 499} WPP_RECORDER_SF_(vslice_dummy_var_171, 4, 1, 39, Tmp_426);
    siz := 24;
    i_7 := 0;
    goto L22;

  L22:
    call {:si_unique_call 500} interfaceCount, i_7, siz, Tmp_419, Tmp_424, Tmp_428 := BuildSelectConfigUrb_loop_L22(interfaceCount, i_7, siz, Tmp_419, Tmp_424, Tmp_428, InterfaceList, NumberOfInterfaces);
    goto L22_last;

  L22_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} NumberOfInterfaces > i_7;
    siz := siz + 16;
    Tmp_424 := i_7;
    assume {:nonnull} InterfaceList != 0;
    assume InterfaceList > 0;
    havoc Tmp_428;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    havoc siz;
    Tmp_419 := i_7;
    assume {:nonnull} InterfaceList != 0;
    assume InterfaceList > 0;
    interfaceCount := interfaceCount + 1;
    i_7 := i_7 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} i_7 >= NumberOfInterfaces;
    assume {:nonnull} ConfigurationDescriptor != 0;
    assume ConfigurationDescriptor > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    havoc Tmp_421;
    assume {:nonnull} parentFdoExt_42 != 0;
    assume parentFdoExt_42 > 0;
    havoc vslice_dummy_var_172;
    call {:si_unique_call 501} WPP_RECORDER_SF_(vslice_dummy_var_172, 2, 8, 40, Tmp_421);
    goto L40;

  L40:
    Tmp_415 := urb_5;
    return;

  anon12_Then:
    Tmp_423 := siz;
    call {:si_unique_call 502} sdv_174 := ExAllocatePoolWithTag(512, Tmp_423, -1016958123);
    urb_5 := sdv_174;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} urb_5 != 0;
    Tmp_416 := siz;
    call {:si_unique_call 503} sdv_RtlZeroMemory(0, Tmp_416);
    assume {:nonnull} urb_5 != 0;
    assume urb_5 > 0;
    iface_1 := Interface__URB_SELECT_CONFIGURATION(UrbSelectConfiguration__URB(urb_5));
    i_7 := 0;
    goto L53;

  L53:
    call {:si_unique_call 504} i_7, interfaceDescriptor, Tmp_417, Tmp_418, Tmp_420, numEndpoints, j_1, Tmp_425, Tmp_427 := BuildSelectConfigUrb_loop_L53(i_7, interfaceDescriptor, Tmp_417, Tmp_418, Tmp_420, numEndpoints, j_1, iface_1, Tmp_425, Tmp_427, InterfaceList, NumberOfInterfaces);
    goto L53_last;

  L53_last:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} NumberOfInterfaces > i_7;
    Tmp_420 := i_7;
    assume {:nonnull} InterfaceList != 0;
    assume InterfaceList > 0;
    havoc interfaceDescriptor;
    assume {:nonnull} iface_1 != 0;
    assume iface_1 > 0;
    assume {:nonnull} interfaceDescriptor != 0;
    assume interfaceDescriptor > 0;
    assume {:nonnull} iface_1 != 0;
    assume iface_1 > 0;
    assume {:nonnull} interfaceDescriptor != 0;
    assume interfaceDescriptor > 0;
    assume {:nonnull} iface_1 != 0;
    assume iface_1 > 0;
    assume {:nonnull} interfaceDescriptor != 0;
    assume interfaceDescriptor > 0;
    assume {:nonnull} interfaceDescriptor != 0;
    assume interfaceDescriptor > 0;
    havoc numEndpoints;
    j_1 := 0;
    goto L64;

  L64:
    call {:si_unique_call 505} Tmp_417, Tmp_418, j_1, Tmp_425, Tmp_427 := BuildSelectConfigUrb_loop_L64(Tmp_417, Tmp_418, numEndpoints, j_1, iface_1, Tmp_425, Tmp_427);
    goto L64_last;

  L64_last:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} numEndpoints > j_1;
    Tmp_425 := j_1;
    assume {:nonnull} iface_1 != 0;
    assume iface_1 > 0;
    havoc Tmp_418;
    assume {:nonnull} Tmp_418 != 0;
    assume Tmp_418 > 0;
    Tmp_417 := j_1;
    assume {:nonnull} iface_1 != 0;
    assume iface_1 > 0;
    havoc Tmp_427;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    j_1 := j_1 + 1;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:partition} j_1 >= numEndpoints;
    assume {:nonnull} iface_1 != 0;
    assume iface_1 > 0;
    i_7 := i_7 + 1;
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} i_7 >= NumberOfInterfaces;
    assume {:nonnull} urb_5 != 0;
    assume urb_5 > 0;
    assume {:nonnull} urb_5 != 0;
    assume urb_5 > 0;
    assume {:nonnull} urb_5 != 0;
    assume urb_5 > 0;
    goto L40;

  anon15_Then:
    assume {:partition} urb_5 == 0;
    goto L40;
}



procedure {:origName "GetPdoRegistryParameter"} GetPdoRegistryParameter(actual_PhysicalDeviceObject: int, actual_ValueName: int, actual_Data: int, actual_DataLength: int, actual_Type: int, actual_ActualDataLength: int, actual_SoftwareKey: int) returns (Tmp_429: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_429 == 0 || Tmp_429 == -1073741811 || Tmp_429 == -1073741823 || Tmp_429 == 5 || Tmp_429 == -1073741789 || Tmp_429 == -1073741670 || Tmp_429 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetPdoRegistryParameter"} GetPdoRegistryParameter(actual_PhysicalDeviceObject: int, actual_ValueName: int, actual_Data: int, actual_DataLength: int, actual_Type: int, actual_ActualDataLength: int, actual_SoftwareKey: int) returns (Tmp_429: int)
{
  var {:scalar} valueName: int;
  var {:scalar} length_1: int;
  var {:pointer} Tmp_430: int;
  var {:scalar} Tmp_431: int;
  var {:scalar} ntStatus_6: int;
  var {:pointer} sdv_177: int;
  var {:pointer} partialInfo: int;
  var {:scalar} resultLength: int;
  var {:pointer} ValueName: int;
  var {:pointer} Data: int;
  var {:scalar} DataLength: int;
  var {:pointer} Type: int;
  var {:pointer} ActualDataLength: int;
  var {:scalar} SoftwareKey: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;

  anon0:
    call {:si_unique_call 506} valueName := __HAVOC_malloc(12);
    ValueName := actual_ValueName;
    Data := actual_Data;
    DataLength := actual_DataLength;
    Type := actual_Type;
    ActualDataLength := actual_ActualDataLength;
    SoftwareKey := actual_SoftwareKey;
    call {:si_unique_call 507} sdv_do_paged_code_check();
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Type != 0;
    assume {:nonnull} Type != 0;
    assume Type > 0;
    Mem_T.VOID[Type] := 0;
    goto L9;

  L9:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} ActualDataLength != 0;
    assume {:nonnull} ActualDataLength != 0;
    assume ActualDataLength > 0;
    Mem_T.VOID[ActualDataLength] := 0;
    goto L11;

  L11:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} SoftwareKey != 0;
    call {:si_unique_call 508} ntStatus_6 := IoOpenDeviceRegistryKey(0, 2, 2031616, 0);
    goto L20;

  L20:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} ntStatus_6 >= 0;
    call {:si_unique_call 509} RtlInitUnicodeString(valueName, ValueName);
    length_1 := 12 + DataLength;
    call {:si_unique_call 510} sdv_177 := ExAllocatePoolWithTag(1, length_1, -1016958123);
    partialInfo := sdv_177;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} partialInfo != 0;
    call {:si_unique_call 511} sdv_RtlZeroMemory(0, length_1);
    goto L35;

  L35:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} partialInfo != 0;
    call {:si_unique_call 512} Tmp_430 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    Mem_T.VOID[Tmp_430] := resultLength;
    call {:si_unique_call 513} ntStatus_6 := ZwQueryValueKey(0, 0, 2, 0, length_1, Tmp_430);
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    resultLength := Mem_T.VOID[Tmp_430];
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} ntStatus_6 == 5;
    ntStatus_6 := 0;
    goto L45;

  L45:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} ntStatus_6 >= 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Data != 0;
    assume {:nonnull} partialInfo != 0;
    assume partialInfo > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    Tmp_431 := DataLength;
    goto L55;

  L55:
    call {:si_unique_call 514} sdv_RtlCopyMemory(0, 0, Tmp_431);
    goto L51;

  L51:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Type != 0;
    assume {:nonnull} Type != 0;
    assume Type > 0;
    assume {:nonnull} partialInfo != 0;
    assume partialInfo > 0;
    havoc vslice_dummy_var_173;
    Mem_T.VOID[Type] := vslice_dummy_var_173;
    goto L58;

  L58:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} ActualDataLength != 0;
    assume {:nonnull} ActualDataLength != 0;
    assume ActualDataLength > 0;
    assume {:nonnull} partialInfo != 0;
    assume partialInfo > 0;
    havoc vslice_dummy_var_174;
    Mem_T.VOID[ActualDataLength] := vslice_dummy_var_174;
    goto L47;

  L47:
    call {:si_unique_call 515} ExFreePoolWithTag(0, -1016958123);
    goto L61;

  L61:
    call {:si_unique_call 516} vslice_dummy_var_63 := ZwClose(0);
    goto L21;

  L21:
    Tmp_429 := ntStatus_6;
    return;

  anon35_Then:
    assume {:partition} ActualDataLength == 0;
    goto L47;

  anon33_Then:
    assume {:partition} Type == 0;
    goto L58;

  anon34_Then:
    assume {:nonnull} partialInfo != 0;
    assume partialInfo > 0;
    havoc Tmp_431;
    goto L55;

  anon32_Then:
    assume {:partition} Data == 0;
    goto L51;

  anon31_Then:
    assume {:partition} 0 > ntStatus_6;
    goto L47;

  anon30_Then:
    assume {:partition} ntStatus_6 != 5;
    goto L45;

  anon29_Then:
    assume {:partition} partialInfo == 0;
    ntStatus_6 := -1073741670;
    goto L61;

  anon36_Then:
    assume {:partition} partialInfo == 0;
    goto L35;

  anon28_Then:
    assume {:partition} 0 > ntStatus_6;
    goto L21;

  anon27_Then:
    assume {:partition} SoftwareKey == 0;
    call {:si_unique_call 517} ntStatus_6 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto L20;

  anon26_Then:
    assume {:partition} ActualDataLength == 0;
    goto L11;

  anon25_Then:
    assume {:partition} Type == 0;
    goto L9;
}



procedure {:origName "ResetDevice"} ResetDevice(actual_parentFdoExt_43: int) returns (Tmp_432: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ResetDevice"} ResetDevice(actual_parentFdoExt_43: int) returns (Tmp_432: int)
{
  var {:scalar} ntStatus_7: int;
  var {:pointer} Tmp_434: int;
  var {:pointer} irp_22: int;
  var {:scalar} ioStatus_2: int;
  var {:scalar} event_2: int;
  var {:pointer} parentFdoExt_43: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_176: int;

  anon0:
    call {:si_unique_call 518} ioStatus_2 := __HAVOC_malloc(12);
    call {:si_unique_call 519} event_2 := __HAVOC_malloc(156);
    parentFdoExt_43 := actual_parentFdoExt_43;
    call {:si_unique_call 520} Tmp_434 := __HAVOC_malloc(248);
    irp_22 := 0;
    call {:si_unique_call 521} KeInitializeEvent(event_2, 0, 0);
    call {:si_unique_call 522} irp_22 := IoBuildDeviceIoControlRequest(2228231, 0, 0, 0, 0, 0, 1, 0, ioStatus_2);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_22 != 0;
    assume {:nonnull} parentFdoExt_43 != 0;
    assume parentFdoExt_43 > 0;
    havoc vslice_dummy_var_175;
    call {:si_unique_call 523} ntStatus_7 := sdv_IoCallDriver#1(vslice_dummy_var_175, irp_22);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} ntStatus_7 == 259;
    Tmp_434 := strConst__li2bpl9;
    assume {:nonnull} parentFdoExt_43 != 0;
    assume parentFdoExt_43 > 0;
    havoc vslice_dummy_var_176;
    call {:si_unique_call 524} WaitForSignal(event_2, Tmp_434, vslice_dummy_var_176);
    goto L22;

  L22:
    assume {:nonnull} ioStatus_2 != 0;
    assume ioStatus_2 > 0;
    havoc ntStatus_7;
    Tmp_432 := ntStatus_7;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} ntStatus_7 != 259;
    goto L22;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_22 == 0;
    Tmp_432 := -1073741670;
    goto L1;
}



procedure {:origName "UsbcAcquireRemoveLock"} UsbcAcquireRemoveLock(actual_parentFdoExt_44: int, actual_tag: int, actual_object: int) returns (Tmp_435: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_435 == -1073741823 || Tmp_435 == -1073741738 || Tmp_435 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcAcquireRemoveLock"} UsbcAcquireRemoveLock(actual_parentFdoExt_44: int, actual_tag: int, actual_object: int) returns (Tmp_435: int)
{
  var {:pointer} lockEntry: int;
  var {:scalar} queueHandle: int;
  var {:pointer} sdv_183: int;
  var {:scalar} ntStatus_8: int;
  var {:pointer} parentFdoExt_44: int;
  var {:scalar} tag: int;
  var {:pointer} object: int;
  var vslice_dummy_var_64: int;

  anon0:
    call {:si_unique_call 525} queueHandle := __HAVOC_malloc(12);
    parentFdoExt_44 := actual_parentFdoExt_44;
    tag := actual_tag;
    object := actual_object;
    ntStatus_8 := 0;
    lockEntry := 0;
    assume {:nonnull} queueHandle != 0;
    assume queueHandle > 0;
    assume {:nonnull} queueHandle != 0;
    assume queueHandle > 0;
    assume {:nonnull} queueHandle != 0;
    assume queueHandle > 0;
    call {:si_unique_call 526} ntStatus_8 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ntStatus_8 >= 0;
    call {:si_unique_call 527} sdv_183 := ExAllocatePoolWithTag(512, 20, -1016958123);
    lockEntry := sdv_183;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} lockEntry != 0;
    call {:si_unique_call 528} sdv_RtlZeroMemory(0, 20);
    goto L22;

  L22:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} lockEntry != 0;
    assume {:nonnull} lockEntry != 0;
    assume lockEntry > 0;
    assume {:nonnull} lockEntry != 0;
    assume lockEntry > 0;
    assume {:nonnull} lockEntry != 0;
    assume lockEntry > 0;
    call {:si_unique_call 529} KeAcquireInStackQueuedSpinLock(0, 0);
    assume {:nonnull} lockEntry != 0;
    assume lockEntry > 0;
    assume {:nonnull} parentFdoExt_44 != 0;
    assume parentFdoExt_44 > 0;
    call {:si_unique_call 530} vslice_dummy_var_64 := sdv_InsertTailList(removeListHead_PARENT_FDO_EXTENSION(parentFdoExt_44), listEntry__USBC_REMOVE_LOCK_ENTRY(lockEntry));
    call {:si_unique_call 531} KeReleaseInStackQueuedSpinLock(0);
    goto L16;

  L16:
    Tmp_435 := ntStatus_8;
    return;

  anon8_Then:
    assume {:partition} lockEntry == 0;
    goto L16;

  anon9_Then:
    assume {:partition} lockEntry == 0;
    goto L22;

  anon7_Then:
    assume {:partition} 0 > ntStatus_8;
    goto L16;
}



procedure {:origName "InitializeFunctionAssoc"} InitializeFunctionAssoc(actual_parentFdoExt_45: int, actual_functionAssoc_2: int, actual_baseInterfaceNumber: int, actual_numInterfaces: int) returns (Tmp_437: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_437 == 0 || Tmp_437 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitializeFunctionAssoc"} InitializeFunctionAssoc(actual_parentFdoExt_45: int, actual_functionAssoc_2: int, actual_baseInterfaceNumber: int, actual_numInterfaces: int) returns (Tmp_437: int)
{
  var {:scalar} i_8: int;
  var {:scalar} Tmp_439: int;
  var {:pointer} Tmp_440: int;
  var {:scalar} Tmp_441: int;
  var {:pointer} sdv_184: int;
  var {:pointer} Tmp_442: int;
  var {:pointer} interfaceListEntry_1: int;
  var {:scalar} Tmp_443: int;
  var {:scalar} ntStatus_9: int;
  var {:scalar} Tmp_444: int;
  var {:pointer} parentFdoExt_45: int;
  var {:pointer} functionAssoc_2: int;
  var {:scalar} baseInterfaceNumber: int;
  var {:scalar} numInterfaces: int;

  anon0:
    parentFdoExt_45 := actual_parentFdoExt_45;
    functionAssoc_2 := actual_functionAssoc_2;
    baseInterfaceNumber := actual_baseInterfaceNumber;
    numInterfaces := actual_numInterfaces;
    ntStatus_9 := 0;
    i_8 := 0;
    interfaceListEntry_1 := 0;
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    call {:si_unique_call 532} RtlInitUnicodeString(compatibleIds__PARENT_FUNCTION_ASSOC(functionAssoc_2), 0);
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    call {:si_unique_call 533} RtlInitUnicodeString(hardwareIds__PARENT_FUNCTION_ASSOC(functionAssoc_2), 0);
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    call {:si_unique_call 534} RtlInitUnicodeString(functionDescription__PARENT_FUNCTION_ASSOC(functionAssoc_2), 0);
    Tmp_443 := numInterfaces * 4;
    call {:si_unique_call 535} sdv_184 := ExAllocatePoolWithTag(512, Tmp_443, -1016958123);
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    Tmp_441 := numInterfaces * 4;
    call {:si_unique_call 536} sdv_RtlZeroMemory(0, Tmp_441);
    goto L31;

  L31:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} parentFdoExt_45 != 0;
    assume parentFdoExt_45 > 0;
    havoc interfaceListEntry_1;
    goto L38;

  L38:
    call {:si_unique_call 537} Tmp_440 := InitializeFunctionAssoc_loop_L38(Tmp_440, interfaceListEntry_1, baseInterfaceNumber);
    goto L38_last;

  L38_last:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} interfaceListEntry_1 != 0;
    assume interfaceListEntry_1 > 0;
    havoc Tmp_440;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_440)] == baseInterfaceNumber;
    goto L39;

  L39:
    i_8 := 0;
    goto L44;

  L44:
    call {:si_unique_call 538} i_8, Tmp_439, Tmp_442, Tmp_444 := InitializeFunctionAssoc_loop_L44(i_8, Tmp_439, Tmp_442, interfaceListEntry_1, Tmp_444, functionAssoc_2, numInterfaces);
    goto L44_last;

  L44_last:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} numInterfaces > i_8;
    Tmp_439 := i_8;
    assume {:nonnull} functionAssoc_2 != 0;
    assume functionAssoc_2 > 0;
    havoc Tmp_442;
    Tmp_444 := i_8;
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    i_8 := i_8 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} i_8 >= numInterfaces;
    Tmp_437 := ntStatus_9;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_440)] != baseInterfaceNumber;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon12_Then:
    goto L39;

  anon11_Then:
    Tmp_437 := -1073741670;
    goto L1;

  anon14_Then:
    goto L31;
}



procedure {:origName "UsbcForwardIrpWithCompletion"} UsbcForwardIrpWithCompletion(actual_parentFdoExt_46: int, actual_forwardObject_1: int, actual_irp_23: int, actual_completionRoutine_1: int, actual_completionObject: int, actual_context_2: int) returns (Tmp_445: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcForwardIrpWithCompletion"} UsbcForwardIrpWithCompletion(actual_parentFdoExt_46: int, actual_forwardObject_1: int, actual_irp_23: int, actual_completionRoutine_1: int, actual_completionObject: int, actual_context_2: int) returns (Tmp_445: int)
{
  var {:scalar} status_29: int;
  var {:pointer} parentFdoExt_46: int;
  var {:pointer} forwardObject_1: int;
  var {:pointer} irp_23: int;
  var {:scalar} completionRoutine_1: int;
  var {:pointer} completionObject: int;
  var {:pointer} context_2: int;
  var vslice_dummy_var_177: int;

  anon0:
    parentFdoExt_46 := actual_parentFdoExt_46;
    forwardObject_1 := actual_forwardObject_1;
    irp_23 := actual_irp_23;
    completionRoutine_1 := actual_completionRoutine_1;
    completionObject := actual_completionObject;
    context_2 := actual_context_2;
    call {:si_unique_call 539} sdv_IoCopyCurrentIrpStackLocationToNext(irp_23);
    assume {:nonnull} parentFdoExt_46 != 0;
    assume parentFdoExt_46 > 0;
    havoc vslice_dummy_var_177;
    call {:si_unique_call 540} SetCompletionRoutine(vslice_dummy_var_177, completionObject, irp_23, completionRoutine_1, context_2, 1, 1, 1);
    call {:si_unique_call 541} status_29 := sdv_IoCallDriver#1(forwardObject_1, irp_23);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_445 := status_29;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CallNextDriverSync"} CallNextDriverSync(actual_parentFdoExt_47: int, actual_irp_24: int, actual_timeout: int) returns (Tmp_447: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallNextDriverSync"} CallNextDriverSync(actual_parentFdoExt_47: int, actual_irp_24: int, actual_timeout: int) returns (Tmp_447: int)
{
  var {:scalar} status_30: int;
  var {:pointer} parentFdoExt_47: int;
  var {:pointer} irp_24: int;
  var {:scalar} timeout: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_179: int;

  anon0:
    parentFdoExt_47 := actual_parentFdoExt_47;
    irp_24 := actual_irp_24;
    timeout := actual_timeout;
    call {:si_unique_call 542} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_47 != 0;
    assume parentFdoExt_47 > 0;
    havoc vslice_dummy_var_178;
    havoc vslice_dummy_var_179;
    call {:si_unique_call 543} status_30 := CallDriverSync(vslice_dummy_var_178, irp_24, timeout, vslice_dummy_var_179);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_447 := status_30;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "GetD3Policy"} GetD3Policy(actual_PhysicalDeviceObject_1: int, actual_D3ColdSupported: int) returns (Tmp_449: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_449 == -1073741811 || Tmp_449 == -1073741823 || Tmp_449 == 0 || Tmp_449 == 5 || Tmp_449 == -1073741789 || Tmp_449 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetD3Policy"} GetD3Policy(actual_PhysicalDeviceObject_1: int, actual_D3ColdSupported: int) returns (Tmp_449: int)
{
  var {:pointer} Tmp_450: int;
  var {:scalar} unicodeString: int;
  var {:pointer} Tmp_451: int;
  var {:pointer} Tmp_452: int;
  var {:scalar} sizeNeeded: int;
  var {:pointer} pciHandle: int;
  var {:scalar} status_31: int;
  var {:scalar} value: int;
  var {:pointer} D3ColdSupported: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;

  anon0:
    call {:si_unique_call 544} vslice_dummy_var_65 := __HAVOC_malloc(24);
    call {:si_unique_call 545} unicodeString := __HAVOC_malloc(12);
    call {:si_unique_call 546} pciHandle := __HAVOC_malloc(4);
    call {:si_unique_call 547} value := __HAVOC_malloc(20);
    D3ColdSupported := actual_D3ColdSupported;
    call {:si_unique_call 548} Tmp_450 := __HAVOC_malloc(148);
    call {:si_unique_call 549} Tmp_451 := __HAVOC_malloc(64);
    call {:si_unique_call 550} sdv_do_paged_code_check();
    call {:si_unique_call 551} status_31 := IoOpenDeviceRegistryKey(0, 1, 983103, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_31 >= 0;
    Tmp_450 := strConst__li2bpl10;
    call {:si_unique_call 552} RtlInitUnicodeString(unicodeString, Tmp_450);
    call {:si_unique_call 553} sdv_InitializeObjectAttributes(0, 0, 576, 0, 0);
    call {:si_unique_call 554} status_31 := ZwCreateKey(pciHandle, 983103, 0, 0, 0, 0, 0);
    call {:si_unique_call 555} vslice_dummy_var_66 := ZwClose(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_31 >= 0;
    Tmp_451 := strConst__li2bpl11;
    call {:si_unique_call 556} RtlInitUnicodeString(unicodeString, Tmp_451);
    call {:si_unique_call 557} Tmp_452 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_452 != 0;
    assume Tmp_452 > 0;
    Mem_T.VOID[Tmp_452] := sizeNeeded;
    call {:si_unique_call 558} status_31 := ZwQueryValueKey(0, 0, 2, 0, 20, Tmp_452);
    assume {:nonnull} Tmp_452 != 0;
    assume Tmp_452 > 0;
    sizeNeeded := Mem_T.VOID[Tmp_452];
    call {:si_unique_call 559} vslice_dummy_var_67 := ZwClose(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_31 >= 0;
    assume {:nonnull} value != 0;
    assume value > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} D3ColdSupported != 0;
    assume D3ColdSupported > 0;
    Mem_T.VOID[D3ColdSupported] := 1;
    goto L46;

  L46:
    Tmp_449 := status_31;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} D3ColdSupported != 0;
    assume D3ColdSupported > 0;
    Mem_T.VOID[D3ColdSupported] := 0;
    goto L46;

  anon11_Then:
    assume {:partition} 0 > status_31;
    goto L46;

  anon10_Then:
    assume {:partition} 0 > status_31;
    Tmp_449 := status_31;
    goto L1;

  anon9_Then:
    assume {:partition} 0 > status_31;
    Tmp_449 := status_31;
    goto L1;
}



procedure {:origName "GetFunctionInterfaceListBase"} GetFunctionInterfaceListBase(actual_parentFdoExt_49: int, actual_functionIndex: int, actual_numFunctionInterfaces: int) returns (Tmp_455: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetFunctionInterfaceListBase"} GetFunctionInterfaceListBase(actual_parentFdoExt_49: int, actual_functionIndex: int, actual_numFunctionInterfaces: int) returns (Tmp_455: int)
{
  var {:scalar} i_9: int;
  var {:pointer} Tmp_456: int;
  var {:pointer} Tmp_457: int;
  var {:scalar} audFuncBaseIndex: int;
  var {:scalar} ifaceClass: int;
  var {:pointer} Tmp_459: int;
  var {:pointer} Tmp_460: int;
  var {:scalar} func: int;
  var {:pointer} configDesc_2: int;
  var {:scalar} Tmp_461: int;
  var {:scalar} Tmp_462: int;
  var {:pointer} Tmp_463: int;
  var {:scalar} Tmp_464: int;
  var {:pointer} Tmp_465: int;
  var {:pointer} Tmp_466: int;
  var {:scalar} Tmp_467: int;
  var {:scalar} Tmp_468: int;
  var {:scalar} Tmp_469: int;
  var {:pointer} Tmp_470: int;
  var {:pointer} Tmp_471: int;
  var {:pointer} Tmp_472: int;
  var {:scalar} Tmp_473: int;
  var {:pointer} Tmp_474: int;
  var {:pointer} iface_2: int;
  var {:pointer} Tmp_475: int;
  var {:pointer} Tmp_476: int;
  var {:pointer} Tmp_477: int;
  var {:scalar} Tmp_478: int;
  var {:pointer} Tmp_479: int;
  var {:pointer} Tmp_480: int;
  var {:pointer} Tmp_481: int;
  var {:pointer} Tmp_482: int;
  var {:pointer} parentFdoExt_49: int;
  var {:scalar} functionIndex: int;
  var {:pointer} numFunctionInterfaces: int;

  anon0:
    parentFdoExt_49 := actual_parentFdoExt_49;
    functionIndex := actual_functionIndex;
    numFunctionInterfaces := actual_numFunctionInterfaces;
    iface_2 := 0;
    audFuncBaseIndex := -1;
    call {:si_unique_call 560} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc configDesc_2;
    func := 0;
    i_9 := 0;
    goto L17;

  L17:
    call {:si_unique_call 561} i_9, Tmp_456, Tmp_457, audFuncBaseIndex, ifaceClass, func, Tmp_461, Tmp_462, Tmp_463, Tmp_464, Tmp_465, Tmp_466, Tmp_468, Tmp_470, Tmp_471, Tmp_472, Tmp_476, Tmp_477, Tmp_478 := GetFunctionInterfaceListBase_loop_L17(i_9, Tmp_456, Tmp_457, audFuncBaseIndex, ifaceClass, func, configDesc_2, Tmp_461, Tmp_462, Tmp_463, Tmp_464, Tmp_465, Tmp_466, Tmp_468, Tmp_470, Tmp_471, Tmp_472, Tmp_476, Tmp_477, Tmp_478, parentFdoExt_49, functionIndex);
    goto L17_last;

  L17_last:
    assume {:nonnull} configDesc_2 != 0;
    assume configDesc_2 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_462 := i_9;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_465;
    assume {:nonnull} Tmp_465 != 0;
    assume Tmp_465 > 0;
    havoc Tmp_470;
    assume {:nonnull} Tmp_470 != 0;
    assume Tmp_470 > 0;
    havoc ifaceClass;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} ifaceClass == 13;
    goto L23;

  L23:
    i_9 := i_9 + 1;
    goto L23_dummy;

  L23_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:partition} ifaceClass != 13;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} func != functionIndex;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} ifaceClass == 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} audFuncBaseIndex == -1;
    audFuncBaseIndex := i_9;
    goto L28;

  L28:
    Tmp_464 := i_9 + 1;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_456;
    assume {:nonnull} Tmp_456 != 0;
    assume Tmp_456 > 0;
    havoc Tmp_476;
    assume {:nonnull} Tmp_476 != 0;
    assume Tmp_476 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L31;

  L31:
    func := func + 1;
    audFuncBaseIndex := -1;
    goto L23;

  anon40_Then:
    Tmp_478 := audFuncBaseIndex;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_472;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    havoc Tmp_477;
    Tmp_468 := i_9 + 1;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_457;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    havoc Tmp_463;
    assume {:nonnull} Tmp_463 != 0;
    assume Tmp_463 > 0;
    assume {:nonnull} Tmp_477 != 0;
    assume Tmp_477 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L31;

  anon41_Then:
    goto L23;

  anon33_Then:
    assume {:partition} audFuncBaseIndex != -1;
    goto L28;

  anon32_Then:
    assume {:partition} ifaceClass != 1;
    audFuncBaseIndex := -1;
    Tmp_461 := i_9 + 1;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_471;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    havoc Tmp_466;
    assume {:nonnull} Tmp_466 != 0;
    assume Tmp_466 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(Tmp_466)] == 0;
    func := func + 1;
    goto L23;

  anon42_Then:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(Tmp_466)] != 0;
    goto L23;

  anon31_Then:
    assume {:partition} func == functionIndex;
    goto L18;

  L18:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} func == functionIndex;
    Tmp_467 := i_9;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_480;
    iface_2 := Tmp_480 + Tmp_467 * 8;
    assume {:nonnull} iface_2 != 0;
    assume iface_2 > 0;
    havoc Tmp_475;
    assume {:nonnull} Tmp_475 != 0;
    assume Tmp_475 > 0;
    havoc ifaceClass;
    assume {:nonnull} numFunctionInterfaces != 0;
    assume numFunctionInterfaces > 0;
    Mem_T.VOID[numFunctionInterfaces] := 1;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} ifaceClass == 13;
    iface_2 := 0;
    goto L44;

  L44:
    Tmp_455 := iface_2;
    return;

  anon37_Then:
    assume {:partition} ifaceClass != 13;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} ifaceClass == 1;
    i_9 := i_9 + 1;
    goto L46;

  L46:
    call {:si_unique_call 562} i_9, Tmp_459, Tmp_460, Tmp_469, Tmp_473, Tmp_474, Tmp_479, Tmp_481, Tmp_482 := GetFunctionInterfaceListBase_loop_L46(i_9, Tmp_459, Tmp_460, configDesc_2, Tmp_469, Tmp_473, Tmp_474, iface_2, Tmp_479, Tmp_481, Tmp_482, parentFdoExt_49, numFunctionInterfaces);
    goto L46_last;

  L46_last:
    assume {:nonnull} configDesc_2 != 0;
    assume configDesc_2 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    Tmp_469 := i_9;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_481;
    assume {:nonnull} Tmp_481 != 0;
    assume Tmp_481 > 0;
    havoc Tmp_474;
    assume {:nonnull} iface_2 != 0;
    assume iface_2 > 0;
    havoc Tmp_479;
    assume {:nonnull} Tmp_474 != 0;
    assume Tmp_474 > 0;
    assume {:nonnull} Tmp_479 != 0;
    assume Tmp_479 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    Tmp_473 := i_9;
    assume {:nonnull} parentFdoExt_49 != 0;
    assume parentFdoExt_49 > 0;
    havoc Tmp_459;
    assume {:nonnull} Tmp_459 != 0;
    assume Tmp_459 > 0;
    havoc Tmp_460;
    assume {:nonnull} iface_2 != 0;
    assume iface_2 > 0;
    havoc Tmp_482;
    assume {:nonnull} Tmp_460 != 0;
    assume Tmp_460 > 0;
    assume {:nonnull} Tmp_482 != 0;
    assume Tmp_482 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} numFunctionInterfaces != 0;
    assume numFunctionInterfaces > 0;
    Mem_T.VOID[numFunctionInterfaces] := Mem_T.VOID[numFunctionInterfaces] + 1;
    i_9 := i_9 + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    assume false;
    return;

  anon39_Then:
    goto L44;

  anon38_Then:
    goto L44;

  anon35_Then:
    goto L44;

  anon34_Then:
    assume {:partition} ifaceClass != 1;
    goto L44;

  anon30_Then:
    assume {:partition} func != functionIndex;
    assume {:nonnull} numFunctionInterfaces != 0;
    assume numFunctionInterfaces > 0;
    Mem_T.VOID[numFunctionInterfaces] := 0;
    goto L44;

  anon29_Then:
    goto L18;
}



procedure {:origName "ParseUSBInterfaceAssociationDescriptors"} ParseUSBInterfaceAssociationDescriptors(actual_parentFdoExt_50: int, actual_parentFunctionList: int, actual_numFunctions_2: int) returns (Tmp_483: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_483 == -1073741668 || Tmp_483 == 0 || Tmp_483 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParseUSBInterfaceAssociationDescriptors"} ParseUSBInterfaceAssociationDescriptors(actual_parentFdoExt_50: int, actual_parentFunctionList: int, actual_numFunctions_2: int) returns (Tmp_483: int)
{
  var {:scalar} Tmp_484: int;
  var {:pointer} interfaceDescriptor_1: int;
  var {:scalar} Tmp_485: int;
  var {:pointer} Tmp_486: int;
  var {:pointer} Tmp_487: int;
  var {:scalar} Tmp_488: int;
  var {:pointer} Tmp_489: int;
  var {:pointer} Tmp_490: int;
  var {:scalar} Tmp_491: int;
  var {:pointer} commonDescriptor: int;
  var {:pointer} interfaceAssociationDescriptor: int;
  var {:scalar} Tmp_492: int;
  var {:scalar} Tmp_493: int;
  var {:pointer} interfaceAssociationDescriptor_1: int;
  var {:scalar} foundIAD: int;
  var {:scalar} Tmp_494: int;
  var {:scalar} interfacesRemaining: int;
  var {:scalar} Tmp_495: int;
  var {:scalar} Tmp_496: int;
  var {:pointer} Tmp_497: int;
  var {:scalar} Tmp_498: int;
  var {:pointer} Tmp_499: int;
  var {:scalar} Tmp_500: int;
  var {:scalar} Tmp_501: int;
  var {:scalar} Tmp_502: int;
  var {:pointer} parentConfigDesc: int;
  var {:pointer} Tmp_503: int;
  var {:pointer} Tmp_504: int;
  var {:pointer} Tmp_505: int;
  var {:pointer} Tmp_506: int;
  var {:pointer} Tmp_507: int;
  var {:scalar} Tmp_508: int;
  var {:pointer} Tmp_509: int;
  var {:scalar} Tmp_510: int;
  var {:scalar} Tmp_511: int;
  var {:pointer} Tmp_512: int;
  var {:pointer} sdv_196: int;
  var {:pointer} Tmp_513: int;
  var {:pointer} descriptorEnd: int;
  var {:scalar} Tmp_514: int;
  var {:scalar} Tmp_515: int;
  var {:scalar} nextInterface: int;
  var {:pointer} Tmp_517: int;
  var {:scalar} functionIndex_1: int;
  var {:scalar} Tmp_518: int;
  var {:scalar} Tmp_519: int;
  var {:scalar} sdv_197: int;
  var {:pointer} Tmp_520: int;
  var {:scalar} functionCount: int;
  var {:pointer} Tmp_521: int;
  var {:pointer} Tmp_522: int;
  var {:pointer} Tmp_523: int;
  var {:scalar} Tmp_524: int;
  var {:pointer} Tmp_525: int;
  var {:scalar} Tmp_526: int;
  var {:pointer} Tmp_527: int;
  var {:scalar} Tmp_528: int;
  var {:pointer} functionList: int;
  var {:scalar} status_32: int;
  var {:pointer} Tmp_529: int;
  var {:pointer} Tmp_530: int;
  var {:scalar} Tmp_531: int;
  var {:pointer} offset_1: int;
  var {:pointer} parentFdoExt_50: int;
  var {:pointer} parentFunctionList: int;
  var {:pointer} numFunctions_2: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_183: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;

  anon0:
    parentFdoExt_50 := actual_parentFdoExt_50;
    parentFunctionList := actual_parentFunctionList;
    numFunctions_2 := actual_numFunctions_2;
    status_32 := 0;
    functionCount := 0;
    functionIndex_1 := 0;
    foundIAD := 0;
    interfacesRemaining := 0;
    nextInterface := 0;
    functionList := 0;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc parentConfigDesc;
    offset_1 := parentConfigDesc;
    descriptorEnd := parentConfigDesc;
    assume {:nonnull} parentConfigDesc != 0;
    assume parentConfigDesc > 0;
    havoc interfacesRemaining;
    functionCount := 0;
    goto L26;

  L26:
    call {:si_unique_call 563} commonDescriptor, interfaceAssociationDescriptor, foundIAD, interfacesRemaining, functionCount := ParseUSBInterfaceAssociationDescriptors_loop_L26(commonDescriptor, interfaceAssociationDescriptor, foundIAD, interfacesRemaining, descriptorEnd, functionCount, offset_1);
    goto L26_last;

  L26_last:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} descriptorEnd > offset_1;
    commonDescriptor := offset_1;
    assume {:nonnull} commonDescriptor != 0;
    assume commonDescriptor > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDescriptor)] == 11;
    interfaceAssociationDescriptor := commonDescriptor;
    assume {:nonnull} interfaceAssociationDescriptor != 0;
    assume interfaceAssociationDescriptor > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    status_32 := -1073741668;
    Tmp_519 := interfacesRemaining;
    assume {:nonnull} interfaceAssociationDescriptor != 0;
    assume interfaceAssociationDescriptor > 0;
    havoc Tmp_493;
    havoc Tmp_523;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_180;
    call {:si_unique_call 564} WPP_RECORDER_SF_dd(vslice_dummy_var_180, 2, 8, 26, Tmp_523, Tmp_493, Tmp_519);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_507;
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    Tmp_491 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_507)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_181;
    havoc vslice_dummy_var_182;
    call {:si_unique_call 565} RecordFailure(parentFdoExt_50, vslice_dummy_var_181, status_32, 0, 536870919, -918469583, vslice_dummy_var_182, Tmp_491);
    goto L52;

  L52:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} status_32 >= 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} foundIAD != 0;
    assume {:nonnull} numFunctions_2 != 0;
    assume numFunctions_2 > 0;
    Mem_T.VOID[numFunctions_2] := functionCount;
    assume {:nonnull} parentFunctionList != 0;
    assume parentFunctionList > 0;
    goto L57;

  L57:
    Tmp_483 := status_32;
    return;

  anon64_Then:
    assume {:partition} foundIAD == 0;
    goto L53;

  L53:
    assume {:nonnull} numFunctions_2 != 0;
    assume numFunctions_2 > 0;
    Mem_T.VOID[numFunctions_2] := 0;
    assume {:nonnull} parentFunctionList != 0;
    assume parentFunctionList > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} functionList != 0;
    Tmp_495 := functionCount;
    call {:si_unique_call 566} CleanFunctionList(functionList, Tmp_495);
    goto L57;

  anon86_Then:
    assume {:partition} functionList == 0;
    goto L57;

  anon63_Then:
    assume {:partition} 0 > status_32;
    goto L53;

  anon85_Then:
    functionCount := functionCount + 1;
    assume {:nonnull} interfaceAssociationDescriptor != 0;
    assume interfaceAssociationDescriptor > 0;
    havoc interfacesRemaining;
    foundIAD := 1;
    goto L30;

  L30:
    assume {:nonnull} commonDescriptor != 0;
    assume commonDescriptor > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDescriptor)] != 0;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDescriptor)] == 0;
    goto L27;

  L27:
    functionCount := functionCount + interfacesRemaining;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} foundIAD != 0;
    assume {:nonnull} parentConfigDesc != 0;
    assume parentConfigDesc > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto L72;

  L72:
    status_32 := -1073741668;
    havoc Tmp_506;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_183;
    call {:si_unique_call 567} WPP_RECORDER_SF_(vslice_dummy_var_183, 2, 8, 27, Tmp_506);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_530;
    assume {:nonnull} Tmp_530 != 0;
    assume Tmp_530 > 0;
    Tmp_515 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_530)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_184;
    havoc vslice_dummy_var_185;
    call {:si_unique_call 568} RecordFailure(parentFdoExt_50, vslice_dummy_var_184, status_32, 0, 536870919, -918469582, vslice_dummy_var_185, Tmp_515);
    goto L52;

  anon65_Then:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} functionCount != 0;
    assume {:nonnull} parentConfigDesc != 0;
    assume parentConfigDesc > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    Tmp_488 := 48 * functionCount;
    call {:si_unique_call 569} sdv_196 := ExAllocatePoolWithTag(512, Tmp_488, -1016958123);
    functionList := sdv_196;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} functionList != 0;
    Tmp_528 := 48 * functionCount;
    call {:si_unique_call 570} sdv_RtlZeroMemory(0, Tmp_528);
    goto L94;

  L94:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} functionList != 0;
    offset_1 := parentConfigDesc;
    interfacesRemaining := 0;
    functionIndex_1 := 0;
    goto L103;

  L103:
    call {:si_unique_call 571} Tmp_484, interfaceDescriptor_1, commonDescriptor, Tmp_492, interfaceAssociationDescriptor_1, Tmp_494, interfacesRemaining, Tmp_502, Tmp_503, Tmp_510, Tmp_514, nextInterface, functionIndex_1, Tmp_518, sdv_197, Tmp_525, Tmp_526, status_32 := ParseUSBInterfaceAssociationDescriptors_loop_L103(Tmp_484, interfaceDescriptor_1, commonDescriptor, Tmp_492, interfaceAssociationDescriptor_1, Tmp_494, interfacesRemaining, Tmp_502, Tmp_503, Tmp_510, descriptorEnd, Tmp_514, nextInterface, functionIndex_1, Tmp_518, sdv_197, functionCount, Tmp_525, Tmp_526, functionList, status_32, offset_1, parentFdoExt_50);
    goto L103_last;

  L103_last:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} descriptorEnd > offset_1;
    commonDescriptor := offset_1;
    assume {:nonnull} commonDescriptor != 0;
    assume commonDescriptor > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDescriptor)] == 11;
    interfaceAssociationDescriptor_1 := commonDescriptor;
    call {:si_unique_call 572} sdv_197 := ValidateUSBInterfaceAssociationDescriptor(commonDescriptor, parentFdoExt_50);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} sdv_197 != 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} functionIndex_1 >= functionCount;
    status_32 := -1073741668;
    havoc Tmp_499;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_186;
    call {:si_unique_call 573} WPP_RECORDER_SF_(vslice_dummy_var_186, 2, 8, 30, Tmp_499);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_489;
    assume {:nonnull} Tmp_489 != 0;
    assume Tmp_489 > 0;
    Tmp_531 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_489)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_187;
    havoc vslice_dummy_var_188;
    call {:si_unique_call 574} RecordFailure(parentFdoExt_50, vslice_dummy_var_187, status_32, 0, 536870919, -918469580, vslice_dummy_var_188, Tmp_531);
    goto L52;

  anon73_Then:
    assume {:partition} functionCount > functionIndex_1;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} interfacesRemaining != 0;
    status_32 := -1073741668;
    havoc Tmp_520;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_189;
    call {:si_unique_call 575} WPP_RECORDER_SF_(vslice_dummy_var_189, 2, 8, 31, Tmp_520);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_487;
    assume {:nonnull} Tmp_487 != 0;
    assume Tmp_487 > 0;
    Tmp_485 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_487)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_190;
    havoc vslice_dummy_var_191;
    call {:si_unique_call 576} RecordFailure(parentFdoExt_50, vslice_dummy_var_190, status_32, 0, 536870919, -918469579, vslice_dummy_var_191, Tmp_485);
    goto L52;

  anon74_Then:
    assume {:partition} interfacesRemaining == 0;
    assume {:nonnull} interfaceAssociationDescriptor_1 != 0;
    assume interfaceAssociationDescriptor_1 > 0;
    havoc Tmp_492;
    assume {:nonnull} interfaceAssociationDescriptor_1 != 0;
    assume interfaceAssociationDescriptor_1 > 0;
    havoc Tmp_514;
    Tmp_510 := functionIndex_1;
    Tmp_503 := functionList + Tmp_510 * 68;
    call {:si_unique_call 577} status_32 := InitializeFunctionAssoc(parentFdoExt_50, Tmp_503, Tmp_514, Tmp_492);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} status_32 < 0;
    havoc Tmp_521;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_192;
    call {:si_unique_call 578} WPP_RECORDER_SF_(vslice_dummy_var_192, 2, 8, 32, Tmp_521);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_193;
    call {:si_unique_call 579} RecordFailure(parentFdoExt_50, vslice_dummy_var_193, status_32, 0, 536870917, -800505550, 0, 0);
    goto L52;

  anon75_Then:
    assume {:partition} 0 <= status_32;
    Tmp_484 := functionIndex_1;
    assume {:nonnull} functionList != 0;
    assume functionList > 0;
    Tmp_494 := functionIndex_1;
    assume {:nonnull} functionList != 0;
    assume functionList > 0;
    functionIndex_1 := functionIndex_1 + 1;
    assume {:nonnull} interfaceAssociationDescriptor_1 != 0;
    assume interfaceAssociationDescriptor_1 > 0;
    havoc nextInterface;
    assume {:nonnull} interfaceAssociationDescriptor_1 != 0;
    assume interfaceAssociationDescriptor_1 > 0;
    havoc interfacesRemaining;
    goto L107;

  L107:
    assume {:nonnull} commonDescriptor != 0;
    assume commonDescriptor > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDescriptor)] == 4;
    interfaceDescriptor_1 := commonDescriptor;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} interfacesRemaining != 0;
    assume {:nonnull} interfaceDescriptor_1 != 0;
    assume interfaceDescriptor_1 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDescriptor_1)] == 0;
    assume {:nonnull} interfaceDescriptor_1 != 0;
    assume interfaceDescriptor_1 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interfaceDescriptor_1)] != nextInterface;
    havoc Tmp_490;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_194;
    call {:si_unique_call 580} WPP_RECORDER_SF_(vslice_dummy_var_194, 2, 8, 33, Tmp_490);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_513;
    assume {:nonnull} Tmp_513 != 0;
    assume Tmp_513 > 0;
    Tmp_508 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_513)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_195;
    havoc vslice_dummy_var_196;
    call {:si_unique_call 581} RecordFailure(parentFdoExt_50, vslice_dummy_var_195, status_32, 0, 536870919, -918469578, vslice_dummy_var_196, Tmp_508);
    status_32 := -1073741668;
    goto L52;

  anon79_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interfaceDescriptor_1)] == nextInterface;
    nextInterface := nextInterface + 1;
    interfacesRemaining := interfacesRemaining - 1;
    goto L187;

  L187:
    assume {:nonnull} commonDescriptor != 0;
    assume commonDescriptor > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDescriptor)] != 0;
    goto anon76_Else_dummy;

  anon76_Else_dummy:
    assume false;
    return;

  anon76_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDescriptor)] == 0;
    goto L104;

  L104:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} interfacesRemaining != 0;
    status_32 := -1073741668;
    havoc Tmp_517;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_197;
    call {:si_unique_call 582} WPP_RECORDER_SF_(vslice_dummy_var_197, 2, 8, 36, Tmp_517);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_504;
    assume {:nonnull} Tmp_504 != 0;
    assume Tmp_504 > 0;
    Tmp_500 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_504)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_198;
    havoc vslice_dummy_var_199;
    call {:si_unique_call 583} RecordFailure(parentFdoExt_50, vslice_dummy_var_198, status_32, 0, 536870919, -918469576, vslice_dummy_var_199, Tmp_500);
    goto L52;

  anon70_Then:
    assume {:partition} interfacesRemaining == 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} functionIndex_1 != functionCount;
    status_32 := -1073741668;
    Tmp_496 := functionIndex_1;
    Tmp_511 := functionCount;
    havoc Tmp_486;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_200;
    call {:si_unique_call 584} WPP_RECORDER_SF_dd(vslice_dummy_var_200, 2, 8, 37, Tmp_486, Tmp_511, Tmp_496);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_527;
    assume {:nonnull} Tmp_527 != 0;
    assume Tmp_527 > 0;
    Tmp_501 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_527)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_201;
    havoc vslice_dummy_var_202;
    call {:si_unique_call 585} RecordFailure(parentFdoExt_50, vslice_dummy_var_201, status_32, 0, 536870919, -918469575, vslice_dummy_var_202, Tmp_501);
    goto L52;

  anon83_Then:
    assume {:partition} functionIndex_1 == functionCount;
    goto L52;

  anon78_Then:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDescriptor_1)] != 0;
    goto L191;

  L191:
    assume {:nonnull} interfaceDescriptor_1 != 0;
    assume interfaceDescriptor_1 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDescriptor_1)] == 0;
    assume {:nonnull} interfaceDescriptor_1 != 0;
    assume interfaceDescriptor_1 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} functionIndex_1 >= functionCount;
    status_32 := -1073741668;
    havoc Tmp_509;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_203;
    call {:si_unique_call 586} WPP_RECORDER_SF_(vslice_dummy_var_203, 2, 8, 34, Tmp_509);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_529;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    Tmp_498 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_529)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_204;
    havoc vslice_dummy_var_205;
    call {:si_unique_call 587} RecordFailure(parentFdoExt_50, vslice_dummy_var_204, status_32, 0, 536870919, -918469577, vslice_dummy_var_205, Tmp_498);
    goto L52;

  anon81_Then:
    assume {:partition} functionCount > functionIndex_1;
    assume {:nonnull} interfaceDescriptor_1 != 0;
    assume interfaceDescriptor_1 > 0;
    Tmp_518 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interfaceDescriptor_1)];
    Tmp_502 := functionIndex_1;
    Tmp_525 := functionList + Tmp_502 * 68;
    call {:si_unique_call 588} status_32 := InitializeFunctionAssoc(parentFdoExt_50, Tmp_525, Tmp_518, 1);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} status_32 < 0;
    havoc Tmp_505;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_206;
    call {:si_unique_call 589} WPP_RECORDER_SF_(vslice_dummy_var_206, 2, 8, 35, Tmp_505);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_207;
    call {:si_unique_call 590} RecordFailure(parentFdoExt_50, vslice_dummy_var_207, status_32, 0, 536870917, -800505549, 0, 0);
    goto L52;

  anon82_Then:
    assume {:partition} 0 <= status_32;
    Tmp_526 := functionIndex_1;
    assume {:nonnull} functionList != 0;
    assume functionList > 0;
    functionIndex_1 := functionIndex_1 + 1;
    goto L187;

  anon80_Then:
    goto L187;

  anon77_Then:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDescriptor_1)] != 0;
    goto L187;

  anon90_Then:
    assume {:partition} interfacesRemaining == 0;
    goto L191;

  anon71_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDescriptor)] != 4;
    goto L187;

  anon72_Then:
    assume {:partition} sdv_197 == 0;
    status_32 := -1073741668;
    havoc Tmp_522;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_208;
    call {:si_unique_call 591} WPP_RECORDER_SF_(vslice_dummy_var_208, 2, 8, 29, Tmp_522);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc Tmp_497;
    assume {:nonnull} Tmp_497 != 0;
    assume Tmp_497 > 0;
    Tmp_524 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_497)];
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_209;
    havoc vslice_dummy_var_210;
    call {:si_unique_call 592} RecordFailure(parentFdoExt_50, vslice_dummy_var_209, status_32, 0, 536870919, -918469581, vslice_dummy_var_210, Tmp_524);
    goto L52;

  anon89_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDescriptor)] != 11;
    goto L107;

  anon69_Then:
    assume {:partition} offset_1 >= descriptorEnd;
    goto L104;

  anon68_Then:
    assume {:partition} functionList == 0;
    status_32 := -1073741670;
    havoc Tmp_512;
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_211;
    call {:si_unique_call 593} WPP_RECORDER_SF_(vslice_dummy_var_211, 2, 8, 28, Tmp_512);
    assume {:nonnull} parentFdoExt_50 != 0;
    assume parentFdoExt_50 > 0;
    havoc vslice_dummy_var_212;
    call {:si_unique_call 594} RecordFailure(parentFdoExt_50, vslice_dummy_var_212, status_32, 0, 536870917, -800505551, 0, 0);
    goto L52;

  anon88_Then:
    assume {:partition} functionList == 0;
    goto L94;

  anon67_Then:
    goto L72;

  anon66_Then:
    assume {:partition} functionCount == 0;
    goto L72;

  anon87_Then:
    assume {:partition} foundIAD == 0;
    goto L52;

  anon84_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDescriptor)] != 11;
    goto L30;

  anon61_Then:
    assume {:partition} offset_1 >= descriptorEnd;
    goto L27;
}



procedure {:origName "UsbcGetTopologyAddress"} UsbcGetTopologyAddress(actual_parentFdoExt_51: int, actual_address: int) returns (Tmp_532: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcGetTopologyAddress"} UsbcGetTopologyAddress(actual_parentFdoExt_51: int, actual_address: int) returns (Tmp_532: int)
{
  var {:pointer} Tmp_533: int;
  var {:pointer} ioStack_1: int;
  var {:scalar} ntStatus_11: int;
  var {:pointer} irp_25: int;
  var {:scalar} ioStatus_3: int;
  var {:scalar} event_3: int;
  var {:pointer} parentFdoExt_51: int;
  var {:pointer} address: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;

  anon0:
    call {:si_unique_call 595} ioStatus_3 := __HAVOC_malloc(12);
    call {:si_unique_call 596} event_3 := __HAVOC_malloc(156);
    parentFdoExt_51 := actual_parentFdoExt_51;
    address := actual_address;
    call {:si_unique_call 597} Tmp_533 := __HAVOC_malloc(288);
    irp_25 := 0;
    ntStatus_11 := 0;
    ioStack_1 := 0;
    call {:si_unique_call 598} sdv_RtlZeroMemory(0, 32);
    call {:si_unique_call 599} KeInitializeEvent(event_3, 0, 0);
    call {:si_unique_call 600} irp_25 := IoBuildDeviceIoControlRequest(2229311, 0, 0, 0, 0, 0, 1, 0, ioStatus_3);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_25 != 0;
    call {:si_unique_call 601} ioStack_1 := sdv_IoGetNextIrpStackLocation(irp_25);
    assume {:nonnull} ioStack_1 != 0;
    assume ioStack_1 > 0;
    assume {:nonnull} parentFdoExt_51 != 0;
    assume parentFdoExt_51 > 0;
    havoc vslice_dummy_var_213;
    call {:si_unique_call 602} ntStatus_11 := sdv_IoCallDriver#1(vslice_dummy_var_213, irp_25);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} ntStatus_11 == 259;
    Tmp_533 := strConst__li2bpl12;
    assume {:nonnull} parentFdoExt_51 != 0;
    assume parentFdoExt_51 > 0;
    havoc vslice_dummy_var_214;
    call {:si_unique_call 603} WaitForSignal(event_3, Tmp_533, vslice_dummy_var_214);
    assume {:nonnull} ioStatus_3 != 0;
    assume ioStatus_3 > 0;
    havoc ntStatus_11;
    goto L33;

  L33:
    Tmp_532 := ntStatus_11;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} ntStatus_11 != 259;
    goto L33;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_25 == 0;
    Tmp_532 := -1073741670;
    goto L1;
}



procedure {:origName "CalculateMultiStringLength"} CalculateMultiStringLength(actual_multiString: int) returns (Tmp_535: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CalculateMultiStringLength"} CalculateMultiStringLength(actual_multiString: int) returns (Tmp_535: int)
{
  var {:scalar} length_2: int;
  var {:scalar} sdv_201: int;
  var {:scalar} totalLength: int;
  var {:pointer} index_1: int;
  var {:pointer} multiString: int;

  anon0:
    multiString := actual_multiString;
    totalLength := 0;
    length_2 := 0;
    index_1 := 0;
    index_1 := multiString;
    goto L10;

  L10:
    call {:si_unique_call 604} length_2, sdv_201, totalLength := CalculateMultiStringLength_loop_L10(length_2, sdv_201, totalLength, index_1);
    goto L10_last;

  L10_last:
    assume {:nonnull} index_1 != 0;
    assume index_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.VOID[index_1] != 0;
    call {:si_unique_call 605} sdv_201 := WStrLen(index_1);
    length_2 := sdv_201 + 1;
    totalLength := totalLength + length_2;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} Mem_T.VOID[index_1] == 0;
    Tmp_535 := totalLength;
    return;
}



procedure {:origName "USBD_ValidateConfigurationDescriptorInternal"} USBD_ValidateConfigurationDescriptorInternal(actual_ConfigDesc: int, actual_BufferLength: int, actual_Level: int, actual_Offset: int, actual_Tag: int) returns (Tmp_537: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_537 == -1072693247 || Tmp_537 == -1072693246 || Tmp_537 == -1072693248 || Tmp_537 == -1072693243 || Tmp_537 == -1072693244 || Tmp_537 == -1072693239 || Tmp_537 == -1072693245 || Tmp_537 == -1072693240 || Tmp_537 == -1072693241 || Tmp_537 == 0 || Tmp_537 == -1073737728 || Tmp_537 == -1072693242 || Tmp_537 == -1073729536;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBD_ValidateConfigurationDescriptorInternal"} USBD_ValidateConfigurationDescriptorInternal(actual_ConfigDesc: int, actual_BufferLength: int, actual_Level: int, actual_Offset: int, actual_Tag: int) returns (Tmp_537: int)
{
  var {:pointer} Tmp_538: int;
  var {:pointer} assocDesc: int;
  var {:pointer} interfaceArray: int;
  var {:pointer} commonDesc: int;
  var {:pointer} interfaceDesc_1: int;
  var {:pointer} endpointDesc: int;
  var {:scalar} Tmp_540: int;
  var {:scalar} Tmp_541: int;
  var {:pointer} Tmp_542: int;
  var {:pointer} sdv_202: int;
  var {:pointer} Tmp_543: int;
  var {:scalar} Tmp_544: int;
  var {:scalar} Tmp_545: int;
  var {:scalar} Tmp_546: int;
  var {:scalar} firstInterface: int;
  var {:scalar} Tmp_547: int;
  var {:pointer} interfaceData: int;
  var {:scalar} Tmp_548: int;
  var {:pointer} sdv_203: int;
  var {:pointer} Tmp_549: int;
  var {:pointer} end: int;
  var {:scalar} minimumSize: int;
  var {:pointer} index_2: int;
  var {:scalar} Tmp_550: int;
  var {:pointer} Tmp_551: int;
  var {:scalar} status_33: int;
  var {:scalar} endpointAddress: int;
  var {:pointer} offset_2: int;
  var {:scalar} altSetting: int;
  var {:scalar} interfaceNumber_1: int;
  var {:scalar} interfacesFound: int;
  var {:pointer} ConfigDesc: int;
  var {:scalar} BufferLength: int;
  var {:scalar} Level: int;
  var {:pointer} Offset: int;
  var {:scalar} Tag: int;

  anon0:
    ConfigDesc := actual_ConfigDesc;
    BufferLength := actual_BufferLength;
    Level := actual_Level;
    Offset := actual_Offset;
    Tag := actual_Tag;
    call {:si_unique_call 606} Tmp_538 := __HAVOC_malloc(1024);
    call {:si_unique_call 607} Tmp_542 := __HAVOC_malloc(1024);
    call {:si_unique_call 608} Tmp_543 := __HAVOC_malloc(1024);
    call {:si_unique_call 609} Tmp_549 := __HAVOC_malloc(1024);
    call {:si_unique_call 610} Tmp_551 := __HAVOC_malloc(1024);
    status_33 := 0;
    interfacesFound := 0;
    interfaceData := 0;
    firstInterface := 1;
    interfaceArray := 0;
    minimumSize := 0;
    index_2 := 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} Tag != 0;
    goto L21;

  L21:
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} ConfigDesc != 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} 9 <= BufferLength;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} Offset != 0;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} 9 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(ConfigDesc)];
    status_33 := -1072693247;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    index_2 := bLength__USB_COMMON_DESCRIPTOR(ConfigDesc);
    goto L30;

  L30:
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} interfaceData != 0;
    call {:si_unique_call 611} sdv_ExFreePool(0);
    goto L31;

  L31:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} interfaceArray != 0;
    call {:si_unique_call 612} sdv_ExFreePool(0);
    goto L35;

  L35:
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} status_33 >= 0;
    assume {:nonnull} Offset != 0;
    assume Offset > 0;
    goto L41;

  L41:
    Tmp_537 := status_33;
    goto L1;

  L1:
    return;

  anon102_Then:
    assume {:partition} 0 > status_33;
    assume {:nonnull} Offset != 0;
    assume Offset > 0;
    goto L41;

  anon101_Then:
    assume {:partition} interfaceArray == 0;
    goto L35;

  anon100_Then:
    assume {:partition} interfaceData == 0;
    goto L31;

  anon98_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(ConfigDesc)] >= 9;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(ConfigDesc)] != 2;
    status_33 := -1072693246;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    index_2 := bDescriptorType__USB_COMMON_DESCRIPTOR(ConfigDesc);
    goto L30;

  anon99_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(ConfigDesc)] == 2;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    havoc minimumSize;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDesc)] > BufferLength;
    goto L48;

  L48:
    status_33 := -1072693242;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    index_2 := wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDesc);
    goto L30;

  anon130_Then:
    assume {:partition} BufferLength >= Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDesc)];
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} minimumSize <= Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDesc)];
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} 1 < Level;
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    call {:si_unique_call 613} sdv_202 := ExAllocatePoolWithTag(512, 516, Tag);
    interfaceData := sdv_202;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} interfaceData != 0;
    call {:si_unique_call 614} sdv_203 := ExAllocatePoolWithTag(512, 256, Tag);
    interfaceArray := sdv_203;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} interfaceArray != 0;
    call {:si_unique_call 615} sdv_RtlZeroMemory(0, 516);
    call {:si_unique_call 616} sdv_RtlZeroMemory(0, 256);
    offset_2 := ConfigDesc;
    end := ConfigDesc;
    goto L74;

  L74:
    call {:si_unique_call 617} Tmp_538, assocDesc, commonDesc, interfaceDesc_1, endpointDesc, Tmp_540, Tmp_541, Tmp_542, Tmp_543, Tmp_544, Tmp_545, Tmp_546, firstInterface, Tmp_547, Tmp_548, Tmp_549, Tmp_550, Tmp_551, endpointAddress, altSetting, interfaceNumber_1, interfacesFound := USBD_ValidateConfigurationDescriptorInternal_loop_L74(Tmp_538, assocDesc, interfaceArray, commonDesc, interfaceDesc_1, endpointDesc, Tmp_540, Tmp_541, Tmp_542, Tmp_543, Tmp_544, Tmp_545, Tmp_546, firstInterface, Tmp_547, interfaceData, Tmp_548, Tmp_549, end, Tmp_550, Tmp_551, endpointAddress, offset_2, altSetting, interfaceNumber_1, interfacesFound, ConfigDesc, Level);
    goto L74_last;

  L74_last:
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} end > offset_2;
    commonDesc := offset_2;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:partition} 2 > end;
    status_33 := -1072693248;
    index_2 := offset_2;
    goto L30;

  anon133_Then:
    assume {:partition} end >= 2;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} offset_2 > end;
    status_33 := -1072693247;
    assume {:nonnull} commonDesc != 0;
    assume commonDesc > 0;
    index_2 := bLength__USB_COMMON_DESCRIPTOR(commonDesc);
    goto L30;

  anon108_Then:
    assume {:partition} end >= offset_2;
    assume {:nonnull} commonDesc != 0;
    assume commonDesc > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc)] != 4;
    assume {:nonnull} commonDesc != 0;
    assume commonDesc > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc)] != 5;
    assume {:nonnull} commonDesc != 0;
    assume commonDesc > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc)] != 11;
    goto L105;

  L105:
    assume {:nonnull} commonDesc != 0;
    assume commonDesc > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc)] != 0;
    goto anon113_Else_dummy;

  anon113_Else_dummy:
    assume false;
    return;

  anon113_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc)] == 0;
    goto L75;

  L75:
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    status_33 := -1072693241;
    index_2 := ConfigDesc;
    goto L30;

  anon107_Then:
    goto L30;

  anon127_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc)] == 11;
    assocDesc := offset_2;
    assume {:nonnull} assocDesc != 0;
    assume assocDesc > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(assocDesc)] != 8;
    goto L99;

  L99:
    status_33 := -1072693243;
    index_2 := assocDesc;
    goto L30;

  anon141_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(assocDesc)] == 8;
    assume {:nonnull} assocDesc != 0;
    assume assocDesc > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} ConfigDesc != 0;
    assume ConfigDesc > 0;
    assume {:nonnull} assocDesc != 0;
    assume assocDesc > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} assocDesc != 0;
    assume assocDesc > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto L105;

  anon112_Then:
    goto L99;

  anon111_Then:
    goto L99;

  anon110_Then:
    goto L99;

  anon128_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc)] == 5;
    endpointDesc := offset_2;
    assume {:nonnull} endpointDesc != 0;
    assume endpointDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} 7 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(endpointDesc)];
    status_33 := -1072693247;
    assume {:nonnull} endpointDesc != 0;
    assume endpointDesc > 0;
    index_2 := bLength__USB_COMMON_DESCRIPTOR(endpointDesc);
    goto L30;

  anon138_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(endpointDesc)] >= 7;
    assume {:nonnull} endpointDesc != 0;
    assume endpointDesc > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(endpointDesc)] != 7;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} Level >= 3;
    status_33 := -1072693247;
    assume {:nonnull} endpointDesc != 0;
    assume endpointDesc > 0;
    index_2 := bLength__USB_COMMON_DESCRIPTOR(endpointDesc);
    goto L30;

  anon115_Then:
    assume {:partition} 3 > Level;
    goto L113;

  L113:
    assume {:nonnull} endpointDesc != 0;
    assume endpointDesc > 0;
    endpointAddress := Mem_T.VOID[bEndpointAddress__USB_ENDPOINT_DESCRIPTOR(endpointDesc)];
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} firstInterface != 0;
    status_33 := -1072693244;
    index_2 := endpointDesc;
    goto L30;

  anon139_Then:
    assume {:partition} firstInterface == 0;
    Tmp_546 := endpointAddress;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    havoc Tmp_549;
    assume {:nonnull} Tmp_549 != 0;
    assume Tmp_549 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} Mem_T.VOID[Tmp_549 + Tmp_546 * 4] != 0;
    status_33 := -1072693239;
    assume {:nonnull} endpointDesc != 0;
    assume endpointDesc > 0;
    index_2 := bEndpointAddress__USB_ENDPOINT_DESCRIPTOR(endpointDesc);
    goto L30;

  anon140_Then:
    assume {:partition} Mem_T.VOID[Tmp_549 + Tmp_546 * 4] == 0;
    Tmp_547 := endpointAddress;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    havoc Tmp_543;
    assume {:nonnull} Tmp_543 != 0;
    assume Tmp_543 > 0;
    Mem_T.VOID[Tmp_543 + Tmp_547 * 4] := 1;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    goto L105;

  anon114_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(endpointDesc)] == 7;
    goto L113;

  anon109_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc)] == 4;
    interfaceDesc_1 := offset_2;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:partition} 9 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(interfaceDesc_1)];
    status_33 := -1072693247;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bLength__USB_COMMON_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon134_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(interfaceDesc_1)] >= 9;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(interfaceDesc_1)] != 9;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} Level >= 3;
    status_33 := -1072693247;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bLength__USB_COMMON_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon117_Then:
    assume {:partition} 3 > Level;
    goto L134;

  L134:
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    interfaceNumber_1 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1)];
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    altSetting := Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1)];
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} firstInterface != 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} altSetting != 0;
    status_33 := -1072693245;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon119_Then:
    assume {:partition} altSetting == 0;
    firstInterface := 0;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    Tmp_545 := altSetting;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    havoc Tmp_542;
    assume {:nonnull} Tmp_542 != 0;
    assume Tmp_542 > 0;
    Mem_T.VOID[Tmp_542 + Tmp_545 * 4] := 1;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    Tmp_550 := interfaceNumber_1;
    assume {:nonnull} interfaceArray != 0;
    assume interfaceArray > 0;
    Mem_T.VOID[interfaceArray + Tmp_550 * 4] := 1;
    interfacesFound := interfacesFound + 1;
    goto L105;

  anon135_Then:
    assume {:partition} firstInterface == 0;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    Tmp_544 := altSetting;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    havoc Tmp_538;
    assume {:nonnull} Tmp_538 != 0;
    assume Tmp_538 > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} Mem_T.VOID[Tmp_538 + Tmp_544 * 4] == 1;
    status_33 := -1072693245;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon136_Then:
    assume {:partition} Mem_T.VOID[Tmp_538 + Tmp_544 * 4] != 1;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} Level >= 3;
    status_33 := -1072693245;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon122_Then:
    assume {:partition} 3 > Level;
    goto L161;

  L161:
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} Level >= 3;
    status_33 := -1072693240;
    index_2 := interfaceDesc_1;
    goto L30;

  anon123_Then:
    assume {:partition} 3 > Level;
    goto L166;

  L166:
    call {:si_unique_call 618} sdv_RtlZeroMemory(0, 256);
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    Tmp_548 := altSetting;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    havoc Tmp_551;
    assume {:nonnull} Tmp_551 != 0;
    assume Tmp_551 > 0;
    Mem_T.VOID[Tmp_551 + Tmp_548 * 4] := 1;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    goto L105;

  anon121_Then:
    goto L166;

  anon120_Then:
    goto L161;

  anon118_Then:
    Tmp_541 := interfaceNumber_1;
    assume {:nonnull} interfaceArray != 0;
    assume interfaceArray > 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} Mem_T.VOID[interfaceArray + Tmp_541 * 4] == 1;
    status_33 := -1072693245;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon137_Then:
    assume {:partition} Mem_T.VOID[interfaceArray + Tmp_541 * 4] != 1;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} Level >= 3;
    status_33 := -1072693245;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon126_Then:
    assume {:partition} 3 > Level;
    goto L181;

  L181:
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} altSetting != 0;
    status_33 := -1072693245;
    assume {:nonnull} interfaceDesc_1 != 0;
    assume interfaceDesc_1 > 0;
    index_2 := bAlternateSetting__USB_INTERFACE_DESCRIPTOR(interfaceDesc_1);
    goto L30;

  anon125_Then:
    assume {:partition} altSetting == 0;
    Tmp_540 := interfaceNumber_1;
    assume {:nonnull} interfaceArray != 0;
    assume interfaceArray > 0;
    Mem_T.VOID[interfaceArray + Tmp_540 * 4] := 1;
    assume {:nonnull} interfaceData != 0;
    assume interfaceData > 0;
    interfacesFound := interfacesFound + 1;
    call {:si_unique_call 619} sdv_RtlZeroMemory(0, 256);
    goto L161;

  anon124_Then:
    goto L181;

  anon116_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(interfaceDesc_1)] == 9;
    goto L134;

  anon106_Then:
    assume {:partition} offset_2 >= end;
    goto L75;

  anon132_Then:
    assume {:partition} interfaceArray == 0;
    index_2 := ConfigDesc;
    status_33 := -1073737728;
    goto L30;

  anon131_Then:
    assume {:partition} interfaceData == 0;
    status_33 := -1073737728;
    index_2 := ConfigDesc;
    goto L30;

  anon105_Then:
    goto L30;

  anon104_Then:
    assume {:partition} Level <= 1;
    goto L30;

  anon103_Then:
    assume {:partition} Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDesc)] < minimumSize;
    goto L48;

  anon97_Then:
    assume {:partition} Offset == 0;
    goto L22;

  L22:
    Tmp_537 := -1073729536;
    goto L1;

  anon96_Then:
    assume {:partition} BufferLength < 9;
    goto L22;

  anon95_Then:
    assume {:partition} ConfigDesc == 0;
    goto L22;

  anon129_Then:
    assume {:partition} Tag == 0;
    Tag := -832408747;
    goto L21;
}



procedure {:origName "ValidateUSBInterfaceAssociationDescriptor"} ValidateUSBInterfaceAssociationDescriptor(actual_AssocDescriptor: int, actual_parentFdoExt_52: int) returns (Tmp_552: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_552 == 0 || Tmp_552 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ValidateUSBInterfaceAssociationDescriptor"} ValidateUSBInterfaceAssociationDescriptor(actual_AssocDescriptor: int, actual_parentFdoExt_52: int) returns (Tmp_552: int)
{
  var {:scalar} i_10: int;
  var {:scalar} Tmp_553: int;
  var {:pointer} Tmp_554: int;
  var {:scalar} Tmp_555: int;
  var {:scalar} FirstInterface: int;
  var {:pointer} ParentConfigDesc: int;
  var {:pointer} Tmp_556: int;
  var {:scalar} InterfaceCount: int;
  var {:scalar} InterfacesFound: int;
  var {:pointer} Tmp_557: int;
  var {:scalar} NumInterfaces: int;
  var {:pointer} Tmp_558: int;
  var {:scalar} Tmp_560: int;
  var {:pointer} Tmp_561: int;
  var {:scalar} Success: int;
  var {:pointer} AssocDescriptor: int;
  var {:pointer} parentFdoExt_52: int;
  var vslice_dummy_var_215: int;

  anon0:
    AssocDescriptor := actual_AssocDescriptor;
    parentFdoExt_52 := actual_parentFdoExt_52;
    Success := 0;
    assume {:nonnull} AssocDescriptor != 0;
    assume AssocDescriptor > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(AssocDescriptor)] != 8;
    assume {:nonnull} AssocDescriptor != 0;
    assume AssocDescriptor > 0;
    Tmp_555 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(AssocDescriptor)];
    havoc Tmp_557;
    assume {:nonnull} parentFdoExt_52 != 0;
    assume parentFdoExt_52 > 0;
    havoc vslice_dummy_var_215;
    call {:si_unique_call 620} WPP_RECORDER_SF_d(vslice_dummy_var_215, 2, 8, 38, Tmp_557, Tmp_555);
    Tmp_552 := 0;
    goto L1;

  L1:
    return;

  anon22_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(AssocDescriptor)] == 8;
    assume {:nonnull} parentFdoExt_52 != 0;
    assume parentFdoExt_52 > 0;
    havoc ParentConfigDesc;
    assume {:nonnull} ParentConfigDesc != 0;
    assume ParentConfigDesc > 0;
    havoc NumInterfaces;
    assume {:nonnull} AssocDescriptor != 0;
    assume AssocDescriptor > 0;
    havoc FirstInterface;
    assume {:nonnull} AssocDescriptor != 0;
    assume AssocDescriptor > 0;
    havoc InterfaceCount;
    i_10 := 0;
    goto L28;

  L28:
    call {:si_unique_call 621} i_10, Tmp_553, Tmp_554, Tmp_558 := ValidateUSBInterfaceAssociationDescriptor_loop_L28(i_10, Tmp_553, Tmp_554, FirstInterface, NumInterfaces, Tmp_558, parentFdoExt_52);
    goto L28_last;

  L28_last:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} NumInterfaces > i_10;
    Tmp_553 := i_10;
    assume {:nonnull} parentFdoExt_52 != 0;
    assume parentFdoExt_52 > 0;
    havoc Tmp_558;
    assume {:nonnull} Tmp_558 != 0;
    assume Tmp_558 > 0;
    havoc Tmp_554;
    assume {:nonnull} Tmp_554 != 0;
    assume Tmp_554 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_554)] == FirstInterface;
    Success := 1;
    goto L29;

  L29:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Success != 0;
    InterfacesFound := 1;
    i_10 := i_10 + 1;
    goto L37;

  L37:
    call {:si_unique_call 622} i_10, Tmp_556, InterfacesFound, Tmp_560, Tmp_561 := ValidateUSBInterfaceAssociationDescriptor_loop_L37(i_10, FirstInterface, Tmp_556, InterfaceCount, InterfacesFound, NumInterfaces, Tmp_560, Tmp_561, parentFdoExt_52);
    goto L37_last;

  L37_last:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} InterfaceCount > InterfacesFound;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} NumInterfaces > i_10;
    Tmp_560 := i_10;
    assume {:nonnull} parentFdoExt_52 != 0;
    assume parentFdoExt_52 > 0;
    havoc Tmp_556;
    assume {:nonnull} Tmp_556 != 0;
    assume Tmp_556 > 0;
    havoc Tmp_561;
    assume {:nonnull} Tmp_561 != 0;
    assume Tmp_561 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_561)] == FirstInterface + InterfacesFound;
    InterfacesFound := InterfacesFound + 1;
    i_10 := i_10 + 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_561)] != FirstInterface + InterfacesFound;
    goto L38;

  L38:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} InterfacesFound != InterfaceCount;
    Tmp_552 := 0;
    goto L1;

  anon20_Then:
    assume {:partition} InterfacesFound == InterfaceCount;
    Tmp_552 := 1;
    goto L1;

  anon21_Then:
    assume {:partition} i_10 >= NumInterfaces;
    goto L38;

  anon19_Then:
    assume {:partition} InterfacesFound >= InterfaceCount;
    goto L38;

  anon18_Then:
    assume {:partition} Success == 0;
    Tmp_552 := 0;
    goto L1;

  anon23_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_554)] != FirstInterface;
    i_10 := i_10 + 1;
    goto anon23_Then_dummy;

  anon23_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} i_10 >= NumInterfaces;
    goto L29;
}



procedure {:origName "UsbcCompleteIrp"} UsbcCompleteIrp(actual_parentFdoExt_53: int, actual_status_34: int, actual_irp_26: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcCompleteIrp"} UsbcCompleteIrp(actual_parentFdoExt_53: int, actual_status_34: int, actual_irp_26: int)
{
  var {:pointer} parentFdoExt_53: int;
  var {:scalar} status_34: int;
  var {:pointer} irp_26: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;

  anon0:
    call {:si_unique_call 623} vslice_dummy_var_68 := __HAVOC_malloc(4);
    parentFdoExt_53 := actual_parentFdoExt_53;
    status_34 := actual_status_34;
    irp_26 := actual_irp_26;
    assume {:nonnull} irp_26 != 0;
    assume irp_26 > 0;
    call {:si_unique_call 624} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 625} UsbcReleaseRemoveLock(parentFdoExt_53, irp_26);
    assume {:nonnull} parentFdoExt_53 != 0;
    assume parentFdoExt_53 > 0;
    call {:si_unique_call 626} vslice_dummy_var_69 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_53), irp_26);
    return;
}



procedure {:origName "WStrLen"} WStrLen(actual_str: int) returns (Tmp_564: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WStrLen"} WStrLen(actual_str: int) returns (Tmp_564: int)
{
  var {:scalar} result: int;
  var {:pointer} str: int;

  anon0:
    str := actual_str;
    result := 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} str != 0;
    goto L7;

  L7:
    call {:si_unique_call 627} result := WStrLen_loop_L7(result, str);
    goto L7_last;

  L7_last:
    assume {:nonnull} str != 0;
    assume str > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.VOID[str] != 0;
    result := result + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Mem_T.VOID[str] == 0;
    Tmp_564 := result;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} str == 0;
    Tmp_564 := 0;
    goto L1;
}



procedure {:origName "CleanFunctionDescriptorArray"} CleanFunctionDescriptorArray(actual_functionDescriptorArray: int, actual_bufferLength_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CleanFunctionDescriptorArray"} CleanFunctionDescriptorArray(actual_functionDescriptorArray: int, actual_bufferLength_2: int)
{
  var {:scalar} i_11: int;
  var {:scalar} Tmp_566: int;
  var {:scalar} Tmp_567: int;
  var {:scalar} Tmp_568: int;
  var {:scalar} Tmp_570: int;
  var {:scalar} Tmp_571: int;
  var {:scalar} numFunctions_3: int;
  var {:scalar} Tmp_573: int;
  var {:scalar} Tmp_577: int;
  var {:scalar} Tmp_578: int;
  var {:pointer} functionDescriptorArray: int;
  var {:scalar} bufferLength_2: int;
  var vslice_dummy_var_70: int;

  anon0:
    call {:si_unique_call 628} vslice_dummy_var_70 := __HAVOC_malloc(4);
    functionDescriptorArray := actual_functionDescriptorArray;
    bufferLength_2 := actual_bufferLength_2;
    i_11 := 0;
    numFunctions_3 := 0;
    numFunctions_3 := INTDIV(bufferLength_2, 40);
    i_11 := 0;
    goto L9;

  L9:
    call {:si_unique_call 629} i_11, Tmp_566, Tmp_567, Tmp_568, Tmp_570, Tmp_571, Tmp_573, Tmp_577, Tmp_578 := CleanFunctionDescriptorArray_loop_L9(i_11, Tmp_566, Tmp_567, Tmp_568, Tmp_570, Tmp_571, numFunctions_3, Tmp_573, Tmp_577, Tmp_578, functionDescriptorArray);
    goto L9_last;

  L9_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} numFunctions_3 > i_11;
    Tmp_578 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_571 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    call {:si_unique_call 630} sdv_ExFreePool(0);
    goto L14;

  L14:
    Tmp_573 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    Tmp_577 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    call {:si_unique_call 631} sdv_ExFreePool(0);
    goto L19;

  L19:
    Tmp_566 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    Tmp_567 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    call {:si_unique_call 632} sdv_ExFreePool(0);
    goto L24;

  L24:
    Tmp_570 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_568 := i_11;
    assume {:nonnull} functionDescriptorArray != 0;
    assume functionDescriptorArray > 0;
    call {:si_unique_call 633} sdv_ExFreePool(0);
    goto L29;

  L29:
    i_11 := i_11 + 1;
    goto L29_dummy;

  L29_dummy:
    assume false;
    return;

  anon15_Then:
    goto L29;

  anon14_Then:
    goto L24;

  anon13_Then:
    goto L19;

  anon12_Then:
    goto L14;

  anon11_Then:
    assume {:partition} i_11 >= numFunctions_3;
    call {:si_unique_call 634} sdv_ExFreePool(0);
    return;
}



procedure {:origName "UsbcReferencePdo"} UsbcReferencePdo(actual_functionPdoExt_10: int) returns (Tmp_580: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_580 == -1073741738 || Tmp_580 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcReferencePdo"} UsbcReferencePdo(actual_functionPdoExt_10: int) returns (Tmp_580: int)
{
  var {:pointer} Tmp_581: int;
  var {:scalar} ntStatus_12: int;
  var {:pointer} functionPdoExt_10: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;

  anon0:
    functionPdoExt_10 := actual_functionPdoExt_10;
    ntStatus_12 := 0;
    call {:si_unique_call 635} Tmp_581 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_581 != 0;
    assume Tmp_581 > 0;
    assume {:nonnull} functionPdoExt_10 != 0;
    assume functionPdoExt_10 > 0;
    havoc vslice_dummy_var_216;
    Mem_T.VOID[Tmp_581] := vslice_dummy_var_216;
    call {:si_unique_call 636} vslice_dummy_var_71 := sdv_InterlockedIncrement(Tmp_581);
    assume {:nonnull} Tmp_581 != 0;
    assume Tmp_581 > 0;
    assume {:nonnull} functionPdoExt_10 != 0;
    assume functionPdoExt_10 > 0;
    assume {:nonnull} functionPdoExt_10 != 0;
    assume functionPdoExt_10 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 637} Tmp_581 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_581 != 0;
    assume Tmp_581 > 0;
    assume {:nonnull} functionPdoExt_10 != 0;
    assume functionPdoExt_10 > 0;
    havoc vslice_dummy_var_217;
    Mem_T.VOID[Tmp_581] := vslice_dummy_var_217;
    call {:si_unique_call 638} vslice_dummy_var_72 := sdv_InterlockedDecrement(Tmp_581);
    assume {:nonnull} Tmp_581 != 0;
    assume Tmp_581 > 0;
    assume {:nonnull} functionPdoExt_10 != 0;
    assume functionPdoExt_10 > 0;
    ntStatus_12 := -1073741738;
    goto L9;

  L9:
    Tmp_580 := ntStatus_12;
    return;

  anon3_Then:
    goto L9;
}



procedure {:origName "CallDriverSyncCompletion"} CallDriverSyncCompletion(actual_devObjOrNULL: int, actual_irp_27: int, actual_Context: int) returns (Tmp_582: int);
  free ensures {:va_keep} Tmp_582 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallDriverSyncCompletion"} CallDriverSyncCompletion(actual_devObjOrNULL: int, actual_irp_27: int, actual_Context: int) returns (Tmp_582: int)
{
  var {:pointer} event_4: int;
  var {:pointer} Context: int;
  var vslice_dummy_var_73: int;

  anon0:
    Context := actual_Context;
    event_4 := Context;
    call {:si_unique_call 639} vslice_dummy_var_73 := KeSetEvent(event_4, 0, 0);
    Tmp_582 := -1073741802;
    return;
}



procedure {:origName "USBD_ValidateExtendedPropertyDescriptor"} USBD_ValidateExtendedPropertyDescriptor(actual_PropertyDescriptor: int, actual_Length: int) returns (Tmp_584: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_584 == -1073741811 || Tmp_584 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBD_ValidateExtendedPropertyDescriptor"} USBD_ValidateExtendedPropertyDescriptor(actual_PropertyDescriptor: int, actual_Length: int) returns (Tmp_584: int)
{
  var {:scalar} propertySize: int;
  var {:pointer} customProperty: int;
  var {:pointer} end_1: int;
  var {:scalar} minimumCustomPropertyLength: int;
  var {:scalar} propertyNameLength: int;
  var {:scalar} Tmp_585: int;
  var {:scalar} propertyDataLength: int;
  var {:pointer} Tmp_586: int;
  var {:scalar} status_35: int;
  var {:pointer} Tmp_588: int;
  var {:pointer} offset_3: int;
  var {:scalar} maximumDescriptorLength: int;
  var {:scalar} propertyCount: int;
  var {:pointer} customPropertyData: int;
  var {:pointer} PropertyDescriptor: int;
  var {:scalar} Length: int;

  anon0:
    PropertyDescriptor := actual_PropertyDescriptor;
    Length := actual_Length;
    call {:si_unique_call 640} Tmp_586 := __HAVOC_malloc(4);
    call {:si_unique_call 641} Tmp_588 := __HAVOC_malloc(4);
    status_35 := 0;
    propertyCount := 0;
    offset_3 := 0;
    end_1 := 0;
    minimumCustomPropertyLength := 14;
    maximumDescriptorLength := 4096;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} 10 > Length;
    goto L17;

  L17:
    status_35 := -1073741811;
    goto L19;

  L19:
    Tmp_584 := status_35;
    return;

  anon57_Then:
    assume {:partition} Length >= 10;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} PropertyDescriptor != 0;
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto L22;

  L22:
    status_35 := -1073741811;
    goto L19;

  anon44_Then:
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    status_35 := -1073741811;
    goto L19;

  anon47_Then:
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    offset_3 := CustomSection__MS_EXT_PROP_DESC(PropertyDescriptor);
    end_1 := PropertyDescriptor;
    goto L32;

  L32:
    call {:si_unique_call 642} propertySize, customProperty, propertyNameLength, Tmp_585, propertyDataLength, Tmp_586, Tmp_588, propertyCount, customPropertyData := USBD_ValidateExtendedPropertyDescriptor_loop_L32(propertySize, customProperty, end_1, minimumCustomPropertyLength, propertyNameLength, Tmp_585, propertyDataLength, Tmp_586, Tmp_588, offset_3, propertyCount, customPropertyData, PropertyDescriptor);
    goto L32_last;

  L32_last:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} end_1 > offset_3;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} offset_3 > end_1;
    status_35 := -1073741811;
    goto L19;

  anon51_Then:
    assume {:partition} end_1 >= offset_3;
    customProperty := offset_3;
    assume {:nonnull} customProperty != 0;
    assume customProperty > 0;
    havoc propertySize;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} offset_3 > end_1;
    goto L46;

  L46:
    status_35 := -1073741811;
    goto L19;

  anon58_Then:
    assume {:partition} end_1 >= offset_3;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} minimumCustomPropertyLength <= propertySize;
    assume {:nonnull} customProperty != 0;
    assume customProperty > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto L50;

  L50:
    status_35 := -1073741811;
    goto L19;

  anon53_Then:
    assume {:nonnull} customProperty != 0;
    assume customProperty > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} customProperty != 0;
    assume customProperty > 0;
    havoc propertyNameLength;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} propertyNameLength + minimumCustomPropertyLength > propertySize;
    goto L55;

  L55:
    status_35 := -1073741811;
    goto L19;

  anon59_Then:
    assume {:partition} propertySize >= propertyNameLength + minimumCustomPropertyLength;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} propertyNameLength != 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} INTMOD(propertyNameLength, 2) == 0;
    assume {:nonnull} customProperty != 0;
    assume customProperty > 0;
    havoc Tmp_588;
    assume {:nonnull} Tmp_588 != 0;
    assume Tmp_588 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Mem_T.VOID[Tmp_588] != 0;
    Tmp_585 := INTDIV(propertyNameLength, 2) - 1;
    assume {:nonnull} customProperty != 0;
    assume customProperty > 0;
    havoc Tmp_586;
    assume {:nonnull} Tmp_586 != 0;
    assume Tmp_586 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.VOID[Tmp_586 + Tmp_585 * 4] == 0;
    customPropertyData := offset_3;
    assume {:nonnull} customPropertyData != 0;
    assume customPropertyData > 0;
    havoc propertyDataLength;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} propertyNameLength + propertyDataLength + minimumCustomPropertyLength > propertySize;
    status_35 := -1073741811;
    goto L19;

  anon62_Then:
    assume {:partition} propertySize >= propertyNameLength + propertyDataLength + minimumCustomPropertyLength;
    propertyCount := propertyCount + 1;
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    assume false;
    return;

  anon63_Then:
    goto L33;

  L33:
    assume {:nonnull} PropertyDescriptor != 0;
    assume PropertyDescriptor > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    status_35 := -1073741811;
    goto L19;

  anon50_Then:
    goto L19;

  anon61_Then:
    assume {:partition} Mem_T.VOID[Tmp_586 + Tmp_585 * 4] != 0;
    goto L59;

  L59:
    status_35 := -1073741811;
    goto L19;

  anon60_Then:
    assume {:partition} Mem_T.VOID[Tmp_588] == 0;
    goto L59;

  anon56_Then:
    assume {:partition} INTMOD(propertyNameLength, 2) != 0;
    goto L55;

  anon55_Then:
    assume {:partition} propertyNameLength == 0;
    goto L55;

  anon54_Then:
    goto L50;

  anon52_Then:
    assume {:partition} propertySize < minimumCustomPropertyLength;
    goto L46;

  anon49_Then:
    assume {:partition} offset_3 >= end_1;
    goto L33;

  anon48_Then:
    status_35 := 0;
    goto L19;

  anon46_Then:
    goto L22;

  anon45_Then:
    goto L22;

  anon43_Then:
    assume {:partition} PropertyDescriptor == 0;
    goto L17;
}



procedure {:origName "WaitForSignal"} WaitForSignal(actual_Event: int, actual_ReasonForWaiting: int, actual_DebugLog: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WaitForSignal"} WaitForSignal(actual_Event: int, actual_ReasonForWaiting: int, actual_DebugLog: int)
{
  var {:scalar} timeOut: int;
  var {:pointer} Tmp_590: int;
  var {:pointer} sdv_208: int;
  var {:scalar} status_36: int;
  var {:pointer} ReasonForWaiting: int;
  var {:pointer} DebugLog: int;
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 643} timeOut := __HAVOC_malloc(20);
    call {:si_unique_call 644} vslice_dummy_var_74 := __HAVOC_malloc(4);
    ReasonForWaiting := actual_ReasonForWaiting;
    DebugLog := actual_DebugLog;
    call {:si_unique_call 645} sdv_do_paged_code_check();
    assume {:nonnull} timeOut != 0;
    assume timeOut > 0;
    goto L9;

  L9:
    call {:si_unique_call 646} Tmp_590, sdv_208, status_36 := WaitForSignal_loop_L9(timeOut, Tmp_590, sdv_208, status_36, ReasonForWaiting, DebugLog);
    goto L9_last;

  L9_last:
    call {:si_unique_call 649} status_36 := KeWaitForSingleObject(0, 0, 0, 0, timeOut);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_36 == 258;
    call {:si_unique_call 647} sdv_208 := PsGetCurrentThread();
    havoc Tmp_590;
    call {:si_unique_call 648} WPP_RECORDER_SF_qs(DebugLog, 3, 1, 47, Tmp_590, sdv_208, ReasonForWaiting);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} status_36 != 258;
    return;
}



procedure {:origName "UsbcDecrementPendingCount"} UsbcDecrementPendingCount(actual_parentFdoExt_54: int, actual_object_1: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcDecrementPendingCount"} UsbcDecrementPendingCount(actual_parentFdoExt_54: int, actual_object_1: int)
{
  var {:pointer} Tmp_592: int;
  var {:scalar} queueHandle_1: int;
  var {:pointer} lockEntry_1: int;
  var {:pointer} listEntry_2: int;
  var {:pointer} sdv_209: int;
  var {:scalar} sdv_210: int;
  var {:scalar} value_1: int;
  var {:pointer} parentFdoExt_54: int;
  var {:pointer} object_1: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_218: int;

  anon0:
    call {:si_unique_call 650} queueHandle_1 := __HAVOC_malloc(12);
    call {:si_unique_call 651} vslice_dummy_var_75 := __HAVOC_malloc(4);
    parentFdoExt_54 := actual_parentFdoExt_54;
    object_1 := actual_object_1;
    lockEntry_1 := 0;
    assume {:nonnull} queueHandle_1 != 0;
    assume queueHandle_1 > 0;
    assume {:nonnull} queueHandle_1 != 0;
    assume queueHandle_1 > 0;
    assume {:nonnull} queueHandle_1 != 0;
    assume queueHandle_1 > 0;
    listEntry_2 := 0;
    value_1 := 1;
    call {:si_unique_call 652} KeAcquireInStackQueuedSpinLock(0, 0);
    assume {:nonnull} parentFdoExt_54 != 0;
    assume parentFdoExt_54 > 0;
    havoc listEntry_2;
    goto L17;

  L17:
    call {:si_unique_call 653} lockEntry_1, listEntry_2, sdv_209 := UsbcDecrementPendingCount_loop_L17(lockEntry_1, listEntry_2, sdv_209, object_1);
    goto L17_last;

  L17_last:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 654} sdv_209 := sdv_containing_record(listEntry_2, 4);
    lockEntry_1 := sdv_209;
    assume {:nonnull} lockEntry_1 != 0;
    assume lockEntry_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 655} Tmp_592 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_592 != 0;
    assume Tmp_592 > 0;
    assume {:nonnull} parentFdoExt_54 != 0;
    assume parentFdoExt_54 > 0;
    havoc vslice_dummy_var_218;
    Mem_T.VOID[Tmp_592] := vslice_dummy_var_218;
    call {:si_unique_call 656} sdv_210 := sdv_InterlockedDecrement(Tmp_592);
    assume {:nonnull} Tmp_592 != 0;
    assume Tmp_592 > 0;
    assume {:nonnull} parentFdoExt_54 != 0;
    assume parentFdoExt_54 > 0;
    value_1 := sdv_210;
    call {:si_unique_call 657} vslice_dummy_var_77 := sdv_RemoveEntryList(0);
    call {:si_unique_call 658} ExFreePoolWithTag(0, -1016958123);
    goto L18;

  L18:
    call {:si_unique_call 659} KeReleaseInStackQueuedSpinLock(0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} value_1 == 0;
    assume {:nonnull} parentFdoExt_54 != 0;
    assume parentFdoExt_54 > 0;
    call {:si_unique_call 660} vslice_dummy_var_76 := KeSetEvent(stopEvent_PARENT_FDO_EXTENSION(parentFdoExt_54), 0, 0);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} value_1 != 0;
    goto L1;

  anon9_Then:
    assume {:nonnull} listEntry_2 != 0;
    assume listEntry_2 > 0;
    havoc listEntry_2;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    assume false;
    return;

  anon7_Then:
    goto L18;
}



procedure {:origName "SetPdoRegistryParameter"} SetPdoRegistryParameter(actual_PhysicalDeviceObject_2: int, actual_KeyName: int, actual_Data_1: int, actual_DataLength_1: int, actual_KeyType: int, actual_DevInstKeyType: int) returns (Tmp_594: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_594 == -1073741811 || Tmp_594 == -1073741808 || Tmp_594 == -1073741823 || Tmp_594 == 0 || Tmp_594 == -1073741790 || Tmp_594 == -1073741816;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetPdoRegistryParameter"} SetPdoRegistryParameter(actual_PhysicalDeviceObject_2: int, actual_KeyName: int, actual_Data_1: int, actual_DataLength_1: int, actual_KeyType: int, actual_DevInstKeyType: int) returns (Tmp_594: int)
{
  var {:pointer} Tmp_596: int;
  var {:scalar} keyNameUnicodeString: int;
  var {:scalar} ntStatus_13: int;
  var {:pointer} KeyName: int;
  var {:scalar} DataLength_1: int;
  var {:scalar} KeyType: int;
  var {:scalar} DevInstKeyType: int;
  var vslice_dummy_var_78: int;

  anon0:
    call {:si_unique_call 661} keyNameUnicodeString := __HAVOC_malloc(12);
    KeyName := actual_KeyName;
    DataLength_1 := actual_DataLength_1;
    KeyType := actual_KeyType;
    DevInstKeyType := actual_DevInstKeyType;
    call {:si_unique_call 662} sdv_do_paged_code_check();
    call {:si_unique_call 663} RtlInitUnicodeString(keyNameUnicodeString, KeyName);
    call {:si_unique_call 664} ntStatus_13 := IoOpenDeviceRegistryKey(0, DevInstKeyType, 2031616, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} ntStatus_13 < 0;
    goto L29;

  L29:
    havoc Tmp_596;
    call {:si_unique_call 665} WPP_RECORDER_SF_d(g_RecorderLog, 4, 1, 18, Tmp_596, ntStatus_13);
    Tmp_594 := ntStatus_13;
    return;

  anon3_Then:
    assume {:partition} 0 <= ntStatus_13;
    call {:si_unique_call 666} ntStatus_13 := ZwSetValueKey(0, 0, 0, KeyType, 0, DataLength_1);
    call {:si_unique_call 667} vslice_dummy_var_78 := ZwClose(0);
    goto L29;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var {:scalar} Tmp_599: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_219: int;

  anon0:
    call {:si_unique_call 668} vslice_dummy_var_79 := __HAVOC_malloc(4);
    call {:si_unique_call 669} Tmp_599 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_599 != 0;
    assume Tmp_599 > 0;
    havoc vslice_dummy_var_219;
    Mem_T.VOID[Tmp_599] := vslice_dummy_var_219;
    return;
}



procedure {:origName "CallDriverSync"} CallDriverSync(actual_devObj_3: int, actual_irp_28: int, actual_Timeout: int, actual_completionObject_1: int) returns (Tmp_600: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallDriverSync"} CallDriverSync(actual_devObj_3: int, actual_irp_28: int, actual_Timeout: int, actual_completionObject_1: int) returns (Tmp_600: int)
{
  var {:pointer} Tmp_601: int;
  var {:pointer} Tmp_602: int;
  var {:pointer} Tmp_603: int;
  var {:scalar} sdv_218: int;
  var {:scalar} dueTime: int;
  var {:scalar} status_37: int;
  var {:scalar} event_5: int;
  var {:pointer} devObj_3: int;
  var {:pointer} irp_28: int;
  var {:scalar} Timeout: int;
  var {:pointer} completionObject_1: int;

  anon0:
    call {:si_unique_call 670} dueTime := __HAVOC_malloc(20);
    call {:si_unique_call 671} event_5 := __HAVOC_malloc(156);
    devObj_3 := actual_devObj_3;
    irp_28 := actual_irp_28;
    Timeout := actual_Timeout;
    completionObject_1 := actual_completionObject_1;
    call {:si_unique_call 672} Tmp_601 := __HAVOC_malloc(180);
    call {:si_unique_call 673} Tmp_603 := __HAVOC_malloc(164);
    call {:si_unique_call 674} sdv_do_paged_code_check();
    call {:si_unique_call 675} KeInitializeEvent(event_5, 0, 0);
    call {:si_unique_call 676} SetCompletionRoutine(g_RecorderLog, completionObject_1, irp_28, li2bplFunctionConstant1628, event_5, 1, 1, 1);
    call {:si_unique_call 677} status_37 := sdv_IoCallDriver#1(devObj_3, irp_28);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_37 == 259;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Timeout != 0;
    assume {:nonnull} dueTime != 0;
    assume dueTime > 0;
    call {:si_unique_call 678} status_37 := KeWaitForSingleObject(0, 0, 0, 0, dueTime);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status_37 == 258;
    havoc Tmp_602;
    call {:si_unique_call 679} WPP_RECORDER_SF_(g_RecorderLog, 2, 8, 10, Tmp_602);
    call {:si_unique_call 680} sdv_218 := IoCancelIrp(0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_218 != 0;
    status_37 := -1073741823;
    assume {:nonnull} irp_28 != 0;
    assume irp_28 > 0;
    goto L44;

  L44:
    Tmp_601 := strConst__li2bpl14;
    call {:si_unique_call 681} WaitForSignal(event_5, Tmp_601, g_RecorderLog);
    goto L20;

  L20:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_37 >= 0;
    assume {:nonnull} irp_28 != 0;
    assume irp_28 > 0;
    havoc status_37;
    goto L49;

  L49:
    Tmp_600 := status_37;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} 0 > status_37;
    goto L49;

  anon17_Then:
    assume {:partition} sdv_218 == 0;
    goto L44;

  anon16_Then:
    assume {:partition} status_37 != 258;
    goto L20;

  anon15_Then:
    assume {:partition} Timeout == 0;
    Tmp_603 := strConst__li2bpl13;
    call {:si_unique_call 682} WaitForSignal(event_5, Tmp_603, g_RecorderLog);
    goto L20;

  anon13_Then:
    assume {:partition} status_37 != 259;
    goto L20;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "GetMsExtendedConfigDescriptor"} GetMsExtendedConfigDescriptor(actual_parentFdoExt_55: int) returns (Tmp_605: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetMsExtendedConfigDescriptor"} GetMsExtendedConfigDescriptor(actual_parentFdoExt_55: int) returns (Tmp_605: int)
{
  var {:pointer} Tmp_606: int;
  var {:scalar} msExtConfigDescHeader: int;
  var {:pointer} Tmp_607: int;
  var {:pointer} Tmp_608: int;
  var {:pointer} Tmp_609: int;
  var {:pointer} sdv_220: int;
  var {:scalar} ntStatus_14: int;
  var {:dopa} {:scalar} bytesReturned_3: int;
  var {:pointer} pMsExtConfigDesc: int;
  var {:pointer} Tmp_611: int;
  var {:scalar} sdv_223: int;
  var {:scalar} Tmp_612: int;
  var {:pointer} Tmp_613: int;
  var {:pointer} Tmp_614: int;
  var {:pointer} parentFdoExt_55: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;

  anon0:
    call {:si_unique_call 683} msExtConfigDescHeader := __HAVOC_malloc(20);
    call {:si_unique_call 684} bytesReturned_3 := __HAVOC_malloc(4);
    parentFdoExt_55 := actual_parentFdoExt_55;
    call {:si_unique_call 685} sdv_do_paged_code_check();
    ntStatus_14 := 0;
    pMsExtConfigDesc := 0;
    call {:si_unique_call 686} sdv_RtlZeroMemory(0, 16);
    call {:si_unique_call 687} ntStatus_14 := GetMsOsFeatureDescriptor(parentFdoExt_55, 0, 0, 4, msExtConfigDescHeader, 16, bytesReturned_3);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} ntStatus_14 < 0;
    havoc Tmp_611;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc vslice_dummy_var_220;
    call {:si_unique_call 688} WPP_RECORDER_SF_d(vslice_dummy_var_220, 4, 1, 20, Tmp_611, ntStatus_14);
    goto L36;

  L36:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} ntStatus_14 >= 0;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    goto L39;

  L39:
    Tmp_605 := ntStatus_14;
    goto LM2;

  LM2:
    return;

  anon38_Then:
    assume {:partition} 0 > ntStatus_14;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} pMsExtConfigDesc != 0;
    call {:si_unique_call 689} ExFreePoolWithTag(0, -1016958123);
    goto L40;

  L40:
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} ntStatus_14 == -1073741637;
    ntStatus_14 := 0;
    goto L39;

  anon49_Then:
    assume {:partition} ntStatus_14 != -1073741637;
    goto L39;

  anon39_Then:
    assume {:partition} pMsExtConfigDesc == 0;
    goto L40;

  anon35_Then:
    assume {:partition} 0 <= ntStatus_14;
    assume {:nonnull} bytesReturned_3 != 0;
    assume bytesReturned_3 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.VOID[bytesReturned_3] != 16;
    goto L30;

  L30:
    havoc Tmp_608;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc vslice_dummy_var_221;
    call {:si_unique_call 690} WPP_RECORDER_SF_(vslice_dummy_var_221, 2, 8, 21, Tmp_608);
    ntStatus_14 := -1073741811;
    goto L36;

  anon36_Then:
    assume {:partition} Mem_T.VOID[bytesReturned_3] == 16;
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    havoc vslice_dummy_var_222;
    call {:si_unique_call 691} sdv_220 := ExAllocatePoolWithTag(512, vslice_dummy_var_222, -1016958123);
    pMsExtConfigDesc := sdv_220;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} pMsExtConfigDesc != 0;
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    havoc vslice_dummy_var_223;
    call {:si_unique_call 692} sdv_RtlZeroMemory(0, vslice_dummy_var_223);
    goto L54;

  L54:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} pMsExtConfigDesc != 0;
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    havoc vslice_dummy_var_224;
    call {:si_unique_call 693} sdv_RtlZeroMemory(0, vslice_dummy_var_224);
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    havoc vslice_dummy_var_225;
    call {:si_unique_call 694} ntStatus_14 := GetMsOsFeatureDescriptor(parentFdoExt_55, 0, 0, 4, pMsExtConfigDesc, vslice_dummy_var_225, bytesReturned_3);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} ntStatus_14 < 0;
    havoc Tmp_607;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc vslice_dummy_var_226;
    call {:si_unique_call 695} WPP_RECORDER_SF_D(vslice_dummy_var_226, 2, 8, 23, Tmp_607, ntStatus_14);
    goto L36;

  anon44_Then:
    assume {:partition} 0 <= ntStatus_14;
    assume {:nonnull} bytesReturned_3 != 0;
    assume bytesReturned_3 > 0;
    assume {:nonnull} msExtConfigDescHeader != 0;
    assume msExtConfigDescHeader > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto L79;

  L79:
    havoc Tmp_606;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc vslice_dummy_var_227;
    call {:si_unique_call 696} WPP_RECORDER_SF_(vslice_dummy_var_227, 2, 8, 24, Tmp_606);
    ntStatus_14 := -1073741811;
    goto L36;

  anon45_Then:
    call {:si_unique_call 697} sdv_223 := RtlCompareMemory(0, 0, 16);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_223 == 16;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc Tmp_609;
    assume {:nonnull} Tmp_609 != 0;
    assume Tmp_609 > 0;
    Tmp_612 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_609)];
    assume {:nonnull} bytesReturned_3 != 0;
    assume bytesReturned_3 > 0;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc vslice_dummy_var_228;
    call {:si_unique_call 698} ntStatus_14 := USBD_ValidateExtendedConfigurationDescriptor(pMsExtConfigDesc, Mem_T.VOID[bytesReturned_3], vslice_dummy_var_228, Tmp_612, -1016958123);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} ntStatus_14 < 0;
    havoc Tmp_614;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc vslice_dummy_var_229;
    call {:si_unique_call 699} WPP_RECORDER_SF_(vslice_dummy_var_229, 2, 8, 25, Tmp_614);
    goto L36;

  anon47_Then:
    assume {:partition} 0 <= ntStatus_14;
    goto L36;

  anon46_Then:
    assume {:partition} sdv_223 != 16;
    goto L79;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:partition} pMsExtConfigDesc == 0;
    ntStatus_14 := -1073741670;
    havoc Tmp_613;
    assume {:nonnull} parentFdoExt_55 != 0;
    assume parentFdoExt_55 > 0;
    havoc vslice_dummy_var_230;
    call {:si_unique_call 700} WPP_RECORDER_SF_(vslice_dummy_var_230, 2, 8, 22, Tmp_613);
    goto L36;

  anon50_Then:
    assume {:partition} pMsExtConfigDesc == 0;
    goto L54;

  anon42_Then:
    goto L30;

  anon41_Then:
    goto L30;

  anon40_Then:
    goto L30;

  anon37_Then:
    goto L30;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "GetStringDescriptor"} GetStringDescriptor(actual_parentFdoExt_56: int, actual_stringIndex: int, actual_langId: int, actual_stringDesc: int, actual_bufferLen: int) returns (Tmp_615: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetStringDescriptor"} GetStringDescriptor(actual_parentFdoExt_56: int, actual_stringIndex: int, actual_langId: int, actual_stringDesc: int, actual_bufferLen: int) returns (Tmp_615: int)
{
  var {:scalar} Tmp_616: int;
  var {:scalar} stringLength: int;
  var {:scalar} Tmp_617: int;
  var {:scalar} Tmp_618: int;
  var {:pointer} Tmp_619: int;
  var {:pointer} Tmp_620: int;
  var {:pointer} Tmp_621: int;
  var {:pointer} Tmp_623: int;
  var {:pointer} Tmp_624: int;
  var {:pointer} urb_6: int;
  var {:scalar} Tmp_625: int;
  var {:pointer} Tmp_626: int;
  var {:scalar} status_38: int;
  var {:pointer} Tmp_627: int;
  var {:pointer} parentFdoExt_56: int;
  var {:scalar} stringIndex: int;
  var {:scalar} langId: int;
  var {:pointer} stringDesc: int;
  var {:scalar} bufferLen: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;

  anon0:
    parentFdoExt_56 := actual_parentFdoExt_56;
    stringIndex := actual_stringIndex;
    langId := actual_langId;
    stringDesc := actual_stringDesc;
    bufferLen := actual_bufferLen;
    call {:si_unique_call 701} Tmp_619 := __HAVOC_malloc(4);
    call {:si_unique_call 702} Tmp_626 := __HAVOC_malloc(4);
    urb_6 := 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} stringIndex != 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} stringDesc != 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 4 <= bufferLen;
    assume {:nonnull} stringDesc != 0;
    assume stringDesc > 0;
    Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDesc)] := 0;
    assume {:nonnull} stringDesc != 0;
    assume stringDesc > 0;
    Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(stringDesc)] := 3;
    assume {:nonnull} stringDesc != 0;
    assume stringDesc > 0;
    havoc Tmp_626;
    assume {:nonnull} Tmp_626 != 0;
    assume Tmp_626 > 0;
    Mem_T.VOID[Tmp_626] := 0;
    call {:si_unique_call 703} status_38 := corral_nondet();
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_38 < 0;
    havoc Tmp_624;
    assume {:nonnull} parentFdoExt_56 != 0;
    assume parentFdoExt_56 > 0;
    havoc vslice_dummy_var_231;
    call {:si_unique_call 704} WPP_RECORDER_SF_d(vslice_dummy_var_231, 2, 8, 13, Tmp_624, status_38);
    goto L36;

  L36:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} urb_6 != 0;
    goto L90;

  L90:
    Tmp_615 := status_38;
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} urb_6 == 0;
    goto L90;

  anon25_Then:
    assume {:partition} 0 <= status_38;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_6))] := bufferLen;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    assume {:nonnull} urb_6 != 0;
    assume urb_6 > 0;
    call {:si_unique_call 705} status_38 := SubmitUrb(parentFdoExt_56, urb_6, 1, 0, 0, 1);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_38 >= 0;
    assume {:nonnull} stringDesc != 0;
    assume stringDesc > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 4 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDesc)];
    status_38 := -1073741593;
    Tmp_618 := stringIndex;
    havoc Tmp_620;
    assume {:nonnull} parentFdoExt_56 != 0;
    assume parentFdoExt_56 > 0;
    havoc vslice_dummy_var_232;
    call {:si_unique_call 706} WPP_RECORDER_SF_d(vslice_dummy_var_232, 4, 2, 14, Tmp_620, Tmp_618);
    goto L36;

  anon28_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDesc)] >= 4;
    assume {:nonnull} stringDesc != 0;
    assume stringDesc > 0;
    stringLength := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDesc)] - 2;
    assume {:nonnull} stringDesc != 0;
    assume stringDesc > 0;
    havoc Tmp_619;
    assume {:nonnull} Tmp_619 != 0;
    assume Tmp_619 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.VOID[Tmp_619] == 0;
    Tmp_616 := stringIndex;
    havoc Tmp_623;
    assume {:nonnull} parentFdoExt_56 != 0;
    assume parentFdoExt_56 > 0;
    havoc vslice_dummy_var_233;
    call {:si_unique_call 707} WPP_RECORDER_SF_d(vslice_dummy_var_233, 4, 2, 15, Tmp_623, Tmp_616);
    status_38 := -1073741593;
    goto L36;

  anon33_Then:
    assume {:partition} Mem_T.VOID[Tmp_619] != 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} INTMOD(stringLength, 2) != 0;
    Tmp_617 := stringIndex;
    havoc Tmp_621;
    assume {:nonnull} parentFdoExt_56 != 0;
    assume parentFdoExt_56 > 0;
    havoc vslice_dummy_var_234;
    call {:si_unique_call 708} WPP_RECORDER_SF_d(vslice_dummy_var_234, 4, 2, 16, Tmp_621, Tmp_617);
    status_38 := -1073741593;
    goto L36;

  anon29_Then:
    assume {:partition} INTMOD(stringLength, 2) == 0;
    assume {:nonnull} stringDesc != 0;
    assume stringDesc > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(stringDesc)] != 3;
    status_38 := -1073741593;
    Tmp_625 := stringIndex;
    havoc Tmp_627;
    assume {:nonnull} parentFdoExt_56 != 0;
    assume parentFdoExt_56 > 0;
    havoc vslice_dummy_var_235;
    call {:si_unique_call 709} WPP_RECORDER_SF_d(vslice_dummy_var_235, 4, 2, 17, Tmp_627, Tmp_625);
    goto L36;

  anon30_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(stringDesc)] == 3;
    goto L36;

  anon26_Then:
    assume {:partition} 0 > status_38;
    goto L36;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} bufferLen < 4;
    goto L8;

  L8:
    status_38 := -1073741811;
    goto L36;

  anon23_Then:
    assume {:partition} stringDesc == 0;
    goto L8;

  anon31_Then:
    assume {:partition} stringIndex == 0;
    goto L8;
}



procedure {:origName "USBD_ValidateExtendedConfigurationDescriptor"} USBD_ValidateExtendedConfigurationDescriptor(actual_ExtendedConfigDescriptor: int, actual_ExtendedDescLength: int, actual_ConfigDescriptor: int, actual_ConfigDescLength: int, actual_Tag_1: int) returns (Tmp_628: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_628 == -1073741811 || Tmp_628 == 0 || Tmp_628 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBD_ValidateExtendedConfigurationDescriptor"} USBD_ValidateExtendedConfigurationDescriptor(actual_ExtendedConfigDescriptor: int, actual_ExtendedDescLength: int, actual_ConfigDescriptor: int, actual_ConfigDescLength: int, actual_Tag_1: int) returns (Tmp_628: int)
{
  var {:scalar} i_12: int;
  var {:pointer} interfaceArray_1: int;
  var {:scalar} Tmp_629: int;
  var {:scalar} Tmp_630: int;
  var {:pointer} commonDesc_1: int;
  var {:pointer} sdv_226: int;
  var {:pointer} Tmp_631: int;
  var {:scalar} numberFunctions: int;
  var {:scalar} maxDescriptorLength: int;
  var {:scalar} Tmp_632: int;
  var {:scalar} numberInterfaces: int;
  var {:scalar} Tmp_633: int;
  var {:scalar} c: int;
  var {:scalar} Tmp_634: int;
  var {:scalar} gotNull: int;
  var {:pointer} end_2: int;
  var {:scalar} requiredSize: int;
  var {:scalar} functionCount_1: int;
  var {:pointer} Tmp_635: int;
  var {:scalar} Tmp_636: int;
  var {:scalar} Tmp_637: int;
  var {:pointer} interAssocDesc: int;
  var {:pointer} functionDesc: int;
  var {:scalar} status_39: int;
  var {:scalar} Tmp_638: int;
  var {:pointer} offset_4: int;
  var {:pointer} interDesc: int;
  var {:pointer} ExtendedConfigDescriptor: int;
  var {:scalar} ExtendedDescLength: int;
  var {:pointer} ConfigDescriptor: int;
  var {:scalar} ConfigDescLength: int;
  var {:scalar} Tag_1: int;

  anon0:
    ExtendedConfigDescriptor := actual_ExtendedConfigDescriptor;
    ExtendedDescLength := actual_ExtendedDescLength;
    ConfigDescriptor := actual_ConfigDescriptor;
    ConfigDescLength := actual_ConfigDescLength;
    Tag_1 := actual_Tag_1;
    call {:si_unique_call 710} Tmp_631 := __HAVOC_malloc(32);
    call {:si_unique_call 711} Tmp_635 := __HAVOC_malloc(32);
    status_39 := 0;
    functionCount_1 := 0;
    interfaceArray_1 := 0;
    numberFunctions := 0;
    numberInterfaces := 0;
    maxDescriptorLength := 6160;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} ExtendedConfigDescriptor != 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} 16 <= ExtendedDescLength;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} ConfigDescriptor != 0;
    assume {:nonnull} ConfigDescriptor != 0;
    assume ConfigDescriptor > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} 9 > Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDescriptor)];
    goto L26;

  L26:
    status_39 := -1073741811;
    goto L28;

  L28:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} interfaceArray_1 != 0;
    call {:si_unique_call 712} sdv_ExFreePool(0);
    goto L29;

  L29:
    Tmp_628 := status_39;
    return;

  anon87_Then:
    assume {:partition} interfaceArray_1 == 0;
    goto L29;

  anon85_Then:
    assume {:partition} Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDescriptor)] >= 9;
    assume {:nonnull} ConfigDescriptor != 0;
    assume ConfigDescriptor > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDescriptor)] <= ConfigDescLength;
    call {:si_unique_call 713} sdv_226 := ExAllocatePoolWithTag(512, 256, Tag_1);
    interfaceArray_1 := sdv_226;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} interfaceArray_1 != 0;
    call {:si_unique_call 714} sdv_RtlZeroMemory(0, 256);
    offset_4 := ConfigDescriptor;
    end_2 := ConfigDescriptor;
    assume {:nonnull} ConfigDescriptor != 0;
    assume ConfigDescriptor > 0;
    havoc numberInterfaces;
    numberFunctions := 0;
    goto L46;

  L46:
    call {:si_unique_call 715} i_12, Tmp_629, Tmp_630, commonDesc_1, numberFunctions, numberInterfaces, Tmp_633, interAssocDesc, Tmp_638, interDesc := USBD_ValidateExtendedConfigurationDescriptor_loop_L46(i_12, interfaceArray_1, Tmp_629, Tmp_630, commonDesc_1, numberFunctions, numberInterfaces, Tmp_633, end_2, interAssocDesc, Tmp_638, offset_4, interDesc);
    goto L46_last;

  L46_last:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} end_2 > offset_4;
    commonDesc_1 := offset_4;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} offset_4 > end_2;
    status_39 := -1073741811;
    goto L28;

  anon116_Then:
    assume {:partition} end_2 >= offset_4;
    assume {:nonnull} commonDesc_1 != 0;
    assume commonDesc_1 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_1)] == 11;
    interAssocDesc := commonDesc_1;
    assume {:nonnull} interAssocDesc != 0;
    assume interAssocDesc > 0;
    havoc Tmp_638;
    assume {:nonnull} interfaceArray_1 != 0;
    assume interfaceArray_1 > 0;
    Mem_T.VOID[interfaceArray_1 + Tmp_638 * 4] := 1;
    i_12 := 1;
    goto L59;

  L59:
    call {:si_unique_call 716} i_12, Tmp_629 := USBD_ValidateExtendedConfigurationDescriptor_loop_L59(i_12, interfaceArray_1, Tmp_629, interAssocDesc);
    goto L59_last;

  L59_last:
    assume {:nonnull} interAssocDesc != 0;
    assume interAssocDesc > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} interAssocDesc != 0;
    assume interAssocDesc > 0;
    havoc Tmp_629;
    assume {:nonnull} interfaceArray_1 != 0;
    assume interfaceArray_1 > 0;
    Mem_T.VOID[interfaceArray_1 + Tmp_629 * 4] := 2;
    i_12 := i_12 + 1;
    goto anon91_Else_dummy;

  anon91_Else_dummy:
    assume false;
    return;

  anon91_Then:
    numberFunctions := numberFunctions + 1;
    assume {:nonnull} interAssocDesc != 0;
    assume interAssocDesc > 0;
    havoc numberInterfaces;
    goto L54;

  L54:
    assume {:nonnull} commonDesc_1 != 0;
    assume commonDesc_1 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_1)] == 4;
    interDesc := offset_4;
    assume {:nonnull} interDesc != 0;
    assume interDesc > 0;
    Tmp_633 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interDesc)];
    assume {:nonnull} interfaceArray_1 != 0;
    assume interfaceArray_1 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} Mem_T.VOID[interfaceArray_1 + Tmp_633 * 4] == 0;
    assume {:nonnull} interDesc != 0;
    assume interDesc > 0;
    Tmp_630 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(interDesc)];
    assume {:nonnull} interfaceArray_1 != 0;
    assume interfaceArray_1 > 0;
    Mem_T.VOID[interfaceArray_1 + Tmp_630 * 4] := 1;
    goto L64;

  L64:
    assume {:nonnull} commonDesc_1 != 0;
    assume commonDesc_1 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_1)] != 0;
    goto anon92_Else_dummy;

  anon92_Else_dummy:
    assume false;
    return;

  anon92_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_1)] == 0;
    goto L47;

  L47:
    numberFunctions := numberFunctions + numberInterfaces;
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    goto L73;

  L73:
    status_39 := -1073741811;
    goto L28;

  anon118_Then:
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    havoc requiredSize;
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    status_39 := -1073741811;
    goto L28;

  anon119_Then:
    offset_4 := ExtendedConfigDescriptor;
    end_2 := ExtendedConfigDescriptor;
    goto L84;

  L84:
    call {:si_unique_call 717} i_12, Tmp_631, Tmp_632, c, Tmp_634, gotNull, functionCount_1, Tmp_635, Tmp_636, Tmp_637, functionDesc := USBD_ValidateExtendedConfigurationDescriptor_loop_L84(i_12, interfaceArray_1, Tmp_631, numberFunctions, Tmp_632, c, Tmp_634, gotNull, end_2, functionCount_1, Tmp_635, Tmp_636, Tmp_637, functionDesc, offset_4);
    goto L84_last;

  L84_last:
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} end_2 > offset_4;
    functionDesc := offset_4;
    assume {:nonnull} functionDesc != 0;
    assume functionDesc > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    status_39 := -1073741811;
    goto L28;

  anon120_Then:
    assume {:nonnull} functionDesc != 0;
    assume functionDesc > 0;
    havoc Tmp_637;
    assume {:nonnull} interfaceArray_1 != 0;
    assume interfaceArray_1 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} Mem_T.VOID[interfaceArray_1 + Tmp_637 * 4] != 1;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} numberFunctions > 1;
    status_39 := -1073741811;
    goto L28;

  anon99_Then:
    assume {:partition} 1 >= numberFunctions;
    goto L94;

  L94:
    assume {:nonnull} functionDesc != 0;
    assume functionDesc > 0;
    havoc Tmp_632;
    assume {:nonnull} interfaceArray_1 != 0;
    assume interfaceArray_1 > 0;
    Mem_T.VOID[interfaceArray_1 + Tmp_632 * 4] := 3;
    gotNull := 0;
    i_12 := 0;
    goto L100;

  L100:
    call {:si_unique_call 718} i_12, c, Tmp_634, gotNull, Tmp_635 := USBD_ValidateExtendedConfigurationDescriptor_loop_L100(i_12, c, Tmp_634, gotNull, Tmp_635, functionDesc);
    goto L100_last;

  L100_last:
    assume {:CounterLoop 8} {:Counter "i_12"} true;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} 8 > i_12;
    Tmp_634 := i_12;
    assume {:nonnull} functionDesc != 0;
    assume functionDesc > 0;
    havoc Tmp_635;
    assume {:nonnull} Tmp_635 != 0;
    assume Tmp_635 > 0;
    c := Mem_T.VOID[Tmp_635 + Tmp_634 * 4];
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} c != 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} gotNull != 0;
    goto L107;

  L107:
    status_39 := -1073741811;
    goto L28;

  anon101_Then:
    assume {:partition} gotNull == 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} c >= 65;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} 90 >= c;
    goto L111;

  L111:
    i_12 := i_12 + 1;
    goto L111_dummy;

  L111_dummy:
    assume false;
    return;

  anon104_Then:
    assume {:partition} c > 90;
    goto L109;

  L109:
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} c >= 48;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} 57 < c;
    goto L112;

  L112:
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} c == 95;
    goto L111;

  anon105_Then:
    assume {:partition} c != 95;
    goto L107;

  anon106_Then:
    assume {:partition} c <= 57;
    goto L111;

  anon103_Then:
    assume {:partition} 48 > c;
    goto L112;

  anon102_Then:
    assume {:partition} 65 > c;
    goto L109;

  anon122_Then:
    assume {:partition} c == 0;
    gotNull := 1;
    goto L111;

  anon100_Then:
    assume {:partition} i_12 >= 8;
    gotNull := 0;
    i_12 := 0;
    goto L115;

  L115:
    call {:si_unique_call 719} i_12, Tmp_631, c, gotNull, Tmp_636 := USBD_ValidateExtendedConfigurationDescriptor_loop_L115(i_12, Tmp_631, c, gotNull, Tmp_636, functionDesc);
    goto L115_last;

  L115_last:
    assume {:CounterLoop 8} {:Counter "i_12"} true;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} 8 > i_12;
    Tmp_636 := i_12;
    assume {:nonnull} functionDesc != 0;
    assume functionDesc > 0;
    havoc Tmp_631;
    assume {:nonnull} Tmp_631 != 0;
    assume Tmp_631 > 0;
    c := Mem_T.VOID[Tmp_631 + Tmp_636 * 4];
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} c != 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} gotNull != 0;
    goto L122;

  L122:
    status_39 := -1073741811;
    goto L28;

  anon108_Then:
    assume {:partition} gotNull == 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} c >= 65;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} 90 >= c;
    goto L126;

  L126:
    i_12 := i_12 + 1;
    goto L126_dummy;

  L126_dummy:
    assume false;
    return;

  anon111_Then:
    assume {:partition} c > 90;
    goto L124;

  L124:
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} c >= 48;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} 57 < c;
    goto L127;

  L127:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} c == 95;
    goto L126;

  anon112_Then:
    assume {:partition} c != 95;
    goto L122;

  anon113_Then:
    assume {:partition} c <= 57;
    goto L126;

  anon110_Then:
    assume {:partition} 48 > c;
    goto L127;

  anon109_Then:
    assume {:partition} 65 > c;
    goto L124;

  anon123_Then:
    assume {:partition} c == 0;
    gotNull := 1;
    goto L126;

  anon107_Then:
    assume {:partition} i_12 >= 8;
    functionCount_1 := functionCount_1 + 1;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    assume false;
    return;

  anon121_Then:
    assume {:partition} Mem_T.VOID[interfaceArray_1 + Tmp_637 * 4] == 1;
    goto L94;

  anon97_Then:
    assume {:partition} offset_4 >= end_2;
    assume {:nonnull} ExtendedConfigDescriptor != 0;
    assume ExtendedConfigDescriptor > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    status_39 := -1073741811;
    goto L28;

  anon98_Then:
    goto L28;

  anon96_Then:
    goto L73;

  anon95_Then:
    goto L73;

  anon94_Then:
    goto L73;

  anon93_Then:
    goto L73;

  anon117_Then:
    assume {:partition} Mem_T.VOID[interfaceArray_1 + Tmp_633 * 4] != 0;
    goto L64;

  anon90_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_1)] != 4;
    goto L64;

  anon89_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_1)] != 11;
    goto L54;

  anon88_Then:
    assume {:partition} offset_4 >= end_2;
    goto L47;

  anon115_Then:
    assume {:partition} interfaceArray_1 == 0;
    status_39 := -1073741670;
    goto L28;

  anon86_Then:
    assume {:partition} ConfigDescLength < Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(ConfigDescriptor)];
    goto L26;

  anon84_Then:
    assume {:partition} ConfigDescriptor == 0;
    status_39 := -1073741811;
    goto L28;

  anon83_Then:
    assume {:partition} ExtendedDescLength < 16;
    goto L20;

  L20:
    status_39 := -1073741811;
    goto L28;

  anon114_Then:
    assume {:partition} ExtendedConfigDescriptor == 0;
    goto L20;
}



procedure {:origName "MemDup"} MemDup(actual_dataPtr: int, actual_length_3: int) returns (Tmp_640: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MemDup"} MemDup(actual_dataPtr: int, actual_length_3: int) returns (Tmp_640: int)
{
  var {:pointer} Tmp_642: int;
  var {:pointer} newPtr: int;
  var {:scalar} length_3: int;

  anon0:
    length_3 := actual_length_3;
    call {:si_unique_call 720} newPtr := ExAllocatePoolWithTag(512, length_3, -1016958123);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} newPtr != 0;
    call {:si_unique_call 721} sdv_RtlZeroMemory(0, length_3);
    goto L9;

  L9:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} newPtr == 0;
    havoc Tmp_642;
    call {:si_unique_call 722} WPP_RECORDER_SF_D(g_RecorderLog, 2, 8, 41, Tmp_642, length_3);
    goto L19;

  L19:
    Tmp_640 := newPtr;
    return;

  anon6_Then:
    assume {:partition} newPtr != 0;
    call {:si_unique_call 723} sdv_RtlCopyMemory(0, 0, length_3);
    goto L19;

  anon5_Then:
    assume {:partition} newPtr == 0;
    goto L9;
}



procedure {:origName "SetRecorderLogIdentifier"} SetRecorderLogIdentifier(actual_RecorderLog: int, actual_VendorID: int, actual_DeviceID: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetRecorderLogIdentifier"} SetRecorderLogIdentifier(actual_RecorderLog: int, actual_VendorID: int, actual_DeviceID: int)
{
  var {:pointer} logIdentifier: int;
  var {:pointer} Tmp_645: int;
  var {:scalar} VendorID: int;
  var {:scalar} DeviceID: int;
  var boogieTmp: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;

  anon0:
    call {:si_unique_call 724} logIdentifier := __HAVOC_malloc(4);
    call {:si_unique_call 725} vslice_dummy_var_80 := __HAVOC_malloc(4);
    VendorID := actual_VendorID;
    DeviceID := actual_DeviceID;
    assume {:nonnull} logIdentifier != 0;
    assume logIdentifier > 0;
    call {:si_unique_call 726} boogieTmp := __HAVOC_malloc(64);
    call {:si_unique_call 727} Tmp_645 := __HAVOC_malloc(64);
    assume {:nonnull} logIdentifier != 0;
    assume logIdentifier > 0;
    havoc Mem_T.VOID;
    call {:si_unique_call 728} sdv_do_paged_code_check();
    Tmp_645 := strConst__li2bpl15;
    call {:si_unique_call 729} vslice_dummy_var_81 := RtlStringCchPrintfA(logIdentifier, 16, Tmp_645);
    return;
}



procedure {:origName "UsbcIncrementPendingCount"} UsbcIncrementPendingCount(actual_parentFdoExt_57: int, actual_tag_1: int, actual_object_2: int) returns (Tmp_646: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcIncrementPendingCount"} UsbcIncrementPendingCount(actual_parentFdoExt_57: int, actual_tag_1: int, actual_object_2: int) returns (Tmp_646: int)
{
  var {:scalar} queueHandle_2: int;
  var {:pointer} lockEntry_2: int;
  var {:pointer} sdv_229: int;
  var {:scalar} ntStatus_15: int;
  var {:pointer} Tmp_647: int;
  var {:pointer} parentFdoExt_57: int;
  var {:scalar} tag_1: int;
  var {:pointer} object_2: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_236: int;

  anon0:
    call {:si_unique_call 730} queueHandle_2 := __HAVOC_malloc(12);
    parentFdoExt_57 := actual_parentFdoExt_57;
    tag_1 := actual_tag_1;
    object_2 := actual_object_2;
    ntStatus_15 := 0;
    lockEntry_2 := 0;
    assume {:nonnull} queueHandle_2 != 0;
    assume queueHandle_2 > 0;
    assume {:nonnull} queueHandle_2 != 0;
    assume queueHandle_2 > 0;
    assume {:nonnull} queueHandle_2 != 0;
    assume queueHandle_2 > 0;
    call {:si_unique_call 731} KeAcquireInStackQueuedSpinLock(0, 0);
    assume {:nonnull} parentFdoExt_57 != 0;
    assume parentFdoExt_57 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L16;

  L16:
    call {:si_unique_call 732} KeReleaseInStackQueuedSpinLock(0);
    Tmp_646 := -1073741436;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:nonnull} parentFdoExt_57 != 0;
    assume parentFdoExt_57 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 733} sdv_229 := ExAllocatePoolWithTag(512, 20, -1016958123);
    lockEntry_2 := sdv_229;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} lockEntry_2 != 0;
    call {:si_unique_call 734} sdv_RtlZeroMemory(0, 20);
    goto L25;

  L25:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} lockEntry_2 != 0;
    assume {:nonnull} parentFdoExt_57 != 0;
    assume parentFdoExt_57 > 0;
    call {:si_unique_call 735} vslice_dummy_var_82 := KeResetEvent(stopEvent_PARENT_FDO_EXTENSION(parentFdoExt_57));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} lockEntry_2 != 0;
    assume lockEntry_2 > 0;
    assume {:nonnull} lockEntry_2 != 0;
    assume lockEntry_2 > 0;
    assume {:nonnull} lockEntry_2 != 0;
    assume lockEntry_2 > 0;
    call {:si_unique_call 736} Tmp_647 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_647 != 0;
    assume Tmp_647 > 0;
    assume {:nonnull} parentFdoExt_57 != 0;
    assume parentFdoExt_57 > 0;
    havoc vslice_dummy_var_236;
    Mem_T.VOID[Tmp_647] := vslice_dummy_var_236;
    call {:si_unique_call 737} vslice_dummy_var_84 := sdv_InterlockedIncrement(Tmp_647);
    assume {:nonnull} Tmp_647 != 0;
    assume Tmp_647 > 0;
    assume {:nonnull} parentFdoExt_57 != 0;
    assume parentFdoExt_57 > 0;
    assume {:nonnull} lockEntry_2 != 0;
    assume lockEntry_2 > 0;
    assume {:nonnull} parentFdoExt_57 != 0;
    assume parentFdoExt_57 > 0;
    call {:si_unique_call 738} vslice_dummy_var_83 := sdv_InsertTailList(pendingRequestHead_PARENT_FDO_EXTENSION(parentFdoExt_57), listEntry__USBC_REMOVE_LOCK_ENTRY(lockEntry_2));
    call {:si_unique_call 739} KeReleaseInStackQueuedSpinLock(0);
    Tmp_646 := ntStatus_15;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} lockEntry_2 == 0;
    call {:si_unique_call 740} KeReleaseInStackQueuedSpinLock(0);
    Tmp_646 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:partition} lockEntry_2 == 0;
    goto L25;

  anon12_Then:
    goto L16;
}



procedure {:origName "UsbcReleaseRemoveLock"} UsbcReleaseRemoveLock(actual_parentFdoExt_58: int, actual_object_3: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcReleaseRemoveLock"} UsbcReleaseRemoveLock(actual_parentFdoExt_58: int, actual_object_3: int)
{
  var {:scalar} queueHandle_3: int;
  var {:pointer} lockEntry_3: int;
  var {:pointer} listEntry_3: int;
  var {:pointer} sdv_232: int;
  var {:pointer} parentFdoExt_58: int;
  var {:pointer} object_3: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;

  anon0:
    call {:si_unique_call 741} vslice_dummy_var_85 := __HAVOC_malloc(4);
    call {:si_unique_call 742} queueHandle_3 := __HAVOC_malloc(12);
    parentFdoExt_58 := actual_parentFdoExt_58;
    object_3 := actual_object_3;
    lockEntry_3 := 0;
    assume {:nonnull} queueHandle_3 != 0;
    assume queueHandle_3 > 0;
    assume {:nonnull} queueHandle_3 != 0;
    assume queueHandle_3 > 0;
    assume {:nonnull} queueHandle_3 != 0;
    assume queueHandle_3 > 0;
    listEntry_3 := 0;
    call {:si_unique_call 743} KeAcquireInStackQueuedSpinLock(0, 0);
    assume {:nonnull} parentFdoExt_58 != 0;
    assume parentFdoExt_58 > 0;
    havoc listEntry_3;
    goto L15;

  L15:
    call {:si_unique_call 744} lockEntry_3, listEntry_3, sdv_232 := UsbcReleaseRemoveLock_loop_L15(lockEntry_3, listEntry_3, sdv_232, object_3);
    goto L15_last;

  L15_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 745} sdv_232 := sdv_containing_record(listEntry_3, 4);
    lockEntry_3 := sdv_232;
    assume {:nonnull} lockEntry_3 != 0;
    assume lockEntry_3 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 746} vslice_dummy_var_86 := sdv_RemoveEntryList(0);
    call {:si_unique_call 747} ExFreePoolWithTag(0, -1016958123);
    goto L16;

  L16:
    call {:si_unique_call 748} KeReleaseInStackQueuedSpinLock(0);
    return;

  anon6_Then:
    assume {:nonnull} listEntry_3 != 0;
    assume listEntry_3 > 0;
    havoc listEntry_3;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    goto L16;
}



procedure {:origName "GetMsOsFeatureDescriptor"} GetMsOsFeatureDescriptor(actual_ParentFdoExt: int, actual_Recipient: int, actual_InterfaceNumber: int, actual_Index: int, actual_DataBuffer: int, actual_DataBufferLength: int, actual_BytesReturned: int) returns (Tmp_650: int);
  modifies Mem_T.VOID, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetMsOsFeatureDescriptor"} GetMsOsFeatureDescriptor(actual_ParentFdoExt: int, actual_Recipient: int, actual_InterfaceNumber: int, actual_Index: int, actual_DataBuffer: int, actual_DataBufferLength: int, actual_BytesReturned: int) returns (Tmp_650: int)
{
  var {:scalar} ntStatus_16: int;
  var {:pointer} urb_7: int;
  var {:pointer} Tmp_651: int;
  var {:pointer} ParentFdoExt: int;
  var {:scalar} Recipient: int;
  var {:scalar} InterfaceNumber: int;
  var {:scalar} Index: int;
  var {:pointer} DataBuffer: int;
  var {:scalar} DataBufferLength: int;
  var {:pointer} BytesReturned: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;

  anon0:
    ParentFdoExt := actual_ParentFdoExt;
    Recipient := actual_Recipient;
    InterfaceNumber := actual_InterfaceNumber;
    Index := actual_Index;
    DataBuffer := actual_DataBuffer;
    DataBufferLength := actual_DataBufferLength;
    BytesReturned := actual_BytesReturned;
    call {:si_unique_call 749} sdv_do_paged_code_check();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BytesReturned != 0;
    assume {:nonnull} BytesReturned != 0;
    assume BytesReturned > 0;
    Mem_T.VOID[BytesReturned] := 0;
    goto L9;

  L9:
    call {:si_unique_call 750} ntStatus_16 := corral_nondet();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} ntStatus_16 < 0;
    havoc Tmp_651;
    assume {:nonnull} ParentFdoExt != 0;
    assume ParentFdoExt > 0;
    havoc vslice_dummy_var_237;
    call {:si_unique_call 751} WPP_RECORDER_SF_d(vslice_dummy_var_237, 2, 8, 19, Tmp_651, ntStatus_16);
    goto L38;

  L38:
    Tmp_650 := ntStatus_16;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} 0 <= ntStatus_16;
    call {:si_unique_call 752} sdv_RtlZeroMemory(0, 80);
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    call {:si_unique_call 753} ntStatus_16 := SubmitUrb(ParentFdoExt, urb_7, 1, 0, 0, 1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} ntStatus_16 >= 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} BytesReturned != 0;
    assume {:nonnull} BytesReturned != 0;
    assume BytesReturned > 0;
    assume {:nonnull} urb_7 != 0;
    assume urb_7 > 0;
    havoc vslice_dummy_var_238;
    Mem_T.VOID[BytesReturned] := vslice_dummy_var_238;
    goto L33;

  L33:
    goto L38;

  anon14_Then:
    assume {:partition} BytesReturned == 0;
    goto L33;

  anon13_Then:
    assume {:partition} 0 > ntStatus_16;
    goto L33;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} BytesReturned == 0;
    goto L9;
}



procedure {:origName "AcquireMutex"} AcquireMutex(actual_Mutex: int, actual_ReasonForWaiting_1: int, actual_DebugLog_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AcquireMutex"} AcquireMutex(actual_Mutex: int, actual_ReasonForWaiting_1: int, actual_DebugLog_1: int)
{
  var {:pointer} Tmp_653: int;
  var {:scalar} timeOut_1: int;
  var {:pointer} sdv_237: int;
  var {:scalar} status_40: int;
  var {:pointer} ReasonForWaiting_1: int;
  var {:pointer} DebugLog_1: int;
  var vslice_dummy_var_87: int;

  anon0:
    call {:si_unique_call 754} timeOut_1 := __HAVOC_malloc(20);
    call {:si_unique_call 755} vslice_dummy_var_87 := __HAVOC_malloc(4);
    ReasonForWaiting_1 := actual_ReasonForWaiting_1;
    DebugLog_1 := actual_DebugLog_1;
    call {:si_unique_call 756} sdv_do_paged_code_check();
    assume {:nonnull} timeOut_1 != 0;
    assume timeOut_1 > 0;
    goto L9;

  L9:
    call {:si_unique_call 757} Tmp_653, sdv_237, status_40 := AcquireMutex_loop_L9(Tmp_653, timeOut_1, sdv_237, status_40, ReasonForWaiting_1, DebugLog_1);
    goto L9_last;

  L9_last:
    call {:si_unique_call 760} status_40 := KeWaitForSingleObject(0, 0, 0, 0, timeOut_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_40 == 258;
    call {:si_unique_call 758} sdv_237 := PsGetCurrentThread();
    havoc Tmp_653;
    call {:si_unique_call 759} WPP_RECORDER_SF_qs(DebugLog_1, 3, 1, 48, Tmp_653, sdv_237, ReasonForWaiting_1);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} status_40 != 258;
    return;
}



procedure {:origName "SetCompletionRoutine"} SetCompletionRoutine(actual_DebugLog_2: int, actual_DeviceObject: int, actual_Irp: int, actual_CompletionRoutine: int, actual_Context_1: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetCompletionRoutine"} SetCompletionRoutine(actual_DebugLog_2: int, actual_DeviceObject: int, actual_Irp: int, actual_CompletionRoutine: int, actual_Context_1: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:scalar} sdv_238: int;
  var {:pointer} Tmp_656: int;
  var {:pointer} DebugLog_2: int;
  var {:pointer} Irp: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_1: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 761} vslice_dummy_var_88 := __HAVOC_malloc(4);
    DebugLog_2 := actual_DebugLog_2;
    Irp := actual_Irp;
    CompletionRoutine := actual_CompletionRoutine;
    Context_1 := actual_Context_1;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 762} sdv_238 := IoSetCompletionRoutineEx(0, Irp, CompletionRoutine, Context_1, InvokeOnSuccess, InvokeOnError, InvokeOnCancel);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_238 < 0;
    havoc Tmp_656;
    call {:si_unique_call 763} WPP_RECORDER_SF_(DebugLog_2, 3, 1, 46, Tmp_656);
    call {:si_unique_call 764} sdv_IoSetCompletionRoutine(Irp, CompletionRoutine, Context_1, InvokeOnSuccess, InvokeOnError, InvokeOnCancel);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} 0 <= sdv_238;
    goto L1;
}



procedure {:origName "USBD_InstallExtPropDescSections"} USBD_InstallExtPropDescSections(actual_DeviceObject_1: int, actual_MsExtPropDesc: int, actual_BufferLength_1: int) returns (Tmp_659: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_659 == -1073741790 || Tmp_659 == -1073741816 || Tmp_659 == -1073741823 || Tmp_659 == 0 || Tmp_659 == -1073741811 || Tmp_659 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBD_InstallExtPropDescSections"} USBD_InstallExtPropDescSections(actual_DeviceObject_1: int, actual_MsExtPropDesc: int, actual_BufferLength_1: int) returns (Tmp_659: int)
{
  var {:scalar} i_13: int;
  var {:pointer} customData: int;
  var {:pointer} customProp: int;
  var {:scalar} ntStatus_17: int;
  var {:scalar} unicodeNameString: int;
  var {:scalar} descHeader: int;
  var {:pointer} offset_5: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} MsExtPropDesc: int;
  var {:scalar} BufferLength_1: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;

  anon0:
    call {:si_unique_call 765} unicodeNameString := __HAVOC_malloc(12);
    call {:si_unique_call 766} descHeader := __HAVOC_malloc(16);
    DeviceObject_1 := actual_DeviceObject_1;
    MsExtPropDesc := actual_MsExtPropDesc;
    BufferLength_1 := actual_BufferLength_1;
    ntStatus_17 := 0;
    i_13 := 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} MsExtPropDesc != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} DeviceObject_1 != 0;
    assume {:nonnull} MsExtPropDesc != 0;
    assume MsExtPropDesc > 0;
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    assume {:nonnull} MsExtPropDesc != 0;
    assume MsExtPropDesc > 0;
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    assume {:nonnull} MsExtPropDesc != 0;
    assume MsExtPropDesc > 0;
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    assume {:nonnull} MsExtPropDesc != 0;
    assume MsExtPropDesc > 0;
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L18;

  L18:
    Tmp_659 := -1073741811;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 767} ntStatus_17 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} ntStatus_17 >= 0;
    assume {:nonnull} MsExtPropDesc != 0;
    assume MsExtPropDesc > 0;
    offset_5 := CustomSection__MS_EXT_PROP_DESC(MsExtPropDesc);
    i_13 := 0;
    goto L27;

  L27:
    call {:si_unique_call 768} i_13, customData, customProp, ntStatus_17 := USBD_InstallExtPropDescSections_loop_L27(i_13, customData, customProp, ntStatus_17, unicodeNameString, descHeader, offset_5);
    goto L27_last;

  L27_last:
    assume {:nonnull} descHeader != 0;
    assume descHeader > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    customProp := 0;
    customData := 0;
    customProp := offset_5;
    customData := offset_5;
    assume {:nonnull} customProp != 0;
    assume customProp > 0;
    havoc vslice_dummy_var_239;
    call {:si_unique_call 769} RtlInitUnicodeString(unicodeNameString, vslice_dummy_var_239);
    assume {:nonnull} customData != 0;
    assume customData > 0;
    assume {:nonnull} customProp != 0;
    assume customProp > 0;
    havoc vslice_dummy_var_240;
    havoc vslice_dummy_var_241;
    call {:si_unique_call 770} ntStatus_17 := ZwSetValueKey(0, 0, 0, vslice_dummy_var_240, 0, vslice_dummy_var_241);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} ntStatus_17 >= 0;
    i_13 := i_13 + 1;
    goto anon22_Else_dummy;

  anon22_Else_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} 0 > ntStatus_17;
    call {:si_unique_call 771} vslice_dummy_var_90 := ZwClose(0);
    Tmp_659 := ntStatus_17;
    goto L1;

  anon21_Then:
    call {:si_unique_call 772} vslice_dummy_var_89 := ZwClose(0);
    Tmp_659 := ntStatus_17;
    goto L1;

  anon20_Then:
    assume {:partition} 0 > ntStatus_17;
    Tmp_659 := ntStatus_17;
    goto L1;

  anon19_Then:
    goto L18;

  anon24_Then:
    Tmp_659 := 0;
    goto L1;

  anon17_Then:
    assume {:partition} DeviceObject_1 == 0;
    goto L11;

  L11:
    Tmp_659 := -1073741811;
    goto L1;

  anon23_Then:
    assume {:partition} MsExtPropDesc == 0;
    goto L11;
}



procedure {:origName "UsbcDereferencePdo"} UsbcDereferencePdo(actual_functionPdoExt_11: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcDereferencePdo"} UsbcDereferencePdo(actual_functionPdoExt_11: int)
{
  var {:scalar} sdv_243: int;
  var {:pointer} Tmp_661: int;
  var {:scalar} result_1: int;
  var {:pointer} functionPdoExt_11: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_242: int;

  anon0:
    call {:si_unique_call 773} vslice_dummy_var_91 := __HAVOC_malloc(4);
    functionPdoExt_11 := actual_functionPdoExt_11;
    result_1 := 0;
    call {:si_unique_call 774} Tmp_661 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_661 != 0;
    assume Tmp_661 > 0;
    assume {:nonnull} functionPdoExt_11 != 0;
    assume functionPdoExt_11 > 0;
    havoc vslice_dummy_var_242;
    Mem_T.VOID[Tmp_661] := vslice_dummy_var_242;
    call {:si_unique_call 775} sdv_243 := sdv_InterlockedDecrement(Tmp_661);
    assume {:nonnull} Tmp_661 != 0;
    assume Tmp_661 > 0;
    assume {:nonnull} functionPdoExt_11 != 0;
    assume functionPdoExt_11 > 0;
    result_1 := sdv_243;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} result_1 == 0;
    assume {:nonnull} functionPdoExt_11 != 0;
    assume functionPdoExt_11 > 0;
    call {:si_unique_call 776} vslice_dummy_var_92 := KeSetEvent(removeEvent_FUNCTION_PDO_EXTENSION(functionPdoExt_11), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} result_1 != 0;
    goto L1;
}



procedure {:origName "RecordStartFailData"} RecordStartFailData(actual_parentFdoExt_59: int, actual_failStatus: int, actual_usbdStatus_2: int, actual_errorCode: int, actual_subCode: int, actual_dataBlock: int, actual_dataSize: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RecordStartFailData"} RecordStartFailData(actual_parentFdoExt_59: int, actual_failStatus: int, actual_usbdStatus_2: int, actual_errorCode: int, actual_subCode: int, actual_dataBlock: int, actual_dataSize: int)
{
  var {:pointer} failData_1: int;
  var {:scalar} minimumHeaderSize: int;
  var {:scalar} minimumRecordSize: int;
  var {:scalar} bytesRemaining: int;
  var {:pointer} Tmp_663: int;
  var {:pointer} sdv_245: int;
  var {:pointer} Tmp_664: int;
  var {:scalar} totalSize: int;
  var {:scalar} errorRecordSize: int;
  var {:pointer} Tmp_665: int;
  var {:pointer} Tmp_668: int;
  var {:pointer} Tmp_669: int;
  var {:pointer} errorRecord: int;
  var {:scalar} Tmp_670: int;
  var {:pointer} parentFdoExt_59: int;
  var {:scalar} failStatus: int;
  var {:scalar} usbdStatus_2: int;
  var {:scalar} errorCode: int;
  var {:scalar} subCode: int;
  var {:pointer} dataBlock: int;
  var {:scalar} dataSize: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_243: int;

  anon0:
    call {:si_unique_call 777} vslice_dummy_var_93 := __HAVOC_malloc(4);
    parentFdoExt_59 := actual_parentFdoExt_59;
    failStatus := actual_failStatus;
    usbdStatus_2 := actual_usbdStatus_2;
    errorCode := actual_errorCode;
    subCode := actual_subCode;
    dataBlock := actual_dataBlock;
    dataSize := actual_dataSize;
    call {:si_unique_call 778} Tmp_668 := __HAVOC_malloc(16);
    errorRecord := 0;
    failData_1 := 0;
    errorRecordSize := 0;
    totalSize := 0;
    minimumHeaderSize := 0;
    bytesRemaining := 0;
    minimumRecordSize := 0;
    minimumHeaderSize := 16;
    minimumRecordSize := 28;
    errorRecordSize := minimumRecordSize + dataSize;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} INTMOD(errorRecordSize, 8) != 0;
    Tmp_670 := INTMOD(errorRecordSize, 8);
    errorRecordSize := errorRecordSize + 8 - Tmp_670;
    goto L21;

  L21:
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    havoc Tmp_663;
    assume {:nonnull} Tmp_663 != 0;
    assume Tmp_663 > 0;
    havoc totalSize;
    goto L26;

  L26:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} minimumHeaderSize + minimumRecordSize <= totalSize;
    call {:si_unique_call 779} sdv_245 := ExAllocatePoolWithTag(512, totalSize, -1016958123);
    failData_1 := sdv_245;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} failData_1 != 0;
    call {:si_unique_call 780} sdv_RtlZeroMemory(0, totalSize);
    goto L34;

  L34:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} failData_1 != 0;
    bytesRemaining := totalSize;
    call {:si_unique_call 781} sdv_RtlZeroMemory(0, totalSize);
    assume {:nonnull} failData_1 != 0;
    assume failData_1 > 0;
    havoc Tmp_668;
    errorRecord := Tmp_668;
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    havoc Tmp_669;
    assume {:nonnull} Tmp_669 != 0;
    assume Tmp_669 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    havoc Tmp_664;
    assume {:nonnull} Tmp_664 != 0;
    assume Tmp_664 > 0;
    havoc vslice_dummy_var_243;
    call {:si_unique_call 782} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_243);
    errorRecord := failData_1;
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    havoc Tmp_665;
    assume {:nonnull} Tmp_665 != 0;
    assume Tmp_665 > 0;
    havoc bytesRemaining;
    goto L47;

  L47:
    call {:si_unique_call 783} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    goto L56;

  L56:
    assume {:nonnull} failData_1 != 0;
    assume failData_1 > 0;
    assume {:nonnull} failData_1 != 0;
    assume failData_1 > 0;
    assume {:nonnull} failData_1 != 0;
    assume failData_1 > 0;
    assume {:nonnull} failData_1 != 0;
    assume failData_1 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} minimumRecordSize > bytesRemaining;
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    call {:si_unique_call 784} ExFreePoolWithTag(0, -1016958123);
    goto L1;

  L1:
    return;

  anon29_Then:
    assume {:partition} bytesRemaining >= minimumRecordSize;
    assume {:nonnull} errorRecord != 0;
    assume errorRecord > 0;
    assume {:nonnull} errorRecord != 0;
    assume errorRecord > 0;
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    assume {:nonnull} errorRecord != 0;
    assume errorRecord > 0;
    assume {:nonnull} errorRecord != 0;
    assume errorRecord > 0;
    assume {:nonnull} errorRecord != 0;
    assume errorRecord > 0;
    assume {:nonnull} errorRecord != 0;
    assume errorRecord > 0;
    assume {:nonnull} errorRecord != 0;
    assume errorRecord > 0;
    bytesRemaining := bytesRemaining - minimumRecordSize;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} dataBlock != 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} bytesRemaining >= dataSize;
    call {:si_unique_call 785} sdv_RtlCopyMemory(0, 0, dataSize);
    goto L75;

  L75:
    assume {:nonnull} parentFdoExt_59 != 0;
    assume parentFdoExt_59 > 0;
    goto L1;

  anon24_Then:
    assume {:partition} dataSize > bytesRemaining;
    goto L75;

  anon30_Then:
    assume {:partition} dataBlock == 0;
    goto L75;

  anon28_Then:
    goto L47;

  anon27_Then:
    bytesRemaining := bytesRemaining - minimumHeaderSize;
    goto L56;

  anon23_Then:
    assume {:partition} failData_1 == 0;
    goto L1;

  anon26_Then:
    assume {:partition} failData_1 == 0;
    goto L34;

  anon22_Then:
    assume {:partition} totalSize < minimumHeaderSize + minimumRecordSize;
    goto L1;

  anon21_Then:
    totalSize := minimumHeaderSize + errorRecordSize;
    goto L26;

  anon25_Then:
    assume {:partition} INTMOD(errorRecordSize, 8) == 0;
    goto L21;
}



procedure {:origName "CleanFunctionList"} CleanFunctionList(actual_functionList_1: int, actual_numFunctions_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CleanFunctionList"} CleanFunctionList(actual_functionList_1: int, actual_numFunctions_4: int)
{
  var {:scalar} i_14: int;
  var {:scalar} Tmp_671: int;
  var {:scalar} Tmp_672: int;
  var {:scalar} Tmp_673: int;
  var {:scalar} Tmp_674: int;
  var {:scalar} Tmp_678: int;
  var {:scalar} Tmp_679: int;
  var {:scalar} Tmp_683: int;
  var {:pointer} functionList_1: int;
  var {:scalar} numFunctions_4: int;
  var vslice_dummy_var_94: int;

  anon0:
    call {:si_unique_call 786} vslice_dummy_var_94 := __HAVOC_malloc(4);
    functionList_1 := actual_functionList_1;
    numFunctions_4 := actual_numFunctions_4;
    i_14 := 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} functionList_1 != 0;
    i_14 := 0;
    goto L8;

  L8:
    call {:si_unique_call 787} i_14, Tmp_671, Tmp_672, Tmp_673, Tmp_674, Tmp_678, Tmp_679, Tmp_683 := CleanFunctionList_loop_L8(i_14, Tmp_671, Tmp_672, Tmp_673, Tmp_674, Tmp_678, Tmp_679, Tmp_683, functionList_1, numFunctions_4);
    goto L8_last;

  L8_last:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} numFunctions_4 > i_14;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_683 := i_14;
    assume {:nonnull} functionList_1 != 0;
    assume functionList_1 > 0;
    call {:si_unique_call 788} ExFreePoolWithTag(0, -1016958123);
    goto L13;

  L13:
    Tmp_673 := i_14;
    assume {:nonnull} functionList_1 != 0;
    assume functionList_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    Tmp_679 := i_14;
    assume {:nonnull} functionList_1 != 0;
    assume functionList_1 > 0;
    call {:si_unique_call 789} sdv_ExFreePool(0);
    goto L18;

  L18:
    Tmp_672 := i_14;
    assume {:nonnull} functionList_1 != 0;
    assume functionList_1 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_678 := i_14;
    assume {:nonnull} functionList_1 != 0;
    assume functionList_1 > 0;
    call {:si_unique_call 790} sdv_ExFreePool(0);
    goto L23;

  L23:
    Tmp_674 := i_14;
    assume {:nonnull} functionList_1 != 0;
    assume functionList_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    Tmp_671 := i_14;
    assume {:nonnull} functionList_1 != 0;
    assume functionList_1 > 0;
    call {:si_unique_call 791} sdv_ExFreePool(0);
    goto L28;

  L28:
    i_14 := i_14 + 1;
    goto L28_dummy;

  L28_dummy:
    assume false;
    return;

  anon18_Then:
    goto L28;

  anon17_Then:
    goto L23;

  anon16_Then:
    goto L18;

  anon15_Then:
    goto L13;

  anon13_Then:
    assume {:partition} i_14 >= numFunctions_4;
    call {:si_unique_call 792} ExFreePoolWithTag(0, -1016958123);
    functionList_1 := 0;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} functionList_1 == 0;
    goto L1;
}



procedure {:origName "AppendInterfaceNumber"} AppendInterfaceNumber(actual_oldIDs: int, actual_interfaceNum: int) returns (Tmp_685: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AppendInterfaceNumber"} AppendInterfaceNumber(actual_oldIDs: int, actual_interfaceNum: int) returns (Tmp_685: int)
{
  var {:scalar} suffixLen: int;
  var {:pointer} Tmp_686: int;
  var {:scalar} newIdLen: int;
  var {:pointer} Tmp_687: int;
  var {:pointer} buf: int;
  var {:scalar} Tmp_688: int;
  var {:scalar} oldIdLen: int;
  var {:pointer} Tmp_689: int;
  var {:scalar} thisIdLen: int;
  var {:scalar} Tmp_690: int;
  var {:pointer} sdv_248: int;
  var {:pointer} suffix: int;
  var {:scalar} sdv_251: int;
  var {:pointer} id_11: int;
  var {:pointer} newIDs: int;
  var {:pointer} oldIDs: int;
  var {:scalar} interfaceNum: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;

  anon0:
    oldIDs := actual_oldIDs;
    interfaceNum := actual_interfaceNum;
    call {:si_unique_call 793} Tmp_686 := __HAVOC_malloc(36);
    call {:si_unique_call 794} suffix := __HAVOC_malloc(28);
    newIdLen := 0;
    oldIdLen := 0;
    suffixLen := 0;
    suffix := strConst__li2bpl16;
    call {:si_unique_call 795} sdv_do_paged_code_check();
    id_11 := oldIDs;
    newIdLen := 0;
    goto L19;

  L19:
    call {:si_unique_call 796} newIdLen, thisIdLen := AppendInterfaceNumber_loop_L19(newIdLen, thisIdLen, id_11);
    goto L19_last;

  L19_last:
    assume {:nonnull} id_11 != 0;
    assume id_11 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.VOID[id_11] != 0;
    call {:si_unique_call 797} thisIdLen := WStrLen(id_11);
    newIdLen := newIdLen + thisIdLen + 1 + 14;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} Mem_T.VOID[id_11] == 0;
    newIdLen := newIdLen + 1;
    Tmp_688 := newIdLen * 2;
    call {:si_unique_call 798} sdv_248 := ExAllocatePoolWithTag(512, Tmp_688, -1016958123);
    newIDs := sdv_248;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} newIDs != 0;
    Tmp_690 := newIdLen * 2;
    call {:si_unique_call 799} sdv_RtlZeroMemory(0, Tmp_690);
    goto L34;

  L34:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} newIDs == 0;
    havoc Tmp_687;
    call {:si_unique_call 800} WPP_RECORDER_SF_(g_RecorderLog, 2, 8, 11, Tmp_687);
    Tmp_685 := 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} newIDs != 0;
    buf := newIDs;
    Tmp_686 := strConst__li2bpl17;
    call {:si_unique_call 801} vslice_dummy_var_96 := RtlStringCchPrintfW(suffix, 7, Tmp_686);
    call {:si_unique_call 802} sdv_251 := WStrLen(suffix);
    suffixLen := sdv_251 + 1;
    goto L50;

  L50:
    call {:si_unique_call 803} newIdLen, oldIdLen, vslice_dummy_var_95, vslice_dummy_var_97 := AppendInterfaceNumber_loop_L50(suffixLen, newIdLen, buf, oldIdLen, suffix, oldIDs, vslice_dummy_var_95, vslice_dummy_var_97);
    goto L50_last;

  L50_last:
    assume {:nonnull} oldIDs != 0;
    assume oldIDs > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.VOID[oldIDs] != 0;
    call {:si_unique_call 804} oldIdLen := WStrLen(oldIDs);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} oldIdLen + suffixLen + 1 > newIdLen;
    havoc Tmp_689;
    call {:si_unique_call 805} WPP_RECORDER_SF_ddd(g_RecorderLog, 2, 8, 12, Tmp_689, newIdLen, oldIdLen, suffixLen);
    call {:si_unique_call 806} ExFreePoolWithTag(0, -1016958123);
    Tmp_685 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} newIdLen >= oldIdLen + suffixLen + 1;
    call {:si_unique_call 807} vslice_dummy_var_95 := RtlStringCchCopyW(buf, newIdLen, oldIDs);
    newIdLen := newIdLen - oldIdLen;
    call {:si_unique_call 808} vslice_dummy_var_97 := RtlStringCchCopyW(buf, newIdLen, suffix);
    newIdLen := newIdLen - suffixLen;
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} Mem_T.VOID[oldIDs] == 0;
    buf := 0;
    Tmp_685 := newIDs;
    goto L1;

  anon15_Then:
    assume {:partition} newIDs == 0;
    goto L34;
}



procedure {:origName "GetChannelDescForInterface"} GetChannelDescForInterface(actual_parentFdoExt_60: int, actual_interfaceNum_1: int) returns (Tmp_692: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetChannelDescForInterface"} GetChannelDescForInterface(actual_parentFdoExt_60: int, actual_interfaceNum_1: int) returns (Tmp_692: int)
{
  var {:pointer} channelDesc: int;
  var {:pointer} commonDesc_2: int;
  var {:pointer} interfaceDesc_2: int;
  var {:pointer} Tmp_693: int;
  var {:scalar} foundSupportedCSM: int;
  var {:pointer} methodAndVar: int;
  var {:pointer} Tmp_695: int;
  var {:pointer} parentFdoExt_60: int;
  var vslice_dummy_var_244: int;

  anon0:
    parentFdoExt_60 := actual_parentFdoExt_60;
    channelDesc := 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    interfaceDesc_2 := 0;
    goto L11;

  L11:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} interfaceDesc_2 != 0;
    commonDesc_2 := interfaceDesc_2;
    goto L15;

  L15:
    call {:si_unique_call 809} Tmp_693 := GetChannelDescForInterface_loop_L15(commonDesc_2, Tmp_693, parentFdoExt_60);
    goto L15_last;

  L15_last:
    assume {:nonnull} parentFdoExt_60 != 0;
    assume parentFdoExt_60 > 0;
    havoc Tmp_693;
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_693)] > commonDesc_2;
    assume {:nonnull} commonDesc_2 != 0;
    assume commonDesc_2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_2)] == 34;
    channelDesc := commonDesc_2;
    goto L12;

  L12:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} channelDesc != 0;
    foundSupportedCSM := 0;
    assume {:nonnull} channelDesc != 0;
    assume channelDesc > 0;
    havoc methodAndVar;
    goto L24;

  L24:
    call {:si_unique_call 810} GetChannelDescForInterface_loop_L24(channelDesc, methodAndVar);
    goto L24_last;

  L24_last:
    assume {:nonnull} channelDesc != 0;
    assume channelDesc > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(channelDesc)] > methodAndVar;
    assume {:nonnull} methodAndVar != 0;
    assume methodAndVar > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    foundSupportedCSM := 1;
    goto L25;

  L25:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} foundSupportedCSM == 0;
    havoc Tmp_695;
    assume {:nonnull} parentFdoExt_60 != 0;
    assume parentFdoExt_60 > 0;
    havoc vslice_dummy_var_244;
    call {:si_unique_call 811} WPP_RECORDER_SF_(vslice_dummy_var_244, 2, 8, 16, Tmp_695);
    channelDesc := 0;
    goto L20;

  L20:
    Tmp_692 := channelDesc;
    return;

  anon21_Then:
    assume {:partition} foundSupportedCSM != 0;
    goto L20;

  anon22_Then:
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} methodAndVar >= Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(channelDesc)];
    goto L25;

  anon18_Then:
    assume {:partition} channelDesc == 0;
    goto L20;

  anon19_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_2)] != 34;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} commonDesc_2 >= Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_693)];
    goto L12;

  anon17_Then:
    assume {:partition} interfaceDesc_2 == 0;
    goto L12;

  anon23_Then:
    call {:si_unique_call 812} interfaceDesc_2 := __HAVOC_malloc(1);
    goto L11;
}



procedure {:origName "GetUniqueIdFromCSInterface"} GetUniqueIdFromCSInterface(actual_parentFdoExt_61: int, actual_serialNumData: int, actual_serialNumLen: int) returns (Tmp_696: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetUniqueIdFromCSInterface"} GetUniqueIdFromCSInterface(actual_parentFdoExt_61: int, actual_serialNumData: int, actual_serialNumLen: int) returns (Tmp_696: int)
{
  var {:pointer} SD10: int;
  var {:scalar} bufLen: int;
  var {:pointer} sdv_254: int;
  var {:pointer} Tmp_697: int;
  var {:pointer} Tmp_698: int;
  var {:scalar} Tmp_699: int;
  var {:pointer} uniqueIdBuf: int;
  var {:scalar} sdv_10: int;
  var {:pointer} urb_8: int;
  var {:pointer} Tmp_701: int;
  var {:scalar} status_41: int;
  var {:scalar} Tmp_702: int;
  var {:pointer} Tmp_703: int;
  var {:scalar} Tmp_704: int;
  var {:pointer} parentFdoExt_61: int;
  var {:pointer} serialNumData: int;
  var {:scalar} serialNumLen: int;
  var boogieTmp: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;

  anon0:
    call {:si_unique_call 813} sdv_10 := __HAVOC_malloc(8);
    parentFdoExt_61 := actual_parentFdoExt_61;
    serialNumData := actual_serialNumData;
    serialNumLen := actual_serialNumLen;
    bufLen := 0;
    call {:si_unique_call 814} sdv_254 := ExAllocatePoolWithTag(512, 256, -1016958123);
    uniqueIdBuf := sdv_254;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} uniqueIdBuf != 0;
    call {:si_unique_call 815} sdv_RtlZeroMemory(0, 256);
    goto L12;

  L12:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} uniqueIdBuf != 0;
    call {:si_unique_call 816} status_41 := corral_nondet();
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status_41 < 0;
    havoc Tmp_698;
    assume {:nonnull} parentFdoExt_61 != 0;
    assume parentFdoExt_61 > 0;
    havoc vslice_dummy_var_245;
    call {:si_unique_call 817} WPP_RECORDER_SF_d(vslice_dummy_var_245, 2, 8, 12, Tmp_698, status_41);
    goto L70;

  L70:
    call {:si_unique_call 818} ExFreePoolWithTag(0, -1016958123);
    goto L73;

  L73:
    assume {:nonnull} serialNumData != 0;
    assume serialNumData > 0;
    assume {:nonnull} serialNumData != 0;
    assume serialNumData > 0;
    Tmp_696 := status_41;
    goto LM2;

  LM2:
    return;

  anon16_Then:
    assume {:partition} 0 <= status_41;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    call {:si_unique_call 819} boogieTmp := corral_nondet();
    call {:si_unique_call 820} status_41 := SubmitUrb(parentFdoExt_61, urb_8, 1, 0, 0, 1);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_41 < 0;
    havoc Tmp_703;
    assume {:nonnull} parentFdoExt_61 != 0;
    assume parentFdoExt_61 > 0;
    havoc vslice_dummy_var_246;
    call {:si_unique_call 821} WPP_RECORDER_SF_d(vslice_dummy_var_246, 2, 8, 11, Tmp_703, status_41);
    goto L67;

  L67:
    goto L70;

  anon17_Then:
    assume {:partition} 0 <= status_41;
    assume {:nonnull} urb_8 != 0;
    assume urb_8 > 0;
    havoc bufLen;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} 256 >= bufLen;
    Tmp_704 := bufLen;
    goto L46;

  L46:
    bufLen := Tmp_704;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} serialNumLen >= bufLen;
    Tmp_702 := bufLen;
    goto L50;

  L50:
    bufLen := Tmp_702;
    call {:si_unique_call 822} sdv_RtlCopyMemory(0, 0, bufLen);
    Tmp_699 := bufLen;
    assume {:nonnull} serialNumData != 0;
    assume serialNumData > 0;
    havoc vslice_dummy_var_247;
    call {:si_unique_call 823} SD10 := log_xstr(vslice_dummy_var_247, Tmp_699);
    assume {:nonnull} SD10 != 0;
    assume SD10 > 0;
    assume {:nonnull} sdv_10 != 0;
    assume sdv_10 > 0;
    assume {:nonnull} SD10 != 0;
    assume SD10 > 0;
    assume {:nonnull} sdv_10 != 0;
    assume sdv_10 > 0;
    havoc Tmp_697;
    assume {:nonnull} parentFdoExt_61 != 0;
    assume parentFdoExt_61 > 0;
    havoc vslice_dummy_var_248;
    call {:si_unique_call 824} WPP_RECORDER_SF__HEX_(vslice_dummy_var_248, 4, 1, 10, Tmp_697, sdv_10);
    goto L67;

  anon21_Then:
    assume {:partition} bufLen > serialNumLen;
    Tmp_702 := serialNumLen;
    goto L50;

  anon20_Then:
    assume {:partition} bufLen > 256;
    Tmp_704 := 256;
    goto L46;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} uniqueIdBuf == 0;
    status_41 := -1073741670;
    havoc Tmp_701;
    assume {:nonnull} parentFdoExt_61 != 0;
    assume parentFdoExt_61 > 0;
    havoc vslice_dummy_var_249;
    call {:si_unique_call 825} WPP_RECORDER_SF_d(vslice_dummy_var_249, 2, 8, 13, Tmp_701, status_41);
    goto L73;

  anon18_Then:
    assume {:partition} uniqueIdBuf == 0;
    goto L12;
}



procedure {:origName "InitCSInfo"} InitCSInfo(actual_parentFdoExt_62: int, actual_CSIfaceNumber: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitCSInfo"} InitCSInfo(actual_parentFdoExt_62: int, actual_CSIfaceNumber: int)
{
  var {:pointer} channelDesc_1: int;
  var {:pointer} parentFdoExt_62: int;
  var {:scalar} CSIfaceNumber: int;
  var vslice_dummy_var_98: int;

  anon0:
    call {:si_unique_call 826} vslice_dummy_var_98 := __HAVOC_malloc(4);
    parentFdoExt_62 := actual_parentFdoExt_62;
    CSIfaceNumber := actual_CSIfaceNumber;
    call {:si_unique_call 827} channelDesc_1 := GetChannelDescForInterface(parentFdoExt_62, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} channelDesc_1 != 0;
    assume {:nonnull} channelDesc_1 != 0;
    assume channelDesc_1 > 0;
    assume {:nonnull} parentFdoExt_62 != 0;
    assume parentFdoExt_62 > 0;
    assume {:nonnull} parentFdoExt_62 != 0;
    assume parentFdoExt_62 > 0;
    assume {:nonnull} parentFdoExt_62 != 0;
    assume parentFdoExt_62 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} channelDesc_1 == 0;
    goto L1;
}



procedure {:origName "GetMediaSerialNumber"} GetMediaSerialNumber(actual_parentFdoExt_63: int, actual_irp_29: int) returns (Tmp_707: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetMediaSerialNumber"} GetMediaSerialNumber(actual_parentFdoExt_63: int, actual_irp_29: int) returns (Tmp_707: int)
{
  var {:pointer} irpSp_9: int;
  var {:pointer} Tmp_708: int;
  var {:scalar} serialNumLen_1: int;
  var {:pointer} serialNumData_1: int;
  var {:pointer} Tmp_709: int;
  var {:scalar} status_42: int;
  var {:pointer} parentFdoExt_63: int;
  var {:pointer} irp_29: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;

  anon0:
    parentFdoExt_63 := actual_parentFdoExt_63;
    irp_29 := actual_irp_29;
    call {:si_unique_call 828} irpSp_9 := sdv_IoGetCurrentIrpStackLocation(irp_29);
    havoc Tmp_708;
    assume {:nonnull} parentFdoExt_63 != 0;
    assume parentFdoExt_63 > 0;
    havoc vslice_dummy_var_250;
    call {:si_unique_call 829} WPP_RECORDER_SF_(vslice_dummy_var_250, 4, 5, 14, Tmp_708);
    assume {:nonnull} irp_29 != 0;
    assume irp_29 > 0;
    havoc serialNumData_1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} serialNumData_1 != 0;
    assume {:nonnull} irpSp_9 != 0;
    assume irpSp_9 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} irpSp_9 != 0;
    assume irpSp_9 > 0;
    havoc serialNumLen_1;
    call {:si_unique_call 830} status_42 := GetUniqueIdFromCSInterface(parentFdoExt_63, serialNumData_1, serialNumLen_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} irp_29 != 0;
    assume irp_29 > 0;
    assume {:nonnull} serialNumData_1 != 0;
    assume serialNumData_1 > 0;
    goto L30;

  L30:
    Tmp_707 := status_42;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    goto L22;

  L22:
    status_42 := -1073741306;
    havoc Tmp_709;
    assume {:nonnull} parentFdoExt_63 != 0;
    assume parentFdoExt_63 > 0;
    havoc vslice_dummy_var_251;
    call {:si_unique_call 831} WPP_RECORDER_SF_qd(vslice_dummy_var_251, 2, 8, 15, Tmp_709, irp_29, status_42);
    goto L30;

  anon8_Then:
    assume {:partition} serialNumData_1 == 0;
    goto L22;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var {:scalar} Tmp_711: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_252: int;

  anon0:
    call {:si_unique_call 832} Tmp_711 := __HAVOC_malloc(4);
    call {:si_unique_call 833} vslice_dummy_var_99 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    havoc vslice_dummy_var_252;
    Mem_T.VOID[Tmp_711] := vslice_dummy_var_252;
    return;
}



procedure {:origName "AllocateResourcesForFunctionSuspend"} AllocateResourcesForFunctionSuspend(actual_parentFdoExt_64: int, actual_functionPdoExt_12: int) returns (Tmp_714: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AllocateResourcesForFunctionSuspend"} AllocateResourcesForFunctionSuspend(actual_parentFdoExt_64: int, actual_functionPdoExt_12: int) returns (Tmp_714: int)
{
  var {:pointer} Tmp_715: int;
  var {:pointer} Tmp_716: int;
  var {:pointer} sdv_260: int;
  var {:pointer} Tmp_717: int;
  var {:pointer} Tmp_718: int;
  var {:pointer} Tmp_719: int;
  var {:pointer} suspendContext: int;
  var {:pointer} Tmp_720: int;
  var {:pointer} Tmp_721: int;
  var {:scalar} status_43: int;
  var {:pointer} Tmp_722: int;
  var {:pointer} Tmp_723: int;
  var {:pointer} parentFdoExt_64: int;
  var {:pointer} functionPdoExt_12: int;
  var boogieTmp: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;

  anon0:
    parentFdoExt_64 := actual_parentFdoExt_64;
    functionPdoExt_12 := actual_functionPdoExt_12;
    call {:si_unique_call 834} sdv_do_paged_code_check();
    call {:si_unique_call 835} sdv_260 := ExAllocatePoolWithTag(512, 52, -1016958123);
    suspendContext := sdv_260;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} suspendContext != 0;
    call {:si_unique_call 836} sdv_RtlZeroMemory(0, 52);
    goto L13;

  L13:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} suspendContext == 0;
    havoc Tmp_717;
    assume {:nonnull} parentFdoExt_64 != 0;
    assume parentFdoExt_64 > 0;
    havoc vslice_dummy_var_253;
    call {:si_unique_call 837} WPP_RECORDER_SF_(vslice_dummy_var_253, 2, 8, 55, Tmp_717);
    Tmp_714 := -1073741670;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} suspendContext != 0;
    assume {:nonnull} functionPdoExt_12 != 0;
    assume functionPdoExt_12 > 0;
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    call {:si_unique_call 838} boogieTmp := IoAllocateWorkItem(0);
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} parentFdoExt_64 != 0;
    assume parentFdoExt_64 > 0;
    havoc Tmp_720;
    assume {:nonnull} Tmp_720 != 0;
    assume Tmp_720 > 0;
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    havoc vslice_dummy_var_254;
    call {:si_unique_call 839} boogieTmp := IoAllocateIrp(vslice_dummy_var_254, 0);
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    call {:si_unique_call 840} boogieTmp := IoAllocateWorkItem(0);
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} parentFdoExt_64 != 0;
    assume parentFdoExt_64 > 0;
    havoc Tmp_723;
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    havoc vslice_dummy_var_255;
    call {:si_unique_call 841} boogieTmp := IoAllocateIrp(vslice_dummy_var_255, 0);
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 842} status_43 := corral_nondet();
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_43 < 0;
    havoc Tmp_721;
    assume {:nonnull} parentFdoExt_64 != 0;
    assume parentFdoExt_64 > 0;
    havoc vslice_dummy_var_256;
    call {:si_unique_call 843} WPP_RECORDER_SF_d(vslice_dummy_var_256, 2, 8, 60, Tmp_721, status_43);
    Tmp_714 := status_43;
    goto L1;

  anon20_Then:
    assume {:partition} 0 <= status_43;
    call {:si_unique_call 844} Tmp_718 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_718 != 0;
    assume Tmp_718 > 0;
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    havoc vslice_dummy_var_257;
    Mem_T.VOID[Tmp_718] := vslice_dummy_var_257;
    call {:si_unique_call 845} sdv_KeInitializeSpinLock(Tmp_718);
    assume {:nonnull} Tmp_718 != 0;
    assume Tmp_718 > 0;
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    assume {:nonnull} suspendContext != 0;
    assume suspendContext > 0;
    Tmp_714 := 0;
    goto L1;

  anon19_Then:
    status_43 := -1073741670;
    havoc Tmp_719;
    assume {:nonnull} functionPdoExt_12 != 0;
    assume functionPdoExt_12 > 0;
    havoc vslice_dummy_var_258;
    call {:si_unique_call 846} WPP_RECORDER_SF_d(vslice_dummy_var_258, 2, 8, 59, Tmp_719, status_43);
    Tmp_714 := status_43;
    goto L1;

  anon18_Then:
    status_43 := -1073741670;
    havoc Tmp_715;
    assume {:nonnull} parentFdoExt_64 != 0;
    assume parentFdoExt_64 > 0;
    havoc vslice_dummy_var_259;
    call {:si_unique_call 847} WPP_RECORDER_SF_d(vslice_dummy_var_259, 2, 8, 58, Tmp_715, status_43);
    Tmp_714 := status_43;
    goto L1;

  anon17_Then:
    status_43 := -1073741670;
    havoc Tmp_716;
    assume {:nonnull} functionPdoExt_12 != 0;
    assume functionPdoExt_12 > 0;
    havoc vslice_dummy_var_260;
    call {:si_unique_call 848} WPP_RECORDER_SF_d(vslice_dummy_var_260, 2, 8, 57, Tmp_716, status_43);
    Tmp_714 := status_43;
    goto L1;

  anon16_Then:
    status_43 := -1073741670;
    havoc Tmp_722;
    assume {:nonnull} parentFdoExt_64 != 0;
    assume parentFdoExt_64 > 0;
    havoc vslice_dummy_var_261;
    call {:si_unique_call 849} WPP_RECORDER_SF_(vslice_dummy_var_261, 2, 8, 56, Tmp_722);
    Tmp_714 := status_43;
    goto L1;

  anon21_Then:
    assume {:partition} suspendContext == 0;
    goto L13;
}



procedure {:origName "DispatchPdoUrb"} DispatchPdoUrb(actual_functionPdoExt_13: int, actual_irp_30: int) returns (Tmp_724: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoUrb"} DispatchPdoUrb(actual_functionPdoExt_13: int, actual_irp_30: int) returns (Tmp_724: int)
{
  var {:pointer} irpSp_10: int;
  var {:pointer} Tmp_725: int;
  var {:scalar} Tmp_726: int;
  var {:pointer} Tmp_727: int;
  var {:pointer} Tmp_728: int;
  var {:pointer} parentFdoExt_65: int;
  var {:pointer} Tmp_729: int;
  var {:pointer} urb_9: int;
  var {:scalar} urbFunc: int;
  var {:pointer} Tmp_730: int;
  var {:pointer} Tmp_732: int;
  var {:scalar} status_44: int;
  var {:pointer} functionPdoExt_13: int;
  var {:pointer} irp_30: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;

  anon0:
    functionPdoExt_13 := actual_functionPdoExt_13;
    irp_30 := actual_irp_30;
    call {:si_unique_call 850} irpSp_10 := sdv_IoGetCurrentIrpStackLocation(irp_30);
    status_44 := 0;
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    havoc parentFdoExt_65;
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    havoc urb_9;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} urb_9 == 0;
    havoc Tmp_725;
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    havoc vslice_dummy_var_262;
    havoc vslice_dummy_var_263;
    call {:si_unique_call 851} WPP_RECORDER_SF_q(vslice_dummy_var_262, 2, 8, 30, Tmp_725, vslice_dummy_var_263);
    status_44 := -1073741811;
    call {:si_unique_call 852} UsbcCompleteIrp(parentFdoExt_65, status_44, irp_30);
    Tmp_724 := status_44;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:partition} urb_9 != 0;
    call {:si_unique_call 853} status_44 := UsbcIncrementPendingCount(parentFdoExt_65, -799714750, irp_30);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_44 < 0;
    havoc Tmp_730;
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    assume {:nonnull} parentFdoExt_65 != 0;
    assume parentFdoExt_65 > 0;
    havoc vslice_dummy_var_264;
    havoc vslice_dummy_var_265;
    havoc vslice_dummy_var_266;
    call {:si_unique_call 854} WPP_RECORDER_SF_qd(vslice_dummy_var_264, 2, 8, 31, Tmp_730, vslice_dummy_var_265, vslice_dummy_var_266);
    call {:si_unique_call 855} UsbcCompleteIrp(parentFdoExt_65, status_44, irp_30);
    Tmp_724 := status_44;
    goto L1;

  anon25_Then:
    assume {:partition} 0 <= status_44;
    assume {:nonnull} urb_9 != 0;
    assume urb_9 > 0;
    havoc urbFunc;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} urbFunc != 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} urbFunc != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} urbFunc != 11;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L82;

  L82:
    assume {:nonnull} parentFdoExt_65 != 0;
    assume parentFdoExt_65 > 0;
    havoc vslice_dummy_var_267;
    call {:si_unique_call 856} status_44 := UsbcForwardIrp(parentFdoExt_65, vslice_dummy_var_267, irp_30);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 857} UsbcDecrementPendingCount(parentFdoExt_65, irp_30);
    goto L52;

  L52:
    Tmp_724 := status_44;
    goto L1;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    Tmp_726 := urbFunc;
    havoc Tmp_727;
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    havoc vslice_dummy_var_268;
    call {:si_unique_call 858} WPP_RECORDER_SF_D(vslice_dummy_var_268, 5, 4, 35, Tmp_727, Tmp_726);
    goto L82;

  anon28_Then:
    assume {:partition} urbFunc == 11;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L47;

  L47:
    call {:si_unique_call 859} status_44 := DispatchPdoUrbGetDescriptorFromDevice(functionPdoExt_13, irp_30);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L52;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    havoc Tmp_729;
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    havoc vslice_dummy_var_269;
    havoc vslice_dummy_var_270;
    call {:si_unique_call 860} WPP_RECORDER_SF_qq(vslice_dummy_var_269, 5, 1, 33, Tmp_729, vslice_dummy_var_270, urb_9);
    goto L47;

  anon29_Then:
    assume {:partition} urbFunc == 1;
    havoc Tmp_732;
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    havoc vslice_dummy_var_271;
    havoc vslice_dummy_var_272;
    call {:si_unique_call 861} WPP_RECORDER_SF_qq(vslice_dummy_var_271, 4, 1, 34, Tmp_732, vslice_dummy_var_272, urb_9);
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    assume {:nonnull} parentFdoExt_65 != 0;
    assume parentFdoExt_65 > 0;
    havoc vslice_dummy_var_273;
    havoc vslice_dummy_var_274;
    call {:si_unique_call 862} status_44 := UsbcForwardIrpWithCompletion(parentFdoExt_65, vslice_dummy_var_273, irp_30, li2bplFunctionConstant1789, vslice_dummy_var_274, functionPdoExt_13);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L52;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} urbFunc == 0;
    havoc Tmp_728;
    assume {:nonnull} functionPdoExt_13 != 0;
    assume functionPdoExt_13 > 0;
    havoc vslice_dummy_var_275;
    havoc vslice_dummy_var_276;
    call {:si_unique_call 863} WPP_RECORDER_SF_qq(vslice_dummy_var_275, 4, 1, 32, Tmp_728, vslice_dummy_var_276, urb_9);
    call {:si_unique_call 864} status_44 := DispatchPdoUrbSelectConfiguration(functionPdoExt_13, irp_30);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L52;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "QueryFunctionPdoID"} QueryFunctionPdoID(actual_functionPdoExt_14: int, actual_irp_31: int) returns (Tmp_733: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QueryFunctionPdoID"} QueryFunctionPdoID(actual_functionPdoExt_14: int, actual_irp_31: int) returns (Tmp_733: int)
{
  var {:pointer} oldId: int;
  var {:pointer} Tmp_734: int;
  var {:pointer} functionAssoc_3: int;
  var {:scalar} Tmp_735: int;
  var {:pointer} sdv_272: int;
  var {:pointer} tmpId: int;
  var {:pointer} instanceId: int;
  var {:pointer} Tmp_736: int;
  var {:pointer} irpSp_11: int;
  var {:scalar} newIdLen_1: int;
  var {:pointer} sdv_274: int;
  var {:scalar} Tmp_737: int;
  var {:pointer} Tmp_738: int;
  var {:pointer} Tmp_739: int;
  var {:scalar} bInterfaceSubClass: int;
  var {:pointer} ifaceDesc: int;
  var {:pointer} Tmp_740: int;
  var {:scalar} Tmp_741: int;
  var {:pointer} endPtr: int;
  var {:scalar} Tmp_742: int;
  var {:pointer} sdv_276: int;
  var {:pointer} Tmp_743: int;
  var {:scalar} bInterfaceClass: int;
  var {:scalar} Tmp_744: int;
  var {:pointer} Tmp_745: int;
  var {:pointer} Tmp_746: int;
  var {:pointer} Tmp_747: int;
  var {:pointer} Tmp_748: int;
  var {:scalar} instanceDecoration: int;
  var {:pointer} newIDs_1: int;
  var {:scalar} Tmp_749: int;
  var {:pointer} Tmp_750: int;
  var {:pointer} compatibleID: int;
  var {:scalar} bInterfaceProtocol: int;
  var {:scalar} Tmp_751: int;
  var {:pointer} oldIDs_1: int;
  var {:pointer} Tmp_752: int;
  var {:pointer} Tmp_753: int;
  var {:scalar} Tmp_754: int;
  var {:pointer} newId: int;
  var {:scalar} Tmp_755: int;
  var {:dopa} {:scalar} idLength: int;
  var {:scalar} sdv_287: int;
  var {:pointer} Tmp_756: int;
  var {:scalar} Tmp_758: int;
  var {:pointer} Tmp_759: int;
  var {:pointer} sdv_288: int;
  var {:pointer} sdv_289: int;
  var {:pointer} Tmp_760: int;
  var {:scalar} Tmp_761: int;
  var {:pointer} Tmp_762: int;
  var {:scalar} isMSOSComaptibleId: int;
  var {:scalar} Tmp_763: int;
  var {:scalar} Tmp_765: int;
  var {:pointer} Tmp_766: int;
  var {:pointer} subCompatibleID: int;
  var {:scalar} status_45: int;
  var {:scalar} sdv_292: int;
  var {:scalar} Tmp_767: int;
  var {:pointer} Tmp_770: int;
  var {:scalar} Tmp_771: int;
  var {:pointer} functionPdoExt_14: int;
  var {:pointer} irp_31: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;

  anon0:
    call {:si_unique_call 865} endPtr := __HAVOC_malloc(4);
    call {:si_unique_call 866} compatibleID := __HAVOC_malloc(4);
    call {:si_unique_call 867} idLength := __HAVOC_malloc(4);
    call {:si_unique_call 868} subCompatibleID := __HAVOC_malloc(4);
    functionPdoExt_14 := actual_functionPdoExt_14;
    irp_31 := actual_irp_31;
    call {:si_unique_call 869} Tmp_739 := __HAVOC_malloc(20);
    call {:si_unique_call 870} Tmp_770 := __HAVOC_malloc(20);
    status_45 := -1073741823;
    newIdLen_1 := 0;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc functionAssoc_3;
    call {:si_unique_call 871} sdv_do_paged_code_check();
    call {:si_unique_call 872} irpSp_11 := sdv_IoGetCurrentIrpStackLocation(irp_31);
    assume {:nonnull} irpSp_11 != 0;
    assume irpSp_11 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} irpSp_11 != 0;
    assume irpSp_11 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} irpSp_11 != 0;
    assume irpSp_11 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} irpSp_11 != 0;
    assume irpSp_11 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    Tmp_739 := strConst__li2bpl18;
    call {:si_unique_call 873} sdv_288 := MemDup(Tmp_739, 10);
    instanceId := sdv_288;
    instanceDecoration := 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} instanceId != 0;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    instanceDecoration := 49152;
    goto L36;

  L36:
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc Tmp_742;
    Tmp_770 := strConst__li2bpl22;
    call {:si_unique_call 874} vslice_dummy_var_103 := RtlStringCchPrintfW(instanceId, 5, Tmp_770);
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := 0;
    goto L44;

  L44:
    Tmp_733 := status_45;
    goto LM2;

  LM2:
    return;

  anon89_Then:
    goto L36;

  anon129_Then:
    assume {:partition} instanceId == 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := -1073741670;
    goto L44;

  anon115_Then:
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    havoc status_45;
    goto L44;

  anon116_Then:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    call {:si_unique_call 875} isMSOSComaptibleId := IsMSOSCompatibleIDFlagSet(functionPdoExt_14);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} isMSOSComaptibleId != 0;
    call {:si_unique_call 876} newId := PrependMSOSCompatibleIDs(functionPdoExt_14);
    goto L65;

  L65:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} isMSOSComaptibleId != 0;
    Tmp_740 := strConst__li2bpl20;
    goto L77;

  L77:
    havoc Tmp_738;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_277;
    havoc vslice_dummy_var_278;
    call {:si_unique_call 877} WPP_RECORDER_SF_sq(vslice_dummy_var_277, 4, 2, 22, Tmp_738, Tmp_740, vslice_dummy_var_278);
    goto L44;

  anon94_Then:
    assume {:partition} isMSOSComaptibleId == 0;
    Tmp_740 := strConst__li2bpl19;
    goto L77;

  anon93_Then:
    assume {:partition} newId == 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := -1073741670;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} isMSOSComaptibleId != 0;
    Tmp_748 := strConst__li2bpl21;
    goto L91;

  L91:
    havoc Tmp_747;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_279;
    call {:si_unique_call 878} WPP_RECORDER_SF_sd(vslice_dummy_var_279, 2, 8, 23, Tmp_747, Tmp_748, status_45);
    goto L44;

  anon95_Then:
    assume {:partition} isMSOSComaptibleId == 0;
    Tmp_748 := strConst__li2bpl19;
    goto L91;

  anon92_Then:
    assume {:partition} isMSOSComaptibleId == 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_771;
    call {:si_unique_call 879} sdv_276 := ExAllocatePoolWithTag(1, Tmp_771, -1016958123);
    newId := sdv_276;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_763;
    call {:si_unique_call 880} sdv_RtlZeroMemory(0, Tmp_763);
    goto L100;

  L100:
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_741;
    call {:si_unique_call 881} sdv_RtlCopyMemory(0, 0, Tmp_741);
    goto L65;

  anon96_Then:
    assume {:partition} newId == 0;
    goto L65;

  anon128_Then:
    assume {:partition} newId == 0;
    goto L100;

  anon91_Then:
    goto L52;

  L52:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_760;
    assume {:nonnull} Tmp_760 != 0;
    assume Tmp_760 > 0;
    havoc Tmp_766;
    assume {:nonnull} Tmp_766 != 0;
    assume Tmp_766 > 0;
    havoc ifaceDesc;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} ifaceDesc != 0;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    assume {:nonnull} ifaceDesc != 0;
    assume ifaceDesc > 0;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    ifaceDesc := 0;
    goto L112;

  L112:
    assume {:nonnull} ifaceDesc != 0;
    assume ifaceDesc > 0;
    havoc bInterfaceClass;
    assume {:nonnull} ifaceDesc != 0;
    assume ifaceDesc > 0;
    havoc bInterfaceSubClass;
    assume {:nonnull} ifaceDesc != 0;
    assume ifaceDesc > 0;
    havoc bInterfaceProtocol;
    assume {:nonnull} compatibleID != 0;
    assume compatibleID > 0;
    assume {:nonnull} subCompatibleID != 0;
    assume subCompatibleID > 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_762;
    assume {:nonnull} Tmp_762 != 0;
    assume Tmp_762 > 0;
    havoc bInterfaceClass;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_752;
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    havoc bInterfaceSubClass;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_753;
    assume {:nonnull} Tmp_753 != 0;
    assume Tmp_753 > 0;
    havoc bInterfaceProtocol;
    goto L124;

  L124:
    call {:si_unique_call 882} vslice_dummy_var_100 := GetFunctionMSOSCompatibleIDs(functionPdoExt_14, compatibleID, subCompatibleID);
    assume {:nonnull} compatibleID != 0;
    assume compatibleID > 0;
    assume {:nonnull} subCompatibleID != 0;
    assume subCompatibleID > 0;
    havoc vslice_dummy_var_280;
    havoc vslice_dummy_var_281;
    call {:si_unique_call 883} newId := BuildCompatibleIDs(vslice_dummy_var_280, vslice_dummy_var_281, bInterfaceClass, bInterfaceSubClass, bInterfaceProtocol);
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} newId != 0;
    oldId := newId;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    call {:si_unique_call 884} newId := AppendPdoIds(oldId, compatibleIds__PARENT_FUNCTION_ASSOC(functionAssoc_3));
    call {:si_unique_call 885} ExFreePoolWithTag(0, -1016958123);
    goto L135;

  L135:
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    status_45 := 0;
    goto L44;

  anon127_Then:
    status_45 := -1073741670;
    goto L44;

  anon99_Then:
    assume {:partition} newId == 0;
    goto L135;

  anon98_Then:
    goto L135;

  anon126_Then:
    goto L124;

  anon125_Then:
    call {:si_unique_call 886} ifaceDesc := __HAVOC_malloc(1);
    goto L112;

  anon97_Then:
    goto L112;

  anon124_Then:
    assume {:partition} ifaceDesc == 0;
    status_45 := -1073741670;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    goto L44;

  anon90_Then:
    goto L52;

  anon117_Then:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_754;
    call {:si_unique_call 887} sdv_289 := ExAllocatePoolWithTag(1, Tmp_754, -1016958123);
    newId := sdv_289;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_735;
    call {:si_unique_call 888} sdv_RtlZeroMemory(0, Tmp_735);
    goto L161;

  L161:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_744;
    call {:si_unique_call 889} sdv_RtlCopyMemory(0, 0, Tmp_744);
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := 0;
    havoc Tmp_745;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_282;
    havoc vslice_dummy_var_283;
    call {:si_unique_call 890} WPP_RECORDER_SF_q(vslice_dummy_var_282, 4, 2, 18, Tmp_745, vslice_dummy_var_283);
    goto L44;

  anon101_Then:
    assume {:partition} newId == 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := -1073741670;
    havoc Tmp_746;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_284;
    call {:si_unique_call 891} WPP_RECORDER_SF_d(vslice_dummy_var_284, 2, 8, 19, Tmp_746, status_45);
    goto L44;

  anon123_Then:
    assume {:partition} newId == 0;
    goto L161;

  anon100_Then:
    goto L151;

  L151:
    call {:si_unique_call 892} sdv_IoCopyCurrentIrpStackLocationToNext(irp_31);
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc Tmp_750;
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_285;
    havoc vslice_dummy_var_286;
    call {:si_unique_call 893} status_45 := CallDriverSync(vslice_dummy_var_285, irp_31, 0, vslice_dummy_var_286);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} yogi_error != 1;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} status_45 >= 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    havoc oldIDs_1;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_287;
    call {:si_unique_call 894} newIDs_1 := AppendInterfaceNumber(oldIDs_1, vslice_dummy_var_287);
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} newIDs_1 != 0;
    call {:si_unique_call 895} sdv_ExFreePool(0);
    oldIDs_1 := newIDs_1;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    call {:si_unique_call 896} newIDs_1 := AppendPdoIds(oldIDs_1, hardwareIds__PARENT_FUNCTION_ASSOC(functionAssoc_3));
    goto L207;

  L207:
    call {:si_unique_call 897} sdv_ExFreePool(0);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} newIDs_1 != 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := 0;
    goto L44;

  anon105_Then:
    assume {:partition} newIDs_1 == 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := -1073741823;
    goto L44;

  anon104_Then:
    assume {:partition} newIDs_1 == 0;
    goto L207;

  anon103_Then:
    goto L207;

  anon102_Then:
    assume {:partition} 0 > status_45;
    goto L44;

  anon122_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    goto L151;

  anon87_Then:
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} idLength != 0;
    assume idLength > 0;
    Mem_T.VOID[idLength] := 0;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    havoc Tmp_755;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    Tmp_736 := hardwareIds__PARENT_FUNCTION_ASSOC(functionAssoc_3);
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    havoc vslice_dummy_var_288;
    call {:si_unique_call 898} status_45 := RtlStringCbLengthW(vslice_dummy_var_288, Tmp_755, idLength);
    call {:si_unique_call 899} sdv_292 := sdv_NT_ERROR(status_45);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} sdv_292 == 0;
    assume {:nonnull} idLength != 0;
    assume idLength > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.VOID[idLength] != 0;
    assume {:nonnull} idLength != 0;
    assume idLength > 0;
    Tmp_765 := Mem_T.VOID[idLength] + 4;
    call {:si_unique_call 900} sdv_272 := ExAllocatePoolWithTag(1, Tmp_765, -1016958123);
    newId := sdv_272;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} idLength != 0;
    assume idLength > 0;
    Tmp_758 := Mem_T.VOID[idLength] + 4;
    call {:si_unique_call 901} sdv_RtlZeroMemory(0, Tmp_758);
    goto L248;

  L248:
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} idLength != 0;
    assume idLength > 0;
    Tmp_761 := Mem_T.VOID[idLength] + 2;
    assume {:nonnull} functionAssoc_3 != 0;
    assume functionAssoc_3 > 0;
    Tmp_759 := hardwareIds__PARENT_FUNCTION_ASSOC(functionAssoc_3);
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    havoc vslice_dummy_var_289;
    call {:si_unique_call 902} vslice_dummy_var_102 := RtlStringCbCopyW(newId, Tmp_761, vslice_dummy_var_289);
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    status_45 := 0;
    havoc Tmp_734;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_290;
    havoc vslice_dummy_var_291;
    call {:si_unique_call 903} WPP_RECORDER_SF_q(vslice_dummy_var_290, 4, 2, 20, Tmp_734, vslice_dummy_var_291);
    goto L44;

  anon109_Then:
    assume {:partition} newId == 0;
    status_45 := -1073741670;
    havoc Tmp_756;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_292;
    call {:si_unique_call 904} WPP_RECORDER_SF_d(vslice_dummy_var_292, 2, 8, 21, Tmp_756, status_45);
    goto L44;

  anon121_Then:
    assume {:partition} newId == 0;
    goto L248;

  anon108_Then:
    assume {:partition} Mem_T.VOID[idLength] == 0;
    goto L44;

  anon107_Then:
    assume {:partition} sdv_292 != 0;
    goto L44;

  anon106_Then:
    goto L225;

  L225:
    call {:si_unique_call 905} sdv_IoCopyCurrentIrpStackLocationToNext(irp_31);
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc Tmp_743;
    assume {:nonnull} Tmp_743 != 0;
    assume Tmp_743 > 0;
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_293;
    havoc vslice_dummy_var_294;
    call {:si_unique_call 906} status_45 := CallDriverSync(vslice_dummy_var_293, irp_31, 0, vslice_dummy_var_294);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} yogi_error != 1;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} status_45 >= 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    havoc oldId;
    call {:si_unique_call 907} sdv_287 := WStrLen(oldId);
    newIdLen_1 := sdv_287 + 2;
    Tmp_767 := newIdLen_1 * 2;
    call {:si_unique_call 908} sdv_274 := ExAllocatePoolWithTag(1, Tmp_767, -1016958123);
    tmpId := sdv_274;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} tmpId != 0;
    Tmp_737 := newIdLen_1 * 2;
    call {:si_unique_call 909} sdv_RtlZeroMemory(0, Tmp_737);
    goto L297;

  L297:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} tmpId != 0;
    call {:si_unique_call 910} vslice_dummy_var_101 := RtlStringCchCopyExW(tmpId, newIdLen_1, oldId, endPtr, 0, 0);
    assume {:nonnull} endPtr != 0;
    assume endPtr > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    Tmp_749 := newIdLen_1 - 1;
    assume {:nonnull} tmpId != 0;
    assume tmpId > 0;
    Mem_T.VOID[tmpId + Tmp_749 * 4] := 0;
    Tmp_751 := newIdLen_1 - 2;
    assume {:nonnull} tmpId != 0;
    assume tmpId > 0;
    Mem_T.VOID[tmpId + Tmp_751 * 4] := 0;
    goto L310;

  L310:
    assume {:nonnull} functionPdoExt_14 != 0;
    assume functionPdoExt_14 > 0;
    havoc vslice_dummy_var_295;
    call {:si_unique_call 911} newId := AppendInterfaceNumber(tmpId, vslice_dummy_var_295);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} newId != 0;
    assume {:nonnull} irp_31 != 0;
    assume irp_31 > 0;
    goto L317;

  L317:
    call {:si_unique_call 912} ExFreePoolWithTag(0, -1016958123);
    call {:si_unique_call 913} sdv_ExFreePool(0);
    goto L44;

  anon114_Then:
    assume {:partition} newId == 0;
    status_45 := -1073741668;
    goto L317;

  anon113_Then:
    assume {:nonnull} endPtr != 0;
    assume endPtr > 0;
    havoc Mem_T.VOID;
    goto L310;

  anon112_Then:
    assume {:partition} tmpId == 0;
    status_45 := -1073741670;
    call {:si_unique_call 914} sdv_ExFreePool(0);
    goto L44;

  anon120_Then:
    assume {:partition} tmpId == 0;
    goto L297;

  anon111_Then:
    goto L44;

  anon110_Then:
    assume {:partition} 0 > status_45;
    goto L44;

  anon119_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon118_Then:
    goto L225;
}



procedure {:origName "IsFunctionRemoteWakeCapable"} IsFunctionRemoteWakeCapable(actual_parentFdoExt_66: int, actual_functionPdoExt_15: int) returns (Tmp_772: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IsFunctionRemoteWakeCapable"} IsFunctionRemoteWakeCapable(actual_parentFdoExt_66: int, actual_functionPdoExt_15: int) returns (Tmp_772: int)
{
  var {:pointer} nextSp_4: int;
  var {:pointer} Tmp_773: int;
  var {:pointer} setupPacket: int;
  var {:scalar} interfaceStatus: int;
  var {:pointer} Tmp_775: int;
  var {:pointer} Tmp_776: int;
  var {:pointer} urb_10: int;
  var {:pointer} suspendContext_1: int;
  var {:pointer} irp_32: int;
  var {:scalar} status_46: int;
  var {:pointer} Tmp_777: int;
  var {:pointer} parentFdoExt_66: int;
  var {:pointer} functionPdoExt_15: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;

  anon0:
    call {:si_unique_call 915} interfaceStatus := __HAVOC_malloc(16);
    parentFdoExt_66 := actual_parentFdoExt_66;
    functionPdoExt_15 := actual_functionPdoExt_15;
    call {:si_unique_call 916} sdv_do_paged_code_check();
    havoc Tmp_773;
    assume {:nonnull} functionPdoExt_15 != 0;
    assume functionPdoExt_15 > 0;
    havoc vslice_dummy_var_296;
    havoc vslice_dummy_var_297;
    call {:si_unique_call 917} WPP_RECORDER_SF_q(vslice_dummy_var_296, 4, 3, 51, Tmp_773, vslice_dummy_var_297);
    assume {:nonnull} functionPdoExt_15 != 0;
    assume functionPdoExt_15 > 0;
    havoc suspendContext_1;
    assume {:nonnull} suspendContext_1 != 0;
    assume suspendContext_1 > 0;
    havoc urb_10;
    assume {:nonnull} suspendContext_1 != 0;
    assume suspendContext_1 > 0;
    havoc irp_32;
    call {:si_unique_call 918} IoReuseIrp(irp_32, 0);
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    setupPacket := SetupPacket__URB_CONTROL_TRANSFER_EX(urb_10);
    assume {:nonnull} setupPacket != 0;
    assume setupPacket > 0;
    assume {:nonnull} setupPacket != 0;
    assume setupPacket > 0;
    assume {:nonnull} setupPacket != 0;
    assume setupPacket > 0;
    assume {:nonnull} setupPacket != 0;
    assume setupPacket > 0;
    assume {:nonnull} setupPacket != 0;
    assume setupPacket > 0;
    assume {:nonnull} setupPacket != 0;
    assume setupPacket > 0;
    assume {:nonnull} functionPdoExt_15 != 0;
    assume functionPdoExt_15 > 0;
    assume {:nonnull} setupPacket != 0;
    assume setupPacket > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    call {:si_unique_call 919} nextSp_4 := sdv_IoGetNextIrpStackLocation(irp_32);
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    call {:si_unique_call 920} status_46 := CallNextDriverSync(parentFdoExt_66, irp_32, 1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_46 < 0;
    goto L89;

  L89:
    havoc Tmp_775;
    assume {:nonnull} functionPdoExt_15 != 0;
    assume functionPdoExt_15 > 0;
    havoc vslice_dummy_var_298;
    havoc vslice_dummy_var_299;
    call {:si_unique_call 921} WPP_RECORDER_SF_qd(vslice_dummy_var_298, 2, 3, 52, Tmp_775, vslice_dummy_var_299, status_46);
    Tmp_772 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:partition} 0 <= status_46;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L89;

  anon12_Then:
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    havoc Tmp_777;
    assume {:nonnull} functionPdoExt_15 != 0;
    assume functionPdoExt_15 > 0;
    assume {:nonnull} urb_10 != 0;
    assume urb_10 > 0;
    havoc vslice_dummy_var_300;
    havoc vslice_dummy_var_301;
    call {:si_unique_call 922} WPP_RECORDER_SF_d(vslice_dummy_var_300, 2, 3, 53, Tmp_777, vslice_dummy_var_301);
    Tmp_772 := 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} interfaceStatus != 0;
    assume interfaceStatus > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    havoc Tmp_776;
    assume {:nonnull} functionPdoExt_15 != 0;
    assume functionPdoExt_15 > 0;
    havoc vslice_dummy_var_302;
    havoc vslice_dummy_var_303;
    havoc vslice_dummy_var_304;
    call {:si_unique_call 923} WPP_RECORDER_SF_qd(vslice_dummy_var_302, 2, 3, 54, Tmp_776, vslice_dummy_var_303, vslice_dummy_var_304);
    Tmp_772 := 0;
    goto L1;

  anon14_Then:
    Tmp_772 := 1;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "D3ColdSupportFunctionInterfaceDereference"} D3ColdSupportFunctionInterfaceDereference(actual_Context_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D3ColdSupportFunctionInterfaceDereference"} D3ColdSupportFunctionInterfaceDereference(actual_Context_2: int)
{
  var {:pointer} Tmp_778: int;
  var {:pointer} functionPdoExt_16: int;
  var {:pointer} Context_2: int;
  var vslice_dummy_var_104: int;

  anon0:
    call {:si_unique_call 924} vslice_dummy_var_104 := __HAVOC_malloc(4);
    Context_2 := actual_Context_2;
    functionPdoExt_16 := Context_2;
    assume {:nonnull} functionPdoExt_16 != 0;
    assume functionPdoExt_16 > 0;
    havoc Tmp_778;
    assume {:nonnull} functionPdoExt_16 != 0;
    assume functionPdoExt_16 > 0;
    assume {:nonnull} Tmp_778 != 0;
    assume Tmp_778 > 0;
    return;
}



procedure {:origName "BuildFunctionConfigurationDescriptor"} BuildFunctionConfigurationDescriptor(actual_functionPdoExt_17: int, actual_buffer_1: int, actual_bufferLength_3: int, actual_bytesReturned_4: int) returns (Tmp_782: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_782 == -1073741668 || Tmp_782 == 0 || Tmp_782 == -1073741670 || Tmp_782 == -1073741306;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "BuildFunctionConfigurationDescriptor"} BuildFunctionConfigurationDescriptor(actual_functionPdoExt_17: int, actual_buffer_1: int, actual_bufferLength_3: int, actual_bytesReturned_4: int) returns (Tmp_782: int)
{
  var {:pointer} SD9: int;
  var {:scalar} i_15: int;
  var {:pointer} functionAssoc_4: int;
  var {:pointer} thisIfaceDesc: int;
  var {:pointer} Tmp_783: int;
  var {:scalar} Tmp_784: int;
  var {:pointer} commonDesc_3: int;
  var {:scalar} Tmp_785: int;
  var {:pointer} parentConfigDescEnd: int;
  var {:pointer} Tmp_786: int;
  var {:scalar} Tmp_787: int;
  var {:scalar} Tmp_788: int;
  var {:pointer} sdv_297: int;
  var {:pointer} Tmp_789: int;
  var {:pointer} functionConfigDesc: int;
  var {:pointer} Tmp_790: int;
  var {:scalar} Tmp_791: int;
  var {:scalar} Tmp_792: int;
  var {:pointer} Tmp_793: int;
  var {:scalar} totalLength_1: int;
  var {:pointer} Tmp_795: int;
  var {:scalar} sdv_9: int;
  var {:scalar} bytesAvailable: int;
  var {:pointer} parentFdoExt_67: int;
  var {:pointer} Tmp_796: int;
  var {:scalar} Tmp_797: int;
  var {:pointer} pch: int;
  var {:pointer} Tmp_798: int;
  var {:pointer} Tmp_799: int;
  var {:scalar} status_47: int;
  var {:pointer} Tmp_800: int;
  var {:pointer} parentConfigDesc_1: int;
  var {:pointer} Tmp_801: int;
  var {:pointer} scratch: int;
  var {:pointer} functionPdoExt_17: int;
  var {:pointer} buffer_1: int;
  var {:scalar} bufferLength_3: int;
  var {:pointer} bytesReturned_4: int;
  var vslice_dummy_var_305: int;

  anon0:
    call {:si_unique_call 925} sdv_9 := __HAVOC_malloc(8);
    functionPdoExt_17 := actual_functionPdoExt_17;
    buffer_1 := actual_buffer_1;
    bufferLength_3 := actual_bufferLength_3;
    bytesReturned_4 := actual_bytesReturned_4;
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    havoc parentFdoExt_67;
    scratch := 0;
    pch := 0;
    totalLength_1 := 0;
    bytesAvailable := 0;
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    havoc functionAssoc_4;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} 9 > bufferLength_3;
    goto L24;

  L24:
    assume {:nonnull} bytesReturned_4 != 0;
    assume bytesReturned_4 > 0;
    Mem_T.VOID[bytesReturned_4] := 0;
    Tmp_782 := -1073741306;
    goto L1;

  L1:
    return;

  anon67_Then:
    assume {:partition} bufferLength_3 >= 9;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} buffer_1 != 0;
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    havoc Tmp_790;
    assume {:nonnull} Tmp_790 != 0;
    assume Tmp_790 > 0;
    havoc parentConfigDesc_1;
    parentConfigDescEnd := parentConfigDesc_1;
    totalLength_1 := 9;
    i_15 := 0;
    goto L30;

  L30:
    call {:si_unique_call 926} i_15, thisIfaceDesc, Tmp_784, commonDesc_3, Tmp_786, Tmp_793, totalLength_1, Tmp_798 := BuildFunctionConfigurationDescriptor_loop_L30(i_15, functionAssoc_4, thisIfaceDesc, Tmp_784, commonDesc_3, parentConfigDescEnd, Tmp_786, Tmp_793, totalLength_1, parentFdoExt_67, Tmp_798, functionPdoExt_17);
    goto L30_last;

  L30_last:
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    Tmp_784 := i_15;
    assume {:nonnull} functionAssoc_4 != 0;
    assume functionAssoc_4 > 0;
    havoc Tmp_786;
    assume {:nonnull} Tmp_786 != 0;
    assume Tmp_786 > 0;
    havoc Tmp_798;
    assume {:nonnull} Tmp_798 != 0;
    assume Tmp_798 > 0;
    havoc thisIfaceDesc;
    commonDesc_3 := thisIfaceDesc;
    goto L34;

  L34:
    call {:si_unique_call 927} Tmp_793, totalLength_1 := BuildFunctionConfigurationDescriptor_loop_L34(thisIfaceDesc, commonDesc_3, parentConfigDescEnd, Tmp_793, totalLength_1, parentFdoExt_67);
    goto L34_last;

  L34_last:
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} 2 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)];
    goto L37;

  L37:
    i_15 := i_15 + 1;
    goto L37_dummy;

  L37_dummy:
    assume false;
    return;

  anon53_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)] >= 2;
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] != 11;
    goto L39;

  L39:
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    totalLength_1 := totalLength_1 + Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)];
    goto L40;

  L40:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} parentConfigDescEnd > commonDesc_3;
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] == 4;
    Tmp_793 := commonDesc_3;
    assume {:nonnull} Tmp_793 != 0;
    assume Tmp_793 > 0;
    assume {:nonnull} thisIfaceDesc != 0;
    assume thisIfaceDesc > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_793)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(thisIfaceDesc)];
    goto L37;

  anon69_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_793)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(thisIfaceDesc)];
    goto anon69_Then_dummy;

  anon69_Then_dummy:
    assume false;
    return;

  anon56_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] != 4;
    goto anon56_Then_dummy;

  anon56_Then_dummy:
    assume false;
    return;

  anon68_Then:
    assume {:partition} commonDesc_3 >= parentConfigDescEnd;
    goto L37;

  anon54_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] == 11;
    assume {:nonnull} parentFdoExt_67 != 0;
    assume parentFdoExt_67 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L40;

  anon55_Then:
    goto L39;

  anon52_Then:
    Tmp_787 := totalLength_1;
    call {:si_unique_call 928} sdv_297 := ExAllocatePoolWithTag(512, Tmp_787, -1016958123);
    scratch := sdv_297;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} scratch != 0;
    Tmp_785 := totalLength_1;
    call {:si_unique_call 929} sdv_RtlZeroMemory(0, Tmp_785);
    goto L49;

  L49:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} scratch != 0;
    bytesAvailable := totalLength_1;
    pch := scratch;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} 9 > bytesAvailable;
    status_47 := -1073741668;
    goto L63;

  L63:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_47 >= 0;
    goto L65;

  L65:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} scratch != 0;
    call {:si_unique_call 930} ExFreePoolWithTag(0, -1016958123);
    goto L66;

  L66:
    Tmp_782 := status_47;
    goto L1;

  anon59_Then:
    assume {:partition} scratch == 0;
    goto L66;

  anon58_Then:
    assume {:partition} 0 > status_47;
    assume {:nonnull} bytesReturned_4 != 0;
    assume bytesReturned_4 > 0;
    Mem_T.VOID[bytesReturned_4] := 0;
    goto L65;

  anon71_Then:
    assume {:partition} bytesAvailable >= 9;
    call {:si_unique_call 931} sdv_RtlCopyMemory(0, 0, 9);
    bytesAvailable := bytesAvailable - 9;
    i_15 := 0;
    goto L73;

  L73:
    call {:si_unique_call 932} i_15, thisIfaceDesc, commonDesc_3, Tmp_789, Tmp_792, bytesAvailable, Tmp_796, Tmp_797, Tmp_801 := BuildFunctionConfigurationDescriptor_loop_L73(i_15, functionAssoc_4, thisIfaceDesc, commonDesc_3, parentConfigDescEnd, Tmp_789, Tmp_792, bytesAvailable, parentFdoExt_67, Tmp_796, Tmp_797, pch, Tmp_801, functionPdoExt_17);
    goto L73_last;

  L73_last:
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    Tmp_792 := i_15;
    assume {:nonnull} functionAssoc_4 != 0;
    assume functionAssoc_4 > 0;
    havoc Tmp_801;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    havoc Tmp_789;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    havoc thisIfaceDesc;
    commonDesc_3 := thisIfaceDesc;
    goto L77;

  L77:
    call {:si_unique_call 933} bytesAvailable, Tmp_796, Tmp_797 := BuildFunctionConfigurationDescriptor_loop_L77(thisIfaceDesc, commonDesc_3, parentConfigDescEnd, bytesAvailable, parentFdoExt_67, Tmp_796, Tmp_797, pch);
    goto L77_last;

  L77_last:
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} 2 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)];
    goto L80;

  L80:
    i_15 := i_15 + 1;
    goto L80_dummy;

  L80_dummy:
    assume false;
    return;

  anon61_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)] >= 2;
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] != 11;
    goto L82;

  L82:
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)] > bytesAvailable;
    status_47 := -1073741668;
    goto L63;

  anon64_Then:
    assume {:partition} bytesAvailable >= Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)];
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    Tmp_797 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)];
    call {:si_unique_call 934} sdv_RtlCopyMemory(0, 0, Tmp_797);
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    bytesAvailable := bytesAvailable - Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(commonDesc_3)];
    goto L91;

  L91:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} parentConfigDescEnd > commonDesc_3;
    assume {:nonnull} commonDesc_3 != 0;
    assume commonDesc_3 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] == 4;
    Tmp_796 := commonDesc_3;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    assume {:nonnull} thisIfaceDesc != 0;
    assume thisIfaceDesc > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_796)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(thisIfaceDesc)];
    goto L80;

  anon73_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_796)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(thisIfaceDesc)];
    goto anon73_Then_dummy;

  anon73_Then_dummy:
    assume false;
    return;

  anon65_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] != 4;
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    assume false;
    return;

  anon72_Then:
    assume {:partition} commonDesc_3 >= parentConfigDescEnd;
    goto L80;

  anon62_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(commonDesc_3)] == 11;
    assume {:nonnull} parentFdoExt_67 != 0;
    assume parentFdoExt_67 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L91;

  anon63_Then:
    goto L82;

  anon60_Then:
    functionConfigDesc := scratch;
    assume {:nonnull} functionConfigDesc != 0;
    assume functionConfigDesc > 0;
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    assume {:nonnull} functionConfigDesc != 0;
    assume functionConfigDesc > 0;
    Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(functionConfigDesc)] := totalLength_1;
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    havoc Tmp_783;
    assume {:nonnull} Tmp_783 != 0;
    assume Tmp_783 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} functionPdoExt_17 != 0;
    assume functionPdoExt_17 > 0;
    havoc Tmp_800;
    assume {:nonnull} Tmp_800 != 0;
    assume Tmp_800 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} functionConfigDesc != 0;
    assume functionConfigDesc > 0;
    goto L98;

  L98:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} totalLength_1 >= bufferLength_3;
    Tmp_788 := bufferLength_3;
    goto L104;

  L104:
    assume {:nonnull} bytesReturned_4 != 0;
    assume bytesReturned_4 > 0;
    Mem_T.VOID[bytesReturned_4] := Tmp_788;
    assume {:nonnull} bytesReturned_4 != 0;
    assume bytesReturned_4 > 0;
    call {:si_unique_call 935} sdv_RtlCopyMemory(0, 0, Mem_T.VOID[bytesReturned_4]);
    assume {:nonnull} bytesReturned_4 != 0;
    assume bytesReturned_4 > 0;
    Tmp_791 := Mem_T.VOID[bytesReturned_4];
    Tmp_795 := buffer_1;
    call {:si_unique_call 936} SD9 := log_xstr(Tmp_795, Tmp_791);
    assume {:nonnull} SD9 != 0;
    assume SD9 > 0;
    assume {:nonnull} sdv_9 != 0;
    assume sdv_9 > 0;
    assume {:nonnull} SD9 != 0;
    assume SD9 > 0;
    assume {:nonnull} sdv_9 != 0;
    assume sdv_9 > 0;
    havoc Tmp_799;
    assume {:nonnull} parentFdoExt_67 != 0;
    assume parentFdoExt_67 > 0;
    havoc vslice_dummy_var_305;
    call {:si_unique_call 937} WPP_RECORDER_SF__HEX_(vslice_dummy_var_305, 4, 1, 24, Tmp_799, sdv_9);
    status_47 := 0;
    goto L63;

  anon66_Then:
    assume {:partition} bufferLength_3 > totalLength_1;
    Tmp_788 := totalLength_1;
    goto L104;

  anon75_Then:
    assume {:nonnull} functionConfigDesc != 0;
    assume functionConfigDesc > 0;
    goto L98;

  anon74_Then:
    goto L98;

  anon57_Then:
    assume {:partition} scratch == 0;
    status_47 := -1073741670;
    goto L63;

  anon70_Then:
    assume {:partition} scratch == 0;
    goto L49;

  anon51_Then:
    assume {:partition} buffer_1 == 0;
    goto L24;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var {:scalar} Tmp_804: int;
  var {:pointer} Tmp_805: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_306: int;

  anon0:
    call {:si_unique_call 938} vslice_dummy_var_105 := __HAVOC_malloc(4);
    call {:si_unique_call 939} Tmp_804 := __HAVOC_malloc(4);
    call {:si_unique_call 940} Tmp_805 := __HAVOC_malloc(84);
    Tmp_805 := strConst__li2bpl23;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_804 != 0;
    assume Tmp_804 > 0;
    havoc vslice_dummy_var_306;
    Mem_T.VOID[Tmp_804] := vslice_dummy_var_306;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    return;
}



procedure {:origName "FreeFunctionPDOResources"} FreeFunctionPDOResources(actual_functionPdoExt_18: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FreeFunctionPDOResources"} FreeFunctionPDOResources(actual_functionPdoExt_18: int)
{
  var {:pointer} Tmp_806: int;
  var {:pointer} Tmp_807: int;
  var {:pointer} functionPdoExt_18: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;

  anon0:
    call {:si_unique_call 941} vslice_dummy_var_106 := __HAVOC_malloc(4);
    functionPdoExt_18 := actual_functionPdoExt_18;
    call {:si_unique_call 942} Tmp_806 := __HAVOC_malloc(48);
    call {:si_unique_call 943} sdv_do_paged_code_check();
    havoc Tmp_807;
    assume {:nonnull} functionPdoExt_18 != 0;
    assume functionPdoExt_18 > 0;
    havoc vslice_dummy_var_307;
    havoc vslice_dummy_var_308;
    havoc vslice_dummy_var_309;
    call {:si_unique_call 944} WPP_RECORDER_SF_qd(vslice_dummy_var_307, 4, 2, 40, Tmp_807, vslice_dummy_var_308, vslice_dummy_var_309);
    call {:si_unique_call 945} FreeResourcesForFunctionSuspend(functionPdoExt_18);
    assume {:nonnull} functionPdoExt_18 != 0;
    assume functionPdoExt_18 > 0;
    assume {:nonnull} functionPdoExt_18 != 0;
    assume functionPdoExt_18 > 0;
    call {:si_unique_call 946} UsbcDereferencePdo(functionPdoExt_18);
    Tmp_806 := strConst__li2bpl24;
    assume {:nonnull} functionPdoExt_18 != 0;
    assume functionPdoExt_18 > 0;
    havoc vslice_dummy_var_310;
    call {:si_unique_call 947} WaitForSignal(removeEvent_FUNCTION_PDO_EXTENSION(functionPdoExt_18), Tmp_806, vslice_dummy_var_310);
    call {:si_unique_call 948} IoDeleteDevice(0);
    return;
}



procedure {:origName "QueryFunctionDeviceRelations"} QueryFunctionDeviceRelations(actual_functionPdoExt_19: int, actual_irp_33: int) returns (Tmp_810: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QueryFunctionDeviceRelations"} QueryFunctionDeviceRelations(actual_functionPdoExt_19: int, actual_irp_33: int) returns (Tmp_810: int)
{
  var {:pointer} devRel: int;
  var {:pointer} irpSp_12: int;
  var {:pointer} Tmp_811: int;
  var {:pointer} sdv_299: int;
  var {:scalar} status_48: int;
  var {:pointer} functionPdoExt_19: int;
  var {:pointer} irp_33: int;
  var vslice_dummy_var_107: int;

  anon0:
    functionPdoExt_19 := actual_functionPdoExt_19;
    irp_33 := actual_irp_33;
    call {:si_unique_call 949} Tmp_811 := __HAVOC_malloc(4);
    call {:si_unique_call 950} sdv_do_paged_code_check();
    call {:si_unique_call 951} irpSp_12 := sdv_IoGetCurrentIrpStackLocation(irp_33);
    assume {:nonnull} irpSp_12 != 0;
    assume irpSp_12 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 952} sdv_299 := ExAllocatePoolWithTag(1, 8, -1016958123);
    devRel := sdv_299;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} devRel != 0;
    call {:si_unique_call 953} sdv_RtlZeroMemory(0, 8);
    goto L20;

  L20:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} devRel != 0;
    call {:si_unique_call 954} vslice_dummy_var_107 := sdv_ObReferenceObject(0);
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_811;
    assume {:nonnull} Tmp_811 != 0;
    assume Tmp_811 > 0;
    assume {:nonnull} functionPdoExt_19 != 0;
    assume functionPdoExt_19 > 0;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    assume {:nonnull} irp_33 != 0;
    assume irp_33 > 0;
    status_48 := 0;
    goto L32;

  L32:
    Tmp_810 := status_48;
    return;

  anon8_Then:
    assume {:partition} devRel == 0;
    status_48 := -1073741670;
    goto L32;

  anon9_Then:
    assume {:partition} devRel == 0;
    goto L20;

  anon7_Then:
    assume {:nonnull} irp_33 != 0;
    assume irp_33 > 0;
    havoc status_48;
    goto L32;
}



procedure {:origName "FreeResourcesForFunctionSuspend"} FreeResourcesForFunctionSuspend(actual_functionPdoExt_20: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FreeResourcesForFunctionSuspend"} FreeResourcesForFunctionSuspend(actual_functionPdoExt_20: int)
{
  var {:pointer} suspendContext_2: int;
  var {:pointer} functionPdoExt_20: int;
  var vslice_dummy_var_108: int;

  anon0:
    call {:si_unique_call 955} vslice_dummy_var_108 := __HAVOC_malloc(4);
    functionPdoExt_20 := actual_functionPdoExt_20;
    call {:si_unique_call 956} sdv_do_paged_code_check();
    assume {:nonnull} functionPdoExt_20 != 0;
    assume functionPdoExt_20 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} functionPdoExt_20 != 0;
    assume functionPdoExt_20 > 0;
    havoc suspendContext_2;
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 957} IoFreeWorkItem(0);
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto L11;

  L11:
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 958} IoFreeIrp(0);
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto L16;

  L16:
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 959} IoFreeWorkItem(0);
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto L21;

  L21:
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 960} IoFreeIrp(0);
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto L26;

  L26:
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} functionPdoExt_20 != 0;
    assume functionPdoExt_20 > 0;
    assume {:nonnull} suspendContext_2 != 0;
    assume suspendContext_2 > 0;
    goto L31;

  L31:
    call {:si_unique_call 961} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} functionPdoExt_20 != 0;
    assume functionPdoExt_20 > 0;
    goto L1;

  L1:
    return;

  anon17_Then:
    goto L31;

  anon16_Then:
    goto L26;

  anon15_Then:
    goto L21;

  anon14_Then:
    goto L16;

  anon18_Then:
    goto L11;

  anon13_Then:
    goto L1;
}



procedure {:origName "InstallExtPropDesc"} InstallExtPropDesc(actual_FunctionPdoExt: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InstallExtPropDesc"} InstallExtPropDesc(actual_FunctionPdoExt: int)
{
  var {:scalar} msExtPropDescHeader: int;
  var {:scalar} Tmp_816: int;
  var {:pointer} deviceObject_1: int;
  var {:pointer} Tmp_817: int;
  var {:pointer} Tmp_818: int;
  var {:pointer} Tmp_819: int;
  var {:scalar} sdv_302: int;
  var {:pointer} Tmp_820: int;
  var {:scalar} Tmp_821: int;
  var {:pointer} Tmp_822: int;
  var {:scalar} ntStatus_18: int;
  var {:dopa} {:scalar} bytesReturned_5: int;
  var {:pointer} Tmp_823: int;
  var {:dopa} {:scalar} didExtPropDesc: int;
  var {:pointer} sdv_306: int;
  var {:pointer} Tmp_826: int;
  var {:pointer} Tmp_827: int;
  var {:pointer} pMsExtPropDesc: int;
  var {:pointer} FunctionPdoExt: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_318: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;

  anon0:
    call {:si_unique_call 962} msExtPropDescHeader := __HAVOC_malloc(16);
    call {:si_unique_call 963} bytesReturned_5 := __HAVOC_malloc(4);
    call {:si_unique_call 964} vslice_dummy_var_109 := __HAVOC_malloc(4);
    call {:si_unique_call 965} didExtPropDesc := __HAVOC_malloc(4);
    FunctionPdoExt := actual_FunctionPdoExt;
    pMsExtPropDesc := 0;
    call {:si_unique_call 966} sdv_do_paged_code_check();
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc deviceObject_1;
    havoc vslice_dummy_var_311;
    call {:si_unique_call 967} ntStatus_18 := GetPdoRegistryParameter(deviceObject_1, vslice_dummy_var_311, 0, 0, 0, 0, 0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} ntStatus_18 >= 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L33;

  L33:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} pMsExtPropDesc != 0;
    call {:si_unique_call 968} ExFreePoolWithTag(0, -1016958123);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon39_Then:
    assume {:partition} pMsExtPropDesc == 0;
    goto L1;

  anon38_Then:
    havoc Tmp_826;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_312;
    havoc vslice_dummy_var_313;
    call {:si_unique_call 969} WPP_RECORDER_SF_q(vslice_dummy_var_312, 5, 1, 41, Tmp_826, vslice_dummy_var_313);
    goto L33;

  anon37_Then:
    assume {:partition} 0 > ntStatus_18;
    assume {:nonnull} didExtPropDesc != 0;
    assume didExtPropDesc > 0;
    Mem_T.VOID[didExtPropDesc] := 1;
    havoc vslice_dummy_var_314;
    call {:si_unique_call 970} vslice_dummy_var_110 := SetPdoRegistryParameter(deviceObject_1, vslice_dummy_var_314, didExtPropDesc, 4, 4, 1);
    call {:si_unique_call 971} sdv_RtlZeroMemory(0, 10);
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc Tmp_821;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_315;
    call {:si_unique_call 972} ntStatus_18 := GetMsOsFeatureDescriptor(vslice_dummy_var_315, 1, Tmp_821, 5, msExtPropDescHeader, 10, bytesReturned_5);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} ntStatus_18 < 0;
    havoc Tmp_818;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_316;
    havoc vslice_dummy_var_317;
    call {:si_unique_call 973} WPP_RECORDER_SF_qd(vslice_dummy_var_316, 2, 8, 42, Tmp_818, vslice_dummy_var_317, ntStatus_18);
    goto L33;

  anon40_Then:
    assume {:partition} 0 <= ntStatus_18;
    assume {:nonnull} bytesReturned_5 != 0;
    assume bytesReturned_5 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Mem_T.VOID[bytesReturned_5] != 10;
    goto L59;

  L59:
    havoc Tmp_820;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_318;
    havoc vslice_dummy_var_319;
    call {:si_unique_call 974} WPP_RECORDER_SF_q(vslice_dummy_var_318, 2, 8, 43, Tmp_820, vslice_dummy_var_319);
    goto L33;

  anon41_Then:
    assume {:partition} Mem_T.VOID[bytesReturned_5] == 10;
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    havoc vslice_dummy_var_320;
    call {:si_unique_call 975} sdv_306 := ExAllocatePoolWithTag(512, vslice_dummy_var_320, -1016958123);
    pMsExtPropDesc := sdv_306;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} pMsExtPropDesc != 0;
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    havoc vslice_dummy_var_321;
    call {:si_unique_call 976} sdv_RtlZeroMemory(0, vslice_dummy_var_321);
    goto L72;

  L72:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} pMsExtPropDesc == 0;
    havoc Tmp_823;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_322;
    havoc vslice_dummy_var_323;
    call {:si_unique_call 977} WPP_RECORDER_SF_q(vslice_dummy_var_322, 2, 8, 44, Tmp_823, vslice_dummy_var_323);
    goto L33;

  anon46_Then:
    assume {:partition} pMsExtPropDesc != 0;
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    havoc vslice_dummy_var_324;
    call {:si_unique_call 978} sdv_RtlZeroMemory(0, vslice_dummy_var_324);
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc Tmp_816;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    havoc vslice_dummy_var_325;
    havoc vslice_dummy_var_326;
    call {:si_unique_call 979} ntStatus_18 := GetMsOsFeatureDescriptor(vslice_dummy_var_325, 1, Tmp_816, 5, pMsExtPropDesc, vslice_dummy_var_326, bytesReturned_5);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} ntStatus_18 < 0;
    havoc Tmp_827;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_327;
    havoc vslice_dummy_var_328;
    call {:si_unique_call 980} WPP_RECORDER_SF_qd(vslice_dummy_var_327, 2, 8, 45, Tmp_827, vslice_dummy_var_328, ntStatus_18);
    goto L33;

  anon47_Then:
    assume {:partition} 0 <= ntStatus_18;
    assume {:nonnull} bytesReturned_5 != 0;
    assume bytesReturned_5 > 0;
    assume {:nonnull} msExtPropDescHeader != 0;
    assume msExtPropDescHeader > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L100;

  L100:
    havoc Tmp_817;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_329;
    havoc vslice_dummy_var_330;
    call {:si_unique_call 981} WPP_RECORDER_SF_q(vslice_dummy_var_329, 2, 8, 46, Tmp_817, vslice_dummy_var_330);
    goto L33;

  anon48_Then:
    call {:si_unique_call 982} sdv_302 := RtlCompareMemory(0, 0, 10);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_302 == 10;
    assume {:nonnull} bytesReturned_5 != 0;
    assume bytesReturned_5 > 0;
    call {:si_unique_call 983} ntStatus_18 := USBD_ValidateExtendedPropertyDescriptor(pMsExtPropDesc, Mem_T.VOID[bytesReturned_5]);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} ntStatus_18 < 0;
    havoc Tmp_822;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_331;
    havoc vslice_dummy_var_332;
    call {:si_unique_call 984} WPP_RECORDER_SF_qd(vslice_dummy_var_331, 2, 8, 47, Tmp_822, vslice_dummy_var_332, ntStatus_18);
    goto L33;

  anon50_Then:
    assume {:partition} 0 <= ntStatus_18;
    assume {:nonnull} pMsExtPropDesc != 0;
    assume pMsExtPropDesc > 0;
    havoc vslice_dummy_var_333;
    call {:si_unique_call 985} ntStatus_18 := USBD_InstallExtPropDescSections(deviceObject_1, pMsExtPropDesc, vslice_dummy_var_333);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} ntStatus_18 < 0;
    havoc Tmp_819;
    assume {:nonnull} FunctionPdoExt != 0;
    assume FunctionPdoExt > 0;
    havoc vslice_dummy_var_334;
    havoc vslice_dummy_var_335;
    call {:si_unique_call 986} WPP_RECORDER_SF_qd(vslice_dummy_var_334, 2, 8, 48, Tmp_819, vslice_dummy_var_335, ntStatus_18);
    goto L33;

  anon51_Then:
    assume {:partition} 0 <= ntStatus_18;
    goto L33;

  anon49_Then:
    assume {:partition} sdv_302 != 10;
    goto L100;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:partition} pMsExtPropDesc == 0;
    goto L72;

  anon45_Then:
    goto L59;

  anon44_Then:
    goto L59;

  anon43_Then:
    goto L59;

  anon42_Then:
    goto L59;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "HandlePdoQueryInterface"} HandlePdoQueryInterface(actual_functionPdoExt_21: int, actual_irp_34: int) returns (Tmp_828: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HandlePdoQueryInterface"} HandlePdoQueryInterface(actual_functionPdoExt_21: int, actual_irp_34: int) returns (Tmp_828: int)
{
  var {:pointer} irpStack_1: int;
  var {:pointer} d3ColdSupportInterface: int;
  var {:scalar} sdv_310: int;
  var {:pointer} Tmp_830: int;
  var {:scalar} status_49: int;
  var {:pointer} Tmp_832: int;
  var {:pointer} functionPdoExt_21: int;
  var {:pointer} irp_34: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;

  anon0:
    functionPdoExt_21 := actual_functionPdoExt_21;
    irp_34 := actual_irp_34;
    call {:si_unique_call 987} sdv_do_paged_code_check();
    call {:si_unique_call 988} irpStack_1 := sdv_IoGetCurrentIrpStackLocation(irp_34);
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    call {:si_unique_call 989} sdv_310 := RtlCompareMemory(0, 0, 16);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_310 == 16;
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L22;

  L22:
    assume {:nonnull} irp_34 != 0;
    assume irp_34 > 0;
    havoc status_49;
    assume {:nonnull} functionPdoExt_21 != 0;
    assume functionPdoExt_21 > 0;
    havoc vslice_dummy_var_336;
    call {:si_unique_call 990} UsbcCompleteIrp(vslice_dummy_var_336, status_49, irp_34);
    Tmp_828 := status_49;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} functionPdoExt_21 != 0;
    assume functionPdoExt_21 > 0;
    havoc Tmp_830;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    havoc d3ColdSupportInterface;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    assume {:nonnull} d3ColdSupportInterface != 0;
    assume d3ColdSupportInterface > 0;
    status_49 := 0;
    goto L41;

  L41:
    assume {:nonnull} functionPdoExt_21 != 0;
    assume functionPdoExt_21 > 0;
    havoc vslice_dummy_var_337;
    call {:si_unique_call 991} UsbcCompleteIrp(vslice_dummy_var_337, status_49, irp_34);
    goto L44;

  L44:
    Tmp_828 := status_49;
    goto L1;

  anon14_Then:
    assume {:nonnull} irp_34 != 0;
    assume irp_34 > 0;
    havoc status_49;
    goto L41;

  anon13_Then:
    goto L22;

  anon11_Then:
    assume {:partition} sdv_310 != 16;
    assume {:nonnull} functionPdoExt_21 != 0;
    assume functionPdoExt_21 > 0;
    havoc Tmp_832;
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    assume {:nonnull} functionPdoExt_21 != 0;
    assume functionPdoExt_21 > 0;
    havoc vslice_dummy_var_338;
    havoc vslice_dummy_var_339;
    call {:si_unique_call 992} status_49 := UsbcForwardIrp(vslice_dummy_var_338, vslice_dummy_var_339, irp_34);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L44;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CompletionPdoSelectInterface"} CompletionPdoSelectInterface(actual_devObj_4: int, actual_irp_35: int, actual_context_4: int) returns (Tmp_833: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionPdoSelectInterface"} CompletionPdoSelectInterface(actual_devObj_4: int, actual_irp_35: int, actual_context_4: int) returns (Tmp_833: int)
{
  var {:pointer} Tmp_834: int;
  var {:pointer} urbInterface: int;
  var {:pointer} interfaceEntry: int;
  var {:scalar} success: int;
  var {:pointer} irpSp_13: int;
  var {:scalar} Tmp_835: int;
  var {:scalar} Tmp_836: int;
  var {:scalar} Tmp_837: int;
  var {:pointer} sdv_313: int;
  var {:pointer} parentFdoExt_68: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} urb_11: int;
  var {:pointer} functionPdoExt_22: int;
  var {:pointer} Tmp_838: int;
  var {:pointer} Tmp_839: int;
  var {:pointer} Tmp_840: int;
  var {:scalar} status_50: int;
  var {:scalar} Tmp_841: int;
  var {:pointer} Tmp_842: int;
  var {:pointer} irp_35: int;
  var {:pointer} context_4: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;
  var vslice_dummy_var_343: int;

  anon0:
    irp_35 := actual_irp_35;
    context_4 := actual_context_4;
    call {:si_unique_call 993} irpSp_13 := sdv_IoGetCurrentIrpStackLocation(irp_35);
    assume {:nonnull} irpSp_13 != 0;
    assume irpSp_13 > 0;
    assume {:nonnull} irp_35 != 0;
    assume irp_35 > 0;
    havoc status_50;
    assume {:nonnull} irpSp_13 != 0;
    assume irpSp_13 > 0;
    havoc urb_11;
    functionPdoExt_22 := context_4;
    assume {:nonnull} functionPdoExt_22 != 0;
    assume functionPdoExt_22 > 0;
    havoc parentFdoExt_68;
    urbInterface := 0;
    interfaceEntry := 0;
    success := 0;
    assume {:nonnull} irp_35 != 0;
    assume irp_35 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 994} sdv_IoMarkIrpPending(0);
    goto L26;

  L26:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_50 >= 0;
    call {:si_unique_call 995} Tmp_840 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_840 != 0;
    assume Tmp_840 > 0;
    Mem_T.VOID[Tmp_840] := oldIrql_6;
    call {:si_unique_call 996} sdv_KeAcquireSpinLock(0, Tmp_840);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_840 != 0;
    assume Tmp_840 > 0;
    oldIrql_6 := Mem_T.VOID[Tmp_840];
    assume {:nonnull} parentFdoExt_68 != 0;
    assume parentFdoExt_68 > 0;
    havoc interfaceEntry;
    assume {:nonnull} urb_11 != 0;
    assume urb_11 > 0;
    urbInterface := Interface__URB_SELECT_INTERFACE(UrbSelectInterface__URB(urb_11));
    success := 0;
    goto L39;

  L39:
    call {:si_unique_call 997} Tmp_838 := CompletionPdoSelectInterface_loop_L39(urbInterface, interfaceEntry, Tmp_838);
    goto L39_last;

  L39_last:
    assume {:nonnull} interfaceEntry != 0;
    assume interfaceEntry > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} interfaceEntry != 0;
    assume interfaceEntry > 0;
    havoc Tmp_838;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} urbInterface != 0;
    assume urbInterface > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    success := 1;
    goto L40;

  L40:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} success == 0;
    assume {:nonnull} urbInterface != 0;
    assume urbInterface > 0;
    havoc Tmp_837;
    havoc Tmp_839;
    assume {:nonnull} functionPdoExt_22 != 0;
    assume functionPdoExt_22 > 0;
    havoc vslice_dummy_var_340;
    call {:si_unique_call 998} WPP_RECORDER_SF_d(vslice_dummy_var_340, 2, 8, 29, Tmp_839, Tmp_837);
    goto L74;

  L74:
    call {:si_unique_call 999} sdv_KeReleaseSpinLock(0, oldIrql_6);
    goto L30;

  L30:
    call {:si_unique_call 1000} UsbcDecrementPendingCount(parentFdoExt_68, irp_35);
    call {:si_unique_call 1001} UsbcReleaseRemoveLock(parentFdoExt_68, irp_35);
    assume {:nonnull} parentFdoExt_68 != 0;
    assume parentFdoExt_68 > 0;
    call {:si_unique_call 1002} vslice_dummy_var_111 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_68), irp_35);
    Tmp_833 := 0;
    goto LM2;

  LM2:
    return;

  anon21_Then:
    assume {:partition} success != 0;
    assume {:nonnull} urbInterface != 0;
    assume urbInterface > 0;
    havoc Tmp_841;
    havoc Tmp_834;
    assume {:nonnull} functionPdoExt_22 != 0;
    assume functionPdoExt_22 > 0;
    havoc vslice_dummy_var_341;
    havoc vslice_dummy_var_342;
    call {:si_unique_call 1003} WPP_RECORDER_SF_qd(vslice_dummy_var_341, 4, 1, 27, Tmp_834, vslice_dummy_var_342, Tmp_841);
    assume {:nonnull} interfaceEntry != 0;
    assume interfaceEntry > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} interfaceEntry != 0;
    assume interfaceEntry > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 1004} ExFreePoolWithTag(0, -1016958123);
    goto L59;

  L59:
    assume {:nonnull} urbInterface != 0;
    assume urbInterface > 0;
    havoc Tmp_835;
    call {:si_unique_call 1005} sdv_313 := MemDup(urbInterface, Tmp_835);
    assume {:nonnull} interfaceEntry != 0;
    assume interfaceEntry > 0;
    assume {:nonnull} interfaceEntry != 0;
    assume interfaceEntry > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} urbInterface != 0;
    assume urbInterface > 0;
    havoc Tmp_836;
    call {:si_unique_call 1006} sdv_RtlCopyMemory(0, 0, Tmp_836);
    goto L74;

  anon27_Then:
    assume {:nonnull} irp_35 != 0;
    assume irp_35 > 0;
    havoc Tmp_842;
    assume {:nonnull} functionPdoExt_22 != 0;
    assume functionPdoExt_22 > 0;
    havoc vslice_dummy_var_343;
    call {:si_unique_call 1007} WPP_RECORDER_SF_d(vslice_dummy_var_343, 2, 8, 28, Tmp_842, status_50);
    goto L74;

  anon23_Then:
    goto L59;

  anon22_Then:
    goto L59;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    assume false;
    return;

  anon20_Then:
    goto L40;

  anon25_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} 0 > status_50;
    goto L30;

  anon24_Then:
    goto L26;
}



procedure {:origName "GetFunctionMSOSCompatibleIDs"} GetFunctionMSOSCompatibleIDs(actual_functionPdoExt_23: int, actual_ppcCompatibleID: int, actual_ppcSubCompatibleID: int) returns (Tmp_843: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_843 == 1 || Tmp_843 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetFunctionMSOSCompatibleIDs"} GetFunctionMSOSCompatibleIDs(actual_functionPdoExt_23: int, actual_ppcCompatibleID: int, actual_ppcSubCompatibleID: int) returns (Tmp_843: int)
{
  var {:scalar} i_16: int;
  var {:pointer} Tmp_844: int;
  var {:pointer} msExtConfigDesc: int;
  var {:pointer} Tmp_845: int;
  var {:scalar} Tmp_847: int;
  var {:scalar} Tmp_848: int;
  var {:scalar} Tmp_849: int;
  var {:pointer} Tmp_850: int;
  var {:pointer} Tmp_851: int;
  var {:pointer} functionPdoExt_23: int;
  var {:pointer} ppcCompatibleID: int;
  var {:pointer} ppcSubCompatibleID: int;

  anon0:
    functionPdoExt_23 := actual_functionPdoExt_23;
    ppcCompatibleID := actual_ppcCompatibleID;
    ppcSubCompatibleID := actual_ppcSubCompatibleID;
    call {:si_unique_call 1008} Tmp_845 := __HAVOC_malloc(96);
    call {:si_unique_call 1009} Tmp_850 := __HAVOC_malloc(96);
    call {:si_unique_call 1010} Tmp_851 := __HAVOC_malloc(96);
    assume {:nonnull} functionPdoExt_23 != 0;
    assume functionPdoExt_23 > 0;
    havoc Tmp_844;
    assume {:nonnull} Tmp_844 != 0;
    assume Tmp_844 > 0;
    havoc msExtConfigDesc;
    call {:si_unique_call 1011} sdv_do_paged_code_check();
    assume {:nonnull} ppcCompatibleID != 0;
    assume ppcCompatibleID > 0;
    assume {:nonnull} ppcSubCompatibleID != 0;
    assume ppcSubCompatibleID > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} msExtConfigDesc != 0;
    i_16 := 0;
    goto L14;

  L14:
    call {:si_unique_call 1012} i_16, Tmp_845, Tmp_848 := GetFunctionMSOSCompatibleIDs_loop_L14(i_16, msExtConfigDesc, Tmp_845, Tmp_848, functionPdoExt_23);
    goto L14_last;

  L14_last:
    assume {:nonnull} msExtConfigDesc != 0;
    assume msExtConfigDesc > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_848 := i_16;
    assume {:nonnull} msExtConfigDesc != 0;
    assume msExtConfigDesc > 0;
    havoc Tmp_845;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    assume {:nonnull} functionPdoExt_23 != 0;
    assume functionPdoExt_23 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_849 := i_16;
    assume {:nonnull} msExtConfigDesc != 0;
    assume msExtConfigDesc > 0;
    havoc Tmp_851;
    assume {:nonnull} Tmp_851 != 0;
    assume Tmp_851 > 0;
    assume {:nonnull} ppcCompatibleID != 0;
    assume ppcCompatibleID > 0;
    Tmp_847 := i_16;
    assume {:nonnull} msExtConfigDesc != 0;
    assume msExtConfigDesc > 0;
    havoc Tmp_850;
    assume {:nonnull} Tmp_850 != 0;
    assume Tmp_850 > 0;
    assume {:nonnull} ppcSubCompatibleID != 0;
    assume ppcSubCompatibleID > 0;
    Tmp_843 := 1;
    goto L1;

  L1:
    return;

  anon9_Then:
    i_16 := i_16 + 1;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    assume false;
    return;

  anon7_Then:
    goto L12;

  L12:
    Tmp_843 := 0;
    goto L1;

  anon8_Then:
    assume {:partition} msExtConfigDesc == 0;
    goto L12;
}



procedure {:origName "SetFunctionHandleData"} SetFunctionHandleData(actual_parentFdoExt_69: int, actual_functionPdoExt_24: int, actual_functionHandle: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetFunctionHandleData"} SetFunctionHandleData(actual_parentFdoExt_69: int, actual_functionPdoExt_24: int, actual_functionHandle: int)
{
  var {:pointer} nextSp_5: int;
  var {:scalar} functionData: int;
  var {:pointer} Tmp_852: int;
  var {:pointer} irp_36: int;
  var {:pointer} Tmp_855: int;
  var {:pointer} Tmp_856: int;
  var {:scalar} status_51: int;
  var {:pointer} parentFdoExt_69: int;
  var {:pointer} functionPdoExt_24: int;
  var {:pointer} functionHandle: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_346: int;

  anon0:
    call {:si_unique_call 1013} functionData := __HAVOC_malloc(16);
    call {:si_unique_call 1014} vslice_dummy_var_112 := __HAVOC_malloc(4);
    parentFdoExt_69 := actual_parentFdoExt_69;
    functionPdoExt_24 := actual_functionPdoExt_24;
    functionHandle := actual_functionHandle;
    call {:si_unique_call 1015} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_69 != 0;
    assume parentFdoExt_69 > 0;
    havoc Tmp_852;
    assume {:nonnull} Tmp_852 != 0;
    assume Tmp_852 > 0;
    havoc vslice_dummy_var_344;
    call {:si_unique_call 1016} irp_36 := IoAllocateIrp(vslice_dummy_var_344, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_36 != 0;
    assume {:nonnull} functionData != 0;
    assume functionData > 0;
    assume {:nonnull} functionData != 0;
    assume functionData > 0;
    assume {:nonnull} functionData != 0;
    assume functionData > 0;
    assume {:nonnull} functionData != 0;
    assume functionData > 0;
    assume {:nonnull} functionPdoExt_24 != 0;
    assume functionPdoExt_24 > 0;
    assume {:nonnull} irp_36 != 0;
    assume irp_36 > 0;
    call {:si_unique_call 1017} nextSp_5 := sdv_IoGetNextIrpStackLocation(irp_36);
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    call {:si_unique_call 1018} status_51 := CallNextDriverSync(parentFdoExt_69, irp_36, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_51 < 0;
    havoc Tmp_855;
    assume {:nonnull} functionPdoExt_24 != 0;
    assume functionPdoExt_24 > 0;
    havoc vslice_dummy_var_345;
    call {:si_unique_call 1019} WPP_RECORDER_SF_d(vslice_dummy_var_345, 2, 8, 50, Tmp_855, status_51);
    goto L36;

  L36:
    call {:si_unique_call 1020} IoFreeIrp(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} 0 <= status_51;
    assume {:nonnull} functionPdoExt_24 != 0;
    assume functionPdoExt_24 > 0;
    goto L36;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_36 == 0;
    status_51 := -1073741670;
    havoc Tmp_856;
    assume {:nonnull} functionPdoExt_24 != 0;
    assume functionPdoExt_24 > 0;
    havoc vslice_dummy_var_346;
    call {:si_unique_call 1021} WPP_RECORDER_SF_d(vslice_dummy_var_346, 2, 8, 49, Tmp_856, status_51);
    goto L1;
}



procedure {:origName "DispatchPdoInternalDeviceControl"} DispatchPdoInternalDeviceControl(actual_functionPdoExt_25: int, actual_irp_37: int) returns (Tmp_857: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoInternalDeviceControl"} DispatchPdoInternalDeviceControl(actual_functionPdoExt_25: int, actual_irp_37: int) returns (Tmp_857: int)
{
  var {:pointer} Tmp_859: int;
  var {:pointer} irpSp_14: int;
  var {:scalar} sdv_319: int;
  var {:pointer} parentFdoExt_70: int;
  var {:pointer} Tmp_861: int;
  var {:scalar} ioControlCode_6: int;
  var {:pointer} Tmp_862: int;
  var {:pointer} Tmp_863: int;
  var {:scalar} status_52: int;
  var {:pointer} Tmp_864: int;
  var {:pointer} functionPdoExt_25: int;
  var {:pointer} irp_37: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;

  anon0:
    functionPdoExt_25 := actual_functionPdoExt_25;
    irp_37 := actual_irp_37;
    call {:si_unique_call 1022} irpSp_14 := sdv_IoGetCurrentIrpStackLocation(irp_37);
    assume {:nonnull} irpSp_14 != 0;
    assume irpSp_14 > 0;
    havoc ioControlCode_6;
    status_52 := 0;
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    havoc parentFdoExt_70;
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    havoc Tmp_863;
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    havoc vslice_dummy_var_347;
    havoc vslice_dummy_var_348;
    havoc vslice_dummy_var_349;
    call {:si_unique_call 1023} WPP_RECORDER_SF_qL(vslice_dummy_var_347, 2, 8, 36, Tmp_863, vslice_dummy_var_348, vslice_dummy_var_349);
    status_52 := -1073741436;
    goto L27;

  L27:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_52 >= 0;
    goto L31;

  L31:
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} ioControlCode_6 != 2228263;
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    assume {:nonnull} irpSp_14 != 0;
    assume irpSp_14 > 0;
    goto L32;

  L32:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} ioControlCode_6 != 2228227;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} ioControlCode_6 != 2228231;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} ioControlCode_6 != 2228239;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} ioControlCode_6 != 2228243;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} ioControlCode_6 != 2228255;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} ioControlCode_6 == 2228263;
    call {:si_unique_call 1024} status_52 := DispatchPdoIdleNotificationRequest(functionPdoExt_25, irp_37);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L49;

  L49:
    Tmp_857 := status_52;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} ioControlCode_6 != 2228263;
    goto L35;

  L35:
    assume {:nonnull} parentFdoExt_70 != 0;
    assume parentFdoExt_70 > 0;
    havoc vslice_dummy_var_350;
    call {:si_unique_call 1025} status_52 := UsbcForwardIrp(parentFdoExt_70, vslice_dummy_var_350, irp_37);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto L49;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} ioControlCode_6 == 2228255;
    goto L52;

  L52:
    havoc Tmp_861;
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    havoc vslice_dummy_var_351;
    havoc vslice_dummy_var_352;
    call {:si_unique_call 1026} WPP_RECORDER_SF_q(vslice_dummy_var_351, 4, 2, 39, Tmp_861, vslice_dummy_var_352);
    assume {:nonnull} parentFdoExt_70 != 0;
    assume parentFdoExt_70 > 0;
    havoc vslice_dummy_var_353;
    call {:si_unique_call 1027} status_52 := UsbcForwardIrp(parentFdoExt_70, vslice_dummy_var_353, irp_37);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L49;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} ioControlCode_6 == 2228243;
    goto L35;

  anon47_Then:
    assume {:partition} ioControlCode_6 == 2228239;
    goto L35;

  anon48_Then:
    assume {:partition} ioControlCode_6 == 2228231;
    goto L52;

  anon41_Then:
    assume {:partition} ioControlCode_6 == 2228227;
    call {:si_unique_call 1028} status_52 := DispatchPdoUrb(functionPdoExt_25, irp_37);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto L49;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:partition} ioControlCode_6 == 2228263;
    goto L32;

  anon40_Then:
    goto L32;

  anon39_Then:
    assume {:partition} 0 > status_52;
    call {:si_unique_call 1029} sdv_319 := IsIrpSpecial(irpSp_14);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_319 == 0;
    call {:si_unique_call 1030} UsbcCompleteIrp(parentFdoExt_70, status_52, irp_37);
    Tmp_857 := status_52;
    goto L1;

  anon43_Then:
    assume {:partition} sdv_319 != 0;
    goto L31;

  anon38_Then:
    goto L15;

  L15:
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    havoc Tmp_859;
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    havoc vslice_dummy_var_354;
    havoc vslice_dummy_var_355;
    havoc vslice_dummy_var_356;
    call {:si_unique_call 1031} WPP_RECORDER_SF_qL(vslice_dummy_var_354, 2, 8, 37, Tmp_859, vslice_dummy_var_355, vslice_dummy_var_356);
    status_52 := -1073741101;
    goto L27;

  anon37_Then:
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    havoc Tmp_864;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    havoc Tmp_862;
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    assume {:nonnull} parentFdoExt_70 != 0;
    assume parentFdoExt_70 > 0;
    havoc vslice_dummy_var_357;
    havoc vslice_dummy_var_358;
    havoc vslice_dummy_var_359;
    call {:si_unique_call 1032} WPP_RECORDER_SF_qL(vslice_dummy_var_357, 2, 8, 38, Tmp_862, vslice_dummy_var_358, vslice_dummy_var_359);
    assume {:nonnull} functionPdoExt_25 != 0;
    assume functionPdoExt_25 > 0;
    goto L27;

  anon54_Then:
    goto L27;

  anon49_Then:
    goto L15;
}



procedure {:origName "BuildCompatibleIDs"} BuildCompatibleIDs(actual_CompatibleID: int, actual_SubCompatibleID: int, actual_Class: int, actual_SubClass: int, actual_Protocol: int) returns (Tmp_865: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "BuildCompatibleIDs"} BuildCompatibleIDs(actual_CompatibleID: int, actual_SubCompatibleID: int, actual_Class: int, actual_SubClass: int, actual_Protocol: int) returns (Tmp_865: int)
{
  var {:pointer} pwch: int;
  var {:scalar} Tmp_866: int;
  var {:scalar} SubClassLo: int;
  var {:scalar} ClassLo: int;
  var {:pointer} Tmp_868: int;
  var {:pointer} Tmp_869: int;
  var {:scalar} SubClassHi: int;
  var {:pointer} Tmp_870: int;
  var {:scalar} Tmp_871: int;
  var {:pointer} Tmp_872: int;
  var {:pointer} Tmp_873: int;
  var {:dopa} {:scalar} ulMSOSCompatibleIDLength: int;
  var {:pointer} Tmp_874: int;
  var {:scalar} ProtocolHi: int;
  var {:scalar} Tmp_875: int;
  var {:pointer} Tmp_876: int;
  var {:scalar} Tmp_877: int;
  var {:scalar} Tmp_878: int;
  var {:scalar} Tmp_879: int;
  var {:scalar} Tmp_880: int;
  var {:scalar} Tmp_881: int;
  var {:scalar} ClassHi: int;
  var {:pointer} pClassIds: int;
  var {:pointer} Tmp_882: int;
  var {:pointer} Tmp_883: int;
  var {:scalar} ProtocolLo: int;
  var {:scalar} ulClassCompatibleIDLength: int;
  var {:pointer} Tmp_884: int;
  var {:scalar} Tmp_885: int;
  var {:scalar} Tmp_886: int;
  var {:pointer} Tmp_887: int;
  var {:scalar} Tmp_888: int;
  var {:pointer} Tmp_889: int;
  var {:pointer} CompatibleID: int;
  var {:pointer} SubCompatibleID: int;
  var {:scalar} Class: int;
  var {:scalar} SubClass: int;
  var {:scalar} Protocol: int;

  anon0:
    call {:si_unique_call 1033} ulMSOSCompatibleIDLength := __HAVOC_malloc(4);
    CompatibleID := actual_CompatibleID;
    SubCompatibleID := actual_SubCompatibleID;
    Class := actual_Class;
    SubClass := actual_SubClass;
    Protocol := actual_Protocol;
    call {:si_unique_call 1034} Tmp_868 := __HAVOC_malloc(8);
    call {:si_unique_call 1035} Tmp_869 := __HAVOC_malloc(8);
    call {:si_unique_call 1036} Tmp_870 := __HAVOC_malloc(8);
    call {:si_unique_call 1037} Tmp_872 := __HAVOC_malloc(8);
    call {:si_unique_call 1038} Tmp_873 := __HAVOC_malloc(8);
    call {:si_unique_call 1039} Tmp_874 := __HAVOC_malloc(8);
    call {:si_unique_call 1040} Tmp_876 := __HAVOC_malloc(8);
    call {:si_unique_call 1041} Tmp_882 := __HAVOC_malloc(8);
    call {:si_unique_call 1042} Tmp_883 := __HAVOC_malloc(8);
    call {:si_unique_call 1043} Tmp_884 := __HAVOC_malloc(8);
    call {:si_unique_call 1044} Tmp_887 := __HAVOC_malloc(8);
    call {:si_unique_call 1045} Tmp_889 := __HAVOC_malloc(8);
    call {:si_unique_call 1046} Tmp_878 := corral_nondet();
    havoc ClassHi;
    Tmp_879 := BAND(Class, BOR(BOR(BOR(1, 2), 4), 8));
    Tmp_886 := Tmp_879;
    havoc ClassLo;
    call {:si_unique_call 1047} Tmp_875 := corral_nondet();
    havoc SubClassHi;
    Tmp_871 := BAND(SubClass, BOR(BOR(BOR(1, 2), 4), 8));
    Tmp_866 := Tmp_871;
    havoc SubClassLo;
    call {:si_unique_call 1048} Tmp_888 := corral_nondet();
    havoc ProtocolHi;
    Tmp_881 := BAND(Protocol, BOR(BOR(BOR(1, 2), 4), 8));
    Tmp_885 := Tmp_881;
    havoc ProtocolLo;
    call {:si_unique_call 1049} sdv_do_paged_code_check();
    ulClassCompatibleIDLength := 144;
    call {:si_unique_call 1050} pwch := BuildMSOSCompatibleIDs(CompatibleID, SubCompatibleID, ulClassCompatibleIDLength, ulMSOSCompatibleIDLength);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pwch != 0;
    assume {:nonnull} ulMSOSCompatibleIDLength != 0;
    assume ulMSOSCompatibleIDLength > 0;
    Tmp_880 := INTDIV(Mem_T.VOID[ulMSOSCompatibleIDLength], 2);
    pClassIds := pwch + Tmp_880 * 4;
    call {:si_unique_call 1051} sdv_RtlCopyMemory(0, 0, 144);
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_876;
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_874;
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_883;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    Mem_T.VOID[Tmp_883] := ClassHi;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    Mem_T.VOID[Tmp_874] := Mem_T.VOID[Tmp_883];
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    Mem_T.VOID[Tmp_876] := Mem_T.VOID[Tmp_874];
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_884;
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_868;
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_873;
    assume {:nonnull} Tmp_873 != 0;
    assume Tmp_873 > 0;
    Mem_T.VOID[Tmp_873 + 1 * 4] := ClassLo;
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} Tmp_873 != 0;
    assume Tmp_873 > 0;
    Mem_T.VOID[Tmp_868 + 1 * 4] := Mem_T.VOID[Tmp_873 + 1 * 4];
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    Mem_T.VOID[Tmp_884 + 1 * 4] := Mem_T.VOID[Tmp_868 + 1 * 4];
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_872;
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_869;
    assume {:nonnull} Tmp_869 != 0;
    assume Tmp_869 > 0;
    Mem_T.VOID[Tmp_869] := SubClassHi;
    assume {:nonnull} Tmp_869 != 0;
    assume Tmp_869 > 0;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    Mem_T.VOID[Tmp_872] := Mem_T.VOID[Tmp_869];
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_887;
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_882;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    Mem_T.VOID[Tmp_882 + 1 * 4] := SubClassLo;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    Mem_T.VOID[Tmp_887 + 1 * 4] := Mem_T.VOID[Tmp_882 + 1 * 4];
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_889;
    assume {:nonnull} Tmp_889 != 0;
    assume Tmp_889 > 0;
    Mem_T.VOID[Tmp_889] := ProtocolHi;
    assume {:nonnull} pClassIds != 0;
    assume pClassIds > 0;
    havoc Tmp_870;
    assume {:nonnull} Tmp_870 != 0;
    assume Tmp_870 > 0;
    Mem_T.VOID[Tmp_870 + 1 * 4] := ProtocolLo;
    assume {:nonnull} ulMSOSCompatibleIDLength != 0;
    assume ulMSOSCompatibleIDLength > 0;
    Tmp_877 := INTDIV(ulClassCompatibleIDLength + Mem_T.VOID[ulMSOSCompatibleIDLength], 2);
    assume {:nonnull} pwch != 0;
    assume pwch > 0;
    Mem_T.VOID[pwch + Tmp_877 * 4] := 0;
    goto L31;

  L31:
    Tmp_865 := pwch;
    return;

  anon3_Then:
    assume {:partition} pwch == 0;
    goto L31;
}



procedure {:origName "WPP_RECORDER_SF_sd"} WPP_RECORDER_SF_sd(actual_AutoLogContext_11: int, actual_level_11: int, actual_flags_11: int, actual_id_12: int, actual_traceGuid_11: int, actual_s_p_e_c_i_a_l_26: int, actual_s_p_e_c_i_a_l_27: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_sd"} WPP_RECORDER_SF_sd(actual_AutoLogContext_11: int, actual_level_11: int, actual_flags_11: int, actual_id_12: int, actual_traceGuid_11: int, actual_s_p_e_c_i_a_l_26: int, actual_s_p_e_c_i_a_l_27: int)
{
  var {:scalar} Tmp_890: int;
  var {:scalar} sdv_324: int;
  var {:scalar} Tmp_898: int;
  var {:scalar} Tmp_899: int;
  var {:scalar} sdv_326: int;
  var {:scalar} Tmp_904: int;
  var {:scalar} level_11: int;
  var {:scalar} flags_11: int;
  var {:pointer} traceGuid_11: int;
  var {:pointer} s_p_e_c_i_a_l_26: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;

  anon0:
    call {:si_unique_call 1052} vslice_dummy_var_113 := __HAVOC_malloc(4);
    level_11 := actual_level_11;
    flags_11 := actual_flags_11;
    traceGuid_11 := actual_traceGuid_11;
    s_p_e_c_i_a_l_26 := actual_s_p_e_c_i_a_l_26;
    call {:si_unique_call 1053} vslice_dummy_var_115 := __HAVOC_malloc(4);
    Tmp_898 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_11 - 1);
    call {:si_unique_call 1054} Tmp_904 := corral_nondet();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 1055} Tmp_890 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} s_p_e_c_i_a_l_26 != 0;
    goto L14;

  L14:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} s_p_e_c_i_a_l_26 != 0;
    goto L17;

  L17:
    call {:si_unique_call 1056} Tmp_899 := corral_nondet();
    goto L6;

  L6:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} s_p_e_c_i_a_l_26 != 0;
    goto L27;

  L27:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} s_p_e_c_i_a_l_26 != 0;
    goto L30;

  L30:
    call {:si_unique_call 1057} vslice_dummy_var_114 := corral_nondet();
    return;

  anon16_Then:
    assume {:partition} s_p_e_c_i_a_l_26 == 0;
    goto L30;

  anon13_Then:
    assume {:partition} s_p_e_c_i_a_l_26 == 0;
    goto L27;

  anon15_Then:
    assume {:partition} s_p_e_c_i_a_l_26 == 0;
    goto L17;

  anon14_Then:
    assume {:partition} s_p_e_c_i_a_l_26 == 0;
    goto L14;

  anon18_Then:
    goto L6;

  anon17_Then:
    goto L6;
}



procedure {:origName "D3ColdSupportInterfaceFunctionGetD3ColdCapability"} D3ColdSupportInterfaceFunctionGetD3ColdCapability(actual_Context_3: int, actual_D3ColdSupported_1: int) returns (Tmp_905: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D3ColdSupportInterfaceFunctionGetD3ColdCapability"} D3ColdSupportInterfaceFunctionGetD3ColdCapability(actual_Context_3: int, actual_D3ColdSupported_1: int) returns (Tmp_905: int)
{
  var {:pointer} Tmp_906: int;
  var {:pointer} Tmp_907: int;
  var {:pointer} functionPdoExt_26: int;
  var {:pointer} Tmp_908: int;
  var {:scalar} status_53: int;
  var {:pointer} Context_3: int;
  var {:pointer} D3ColdSupported_1: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;

  anon0:
    Context_3 := actual_Context_3;
    D3ColdSupported_1 := actual_D3ColdSupported_1;
    call {:si_unique_call 1058} sdv_do_paged_code_check();
    functionPdoExt_26 := Context_3;
    assume {:nonnull} functionPdoExt_26 != 0;
    assume functionPdoExt_26 > 0;
    havoc Tmp_906;
    assume {:nonnull} functionPdoExt_26 != 0;
    assume functionPdoExt_26 > 0;
    assume {:nonnull} Tmp_906 != 0;
    assume Tmp_906 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L25;

  L25:
    Tmp_905 := status_53;
    return;

  anon5_Then:
    assume {:nonnull} D3ColdSupported_1 != 0;
    assume D3ColdSupported_1 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.VOID[D3ColdSupported_1] != 0;
    Tmp_908 := strConst__li2bpl26;
    goto L21;

  L21:
    havoc Tmp_907;
    assume {:nonnull} functionPdoExt_26 != 0;
    assume functionPdoExt_26 > 0;
    havoc vslice_dummy_var_360;
    havoc vslice_dummy_var_361;
    call {:si_unique_call 1059} WPP_RECORDER_SF_qsd(vslice_dummy_var_360, 5, 3, 64, Tmp_907, vslice_dummy_var_361, Tmp_908, status_53);
    goto L25;

  anon6_Then:
    assume {:partition} Mem_T.VOID[D3ColdSupported_1] == 0;
    Tmp_908 := strConst__li2bpl25;
    goto L21;
}



procedure {:origName "D3ColdSupportInterfaceFunctionGetBusDriverD3ColdSupport"} D3ColdSupportInterfaceFunctionGetBusDriverD3ColdSupport(actual_Context_4: int, actual_D3ColdSupported_2: int) returns (Tmp_911: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D3ColdSupportInterfaceFunctionGetBusDriverD3ColdSupport"} D3ColdSupportInterfaceFunctionGetBusDriverD3ColdSupport(actual_Context_4: int, actual_D3ColdSupported_2: int) returns (Tmp_911: int)
{
  var {:pointer} Tmp_912: int;
  var {:pointer} Tmp_914: int;
  var {:pointer} functionPdoExt_27: int;
  var {:scalar} status_54: int;
  var {:pointer} Tmp_916: int;
  var {:pointer} Context_4: int;
  var {:pointer} D3ColdSupported_2: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;

  anon0:
    Context_4 := actual_Context_4;
    D3ColdSupported_2 := actual_D3ColdSupported_2;
    call {:si_unique_call 1060} sdv_do_paged_code_check();
    functionPdoExt_27 := Context_4;
    assume {:nonnull} functionPdoExt_27 != 0;
    assume functionPdoExt_27 > 0;
    havoc Tmp_914;
    assume {:nonnull} functionPdoExt_27 != 0;
    assume functionPdoExt_27 > 0;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L25;

  L25:
    Tmp_911 := status_54;
    return;

  anon5_Then:
    assume {:nonnull} D3ColdSupported_2 != 0;
    assume D3ColdSupported_2 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.VOID[D3ColdSupported_2] != 0;
    Tmp_912 := strConst__li2bpl26;
    goto L21;

  L21:
    havoc Tmp_916;
    assume {:nonnull} functionPdoExt_27 != 0;
    assume functionPdoExt_27 > 0;
    havoc vslice_dummy_var_362;
    havoc vslice_dummy_var_363;
    call {:si_unique_call 1061} WPP_RECORDER_SF_qsd(vslice_dummy_var_362, 5, 3, 65, Tmp_916, vslice_dummy_var_363, Tmp_912, status_54);
    goto L25;

  anon6_Then:
    assume {:partition} Mem_T.VOID[D3ColdSupported_2] == 0;
    Tmp_912 := strConst__li2bpl25;
    goto L21;
}



procedure {:origName "PrependMSOSCompatibleIDs"} PrependMSOSCompatibleIDs(actual_functionPdoExt_28: int) returns (Tmp_917: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PrependMSOSCompatibleIDs"} PrependMSOSCompatibleIDs(actual_functionPdoExt_28: int) returns (Tmp_917: int)
{
  var {:pointer} functionAssoc_5: int;
  var {:scalar} ulCustomIDLength: int;
  var {:scalar} Tmp_918: int;
  var {:scalar} Tmp_919: int;
  var {:pointer} idString: int;
  var {:scalar} Tmp_921: int;
  var {:pointer} subCompatibleID_1: int;
  var {:pointer} compatibleID_1: int;
  var {:dopa} {:scalar} ulMSCompatibleIDLength: int;
  var {:pointer} functionPdoExt_28: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;

  anon0:
    call {:si_unique_call 1062} subCompatibleID_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1063} compatibleID_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1064} ulMSCompatibleIDLength := __HAVOC_malloc(4);
    functionPdoExt_28 := actual_functionPdoExt_28;
    assume {:nonnull} compatibleID_1 != 0;
    assume compatibleID_1 > 0;
    assume {:nonnull} subCompatibleID_1 != 0;
    assume subCompatibleID_1 > 0;
    assume {:nonnull} functionPdoExt_28 != 0;
    assume functionPdoExt_28 > 0;
    havoc functionAssoc_5;
    call {:si_unique_call 1065} sdv_do_paged_code_check();
    call {:si_unique_call 1066} vslice_dummy_var_116 := GetFunctionMSOSCompatibleIDs(functionPdoExt_28, compatibleID_1, subCompatibleID_1);
    assume {:nonnull} functionAssoc_5 != 0;
    assume functionAssoc_5 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} functionAssoc_5 != 0;
    assume functionAssoc_5 > 0;
    havoc ulCustomIDLength;
    goto L21;

  L21:
    assume {:nonnull} compatibleID_1 != 0;
    assume compatibleID_1 > 0;
    assume {:nonnull} subCompatibleID_1 != 0;
    assume subCompatibleID_1 > 0;
    havoc vslice_dummy_var_364;
    havoc vslice_dummy_var_365;
    call {:si_unique_call 1067} idString := BuildMSOSCompatibleIDs(vslice_dummy_var_364, vslice_dummy_var_365, ulCustomIDLength, ulMSCompatibleIDLength);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} idString != 0;
    assume {:nonnull} functionAssoc_5 != 0;
    assume functionAssoc_5 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} functionAssoc_5 != 0;
    assume functionAssoc_5 > 0;
    havoc Tmp_918;
    assume {:nonnull} ulMSCompatibleIDLength != 0;
    assume ulMSCompatibleIDLength > 0;
    Tmp_921 := INTDIV(Mem_T.VOID[ulMSCompatibleIDLength], 2);
    call {:si_unique_call 1068} sdv_RtlCopyMemory(0, 0, Tmp_918);
    goto L28;

  L28:
    assume {:nonnull} ulMSCompatibleIDLength != 0;
    assume ulMSCompatibleIDLength > 0;
    Tmp_919 := INTDIV(Mem_T.VOID[ulMSCompatibleIDLength] + ulCustomIDLength, 2);
    assume {:nonnull} idString != 0;
    assume idString > 0;
    Mem_T.VOID[idString + Tmp_919 * 4] := 0;
    goto L26;

  L26:
    Tmp_917 := idString;
    return;

  anon9_Then:
    goto L28;

  anon8_Then:
    assume {:partition} idString == 0;
    goto L26;

  anon7_Then:
    ulCustomIDLength := 0;
    goto L21;
}



procedure {:origName "CreateStaticFunctionPDOs"} CreateStaticFunctionPDOs(actual_parentFdoExt_71: int) returns (Tmp_923: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CreateStaticFunctionPDOs"} CreateStaticFunctionPDOs(actual_parentFdoExt_71: int) returns (Tmp_923: int)
{
  var {:pointer} functionAssoc_6: int;
  var {:pointer} Tmp_924: int;
  var {:scalar} ifaceClass_1: int;
  var {:pointer} Tmp_925: int;
  var {:pointer} Tmp_926: int;
  var {:pointer} Tmp_927: int;
  var {:pointer} Tmp_928: int;
  var {:pointer} configDesc_3: int;
  var {:pointer} Tmp_929: int;
  var {:pointer} ifaceDesc_1: int;
  var {:pointer} Tmp_930: int;
  var {:scalar} Tmp_931: int;
  var {:pointer} Tmp_932: int;
  var {:scalar} sdv_333: int;
  var {:pointer} Tmp_933: int;
  var {:scalar} pdoIndex: int;
  var {:pointer} Tmp_934: int;
  var {:pointer} Tmp_935: int;
  var {:scalar} Tmp_936: int;
  var {:pointer} Tmp_937: int;
  var {:pointer} functionPdoExt_29: int;
  var {:scalar} ifaceNum: int;
  var {:pointer} Tmp_938: int;
  var {:pointer} functionPdoExt_30: int;
  var {:pointer} Tmp_939: int;
  var {:pointer} Tmp_940: int;
  var {:pointer} Tmp_941: int;
  var {:pointer} Tmp_942: int;
  var {:scalar} i_17: int;
  var {:pointer} Tmp_943: int;
  var {:pointer} Tmp_944: int;
  var {:pointer} tempDevObj: int;
  var {:pointer} Tmp_945: int;
  var {:pointer} Tmp_946: int;
  var {:pointer} Tmp_947: int;
  var {:pointer} Tmp_948: int;
  var {:scalar} Tmp_949: int;
  var {:pointer} uaspDescriptor: int;
  var {:pointer} Tmp_950: int;
  var {:pointer} devExt_10: int;
  var {:pointer} Tmp_952: int;
  var {:pointer} Tmp_953: int;
  var {:pointer} functionPdo: int;
  var {:scalar} Tmp_954: int;
  var {:pointer} Tmp_955: int;
  var {:pointer} Tmp_956: int;
  var {:pointer} Tmp_957: int;
  var {:pointer} Tmp_958: int;
  var {:scalar} Tmp_959: int;
  var {:pointer} Tmp_960: int;
  var {:pointer} sdv_338: int;
  var {:pointer} Tmp_961: int;
  var {:pointer} Tmp_962: int;
  var {:pointer} Tmp_963: int;
  var {:pointer} Tmp_964: int;
  var {:pointer} Tmp_966: int;
  var {:scalar} Tmp_967: int;
  var {:scalar} Tmp_968: int;
  var {:scalar} Tmp_969: int;
  var {:pointer} Tmp_970: int;
  var {:scalar} Tmp_971: int;
  var {:scalar} status_55: int;
  var {:scalar} Tmp_972: int;
  var {:pointer} Tmp_973: int;
  var {:pointer} Tmp_974: int;
  var {:scalar} Tmp_975: int;
  var {:pointer} parentFdoExt_71: int;
  var boogieTmp: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;

  anon0:
    call {:si_unique_call 1069} functionPdo := __HAVOC_malloc(4);
    parentFdoExt_71 := actual_parentFdoExt_71;
    call {:si_unique_call 1070} Tmp_927 := __HAVOC_malloc(4);
    call {:si_unique_call 1071} Tmp_964 := __HAVOC_malloc(4);
    call {:si_unique_call 1072} Tmp_974 := __HAVOC_malloc(4);
    status_55 := 0;
    pdoIndex := 0;
    call {:si_unique_call 1073} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc configDesc_3;
    i_17 := 0;
    goto L15;

  L15:
    call {:si_unique_call 1074} ifaceClass_1, Tmp_925, Tmp_929, Tmp_931, ifaceNum, Tmp_938, i_17, Tmp_946, Tmp_950, Tmp_972 := CreateStaticFunctionPDOs_loop_L15(ifaceClass_1, Tmp_925, configDesc_3, Tmp_929, Tmp_931, ifaceNum, Tmp_938, i_17, Tmp_946, Tmp_950, Tmp_972, parentFdoExt_71);
    goto L15_last;

  L15_last:
    assume {:nonnull} configDesc_3 != 0;
    assume configDesc_3 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} configDesc_3 != 0;
    assume configDesc_3 > 0;
    havoc Tmp_975;
    havoc Tmp_926;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_366;
    havoc vslice_dummy_var_367;
    call {:si_unique_call 1075} WPP_RECORDER_SF_dd(vslice_dummy_var_366, 4, 1, 11, Tmp_926, Tmp_975, vslice_dummy_var_367);
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    call {:si_unique_call 1076} boogieTmp := InvokePdoEnableCallbacks(parentFdoExt_71);
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_949;
    call {:si_unique_call 1077} sdv_338 := ExAllocatePoolWithTag(512, Tmp_949, -1016958123);
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_969;
    call {:si_unique_call 1078} sdv_RtlZeroMemory(0, Tmp_969);
    goto L54;

  L54:
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    havoc Tmp_924;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_368;
    call {:si_unique_call 1079} WPP_RECORDER_SF_d(vslice_dummy_var_368, 2, 8, 12, Tmp_924, status_55);
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_369;
    call {:si_unique_call 1080} RecordFailure(parentFdoExt_71, vslice_dummy_var_369, -1073741670, 0, 536870917, -1017952719, 0, 0);
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    status_55 := -1073741670;
    goto L65;

  L65:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_55 >= 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_956;
    assume {:nonnull} Tmp_956 != 0;
    assume Tmp_956 > 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_934;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_370;
    havoc vslice_dummy_var_371;
    call {:si_unique_call 1081} WPP_RECORDER_SF_d(vslice_dummy_var_370, 4, 1, 16, Tmp_934, vslice_dummy_var_371);
    goto L217;

  L217:
    Tmp_923 := status_55;
    goto LM2;

  LM2:
    return;

  anon58_Then:
    assume {:partition} 0 > status_55;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto L241;

  L241:
    havoc Tmp_939;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_372;
    call {:si_unique_call 1082} WPP_RECORDER_SF_d(vslice_dummy_var_372, 2, 8, 17, Tmp_939, status_55);
    goto L217;

  anon66_Then:
    i_17 := 0;
    goto L222;

  L222:
    call {:si_unique_call 1083} Tmp_927, functionPdoExt_30, i_17, tempDevObj, Tmp_954, Tmp_960, Tmp_962, Tmp_964, Tmp_967 := CreateStaticFunctionPDOs_loop_L222(Tmp_927, functionPdoExt_30, i_17, tempDevObj, Tmp_954, Tmp_960, Tmp_962, Tmp_964, Tmp_967, parentFdoExt_71);
    goto L222_last;

  L222_last:
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    Tmp_967 := i_17;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_962;
    assume {:nonnull} Tmp_962 != 0;
    assume Tmp_962 > 0;
    havoc Tmp_927;
    assume {:nonnull} Tmp_927 != 0;
    assume Tmp_927 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    Tmp_954 := i_17;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_960;
    assume {:nonnull} Tmp_960 != 0;
    assume Tmp_960 > 0;
    havoc Tmp_964;
    assume {:nonnull} Tmp_964 != 0;
    assume Tmp_964 > 0;
    havoc tempDevObj;
    assume {:nonnull} tempDevObj != 0;
    assume tempDevObj > 0;
    havoc functionPdoExt_30;
    call {:si_unique_call 1084} FreeResourcesForFunctionSuspend(functionPdoExt_30);
    call {:si_unique_call 1085} IoDeleteDevice(0);
    goto L227;

  L227:
    i_17 := i_17 + 1;
    goto L227_dummy;

  L227_dummy:
    assume false;
    return;

  anon71_Then:
    goto L227;

  anon67_Then:
    call {:si_unique_call 1086} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto L241;

  anon56_Then:
    i_17 := 0;
    goto L64;

  L64:
    call {:si_unique_call 1087} functionAssoc_6, Tmp_928, ifaceDesc_1, Tmp_930, Tmp_932, sdv_333, Tmp_933, pdoIndex, Tmp_935, Tmp_936, Tmp_937, functionPdoExt_29, Tmp_940, Tmp_941, Tmp_942, i_17, Tmp_943, Tmp_944, Tmp_945, Tmp_947, Tmp_948, uaspDescriptor, devExt_10, Tmp_952, Tmp_953, Tmp_955, Tmp_957, Tmp_958, Tmp_959, Tmp_961, Tmp_963, Tmp_966, Tmp_968, Tmp_971, status_55, Tmp_973, Tmp_974, vslice_dummy_var_117, vslice_dummy_var_118 := CreateStaticFunctionPDOs_loop_L64(functionAssoc_6, Tmp_928, ifaceDesc_1, Tmp_930, Tmp_932, sdv_333, Tmp_933, pdoIndex, Tmp_935, Tmp_936, Tmp_937, functionPdoExt_29, Tmp_940, Tmp_941, Tmp_942, i_17, Tmp_943, Tmp_944, Tmp_945, Tmp_947, Tmp_948, uaspDescriptor, devExt_10, Tmp_952, Tmp_953, functionPdo, Tmp_955, Tmp_957, Tmp_958, Tmp_959, Tmp_961, Tmp_963, Tmp_966, Tmp_968, Tmp_971, status_55, Tmp_973, Tmp_974, parentFdoExt_71, vslice_dummy_var_117, vslice_dummy_var_118);
    goto L64_last;

  L64_last:
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    Tmp_971 := i_17;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_941;
    functionAssoc_6 := Tmp_941 + Tmp_971 * 68;
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto L75;

  L75:
    i_17 := i_17 + 1;
    goto L75_dummy;

  L75_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    status_55 := -1073741668;
    goto L65;

  anon59_Then:
    call {:si_unique_call 1088} status_55 := IoCreateDevice(0, 736, 0, 34, 128, 0, functionPdo);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} status_55 < 0;
    goto L198;

  L198:
    havoc Tmp_970;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_373;
    call {:si_unique_call 1089} WPP_RECORDER_SF_d(vslice_dummy_var_373, 2, 8, 13, Tmp_970, status_55);
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_374;
    call {:si_unique_call 1090} RecordFailure(parentFdoExt_71, vslice_dummy_var_374, status_55, 0, 536870917, -1017952718, 0, 0);
    goto L65;

  anon60_Then:
    assume {:partition} 0 <= status_55;
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto L198;

  anon61_Then:
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    havoc devExt_10;
    call {:si_unique_call 1091} sdv_RtlZeroMemory(0, 736);
    assume {:nonnull} devExt_10 != 0;
    assume devExt_10 > 0;
    assume {:nonnull} devExt_10 != 0;
    assume devExt_10 > 0;
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    assume {:nonnull} devExt_10 != 0;
    assume devExt_10 > 0;
    functionPdoExt_29 := functionPdoExt_DEVICE_EXTENSION(devExt_10);
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    goto L107;

  L107:
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    call {:si_unique_call 1092} InitializeListHead(pendingD0ListEntry_FUNCTION_PDO_EXTENSION(functionPdoExt_29));
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    call {:si_unique_call 1093} KeInitializeEvent(removeEvent_FUNCTION_PDO_EXTENSION(functionPdoExt_29), 0, 0);
    call {:si_unique_call 1094} Tmp_947 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    havoc vslice_dummy_var_375;
    Mem_T.VOID[Tmp_947] := vslice_dummy_var_375;
    call {:si_unique_call 1095} sdv_KeInitializeSpinLock(Tmp_947);
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    call {:si_unique_call 1096} InitializeListHead(waitWakeQueueList_FUNCTION_PDO_EXTENSION(functionPdoExt_29));
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    call {:si_unique_call 1097} vslice_dummy_var_117 := sdv_IoCsqInitialize(waitWakeQueue_FUNCTION_PDO_EXTENSION(functionPdoExt_29), li2bplFunctionConstant971, li2bplFunctionConstant972, li2bplFunctionConstant974, li2bplFunctionConstant969, li2bplFunctionConstant970, li2bplFunctionConstant975);
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    call {:si_unique_call 1098} InitializeListHead(idleQueueList_FUNCTION_PDO_EXTENSION(functionPdoExt_29));
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    call {:si_unique_call 1099} vslice_dummy_var_118 := sdv_IoCsqInitialize(idleQueue_FUNCTION_PDO_EXTENSION(functionPdoExt_29), li2bplFunctionConstant978, li2bplFunctionConstant979, li2bplFunctionConstant980, li2bplFunctionConstant976, li2bplFunctionConstant977, li2bplFunctionConstant982);
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    call {:si_unique_call 1100} KeInitializeEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(functionPdoExt_29), 0, 1);
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    havoc Tmp_953;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_376;
    havoc vslice_dummy_var_377;
    havoc vslice_dummy_var_378;
    call {:si_unique_call 1101} WPP_RECORDER_SF_dd(vslice_dummy_var_376, 4, 1, 14, Tmp_953, vslice_dummy_var_377, vslice_dummy_var_378);
    call {:si_unique_call 1102} sdv_RtlCopyMemory(0, 0, 18);
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    havoc Tmp_945;
    assume {:nonnull} Tmp_945 != 0;
    assume Tmp_945 > 0;
    havoc Tmp_973;
    assume {:nonnull} Tmp_973 != 0;
    assume Tmp_973 > 0;
    havoc ifaceDesc_1;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    havoc Tmp_952;
    assume {:nonnull} Tmp_952 != 0;
    assume Tmp_952 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    havoc Tmp_955;
    assume {:nonnull} Tmp_955 != 0;
    assume Tmp_955 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} ifaceDesc_1 != 0;
    assume ifaceDesc_1 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    uaspDescriptor := 0;
    goto L159;

  L159:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} uaspDescriptor != 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    havoc Tmp_944;
    assume {:nonnull} Tmp_944 != 0;
    assume Tmp_944 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    assume {:nonnull} uaspDescriptor != 0;
    assume uaspDescriptor > 0;
    goto L151;

  L151:
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    havoc Tmp_932;
    assume {:nonnull} Tmp_932 != 0;
    assume Tmp_932 > 0;
    havoc Tmp_957;
    assume {:nonnull} Tmp_957 != 0;
    assume Tmp_957 > 0;
    havoc Tmp_961;
    assume {:nonnull} Tmp_961 != 0;
    assume Tmp_961 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    havoc Tmp_966;
    assume {:nonnull} Tmp_966 != 0;
    assume Tmp_966 > 0;
    havoc Tmp_958;
    assume {:nonnull} Tmp_958 != 0;
    assume Tmp_958 > 0;
    havoc Tmp_930;
    assume {:nonnull} Tmp_930 != 0;
    assume Tmp_930 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    goto L163;

  L163:
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    havoc Tmp_943;
    assume {:nonnull} Tmp_943 != 0;
    assume Tmp_943 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} functionAssoc_6 != 0;
    assume functionAssoc_6 > 0;
    havoc Tmp_942;
    assume {:nonnull} Tmp_942 != 0;
    assume Tmp_942 > 0;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    goto L165;

  L165:
    Tmp_959 := pdoIndex;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_928;
    assume {:nonnull} Tmp_928 != 0;
    assume Tmp_928 > 0;
    havoc Tmp_974;
    assume {:nonnull} Tmp_974 != 0;
    assume Tmp_974 > 0;
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    Tmp_936 := i_17;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_935;
    assume {:nonnull} Tmp_935 != 0;
    assume Tmp_935 > 0;
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    pdoIndex := pdoIndex + 1;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_948;
    assume {:nonnull} Tmp_948 != 0;
    assume Tmp_948 > 0;
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    Tmp_968 := i_17;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_963;
    assume {:nonnull} Tmp_963 != 0;
    assume Tmp_963 > 0;
    havoc Tmp_933;
    call {:si_unique_call 1103} SetFunctionHandleData(parentFdoExt_71, functionPdoExt_29, Tmp_933);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L172;

  L172:
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L192;

  L192:
    havoc Tmp_937;
    assume {:nonnull} functionPdo != 0;
    assume functionPdo > 0;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_379;
    havoc vslice_dummy_var_380;
    call {:si_unique_call 1104} WPP_RECORDER_SF_qd(vslice_dummy_var_379, 4, 1, 15, Tmp_937, vslice_dummy_var_380, pdoIndex);
    goto L75;

  anon64_Then:
    call {:si_unique_call 1105} status_55 := AllocateResourcesForFunctionSuspend(parentFdoExt_71, functionPdoExt_29);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status_55 >= 0;
    call {:si_unique_call 1106} sdv_333 := IsFunctionRemoteWakeCapable(parentFdoExt_71, functionPdoExt_29);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    havoc Tmp_940;
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    goto L192;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    assume {:partition} 0 > status_55;
    goto L65;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    goto L172;

  anon76_Then:
    goto L165;

  anon63_Then:
    goto L165;

  anon75_Then:
    goto L163;

  anon81_Then:
    goto L151;

  anon62_Then:
    assume {:partition} uaspDescriptor == 0;
    goto L151;

  anon80_Then:
    call {:si_unique_call 1107} uaspDescriptor := __HAVOC_malloc(1);
    goto L159;

  anon74_Then:
    goto L151;

  anon73_Then:
    goto L151;

  anon72_Then:
    assume {:nonnull} functionPdoExt_29 != 0;
    assume functionPdoExt_29 > 0;
    goto L107;

  anon57_Then:
    goto L65;

  anon69_Then:
    goto L54;

  anon55_Then:
    Tmp_972 := i_17;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_938;
    assume {:nonnull} Tmp_938 != 0;
    assume Tmp_938 > 0;
    havoc Tmp_950;
    assume {:nonnull} Tmp_950 != 0;
    assume Tmp_950 > 0;
    havoc ifaceClass_1;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} ifaceClass_1 == 13;
    Tmp_931 := i_17;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc Tmp_925;
    assume {:nonnull} Tmp_925 != 0;
    assume Tmp_925 > 0;
    havoc Tmp_946;
    assume {:nonnull} Tmp_946 != 0;
    assume Tmp_946 > 0;
    ifaceNum := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_946)];
    havoc Tmp_929;
    assume {:nonnull} parentFdoExt_71 != 0;
    assume parentFdoExt_71 > 0;
    havoc vslice_dummy_var_381;
    call {:si_unique_call 1108} WPP_RECORDER_SF_d(vslice_dummy_var_381, 4, 1, 10, Tmp_929, ifaceNum);
    call {:si_unique_call 1109} InitCSInfo(parentFdoExt_71, ifaceNum);
    goto L22;

  L22:
    i_17 := i_17 + 1;
    goto L22_dummy;

  L22_dummy:
    assume false;
    return;

  anon68_Then:
    assume {:partition} ifaceClass_1 != 13;
    goto L22;
}



procedure {:origName "QueryFunctionCapabilities"} QueryFunctionCapabilities(actual_functionPdoExt_31: int, actual_irp_38: int) returns (Tmp_976: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_976 == 0 || Tmp_976 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QueryFunctionCapabilities"} QueryFunctionCapabilities(actual_functionPdoExt_31: int, actual_irp_38: int) returns (Tmp_976: int)
{
  var {:pointer} Tmp_978: int;
  var {:pointer} Tmp_979: int;
  var {:pointer} irpSp_15: int;
  var {:pointer} deviceCapabilities: int;
  var {:pointer} Tmp_980: int;
  var {:pointer} Tmp_981: int;
  var {:pointer} functionPdoExt_31: int;
  var {:pointer} irp_38: int;

  anon0:
    functionPdoExt_31 := actual_functionPdoExt_31;
    irp_38 := actual_irp_38;
    call {:si_unique_call 1110} irpSp_15 := sdv_IoGetCurrentIrpStackLocation(irp_38);
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    havoc deviceCapabilities;
    call {:si_unique_call 1111} sdv_do_paged_code_check();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} deviceCapabilities != 0;
    assume {:nonnull} functionPdoExt_31 != 0;
    assume functionPdoExt_31 > 0;
    havoc Tmp_979;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} functionPdoExt_31 != 0;
    assume functionPdoExt_31 > 0;
    havoc Tmp_980;
    assume {:nonnull} Tmp_980 != 0;
    assume Tmp_980 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} functionPdoExt_31 != 0;
    assume functionPdoExt_31 > 0;
    havoc Tmp_978;
    assume {:nonnull} Tmp_978 != 0;
    assume Tmp_978 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    goto L20;

  L20:
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L28;

  L28:
    assume {:nonnull} functionPdoExt_31 != 0;
    assume functionPdoExt_31 > 0;
    goto L29;

  L29:
    assume {:nonnull} functionPdoExt_31 != 0;
    assume functionPdoExt_31 > 0;
    havoc Tmp_981;
    assume {:nonnull} Tmp_981 != 0;
    assume Tmp_981 > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} functionPdoExt_31 != 0;
    assume functionPdoExt_31 > 0;
    Tmp_976 := 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L29;

  anon13_Then:
    goto L28;

  anon15_Then:
    goto L20;

  anon14_Then:
    goto L20;

  anon11_Then:
    assume {:partition} deviceCapabilities == 0;
    Tmp_976 := -1073741668;
    goto L1;
}



procedure {:origName "D3ColdSupportInterfaceFunctionGetLastTransitionStatus"} D3ColdSupportInterfaceFunctionGetLastTransitionStatus(actual_Context_5: int, actual_LastTransitionStatus: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D3ColdSupportInterfaceFunctionGetLastTransitionStatus"} D3ColdSupportInterfaceFunctionGetLastTransitionStatus(actual_Context_5: int, actual_LastTransitionStatus: int)
{
  var {:pointer} functionPdoExt_32: int;
  var {:pointer} Tmp_983: int;
  var {:pointer} Context_5: int;
  var {:pointer} LastTransitionStatus: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;

  anon0:
    call {:si_unique_call 1112} vslice_dummy_var_119 := __HAVOC_malloc(4);
    Context_5 := actual_Context_5;
    LastTransitionStatus := actual_LastTransitionStatus;
    functionPdoExt_32 := Context_5;
    assume {:nonnull} LastTransitionStatus != 0;
    assume LastTransitionStatus > 0;
    assume {:nonnull} functionPdoExt_32 != 0;
    assume functionPdoExt_32 > 0;
    havoc vslice_dummy_var_382;
    Mem_T.VOID[LastTransitionStatus] := vslice_dummy_var_382;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    havoc Tmp_983;
    assume {:nonnull} LastTransitionStatus != 0;
    assume LastTransitionStatus > 0;
    assume {:nonnull} functionPdoExt_32 != 0;
    assume functionPdoExt_32 > 0;
    havoc vslice_dummy_var_383;
    havoc vslice_dummy_var_384;
    call {:si_unique_call 1113} WPP_RECORDER_SF_qL(vslice_dummy_var_383, 5, 3, 66, Tmp_983, vslice_dummy_var_384, Mem_T.VOID[LastTransitionStatus]);
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "WPP_RECORDER_SF_sq"} WPP_RECORDER_SF_sq(actual_AutoLogContext_12: int, actual_level_12: int, actual_flags_12: int, actual_id_13: int, actual_traceGuid_12: int, actual_s_p_e_c_i_a_l_28: int, actual_s_p_e_c_i_a_l_29: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_sq"} WPP_RECORDER_SF_sq(actual_AutoLogContext_12: int, actual_level_12: int, actual_flags_12: int, actual_id_13: int, actual_traceGuid_12: int, actual_s_p_e_c_i_a_l_28: int, actual_s_p_e_c_i_a_l_29: int)
{
  var {:scalar} sdv_341: int;
  var {:scalar} Tmp_988: int;
  var {:scalar} sdv_343: int;
  var {:scalar} Tmp_994: int;
  var {:scalar} Tmp_995: int;
  var {:scalar} Tmp_997: int;
  var {:scalar} level_12: int;
  var {:scalar} flags_12: int;
  var {:pointer} traceGuid_12: int;
  var {:pointer} s_p_e_c_i_a_l_28: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;

  anon0:
    call {:si_unique_call 1114} vslice_dummy_var_120 := __HAVOC_malloc(4);
    level_12 := actual_level_12;
    flags_12 := actual_flags_12;
    traceGuid_12 := actual_traceGuid_12;
    s_p_e_c_i_a_l_28 := actual_s_p_e_c_i_a_l_28;
    call {:si_unique_call 1115} vslice_dummy_var_122 := __HAVOC_malloc(4);
    Tmp_988 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_12 - 1);
    call {:si_unique_call 1116} Tmp_995 := corral_nondet();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 1117} Tmp_994 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} s_p_e_c_i_a_l_28 != 0;
    goto L14;

  L14:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} s_p_e_c_i_a_l_28 != 0;
    goto L17;

  L17:
    call {:si_unique_call 1118} Tmp_997 := corral_nondet();
    goto L6;

  L6:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} s_p_e_c_i_a_l_28 != 0;
    goto L27;

  L27:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} s_p_e_c_i_a_l_28 != 0;
    goto L30;

  L30:
    call {:si_unique_call 1119} vslice_dummy_var_121 := corral_nondet();
    return;

  anon16_Then:
    assume {:partition} s_p_e_c_i_a_l_28 == 0;
    goto L30;

  anon13_Then:
    assume {:partition} s_p_e_c_i_a_l_28 == 0;
    goto L27;

  anon15_Then:
    assume {:partition} s_p_e_c_i_a_l_28 == 0;
    goto L17;

  anon14_Then:
    assume {:partition} s_p_e_c_i_a_l_28 == 0;
    goto L14;

  anon18_Then:
    goto L6;

  anon17_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_qsd"} WPP_RECORDER_SF_qsd(actual_AutoLogContext_13: int, actual_level_13: int, actual_flags_13: int, actual_id_14: int, actual_traceGuid_13: int, actual_s_p_e_c_i_a_l_30: int, actual_s_p_e_c_i_a_l_31: int, actual_s_p_e_c_i_a_l_32: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qsd"} WPP_RECORDER_SF_qsd(actual_AutoLogContext_13: int, actual_level_13: int, actual_flags_13: int, actual_id_14: int, actual_traceGuid_13: int, actual_s_p_e_c_i_a_l_30: int, actual_s_p_e_c_i_a_l_31: int, actual_s_p_e_c_i_a_l_32: int)
{
  var {:scalar} Tmp_1000: int;
  var {:scalar} sdv_345: int;
  var {:scalar} Tmp_1006: int;
  var {:scalar} Tmp_1007: int;
  var {:scalar} sdv_347: int;
  var {:scalar} Tmp_1008: int;
  var {:scalar} level_13: int;
  var {:scalar} flags_13: int;
  var {:pointer} traceGuid_13: int;
  var {:pointer} s_p_e_c_i_a_l_31: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;

  anon0:
    call {:si_unique_call 1120} vslice_dummy_var_123 := __HAVOC_malloc(4);
    level_13 := actual_level_13;
    flags_13 := actual_flags_13;
    traceGuid_13 := actual_traceGuid_13;
    s_p_e_c_i_a_l_31 := actual_s_p_e_c_i_a_l_31;
    call {:si_unique_call 1121} vslice_dummy_var_125 := __HAVOC_malloc(4);
    Tmp_1000 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_13 - 1);
    call {:si_unique_call 1122} Tmp_1007 := corral_nondet();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 1123} Tmp_1008 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} s_p_e_c_i_a_l_31 != 0;
    goto L14;

  L14:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} s_p_e_c_i_a_l_31 != 0;
    goto L17;

  L17:
    call {:si_unique_call 1124} Tmp_1006 := corral_nondet();
    goto L6;

  L6:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} s_p_e_c_i_a_l_31 != 0;
    goto L27;

  L27:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} s_p_e_c_i_a_l_31 != 0;
    goto L30;

  L30:
    call {:si_unique_call 1125} vslice_dummy_var_124 := corral_nondet();
    return;

  anon16_Then:
    assume {:partition} s_p_e_c_i_a_l_31 == 0;
    goto L30;

  anon13_Then:
    assume {:partition} s_p_e_c_i_a_l_31 == 0;
    goto L27;

  anon15_Then:
    assume {:partition} s_p_e_c_i_a_l_31 == 0;
    goto L17;

  anon14_Then:
    assume {:partition} s_p_e_c_i_a_l_31 == 0;
    goto L14;

  anon18_Then:
    goto L6;

  anon17_Then:
    goto L6;
}



procedure {:origName "D3ColdSupportFunctionInterfaceReference"} D3ColdSupportFunctionInterfaceReference(actual_Context_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D3ColdSupportFunctionInterfaceReference"} D3ColdSupportFunctionInterfaceReference(actual_Context_6: int)
{
  var {:pointer} functionPdoExt_33: int;
  var {:pointer} Tmp_1018: int;
  var {:pointer} Context_6: int;
  var vslice_dummy_var_126: int;

  anon0:
    call {:si_unique_call 1126} vslice_dummy_var_126 := __HAVOC_malloc(4);
    Context_6 := actual_Context_6;
    functionPdoExt_33 := Context_6;
    assume {:nonnull} functionPdoExt_33 != 0;
    assume functionPdoExt_33 > 0;
    havoc Tmp_1018;
    assume {:nonnull} functionPdoExt_33 != 0;
    assume functionPdoExt_33 > 0;
    assume {:nonnull} Tmp_1018 != 0;
    assume Tmp_1018 > 0;
    return;
}



procedure {:origName "BuildMSOSCompatibleIDs"} BuildMSOSCompatibleIDs(actual_pcCompatibleID: int, actual_pcSubCompatibleID: int, actual_ulOtherIDLength: int, actual_pulMSOSCompatibleIDLength: int) returns (Tmp_1019: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "BuildMSOSCompatibleIDs"} BuildMSOSCompatibleIDs(actual_pcCompatibleID: int, actual_pcSubCompatibleID: int, actual_ulOtherIDLength: int, actual_pulMSOSCompatibleIDLength: int) returns (Tmp_1019: int)
{
  var {:scalar} i_18: int;
  var {:pointer} pwch_1: int;
  var {:scalar} Tmp_1021: int;
  var {:scalar} Tmp_1022: int;
  var {:scalar} ulTotal: int;
  var {:pointer} sdv_349: int;
  var {:pointer} pwchTmp: int;
  var {:scalar} Tmp_1025: int;
  var {:scalar} Tmp_1027: int;
  var {:scalar} Tmp_1028: int;
  var {:scalar} Tmp_1029: int;
  var {:pointer} pcCompatibleID: int;
  var {:pointer} pcSubCompatibleID: int;
  var {:scalar} ulOtherIDLength: int;
  var {:pointer} pulMSOSCompatibleIDLength: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;

  anon0:
    pcCompatibleID := actual_pcCompatibleID;
    pcSubCompatibleID := actual_pcSubCompatibleID;
    ulOtherIDLength := actual_ulOtherIDLength;
    pulMSOSCompatibleIDLength := actual_pulMSOSCompatibleIDLength;
    call {:si_unique_call 1127} vslice_dummy_var_127 := __HAVOC_malloc(52);
    call {:si_unique_call 1128} vslice_dummy_var_128 := __HAVOC_malloc(52);
    call {:si_unique_call 1129} vslice_dummy_var_129 := __HAVOC_malloc(52);
    pwch_1 := 0;
    pwchTmp := 0;
    call {:si_unique_call 1130} sdv_do_paged_code_check();
    ulTotal := ulOtherIDLength;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} pcSubCompatibleID != 0;
    assume {:nonnull} pcSubCompatibleID != 0;
    assume pcSubCompatibleID > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.VOID[pcSubCompatibleID] != 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} pcCompatibleID != 0;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.VOID[pcCompatibleID] != 0;
    ulTotal := ulTotal + 82;
    goto L14;

  L14:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} pcCompatibleID != 0;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Mem_T.VOID[pcCompatibleID] != 0;
    ulTotal := ulTotal + 42;
    goto L19;

  L19:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} ulTotal == 0;
    goto L34;

  L34:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} pulMSOSCompatibleIDLength != 0;
    assume {:nonnull} pulMSOSCompatibleIDLength != 0;
    assume pulMSOSCompatibleIDLength > 0;
    Mem_T.VOID[pulMSOSCompatibleIDLength] := pwchTmp - pwch_1;
    goto L75;

  L75:
    Tmp_1019 := pwch_1;
    return;

  anon51_Then:
    assume {:partition} pulMSOSCompatibleIDLength == 0;
    goto L75;

  anon49_Then:
    assume {:partition} ulTotal != 0;
    ulTotal := ulTotal + 2;
    call {:si_unique_call 1131} sdv_349 := ExAllocatePoolWithTag(1, ulTotal, -1016958123);
    pwch_1 := sdv_349;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} pwch_1 != 0;
    call {:si_unique_call 1132} sdv_RtlZeroMemory(0, ulTotal);
    goto L29;

  L29:
    pwchTmp := pwch_1;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} pwch_1 != 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} pcSubCompatibleID != 0;
    assume {:nonnull} pcSubCompatibleID != 0;
    assume pcSubCompatibleID > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.VOID[pcSubCompatibleID] != 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} pcCompatibleID != 0;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.VOID[pcCompatibleID] != 0;
    call {:si_unique_call 1133} sdv_RtlCopyMemory(0, 0, 24);
    i_18 := 0;
    goto L45;

  L45:
    call {:si_unique_call 1134} i_18, Tmp_1028, Tmp_1029 := BuildMSOSCompatibleIDs_loop_L45(i_18, pwchTmp, Tmp_1028, Tmp_1029, pcCompatibleID);
    goto L45_last;

  L45_last:
    assume {:CounterLoop 8} {:Counter "i_18"} true;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} 8 > i_18;
    Tmp_1029 := i_18;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.VOID[pcCompatibleID + Tmp_1029 * 4] != 0;
    Tmp_1028 := i_18;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    assume {:nonnull} pwchTmp != 0;
    assume pwchTmp > 0;
    Mem_T.VOID[pwchTmp] := Mem_T.VOID[pcCompatibleID + Tmp_1028 * 4];
    i_18 := i_18 + 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    assume false;
    return;

  anon64_Then:
    assume {:partition} Mem_T.VOID[pcCompatibleID + Tmp_1029 * 4] == 0;
    goto L46;

  L46:
    call {:si_unique_call 1135} sdv_RtlCopyMemory(0, 0, 24);
    i_18 := 0;
    goto L55;

  L55:
    call {:si_unique_call 1136} i_18, Tmp_1021, Tmp_1025 := BuildMSOSCompatibleIDs_loop_L55(i_18, Tmp_1021, pwchTmp, Tmp_1025, pcSubCompatibleID);
    goto L55_last;

  L55_last:
    assume {:CounterLoop 8} {:Counter "i_18"} true;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} 8 > i_18;
    Tmp_1025 := i_18;
    assume {:nonnull} pcSubCompatibleID != 0;
    assume pcSubCompatibleID > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Mem_T.VOID[pcSubCompatibleID + Tmp_1025 * 4] != 0;
    Tmp_1021 := i_18;
    assume {:nonnull} pcSubCompatibleID != 0;
    assume pcSubCompatibleID > 0;
    assume {:nonnull} pwchTmp != 0;
    assume pwchTmp > 0;
    Mem_T.VOID[pwchTmp] := Mem_T.VOID[pcSubCompatibleID + Tmp_1021 * 4];
    i_18 := i_18 + 1;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    assume false;
    return;

  anon65_Then:
    assume {:partition} Mem_T.VOID[pcSubCompatibleID + Tmp_1025 * 4] == 0;
    goto L56;

  L56:
    assume {:nonnull} pwchTmp != 0;
    assume pwchTmp > 0;
    Mem_T.VOID[pwchTmp] := 0;
    goto L36;

  L36:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} pcCompatibleID != 0;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} Mem_T.VOID[pcCompatibleID] != 0;
    call {:si_unique_call 1137} sdv_RtlCopyMemory(0, 0, 24);
    i_18 := 0;
    goto L68;

  L68:
    call {:si_unique_call 1138} i_18, Tmp_1022, Tmp_1027 := BuildMSOSCompatibleIDs_loop_L68(i_18, Tmp_1022, pwchTmp, Tmp_1027, pcCompatibleID);
    goto L68_last;

  L68_last:
    assume {:CounterLoop 8} {:Counter "i_18"} true;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} 8 > i_18;
    Tmp_1027 := i_18;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Mem_T.VOID[pcCompatibleID + Tmp_1027 * 4] != 0;
    Tmp_1022 := i_18;
    assume {:nonnull} pcCompatibleID != 0;
    assume pcCompatibleID > 0;
    assume {:nonnull} pwchTmp != 0;
    assume pwchTmp > 0;
    Mem_T.VOID[pwchTmp] := Mem_T.VOID[pcCompatibleID + Tmp_1022 * 4];
    i_18 := i_18 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    assume false;
    return;

  anon66_Then:
    assume {:partition} Mem_T.VOID[pcCompatibleID + Tmp_1027 * 4] == 0;
    goto L69;

  L69:
    assume {:nonnull} pwchTmp != 0;
    assume pwchTmp > 0;
    Mem_T.VOID[pwchTmp] := 0;
    goto L34;

  anon60_Then:
    assume {:partition} i_18 >= 8;
    goto L69;

  anon59_Then:
    assume {:partition} Mem_T.VOID[pcCompatibleID] == 0;
    goto L34;

  anon53_Then:
    assume {:partition} pcCompatibleID == 0;
    goto L34;

  anon58_Then:
    assume {:partition} i_18 >= 8;
    goto L56;

  anon57_Then:
    assume {:partition} i_18 >= 8;
    goto L46;

  anon56_Then:
    assume {:partition} Mem_T.VOID[pcCompatibleID] == 0;
    goto L36;

  anon55_Then:
    assume {:partition} pcCompatibleID == 0;
    goto L36;

  anon54_Then:
    assume {:partition} Mem_T.VOID[pcSubCompatibleID] == 0;
    goto L36;

  anon52_Then:
    assume {:partition} pcSubCompatibleID == 0;
    goto L36;

  anon63_Then:
    assume {:partition} pwch_1 == 0;
    goto L34;

  anon62_Then:
    assume {:partition} pwch_1 == 0;
    goto L29;

  anon50_Then:
    assume {:partition} Mem_T.VOID[pcCompatibleID] == 0;
    goto L19;

  anon45_Then:
    assume {:partition} pcCompatibleID == 0;
    goto L19;

  anon48_Then:
    assume {:partition} Mem_T.VOID[pcCompatibleID] == 0;
    goto L14;

  anon47_Then:
    assume {:partition} pcCompatibleID == 0;
    goto L14;

  anon46_Then:
    assume {:partition} Mem_T.VOID[pcSubCompatibleID] == 0;
    goto L14;

  anon61_Then:
    assume {:partition} pcSubCompatibleID == 0;
    goto L14;
}



procedure {:origName "IsMSOSCompatibleIDFlagSet"} IsMSOSCompatibleIDFlagSet(actual_functionPdoExt_34: int) returns (Tmp_1030: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_1030 == 0 || Tmp_1030 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IsMSOSCompatibleIDFlagSet"} IsMSOSCompatibleIDFlagSet(actual_functionPdoExt_34: int) returns (Tmp_1030: int)
{
  var {:dopa} {:scalar} ulEnumeratorFlag: int;
  var {:pointer} Tmp_1031: int;
  var {:scalar} isMSCompatibleID: int;
  var {:scalar} Tmp_1033: int;
  var {:pointer} Tmp_1034: int;
  var {:pointer} keyName: int;
  var {:pointer} Tmp_1035: int;
  var {:dopa} {:scalar} type_3: int;
  var {:scalar} status_56: int;
  var {:pointer} functionPdoExt_34: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;

  anon0:
    call {:si_unique_call 1139} ulEnumeratorFlag := __HAVOC_malloc(4);
    call {:si_unique_call 1140} type_3 := __HAVOC_malloc(4);
    functionPdoExt_34 := actual_functionPdoExt_34;
    assume {:nonnull} type_3 != 0;
    assume type_3 > 0;
    Mem_T.VOID[type_3] := 0;
    isMSCompatibleID := 0;
    assume {:nonnull} ulEnumeratorFlag != 0;
    assume ulEnumeratorFlag > 0;
    Mem_T.VOID[ulEnumeratorFlag] := 0;
    status_56 := 0;
    keyName := strConst__li2bpl29;
    call {:si_unique_call 1141} sdv_do_paged_code_check();
    assume {:nonnull} functionPdoExt_34 != 0;
    assume functionPdoExt_34 > 0;
    havoc Tmp_1031;
    assume {:nonnull} Tmp_1031 != 0;
    assume Tmp_1031 > 0;
    havoc vslice_dummy_var_385;
    call {:si_unique_call 1142} status_56 := GetPdoRegistryParameter(vslice_dummy_var_385, keyName, ulEnumeratorFlag, 4, type_3, 0, 1);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_56 < 0;
    havoc Tmp_1034;
    assume {:nonnull} functionPdoExt_34 != 0;
    assume functionPdoExt_34 > 0;
    havoc vslice_dummy_var_386;
    call {:si_unique_call 1143} WPP_RECORDER_SF_d(vslice_dummy_var_386, 2, 2, 61, Tmp_1034, status_56);
    goto L32;

  L32:
    Tmp_1030 := isMSCompatibleID;
    return;

  anon7_Then:
    assume {:partition} 0 <= status_56;
    assume {:nonnull} type_3 != 0;
    assume type_3 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.VOID[type_3] != 4;
    havoc Tmp_1035;
    assume {:nonnull} functionPdoExt_34 != 0;
    assume functionPdoExt_34 > 0;
    assume {:nonnull} type_3 != 0;
    assume type_3 > 0;
    havoc vslice_dummy_var_387;
    call {:si_unique_call 1144} WPP_RECORDER_SF_d(vslice_dummy_var_387, 2, 8, 62, Tmp_1035, Mem_T.VOID[type_3]);
    goto L32;

  anon8_Then:
    assume {:partition} Mem_T.VOID[type_3] == 4;
    assume {:nonnull} ulEnumeratorFlag != 0;
    assume ulEnumeratorFlag > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(Mem_T.VOID[ulEnumeratorFlag], 1) != 0;
    Tmp_1033 := 1;
    goto L31;

  L31:
    isMSCompatibleID := Tmp_1033;
    goto L32;

  anon9_Then:
    assume {:partition} BAND(Mem_T.VOID[ulEnumeratorFlag], 1) == 0;
    Tmp_1033 := 0;
    goto L31;
}



procedure {:origName "AppendPdoIds"} AppendPdoIds(actual_defaultIds: int, actual_appendIds: int) returns (Tmp_1036: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AppendPdoIds"} AppendPdoIds(actual_defaultIds: int, actual_appendIds: int) returns (Tmp_1036: int)
{
  var {:pointer} newIds: int;
  var {:scalar} oldNumChars: int;
  var {:scalar} Tmp_1037: int;
  var {:scalar} Tmp_1038: int;
  var {:scalar} newNumChars: int;
  var {:scalar} oldSize: int;
  var {:pointer} sdv_352: int;
  var {:scalar} Tmp_1040: int;
  var {:scalar} Tmp_1042: int;
  var {:scalar} newSize: int;
  var {:pointer} defaultIds: int;
  var {:pointer} appendIds: int;

  anon0:
    defaultIds := actual_defaultIds;
    appendIds := actual_appendIds;
    newIds := 0;
    newSize := 0;
    newNumChars := 0;
    oldSize := 0;
    oldNumChars := 0;
    call {:si_unique_call 1145} sdv_do_paged_code_check();
    call {:si_unique_call 1146} oldNumChars := CalculateMultiStringLength(defaultIds);
    oldSize := oldNumChars * 2;
    assume {:nonnull} appendIds != 0;
    assume appendIds > 0;
    havoc newSize;
    newNumChars := INTDIV(newSize, 2);
    call {:si_unique_call 1147} sdv_352 := ExAllocatePoolWithTag(1, newSize, -1016958123);
    newIds := sdv_352;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} newIds != 0;
    call {:si_unique_call 1148} sdv_RtlZeroMemory(0, newSize);
    goto L28;

  L28:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} newIds != 0;
    call {:si_unique_call 1149} sdv_RtlCopyMemory(0, 0, oldSize);
    assume {:nonnull} appendIds != 0;
    assume appendIds > 0;
    havoc Tmp_1037;
    Tmp_1040 := oldNumChars;
    call {:si_unique_call 1150} sdv_RtlCopyMemory(0, 0, Tmp_1037);
    Tmp_1042 := newNumChars - 1;
    assume {:nonnull} newIds != 0;
    assume newIds > 0;
    Mem_T.VOID[newIds + Tmp_1042 * 4] := 0;
    Tmp_1038 := newNumChars - 2;
    assume {:nonnull} newIds != 0;
    assume newIds > 0;
    Mem_T.VOID[newIds + Tmp_1038 * 4] := 0;
    Tmp_1036 := newIds;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} newIds == 0;
    Tmp_1036 := 0;
    goto L1;

  anon6_Then:
    assume {:partition} newIds == 0;
    goto L28;
}



procedure {:origName "WPP_RECORDER_SF_qqdd"} WPP_RECORDER_SF_qqdd(actual_AutoLogContext_14: int, actual_level_14: int, actual_flags_14: int, actual_id_15: int, actual_traceGuid_14: int, actual_s_p_e_c_i_a_l_33: int, actual_s_p_e_c_i_a_l_34: int, actual_s_p_e_c_i_a_l_35: int, actual_s_p_e_c_i_a_l_36: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qqdd"} WPP_RECORDER_SF_qqdd(actual_AutoLogContext_14: int, actual_level_14: int, actual_flags_14: int, actual_id_15: int, actual_traceGuid_14: int, actual_s_p_e_c_i_a_l_33: int, actual_s_p_e_c_i_a_l_34: int, actual_s_p_e_c_i_a_l_35: int, actual_s_p_e_c_i_a_l_36: int)
{
  var {:scalar} Tmp_1045: int;
  var {:scalar} Tmp_1047: int;
  var {:scalar} Tmp_1049: int;
  var {:scalar} Tmp_1051: int;
  var {:scalar} level_14: int;
  var {:scalar} flags_14: int;
  var {:pointer} traceGuid_14: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_132: int;

  anon0:
    call {:si_unique_call 1151} vslice_dummy_var_130 := __HAVOC_malloc(4);
    level_14 := actual_level_14;
    flags_14 := actual_flags_14;
    traceGuid_14 := actual_traceGuid_14;
    call {:si_unique_call 1152} vslice_dummy_var_132 := __HAVOC_malloc(4);
    Tmp_1051 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_14 - 1);
    call {:si_unique_call 1153} Tmp_1049 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1154} Tmp_1047 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1155} Tmp_1045 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1156} vslice_dummy_var_131 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_DDD"} WPP_RECORDER_SF_DDD(actual_AutoLogContext_15: int, actual_level_15: int, actual_flags_15: int, actual_id_16: int, actual_traceGuid_15: int, actual_s_p_e_c_i_a_l_37: int, actual_s_p_e_c_i_a_l_38: int, actual_s_p_e_c_i_a_l_39: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_DDD"} WPP_RECORDER_SF_DDD(actual_AutoLogContext_15: int, actual_level_15: int, actual_flags_15: int, actual_id_16: int, actual_traceGuid_15: int, actual_s_p_e_c_i_a_l_37: int, actual_s_p_e_c_i_a_l_38: int, actual_s_p_e_c_i_a_l_39: int)
{
  var {:scalar} Tmp_1057: int;
  var {:scalar} Tmp_1058: int;
  var {:scalar} Tmp_1059: int;
  var {:scalar} Tmp_1061: int;
  var {:scalar} level_15: int;
  var {:scalar} flags_15: int;
  var {:pointer} traceGuid_15: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;

  anon0:
    call {:si_unique_call 1157} vslice_dummy_var_133 := __HAVOC_malloc(4);
    level_15 := actual_level_15;
    flags_15 := actual_flags_15;
    traceGuid_15 := actual_traceGuid_15;
    call {:si_unique_call 1158} vslice_dummy_var_135 := __HAVOC_malloc(4);
    Tmp_1058 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_15 - 1);
    call {:si_unique_call 1159} Tmp_1059 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1160} Tmp_1057 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1161} Tmp_1061 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1162} vslice_dummy_var_134 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "DispatchPdoUrbGetDescriptorFromDevice"} DispatchPdoUrbGetDescriptorFromDevice(actual_functionPdoExt_35: int, actual_irp_39: int) returns (Tmp_1065: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoUrbGetDescriptorFromDevice"} DispatchPdoUrbGetDescriptorFromDevice(actual_functionPdoExt_35: int, actual_irp_39: int) returns (Tmp_1065: int)
{
  var {:pointer} Tmp_1066: int;
  var {:pointer} Tmp_1067: int;
  var {:pointer} irpSp_16: int;
  var {:pointer} Tmp_1068: int;
  var {:pointer} parentFdoExt_72: int;
  var {:scalar} Tmp_1069: int;
  var {:pointer} Tmp_1070: int;
  var {:pointer} urb_12: int;
  var {:scalar} status_57: int;
  var {:pointer} Tmp_1072: int;
  var {:pointer} functionPdoExt_35: int;
  var {:pointer} irp_39: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;

  anon0:
    functionPdoExt_35 := actual_functionPdoExt_35;
    irp_39 := actual_irp_39;
    call {:si_unique_call 1163} irpSp_16 := sdv_IoGetCurrentIrpStackLocation(irp_39);
    assume {:nonnull} functionPdoExt_35 != 0;
    assume functionPdoExt_35 > 0;
    havoc parentFdoExt_72;
    assume {:nonnull} irpSp_16 != 0;
    assume irpSp_16 > 0;
    havoc urb_12;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L85;

  L85:
    assume {:nonnull} functionPdoExt_35 != 0;
    assume functionPdoExt_35 > 0;
    havoc Tmp_1066;
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    assume {:nonnull} functionPdoExt_35 != 0;
    assume functionPdoExt_35 > 0;
    havoc vslice_dummy_var_388;
    havoc vslice_dummy_var_389;
    call {:si_unique_call 1164} status_57 := UsbcForwardIrp(vslice_dummy_var_388, vslice_dummy_var_389, irp_39);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto L44;

  L44:
    call {:si_unique_call 1165} UsbcDecrementPendingCount(parentFdoExt_72, irp_39);
    Tmp_1065 := status_57;
    goto LM2;

  LM2:
    return;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    havoc Tmp_1069;
    havoc Tmp_1072;
    assume {:nonnull} functionPdoExt_35 != 0;
    assume functionPdoExt_35 > 0;
    assume {:nonnull} parentFdoExt_72 != 0;
    assume parentFdoExt_72 > 0;
    havoc vslice_dummy_var_390;
    havoc vslice_dummy_var_391;
    call {:si_unique_call 1166} WPP_RECORDER_SF_qD(vslice_dummy_var_390, 5, 1, 28, Tmp_1072, vslice_dummy_var_391, Tmp_1069);
    goto L85;

  anon30_Then:
    havoc Tmp_1068;
    assume {:nonnull} functionPdoExt_35 != 0;
    assume functionPdoExt_35 > 0;
    assume {:nonnull} parentFdoExt_72 != 0;
    assume parentFdoExt_72 > 0;
    havoc vslice_dummy_var_392;
    havoc vslice_dummy_var_393;
    call {:si_unique_call 1167} WPP_RECORDER_SF_q(vslice_dummy_var_392, 4, 1, 27, Tmp_1068, vslice_dummy_var_393);
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    Tmp_1067 := UrbControlDescriptorRequest__URB(urb_12);
    assume {:nonnull} Tmp_1067 != 0;
    assume Tmp_1067 > 0;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    havoc vslice_dummy_var_394;
    call {:si_unique_call 1168} status_57 := BuildFunctionConfigurationDescriptor(functionPdoExt_35, vslice_dummy_var_394, Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_12))], TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_12)));
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_57 != 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} status_57 != -1073741811;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_57 != 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_57 == 259;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L40;

  L40:
    call {:si_unique_call 1169} UsbcCompleteIrp(parentFdoExt_72, status_57, irp_39);
    goto L44;

  anon34_Then:
    assume {:partition} status_57 != 259;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L40;

  anon35_Then:
    assume {:partition} status_57 == 0;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L40;

  anon36_Then:
    assume {:partition} status_57 == -1073741811;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L40;

  anon27_Then:
    assume {:partition} status_57 == 0;
    goto L40;

  anon37_Then:
    havoc Tmp_1070;
    assume {:nonnull} functionPdoExt_35 != 0;
    assume functionPdoExt_35 > 0;
    assume {:nonnull} parentFdoExt_72 != 0;
    assume parentFdoExt_72 > 0;
    havoc vslice_dummy_var_395;
    havoc vslice_dummy_var_396;
    call {:si_unique_call 1170} WPP_RECORDER_SF_q(vslice_dummy_var_395, 4, 1, 26, Tmp_1070, vslice_dummy_var_396);
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_12))] >= 18;
    call {:si_unique_call 1171} sdv_RtlCopyMemory(0, 0, 18);
    status_57 := 0;
    goto L63;

  L63:
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_12))] := 18;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_57 != 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_57 != -1073741811;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} status_57 != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} status_57 == 259;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L71;

  L71:
    call {:si_unique_call 1172} UsbcCompleteIrp(parentFdoExt_72, status_57, irp_39);
    goto L44;

  anon31_Then:
    assume {:partition} status_57 != 259;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L71;

  anon32_Then:
    assume {:partition} status_57 == 0;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L71;

  anon33_Then:
    assume {:partition} status_57 == -1073741811;
    assume {:nonnull} urb_12 != 0;
    assume urb_12 > 0;
    goto L71;

  anon38_Then:
    assume {:partition} status_57 == 0;
    goto L71;

  anon28_Then:
    assume {:partition} 18 > Mem_T.VOID[TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(UrbControlDescriptorRequest__URB(urb_12))];
    status_57 := -1073741306;
    goto L63;
}



procedure {:origName "DispatchPdoUrbSelectConfiguration"} DispatchPdoUrbSelectConfiguration(actual_functionPdoExt_36: int, actual_irp_40: int) returns (Tmp_1073: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoUrbSelectConfiguration"} DispatchPdoUrbSelectConfiguration(actual_functionPdoExt_36: int, actual_irp_40: int) returns (Tmp_1073: int)
{
  var {:pointer} functionAssoc_7: int;
  var {:scalar} Tmp_1074: int;
  var {:pointer} Tmp_1075: int;
  var {:scalar} Tmp_1076: int;
  var {:pointer} Tmp_1077: int;
  var {:pointer} urbInterface_1: int;
  var {:pointer} Tmp_1078: int;
  var {:scalar} Tmp_1079: int;
  var {:scalar} Tmp_1080: int;
  var {:pointer} Tmp_1081: int;
  var {:scalar} success_1: int;
  var {:pointer} irpSp_17: int;
  var {:scalar} numPipes: int;
  var {:pointer} Tmp_1083: int;
  var {:pointer} Tmp_1084: int;
  var {:scalar} Tmp_1085: int;
  var {:pointer} Tmp_1086: int;
  var {:pointer} end_3: int;
  var {:pointer} index_3: int;
  var {:pointer} Tmp_1087: int;
  var {:pointer} start: int;
  var {:scalar} Tmp_1088: int;
  var {:pointer} Tmp_1089: int;
  var {:scalar} Tmp_1090: int;
  var {:scalar} Tmp_1091: int;
  var {:pointer} Tmp_1092: int;
  var {:scalar} Tmp_1093: int;
  var {:scalar} interfacesFound_1: int;
  var {:scalar} Tmp_1094: int;
  var {:pointer} Tmp_1095: int;
  var {:scalar} urbSize: int;
  var {:scalar} i_19: int;
  var {:pointer} Tmp_1096: int;
  var {:scalar} Tmp_1097: int;
  var {:pointer} Tmp_1098: int;
  var {:scalar} Tmp_1099: int;
  var {:pointer} interfaceEntry_1: int;
  var {:scalar} Tmp_1100: int;
  var {:pointer} Tmp_1101: int;
  var {:pointer} Tmp_1102: int;
  var {:pointer} Tmp_1103: int;
  var {:scalar} Tmp_1104: int;
  var {:scalar} sendUrb: int;
  var {:pointer} Tmp_1105: int;
  var {:pointer} interfaceList_2: int;
  var {:pointer} Tmp_1106: int;
  var {:pointer} Tmp_1107: int;
  var {:scalar} minInterfaceInfoSize: int;
  var {:scalar} Tmp_1108: int;
  var {:scalar} Tmp_1109: int;
  var {:pointer} parentFdoExt_73: int;
  var {:pointer} Tmp_1110: int;
  var {:scalar} Tmp_1111: int;
  var {:pointer} Tmp_1112: int;
  var {:pointer} urb_13: int;
  var {:scalar} Tmp_1113: int;
  var {:pointer} Tmp_1114: int;
  var {:scalar} Tmp_1115: int;
  var {:pointer} Tmp_1116: int;
  var {:scalar} status_58: int;
  var {:scalar} minSelectConfigSize: int;
  var {:scalar} Tmp_1117: int;
  var {:pointer} Tmp_1118: int;
  var {:pointer} functionPdoExt_36: int;
  var {:pointer} irp_40: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;

  anon0:
    functionPdoExt_36 := actual_functionPdoExt_36;
    irp_40 := actual_irp_40;
    call {:si_unique_call 1173} Tmp_1078 := __HAVOC_malloc(28);
    call {:si_unique_call 1174} Tmp_1101 := __HAVOC_malloc(28);
    call {:si_unique_call 1175} Tmp_1102 := __HAVOC_malloc(28);
    call {:si_unique_call 1176} Tmp_1106 := __HAVOC_malloc(28);
    status_58 := 0;
    minInterfaceInfoSize := 0;
    minSelectConfigSize := 0;
    urbInterface_1 := 0;
    interfaceEntry_1 := 0;
    interfaceList_2 := 0;
    sendUrb := 0;
    success_1 := 0;
    numPipes := 0;
    urbSize := 0;
    interfacesFound_1 := 0;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    havoc functionAssoc_7;
    urb_13 := 0;
    call {:si_unique_call 1177} irpSp_17 := sdv_IoGetCurrentIrpStackLocation(irp_40);
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    havoc parentFdoExt_73;
    assume {:nonnull} irpSp_17 != 0;
    assume irpSp_17 > 0;
    havoc urb_13;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    minSelectConfigSize := 40;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    status_58 := -1073741811;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    havoc Tmp_1099;
    havoc Tmp_1107;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_397;
    havoc vslice_dummy_var_398;
    call {:si_unique_call 1178} WPP_RECORDER_SF_qd(vslice_dummy_var_397, 2, 8, 16, Tmp_1107, vslice_dummy_var_398, Tmp_1099);
    goto L58;

  L58:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_58 < 0;
    havoc Tmp_1118;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_399;
    havoc vslice_dummy_var_400;
    call {:si_unique_call 1179} WPP_RECORDER_SF_qd(vslice_dummy_var_399, 2, 8, 25, Tmp_1118, vslice_dummy_var_400, status_58);
    goto L63;

  L63:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} status_58 != 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} status_58 != -1073741811;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} status_58 != 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_58 == 259;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    goto L70;

  L70:
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    havoc vslice_dummy_var_401;
    call {:si_unique_call 1180} UsbcCompleteIrp(vslice_dummy_var_401, status_58, irp_40);
    call {:si_unique_call 1181} UsbcDecrementPendingCount(parentFdoExt_73, irp_40);
    Tmp_1073 := status_58;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    assume {:partition} status_58 != 259;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    goto L70;

  anon56_Then:
    assume {:partition} status_58 == 0;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    goto L70;

  anon57_Then:
    assume {:partition} status_58 == -1073741811;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    goto L70;

  anon46_Then:
    assume {:partition} status_58 == 0;
    goto L70;

  anon45_Then:
    assume {:partition} 0 <= status_58;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    havoc Tmp_1083;
    assume {:nonnull} Tmp_1083 != 0;
    assume Tmp_1083 > 0;
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    goto L63;

  anon59_Then:
    assume {:nonnull} urb_13 != 0;
    assume urb_13 > 0;
    start := Interface__URB_SELECT_CONFIGURATION(UrbSelectConfiguration__URB(urb_13));
    end_3 := urb_13;
    index_3 := start;
    goto L88;

  L88:
    call {:si_unique_call 1182} Tmp_1074, Tmp_1075, Tmp_1076, Tmp_1077, urbInterface_1, Tmp_1078, Tmp_1079, Tmp_1080, Tmp_1081, success_1, numPipes, Tmp_1084, Tmp_1085, Tmp_1086, Tmp_1087, Tmp_1088, Tmp_1090, Tmp_1091, interfacesFound_1, Tmp_1094, Tmp_1095, urbSize, i_19, Tmp_1097, interfaceEntry_1, Tmp_1100, Tmp_1101, Tmp_1102, Tmp_1103, Tmp_1104, sendUrb, interfaceList_2, Tmp_1106, minInterfaceInfoSize, Tmp_1108, Tmp_1109, Tmp_1110, Tmp_1112, Tmp_1114, Tmp_1115, status_58, Tmp_1117 := DispatchPdoUrbSelectConfiguration_loop_L88(functionAssoc_7, Tmp_1074, Tmp_1075, Tmp_1076, Tmp_1077, urbInterface_1, Tmp_1078, Tmp_1079, Tmp_1080, Tmp_1081, success_1, numPipes, Tmp_1084, Tmp_1085, Tmp_1086, end_3, index_3, Tmp_1087, Tmp_1088, Tmp_1090, Tmp_1091, interfacesFound_1, Tmp_1094, Tmp_1095, urbSize, i_19, Tmp_1097, interfaceEntry_1, Tmp_1100, Tmp_1101, Tmp_1102, Tmp_1103, Tmp_1104, sendUrb, interfaceList_2, Tmp_1106, minInterfaceInfoSize, Tmp_1108, Tmp_1109, parentFdoExt_73, Tmp_1110, Tmp_1112, urb_13, Tmp_1114, Tmp_1115, status_58, Tmp_1117, functionPdoExt_36);
    goto L88_last;

  L88_last:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} end_3 > index_3;
    urbInterface_1 := index_3;
    minInterfaceInfoSize := 16;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto L93;

  L93:
    status_58 := -1073741811;
    havoc Tmp_1105;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_402;
    call {:si_unique_call 1183} WPP_RECORDER_SF_(vslice_dummy_var_402, 2, 8, 17, Tmp_1105);
    goto L58;

  anon60_Then:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} index_3 <= end_3;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} functionAssoc_7 != 0;
    assume functionAssoc_7 > 0;
    havoc interfaceList_2;
    success_1 := 0;
    i_19 := 0;
    goto L109;

  L109:
    call {:si_unique_call 1184} Tmp_1091, i_19, Tmp_1103, Tmp_1110 := DispatchPdoUrbSelectConfiguration_loop_L109(urbInterface_1, Tmp_1091, i_19, Tmp_1103, interfaceList_2, Tmp_1110, functionPdoExt_36);
    goto L109_last;

  L109_last:
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    Tmp_1091 := i_19;
    assume {:nonnull} interfaceList_2 != 0;
    assume interfaceList_2 > 0;
    havoc Tmp_1103;
    assume {:nonnull} Tmp_1103 != 0;
    assume Tmp_1103 > 0;
    havoc Tmp_1110;
    assume {:nonnull} Tmp_1110 != 0;
    assume Tmp_1110 > 0;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    success_1 := 1;
    Tmp_1080 := i_19;
    assume {:nonnull} interfaceList_2 != 0;
    assume interfaceList_2 > 0;
    havoc interfaceEntry_1;
    interfacesFound_1 := interfacesFound_1 + 1;
    goto L110;

  L110:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} success_1 != 0;
    assume {:nonnull} interfaceEntry_1 != 0;
    assume interfaceEntry_1 > 0;
    havoc Tmp_1077;
    assume {:nonnull} Tmp_1077 != 0;
    assume Tmp_1077 > 0;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1117;
    assume {:nonnull} interfaceEntry_1 != 0;
    assume interfaceEntry_1 > 0;
    havoc Tmp_1086;
    assume {:nonnull} Tmp_1086 != 0;
    assume Tmp_1086 > 0;
    havoc Tmp_1090;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1109;
    havoc Tmp_1081;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_403;
    call {:si_unique_call 1185} WPP_RECORDER_SF_DDD(vslice_dummy_var_403, 4, 1, 19, Tmp_1081, Tmp_1109, Tmp_1090, Tmp_1117);
    urbSize := 36;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc urbSize;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1085;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1104;
    havoc Tmp_1095;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_404;
    havoc vslice_dummy_var_405;
    call {:si_unique_call 1186} WPP_RECORDER_SF_qqdd(vslice_dummy_var_404, 4, 1, 20, Tmp_1095, vslice_dummy_var_405, urb_13, Tmp_1104, Tmp_1085);
    sendUrb := 1;
    goto L146;

  L146:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sendUrb != 0;
    call {:si_unique_call 1187} status_58 := SendSelectInterfaceUrb(urbSize, urbInterface_1, functionPdoExt_36, interfaceEntry_1);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    sendUrb := 0;
    goto L153;

  L153:
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon53_Else_dummy;

  anon53_Else_dummy:
    assume false;
    return;

  anon53_Then:
    goto L58;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    assume {:partition} sendUrb == 0;
    assume {:nonnull} interfaceEntry_1 != 0;
    assume interfaceEntry_1 > 0;
    havoc Tmp_1075;
    assume {:nonnull} Tmp_1075 != 0;
    assume Tmp_1075 > 0;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} interfaceEntry_1 != 0;
    assume interfaceEntry_1 > 0;
    havoc Tmp_1087;
    assume {:nonnull} Tmp_1087 != 0;
    assume Tmp_1087 > 0;
    havoc Tmp_1097;
    call {:si_unique_call 1188} sdv_RtlCopyMemory(0, 0, Tmp_1097);
    goto L153;

  anon64_Then:
    status_58 := -1073741811;
    assume {:nonnull} interfaceEntry_1 != 0;
    assume interfaceEntry_1 > 0;
    havoc Tmp_1089;
    assume {:nonnull} Tmp_1089 != 0;
    assume Tmp_1089 > 0;
    havoc Tmp_1093;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1113;
    havoc Tmp_1116;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_406;
    havoc vslice_dummy_var_407;
    call {:si_unique_call 1189} WPP_RECORDER_SF_qdd(vslice_dummy_var_406, 2, 8, 24, Tmp_1116, vslice_dummy_var_407, Tmp_1113, Tmp_1093);
    goto L58;

  anon62_Then:
    assume {:nonnull} interfaceEntry_1 != 0;
    assume interfaceEntry_1 > 0;
    havoc Tmp_1114;
    assume {:nonnull} Tmp_1114 != 0;
    assume Tmp_1114 > 0;
    havoc numPipes;
    minInterfaceInfoSize := 16;
    minInterfaceInfoSize := minInterfaceInfoSize + numPipes * 20;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    status_58 := -1073741811;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1111;
    havoc Tmp_1096;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_408;
    havoc vslice_dummy_var_409;
    call {:si_unique_call 1190} WPP_RECORDER_SF_qDD(vslice_dummy_var_408, 2, 8, 21, Tmp_1096, vslice_dummy_var_409, Tmp_1111, minInterfaceInfoSize);
    goto L58;

  anon65_Then:
    i_19 := 0;
    goto L189;

  L189:
    call {:si_unique_call 1191} Tmp_1078, Tmp_1094, i_19, Tmp_1115 := DispatchPdoUrbSelectConfiguration_loop_L189(urbInterface_1, Tmp_1078, numPipes, Tmp_1094, i_19, Tmp_1115);
    goto L189_last;

  L189_last:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} numPipes > i_19;
    Tmp_1094 := i_19;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1078;
    assume {:nonnull} Tmp_1078 != 0;
    assume Tmp_1078 > 0;
    havoc Tmp_1115;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Tmp_1115 == 1;
    Tmp_1108 := i_19;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1106;
    assume {:nonnull} Tmp_1106 != 0;
    assume Tmp_1106 > 0;
    havoc Tmp_1076;
    havoc Tmp_1112;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_410;
    call {:si_unique_call 1192} WPP_RECORDER_SF_D(vslice_dummy_var_410, 2, 8, 22, Tmp_1112, Tmp_1076);
    urbSize := 36;
    urbSize := urbSize + numPipes * 20;
    sendUrb := 1;
    Tmp_1079 := i_19;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1102;
    assume {:nonnull} Tmp_1102 != 0;
    assume Tmp_1102 > 0;
    havoc Tmp_1100;
    Tmp_1074 := i_19;
    assume {:nonnull} urbInterface_1 != 0;
    assume urbInterface_1 > 0;
    havoc Tmp_1101;
    assume {:nonnull} Tmp_1101 != 0;
    assume Tmp_1101 > 0;
    havoc Tmp_1088;
    havoc Tmp_1084;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_411;
    havoc vslice_dummy_var_412;
    call {:si_unique_call 1193} WPP_RECORDER_SF_qqdd(vslice_dummy_var_411, 2, 1, 23, Tmp_1084, vslice_dummy_var_412, urb_13, Tmp_1088, Tmp_1100);
    goto L146;

  anon66_Then:
    assume {:partition} Tmp_1115 != 1;
    i_19 := i_19 + 1;
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} i_19 >= numPipes;
    goto L146;

  anon51_Then:
    assume {:partition} success_1 == 0;
    status_58 := -1073741811;
    havoc Tmp_1092;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_413;
    call {:si_unique_call 1194} WPP_RECORDER_SF_(vslice_dummy_var_413, 2, 8, 18, Tmp_1092);
    goto L58;

  anon61_Then:
    i_19 := i_19 + 1;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon50_Then:
    goto L110;

  anon49_Then:
    goto L58;

  anon48_Then:
    assume {:partition} end_3 < index_3;
    goto L93;

  anon47_Then:
    assume {:partition} index_3 >= end_3;
    goto L58;

  anon58_Then:
    status_58 := 0;
    havoc Tmp_1098;
    assume {:nonnull} functionPdoExt_36 != 0;
    assume functionPdoExt_36 > 0;
    assume {:nonnull} parentFdoExt_73 != 0;
    assume parentFdoExt_73 > 0;
    havoc vslice_dummy_var_414;
    havoc vslice_dummy_var_415;
    call {:si_unique_call 1195} WPP_RECORDER_SF_q(vslice_dummy_var_414, 4, 1, 15, Tmp_1098, vslice_dummy_var_415);
    goto L58;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var {:scalar} Tmp_1119: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_416: int;

  anon0:
    call {:si_unique_call 1196} Tmp_1119 := __HAVOC_malloc(4);
    call {:si_unique_call 1197} vslice_dummy_var_136 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_1119 != 0;
    assume Tmp_1119 > 0;
    havoc vslice_dummy_var_416;
    Mem_T.VOID[Tmp_1119] := vslice_dummy_var_416;
    return;
}



procedure {:origName "SendSelectInterfaceUrb"} SendSelectInterfaceUrb(actual_size_2: int, actual_childUrbInterface: int, actual_functionPdoExt_37: int, actual_interfaceEntry_2: int) returns (Tmp_1122: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SendSelectInterfaceUrb"} SendSelectInterfaceUrb(actual_size_2: int, actual_childUrbInterface: int, actual_functionPdoExt_37: int, actual_interfaceEntry_2: int) returns (Tmp_1122: int)
{
  var {:scalar} Tmp_1123: int;
  var {:pointer} Tmp_1124: int;
  var {:scalar} Tmp_1125: int;
  var {:pointer} selectInterfaceUrb: int;
  var {:pointer} sdv_362: int;
  var {:scalar} Tmp_1126: int;
  var {:pointer} selectInterface: int;
  var {:scalar} Tmp_1127: int;
  var {:pointer} Tmp_1128: int;
  var {:pointer} Tmp_1129: int;
  var {:scalar} Tmp_1130: int;
  var {:pointer} Tmp_1131: int;
  var {:scalar} interfaceLength: int;
  var {:pointer} parentFdoExt_74: int;
  var {:scalar} Tmp_1132: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} sdv_364: int;
  var {:pointer} Tmp_1133: int;
  var {:pointer} Tmp_1134: int;
  var {:scalar} Tmp_1135: int;
  var {:pointer} Tmp_1136: int;
  var {:scalar} status_59: int;
  var {:pointer} Tmp_1137: int;
  var {:scalar} size_2: int;
  var {:pointer} childUrbInterface: int;
  var {:pointer} functionPdoExt_37: int;
  var {:pointer} interfaceEntry_2: int;
  var vslice_dummy_var_417: int;
  var vslice_dummy_var_418: int;
  var vslice_dummy_var_419: int;
  var vslice_dummy_var_420: int;
  var vslice_dummy_var_421: int;
  var vslice_dummy_var_422: int;
  var vslice_dummy_var_423: int;
  var vslice_dummy_var_424: int;

  anon0:
    size_2 := actual_size_2;
    childUrbInterface := actual_childUrbInterface;
    functionPdoExt_37 := actual_functionPdoExt_37;
    interfaceEntry_2 := actual_interfaceEntry_2;
    selectInterfaceUrb := 0;
    selectInterface := 0;
    status_59 := 0;
    assume {:nonnull} functionPdoExt_37 != 0;
    assume functionPdoExt_37 > 0;
    havoc parentFdoExt_74;
    Tmp_1123 := size_2;
    call {:si_unique_call 1198} sdv_362 := ExAllocatePoolWithTag(512, Tmp_1123, -1016958123);
    selectInterfaceUrb := sdv_362;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} selectInterfaceUrb != 0;
    Tmp_1125 := size_2;
    call {:si_unique_call 1199} sdv_RtlZeroMemory(0, Tmp_1125);
    goto L19;

  L19:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} selectInterfaceUrb != 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 36 > size_2;
    status_59 := -1073741811;
    goto L29;

  L29:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} selectInterfaceUrb != 0;
    call {:si_unique_call 1200} ExFreePoolWithTag(0, -1016958123);
    goto L30;

  L30:
    Tmp_1122 := status_59;
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:partition} selectInterfaceUrb == 0;
    goto L30;

  anon24_Then:
    assume {:partition} size_2 >= 36;
    assume {:nonnull} selectInterfaceUrb != 0;
    assume selectInterfaceUrb > 0;
    selectInterface := Interface__URB_SELECT_INTERFACE(UrbSelectInterface__URB(selectInterfaceUrb));
    assume {:nonnull} selectInterfaceUrb != 0;
    assume selectInterfaceUrb > 0;
    assume {:nonnull} selectInterfaceUrb != 0;
    assume selectInterfaceUrb > 0;
    assume {:nonnull} functionPdoExt_37 != 0;
    assume functionPdoExt_37 > 0;
    havoc Tmp_1134;
    assume {:nonnull} Tmp_1134 != 0;
    assume Tmp_1134 > 0;
    assume {:nonnull} selectInterfaceUrb != 0;
    assume selectInterfaceUrb > 0;
    interfaceLength := size_2 - 16 - 4;
    assume {:nonnull} childUrbInterface != 0;
    assume childUrbInterface > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} childUrbInterface != 0;
    assume childUrbInterface > 0;
    havoc Tmp_1132;
    havoc Tmp_1131;
    assume {:nonnull} parentFdoExt_74 != 0;
    assume parentFdoExt_74 > 0;
    havoc vslice_dummy_var_417;
    call {:si_unique_call 1201} WPP_RECORDER_SF_dd(vslice_dummy_var_417, 2, 1, 11, Tmp_1131, Tmp_1132, interfaceLength);
    assume {:nonnull} childUrbInterface != 0;
    assume childUrbInterface > 0;
    havoc interfaceLength;
    goto L51;

  L51:
    call {:si_unique_call 1202} sdv_RtlCopyMemory(0, 0, interfaceLength);
    assume {:nonnull} functionPdoExt_37 != 0;
    assume functionPdoExt_37 > 0;
    havoc vslice_dummy_var_418;
    call {:si_unique_call 1203} status_59 := SubmitUrb(vslice_dummy_var_418, selectInterfaceUrb, 1, 0, 0, 0);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_1133;
    assume {:nonnull} functionPdoExt_37 != 0;
    assume functionPdoExt_37 > 0;
    assume {:nonnull} parentFdoExt_74 != 0;
    assume parentFdoExt_74 > 0;
    havoc vslice_dummy_var_419;
    havoc vslice_dummy_var_420;
    call {:si_unique_call 1204} WPP_RECORDER_SF_qqd(vslice_dummy_var_419, 4, 1, 13, Tmp_1133, vslice_dummy_var_420, selectInterfaceUrb, status_59);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_59 >= 0;
    call {:si_unique_call 1205} Tmp_1128 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1128 != 0;
    assume Tmp_1128 > 0;
    Mem_T.VOID[Tmp_1128] := oldIrql_7;
    call {:si_unique_call 1206} sdv_KeAcquireSpinLock(0, Tmp_1128);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1128 != 0;
    assume Tmp_1128 > 0;
    oldIrql_7 := Mem_T.VOID[Tmp_1128];
    assume {:nonnull} interfaceEntry_2 != 0;
    assume interfaceEntry_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 1207} ExFreePoolWithTag(0, -1016958123);
    goto L72;

  L72:
    assume {:nonnull} selectInterface != 0;
    assume selectInterface > 0;
    havoc Tmp_1130;
    call {:si_unique_call 1208} sdv_364 := MemDup(selectInterface, Tmp_1130);
    assume {:nonnull} interfaceEntry_2 != 0;
    assume interfaceEntry_2 > 0;
    assume {:nonnull} interfaceEntry_2 != 0;
    assume interfaceEntry_2 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} interfaceEntry_2 != 0;
    assume interfaceEntry_2 > 0;
    havoc Tmp_1129;
    assume {:nonnull} Tmp_1129 != 0;
    assume Tmp_1129 > 0;
    havoc Tmp_1135;
    call {:si_unique_call 1209} sdv_RtlCopyMemory(0, 0, Tmp_1135);
    call {:si_unique_call 1210} sdv_KeReleaseSpinLock(0, oldIrql_7);
    goto L29;

  anon33_Then:
    status_59 := -1073741670;
    havoc Tmp_1137;
    assume {:nonnull} parentFdoExt_74 != 0;
    assume parentFdoExt_74 > 0;
    havoc vslice_dummy_var_421;
    call {:si_unique_call 1211} WPP_RECORDER_SF_d(vslice_dummy_var_421, 2, 8, 14, Tmp_1137, status_59);
    call {:si_unique_call 1212} sdv_KeReleaseSpinLock(0, oldIrql_7);
    goto L29;

  anon28_Then:
    goto L72;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:partition} 0 > status_59;
    goto L29;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:nonnull} childUrbInterface != 0;
    assume childUrbInterface > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} childUrbInterface != 0;
    assume childUrbInterface > 0;
    havoc Tmp_1126;
    havoc Tmp_1124;
    assume {:nonnull} parentFdoExt_74 != 0;
    assume parentFdoExt_74 > 0;
    havoc vslice_dummy_var_422;
    call {:si_unique_call 1213} WPP_RECORDER_SF_dd(vslice_dummy_var_422, 2, 8, 12, Tmp_1124, Tmp_1126, interfaceLength);
    goto L51;

  anon26_Then:
    goto L51;

  anon23_Then:
    assume {:partition} selectInterfaceUrb == 0;
    status_59 := -1073741670;
    Tmp_1127 := size_2;
    havoc Tmp_1136;
    assume {:nonnull} functionPdoExt_37 != 0;
    assume functionPdoExt_37 > 0;
    assume {:nonnull} parentFdoExt_74 != 0;
    assume parentFdoExt_74 > 0;
    havoc vslice_dummy_var_423;
    havoc vslice_dummy_var_424;
    call {:si_unique_call 1214} WPP_RECORDER_SF_qd(vslice_dummy_var_423, 2, 8, 10, Tmp_1136, vslice_dummy_var_424, Tmp_1127);
    goto L29;

  anon29_Then:
    assume {:partition} selectInterfaceUrb == 0;
    goto L19;
}



procedure {:origName "WPP_RECORDER_SF_qcqd"} WPP_RECORDER_SF_qcqd(actual_AutoLogContext_16: int, actual_level_16: int, actual_flags_16: int, actual_id_17: int, actual_traceGuid_16: int, actual_s_p_e_c_i_a_l_40: int, actual_s_p_e_c_i_a_l_41: int, actual_s_p_e_c_i_a_l_42: int, actual_s_p_e_c_i_a_l_43: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qcqd"} WPP_RECORDER_SF_qcqd(actual_AutoLogContext_16: int, actual_level_16: int, actual_flags_16: int, actual_id_17: int, actual_traceGuid_16: int, actual_s_p_e_c_i_a_l_40: int, actual_s_p_e_c_i_a_l_41: int, actual_s_p_e_c_i_a_l_42: int, actual_s_p_e_c_i_a_l_43: int)
{
  var {:scalar} Tmp_1140: int;
  var {:scalar} Tmp_1145: int;
  var {:scalar} Tmp_1147: int;
  var {:scalar} Tmp_1148: int;
  var {:scalar} level_16: int;
  var {:scalar} flags_16: int;
  var {:pointer} traceGuid_16: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;

  anon0:
    call {:si_unique_call 1215} vslice_dummy_var_137 := __HAVOC_malloc(4);
    level_16 := actual_level_16;
    flags_16 := actual_flags_16;
    traceGuid_16 := actual_traceGuid_16;
    call {:si_unique_call 1216} vslice_dummy_var_139 := __HAVOC_malloc(4);
    Tmp_1148 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_16 - 1);
    call {:si_unique_call 1217} Tmp_1145 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1218} Tmp_1140 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1219} Tmp_1147 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1220} vslice_dummy_var_138 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_qc"} WPP_RECORDER_SF_qc(actual_AutoLogContext_17: int, actual_level_17: int, actual_flags_17: int, actual_id_18: int, actual_traceGuid_17: int, actual_s_p_e_c_i_a_l_44: int, actual_s_p_e_c_i_a_l_45: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qc"} WPP_RECORDER_SF_qc(actual_AutoLogContext_17: int, actual_level_17: int, actual_flags_17: int, actual_id_18: int, actual_traceGuid_17: int, actual_s_p_e_c_i_a_l_44: int, actual_s_p_e_c_i_a_l_45: int)
{
  var {:scalar} Tmp_1149: int;
  var {:scalar} Tmp_1154: int;
  var {:scalar} Tmp_1158: int;
  var {:scalar} Tmp_1159: int;
  var {:scalar} level_17: int;
  var {:scalar} flags_17: int;
  var {:pointer} traceGuid_17: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;

  anon0:
    call {:si_unique_call 1221} vslice_dummy_var_140 := __HAVOC_malloc(4);
    level_17 := actual_level_17;
    flags_17 := actual_flags_17;
    traceGuid_17 := actual_traceGuid_17;
    call {:si_unique_call 1222} vslice_dummy_var_142 := __HAVOC_malloc(4);
    Tmp_1154 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_17 - 1);
    call {:si_unique_call 1223} Tmp_1158 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1224} Tmp_1149 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1225} Tmp_1159 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1226} vslice_dummy_var_141 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_qS"} WPP_RECORDER_SF_qS(actual_AutoLogContext_18: int, actual_level_18: int, actual_flags_18: int, actual_id_19: int, actual_traceGuid_18: int, actual_s_p_e_c_i_a_l_46: int, actual_s_p_e_c_i_a_l_47: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qS"} WPP_RECORDER_SF_qS(actual_AutoLogContext_18: int, actual_level_18: int, actual_flags_18: int, actual_id_19: int, actual_traceGuid_18: int, actual_s_p_e_c_i_a_l_46: int, actual_s_p_e_c_i_a_l_47: int)
{
  var {:scalar} Tmp_1160: int;
  var {:scalar} Tmp_1162: int;
  var {:scalar} Tmp_1164: int;
  var {:pointer} Tmp_1165: int;
  var {:scalar} sdv_369: int;
  var {:scalar} Tmp_1170: int;
  var {:scalar} Tmp_1171: int;
  var {:scalar} sdv_371: int;
  var {:scalar} Tmp_1173: int;
  var {:pointer} Tmp_1178: int;
  var {:scalar} level_18: int;
  var {:scalar} flags_18: int;
  var {:pointer} traceGuid_18: int;
  var {:pointer} s_p_e_c_i_a_l_47: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;

  anon0:
    call {:si_unique_call 1227} vslice_dummy_var_143 := __HAVOC_malloc(4);
    level_18 := actual_level_18;
    flags_18 := actual_flags_18;
    traceGuid_18 := actual_traceGuid_18;
    s_p_e_c_i_a_l_47 := actual_s_p_e_c_i_a_l_47;
    call {:si_unique_call 1228} vslice_dummy_var_145 := __HAVOC_malloc(4);
    Tmp_1160 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_18 - 1);
    call {:si_unique_call 1229} Tmp_1162 := corral_nondet();
    goto anon29_Then, anon29_Else;

  anon29_Else:
    call {:si_unique_call 1230} Tmp_1170 := corral_nondet();
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} s_p_e_c_i_a_l_47 != 0;
    assume {:nonnull} s_p_e_c_i_a_l_47 != 0;
    assume s_p_e_c_i_a_l_47 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] != 0;
    Tmp_1173 := (sdv_369 + 1) * 2;
    goto L16;

  L16:
    goto L17;

  L17:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} s_p_e_c_i_a_l_47 != 0;
    assume {:nonnull} s_p_e_c_i_a_l_47 != 0;
    assume s_p_e_c_i_a_l_47 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] != 0;
    Tmp_1165 := s_p_e_c_i_a_l_47;
    goto L22;

  L22:
    goto L23;

  L23:
    call {:si_unique_call 1231} Tmp_1171 := corral_nondet();
    goto L6;

  L6:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} s_p_e_c_i_a_l_47 != 0;
    assume {:nonnull} s_p_e_c_i_a_l_47 != 0;
    assume s_p_e_c_i_a_l_47 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] != 0;
    Tmp_1164 := (sdv_371 + 1) * 2;
    goto L35;

  L35:
    goto L36;

  L36:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} s_p_e_c_i_a_l_47 != 0;
    assume {:nonnull} s_p_e_c_i_a_l_47 != 0;
    assume s_p_e_c_i_a_l_47 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] != 0;
    Tmp_1178 := s_p_e_c_i_a_l_47;
    goto L41;

  L41:
    goto L42;

  L42:
    call {:si_unique_call 1232} vslice_dummy_var_144 := corral_nondet();
    return;

  anon28_Then:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] == 0;
    Tmp_1178 := strConst__li2bpl30;
    goto L41;

  anon27_Then:
    assume {:partition} s_p_e_c_i_a_l_47 == 0;
    goto L42;

  anon26_Then:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] == 0;
    Tmp_1164 := 14;
    goto L35;

  anon21_Then:
    assume {:partition} s_p_e_c_i_a_l_47 == 0;
    goto L36;

  anon25_Then:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] == 0;
    Tmp_1165 := strConst__li2bpl30;
    goto L22;

  anon24_Then:
    assume {:partition} s_p_e_c_i_a_l_47 == 0;
    goto L23;

  anon23_Then:
    assume {:partition} Mem_T.VOID[s_p_e_c_i_a_l_47] == 0;
    Tmp_1173 := 14;
    goto L16;

  anon22_Then:
    assume {:partition} s_p_e_c_i_a_l_47 == 0;
    goto L17;

  anon30_Then:
    goto L6;

  anon29_Then:
    goto L6;
}



procedure {:origName "DispatchPdoPnp"} DispatchPdoPnp(actual_functionPdoExt_38: int, actual_irp_41: int) returns (Tmp_1179: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoPnp"} DispatchPdoPnp(actual_functionPdoExt_38: int, actual_irp_41: int) returns (Tmp_1179: int)
{
  var {:pointer} irpSp_18: int;
  var {:pointer} Tmp_1180: int;
  var {:pointer} busInfo: int;
  var {:pointer} Tmp_1181: int;
  var {:pointer} sdv_376: int;
  var {:pointer} parentFdoExt_75: int;
  var {:dopa} {:scalar} d3ColdSupportedValue: int;
  var {:scalar} completeIrp: int;
  var {:scalar} status_60: int;
  var {:scalar} minorFunction_1: int;
  var {:pointer} functionPdoExt_38: int;
  var {:pointer} irp_41: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_425: int;
  var vslice_dummy_var_426: int;
  var vslice_dummy_var_427: int;
  var vslice_dummy_var_428: int;

  anon0:
    call {:si_unique_call 1233} d3ColdSupportedValue := __HAVOC_malloc(4);
    functionPdoExt_38 := actual_functionPdoExt_38;
    irp_41 := actual_irp_41;
    call {:si_unique_call 1234} Tmp_1180 := __HAVOC_malloc(68);
    status_60 := 0;
    completeIrp := 1;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    havoc parentFdoExt_75;
    call {:si_unique_call 1235} sdv_do_paged_code_check();
    call {:si_unique_call 1236} irpSp_18 := sdv_IoGetCurrentIrpStackLocation(irp_41);
    assume {:nonnull} irpSp_18 != 0;
    assume irpSp_18 > 0;
    havoc minorFunction_1;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} minorFunction_1 != 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} minorFunction_1 != 1;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} minorFunction_1 != 2;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} minorFunction_1 != 3;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} minorFunction_1 != 4;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} minorFunction_1 != 5;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} minorFunction_1 != 6;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} minorFunction_1 != 7;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} minorFunction_1 != 8;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} minorFunction_1 != 9;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} minorFunction_1 != 11;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} minorFunction_1 != 12;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} minorFunction_1 != 19;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} minorFunction_1 != 20;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} minorFunction_1 != 21;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} minorFunction_1 != 23;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L145;

  L145:
    assume {:nonnull} irp_41 != 0;
    assume irp_41 > 0;
    havoc status_60;
    goto L56;

  L56:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} completeIrp != 0;
    call {:si_unique_call 1237} UsbcCompleteIrp(parentFdoExt_75, status_60, irp_41);
    goto L57;

  L57:
    Tmp_1179 := status_60;
    goto LM2;

  LM2:
    return;

  anon79_Then:
    assume {:partition} completeIrp == 0;
    goto L57;

  anon83_Then:
    havoc Tmp_1181;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    havoc vslice_dummy_var_425;
    havoc vslice_dummy_var_426;
    call {:si_unique_call 1238} WPP_RECORDER_SF_qc(vslice_dummy_var_425, 5, 2, 14, Tmp_1181, vslice_dummy_var_426, minorFunction_1);
    goto L145;

  anon84_Then:
    assume {:partition} minorFunction_1 == 23;
    status_60 := 0;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto L56;

  anon85_Then:
    assume {:partition} minorFunction_1 == 21;
    call {:si_unique_call 1239} sdv_376 := ExAllocatePoolWithTag(1, 24, -1016958123);
    busInfo := sdv_376;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} busInfo != 0;
    call {:si_unique_call 1240} sdv_RtlZeroMemory(0, 24);
    goto L66;

  L66:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} busInfo != 0;
    assume {:nonnull} busInfo != 0;
    assume busInfo > 0;
    assume {:nonnull} busInfo != 0;
    assume busInfo > 0;
    assume {:nonnull} busInfo != 0;
    assume busInfo > 0;
    assume {:nonnull} busInfo != 0;
    assume busInfo > 0;
    assume {:nonnull} busInfo != 0;
    assume busInfo > 0;
    assume {:nonnull} busInfo != 0;
    assume busInfo > 0;
    assume {:nonnull} irp_41 != 0;
    assume irp_41 > 0;
    status_60 := 0;
    goto L56;

  anon80_Then:
    assume {:partition} busInfo == 0;
    assume {:nonnull} irp_41 != 0;
    assume irp_41 > 0;
    status_60 := -1073741670;
    goto L56;

  anon114_Then:
    assume {:partition} busInfo == 0;
    goto L66;

  anon86_Then:
    assume {:partition} minorFunction_1 == 20;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    goto L81;

  L81:
    assume {:nonnull} irp_41 != 0;
    assume irp_41 > 0;
    goto L78;

  L78:
    status_60 := 0;
    goto L56;

  anon99_Then:
    goto L78;

  anon100_Then:
    goto L81;

  anon101_Then:
    assume {:nonnull} irp_41 != 0;
    assume irp_41 > 0;
    goto L78;

  anon78_Then:
    assume {:nonnull} irp_41 != 0;
    assume irp_41 > 0;
    goto L78;

  anon87_Then:
    assume {:partition} minorFunction_1 == 19;
    call {:si_unique_call 1241} status_60 := QueryFunctionPdoID(functionPdoExt_38, irp_41);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} yogi_error != 1;
    goto L56;

  anon113_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    assume {:partition} minorFunction_1 == 12;
    call {:si_unique_call 1242} status_60 := GetDeviceText(functionPdoExt_38, irp_41);
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} yogi_error != 1;
    goto L56;

  anon112_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon89_Then:
    assume {:partition} minorFunction_1 == 11;
    call {:si_unique_call 1243} InstallExtPropDesc(functionPdoExt_38);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1244} QuerySelectiveSuspendRegistryFlag(functionPdoExt_38);
    call {:si_unique_call 1245} QueryAllowIdleIrpInD3RegistryFlag(functionPdoExt_38);
    status_60 := 0;
    goto L56;

  anon111_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon90_Then:
    assume {:partition} minorFunction_1 == 9;
    call {:si_unique_call 1246} status_60 := QueryFunctionCapabilities(functionPdoExt_38, irp_41);
    goto L56;

  anon91_Then:
    assume {:partition} minorFunction_1 == 8;
    call {:si_unique_call 1247} status_60 := HandlePdoQueryInterface(functionPdoExt_38, irp_41);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} yogi_error != 1;
    completeIrp := 0;
    goto L56;

  anon110_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    assume {:partition} minorFunction_1 == 7;
    call {:si_unique_call 1248} status_60 := QueryFunctionDeviceRelations(functionPdoExt_38, irp_41);
    goto L56;

  anon93_Then:
    assume {:partition} minorFunction_1 == 6;
    goto L31;

  L31:
    status_60 := 0;
    goto L56;

  anon94_Then:
    assume {:partition} minorFunction_1 == 5;
    goto L31;

  anon95_Then:
    assume {:partition} minorFunction_1 == 4;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto L106;

  L106:
    status_60 := 0;
    goto L56;

  anon77_Then:
    goto L106;

  anon96_Then:
    assume {:partition} minorFunction_1 == 3;
    goto L26;

  L26:
    status_60 := 0;
    goto L56;

  anon97_Then:
    assume {:partition} minorFunction_1 == 2;
    call {:si_unique_call 1249} status_60 := PdoRemoveDevice(functionPdoExt_38, irp_41);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} yogi_error != 1;
    goto L56;

  anon109_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon98_Then:
    assume {:partition} minorFunction_1 == 1;
    goto L26;

  anon102_Then:
    assume {:partition} minorFunction_1 == 0;
    call {:si_unique_call 1250} ResetPdoExtension(parentFdoExt_75, functionPdoExt_38);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1251} CancelFdoIdleIrp(parentFdoExt_75, 1);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    havoc vslice_dummy_var_427;
    call {:si_unique_call 1252} status_60 := GetD3Policy(vslice_dummy_var_427, d3ColdSupportedValue);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_60 >= 0;
    assume {:nonnull} d3ColdSupportedValue != 0;
    assume d3ColdSupportedValue > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Mem_T.VOID[d3ColdSupportedValue] == 1;
    Tmp_1180 := strConst__li2bpl4;
    assume {:nonnull} parentFdoExt_75 != 0;
    assume parentFdoExt_75 > 0;
    havoc vslice_dummy_var_428;
    call {:si_unique_call 1253} AcquireMutex(D3ColdStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_75), Tmp_1180, vslice_dummy_var_428);
    assume {:nonnull} functionPdoExt_38 != 0;
    assume functionPdoExt_38 > 0;
    assume {:nonnull} parentFdoExt_75 != 0;
    assume parentFdoExt_75 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    call {:si_unique_call 1254} ChangeParentD3ColdStateLocked(parentFdoExt_75);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} yogi_error != 1;
    goto L133;

  L133:
    call {:si_unique_call 1255} vslice_dummy_var_146 := KeReleaseMutex(0, 0);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} yogi_error != 1;
    goto L120;

  L120:
    status_60 := 0;
    goto L56;

  anon108_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon107_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon106_Then:
    goto L133;

  anon82_Then:
    assume {:partition} Mem_T.VOID[d3ColdSupportedValue] != 1;
    goto L120;

  anon81_Then:
    assume {:partition} 0 > status_60;
    goto L120;

  anon105_Then:
    goto L120;

  anon104_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon103_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "HandleFdoCancelStop"} HandleFdoCancelStop(actual_parentFdoExt_76: int, actual_irp_42: int) returns (Tmp_1183: int);
  modifies alloc, Mem_T.VOID, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HandleFdoCancelStop"} HandleFdoCancelStop(actual_parentFdoExt_76: int, actual_irp_42: int) returns (Tmp_1183: int)
{
  var {:scalar} ntStatus_19: int;
  var {:pointer} parentFdoExt_76: int;
  var {:pointer} irp_42: int;

  anon0:
    parentFdoExt_76 := actual_parentFdoExt_76;
    irp_42 := actual_irp_42;
    ntStatus_19 := 0;
    assume {:nonnull} parentFdoExt_76 != 0;
    assume parentFdoExt_76 > 0;
    call {:si_unique_call 1256} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_76 != 0;
    assume parentFdoExt_76 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1257} EnableIdleTimer(parentFdoExt_76, 1, -800107437);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L10;

  L10:
    assume {:nonnull} irp_42 != 0;
    assume irp_42 > 0;
    Tmp_1183 := ntStatus_19;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L10;
}



procedure {:origName "HandleFdoStop"} HandleFdoStop(actual_parentFdoExt_77: int, actual_irp_43: int) returns (Tmp_1185: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HandleFdoStop"} HandleFdoStop(actual_parentFdoExt_77: int, actual_irp_43: int) returns (Tmp_1185: int)
{
  var {:scalar} queueHandle_4: int;
  var {:scalar} ntStatus_20: int;
  var {:pointer} Tmp_1187: int;
  var {:scalar} currentlyStopped: int;
  var {:pointer} parentFdoExt_77: int;
  var {:pointer} irp_43: int;
  var vslice_dummy_var_429: int;

  anon0:
    call {:si_unique_call 1258} queueHandle_4 := __HAVOC_malloc(12);
    parentFdoExt_77 := actual_parentFdoExt_77;
    irp_43 := actual_irp_43;
    call {:si_unique_call 1259} Tmp_1187 := __HAVOC_malloc(164);
    ntStatus_20 := 0;
    assume {:nonnull} queueHandle_4 != 0;
    assume queueHandle_4 > 0;
    assume {:nonnull} queueHandle_4 != 0;
    assume queueHandle_4 > 0;
    assume {:nonnull} queueHandle_4 != 0;
    assume queueHandle_4 > 0;
    currentlyStopped := 0;
    call {:si_unique_call 1260} KeAcquireInStackQueuedSpinLock(0, 0);
    assume {:nonnull} parentFdoExt_77 != 0;
    assume parentFdoExt_77 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} parentFdoExt_77 != 0;
    assume parentFdoExt_77 > 0;
    goto L17;

  L17:
    call {:si_unique_call 1261} KeReleaseInStackQueuedSpinLock(0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} currentlyStopped != 0;
    goto L25;

  L25:
    assume {:nonnull} irp_43 != 0;
    assume irp_43 > 0;
    Tmp_1185 := ntStatus_20;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} currentlyStopped == 0;
    call {:si_unique_call 1262} CancelParentWaitWake(parentFdoExt_77);
    Tmp_1187 := strConst__li2bpl31;
    assume {:nonnull} parentFdoExt_77 != 0;
    assume parentFdoExt_77 > 0;
    havoc vslice_dummy_var_429;
    call {:si_unique_call 1263} WaitForSignal(stopEvent_PARENT_FDO_EXTENSION(parentFdoExt_77), Tmp_1187, vslice_dummy_var_429);
    call {:si_unique_call 1264} ParentCloseConfiguration(parentFdoExt_77);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L25;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    currentlyStopped := 1;
    goto L17;
}



procedure {:origName "FdoRemoveDevice"} FdoRemoveDevice(actual_parentFdoExt_78: int, actual_irp_44: int) returns (Tmp_1188: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FdoRemoveDevice"} FdoRemoveDevice(actual_parentFdoExt_78: int, actual_irp_44: int) returns (Tmp_1188: int)
{
  var {:pointer} Tmp_1190: int;
  var {:scalar} status_61: int;
  var {:pointer} parentFdoExt_78: int;
  var {:pointer} irp_44: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;

  anon0:
    parentFdoExt_78 := actual_parentFdoExt_78;
    irp_44 := actual_irp_44;
    status_61 := 0;
    call {:si_unique_call 1265} sdv_do_paged_code_check();
    havoc Tmp_1190;
    assume {:nonnull} parentFdoExt_78 != 0;
    assume parentFdoExt_78 > 0;
    havoc vslice_dummy_var_430;
    havoc vslice_dummy_var_431;
    call {:si_unique_call 1266} WPP_RECORDER_SF_qq(vslice_dummy_var_430, 4, 2, 15, Tmp_1190, vslice_dummy_var_431, irp_44);
    call {:si_unique_call 1267} PrepareParentFDOForRemove(parentFdoExt_78, irp_44);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} irp_44 != 0;
    assume irp_44 > 0;
    call {:si_unique_call 1268} sdv_IoSkipCurrentIrpStackLocation(irp_44);
    assume {:nonnull} parentFdoExt_78 != 0;
    assume parentFdoExt_78 > 0;
    havoc vslice_dummy_var_432;
    call {:si_unique_call 1269} status_61 := sdv_IoCallDriver#1(vslice_dummy_var_432, irp_44);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1270} IoDetachDevice(0);
    call {:si_unique_call 1271} FreeParentFDOResources(parentFdoExt_78);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1188 := status_61;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ResetPdoExtension"} ResetPdoExtension(actual_parentFdoExt_79: int, actual_functionPdoExt_39: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ResetPdoExtension"} ResetPdoExtension(actual_parentFdoExt_79: int, actual_functionPdoExt_39: int)
{
  var {:pointer} Tmp_1191: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} functionPdoExt_39: int;
  var vslice_dummy_var_147: int;

  anon0:
    call {:si_unique_call 1272} vslice_dummy_var_147 := __HAVOC_malloc(4);
    functionPdoExt_39 := actual_functionPdoExt_39;
    call {:si_unique_call 1273} Tmp_1191 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1191 != 0;
    assume Tmp_1191 > 0;
    Mem_T.VOID[Tmp_1191] := oldIrql_8;
    call {:si_unique_call 1274} sdv_KeAcquireSpinLock(0, Tmp_1191);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1191 != 0;
    assume Tmp_1191 > 0;
    oldIrql_8 := Mem_T.VOID[Tmp_1191];
    assume {:nonnull} functionPdoExt_39 != 0;
    assume functionPdoExt_39 > 0;
    call {:si_unique_call 1275} sdv_KeReleaseSpinLock(0, oldIrql_8);
    assume {:nonnull} functionPdoExt_39 != 0;
    assume functionPdoExt_39 > 0;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "GetDeviceText"} GetDeviceText(actual_functionPdoExt_40: int, actual_irp_45: int) returns (Tmp_1193: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetDeviceText"} GetDeviceText(actual_functionPdoExt_40: int, actual_irp_45: int) returns (Tmp_1193: int)
{
  var {:pointer} functionAssoc_8: int;
  var {:pointer} Tmp_1194: int;
  var {:pointer} Tmp_1195: int;
  var {:pointer} deviceText: int;
  var {:pointer} Tmp_1196: int;
  var {:pointer} irpSp_19: int;
  var {:scalar} stringSize: int;
  var {:pointer} Tmp_1198: int;
  var {:dopa} {:scalar} descLength: int;
  var {:pointer} Tmp_1199: int;
  var {:pointer} Tmp_1200: int;
  var {:scalar} Tmp_1201: int;
  var {:scalar} Tmp_1202: int;
  var {:scalar} Tmp_1203: int;
  var {:pointer} sdv_384: int;
  var {:scalar} stringIndex_1: int;
  var {:pointer} Tmp_1204: int;
  var {:pointer} sdv_385: int;
  var {:pointer} Tmp_1205: int;
  var {:pointer} Tmp_1206: int;
  var {:pointer} Tmp_1207: int;
  var {:pointer} Tmp_1208: int;
  var {:scalar} Tmp_1209: int;
  var {:pointer} Tmp_1210: int;
  var {:pointer} Tmp_1211: int;
  var {:scalar} langId_1: int;
  var {:pointer} Tmp_1212: int;
  var {:scalar} Tmp_1213: int;
  var {:scalar} wCharCount: int;
  var {:scalar} i_20: int;
  var {:scalar} Tmp_1214: int;
  var {:scalar} Tmp_1215: int;
  var {:pointer} Tmp_1216: int;
  var {:pointer} Tmp_1217: int;
  var {:scalar} Tmp_1218: int;
  var {:pointer} Tmp_1219: int;
  var {:scalar} Tmp_1220: int;
  var {:pointer} Tmp_1221: int;
  var {:pointer} Tmp_1222: int;
  var {:pointer} Tmp_1223: int;
  var {:pointer} Tmp_1224: int;
  var {:pointer} parentFdoExt_80: int;
  var {:pointer} sdv_389: int;
  var {:scalar} Tmp_1225: int;
  var {:scalar} status_62: int;
  var {:pointer} Tmp_1226: int;
  var {:pointer} Tmp_1227: int;
  var {:pointer} stringDesc_1: int;
  var {:pointer} functionPdoExt_40: int;
  var {:pointer} irp_45: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;

  anon0:
    call {:si_unique_call 1276} descLength := __HAVOC_malloc(4);
    call {:si_unique_call 1277} stringDesc_1 := __HAVOC_malloc(4);
    functionPdoExt_40 := actual_functionPdoExt_40;
    irp_45 := actual_irp_45;
    stringIndex_1 := 0;
    stringSize := 0;
    deviceText := 0;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc parentFdoExt_80;
    call {:si_unique_call 1278} irpSp_19 := sdv_IoGetCurrentIrpStackLocation(irp_45);
    assume {:nonnull} stringDesc_1 != 0;
    assume stringDesc_1 > 0;
    functionAssoc_8 := 0;
    call {:si_unique_call 1279} sdv_do_paged_code_check();
    assume {:nonnull} irpSp_19 != 0;
    assume irpSp_19 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} irpSp_19 != 0;
    assume irpSp_19 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    havoc Tmp_1227;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    assume {:nonnull} irpSp_19 != 0;
    assume irpSp_19 > 0;
    havoc vslice_dummy_var_433;
    havoc vslice_dummy_var_434;
    call {:si_unique_call 1280} WPP_RECORDER_SF_D(vslice_dummy_var_433, 2, 2, 29, Tmp_1227, vslice_dummy_var_434);
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    havoc status_62;
    goto L36;

  L36:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} status_62 >= 0;
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    havoc Tmp_1216;
    havoc Tmp_1226;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_435;
    havoc vslice_dummy_var_436;
    call {:si_unique_call 1281} WPP_RECORDER_SF_qs(vslice_dummy_var_435, 4, 2, 30, Tmp_1226, vslice_dummy_var_436, Tmp_1216);
    goto L48;

  L48:
    assume {:nonnull} stringDesc_1 != 0;
    assume stringDesc_1 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    call {:si_unique_call 1282} ExFreePoolWithTag(0, -1016958123);
    goto L49;

  L49:
    Tmp_1193 := status_62;
    goto LM2;

  LM2:
    return;

  anon48_Then:
    goto L49;

  anon46_Then:
    assume {:partition} 0 > status_62;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} deviceText != 0;
    call {:si_unique_call 1283} ExFreePoolWithTag(0, -1016958123);
    goto L48;

  anon47_Then:
    assume {:partition} deviceText == 0;
    goto L48;

  anon57_Then:
    call {:si_unique_call 1284} status_62 := HandlePdoLocationInformation(functionPdoExt_40, irp_45);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L36;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc functionAssoc_8;
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    havoc Tmp_1214;
    call {:si_unique_call 1285} sdv_385 := ExAllocatePoolWithTag(1, Tmp_1214, -1016958123);
    deviceText := sdv_385;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} deviceText != 0;
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    havoc Tmp_1218;
    call {:si_unique_call 1286} sdv_RtlZeroMemory(0, Tmp_1218);
    goto L64;

  L64:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} deviceText != 0;
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    havoc Tmp_1225;
    call {:si_unique_call 1287} sdv_RtlCopyMemory(0, 0, Tmp_1225);
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    status_62 := 0;
    havoc Tmp_1221;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_437;
    havoc vslice_dummy_var_438;
    call {:si_unique_call 1288} WPP_RECORDER_SF_q(vslice_dummy_var_437, 4, 2, 19, Tmp_1221, vslice_dummy_var_438);
    goto L36;

  anon50_Then:
    assume {:partition} deviceText == 0;
    status_62 := -1073741670;
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    havoc Tmp_1224;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_439;
    call {:si_unique_call 1289} WPP_RECORDER_SF_(vslice_dummy_var_439, 2, 8, 20, Tmp_1224);
    goto L36;

  anon59_Then:
    assume {:partition} deviceText == 0;
    goto L64;

  anon58_Then:
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    havoc Tmp_1212;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_440;
    havoc vslice_dummy_var_441;
    call {:si_unique_call 1290} WPP_RECORDER_SF_q(vslice_dummy_var_440, 4, 2, 21, Tmp_1212, vslice_dummy_var_441);
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    havoc Tmp_1198;
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    havoc stringIndex_1;
    goto L96;

  L96:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} stringIndex_1 != 0;
    goto L108;

  L108:
    call {:si_unique_call 1291} langId_1 := corral_nondet();
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} langId_1 != 0;
    goto L111;

  L111:
    call {:si_unique_call 1292} status_62 := PdoGetStringDescriptor(functionPdoExt_40, stringIndex_1, langId_1, stringDesc_1, descLength);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} yogi_error != 1;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} status_62 >= 0;
    assume {:nonnull} stringDesc_1 != 0;
    assume stringDesc_1 > 0;
    havoc wCharCount;
    stringSize := wCharCount * 2;
    Tmp_1201 := stringSize + 2;
    call {:si_unique_call 1293} sdv_389 := ExAllocatePoolWithTag(1, Tmp_1201, -1016958123);
    deviceText := sdv_389;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} deviceText != 0;
    Tmp_1215 := stringSize + 2;
    call {:si_unique_call 1294} sdv_RtlZeroMemory(0, Tmp_1215);
    goto L126;

  L126:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} deviceText != 0;
    call {:si_unique_call 1295} sdv_RtlCopyMemory(0, 0, stringSize);
    Tmp_1209 := wCharCount;
    assume {:nonnull} deviceText != 0;
    assume deviceText > 0;
    Mem_T.VOID[deviceText + Tmp_1209 * 4] := 0;
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    goto L36;

  anon53_Then:
    assume {:partition} deviceText == 0;
    status_62 := -1073741670;
    havoc Tmp_1196;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_442;
    call {:si_unique_call 1296} WPP_RECORDER_SF_(vslice_dummy_var_442, 2, 8, 27, Tmp_1196);
    goto L36;

  anon62_Then:
    assume {:partition} deviceText == 0;
    goto L126;

  anon52_Then:
    assume {:partition} 0 > status_62;
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    havoc Tmp_1204;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_443;
    havoc vslice_dummy_var_444;
    call {:si_unique_call 1297} WPP_RECORDER_SF_q(vslice_dummy_var_443, 2, 8, 28, Tmp_1204, vslice_dummy_var_444);
    goto L36;

  anon61_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    assume {:partition} langId_1 == 0;
    langId_1 := 1033;
    goto L111;

  anon51_Then:
    assume {:partition} stringIndex_1 == 0;
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    havoc Tmp_1194;
    assume {:nonnull} Tmp_1194 != 0;
    assume Tmp_1194 > 0;
    havoc Tmp_1205;
    assume {:nonnull} Tmp_1205 != 0;
    assume Tmp_1205 > 0;
    havoc Tmp_1199;
    assume {:nonnull} Tmp_1199 != 0;
    assume Tmp_1199 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    havoc Tmp_1219;
    assume {:nonnull} Tmp_1219 != 0;
    assume Tmp_1219 > 0;
    havoc Tmp_1223;
    assume {:nonnull} Tmp_1223 != 0;
    assume Tmp_1223 > 0;
    havoc Tmp_1206;
    assume {:nonnull} Tmp_1206 != 0;
    assume Tmp_1206 > 0;
    havoc stringIndex_1;
    assume {:nonnull} functionAssoc_8 != 0;
    assume functionAssoc_8 > 0;
    havoc Tmp_1195;
    assume {:nonnull} Tmp_1195 != 0;
    assume Tmp_1195 > 0;
    havoc Tmp_1200;
    assume {:nonnull} Tmp_1200 != 0;
    assume Tmp_1200 > 0;
    havoc Tmp_1207;
    assume {:nonnull} Tmp_1207 != 0;
    assume Tmp_1207 > 0;
    Tmp_1202 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_1207)];
    havoc Tmp_1222;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_445;
    havoc vslice_dummy_var_446;
    call {:si_unique_call 1298} WPP_RECORDER_SF_dq(vslice_dummy_var_445, 4, 2, 22, Tmp_1222, Tmp_1202, vslice_dummy_var_446);
    goto L108;

  anon63_Then:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} GenericCompositeUSBDeviceString != 0;
    havoc Tmp_1208;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_447;
    havoc vslice_dummy_var_448;
    call {:si_unique_call 1299} WPP_RECORDER_SF_q(vslice_dummy_var_447, 4, 2, 23, Tmp_1208, vslice_dummy_var_448);
    i_20 := 0;
    goto L181;

  L181:
    call {:si_unique_call 1300} Tmp_1203, i_20 := GetDeviceText_loop_L181(Tmp_1203, i_20);
    goto L181_last;

  L181_last:
    Tmp_1203 := i_20;
    assume {:nonnull} GenericCompositeUSBDeviceString != 0;
    assume GenericCompositeUSBDeviceString > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.VOID[GenericCompositeUSBDeviceString + Tmp_1203 * 4] != 0;
    i_20 := i_20 + 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    assume false;
    return;

  anon64_Then:
    assume {:partition} Mem_T.VOID[GenericCompositeUSBDeviceString + Tmp_1203 * 4] == 0;
    stringSize := i_20 * 2;
    Tmp_1220 := stringSize + 2;
    call {:si_unique_call 1301} sdv_384 := ExAllocatePoolWithTag(1, Tmp_1220, -1016958123);
    deviceText := sdv_384;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} deviceText != 0;
    Tmp_1213 := stringSize + 2;
    call {:si_unique_call 1302} sdv_RtlZeroMemory(0, Tmp_1213);
    goto L190;

  L190:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} deviceText != 0;
    call {:si_unique_call 1303} sdv_RtlCopyMemory(0, 0, stringSize);
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    status_62 := 0;
    goto L36;

  anon56_Then:
    assume {:partition} deviceText == 0;
    status_62 := -1073741670;
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    havoc Tmp_1217;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_449;
    call {:si_unique_call 1304} WPP_RECORDER_SF_(vslice_dummy_var_449, 2, 8, 24, Tmp_1217);
    goto L36;

  anon65_Then:
    assume {:partition} deviceText == 0;
    goto L190;

  anon54_Then:
    assume {:partition} GenericCompositeUSBDeviceString == 0;
    assume {:nonnull} parentFdoExt_80 != 0;
    assume parentFdoExt_80 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    havoc Tmp_1211;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_450;
    havoc vslice_dummy_var_451;
    call {:si_unique_call 1305} WPP_RECORDER_SF_q(vslice_dummy_var_450, 4, 2, 26, Tmp_1211, vslice_dummy_var_451);
    assume {:nonnull} irp_45 != 0;
    assume irp_45 > 0;
    havoc status_62;
    goto L36;

  anon55_Then:
    havoc Tmp_1210;
    assume {:nonnull} functionPdoExt_40 != 0;
    assume functionPdoExt_40 > 0;
    havoc vslice_dummy_var_452;
    havoc vslice_dummy_var_453;
    call {:si_unique_call 1306} WPP_RECORDER_SF_q(vslice_dummy_var_452, 4, 2, 25, Tmp_1210, vslice_dummy_var_453);
    assume {:nonnull} parentFdoExt_80 != 0;
    assume parentFdoExt_80 > 0;
    havoc stringIndex_1;
    goto L108;

  anon49_Then:
    goto L96;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var {:scalar} Tmp_1228: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_454: int;

  anon0:
    call {:si_unique_call 1307} Tmp_1228 := __HAVOC_malloc(4);
    call {:si_unique_call 1308} vslice_dummy_var_148 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_1228 != 0;
    assume Tmp_1228 > 0;
    havoc vslice_dummy_var_454;
    Mem_T.VOID[Tmp_1228] := vslice_dummy_var_454;
    return;
}



procedure {:origName "USBC_PnpComplete"} USBC_PnpComplete(actual_devObj_5: int, actual_irp_46: int, actual_context_5: int) returns (Tmp_1231: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_PnpComplete"} USBC_PnpComplete(actual_devObj_5: int, actual_irp_46: int, actual_context_5: int) returns (Tmp_1231: int)
{
  var {:pointer} irpSp_20: int;
  var {:pointer} parentFdoExt_81: int;
  var {:pointer} irp_46: int;
  var {:pointer} context_5: int;
  var vslice_dummy_var_149: int;

  anon0:
    irp_46 := actual_irp_46;
    context_5 := actual_context_5;
    call {:si_unique_call 1309} irpSp_20 := sdv_IoGetCurrentIrpStackLocation(irp_46);
    parentFdoExt_81 := context_5;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} parentFdoExt_81 != 0;
    assume parentFdoExt_81 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 1310} FreeInterfaceList(parentFdoExt_81, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_81 != 0;
    assume parentFdoExt_81 > 0;
    goto L11;

  L11:
    assume {:nonnull} irp_46 != 0;
    assume irp_46 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 1311} sdv_IoMarkIrpPending(0);
    goto L18;

  L18:
    call {:si_unique_call 1312} UsbcReleaseRemoveLock(parentFdoExt_81, irp_46);
    assume {:nonnull} parentFdoExt_81 != 0;
    assume parentFdoExt_81 > 0;
    call {:si_unique_call 1313} vslice_dummy_var_149 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_81), irp_46);
    Tmp_1231 := 0;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    goto L18;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    goto L11;

  anon11_Then:
    goto L11;
}



procedure {:origName "DispatchFdoPnp"} DispatchFdoPnp(actual_parentFdoExt_82: int, actual_irp_47: int) returns (Tmp_1233: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchFdoPnp"} DispatchFdoPnp(actual_parentFdoExt_82: int, actual_irp_47: int) returns (Tmp_1233: int)
{
  var {:pointer} Tmp_1234: int;
  var {:pointer} irpSp_21: int;
  var {:pointer} Tmp_1236: int;
  var {:pointer} Tmp_1237: int;
  var {:scalar} sdv_395: int;
  var {:scalar} ntStatus_21: int;
  var {:pointer} Tmp_1238: int;
  var {:scalar} forwardIrp: int;
  var {:scalar} status_63: int;
  var {:scalar} minorFunction_2: int;
  var {:pointer} Tmp_1239: int;
  var {:pointer} parentFdoExt_82: int;
  var {:pointer} irp_47: int;
  var vslice_dummy_var_455: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_457: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_462: int;
  var vslice_dummy_var_463: int;
  var vslice_dummy_var_464: int;
  var vslice_dummy_var_465: int;

  anon0:
    parentFdoExt_82 := actual_parentFdoExt_82;
    irp_47 := actual_irp_47;
    status_63 := 0;
    ntStatus_21 := 0;
    forwardIrp := 1;
    call {:si_unique_call 1314} sdv_do_paged_code_check();
    call {:si_unique_call 1315} irpSp_21 := sdv_IoGetCurrentIrpStackLocation(irp_47);
    assume {:nonnull} irpSp_21 != 0;
    assume irpSp_21 > 0;
    havoc minorFunction_2;
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    call {:si_unique_call 1316} sdv_395 := ShouldDevicePowerUp(irpSp_21);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_395 != 0;
    havoc Tmp_1238;
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    havoc vslice_dummy_var_455;
    havoc vslice_dummy_var_456;
    call {:si_unique_call 1317} WPP_RECORDER_SF_qc(vslice_dummy_var_455, 4, 2, 10, Tmp_1238, vslice_dummy_var_456, minorFunction_2);
    call {:si_unique_call 1318} ntStatus_21 := ParentSetD0(parentFdoExt_82, 1, 0, 0, 0);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ntStatus_21 < 0;
    havoc Tmp_1239;
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    havoc vslice_dummy_var_457;
    call {:si_unique_call 1319} WPP_RECORDER_SF_d(vslice_dummy_var_457, 2, 8, 11, Tmp_1239, ntStatus_21);
    goto L20;

  L20:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} minorFunction_2 != 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} minorFunction_2 != 1;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} minorFunction_2 != 2;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} minorFunction_2 != 4;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} minorFunction_2 != 5;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} minorFunction_2 != 6;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} minorFunction_2 != 7;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} minorFunction_2 != 9;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} minorFunction_2 != 23;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    havoc Tmp_1236;
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    havoc vslice_dummy_var_458;
    havoc vslice_dummy_var_459;
    call {:si_unique_call 1320} WPP_RECORDER_SF_qc(vslice_dummy_var_458, 5, 2, 12, Tmp_1236, vslice_dummy_var_459, minorFunction_2);
    goto L79;

  L79:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} forwardIrp != 0;
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    havoc vslice_dummy_var_460;
    havoc vslice_dummy_var_461;
    call {:si_unique_call 1321} status_63 := UsbcForwardIrpWithCompletion(parentFdoExt_82, vslice_dummy_var_460, irp_47, li2bplFunctionConstant1962, vslice_dummy_var_461, parentFdoExt_82);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} yogi_error != 1;
    goto L80;

  L80:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} minorFunction_2 != 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} minorFunction_2 != 2;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} minorFunction_2 != 4;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} minorFunction_2 != 5;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} minorFunction_2 == 6;
    goto L91;

  L91:
    havoc Tmp_1234;
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    havoc vslice_dummy_var_462;
    havoc vslice_dummy_var_463;
    call {:si_unique_call 1322} WPP_RECORDER_SF_qcqd(vslice_dummy_var_462, 4, 9, 13, Tmp_1234, vslice_dummy_var_463, minorFunction_2, irp_47, status_63);
    goto L85;

  L85:
    Tmp_1233 := status_63;
    goto LM2;

  LM2:
    return;

  anon79_Then:
    assume {:partition} minorFunction_2 != 6;
    goto L85;

  anon80_Then:
    assume {:partition} minorFunction_2 == 5;
    goto L91;

  anon81_Then:
    assume {:partition} minorFunction_2 == 4;
    goto L91;

  anon82_Then:
    assume {:partition} minorFunction_2 == 2;
    goto L91;

  anon68_Then:
    assume {:partition} minorFunction_2 == 0;
    goto L91;

  anon86_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    assume {:partition} forwardIrp == 0;
    goto L80;

  anon70_Then:
    goto L79;

  anon71_Then:
    assume {:partition} minorFunction_2 == 23;
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    call {:si_unique_call 1323} UnregisterCompositeDevice(parentFdoExt_82);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    goto L74;

  L74:
    assume {:nonnull} irp_47 != 0;
    assume irp_47 > 0;
    goto L79;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon66_Then:
    goto L74;

  anon72_Then:
    assume {:partition} minorFunction_2 == 9;
    call {:si_unique_call 1324} sdv_IoCopyCurrentIrpStackLocationToNext(irp_47);
    assume {:nonnull} parentFdoExt_82 != 0;
    assume parentFdoExt_82 > 0;
    havoc vslice_dummy_var_464;
    havoc vslice_dummy_var_465;
    call {:si_unique_call 1325} status_63 := CallDriverSync(vslice_dummy_var_464, irp_47, 0, vslice_dummy_var_465);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} status_63 >= 0;
    assume {:nonnull} irpSp_21 != 0;
    assume irpSp_21 > 0;
    havoc Tmp_1237;
    assume {:nonnull} Tmp_1237 != 0;
    assume Tmp_1237 > 0;
    goto L101;

  L101:
    call {:si_unique_call 1326} UsbcCompleteIrp(parentFdoExt_82, status_63, irp_47);
    forwardIrp := 0;
    goto L79;

  anon69_Then:
    assume {:partition} 0 > status_63;
    goto L101;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon73_Then:
    assume {:partition} minorFunction_2 == 7;
    call {:si_unique_call 1327} status_63 := QueryParentDeviceRelations(parentFdoExt_82, irp_47);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    forwardIrp := 0;
    goto L79;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    assume {:partition} minorFunction_2 == 6;
    call {:si_unique_call 1328} status_63 := HandleFdoCancelStop(parentFdoExt_82, irp_47);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto L79;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:partition} minorFunction_2 == 5;
    call {:si_unique_call 1329} status_63 := HandleFdoQueryStop(parentFdoExt_82, irp_47);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    goto L79;

  anon89_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    assume {:partition} minorFunction_2 == 4;
    call {:si_unique_call 1330} status_63 := HandleFdoStop(parentFdoExt_82, irp_47);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    goto L79;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    assume {:partition} minorFunction_2 == 2;
    call {:si_unique_call 1331} status_63 := FdoRemoveDevice(parentFdoExt_82, irp_47);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    forwardIrp := 0;
    goto L79;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume {:partition} minorFunction_2 == 1;
    assume {:nonnull} irp_47 != 0;
    assume irp_47 > 0;
    goto L79;

  anon63_Then:
    assume {:partition} minorFunction_2 == 0;
    call {:si_unique_call 1332} status_63 := StartParentFdo(parentFdoExt_82, irp_47);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} yogi_error != 1;
    forwardIrp := 0;
    goto L79;

  anon85_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    assume {:partition} 0 <= ntStatus_21;
    goto L20;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    assume {:partition} sdv_395 == 0;
    goto L20;

  anon83_Then:
    goto L20;
}



procedure {:origName "PdoRemoveDevice"} PdoRemoveDevice(actual_functionPdoExt_41: int, actual_irp_48: int) returns (Tmp_1240: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PdoRemoveDevice"} PdoRemoveDevice(actual_functionPdoExt_41: int, actual_irp_48: int) returns (Tmp_1240: int)
{
  var {:pointer} parentFdoExt_83: int;
  var {:pointer} Tmp_1241: int;
  var {:scalar} status_64: int;
  var {:pointer} functionPdoExt_41: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_467: int;

  anon0:
    functionPdoExt_41 := actual_functionPdoExt_41;
    status_64 := 0;
    assume {:nonnull} functionPdoExt_41 != 0;
    assume functionPdoExt_41 > 0;
    havoc parentFdoExt_83;
    call {:si_unique_call 1333} sdv_do_paged_code_check();
    havoc Tmp_1241;
    assume {:nonnull} functionPdoExt_41 != 0;
    assume functionPdoExt_41 > 0;
    havoc vslice_dummy_var_466;
    havoc vslice_dummy_var_467;
    call {:si_unique_call 1334} WPP_RECORDER_SF_q(vslice_dummy_var_466, 4, 2, 16, Tmp_1241, vslice_dummy_var_467);
    assume {:nonnull} functionPdoExt_41 != 0;
    assume functionPdoExt_41 > 0;
    assume {:nonnull} functionPdoExt_41 != 0;
    assume functionPdoExt_41 > 0;
    call {:si_unique_call 1335} CompleteFunctionIdleIrp(functionPdoExt_41, -1073741536);
    call {:si_unique_call 1336} CompletePdoWaitWakeIrp#1(functionPdoExt_41, -1073741536);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} functionPdoExt_41 != 0;
    assume functionPdoExt_41 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 1337} SetPdoIdle(parentFdoExt_83, functionPdoExt_41, 1, 1, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  L28:
    Tmp_1240 := status_64;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    goto L28;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WPP_RECORDER_SF_dq"} WPP_RECORDER_SF_dq(actual_AutoLogContext_19: int, actual_level_19: int, actual_flags_19: int, actual_id_20: int, actual_traceGuid_19: int, actual_s_p_e_c_i_a_l_48: int, actual_s_p_e_c_i_a_l_49: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_dq"} WPP_RECORDER_SF_dq(actual_AutoLogContext_19: int, actual_level_19: int, actual_flags_19: int, actual_id_20: int, actual_traceGuid_19: int, actual_s_p_e_c_i_a_l_48: int, actual_s_p_e_c_i_a_l_49: int)
{
  var {:scalar} Tmp_1243: int;
  var {:scalar} Tmp_1244: int;
  var {:scalar} Tmp_1248: int;
  var {:scalar} Tmp_1249: int;
  var {:scalar} level_19: int;
  var {:scalar} flags_19: int;
  var {:pointer} traceGuid_19: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;

  anon0:
    call {:si_unique_call 1338} vslice_dummy_var_150 := __HAVOC_malloc(4);
    level_19 := actual_level_19;
    flags_19 := actual_flags_19;
    traceGuid_19 := actual_traceGuid_19;
    call {:si_unique_call 1339} vslice_dummy_var_152 := __HAVOC_malloc(4);
    Tmp_1249 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_19 - 1);
    call {:si_unique_call 1340} Tmp_1244 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1341} Tmp_1243 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1342} Tmp_1248 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1343} vslice_dummy_var_151 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_dqd"} WPP_RECORDER_SF_dqd(actual_AutoLogContext_20: int, actual_level_20: int, actual_flags_20: int, actual_id_21: int, actual_traceGuid_20: int, actual_s_p_e_c_i_a_l_50: int, actual_s_p_e_c_i_a_l_51: int, actual_s_p_e_c_i_a_l_52: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_dqd"} WPP_RECORDER_SF_dqd(actual_AutoLogContext_20: int, actual_level_20: int, actual_flags_20: int, actual_id_21: int, actual_traceGuid_20: int, actual_s_p_e_c_i_a_l_50: int, actual_s_p_e_c_i_a_l_51: int, actual_s_p_e_c_i_a_l_52: int)
{
  var {:scalar} Tmp_1255: int;
  var {:scalar} Tmp_1259: int;
  var {:scalar} Tmp_1260: int;
  var {:scalar} Tmp_1263: int;
  var {:scalar} level_20: int;
  var {:scalar} flags_20: int;
  var {:pointer} traceGuid_20: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;

  anon0:
    call {:si_unique_call 1344} vslice_dummy_var_153 := __HAVOC_malloc(4);
    level_20 := actual_level_20;
    flags_20 := actual_flags_20;
    traceGuid_20 := actual_traceGuid_20;
    call {:si_unique_call 1345} vslice_dummy_var_155 := __HAVOC_malloc(4);
    Tmp_1260 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_20 - 1);
    call {:si_unique_call 1346} Tmp_1259 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1347} Tmp_1263 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1348} Tmp_1255 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1349} vslice_dummy_var_154 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "HandlePdoLocationInformation"} HandlePdoLocationInformation(actual_functionPdoExt_42: int, actual_irp_49: int) returns (Tmp_1265: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HandlePdoLocationInformation"} HandlePdoLocationInformation(actual_functionPdoExt_42: int, actual_irp_49: int) returns (Tmp_1265: int)
{
  var {:pointer} idString_1: int;
  var {:scalar} Tmp_1266: int;
  var {:pointer} Tmp_1268: int;
  var {:pointer} sdv_407: int;
  var {:scalar} topologyAddress: int;
  var {:scalar} ntStatus_22: int;
  var {:scalar} Tmp_1269: int;
  var {:scalar} Tmp_1270: int;
  var {:pointer} Tmp_1271: int;
  var {:pointer} Tmp_1272: int;
  var {:scalar} Tmp_1273: int;
  var {:scalar} Tmp_1274: int;
  var {:pointer} functionPdoExt_42: int;
  var {:pointer} irp_49: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_468: int;
  var vslice_dummy_var_469: int;
  var vslice_dummy_var_470: int;
  var vslice_dummy_var_471: int;
  var vslice_dummy_var_472: int;

  anon0:
    call {:si_unique_call 1350} topologyAddress := __HAVOC_malloc(28);
    functionPdoExt_42 := actual_functionPdoExt_42;
    irp_49 := actual_irp_49;
    call {:si_unique_call 1351} vslice_dummy_var_156 := __HAVOC_malloc(160);
    call {:si_unique_call 1352} Tmp_1271 := __HAVOC_malloc(216);
    ntStatus_22 := 0;
    idString_1 := 0;
    call {:si_unique_call 1353} sdv_do_paged_code_check();
    assume {:nonnull} functionPdoExt_42 != 0;
    assume functionPdoExt_42 > 0;
    havoc vslice_dummy_var_468;
    call {:si_unique_call 1354} ntStatus_22 := UsbcGetTopologyAddress(vslice_dummy_var_468, topologyAddress);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ntStatus_22 >= 0;
    call {:si_unique_call 1355} sdv_407 := ExAllocatePoolWithTag(1, 80, -1016958123);
    idString_1 := sdv_407;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} idString_1 != 0;
    call {:si_unique_call 1356} sdv_RtlZeroMemory(0, 80);
    goto L24;

  L24:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} idString_1 != 0;
    call {:si_unique_call 1357} sdv_RtlZeroMemory(0, 80);
    assume {:nonnull} topologyAddress != 0;
    assume topologyAddress > 0;
    havoc Tmp_1270;
    assume {:nonnull} topologyAddress != 0;
    assume topologyAddress > 0;
    havoc Tmp_1274;
    assume {:nonnull} topologyAddress != 0;
    assume topologyAddress > 0;
    havoc Tmp_1269;
    assume {:nonnull} topologyAddress != 0;
    assume topologyAddress > 0;
    havoc Tmp_1273;
    assume {:nonnull} topologyAddress != 0;
    assume topologyAddress > 0;
    havoc Tmp_1266;
    Tmp_1271 := strConst__li2bpl33;
    call {:si_unique_call 1358} vslice_dummy_var_157 := RtlStringCbPrintfW(idString_1, 80, Tmp_1271);
    assume {:nonnull} irp_49 != 0;
    assume irp_49 > 0;
    havoc Tmp_1268;
    assume {:nonnull} functionPdoExt_42 != 0;
    assume functionPdoExt_42 > 0;
    havoc vslice_dummy_var_469;
    havoc vslice_dummy_var_470;
    call {:si_unique_call 1359} WPP_RECORDER_SF_qS(vslice_dummy_var_469, 4, 1, 31, Tmp_1268, vslice_dummy_var_470, idString_1);
    goto L50;

  L50:
    Tmp_1265 := ntStatus_22;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} idString_1 == 0;
    assume {:nonnull} irp_49 != 0;
    assume irp_49 > 0;
    Tmp_1265 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} idString_1 == 0;
    goto L24;

  anon9_Then:
    assume {:partition} 0 > ntStatus_22;
    assume {:nonnull} irp_49 != 0;
    assume irp_49 > 0;
    havoc Tmp_1272;
    assume {:nonnull} functionPdoExt_42 != 0;
    assume functionPdoExt_42 > 0;
    havoc vslice_dummy_var_471;
    havoc vslice_dummy_var_472;
    call {:si_unique_call 1360} WPP_RECORDER_SF_qd(vslice_dummy_var_471, 2, 8, 32, Tmp_1272, vslice_dummy_var_472, ntStatus_22);
    goto L50;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "HandleFdoQueryStop"} HandleFdoQueryStop(actual_parentFdoExt_84: int, actual_irp_50: int) returns (Tmp_1275: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HandleFdoQueryStop"} HandleFdoQueryStop(actual_parentFdoExt_84: int, actual_irp_50: int) returns (Tmp_1275: int)
{
  var {:scalar} ntStatus_23: int;
  var {:pointer} parentFdoExt_84: int;
  var {:pointer} irp_50: int;

  anon0:
    parentFdoExt_84 := actual_parentFdoExt_84;
    irp_50 := actual_irp_50;
    ntStatus_23 := 0;
    assume {:nonnull} parentFdoExt_84 != 0;
    assume parentFdoExt_84 > 0;
    call {:si_unique_call 1361} sdv_do_paged_code_check();
    call {:si_unique_call 1362} DisableIdleTimer(parentFdoExt_84, 1, -800107437);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1363} CancelFdoIdleIrp(parentFdoExt_84, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} irp_50 != 0;
    assume irp_50 > 0;
    Tmp_1275 := ntStatus_23;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PdoGetStringDescriptor"} PdoGetStringDescriptor(actual_functionPdoExt_43: int, actual_stringIndex_2: int, actual_langId_2: int, actual_buffer_2: int, actual_bufferLength_4: int) returns (Tmp_1277: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PdoGetStringDescriptor"} PdoGetStringDescriptor(actual_functionPdoExt_43: int, actual_stringIndex_2: int, actual_langId_2: int, actual_buffer_2: int, actual_bufferLength_4: int) returns (Tmp_1277: int)
{
  var {:scalar} Tmp_1278: int;
  var {:scalar} stringDescHeader: int;
  var {:pointer} Tmp_1280: int;
  var {:scalar} Tmp_1281: int;
  var {:scalar} Tmp_1282: int;
  var {:scalar} done: int;
  var {:pointer} sdv_410: int;
  var {:scalar} status_65: int;
  var {:scalar} Tmp_1283: int;
  var {:pointer} stringDesc_2: int;
  var {:pointer} Tmp_1284: int;
  var {:pointer} functionPdoExt_43: int;
  var {:scalar} stringIndex_2: int;
  var {:scalar} langId_2: int;
  var {:pointer} buffer_2: int;
  var {:pointer} bufferLength_4: int;
  var vslice_dummy_var_473: int;
  var vslice_dummy_var_474: int;
  var vslice_dummy_var_475: int;
  var vslice_dummy_var_476: int;
  var vslice_dummy_var_477: int;

  anon0:
    call {:si_unique_call 1364} stringDescHeader := __HAVOC_malloc(12);
    functionPdoExt_43 := actual_functionPdoExt_43;
    stringIndex_2 := actual_stringIndex_2;
    langId_2 := actual_langId_2;
    buffer_2 := actual_buffer_2;
    bufferLength_4 := actual_bufferLength_4;
    stringDesc_2 := 0;
    call {:si_unique_call 1365} sdv_do_paged_code_check();
    goto L11;

  L11:
    call {:si_unique_call 1366} done, status_65, langId_2 := PdoGetStringDescriptor_loop_L11(stringDescHeader, done, status_65, functionPdoExt_43, stringIndex_2, langId_2);
    goto L11_last;

  L11_last:
    done := 1;
    assume {:nonnull} functionPdoExt_43 != 0;
    assume functionPdoExt_43 > 0;
    havoc vslice_dummy_var_477;
    call {:si_unique_call 1373} status_65 := GetStringDescriptor(vslice_dummy_var_477, stringIndex_2, langId_2, stringDescHeader, 4);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_65 >= 0;
    goto L18;

  L18:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} done != 0;
    assume {:nonnull} stringDescHeader != 0;
    assume stringDescHeader > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 4 >= Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)];
    status_65 := -1073741668;
    goto L23;

  L23:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_65 >= 0;
    assume {:nonnull} buffer_2 != 0;
    assume buffer_2 > 0;
    assume {:nonnull} bufferLength_4 != 0;
    assume bufferLength_4 > 0;
    assume {:nonnull} stringDescHeader != 0;
    assume stringDescHeader > 0;
    Mem_T.VOID[bufferLength_4] := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)];
    goto L27;

  L27:
    Tmp_1277 := status_65;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:partition} 0 > status_65;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} stringDesc_2 != 0;
    call {:si_unique_call 1367} ExFreePoolWithTag(0, -1016958123);
    goto L28;

  L28:
    assume {:nonnull} buffer_2 != 0;
    assume buffer_2 > 0;
    assume {:nonnull} bufferLength_4 != 0;
    assume bufferLength_4 > 0;
    Mem_T.VOID[bufferLength_4] := 0;
    goto L27;

  anon30_Then:
    assume {:partition} stringDesc_2 == 0;
    goto L28;

  anon28_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)] > 4;
    assume {:nonnull} stringDescHeader != 0;
    assume stringDescHeader > 0;
    Tmp_1283 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)];
    call {:si_unique_call 1368} sdv_410 := ExAllocatePoolWithTag(512, Tmp_1283, -1016958123);
    stringDesc_2 := sdv_410;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} stringDesc_2 != 0;
    assume {:nonnull} stringDescHeader != 0;
    assume stringDescHeader > 0;
    Tmp_1282 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)];
    call {:si_unique_call 1369} sdv_RtlZeroMemory(0, Tmp_1282);
    goto L38;

  L38:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} stringDesc_2 != 0;
    assume {:nonnull} stringDescHeader != 0;
    assume stringDescHeader > 0;
    Tmp_1278 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)];
    assume {:nonnull} functionPdoExt_43 != 0;
    assume functionPdoExt_43 > 0;
    havoc vslice_dummy_var_473;
    call {:si_unique_call 1370} status_65 := GetStringDescriptor(vslice_dummy_var_473, stringIndex_2, langId_2, stringDesc_2, Tmp_1278);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} status_65 >= 0;
    assume {:nonnull} stringDescHeader != 0;
    assume stringDescHeader > 0;
    assume {:nonnull} stringDesc_2 != 0;
    assume stringDesc_2 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)] != Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDesc_2)];
    status_65 := -1073741668;
    goto L23;

  anon33_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDescHeader)] == Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(stringDesc_2)];
    goto L23;

  anon32_Then:
    assume {:partition} 0 > status_65;
    goto L23;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} stringDesc_2 == 0;
    status_65 := -1073741670;
    havoc Tmp_1284;
    assume {:nonnull} functionPdoExt_43 != 0;
    assume functionPdoExt_43 > 0;
    havoc vslice_dummy_var_474;
    call {:si_unique_call 1371} WPP_RECORDER_SF_(vslice_dummy_var_474, 2, 8, 18, Tmp_1284);
    goto L23;

  anon35_Then:
    assume {:partition} stringDesc_2 == 0;
    goto L38;

  anon27_Then:
    assume {:partition} done == 0;
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} 0 > status_65;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} langId_2 == 1033;
    Tmp_1281 := stringIndex_2;
    havoc Tmp_1280;
    assume {:nonnull} functionPdoExt_43 != 0;
    assume functionPdoExt_43 > 0;
    havoc vslice_dummy_var_475;
    havoc vslice_dummy_var_476;
    call {:si_unique_call 1372} WPP_RECORDER_SF_dqd(vslice_dummy_var_475, 2, 8, 17, Tmp_1280, Tmp_1281, vslice_dummy_var_476, status_65);
    goto L23;

  anon26_Then:
    assume {:partition} langId_2 != 1033;
    langId_2 := 1033;
    done := 0;
    goto L18;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PrepareRemoteWakeNotificationIrp"} PrepareRemoteWakeNotificationIrp(actual_parentFdoExt_85: int, actual_functionPdoExt_44: int) returns (Tmp_1285: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PrepareRemoteWakeNotificationIrp"} PrepareRemoteWakeNotificationIrp(actual_parentFdoExt_85: int, actual_functionPdoExt_44: int) returns (Tmp_1285: int)
{
  var {:pointer} nextSp_6: int;
  var {:pointer} remoteWake: int;
  var {:pointer} Tmp_1286: int;
  var {:pointer} Tmp_1287: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} irp_51: int;
  var {:pointer} suspendContext_3: int;
  var {:pointer} Tmp_1288: int;
  var {:scalar} status_66: int;
  var {:pointer} Tmp_1289: int;
  var {:pointer} parentFdoExt_85: int;
  var {:pointer} functionPdoExt_44: int;
  var vslice_dummy_var_478: int;
  var vslice_dummy_var_479: int;
  var vslice_dummy_var_480: int;
  var vslice_dummy_var_481: int;
  var vslice_dummy_var_482: int;

  anon0:
    parentFdoExt_85 := actual_parentFdoExt_85;
    functionPdoExt_44 := actual_functionPdoExt_44;
    Tmp_1286 := li2bplFunctionConstant2845;
    call {:si_unique_call 1374} status_66 := UsbcAcquireRemoveLock(parentFdoExt_85, -766617774, Tmp_1286);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_66 < 0;
    havoc Tmp_1289;
    assume {:nonnull} parentFdoExt_85 != 0;
    assume parentFdoExt_85 > 0;
    havoc vslice_dummy_var_478;
    call {:si_unique_call 1375} WPP_RECORDER_SF_d(vslice_dummy_var_478, 2, 8, 81, Tmp_1289, status_66);
    Tmp_1285 := status_66;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 <= status_66;
    assume {:nonnull} functionPdoExt_44 != 0;
    assume functionPdoExt_44 > 0;
    havoc suspendContext_3;
    assume {:nonnull} suspendContext_3 != 0;
    assume suspendContext_3 > 0;
    havoc irp_51;
    call {:si_unique_call 1376} Tmp_1287 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1287 != 0;
    assume Tmp_1287 > 0;
    Mem_T.VOID[Tmp_1287] := oldIrql_9;
    call {:si_unique_call 1377} sdv_KeAcquireSpinLock(0, Tmp_1287);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1287 != 0;
    assume Tmp_1287 > 0;
    oldIrql_9 := Mem_T.VOID[Tmp_1287];
    assume {:nonnull} suspendContext_3 != 0;
    assume suspendContext_3 > 0;
    call {:si_unique_call 1378} sdv_KeReleaseSpinLock(0, oldIrql_9);
    call {:si_unique_call 1379} IoReuseIrp(irp_51, 0);
    assume {:nonnull} suspendContext_3 != 0;
    assume suspendContext_3 > 0;
    remoteWake := remoteWakeNotificationInfo__FUNCTION_SUSPEND_CONTEXT(suspendContext_3);
    assume {:nonnull} remoteWake != 0;
    assume remoteWake > 0;
    assume {:nonnull} remoteWake != 0;
    assume remoteWake > 0;
    assume {:nonnull} functionPdoExt_44 != 0;
    assume functionPdoExt_44 > 0;
    assume {:nonnull} remoteWake != 0;
    assume remoteWake > 0;
    assume {:nonnull} functionPdoExt_44 != 0;
    assume functionPdoExt_44 > 0;
    assume {:nonnull} remoteWake != 0;
    assume remoteWake > 0;
    call {:si_unique_call 1380} nextSp_6 := sdv_IoGetNextIrpStackLocation(irp_51);
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} functionPdoExt_44 != 0;
    assume functionPdoExt_44 > 0;
    assume {:nonnull} parentFdoExt_85 != 0;
    assume parentFdoExt_85 > 0;
    havoc vslice_dummy_var_479;
    havoc vslice_dummy_var_480;
    call {:si_unique_call 1381} SetCompletionRoutine(vslice_dummy_var_479, vslice_dummy_var_480, irp_51, li2bplFunctionConstant2846, functionPdoExt_44, 1, 1, 1);
    havoc Tmp_1288;
    assume {:nonnull} functionPdoExt_44 != 0;
    assume functionPdoExt_44 > 0;
    havoc vslice_dummy_var_481;
    havoc vslice_dummy_var_482;
    call {:si_unique_call 1382} WPP_RECORDER_SF_qq(vslice_dummy_var_481, 4, 3, 82, Tmp_1288, vslice_dummy_var_482, irp_51);
    Tmp_1285 := 0;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CompletionFdoDeviceSetPower"} CompletionFdoDeviceSetPower(actual_devObj_7: int, actual_irp_53: int, actual_context_7: int) returns (Tmp_1298: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1298 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionFdoDeviceSetPower"} CompletionFdoDeviceSetPower(actual_devObj_7: int, actual_irp_53: int, actual_context_7: int) returns (Tmp_1298: int)
{
  var {:pointer} SD8: int;
  var {:pointer} irpSp_23: int;
  var {:scalar} sdv_8: int;
  var {:pointer} parentFdoExt_87: int;
  var {:pointer} Tmp_1300: int;
  var {:pointer} Tmp_1301: int;
  var {:pointer} irp_53: int;
  var {:pointer} context_7: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_483: int;
  var vslice_dummy_var_484: int;
  var vslice_dummy_var_485: int;
  var vslice_dummy_var_486: int;
  var vslice_dummy_var_487: int;

  anon0:
    call {:si_unique_call 1383} sdv_8 := __HAVOC_malloc(8);
    irp_53 := actual_irp_53;
    context_7 := actual_context_7;
    parentFdoExt_87 := context_7;
    call {:si_unique_call 1384} irpSp_23 := sdv_IoGetCurrentIrpStackLocation(irp_53);
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} irp_53 != 0;
    assume irp_53 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    havoc Tmp_1300;
    assume {:nonnull} irp_53 != 0;
    assume irp_53 > 0;
    assume {:nonnull} parentFdoExt_87 != 0;
    assume parentFdoExt_87 > 0;
    havoc vslice_dummy_var_483;
    havoc vslice_dummy_var_484;
    call {:si_unique_call 1385} WPP_RECORDER_SF_d(vslice_dummy_var_483, 2, 3, 14, Tmp_1300, vslice_dummy_var_484);
    goto L11;

  L11:
    call {:si_unique_call 1386} PoStartNextPowerIrp(0);
    assume {:nonnull} irp_53 != 0;
    assume irp_53 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 1387} sdv_IoMarkIrpPending(0);
    goto L39;

  L39:
    call {:si_unique_call 1388} UsbcReleaseRemoveLock(parentFdoExt_87, irp_53);
    assume {:nonnull} parentFdoExt_87 != 0;
    assume parentFdoExt_87 > 0;
    call {:si_unique_call 1389} vslice_dummy_var_158 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_87), irp_53);
    Tmp_1298 := 0;
    return;

  anon9_Then:
    goto L39;

  anon8_Then:
    havoc Tmp_1301;
    assume {:nonnull} parentFdoExt_87 != 0;
    assume parentFdoExt_87 > 0;
    havoc vslice_dummy_var_485;
    call {:si_unique_call 1390} WPP_RECORDER_SF_(vslice_dummy_var_485, 2, 3, 13, Tmp_1301);
    assume {:nonnull} parentFdoExt_87 != 0;
    assume parentFdoExt_87 > 0;
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    havoc vslice_dummy_var_486;
    havoc vslice_dummy_var_487;
    call {:si_unique_call 1391} SD8 := PoSetPowerState(0, vslice_dummy_var_486, vslice_dummy_var_487);
    assume {:nonnull} SD8 != 0;
    assume SD8 > 0;
    assume {:nonnull} sdv_8 != 0;
    assume sdv_8 > 0;
    assume {:nonnull} SD8 != 0;
    assume SD8 > 0;
    assume {:nonnull} sdv_8 != 0;
    assume sdv_8 > 0;
    goto L11;

  anon7_Then:
    goto L11;
}



procedure {:origName "DispatchPdoSetPower"} DispatchPdoSetPower(actual_functionPdoExt_45: int, actual_irp_54: int) returns (Tmp_1302: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoSetPower"} DispatchPdoSetPower(actual_functionPdoExt_45: int, actual_irp_54: int) returns (Tmp_1302: int)
{
  var {:pointer} SD7: int;
  var {:pointer} SD6: int;
  var {:pointer} irpSp_24: int;
  var {:pointer} Tmp_1303: int;
  var {:pointer} Tmp_1304: int;
  var {:pointer} Tmp_1305: int;
  var {:pointer} waitWakeIrp: int;
  var {:scalar} sdv_6: int;
  var {:pointer} parentFdoExt_88: int;
  var {:scalar} oldIrql_11: int;
  var {:scalar} sdv_7: int;
  var {:scalar} sdv_426: int;
  var {:pointer} Tmp_1306: int;
  var {:scalar} armForWake: int;
  var {:pointer} Tmp_1307: int;
  var {:pointer} Tmp_1308: int;
  var {:scalar} status_68: int;
  var {:scalar} Tmp_1309: int;
  var {:scalar} isDxResultOfSxTransition: int;
  var {:pointer} Tmp_1310: int;
  var {:pointer} Tmp_1311: int;
  var {:pointer} functionPdoExt_45: int;
  var {:pointer} irp_54: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_488: int;
  var vslice_dummy_var_489: int;
  var vslice_dummy_var_490: int;
  var vslice_dummy_var_491: int;
  var vslice_dummy_var_492: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_495: int;
  var vslice_dummy_var_496: int;
  var vslice_dummy_var_497: int;
  var vslice_dummy_var_498: int;
  var vslice_dummy_var_499: int;
  var vslice_dummy_var_500: int;
  var vslice_dummy_var_501: int;
  var vslice_dummy_var_502: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;
  var vslice_dummy_var_505: int;
  var vslice_dummy_var_506: int;
  var vslice_dummy_var_507: int;
  var vslice_dummy_var_508: int;

  anon0:
    call {:si_unique_call 1392} sdv_6 := __HAVOC_malloc(8);
    call {:si_unique_call 1393} sdv_7 := __HAVOC_malloc(8);
    functionPdoExt_45 := actual_functionPdoExt_45;
    irp_54 := actual_irp_54;
    status_68 := 0;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    havoc parentFdoExt_88;
    call {:si_unique_call 1394} irpSp_24 := sdv_IoGetCurrentIrpStackLocation(irp_54);
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    havoc Tmp_1311;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    havoc vslice_dummy_var_488;
    havoc vslice_dummy_var_489;
    havoc vslice_dummy_var_490;
    call {:si_unique_call 1395} WPP_RECORDER_SF_qD(vslice_dummy_var_488, 4, 3, 69, Tmp_1311, vslice_dummy_var_489, vslice_dummy_var_490);
    assume {:nonnull} irp_54 != 0;
    assume irp_54 > 0;
    havoc status_68;
    goto L61;

  L61:
    Tmp_1302 := status_68;
    goto LM2;

  LM2:
    return;

  anon85_Then:
    goto L31;

  L31:
    havoc Tmp_1308;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    havoc vslice_dummy_var_491;
    havoc vslice_dummy_var_492;
    havoc vslice_dummy_var_493;
    call {:si_unique_call 1396} WPP_RECORDER_SF_qqL(vslice_dummy_var_491, 4, 3, 66, Tmp_1308, vslice_dummy_var_492, irp_54, vslice_dummy_var_493);
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    call {:si_unique_call 1397} CompletePdoWaitWakeIrp#1(functionPdoExt_45, -1073741101);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    call {:si_unique_call 1398} CompleteFunctionIdleIrp(functionPdoExt_45, -1073741101);
    goto L36;

  L36:
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    havoc Tmp_1306;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    havoc vslice_dummy_var_494;
    havoc vslice_dummy_var_495;
    havoc vslice_dummy_var_496;
    call {:si_unique_call 1399} WPP_RECORDER_SF_qL(vslice_dummy_var_494, 4, 3, 67, Tmp_1306, vslice_dummy_var_495, vslice_dummy_var_496);
    status_68 := 0;
    goto L61;

  anon92_Then:
    call {:si_unique_call 1400} SetPdoIdle(parentFdoExt_88, functionPdoExt_45, 2, 1, 1);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    call {:si_unique_call 1401} isDxResultOfSxTransition := IsDxResultOfSxTransition(irpSp_24);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} isDxResultOfSxTransition != 0;
    goto L69;

  L69:
    status_68 := 0;
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    havoc vslice_dummy_var_497;
    havoc vslice_dummy_var_498;
    call {:si_unique_call 1402} SD7 := PoSetPowerState(0, vslice_dummy_var_497, vslice_dummy_var_498);
    assume {:nonnull} SD7 != 0;
    assume SD7 > 0;
    assume {:nonnull} sdv_7 != 0;
    assume sdv_7 > 0;
    assume {:nonnull} SD7 != 0;
    assume SD7 > 0;
    assume {:nonnull} sdv_7 != 0;
    assume sdv_7 > 0;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    call {:si_unique_call 1403} Tmp_1307 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1307 != 0;
    assume Tmp_1307 > 0;
    Mem_T.VOID[Tmp_1307] := oldIrql_11;
    call {:si_unique_call 1404} sdv_KeAcquireSpinLock(0, Tmp_1307);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1307 != 0;
    assume Tmp_1307 > 0;
    oldIrql_11 := Mem_T.VOID[Tmp_1307];
    call {:si_unique_call 1405} sdv_426 := sdv_IsListEmpty(0);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} sdv_426 != 0;
    Tmp_1309 := 0;
    goto L86;

  L86:
    armForWake := Tmp_1309;
    call {:si_unique_call 1406} sdv_KeReleaseSpinLock(0, oldIrql_11);
    call {:si_unique_call 1407} sdv_IoMarkIrpPending(0);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} armForWake != 0;
    call {:si_unique_call 1408} SendSetFeatureControlRequestForFunctionSuspend#1(parentFdoExt_88, functionPdoExt_45, irp_54, 1);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto L100;

  L100:
    status_68 := 259;
    goto L74;

  L74:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} isDxResultOfSxTransition == 0;
    call {:si_unique_call 1409} vslice_dummy_var_159 := ResumeIdleTimer(parentFdoExt_88);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto L61;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:partition} isDxResultOfSxTransition != 0;
    goto L61;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    assume {:partition} armForWake == 0;
    call {:si_unique_call 1410} SendSetFeatureControlRequestForFunctionSuspend#1(parentFdoExt_88, functionPdoExt_45, irp_54, 0);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} yogi_error != 1;
    goto L100;

  anon97_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    assume {:partition} sdv_426 == 0;
    Tmp_1309 := 1;
    goto L86;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    goto L74;

  anon72_Then:
    assume {:partition} isDxResultOfSxTransition == 0;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    call {:si_unique_call 1411} status_68 := AllocateWorker#1(parentFdoExt_88, li2bplFunctionConstant2839, functionPdoExt_45);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} yogi_error != 1;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} status_68 < 0;
    havoc Tmp_1303;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    havoc vslice_dummy_var_499;
    call {:si_unique_call 1412} WPP_RECORDER_SF_(vslice_dummy_var_499, 4, 3, 68, Tmp_1303);
    goto L69;

  anon78_Then:
    assume {:partition} 0 <= status_68;
    goto L69;

  anon98_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon73_Then:
    goto L69;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    goto L36;

  anon99_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    goto L36;

  anon69_Then:
    goto L36;

  anon86_Then:
    goto L31;

  anon87_Then:
    goto L31;

  anon68_Then:
    havoc Tmp_1304;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    havoc vslice_dummy_var_500;
    havoc vslice_dummy_var_501;
    call {:si_unique_call 1413} WPP_RECORDER_SF_qq(vslice_dummy_var_500, 4, 3, 64, Tmp_1304, vslice_dummy_var_501, irp_54);
    call {:si_unique_call 1414} SetPdoIdle(parentFdoExt_88, functionPdoExt_45, 2, 0, 1);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    call {:si_unique_call 1415} waitWakeIrp := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} waitWakeIrp != 0;
    call {:si_unique_call 1416} CancelRemoteWakeNotificationIrp(functionPdoExt_45, waitWakeIrp);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    goto L131;

  L131:
    call {:si_unique_call 1417} status_68 := ParentSetD0(parentFdoExt_88, 0, functionPdoExt_45, irp_54, li2bplFunctionConstant2840);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_68 != 259;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} status_68 < 0;
    havoc Tmp_1310;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    havoc vslice_dummy_var_502;
    havoc vslice_dummy_var_503;
    call {:si_unique_call 1418} WPP_RECORDER_SF_qq(vslice_dummy_var_502, 4, 3, 65, Tmp_1310, vslice_dummy_var_503, irp_54);
    goto L149;

  L149:
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    havoc vslice_dummy_var_504;
    havoc vslice_dummy_var_505;
    call {:si_unique_call 1419} SD6 := PoSetPowerState(0, vslice_dummy_var_504, vslice_dummy_var_505);
    assume {:nonnull} SD6 != 0;
    assume SD6 > 0;
    assume {:nonnull} sdv_6 != 0;
    assume sdv_6 > 0;
    assume {:nonnull} SD6 != 0;
    assume SD6 > 0;
    assume {:nonnull} sdv_6 != 0;
    assume sdv_6 > 0;
    call {:si_unique_call 1420} CompleteFunctionIdleIrp(functionPdoExt_45, 0);
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    call {:si_unique_call 1421} SendSetFeatureControlRequestForFunctionSuspend#1(parentFdoExt_88, functionPdoExt_45, irp_54, 2);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    status_68 := 259;
    goto L61;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon83_Then:
    status_68 := 0;
    goto L61;

  anon82_Then:
    assume {:partition} 0 <= status_68;
    goto L149;

  anon81_Then:
    assume {:partition} status_68 == 259;
    goto L61;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon89_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume {:partition} waitWakeIrp == 0;
    goto L131;

  anon79_Then:
    goto L131;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon84_Then:
    assume {:nonnull} irp_54 != 0;
    assume irp_54 > 0;
    havoc status_68;
    goto L61;

  anon67_Then:
    havoc Tmp_1305;
    assume {:nonnull} functionPdoExt_45 != 0;
    assume functionPdoExt_45 > 0;
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    assume {:nonnull} parentFdoExt_88 != 0;
    assume parentFdoExt_88 > 0;
    havoc vslice_dummy_var_506;
    havoc vslice_dummy_var_507;
    havoc vslice_dummy_var_508;
    call {:si_unique_call 1422} WPP_RECORDER_SF_qqL(vslice_dummy_var_506, 4, 3, 63, Tmp_1305, vslice_dummy_var_507, irp_54, vslice_dummy_var_508);
    status_68 := 0;
    goto L61;
}



procedure {:origName "DispatchFdoWaitWake"} DispatchFdoWaitWake(actual_parentFdoExt_90: int, actual_irp_55: int) returns (Tmp_1317: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchFdoWaitWake"} DispatchFdoWaitWake(actual_parentFdoExt_90: int, actual_irp_55: int) returns (Tmp_1317: int)
{
  var {:pointer} Tmp_1318: int;
  var {:pointer} Tmp_1319: int;
  var {:pointer} Tmp_1321: int;
  var {:pointer} Tmp_1322: int;
  var {:scalar} sdv_433: int;
  var {:scalar} status_70: int;
  var {:pointer} parentFdoExt_90: int;
  var {:pointer} irp_55: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_509: int;
  var vslice_dummy_var_510: int;
  var vslice_dummy_var_511: int;
  var vslice_dummy_var_512: int;
  var vslice_dummy_var_513: int;

  anon0:
    parentFdoExt_90 := actual_parentFdoExt_90;
    irp_55 := actual_irp_55;
    havoc Tmp_1322;
    assume {:nonnull} parentFdoExt_90 != 0;
    assume parentFdoExt_90 > 0;
    havoc vslice_dummy_var_509;
    havoc vslice_dummy_var_510;
    call {:si_unique_call 1423} WPP_RECORDER_SF_qq(vslice_dummy_var_509, 4, 3, 29, Tmp_1322, vslice_dummy_var_510, irp_55);
    assume {:nonnull} parentFdoExt_90 != 0;
    assume parentFdoExt_90 > 0;
    Tmp_1319 := parentWaitWakeIrp_PARENT_FDO_EXTENSION(parentFdoExt_90);
    call {:si_unique_call 1424} vslice_dummy_var_160 := _InlineInterlockedExchangePointer(Tmp_1319, irp_55);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_433 != 0;
    havoc Tmp_1318;
    assume {:nonnull} parentFdoExt_90 != 0;
    assume parentFdoExt_90 > 0;
    havoc vslice_dummy_var_511;
    call {:si_unique_call 1425} WPP_RECORDER_SF_(vslice_dummy_var_511, 4, 3, 30, Tmp_1318);
    assume {:nonnull} parentFdoExt_90 != 0;
    assume parentFdoExt_90 > 0;
    Tmp_1321 := parentWaitWakeIrp_PARENT_FDO_EXTENSION(parentFdoExt_90);
    call {:si_unique_call 1426} vslice_dummy_var_161 := _InlineInterlockedExchangePointer(Tmp_1321, 0);
    assume {:nonnull} irp_55 != 0;
    assume irp_55 > 0;
    assume {:nonnull} parentFdoExt_90 != 0;
    assume parentFdoExt_90 > 0;
    call {:si_unique_call 1427} sdv_IoCompleteRequest(0, 0);
    status_70 := -1073741536;
    goto L43;

  L43:
    Tmp_1317 := status_70;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} sdv_433 == 0;
    call {:si_unique_call 1428} sdv_IoCopyCurrentIrpStackLocationToNext(irp_55);
    assume {:nonnull} parentFdoExt_90 != 0;
    assume parentFdoExt_90 > 0;
    havoc vslice_dummy_var_512;
    havoc vslice_dummy_var_513;
    call {:si_unique_call 1429} SetCompletionRoutine(vslice_dummy_var_512, vslice_dummy_var_513, irp_55, li2bplFunctionConstant2827, parentFdoExt_90, 1, 1, 1);
    call {:si_unique_call 1430} status_70 := PoCallDriver(0, irp_55);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L43;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CallbackFdoDeviceSetDx"} CallbackFdoDeviceSetDx(actual_devObj_8: int, actual_minorFunction_3: int, actual_SD4: int, actual_context_9: int, actual_ioStatus_4: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallbackFdoDeviceSetDx"} CallbackFdoDeviceSetDx(actual_devObj_8: int, actual_minorFunction_3: int, actual_SD4: int, actual_context_9: int, actual_ioStatus_4: int)
{
  var {:scalar} powerState_4: int;
  var {:pointer} devExt_11: int;
  var {:pointer} systemSetPowerIrp: int;
  var {:pointer} Tmp_1325: int;
  var {:pointer} parentFdoExt_91: int;
  var {:pointer} devObj_8: int;
  var {:pointer} SD4: int;
  var {:pointer} context_9: int;
  var {:pointer} ioStatus_4: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_514: int;

  anon0:
    call {:si_unique_call 1431} powerState_4 := __HAVOC_malloc(8);
    call {:si_unique_call 1432} vslice_dummy_var_162 := __HAVOC_malloc(4);
    devObj_8 := actual_devObj_8;
    SD4 := actual_SD4;
    context_9 := actual_context_9;
    ioStatus_4 := actual_ioStatus_4;
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    assume {:nonnull} powerState_4 != 0;
    assume powerState_4 > 0;
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    assume {:nonnull} powerState_4 != 0;
    assume powerState_4 > 0;
    systemSetPowerIrp := context_9;
    assume {:nonnull} devObj_8 != 0;
    assume devObj_8 > 0;
    havoc devExt_11;
    assume {:nonnull} devExt_11 != 0;
    assume devExt_11 > 0;
    parentFdoExt_91 := parentFdoExt_DEVICE_EXTENSION(devExt_11);
    havoc Tmp_1325;
    assume {:nonnull} parentFdoExt_91 != 0;
    assume parentFdoExt_91 > 0;
    havoc vslice_dummy_var_514;
    call {:si_unique_call 1433} WPP_RECORDER_SF_(vslice_dummy_var_514, 4, 3, 37, Tmp_1325);
    call {:si_unique_call 1434} PoStartNextPowerIrp(0);
    assume {:nonnull} ioStatus_4 != 0;
    assume ioStatus_4 > 0;
    assume {:nonnull} systemSetPowerIrp != 0;
    assume systemSetPowerIrp > 0;
    call {:si_unique_call 1435} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1436} UsbcReleaseRemoveLock(parentFdoExt_91, systemSetPowerIrp);
    assume {:nonnull} parentFdoExt_91 != 0;
    assume parentFdoExt_91 > 0;
    call {:si_unique_call 1437} vslice_dummy_var_163 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_91), systemSetPowerIrp);
    return;
}



procedure {:origName "MapSystemStateToDeviceState"} MapSystemStateToDeviceState(actual_parentFdoExt_92: int, actual_systemState_1: int) returns (Tmp_1326: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MapSystemStateToDeviceState"} MapSystemStateToDeviceState(actual_parentFdoExt_92: int, actual_systemState_1: int) returns (Tmp_1326: int)
{
  var {:pointer} Tmp_1327: int;
  var {:pointer} Tmp_1328: int;
  var {:scalar} oldIrql_13: int;
  var {:scalar} Tmp_1329: int;
  var {:scalar} deviceState: int;
  var {:pointer} parentFdoExt_92: int;
  var {:scalar} systemState_1: int;

  anon0:
    parentFdoExt_92 := actual_parentFdoExt_92;
    systemState_1 := actual_systemState_1;
    call {:si_unique_call 1438} Tmp_1327 := __HAVOC_malloc(28);
    call {:si_unique_call 1439} Tmp_1328 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1328 != 0;
    assume Tmp_1328 > 0;
    Mem_T.VOID[Tmp_1328] := oldIrql_13;
    call {:si_unique_call 1440} sdv_KeAcquireSpinLock(0, Tmp_1328);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1328 != 0;
    assume Tmp_1328 > 0;
    oldIrql_13 := Mem_T.VOID[Tmp_1328];
    assume {:nonnull} parentFdoExt_92 != 0;
    assume parentFdoExt_92 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 7 > systemState_1;
    Tmp_1329 := systemState_1;
    assume {:nonnull} parentFdoExt_92 != 0;
    assume parentFdoExt_92 > 0;
    havoc Tmp_1327;
    assume {:nonnull} Tmp_1327 != 0;
    assume Tmp_1327 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 3 >= Mem_T.VOID[Tmp_1327 + Tmp_1329 * 4];
    deviceState := 3;
    goto L13;

  L13:
    call {:si_unique_call 1441} sdv_KeReleaseSpinLock(0, oldIrql_13);
    Tmp_1326 := deviceState;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} Mem_T.VOID[Tmp_1327 + Tmp_1329 * 4] > 3;
    goto L9;

  L9:
    deviceState := 4;
    goto L13;

  anon10_Then:
    assume {:partition} systemState_1 >= 7;
    goto L9;

  anon9_Then:
    goto L9;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "QuerySelectiveSuspendRegistryFlag"} QuerySelectiveSuspendRegistryFlag(actual_functionPdoExt_46: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QuerySelectiveSuspendRegistryFlag"} QuerySelectiveSuspendRegistryFlag(actual_functionPdoExt_46: int)
{
  var {:dopa} {:scalar} ssCancelBehavior: int;
  var {:pointer} Tmp_1331: int;
  var {:pointer} Tmp_1332: int;
  var {:pointer} deviceObject_2: int;
  var {:scalar} ntStatus_24: int;
  var {:pointer} Tmp_1333: int;
  var {:dopa} {:scalar} type_4: int;
  var {:pointer} Tmp_1335: int;
  var {:pointer} functionPdoExt_46: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_515: int;
  var vslice_dummy_var_516: int;

  anon0:
    call {:si_unique_call 1442} ssCancelBehavior := __HAVOC_malloc(4);
    call {:si_unique_call 1443} vslice_dummy_var_164 := __HAVOC_malloc(4);
    call {:si_unique_call 1444} type_4 := __HAVOC_malloc(4);
    functionPdoExt_46 := actual_functionPdoExt_46;
    call {:si_unique_call 1445} Tmp_1331 := __HAVOC_malloc(88);
    call {:si_unique_call 1446} Tmp_1333 := __HAVOC_malloc(100);
    assume {:nonnull} ssCancelBehavior != 0;
    assume ssCancelBehavior > 0;
    Mem_T.VOID[ssCancelBehavior] := 0;
    assume {:nonnull} functionPdoExt_46 != 0;
    assume functionPdoExt_46 > 0;
    havoc deviceObject_2;
    Tmp_1333 := strConst__li2bpl35;
    call {:si_unique_call 1447} ntStatus_24 := GetPdoRegistryParameter(deviceObject_2, Tmp_1333, 0, 0, 0, 0, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} ntStatus_24 >= 0;
    assume {:nonnull} functionPdoExt_46 != 0;
    assume functionPdoExt_46 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    havoc Tmp_1332;
    assume {:nonnull} functionPdoExt_46 != 0;
    assume functionPdoExt_46 > 0;
    havoc vslice_dummy_var_515;
    call {:si_unique_call 1448} WPP_RECORDER_SF_(vslice_dummy_var_515, 5, 1, 59, Tmp_1332);
    goto L14;

  L14:
    Tmp_1331 := strConst__li2bpl34;
    call {:si_unique_call 1449} ntStatus_24 := GetPdoRegistryParameter(deviceObject_2, Tmp_1331, ssCancelBehavior, 4, type_4, 0, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} ntStatus_24 >= 0;
    assume {:nonnull} type_4 != 0;
    assume type_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.VOID[type_4] == 4;
    assume {:nonnull} ssCancelBehavior != 0;
    assume ssCancelBehavior > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.VOID[ssCancelBehavior] != 0;
    assume {:nonnull} functionPdoExt_46 != 0;
    assume functionPdoExt_46 > 0;
    havoc Tmp_1335;
    assume {:nonnull} functionPdoExt_46 != 0;
    assume functionPdoExt_46 > 0;
    havoc vslice_dummy_var_516;
    call {:si_unique_call 1450} WPP_RECORDER_SF_(vslice_dummy_var_516, 4, 1, 60, Tmp_1335);
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} Mem_T.VOID[ssCancelBehavior] == 0;
    goto L1;

  anon14_Then:
    assume {:partition} Mem_T.VOID[type_4] != 4;
    goto L1;

  anon13_Then:
    assume {:partition} 0 > ntStatus_24;
    goto L1;

  anon12_Then:
    goto L14;

  anon11_Then:
    assume {:partition} 0 > ntStatus_24;
    goto L14;
}



procedure {:origName "CancelRemoteWakeNotificationIrp"} CancelRemoteWakeNotificationIrp(actual_functionPdoExt_47: int, actual_WaitWakeIrpToComplete: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CancelRemoteWakeNotificationIrp"} CancelRemoteWakeNotificationIrp(actual_functionPdoExt_47: int, actual_WaitWakeIrpToComplete: int)
{
  var {:pointer} Tmp_1336: int;
  var {:pointer} Tmp_1337: int;
  var {:scalar} oldIrql_14: int;
  var {:pointer} Tmp_1338: int;
  var {:pointer} suspendContext_4: int;
  var {:pointer} Tmp_1339: int;
  var {:pointer} functionPdoExt_47: int;
  var {:pointer} WaitWakeIrpToComplete: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_166: int;
  var vslice_dummy_var_167: int;
  var vslice_dummy_var_517: int;
  var vslice_dummy_var_518: int;
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;
  var vslice_dummy_var_521: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;

  anon0:
    call {:si_unique_call 1451} vslice_dummy_var_165 := __HAVOC_malloc(4);
    functionPdoExt_47 := actual_functionPdoExt_47;
    WaitWakeIrpToComplete := actual_WaitWakeIrpToComplete;
    assume {:nonnull} functionPdoExt_47 != 0;
    assume functionPdoExt_47 > 0;
    havoc suspendContext_4;
    call {:si_unique_call 1452} Tmp_1339 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1339 != 0;
    assume Tmp_1339 > 0;
    Mem_T.VOID[Tmp_1339] := oldIrql_14;
    call {:si_unique_call 1453} sdv_KeAcquireSpinLock(0, Tmp_1339);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1339 != 0;
    assume Tmp_1339 > 0;
    oldIrql_14 := Mem_T.VOID[Tmp_1339];
    assume {:nonnull} suspendContext_4 != 0;
    assume suspendContext_4 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} suspendContext_4 != 0;
    assume suspendContext_4 > 0;
    call {:si_unique_call 1454} sdv_KeReleaseSpinLock(0, oldIrql_14);
    havoc Tmp_1338;
    assume {:nonnull} functionPdoExt_47 != 0;
    assume functionPdoExt_47 > 0;
    assume {:nonnull} suspendContext_4 != 0;
    assume suspendContext_4 > 0;
    havoc vslice_dummy_var_517;
    havoc vslice_dummy_var_518;
    havoc vslice_dummy_var_519;
    call {:si_unique_call 1455} WPP_RECORDER_SF_qq(vslice_dummy_var_517, 4, 3, 73, Tmp_1338, vslice_dummy_var_518, vslice_dummy_var_519);
    call {:si_unique_call 1456} vslice_dummy_var_166 := IoCancelIrp(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    call {:si_unique_call 1457} sdv_KeReleaseSpinLock(0, oldIrql_14);
    havoc Tmp_1336;
    assume {:nonnull} WaitWakeIrpToComplete != 0;
    assume WaitWakeIrpToComplete > 0;
    assume {:nonnull} functionPdoExt_47 != 0;
    assume functionPdoExt_47 > 0;
    havoc vslice_dummy_var_520;
    havoc vslice_dummy_var_521;
    havoc vslice_dummy_var_522;
    call {:si_unique_call 1458} WPP_RECORDER_SF_qqd(vslice_dummy_var_520, 4, 3, 74, Tmp_1336, WaitWakeIrpToComplete, vslice_dummy_var_521, vslice_dummy_var_522);
    call {:si_unique_call 1459} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} functionPdoExt_47 != 0;
    assume functionPdoExt_47 > 0;
    havoc vslice_dummy_var_523;
    call {:si_unique_call 1460} UsbcReleaseRemoveLock(vslice_dummy_var_523, WaitWakeIrpToComplete);
    assume {:nonnull} functionPdoExt_47 != 0;
    assume functionPdoExt_47 > 0;
    havoc Tmp_1337;
    assume {:nonnull} Tmp_1337 != 0;
    assume Tmp_1337 > 0;
    call {:si_unique_call 1461} vslice_dummy_var_167 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(Tmp_1337), WaitWakeIrpToComplete);
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "DispatchFdoPower"} DispatchFdoPower(actual_parentFdoExt_93: int, actual_irp_56: int) returns (Tmp_1341: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchFdoPower"} DispatchFdoPower(actual_parentFdoExt_93: int, actual_irp_56: int) returns (Tmp_1341: int)
{
  var {:pointer} irpSp_25: int;
  var {:pointer} Tmp_1342: int;
  var {:scalar} Tmp_1343: int;
  var {:pointer} Tmp_1344: int;
  var {:pointer} Tmp_1346: int;
  var {:scalar} status_71: int;
  var {:pointer} parentFdoExt_93: int;
  var {:pointer} irp_56: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_524: int;
  var vslice_dummy_var_525: int;
  var vslice_dummy_var_526: int;

  anon0:
    parentFdoExt_93 := actual_parentFdoExt_93;
    irp_56 := actual_irp_56;
    status_71 := 0;
    call {:si_unique_call 1462} irpSp_25 := sdv_IoGetCurrentIrpStackLocation(irp_56);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L19;

  L19:
    assume {:nonnull} parentFdoExt_93 != 0;
    assume parentFdoExt_93 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} irpSp_25 != 0;
    assume irpSp_25 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} irpSp_25 != 0;
    assume irpSp_25 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} irpSp_25 != 0;
    assume irpSp_25 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} irpSp_25 != 0;
    assume irpSp_25 > 0;
    havoc Tmp_1343;
    havoc Tmp_1346;
    assume {:nonnull} parentFdoExt_93 != 0;
    assume parentFdoExt_93 > 0;
    havoc vslice_dummy_var_524;
    call {:si_unique_call 1463} WPP_RECORDER_SF_D(vslice_dummy_var_524, 4, 3, 12, Tmp_1346, Tmp_1343);
    call {:si_unique_call 1464} PoStartNextPowerIrp(0);
    call {:si_unique_call 1465} sdv_IoSkipCurrentIrpStackLocation(irp_56);
    call {:si_unique_call 1466} status_71 := PoCallDriver(0, irp_56);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1467} UsbcReleaseRemoveLock(parentFdoExt_93, irp_56);
    assume {:nonnull} parentFdoExt_93 != 0;
    assume parentFdoExt_93 > 0;
    call {:si_unique_call 1468} vslice_dummy_var_168 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_93), irp_56);
    goto L38;

  L38:
    Tmp_1341 := status_71;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    call {:si_unique_call 1469} status_71 := DispatchFdoQueryPower(parentFdoExt_93, irp_56);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    call {:si_unique_call 1470} status_71 := DispatchFdoSetPower(parentFdoExt_93, irp_56);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    call {:si_unique_call 1471} status_71 := DispatchFdoWaitWake(parentFdoExt_93, irp_56);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    call {:si_unique_call 1472} PoStartNextPowerIrp(0);
    call {:si_unique_call 1473} sdv_IoSkipCurrentIrpStackLocation(irp_56);
    call {:si_unique_call 1474} status_71 := PoCallDriver(0, irp_56);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1475} UsbcReleaseRemoveLock(parentFdoExt_93, irp_56);
    assume {:nonnull} parentFdoExt_93 != 0;
    assume parentFdoExt_93 > 0;
    call {:si_unique_call 1476} vslice_dummy_var_169 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_93), irp_56);
    havoc Tmp_1344;
    assume {:nonnull} parentFdoExt_93 != 0;
    assume parentFdoExt_93 > 0;
    havoc vslice_dummy_var_525;
    call {:si_unique_call 1477} WPP_RECORDER_SF_q(vslice_dummy_var_525, 4, 3, 11, Tmp_1344, irp_56);
    goto L38;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    havoc Tmp_1342;
    assume {:nonnull} parentFdoExt_93 != 0;
    assume parentFdoExt_93 > 0;
    havoc vslice_dummy_var_526;
    call {:si_unique_call 1478} WPP_RECORDER_SF_q(vslice_dummy_var_526, 5, 3, 10, Tmp_1342, irp_56);
    goto L19;
}



procedure {:origName "CompletionForSuspendControlRequest"} CompletionForSuspendControlRequest(actual_devObj_9: int, actual_irp_57: int, actual_context_10: int) returns (Tmp_1347: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1347 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionForSuspendControlRequest"} CompletionForSuspendControlRequest(actual_devObj_9: int, actual_irp_57: int, actual_context_10: int) returns (Tmp_1347: int)
{
  var {:pointer} Tmp_1348: int;
  var {:pointer} Tmp_1349: int;
  var {:pointer} Tmp_1350: int;
  var {:pointer} irpSp_26: int;
  var {:pointer} Tmp_1351: int;
  var {:pointer} Tmp_1352: int;
  var {:pointer} pendingDIrp: int;
  var {:pointer} suspendContext_5: int;
  var {:pointer} functionPdoExt_48: int;
  var {:pointer} Tmp_1353: int;
  var {:pointer} irp_57: int;
  var {:pointer} context_10: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_527: int;
  var vslice_dummy_var_528: int;
  var vslice_dummy_var_529: int;
  var vslice_dummy_var_530: int;
  var vslice_dummy_var_531: int;
  var vslice_dummy_var_532: int;
  var vslice_dummy_var_533: int;
  var vslice_dummy_var_534: int;

  anon0:
    irp_57 := actual_irp_57;
    context_10 := actual_context_10;
    functionPdoExt_48 := context_10;
    assume {:nonnull} functionPdoExt_48 != 0;
    assume functionPdoExt_48 > 0;
    havoc suspendContext_5;
    assume {:nonnull} suspendContext_5 != 0;
    assume suspendContext_5 > 0;
    assume {:nonnull} irp_57 != 0;
    assume irp_57 > 0;
    assume {:nonnull} suspendContext_5 != 0;
    assume suspendContext_5 > 0;
    havoc Tmp_1350;
    assume {:nonnull} functionPdoExt_48 != 0;
    assume functionPdoExt_48 > 0;
    assume {:nonnull} irp_57 != 0;
    assume irp_57 > 0;
    havoc vslice_dummy_var_527;
    havoc vslice_dummy_var_528;
    havoc vslice_dummy_var_529;
    call {:si_unique_call 1479} WPP_RECORDER_SF_qd(vslice_dummy_var_527, 4, 3, 83, Tmp_1350, vslice_dummy_var_528, vslice_dummy_var_529);
    assume {:nonnull} suspendContext_5 != 0;
    assume suspendContext_5 > 0;
    havoc pendingDIrp;
    assume {:nonnull} irp_57 != 0;
    assume irp_57 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L25;

  L25:
    call {:si_unique_call 1480} IoReuseIrp(irp_57, 0);
    Tmp_1349 := li2bplFunctionConstant2849;
    assume {:nonnull} functionPdoExt_48 != 0;
    assume functionPdoExt_48 > 0;
    havoc vslice_dummy_var_530;
    call {:si_unique_call 1481} UsbcReleaseRemoveLock(vslice_dummy_var_530, Tmp_1349);
    Tmp_1348 := li2bplFunctionConstant2849;
    assume {:nonnull} functionPdoExt_48 != 0;
    assume functionPdoExt_48 > 0;
    havoc Tmp_1351;
    assume {:nonnull} Tmp_1351 != 0;
    assume Tmp_1351 > 0;
    call {:si_unique_call 1482} vslice_dummy_var_171 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(Tmp_1351), Tmp_1348);
    assume {:nonnull} suspendContext_5 != 0;
    assume suspendContext_5 > 0;
    call {:si_unique_call 1483} PoStartNextPowerIrp(0);
    assume {:nonnull} pendingDIrp != 0;
    assume pendingDIrp > 0;
    call {:si_unique_call 1484} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} functionPdoExt_48 != 0;
    assume functionPdoExt_48 > 0;
    havoc vslice_dummy_var_531;
    call {:si_unique_call 1485} UsbcReleaseRemoveLock(vslice_dummy_var_531, pendingDIrp);
    assume {:nonnull} functionPdoExt_48 != 0;
    assume functionPdoExt_48 > 0;
    havoc Tmp_1353;
    assume {:nonnull} Tmp_1353 != 0;
    assume Tmp_1353 > 0;
    call {:si_unique_call 1486} vslice_dummy_var_172 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(Tmp_1353), pendingDIrp);
    Tmp_1347 := -1073741802;
    return;

  anon6_Then:
    call {:si_unique_call 1487} irpSp_26 := sdv_IoGetCurrentIrpStackLocation(pendingDIrp);
    assume {:nonnull} irpSp_26 != 0;
    assume irpSp_26 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    havoc Tmp_1352;
    assume {:nonnull} functionPdoExt_48 != 0;
    assume functionPdoExt_48 > 0;
    assume {:nonnull} suspendContext_5 != 0;
    assume suspendContext_5 > 0;
    havoc vslice_dummy_var_532;
    havoc vslice_dummy_var_533;
    havoc vslice_dummy_var_534;
    call {:si_unique_call 1488} WPP_RECORDER_SF_qq(vslice_dummy_var_532, 2, 3, 84, Tmp_1352, vslice_dummy_var_533, vslice_dummy_var_534);
    call {:si_unique_call 1489} vslice_dummy_var_170 := IoCancelIrp(0);
    goto L25;

  anon5_Then:
    goto L25;
}



procedure {:origName "DispatchPdoPower"} DispatchPdoPower(actual_functionPdoExt_49: int, actual_irp_58: int) returns (Tmp_1355: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoPower"} DispatchPdoPower(actual_functionPdoExt_49: int, actual_irp_58: int) returns (Tmp_1355: int)
{
  var {:pointer} irpSp_27: int;
  var {:scalar} Tmp_1356: int;
  var {:pointer} Tmp_1358: int;
  var {:scalar} calledPoStartNextPowerIrp: int;
  var {:pointer} parentFdoExt_94: int;
  var {:pointer} Tmp_1359: int;
  var {:scalar} status_72: int;
  var {:pointer} Tmp_1360: int;
  var {:pointer} functionPdoExt_49: int;
  var {:pointer} irp_58: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_535: int;
  var vslice_dummy_var_536: int;
  var vslice_dummy_var_537: int;
  var vslice_dummy_var_538: int;
  var vslice_dummy_var_539: int;
  var vslice_dummy_var_540: int;
  var vslice_dummy_var_541: int;

  anon0:
    functionPdoExt_49 := actual_functionPdoExt_49;
    irp_58 := actual_irp_58;
    calledPoStartNextPowerIrp := 0;
    assume {:nonnull} functionPdoExt_49 != 0;
    assume functionPdoExt_49 > 0;
    havoc parentFdoExt_94;
    call {:si_unique_call 1490} irpSp_27 := sdv_IoGetCurrentIrpStackLocation(irp_58);
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    havoc Tmp_1356;
    havoc Tmp_1359;
    assume {:nonnull} parentFdoExt_94 != 0;
    assume parentFdoExt_94 > 0;
    havoc vslice_dummy_var_535;
    call {:si_unique_call 1491} WPP_RECORDER_SF_qD(vslice_dummy_var_535, 4, 3, 40, Tmp_1359, irp_58, Tmp_1356);
    assume {:nonnull} irp_58 != 0;
    assume irp_58 > 0;
    havoc status_72;
    goto L40;

  L40:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} calledPoStartNextPowerIrp != 0;
    goto L44;

  L44:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_72 != 259;
    assume {:nonnull} irp_58 != 0;
    assume irp_58 > 0;
    call {:si_unique_call 1492} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1493} UsbcReleaseRemoveLock(parentFdoExt_94, irp_58);
    assume {:nonnull} parentFdoExt_94 != 0;
    assume parentFdoExt_94 > 0;
    call {:si_unique_call 1494} vslice_dummy_var_173 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_94), irp_58);
    goto L45;

  L45:
    Tmp_1355 := status_72;
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} status_72 == 259;
    goto L45;

  anon26_Then:
    assume {:partition} calledPoStartNextPowerIrp == 0;
    call {:si_unique_call 1495} PoStartNextPowerIrp(0);
    goto L44;

  anon29_Then:
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    havoc Tmp_1358;
    assume {:nonnull} functionPdoExt_49 != 0;
    assume functionPdoExt_49 > 0;
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    havoc vslice_dummy_var_536;
    havoc vslice_dummy_var_537;
    havoc vslice_dummy_var_538;
    call {:si_unique_call 1496} WPP_RECORDER_SF_qqL(vslice_dummy_var_536, 4, 3, 38, Tmp_1358, vslice_dummy_var_537, irp_58, vslice_dummy_var_538);
    goto L29;

  L29:
    status_72 := 0;
    goto L40;

  anon24_Then:
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    havoc Tmp_1360;
    assume {:nonnull} functionPdoExt_49 != 0;
    assume functionPdoExt_49 > 0;
    assume {:nonnull} irpSp_27 != 0;
    assume irpSp_27 > 0;
    havoc vslice_dummy_var_539;
    havoc vslice_dummy_var_540;
    havoc vslice_dummy_var_541;
    call {:si_unique_call 1497} WPP_RECORDER_SF_qqL(vslice_dummy_var_539, 4, 3, 39, Tmp_1360, vslice_dummy_var_540, irp_58, vslice_dummy_var_541);
    goto L29;

  anon25_Then:
    goto L29;

  anon30_Then:
    call {:si_unique_call 1498} status_72 := DispatchPdoSetPower(functionPdoExt_49, irp_58);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_72 == 259;
    calledPoStartNextPowerIrp := 1;
    goto L40;

  anon28_Then:
    assume {:partition} status_72 != 259;
    goto L40;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:nonnull} irp_58 != 0;
    assume irp_58 > 0;
    havoc status_72;
    goto L40;

  anon23_Then:
    call {:si_unique_call 1499} status_72 := DispatchPdoWaitWake(functionPdoExt_49, irp_58);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    calledPoStartNextPowerIrp := 1;
    goto L40;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CancelParentWaitWake"} CancelParentWaitWake(actual_parentFdoExt_95: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CancelParentWaitWake"} CancelParentWaitWake(actual_parentFdoExt_95: int)
{
  var {:pointer} Tmp_1366: int;
  var {:pointer} Tmp_1367: int;
  var {:scalar} sdv_451: int;
  var {:pointer} sdv_452: int;
  var {:pointer} Tmp_1369: int;
  var {:scalar} sdv_454: int;
  var {:pointer} parentWWirp: int;
  var {:pointer} parentFdoExt_95: int;
  var vslice_dummy_var_174: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_542: int;
  var vslice_dummy_var_543: int;

  anon0:
    call {:si_unique_call 1500} vslice_dummy_var_174 := __HAVOC_malloc(4);
    parentFdoExt_95 := actual_parentFdoExt_95;
    parentWWirp := 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_451 == 0;
    havoc Tmp_1369;
    assume {:nonnull} parentFdoExt_95 != 0;
    assume parentFdoExt_95 > 0;
    havoc vslice_dummy_var_542;
    call {:si_unique_call 1501} WPP_RECORDER_SF_(vslice_dummy_var_542, 4, 3, 32, Tmp_1369);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} sdv_451 != 0;
    assume {:nonnull} parentFdoExt_95 != 0;
    assume parentFdoExt_95 > 0;
    Tmp_1366 := parentWaitWakeIrp_PARENT_FDO_EXTENSION(parentFdoExt_95);
    call {:si_unique_call 1502} sdv_452 := _InlineInterlockedExchangePointer(Tmp_1366, 0);
    parentWWirp := sdv_452;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} parentWWirp != 0;
    havoc Tmp_1367;
    assume {:nonnull} parentFdoExt_95 != 0;
    assume parentFdoExt_95 > 0;
    havoc vslice_dummy_var_543;
    call {:si_unique_call 1503} WPP_RECORDER_SF_q(vslice_dummy_var_543, 4, 3, 31, Tmp_1367, parentWWirp);
    call {:si_unique_call 1504} vslice_dummy_var_175 := IoCancelIrp(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_454 != 0;
    call {:si_unique_call 1505} sdv_IoCompleteRequest(0, 0);
    goto L1;

  anon7_Then:
    assume {:partition} sdv_454 == 0;
    goto L1;

  anon9_Then:
    assume {:partition} parentWWirp == 0;
    goto L1;
}



procedure {:origName "WPP_RECORDER_SF_qqL"} WPP_RECORDER_SF_qqL(actual_AutoLogContext_21: int, actual_level_21: int, actual_flags_21: int, actual_id_22: int, actual_traceGuid_21: int, actual_s_p_e_c_i_a_l_53: int, actual_s_p_e_c_i_a_l_54: int, actual_s_p_e_c_i_a_l_55: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qqL"} WPP_RECORDER_SF_qqL(actual_AutoLogContext_21: int, actual_level_21: int, actual_flags_21: int, actual_id_22: int, actual_traceGuid_21: int, actual_s_p_e_c_i_a_l_53: int, actual_s_p_e_c_i_a_l_54: int, actual_s_p_e_c_i_a_l_55: int)
{
  var {:scalar} Tmp_1374: int;
  var {:scalar} Tmp_1376: int;
  var {:scalar} Tmp_1379: int;
  var {:scalar} Tmp_1381: int;
  var {:scalar} level_21: int;
  var {:scalar} flags_21: int;
  var {:pointer} traceGuid_21: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1506} vslice_dummy_var_176 := __HAVOC_malloc(4);
    level_21 := actual_level_21;
    flags_21 := actual_flags_21;
    traceGuid_21 := actual_traceGuid_21;
    call {:si_unique_call 1507} vslice_dummy_var_178 := __HAVOC_malloc(4);
    Tmp_1374 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_21 - 1);
    call {:si_unique_call 1508} Tmp_1381 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1509} Tmp_1379 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1510} Tmp_1376 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1511} vslice_dummy_var_177 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "QueryAllowIdleIrpInD3RegistryFlag"} QueryAllowIdleIrpInD3RegistryFlag(actual_functionPdoExt_51: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QueryAllowIdleIrpInD3RegistryFlag"} QueryAllowIdleIrpInD3RegistryFlag(actual_functionPdoExt_51: int)
{
  var {:pointer} deviceObject_3: int;
  var {:dopa} {:scalar} allowIdleIrpInD3: int;
  var {:pointer} Tmp_1384: int;
  var {:scalar} ntStatus_25: int;
  var {:pointer} Tmp_1385: int;
  var {:dopa} {:scalar} type_5: int;
  var {:pointer} functionPdoExt_51: int;
  var vslice_dummy_var_179: int;
  var vslice_dummy_var_544: int;

  anon0:
    call {:si_unique_call 1512} vslice_dummy_var_179 := __HAVOC_malloc(4);
    call {:si_unique_call 1513} allowIdleIrpInD3 := __HAVOC_malloc(4);
    call {:si_unique_call 1514} type_5 := __HAVOC_malloc(4);
    functionPdoExt_51 := actual_functionPdoExt_51;
    call {:si_unique_call 1515} Tmp_1385 := __HAVOC_malloc(68);
    assume {:nonnull} allowIdleIrpInD3 != 0;
    assume allowIdleIrpInD3 > 0;
    Mem_T.VOID[allowIdleIrpInD3] := 0;
    assume {:nonnull} functionPdoExt_51 != 0;
    assume functionPdoExt_51 > 0;
    havoc deviceObject_3;
    Tmp_1385 := strConst__li2bpl36;
    call {:si_unique_call 1516} ntStatus_25 := GetPdoRegistryParameter(deviceObject_3, Tmp_1385, allowIdleIrpInD3, 4, type_5, 0, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ntStatus_25 >= 0;
    assume {:nonnull} type_5 != 0;
    assume type_5 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Mem_T.VOID[type_5] == 4;
    assume {:nonnull} allowIdleIrpInD3 != 0;
    assume allowIdleIrpInD3 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.VOID[allowIdleIrpInD3] != 0;
    assume {:nonnull} functionPdoExt_51 != 0;
    assume functionPdoExt_51 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    havoc Tmp_1384;
    assume {:nonnull} functionPdoExt_51 != 0;
    assume functionPdoExt_51 > 0;
    havoc vslice_dummy_var_544;
    call {:si_unique_call 1517} WPP_RECORDER_SF_(vslice_dummy_var_544, 5, 1, 61, Tmp_1384);
    goto L1;

  L1:
    return;

  anon12_Then:
    goto L1;

  anon11_Then:
    assume {:partition} Mem_T.VOID[allowIdleIrpInD3] == 0;
    goto L1;

  anon10_Then:
    assume {:partition} Mem_T.VOID[type_5] != 4;
    goto L1;

  anon9_Then:
    assume {:partition} 0 > ntStatus_25;
    goto L1;
}



procedure {:origName "SetSelectiveSuspendRegistryFlag"} SetSelectiveSuspendRegistryFlag(actual_parentFdoExt_98: int, actual_context_12: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetSelectiveSuspendRegistryFlag"} SetSelectiveSuspendRegistryFlag(actual_parentFdoExt_98: int, actual_context_12: int)
{
  var {:pointer} deviceObject_4: int;
  var {:pointer} Tmp_1397: int;
  var {:dopa} {:scalar} didDeviceSelectiveSuspend: int;
  var {:pointer} functionPdoExt_53: int;
  var {:pointer} context_12: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1518} didDeviceSelectiveSuspend := __HAVOC_malloc(4);
    call {:si_unique_call 1519} vslice_dummy_var_180 := __HAVOC_malloc(4);
    context_12 := actual_context_12;
    call {:si_unique_call 1520} Tmp_1397 := __HAVOC_malloc(100);
    functionPdoExt_53 := context_12;
    assume {:nonnull} functionPdoExt_53 != 0;
    assume functionPdoExt_53 > 0;
    havoc deviceObject_4;
    assume {:nonnull} didDeviceSelectiveSuspend != 0;
    assume didDeviceSelectiveSuspend > 0;
    Mem_T.VOID[didDeviceSelectiveSuspend] := 1;
    Tmp_1397 := strConst__li2bpl35;
    call {:si_unique_call 1521} vslice_dummy_var_181 := SetPdoRegistryParameter(deviceObject_4, Tmp_1397, didDeviceSelectiveSuspend, 4, 4, 1);
    return;
}



procedure {:origName "GetD3ColdLastTransitionStatus"} GetD3ColdLastTransitionStatus(actual_parentFdoExt_104: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetD3ColdLastTransitionStatus"} GetD3ColdLastTransitionStatus(actual_parentFdoExt_104: int)
{
  var {:scalar} i_22: int;
  var {:scalar} Tmp_1419: int;
  var {:scalar} d3ColdStatus: int;
  var {:pointer} Tmp_1420: int;
  var {:pointer} Tmp_1421: int;
  var {:pointer} thisFuncPdoExt_2: int;
  var {:pointer} devExt_14: int;
  var {:pointer} Tmp_1423: int;
  var {:pointer} devObj_13: int;
  var {:pointer} parentFdoExt_104: int;
  var vslice_dummy_var_182: int;

  anon0:
    call {:si_unique_call 1522} vslice_dummy_var_182 := __HAVOC_malloc(4);
    parentFdoExt_104 := actual_parentFdoExt_104;
    call {:si_unique_call 1523} Tmp_1423 := __HAVOC_malloc(4);
    assume {:nonnull} parentFdoExt_104 != 0;
    assume parentFdoExt_104 > 0;
    i_22 := 0;
    goto L9;

  L9:
    call {:si_unique_call 1524} i_22, Tmp_1419, Tmp_1420, Tmp_1421, thisFuncPdoExt_2, devExt_14, Tmp_1423, devObj_13 := GetD3ColdLastTransitionStatus_loop_L9(i_22, Tmp_1419, d3ColdStatus, Tmp_1420, Tmp_1421, thisFuncPdoExt_2, devExt_14, Tmp_1423, devObj_13, parentFdoExt_104);
    goto L9_last;

  L9_last:
    assume {:nonnull} parentFdoExt_104 != 0;
    assume parentFdoExt_104 > 0;
    havoc Tmp_1421;
    assume {:nonnull} Tmp_1421 != 0;
    assume Tmp_1421 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1419 := i_22;
    assume {:nonnull} parentFdoExt_104 != 0;
    assume parentFdoExt_104 > 0;
    havoc Tmp_1420;
    assume {:nonnull} Tmp_1420 != 0;
    assume Tmp_1420 > 0;
    havoc Tmp_1423;
    assume {:nonnull} Tmp_1423 != 0;
    assume Tmp_1423 > 0;
    havoc devObj_13;
    assume {:nonnull} devObj_13 != 0;
    assume devObj_13 > 0;
    havoc devExt_14;
    assume {:nonnull} devExt_14 != 0;
    assume devExt_14 > 0;
    thisFuncPdoExt_2 := functionPdoExt_DEVICE_EXTENSION(devExt_14);
    assume {:nonnull} thisFuncPdoExt_2 != 0;
    assume thisFuncPdoExt_2 > 0;
    i_22 := i_22 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    return;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var {:scalar} Tmp_1426: int;
  var vslice_dummy_var_183: int;
  var vslice_dummy_var_545: int;

  anon0:
    call {:si_unique_call 1525} Tmp_1426 := __HAVOC_malloc(4);
    call {:si_unique_call 1526} vslice_dummy_var_183 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_1426 != 0;
    assume Tmp_1426 > 0;
    havoc vslice_dummy_var_545;
    Mem_T.VOID[Tmp_1426] := vslice_dummy_var_545;
    Mem_T.VOID[gSetD0Tag] := -750505900;
    return;
}



procedure {:origName "DispatchFdoQueryPower"} DispatchFdoQueryPower(actual_parentFdoExt_107: int, actual_irp_62: int) returns (Tmp_1442: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchFdoQueryPower"} DispatchFdoQueryPower(actual_parentFdoExt_107: int, actual_irp_62: int) returns (Tmp_1442: int)
{
  var {:pointer} Tmp_1443: int;
  var {:pointer} irpSp_30: int;
  var {:scalar} disableTimer: int;
  var {:pointer} Tmp_1444: int;
  var {:pointer} Tmp_1445: int;
  var {:scalar} oldIrql_16: int;
  var {:scalar} status_80: int;
  var {:pointer} Tmp_1446: int;
  var {:pointer} parentFdoExt_107: int;
  var {:pointer} irp_62: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_546: int;
  var vslice_dummy_var_547: int;
  var vslice_dummy_var_548: int;
  var vslice_dummy_var_549: int;
  var vslice_dummy_var_550: int;
  var vslice_dummy_var_551: int;
  var vslice_dummy_var_552: int;
  var vslice_dummy_var_553: int;
  var vslice_dummy_var_554: int;

  anon0:
    parentFdoExt_107 := actual_parentFdoExt_107;
    irp_62 := actual_irp_62;
    status_80 := 0;
    call {:si_unique_call 1527} irpSp_30 := sdv_IoGetCurrentIrpStackLocation(irp_62);
    assume {:nonnull} irpSp_30 != 0;
    assume irpSp_30 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} irpSp_30 != 0;
    assume irpSp_30 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    havoc Tmp_1446;
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    havoc vslice_dummy_var_546;
    call {:si_unique_call 1528} WPP_RECORDER_SF_(vslice_dummy_var_546, 2, 8, 47, Tmp_1446);
    call {:si_unique_call 1529} PoStartNextPowerIrp(0);
    call {:si_unique_call 1530} sdv_IoSkipCurrentIrpStackLocation(irp_62);
    call {:si_unique_call 1531} status_80 := PoCallDriver(0, irp_62);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1532} UsbcReleaseRemoveLock(parentFdoExt_107, irp_62);
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    call {:si_unique_call 1533} vslice_dummy_var_186 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_107), irp_62);
    goto L45;

  L45:
    Tmp_1442 := status_80;
    goto LM2;

  LM2:
    return;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    havoc Tmp_1445;
    assume {:nonnull} irpSp_30 != 0;
    assume irpSp_30 > 0;
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    havoc vslice_dummy_var_547;
    havoc vslice_dummy_var_548;
    havoc vslice_dummy_var_549;
    call {:si_unique_call 1534} WPP_RECORDER_SF_qqL(vslice_dummy_var_547, 4, 3, 46, Tmp_1445, vslice_dummy_var_548, irp_62, vslice_dummy_var_549);
    call {:si_unique_call 1535} PoStartNextPowerIrp(0);
    call {:si_unique_call 1536} sdv_IoSkipCurrentIrpStackLocation(irp_62);
    call {:si_unique_call 1537} status_80 := PoCallDriver(0, irp_62);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1538} UsbcReleaseRemoveLock(parentFdoExt_107, irp_62);
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    call {:si_unique_call 1539} vslice_dummy_var_184 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_107), irp_62);
    goto L45;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    havoc Tmp_1444;
    assume {:nonnull} irpSp_30 != 0;
    assume irpSp_30 > 0;
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    havoc vslice_dummy_var_550;
    havoc vslice_dummy_var_551;
    havoc vslice_dummy_var_552;
    call {:si_unique_call 1540} WPP_RECORDER_SF_qqL(vslice_dummy_var_550, 4, 3, 45, Tmp_1444, vslice_dummy_var_551, irp_62, vslice_dummy_var_552);
    assume {:nonnull} irpSp_30 != 0;
    assume irpSp_30 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1541} Tmp_1443 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1443 != 0;
    assume Tmp_1443 > 0;
    Mem_T.VOID[Tmp_1443] := oldIrql_16;
    call {:si_unique_call 1542} sdv_KeAcquireSpinLock(0, Tmp_1443);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1443 != 0;
    assume Tmp_1443 > 0;
    oldIrql_16 := Mem_T.VOID[Tmp_1443];
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    goto L60;

  L60:
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    disableTimer := 0;
    goto L65;

  L65:
    call {:si_unique_call 1543} sdv_KeReleaseSpinLock(0, oldIrql_16);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} disableTimer != 0;
    call {:si_unique_call 1544} DisableIdleTimer(parentFdoExt_107, 1, -799977388);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L69;

  L69:
    call {:si_unique_call 1545} CancelFdoIdleIrp(parentFdoExt_107, 1);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L53;

  L53:
    call {:si_unique_call 1546} sdv_IoCopyCurrentIrpStackLocationToNext(irp_62);
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    havoc vslice_dummy_var_553;
    havoc vslice_dummy_var_554;
    call {:si_unique_call 1547} SetCompletionRoutine(vslice_dummy_var_553, vslice_dummy_var_554, irp_62, li2bplFunctionConstant2833, parentFdoExt_107, 1, 1, 1);
    call {:si_unique_call 1548} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1549} vslice_dummy_var_185 := PoCallDriver(0, irp_62);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    status_80 := 259;
    goto L45;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} disableTimer == 0;
    goto L69;

  anon28_Then:
    assume {:nonnull} parentFdoExt_107 != 0;
    assume parentFdoExt_107 > 0;
    disableTimer := 1;
    goto L65;

  anon27_Then:
    goto L60;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    goto L53;
}



procedure {:origName "DispatchFdoSetPower"} DispatchFdoSetPower(actual_parentFdoExt_108: int, actual_irp_63: int) returns (Tmp_1447: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchFdoSetPower"} DispatchFdoSetPower(actual_parentFdoExt_108: int, actual_irp_63: int) returns (Tmp_1447: int)
{
  var {:pointer} SD4_1: int;
  var {:pointer} SD3_1: int;
  var {:pointer} SD2: int;
  var {:pointer} irpSp_31: int;
  var {:scalar} disableTimer_1: int;
  var {:scalar} sdv_4: int;
  var {:scalar} oldIrql_17: int;
  var {:pointer} Tmp_1448: int;
  var {:pointer} Tmp_1449: int;
  var {:scalar} sdv_3: int;
  var {:scalar} sdv_2: int;
  var {:pointer} Tmp_1450: int;
  var {:scalar} status_81: int;
  var {:pointer} Tmp_1451: int;
  var {:pointer} Tmp_1452: int;
  var {:pointer} Tmp_1453: int;
  var {:pointer} Tmp_1454: int;
  var {:pointer} parentFdoExt_108: int;
  var {:pointer} irp_63: int;
  var vslice_dummy_var_555: int;
  var vslice_dummy_var_556: int;
  var vslice_dummy_var_557: int;
  var vslice_dummy_var_558: int;
  var vslice_dummy_var_559: int;
  var vslice_dummy_var_560: int;
  var vslice_dummy_var_561: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;
  var vslice_dummy_var_564: int;
  var vslice_dummy_var_565: int;
  var vslice_dummy_var_566: int;
  var vslice_dummy_var_567: int;
  var vslice_dummy_var_568: int;
  var vslice_dummy_var_569: int;
  var vslice_dummy_var_570: int;
  var vslice_dummy_var_571: int;
  var vslice_dummy_var_572: int;
  var vslice_dummy_var_573: int;
  var vslice_dummy_var_574: int;
  var vslice_dummy_var_575: int;
  var vslice_dummy_var_576: int;
  var vslice_dummy_var_577: int;

  anon0:
    call {:si_unique_call 1550} sdv_4 := __HAVOC_malloc(8);
    call {:si_unique_call 1551} sdv_3 := __HAVOC_malloc(8);
    call {:si_unique_call 1552} sdv_2 := __HAVOC_malloc(8);
    parentFdoExt_108 := actual_parentFdoExt_108;
    irp_63 := actual_irp_63;
    status_81 := 0;
    call {:si_unique_call 1553} irpSp_31 := sdv_IoGetCurrentIrpStackLocation(irp_63);
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    havoc Tmp_1448;
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_555;
    havoc vslice_dummy_var_556;
    havoc vslice_dummy_var_557;
    call {:si_unique_call 1554} WPP_RECORDER_SF_qqL(vslice_dummy_var_555, 4, 3, 53, Tmp_1448, vslice_dummy_var_556, irp_63, vslice_dummy_var_557);
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto L44;

  L44:
    call {:si_unique_call 1555} sdv_IoCopyCurrentIrpStackLocationToNext(irp_63);
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_558;
    havoc vslice_dummy_var_559;
    call {:si_unique_call 1556} SetCompletionRoutine(vslice_dummy_var_558, vslice_dummy_var_559, irp_63, li2bplFunctionConstant2816, parentFdoExt_108, 1, 1, 1);
    call {:si_unique_call 1557} status_81 := PoCallDriver(0, irp_63);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L13;

  L13:
    Tmp_1447 := status_81;
    goto LM2;

  LM2:
    return;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    havoc Tmp_1449;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_560;
    havoc vslice_dummy_var_561;
    call {:si_unique_call 1558} WPP_RECORDER_SF_qq(vslice_dummy_var_560, 4, 3, 52, Tmp_1449, vslice_dummy_var_561, irp_63);
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    havoc vslice_dummy_var_562;
    havoc vslice_dummy_var_563;
    call {:si_unique_call 1559} SD4_1 := PoSetPowerState(0, vslice_dummy_var_562, vslice_dummy_var_563);
    assume {:nonnull} SD4_1 != 0;
    assume SD4_1 > 0;
    assume {:nonnull} sdv_4 != 0;
    assume sdv_4 > 0;
    assume {:nonnull} SD4_1 != 0;
    assume SD4_1 > 0;
    assume {:nonnull} sdv_4 != 0;
    assume sdv_4 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto L44;

  anon42_Then:
    havoc Tmp_1453;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_564;
    havoc vslice_dummy_var_565;
    call {:si_unique_call 1560} WPP_RECORDER_SF_qq(vslice_dummy_var_564, 4, 3, 51, Tmp_1453, vslice_dummy_var_565, irp_63);
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    havoc vslice_dummy_var_566;
    havoc vslice_dummy_var_567;
    call {:si_unique_call 1561} SD3_1 := PoSetPowerState(0, vslice_dummy_var_566, vslice_dummy_var_567);
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto L44;

  anon43_Then:
    havoc Tmp_1454;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_568;
    havoc vslice_dummy_var_569;
    call {:si_unique_call 1562} WPP_RECORDER_SF_qq(vslice_dummy_var_568, 4, 3, 50, Tmp_1454, vslice_dummy_var_569, irp_63);
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    havoc vslice_dummy_var_570;
    havoc vslice_dummy_var_571;
    call {:si_unique_call 1563} SD2 := PoSetPowerState(0, vslice_dummy_var_570, vslice_dummy_var_571);
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto L44;

  anon34_Then:
    havoc Tmp_1451;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_572;
    call {:si_unique_call 1564} WPP_RECORDER_SF_qq(vslice_dummy_var_572, 4, 3, 49, Tmp_1451, parentFdoExt_108, irp_63);
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    call {:si_unique_call 1565} GetD3ColdLastTransitionStatus(parentFdoExt_108);
    goto L44;

  anon35_Then:
    goto L44;

  anon40_Then:
    goto L13;

  anon33_Then:
    havoc Tmp_1452;
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_573;
    havoc vslice_dummy_var_574;
    havoc vslice_dummy_var_575;
    call {:si_unique_call 1566} WPP_RECORDER_SF_qqL(vslice_dummy_var_573, 4, 3, 48, Tmp_1452, vslice_dummy_var_574, irp_63, vslice_dummy_var_575);
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 1567} Tmp_1450 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1450 != 0;
    assume Tmp_1450 > 0;
    Mem_T.VOID[Tmp_1450] := oldIrql_17;
    call {:si_unique_call 1568} sdv_KeAcquireSpinLock(0, Tmp_1450);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1450 != 0;
    assume Tmp_1450 > 0;
    oldIrql_17 := Mem_T.VOID[Tmp_1450];
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto L108;

  L108:
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    disableTimer_1 := 0;
    goto L113;

  L113:
    call {:si_unique_call 1569} sdv_KeReleaseSpinLock(0, oldIrql_17);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} disableTimer_1 != 0;
    call {:si_unique_call 1570} DisableIdleTimer(parentFdoExt_108, 1, -799846316);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L117;

  L117:
    call {:si_unique_call 1571} CancelFdoIdleIrp(parentFdoExt_108, 1);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    goto L103;

  L103:
    assume {:nonnull} irpSp_31 != 0;
    assume irpSp_31 > 0;
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    call {:si_unique_call 1572} sdv_IoCopyCurrentIrpStackLocationToNext(irp_63);
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    havoc vslice_dummy_var_576;
    havoc vslice_dummy_var_577;
    call {:si_unique_call 1573} SetCompletionRoutine(vslice_dummy_var_576, vslice_dummy_var_577, irp_63, li2bplFunctionConstant2817, parentFdoExt_108, 1, 1, 1);
    call {:si_unique_call 1574} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1575} status_81 := PoCallDriver(0, irp_63);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    status_81 := 259;
    goto L13;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} disableTimer_1 == 0;
    goto L117;

  anon38_Then:
    assume {:nonnull} parentFdoExt_108 != 0;
    assume parentFdoExt_108 > 0;
    disableTimer_1 := 1;
    goto L113;

  anon37_Then:
    goto L108;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    goto L103;
}



procedure {:origName "WPP_RECORDER_SF_Ld"} WPP_RECORDER_SF_Ld(actual_AutoLogContext_22: int, actual_level_22: int, actual_flags_22: int, actual_id_23: int, actual_traceGuid_22: int, actual_s_p_e_c_i_a_l_56: int, actual_s_p_e_c_i_a_l_57: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_Ld"} WPP_RECORDER_SF_Ld(actual_AutoLogContext_22: int, actual_level_22: int, actual_flags_22: int, actual_id_23: int, actual_traceGuid_22: int, actual_s_p_e_c_i_a_l_56: int, actual_s_p_e_c_i_a_l_57: int)
{
  var {:scalar} Tmp_1464: int;
  var {:scalar} Tmp_1467: int;
  var {:scalar} Tmp_1468: int;
  var {:scalar} Tmp_1469: int;
  var {:scalar} level_22: int;
  var {:scalar} flags_22: int;
  var {:pointer} traceGuid_22: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;

  anon0:
    call {:si_unique_call 1576} vslice_dummy_var_187 := __HAVOC_malloc(4);
    level_22 := actual_level_22;
    flags_22 := actual_flags_22;
    traceGuid_22 := actual_traceGuid_22;
    call {:si_unique_call 1577} vslice_dummy_var_189 := __HAVOC_malloc(4);
    Tmp_1464 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_22 - 1);
    call {:si_unique_call 1578} Tmp_1468 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1579} Tmp_1469 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1580} Tmp_1467 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1581} vslice_dummy_var_188 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "CompletionFdoWaitWake"} CompletionFdoWaitWake(actual_devObj_15: int, actual_irp_64: int, actual_context_18: int) returns (Tmp_1470: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionFdoWaitWake"} CompletionFdoWaitWake(actual_devObj_15: int, actual_irp_64: int, actual_context_18: int) returns (Tmp_1470: int)
{
  var {:pointer} Tmp_1471: int;
  var {:pointer} Tmp_1472: int;
  var {:pointer} Tmp_1473: int;
  var {:pointer} sdv_491: int;
  var {:pointer} parentFdoExt_110: int;
  var {:scalar} oldIrql_19: int;
  var {:scalar} sdv_492: int;
  var {:scalar} status_83: int;
  var {:pointer} irp_64: int;
  var {:pointer} context_18: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_578: int;
  var vslice_dummy_var_579: int;

  anon0:
    irp_64 := actual_irp_64;
    context_18 := actual_context_18;
    parentFdoExt_110 := context_18;
    status_83 := 0;
    havoc Tmp_1471;
    assume {:nonnull} irp_64 != 0;
    assume irp_64 > 0;
    assume {:nonnull} parentFdoExt_110 != 0;
    assume parentFdoExt_110 > 0;
    havoc vslice_dummy_var_578;
    havoc vslice_dummy_var_579;
    call {:si_unique_call 1582} WPP_RECORDER_SF_qd(vslice_dummy_var_578, 4, 3, 35, Tmp_1471, irp_64, vslice_dummy_var_579);
    call {:si_unique_call 1583} vslice_dummy_var_190 := sdv_IoGetCurrentIrpStackLocation(irp_64);
    assume {:nonnull} parentFdoExt_110 != 0;
    assume parentFdoExt_110 > 0;
    Tmp_1473 := parentWaitWakeIrp_PARENT_FDO_EXTENSION(parentFdoExt_110);
    call {:si_unique_call 1584} sdv_491 := _InlineInterlockedExchangePointer(Tmp_1473, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_491 == 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_492 == 0;
    status_83 := -1073741802;
    goto L30;

  L30:
    assume {:nonnull} irp_64 != 0;
    assume irp_64 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 1585} sdv_IoMarkIrpPending(0);
    goto L31;

  L31:
    assume {:nonnull} parentFdoExt_110 != 0;
    assume parentFdoExt_110 > 0;
    call {:si_unique_call 1586} Tmp_1472 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1472 != 0;
    assume Tmp_1472 > 0;
    Mem_T.VOID[Tmp_1472] := oldIrql_19;
    call {:si_unique_call 1587} sdv_KeAcquireSpinLock(0, Tmp_1472);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1472 != 0;
    assume Tmp_1472 > 0;
    oldIrql_19 := Mem_T.VOID[Tmp_1472];
    assume {:nonnull} parentFdoExt_110 != 0;
    assume parentFdoExt_110 > 0;
    call {:si_unique_call 1588} vslice_dummy_var_191 := KeResetEvent(waitWakeEvent_PARENT_FDO_EXTENSION(parentFdoExt_110));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1589} sdv_KeReleaseSpinLock(0, oldIrql_19);
    Tmp_1470 := status_83;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    goto L31;

  anon13_Then:
    assume {:partition} sdv_492 != 0;
    goto L30;

  anon11_Then:
    assume {:partition} sdv_491 != 0;
    goto L30;
}



procedure {:origName "IdleTimerEnableWorker"} IdleTimerEnableWorker(actual_parentFdoExt_112: int, actual_context_19: int);
  modifies alloc, Mem_T.VOID, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IdleTimerEnableWorker"} IdleTimerEnableWorker(actual_parentFdoExt_112: int, actual_context_19: int)
{
  var {:pointer} parentFdoExt_112: int;
  var vslice_dummy_var_192: int;

  anon0:
    call {:si_unique_call 1590} vslice_dummy_var_192 := __HAVOC_malloc(4);
    parentFdoExt_112 := actual_parentFdoExt_112;
    call {:si_unique_call 1591} EnableIdleTimer(parentFdoExt_112, 1, -682667445);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WPP_RECORDER_SF_LL"} WPP_RECORDER_SF_LL(actual_AutoLogContext_23: int, actual_level_23: int, actual_flags_23: int, actual_id_24: int, actual_traceGuid_23: int, actual_s_p_e_c_i_a_l_58: int, actual_s_p_e_c_i_a_l_59: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_LL"} WPP_RECORDER_SF_LL(actual_AutoLogContext_23: int, actual_level_23: int, actual_flags_23: int, actual_id_24: int, actual_traceGuid_23: int, actual_s_p_e_c_i_a_l_58: int, actual_s_p_e_c_i_a_l_59: int)
{
  var {:scalar} Tmp_1486: int;
  var {:scalar} Tmp_1489: int;
  var {:scalar} Tmp_1491: int;
  var {:scalar} Tmp_1493: int;
  var {:scalar} level_23: int;
  var {:scalar} flags_23: int;
  var {:pointer} traceGuid_23: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 1592} vslice_dummy_var_193 := __HAVOC_malloc(4);
    level_23 := actual_level_23;
    flags_23 := actual_flags_23;
    traceGuid_23 := actual_traceGuid_23;
    call {:si_unique_call 1593} vslice_dummy_var_195 := __HAVOC_malloc(4);
    Tmp_1486 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_23 - 1);
    call {:si_unique_call 1594} Tmp_1493 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1595} Tmp_1489 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1596} Tmp_1491 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1597} vslice_dummy_var_194 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "DispatchPdoWaitWake"} DispatchPdoWaitWake(actual_functionPdoExt_57: int, actual_irp_65: int) returns (Tmp_1495: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoWaitWake"} DispatchPdoWaitWake(actual_functionPdoExt_57: int, actual_irp_65: int) returns (Tmp_1495: int)
{
  var {:scalar} sdv_501: int;
  var {:pointer} Tmp_1496: int;
  var {:pointer} Tmp_1497: int;
  var {:pointer} parentFdoExt_114: int;
  var {:scalar} oldIrql_21: int;
  var {:pointer} Tmp_1498: int;
  var {:pointer} Tmp_1499: int;
  var {:scalar} status_85: int;
  var {:pointer} Tmp_1500: int;
  var {:pointer} Tmp_1501: int;
  var {:pointer} Tmp_1502: int;
  var {:pointer} functionPdoExt_57: int;
  var {:pointer} irp_65: int;
  var vslice_dummy_var_580: int;
  var vslice_dummy_var_581: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_584: int;
  var vslice_dummy_var_585: int;
  var vslice_dummy_var_586: int;
  var vslice_dummy_var_587: int;
  var vslice_dummy_var_588: int;

  anon0:
    functionPdoExt_57 := actual_functionPdoExt_57;
    irp_65 := actual_irp_65;
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    havoc parentFdoExt_114;
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    status_85 := -1073741436;
    havoc Tmp_1497;
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    havoc vslice_dummy_var_580;
    havoc vslice_dummy_var_581;
    call {:si_unique_call 1598} WPP_RECORDER_SF_qqd(vslice_dummy_var_580, 2, 8, 54, Tmp_1497, vslice_dummy_var_581, irp_65, status_85);
    goto L20;

  L20:
    Tmp_1495 := status_85;
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L38;

  L38:
    havoc Tmp_1496;
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    havoc vslice_dummy_var_582;
    havoc vslice_dummy_var_583;
    call {:si_unique_call 1599} WPP_RECORDER_SF_qq(vslice_dummy_var_582, 4, 3, 56, Tmp_1496, vslice_dummy_var_583, irp_65);
    call {:si_unique_call 1600} Tmp_1500 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1500 != 0;
    assume Tmp_1500 > 0;
    Mem_T.VOID[Tmp_1500] := oldIrql_21;
    call {:si_unique_call 1601} sdv_KeAcquireSpinLock(0, Tmp_1500);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1500 != 0;
    assume Tmp_1500 > 0;
    oldIrql_21 := Mem_T.VOID[Tmp_1500];
    call {:si_unique_call 1602} sdv_501 := sdv_IsListEmpty(0);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_501 != 0;
    call {:si_unique_call 1603} sdv_KeReleaseSpinLock(0, oldIrql_21);
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L65;

  L65:
    havoc Tmp_1498;
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    havoc vslice_dummy_var_584;
    call {:si_unique_call 1604} WPP_RECORDER_SF_(vslice_dummy_var_584, 4, 3, 57, Tmp_1498);
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    call {:si_unique_call 1605} sdv_IoCsqInsertIrp#1(waitWakeQueue_FUNCTION_PDO_EXTENSION(functionPdoExt_57), irp_65, 0);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    call {:si_unique_call 1606} SendRemoteWakeNotificationIrp#1(parentFdoExt_114, functionPdoExt_57);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L73;

  L73:
    call {:si_unique_call 1607} CheckParentWaitWake#1(parentFdoExt_114);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    status_85 := 259;
    goto L20;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    goto L73;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    call {:si_unique_call 1608} status_85 := PrepareRemoteWakeNotificationIrp(parentFdoExt_114, functionPdoExt_57);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_85 >= 0;
    goto L65;

  anon28_Then:
    assume {:partition} 0 > status_85;
    goto L20;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} sdv_501 == 0;
    status_85 := 17;
    havoc Tmp_1502;
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    havoc vslice_dummy_var_585;
    havoc vslice_dummy_var_586;
    call {:si_unique_call 1609} WPP_RECORDER_SF_qqd(vslice_dummy_var_585, 2, 3, 58, Tmp_1502, vslice_dummy_var_586, irp_65, status_85);
    call {:si_unique_call 1610} sdv_KeReleaseSpinLock(0, oldIrql_21);
    goto L20;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    havoc Tmp_1501;
    assume {:nonnull} Tmp_1501 != 0;
    assume Tmp_1501 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto L38;

  anon31_Then:
    status_85 := -1073741436;
    havoc Tmp_1499;
    assume {:nonnull} functionPdoExt_57 != 0;
    assume functionPdoExt_57 > 0;
    assume {:nonnull} parentFdoExt_114 != 0;
    assume parentFdoExt_114 > 0;
    havoc vslice_dummy_var_587;
    havoc vslice_dummy_var_588;
    call {:si_unique_call 1611} WPP_RECORDER_SF_qqd(vslice_dummy_var_587, 2, 8, 55, Tmp_1499, vslice_dummy_var_588, irp_65, status_85);
    goto L20;
}



procedure {:origName "CallbackFdoDeviceQueryPower"} CallbackFdoDeviceQueryPower(actual_devObj_16: int, actual_minorFunction_6: int, actual_SD1: int, actual_context_20: int, actual_ioStatus_7: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallbackFdoDeviceQueryPower"} CallbackFdoDeviceQueryPower(actual_devObj_16: int, actual_minorFunction_6: int, actual_SD1: int, actual_context_20: int, actual_ioStatus_7: int)
{
  var {:scalar} powerState_1: int;
  var {:pointer} devExt_15: int;
  var {:pointer} parentFdoExt_115: int;
  var {:pointer} queryPowerIrp: int;
  var {:pointer} devObj_16: int;
  var {:pointer} SD1: int;
  var {:pointer} context_20: int;
  var {:pointer} ioStatus_7: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;

  anon0:
    call {:si_unique_call 1612} powerState_1 := __HAVOC_malloc(8);
    call {:si_unique_call 1613} vslice_dummy_var_196 := __HAVOC_malloc(4);
    devObj_16 := actual_devObj_16;
    SD1 := actual_SD1;
    context_20 := actual_context_20;
    ioStatus_7 := actual_ioStatus_7;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    queryPowerIrp := context_20;
    assume {:nonnull} devObj_16 != 0;
    assume devObj_16 > 0;
    havoc devExt_15;
    assume {:nonnull} devExt_15 != 0;
    assume devExt_15 > 0;
    parentFdoExt_115 := parentFdoExt_DEVICE_EXTENSION(devExt_15);
    call {:si_unique_call 1614} PoStartNextPowerIrp(0);
    assume {:nonnull} ioStatus_7 != 0;
    assume ioStatus_7 > 0;
    assume {:nonnull} queryPowerIrp != 0;
    assume queryPowerIrp > 0;
    call {:si_unique_call 1615} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1616} UsbcReleaseRemoveLock(parentFdoExt_115, queryPowerIrp);
    assume {:nonnull} parentFdoExt_115 != 0;
    assume parentFdoExt_115 > 0;
    call {:si_unique_call 1617} vslice_dummy_var_197 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_115), queryPowerIrp);
    return;
}



procedure {:origName "ProcessCallbackData"} ProcessCallbackData(actual_parentFdoExt_117: int, actual_parentFunctionAssoc: int, actual_functionsReturned: int, actual_callbackBuffer: int, actual_callbackBufferLength: int) returns (Tmp_1508: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} Tmp_1508 == -1073741670 || Tmp_1508 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ProcessCallbackData"} ProcessCallbackData(actual_parentFdoExt_117: int, actual_parentFunctionAssoc: int, actual_functionsReturned: int, actual_callbackBuffer: int, actual_callbackBufferLength: int) returns (Tmp_1508: int)
{
  var {:scalar} i_23: int;
  var {:pointer} Tmp_1510: int;
  var {:scalar} Tmp_1511: int;
  var {:scalar} Tmp_1512: int;
  var {:scalar} Tmp_1513: int;
  var {:scalar} Tmp_1514: int;
  var {:scalar} size_3: int;
  var {:scalar} Tmp_1515: int;
  var {:scalar} Tmp_1516: int;
  var {:scalar} Tmp_1517: int;
  var {:scalar} Tmp_1518: int;
  var {:scalar} Tmp_1519: int;
  var {:scalar} Tmp_1520: int;
  var {:pointer} Tmp_1521: int;
  var {:pointer} sdv_504: int;
  var {:pointer} interfaceListIndex: int;
  var {:pointer} Tmp_1522: int;
  var {:scalar} j_2: int;
  var {:scalar} Tmp_1523: int;
  var {:scalar} Tmp_1524: int;
  var {:scalar} Tmp_1526: int;
  var {:scalar} numFunctions_5: int;
  var {:pointer} internalFunctionAssoc_1: int;
  var {:scalar} Tmp_1527: int;
  var {:scalar} Tmp_1528: int;
  var {:scalar} Tmp_1529: int;
  var {:scalar} Tmp_1530: int;
  var {:scalar} Tmp_1531: int;
  var {:scalar} Tmp_1532: int;
  var {:pointer} sdv_505: int;
  var {:scalar} Tmp_1533: int;
  var {:scalar} ntStatus_26: int;
  var {:scalar} Tmp_1534: int;
  var {:scalar} Tmp_1535: int;
  var {:scalar} Tmp_1536: int;
  var {:scalar} Tmp_1537: int;
  var {:pointer} Tmp_1538: int;
  var {:scalar} Tmp_1540: int;
  var {:pointer} functionDesc_1: int;
  var {:scalar} Tmp_1541: int;
  var {:pointer} Tmp_1542: int;
  var {:scalar} Tmp_1543: int;
  var {:scalar} Tmp_1544: int;
  var {:scalar} Tmp_1545: int;
  var {:scalar} Tmp_1547: int;
  var {:scalar} Tmp_1548: int;
  var {:pointer} Tmp_1549: int;
  var {:pointer} parentFdoExt_117: int;
  var {:pointer} parentFunctionAssoc: int;
  var {:pointer} functionsReturned: int;
  var {:pointer} callbackBuffer: int;
  var {:scalar} callbackBufferLength: int;

  anon0:
    parentFdoExt_117 := actual_parentFdoExt_117;
    parentFunctionAssoc := actual_parentFunctionAssoc;
    functionsReturned := actual_functionsReturned;
    callbackBuffer := actual_callbackBuffer;
    callbackBufferLength := actual_callbackBufferLength;
    ntStatus_26 := 0;
    interfaceListIndex := 0;
    internalFunctionAssoc_1 := 0;
    functionDesc_1 := 0;
    numFunctions_5 := 0;
    i_23 := 0;
    size_3 := 0;
    j_2 := 0;
    call {:si_unique_call 1618} sdv_do_paged_code_check();
    functionDesc_1 := callbackBuffer;
    numFunctions_5 := INTDIV(callbackBufferLength, 40);
    Tmp_1527 := 48 * numFunctions_5;
    call {:si_unique_call 1619} sdv_504 := ExAllocatePoolWithTag(512, Tmp_1527, -1016958123);
    internalFunctionAssoc_1 := sdv_504;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} internalFunctionAssoc_1 != 0;
    Tmp_1511 := 48 * numFunctions_5;
    call {:si_unique_call 1620} sdv_RtlZeroMemory(0, Tmp_1511);
    goto L30;

  L30:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} internalFunctionAssoc_1 != 0;
    i_23 := 0;
    goto L37;

  L37:
    call {:si_unique_call 1621} i_23, Tmp_1510, Tmp_1512, Tmp_1513, Tmp_1514, size_3, Tmp_1515, Tmp_1516, Tmp_1517, Tmp_1518, Tmp_1519, Tmp_1520, Tmp_1521, interfaceListIndex, Tmp_1522, j_2, Tmp_1523, Tmp_1524, Tmp_1526, Tmp_1528, Tmp_1529, Tmp_1530, Tmp_1531, Tmp_1532, sdv_505, Tmp_1533, Tmp_1534, Tmp_1535, Tmp_1536, Tmp_1537, Tmp_1538, Tmp_1540, Tmp_1541, Tmp_1542, Tmp_1543, Tmp_1544, Tmp_1545, Tmp_1547, Tmp_1548, Tmp_1549 := ProcessCallbackData_loop_L37(i_23, Tmp_1510, Tmp_1512, Tmp_1513, Tmp_1514, size_3, Tmp_1515, Tmp_1516, Tmp_1517, Tmp_1518, Tmp_1519, Tmp_1520, Tmp_1521, interfaceListIndex, Tmp_1522, j_2, Tmp_1523, Tmp_1524, Tmp_1526, numFunctions_5, internalFunctionAssoc_1, Tmp_1528, Tmp_1529, Tmp_1530, Tmp_1531, Tmp_1532, sdv_505, Tmp_1533, Tmp_1534, Tmp_1535, Tmp_1536, Tmp_1537, Tmp_1538, Tmp_1540, functionDesc_1, Tmp_1541, Tmp_1542, Tmp_1543, Tmp_1544, Tmp_1545, Tmp_1547, Tmp_1548, Tmp_1549, parentFdoExt_117);
    goto L37_last;

  L37_last:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} numFunctions_5 > i_23;
    Tmp_1512 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    havoc size_3;
    call {:si_unique_call 1622} sdv_505 := ExAllocatePoolWithTag(512, size_3, -1016958123);
    Tmp_1517 := i_23;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Tmp_1526 := i_23;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    call {:si_unique_call 1623} sdv_RtlZeroMemory(0, size_3);
    goto L45;

  L45:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    Tmp_1536 := i_23;
    Tmp_1532 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    Tmp_1548 := i_23;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    Tmp_1530 := i_23;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    Tmp_1537 := i_23;
    Tmp_1543 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    havoc Tmp_1521;
    assume {:nonnull} Tmp_1521 != 0;
    assume Tmp_1521 > 0;
    havoc Tmp_1522;
    assume {:nonnull} Tmp_1522 != 0;
    assume Tmp_1522 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    Tmp_1533 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    Tmp_1518 := i_23;
    Tmp_1545 := i_23;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    goto L56;

  L56:
    j_2 := 0;
    goto L58;

  L58:
    call {:si_unique_call 1624} Tmp_1510, Tmp_1513, Tmp_1515, Tmp_1520, interfaceListIndex, j_2, Tmp_1524, Tmp_1534, Tmp_1538, Tmp_1542, Tmp_1549 := ProcessCallbackData_loop_L58(i_23, Tmp_1510, Tmp_1513, Tmp_1515, Tmp_1520, interfaceListIndex, j_2, Tmp_1524, internalFunctionAssoc_1, Tmp_1534, Tmp_1538, functionDesc_1, Tmp_1542, Tmp_1549, parentFdoExt_117);
    goto L58_last;

  L58_last:
    Tmp_1524 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} parentFdoExt_117 != 0;
    assume parentFdoExt_117 > 0;
    havoc interfaceListIndex;
    goto L61;

  L61:
    call {:si_unique_call 1625} Tmp_1510, Tmp_1520, Tmp_1534, Tmp_1538, Tmp_1549 := ProcessCallbackData_loop_L61(i_23, Tmp_1510, Tmp_1520, interfaceListIndex, j_2, Tmp_1534, Tmp_1538, functionDesc_1, Tmp_1549);
    goto L61_last;

  L61_last:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} interfaceListIndex != 0;
    assume interfaceListIndex > 0;
    havoc Tmp_1549;
    Tmp_1520 := j_2;
    Tmp_1534 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    havoc Tmp_1510;
    assume {:nonnull} Tmp_1510 != 0;
    assume Tmp_1510 > 0;
    havoc Tmp_1538;
    assume {:nonnull} Tmp_1538 != 0;
    assume Tmp_1538 > 0;
    assume {:nonnull} Tmp_1549 != 0;
    assume Tmp_1549 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_1549)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_1538)];
    Tmp_1513 := j_2;
    Tmp_1515 := i_23;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    havoc Tmp_1542;
    assume {:nonnull} Tmp_1542 != 0;
    assume Tmp_1542 > 0;
    goto L62;

  L62:
    j_2 := j_2 + 1;
    goto L62_dummy;

  L62_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_1549)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(Tmp_1538)];
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    assume false;
    return;

  anon34_Then:
    goto L62;

  anon39_Then:
    Tmp_1544 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    Tmp_1528 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    call {:si_unique_call 1626} sdv_ExFreePool(0);
    Tmp_1529 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    goto L67;

  L67:
    Tmp_1523 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    Tmp_1531 := i_23;
    Tmp_1516 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    goto L73;

  L73:
    Tmp_1541 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    Tmp_1547 := i_23;
    Tmp_1540 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    goto L75;

  L75:
    Tmp_1514 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    Tmp_1535 := i_23;
    Tmp_1519 := i_23;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    assume {:nonnull} functionDesc_1 != 0;
    assume functionDesc_1 > 0;
    assume {:nonnull} internalFunctionAssoc_1 != 0;
    assume internalFunctionAssoc_1 > 0;
    goto L77;

  L77:
    i_23 := i_23 + 1;
    goto L77_dummy;

  L77_dummy:
    assume false;
    return;

  anon44_Then:
    goto L77;

  anon43_Then:
    goto L75;

  anon42_Then:
    goto L73;

  anon41_Then:
    goto L67;

  anon38_Then:
    goto L56;

  anon37_Then:
    ntStatus_26 := -1073741670;
    goto L38;

  L38:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} ntStatus_26 >= 0;
    assume {:nonnull} parentFunctionAssoc != 0;
    assume parentFunctionAssoc > 0;
    assume {:nonnull} functionsReturned != 0;
    assume functionsReturned > 0;
    Mem_T.VOID[functionsReturned] := numFunctions_5;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} callbackBuffer != 0;
    call {:si_unique_call 1627} sdv_ExFreePool(0);
    goto L86;

  L86:
    Tmp_1508 := ntStatus_26;
    goto L1;

  L1:
    return;

  anon45_Then:
    assume {:partition} callbackBuffer == 0;
    goto L86;

  anon33_Then:
    assume {:partition} 0 > ntStatus_26;
    call {:si_unique_call 1628} CleanFunctionList(internalFunctionAssoc_1, numFunctions_5);
    assume {:nonnull} parentFunctionAssoc != 0;
    assume parentFunctionAssoc > 0;
    assume {:nonnull} functionsReturned != 0;
    assume functionsReturned > 0;
    Mem_T.VOID[functionsReturned] := 0;
    goto L86;

  anon36_Then:
    goto L45;

  anon32_Then:
    assume {:partition} i_23 >= numFunctions_5;
    goto L38;

  anon31_Then:
    assume {:partition} internalFunctionAssoc_1 == 0;
    Tmp_1508 := -1073741670;
    goto L1;

  anon35_Then:
    assume {:partition} internalFunctionAssoc_1 == 0;
    goto L30;
}



procedure {:origName "ValidateCallbackData"} ValidateCallbackData(actual_interfaceList_3: int, actual_configDesc_4: int, actual_functionDesc_2: int, actual_bufferLength_5: int) returns (Tmp_1551: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1551 == -1073741811 || Tmp_1551 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ValidateCallbackData"} ValidateCallbackData(actual_interfaceList_3: int, actual_configDesc_4: int, actual_functionDesc_2: int, actual_bufferLength_5: int) returns (Tmp_1551: int)
{
  var {:scalar} i_24: int;
  var {:scalar} strLength: int;
  var {:scalar} Tmp_1552: int;
  var {:pointer} bufferEnd: int;
  var {:pointer} bufferIndex: int;
  var {:pointer} interfaceDesc_3: int;
  var {:scalar} found_1: int;
  var {:scalar} length_4: int;
  var {:pointer} interfaceListIndex_1: int;
  var {:scalar} interfacesPresent: int;
  var {:scalar} Tmp_1554: int;
  var {:scalar} ntStatus_27: int;
  var {:pointer} functionDescIndex: int;
  var {:pointer} Tmp_1555: int;
  var {:scalar} maximumLength: int;
  var {:pointer} Tmp_1556: int;
  var {:pointer} interfaceList_3: int;
  var {:pointer} configDesc_4: int;
  var {:pointer} functionDesc_2: int;
  var {:scalar} bufferLength_5: int;

  anon0:
    interfaceList_3 := actual_interfaceList_3;
    configDesc_4 := actual_configDesc_4;
    functionDesc_2 := actual_functionDesc_2;
    bufferLength_5 := actual_bufferLength_5;
    ntStatus_27 := 0;
    functionDescIndex := 0;
    interfaceListIndex_1 := 0;
    bufferEnd := 0;
    bufferIndex := 0;
    interfacesPresent := 0;
    i_24 := 0;
    found_1 := 0;
    call {:si_unique_call 1629} sdv_do_paged_code_check();
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} functionDesc_2 != 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} configDesc_4 != 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} bufferLength_5 != 0;
    bufferIndex := functionDesc_2;
    bufferEnd := functionDesc_2;
    goto L29;

  L29:
    call {:si_unique_call 1630} i_24, strLength, Tmp_1552, interfaceDesc_3, found_1, length_4, interfaceListIndex_1, interfacesPresent, Tmp_1554, ntStatus_27, functionDescIndex, Tmp_1555, maximumLength, Tmp_1556 := ValidateCallbackData_loop_L29(i_24, strLength, Tmp_1552, bufferEnd, bufferIndex, interfaceDesc_3, found_1, length_4, interfaceListIndex_1, interfacesPresent, Tmp_1554, ntStatus_27, functionDescIndex, Tmp_1555, maximumLength, Tmp_1556, interfaceList_3, configDesc_4);
    goto L29_last;

  L29_last:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} bufferEnd > bufferIndex;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} bufferIndex > bufferEnd;
    Tmp_1551 := -1073741811;
    goto L1;

  L1:
    return;

  anon50_Then:
    assume {:partition} bufferEnd >= bufferIndex;
    functionDescIndex := bufferIndex;
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    havoc interfacesPresent;
    assume {:nonnull} configDesc_4 != 0;
    assume configDesc_4 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    Tmp_1551 := -1073741811;
    goto L1;

  anon64_Then:
    i_24 := 0;
    goto L40;

  L40:
    call {:si_unique_call 1631} i_24, Tmp_1552, interfaceDesc_3, found_1, interfaceListIndex_1, Tmp_1556 := ValidateCallbackData_loop_L40(i_24, Tmp_1552, interfaceDesc_3, found_1, interfaceListIndex_1, functionDescIndex, Tmp_1556, interfaceList_3);
    goto L40_last;

  L40_last:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    Tmp_1552 := i_24;
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    havoc Tmp_1556;
    assume {:nonnull} Tmp_1556 != 0;
    assume Tmp_1556 > 0;
    havoc interfaceDesc_3;
    interfaceListIndex_1 := interfaceList_3;
    found_1 := 0;
    goto L46;

  L46:
    call {:si_unique_call 1632} ValidateCallbackData_loop_L46(interfaceDesc_3, interfaceListIndex_1);
    goto L46_last;

  L46_last:
    assume {:nonnull} interfaceListIndex_1 != 0;
    assume interfaceListIndex_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} interfaceListIndex_1 != 0;
    assume interfaceListIndex_1 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    found_1 := 1;
    goto L47;

  L47:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} found_1 != 0;
    i_24 := i_24 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} found_1 == 0;
    Tmp_1551 := -1073741811;
    goto L1;

  anon55_Then:
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    assume false;
    return;

  anon53_Then:
    goto L47;

  anon51_Then:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    call {:si_unique_call 1633} ntStatus_27 := ValidateUnicodeMultiString(HardwareId__USBC_FUNCTION_DESCRIPTOR(functionDescIndex));
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} ntStatus_27 < 0;
    Tmp_1551 := ntStatus_27;
    goto L1;

  anon57_Then:
    assume {:partition} 0 <= ntStatus_27;
    goto L54;

  L54:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    call {:si_unique_call 1634} ntStatus_27 := ValidateUnicodeMultiString(CompatibleId__USBC_FUNCTION_DESCRIPTOR(functionDescIndex));
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} ntStatus_27 < 0;
    Tmp_1551 := ntStatus_27;
    goto L1;

  anon59_Then:
    assume {:partition} 0 <= ntStatus_27;
    goto L61;

  L61:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    havoc maximumLength;
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    havoc length_4;
    strLength := INTDIV(length_4, 2);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} INTMOD(maximumLength, 2) != 0;
    goto L77;

  L77:
    Tmp_1551 := -1073741811;
    goto L1;

  anon65_Then:
    assume {:partition} INTMOD(maximumLength, 2) == 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} INTMOD(length_4, 2) == 0;
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} length_4 + 2 <= maximumLength;
    Tmp_1554 := strLength;
    assume {:nonnull} functionDescIndex != 0;
    assume functionDescIndex > 0;
    havoc Tmp_1555;
    assume {:nonnull} Tmp_1555 != 0;
    assume Tmp_1555 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Mem_T.VOID[Tmp_1555 + Tmp_1554 * 4] != 0;
    Tmp_1551 := -1073741811;
    goto L1;

  anon66_Then:
    assume {:partition} Mem_T.VOID[Tmp_1555 + Tmp_1554 * 4] == 0;
    goto L68;

  L68:
    goto L68_dummy;

  L68_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} maximumLength < length_4 + 2;
    goto L79;

  L79:
    Tmp_1551 := -1073741811;
    goto L1;

  anon61_Then:
    goto L79;

  anon60_Then:
    assume {:partition} INTMOD(length_4, 2) != 0;
    goto L77;

  anon58_Then:
    goto L68;

  anon56_Then:
    goto L61;

  anon52_Then:
    goto L54;

  anon63_Then:
    Tmp_1551 := -1073741811;
    goto L1;

  anon49_Then:
    assume {:partition} bufferIndex >= bufferEnd;
    Tmp_1551 := ntStatus_27;
    goto L1;

  anon48_Then:
    assume {:partition} bufferLength_5 == 0;
    goto L23;

  L23:
    Tmp_1551 := -1073741811;
    goto L1;

  anon47_Then:
    goto L23;

  anon46_Then:
    assume {:partition} configDesc_4 == 0;
    goto L23;

  anon45_Then:
    assume {:partition} functionDesc_2 == 0;
    goto L23;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var {:scalar} Tmp_1557: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_589: int;

  anon0:
    call {:si_unique_call 1635} Tmp_1557 := __HAVOC_malloc(4);
    call {:si_unique_call 1636} vslice_dummy_var_198 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_1557 != 0;
    assume Tmp_1557 > 0;
    havoc vslice_dummy_var_589;
    Mem_T.VOID[Tmp_1557] := vslice_dummy_var_589;
    return;
}



procedure {:origName "InvokeDeviceClassCallback"} InvokeDeviceClassCallback(actual_parentFdoExt_118: int, actual_functionAssoc_9: int, actual_numFunctions_6: int) returns (Tmp_1560: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_1560 == 0 || Tmp_1560 == -1073741811 || Tmp_1560 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InvokeDeviceClassCallback"} InvokeDeviceClassCallback(actual_parentFdoExt_118: int, actual_functionAssoc_9: int, actual_numFunctions_6: int) returns (Tmp_1560: int)
{
  var {:scalar} i_25: int;
  var {:scalar} Tmp_1561: int;
  var {:scalar} Tmp_1562: int;
  var {:scalar} Tmp_1563: int;
  var {:scalar} Tmp_1564: int;
  var {:pointer} Tmp_1565: int;
  var {:scalar} Tmp_1566: int;
  var {:scalar} registryData: int;
  var {:dopa} {:scalar} registryDataLength: int;
  var {:scalar} internalStatus: int;
  var {:pointer} Tmp_1567: int;
  var {:scalar} enumeratorRegKeyPresent: int;
  var {:pointer} deviceDesc: int;
  var {:scalar} descProtocol: int;
  var {:scalar} callbackFunction: int;
  var {:scalar} deviceSubClass: int;
  var {:scalar} ntStatus_28: int;
  var {:scalar} Tmp_1569: int;
  var {:pointer} Tmp_1570: int;
  var {:pointer} Tmp_1571: int;
  var {:scalar} descClass: int;
  var {:scalar} foundCallback: int;
  var {:scalar} callbackBufferLength_1: int;
  var {:scalar} deviceClass: int;
  var {:pointer} Tmp_1572: int;
  var {:scalar} deviceProtocol: int;
  var {:pointer} callbackBuffer_1: int;
  var {:pointer} Tmp_1573: int;
  var {:scalar} descSubClass: int;
  var {:dopa} {:scalar} registryType: int;
  var {:pointer} parentFdoExt_118: int;
  var {:pointer} functionAssoc_9: int;
  var {:pointer} numFunctions_6: int;
  var vslice_dummy_var_590: int;
  var vslice_dummy_var_591: int;
  var vslice_dummy_var_592: int;
  var vslice_dummy_var_593: int;
  var vslice_dummy_var_594: int;
  var vslice_dummy_var_595: int;
  var vslice_dummy_var_596: int;
  var vslice_dummy_var_597: int;

  anon0:
    call {:si_unique_call 1637} registryData := __HAVOC_malloc(20);
    call {:si_unique_call 1638} registryDataLength := __HAVOC_malloc(4);
    call {:si_unique_call 1639} registryType := __HAVOC_malloc(4);
    parentFdoExt_118 := actual_parentFdoExt_118;
    functionAssoc_9 := actual_functionAssoc_9;
    numFunctions_6 := actual_numFunctions_6;
    call {:si_unique_call 1640} Tmp_1573 := __HAVOC_malloc(64);
    ntStatus_28 := 0;
    internalStatus := 0;
    callbackBuffer_1 := 0;
    deviceDesc := 0;
    callbackBufferLength_1 := 0;
    i_25 := 0;
    assume {:nonnull} registryDataLength != 0;
    assume registryDataLength > 0;
    Mem_T.VOID[registryDataLength] := 0;
    foundCallback := 0;
    enumeratorRegKeyPresent := 0;
    callbackFunction := 0;
    call {:si_unique_call 1641} sdv_do_paged_code_check();
    assume {:nonnull} functionAssoc_9 != 0;
    assume functionAssoc_9 > 0;
    assume {:nonnull} numFunctions_6 != 0;
    assume numFunctions_6 > 0;
    Mem_T.VOID[numFunctions_6] := 0;
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    deviceDesc := deviceDesc_PARENT_FDO_EXTENSION(parentFdoExt_118);
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc callbackFunction;
    goto L38;

  L38:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} callbackFunction != 0;
    goto L42;

  L42:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} callbackFunction != 0;
    havoc Tmp_1565;
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc vslice_dummy_var_590;
    havoc vslice_dummy_var_591;
    call {:si_unique_call 1642} WPP_RECORDER_SF_q(vslice_dummy_var_590, 4, 1, 12, Tmp_1565, vslice_dummy_var_591);
    assume callbackFunction == 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} ntStatus_28 < 0;
    havoc Tmp_1571;
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc vslice_dummy_var_592;
    call {:si_unique_call 1643} WPP_RECORDER_SF_d(vslice_dummy_var_592, 4, 1, 13, Tmp_1571, ntStatus_28);
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc Tmp_1572;
    assume {:nonnull} Tmp_1572 != 0;
    assume Tmp_1572 > 0;
    Tmp_1566 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_1572)];
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc vslice_dummy_var_593;
    havoc vslice_dummy_var_594;
    call {:si_unique_call 1644} RecordFailure(parentFdoExt_118, vslice_dummy_var_593, ntStatus_28, 0, 536870922, -968080574, vslice_dummy_var_594, Tmp_1566);
    Tmp_1560 := ntStatus_28;
    goto L1;

  L1:
    return;

  anon39_Then:
    assume {:partition} 0 <= ntStatus_28;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} callbackBuffer_1 == 0;
    goto L73;

  L73:
    havoc Tmp_1570;
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc vslice_dummy_var_595;
    call {:si_unique_call 1645} WPP_RECORDER_SF_(vslice_dummy_var_595, 2, 8, 14, Tmp_1570);
    Tmp_1560 := 0;
    goto L1;

  anon40_Then:
    assume {:partition} callbackBuffer_1 != 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} callbackBufferLength_1 == 0;
    goto L73;

  anon41_Then:
    assume {:partition} callbackBufferLength_1 != 0;
    call {:si_unique_call 1646} ntStatus_28 := ProcessFunctionDescriptors(parentFdoExt_118, callbackBuffer_1, callbackBufferLength_1, functionAssoc_9, numFunctions_6);
    foundCallback := 1;
    goto L43;

  L43:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} foundCallback == 0;
    havoc Tmp_1567;
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc vslice_dummy_var_596;
    call {:si_unique_call 1647} WPP_RECORDER_SF_(vslice_dummy_var_596, 4, 1, 15, Tmp_1567);
    Tmp_1560 := 0;
    goto L1;

  anon38_Then:
    assume {:partition} foundCallback != 0;
    Tmp_1560 := ntStatus_28;
    goto L1;

  anon37_Then:
    assume {:partition} callbackFunction == 0;
    goto L43;

  anon35_Then:
    assume {:partition} callbackFunction == 0;
    assume {:nonnull} deviceDesc != 0;
    assume deviceDesc > 0;
    havoc descClass;
    assume {:nonnull} deviceDesc != 0;
    assume deviceDesc > 0;
    havoc descSubClass;
    assume {:nonnull} deviceDesc != 0;
    assume deviceDesc > 0;
    havoc descProtocol;
    Tmp_1573 := strConst__li2bpl37;
    assume {:nonnull} parentFdoExt_118 != 0;
    assume parentFdoExt_118 > 0;
    havoc vslice_dummy_var_597;
    call {:si_unique_call 1648} internalStatus := GetPdoRegistryParameter(vslice_dummy_var_597, Tmp_1573, registryData, 4, registryType, registryDataLength, 1);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} internalStatus >= 0;
    assume {:nonnull} registryDataLength != 0;
    assume registryDataLength > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Mem_T.VOID[registryDataLength] >= 3;
    assume {:nonnull} registryType != 0;
    assume registryType > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Mem_T.VOID[registryType] == 3;
    assume {:nonnull} registryData != 0;
    assume registryData > 0;
    havoc descClass;
    assume {:nonnull} registryData != 0;
    assume registryData > 0;
    havoc descSubClass;
    assume {:nonnull} registryData != 0;
    assume registryData > 0;
    havoc descProtocol;
    enumeratorRegKeyPresent := 1;
    goto L107;

  L107:
    i_25 := 0;
    goto L114;

  L114:
    call {:si_unique_call 1649} i_25, Tmp_1561, Tmp_1562, Tmp_1563, deviceSubClass, Tmp_1569, deviceClass, deviceProtocol := InvokeDeviceClassCallback_loop_L114(i_25, Tmp_1561, Tmp_1562, Tmp_1563, enumeratorRegKeyPresent, descProtocol, deviceSubClass, Tmp_1569, descClass, deviceClass, deviceProtocol, descSubClass);
    goto L114_last;

  L114_last:
    assume {:CounterLoop 1} {:Counter "i_25"} true;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 1 > i_25;
    Tmp_1562 := i_25;
    havoc deviceClass;
    Tmp_1569 := i_25;
    havoc deviceSubClass;
    Tmp_1561 := i_25;
    havoc deviceProtocol;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} enumeratorRegKeyPresent != 0;
    goto L120;

  L120:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} descClass == deviceClass;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} descSubClass == deviceSubClass;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} descProtocol == deviceProtocol;
    Tmp_1564 := i_25;
    havoc callbackFunction;
    goto L42;

  anon48_Then:
    assume {:partition} descProtocol != deviceProtocol;
    goto L121;

  L121:
    i_25 := i_25 + 1;
    goto L121_dummy;

  L121_dummy:
    assume false;
    return;

  anon47_Then:
    assume {:partition} descSubClass != deviceSubClass;
    goto L121;

  anon46_Then:
    assume {:partition} descClass != deviceClass;
    goto L121;

  anon50_Then:
    assume {:partition} enumeratorRegKeyPresent == 0;
    Tmp_1563 := i_25;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L121;

  anon51_Then:
    goto L120;

  anon45_Then:
    assume {:partition} i_25 >= 1;
    goto L42;

  anon44_Then:
    assume {:partition} Mem_T.VOID[registryType] != 3;
    goto L107;

  anon43_Then:
    assume {:partition} 3 > Mem_T.VOID[registryDataLength];
    goto L107;

  anon42_Then:
    assume {:partition} 0 > internalStatus;
    goto L107;

  anon36_Then:
    goto L38;

  anon49_Then:
    goto L38;
}



procedure {:origName "ValidateUnicodeMultiString"} ValidateUnicodeMultiString(actual_unicodeString_1: int) returns (Tmp_1574: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1574 == -1073741811 || Tmp_1574 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ValidateUnicodeMultiString"} ValidateUnicodeMultiString(actual_unicodeString_1: int) returns (Tmp_1574: int)
{
  var {:scalar} Tmp_1575: int;
  var {:pointer} Tmp_1576: int;
  var {:scalar} lengthInChars: int;
  var {:scalar} Tmp_1578: int;
  var {:scalar} ntStatus_29: int;
  var {:pointer} Tmp_1579: int;
  var {:pointer} unicodeString_1: int;

  anon0:
    unicodeString_1 := actual_unicodeString_1;
    ntStatus_29 := 0;
    lengthInChars := 0;
    call {:si_unique_call 1650} sdv_do_paged_code_check();
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L12;

  L12:
    Tmp_1574 := -1073741811;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_1574 := -1073741811;
    goto L1;

  anon19_Then:
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    havoc lengthInChars;
    Tmp_1575 := lengthInChars;
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    havoc Tmp_1576;
    assume {:nonnull} Tmp_1576 != 0;
    assume Tmp_1576 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.VOID[Tmp_1576 + Tmp_1575 * 4] != 0;
    goto L21;

  L21:
    Tmp_1574 := -1073741811;
    goto L1;

  anon20_Then:
    assume {:partition} Mem_T.VOID[Tmp_1576 + Tmp_1575 * 4] == 0;
    Tmp_1578 := lengthInChars - 1;
    assume {:nonnull} unicodeString_1 != 0;
    assume unicodeString_1 > 0;
    havoc Tmp_1579;
    assume {:nonnull} Tmp_1579 != 0;
    assume Tmp_1579 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.VOID[Tmp_1579 + Tmp_1578 * 4] == 0;
    Tmp_1574 := ntStatus_29;
    goto L1;

  anon21_Then:
    assume {:partition} Mem_T.VOID[Tmp_1579 + Tmp_1578 * 4] != 0;
    goto L21;

  anon18_Then:
    goto L14;

  L14:
    Tmp_1574 := -1073741811;
    goto L1;

  anon17_Then:
    goto L14;

  anon16_Then:
    goto L12;
}



procedure {:origName "InvokePdoEnableCallbacks"} InvokePdoEnableCallbacks(actual_parentFdoExt_119: int) returns (Tmp_1580: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InvokePdoEnableCallbacks"} InvokePdoEnableCallbacks(actual_parentFdoExt_119: int) returns (Tmp_1580: int)
{
  var {:scalar} numPdos: int;
  var {:scalar} i_26: int;
  var {:pointer} interfaceDescriptor_2: int;
  var {:pointer} functionAssoc_10: int;
  var {:scalar} sdv_511: int;
  var {:pointer} Tmp_1581: int;
  var {:scalar} callbackFunction_1: int;
  var {:pointer} Tmp_1584: int;
  var {:scalar} Tmp_1585: int;
  var {:pointer} Tmp_1586: int;
  var {:pointer} Tmp_1588: int;
  var {:pointer} Tmp_1589: int;
  var {:pointer} Tmp_1590: int;
  var {:pointer} parentFdoExt_119: int;

  anon0:
    parentFdoExt_119 := actual_parentFdoExt_119;
    callbackFunction_1 := 0;
    numPdos := 0;
    i_26 := 0;
    call {:si_unique_call 1651} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_119 != 0;
    assume parentFdoExt_119 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} parentFdoExt_119 != 0;
    assume parentFdoExt_119 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} parentFdoExt_119 != 0;
    assume parentFdoExt_119 > 0;
    havoc callbackFunction_1;
    goto L16;

  L16:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} callbackFunction_1 != 0;
    i_26 := 0;
    goto L21;

  L21:
    call {:si_unique_call 1652} numPdos, i_26, interfaceDescriptor_2, functionAssoc_10, Tmp_1581, Tmp_1584, Tmp_1585, Tmp_1586, Tmp_1588, Tmp_1589, Tmp_1590 := InvokePdoEnableCallbacks_loop_L21(numPdos, i_26, interfaceDescriptor_2, functionAssoc_10, sdv_511, Tmp_1581, callbackFunction_1, Tmp_1584, Tmp_1585, Tmp_1586, Tmp_1588, Tmp_1589, Tmp_1590, parentFdoExt_119);
    goto L21_last;

  L21_last:
    assume {:nonnull} parentFdoExt_119 != 0;
    assume parentFdoExt_119 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    Tmp_1585 := i_26;
    assume {:nonnull} parentFdoExt_119 != 0;
    assume parentFdoExt_119 > 0;
    havoc Tmp_1584;
    functionAssoc_10 := Tmp_1584 + Tmp_1585 * 68;
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    havoc Tmp_1588;
    assume {:nonnull} Tmp_1588 != 0;
    assume Tmp_1588 > 0;
    havoc Tmp_1586;
    assume {:nonnull} Tmp_1586 != 0;
    assume Tmp_1586 > 0;
    havoc interfaceDescriptor_2;
    assume {:nonnull} interfaceDescriptor_2 != 0;
    assume interfaceDescriptor_2 > 0;
    assume {:nonnull} interfaceDescriptor_2 != 0;
    assume interfaceDescriptor_2 > 0;
    assume {:nonnull} interfaceDescriptor_2 != 0;
    assume interfaceDescriptor_2 > 0;
    goto L30;

  L30:
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    assume callbackFunction_1 == 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_511 != 0;
    numPdos := numPdos + 1;
    goto L38;

  L38:
    i_26 := i_26 + 1;
    goto L38_dummy;

  L38_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} sdv_511 == 0;
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    goto L38;

  anon18_Then:
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    havoc Tmp_1590;
    assume {:nonnull} Tmp_1590 != 0;
    assume Tmp_1590 > 0;
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    havoc Tmp_1581;
    assume {:nonnull} Tmp_1581 != 0;
    assume Tmp_1581 > 0;
    assume {:nonnull} functionAssoc_10 != 0;
    assume functionAssoc_10 > 0;
    havoc Tmp_1589;
    assume {:nonnull} Tmp_1589 != 0;
    assume Tmp_1589 > 0;
    goto L30;

  anon16_Then:
    Tmp_1580 := numPdos;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} callbackFunction_1 == 0;
    assume {:nonnull} parentFdoExt_119 != 0;
    assume parentFdoExt_119 > 0;
    havoc Tmp_1580;
    goto L1;

  anon15_Then:
    goto L16;

  anon13_Then:
    goto L16;
}



procedure {:origName "ProcessFunctionDescriptors"} ProcessFunctionDescriptors(actual_parentFdoExt_120: int, actual_functionDescriptorArray_1: int, actual_bufferLength_6: int, actual_functionAssoc_11: int, actual_numFunctions_7: int) returns (Tmp_1591: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} Tmp_1591 == -1073741811 || Tmp_1591 == 0 || Tmp_1591 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ProcessFunctionDescriptors"} ProcessFunctionDescriptors(actual_parentFdoExt_120: int, actual_functionDescriptorArray_1: int, actual_bufferLength_6: int, actual_functionAssoc_11: int, actual_numFunctions_7: int) returns (Tmp_1591: int)
{
  var {:pointer} Tmp_1592: int;
  var {:pointer} Tmp_1594: int;
  var {:scalar} ntStatus_30: int;
  var {:pointer} Tmp_1595: int;
  var {:scalar} Tmp_1596: int;
  var {:pointer} parentFdoExt_120: int;
  var {:pointer} functionDescriptorArray_1: int;
  var {:scalar} bufferLength_6: int;
  var {:pointer} functionAssoc_11: int;
  var {:pointer} numFunctions_7: int;
  var vslice_dummy_var_598: int;
  var vslice_dummy_var_599: int;
  var vslice_dummy_var_600: int;
  var vslice_dummy_var_601: int;
  var vslice_dummy_var_602: int;
  var vslice_dummy_var_603: int;

  anon0:
    parentFdoExt_120 := actual_parentFdoExt_120;
    functionDescriptorArray_1 := actual_functionDescriptorArray_1;
    bufferLength_6 := actual_bufferLength_6;
    functionAssoc_11 := actual_functionAssoc_11;
    numFunctions_7 := actual_numFunctions_7;
    ntStatus_30 := 0;
    call {:si_unique_call 1653} sdv_do_paged_code_check();
    assume {:nonnull} functionAssoc_11 != 0;
    assume functionAssoc_11 > 0;
    assume {:nonnull} numFunctions_7 != 0;
    assume numFunctions_7 > 0;
    Mem_T.VOID[numFunctions_7] := 0;
    assume {:nonnull} parentFdoExt_120 != 0;
    assume parentFdoExt_120 > 0;
    havoc vslice_dummy_var_598;
    havoc vslice_dummy_var_599;
    call {:si_unique_call 1654} ntStatus_30 := ValidateCallbackData(vslice_dummy_var_598, vslice_dummy_var_599, functionDescriptorArray_1, bufferLength_6);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ntStatus_30 < 0;
    havoc Tmp_1595;
    assume {:nonnull} parentFdoExt_120 != 0;
    assume parentFdoExt_120 > 0;
    havoc vslice_dummy_var_600;
    call {:si_unique_call 1655} WPP_RECORDER_SF_d(vslice_dummy_var_600, 2, 8, 10, Tmp_1595, ntStatus_30);
    assume {:nonnull} parentFdoExt_120 != 0;
    assume parentFdoExt_120 > 0;
    havoc Tmp_1594;
    assume {:nonnull} Tmp_1594 != 0;
    assume Tmp_1594 > 0;
    Tmp_1596 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(Tmp_1594)];
    assume {:nonnull} parentFdoExt_120 != 0;
    assume parentFdoExt_120 > 0;
    havoc vslice_dummy_var_601;
    havoc vslice_dummy_var_602;
    call {:si_unique_call 1656} RecordFailure(parentFdoExt_120, vslice_dummy_var_601, ntStatus_30, 0, 536870921, -968080574, vslice_dummy_var_602, Tmp_1596);
    call {:si_unique_call 1657} CleanFunctionDescriptorArray(functionDescriptorArray_1, bufferLength_6);
    Tmp_1591 := ntStatus_30;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} 0 <= ntStatus_30;
    call {:si_unique_call 1658} ntStatus_30 := ProcessCallbackData(parentFdoExt_120, functionAssoc_11, numFunctions_7, functionDescriptorArray_1, bufferLength_6);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} ntStatus_30 < 0;
    havoc Tmp_1592;
    assume {:nonnull} parentFdoExt_120 != 0;
    assume parentFdoExt_120 > 0;
    havoc vslice_dummy_var_603;
    call {:si_unique_call 1659} WPP_RECORDER_SF_d(vslice_dummy_var_603, 2, 8, 11, Tmp_1592, ntStatus_30);
    call {:si_unique_call 1660} CleanFunctionDescriptorArray(functionDescriptorArray_1, bufferLength_6);
    goto L26;

  L26:
    Tmp_1591 := ntStatus_30;
    goto L1;

  anon6_Then:
    assume {:partition} 0 <= ntStatus_30;
    goto L26;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_199: int;

  anon0:
    call {:si_unique_call 1661} vslice_dummy_var_199 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    return;
}



procedure {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int)
{
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 1662} vslice_dummy_var_200 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_201: int;

  anon0:
    call {:si_unique_call 1663} vslice_dummy_var_201 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_1603: int);
  free ensures {:va_keep} Tmp_1603 == actual_Address;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_1603: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    record := Address;
    Tmp_1603 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p_1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p_1: int)
{
  var {:pointer} p_1: int;
  var vslice_dummy_var_202: int;

  anon0:
    call {:si_unique_call 1664} vslice_dummy_var_202 := __HAVOC_malloc(4);
    p_1 := actual_p_1;
    call {:si_unique_call 1665} SLIC_sdv_KeAcquireSpinLock_entry(strConst__li2bpl38);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    Mem_T.VOID[p_1] := sdv_irql_previous;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "KeReleaseMutex"} {:osmodel} KeReleaseMutex(actual_Mutex_1: int, actual_Wait: int) returns (Tmp_1607: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeReleaseMutex"} {:osmodel} KeReleaseMutex(actual_Mutex_1: int, actual_Wait: int) returns (Tmp_1607: int)
{

  anon0:
    call {:si_unique_call 1666} SLIC_KeReleaseMutex_entry(strConst__li2bpl38);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1607 := 0;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_1609: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_1609: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_1609 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_1609 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_1609 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag_2: int)
{
  var vslice_dummy_var_203: int;

  anon0:
    call {:si_unique_call 1667} vslice_dummy_var_203 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_2: int) returns (Tmp_1613: int);
  free ensures {:va_keep} Tmp_1613 == -1073741824 || Tmp_1613 == -1073741771 || Tmp_1613 == -1073741670 || Tmp_1613 == -1073741823 || Tmp_1613 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_2: int) returns (Tmp_1613: int)
{
  var {:pointer} DeviceObject_2: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_1613 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_1613 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_1613 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    Tmp_1613 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_inside_init_entrypoint != 0;
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    goto L21;

  L21:
    Tmp_1613 := 0;
    goto L1;

  anon11_Then:
    assume {:partition} sdv_inside_init_entrypoint == 0;
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    goto L21;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_204: int;

  anon0:
    call {:si_unique_call 1668} vslice_dummy_var_204 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_1621: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_1621: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_1621 := r;
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_205: int;

  anon0:
    call {:si_unique_call 1669} vslice_dummy_var_205 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_206: int;

  anon0:
    call {:si_unique_call 1670} vslice_dummy_var_206 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_207: int;

  anon0:
    call {:si_unique_call 1671} vslice_dummy_var_207 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;

  anon0:
    call {:si_unique_call 1672} vslice_dummy_var_208 := __HAVOC_malloc(4);
    call {:si_unique_call 1673} sdv_stub_driver_init();
    call {:si_unique_call 1674} vslice_dummy_var_209 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SdvAssumeSoft"} {:osmodel} SdvAssumeSoft(actual_e: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SdvAssumeSoft"} {:osmodel} SdvAssumeSoft(actual_e: int)
{
  var {:scalar} e: int;
  var vslice_dummy_var_210: int;

  anon0:
    call {:si_unique_call 1675} vslice_dummy_var_210 := __HAVOC_malloc(4);
    e := actual_e;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} e == 0;
    call {:si_unique_call 1676} SdvExit#1();
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} e != 0;
    goto L1;
}



procedure {:origName "_sdv_init16"} {:osmodel} _sdv_init16();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == 0;
  free ensures {:va_keep} sdv_irql_previous_2 == 0;
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == 0;
  free ensures {:va_keep} sdv_irql_previous_4 == 0;
  free ensures {:va_keep} sdv_irql_previous_3 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init16"} {:osmodel} _sdv_init16()
{
  var vslice_dummy_var_211: int;

  anon0:
    call {:si_unique_call 1677} vslice_dummy_var_211 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    sdv_irql_current := 0;
    sdv_irql_previous := 0;
    sdv_irql_previous_2 := 0;
    sdv_irql_previous_3 := 0;
    sdv_irql_previous_4 := 0;
    sdv_irql_previous_5 := 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_inside_init_entrypoint == 0;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_isr_routine == li2bplFunctionConstant2899;
    assume sdv_ke_dpc == li2bplFunctionConstant2901;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant2904;
    assume sdv_p_devobj_top == sdv_devobj_top;
    assume sdv_MmMapIoSpace_int == 0;
    return;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_3: int, actual_Irp_1: int) returns (Tmp_1639: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_3: int, actual_Irp_1: int) returns (Tmp_1639: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_86: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_604: int;
  var vslice_dummy_var_605: int;
  var vslice_dummy_var_606: int;
  var vslice_dummy_var_607: int;

  anon0:
    call {:si_unique_call 1678} completion := __HAVOC_malloc(4);
    Irp_1 := actual_Irp_1;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.VOID[completion] := 0;
    status_86 := 259;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_1;
    goto L19;

  L19:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_1;
    goto L21;

  L21:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_1;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L29;

  L29:
    Tmp_1639 := status_86;
    goto LM2;

  LM2:
    return;

  anon56_Then:
    havoc vslice_dummy_var_604;
    call {:si_unique_call 1679} vslice_dummy_var_212 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_1, vslice_dummy_var_604, completion);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_1;
    goto L23;

  anon54_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_1;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_1;
    goto L19;

  anon69_Then:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_1;
    goto L58;

  L58:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_1;
    goto L60;

  L60:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_1;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    havoc vslice_dummy_var_605;
    call {:si_unique_call 1680} vslice_dummy_var_215 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_1, vslice_dummy_var_605, completion);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_1;
    goto L62;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_1;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_1;
    goto L58;

  anon70_Then:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_1;
    goto L32;

  L32:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_1;
    goto L34;

  L34:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_1;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    havoc vslice_dummy_var_606;
    call {:si_unique_call 1681} vslice_dummy_var_213 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_1, vslice_dummy_var_606, completion);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_1;
    goto L36;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_1;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_1;
    goto L32;

  anon53_Then:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_1;
    goto L45;

  L45:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_1;
    goto L47;

  L47:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_1;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    havoc vslice_dummy_var_607;
    call {:si_unique_call 1682} vslice_dummy_var_214 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_1, vslice_dummy_var_607, completion);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    goto L29;

  anon63_Then:
    goto L29;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_1;
    goto L49;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_1;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_1;
    goto L45;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_4: int, actual_pirp_7: int, actual_IrpDisposition: int) returns (Tmp_1641: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} Tmp_1641 == 0 || Tmp_1641 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_4: int, actual_pirp_7: int, actual_IrpDisposition: int) returns (Tmp_1641: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.VOID[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 1683} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_1641 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.VOID[IrpDisposition] := 2;
    call {:si_unique_call 1684} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.VOID[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 1685} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.VOID[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 1686} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_5: int, actual_Type_1: int, actual_structPtr888State: int) returns (SD1_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_5: int, actual_Type_1: int, actual_structPtr888State: int) returns (SD1_1: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp_1: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 1687} State := __HAVOC_malloc(8);
    call {:si_unique_call 1688} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1689} Tmp_1 := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    SD1_1 := Tmp_1;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer: int) returns (Tmp_1644: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer: int) returns (Tmp_1644: int)
{

  anon0:
    call {:si_unique_call 1690} SLIC_KeCancelTimer_entry(strConst__li2bpl38);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_1644 := 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    Tmp_1644 := 0;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_8: int, actual_CompletionRoutine_1: int, actual_Context_10: int, actual_InvokeOnSuccess_1: int, actual_InvokeOnError_1: int, actual_InvokeOnCancel_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_8: int, actual_CompletionRoutine_1: int, actual_Context_10: int, actual_InvokeOnSuccess_1: int, actual_InvokeOnError_1: int, actual_InvokeOnCancel_1: int)
{
  var {:pointer} irpSp_33: int;
  var {:pointer} pirp_8: int;
  var {:scalar} CompletionRoutine_1: int;
  var {:pointer} Context_10: int;
  var {:scalar} InvokeOnSuccess_1: int;
  var {:scalar} InvokeOnError_1: int;
  var {:scalar} InvokeOnCancel_1: int;
  var vslice_dummy_var_216: int;

  anon0:
    call {:si_unique_call 1691} vslice_dummy_var_216 := __HAVOC_malloc(4);
    pirp_8 := actual_pirp_8;
    CompletionRoutine_1 := actual_CompletionRoutine_1;
    Context_10 := actual_Context_10;
    InvokeOnSuccess_1 := actual_InvokeOnSuccess_1;
    InvokeOnError_1 := actual_InvokeOnError_1;
    InvokeOnCancel_1 := actual_InvokeOnCancel_1;
    call {:si_unique_call 1692} irpSp_33 := sdv_IoGetNextIrpStackLocation(pirp_8);
    assume {:nonnull} irpSp_33 != 0;
    assume irpSp_33 > 0;
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_1648: int);
  free ensures {:va_keep} Tmp_1648 == 1 || Tmp_1648 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_1648: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1648 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1648 := 0;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_2: int)
{
  var vslice_dummy_var_217: int;

  anon0:
    call {:si_unique_call 1693} vslice_dummy_var_217 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout_1: int) returns (Tmp_1652: int);
  free ensures {:va_keep} Tmp_1652 == 258 || Tmp_1652 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout_1: int) returns (Tmp_1652: int)
{
  var {:pointer} Timeout_1: int;

  anon0:
    Timeout_1 := actual_Timeout_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout_1 != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1652 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1652 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout_1 == 0;
    Tmp_1652 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_6: int)
{
  var vslice_dummy_var_218: int;

  anon0:
    call {:si_unique_call 1694} vslice_dummy_var_218 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event_1: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_1656: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event_1: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_1656: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event_1: int;

  anon0:
    Event_1 := actual_Event_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    havoc OldState;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    Tmp_1656 := OldState;
    return;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_9: int) returns (Tmp_1660: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_9: int) returns (Tmp_1660: int)
{
  var {:pointer} pirp_9: int;

  anon0:
    pirp_9 := actual_pirp_9;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    havoc Tmp_1660;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int)
{
  var vslice_dummy_var_219: int;

  anon0:
    call {:si_unique_call 1695} vslice_dummy_var_219 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCsqRemoveNextIrp"} {:osmodel} sdv_IoCsqRemoveNextIrp(actual_Csq_1: int, actual_PeekContext: int) returns (Tmp_1664: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCsqRemoveNextIrp"} {:osmodel} sdv_IoCsqRemoveNextIrp(actual_Csq_1: int, actual_PeekContext: int) returns (Tmp_1664: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1664 := sicrni;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1664 := 0;
    goto L1;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new: int)
{
  var {:scalar} new: int;
  var vslice_dummy_var_220: int;

  anon0:
    call {:si_unique_call 1696} vslice_dummy_var_220 := __HAVOC_malloc(4);
    new := actual_new;
    sdv_irql_current := new;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin()
{
  var vslice_dummy_var_221: int;

  anon0:
    call {:si_unique_call 1697} vslice_dummy_var_221 := __HAVOC_malloc(4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    goto L1;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_1670: int);
  free ensures {:va_keep} Tmp_1670 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_1670: int)
{

  anon0:
    Tmp_1670 := sdv_irql_current;
    return;
}



procedure {:origName "sdv_IoSetNextIrpStackLocation"} {:osmodel} sdv_IoSetNextIrpStackLocation(actual_Irp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetNextIrpStackLocation"} {:osmodel} sdv_IoSetNextIrpStackLocation(actual_Irp_3: int)
{
  var vslice_dummy_var_222: int;

  anon0:
    call {:si_unique_call 1698} vslice_dummy_var_222 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeReadStateEvent"} {:osmodel} KeReadStateEvent(actual_Event_2: int) returns (Tmp_1674: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeReadStateEvent"} {:osmodel} KeReadStateEvent(actual_Event_2: int) returns (Tmp_1674: int)
{
  var {:scalar} l: int;

  anon0:
    call {:si_unique_call 1699} SLIC_KeReadStateEvent_entry(strConst__li2bpl38);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1674 := l;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_1678: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "main"} {:osmodel} main() returns (Tmp_1678: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_1679: int;
  var {:scalar} Tmp_1680: int;
  var boogieTmp: int;
  var WPP_GLOBAL_Control__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var WPP_ThisDir_CTLGUID_USBCCGP__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var GUID_USB_CAPABILITY_DEVICE_CONNECTION_FULL_SPEED_COMPATIBLE__Loc: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var IID_IDrmAudioStream__Loc: int;
  var GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var WPP_TRACE_CONTROL_NULL_GUID__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var GUID_USB_CAPABILITY_STATIC_STREAMS__Loc: int;
  var GUID_USB_CAPABILITY_FUNCTION_SUSPEND__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_DEVINTERFACE_USB_HUB__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_DEVINTERFACE_USB_DEVICE__Loc: int;
  var GUID_USB_CAPABILITY_DEVICE_CONNECTION_LOW_SPEED_COMPATIBLE__Loc: int;
  var DefaultTraceSecurityGuid__Loc: int;
  var GUID_USB_CAPABILITY_SELECTIVE_SUSPEND__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var SystemTraceControlGuid__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var IID_IKsControl__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var GUID_DEVINTERFACE_USB_HOST_CONTROLLER__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var GUID_USB_TRANSFER_TRACING__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var IID_IKsDeviceFunctions__Loc: int;
  var USB_BUS_INTERFACE_USBC_CONFIGURATION_GUID__Loc: int;
  var EventTraceConfigGuid__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var IID_IUnknown__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_USB_WMI_DEVICE_PERF_INFO__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var GUID_USB_CAPABILITY_CHAINED_MDLS__Loc: int;
  var GUID_USB_WMI_TRACING__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var GUID_USBD_INTERFACE_V1__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var IID_IKsFastClock__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var GUID_USB_MSOS20_PLATFORM_CAPABILITY_ID__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_USB_CAPABILITY_DEVICE_CONNECTION_SUPER_SPEED_COMPATIBLE__Loc: int;
  var GUID_USB_WMI_SURPRISE_REMOVAL_NOTIFICATION__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_USB_WMI_STD_DATA__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var EventTraceGuid__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_USB_WMI_NODE_INFO__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var GUID_USB_PERFORMANCE_TRACING__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var GUID_USB_WMI_STD_NOTIFICATION__Loc: int;
  var USB_BUS_INTERFACE_USBDI_GUID__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var ClassCompatibleIDs__Loc: int;
  var gSetD0Tag__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var wmiRegistryPath__Loc: int;
  var vslice_dummy_var_474: int;
  var vslice_dummy_var_475: int;
  var vslice_dummy_var_608: int;
  var vslice_dummy_var_609: int;
  var vslice_dummy_var_610: int;
  var vslice_dummy_var_611: int;
  var vslice_dummy_var_612: int;
  var vslice_dummy_var_613: int;
  var vslice_dummy_var_614: int;
  var vslice_dummy_var_615: int;
  var vslice_dummy_var_616: int;
  var vslice_dummy_var_617: int;
  var vslice_dummy_var_618: int;
  var vslice_dummy_var_619: int;
  var vslice_dummy_var_620: int;
  var vslice_dummy_var_621: int;
  var vslice_dummy_var_622: int;
  var vslice_dummy_var_623: int;
  var vslice_dummy_var_624: int;
  var vslice_dummy_var_625: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 1700} WPP_GLOBAL_Control__Loc := __HAVOC_malloc_or_null(4);
    assume WPP_GLOBAL_Control__Loc == WPP_GLOBAL_Control;
    assume WPP_GLOBAL_Control != 0;
    call {:si_unique_call 1701} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1702} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 1703} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1704} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 1705} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1706} WPP_ThisDir_CTLGUID_USBCCGP__Loc := __HAVOC_malloc_or_null(16);
    assume WPP_ThisDir_CTLGUID_USBCCGP__Loc == WPP_ThisDir_CTLGUID_USBCCGP;
    assume WPP_ThisDir_CTLGUID_USBCCGP != 0;
    call {:si_unique_call 1707} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1708} GUID_USB_CAPABILITY_DEVICE_CONNECTION_FULL_SPEED_COMPATIBLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_FULL_SPEED_COMPATIBLE__Loc == GUID_USB_CAPABILITY_DEVICE_CONNECTION_FULL_SPEED_COMPATIBLE;
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_FULL_SPEED_COMPATIBLE != 0;
    call {:si_unique_call 1709} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 1710} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 1711} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1712} IID_IDrmAudioStream__Loc := __HAVOC_malloc_or_null(16);
    assume IID_IDrmAudioStream__Loc == IID_IDrmAudioStream;
    assume IID_IDrmAudioStream != 0;
    call {:si_unique_call 1713} GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE__Loc == GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE;
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE != 0;
    call {:si_unique_call 1714} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 1715} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 1716} WPP_TRACE_CONTROL_NULL_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WPP_TRACE_CONTROL_NULL_GUID__Loc == WPP_TRACE_CONTROL_NULL_GUID;
    assume WPP_TRACE_CONTROL_NULL_GUID != 0;
    call {:si_unique_call 1717} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 1718} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 1719} GUID_USB_CAPABILITY_STATIC_STREAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_STATIC_STREAMS__Loc == GUID_USB_CAPABILITY_STATIC_STREAMS;
    assume GUID_USB_CAPABILITY_STATIC_STREAMS != 0;
    call {:si_unique_call 1720} GUID_USB_CAPABILITY_FUNCTION_SUSPEND__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_FUNCTION_SUSPEND__Loc == GUID_USB_CAPABILITY_FUNCTION_SUSPEND;
    assume GUID_USB_CAPABILITY_FUNCTION_SUSPEND != 0;
    call {:si_unique_call 1721} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1722} GUID_DEVINTERFACE_USB_HUB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_USB_HUB__Loc == GUID_DEVINTERFACE_USB_HUB;
    assume GUID_DEVINTERFACE_USB_HUB != 0;
    call {:si_unique_call 1723} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1724} GUID_DEVINTERFACE_USB_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_USB_DEVICE__Loc == GUID_DEVINTERFACE_USB_DEVICE;
    assume GUID_DEVINTERFACE_USB_DEVICE != 0;
    call {:si_unique_call 1725} GUID_USB_CAPABILITY_DEVICE_CONNECTION_LOW_SPEED_COMPATIBLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_LOW_SPEED_COMPATIBLE__Loc == GUID_USB_CAPABILITY_DEVICE_CONNECTION_LOW_SPEED_COMPATIBLE;
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_LOW_SPEED_COMPATIBLE != 0;
    call {:si_unique_call 1726} DefaultTraceSecurityGuid__Loc := __HAVOC_malloc_or_null(16);
    assume DefaultTraceSecurityGuid__Loc == DefaultTraceSecurityGuid;
    assume DefaultTraceSecurityGuid != 0;
    call {:si_unique_call 1727} GUID_USB_CAPABILITY_SELECTIVE_SUSPEND__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_SELECTIVE_SUSPEND__Loc == GUID_USB_CAPABILITY_SELECTIVE_SUSPEND;
    assume GUID_USB_CAPABILITY_SELECTIVE_SUSPEND != 0;
    call {:si_unique_call 1728} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 1729} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 1730} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 1731} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 1732} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 1733} SystemTraceControlGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SystemTraceControlGuid__Loc == SystemTraceControlGuid;
    assume SystemTraceControlGuid != 0;
    call {:si_unique_call 1734} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1735} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 1736} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 1737} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1738} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 1739} IID_IKsControl__Loc := __HAVOC_malloc_or_null(16);
    assume IID_IKsControl__Loc == IID_IKsControl;
    assume IID_IKsControl != 0;
    call {:si_unique_call 1740} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 1741} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 1742} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 1743} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 1744} GUID_DEVINTERFACE_USB_HOST_CONTROLLER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_USB_HOST_CONTROLLER__Loc == GUID_DEVINTERFACE_USB_HOST_CONTROLLER;
    assume GUID_DEVINTERFACE_USB_HOST_CONTROLLER != 0;
    call {:si_unique_call 1745} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 1746} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 1747} GUID_USB_TRANSFER_TRACING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_TRANSFER_TRACING__Loc == GUID_USB_TRANSFER_TRACING;
    assume GUID_USB_TRANSFER_TRACING != 0;
    call {:si_unique_call 1748} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 1749} IID_IKsDeviceFunctions__Loc := __HAVOC_malloc_or_null(16);
    assume IID_IKsDeviceFunctions__Loc == IID_IKsDeviceFunctions;
    assume IID_IKsDeviceFunctions != 0;
    call {:si_unique_call 1750} USB_BUS_INTERFACE_USBC_CONFIGURATION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume USB_BUS_INTERFACE_USBC_CONFIGURATION_GUID__Loc == USB_BUS_INTERFACE_USBC_CONFIGURATION_GUID;
    assume USB_BUS_INTERFACE_USBC_CONFIGURATION_GUID != 0;
    call {:si_unique_call 1751} EventTraceConfigGuid__Loc := __HAVOC_malloc_or_null(16);
    assume EventTraceConfigGuid__Loc == EventTraceConfigGuid;
    assume EventTraceConfigGuid != 0;
    call {:si_unique_call 1752} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 1753} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 1754} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 1755} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 1756} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 1757} IID_IUnknown__Loc := __HAVOC_malloc_or_null(16);
    assume IID_IUnknown__Loc == IID_IUnknown;
    assume IID_IUnknown != 0;
    call {:si_unique_call 1758} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 1759} GUID_USB_WMI_DEVICE_PERF_INFO__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_WMI_DEVICE_PERF_INFO__Loc == GUID_USB_WMI_DEVICE_PERF_INFO;
    assume GUID_USB_WMI_DEVICE_PERF_INFO != 0;
    call {:si_unique_call 1760} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 1761} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 1762} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 1763} GUID_USB_CAPABILITY_CHAINED_MDLS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_CHAINED_MDLS__Loc == GUID_USB_CAPABILITY_CHAINED_MDLS;
    assume GUID_USB_CAPABILITY_CHAINED_MDLS != 0;
    call {:si_unique_call 1764} GUID_USB_WMI_TRACING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_WMI_TRACING__Loc == GUID_USB_WMI_TRACING;
    assume GUID_USB_WMI_TRACING != 0;
    call {:si_unique_call 1765} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1766} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 1767} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1768} GUID_USBD_INTERFACE_V1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USBD_INTERFACE_V1__Loc == GUID_USBD_INTERFACE_V1;
    assume GUID_USBD_INTERFACE_V1 != 0;
    call {:si_unique_call 1769} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1770} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 1771} IID_IKsFastClock__Loc := __HAVOC_malloc_or_null(16);
    assume IID_IKsFastClock__Loc == IID_IKsFastClock;
    assume IID_IKsFastClock != 0;
    call {:si_unique_call 1772} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 1773} GUID_USB_MSOS20_PLATFORM_CAPABILITY_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_MSOS20_PLATFORM_CAPABILITY_ID__Loc == GUID_USB_MSOS20_PLATFORM_CAPABILITY_ID;
    assume GUID_USB_MSOS20_PLATFORM_CAPABILITY_ID != 0;
    call {:si_unique_call 1774} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 1775} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1776} GUID_USB_CAPABILITY_DEVICE_CONNECTION_SUPER_SPEED_COMPATIBLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_SUPER_SPEED_COMPATIBLE__Loc == GUID_USB_CAPABILITY_DEVICE_CONNECTION_SUPER_SPEED_COMPATIBLE;
    assume GUID_USB_CAPABILITY_DEVICE_CONNECTION_SUPER_SPEED_COMPATIBLE != 0;
    call {:si_unique_call 1777} GUID_USB_WMI_SURPRISE_REMOVAL_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_WMI_SURPRISE_REMOVAL_NOTIFICATION__Loc == GUID_USB_WMI_SURPRISE_REMOVAL_NOTIFICATION;
    assume GUID_USB_WMI_SURPRISE_REMOVAL_NOTIFICATION != 0;
    call {:si_unique_call 1778} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 1779} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 1780} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 1781} GUID_USB_WMI_STD_DATA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_WMI_STD_DATA__Loc == GUID_USB_WMI_STD_DATA;
    assume GUID_USB_WMI_STD_DATA != 0;
    call {:si_unique_call 1782} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 1783} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 1784} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 1785} EventTraceGuid__Loc := __HAVOC_malloc_or_null(16);
    assume EventTraceGuid__Loc == EventTraceGuid;
    assume EventTraceGuid != 0;
    call {:si_unique_call 1786} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 1787} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 1788} GUID_USB_WMI_NODE_INFO__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_WMI_NODE_INFO__Loc == GUID_USB_WMI_NODE_INFO;
    assume GUID_USB_WMI_NODE_INFO != 0;
    call {:si_unique_call 1789} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 1790} GUID_USB_PERFORMANCE_TRACING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_PERFORMANCE_TRACING__Loc == GUID_USB_PERFORMANCE_TRACING;
    assume GUID_USB_PERFORMANCE_TRACING != 0;
    call {:si_unique_call 1791} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1792} GUID_USB_WMI_STD_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USB_WMI_STD_NOTIFICATION__Loc == GUID_USB_WMI_STD_NOTIFICATION;
    assume GUID_USB_WMI_STD_NOTIFICATION != 0;
    call {:si_unique_call 1793} USB_BUS_INTERFACE_USBDI_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume USB_BUS_INTERFACE_USBDI_GUID__Loc == USB_BUS_INTERFACE_USBDI_GUID;
    assume USB_BUS_INTERFACE_USBDI_GUID != 0;
    call {:si_unique_call 1794} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 1795} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 1796} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1797} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 1798} ClassCompatibleIDs__Loc := __HAVOC_malloc_or_null(64);
    assume ClassCompatibleIDs__Loc == ClassCompatibleIDs;
    assume ClassCompatibleIDs != 0;
    call {:si_unique_call 1799} gSetD0Tag__Loc := __HAVOC_malloc_or_null(4);
    assume gSetD0Tag__Loc == gSetD0Tag;
    assume gSetD0Tag != 0;
    call {:si_unique_call 1800} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 1801} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 1802} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1803} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 1804} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1805} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1806} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 1807} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 1808} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 1809} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 1810} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 1811} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1812} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 1813} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 1814} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 1815} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 1816} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 1817} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 1818} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1819} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 1820} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 1821} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 1822} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 1823} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 1824} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 1825} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1826} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 1827} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 1828} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 1829} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 1830} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 1831} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1832} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 1833} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 1834} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 1835} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 1836} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 1837} wmiRegistryPath__Loc := __HAVOC_malloc_or_null(12);
    assume wmiRegistryPath__Loc == wmiRegistryPath;
    assume wmiRegistryPath != 0;
    call {:si_unique_call 1838} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1839} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1840} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1841} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1842} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1843} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1844} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1845} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1846} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1847} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1848} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1849} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1850} boogieTmp := __HAVOC_malloc_or_null(32);
    call {:si_unique_call 1851} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 1852} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1853} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 1854} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 1855} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pDpcContext == boogieTmp;
    call {:si_unique_call 1856} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 1857} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 1858} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 1859} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1860} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1861} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1862} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1863} boogieTmp := __HAVOC_malloc_or_null(60);
    call {:si_unique_call 1864} boogieTmp := __HAVOC_malloc_or_null(16);
    call {:si_unique_call 1865} vslice_dummy_var_608 := __HAVOC_malloc(44);
    call {:si_unique_call 1866} vslice_dummy_var_609 := __HAVOC_malloc(44);
    call {:si_unique_call 1867} vslice_dummy_var_610 := __HAVOC_malloc(44);
    call {:si_unique_call 1868} vslice_dummy_var_611 := __HAVOC_malloc(44);
    call {:si_unique_call 1869} vslice_dummy_var_612 := __HAVOC_malloc(44);
    call {:si_unique_call 1870} vslice_dummy_var_613 := __HAVOC_malloc(64);
    call {:si_unique_call 1871} vslice_dummy_var_614 := __HAVOC_malloc(44);
    call {:si_unique_call 1872} vslice_dummy_var_615 := __HAVOC_malloc(84);
    call {:si_unique_call 1873} vslice_dummy_var_616 := __HAVOC_malloc(44);
    call {:si_unique_call 1874} vslice_dummy_var_617 := __HAVOC_malloc(44);
    call {:si_unique_call 1875} vslice_dummy_var_618 := __HAVOC_malloc(44);
    call {:si_unique_call 1876} vslice_dummy_var_619 := __HAVOC_malloc(20);
    call {:si_unique_call 1877} vslice_dummy_var_620 := __HAVOC_malloc(44);
    call {:si_unique_call 1878} vslice_dummy_var_474 := __HAVOC_malloc(4);
    call {:si_unique_call 1879} vslice_dummy_var_621 := __HAVOC_malloc(44);
    call {:si_unique_call 1880} vslice_dummy_var_622 := __HAVOC_malloc(44);
    call {:si_unique_call 1881} vslice_dummy_var_623 := __HAVOC_malloc(12);
    call {:si_unique_call 1882} vslice_dummy_var_624 := __HAVOC_malloc(44);
    call {:si_unique_call 1883} vslice_dummy_var_475 := __HAVOC_malloc(280);
    call {:si_unique_call 1884} vslice_dummy_var_625 := __HAVOC_malloc(44);
    assume {:mainInitDone} true;
    call {:si_unique_call 1885} corralExtraInit();
    call {:si_unique_call 1886} corralExplainErrorInit();
    call {:si_unique_call 1887} _sdv_init18();
    call {:si_unique_call 1888} _sdv_init1();
    call {:si_unique_call 1889} _sdv_init4();
    call {:si_unique_call 1890} _sdv_init5();
    call {:si_unique_call 1891} _sdv_init3();
    call {:si_unique_call 1892} _sdv_init16();
    call {:si_unique_call 1893} _sdv_init14();
    call {:si_unique_call 1894} _sdv_init6();
    call {:si_unique_call 1895} _sdv_init15();
    call {:si_unique_call 1896} _sdv_init10();
    call {:si_unique_call 1897} _sdv_init11();
    call {:si_unique_call 1898} _sdv_init9();
    call {:si_unique_call 1899} _sdv_init12();
    call {:si_unique_call 1900} _sdv_init13();
    call {:si_unique_call 1901} _sdv_init7();
    call {:si_unique_call 1902} _sdv_init8();
    call {:si_unique_call 1903} _sdv_init2();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_1680 := 0;
    goto L41;

  L41:
    assume Tmp_1680 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_1679 := 0;
    goto L45;

  L45:
    assume Tmp_1679 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1904} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L39;

  L39:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_1679 := 1;
    goto L45;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_1680 := 1;
    goto L41;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_2: int, actual_Data_2: int, actual_DataSize: int) returns (Tmp_1682: int);
  free ensures {:va_keep} Tmp_1682 == -1073741790 || Tmp_1682 == -1073741816 || Tmp_1682 == -1073741823 || Tmp_1682 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_2: int, actual_Data_2: int, actual_DataSize: int) returns (Tmp_1682: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1682 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1682 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_1682 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1682 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_10: int)
{
  var {:pointer} pirp_10: int;
  var vslice_dummy_var_223: int;

  anon0:
    call {:si_unique_call 1905} vslice_dummy_var_223 := __HAVOC_malloc(4);
    pirp_10 := actual_pirp_10;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_10 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_10 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_10 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_10 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_5: int) returns (Tmp_1686: int);
  free ensures {:va_keep} Tmp_1686 == 0 || Tmp_1686 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_5: int) returns (Tmp_1686: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1686 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1686 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_1688: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_1688: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.VOID[Addend] := Mem_T.VOID[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_1688 := Mem_T.VOID[Addend];
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_224: int;

  anon0:
    call {:si_unique_call 1906} vslice_dummy_var_224 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "RtlCompareMemory"} {:osmodel} RtlCompareMemory(actual_Source1: int, actual_Source2: int, actual_Length_1: int) returns (Tmp_1694: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlCompareMemory"} {:osmodel} RtlCompareMemory(actual_Source1: int, actual_Source2: int, actual_Length_1: int) returns (Tmp_1694: int)
{
  var {:scalar} r_4: int;
  var {:scalar} sdv_537: int;

  anon0:
    r_4 := sdv_537;
    Tmp_1694 := r_4;
    return;
}



procedure {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_9: int) returns (Tmp_1696: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_9: int) returns (Tmp_1696: int)
{
  var {:pointer} DeviceObject_9: int;

  anon0:
    DeviceObject_9 := actual_DeviceObject_9;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1696 := sdv_p_devobj_top;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1696 := DeviceObject_9;
    goto L1;
}



procedure {:origName "IoSetCompletionRoutineEx"} {:osmodel} IoSetCompletionRoutineEx(actual_DeviceObject_10: int, actual_Irp_6: int, actual_CompletionRoutine_2: int, actual_Context_13: int, actual_InvokeOnSuccess_2: int, actual_InvokeOnError_2: int, actual_InvokeOnCancel_2: int) returns (Tmp_1698: int);
  free ensures {:va_keep} Tmp_1698 == 0 || Tmp_1698 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoSetCompletionRoutineEx"} {:osmodel} IoSetCompletionRoutineEx(actual_DeviceObject_10: int, actual_Irp_6: int, actual_CompletionRoutine_2: int, actual_Context_13: int, actual_InvokeOnSuccess_2: int, actual_InvokeOnError_2: int, actual_InvokeOnCancel_2: int) returns (Tmp_1698: int)
{
  var {:pointer} irpSp_34: int;
  var {:pointer} Irp_6: int;
  var {:scalar} CompletionRoutine_2: int;
  var {:pointer} Context_13: int;
  var {:scalar} InvokeOnSuccess_2: int;
  var {:scalar} InvokeOnError_2: int;
  var {:scalar} InvokeOnCancel_2: int;

  anon0:
    Irp_6 := actual_Irp_6;
    CompletionRoutine_2 := actual_CompletionRoutine_2;
    Context_13 := actual_Context_13;
    InvokeOnSuccess_2 := actual_InvokeOnSuccess_2;
    InvokeOnError_2 := actual_InvokeOnError_2;
    InvokeOnCancel_2 := actual_InvokeOnCancel_2;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1907} irpSp_34 := sdv_IoGetNextIrpStackLocation(Irp_6);
    assume {:nonnull} irpSp_34 != 0;
    assume irpSp_34 > 0;
    Tmp_1698 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1698 := -1073741670;
    goto L1;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination: int, actual_Length_2: int)
{
  var vslice_dummy_var_225: int;

  anon0:
    call {:si_unique_call 1908} vslice_dummy_var_225 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_226: int;

  anon0:
    call {:si_unique_call 1909} vslice_dummy_var_226 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwCreateKey"} {:osmodel} ZwCreateKey(actual_KeyHandle_1: int, actual_DesiredAccess: int, actual_ObjectAttributes: int, actual_TitleIndex_1: int, actual_Class_1: int, actual_CreateOptions: int, actual_Disposition: int) returns (Tmp_1704: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1704 == 0 || Tmp_1704 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwCreateKey"} {:osmodel} ZwCreateKey(actual_KeyHandle_1: int, actual_DesiredAccess: int, actual_ObjectAttributes: int, actual_TitleIndex_1: int, actual_Class_1: int, actual_CreateOptions: int, actual_Disposition: int) returns (Tmp_1704: int)
{
  var {:pointer} sdv_542: int;
  var {:pointer} KeyHandle_1: int;

  anon0:
    KeyHandle_1 := actual_KeyHandle_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1910} sdv_542 := __HAVOC_malloc(4);
    assume {:nonnull} KeyHandle_1 != 0;
    assume KeyHandle_1 > 0;
    Tmp_1704 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} KeyHandle_1 != 0;
    assume KeyHandle_1 > 0;
    Tmp_1704 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_11: int)
{
  var vslice_dummy_var_227: int;

  anon0:
    call {:si_unique_call 1911} vslice_dummy_var_227 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_12: int)
{
  var vslice_dummy_var_228: int;

  anon0:
    call {:si_unique_call 1912} vslice_dummy_var_228 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_13: int) returns (Tmp_1710: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_13: int) returns (Tmp_1710: int)
{
  var {:pointer} ps: int;
  var {:scalar} minor: int;
  var {:scalar} sdv_551: int;
  var {:scalar} Tmp_1712: int;
  var {:scalar} Tmp_1713: int;
  var {:scalar} status_88: int;
  var {:pointer} po: int;
  var {:pointer} pirp_13: int;

  anon0:
    po := actual_po;
    pirp_13 := actual_pirp_13;
    status_88 := 0;
    minor := sdv_551;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    havoc ps;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    call {:si_unique_call 1913} sdv_SetStatus(pirp_13);
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1914} sdv_stub_dispatch_begin();
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L60;

  L60:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    Tmp_1712 := 0;
    goto L214;

  L214:
    assume Tmp_1712 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto L66;

  L66:
    call {:si_unique_call 1915} status_88 := USBC_Dispatch(po, pirp_13);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 1916} sdv_stub_dispatch_end(status_88, 0);
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    Tmp_1710 := status_88;
    goto LM2;

  LM2:
    return;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    goto L66;

  anon61_Then:
    Tmp_1712 := 1;
    goto L214;

  anon59_Then:
    goto L61;

  anon83_Then:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_start_irp_already_issued != 0;
    Tmp_1713 := 0;
    goto L220;

  L220:
    assume Tmp_1713 != 0;
    goto L60;

  anon58_Then:
    assume {:partition} sdv_start_irp_already_issued == 0;
    Tmp_1713 := 1;
    goto L220;

  anon62_Then:
    call {:si_unique_call 1917} status_88 := sdv_DoNothing();
    goto L72;

  anon63_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1918} status_88 := USBC_Dispatch(po, pirp_13);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1919} sdv_SetPowerIrpMinorFunction(pirp_13);
    call {:si_unique_call 1920} status_88 := USBC_Dispatch(po, pirp_13);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1921} status_88 := sdv_DoNothing();
    goto L72;

  anon66_Then:
    call {:si_unique_call 1922} status_88 := sdv_DoNothing();
    goto L72;

  anon67_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1923} status_88 := sdv_DoNothing();
    goto L72;

  anon68_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1924} status_88 := USBC_Dispatch(po, pirp_13);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon80_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1925} status_88 := USBC_Dispatch(po, pirp_13);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    call {:si_unique_call 1926} status_88 := sdv_DoNothing();
    goto L72;

  anon71_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1927} status_88 := sdv_DoNothing();
    goto L72;

  anon72_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1928} status_88 := sdv_DoNothing();
    goto L72;

  anon73_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1929} status_88 := sdv_DoNothing();
    goto L72;

  anon74_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1930} status_88 := sdv_DoNothing();
    goto L72;

  anon75_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1931} status_88 := sdv_DoNothing();
    goto L72;

  anon76_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1932} status_88 := USBC_Dispatch(po, pirp_13);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1933} status_88 := USBC_Dispatch(po, pirp_13);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon77_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoBuildSynchronousFsdRequest"} {:osmodel} IoBuildSynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_11: int, actual_Buffer: int, actual_Length_3: int, actual_StartingOffset: int, actual_Event_3: int, actual_IoStatusBlock: int) returns (Tmp_1714: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoBuildSynchronousFsdRequest"} {:osmodel} IoBuildSynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_11: int, actual_Buffer: int, actual_Length_3: int, actual_StartingOffset: int, actual_Event_3: int, actual_IoStatusBlock: int) returns (Tmp_1714: int)
{
  var {:pointer} Tmp_1715: int;
  var {:scalar} MajorFunction: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    MajorFunction := actual_MajorFunction;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    havoc Tmp_1715;
    assume {:nonnull} Tmp_1715 != 0;
    assume Tmp_1715 > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    Tmp_1714 := sdv_IoBuildSynchronousFsdRequest_irp;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_1714 := 0;
    goto L1;
}



procedure {:origName "KeResetEvent"} {:osmodel} KeResetEvent(actual_Event_4: int) returns (Tmp_1717: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeResetEvent"} {:osmodel} KeResetEvent(actual_Event_4: int) returns (Tmp_1717: int)
{
  var {:scalar} OldState_1: int;
  var {:pointer} Event_4: int;

  anon0:
    Event_4 := actual_Event_4;
    call {:si_unique_call 1934} SLIC_KeResetEvent_entry(strConst__li2bpl38);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Event_4 != 0;
    assume Event_4 > 0;
    havoc OldState_1;
    assume {:nonnull} Event_4 != 0;
    assume Event_4 > 0;
    Tmp_1717 := OldState_1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_229: int;

  anon0:
    call {:si_unique_call 1935} vslice_dummy_var_229 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    sdv_irql_current := new_1;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "IoReuseIrp"} {:osmodel} IoReuseIrp(actual_Irp_7: int, actual_Status: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoReuseIrp"} {:osmodel} IoReuseIrp(actual_Irp_7: int, actual_Status: int)
{
  var {:pointer} Irp_7: int;
  var {:scalar} Status: int;
  var vslice_dummy_var_230: int;

  anon0:
    call {:si_unique_call 1936} vslice_dummy_var_230 := __HAVOC_malloc(4);
    Irp_7 := actual_Irp_7;
    Status := actual_Status;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_14: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_14: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_231: int;

  anon0:
    call {:si_unique_call 1937} vslice_dummy_var_231 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_1: int, actual_Source: int, actual_Length_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_1: int, actual_Source: int, actual_Length_4: int)
{
  var vslice_dummy_var_232: int;

  anon0:
    call {:si_unique_call 1938} vslice_dummy_var_232 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeReleaseInStackQueuedSpinLock"} {:osmodel} KeReleaseInStackQueuedSpinLock(actual_LockHandle: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeReleaseInStackQueuedSpinLock"} {:osmodel} KeReleaseInStackQueuedSpinLock(actual_LockHandle: int)
{
  var vslice_dummy_var_233: int;

  anon0:
    call {:si_unique_call 1939} vslice_dummy_var_233 := __HAVOC_malloc(4);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_2: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_5: int, actual_ResultLength: int) returns (Tmp_1729: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_1729 == -1073741811 || Tmp_1729 == -1073741823 || Tmp_1729 == 0 || Tmp_1729 == 5 || Tmp_1729 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_2: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_5: int, actual_ResultLength: int) returns (Tmp_1729: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_563: int;
  var {:scalar} Length_5: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_5 := actual_Length_5;
    ResultLength := actual_ResultLength;
    L := sdv_563;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_1729 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_1729 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_5;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_5 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.VOID[ResultLength] := L;
    Tmp_1729 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_5 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_5;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.VOID[ResultLength] := L;
    Tmp_1729 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_5 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.VOID[ResultLength] := L;
    Tmp_1729 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_5;
    goto L13;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_15: int)
{
  var vslice_dummy_var_234: int;

  anon0:
    call {:si_unique_call 1940} vslice_dummy_var_234 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeFlushQueuedDpcs"} {:osmodel} KeFlushQueuedDpcs();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeFlushQueuedDpcs"} {:osmodel} KeFlushQueuedDpcs()
{
  var vslice_dummy_var_235: int;

  anon0:
    call {:si_unique_call 1941} vslice_dummy_var_235 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_236: int;

  anon0:
    call {:si_unique_call 1942} vslice_dummy_var_236 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag_3: int)
{
  var vslice_dummy_var_237: int;

  anon0:
    call {:si_unique_call 1943} vslice_dummy_var_237 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_16: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_16: int)
{
  var vslice_dummy_var_238: int;

  anon0:
    call {:si_unique_call 1944} vslice_dummy_var_238 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_4: int) returns (Tmp_1743: int);
  free ensures {:va_keep} Tmp_1743 == -1073741823 || Tmp_1743 == -1073741738 || Tmp_1743 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_4: int) returns (Tmp_1743: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_1743 := -1073741823;
    goto L1;

  L1:
    return;

  anon5_Then:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1743 := -1073741738;
    goto L1;

  anon6_Then:
    Tmp_1743 := 0;
    goto L1;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1745: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1745: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.VOID[Addend_1] := Mem_T.VOID[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_1745 := Mem_T.VOID[Addend_1];
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_1747: int);
  free ensures {:va_keep} Tmp_1747 == 1 || Tmp_1747 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_1747: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1747 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1747 := 0;
    goto L1;
}



procedure {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_1749: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_1749: int)
{
  var {:pointer} irpSp_35: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1945} irpSp_35 := sdv_IoGetNextIrpStackLocation(sdv_other_irp);
    assume {:nonnull} irpSp_35 != 0;
    assume irpSp_35 > 0;
    Tmp_1749 := sdv_other_irp;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1749 := 0;
    goto L1;
}



procedure {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_1: int) returns (Tmp_1753: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_1: int) returns (Tmp_1753: int)
{
  var {:scalar} p_4: int;

  anon0:
    Tmp_1753 := p_4;
    return;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_5: int, actual_Type_3: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_5: int, actual_Type_3: int, actual_State_1: int)
{
  var {:pointer} Event_5: int;
  var {:scalar} Type_3: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_239: int;

  anon0:
    call {:si_unique_call 1946} vslice_dummy_var_239 := __HAVOC_malloc(4);
    Event_5 := actual_Event_5;
    Type_3 := actual_Type_3;
    State_1 := actual_State_1;
    assume {:nonnull} Event_5 != 0;
    assume Event_5 > 0;
    assume {:nonnull} Event_5 != 0;
    assume Event_5 > 0;
    assume {:nonnull} Event_5 != 0;
    assume Event_5 > 0;
    assume {:nonnull} Event_5 != 0;
    assume Event_5 > 0;
    return;
}



procedure {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_15: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_6: int, actual_IoStatusBlock_1: int) returns (Tmp_1761: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_15: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_6: int, actual_IoStatusBlock_1: int) returns (Tmp_1761: int)
{
  var {:pointer} Tmp_1762: int;
  var {:pointer} Tmp_1764: int;
  var {:scalar} InternalDeviceIoControl: int;
  var {:pointer} IoStatusBlock_1: int;

  anon0:
    InternalDeviceIoControl := actual_InternalDeviceIoControl;
    IoStatusBlock_1 := actual_IoStatusBlock_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} InternalDeviceIoControl != 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_1762;
    assume {:nonnull} Tmp_1762 != 0;
    assume Tmp_1762 > 0;
    goto L14;

  L14:
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    assume {:nonnull} IoStatusBlock_1 != 0;
    assume IoStatusBlock_1 > 0;
    Tmp_1761 := sdv_IoBuildDeviceIoControlRequest_irp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} InternalDeviceIoControl == 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_1764;
    assume {:nonnull} Tmp_1764 != 0;
    assume Tmp_1764 > 0;
    goto L14;

  anon5_Then:
    assume {:nonnull} IoStatusBlock_1 != 0;
    assume IoStatusBlock_1 > 0;
    Tmp_1761 := 0;
    goto L1;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_5: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_5: int)
{
  var {:pointer} p_5: int;
  var vslice_dummy_var_240: int;

  anon0:
    call {:si_unique_call 1947} vslice_dummy_var_240 := __HAVOC_malloc(4);
    p_5 := actual_p_5;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p_5 != 0;
    assume p_5 > 0;
    Mem_T.VOID[p_5] := sdv_irql_previous;
    return;
}



procedure {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_17: int)
{
  var vslice_dummy_var_241: int;

  anon0:
    call {:si_unique_call 1948} vslice_dummy_var_241 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_2: int) returns (Tmp_1769: int);
  free ensures {:va_keep} Tmp_1769 == 0 || Tmp_1769 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_2: int) returns (Tmp_1769: int)
{
  var {:scalar} choice_17: int;
  var {:scalar} Tmp_1771: int;
  var {:scalar} Status_2: int;

  anon0:
    Status_2 := actual_Status_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_2 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_2;
    Tmp_1769 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_2 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_17 != 0;
    Tmp_1771 := 1;
    goto L14;

  L14:
    Tmp_1769 := Tmp_1771;
    goto L1;

  anon8_Then:
    assume {:partition} choice_17 == 0;
    Tmp_1771 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_2;
    goto L9;
}



procedure {:origName "IoInvalidateDeviceRelations"} {:osmodel} IoInvalidateDeviceRelations(actual_DeviceObject_16: int, actual_Type_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoInvalidateDeviceRelations"} {:osmodel} IoInvalidateDeviceRelations(actual_DeviceObject_16: int, actual_Type_4: int)
{
  var vslice_dummy_var_242: int;

  anon0:
    call {:si_unique_call 1949} vslice_dummy_var_242 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int)
{
  var {:pointer} SpinLock_2: int;
  var vslice_dummy_var_243: int;

  anon0:
    call {:si_unique_call 1950} vslice_dummy_var_243 := __HAVOC_malloc(4);
    SpinLock_2 := actual_SpinLock_2;
    assume {:nonnull} SpinLock_2 != 0;
    assume SpinLock_2 > 0;
    Mem_T.VOID[SpinLock_2] := 0;
    return;
}



procedure {:origName "sdv_IoCsqInitialize"} {:osmodel} sdv_IoCsqInitialize(actual_Csq_2: int, actual_CsqInsertIrp: int, actual_CsqRemoveIrp: int, actual_CsqPeekNextIrp: int, actual_CsqAcquireLock: int, actual_CsqReleaseLock: int, actual_CsqCompleteCanceledIrp: int) returns (Tmp_1776: int);
  free ensures {:va_keep} Tmp_1776 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCsqInitialize"} {:osmodel} sdv_IoCsqInitialize(actual_Csq_2: int, actual_CsqInsertIrp: int, actual_CsqRemoveIrp: int, actual_CsqPeekNextIrp: int, actual_CsqAcquireLock: int, actual_CsqReleaseLock: int, actual_CsqCompleteCanceledIrp: int) returns (Tmp_1776: int)
{
  var {:pointer} Csq_2: int;
  var {:scalar} CsqInsertIrp: int;
  var {:scalar} CsqRemoveIrp: int;
  var {:scalar} CsqPeekNextIrp: int;
  var {:scalar} CsqAcquireLock: int;
  var {:scalar} CsqReleaseLock: int;
  var {:scalar} CsqCompleteCanceledIrp: int;

  anon0:
    Csq_2 := actual_Csq_2;
    CsqInsertIrp := actual_CsqInsertIrp;
    CsqRemoveIrp := actual_CsqRemoveIrp;
    CsqPeekNextIrp := actual_CsqPeekNextIrp;
    CsqAcquireLock := actual_CsqAcquireLock;
    CsqReleaseLock := actual_CsqReleaseLock;
    CsqCompleteCanceledIrp := actual_CsqCompleteCanceledIrp;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    assume {:nonnull} Csq_2 != 0;
    assume Csq_2 > 0;
    Tmp_1776 := 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag_5: int) returns (Tmp_1778: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag_5: int) returns (Tmp_1778: int)
{
  var {:pointer} sdv_589: int;
  var {:scalar} NumberOfBytes: int;

  anon0:
    NumberOfBytes := actual_NumberOfBytes;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1951} sdv_589 := __HAVOC_malloc(NumberOfBytes);
    Tmp_1778 := sdv_589;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1778 := 0;
    goto L1;
}



procedure {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_17: int) returns (Tmp_1780: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_17: int) returns (Tmp_1780: int)
{
  var {:pointer} ioWorkItem: int;
  var {:pointer} sdv_591: int;
  var {:scalar} Tmp_1781: int;

  anon0:
    call {:si_unique_call 1952} sdv_591 := __HAVOC_malloc(1);
    ioWorkItem := sdv_591;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ioWorkItem == 0;
    Tmp_1781 := 0;
    goto L27;

  L27:
    assume Tmp_1781 != 0;
    assume {:nonnull} ioWorkItem != 0;
    assume ioWorkItem > 0;
    Tmp_1780 := ioWorkItem;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} ioWorkItem != 0;
    Tmp_1781 := 1;
    goto L27;

  anon6_Then:
    Tmp_1780 := 0;
    goto L1;
}



procedure {:origName "KeAcquireInStackQueuedSpinLock"} {:osmodel} KeAcquireInStackQueuedSpinLock(actual_SpinLock_3: int, actual_LockHandle_1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeAcquireInStackQueuedSpinLock"} {:osmodel} KeAcquireInStackQueuedSpinLock(actual_SpinLock_3: int, actual_LockHandle_1: int)
{
  var vslice_dummy_var_244: int;

  anon0:
    call {:si_unique_call 1953} vslice_dummy_var_244 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    return;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_245: int;

  anon0:
    call {:si_unique_call 1954} vslice_dummy_var_245 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_246: int;

  anon0:
    call {:si_unique_call 1955} vslice_dummy_var_246 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_18: int, actual_DevInstKeyType_1: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_1789: int);
  free ensures {:va_keep} Tmp_1789 == -1073741811 || Tmp_1789 == -1073741808 || Tmp_1789 == -1073741823 || Tmp_1789 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_18: int, actual_DevInstKeyType_1: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_1789: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1789 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1789 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_1789 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1789 := 0;
    goto L1;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_1791: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_1791: int)
{
  var {:scalar} p_6: int;

  anon0:
    Tmp_1791 := p_6;
    return;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_1793: int);
  free ensures {:va_keep} Tmp_1793 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_1793: int)
{

  anon0:
    Tmp_1793 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1795: int);
  free ensures {:va_keep} Tmp_1795 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1795: int)
{

  anon0:
    Tmp_1795 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_19: int, actual_Action: int) returns (Tmp_1797: int);
  free ensures {:va_keep} Tmp_1797 == -1073741823 || Tmp_1797 == -1073741811 || Tmp_1797 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_19: int, actual_Action: int) returns (Tmp_1797: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1797 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1797 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_1797 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_7: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_7: int)
{
  var {:pointer} Event_7: int;
  var vslice_dummy_var_247: int;

  anon0:
    call {:si_unique_call 1956} vslice_dummy_var_247 := __HAVOC_malloc(4);
    Event_7 := actual_Event_7;
    call {:si_unique_call 1957} SLIC_KeClearEvent_entry(strConst__li2bpl38);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Event_7 != 0;
    assume Event_7 > 0;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "DisableIdleTimer"} DisableIdleTimer(actual_parentFdoExt_122: int, actual_latch: int, actual_tag_2: int);
  modifies alloc, Mem_T.VOID, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DisableIdleTimer"} DisableIdleTimer(actual_parentFdoExt_122: int, actual_latch: int, actual_tag_2: int)
{
  var {:pointer} printTag: int;
  var {:scalar} prevIdleTimerState: int;
  var {:scalar} Tmp_1819: int;
  var {:pointer} Tmp_1820: int;
  var {:pointer} sdv_600: int;
  var {:pointer} Tmp_1821: int;
  var {:scalar} Tmp_1823: int;
  var {:pointer} Tmp_1824: int;
  var {:pointer} Tmp_1825: int;
  var {:scalar} Tmp_1826: int;
  var {:scalar} Tmp_1827: int;
  var {:pointer} parentFdoExt_122: int;
  var {:scalar} latch: int;
  var {:scalar} tag_2: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_626: int;
  var vslice_dummy_var_627: int;
  var vslice_dummy_var_628: int;
  var vslice_dummy_var_629: int;
  var vslice_dummy_var_630: int;
  var vslice_dummy_var_631: int;
  var vslice_dummy_var_632: int;

  anon0:
    call {:si_unique_call 1958} vslice_dummy_var_248 := __HAVOC_malloc(4);
    parentFdoExt_122 := actual_parentFdoExt_122;
    latch := actual_latch;
    call {:si_unique_call 1959} tag_2 := __HAVOC_malloc(4);
    Mem_T.VOID[tag_2] := actual_tag_2;
    call {:si_unique_call 1960} Tmp_1824 := __HAVOC_malloc(80);
    call {:si_unique_call 1961} sdv_do_paged_code_check();
    printTag := tag_2;
    Tmp_1824 := strConst__li2bpl40;
    assume {:nonnull} parentFdoExt_122 != 0;
    assume parentFdoExt_122 > 0;
    havoc vslice_dummy_var_626;
    call {:si_unique_call 1962} AcquireMutex(idleTimerStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_122), Tmp_1824, vslice_dummy_var_626);
    assume {:nonnull} printTag != 0;
    assume printTag > 0;
    Tmp_1827 := Mem_T.VOID[printTag];
    assume {:nonnull} printTag != 0;
    assume printTag > 0;
    Tmp_1826 := Mem_T.VOID[printTag + 1 * 4];
    assume {:nonnull} printTag != 0;
    assume printTag > 0;
    Tmp_1823 := Mem_T.VOID[printTag + 2 * 4];
    assume {:nonnull} printTag != 0;
    assume printTag > 0;
    Tmp_1819 := Mem_T.VOID[printTag + 3 * 4];
    havoc Tmp_1825;
    assume {:nonnull} parentFdoExt_122 != 0;
    assume parentFdoExt_122 > 0;
    havoc vslice_dummy_var_627;
    havoc vslice_dummy_var_628;
    havoc vslice_dummy_var_629;
    call {:si_unique_call 1963} WPP_RECORDER_SF_qccccqd(vslice_dummy_var_627, 4, 7, 57, Tmp_1825, vslice_dummy_var_628, Tmp_1819, Tmp_1823, Tmp_1826, Tmp_1827, sdv_600, vslice_dummy_var_629);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} latch != 0;
    call {:si_unique_call 1964} Tmp_1821 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1821 != 0;
    assume Tmp_1821 > 0;
    assume {:nonnull} parentFdoExt_122 != 0;
    assume parentFdoExt_122 > 0;
    havoc vslice_dummy_var_630;
    Mem_T.VOID[Tmp_1821] := vslice_dummy_var_630;
    call {:si_unique_call 1965} vslice_dummy_var_250 := sdv_InterlockedIncrement(Tmp_1821);
    assume {:nonnull} Tmp_1821 != 0;
    assume Tmp_1821 > 0;
    assume {:nonnull} parentFdoExt_122 != 0;
    assume parentFdoExt_122 > 0;
    goto L29;

  L29:
    assume {:nonnull} parentFdoExt_122 != 0;
    assume parentFdoExt_122 > 0;
    havoc prevIdleTimerState;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} prevIdleTimerState == 1;
    goto L35;

  L35:
    assume {:nonnull} parentFdoExt_122 != 0;
    assume parentFdoExt_122 > 0;
    havoc Tmp_1820;
    assume {:nonnull} parentFdoExt_122 != 0;
    assume parentFdoExt_122 > 0;
    havoc vslice_dummy_var_631;
    havoc vslice_dummy_var_632;
    call {:si_unique_call 1966} WPP_RECORDER_SF_qLL(vslice_dummy_var_631, 4, 7, 58, Tmp_1820, vslice_dummy_var_632, prevIdleTimerState, 2);
    call {:si_unique_call 1967} StopIdleTimer(parentFdoExt_122);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  L48:
    call {:si_unique_call 1968} vslice_dummy_var_249 := KeReleaseMutex(0, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} prevIdleTimerState != 1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} prevIdleTimerState != 3;
    goto L48;

  anon12_Then:
    assume {:partition} prevIdleTimerState == 3;
    goto L35;

  anon11_Then:
    assume {:partition} latch == 0;
    goto L29;
}



procedure {:origName "WPP_RECORDER_SF_qqD"} WPP_RECORDER_SF_qqD(actual_AutoLogContext_24: int, actual_level_24: int, actual_flags_24: int, actual_id_25: int, actual_traceGuid_24: int, actual_s_p_e_c_i_a_l_60: int, actual_s_p_e_c_i_a_l_61: int, actual_s_p_e_c_i_a_l_62: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qqD"} WPP_RECORDER_SF_qqD(actual_AutoLogContext_24: int, actual_level_24: int, actual_flags_24: int, actual_id_25: int, actual_traceGuid_24: int, actual_s_p_e_c_i_a_l_60: int, actual_s_p_e_c_i_a_l_61: int, actual_s_p_e_c_i_a_l_62: int)
{
  var {:scalar} Tmp_1829: int;
  var {:scalar} Tmp_1830: int;
  var {:scalar} Tmp_1833: int;
  var {:scalar} Tmp_1835: int;
  var {:scalar} level_24: int;
  var {:scalar} flags_24: int;
  var {:pointer} traceGuid_24: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;

  anon0:
    call {:si_unique_call 1969} vslice_dummy_var_251 := __HAVOC_malloc(4);
    level_24 := actual_level_24;
    flags_24 := actual_flags_24;
    traceGuid_24 := actual_traceGuid_24;
    call {:si_unique_call 1970} vslice_dummy_var_253 := __HAVOC_malloc(4);
    Tmp_1829 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_24 - 1);
    call {:si_unique_call 1971} Tmp_1835 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1972} Tmp_1830 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1973} Tmp_1833 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1974} vslice_dummy_var_252 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_qccccqd"} WPP_RECORDER_SF_qccccqd(actual_AutoLogContext_25: int, actual_level_25: int, actual_flags_25: int, actual_id_26: int, actual_traceGuid_25: int, actual_s_p_e_c_i_a_l_63: int, actual_s_p_e_c_i_a_l_64: int, actual_s_p_e_c_i_a_l_65: int, actual_s_p_e_c_i_a_l_66: int, actual_s_p_e_c_i_a_l_67: int, actual_s_p_e_c_i_a_l_68: int, actual_s_p_e_c_i_a_l_69: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qccccqd"} WPP_RECORDER_SF_qccccqd(actual_AutoLogContext_25: int, actual_level_25: int, actual_flags_25: int, actual_id_26: int, actual_traceGuid_25: int, actual_s_p_e_c_i_a_l_63: int, actual_s_p_e_c_i_a_l_64: int, actual_s_p_e_c_i_a_l_65: int, actual_s_p_e_c_i_a_l_66: int, actual_s_p_e_c_i_a_l_67: int, actual_s_p_e_c_i_a_l_68: int, actual_s_p_e_c_i_a_l_69: int)
{
  var {:scalar} Tmp_1841: int;
  var {:scalar} Tmp_1842: int;
  var {:scalar} Tmp_1846: int;
  var {:scalar} Tmp_1848: int;
  var {:scalar} level_25: int;
  var {:scalar} flags_25: int;
  var {:pointer} traceGuid_25: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;

  anon0:
    call {:si_unique_call 1975} vslice_dummy_var_254 := __HAVOC_malloc(4);
    level_25 := actual_level_25;
    flags_25 := actual_flags_25;
    traceGuid_25 := actual_traceGuid_25;
    call {:si_unique_call 1976} vslice_dummy_var_256 := __HAVOC_malloc(4);
    Tmp_1842 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_25 - 1);
    call {:si_unique_call 1977} Tmp_1841 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1978} Tmp_1846 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1979} Tmp_1848 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1980} vslice_dummy_var_255 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_qL"} WPP_RECORDER_SF_qL(actual_AutoLogContext_26: int, actual_level_26: int, actual_flags_26: int, actual_id_27: int, actual_traceGuid_26: int, actual_s_p_e_c_i_a_l_70: int, actual_s_p_e_c_i_a_l_71: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qL"} WPP_RECORDER_SF_qL(actual_AutoLogContext_26: int, actual_level_26: int, actual_flags_26: int, actual_id_27: int, actual_traceGuid_26: int, actual_s_p_e_c_i_a_l_70: int, actual_s_p_e_c_i_a_l_71: int)
{
  var {:scalar} Tmp_1851: int;
  var {:scalar} Tmp_1853: int;
  var {:scalar} Tmp_1854: int;
  var {:scalar} Tmp_1855: int;
  var {:scalar} level_26: int;
  var {:scalar} flags_26: int;
  var {:pointer} traceGuid_26: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;

  anon0:
    call {:si_unique_call 1981} vslice_dummy_var_257 := __HAVOC_malloc(4);
    level_26 := actual_level_26;
    flags_26 := actual_flags_26;
    traceGuid_26 := actual_traceGuid_26;
    call {:si_unique_call 1982} vslice_dummy_var_259 := __HAVOC_malloc(4);
    Tmp_1851 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_26 - 1);
    call {:si_unique_call 1983} Tmp_1854 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1984} Tmp_1853 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1985} Tmp_1855 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 1986} vslice_dummy_var_258 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "PoCallbackIdleSetDx"} PoCallbackIdleSetDx(actual_devObj_18: int, actual_minorFunction_7: int, actual_structPtr888powerState: int, actual_context_22: int, actual_ioStatus_8: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallbackIdleSetDx"} PoCallbackIdleSetDx(actual_devObj_18: int, actual_minorFunction_7: int, actual_structPtr888powerState: int, actual_context_22: int, actual_ioStatus_8: int)
{
  var {:scalar} powerState: int;
  var {:pointer} Tmp_1876: int;
  var {:pointer} devExt_17: int;
  var {:pointer} parentFdoExt_125: int;
  var {:pointer} event_6: int;
  var {:pointer} devObj_18: int;
  var {:pointer} structPtr888powerState: int;
  var {:pointer} context_22: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_633: int;
  var vslice_dummy_var_634: int;

  anon0:
    call {:si_unique_call 1987} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 1988} vslice_dummy_var_260 := __HAVOC_malloc(4);
    devObj_18 := actual_devObj_18;
    structPtr888powerState := actual_structPtr888powerState;
    context_22 := actual_context_22;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} structPtr888powerState != 0;
    assume structPtr888powerState > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} structPtr888powerState != 0;
    assume structPtr888powerState > 0;
    assume {:nonnull} devObj_18 != 0;
    assume devObj_18 > 0;
    havoc devExt_17;
    event_6 := context_22;
    assume {:nonnull} devExt_17 != 0;
    assume devExt_17 > 0;
    parentFdoExt_125 := parentFdoExt_DEVICE_EXTENSION(devExt_17);
    havoc Tmp_1876;
    assume {:nonnull} parentFdoExt_125 != 0;
    assume parentFdoExt_125 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    havoc vslice_dummy_var_633;
    havoc vslice_dummy_var_634;
    call {:si_unique_call 1989} WPP_RECORDER_SF_L(vslice_dummy_var_633, 4, 3, 36, Tmp_1876, vslice_dummy_var_634);
    call {:si_unique_call 1990} vslice_dummy_var_261 := KeSetEvent(event_6, 0, 0);
    return;
}



procedure {:origName "TerminateIdleTimer"} TerminateIdleTimer(actual_parentFdoExt_126: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "TerminateIdleTimer"} TerminateIdleTimer(actual_parentFdoExt_126: int)
{
  var {:scalar} prevIdleTimerState_1: int;
  var {:pointer} Tmp_1879: int;
  var {:pointer} Tmp_1881: int;
  var {:pointer} parentFdoExt_126: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_635: int;
  var vslice_dummy_var_636: int;
  var vslice_dummy_var_637: int;

  anon0:
    call {:si_unique_call 1991} vslice_dummy_var_262 := __HAVOC_malloc(4);
    parentFdoExt_126 := actual_parentFdoExt_126;
    call {:si_unique_call 1992} Tmp_1879 := __HAVOC_malloc(80);
    call {:si_unique_call 1993} sdv_do_paged_code_check();
    Tmp_1879 := strConst__li2bpl40;
    assume {:nonnull} parentFdoExt_126 != 0;
    assume parentFdoExt_126 > 0;
    havoc vslice_dummy_var_635;
    call {:si_unique_call 1994} AcquireMutex(idleTimerStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_126), Tmp_1879, vslice_dummy_var_635);
    assume {:nonnull} parentFdoExt_126 != 0;
    assume parentFdoExt_126 > 0;
    havoc prevIdleTimerState_1;
    assume {:nonnull} parentFdoExt_126 != 0;
    assume parentFdoExt_126 > 0;
    havoc Tmp_1881;
    assume {:nonnull} parentFdoExt_126 != 0;
    assume parentFdoExt_126 > 0;
    havoc vslice_dummy_var_636;
    havoc vslice_dummy_var_637;
    call {:si_unique_call 1995} WPP_RECORDER_SF_qLL(vslice_dummy_var_636, 4, 7, 64, Tmp_1881, vslice_dummy_var_637, prevIdleTimerState_1, 4);
    call {:si_unique_call 1996} StopIdleTimer(parentFdoExt_126);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1997} vslice_dummy_var_263 := KeReleaseMutex(0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WPP_RECORDER_SF_qLL"} WPP_RECORDER_SF_qLL(actual_AutoLogContext_27: int, actual_level_27: int, actual_flags_27: int, actual_id_28: int, actual_traceGuid_27: int, actual_s_p_e_c_i_a_l_72: int, actual_s_p_e_c_i_a_l_73: int, actual_s_p_e_c_i_a_l_74: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qLL"} WPP_RECORDER_SF_qLL(actual_AutoLogContext_27: int, actual_level_27: int, actual_flags_27: int, actual_id_28: int, actual_traceGuid_27: int, actual_s_p_e_c_i_a_l_72: int, actual_s_p_e_c_i_a_l_73: int, actual_s_p_e_c_i_a_l_74: int)
{
  var {:scalar} Tmp_1883: int;
  var {:scalar} Tmp_1884: int;
  var {:scalar} Tmp_1888: int;
  var {:scalar} Tmp_1889: int;
  var {:scalar} level_27: int;
  var {:scalar} flags_27: int;
  var {:pointer} traceGuid_27: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;

  anon0:
    call {:si_unique_call 1998} vslice_dummy_var_264 := __HAVOC_malloc(4);
    level_27 := actual_level_27;
    flags_27 := actual_flags_27;
    traceGuid_27 := actual_traceGuid_27;
    call {:si_unique_call 1999} vslice_dummy_var_266 := __HAVOC_malloc(4);
    Tmp_1888 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_27 - 1);
    call {:si_unique_call 2000} Tmp_1884 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2001} Tmp_1889 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2002} Tmp_1883 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2003} vslice_dummy_var_265 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "PauseIdleTimer"} PauseIdleTimer(actual_parentFdoExt_127: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PauseIdleTimer"} PauseIdleTimer(actual_parentFdoExt_127: int)
{
  var {:pointer} Tmp_1894: int;
  var {:scalar} prevIdleTimerState_2: int;
  var {:pointer} Tmp_1895: int;
  var {:pointer} Tmp_1896: int;
  var {:pointer} parentFdoExt_127: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_638: int;
  var vslice_dummy_var_639: int;
  var vslice_dummy_var_640: int;
  var vslice_dummy_var_641: int;
  var vslice_dummy_var_642: int;

  anon0:
    call {:si_unique_call 2004} vslice_dummy_var_267 := __HAVOC_malloc(4);
    parentFdoExt_127 := actual_parentFdoExt_127;
    call {:si_unique_call 2005} Tmp_1896 := __HAVOC_malloc(80);
    call {:si_unique_call 2006} sdv_do_paged_code_check();
    Tmp_1896 := strConst__li2bpl40;
    assume {:nonnull} parentFdoExt_127 != 0;
    assume parentFdoExt_127 > 0;
    havoc vslice_dummy_var_638;
    call {:si_unique_call 2007} AcquireMutex(idleTimerStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_127), Tmp_1896, vslice_dummy_var_638);
    assume {:nonnull} parentFdoExt_127 != 0;
    assume parentFdoExt_127 > 0;
    havoc prevIdleTimerState_2;
    havoc Tmp_1894;
    assume {:nonnull} parentFdoExt_127 != 0;
    assume parentFdoExt_127 > 0;
    havoc vslice_dummy_var_639;
    havoc vslice_dummy_var_640;
    call {:si_unique_call 2008} WPP_RECORDER_SF_qL(vslice_dummy_var_639, 4, 7, 59, Tmp_1894, vslice_dummy_var_640, prevIdleTimerState_2);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} prevIdleTimerState_2 == 1;
    assume {:nonnull} parentFdoExt_127 != 0;
    assume parentFdoExt_127 > 0;
    havoc Tmp_1895;
    assume {:nonnull} parentFdoExt_127 != 0;
    assume parentFdoExt_127 > 0;
    havoc vslice_dummy_var_641;
    havoc vslice_dummy_var_642;
    call {:si_unique_call 2009} WPP_RECORDER_SF_qLL(vslice_dummy_var_641, 4, 7, 60, Tmp_1895, vslice_dummy_var_642, prevIdleTimerState_2, 3);
    call {:si_unique_call 2010} StopIdleTimer(parentFdoExt_127);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L21;

  L21:
    call {:si_unique_call 2011} vslice_dummy_var_268 := KeReleaseMutex(0, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} prevIdleTimerState_2 != 1;
    goto L21;
}



procedure {:origName "DeriveParentIdlePowerStateFromChildrenIdleState"} DeriveParentIdlePowerStateFromChildrenIdleState(actual_parentFdoExt_128: int) returns (Tmp_1899: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DeriveParentIdlePowerStateFromChildrenIdleState"} DeriveParentIdlePowerStateFromChildrenIdleState(actual_parentFdoExt_128: int) returns (Tmp_1899: int)
{
  var {:scalar} i_28: int;
  var {:scalar} childPowerState: int;
  var {:pointer} thisFuncPdoExt_4: int;
  var {:pointer} devExt_18: int;
  var {:pointer} Tmp_1900: int;
  var {:pointer} Tmp_1901: int;
  var {:scalar} powerState_11: int;
  var {:pointer} Tmp_1902: int;
  var {:pointer} Tmp_1904: int;
  var {:pointer} devObj_19: int;
  var {:scalar} Tmp_1905: int;
  var {:pointer} parentFdoExt_128: int;
  var vslice_dummy_var_643: int;
  var vslice_dummy_var_644: int;

  anon0:
    parentFdoExt_128 := actual_parentFdoExt_128;
    call {:si_unique_call 2012} Tmp_1902 := __HAVOC_malloc(4);
    powerState_11 := 4;
    i_28 := 0;
    goto L7;

  L7:
    call {:si_unique_call 2013} i_28, childPowerState, thisFuncPdoExt_4, devExt_18, Tmp_1900, Tmp_1901, powerState_11, Tmp_1902, Tmp_1904, devObj_19, Tmp_1905 := DeriveParentIdlePowerStateFromChildrenIdleState_loop_L7(i_28, childPowerState, thisFuncPdoExt_4, devExt_18, Tmp_1900, Tmp_1901, powerState_11, Tmp_1902, Tmp_1904, devObj_19, Tmp_1905, parentFdoExt_128);
    goto L7_last;

  L7_last:
    assume {:nonnull} parentFdoExt_128 != 0;
    assume parentFdoExt_128 > 0;
    havoc Tmp_1904;
    assume {:nonnull} Tmp_1904 != 0;
    assume Tmp_1904 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1905 := i_28;
    assume {:nonnull} parentFdoExt_128 != 0;
    assume parentFdoExt_128 > 0;
    havoc Tmp_1900;
    assume {:nonnull} Tmp_1900 != 0;
    assume Tmp_1900 > 0;
    havoc Tmp_1902;
    assume {:nonnull} Tmp_1902 != 0;
    assume Tmp_1902 > 0;
    havoc devObj_19;
    assume {:nonnull} devObj_19 != 0;
    assume devObj_19 > 0;
    havoc devExt_18;
    assume {:nonnull} devExt_18 != 0;
    assume devExt_18 > 0;
    thisFuncPdoExt_4 := functionPdoExt_DEVICE_EXTENSION(devExt_18);
    assume {:nonnull} thisFuncPdoExt_4 != 0;
    assume thisFuncPdoExt_4 > 0;
    havoc childPowerState;
    assume {:nonnull} thisFuncPdoExt_4 != 0;
    assume thisFuncPdoExt_4 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    havoc Tmp_1901;
    assume {:nonnull} parentFdoExt_128 != 0;
    assume parentFdoExt_128 > 0;
    havoc vslice_dummy_var_643;
    havoc vslice_dummy_var_644;
    call {:si_unique_call 2014} WPP_RECORDER_SF_q(vslice_dummy_var_643, 4, 7, 68, Tmp_1901, vslice_dummy_var_644);
    childPowerState := 3;
    goto L18;

  L18:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} powerState_11 > childPowerState;
    powerState_11 := childPowerState;
    goto L29;

  L29:
    i_28 := i_28 + 1;
    goto L29_dummy;

  L29_dummy:
    assume false;
    return;

  anon7_Then:
    assume {:partition} childPowerState >= powerState_11;
    goto L29;

  anon9_Then:
    goto L18;

  anon8_Then:
    Tmp_1899 := powerState_11;
    return;
}



procedure {:origName "WPP_RECORDER_SF_qq"} WPP_RECORDER_SF_qq(actual_AutoLogContext_28: int, actual_level_28: int, actual_flags_28: int, actual_id_29: int, actual_traceGuid_28: int, actual_s_p_e_c_i_a_l_75: int, actual_s_p_e_c_i_a_l_76: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qq"} WPP_RECORDER_SF_qq(actual_AutoLogContext_28: int, actual_level_28: int, actual_flags_28: int, actual_id_29: int, actual_traceGuid_28: int, actual_s_p_e_c_i_a_l_75: int, actual_s_p_e_c_i_a_l_76: int)
{
  var {:scalar} Tmp_1908: int;
  var {:scalar} Tmp_1911: int;
  var {:scalar} Tmp_1914: int;
  var {:scalar} Tmp_1915: int;
  var {:scalar} level_28: int;
  var {:scalar} flags_28: int;
  var {:pointer} traceGuid_28: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;

  anon0:
    call {:si_unique_call 2015} vslice_dummy_var_269 := __HAVOC_malloc(4);
    level_28 := actual_level_28;
    flags_28 := actual_flags_28;
    traceGuid_28 := actual_traceGuid_28;
    call {:si_unique_call 2016} vslice_dummy_var_271 := __HAVOC_malloc(4);
    Tmp_1914 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_28 - 1);
    call {:si_unique_call 2017} Tmp_1915 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2018} Tmp_1908 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2019} Tmp_1911 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2020} vslice_dummy_var_270 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "IdleFinishCompletionWorker"} IdleFinishCompletionWorker(actual_parentFdoExt_129: int, actual_context_23: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.VOID, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IdleFinishCompletionWorker"} IdleFinishCompletionWorker(actual_parentFdoExt_129: int, actual_context_23: int)
{
  var {:pointer} idleIrp_1: int;
  var {:pointer} idleContext: int;
  var {:pointer} parentFdoExt_129: int;
  var {:pointer} context_23: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_645: int;

  anon0:
    call {:si_unique_call 2021} vslice_dummy_var_272 := __HAVOC_malloc(4);
    parentFdoExt_129 := actual_parentFdoExt_129;
    context_23 := actual_context_23;
    idleContext := context_23;
    assume {:nonnull} idleContext != 0;
    assume idleContext > 0;
    havoc idleIrp_1;
    assume {:nonnull} parentFdoExt_129 != 0;
    assume parentFdoExt_129 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L11;

  L11:
    call {:si_unique_call 2022} ChangeIdleState(parentFdoExt_129, 0, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2023} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} parentFdoExt_129 != 0;
    assume parentFdoExt_129 > 0;
    call {:si_unique_call 2024} vslice_dummy_var_273 := KeSetEvent(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_129), 0, 0);
    call {:si_unique_call 2025} UsbcReleaseRemoveLock(parentFdoExt_129, idleIrp_1);
    assume {:nonnull} parentFdoExt_129 != 0;
    assume parentFdoExt_129 > 0;
    call {:si_unique_call 2026} vslice_dummy_var_274 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_129), idleIrp_1);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:nonnull} idleContext != 0;
    assume idleContext > 0;
    havoc vslice_dummy_var_645;
    call {:si_unique_call 2027} CompleteAllFunctionIdleIrps(parentFdoExt_129, vslice_dummy_var_645);
    goto L11;
}



procedure {:origName "WPP_RECORDER_SF_qdL"} WPP_RECORDER_SF_qdL(actual_AutoLogContext_29: int, actual_level_29: int, actual_flags_29: int, actual_id_30: int, actual_traceGuid_29: int, actual_s_p_e_c_i_a_l_77: int, actual_s_p_e_c_i_a_l_78: int, actual_s_p_e_c_i_a_l_79: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qdL"} WPP_RECORDER_SF_qdL(actual_AutoLogContext_29: int, actual_level_29: int, actual_flags_29: int, actual_id_30: int, actual_traceGuid_29: int, actual_s_p_e_c_i_a_l_77: int, actual_s_p_e_c_i_a_l_78: int, actual_s_p_e_c_i_a_l_79: int)
{
  var {:scalar} Tmp_1932: int;
  var {:scalar} Tmp_1933: int;
  var {:scalar} Tmp_1938: int;
  var {:scalar} Tmp_1941: int;
  var {:scalar} level_29: int;
  var {:scalar} flags_29: int;
  var {:pointer} traceGuid_29: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;

  anon0:
    call {:si_unique_call 2028} vslice_dummy_var_275 := __HAVOC_malloc(4);
    level_29 := actual_level_29;
    flags_29 := actual_flags_29;
    traceGuid_29 := actual_traceGuid_29;
    call {:si_unique_call 2029} vslice_dummy_var_277 := __HAVOC_malloc(4);
    Tmp_1938 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_29 - 1);
    call {:si_unique_call 2030} Tmp_1941 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2031} Tmp_1933 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2032} Tmp_1932 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2033} vslice_dummy_var_276 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "WPP_RECORDER_SF_qqd"} WPP_RECORDER_SF_qqd(actual_AutoLogContext_30: int, actual_level_30: int, actual_flags_30: int, actual_id_31: int, actual_traceGuid_30: int, actual_s_p_e_c_i_a_l_80: int, actual_s_p_e_c_i_a_l_81: int, actual_s_p_e_c_i_a_l_82: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qqd"} WPP_RECORDER_SF_qqd(actual_AutoLogContext_30: int, actual_level_30: int, actual_flags_30: int, actual_id_31: int, actual_traceGuid_30: int, actual_s_p_e_c_i_a_l_80: int, actual_s_p_e_c_i_a_l_81: int, actual_s_p_e_c_i_a_l_82: int)
{
  var {:scalar} Tmp_1944: int;
  var {:scalar} Tmp_1946: int;
  var {:scalar} Tmp_1951: int;
  var {:scalar} Tmp_1952: int;
  var {:scalar} level_30: int;
  var {:scalar} flags_30: int;
  var {:pointer} traceGuid_30: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;

  anon0:
    call {:si_unique_call 2034} vslice_dummy_var_278 := __HAVOC_malloc(4);
    level_30 := actual_level_30;
    flags_30 := actual_flags_30;
    traceGuid_30 := actual_traceGuid_30;
    call {:si_unique_call 2035} vslice_dummy_var_280 := __HAVOC_malloc(4);
    Tmp_1952 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_30 - 1);
    call {:si_unique_call 2036} Tmp_1944 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2037} Tmp_1951 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2038} Tmp_1946 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2039} vslice_dummy_var_279 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "CompleteFunctionIdleIrp"} CompleteFunctionIdleIrp(actual_functionPdoExt_59: int, actual_ntStatus_32: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompleteFunctionIdleIrp"} CompleteFunctionIdleIrp(actual_functionPdoExt_59: int, actual_ntStatus_32: int)
{
  var {:pointer} parentFdoExt_131: int;
  var {:pointer} irpToComplete_2: int;
  var {:pointer} Tmp_1955: int;
  var {:pointer} functionPdoExt_59: int;
  var {:scalar} ntStatus_32: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_646: int;

  anon0:
    call {:si_unique_call 2040} vslice_dummy_var_281 := __HAVOC_malloc(4);
    functionPdoExt_59 := actual_functionPdoExt_59;
    ntStatus_32 := actual_ntStatus_32;
    irpToComplete_2 := 0;
    assume {:nonnull} functionPdoExt_59 != 0;
    assume functionPdoExt_59 > 0;
    havoc parentFdoExt_131;
    call {:si_unique_call 2041} irpToComplete_2 := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} irpToComplete_2 != 0;
    assume {:nonnull} irpToComplete_2 != 0;
    assume irpToComplete_2 > 0;
    havoc Tmp_1955;
    assume {:nonnull} parentFdoExt_131 != 0;
    assume parentFdoExt_131 > 0;
    havoc vslice_dummy_var_646;
    call {:si_unique_call 2042} WPP_RECORDER_SF_qd(vslice_dummy_var_646, 4, 7, 33, Tmp_1955, irpToComplete_2, ntStatus_32);
    call {:si_unique_call 2043} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2044} UsbcReleaseRemoveLock(parentFdoExt_131, irpToComplete_2);
    assume {:nonnull} parentFdoExt_131 != 0;
    assume parentFdoExt_131 > 0;
    call {:si_unique_call 2045} vslice_dummy_var_282 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_131), irpToComplete_2);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} irpToComplete_2 == 0;
    goto L1;
}



procedure {:origName "EnableIdleTimer"} EnableIdleTimer(actual_parentFdoExt_132: int, actual_unlatch: int, actual_tag_3: int);
  modifies alloc, Mem_T.VOID, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "EnableIdleTimer"} EnableIdleTimer(actual_parentFdoExt_132: int, actual_unlatch: int, actual_tag_3: int)
{
  var {:pointer} printTag_1: int;
  var {:scalar} count: int;
  var {:scalar} prevIdleTimerState_3: int;
  var {:pointer} Tmp_1957: int;
  var {:pointer} sdv_637: int;
  var {:pointer} Tmp_1958: int;
  var {:scalar} Tmp_1959: int;
  var {:scalar} Tmp_1960: int;
  var {:scalar} Tmp_1961: int;
  var {:scalar} sdv_638: int;
  var {:pointer} Tmp_1963: int;
  var {:pointer} Tmp_1964: int;
  var {:scalar} Tmp_1965: int;
  var {:pointer} parentFdoExt_132: int;
  var {:scalar} unlatch: int;
  var {:scalar} tag_3: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_647: int;
  var vslice_dummy_var_648: int;
  var vslice_dummy_var_649: int;
  var vslice_dummy_var_650: int;
  var vslice_dummy_var_651: int;
  var vslice_dummy_var_652: int;
  var vslice_dummy_var_653: int;

  anon0:
    call {:si_unique_call 2046} vslice_dummy_var_283 := __HAVOC_malloc(4);
    parentFdoExt_132 := actual_parentFdoExt_132;
    unlatch := actual_unlatch;
    call {:si_unique_call 2047} tag_3 := __HAVOC_malloc(4);
    Mem_T.VOID[tag_3] := actual_tag_3;
    call {:si_unique_call 2048} Tmp_1964 := __HAVOC_malloc(80);
    count := 0;
    call {:si_unique_call 2049} sdv_do_paged_code_check();
    printTag_1 := tag_3;
    Tmp_1964 := strConst__li2bpl40;
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    havoc vslice_dummy_var_647;
    call {:si_unique_call 2050} AcquireMutex(idleTimerStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_132), Tmp_1964, vslice_dummy_var_647);
    assume {:nonnull} printTag_1 != 0;
    assume printTag_1 > 0;
    Tmp_1959 := Mem_T.VOID[printTag_1];
    assume {:nonnull} printTag_1 != 0;
    assume printTag_1 > 0;
    Tmp_1961 := Mem_T.VOID[printTag_1 + 1 * 4];
    assume {:nonnull} printTag_1 != 0;
    assume printTag_1 > 0;
    Tmp_1965 := Mem_T.VOID[printTag_1 + 2 * 4];
    assume {:nonnull} printTag_1 != 0;
    assume printTag_1 > 0;
    Tmp_1960 := Mem_T.VOID[printTag_1 + 3 * 4];
    havoc Tmp_1963;
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    havoc vslice_dummy_var_648;
    havoc vslice_dummy_var_649;
    havoc vslice_dummy_var_650;
    call {:si_unique_call 2051} WPP_RECORDER_SF_qccccqd(vslice_dummy_var_648, 4, 7, 55, Tmp_1963, vslice_dummy_var_649, Tmp_1960, Tmp_1965, Tmp_1961, Tmp_1959, sdv_637, vslice_dummy_var_650);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} unlatch != 0;
    call {:si_unique_call 2052} Tmp_1957 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1957 != 0;
    assume Tmp_1957 > 0;
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    havoc vslice_dummy_var_651;
    Mem_T.VOID[Tmp_1957] := vslice_dummy_var_651;
    call {:si_unique_call 2053} sdv_638 := sdv_InterlockedDecrement(Tmp_1957);
    assume {:nonnull} Tmp_1957 != 0;
    assume Tmp_1957 > 0;
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    count := sdv_638;
    goto L30;

  L30:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} count != 0;
    goto L36;

  L36:
    call {:si_unique_call 2054} vslice_dummy_var_284 := KeReleaseMutex(0, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} count == 0;
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L42;

  L42:
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    havoc prevIdleTimerState_3;
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    havoc Tmp_1958;
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    havoc vslice_dummy_var_652;
    havoc vslice_dummy_var_653;
    call {:si_unique_call 2055} WPP_RECORDER_SF_qLL(vslice_dummy_var_652, 4, 7, 56, Tmp_1958, vslice_dummy_var_653, prevIdleTimerState_3, 1);
    call {:si_unique_call 2056} StartIdleTimer(parentFdoExt_132);
    goto L36;

  anon13_Then:
    assume {:nonnull} parentFdoExt_132 != 0;
    assume parentFdoExt_132 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L42;

  anon14_Then:
    goto L36;

  anon11_Then:
    assume {:partition} unlatch == 0;
    goto L30;
}



procedure {:origName "ResumeIdleTimer"} ResumeIdleTimer(actual_parentFdoExt_133: int) returns (Tmp_1966: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ResumeIdleTimer"} ResumeIdleTimer(actual_parentFdoExt_133: int) returns (Tmp_1966: int)
{
  var {:pointer} Tmp_1967: int;
  var {:scalar} status_93: int;
  var {:pointer} parentFdoExt_133: int;
  var vslice_dummy_var_654: int;
  var vslice_dummy_var_655: int;

  anon0:
    parentFdoExt_133 := actual_parentFdoExt_133;
    call {:si_unique_call 2057} status_93 := AllocateWorkerIfNeeded#1(parentFdoExt_133, li2bplFunctionConstant822, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_93 < 0;
    havoc Tmp_1967;
    assume {:nonnull} parentFdoExt_133 != 0;
    assume parentFdoExt_133 > 0;
    havoc vslice_dummy_var_654;
    havoc vslice_dummy_var_655;
    call {:si_unique_call 2058} WPP_RECORDER_SF_q(vslice_dummy_var_654, 2, 7, 63, Tmp_1967, vslice_dummy_var_655);
    goto L12;

  L12:
    Tmp_1966 := status_93;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 <= status_93;
    goto L12;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SetPdoIdle"} SetPdoIdle(actual_parentFdoExt_134: int, actual_functionPdoExt_60: int, actual_reason: int, actual_idle: int, actual_acquireLock: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetPdoIdle"} SetPdoIdle(actual_parentFdoExt_134: int, actual_functionPdoExt_60: int, actual_reason: int, actual_idle: int, actual_acquireLock: int)
{
  var {:pointer} Tmp_1969: int;
  var {:scalar} oldIrql_25: int;
  var {:pointer} Tmp_1971: int;
  var {:pointer} parentFdoExt_134: int;
  var {:pointer} functionPdoExt_60: int;
  var {:scalar} reason: int;
  var {:scalar} idle: int;
  var {:scalar} acquireLock: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_656: int;
  var vslice_dummy_var_657: int;
  var vslice_dummy_var_658: int;

  anon0:
    call {:si_unique_call 2059} vslice_dummy_var_285 := __HAVOC_malloc(4);
    parentFdoExt_134 := actual_parentFdoExt_134;
    functionPdoExt_60 := actual_functionPdoExt_60;
    reason := actual_reason;
    idle := actual_idle;
    acquireLock := actual_acquireLock;
    oldIrql_25 := 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} acquireLock != 0;
    call {:si_unique_call 2060} Tmp_1969 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1969 != 0;
    assume Tmp_1969 > 0;
    Mem_T.VOID[Tmp_1969] := oldIrql_25;
    call {:si_unique_call 2061} sdv_KeAcquireSpinLock(0, Tmp_1969);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1969 != 0;
    assume Tmp_1969 > 0;
    oldIrql_25 := Mem_T.VOID[Tmp_1969];
    goto L6;

  L6:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} reason != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} reason != 2;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} reason != 3;
    goto L23;

  L23:
    havoc Tmp_1971;
    assume {:nonnull} functionPdoExt_60 != 0;
    assume functionPdoExt_60 > 0;
    assume {:nonnull} parentFdoExt_134 != 0;
    assume parentFdoExt_134 > 0;
    havoc vslice_dummy_var_656;
    havoc vslice_dummy_var_657;
    havoc vslice_dummy_var_658;
    call {:si_unique_call 2062} WPP_RECORDER_SF_qdL(vslice_dummy_var_656, 4, 7, 53, Tmp_1971, vslice_dummy_var_657, vslice_dummy_var_658, reason);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} acquireLock != 0;
    call {:si_unique_call 2063} sdv_KeReleaseSpinLock(0, oldIrql_25);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} acquireLock == 0;
    goto L1;

  anon18_Then:
    assume {:partition} reason == 3;
    assume {:nonnull} parentFdoExt_134 != 0;
    assume parentFdoExt_134 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} functionPdoExt_60 != 0;
    assume functionPdoExt_60 > 0;
    goto L23;

  anon16_Then:
    assume {:nonnull} functionPdoExt_60 != 0;
    assume functionPdoExt_60 > 0;
    goto L23;

  anon19_Then:
    assume {:partition} reason == 2;
    assume {:nonnull} functionPdoExt_60 != 0;
    assume functionPdoExt_60 > 0;
    goto L23;

  anon15_Then:
    assume {:partition} reason == 1;
    assume {:nonnull} functionPdoExt_60 != 0;
    assume functionPdoExt_60 > 0;
    goto L23;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} acquireLock == 0;
    goto L6;
}



procedure {:origName "StartIdleTimer"} StartIdleTimer(actual_parentFdoExt_135: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "StartIdleTimer"} StartIdleTimer(actual_parentFdoExt_135: int)
{
  var {:scalar} period: int;
  var {:scalar} dueTime_1: int;
  var {:pointer} Tmp_1972: int;
  var {:pointer} parentFdoExt_135: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_659: int;

  anon0:
    call {:si_unique_call 2064} dueTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2065} vslice_dummy_var_286 := __HAVOC_malloc(4);
    parentFdoExt_135 := actual_parentFdoExt_135;
    assume {:nonnull} parentFdoExt_135 != 0;
    assume parentFdoExt_135 > 0;
    havoc period;
    call {:si_unique_call 2066} sdv_do_paged_code_check();
    assume {:nonnull} dueTime_1 != 0;
    assume dueTime_1 > 0;
    havoc Tmp_1972;
    assume {:nonnull} parentFdoExt_135 != 0;
    assume parentFdoExt_135 > 0;
    havoc vslice_dummy_var_659;
    call {:si_unique_call 2067} WPP_RECORDER_SF_(vslice_dummy_var_659, 4, 7, 52, Tmp_1972);
    call {:si_unique_call 2068} vslice_dummy_var_287 := corral_nondet();
    return;
}



procedure {:origName "CompleteAllFunctionIdleIrps"} CompleteAllFunctionIdleIrps(actual_parentFdoExt_136: int, actual_status_94: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompleteAllFunctionIdleIrps"} CompleteAllFunctionIdleIrps(actual_parentFdoExt_136: int, actual_status_94: int)
{
  var {:scalar} i_30: int;
  var {:pointer} Tmp_1975: int;
  var {:pointer} devExt_19: int;
  var {:pointer} Tmp_1976: int;
  var {:scalar} sdv_642: int;
  var {:pointer} listEntry_5: int;
  var {:scalar} irpCompletionList_1: int;
  var {:pointer} Tmp_1977: int;
  var {:pointer} Tmp_1978: int;
  var {:pointer} irpToComplete_3: int;
  var {:pointer} sdv_645: int;
  var {:pointer} irp_67: int;
  var {:pointer} devObj_20: int;
  var {:scalar} Tmp_1981: int;
  var {:pointer} Tmp_1982: int;
  var {:pointer} parentFdoExt_136: int;
  var {:scalar} status_94: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_660: int;
  var vslice_dummy_var_661: int;
  var vslice_dummy_var_662: int;

  anon0:
    call {:si_unique_call 2069} irpCompletionList_1 := __HAVOC_malloc(8);
    call {:si_unique_call 2070} vslice_dummy_var_288 := __HAVOC_malloc(4);
    parentFdoExt_136 := actual_parentFdoExt_136;
    status_94 := actual_status_94;
    call {:si_unique_call 2071} Tmp_1982 := __HAVOC_malloc(4);
    irp_67 := 0;
    irpToComplete_3 := 0;
    havoc Tmp_1976;
    assume {:nonnull} parentFdoExt_136 != 0;
    assume parentFdoExt_136 > 0;
    havoc vslice_dummy_var_660;
    havoc vslice_dummy_var_661;
    call {:si_unique_call 2072} WPP_RECORDER_SF_q(vslice_dummy_var_660, 4, 7, 34, Tmp_1976, vslice_dummy_var_661);
    call {:si_unique_call 2073} InitializeListHead(irpCompletionList_1);
    i_30 := 0;
    goto L24;

  L24:
    call {:si_unique_call 2074} i_30, Tmp_1975, devExt_19, Tmp_1978, irpToComplete_3, devObj_20, Tmp_1981, Tmp_1982, vslice_dummy_var_289 := CompleteAllFunctionIdleIrps_loop_L24(i_30, Tmp_1975, devExt_19, irpCompletionList_1, Tmp_1978, irpToComplete_3, devObj_20, Tmp_1981, Tmp_1982, parentFdoExt_136, vslice_dummy_var_289);
    goto L24_last;

  L24_last:
    assume {:nonnull} parentFdoExt_136 != 0;
    assume parentFdoExt_136 > 0;
    havoc Tmp_1978;
    assume {:nonnull} Tmp_1978 != 0;
    assume Tmp_1978 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_1981 := i_30;
    assume {:nonnull} parentFdoExt_136 != 0;
    assume parentFdoExt_136 > 0;
    havoc Tmp_1975;
    assume {:nonnull} Tmp_1975 != 0;
    assume Tmp_1975 > 0;
    havoc Tmp_1982;
    assume {:nonnull} Tmp_1982 != 0;
    assume Tmp_1982 > 0;
    havoc devObj_20;
    assume {:nonnull} devObj_20 != 0;
    assume devObj_20 > 0;
    havoc devExt_19;
    assume {:nonnull} devExt_19 != 0;
    assume devExt_19 > 0;
    call {:si_unique_call 2075} irpToComplete_3 := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irpToComplete_3 != 0;
    assume {:nonnull} irpToComplete_3 != 0;
    assume irpToComplete_3 > 0;
    call {:si_unique_call 2076} vslice_dummy_var_289 := sdv_InsertTailList(irpCompletionList_1, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irpToComplete_3))));
    goto L38;

  L38:
    i_30 := i_30 + 1;
    goto L38_dummy;

  L38_dummy:
    assume false;
    return;

  anon7_Then:
    assume {:partition} irpToComplete_3 == 0;
    goto L38;

  anon9_Then:
    goto L25;

  L25:
    call {:si_unique_call 2077} sdv_642, listEntry_5, Tmp_1977, sdv_645, irp_67, vslice_dummy_var_290 := CompleteAllFunctionIdleIrps_loop_L25(sdv_642, listEntry_5, irpCompletionList_1, Tmp_1977, sdv_645, irp_67, parentFdoExt_136, status_94, vslice_dummy_var_290);
    goto L25_last;

  L25_last:
    call {:si_unique_call 2084} sdv_642 := sdv_IsListEmpty(0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_642 == 0;
    call {:si_unique_call 2078} listEntry_5 := RemoveHeadList(irpCompletionList_1);
    call {:si_unique_call 2079} sdv_645 := sdv_containing_record(listEntry_5, 88);
    irp_67 := sdv_645;
    assume {:nonnull} irp_67 != 0;
    assume irp_67 > 0;
    havoc Tmp_1977;
    assume {:nonnull} parentFdoExt_136 != 0;
    assume parentFdoExt_136 > 0;
    havoc vslice_dummy_var_662;
    call {:si_unique_call 2080} WPP_RECORDER_SF_qd(vslice_dummy_var_662, 4, 7, 35, Tmp_1977, irp_67, status_94);
    call {:si_unique_call 2081} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2082} UsbcReleaseRemoveLock(parentFdoExt_136, irp_67);
    assume {:nonnull} parentFdoExt_136 != 0;
    assume parentFdoExt_136 > 0;
    call {:si_unique_call 2083} vslice_dummy_var_290 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_136), irp_67);
    goto anon8_Else_dummy;

  anon8_Else_dummy:
    assume false;
    return;

  anon8_Then:
    assume {:partition} sdv_642 != 0;
    return;
}



procedure {:origName "StopIdleTimer"} StopIdleTimer(actual_parentFdoExt_137: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "StopIdleTimer"} StopIdleTimer(actual_parentFdoExt_137: int)
{
  var {:pointer} Tmp_1984: int;
  var {:pointer} Tmp_1986: int;
  var {:pointer} parentFdoExt_137: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_663: int;
  var vslice_dummy_var_664: int;

  anon0:
    call {:si_unique_call 2085} vslice_dummy_var_291 := __HAVOC_malloc(4);
    parentFdoExt_137 := actual_parentFdoExt_137;
    call {:si_unique_call 2086} Tmp_1984 := __HAVOC_malloc(196);
    call {:si_unique_call 2087} sdv_do_paged_code_check();
    call {:si_unique_call 2088} vslice_dummy_var_292 := KeCancelTimer(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2089} KeFlushQueuedDpcs();
    havoc Tmp_1986;
    assume {:nonnull} parentFdoExt_137 != 0;
    assume parentFdoExt_137 > 0;
    havoc vslice_dummy_var_663;
    call {:si_unique_call 2090} WPP_RECORDER_SF_(vslice_dummy_var_663, 4, 2, 51, Tmp_1986);
    Tmp_1984 := strConst__li2bpl42;
    assume {:nonnull} parentFdoExt_137 != 0;
    assume parentFdoExt_137 > 0;
    havoc vslice_dummy_var_664;
    call {:si_unique_call 2091} WaitForSignal(noIdleDpcPendingEvent_PARENT_FDO_EXTENSION(parentFdoExt_137), Tmp_1984, vslice_dummy_var_664);
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentIdleCancelRoutine"} ParentIdleCancelRoutine(actual_DeviceObject_21: int, actual_Irp_12: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentIdleCancelRoutine"} ParentIdleCancelRoutine(actual_DeviceObject_21: int, actual_Irp_12: int)
{
  var {:pointer} irpSp_36: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_293: int;

  anon0:
    call {:si_unique_call 2092} vslice_dummy_var_293 := __HAVOC_malloc(4);
    Irp_12 := actual_Irp_12;
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    call {:si_unique_call 2093} IoReleaseCancelSpinLock(Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_12)]);
    call {:si_unique_call 2094} irpSp_36 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    assume {:nonnull} irpSp_36 != 0;
    assume irpSp_36 > 0;
    return;
}



procedure {:origName "QueueIdleCallbackWorkItemForFunctionSuspend"} QueueIdleCallbackWorkItemForFunctionSuspend(actual_functionPdoExt_61: int, actual_parentFdoExt_138: int, actual_idleIrp_2: int) returns (Tmp_1989: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "QueueIdleCallbackWorkItemForFunctionSuspend"} QueueIdleCallbackWorkItemForFunctionSuspend(actual_functionPdoExt_61: int, actual_parentFdoExt_138: int, actual_idleIrp_2: int) returns (Tmp_1989: int)
{
  var {:pointer} Tmp_1990: int;
  var {:pointer} Tmp_1991: int;
  var {:scalar} status_95: int;
  var {:pointer} Tmp_1993: int;
  var {:pointer} functionPdoExt_61: int;
  var {:pointer} parentFdoExt_138: int;
  var {:pointer} idleIrp_2: int;
  var vslice_dummy_var_665: int;
  var vslice_dummy_var_666: int;

  anon0:
    functionPdoExt_61 := actual_functionPdoExt_61;
    parentFdoExt_138 := actual_parentFdoExt_138;
    idleIrp_2 := actual_idleIrp_2;
    Tmp_1990 := li2bplFunctionConstant827;
    call {:si_unique_call 2095} status_95 := UsbcAcquireRemoveLock(parentFdoExt_138, -344821929, Tmp_1990);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_95 < 0;
    havoc Tmp_1991;
    assume {:nonnull} parentFdoExt_138 != 0;
    assume parentFdoExt_138 > 0;
    havoc vslice_dummy_var_665;
    call {:si_unique_call 2096} WPP_RECORDER_SF_(vslice_dummy_var_665, 2, 8, 66, Tmp_1991);
    Tmp_1989 := status_95;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 <= status_95;
    call {:si_unique_call 2097} SET_FUNCTION_PDO_EXT_IN_IRP(idleIrp_2, functionPdoExt_61);
    call {:si_unique_call 2098} sdv_IoMarkIrpPending(0);
    assume {:nonnull} functionPdoExt_61 != 0;
    assume functionPdoExt_61 > 0;
    havoc Tmp_1993;
    assume {:nonnull} Tmp_1993 != 0;
    assume Tmp_1993 > 0;
    havoc vslice_dummy_var_666;
    call {:si_unique_call 2099} IoQueueWorkItem#1(vslice_dummy_var_666, li2bplFunctionConstant827, 1, idleIrp_2);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1989 := 259;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CheckParentIdle"} CheckParentIdle(actual_parentFdoExt_140: int);
  modifies alloc, Mem_T.VOID, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CheckParentIdle"} CheckParentIdle(actual_parentFdoExt_140: int)
{
  var {:scalar} prevIdleTimerState_4: int;
  var {:pointer} Tmp_1998: int;
  var {:pointer} Tmp_1999: int;
  var {:pointer} parentFdoExt_140: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_667: int;
  var vslice_dummy_var_668: int;
  var vslice_dummy_var_669: int;

  anon0:
    call {:si_unique_call 2100} vslice_dummy_var_294 := __HAVOC_malloc(4);
    parentFdoExt_140 := actual_parentFdoExt_140;
    call {:si_unique_call 2101} Tmp_1999 := __HAVOC_malloc(80);
    call {:si_unique_call 2102} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_140 != 0;
    assume parentFdoExt_140 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_1999 := strConst__li2bpl40;
    assume {:nonnull} parentFdoExt_140 != 0;
    assume parentFdoExt_140 > 0;
    havoc vslice_dummy_var_667;
    call {:si_unique_call 2103} AcquireMutex(idleTimerStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_140), Tmp_1999, vslice_dummy_var_667);
    assume {:nonnull} parentFdoExt_140 != 0;
    assume parentFdoExt_140 > 0;
    havoc prevIdleTimerState_4;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} prevIdleTimerState_4 != 0;
    call {:si_unique_call 2104} vslice_dummy_var_295 := KeReleaseMutex(0, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} prevIdleTimerState_4 == 0;
    assume {:nonnull} parentFdoExt_140 != 0;
    assume parentFdoExt_140 > 0;
    havoc Tmp_1998;
    assume {:nonnull} parentFdoExt_140 != 0;
    assume parentFdoExt_140 > 0;
    havoc vslice_dummy_var_668;
    havoc vslice_dummy_var_669;
    call {:si_unique_call 2105} WPP_RECORDER_SF_qLL(vslice_dummy_var_668, 4, 7, 10, Tmp_1998, vslice_dummy_var_669, prevIdleTimerState_4, 2);
    call {:si_unique_call 2106} vslice_dummy_var_296 := KeReleaseMutex(0, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2107} EnableIdleTimer(parentFdoExt_140, 0, -800894903);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    goto L1;
}



procedure {:origName "WPP_RECORDER_SF_L"} WPP_RECORDER_SF_L(actual_AutoLogContext_31: int, actual_level_31: int, actual_flags_31: int, actual_id_32: int, actual_traceGuid_31: int, actual_s_p_e_c_i_a_l_83: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_L"} WPP_RECORDER_SF_L(actual_AutoLogContext_31: int, actual_level_31: int, actual_flags_31: int, actual_id_32: int, actual_traceGuid_31: int, actual_s_p_e_c_i_a_l_83: int)
{
  var {:scalar} Tmp_2002: int;
  var {:scalar} Tmp_2006: int;
  var {:scalar} Tmp_2008: int;
  var {:scalar} Tmp_2010: int;
  var {:scalar} level_31: int;
  var {:scalar} flags_31: int;
  var {:pointer} traceGuid_31: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;

  anon0:
    call {:si_unique_call 2108} vslice_dummy_var_297 := __HAVOC_malloc(4);
    level_31 := actual_level_31;
    flags_31 := actual_flags_31;
    traceGuid_31 := actual_traceGuid_31;
    call {:si_unique_call 2109} vslice_dummy_var_299 := __HAVOC_malloc(4);
    Tmp_2010 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_31 - 1);
    call {:si_unique_call 2110} Tmp_2008 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2111} Tmp_2006 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2112} Tmp_2002 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2113} vslice_dummy_var_298 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var {:scalar} Tmp_2018: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_670: int;

  anon0:
    call {:si_unique_call 2114} vslice_dummy_var_300 := __HAVOC_malloc(4);
    call {:si_unique_call 2115} Tmp_2018 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_2018 != 0;
    assume Tmp_2018 > 0;
    havoc vslice_dummy_var_670;
    Mem_T.VOID[Tmp_2018] := vslice_dummy_var_670;
    assume gSetIdleTag == -750173134;
    return;
}



procedure {:origName "ChangeIdleState"} ChangeIdleState(actual_parentFdoExt_142: int, actual_newState_1: int, actual_acquireLock_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.VOID, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ChangeIdleState"} ChangeIdleState(actual_parentFdoExt_142: int, actual_newState_1: int, actual_acquireLock_1: int)
{
  var {:scalar} oldIrql_26: int;
  var {:pointer} Tmp_2020: int;
  var {:pointer} Tmp_2021: int;
  var {:pointer} parentFdoExt_142: int;
  var {:scalar} newState_1: int;
  var {:scalar} acquireLock_1: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_671: int;
  var vslice_dummy_var_672: int;
  var vslice_dummy_var_673: int;

  anon0:
    call {:si_unique_call 2116} vslice_dummy_var_301 := __HAVOC_malloc(4);
    parentFdoExt_142 := actual_parentFdoExt_142;
    newState_1 := actual_newState_1;
    acquireLock_1 := actual_acquireLock_1;
    oldIrql_26 := 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} acquireLock_1 == 0;
    goto L14;

  L14:
    havoc Tmp_2020;
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    havoc vslice_dummy_var_671;
    havoc vslice_dummy_var_672;
    havoc vslice_dummy_var_673;
    call {:si_unique_call 2117} WPP_RECORDER_SF_qLL(vslice_dummy_var_671, 4, 7, 54, Tmp_2020, vslice_dummy_var_672, vslice_dummy_var_673, newState_1);
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L30;

  L30:
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} acquireLock_1 != 0;
    call {:si_unique_call 2118} sdv_KeReleaseSpinLock(0, oldIrql_26);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon32_Then:
    assume {:partition} acquireLock_1 == 0;
    goto L1;

  anon25_Then:
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    call {:si_unique_call 2119} vslice_dummy_var_303 := KeSetEvent(idleCallbackBusyEvent_PARENT_FDO_EXTENSION(parentFdoExt_142), 0, 0);
    goto L30;

  anon26_Then:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} newState_1 == 5;
    assume {:nonnull} parentFdoExt_142 != 0;
    assume parentFdoExt_142 > 0;
    call {:si_unique_call 2120} vslice_dummy_var_302 := KeResetEvent(idleCallbackBusyEvent_PARENT_FDO_EXTENSION(parentFdoExt_142));
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} newState_1 != 5;
    goto L30;

  anon27_Then:
    goto L30;

  anon28_Then:
    goto L30;

  anon29_Then:
    goto L30;

  anon23_Then:
    goto L30;

  anon30_Then:
    assume {:partition} acquireLock_1 != 0;
    call {:si_unique_call 2121} Tmp_2021 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_2021 != 0;
    assume Tmp_2021 > 0;
    Mem_T.VOID[Tmp_2021] := oldIrql_26;
    call {:si_unique_call 2122} sdv_KeAcquireSpinLock(0, Tmp_2021);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_2021 != 0;
    assume Tmp_2021 > 0;
    oldIrql_26 := Mem_T.VOID[Tmp_2021];
    goto L14;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ResumeIdleTimerWorker"} ResumeIdleTimerWorker(actual_parentFdoExt_143: int, actual_unusedContext_1: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ResumeIdleTimerWorker"} ResumeIdleTimerWorker(actual_parentFdoExt_143: int, actual_unusedContext_1: int)
{
  var {:scalar} prevIdleTimerState_5: int;
  var {:pointer} Tmp_2023: int;
  var {:pointer} Tmp_2024: int;
  var {:pointer} Tmp_2026: int;
  var {:pointer} parentFdoExt_143: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_674: int;
  var vslice_dummy_var_675: int;
  var vslice_dummy_var_676: int;
  var vslice_dummy_var_677: int;
  var vslice_dummy_var_678: int;

  anon0:
    call {:si_unique_call 2123} vslice_dummy_var_304 := __HAVOC_malloc(4);
    parentFdoExt_143 := actual_parentFdoExt_143;
    call {:si_unique_call 2124} Tmp_2024 := __HAVOC_malloc(80);
    call {:si_unique_call 2125} sdv_do_paged_code_check();
    Tmp_2024 := strConst__li2bpl40;
    assume {:nonnull} parentFdoExt_143 != 0;
    assume parentFdoExt_143 > 0;
    havoc vslice_dummy_var_674;
    call {:si_unique_call 2126} AcquireMutex(idleTimerStateMutex_PARENT_FDO_EXTENSION(parentFdoExt_143), Tmp_2024, vslice_dummy_var_674);
    assume {:nonnull} parentFdoExt_143 != 0;
    assume parentFdoExt_143 > 0;
    havoc prevIdleTimerState_5;
    havoc Tmp_2023;
    assume {:nonnull} parentFdoExt_143 != 0;
    assume parentFdoExt_143 > 0;
    havoc vslice_dummy_var_675;
    havoc vslice_dummy_var_676;
    call {:si_unique_call 2127} WPP_RECORDER_SF_qL(vslice_dummy_var_675, 4, 7, 61, Tmp_2023, vslice_dummy_var_676, prevIdleTimerState_5);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} prevIdleTimerState_5 == 3;
    assume {:nonnull} parentFdoExt_143 != 0;
    assume parentFdoExt_143 > 0;
    havoc Tmp_2026;
    assume {:nonnull} parentFdoExt_143 != 0;
    assume parentFdoExt_143 > 0;
    havoc vslice_dummy_var_677;
    havoc vslice_dummy_var_678;
    call {:si_unique_call 2128} WPP_RECORDER_SF_qLL(vslice_dummy_var_677, 4, 7, 62, Tmp_2026, vslice_dummy_var_678, prevIdleTimerState_5, 1);
    call {:si_unique_call 2129} StartIdleTimer(parentFdoExt_143);
    goto L21;

  L21:
    call {:si_unique_call 2130} vslice_dummy_var_305 := KeReleaseMutex(0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} prevIdleTimerState_5 != 3;
    goto L21;
}



procedure {:origName "DispatchPdoIdleNotificationRequest"} DispatchPdoIdleNotificationRequest(actual_functionPdoExt_62: int, actual_irp_69: int) returns (Tmp_2027: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoIdleNotificationRequest"} DispatchPdoIdleNotificationRequest(actual_functionPdoExt_62: int, actual_irp_69: int) returns (Tmp_2027: int)
{
  var {:pointer} Tmp_2028: int;
  var {:pointer} Tmp_2029: int;
  var {:pointer} Tmp_2030: int;
  var {:pointer} Tmp_2031: int;
  var {:pointer} Tmp_2032: int;
  var {:scalar} sdv_663: int;
  var {:pointer} parentFdoExt_144: int;
  var {:scalar} ntStatus_33: int;
  var {:scalar} oldIrql_27: int;
  var {:scalar} tmpStatus_4: int;
  var {:pointer} idleCallbackInfo_2: int;
  var {:pointer} Tmp_2033: int;
  var {:pointer} functionPdoExt_62: int;
  var {:pointer} irp_69: int;
  var vslice_dummy_var_679: int;
  var vslice_dummy_var_680: int;
  var vslice_dummy_var_681: int;
  var vslice_dummy_var_682: int;
  var vslice_dummy_var_683: int;
  var vslice_dummy_var_684: int;
  var vslice_dummy_var_685: int;
  var vslice_dummy_var_686: int;
  var vslice_dummy_var_687: int;

  anon0:
    functionPdoExt_62 := actual_functionPdoExt_62;
    irp_69 := actual_irp_69;
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    havoc parentFdoExt_144;
    havoc Tmp_2028;
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    assume {:nonnull} parentFdoExt_144 != 0;
    assume parentFdoExt_144 > 0;
    havoc vslice_dummy_var_679;
    havoc vslice_dummy_var_680;
    call {:si_unique_call 2131} WPP_RECORDER_SF_qq(vslice_dummy_var_679, 4, 7, 23, Tmp_2028, vslice_dummy_var_680, irp_69);
    call {:si_unique_call 2132} idleCallbackInfo_2 := GET_IDLE_CALLBACK_INFO_FROM_IRP(irp_69);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} idleCallbackInfo_2 == 0;
    havoc Tmp_2031;
    assume {:nonnull} parentFdoExt_144 != 0;
    assume parentFdoExt_144 > 0;
    havoc vslice_dummy_var_681;
    call {:si_unique_call 2133} WPP_RECORDER_SF_q(vslice_dummy_var_681, 4, 7, 24, Tmp_2031, irp_69);
    ntStatus_33 := -1073741224;
    goto L50;

  L50:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} ntStatus_33 != 259;
    havoc Tmp_2029;
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    assume {:nonnull} parentFdoExt_144 != 0;
    assume parentFdoExt_144 > 0;
    havoc vslice_dummy_var_682;
    havoc vslice_dummy_var_683;
    call {:si_unique_call 2134} WPP_RECORDER_SF_qqD(vslice_dummy_var_682, 4, 7, 27, Tmp_2029, vslice_dummy_var_683, irp_69, ntStatus_33);
    call {:si_unique_call 2135} UsbcCompleteIrp(parentFdoExt_144, ntStatus_33, irp_69);
    goto L51;

  L51:
    Tmp_2027 := ntStatus_33;
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} ntStatus_33 == 259;
    goto L51;

  anon23_Then:
    assume {:partition} idleCallbackInfo_2 != 0;
    assume {:nonnull} idleCallbackInfo_2 != 0;
    assume idleCallbackInfo_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    havoc Tmp_2030;
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    assume {:nonnull} parentFdoExt_144 != 0;
    assume parentFdoExt_144 > 0;
    havoc vslice_dummy_var_684;
    havoc vslice_dummy_var_685;
    call {:si_unique_call 2136} WPP_RECORDER_SF_qq(vslice_dummy_var_684, 4, 7, 25, Tmp_2030, vslice_dummy_var_685, irp_69);
    ntStatus_33 := -1073741224;
    goto L50;

  anon24_Then:
    call {:si_unique_call 2137} Tmp_2032 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_2032 != 0;
    assume Tmp_2032 > 0;
    Mem_T.VOID[Tmp_2032] := oldIrql_27;
    call {:si_unique_call 2138} sdv_KeAcquireSpinLock(0, Tmp_2032);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_2032 != 0;
    assume Tmp_2032 > 0;
    oldIrql_27 := Mem_T.VOID[Tmp_2032];
    call {:si_unique_call 2139} sdv_663 := sdv_IsListEmpty(0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_663 != 0;
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    call {:si_unique_call 2140} sdv_KeReleaseSpinLock(0, oldIrql_27);
    assume {:nonnull} parentFdoExt_144 != 0;
    assume parentFdoExt_144 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    call {:si_unique_call 2141} sdv_IoCsqInsertIrp#1(idleQueue_FUNCTION_PDO_EXTENSION(functionPdoExt_62), irp_69, 0);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    ntStatus_33 := 259;
    call {:si_unique_call 2142} tmpStatus_4 := ResumeIdleTimer(parentFdoExt_144);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} tmpStatus_4 < 0;
    call {:si_unique_call 2143} CompleteFunctionIdleIrp(functionPdoExt_62, tmpStatus_4);
    goto L50;

  anon29_Then:
    assume {:partition} 0 <= tmpStatus_4;
    goto L50;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    call {:si_unique_call 2144} ntStatus_33 := QueueIdleCallbackWorkItemForFunctionSuspend(functionPdoExt_62, parentFdoExt_144, irp_69);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L50;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    goto L36;

  L36:
    call {:si_unique_call 2145} sdv_KeReleaseSpinLock(0, oldIrql_27);
    ntStatus_33 := 17;
    havoc Tmp_2033;
    assume {:nonnull} functionPdoExt_62 != 0;
    assume functionPdoExt_62 > 0;
    assume {:nonnull} parentFdoExt_144 != 0;
    assume parentFdoExt_144 > 0;
    havoc vslice_dummy_var_686;
    havoc vslice_dummy_var_687;
    call {:si_unique_call 2146} WPP_RECORDER_SF_qqd(vslice_dummy_var_686, 2, 7, 26, Tmp_2033, vslice_dummy_var_687, irp_69, ntStatus_33);
    goto L50;

  anon25_Then:
    assume {:partition} sdv_663 == 0;
    goto L36;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CancelFdoIdleIrp"} CancelFdoIdleIrp(actual_parentFdoExt_145: int, actual_wait: int);
  modifies alloc, Mem_T.VOID, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CancelFdoIdleIrp"} CancelFdoIdleIrp(actual_parentFdoExt_145: int, actual_wait: int)
{
  var {:pointer} Tmp_2035: int;
  var {:pointer} Tmp_2036: int;
  var {:scalar} sdv_666: int;
  var {:scalar} done_1: int;
  var {:pointer} Tmp_2037: int;
  var {:pointer} Tmp_2038: int;
  var {:scalar} oldIrql_28: int;
  var {:pointer} Tmp_2039: int;
  var {:pointer} Tmp_2040: int;
  var {:pointer} parentFdoExt_145: int;
  var {:scalar} wait: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_688: int;
  var vslice_dummy_var_689: int;
  var vslice_dummy_var_690: int;
  var vslice_dummy_var_691: int;
  var vslice_dummy_var_692: int;
  var vslice_dummy_var_693: int;
  var vslice_dummy_var_694: int;
  var vslice_dummy_var_695: int;

  anon0:
    call {:si_unique_call 2147} vslice_dummy_var_306 := __HAVOC_malloc(4);
    parentFdoExt_145 := actual_parentFdoExt_145;
    wait := actual_wait;
    call {:si_unique_call 2148} Tmp_2039 := __HAVOC_malloc(328);
    call {:si_unique_call 2149} Tmp_2040 := __HAVOC_malloc(280);
    done_1 := 1;
    call {:si_unique_call 2150} DisableIdleTimer(parentFdoExt_145, 1, -800896684);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L9;

  L9:
    call {:si_unique_call 2151} Tmp_2036, done_1, Tmp_2037, oldIrql_28, Tmp_2040 := CancelFdoIdleIrp_loop_L9(Tmp_2036, done_1, Tmp_2037, oldIrql_28, Tmp_2040, parentFdoExt_145);
    goto L9_last;

  L9_last:
    done_1 := 1;
    call {:si_unique_call 2170} Tmp_2036 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_2036 != 0;
    assume Tmp_2036 > 0;
    Mem_T.VOID[Tmp_2036] := oldIrql_28;
    call {:si_unique_call 2171} sdv_KeAcquireSpinLock(0, Tmp_2036);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_2036 != 0;
    assume Tmp_2036 > 0;
    oldIrql_28 := Mem_T.VOID[Tmp_2036];
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 2152} sdv_KeReleaseSpinLock(0, oldIrql_28);
    goto L19;

  L19:
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    havoc Tmp_2038;
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    havoc vslice_dummy_var_688;
    havoc vslice_dummy_var_689;
    call {:si_unique_call 2153} WPP_RECORDER_SF_q(vslice_dummy_var_688, 4, 7, 49, Tmp_2038, vslice_dummy_var_689);
    call {:si_unique_call 2154} sdv_666 := IoCancelIrp(0);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} sdv_666 == 0;
    havoc Tmp_2035;
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    havoc vslice_dummy_var_690;
    havoc vslice_dummy_var_691;
    call {:si_unique_call 2155} WPP_RECORDER_SF_qD(vslice_dummy_var_690, 4, 7, 50, Tmp_2035, vslice_dummy_var_691, 0);
    goto L20;

  L20:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} wait != 0;
    Tmp_2039 := strConst__li2bpl43;
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    havoc vslice_dummy_var_692;
    call {:si_unique_call 2156} WaitForSignal(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_145), Tmp_2039, vslice_dummy_var_692);
    goto L43;

  L43:
    call {:si_unique_call 2157} EnableIdleTimer(parentFdoExt_145, 1, -800896684);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} wait == 0;
    goto L43;

  anon41_Then:
    assume {:partition} sdv_666 != 0;
    goto L20;

  anon39_Then:
    goto L20;

  anon37_Then:
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    havoc Tmp_2037;
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    havoc vslice_dummy_var_693;
    havoc vslice_dummy_var_694;
    call {:si_unique_call 2158} WPP_RECORDER_SF_L(vslice_dummy_var_693, 2, 8, 48, Tmp_2037, vslice_dummy_var_694);
    call {:si_unique_call 2159} sdv_KeReleaseSpinLock(0, oldIrql_28);
    goto L73;

  L73:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} done_1 != 0;
    goto L19;

  anon42_Then:
    assume {:partition} done_1 == 0;
    goto anon42_Then_dummy;

  anon42_Then_dummy:
    assume false;
    return;

  anon43_Then:
    call {:si_unique_call 2160} sdv_KeReleaseSpinLock(0, oldIrql_28);
    Tmp_2040 := strConst__li2bpl44;
    assume {:nonnull} parentFdoExt_145 != 0;
    assume parentFdoExt_145 > 0;
    havoc vslice_dummy_var_695;
    call {:si_unique_call 2161} WaitForSignal(idleCallbackBusyEvent_PARENT_FDO_EXTENSION(parentFdoExt_145), Tmp_2040, vslice_dummy_var_695);
    done_1 := 0;
    goto L73;

  anon44_Then:
    call {:si_unique_call 2162} ChangeIdleState(parentFdoExt_145, 2, 0);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2163} sdv_KeReleaseSpinLock(0, oldIrql_28);
    goto L73;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    goto L53;

  L53:
    call {:si_unique_call 2164} sdv_KeReleaseSpinLock(0, oldIrql_28);
    call {:si_unique_call 2165} EnableIdleTimer(parentFdoExt_145, 1, -800896684);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    call {:si_unique_call 2166} sdv_KeReleaseSpinLock(0, oldIrql_28);
    call {:si_unique_call 2167} EnableIdleTimer(parentFdoExt_145, 1, -800896684);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    call {:si_unique_call 2168} ChangeIdleState(parentFdoExt_145, 2, 0);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2169} sdv_KeReleaseSpinLock(0, oldIrql_28);
    goto L73;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    goto L53;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WPP_RECORDER_SF_qD"} WPP_RECORDER_SF_qD(actual_AutoLogContext_32: int, actual_level_32: int, actual_flags_32: int, actual_id_33: int, actual_traceGuid_32: int, actual_s_p_e_c_i_a_l_84: int, actual_s_p_e_c_i_a_l_85: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qD"} WPP_RECORDER_SF_qD(actual_AutoLogContext_32: int, actual_level_32: int, actual_flags_32: int, actual_id_33: int, actual_traceGuid_32: int, actual_s_p_e_c_i_a_l_84: int, actual_s_p_e_c_i_a_l_85: int)
{
  var {:scalar} Tmp_2047: int;
  var {:scalar} Tmp_2049: int;
  var {:scalar} Tmp_2052: int;
  var {:scalar} Tmp_2056: int;
  var {:scalar} level_32: int;
  var {:scalar} flags_32: int;
  var {:pointer} traceGuid_32: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;

  anon0:
    call {:si_unique_call 2172} vslice_dummy_var_307 := __HAVOC_malloc(4);
    level_32 := actual_level_32;
    flags_32 := actual_flags_32;
    traceGuid_32 := actual_traceGuid_32;
    call {:si_unique_call 2173} vslice_dummy_var_309 := __HAVOC_malloc(4);
    Tmp_2052 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_32 - 1);
    call {:si_unique_call 2174} Tmp_2049 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2175} Tmp_2056 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2176} Tmp_2047 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2177} vslice_dummy_var_308 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var {:scalar} Tmp_2058: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_696: int;

  anon0:
    call {:si_unique_call 2178} Tmp_2058 := __HAVOC_malloc(4);
    call {:si_unique_call 2179} vslice_dummy_var_310 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_2058 != 0;
    assume Tmp_2058 > 0;
    havoc vslice_dummy_var_696;
    Mem_T.VOID[Tmp_2058] := vslice_dummy_var_696;
    assume fdoGuidCount == 1;
    assume wmiInit == 0;
    return;
}



procedure {:origName "USBC_ParentSystemControl"} USBC_ParentSystemControl(actual_parentFdoExt_147: int, actual_irp_70: int) returns (Tmp_2061: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_ParentSystemControl"} USBC_ParentSystemControl(actual_parentFdoExt_147: int, actual_irp_70: int) returns (Tmp_2061: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:scalar} status_97: int;
  var {:pointer} parentFdoExt_147: int;
  var {:pointer} irp_70: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_697: int;
  var vslice_dummy_var_698: int;

  anon0:
    call {:si_unique_call 2180} disposition := __HAVOC_malloc(4);
    parentFdoExt_147 := actual_parentFdoExt_147;
    irp_70 := actual_irp_70;
    status_97 := 0;
    call {:si_unique_call 2181} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_147 != 0;
    assume parentFdoExt_147 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} wmiInit != 0;
    assume {:nonnull} parentFdoExt_147 != 0;
    assume parentFdoExt_147 > 0;
    call {:si_unique_call 2182} status_97 := WmiSystemControl(0, 0, irp_70, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.VOID[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.VOID[disposition] != 1;
    assume {:nonnull} parentFdoExt_147 != 0;
    assume parentFdoExt_147 > 0;
    havoc vslice_dummy_var_697;
    call {:si_unique_call 2183} status_97 := UsbcForwardIrp(parentFdoExt_147, vslice_dummy_var_697, irp_70);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  L37:
    Tmp_2061 := status_97;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} Mem_T.VOID[disposition] == 1;
    call {:si_unique_call 2184} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2185} UsbcReleaseRemoveLock(parentFdoExt_147, irp_70);
    assume {:nonnull} parentFdoExt_147 != 0;
    assume parentFdoExt_147 > 0;
    call {:si_unique_call 2186} vslice_dummy_var_311 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_147), irp_70);
    goto L37;

  anon15_Then:
    assume {:partition} Mem_T.VOID[disposition] == 0;
    call {:si_unique_call 2187} UsbcReleaseRemoveLock(parentFdoExt_147, irp_70);
    assume {:nonnull} parentFdoExt_147 != 0;
    assume parentFdoExt_147 > 0;
    call {:si_unique_call 2188} vslice_dummy_var_312 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_147), irp_70);
    goto L37;

  anon14_Then:
    assume {:partition} wmiInit == 0;
    goto L11;

  L11:
    assume {:nonnull} parentFdoExt_147 != 0;
    assume parentFdoExt_147 > 0;
    havoc vslice_dummy_var_698;
    call {:si_unique_call 2189} status_97 := UsbcForwardIrp(parentFdoExt_147, vslice_dummy_var_698, irp_70);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    goto L11;
}



procedure {:origName "USBC_InitializeWmilibContext"} USBC_InitializeWmilibContext(actual_wmilibContext_1: int) returns (Tmp_2063: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_2063 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_InitializeWmilibContext"} USBC_InitializeWmilibContext(actual_wmilibContext_1: int) returns (Tmp_2063: int)
{
  var {:pointer} wmilibContext_1: int;

  anon0:
    wmilibContext_1 := actual_wmilibContext_1;
    call {:si_unique_call 2190} sdv_do_paged_code_check();
    call {:si_unique_call 2191} sdv_RtlZeroMemory(0, 32);
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    assume {:nonnull} wmilibContext_1 != 0;
    assume wmilibContext_1 > 0;
    Tmp_2063 := 0;
    return;
}



procedure {:origName "USBC_UnregisterWmi"} USBC_UnregisterWmi(actual_parentFdoExt_148: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_UnregisterWmi"} USBC_UnregisterWmi(actual_parentFdoExt_148: int)
{
  var {:pointer} Tmp_2067: int;
  var {:scalar} status_98: int;
  var {:pointer} parentFdoExt_148: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_699: int;

  anon0:
    call {:si_unique_call 2192} vslice_dummy_var_313 := __HAVOC_malloc(4);
    parentFdoExt_148 := actual_parentFdoExt_148;
    call {:si_unique_call 2193} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_148 != 0;
    assume parentFdoExt_148 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2194} status_98 := IoWMIRegistrationControl(0, 2);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_98 < 0;
    havoc Tmp_2067;
    assume {:nonnull} parentFdoExt_148 != 0;
    assume parentFdoExt_148 > 0;
    havoc vslice_dummy_var_699;
    call {:si_unique_call 2195} WPP_RECORDER_SF_d(vslice_dummy_var_699, 2, 8, 11, Tmp_2067, status_98);
    goto L17;

  L17:
    assume {:nonnull} parentFdoExt_148 != 0;
    assume parentFdoExt_148 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} 0 <= status_98;
    goto L17;

  anon5_Then:
    goto L1;
}



procedure {:origName "USBC_RegisterWmi"} USBC_RegisterWmi(actual_parentFdoExt_149: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_RegisterWmi"} USBC_RegisterWmi(actual_parentFdoExt_149: int)
{
  var {:scalar} status_99: int;
  var {:pointer} Tmp_2070: int;
  var {:pointer} parentFdoExt_149: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_700: int;

  anon0:
    call {:si_unique_call 2196} vslice_dummy_var_314 := __HAVOC_malloc(4);
    parentFdoExt_149 := actual_parentFdoExt_149;
    call {:si_unique_call 2197} sdv_do_paged_code_check();
    assume {:nonnull} parentFdoExt_149 != 0;
    assume parentFdoExt_149 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} wmiInit != 0;
    assume {:nonnull} parentFdoExt_149 != 0;
    assume parentFdoExt_149 > 0;
    call {:si_unique_call 2198} status_99 := USBC_InitializeWmilibContext(wmiLibContext_PARENT_FDO_EXTENSION(parentFdoExt_149));
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_99 < 0;
    goto L20;

  L20:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_99 < 0;
    havoc Tmp_2070;
    assume {:nonnull} parentFdoExt_149 != 0;
    assume parentFdoExt_149 > 0;
    havoc vslice_dummy_var_700;
    call {:si_unique_call 2199} WPP_RECORDER_SF_d(vslice_dummy_var_700, 2, 8, 10, Tmp_2070, status_99);
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} 0 <= status_99;
    assume {:nonnull} parentFdoExt_149 != 0;
    assume parentFdoExt_149 > 0;
    goto L1;

  anon11_Then:
    assume {:partition} 0 <= status_99;
    call {:si_unique_call 2200} status_99 := IoWMIRegistrationControl(0, 1);
    goto L20;

  anon10_Then:
    assume {:partition} wmiInit == 0;
    goto L1;

  anon9_Then:
    goto L1;
}



procedure {:origName "PdoIdleCancelCompleteWorker"} PdoIdleCancelCompleteWorker(actual_parentFdoExt_150: int, actual_context_27: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PdoIdleCancelCompleteWorker"} PdoIdleCancelCompleteWorker(actual_parentFdoExt_150: int, actual_context_27: int)
{
  var {:pointer} Tmp_2073: int;
  var {:pointer} irp_71: int;
  var {:pointer} functionPdoExt_64: int;
  var {:pointer} workerContext_2: int;
  var {:pointer} parentFdoExt_150: int;
  var {:pointer} context_27: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_701: int;

  anon0:
    call {:si_unique_call 2201} vslice_dummy_var_315 := __HAVOC_malloc(4);
    parentFdoExt_150 := actual_parentFdoExt_150;
    context_27 := actual_context_27;
    call {:si_unique_call 2202} Tmp_2073 := __HAVOC_malloc(72);
    workerContext_2 := context_27;
    assume {:nonnull} workerContext_2 != 0;
    assume workerContext_2 > 0;
    havoc functionPdoExt_64;
    assume {:nonnull} workerContext_2 != 0;
    assume workerContext_2 > 0;
    havoc irp_71;
    Tmp_2073 := strConst__li2bpl45;
    assume {:nonnull} functionPdoExt_64 != 0;
    assume functionPdoExt_64 > 0;
    havoc vslice_dummy_var_701;
    call {:si_unique_call 2203} WaitForSignal(idleCallbackEvent_FUNCTION_PDO_EXTENSION(functionPdoExt_64), Tmp_2073, vslice_dummy_var_701);
    assume {:nonnull} irp_71 != 0;
    assume irp_71 > 0;
    call {:si_unique_call 2204} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2205} ExFreePoolWithTag(0, -1016958123);
    call {:si_unique_call 2206} UsbcReleaseRemoveLock(parentFdoExt_150, irp_71);
    assume {:nonnull} parentFdoExt_150 != 0;
    assume parentFdoExt_150 > 0;
    call {:si_unique_call 2207} vslice_dummy_var_316 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_150), irp_71);
    return;
}



procedure {:origName "PdoIdleRemoveIrp"} PdoIdleRemoveIrp(actual_csq: int, actual_Irp_13: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PdoIdleRemoveIrp"} PdoIdleRemoveIrp(actual_csq: int, actual_Irp_13: int)
{
  var {:pointer} sdv_677: int;
  var {:pointer} parentFdoExt_151: int;
  var {:pointer} functionPdoExt_65: int;
  var {:pointer} csq: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_318: int;

  anon0:
    call {:si_unique_call 2208} vslice_dummy_var_317 := __HAVOC_malloc(4);
    csq := actual_csq;
    call {:si_unique_call 2209} sdv_677 := sdv_containing_record(csq, 76);
    functionPdoExt_65 := sdv_677;
    assume {:nonnull} functionPdoExt_65 != 0;
    assume functionPdoExt_65 > 0;
    havoc parentFdoExt_151;
    call {:si_unique_call 2210} vslice_dummy_var_318 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2211} SetPdoIdle(parentFdoExt_151, functionPdoExt_65, 3, 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} functionPdoExt_65 != 0;
    assume functionPdoExt_65 > 0;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PdoIdleInsertIrp"} PdoIdleInsertIrp(actual_csq_1: int, actual_Irp_14: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PdoIdleInsertIrp"} PdoIdleInsertIrp(actual_csq_1: int, actual_Irp_14: int)
{
  var {:pointer} sdv_679: int;
  var {:pointer} parentFdoExt_152: int;
  var {:pointer} functionPdoExt_66: int;
  var {:pointer} csq_1: int;
  var {:pointer} Irp_14: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;

  anon0:
    call {:si_unique_call 2212} vslice_dummy_var_319 := __HAVOC_malloc(4);
    csq_1 := actual_csq_1;
    Irp_14 := actual_Irp_14;
    call {:si_unique_call 2213} sdv_679 := sdv_containing_record(csq_1, 76);
    functionPdoExt_66 := sdv_679;
    assume {:nonnull} functionPdoExt_66 != 0;
    assume functionPdoExt_66 > 0;
    havoc parentFdoExt_152;
    call {:si_unique_call 2214} SetPdoIdle(parentFdoExt_152, functionPdoExt_66, 3, 1, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} functionPdoExt_66 != 0;
    assume functionPdoExt_66 > 0;
    assume {:nonnull} functionPdoExt_66 != 0;
    assume functionPdoExt_66 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} functionPdoExt_66 != 0;
    assume functionPdoExt_66 > 0;
    call {:si_unique_call 2215} vslice_dummy_var_320 := sdv_InsertTailList(idleQueueList_FUNCTION_PDO_EXTENSION(functionPdoExt_66), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_14))));
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var {:scalar} Tmp_2078: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_702: int;

  anon0:
    call {:si_unique_call 2216} Tmp_2078 := __HAVOC_malloc(4);
    call {:si_unique_call 2217} vslice_dummy_var_321 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_2078 != 0;
    assume Tmp_2078 > 0;
    havoc vslice_dummy_var_702;
    Mem_T.VOID[Tmp_2078] := vslice_dummy_var_702;
    return;
}



procedure {:origName "RtlStringExValidateSrcW_sdv_static_function_1"} RtlStringExValidateSrcW_sdv_static_function_1(actual_ppszSrc: int, actual_pcchToRead: int, actual_cchMax: int, actual_dwFlags: int) returns (Tmp_2084: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_2084 == -1073741811 || Tmp_2084 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringExValidateSrcW_sdv_static_function_1"} RtlStringExValidateSrcW_sdv_static_function_1(actual_ppszSrc: int, actual_pcchToRead: int, actual_cchMax: int, actual_dwFlags: int) returns (Tmp_2084: int)
{
  var {:scalar} status_100: int;
  var {:pointer} ppszSrc: int;
  var {:pointer} pcchToRead: int;
  var {:scalar} cchMax: int;
  var {:scalar} dwFlags: int;

  anon0:
    ppszSrc := actual_ppszSrc;
    pcchToRead := actual_pcchToRead;
    cchMax := actual_cchMax;
    dwFlags := actual_dwFlags;
    status_100 := 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} pcchToRead != 0;
    assume {:nonnull} pcchToRead != 0;
    assume pcchToRead > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.VOID[pcchToRead] >= cchMax;
    status_100 := -1073741811;
    goto L9;

  L9:
    Tmp_2084 := status_100;
    return;

  anon12_Then:
    assume {:partition} cchMax > Mem_T.VOID[pcchToRead];
    goto L6;

  L6:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BAND(dwFlags, 256) != 0;
    assume {:nonnull} ppszSrc != 0;
    assume ppszSrc > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} ppszSrc != 0;
    assume ppszSrc > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pcchToRead != 0;
    assume {:nonnull} pcchToRead != 0;
    assume pcchToRead > 0;
    Mem_T.VOID[pcchToRead] := 0;
    goto L9;

  anon15_Then:
    assume {:partition} pcchToRead == 0;
    goto L9;

  anon13_Then:
    goto L9;

  anon11_Then:
    assume {:partition} BAND(dwFlags, 256) == 0;
    goto L9;

  anon14_Then:
    assume {:partition} pcchToRead == 0;
    goto L6;
}



procedure {:origName "IsDxResultOfSxTransition"} IsDxResultOfSxTransition(actual_IrpSp: int) returns (Tmp_2086: int);
  free ensures {:va_keep} Tmp_2086 == 0 || Tmp_2086 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IsDxResultOfSxTransition"} IsDxResultOfSxTransition(actual_IrpSp: int) returns (Tmp_2086: int)
{
  var {:scalar} action: int;
  var {:pointer} IrpSp: int;

  anon0:
    IrpSp := actual_IrpSp;
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    havoc action;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} action == 2;
    goto L7;

  L7:
    Tmp_2086 := 1;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} action != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} action != 3;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} action != 4;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} action != 5;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} action != 6;
    Tmp_2086 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} action == 6;
    goto L7;

  anon13_Then:
    assume {:partition} action == 5;
    goto L7;

  anon12_Then:
    assume {:partition} action == 4;
    goto L7;

  anon11_Then:
    assume {:partition} action == 3;
    goto L7;
}



procedure {:origName "RtlStringVPrintfWorkerW_sdv_static_function_1"} RtlStringVPrintfWorkerW_sdv_static_function_1(actual_pszDest: int, actual_cchDest: int, actual_pcchNewDestLength: int, actual_pszFormat: int, actual_argList: int) returns (Tmp_2088: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_2088 == 0 || Tmp_2088 == 5;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringVPrintfWorkerW_sdv_static_function_1"} RtlStringVPrintfWorkerW_sdv_static_function_1(actual_pszDest: int, actual_cchDest: int, actual_pcchNewDestLength: int, actual_pszFormat: int, actual_argList: int) returns (Tmp_2088: int)
{
  var {:scalar} cchNewDestLength: int;
  var {:scalar} iRet: int;
  var {:scalar} cchMax_1: int;
  var {:scalar} status_101: int;
  var {:pointer} pszDest: int;
  var {:scalar} cchDest: int;
  var {:pointer} pcchNewDestLength: int;

  anon0:
    pszDest := actual_pszDest;
    cchDest := actual_cchDest;
    pcchNewDestLength := actual_pcchNewDestLength;
    status_101 := 0;
    cchNewDestLength := 0;
    cchMax_1 := cchDest - 1;
    call {:si_unique_call 2218} iRet := corral_nondet();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 0 > iRet;
    goto L16;

  L16:
    assume {:nonnull} pszDest != 0;
    assume pszDest > 0;
    Mem_T.VOID[pszDest] := 0;
    cchNewDestLength := cchMax_1;
    status_101 := 5;
    goto L20;

  L20:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} pcchNewDestLength != 0;
    assume {:nonnull} pcchNewDestLength != 0;
    assume pcchNewDestLength > 0;
    Mem_T.VOID[pcchNewDestLength] := cchNewDestLength;
    goto L21;

  L21:
    Tmp_2088 := status_101;
    return;

  anon11_Then:
    assume {:partition} pcchNewDestLength == 0;
    goto L21;

  anon9_Then:
    assume {:partition} iRet >= 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} iRet <= cchMax_1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} iRet == cchMax_1;
    assume {:nonnull} pszDest != 0;
    assume pszDest > 0;
    Mem_T.VOID[pszDest] := 0;
    cchNewDestLength := cchMax_1;
    goto L20;

  anon12_Then:
    assume {:partition} iRet != cchMax_1;
    cchNewDestLength := iRet;
    goto L20;

  anon10_Then:
    assume {:partition} cchMax_1 < iRet;
    goto L16;
}



procedure {:origName "IsIrpSpecial"} IsIrpSpecial(actual_IrpSp_1: int) returns (Tmp_2090: int);
  free ensures {:va_keep} Tmp_2090 == 0 || Tmp_2090 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IsIrpSpecial"} IsIrpSpecial(actual_IrpSp_1: int) returns (Tmp_2090: int)
{
  var {:scalar} result_2: int;
  var {:pointer} urb_15: int;
  var {:pointer} IrpSp_1: int;

  anon0:
    IrpSp_1 := actual_IrpSp_1;
    result_2 := 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    goto L10;

  L10:
    Tmp_2090 := result_2;
    return;

  anon10_Then:
    result_2 := 1;
    goto L10;

  anon11_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc urb_15;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} urb_15 != 0;
    assume {:nonnull} urb_15 != 0;
    assume urb_15 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    result_2 := 1;
    goto L10;

  anon9_Then:
    goto L10;

  anon12_Then:
    assume {:partition} urb_15 == 0;
    goto L10;
}



procedure {:origName "RtlStringValidateDestW_sdv_static_function_1"} RtlStringValidateDestW_sdv_static_function_1(actual_pszDest_1: int, actual_cchDest_1: int, actual_cchMax_2: int) returns (Tmp_2092: int);
  free ensures {:va_keep} Tmp_2092 == 0 || Tmp_2092 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringValidateDestW_sdv_static_function_1"} RtlStringValidateDestW_sdv_static_function_1(actual_pszDest_1: int, actual_cchDest_1: int, actual_cchMax_2: int) returns (Tmp_2092: int)
{
  var {:scalar} status_102: int;
  var {:scalar} cchDest_1: int;
  var {:scalar} cchMax_2: int;

  anon0:
    cchDest_1 := actual_cchDest_1;
    cchMax_2 := actual_cchMax_2;
    status_102 := 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} cchDest_1 != 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} cchDest_1 <= cchMax_2;
    goto L8;

  L8:
    Tmp_2092 := status_102;
    return;

  anon5_Then:
    assume {:partition} cchMax_2 < cchDest_1;
    goto L6;

  L6:
    status_102 := -1073741811;
    goto L8;

  anon6_Then:
    assume {:partition} cchDest_1 == 0;
    goto L6;
}



procedure {:origName "ShouldDevicePowerUp"} ShouldDevicePowerUp(actual_irpSp_38: int) returns (Tmp_2094: int);
  free ensures {:va_keep} Tmp_2094 == 0 || Tmp_2094 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ShouldDevicePowerUp"} ShouldDevicePowerUp(actual_irpSp_38: int) returns (Tmp_2094: int)
{
  var {:scalar} result_3: int;
  var {:pointer} irpSp_38: int;

  anon0:
    irpSp_38 := actual_irpSp_38;
    result_3 := 1;
    assume {:nonnull} irpSp_38 != 0;
    assume irpSp_38 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} irpSp_38 != 0;
    assume irpSp_38 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    result_3 := 0;
    goto L6;

  L6:
    Tmp_2094 := result_3;
    return;

  anon8_Then:
    goto L6;

  anon9_Then:
    assume {:nonnull} irpSp_38 != 0;
    assume irpSp_38 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    result_3 := 0;
    goto L6;

  anon7_Then:
    goto L6;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var {:scalar} Tmp_2098: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_703: int;

  anon0:
    call {:si_unique_call 2219} vslice_dummy_var_322 := __HAVOC_malloc(4);
    call {:si_unique_call 2220} Tmp_2098 := __HAVOC_malloc(4);
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    havoc Mem_T.VOID;
    assume {:nonnull} Tmp_2098 != 0;
    assume Tmp_2098 > 0;
    havoc vslice_dummy_var_703;
    Mem_T.VOID[Tmp_2098] := vslice_dummy_var_703;
    assume GenericCompositeUSBDeviceString == 0;
    assume g_RecorderLog == 0;
    return;
}



procedure {:origName "RtlStringValidateDestA_sdv_static_function_1"} RtlStringValidateDestA_sdv_static_function_1(actual_pszDest_2: int, actual_cchDest_2: int, actual_cchMax_3: int) returns (Tmp_2099: int);
  free ensures {:va_keep} Tmp_2099 == 0 || Tmp_2099 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringValidateDestA_sdv_static_function_1"} RtlStringValidateDestA_sdv_static_function_1(actual_pszDest_2: int, actual_cchDest_2: int, actual_cchMax_3: int) returns (Tmp_2099: int)
{
  var {:scalar} status_103: int;
  var {:scalar} cchDest_2: int;
  var {:scalar} cchMax_3: int;

  anon0:
    cchDest_2 := actual_cchDest_2;
    cchMax_3 := actual_cchMax_3;
    status_103 := 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} cchDest_2 != 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} cchDest_2 <= cchMax_3;
    goto L8;

  L8:
    Tmp_2099 := status_103;
    return;

  anon5_Then:
    assume {:partition} cchMax_3 < cchDest_2;
    goto L6;

  L6:
    status_103 := -1073741811;
    goto L8;

  anon6_Then:
    assume {:partition} cchDest_2 == 0;
    goto L6;
}



procedure {:origName "RtlStringCchCopyExW"} RtlStringCchCopyExW(actual_pszDest_3: int, actual_cchDest_3: int, actual_pszSrc: int, actual_ppszDestEnd: int, actual_pcchRemaining: int, actual_dwFlags_1: int) returns (Tmp_2101: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_2101 == -1073741811 || Tmp_2101 == 0 || Tmp_2101 == 5;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCchCopyExW"} RtlStringCchCopyExW(actual_pszDest_3: int, actual_cchDest_3: int, actual_pszSrc: int, actual_ppszDestEnd: int, actual_pcchRemaining: int, actual_dwFlags_1: int) returns (Tmp_2101: int)
{
  var {:dopa} {:scalar} cchRemaining: int;
  var {:scalar} cbDest: int;
  var {:pointer} pszDestEnd: int;
  var {:scalar} status_104: int;
  var {:scalar} cbRemaining: int;
  var {:dopa} {:scalar} cchCopied: int;
  var {:pointer} pszDest_3: int;
  var {:scalar} cchDest_3: int;
  var {:pointer} pszSrc: int;
  var {:pointer} ppszDestEnd: int;
  var {:pointer} pcchRemaining: int;
  var {:scalar} dwFlags_1: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_704: int;
  var vslice_dummy_var_705: int;

  anon0:
    call {:si_unique_call 2221} cchRemaining := __HAVOC_malloc(4);
    call {:si_unique_call 2222} pszDestEnd := __HAVOC_malloc(4);
    call {:si_unique_call 2223} cchCopied := __HAVOC_malloc(4);
    pszDest_3 := actual_pszDest_3;
    cchDest_3 := actual_cchDest_3;
    call {:si_unique_call 2224} pszSrc := __HAVOC_malloc(4);
    ppszDestEnd := actual_ppszDestEnd;
    pcchRemaining := actual_pcchRemaining;
    dwFlags_1 := actual_dwFlags_1;
    call {:si_unique_call 2225} status_104 := RtlStringExValidateDestW_sdv_static_function_1(pszDest_3, cchDest_3, -1, dwFlags_1);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_104 >= 0;
    assume {:nonnull} pszDestEnd != 0;
    assume pszDestEnd > 0;
    assume {:nonnull} cchRemaining != 0;
    assume cchRemaining > 0;
    Mem_T.VOID[cchRemaining] := cchDest_3;
    call {:si_unique_call 2226} status_104 := RtlStringExValidateSrcW_sdv_static_function_1(pszSrc, 0, -1, dwFlags_1);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_104 >= 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(dwFlags_1, -8192) != 0;
    status_104 := -1073741811;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} cchDest_3 != 0;
    assume {:nonnull} pszDest_3 != 0;
    assume pszDest_3 > 0;
    Mem_T.VOID[pszDest_3] := 0;
    goto L24;

  L24:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_104 >= 0;
    goto L27;

  L27:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} status_104 >= 0;
    goto L29;

  L29:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} ppszDestEnd != 0;
    assume {:nonnull} ppszDestEnd != 0;
    assume ppszDestEnd > 0;
    assume {:nonnull} pszDestEnd != 0;
    assume pszDestEnd > 0;
    goto L30;

  L30:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} pcchRemaining != 0;
    assume {:nonnull} cchRemaining != 0;
    assume cchRemaining > 0;
    assume {:nonnull} pcchRemaining != 0;
    assume pcchRemaining > 0;
    Mem_T.VOID[pcchRemaining] := Mem_T.VOID[cchRemaining];
    goto L32;

  L32:
    Tmp_2101 := status_104;
    return;

  anon50_Then:
    assume {:partition} pcchRemaining == 0;
    goto L32;

  anon49_Then:
    assume {:partition} ppszDestEnd == 0;
    goto L30;

  anon47_Then:
    assume {:partition} 0 > status_104;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} status_104 != 5;
    goto L32;

  anon48_Then:
    assume {:partition} status_104 == 5;
    goto L29;

  anon45_Then:
    assume {:partition} 0 > status_104;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(dwFlags_1, 7168) != 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} cchDest_3 != 0;
    cbDest := cchDest_3 * 2;
    call {:si_unique_call 2227} vslice_dummy_var_323 := RtlStringExHandleOtherFlagsW_sdv_static_function_1(pszDest_3, cbDest, 0, pszDestEnd, cchRemaining, dwFlags_1);
    goto L27;

  anon51_Then:
    assume {:partition} cchDest_3 == 0;
    goto L27;

  anon46_Then:
    assume {:partition} BAND(dwFlags_1, 7168) == 0;
    goto L27;

  anon56_Then:
    assume {:partition} cchDest_3 == 0;
    goto L24;

  anon43_Then:
    assume {:partition} BAND(dwFlags_1, -8192) == 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} cchDest_3 != 0;
    assume {:nonnull} cchCopied != 0;
    assume cchCopied > 0;
    Mem_T.VOID[cchCopied] := 0;
    assume {:nonnull} pszSrc != 0;
    assume pszSrc > 0;
    havoc vslice_dummy_var_704;
    call {:si_unique_call 2228} status_104 := RtlStringCopyWorkerW_sdv_static_function_1(pszDest_3, cchDest_3, cchCopied, vslice_dummy_var_704, -2);
    assume {:nonnull} pszDestEnd != 0;
    assume pszDestEnd > 0;
    assume {:nonnull} cchCopied != 0;
    assume cchCopied > 0;
    assume {:nonnull} cchRemaining != 0;
    assume cchRemaining > 0;
    Mem_T.VOID[cchRemaining] := cchDest_3 - Mem_T.VOID[cchCopied];
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} status_104 >= 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(dwFlags_1, 512) != 0;
    assume {:nonnull} cchRemaining != 0;
    assume cchRemaining > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.VOID[cchRemaining] > 1;
    assume {:nonnull} cchRemaining != 0;
    assume cchRemaining > 0;
    cbRemaining := Mem_T.VOID[cchRemaining] * 2;
    assume {:nonnull} pszDestEnd != 0;
    assume pszDestEnd > 0;
    havoc vslice_dummy_var_705;
    call {:si_unique_call 2229} vslice_dummy_var_324 := RtlStringExHandleFillBehindNullW_sdv_static_function_1(vslice_dummy_var_705, cbRemaining, dwFlags_1);
    goto L24;

  anon54_Then:
    assume {:partition} 1 >= Mem_T.VOID[cchRemaining];
    goto L24;

  anon53_Then:
    assume {:partition} BAND(dwFlags_1, 512) == 0;
    goto L24;

  anon57_Then:
    assume {:partition} 0 > status_104;
    goto L24;

  anon44_Then:
    assume {:partition} cchDest_3 == 0;
    assume {:nonnull} pszSrc != 0;
    assume pszSrc > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} pszDest_3 != 0;
    status_104 := 5;
    goto L24;

  anon55_Then:
    assume {:partition} pszDest_3 == 0;
    status_104 := -1073741811;
    goto L24;

  anon52_Then:
    goto L24;

  anon41_Then:
    assume {:partition} 0 > status_104;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} cchDest_3 != 0;
    assume {:nonnull} pszDest_3 != 0;
    assume pszDest_3 > 0;
    Mem_T.VOID[pszDest_3] := 0;
    goto L24;

  anon42_Then:
    assume {:partition} cchDest_3 == 0;
    goto L24;

  anon39_Then:
    assume {:partition} 0 > status_104;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} cchDest_3 > 0;
    assume {:nonnull} pszDest_3 != 0;
    assume pszDest_3 > 0;
    Mem_T.VOID[pszDest_3] := 0;
    goto L32;

  anon40_Then:
    assume {:partition} 0 >= cchDest_3;
    goto L32;
}



procedure {:origName "USBC_QueryKseDeviceFlags"} USBC_QueryKseDeviceFlags(actual_IdVendor: int, actual_IdProduct: int, actual_BcdDevice: int, actual_DeviceFlagsVidPidRev: int, actual_DeviceFlagsVidPid: int, actual_IfrLog: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "USBC_QueryKseDeviceFlags"} USBC_QueryKseDeviceFlags(actual_IdVendor: int, actual_IdProduct: int, actual_BcdDevice: int, actual_DeviceFlagsVidPidRev: int, actual_DeviceFlagsVidPid: int, actual_IfrLog: int)
{
  var {:pointer} usbDeviceKey: int;
  var {:pointer} Tmp_2103: int;
  var {:pointer} Tmp_2104: int;
  var {:scalar} status_105: int;
  var {:pointer} Tmp_2109: int;
  var {:pointer} Tmp_2110: int;
  var {:scalar} IdVendor: int;
  var {:scalar} IdProduct: int;
  var {:scalar} BcdDevice: int;
  var {:pointer} DeviceFlagsVidPidRev: int;
  var {:pointer} DeviceFlagsVidPid: int;
  var {:pointer} IfrLog: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_327: int;

  anon0:
    call {:si_unique_call 2230} vslice_dummy_var_325 := __HAVOC_malloc(4);
    IdVendor := actual_IdVendor;
    IdProduct := actual_IdProduct;
    BcdDevice := actual_BcdDevice;
    DeviceFlagsVidPidRev := actual_DeviceFlagsVidPidRev;
    DeviceFlagsVidPid := actual_DeviceFlagsVidPid;
    IfrLog := actual_IfrLog;
    call {:si_unique_call 2231} usbDeviceKey := __HAVOC_malloc(160);
    call {:si_unique_call 2232} Tmp_2103 := __HAVOC_malloc(104);
    call {:si_unique_call 2233} vslice_dummy_var_326 := __HAVOC_malloc(16);
    call {:si_unique_call 2234} vslice_dummy_var_327 := __HAVOC_malloc(16);
    call {:si_unique_call 2235} Tmp_2109 := __HAVOC_malloc(140);
    call {:si_unique_call 2236} sdv_do_paged_code_check();
    assume {:nonnull} DeviceFlagsVidPidRev != 0;
    assume DeviceFlagsVidPidRev > 0;
    assume {:nonnull} DeviceFlagsVidPid != 0;
    assume DeviceFlagsVidPid > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_2109 := strConst__li2bpl47;
    call {:si_unique_call 2237} status_105 := RtlStringCbPrintfW(usbDeviceKey, 80, Tmp_2109);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_105 < 0;
    havoc Tmp_2104;
    call {:si_unique_call 2238} WPP_RECORDER_SF_d(IfrLog, 2, 8, 12, Tmp_2104, status_105);
    goto L1;

  L1:
    return;

  anon7_Then:
    assume {:partition} 0 <= status_105;
    Tmp_2103 := strConst__li2bpl49;
    call {:si_unique_call 2239} status_105 := RtlStringCbPrintfW(usbDeviceKey, 80, Tmp_2103);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_105 < 0;
    havoc Tmp_2110;
    call {:si_unique_call 2240} WPP_RECORDER_SF_d(IfrLog, 2, 8, 13, Tmp_2110, status_105);
    goto L1;

  anon8_Then:
    assume {:partition} 0 <= status_105;
    goto L1;

  anon9_Then:
    assume {:nonnull} DeviceFlagsVidPidRev != 0;
    assume DeviceFlagsVidPidRev > 0;
    assume {:nonnull} DeviceFlagsVidPid != 0;
    assume DeviceFlagsVidPid > 0;
    goto L1;
}



procedure {:origName "PsGetCurrentThread"} PsGetCurrentThread() returns (Tmp_2111: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PsGetCurrentThread"} PsGetCurrentThread() returns (Tmp_2111: int)
{
  var {:pointer} sdv_691: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    sdv_691 := 0;
    goto L6;

  L6:
    Tmp_2111 := sdv_691;
    return;

  anon3_Then:
    call {:si_unique_call 2241} sdv_691 := __HAVOC_malloc(1);
    goto L6;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_1: int)
{
  var {:pointer} ListHead_1: int;
  var vslice_dummy_var_328: int;

  anon0:
    call {:si_unique_call 2242} vslice_dummy_var_328 := __HAVOC_malloc(4);
    ListHead_1 := actual_ListHead_1;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    return;
}



procedure {:origName "WPP_RECORDER_SF_qd"} WPP_RECORDER_SF_qd(actual_AutoLogContext_33: int, actual_level_33: int, actual_flags_33: int, actual_id_34: int, actual_traceGuid_33: int, actual_s_p_e_c_i_a_l_86: int, actual_s_p_e_c_i_a_l_87: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_qd"} WPP_RECORDER_SF_qd(actual_AutoLogContext_33: int, actual_level_33: int, actual_flags_33: int, actual_id_34: int, actual_traceGuid_33: int, actual_s_p_e_c_i_a_l_86: int, actual_s_p_e_c_i_a_l_87: int)
{
  var {:scalar} Tmp_2117: int;
  var {:scalar} Tmp_2118: int;
  var {:scalar} Tmp_2121: int;
  var {:scalar} Tmp_2124: int;
  var {:scalar} level_33: int;
  var {:scalar} flags_33: int;
  var {:pointer} traceGuid_33: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;

  anon0:
    call {:si_unique_call 2243} vslice_dummy_var_329 := __HAVOC_malloc(4);
    level_33 := actual_level_33;
    flags_33 := actual_flags_33;
    traceGuid_33 := actual_traceGuid_33;
    call {:si_unique_call 2244} vslice_dummy_var_331 := __HAVOC_malloc(4);
    Tmp_2118 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_33 - 1);
    call {:si_unique_call 2245} Tmp_2121 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2246} Tmp_2117 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2247} Tmp_2124 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2248} vslice_dummy_var_330 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_2126: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_2126: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} Entry_1: int;
  var {:pointer} ListHead_2: int;

  anon0:
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    havoc Entry_1;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    havoc NextEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 2249} FatalListEntryError(ListHead_2, Entry_1, NextEntry);
    goto L12;

  L12:
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    Tmp_2126 := Entry_1;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "RtlStringExHandleFillBehindNullW_sdv_static_function_1"} RtlStringExHandleFillBehindNullW_sdv_static_function_1(actual_pszDestEnd_1: int, actual_cbRemaining_1: int, actual_dwFlags_2: int) returns (Tmp_2128: int);
  free ensures {:va_keep} Tmp_2128 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringExHandleFillBehindNullW_sdv_static_function_1"} RtlStringExHandleFillBehindNullW_sdv_static_function_1(actual_pszDestEnd_1: int, actual_cbRemaining_1: int, actual_dwFlags_2: int) returns (Tmp_2128: int)
{

  anon0:
    Tmp_2128 := 0;
    return;
}



procedure {:origName "RtlStringCchPrintfW"} RtlStringCchPrintfW(actual_pszDest_4: int, actual_cchDest_4: int, actual_pszFormat_1: int) returns (Tmp_2130: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_2130 == 0 || Tmp_2130 == 5 || Tmp_2130 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCchPrintfW"} RtlStringCchPrintfW(actual_pszDest_4: int, actual_cchDest_4: int, actual_pszFormat_1: int) returns (Tmp_2130: int)
{
  var {:pointer} argList_1: int;
  var {:scalar} status_106: int;
  var {:pointer} pszDest_4: int;
  var {:scalar} cchDest_4: int;
  var {:pointer} pszFormat_1: int;
  var vslice_dummy_var_706: int;

  anon0:
    pszDest_4 := actual_pszDest_4;
    cchDest_4 := actual_cchDest_4;
    call {:si_unique_call 2250} pszFormat_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2251} status_106 := RtlStringValidateDestW_sdv_static_function_1(pszDest_4, cchDest_4, -1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_106 >= 0;
    argList_1 := pszFormat_1;
    assume {:nonnull} pszFormat_1 != 0;
    assume pszFormat_1 > 0;
    havoc vslice_dummy_var_706;
    call {:si_unique_call 2252} status_106 := RtlStringVPrintfWorkerW_sdv_static_function_1(pszDest_4, cchDest_4, 0, vslice_dummy_var_706, argList_1);
    argList_1 := 0;
    goto L17;

  L17:
    Tmp_2130 := status_106;
    return;

  anon5_Then:
    assume {:partition} 0 > status_106;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} cchDest_4 > 0;
    assume {:nonnull} pszDest_4 != 0;
    assume pszDest_4 > 0;
    Mem_T.VOID[pszDest_4] := 0;
    goto L17;

  anon6_Then:
    assume {:partition} 0 >= cchDest_4;
    goto L17;
}



procedure {:origName "WPP_RECORDER_SF_"} WPP_RECORDER_SF_(actual_AutoLogContext_34: int, actual_level_34: int, actual_flags_34: int, actual_id_35: int, actual_traceGuid_34: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_"} WPP_RECORDER_SF_(actual_AutoLogContext_34: int, actual_level_34: int, actual_flags_34: int, actual_id_35: int, actual_traceGuid_34: int)
{
  var {:scalar} Tmp_2133: int;
  var {:scalar} Tmp_2136: int;
  var {:scalar} Tmp_2139: int;
  var {:scalar} Tmp_2142: int;
  var {:scalar} level_34: int;
  var {:scalar} flags_34: int;
  var {:pointer} traceGuid_34: int;
  var vslice_dummy_var_332: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;

  anon0:
    call {:si_unique_call 2253} vslice_dummy_var_332 := __HAVOC_malloc(4);
    level_34 := actual_level_34;
    flags_34 := actual_flags_34;
    traceGuid_34 := actual_traceGuid_34;
    call {:si_unique_call 2254} vslice_dummy_var_334 := __HAVOC_malloc(4);
    Tmp_2133 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_34 - 1);
    call {:si_unique_call 2255} Tmp_2142 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2256} Tmp_2139 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2257} Tmp_2136 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2258} vslice_dummy_var_333 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "RtlStringCchCopyW"} RtlStringCchCopyW(actual_pszDest_5: int, actual_cchDest_5: int, actual_pszSrc_1: int) returns (Tmp_2143: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_2143 == 0 || Tmp_2143 == 5 || Tmp_2143 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCchCopyW"} RtlStringCchCopyW(actual_pszDest_5: int, actual_cchDest_5: int, actual_pszSrc_1: int) returns (Tmp_2143: int)
{
  var {:scalar} status_107: int;
  var {:pointer} pszDest_5: int;
  var {:scalar} cchDest_5: int;
  var {:pointer} pszSrc_1: int;

  anon0:
    pszDest_5 := actual_pszDest_5;
    cchDest_5 := actual_cchDest_5;
    pszSrc_1 := actual_pszSrc_1;
    call {:si_unique_call 2259} status_107 := RtlStringValidateDestW_sdv_static_function_1(pszDest_5, cchDest_5, -1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_107 >= 0;
    call {:si_unique_call 2260} status_107 := RtlStringCopyWorkerW_sdv_static_function_1(pszDest_5, cchDest_5, 0, pszSrc_1, -2);
    goto L14;

  L14:
    Tmp_2143 := status_107;
    return;

  anon5_Then:
    assume {:partition} 0 > status_107;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} cchDest_5 > 0;
    assume {:nonnull} pszDest_5 != 0;
    assume pszDest_5 > 0;
    Mem_T.VOID[pszDest_5] := 0;
    goto L14;

  anon6_Then:
    assume {:partition} 0 >= cchDest_5;
    goto L14;
}



procedure {:origName "log_xstr"} log_xstr(actual_p_7: int, actual_l_1: int) returns (structPtr888Tmp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "log_xstr"} log_xstr(actual_p_7: int, actual_l_1: int) returns (structPtr888Tmp: int)
{
  var {:scalar} Tmp: int;
  var {:scalar} xs: int;
  var {:pointer} p_7: int;
  var {:scalar} l_1: int;

  anon0:
    call {:si_unique_call 2261} Tmp := __HAVOC_malloc(8);
    call {:si_unique_call 2262} xs := __HAVOC_malloc(8);
    p_7 := actual_p_7;
    l_1 := actual_l_1;
    assume {:nonnull} xs != 0;
    assume xs > 0;
    assume {:nonnull} xs != 0;
    assume xs > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} xs != 0;
    assume xs > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} xs != 0;
    assume xs > 0;
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "RtlStringCbLengthW"} RtlStringCbLengthW(actual_psz: int, actual_cbMax: int, actual_pcbLength: int) returns (Tmp_2146: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_2146 == 0 || Tmp_2146 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCbLengthW"} RtlStringCbLengthW(actual_psz: int, actual_cbMax: int, actual_pcbLength: int) returns (Tmp_2146: int)
{
  var {:dopa} {:scalar} cchLength: int;
  var {:scalar} cchMax_4: int;
  var {:scalar} status_108: int;
  var {:pointer} psz: int;
  var {:scalar} cbMax: int;
  var {:pointer} pcbLength: int;

  anon0:
    call {:si_unique_call 2263} cchLength := __HAVOC_malloc(4);
    psz := actual_psz;
    cbMax := actual_cbMax;
    pcbLength := actual_pcbLength;
    cchMax_4 := INTDIV(cbMax, 2);
    assume {:nonnull} cchLength != 0;
    assume cchLength > 0;
    Mem_T.VOID[cchLength] := 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} psz != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} cchMax_4 <= -1;
    call {:si_unique_call 2264} status_108 := RtlStringLengthWorkerW_sdv_static_function_1(psz, cchMax_4, cchLength);
    goto L15;

  L15:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} pcbLength != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_108 >= 0;
    assume {:nonnull} cchLength != 0;
    assume cchLength > 0;
    assume {:nonnull} pcbLength != 0;
    assume pcbLength > 0;
    Mem_T.VOID[pcbLength] := Mem_T.VOID[cchLength] * 2;
    goto L16;

  L16:
    Tmp_2146 := status_108;
    return;

  anon11_Then:
    assume {:partition} 0 > status_108;
    assume {:nonnull} pcbLength != 0;
    assume pcbLength > 0;
    Mem_T.VOID[pcbLength] := 0;
    goto L16;

  anon10_Then:
    assume {:partition} pcbLength == 0;
    goto L16;

  anon9_Then:
    assume {:partition} -1 < cchMax_4;
    goto L9;

  L9:
    status_108 := -1073741811;
    goto L15;

  anon12_Then:
    assume {:partition} psz == 0;
    goto L9;
}



procedure {:origName "WPP_RECORDER_SF_d"} WPP_RECORDER_SF_d(actual_AutoLogContext_35: int, actual_level_35: int, actual_flags_35: int, actual_id_36: int, actual_traceGuid_35: int, actual_s_p_e_c_i_a_l_88: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_d"} WPP_RECORDER_SF_d(actual_AutoLogContext_35: int, actual_level_35: int, actual_flags_35: int, actual_id_36: int, actual_traceGuid_35: int, actual_s_p_e_c_i_a_l_88: int)
{
  var {:scalar} Tmp_2151: int;
  var {:scalar} Tmp_2152: int;
  var {:scalar} Tmp_2157: int;
  var {:scalar} Tmp_2158: int;
  var {:scalar} level_35: int;
  var {:scalar} flags_35: int;
  var {:pointer} traceGuid_35: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_337: int;

  anon0:
    call {:si_unique_call 2265} vslice_dummy_var_335 := __HAVOC_malloc(4);
    level_35 := actual_level_35;
    flags_35 := actual_flags_35;
    traceGuid_35 := actual_traceGuid_35;
    call {:si_unique_call 2266} vslice_dummy_var_337 := __HAVOC_malloc(4);
    Tmp_2157 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_35 - 1);
    call {:si_unique_call 2267} Tmp_2158 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2268} Tmp_2151 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2269} Tmp_2152 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2270} vslice_dummy_var_336 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "GET_FUNCTION_PDO_EXT_FROM_IRP"} GET_FUNCTION_PDO_EXT_FROM_IRP(actual_Irp_16: int) returns (Tmp_2159: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GET_FUNCTION_PDO_EXT_FROM_IRP"} GET_FUNCTION_PDO_EXT_FROM_IRP(actual_Irp_16: int) returns (Tmp_2159: int)
{
  var {:pointer} Tmp_2161: int;
  var {:pointer} temp: int;
  var {:pointer} Tmp_2162: int;
  var {:pointer} Irp_16: int;

  anon0:
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 2271} Tmp_2161 := __HAVOC_malloc(16);
    call {:si_unique_call 2272} Tmp_2162 := __HAVOC_malloc(16);
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_2162;
    assume {:nonnull} Tmp_2162 != 0;
    assume Tmp_2162 > 0;
    havoc temp;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_2161;
    assume {:nonnull} Tmp_2161 != 0;
    assume Tmp_2161 > 0;
    Tmp_2159 := temp;
    return;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int)
{
  var vslice_dummy_var_338: int;

  anon0:
    call {:si_unique_call 2273} vslice_dummy_var_338 := __HAVOC_malloc(4);
    call {:si_unique_call 2274} RtlFailFast(3);
    return;
}



procedure {:origName "WPP_RECORDER_SF_q"} WPP_RECORDER_SF_q(actual_AutoLogContext_36: int, actual_level_36: int, actual_flags_36: int, actual_id_37: int, actual_traceGuid_36: int, actual_s_p_e_c_i_a_l_89: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WPP_RECORDER_SF_q"} WPP_RECORDER_SF_q(actual_AutoLogContext_36: int, actual_level_36: int, actual_flags_36: int, actual_id_37: int, actual_traceGuid_36: int, actual_s_p_e_c_i_a_l_89: int)
{
  var {:scalar} Tmp_2167: int;
  var {:scalar} Tmp_2168: int;
  var {:scalar} Tmp_2169: int;
  var {:scalar} Tmp_2171: int;
  var {:scalar} level_36: int;
  var {:scalar} flags_36: int;
  var {:pointer} traceGuid_36: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;

  anon0:
    call {:si_unique_call 2275} vslice_dummy_var_339 := __HAVOC_malloc(4);
    level_36 := actual_level_36;
    flags_36 := actual_flags_36;
    traceGuid_36 := actual_traceGuid_36;
    call {:si_unique_call 2276} vslice_dummy_var_341 := __HAVOC_malloc(4);
    Tmp_2171 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), flags_36 - 1);
    call {:si_unique_call 2277} Tmp_2168 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2278} Tmp_2167 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 2279} Tmp_2169 := corral_nondet();
    goto L6;

  L6:
    call {:si_unique_call 2280} vslice_dummy_var_340 := corral_nondet();
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    goto L6;
}



procedure {:origName "SET_FUNCTION_PDO_EXT_IN_IRP"} SET_FUNCTION_PDO_EXT_IN_IRP(actual_Irp_17: int, actual_FunctionPdoExt_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SET_FUNCTION_PDO_EXT_IN_IRP"} SET_FUNCTION_PDO_EXT_IN_IRP(actual_Irp_17: int, actual_FunctionPdoExt_1: int)
{
  var {:pointer} Tmp_2176: int;
  var {:pointer} Irp_17: int;
  var {:pointer} FunctionPdoExt_1: int;
  var vslice_dummy_var_342: int;

  anon0:
    call {:si_unique_call 2281} vslice_dummy_var_342 := __HAVOC_malloc(4);
    Irp_17 := actual_Irp_17;
    FunctionPdoExt_1 := actual_FunctionPdoExt_1;
    call {:si_unique_call 2282} Tmp_2176 := __HAVOC_malloc(16);
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc Tmp_2176;
    assume {:nonnull} Tmp_2176 != 0;
    assume Tmp_2176 > 0;
    return;
}



procedure {:origName "RtlStringCbPrintfW"} RtlStringCbPrintfW(actual_pszDest_6: int, actual_cbDest_1: int, actual_pszFormat_2: int) returns (Tmp_2179: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_2179 == 0 || Tmp_2179 == 5 || Tmp_2179 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCbPrintfW"} RtlStringCbPrintfW(actual_pszDest_6: int, actual_cbDest_1: int, actual_pszFormat_2: int) returns (Tmp_2179: int)
{
  var {:scalar} cchDest_6: int;
  var {:pointer} argList_2: int;
  var {:scalar} status_109: int;
  var {:pointer} pszDest_6: int;
  var {:scalar} cbDest_1: int;
  var {:pointer} pszFormat_2: int;
  var vslice_dummy_var_707: int;

  anon0:
    pszDest_6 := actual_pszDest_6;
    cbDest_1 := actual_cbDest_1;
    call {:si_unique_call 2283} pszFormat_2 := __HAVOC_malloc(4);
    cchDest_6 := INTDIV(cbDest_1, 2);
    call {:si_unique_call 2284} status_109 := RtlStringValidateDestW_sdv_static_function_1(pszDest_6, cchDest_6, -1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_109 >= 0;
    argList_2 := pszFormat_2;
    assume {:nonnull} pszFormat_2 != 0;
    assume pszFormat_2 > 0;
    havoc vslice_dummy_var_707;
    call {:si_unique_call 2285} status_109 := RtlStringVPrintfWorkerW_sdv_static_function_1(pszDest_6, cchDest_6, 0, vslice_dummy_var_707, argList_2);
    argList_2 := 0;
    goto L19;

  L19:
    Tmp_2179 := status_109;
    return;

  anon5_Then:
    assume {:partition} 0 > status_109;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} cchDest_6 > 0;
    assume {:nonnull} pszDest_6 != 0;
    assume pszDest_6 > 0;
    Mem_T.VOID[pszDest_6] := 0;
    goto L19;

  anon6_Then:
    assume {:partition} 0 >= cchDest_6;
    goto L19;
}



procedure {:origName "RtlStringVPrintfWorkerA_sdv_static_function_1"} RtlStringVPrintfWorkerA_sdv_static_function_1(actual_pszDest_7: int, actual_cchDest_7: int, actual_pcchNewDestLength_1: int, actual_pszFormat_3: int, actual_argList_3: int) returns (Tmp_2181: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_2181 == 0 || Tmp_2181 == 5;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringVPrintfWorkerA_sdv_static_function_1"} RtlStringVPrintfWorkerA_sdv_static_function_1(actual_pszDest_7: int, actual_cchDest_7: int, actual_pcchNewDestLength_1: int, actual_pszFormat_3: int, actual_argList_3: int) returns (Tmp_2181: int)
{
  var {:scalar} cchNewDestLength_1: int;
  var {:scalar} iRet_1: int;
  var {:scalar} cchMax_5: int;
  var {:scalar} status_110: int;
  var {:pointer} pszDest_7: int;
  var {:scalar} cchDest_7: int;
  var {:pointer} pcchNewDestLength_1: int;

  anon0:
    pszDest_7 := actual_pszDest_7;
    cchDest_7 := actual_cchDest_7;
    pcchNewDestLength_1 := actual_pcchNewDestLength_1;
    status_110 := 0;
    cchNewDestLength_1 := 0;
    cchMax_5 := cchDest_7 - 1;
    call {:si_unique_call 2286} iRet_1 := corral_nondet();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 0 > iRet_1;
    goto L16;

  L16:
    assume {:nonnull} pszDest_7 != 0;
    assume pszDest_7 > 0;
    Mem_T.VOID[pszDest_7] := 0;
    cchNewDestLength_1 := cchMax_5;
    status_110 := 5;
    goto L20;

  L20:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} pcchNewDestLength_1 != 0;
    assume {:nonnull} pcchNewDestLength_1 != 0;
    assume pcchNewDestLength_1 > 0;
    Mem_T.VOID[pcchNewDestLength_1] := cchNewDestLength_1;
    goto L21;

  L21:
    Tmp_2181 := status_110;
    return;

  anon11_Then:
    assume {:partition} pcchNewDestLength_1 == 0;
    goto L21;

  anon9_Then:
    assume {:partition} iRet_1 >= 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} iRet_1 <= cchMax_5;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} iRet_1 == cchMax_5;
    assume {:nonnull} pszDest_7 != 0;
    assume pszDest_7 > 0;
    Mem_T.VOID[pszDest_7] := 0;
    cchNewDestLength_1 := cchMax_5;
    goto L20;

  anon12_Then:
    assume {:partition} iRet_1 != cchMax_5;
    cchNewDestLength_1 := iRet_1;
    goto L20;

  anon10_Then:
    assume {:partition} cchMax_5 < iRet_1;
    goto L16;
}



procedure {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_2: int, actual_Value: int) returns (Tmp_2183: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_2: int, actual_Value: int) returns (Tmp_2183: int)
{
  var {:scalar} sdv_709: int;

  anon0:
    Tmp_2183 := sdv_709;
    return;
}



procedure {:origName "RtlStringCopyWorkerW_sdv_static_function_1"} RtlStringCopyWorkerW_sdv_static_function_1(actual_pszDest_8: int, actual_cchDest_8: int, actual_pcchNewDestLength_2: int, actual_pszSrc_2: int, actual_cchToCopy: int) returns (Tmp_2185: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_2185 == 0 || Tmp_2185 == 5;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCopyWorkerW_sdv_static_function_1"} RtlStringCopyWorkerW_sdv_static_function_1(actual_pszDest_8: int, actual_cchDest_8: int, actual_pcchNewDestLength_2: int, actual_pszSrc_2: int, actual_cchToCopy: int) returns (Tmp_2185: int)
{
  var {:scalar} cchNewDestLength_2: int;
  var {:scalar} status_111: int;
  var {:pointer} pszDest_8: int;
  var {:scalar} cchDest_8: int;
  var {:pointer} pcchNewDestLength_2: int;
  var {:pointer} pszSrc_2: int;
  var {:scalar} cchToCopy: int;

  anon0:
    pszDest_8 := actual_pszDest_8;
    cchDest_8 := actual_cchDest_8;
    pcchNewDestLength_2 := actual_pcchNewDestLength_2;
    pszSrc_2 := actual_pszSrc_2;
    cchToCopy := actual_cchToCopy;
    status_111 := 0;
    cchNewDestLength_2 := 0;
    goto L7;

  L7:
    call {:si_unique_call 2287} cchNewDestLength_2, cchDest_8, cchToCopy := RtlStringCopyWorkerW_sdv_static_function_1_loop_L7(cchNewDestLength_2, pszDest_8, cchDest_8, pszSrc_2, cchToCopy);
    goto L7_last;

  L7_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} cchDest_8 != 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} cchToCopy != 0;
    assume {:nonnull} pszSrc_2 != 0;
    assume pszSrc_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.VOID[pszSrc_2] != 0;
    assume {:nonnull} pszDest_8 != 0;
    assume pszDest_8 > 0;
    assume {:nonnull} pszSrc_2 != 0;
    assume pszSrc_2 > 0;
    Mem_T.VOID[pszDest_8] := Mem_T.VOID[pszSrc_2];
    cchDest_8 := cchDest_8 - 1;
    cchToCopy := cchToCopy - 1;
    cchNewDestLength_2 := cchNewDestLength_2 + 1;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:partition} Mem_T.VOID[pszSrc_2] == 0;
    goto L8;

  L8:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} cchDest_8 != 0;
    goto L16;

  L16:
    assume {:nonnull} pszDest_8 != 0;
    assume pszDest_8 > 0;
    Mem_T.VOID[pszDest_8] := 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pcchNewDestLength_2 != 0;
    assume {:nonnull} pcchNewDestLength_2 != 0;
    assume pcchNewDestLength_2 > 0;
    Mem_T.VOID[pcchNewDestLength_2] := cchNewDestLength_2;
    goto L18;

  L18:
    Tmp_2185 := status_111;
    return;

  anon15_Then:
    assume {:partition} pcchNewDestLength_2 == 0;
    goto L18;

  anon12_Then:
    assume {:partition} cchDest_8 == 0;
    cchNewDestLength_2 := cchNewDestLength_2 - 1;
    status_111 := 5;
    goto L16;

  anon13_Then:
    assume {:partition} cchToCopy == 0;
    goto L8;

  anon11_Then:
    assume {:partition} cchDest_8 == 0;
    goto L8;
}



procedure {:origName "RtlStringExValidateDestW_sdv_static_function_1"} RtlStringExValidateDestW_sdv_static_function_1(actual_pszDest_9: int, actual_cchDest_9: int, actual_cchMax_6: int, actual_dwFlags_3: int) returns (Tmp_2187: int);
  free ensures {:va_keep} Tmp_2187 == -1073741811 || Tmp_2187 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringExValidateDestW_sdv_static_function_1"} RtlStringExValidateDestW_sdv_static_function_1(actual_pszDest_9: int, actual_cchDest_9: int, actual_cchMax_6: int, actual_dwFlags_3: int) returns (Tmp_2187: int)
{
  var {:scalar} status_112: int;
  var {:pointer} pszDest_9: int;
  var {:scalar} cchDest_9: int;
  var {:scalar} cchMax_6: int;
  var {:scalar} dwFlags_3: int;

  anon0:
    pszDest_9 := actual_pszDest_9;
    cchDest_9 := actual_cchDest_9;
    cchMax_6 := actual_cchMax_6;
    dwFlags_3 := actual_dwFlags_3;
    status_112 := 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(dwFlags_3, 256) != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} pszDest_9 != 0;
    goto L11;

  L11:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} cchDest_9 > cchMax_6;
    goto L13;

  L13:
    status_112 := -1073741811;
    goto L12;

  L12:
    Tmp_2187 := status_112;
    return;

  anon11_Then:
    assume {:partition} cchMax_6 >= cchDest_9;
    goto L12;

  anon9_Then:
    assume {:partition} pszDest_9 == 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} cchDest_9 != 0;
    goto L13;

  anon10_Then:
    assume {:partition} cchDest_9 == 0;
    goto L11;

  anon12_Then:
    assume {:partition} BAND(dwFlags_3, 256) == 0;
    call {:si_unique_call 2288} status_112 := RtlStringValidateDestW_sdv_static_function_1(pszDest_9, cchDest_9, cchMax_6);
    goto L12;
}



procedure {:origName "GET_IDLE_CALLBACK_INFO_FROM_IRP"} GET_IDLE_CALLBACK_INFO_FROM_IRP(actual_Irp_18: int) returns (Tmp_2189: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GET_IDLE_CALLBACK_INFO_FROM_IRP"} GET_IDLE_CALLBACK_INFO_FROM_IRP(actual_Irp_18: int) returns (Tmp_2189: int)
{
  var {:pointer} sdv_711: int;
  var {:pointer} Irp_18: int;

  anon0:
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 2289} sdv_711 := sdv_IoGetCurrentIrpStackLocation(Irp_18);
    assume {:nonnull} sdv_711 != 0;
    assume sdv_711 > 0;
    havoc Tmp_2189;
    return;
}



procedure {:origName "RtlStringCchPrintfA"} RtlStringCchPrintfA(actual_pszDest_10: int, actual_cchDest_10: int, actual_pszFormat_4: int) returns (Tmp_2191: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_2191 == 0 || Tmp_2191 == 5 || Tmp_2191 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCchPrintfA"} RtlStringCchPrintfA(actual_pszDest_10: int, actual_cchDest_10: int, actual_pszFormat_4: int) returns (Tmp_2191: int)
{
  var {:pointer} argList_4: int;
  var {:scalar} status_113: int;
  var {:pointer} pszDest_10: int;
  var {:scalar} cchDest_10: int;
  var {:pointer} pszFormat_4: int;
  var vslice_dummy_var_708: int;

  anon0:
    pszDest_10 := actual_pszDest_10;
    cchDest_10 := actual_cchDest_10;
    call {:si_unique_call 2290} pszFormat_4 := __HAVOC_malloc(4);
    call {:si_unique_call 2291} status_113 := RtlStringValidateDestA_sdv_static_function_1(pszDest_10, cchDest_10, -1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_113 >= 0;
    argList_4 := pszFormat_4;
    assume {:nonnull} pszFormat_4 != 0;
    assume pszFormat_4 > 0;
    havoc vslice_dummy_var_708;
    call {:si_unique_call 2292} status_113 := RtlStringVPrintfWorkerA_sdv_static_function_1(pszDest_10, cchDest_10, 0, vslice_dummy_var_708, argList_4);
    argList_4 := 0;
    goto L17;

  L17:
    Tmp_2191 := status_113;
    return;

  anon5_Then:
    assume {:partition} 0 > status_113;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} cchDest_10 > 0;
    assume {:nonnull} pszDest_10 != 0;
    assume pszDest_10 > 0;
    Mem_T.VOID[pszDest_10] := 0;
    goto L17;

  anon6_Then:
    assume {:partition} 0 >= cchDest_10;
    goto L17;
}



procedure {:origName "RtlStringLengthWorkerW_sdv_static_function_1"} RtlStringLengthWorkerW_sdv_static_function_1(actual_psz_1: int, actual_cchMax_7: int, actual_pcchLength: int) returns (Tmp_2193: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_2193 == 0 || Tmp_2193 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringLengthWorkerW_sdv_static_function_1"} RtlStringLengthWorkerW_sdv_static_function_1(actual_psz_1: int, actual_cchMax_7: int, actual_pcchLength: int) returns (Tmp_2193: int)
{
  var {:scalar} cchOriginalMax: int;
  var {:scalar} status_114: int;
  var {:pointer} psz_1: int;
  var {:scalar} cchMax_7: int;
  var {:pointer} pcchLength: int;

  anon0:
    psz_1 := actual_psz_1;
    cchMax_7 := actual_cchMax_7;
    pcchLength := actual_pcchLength;
    status_114 := 0;
    cchOriginalMax := cchMax_7;
    goto L7;

  L7:
    call {:si_unique_call 2293} cchMax_7 := RtlStringLengthWorkerW_sdv_static_function_1_loop_L7(psz_1, cchMax_7);
    goto L7_last;

  L7_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} cchMax_7 != 0;
    assume {:nonnull} psz_1 != 0;
    assume psz_1 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.VOID[psz_1] != 0;
    cchMax_7 := cchMax_7 - 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} Mem_T.VOID[psz_1] == 0;
    goto L8;

  L8:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} cchMax_7 != 0;
    goto L13;

  L13:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} pcchLength != 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_114 >= 0;
    assume {:nonnull} pcchLength != 0;
    assume pcchLength > 0;
    Mem_T.VOID[pcchLength] := cchOriginalMax - cchMax_7;
    goto L14;

  L14:
    Tmp_2193 := status_114;
    return;

  anon15_Then:
    assume {:partition} 0 > status_114;
    assume {:nonnull} pcchLength != 0;
    assume pcchLength > 0;
    Mem_T.VOID[pcchLength] := 0;
    goto L14;

  anon14_Then:
    assume {:partition} pcchLength == 0;
    goto L14;

  anon12_Then:
    assume {:partition} cchMax_7 == 0;
    status_114 := -1073741811;
    goto L13;

  anon11_Then:
    assume {:partition} cchMax_7 == 0;
    goto L8;
}



procedure {:origName "RtlStringExHandleOtherFlagsW_sdv_static_function_1"} RtlStringExHandleOtherFlagsW_sdv_static_function_1(actual_pszDest_11: int, actual_cbDest_2: int, actual_cchOriginalDestLength: int, actual_ppszDestEnd_1: int, actual_pcchRemaining_1: int, actual_dwFlags_4: int) returns (Tmp_2195: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_2195 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringExHandleOtherFlagsW_sdv_static_function_1"} RtlStringExHandleOtherFlagsW_sdv_static_function_1(actual_pszDest_11: int, actual_cbDest_2: int, actual_cchOriginalDestLength: int, actual_ppszDestEnd_1: int, actual_pcchRemaining_1: int, actual_dwFlags_4: int) returns (Tmp_2195: int)
{
  var {:scalar} cchDest_11: int;
  var {:scalar} Tmp_2197: int;
  var {:pointer} pszOriginalDestEnd: int;
  var {:pointer} pszDestEnd_2: int;
  var {:scalar} Tmp_2198: int;
  var {:pointer} pszDest_11: int;
  var {:scalar} cbDest_2: int;
  var {:scalar} cchOriginalDestLength: int;
  var {:pointer} ppszDestEnd_1: int;
  var {:pointer} pcchRemaining_1: int;
  var {:scalar} dwFlags_4: int;

  anon0:
    pszDest_11 := actual_pszDest_11;
    cbDest_2 := actual_cbDest_2;
    cchOriginalDestLength := actual_cchOriginalDestLength;
    ppszDestEnd_1 := actual_ppszDestEnd_1;
    pcchRemaining_1 := actual_pcchRemaining_1;
    dwFlags_4 := actual_dwFlags_4;
    cchDest_11 := INTDIV(cbDest_2, 2);
    Tmp_2198 := BAND(dwFlags_4, BOR(BOR(1024, 2048), 4096));
    call {:si_unique_call 2294} SdvAssumeSoft(Tmp_2198);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} cchDest_11 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(dwFlags_4, 4096) != 0;
    pszOriginalDestEnd := pszDest_11;
    assume {:nonnull} ppszDestEnd_1 != 0;
    assume ppszDestEnd_1 > 0;
    assume {:nonnull} pcchRemaining_1 != 0;
    assume pcchRemaining_1 > 0;
    Mem_T.VOID[pcchRemaining_1] := cchDest_11 - cchOriginalDestLength;
    assume {:nonnull} pszOriginalDestEnd != 0;
    assume pszOriginalDestEnd > 0;
    Mem_T.VOID[pszOriginalDestEnd] := 0;
    goto L10;

  L10:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(dwFlags_4, 1024) != 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(dwFlags_4, 255) != 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} cchDest_11 > 0;
    pszDestEnd_2 := pszDest_11;
    assume {:nonnull} ppszDestEnd_1 != 0;
    assume ppszDestEnd_1 > 0;
    assume {:nonnull} pcchRemaining_1 != 0;
    assume pcchRemaining_1 > 0;
    Mem_T.VOID[pcchRemaining_1] := 1;
    assume {:nonnull} pszDestEnd_2 != 0;
    assume pszDestEnd_2 > 0;
    Mem_T.VOID[pszDestEnd_2] := 0;
    goto L17;

  L17:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} cchDest_11 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} BAND(dwFlags_4, 2048) != 0;
    assume {:nonnull} ppszDestEnd_1 != 0;
    assume ppszDestEnd_1 > 0;
    assume {:nonnull} pcchRemaining_1 != 0;
    assume pcchRemaining_1 > 0;
    Mem_T.VOID[pcchRemaining_1] := cchDest_11;
    assume {:nonnull} pszDest_11 != 0;
    assume pszDest_11 > 0;
    Mem_T.VOID[pszDest_11] := 0;
    goto L38;

  L38:
    Tmp_2195 := 0;
    return;

  anon26_Then:
    assume {:partition} BAND(dwFlags_4, 2048) == 0;
    goto L38;

  anon22_Then:
    assume {:partition} 0 >= cchDest_11;
    goto L38;

  anon24_Then:
    assume {:partition} 0 >= cchDest_11;
    goto L17;

  anon23_Then:
    assume {:partition} BAND(dwFlags_4, 255) == 0;
    assume {:nonnull} ppszDestEnd_1 != 0;
    assume ppszDestEnd_1 > 0;
    assume {:nonnull} pcchRemaining_1 != 0;
    assume pcchRemaining_1 > 0;
    Mem_T.VOID[pcchRemaining_1] := cchDest_11;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} cchDest_11 != 0;
    assume {:nonnull} pszDest_11 != 0;
    assume pszDest_11 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.VOID[pszDest_11] != 0;
    Tmp_2197 := 0;
    goto L35;

  L35:
    call {:si_unique_call 2295} SdvAssumeSoft(Tmp_2197);
    goto L17;

  anon25_Then:
    assume {:partition} Mem_T.VOID[pszDest_11] == 0;
    goto L32;

  L32:
    Tmp_2197 := 1;
    goto L35;

  anon27_Then:
    assume {:partition} cchDest_11 == 0;
    goto L32;

  anon20_Then:
    assume {:partition} BAND(dwFlags_4, 1024) == 0;
    goto L17;

  anon21_Then:
    assume {:partition} BAND(dwFlags_4, 4096) == 0;
    goto L10;

  anon19_Then:
    assume {:partition} 0 >= cchDest_11;
    goto L10;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_343: int;

  anon0:
    call {:si_unique_call 2296} vslice_dummy_var_343 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "COMPOSITE_DEVICE_CAPABILITIES_INIT"} COMPOSITE_DEVICE_CAPABILITIES_INIT(actual_CapabilityFlags: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "COMPOSITE_DEVICE_CAPABILITIES_INIT"} COMPOSITE_DEVICE_CAPABILITIES_INIT(actual_CapabilityFlags: int)
{
  var vslice_dummy_var_344: int;

  anon0:
    call {:si_unique_call 2297} vslice_dummy_var_344 := __HAVOC_malloc(4);
    call {:si_unique_call 2298} sdv_RtlZeroMemory(0, 4);
    return;
}



procedure {:origName "RtlStringCbCopyW"} RtlStringCbCopyW(actual_pszDest_12: int, actual_cbDest_3: int, actual_pszSrc_3: int) returns (Tmp_2203: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} Tmp_2203 == 0 || Tmp_2203 == 5 || Tmp_2203 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlStringCbCopyW"} RtlStringCbCopyW(actual_pszDest_12: int, actual_cbDest_3: int, actual_pszSrc_3: int) returns (Tmp_2203: int)
{
  var {:scalar} cchDest_12: int;
  var {:scalar} status_115: int;
  var {:pointer} pszDest_12: int;
  var {:scalar} cbDest_3: int;
  var {:pointer} pszSrc_3: int;

  anon0:
    pszDest_12 := actual_pszDest_12;
    cbDest_3 := actual_cbDest_3;
    pszSrc_3 := actual_pszSrc_3;
    cchDest_12 := INTDIV(cbDest_3, 2);
    call {:si_unique_call 2299} status_115 := RtlStringValidateDestW_sdv_static_function_1(pszDest_12, cchDest_12, -1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_115 >= 0;
    call {:si_unique_call 2300} status_115 := RtlStringCopyWorkerW_sdv_static_function_1(pszDest_12, cchDest_12, 0, pszSrc_3, -2);
    goto L16;

  L16:
    Tmp_2203 := status_115;
    return;

  anon5_Then:
    assume {:partition} 0 > status_115;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} cchDest_12 > 0;
    assume {:nonnull} pszDest_12 != 0;
    assume pszDest_12 > 0;
    Mem_T.VOID[pszDest_12] := 0;
    goto L16;

  anon6_Then:
    assume {:partition} 0 >= cchDest_12;
    goto L16;
}



procedure {:origName "RecordFailure"} RecordFailure(actual_parentFdoExt_154: int, actual_deviceObject_9: int, actual_failStatus_1: int, actual_usbdStatus_3: int, actual_errorCode_1: int, actual_subCode_1: int, actual_dataBlock_1: int, actual_dataSize_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RecordFailure"} RecordFailure(actual_parentFdoExt_154: int, actual_deviceObject_9: int, actual_failStatus_1: int, actual_usbdStatus_3: int, actual_errorCode_1: int, actual_subCode_1: int, actual_dataBlock_1: int, actual_dataSize_1: int)
{
  var {:pointer} parentFdoExt_154: int;
  var {:scalar} failStatus_1: int;
  var {:scalar} usbdStatus_3: int;
  var {:scalar} errorCode_1: int;
  var {:scalar} subCode_1: int;
  var {:pointer} dataBlock_1: int;
  var {:scalar} dataSize_1: int;
  var vslice_dummy_var_345: int;

  anon0:
    call {:si_unique_call 2301} vslice_dummy_var_345 := __HAVOC_malloc(4);
    parentFdoExt_154 := actual_parentFdoExt_154;
    failStatus_1 := actual_failStatus_1;
    usbdStatus_3 := actual_usbdStatus_3;
    errorCode_1 := actual_errorCode_1;
    subCode_1 := actual_subCode_1;
    dataBlock_1 := actual_dataBlock_1;
    dataSize_1 := actual_dataSize_1;
    call {:si_unique_call 2302} RecordStartFailData(parentFdoExt_154, failStatus_1, usbdStatus_3, errorCode_1, subCode_1, dataBlock_1, dataSize_1);
    return;
}



procedure {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_717: int, actual_sdv_718: int) returns (Tmp_2207: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_717: int, actual_sdv_718: int) returns (Tmp_2207: int)
{
  var {:scalar} sdv_719: int;

  anon0:
    call {:si_unique_call 2303} Tmp_2207 := __HAVOC_malloc(4);
    call {:si_unique_call 2304} sdv_719 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_2207 != 0;
    assume Tmp_2207 > 0;
    assume {:nonnull} sdv_719 != 0;
    assume sdv_719 > 0;
    Mem_T.VOID[Tmp_2207] := Mem_T.VOID[sdv_719];
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_777: int, actual_sdv_778: int) returns (Tmp_2239: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_777: int, actual_sdv_778: int) returns (Tmp_2239: int)
{
  var {:scalar} sdv_779: int;

  anon0:
    call {:si_unique_call 2305} Tmp_2239 := __HAVOC_malloc(4);
    call {:si_unique_call 2306} sdv_779 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_2239 != 0;
    assume Tmp_2239 > 0;
    assume {:nonnull} sdv_779 != 0;
    assume sdv_779 > 0;
    Mem_T.VOID[Tmp_2239] := Mem_T.VOID[sdv_779];
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init18"} _sdv_init18()
{

  anon0:
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_KeClearEvent_entry"} {:osmodel} SLIC_KeClearEvent_entry(actual_caller_6: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_KeClearEvent_entry"} {:osmodel} SLIC_KeClearEvent_entry(actual_caller_6: int)
{
  var {:pointer} caller_6: int;

  anon0:
    caller_6 := actual_caller_6;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2307} SLIC_ABORT_3_0(caller_6);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon11_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon9_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_8: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_8: int)
{
  var {:pointer} caller_8: int;

  anon0:
    caller_8 := actual_caller_8;
    call {:si_unique_call 2308} SLIC_ERROR_ROUTINE(strConst__li2bpl53);
    return;
}



procedure {:origName "SLIC_ABORT_3_0"} SLIC_ABORT_3_0(actual_caller_9: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_3_0"} SLIC_ABORT_3_0(actual_caller_9: int)
{
  var {:pointer} caller_9: int;

  anon0:
    caller_9 := actual_caller_9;
    call {:si_unique_call 2309} SLIC_ERROR_ROUTINE(strConst__li2bpl54);
    return;
}



procedure {:origName "SLIC_sdv_KeAcquireSpinLock_entry"} {:osmodel} SLIC_sdv_KeAcquireSpinLock_entry(actual_caller_11: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_sdv_KeAcquireSpinLock_entry"} {:osmodel} SLIC_sdv_KeAcquireSpinLock_entry(actual_caller_11: int)
{
  var {:pointer} caller_11: int;

  anon0:
    caller_11 := actual_caller_11;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2310} SLIC_ABORT_31_0(caller_11);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon11_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon9_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_12: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_12: int)
{
  var {:pointer} caller_12: int;

  anon0:
    caller_12 := actual_caller_12;
    call {:si_unique_call 2311} SLIC_ERROR_ROUTINE(strConst__li2bpl56);
    return;
}



procedure {:origName "SLIC_KeReleaseMutex_entry"} {:osmodel} SLIC_KeReleaseMutex_entry(actual_caller_14: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_KeReleaseMutex_entry"} {:osmodel} SLIC_KeReleaseMutex_entry(actual_caller_14: int)
{
  var {:pointer} caller_14: int;

  anon0:
    caller_14 := actual_caller_14;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2312} SLIC_ABORT_19_0(caller_14);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon11_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon9_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:origName "SLIC_KeResetEvent_entry"} {:osmodel} SLIC_KeResetEvent_entry(actual_caller_15: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_KeResetEvent_entry"} {:osmodel} SLIC_KeResetEvent_entry(actual_caller_15: int)
{
  var {:pointer} caller_15: int;

  anon0:
    caller_15 := actual_caller_15;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2313} SLIC_ABORT_23_0(caller_15);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon11_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon9_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller_19: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller_19: int)
{
  var {:pointer} caller_19: int;

  anon0:
    caller_19 := actual_caller_19;
    call {:si_unique_call 2314} SLIC_ERROR_ROUTINE(strConst__li2bpl60);
    return;
}



procedure {:origName "SLIC_KeReadStateEvent_entry"} {:osmodel} SLIC_KeReadStateEvent_entry(actual_caller_24: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_KeReadStateEvent_entry"} {:osmodel} SLIC_KeReadStateEvent_entry(actual_caller_24: int)
{
  var {:pointer} caller_24: int;

  anon0:
    caller_24 := actual_caller_24;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2315} SLIC_ABORT_15_0(caller_24);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon11_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon9_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:origName "SLIC_ABORT_31_0"} SLIC_ABORT_31_0(actual_caller_28: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_31_0"} SLIC_ABORT_31_0(actual_caller_28: int)
{
  var {:pointer} caller_28: int;

  anon0:
    caller_28 := actual_caller_28;
    call {:si_unique_call 2316} SLIC_ERROR_ROUTINE(strConst__li2bpl64);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_30: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_30: int)
{
  var {:pointer} caller_30: int;

  anon0:
    caller_30 := actual_caller_30;
    call {:si_unique_call 2317} SLIC_ERROR_ROUTINE(strConst__li2bpl65);
    return;
}



procedure {:origName "SLIC_KeCancelTimer_entry"} {:osmodel} SLIC_KeCancelTimer_entry(actual_caller_33: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_KeCancelTimer_entry"} {:osmodel} SLIC_KeCancelTimer_entry(actual_caller_33: int)
{
  var {:pointer} caller_33: int;

  anon0:
    caller_33 := actual_caller_33;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2318} SLIC_ABORT_1_0(caller_33);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon11_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon9_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:dopa "Mem_T.VOID"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.Address__DEVICE_CAPABILITIES"} {:fieldname "Address"} Address__DEVICE_CAPABILITIES(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.AlternateSetting__USBD_INTERFACE_INFORMATION"} {:fieldname "AlternateSetting"} AlternateSetting__USBD_INTERFACE_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Argument1_unnamed_tag_42"} {:fieldname "Argument1"} Argument1_unnamed_tag_42(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Argument4_unnamed_tag_42"} {:fieldname "Argument4"} Argument4_unnamed_tag_42(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AsULong64__KSE_USB_DEVICE_FLAGS"} {:fieldname "AsULong64"} AsULong64__KSE_USB_DEVICE_FLAGS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AsUchar__USB_FUNCTION_SUSPEND_OPTIONS"} {:fieldname "AsUchar"} AsUchar__USB_FUNCTION_SUSPEND_OPTIONS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.AutoLogVerboseEnabled__WPP_TRACE_CONTROL_BLOCK"} {:fieldname "AutoLogVerboseEnabled"} AutoLogVerboseEnabled__WPP_TRACE_CONTROL_BLOCK(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__PNP_BUS_INFORMATION"} {:fieldname "BusNumber"} BusNumber__PNP_BUS_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.BusTypeGuid__PNP_BUS_INFORMATION"} {:fieldname "BusTypeGuid"} BusTypeGuid__PNP_BUS_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CSChannelId_PARENT_FDO_EXTENSION"} {:fieldname "CSChannelId"} CSChannelId_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1228
}

function {:inline true} {:fieldmap "Mem_T.CSInterfaceNumber_PARENT_FDO_EXTENSION"} {:fieldname "CSInterfaceNumber"} CSInterfaceNumber_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1224
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CapabilityFunctionSuspend__COMPOSITE_DEVICE_CAPABILITIES"} {:fieldname "CapabilityFunctionSuspend"} CapabilityFunctionSuspend__COMPOSITE_DEVICE_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ClassHex1__CLASS_COMAPTIBLE_IDS"} {:fieldname "ClassHex1"} ClassHex1__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ClassHex2__CLASS_COMAPTIBLE_IDS"} {:fieldname "ClassHex2"} ClassHex2__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 172
}

function {:inline true} {:fieldmap "Mem_T.ClassHex3__CLASS_COMAPTIBLE_IDS"} {:fieldname "ClassHex3"} ClassHex3__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.ClassStr1__CLASS_COMAPTIBLE_IDS"} {:fieldname "ClassStr1"} ClassStr1__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ClassStr2__CLASS_COMAPTIBLE_IDS"} {:fieldname "ClassStr2"} ClassStr2__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.ClassStr3__CLASS_COMAPTIBLE_IDS"} {:fieldname "ClassStr3"} ClassStr3__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.CompatibleID__MS_EXT_CONFIG_DESC_FUNCTION"} {:fieldname "CompatibleID"} CompatibleID__MS_EXT_CONFIG_DESC_FUNCTION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "CompatibleId"} CompatibleId__USBC_FUNCTION_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.ConfigurationDescriptor__URB_SELECT_CONFIGURATION"} {:fieldname "ConfigurationDescriptor"} ConfigurationDescriptor__URB_SELECT_CONFIGURATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ConfigurationHandle__URB_SELECT_CONFIGURATION"} {:fieldname "ConfigurationHandle"} ConfigurationHandle__URB_SELECT_CONFIGURATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ConfigurationHandle__URB_SELECT_INTERFACE"} {:fieldname "ConfigurationHandle"} ConfigurationHandle__URB_SELECT_INTERFACE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ConnectStatus__USB_START_FAILDATA"} {:fieldname "ConnectStatus"} ConnectStatus__USB_START_FAILDATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Context__INTERFACE"} {:fieldname "Context"} Context__INTERFACE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Control_WPP_PROJECT_CONTROL_BLOCK"} {:fieldname "Control"} Control_WPP_PROJECT_CONTROL_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__DEVICE_RELATIONS"} {:fieldname "Count"} Count__DEVICE_RELATIONS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CsqAcquireLock__IO_CSQ"} {:fieldname "CsqAcquireLock"} CsqAcquireLock__IO_CSQ(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.CsqCompleteCanceledIrp__IO_CSQ"} {:fieldname "CsqCompleteCanceledIrp"} CsqCompleteCanceledIrp__IO_CSQ(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.CsqInsertIrp__IO_CSQ"} {:fieldname "CsqInsertIrp"} CsqInsertIrp__IO_CSQ(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CsqPeekNextIrp__IO_CSQ"} {:fieldname "CsqPeekNextIrp"} CsqPeekNextIrp__IO_CSQ(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.CsqReleaseLock__IO_CSQ"} {:fieldname "CsqReleaseLock"} CsqReleaseLock__IO_CSQ(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.CsqRemoveIrp__IO_CSQ"} {:fieldname "CsqRemoveIrp"} CsqRemoveIrp__IO_CSQ(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_6"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_6(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.P_MS_EXT_PROP_DESC_CUSTOM_PROP"} {:fieldname "CustomSection"} CustomSection__MS_EXT_PROP_DESC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.D1Latency__DEVICE_CAPABILITIES"} {:fieldname "D1Latency"} D1Latency__DEVICE_CAPABILITIES(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.D2Latency__DEVICE_CAPABILITIES"} {:fieldname "D2Latency"} D2Latency__DEVICE_CAPABILITIES(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T._D3COLD_SUPPORT_INTERFACE"} {:fieldname "D3ColdInterface"} D3ColdInterface_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1000
}

function {:inline true} {:fieldmap "Mem_T._KMUTANT"} {:fieldname "D3ColdStateMutex"} D3ColdStateMutex_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1040
}

function {:inline true} {:fieldmap "Mem_T.D3Latency__DEVICE_CAPABILITIES"} {:fieldname "D3Latency"} D3Latency__DEVICE_CAPABILITIES(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_PARTIAL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_PARTIAL_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data__KEY_VALUE_PARTIAL_INFORMATION"} {:fieldname "Data"} Data__KEY_VALUE_PARTIAL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DescriptorType__URB_CONTROL_DESCRIPTOR_REQUEST"} {:fieldname "DescriptorType"} DescriptorType__URB_CONTROL_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.DeviceD1__DEVICE_CAPABILITIES"} {:fieldname "DeviceD1"} DeviceD1__DEVICE_CAPABILITIES(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceD2__DEVICE_CAPABILITIES"} {:fieldname "DeviceD2"} DeviceD2__DEVICE_CAPABILITIES(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DeviceSelSuspended_FUNCTION_PDO_EXTENSION"} {:fieldname "DeviceSelSuspended"} DeviceSelSuspended_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceTextType_unnamed_tag_35"} {:fieldname "DeviceTextType"} DeviceTextType_unnamed_tag_35(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.Dir__BM_REQUEST_TYPE"} {:fieldname "Dir"} Dir__BM_REQUEST_TYPE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DisableUASP__KSE_USB_DEVICE_FLAGS"} {:fieldname "DisableUASP"} DisableUASP__KSE_USB_DEVICE_FLAGS(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.DockDevice__DEVICE_CAPABILITIES"} {:fieldname "DockDevice"} DockDevice__DEVICE_CAPABILITIES(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DoubleNull__CLASS_COMAPTIBLE_IDS"} {:fieldname "DoubleNull"} DoubleNull__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.DriverContext_unnamed_tag_6"} {:fieldname "DriverContext"} DriverContext_unnamed_tag_6(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DriverData__USB_START_FAILDATA"} {:fieldname "DriverData"} DriverData__USB_START_FAILDATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.EjectSupported__DEVICE_CAPABILITIES"} {:fieldname "EjectSupported"} EjectSupported__DEVICE_CAPABILITIES(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EndpointAddress__USBD_PIPE_INFORMATION"} {:fieldname "EndpointAddress"} EndpointAddress__USBD_PIPE_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__WPP_TRACE_CONTROL_BLOCK"} {:fieldname "Flags"} Flags__WPP_TRACE_CONTROL_BLOCK(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FunctionDescription__USBC_FUNCTION_DESCRIPTOR"} {:fieldname "FunctionDescription"} FunctionDescription__USBC_FUNCTION_DESCRIPTOR(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.FunctionFlags__USBC_FUNCTION_DESCRIPTOR"} {:fieldname "FunctionFlags"} FunctionFlags__USBC_FUNCTION_DESCRIPTOR(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Function__MS_EXT_CONFIG_DESC"} {:fieldname "Function"} Function__MS_EXT_CONFIG_DESC(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Function__URB_HEADER"} {:fieldname "Function"} Function__URB_HEADER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.GetBusDriverD3ColdSupport__D3COLD_SUPPORT_INTERFACE"} {:fieldname "GetBusDriverD3ColdSupport"} GetBusDriverD3ColdSupport__D3COLD_SUPPORT_INTERFACE(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.GetD3ColdCapability__D3COLD_SUPPORT_INTERFACE"} {:fieldname "GetD3ColdCapability"} GetD3ColdCapability__D3COLD_SUPPORT_INTERFACE(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.GetIdleWakeInfo__D3COLD_SUPPORT_INTERFACE"} {:fieldname "GetIdleWakeInfo"} GetIdleWakeInfo__D3COLD_SUPPORT_INTERFACE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.GetLastTransitionStatus__D3COLD_SUPPORT_INTERFACE"} {:fieldname "GetLastTransitionStatus"} GetLastTransitionStatus__D3COLD_SUPPORT_INTERFACE(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HardwareDisabled__DEVICE_CAPABILITIES"} {:fieldname "HardwareDisabled"} HardwareDisabled__DEVICE_CAPABILITIES(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "HardwareId"} HardwareId__USBC_FUNCTION_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Hdr__URB_FRAME_LENGTH_CONTROL"} {:fieldname "Hdr"} Hdr__URB_FRAME_LENGTH_CONTROL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Header__MS_EXT_CONFIG_DESC"} {:fieldname "Header"} Header__MS_EXT_CONFIG_DESC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Header__MS_EXT_PROP_DESC"} {:fieldname "Header"} Header__MS_EXT_PROP_DESC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HiByte__wIndex"} {:fieldname "HiByte"} HiByte__wIndex(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HubPortNumber__USB_TOPOLOGY_ADDRESS"} {:fieldname "HubPortNumber"} HubPortNumber__USB_TOPOLOGY_ADDRESS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_34"} {:fieldname "IdType"} IdType_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IdleCallback__USB_IDLE_CALLBACK_INFO"} {:fieldname "IdleCallback"} IdleCallback__USB_IDLE_CALLBACK_INFO(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IdleContext__USB_IDLE_CALLBACK_INFO"} {:fieldname "IdleContext"} IdleContext__USB_IDLE_CALLBACK_INFO(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Index__URB_CONTROL_DESCRIPTOR_REQUEST"} {:fieldname "Index"} Index__URB_CONTROL_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.Index__URB_CONTROL_VENDOR_OR_CLASS_REQUEST"} {:fieldname "Index"} Index__URB_CONTROL_VENDOR_OR_CLASS_REQUEST(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceDereference__INTERFACE"} {:fieldname "InterfaceDereference"} InterfaceDereference__INTERFACE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InterfaceDescriptorList__USBC_FUNCTION_DESCRIPTOR"} {:fieldname "InterfaceDescriptorList"} InterfaceDescriptorList__USBC_FUNCTION_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InterfaceDescriptor__USBD_INTERFACE_LIST_ENTRY"} {:fieldname "InterfaceDescriptor"} InterfaceDescriptor__USBD_INTERFACE_LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceNumber__URB_OS_FEATURE_DESCRIPTOR_REQUEST"} {:fieldname "InterfaceNumber"} InterfaceNumber__URB_OS_FEATURE_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.InterfaceNumber__USBD_INTERFACE_INFORMATION"} {:fieldname "InterfaceNumber"} InterfaceNumber__USBD_INTERFACE_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceReference__INTERFACE"} {:fieldname "InterfaceReference"} InterfaceReference__INTERFACE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.InterfaceSpecificData_unnamed_tag_29"} {:fieldname "InterfaceSpecificData"} InterfaceSpecificData_unnamed_tag_29(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType_unnamed_tag_29"} {:fieldname "InterfaceType"} InterfaceType_unnamed_tag_29(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Interface__REQUEST_REMOTE_WAKE_NOTIFICATION"} {:fieldname "Interface"} Interface__REQUEST_REMOTE_WAKE_NOTIFICATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._USBD_INTERFACE_INFORMATION"} {:fieldname "Interface"} Interface__URB_SELECT_CONFIGURATION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._USBD_INTERFACE_INFORMATION"} {:fieldname "Interface"} Interface__URB_SELECT_INTERFACE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Interface__USBD_INTERFACE_LIST_ENTRY"} {:fieldname "Interface"} Interface__USBD_INTERFACE_LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Interface_unnamed_tag_29"} {:fieldname "Interface"} Interface_unnamed_tag_29(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._IO_STATUS_BLOCK"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.LanguageId__URB_CONTROL_DESCRIPTOR_REQUEST"} {:fieldname "LanguageId"} LanguageId__URB_CONTROL_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.LegacyBusType__PNP_BUS_INFORMATION"} {:fieldname "LegacyBusType"} LegacyBusType__PNP_BUS_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.LengthInBytes__USB_START_FAILDATA"} {:fieldname "LengthInBytes"} LengthInBytes__USB_START_FAILDATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Level__WPP_TRACE_CONTROL_BLOCK"} {:fieldname "Level"} Level__WPP_TRACE_CONTROL_BLOCK(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_6(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.List__WORK_QUEUE_ITEM"} {:fieldname "List"} List__WORK_QUEUE_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LockQueue__KLOCK_QUEUE_HANDLE"} {:fieldname "LockQueue"} LockQueue__KLOCK_QUEUE_HANDLE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LockSupported__DEVICE_CAPABILITIES"} {:fieldname "LockSupported"} LockSupported__DEVICE_CAPABILITIES(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Lock__KSPIN_LOCK_QUEUE"} {:fieldname "Lock"} Lock__KSPIN_LOCK_QUEUE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Logger__WPP_TRACE_CONTROL_BLOCK"} {:fieldname "Logger"} Logger__WPP_TRACE_CONTROL_BLOCK(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.LowByte__wIndex"} {:fieldname "LowByte"} LowByte__wIndex(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MS_FeatureDescriptorIndex__URB_OS_FEATURE_DESCRIPTOR_REQUEST"} {:fieldname "MS_FeatureDescriptorIndex"} MS_FeatureDescriptorIndex__URB_OS_FEATURE_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MaxPower__USB_CONFIGURATION_DESCRIPTOR"} {:fieldname "MaxPower"} MaxPower__USB_CONFIGURATION_DESCRIPTOR(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumPacketSize__USBD_PIPE_INFORMATION"} {:fieldname "MaximumPacketSize"} MaximumPacketSize__USBD_PIPE_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MaximumTransferSize__USBD_PIPE_INFORMATION"} {:fieldname "MaximumTransferSize"} MaximumTransferSize__USBD_PIPE_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Next__KSPIN_LOCK_QUEUE"} {:fieldname "Next"} Next__KSPIN_LOCK_QUEUE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NoDisplayInUI__DEVICE_CAPABILITIES"} {:fieldname "NoDisplayInUI"} NoDisplayInUI__DEVICE_CAPABILITIES(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.NonDynamic__DEVICE_CAPABILITIES"} {:fieldname "NonDynamic"} NonDynamic__DEVICE_CAPABILITIES(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.NtStatus__USB_START_FAILDATA"} {:fieldname "NtStatus"} NtStatus__USB_START_FAILDATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Null1__CLASS_COMAPTIBLE_IDS"} {:fieldname "Null1"} Null1__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Null2__CLASS_COMAPTIBLE_IDS"} {:fieldname "Null2"} Null2__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.Null3__CLASS_COMAPTIBLE_IDS"} {:fieldname "Null3"} Null3__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.NumberOfInterfaces__USBC_FUNCTION_DESCRIPTOR"} {:fieldname "NumberOfInterfaces"} NumberOfInterfaces__USBC_FUNCTION_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NumberOfPipes__USBD_INTERFACE_INFORMATION"} {:fieldname "NumberOfPipes"} NumberOfPipes__USBD_INTERFACE_INFORMATION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Objects__DEVICE_RELATIONS"} {:fieldname "Objects"} Objects__DEVICE_RELATIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OldIrql__KLOCK_QUEUE_HANDLE"} {:fieldname "OldIrql"} OldIrql__KLOCK_QUEUE_HANDLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_5"} {:fieldname "Overlay"} Overlay_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParentSetD0Completion_FUNCTION_PDO_EXTENSION"} {:fieldname "ParentSetD0Completion"} ParentSetD0Completion_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.Partial_unnamed_tag_69"} {:fieldname "Partial"} Partial_unnamed_tag_69(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PciBusNumber__USB_TOPOLOGY_ADDRESS"} {:fieldname "PciBusNumber"} PciBusNumber__USB_TOPOLOGY_ADDRESS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PciDeviceNumber__USB_TOPOLOGY_ADDRESS"} {:fieldname "PciDeviceNumber"} PciDeviceNumber__USB_TOPOLOGY_ADDRESS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PciFunctionNumber__USB_TOPOLOGY_ADDRESS"} {:fieldname "PciFunctionNumber"} PciFunctionNumber__USB_TOPOLOGY_ADDRESS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PdoEnableCallback__USBC_DEVICE_CONFIGURATION_INTERFACE_V1"} {:fieldname "PdoEnableCallback"} PdoEnableCallback__USBC_DEVICE_CONFIGURATION_INTERFACE_V1(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PhysicalDeviceObject__USB_FUNCTION_DATA"} {:fieldname "PhysicalDeviceObject"} PhysicalDeviceObject__USB_FUNCTION_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.PipeFlags__USBD_PIPE_INFORMATION"} {:fieldname "PipeFlags"} PipeFlags__USBD_PIPE_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Pipes__USBD_INTERFACE_INFORMATION"} {:fieldname "Pipes"} Pipes__USBD_INTERFACE_INFORMATION(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.PowerState__USB_FUNCTION_SUSPEND_OPTIONS"} {:fieldname "PowerState"} PowerState__USB_FUNCTION_SUSPEND_OPTIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.PropertyName__MS_EXT_PROP_DESC_CUSTOM_PROP"} {:fieldname "PropertyName"} PropertyName__MS_EXT_PROP_DESC_CUSTOM_PROP(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Prot1__CLASS_COMAPTIBLE_IDS"} {:fieldname "Prot1"} Prot1__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.ProtHex1__CLASS_COMAPTIBLE_IDS"} {:fieldname "ProtHex1"} ProtHex1__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceText_unnamed_tag_8"} {:fieldname "QueryDeviceText"} QueryDeviceText_unnamed_tag_8(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_29"} {:fieldname "QueryInterface"} QueryInterface_unnamed_tag_8(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RawDeviceOK__DEVICE_CAPABILITIES"} {:fieldname "RawDeviceOK"} RawDeviceOK__DEVICE_CAPABILITIES(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Recipient__BM_REQUEST_TYPE"} {:fieldname "Recipient"} Recipient__BM_REQUEST_TYPE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Recipient__URB_OS_FEATURE_DESCRIPTOR_REQUEST"} {:fieldname "Recipient"} Recipient__URB_OS_FEATURE_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.RemoteWakeEnabled__USB_FUNCTION_SUSPEND_OPTIONS"} {:fieldname "RemoteWakeEnabled"} RemoteWakeEnabled__USB_FUNCTION_SUSPEND_OPTIONS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RemoteWakeupCapable__USB_INTERFACE_STATUS"} {:fieldname "RemoteWakeupCapable"} RemoteWakeupCapable__USB_INTERFACE_STATUS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Removable__DEVICE_CAPABILITIES"} {:fieldname "Removable"} Removable__DEVICE_CAPABILITIES(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Request__URB_CONTROL_VENDOR_OR_CLASS_REQUEST"} {:fieldname "Request"} Request__URB_CONTROL_VENDOR_OR_CLASS_REQUEST(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.ReservePointer__IO_CSQ"} {:fieldname "ReservePointer"} ReservePointer__IO_CSQ(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Reserved1__DEVICE_CAPABILITIES"} {:fieldname "Reserved1"} Reserved1__DEVICE_CAPABILITIES(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.Reserved__COMPOSITE_DEVICE_CAPABILITIES"} {:fieldname "Reserved"} Reserved__COMPOSITE_DEVICE_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Reserved__DEVICE_CAPABILITIES"} {:fieldname "Reserved"} Reserved__DEVICE_CAPABILITIES(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.Result__MEDIA_SERIAL_NUMBER_DATA"} {:fieldname "Result"} Result__MEDIA_SERIAL_NUMBER_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RootHubPortNumber__USB_TOPOLOGY_ADDRESS"} {:fieldname "RootHubPortNumber"} RootHubPortNumber__USB_TOPOLOGY_ADDRESS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SerialNumberData__MEDIA_SERIAL_NUMBER_DATA"} {:fieldname "SerialNumberData"} SerialNumberData__MEDIA_SERIAL_NUMBER_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SerialNumberLength__MEDIA_SERIAL_NUMBER_DATA"} {:fieldname "SerialNumberLength"} SerialNumberLength__MEDIA_SERIAL_NUMBER_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SetD3ColdSupport__D3COLD_SUPPORT_INTERFACE"} {:fieldname "SetD3ColdSupport"} SetD3ColdSupport__D3COLD_SUPPORT_INTERFACE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.PINT4"} {:fieldname "SetupPacket"} SetupPacket__URB_CONTROL_TRANSFER_EX(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.ShutdownType_unnamed_tag_39"} {:fieldname "ShutdownType"} ShutdownType_unnamed_tag_39(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.SilentInstall__DEVICE_CAPABILITIES"} {:fieldname "SilentInstall"} SilentInstall__DEVICE_CAPABILITIES(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Size__DEVICE_CAPABILITIES"} {:fieldname "Size"} Size__DEVICE_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.Size__INTERFACE"} {:fieldname "Size"} Size__INTERFACE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Size__REQUEST_REMOTE_WAKE_NOTIFICATION"} {:fieldname "Size"} Size__REQUEST_REMOTE_WAKE_NOTIFICATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Size__USB_FUNCTION_DATA"} {:fieldname "Size"} Size__USB_FUNCTION_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Size_unnamed_tag_29"} {:fieldname "Size"} Size_unnamed_tag_29(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.StackSize__DEVICE_OBJECT"} {:fieldname "StackSize"} StackSize__DEVICE_OBJECT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.StartDeviceCallback__USBC_DEVICE_CONFIGURATION_INTERFACE_V1"} {:fieldname "StartDeviceCallback"} StartDeviceCallback__USBC_DEVICE_CONFIGURATION_INTERFACE_V1(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Status__URB_HEADER"} {:fieldname "Status"} Status__URB_HEADER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SubClassHex1__CLASS_COMAPTIBLE_IDS"} {:fieldname "SubClassHex1"} SubClassHex1__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.SubClassHex2__CLASS_COMAPTIBLE_IDS"} {:fieldname "SubClassHex2"} SubClassHex2__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 220
}

function {:inline true} {:fieldmap "Mem_T.SubClassStr1__CLASS_COMAPTIBLE_IDS"} {:fieldname "SubClassStr1"} SubClassStr1__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SubClassStr2__CLASS_COMAPTIBLE_IDS"} {:fieldname "SubClassStr2"} SubClassStr2__CLASS_COMAPTIBLE_IDS(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.SubCompatibleID__MS_EXT_CONFIG_DESC_FUNCTION"} {:fieldname "SubCompatibleID"} SubCompatibleID__MS_EXT_CONFIG_DESC_FUNCTION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.SurpriseRemovalOK__DEVICE_CAPABILITIES"} {:fieldname "SurpriseRemovalOK"} SurpriseRemovalOK__DEVICE_CAPABILITIES(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_1"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_1(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Timeout__URB_CONTROL_TRANSFER_EX"} {:fieldname "Timeout"} Timeout__URB_CONTROL_TRANSFER_EX(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "TransferBufferLength"} TransferBufferLength__URB_CONTROL_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.TransferBufferLength__URB_CONTROL_TRANSFER_EX"} {:fieldname "TransferBufferLength"} TransferBufferLength__URB_CONTROL_TRANSFER_EX(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.TransferBufferLength__URB_CONTROL_VENDOR_OR_CLASS_REQUEST"} {:fieldname "TransferBufferLength"} TransferBufferLength__URB_CONTROL_VENDOR_OR_CLASS_REQUEST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.TransferBufferLength__URB_OS_FEATURE_DESCRIPTOR_REQUEST"} {:fieldname "TransferBufferLength"} TransferBufferLength__URB_OS_FEATURE_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.TransferBufferMDL__URB_CONTROL_DESCRIPTOR_REQUEST"} {:fieldname "TransferBufferMDL"} TransferBufferMDL__URB_CONTROL_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.TransferBufferMDL__URB_CONTROL_TRANSFER_EX"} {:fieldname "TransferBufferMDL"} TransferBufferMDL__URB_CONTROL_TRANSFER_EX(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.TransferBuffer__URB_CONTROL_DESCRIPTOR_REQUEST"} {:fieldname "TransferBuffer"} TransferBuffer__URB_CONTROL_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.TransferBuffer__URB_CONTROL_TRANSFER_EX"} {:fieldname "TransferBuffer"} TransferBuffer__URB_CONTROL_TRANSFER_EX(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.TransferBuffer__URB_CONTROL_VENDOR_OR_CLASS_REQUEST"} {:fieldname "TransferBuffer"} TransferBuffer__URB_CONTROL_VENDOR_OR_CLASS_REQUEST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.TransferBuffer__URB_OS_FEATURE_DESCRIPTOR_REQUEST"} {:fieldname "TransferBuffer"} TransferBuffer__URB_OS_FEATURE_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.TransferFlags__URB_CONTROL_TRANSFER_EX"} {:fieldname "TransferFlags"} TransferFlags__URB_CONTROL_TRANSFER_EX(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.TransferFlags__URB_CONTROL_VENDOR_OR_CLASS_REQUEST"} {:fieldname "TransferFlags"} TransferFlags__URB_CONTROL_VENDOR_OR_CLASS_REQUEST(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_22"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_22(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__BM_REQUEST_TYPE"} {:fieldname "Type"} Type__BM_REQUEST_TYPE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Type__KEY_VALUE_PARTIAL_INFORMATION"} {:fieldname "Type"} Type__KEY_VALUE_PARTIAL_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UINumber__DEVICE_CAPABILITIES"} {:fieldname "UINumber"} UINumber__DEVICE_CAPABILITIES(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.UniqueID__DEVICE_CAPABILITIES"} {:fieldname "UniqueID"} UniqueID__DEVICE_CAPABILITIES(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T._URB_CONTROL_DESCRIPTOR_REQUEST"} {:fieldname "UrbControlDescriptorRequest"} UrbControlDescriptorRequest__URB(x: int) : int
{
  x + 716
}

function {:inline true} {:fieldmap "Mem_T.UrbControlVendorClassRequest__URB"} {:fieldname "UrbControlVendorClassRequest"} UrbControlVendorClassRequest__URB(x: int) : int
{
  x + 1004
}

function {:inline true} {:fieldmap "Mem_T.UrbHeader__URB"} {:fieldname "UrbHeader"} UrbHeader__URB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.UrbLink__URB_CONTROL_DESCRIPTOR_REQUEST"} {:fieldname "UrbLink"} UrbLink__URB_CONTROL_DESCRIPTOR_REQUEST(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.UrbOpenStaticStreams__URB"} {:fieldname "UrbOpenStaticStreams"} UrbOpenStaticStreams__URB(x: int) : int
{
  x + 1412
}

function {:inline true} {:fieldmap "Mem_T.UrbSelectConfiguration__URB"} {:fieldname "UrbSelectConfiguration"} UrbSelectConfiguration__URB(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.UrbSelectInterface__URB"} {:fieldname "UrbSelectInterface"} UrbSelectInterface__URB(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.UsbdFunctionHandle__REQUEST_REMOTE_WAKE_NOTIFICATION"} {:fieldname "UsbdFunctionHandle"} UsbdFunctionHandle__REQUEST_REMOTE_WAKE_NOTIFICATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.UsbdFunctionHandle__USB_FUNCTION_DATA"} {:fieldname "UsbdFunctionHandle"} UsbdFunctionHandle__USB_FUNCTION_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.UsbdStatus__USB_START_FAILDATA"} {:fieldname "UsbdStatus"} UsbdStatus__USB_START_FAILDATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Value__URB_CONTROL_VENDOR_OR_CLASS_REQUEST"} {:fieldname "Value"} Value__URB_CONTROL_VENDOR_OR_CLASS_REQUEST(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.Version__DEVICE_CAPABILITIES"} {:fieldname "Version"} Version__DEVICE_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version__INTERFACE"} {:fieldname "Version"} Version__INTERFACE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version__REQUEST_REMOTE_WAKE_NOTIFICATION"} {:fieldname "Version"} Version__REQUEST_REMOTE_WAKE_NOTIFICATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Version__USB_FUNCTION_DATA"} {:fieldname "Version"} Version__USB_FUNCTION_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Version_unnamed_tag_29"} {:fieldname "Version"} Version_unnamed_tag_29(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.W__wIndex"} {:fieldname "W"} W__wIndex(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD0__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD0"} WakeFromD0__DEVICE_CAPABILITIES(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD1__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD1"} WakeFromD1__DEVICE_CAPABILITIES(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD2__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD2"} WakeFromD2__DEVICE_CAPABILITIES(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD3__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD3"} WakeFromD3__DEVICE_CAPABILITIES(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.WakeFromInterrupt__DEVICE_CAPABILITIES"} {:fieldname "WakeFromInterrupt"} WakeFromInterrupt__DEVICE_CAPABILITIES(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.WarmEjectSupported__DEVICE_CAPABILITIES"} {:fieldname "WarmEjectSupported"} WarmEjectSupported__DEVICE_CAPABILITIES(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__IO_WORKITEM"} {:fieldname "WorkItem"} WorkItem__IO_WORKITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._buf_xstr"} {:fieldname "_buf"} _buf_xstr(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._len_xstr"} {:fieldname "_len"} _len_xstr(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.allowIdleIrpInD3_FUNCTION_PDO_EXTENSION"} {:fieldname "allowIdleIrpInD3"} allowIdleIrpInD3_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 388
}

function {:inline true} {:fieldmap "Mem_T.altSettingForEnum_FUNCTION_PDO_EXTENSION"} {:fieldname "altSettingForEnum"} altSettingForEnum_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 396
}

function {:inline true} {:fieldmap "Mem_T.alternateSetting__INTERFACE_DATA"} {:fieldname "alternateSetting"} alternateSetting__INTERFACE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "bAlternateSetting"} bAlternateSetting__USB_INTERFACE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.bChannelID_CS_CHANNEL_DESCRIPTOR"} {:fieldname "bChannelID"} bChannelID_CS_CHANNEL_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.bConfigurationValue__USB_CONFIGURATION_DESCRIPTOR"} {:fieldname "bConfigurationValue"} bConfigurationValue__USB_CONFIGURATION_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.bCount__MS_EXT_CONFIG_DESC_HEADER"} {:fieldname "bCount"} bCount__MS_EXT_CONFIG_DESC_HEADER(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "bDescriptorType"} bDescriptorType__USB_COMMON_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.bDeviceClass__USBC_CALLBACK_DISPATCH_TABLE"} {:fieldname "bDeviceClass"} bDeviceClass__USBC_CALLBACK_DISPATCH_TABLE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.bDeviceClass__USB_DEVICE_DESCRIPTOR"} {:fieldname "bDeviceClass"} bDeviceClass__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.bDeviceProtocol__USBC_CALLBACK_DISPATCH_TABLE"} {:fieldname "bDeviceProtocol"} bDeviceProtocol__USBC_CALLBACK_DISPATCH_TABLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.bDeviceProtocol__USB_DEVICE_DESCRIPTOR"} {:fieldname "bDeviceProtocol"} bDeviceProtocol__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.bDeviceSubClass__USBC_CALLBACK_DISPATCH_TABLE"} {:fieldname "bDeviceSubClass"} bDeviceSubClass__USBC_CALLBACK_DISPATCH_TABLE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.bDeviceSubClass__USB_DEVICE_DESCRIPTOR"} {:fieldname "bDeviceSubClass"} bDeviceSubClass__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "bEndpointAddress"} bEndpointAddress__USB_ENDPOINT_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.bFirstInterfaceNumber__MS_EXT_CONFIG_DESC_FUNCTION"} {:fieldname "bFirstInterfaceNumber"} bFirstInterfaceNumber__MS_EXT_CONFIG_DESC_FUNCTION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.bFirstInterface__USB_INTERFACE_ASSOCIATION_DESCRIPTOR"} {:fieldname "bFirstInterface"} bFirstInterface__USB_INTERFACE_ASSOCIATION_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.bFunctionClass__USB_INTERFACE_ASSOCIATION_DESCRIPTOR"} {:fieldname "bFunctionClass"} bFunctionClass__USB_INTERFACE_ASSOCIATION_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.bFunctionProtocol__USB_INTERFACE_ASSOCIATION_DESCRIPTOR"} {:fieldname "bFunctionProtocol"} bFunctionProtocol__USB_INTERFACE_ASSOCIATION_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.bFunctionSubClass__USB_INTERFACE_ASSOCIATION_DESCRIPTOR"} {:fieldname "bFunctionSubClass"} bFunctionSubClass__USB_INTERFACE_ASSOCIATION_DESCRIPTOR(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.bInterfaceClass__USB_INTERFACE_DESCRIPTOR"} {:fieldname "bInterfaceClass"} bInterfaceClass__USB_INTERFACE_DESCRIPTOR(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.bInterfaceCount__USB_INTERFACE_ASSOCIATION_DESCRIPTOR"} {:fieldname "bInterfaceCount"} bInterfaceCount__USB_INTERFACE_ASSOCIATION_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "bInterfaceNumber"} bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.bInterfaceProtocol__USB_INTERFACE_DESCRIPTOR"} {:fieldname "bInterfaceProtocol"} bInterfaceProtocol__USB_INTERFACE_DESCRIPTOR(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.bInterfaceSubClass__USB_INTERFACE_DESCRIPTOR"} {:fieldname "bInterfaceSubClass"} bInterfaceSubClass__USB_INTERFACE_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "bLength"} bLength__USB_COMMON_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.bMethod_CS_METHOD_AND_VARIANT"} {:fieldname "bMethod"} bMethod_CS_METHOD_AND_VARIANT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.bNumConfigurations__USB_DEVICE_DESCRIPTOR"} {:fieldname "bNumConfigurations"} bNumConfigurations__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.bNumEndpoints__USB_INTERFACE_DESCRIPTOR"} {:fieldname "bNumEndpoints"} bNumEndpoints__USB_INTERFACE_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.bNumInterfaces__USB_CONFIGURATION_DESCRIPTOR"} {:fieldname "bNumInterfaces"} bNumInterfaces__USB_CONFIGURATION_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.bRequest__USB_DEFAULT_PIPE_SETUP_PACKET"} {:fieldname "bRequest"} bRequest__USB_DEFAULT_PIPE_SETUP_PACKET(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.bString__USB_STRING_DESCRIPTOR"} {:fieldname "bString"} bString__USB_STRING_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.baseInterfaceNumber_FUNCTION_PDO_EXTENSION"} {:fieldname "baseInterfaceNumber"} baseInterfaceNumber_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.baseInterfaceNumber__PARENT_FUNCTION_ASSOC"} {:fieldname "baseInterfaceNumber"} baseInterfaceNumber__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.bcdDevice__USB_DEVICE_DESCRIPTOR"} {:fieldname "bcdDevice"} bcdDevice__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.bcdUSB__USB_DEVICE_DESCRIPTOR"} {:fieldname "bcdUSB"} bcdUSB__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.bcdVersion__MS_EXT_CONFIG_DESC_HEADER"} {:fieldname "bcdVersion"} bcdVersion__MS_EXT_CONFIG_DESC_HEADER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.bcdVersion__MS_EXT_PROP_DESC_HEADER"} {:fieldname "bcdVersion"} bcdVersion__MS_EXT_PROP_DESC_HEADER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.bmAttributes__USB_CONFIGURATION_DESCRIPTOR"} {:fieldname "bmAttributes"} bmAttributes__USB_CONFIGURATION_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.bmRequestType__USB_DEFAULT_PIPE_SETUP_PACKET"} {:fieldname "bmRequestType"} bmRequestType__USB_DEFAULT_PIPE_SETUP_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.callbackFunction__USBC_CALLBACK_DISPATCH_TABLE"} {:fieldname "callbackFunction"} callbackFunction__USBC_CALLBACK_DISPATCH_TABLE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.canWakeFromD3_FUNCTION_PDO_EXTENSION"} {:fieldname "canWakeFromD3"} canWakeFromD3_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.capabilityFlags_PARENT_FDO_EXTENSION"} {:fieldname "capabilityFlags"} capabilityFlags_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2228
}

function {:inline true} {:fieldmap "Mem_T.checkParentIdleWorkItem_PARENT_FDO_EXTENSION"} {:fieldname "checkParentIdleWorkItem"} checkParentIdleWorkItem_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1256
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "compatibleIds"} compatibleIds__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.completedParentWaitWakeIrp_PARENT_FDO_EXTENSION"} {:fieldname "completedParentWaitWakeIrp"} completedParentWaitWakeIrp_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 808
}

function {:inline true} {:fieldmap "Mem_T.compositeDriverRegistered_PARENT_FDO_EXTENSION"} {:fieldname "compositeDriverRegistered"} compositeDriverRegistered_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2356
}

function {:inline true} {:fieldmap "Mem_T.configDesc_PARENT_FDO_EXTENSION"} {:fieldname "configDesc"} configDesc_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.configInterfaceValid__USBC_FDO_FLAGS"} {:fieldname "configInterfaceValid"} configInterfaceValid__USBC_FDO_FLAGS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.configInterface_PARENT_FDO_EXTENSION"} {:fieldname "configInterface"} configInterface_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2288
}

function {:inline true} {:fieldmap "Mem_T.context__USBC_WORKER_CONTEXT"} {:fieldname "context"} context__USBC_WORKER_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.controlTransferCompletionStatus__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "controlTransferCompletionStatus"} controlTransferCompletionStatus__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.controlTransferIrpPending__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "controlTransferIrpPending"} controlTransferIrpPending__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.controlTransferIrp__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "controlTransferIrp"} controlTransferIrp__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.controlTransferUrb__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "controlTransferUrb"} controlTransferUrb__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.currentAltSetting__INTERFACE_DATA"} {:fieldname "currentAltSetting"} currentAltSetting__INTERFACE_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.currentInterfaceNumber__INTERFACE_DATA"} {:fieldname "currentInterfaceNumber"} currentInterfaceNumber__INTERFACE_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "cyclePortInProgress"} cyclePortInProgress_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1244
}

function {:inline true} {:fieldmap "Mem_T.dataLength__USBC_ERROR_RECORD"} {:fieldname "dataLength"} dataLength__USBC_ERROR_RECORD(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.debugLog_FUNCTION_PDO_EXTENSION"} {:fieldname "debugLog"} debugLog_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.debugLog_PARENT_FDO_EXTENSION"} {:fieldname "debugLog"} debugLog_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2368
}

function {:inline true} {:fieldmap "Mem_T.decorateInstanceID_FUNCTION_PDO_EXTENSION"} {:fieldname "decorateInstanceID"} decorateInstanceID_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 392
}

function {:inline true} {:fieldmap "Mem_T.defaultEnable__USBC_CALLBACK_DISPATCH_TABLE"} {:fieldname "defaultEnable"} defaultEnable__USBC_CALLBACK_DISPATCH_TABLE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.deferSSCancellation_FUNCTION_PDO_EXTENSION"} {:fieldname "deferSSCancellation"} deferSSCancellation_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T._DEVICE_CAPABILITIES"} {:fieldname "deviceCapabilities"} deviceCapabilities_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.deviceClass__USBC_CALLBACK_REGISTRY_DATA"} {:fieldname "deviceClass"} deviceClass__USBC_CALLBACK_REGISTRY_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._USB_DEVICE_DESCRIPTOR"} {:fieldname "deviceDesc"} deviceDesc_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.deviceObject__USBC_ERROR_RECORD"} {:fieldname "deviceObject"} deviceObject__USBC_ERROR_RECORD(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.deviceProtocol__USBC_CALLBACK_REGISTRY_DATA"} {:fieldname "deviceProtocol"} deviceProtocol__USBC_CALLBACK_REGISTRY_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.deviceRelations_PARENT_FDO_EXTENSION"} {:fieldname "deviceRelations"} deviceRelations_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.deviceSubClass__USBC_CALLBACK_REGISTRY_DATA"} {:fieldname "deviceSubClass"} deviceSubClass__USBC_CALLBACK_REGISTRY_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.disableUASP__USBC_CAPABILITY_FLAGS"} {:fieldname "disableUASP"} disableUASP__USBC_CAPABILITY_FLAGS(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.dwLength__MS_EXT_CONFIG_DESC_HEADER"} {:fieldname "dwLength"} dwLength__MS_EXT_CONFIG_DESC_HEADER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwLength__MS_EXT_PROP_DESC_HEADER"} {:fieldname "dwLength"} dwLength__MS_EXT_PROP_DESC_HEADER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwPropertyDataLength__MS_EXT_PROP_DESC_CUSTOM_PROP_DATA"} {:fieldname "dwPropertyDataLength"} dwPropertyDataLength__MS_EXT_PROP_DESC_CUSTOM_PROP_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwPropertyDataType__MS_EXT_PROP_DESC_CUSTOM_PROP"} {:fieldname "dwPropertyDataType"} dwPropertyDataType__MS_EXT_PROP_DESC_CUSTOM_PROP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.dwSize__MS_EXT_PROP_DESC_CUSTOM_PROP"} {:fieldname "dwSize"} dwSize__MS_EXT_PROP_DESC_CUSTOM_PROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.enableIdleTimerOnParentD0__USBC_FDO_FLAGS"} {:fieldname "enableIdleTimerOnParentD0"} enableIdleTimerOnParentD0__USBC_FDO_FLAGS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.enableIdleTimer__USBC_FDO_FLAGS"} {:fieldname "enableIdleTimer"} enableIdleTimer__USBC_FDO_FLAGS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.endpointAddress__INTERFACE_DATA"} {:fieldname "endpointAddress"} endpointAddress__INTERFACE_DATA(x: int) : int
{
  x + 1032
}

function {:inline true} {:fieldmap "Mem_T.endpointCount__INTERFACE_DATA"} {:fieldname "endpointCount"} endpointCount__INTERFACE_DATA(x: int) : int
{
  x + 2060
}

function {:inline true} {:fieldmap "Mem_T.enhancedDescriptorValidation__USBC_CAPABILITY_FLAGS"} {:fieldname "enhancedDescriptorValidation"} enhancedDescriptorValidation__USBC_CAPABILITY_FLAGS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.errorCode__USBC_ERROR_RECORD"} {:fieldname "errorCode"} errorCode__USBC_ERROR_RECORD(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.errorRecordLength__USBC_ERROR_RECORD"} {:fieldname "errorRecordLength"} errorRecordLength__USBC_ERROR_RECORD(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.extension__IDLE_WORKER_CONTEXT"} {:fieldname "extension"} extension__IDLE_WORKER_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fdoFlags_PARENT_FDO_EXTENSION"} {:fieldname "fdoFlags"} fdoFlags_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2256
}

function {:inline true} {:fieldmap "Mem_T.fdo_PARENT_FDO_EXTENSION"} {:fieldname "fdo"} fdo_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.functionAssoc_FUNCTION_PDO_EXTENSION"} {:fieldname "functionAssoc"} functionAssoc_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "functionDescription"} functionDescription__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.functionDeviceDesc_FUNCTION_PDO_EXTENSION"} {:fieldname "functionDeviceDesc"} functionDeviceDesc_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.functionFlags__PARENT_FUNCTION_ASSOC"} {:fieldname "functionFlags"} functionFlags__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.functionHandleList_PARENT_FDO_EXTENSION"} {:fieldname "functionHandleList"} functionHandleList_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2348
}

function {:inline true} {:fieldmap "Mem_T.functionHandleSupported_PARENT_FDO_EXTENSION"} {:fieldname "functionHandleSupported"} functionHandleSupported_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2352
}

function {:inline true} {:fieldmap "Mem_T.functionHandle_FUNCTION_PDO_EXTENSION"} {:fieldname "functionHandle"} functionHandle_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.functionIndex_FUNCTION_PDO_EXTENSION"} {:fieldname "functionIndex"} functionIndex_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.functionInterfaceList__PARENT_FUNCTION_ASSOC"} {:fieldname "functionInterfaceList"} functionInterfaceList__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.functionList_PARENT_FDO_EXTENSION"} {:fieldname "functionList"} functionList_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2184
}

function {:inline true} {:fieldmap "Mem_T.functionNumber__PARENT_FUNCTION_ASSOC"} {:fieldname "functionNumber"} functionNumber__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.functionPdoExtSpinLock_FUNCTION_PDO_EXTENSION"} {:fieldname "functionPdoExtSpinLock"} functionPdoExtSpinLock_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.FUNCTION_PDO_EXTENSION"} {:fieldname "functionPdoExt"} functionPdoExt_DEVICE_EXTENSION(x: int) : int
{
  x + 2380
}

function {:inline true} {:fieldmap "Mem_T.functionPdo__PARENT_FUNCTION_ASSOC"} {:fieldname "functionPdo"} functionPdo__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.functionSuspendSupported_PARENT_FDO_EXTENSION"} {:fieldname "functionSuspendSupported"} functionSuspendSupported_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2360
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "hardwareIds"} hardwareIds__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.haveCSInterface_PARENT_FDO_EXTENSION"} {:fieldname "haveCSInterface"} haveCSInterface_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1220
}

function {:inline true} {:fieldmap "Mem_T.iConfiguration__USB_CONFIGURATION_DESCRIPTOR"} {:fieldname "iConfiguration"} iConfiguration__USB_CONFIGURATION_DESCRIPTOR(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.iFunction__USB_INTERFACE_ASSOCIATION_DESCRIPTOR"} {:fieldname "iFunction"} iFunction__USB_INTERFACE_ASSOCIATION_DESCRIPTOR(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.iInterface__USB_INTERFACE_DESCRIPTOR"} {:fieldname "iInterface"} iInterface__USB_INTERFACE_DESCRIPTOR(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.iProduct__USB_DEVICE_DESCRIPTOR"} {:fieldname "iProduct"} iProduct__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.idProduct__USB_DEVICE_DESCRIPTOR"} {:fieldname "idProduct"} idProduct__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.idVendor__USB_DEVICE_DESCRIPTOR"} {:fieldname "idVendor"} idVendor__USB_DEVICE_DESCRIPTOR(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "idleCallbackBusyEvent"} idleCallbackBusyEvent_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1684
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "idleCallbackEvent"} idleCallbackEvent_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T._USB_IDLE_CALLBACK_INFO"} {:fieldname "idleCallbackInfo"} idleCallbackInfo_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1268
}

function {:inline true} {:fieldmap "Mem_T.idleCallbackWorkItem__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "idleCallbackWorkItem"} idleCallbackWorkItem__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "idleCompleteEvent"} idleCompleteEvent_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2020
}

function {:inline true} {:fieldmap "Mem_T.idleDisableCount_PARENT_FDO_EXTENSION"} {:fieldname "idleDisableCount"} idleDisableCount_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1840
}

function {:inline true} {:fieldmap "Mem_T.idleFinishCompletionOnD0__USBC_FDO_FLAGS"} {:fieldname "idleFinishCompletionOnD0"} idleFinishCompletionOnD0__USBC_FDO_FLAGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.idleFinishCompletionOnWaitWake__USBC_FDO_FLAGS"} {:fieldname "idleFinishCompletionOnWaitWake"} idleFinishCompletionOnWaitWake__USBC_FDO_FLAGS(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.idleFinishCompletionWorkerContext_PARENT_FDO_EXTENSION"} {:fieldname "idleFinishCompletionWorkerContext"} idleFinishCompletionWorkerContext_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2284
}

function {:inline true} {:fieldmap "Mem_T.idleFlags_FUNCTION_PDO_EXTENSION"} {:fieldname "idleFlags"} idleFlags_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.idleIrpDisable__USBC_CAPABILITY_FLAGS"} {:fieldname "idleIrpDisable"} idleIrpDisable__USBC_CAPABILITY_FLAGS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.idleIrpPending__USBC_IDLE_FLAGS"} {:fieldname "idleIrpPending"} idleIrpPending__USBC_IDLE_FLAGS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.idleIrpQueuePending_FUNCTION_PDO_EXTENSION"} {:fieldname "idleIrpQueuePending"} idleIrpQueuePending_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.idleIrp__IDLE_WORKER_CONTEXT"} {:fieldname "idleIrp"} idleIrp__IDLE_WORKER_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.idleNotificationIrp_FUNCTION_PDO_EXTENSION"} {:fieldname "idleNotificationIrp"} idleNotificationIrp_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "idleQueueList"} idleQueueList_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T._IO_CSQ"} {:fieldname "idleQueue"} idleQueue_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.idleState_PARENT_FDO_EXTENSION"} {:fieldname "idleState"} idleState_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1276
}

function {:inline true} {:fieldmap "Mem_T.idleTimeoutPeriodInMilliSec_PARENT_FDO_EXTENSION"} {:fieldname "idleTimeoutPeriodInMilliSec"} idleTimeoutPeriodInMilliSec_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1680
}

function {:inline true} {:fieldmap "Mem_T._KMUTANT"} {:fieldname "idleTimerStateMutex"} idleTimerStateMutex_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1844
}

function {:inline true} {:fieldmap "Mem_T.idleTimerState_PARENT_FDO_EXTENSION"} {:fieldname "idleTimerState"} idleTimerState_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1676
}

function {:inline true} {:fieldmap "Mem_T.inhibitUASEnumeration_PARENT_FDO_EXTENSION"} {:fieldname "inhibitUASEnumeration"} inhibitUASEnumeration_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2364
}

function {:inline true} {:fieldmap "Mem_T.interfaceAssocDesc__PARENT_FUNCTION_ASSOC"} {:fieldname "interfaceAssocDesc"} interfaceAssocDesc__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.interfaceList_PARENT_FDO_EXTENSION"} {:fieldname "interfaceList"} interfaceList_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.isD3ColdEnabled_FUNCTION_PDO_EXTENSION"} {:fieldname "isD3ColdEnabled"} isD3ColdEnabled_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.isD3ColdEnabled_PARENT_FDO_EXTENSION"} {:fieldname "isD3ColdEnabled"} isD3ColdEnabled_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 992
}

function {:inline true} {:fieldmap "Mem_T.isD3ColdInterfaceSupported_PARENT_FDO_EXTENSION"} {:fieldname "isD3ColdInterfaceSupported"} isD3ColdInterfaceSupported_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 988
}

function {:inline true} {:fieldmap "Mem_T.isD3ColdStateUpdateInProgress_PARENT_FDO_EXTENSION"} {:fieldname "isD3ColdStateUpdateInProgress"} isD3ColdStateUpdateInProgress_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 996
}

function {:inline true} {:fieldmap "Mem_T.isParentFdo_DEVICE_EXTENSION"} {:fieldname "isParentFdo"} isParentFdo_DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.isWaitWakePending_PARENT_FDO_EXTENSION"} {:fieldname "isWaitWakePending"} isWaitWakePending_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 984
}

function {:inline true} {:fieldmap "Mem_T.lastD3ColdTransitionStatus_FUNCTION_PDO_EXTENSION"} {:fieldname "lastD3ColdTransitionStatus"} lastD3ColdTransitionStatus_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.legacyDescriptorValidation__USBC_CAPABILITY_FLAGS"} {:fieldname "legacyDescriptorValidation"} legacyDescriptorValidation__USBC_CAPABILITY_FLAGS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "listEntry"} listEntry__USBC_REMOVE_LOCK_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.lock__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "lock"} lock__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.methodAndVariant_CS_CHANNEL_DESCRIPTOR"} {:fieldname "methodAndVariant"} methodAndVariant_CS_CHANNEL_DESCRIPTOR(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.msExtConfigDesc_PARENT_FDO_EXTENSION"} {:fieldname "msExtConfigDesc"} msExtConfigDesc_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2180
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "noIdleDpcPendingEvent"} noIdleDpcPendingEvent_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1476
}

function {:inline true} {:fieldmap "Mem_T.ntStatus__USBC_ERROR_RECORD"} {:fieldname "ntStatus"} ntStatus__USBC_ERROR_RECORD(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.numFunctions_PARENT_FDO_EXTENSION"} {:fieldname "numFunctions"} numFunctions_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.numInterfaces_FUNCTION_PDO_EXTENSION"} {:fieldname "numInterfaces"} numInterfaces_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.numPdos_PARENT_FDO_EXTENSION"} {:fieldname "numPdos"} numPdos_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.numberEndpoints__INTERFACE_DATA"} {:fieldname "numberEndpoints"} numberEndpoints__INTERFACE_DATA(x: int) : int
{
  x + 2056
}

function {:inline true} {:fieldmap "Mem_T.numberInterfaces__PARENT_FUNCTION_ASSOC"} {:fieldname "numberInterfaces"} numberInterfaces__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.object__USBC_REMOVE_LOCK_ENTRY"} {:fieldname "object"} object__USBC_REMOVE_LOCK_ENTRY(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.oldPnpState_FUNCTION_PDO_EXTENSION"} {:fieldname "oldPnpState"} oldPnpState_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "parentD0Event"} parentD0Event_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.PARENT_FDO_EXTENSION"} {:fieldname "parentFdoExt"} parentFdoExt_DEVICE_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.parentFdoExt_FUNCTION_PDO_EXTENSION"} {:fieldname "parentFdoExt"} parentFdoExt_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.parentFdoExt__USBC_WORKER_CONTEXT"} {:fieldname "parentFdoExt"} parentFdoExt__USBC_WORKER_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "parentWaitWakeIrp"} parentWaitWakeIrp_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 804
}

function {:inline true} {:fieldmap "Mem_T.pdo_FUNCTION_PDO_EXTENSION"} {:fieldname "pdo"} pdo_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.pdo_PARENT_FDO_EXTENSION"} {:fieldname "pdo"} pdo_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "pendingCyclePortIrpQueue"} pendingCyclePortIrpQueue_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1248
}

function {:inline true} {:fieldmap "Mem_T.pendingD0Irp_FUNCTION_PDO_EXTENSION"} {:fieldname "pendingD0Irp"} pendingD0Irp_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.pendingD0ListEnabled_PARENT_FDO_EXTENSION"} {:fieldname "pendingD0ListEnabled"} pendingD0ListEnabled_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 792
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "pendingD0ListEntry"} pendingD0ListEntry_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "pendingD0List"} pendingD0List_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 796
}

function {:inline true} {:fieldmap "Mem_T.pendingIdleIrp_PARENT_FDO_EXTENSION"} {:fieldname "pendingIdleIrp"} pendingIdleIrp_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1260
}

function {:inline true} {:fieldmap "Mem_T.pendingRequestCount_FUNCTION_PDO_EXTENSION"} {:fieldname "pendingRequestCount"} pendingRequestCount_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 400
}

function {:inline true} {:fieldmap "Mem_T.pendingRequestCount_PARENT_FDO_EXTENSION"} {:fieldname "pendingRequestCount"} pendingRequestCount_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 468
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "pendingRequestHead"} pendingRequestHead_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 460
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "pendingResetPortIrpQueue"} pendingResetPortIrpQueue_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1236
}

function {:inline true} {:fieldmap "Mem_T.pnpState_FUNCTION_PDO_EXTENSION"} {:fieldname "pnpState"} pnpState_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.pnpState_PARENT_FDO_EXTENSION"} {:fieldname "pnpState"} pnpState_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.powerDx__USBC_IDLE_FLAGS"} {:fieldname "powerDx"} powerDx__USBC_IDLE_FLAGS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.powerIrpToComplete__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "powerIrpToComplete"} powerIrpToComplete__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.powerState_FUNCTION_PDO_EXTENSION"} {:fieldname "powerState"} powerState_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.powerState_PARENT_FDO_EXTENSION"} {:fieldname "powerState"} powerState_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.remoteWakeCapable__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "remoteWakeCapable"} remoteWakeCapable__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T._REQUEST_REMOTE_WAKE_NOTIFICATION"} {:fieldname "remoteWakeNotificationInfo"} remoteWakeNotificationInfo__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.remoteWakeNotificationIrpPending__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "remoteWakeNotificationIrpPending"} remoteWakeNotificationIrpPending__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.remoteWakeNotificationIrp__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "remoteWakeNotificationIrp"} remoteWakeNotificationIrp__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "removeEvent"} removeEvent_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 404
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "removeListHead"} removeListHead_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 444
}

function {:inline true} {:fieldmap "Mem_T._IO_REMOVE_LOCK"} {:fieldname "removeLock"} removeLock_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 268
}

function {:inline true} {:fieldmap "Mem_T.removed__USBC_IDLE_FLAGS"} {:fieldname "removed"} removed__USBC_IDLE_FLAGS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.reportIAD__USBC_CAPABILITY_FLAGS"} {:fieldname "reportIAD"} reportIAD__USBC_CAPABILITY_FLAGS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.requestD0InFlight_PARENT_FDO_EXTENSION"} {:fieldname "requestD0InFlight"} requestD0InFlight_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "resetPortInProgress"} resetPortInProgress_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 1232
}

function {:inline true} {:fieldmap "Mem_T.selectedConfigDesc_PARENT_FDO_EXTENSION"} {:fieldname "selectedConfigDesc"} selectedConfigDesc_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.selectedConfigHandle_PARENT_FDO_EXTENSION"} {:fieldname "selectedConfigHandle"} selectedConfigHandle_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.selectiveSuspendDisable__USBC_CAPABILITY_FLAGS"} {:fieldname "selectiveSuspendDisable"} selectiveSuspendDisable__USBC_CAPABILITY_FLAGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.sig_FUNCTION_PDO_EXTENSION"} {:fieldname "sig"} sig_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.sig__PARENT_FUNCTION_ASSOC"} {:fieldname "sig"} sig__PARENT_FUNCTION_ASSOC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.sig__USBC_ERROR_RECORD"} {:fieldname "sig"} sig__USBC_ERROR_RECORD(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.sig__USBC_REMOVE_LOCK_ENTRY"} {:fieldname "sig"} sig__USBC_REMOVE_LOCK_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.sig__USBC_WORKER_CONTEXT"} {:fieldname "sig"} sig__USBC_WORKER_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.signature_DEVICE_EXTENSION"} {:fieldname "signature"} signature_DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.startFailData_PARENT_FDO_EXTENSION"} {:fieldname "startFailData"} startFailData_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2188
}

function {:inline true} {:fieldmap "Mem_T.status__IDLE_WORKER_CONTEXT"} {:fieldname "status"} status__IDLE_WORKER_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "stopEvent"} stopEvent_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.subCode__USBC_ERROR_RECORD"} {:fieldname "subCode"} subCode__USBC_ERROR_RECORD(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.suspendContext_FUNCTION_PDO_EXTENSION"} {:fieldname "suspendContext"} suspendContext_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.systemPowerState_PARENT_FDO_EXTENSION"} {:fieldname "systemPowerState"} systemPowerState_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.tag__USBC_REMOVE_LOCK_ENTRY"} {:fieldname "tag"} tag__USBC_REMOVE_LOCK_ENTRY(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.topDevObj_PARENT_FDO_EXTENSION"} {:fieldname "topDevObj"} topDevObj_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ul__USBC_IDLE_FLAGS"} {:fieldname "ul"} ul__USBC_IDLE_FLAGS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.usbdHandle_PARENT_FDO_EXTENSION"} {:fieldname "usbdHandle"} usbdHandle_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2344
}

function {:inline true} {:fieldmap "Mem_T.wCount__MS_EXT_PROP_DESC_HEADER"} {:fieldname "wCount"} wCount__MS_EXT_PROP_DESC_HEADER(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.wIndex__MS_EXT_CONFIG_DESC_HEADER"} {:fieldname "wIndex"} wIndex__MS_EXT_CONFIG_DESC_HEADER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.wIndex__MS_EXT_PROP_DESC_HEADER"} {:fieldname "wIndex"} wIndex__MS_EXT_PROP_DESC_HEADER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.wIndex__USB_DEFAULT_PIPE_SETUP_PACKET"} {:fieldname "wIndex"} wIndex__USB_DEFAULT_PIPE_SETUP_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.wLength__USB_DEFAULT_PIPE_SETUP_PACKET"} {:fieldname "wLength"} wLength__USB_DEFAULT_PIPE_SETUP_PACKET(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.wPropertyNameLength__MS_EXT_PROP_DESC_CUSTOM_PROP"} {:fieldname "wPropertyNameLength"} wPropertyNameLength__MS_EXT_PROP_DESC_CUSTOM_PROP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "wTotalLength"} wTotalLength__USB_CONFIGURATION_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.wValue__USB_DEFAULT_PIPE_SETUP_PACKET"} {:fieldname "wValue"} wValue__USB_DEFAULT_PIPE_SETUP_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "waitWakeEvent"} waitWakeEvent_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 828
}

function {:inline true} {:fieldmap "Mem_T.waitWakeFinishCompletionOnD0__USBC_FDO_FLAGS"} {:fieldname "waitWakeFinishCompletionOnD0"} waitWakeFinishCompletionOnD0__USBC_FDO_FLAGS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.waitWakeIrpCancelPending_PARENT_FDO_EXTENSION"} {:fieldname "waitWakeIrpCancelPending"} waitWakeIrpCancelPending_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 812
}

function {:inline true} {:fieldmap "Mem_T.waitWakeIrpToComplete__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "waitWakeIrpToComplete"} waitWakeIrpToComplete__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.waitWakeIrpsPending_PARENT_FDO_EXTENSION"} {:fieldname "waitWakeIrpsPending"} waitWakeIrpsPending_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 824
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "waitWakeQueueList"} waitWakeQueueList_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T._IO_CSQ"} {:fieldname "waitWakeQueue"} waitWakeQueue_FUNCTION_PDO_EXTENSION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.wakeNotificationCompleteWorkItem__FUNCTION_SUSPEND_CONTEXT"} {:fieldname "wakeNotificationCompleteWorkItem"} wakeNotificationCompleteWorkItem__FUNCTION_SUSPEND_CONTEXT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T._WMILIB_CONTEXT"} {:fieldname "wmiLibContext"} wmiLibContext_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2196
}

function {:inline true} {:fieldmap "Mem_T.wmiRegister_PARENT_FDO_EXTENSION"} {:fieldname "wmiRegister"} wmiRegister_PARENT_FDO_EXTENSION(x: int) : int
{
  x + 2192
}

function {:inline true} {:fieldmap "Mem_T.workItem__USBC_WORKER_CONTEXT"} {:fieldname "workItem"} workItem__USBC_WORKER_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.workerFunction__USBC_WORKER_CONTEXT"} {:fieldname "workerFunction"} workerFunction__USBC_WORKER_CONTEXT(x: int) : int
{
  x + 8
}

const {:string ""} unique strConst__li2bpl46: int;

const {:string "%04x"} unique strConst__li2bpl22: int;

const {:string "%4.4x.%4.4x.%4.4x.%3.3d.%3.3d.%3.3d.%3.3d.%3.3d.%3.3d"} unique strConst__li2bpl33: int;

const {:string "&MI_%02x"} unique strConst__li2bpl17: int;

const {:string "&MI_xx"} unique strConst__li2bpl16: int;

const {:string "&MS_SUBCOMP_"} unique strConst__li2bpl28: int;

const {:string "0000"} unique strConst__li2bpl18: int;

const {:string "<NULL>"} unique strConst__li2bpl30: int;

const {:string "AllowIdleIrpInD3"} unique strConst__li2bpl36: int;

const {:string "AltConfigurationValue"} unique strConst__li2bpl6: int;

const {:string "BBBB.DDDD.FFFF.RHP.PT1.PT2.PT3.PT4.PT5"} unique strConst__li2bpl32: int;

const {:string "D3ColdStateMutex"} unique strConst__li2bpl4: int;

const {:string "D3ColdSupported"} unique strConst__li2bpl11: int;

const {:string "DeviceSelectiveSuspended"} unique strConst__li2bpl35: int;

const {:string "Disabling"} unique strConst__li2bpl2: int;

const {:string "Enabling"} unique strConst__li2bpl3: int;

const {:string "EnumeratorClass"} unique strConst__li2bpl37: int;

const {:string "EnumeratorFlag"} unique strConst__li2bpl29: int;

const {:string "ExtPropDescSemaphore"} unique strConst__li2bpl23: int;

const {:string "FALSE"} unique strConst__li2bpl25: int;

const {:string "KeCancelTimer should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl60: int;

const {:string "KeClearEvent should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl54: int;

const {:string "KeInitializeDeviceQueue should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl63: int;

const {:string "KeInitializeSemaphore should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl55: int;

const {:string "KeInitializeTimer should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl59: int;

const {:string "KeInitializeTimerEx should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl50: int;

const {:string "KePulseEvent should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl57: int;

const {:string "KeRaiseIrqlToDpcLevel should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl67: int;

const {:string "KeReadStateEvent should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl56: int;

const {:string "KeReadStateTimer should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl58: int;

const {:string "KeReleaseMutex should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl53: int;

const {:string "KeRemoveEntryDeviceQueue should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl66: int;

const {:string "KeResetEvent should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl65: int;

const {:string "KeSaveFloatingPointState should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl51: int;

const {:string "KeSetTimer should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl62: int;

const {:string "KeSetTimerEx should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl61: int;

const {:string "KfAcquireSpinLock should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl52: int;

const {:string "NULL"} unique strConst__li2bpl0: int;

const {:string "OriginalConfigurationValue"} unique strConst__li2bpl1: int;

const {:string "SelSuspCancelBehavior"} unique strConst__li2bpl34: int;

const {:string "TRUE"} unique strConst__li2bpl26: int;

const {:string "USB"} unique strConst__li2bpl48: int;

const {:string "USB:USB\\VID_%04X&PID_%04X"} unique strConst__li2bpl49: int;

const {:string "USB:USB\\VID_%04X&PID_%04X&REV_%04X"} unique strConst__li2bpl47: int;

const {:string "USB\\MS_COMP_"} unique strConst__li2bpl27: int;

const {:string "VEN%04X DEV%04X"} unique strConst__li2bpl15: int;

const {:string "callee"} unique strConst__li2bpl38: int;

const {:string "custom & MSOS comaptibleID"} unique strConst__li2bpl20: int;

const {:string "custom & MSOS compatibleID"} unique strConst__li2bpl21: int;

const {:string "custom compatibleID"} unique strConst__li2bpl19: int;

const {:string "e5b3b5ac-9725-4f78-963f-03dfb1d828c7"} unique strConst__li2bpl10: int;

const {:string "event (waiting for IOCTL_INTERNAL_USB_GET_TOPOLOGY_ADDRESS to complete)"} unique strConst__li2bpl12: int;

const {:string "event (waiting for IOCTL_INTERNAL_USB_RECORD_FAILURE to complete)"} unique strConst__li2bpl8: int;

const {:string "event (waiting for IOCTL_INTERNAL_USB_RESET_PORT to complete)"} unique strConst__li2bpl9: int;

const {:string "event (waiting for canceled irp to complete)"} unique strConst__li2bpl14: int;

const {:string "event (waiting for query-interface to complete)"} unique strConst__li2bpl7: int;

const {:string "event (waiting for sent irp to complete)"} unique strConst__li2bpl13: int;

const {:string "idleCallbackBusyEvent (waiting for IdleCallback to run to completion)"} unique strConst__li2bpl44: int;

const {:string "idleCallbackEvent"} unique strConst__li2bpl45: int;

const {:string "idleCompleteEvent"} unique strConst__li2bpl41: int;

const {:string "idleCompleteEvent (Wait for our IDLE irp to complete and the FDO to return to D0)"} unique strConst__li2bpl43: int;

const {:string "idleTimerStateMutex"} unique strConst__li2bpl40: int;

const {:string "noIdleDpcPendingEvent (wait for DPC to complete)"} unique strConst__li2bpl42: int;

const {:string "parentD0Event (waiting for D0 IRP to complete)"} unique strConst__li2bpl5: int;

const {:string "parentDxEvent (waiting for device to enter Dx)"} unique strConst__li2bpl39: int;

const {:string "removeEvent"} unique strConst__li2bpl24: int;

const {:string "sdv_KeAcquireSpinLock should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl64: int;

const {:string "stopEvent (wait for all I/O to complete)"} unique strConst__li2bpl31: int;

const {:allocated} li2bplFunctionConstant1130: int;

axiom li2bplFunctionConstant1130 == 1130;

const {:allocated} li2bplFunctionConstant1132: int;

axiom li2bplFunctionConstant1132 == 1132;

const {:allocated} li2bplFunctionConstant1274: int;

axiom li2bplFunctionConstant1274 == 1274;

const {:allocated} li2bplFunctionConstant1619: int;

axiom li2bplFunctionConstant1619 == 1619;

const {:allocated} li2bplFunctionConstant1628: int;

axiom li2bplFunctionConstant1628 == 1628;

const {:allocated} li2bplFunctionConstant1789: int;

axiom li2bplFunctionConstant1789 == 1789;

const {:allocated} li2bplFunctionConstant1805: int;

axiom li2bplFunctionConstant1805 == 1805;

const {:allocated} li2bplFunctionConstant1806: int;

axiom li2bplFunctionConstant1806 == 1806;

const {:allocated} li2bplFunctionConstant1807: int;

axiom li2bplFunctionConstant1807 == 1807;

const {:allocated} li2bplFunctionConstant1808: int;

axiom li2bplFunctionConstant1808 == 1808;

const {:allocated} li2bplFunctionConstant1809: int;

axiom li2bplFunctionConstant1809 == 1809;

const {:allocated} li2bplFunctionConstant1810: int;

axiom li2bplFunctionConstant1810 == 1810;

const {:allocated} li2bplFunctionConstant1811: int;

axiom li2bplFunctionConstant1811 == 1811;

const {:allocated} li2bplFunctionConstant1962: int;

axiom li2bplFunctionConstant1962 == 1962;

const {:allocated} li2bplFunctionConstant2434: int;

axiom li2bplFunctionConstant2434 == 2434;

const {:allocated} li2bplFunctionConstant2816: int;

axiom li2bplFunctionConstant2816 == 2816;

const {:allocated} li2bplFunctionConstant2817: int;

axiom li2bplFunctionConstant2817 == 2817;

const {:allocated} li2bplFunctionConstant2818: int;

axiom li2bplFunctionConstant2818 == 2818;

const {:allocated} li2bplFunctionConstant2819: int;

axiom li2bplFunctionConstant2819 == 2819;

const {:allocated} li2bplFunctionConstant2823: int;

axiom li2bplFunctionConstant2823 == 2823;

const {:allocated} li2bplFunctionConstant2824: int;

axiom li2bplFunctionConstant2824 == 2824;

const {:allocated} li2bplFunctionConstant2827: int;

axiom li2bplFunctionConstant2827 == 2827;

const {:allocated} li2bplFunctionConstant2830: int;

axiom li2bplFunctionConstant2830 == 2830;

const {:allocated} li2bplFunctionConstant2831: int;

axiom li2bplFunctionConstant2831 == 2831;

const {:allocated} li2bplFunctionConstant2833: int;

axiom li2bplFunctionConstant2833 == 2833;

const {:allocated} li2bplFunctionConstant2839: int;

axiom li2bplFunctionConstant2839 == 2839;

const {:allocated} li2bplFunctionConstant2840: int;

axiom li2bplFunctionConstant2840 == 2840;

const {:allocated} li2bplFunctionConstant2844: int;

axiom li2bplFunctionConstant2844 == 2844;

const {:allocated} li2bplFunctionConstant2845: int;

axiom li2bplFunctionConstant2845 == 2845;

const {:allocated} li2bplFunctionConstant2846: int;

axiom li2bplFunctionConstant2846 == 2846;

const {:allocated} li2bplFunctionConstant2848: int;

axiom li2bplFunctionConstant2848 == 2848;

const {:allocated} li2bplFunctionConstant2849: int;

axiom li2bplFunctionConstant2849 == 2849;

const {:allocated} li2bplFunctionConstant2899: int;

axiom li2bplFunctionConstant2899 == 2899;

const {:allocated} li2bplFunctionConstant2901: int;

axiom li2bplFunctionConstant2901 == 2901;

const {:allocated} li2bplFunctionConstant2904: int;

axiom li2bplFunctionConstant2904 == 2904;

const {:allocated} li2bplFunctionConstant803: int;

axiom li2bplFunctionConstant803 == 803;

const {:allocated} li2bplFunctionConstant805: int;

axiom li2bplFunctionConstant805 == 805;

const {:allocated} li2bplFunctionConstant806: int;

axiom li2bplFunctionConstant806 == 806;

const {:allocated} li2bplFunctionConstant808: int;

axiom li2bplFunctionConstant808 == 808;

const {:allocated} li2bplFunctionConstant810: int;

axiom li2bplFunctionConstant810 == 810;

const {:allocated} li2bplFunctionConstant813: int;

axiom li2bplFunctionConstant813 == 813;

const {:allocated} li2bplFunctionConstant822: int;

axiom li2bplFunctionConstant822 == 822;

const {:allocated} li2bplFunctionConstant827: int;

axiom li2bplFunctionConstant827 == 827;

const {:allocated} li2bplFunctionConstant829: int;

axiom li2bplFunctionConstant829 == 829;

const {:allocated} li2bplFunctionConstant969: int;

axiom li2bplFunctionConstant969 == 969;

const {:allocated} li2bplFunctionConstant970: int;

axiom li2bplFunctionConstant970 == 970;

const {:allocated} li2bplFunctionConstant971: int;

axiom li2bplFunctionConstant971 == 971;

const {:allocated} li2bplFunctionConstant972: int;

axiom li2bplFunctionConstant972 == 972;

const {:allocated} li2bplFunctionConstant974: int;

axiom li2bplFunctionConstant974 == 974;

const {:allocated} li2bplFunctionConstant975: int;

axiom li2bplFunctionConstant975 == 975;

const {:allocated} li2bplFunctionConstant976: int;

axiom li2bplFunctionConstant976 == 976;

const {:allocated} li2bplFunctionConstant977: int;

axiom li2bplFunctionConstant977 == 977;

const {:allocated} li2bplFunctionConstant978: int;

axiom li2bplFunctionConstant978 == 978;

const {:allocated} li2bplFunctionConstant979: int;

axiom li2bplFunctionConstant979 == 979;

const {:allocated} li2bplFunctionConstant980: int;

axiom li2bplFunctionConstant980 == 980;

const {:allocated} li2bplFunctionConstant981: int;

axiom li2bplFunctionConstant981 == 981;

const {:allocated} li2bplFunctionConstant982: int;

axiom li2bplFunctionConstant982 == 982;

implementation {:origName "SdvExit"} {:osmodel} SdvExit#0()
{
  var vslice_dummy_var_346: int;

  anon0:
    call {:si_unique_call 2319} vslice_dummy_var_346 := __HAVOC_malloc(4);
    assume false;
    assume false;
    return;
}



procedure {:origName "SdvExit"} {:osmodel} SdvExit#0();
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SdvExit"} {:osmodel} SdvExit#1()
{
  var vslice_dummy_var_347: int;

  anon0:
    call {:si_unique_call 2320} vslice_dummy_var_347 := __HAVOC_malloc(4);
    assume false;
    call {:si_unique_call 2321} SdvExit#0();
    return;
}



procedure {:origName "SdvExit"} {:osmodel} SdvExit#1();
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_13: int, actual_Irp_9: int, actual_Context_14: int, actual_Completion: int) returns (Tmp_1755: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_13: int;
  var {:pointer} Irp_9: int;
  var {:pointer} Context_14: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_13 := actual_DeviceObject_13;
    Irp_9 := actual_Irp_9;
    Context_14 := actual_Context_14;
    Completion := actual_Completion;
    call {:si_unique_call 2322} irpsp := sdv_IoGetNextIrpStackLocation(Irp_9);
    Status_1 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2323} Status_1 := CallDriverSyncCompletion(DeviceObject_13, Irp_9, Context_14);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2324} Status_1 := CompletionFdoDeviceSetPower(DeviceObject_13, Irp_9, Context_14);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2325} Status_1 := CompletionFdoSystemQueryPower#0(DeviceObject_13, Irp_9, Context_14);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2326} Status_1 := CompletionFdoSystemSetPower#0(DeviceObject_13, Irp_9, Context_14);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L62;

  L62:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2327} Status_1 := CompletionFdoWaitWake(DeviceObject_13, Irp_9, Context_14);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L79;

  L79:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2328} Status_1 := CompletionForSuspendControlRequest(DeviceObject_13, Irp_9, Context_14);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L96;

  L96:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2329} Status_1 := CompletionPdoSelectInterface(DeviceObject_13, Irp_9, Context_14);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L113;

  L113:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2330} Status_1 := CompletionRemoteWakeNotication#0(DeviceObject_13, Irp_9, Context_14);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L130;

  L130:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2331} Status_1 := ParentIdleNotificationRequestComplete#0(DeviceObject_13, Irp_9, Context_14);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L147;

  L147:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2332} Status_1 := USBC_PnpComplete(DeviceObject_13, Irp_9, Context_14);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L164;

  L164:
    Tmp_1755 := Status_1;
    goto LM2;

  LM2:
    return;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    goto L164;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    goto L147;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    goto L130;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L113;

  anon39_Then:
    goto L96;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    goto L79;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    goto L62;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    goto L45;

  anon35_Then:
    goto L28;

  anon44_Then:
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_13: int, actual_Irp_9: int, actual_Context_14: int, actual_Completion: int) returns (Tmp_1755: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, alloc, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_13: int, actual_Irp_9: int, actual_Context_14: int, actual_Completion: int) returns (Tmp_1755: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_13: int;
  var {:pointer} Irp_9: int;
  var {:pointer} Context_14: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_13 := actual_DeviceObject_13;
    Irp_9 := actual_Irp_9;
    Context_14 := actual_Context_14;
    Completion := actual_Completion;
    call {:si_unique_call 2333} irpsp := sdv_IoGetNextIrpStackLocation(Irp_9);
    Status_1 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2334} Status_1 := CallDriverSyncCompletion(DeviceObject_13, Irp_9, Context_14);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2335} Status_1 := CompletionFdoDeviceSetPower(DeviceObject_13, Irp_9, Context_14);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2336} Status_1 := CompletionFdoSystemQueryPower#1(DeviceObject_13, Irp_9, Context_14);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2337} Status_1 := CompletionFdoSystemSetPower#1(DeviceObject_13, Irp_9, Context_14);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L62;

  L62:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2338} Status_1 := CompletionFdoWaitWake(DeviceObject_13, Irp_9, Context_14);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L79;

  L79:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2339} Status_1 := CompletionForSuspendControlRequest(DeviceObject_13, Irp_9, Context_14);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L96;

  L96:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2340} Status_1 := CompletionPdoSelectInterface(DeviceObject_13, Irp_9, Context_14);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L113;

  L113:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2341} Status_1 := CompletionRemoteWakeNotication#1(DeviceObject_13, Irp_9, Context_14);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L130;

  L130:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2342} Status_1 := ParentIdleNotificationRequestComplete#1(DeviceObject_13, Irp_9, Context_14);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L147;

  L147:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2343} Status_1 := USBC_PnpComplete(DeviceObject_13, Irp_9, Context_14);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.VOID[Completion] := 1;
    goto L164;

  L164:
    Tmp_1755 := Status_1;
    goto LM2;

  LM2:
    return;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    goto L164;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    goto L147;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    goto L130;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L113;

  anon39_Then:
    goto L96;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    goto L79;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    goto L62;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    goto L45;

  anon35_Then:
    goto L28;

  anon44_Then:
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_13: int, actual_Irp_9: int, actual_Context_14: int, actual_Completion: int) returns (Tmp_1755: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, alloc, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionFdoSystemQueryPower"} CompletionFdoSystemQueryPower#0(actual_devObj_14: int, actual_irp_61: int, actual_context_16: int) returns (Tmp_1436: int)
{
  var {:pointer} irpSp_29: int;
  var {:pointer} Tmp_1437: int;
  var {:scalar} powerState_9: int;
  var {:pointer} Tmp_1438: int;
  var {:pointer} parentFdoExt_106: int;
  var {:scalar} systemState_2: int;
  var {:pointer} Tmp_1439: int;
  var {:scalar} completeIrp_2: int;
  var {:scalar} status_79: int;
  var {:pointer} Tmp_1440: int;
  var {:pointer} irp_61: int;
  var {:pointer} context_16: int;
  var boogieTmp: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_709: int;
  var vslice_dummy_var_710: int;
  var vslice_dummy_var_711: int;
  var vslice_dummy_var_712: int;
  var vslice_dummy_var_713: int;
  var vslice_dummy_var_714: int;
  var vslice_dummy_var_715: int;
  var vslice_dummy_var_716: int;
  var vslice_dummy_var_717: int;

  anon0:
    call {:si_unique_call 2344} powerState_9 := __HAVOC_malloc(8);
    irp_61 := actual_irp_61;
    context_16 := actual_context_16;
    parentFdoExt_106 := context_16;
    completeIrp_2 := 0;
    call {:si_unique_call 2345} irpSp_29 := sdv_IoGetCurrentIrpStackLocation(irp_61);
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    havoc Tmp_1438;
    assume {:nonnull} irpSp_29 != 0;
    assume irpSp_29 > 0;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    havoc vslice_dummy_var_709;
    havoc vslice_dummy_var_710;
    havoc vslice_dummy_var_711;
    call {:si_unique_call 2346} WPP_RECORDER_SF_Ld(vslice_dummy_var_709, 2, 8, 41, Tmp_1438, vslice_dummy_var_710, vslice_dummy_var_711);
    completeIrp_2 := 1;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    havoc status_79;
    goto L46;

  L46:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} completeIrp_2 != 0;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    call {:si_unique_call 2347} PoStartNextPowerIrp(0);
    call {:si_unique_call 2348} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2349} UsbcReleaseRemoveLock(parentFdoExt_106, irp_61);
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    call {:si_unique_call 2350} vslice_dummy_var_348 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_106), irp_61);
    goto L57;

  L57:
    Tmp_1436 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} completeIrp_2 == 0;
    goto L57;

  anon25_Then:
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 2351} sdv_IoMarkIrpPending(0);
    goto L20;

  L20:
    assume {:nonnull} irpSp_29 != 0;
    assume irpSp_29 > 0;
    havoc systemState_2;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} systemState_2 != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} systemState_2 != 2;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} systemState_2 != 3;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} systemState_2 != 4;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} systemState_2 != 5;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} systemState_2 == 6;
    goto L27;

  L27:
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    call {:si_unique_call 2352} boogieTmp := MapSystemStateToDeviceState(parentFdoExt_106, systemState_2);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_1439;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    havoc vslice_dummy_var_712;
    havoc vslice_dummy_var_713;
    call {:si_unique_call 2353} WPP_RECORDER_SF_LL(vslice_dummy_var_712, 4, 3, 42, Tmp_1439, systemState_2, vslice_dummy_var_713);
    goto L41;

  L41:
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    havoc vslice_dummy_var_714;
    call {:si_unique_call 2354} status_79 := PoRequestPowerIrp#0(vslice_dummy_var_714, 3, powerState_9, li2bplFunctionConstant2830, irp_61, 0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_79 != 259;
    havoc Tmp_1440;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    havoc vslice_dummy_var_715;
    call {:si_unique_call 2355} WPP_RECORDER_SF_d(vslice_dummy_var_715, 2, 8, 44, Tmp_1440, status_79);
    completeIrp_2 := 1;
    goto L46;

  anon27_Then:
    assume {:partition} status_79 == 259;
    goto L46;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} systemState_2 != 6;
    completeIrp_2 := 1;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    havoc status_79;
    goto L46;

  anon30_Then:
    assume {:partition} systemState_2 == 5;
    goto L27;

  anon31_Then:
    assume {:partition} systemState_2 == 4;
    goto L27;

  anon32_Then:
    assume {:partition} systemState_2 == 3;
    goto L27;

  anon33_Then:
    assume {:partition} systemState_2 == 2;
    goto L27;

  anon34_Then:
    assume {:partition} systemState_2 == 1;
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    havoc Tmp_1437;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    havoc vslice_dummy_var_716;
    havoc vslice_dummy_var_717;
    call {:si_unique_call 2356} WPP_RECORDER_SF_LL(vslice_dummy_var_716, 4, 3, 43, Tmp_1437, systemState_2, vslice_dummy_var_717);
    goto L41;

  anon26_Then:
    goto L20;
}



procedure {:origName "CompletionFdoSystemQueryPower"} CompletionFdoSystemQueryPower#0(actual_devObj_14: int, actual_irp_61: int, actual_context_16: int) returns (Tmp_1436: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionFdoSystemQueryPower"} CompletionFdoSystemQueryPower#1(actual_devObj_14: int, actual_irp_61: int, actual_context_16: int) returns (Tmp_1436: int)
{
  var {:pointer} irpSp_29: int;
  var {:pointer} Tmp_1437: int;
  var {:scalar} powerState_9: int;
  var {:pointer} Tmp_1438: int;
  var {:pointer} parentFdoExt_106: int;
  var {:scalar} systemState_2: int;
  var {:pointer} Tmp_1439: int;
  var {:scalar} completeIrp_2: int;
  var {:scalar} status_79: int;
  var {:pointer} Tmp_1440: int;
  var {:pointer} irp_61: int;
  var {:pointer} context_16: int;
  var boogieTmp: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_718: int;
  var vslice_dummy_var_719: int;
  var vslice_dummy_var_720: int;
  var vslice_dummy_var_721: int;
  var vslice_dummy_var_722: int;
  var vslice_dummy_var_723: int;
  var vslice_dummy_var_724: int;
  var vslice_dummy_var_725: int;
  var vslice_dummy_var_726: int;

  anon0:
    call {:si_unique_call 2357} powerState_9 := __HAVOC_malloc(8);
    irp_61 := actual_irp_61;
    context_16 := actual_context_16;
    parentFdoExt_106 := context_16;
    completeIrp_2 := 0;
    call {:si_unique_call 2358} irpSp_29 := sdv_IoGetCurrentIrpStackLocation(irp_61);
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    havoc Tmp_1438;
    assume {:nonnull} irpSp_29 != 0;
    assume irpSp_29 > 0;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    havoc vslice_dummy_var_718;
    havoc vslice_dummy_var_719;
    havoc vslice_dummy_var_720;
    call {:si_unique_call 2359} WPP_RECORDER_SF_Ld(vslice_dummy_var_718, 2, 8, 41, Tmp_1438, vslice_dummy_var_719, vslice_dummy_var_720);
    completeIrp_2 := 1;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    havoc status_79;
    goto L46;

  L46:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} completeIrp_2 != 0;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    call {:si_unique_call 2360} PoStartNextPowerIrp(0);
    call {:si_unique_call 2361} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2362} UsbcReleaseRemoveLock(parentFdoExt_106, irp_61);
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    call {:si_unique_call 2363} vslice_dummy_var_349 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_106), irp_61);
    goto L57;

  L57:
    Tmp_1436 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} completeIrp_2 == 0;
    goto L57;

  anon25_Then:
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 2364} sdv_IoMarkIrpPending(0);
    goto L20;

  L20:
    assume {:nonnull} irpSp_29 != 0;
    assume irpSp_29 > 0;
    havoc systemState_2;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} systemState_2 != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} systemState_2 != 2;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} systemState_2 != 3;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} systemState_2 != 4;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} systemState_2 != 5;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} systemState_2 == 6;
    goto L27;

  L27:
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    call {:si_unique_call 2365} boogieTmp := MapSystemStateToDeviceState(parentFdoExt_106, systemState_2);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_1439;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    havoc vslice_dummy_var_721;
    havoc vslice_dummy_var_722;
    call {:si_unique_call 2366} WPP_RECORDER_SF_LL(vslice_dummy_var_721, 4, 3, 42, Tmp_1439, systemState_2, vslice_dummy_var_722);
    goto L41;

  L41:
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    havoc vslice_dummy_var_723;
    call {:si_unique_call 2367} status_79 := PoRequestPowerIrp#1(vslice_dummy_var_723, 3, powerState_9, li2bplFunctionConstant2830, irp_61, 0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_79 != 259;
    havoc Tmp_1440;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    havoc vslice_dummy_var_724;
    call {:si_unique_call 2368} WPP_RECORDER_SF_d(vslice_dummy_var_724, 2, 8, 44, Tmp_1440, status_79);
    completeIrp_2 := 1;
    goto L46;

  anon27_Then:
    assume {:partition} status_79 == 259;
    goto L46;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} systemState_2 != 6;
    completeIrp_2 := 1;
    assume {:nonnull} irp_61 != 0;
    assume irp_61 > 0;
    havoc status_79;
    goto L46;

  anon30_Then:
    assume {:partition} systemState_2 == 5;
    goto L27;

  anon31_Then:
    assume {:partition} systemState_2 == 4;
    goto L27;

  anon32_Then:
    assume {:partition} systemState_2 == 3;
    goto L27;

  anon33_Then:
    assume {:partition} systemState_2 == 2;
    goto L27;

  anon34_Then:
    assume {:partition} systemState_2 == 1;
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    havoc Tmp_1437;
    assume {:nonnull} parentFdoExt_106 != 0;
    assume parentFdoExt_106 > 0;
    assume {:nonnull} powerState_9 != 0;
    assume powerState_9 > 0;
    havoc vslice_dummy_var_725;
    havoc vslice_dummy_var_726;
    call {:si_unique_call 2369} WPP_RECORDER_SF_LL(vslice_dummy_var_725, 4, 3, 43, Tmp_1437, systemState_2, vslice_dummy_var_726);
    goto L41;

  anon26_Then:
    goto L20;
}



procedure {:origName "CompletionFdoSystemQueryPower"} CompletionFdoSystemQueryPower#1(actual_devObj_14: int, actual_irp_61: int, actual_context_16: int) returns (Tmp_1436: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_7: int, actual_MinorFunction: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_11: int, actual_Irp_4: int) returns (Tmp_1676: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_7: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} SD1_2: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_11: int;
  var vslice_dummy_var_350: int;

  anon0:
    call {:si_unique_call 2370} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_7 := actual_DeviceObject_7;
    MinorFunction := actual_MinorFunction;
    SD1_2 := actual_SD1_2;
    CompletionFunction := actual_CompletionFunction;
    Context_11 := actual_Context_11;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} MinorFunction != 3;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 2;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1676 := -1073741584;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2371} vslice_dummy_var_350 := sdv_RunPowerCompletionRoutines#0(DeviceObject_7, MinorFunction, PowerState_1, Context_11, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1676 := 259;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1676 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon14_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_7: int, actual_MinorFunction: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_11: int, actual_Irp_4: int) returns (Tmp_1676: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_7: int, actual_MinorFunction: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_11: int, actual_Irp_4: int) returns (Tmp_1676: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_7: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} SD1_2: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_11: int;
  var vslice_dummy_var_351: int;

  anon0:
    call {:si_unique_call 2372} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_7 := actual_DeviceObject_7;
    MinorFunction := actual_MinorFunction;
    SD1_2 := actual_SD1_2;
    CompletionFunction := actual_CompletionFunction;
    Context_11 := actual_Context_11;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} MinorFunction != 3;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 2;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1676 := -1073741584;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2373} vslice_dummy_var_351 := sdv_RunPowerCompletionRoutines#1(DeviceObject_7, MinorFunction, PowerState_1, Context_11, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1676 := 259;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1676 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon14_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_7: int, actual_MinorFunction: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_11: int, actual_Irp_4: int) returns (Tmp_1676: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_8: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_12: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_1690: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_8: int;
  var {:scalar} MinorFunction_1: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_12: int;
  var {:pointer} IoStatus: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2374} PowerState := __HAVOC_malloc(8);
    DeviceObject_8 := actual_DeviceObject_8;
    MinorFunction_1 := actual_MinorFunction_1;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_12 := actual_Context_12;
    IoStatus := actual_IoStatus;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2830;
    call {:si_unique_call 2375} sdv_stub_power_completion_begin();
    call {:si_unique_call 2376} CallbackFdoDeviceQueryPower(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2831;
    call {:si_unique_call 2377} sdv_stub_power_completion_begin();
    call {:si_unique_call 2378} CallbackFdoDeviceSetD0#0(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2818;
    call {:si_unique_call 2379} sdv_stub_power_completion_begin();
    call {:si_unique_call 2380} CallbackFdoDeviceSetDx(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L32;

  L32:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2824;
    call {:si_unique_call 2381} sdv_stub_power_completion_begin();
    call {:si_unique_call 2382} CallbackFdoWaitWake#0(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L45;

  L45:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant813;
    call {:si_unique_call 2383} sdv_stub_power_completion_begin();
    call {:si_unique_call 2384} PoCallbackIdleSetDx(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L58;

  L58:
    Tmp_1690 := CompletionFunction_2;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant813;
    goto L58;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2824;
    goto L45;

  anon16_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2818;
    goto L32;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2831;
    goto L19;

  anon19_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2830;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_8: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_12: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_1690: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_8: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_12: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_1690: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_8: int;
  var {:scalar} MinorFunction_1: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_12: int;
  var {:pointer} IoStatus: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2385} PowerState := __HAVOC_malloc(8);
    DeviceObject_8 := actual_DeviceObject_8;
    MinorFunction_1 := actual_MinorFunction_1;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_12 := actual_Context_12;
    IoStatus := actual_IoStatus;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2830;
    call {:si_unique_call 2386} sdv_stub_power_completion_begin();
    call {:si_unique_call 2387} CallbackFdoDeviceQueryPower(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2831;
    call {:si_unique_call 2388} sdv_stub_power_completion_begin();
    call {:si_unique_call 2389} CallbackFdoDeviceSetD0#1(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2818;
    call {:si_unique_call 2390} sdv_stub_power_completion_begin();
    call {:si_unique_call 2391} CallbackFdoDeviceSetDx(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L32;

  L32:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant2824;
    call {:si_unique_call 2392} sdv_stub_power_completion_begin();
    call {:si_unique_call 2393} CallbackFdoWaitWake#1(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L45;

  L45:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant813;
    call {:si_unique_call 2394} sdv_stub_power_completion_begin();
    call {:si_unique_call 2395} PoCallbackIdleSetDx(DeviceObject_8, MinorFunction_1, PowerState, Context_12, IoStatus);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L58;

  L58:
    Tmp_1690 := CompletionFunction_2;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant813;
    goto L58;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2824;
    goto L45;

  anon16_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2818;
    goto L32;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2831;
    goto L19;

  anon19_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant2830;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_8: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_12: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_1690: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallbackFdoDeviceSetD0"} CallbackFdoDeviceSetD0#0(actual_devObj_12: int, actual_minorFunction_4: int, actual_SD3: int, actual_context_14: int, actual_ioStatus_5: int)
{
  var {:scalar} powerState_3: int;
  var {:pointer} devExt_13: int;
  var {:pointer} parentFdoExt_102: int;
  var {:scalar} status_77: int;
  var {:pointer} Tmp_1415: int;
  var {:pointer} devObj_12: int;
  var {:pointer} SD3: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_727: int;

  anon0:
    call {:si_unique_call 2396} powerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2397} vslice_dummy_var_352 := __HAVOC_malloc(4);
    devObj_12 := actual_devObj_12;
    SD3 := actual_SD3;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    assume {:nonnull} devObj_12 != 0;
    assume devObj_12 > 0;
    havoc devExt_13;
    status_77 := 0;
    assume {:nonnull} devExt_13 != 0;
    assume devExt_13 > 0;
    parentFdoExt_102 := parentFdoExt_DEVICE_EXTENSION(devExt_13);
    havoc Tmp_1415;
    assume {:nonnull} parentFdoExt_102 != 0;
    assume parentFdoExt_102 > 0;
    havoc vslice_dummy_var_727;
    call {:si_unique_call 2398} WPP_RECORDER_SF_(vslice_dummy_var_727, 4, 3, 36, Tmp_1415);
    call {:si_unique_call 2399} status_77 := AllocateWorkerIfNeeded#0(parentFdoExt_102, li2bplFunctionConstant1619, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_77 >= 0;
    goto L26;

  L26:
    call {:si_unique_call 2400} UsbcReleaseRemoveLock(parentFdoExt_102, gSetD0Tag);
    assume {:nonnull} parentFdoExt_102 != 0;
    assume parentFdoExt_102 > 0;
    call {:si_unique_call 2401} vslice_dummy_var_353 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_102), gSetD0Tag);
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} 0 > status_77;
    call {:si_unique_call 2402} UnblockWorkBlockedOnPendingParentD0#0(parentFdoExt_102, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CallbackFdoDeviceSetD0"} CallbackFdoDeviceSetD0#0(actual_devObj_12: int, actual_minorFunction_4: int, actual_SD3: int, actual_context_14: int, actual_ioStatus_5: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallbackFdoDeviceSetD0"} CallbackFdoDeviceSetD0#1(actual_devObj_12: int, actual_minorFunction_4: int, actual_SD3: int, actual_context_14: int, actual_ioStatus_5: int)
{
  var {:scalar} powerState_3: int;
  var {:pointer} devExt_13: int;
  var {:pointer} parentFdoExt_102: int;
  var {:scalar} status_77: int;
  var {:pointer} Tmp_1415: int;
  var {:pointer} devObj_12: int;
  var {:pointer} SD3: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_728: int;

  anon0:
    call {:si_unique_call 2403} powerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2404} vslice_dummy_var_354 := __HAVOC_malloc(4);
    devObj_12 := actual_devObj_12;
    SD3 := actual_SD3;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    assume {:nonnull} devObj_12 != 0;
    assume devObj_12 > 0;
    havoc devExt_13;
    status_77 := 0;
    assume {:nonnull} devExt_13 != 0;
    assume devExt_13 > 0;
    parentFdoExt_102 := parentFdoExt_DEVICE_EXTENSION(devExt_13);
    havoc Tmp_1415;
    assume {:nonnull} parentFdoExt_102 != 0;
    assume parentFdoExt_102 > 0;
    havoc vslice_dummy_var_728;
    call {:si_unique_call 2405} WPP_RECORDER_SF_(vslice_dummy_var_728, 4, 3, 36, Tmp_1415);
    call {:si_unique_call 2406} status_77 := AllocateWorkerIfNeeded#1(parentFdoExt_102, li2bplFunctionConstant1619, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_77 >= 0;
    goto L26;

  L26:
    call {:si_unique_call 2407} UsbcReleaseRemoveLock(parentFdoExt_102, gSetD0Tag);
    assume {:nonnull} parentFdoExt_102 != 0;
    assume parentFdoExt_102 > 0;
    call {:si_unique_call 2408} vslice_dummy_var_355 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_102), gSetD0Tag);
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} 0 > status_77;
    call {:si_unique_call 2409} UnblockWorkBlockedOnPendingParentD0#1(parentFdoExt_102, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CallbackFdoDeviceSetD0"} CallbackFdoDeviceSetD0#1(actual_devObj_12: int, actual_minorFunction_4: int, actual_SD3: int, actual_context_14: int, actual_ioStatus_5: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AllocateWorkerIfNeeded"} AllocateWorkerIfNeeded#0(actual_parentFdoExt_48: int, actual_workRoutine_1: int, actual_context_3: int) returns (Tmp_453: int)
{
  var {:scalar} sdv_192: int;
  var {:scalar} ntStatus_10: int;
  var {:pointer} parentFdoExt_48: int;
  var {:scalar} workRoutine_1: int;
  var {:pointer} context_3: int;

  anon0:
    parentFdoExt_48 := actual_parentFdoExt_48;
    workRoutine_1 := actual_workRoutine_1;
    context_3 := actual_context_3;
    ntStatus_10 := 0;
    call {:si_unique_call 2410} sdv_192 := sdv_KeGetCurrentIrql();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_192 != 0;
    call {:si_unique_call 2411} ntStatus_10 := AllocateWorker#0(parentFdoExt_48, workRoutine_1, context_3);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  L16:
    Tmp_453 := ntStatus_10;
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} sdv_192 == 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:IndirectCall} true;
    assume workRoutine_1 == li2bplFunctionConstant822;
    call {:si_unique_call 2412} ResumeIdleTimerWorker(parentFdoExt_48, context_3);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:IndirectCall} true;
    assume workRoutine_1 == li2bplFunctionConstant1619;
    call {:si_unique_call 2413} UnblockWorkBlockedOnPendingParentD0#0(parentFdoExt_48, context_3);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "AllocateWorkerIfNeeded"} AllocateWorkerIfNeeded#0(actual_parentFdoExt_48: int, actual_workRoutine_1: int, actual_context_3: int) returns (Tmp_453: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AllocateWorkerIfNeeded"} AllocateWorkerIfNeeded#1(actual_parentFdoExt_48: int, actual_workRoutine_1: int, actual_context_3: int) returns (Tmp_453: int)
{
  var {:scalar} sdv_192: int;
  var {:scalar} ntStatus_10: int;
  var {:pointer} parentFdoExt_48: int;
  var {:scalar} workRoutine_1: int;
  var {:pointer} context_3: int;

  anon0:
    parentFdoExt_48 := actual_parentFdoExt_48;
    workRoutine_1 := actual_workRoutine_1;
    context_3 := actual_context_3;
    ntStatus_10 := 0;
    call {:si_unique_call 2414} sdv_192 := sdv_KeGetCurrentIrql();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_192 != 0;
    call {:si_unique_call 2415} ntStatus_10 := AllocateWorker#1(parentFdoExt_48, workRoutine_1, context_3);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  L16:
    Tmp_453 := ntStatus_10;
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} sdv_192 == 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:IndirectCall} true;
    assume workRoutine_1 == li2bplFunctionConstant822;
    call {:si_unique_call 2416} ResumeIdleTimerWorker(parentFdoExt_48, context_3);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:IndirectCall} true;
    assume workRoutine_1 == li2bplFunctionConstant1619;
    call {:si_unique_call 2417} UnblockWorkBlockedOnPendingParentD0#1(parentFdoExt_48, context_3);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "AllocateWorkerIfNeeded"} AllocateWorkerIfNeeded#1(actual_parentFdoExt_48: int, actual_workRoutine_1: int, actual_context_3: int) returns (Tmp_453: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AllocateWorker"} AllocateWorker#0(actual_parentFdoExt_39: int, actual_workRoutine: int, actual_context: int) returns (Tmp_396: int)
{
  var {:pointer} workItem: int;
  var {:pointer} sdv_166: int;
  var {:pointer} Tmp_397: int;
  var {:pointer} Tmp_398: int;
  var {:pointer} Tmp_399: int;
  var {:pointer} Tmp_400: int;
  var {:scalar} ntStatus_4: int;
  var {:pointer} Tmp_402: int;
  var {:pointer} Tmp_403: int;
  var {:pointer} workerContext: int;
  var {:pointer} parentFdoExt_39: int;
  var {:scalar} workRoutine: int;
  var {:pointer} context: int;
  var vslice_dummy_var_729: int;
  var vslice_dummy_var_730: int;
  var vslice_dummy_var_731: int;
  var vslice_dummy_var_732: int;

  anon0:
    parentFdoExt_39 := actual_parentFdoExt_39;
    workRoutine := actual_workRoutine;
    context := actual_context;
    ntStatus_4 := 0;
    workItem := 0;
    workerContext := 0;
    call {:si_unique_call 2418} sdv_166 := ExAllocatePoolWithTag(512, 20, -1016958123);
    workerContext := sdv_166;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} workerContext != 0;
    call {:si_unique_call 2419} sdv_RtlZeroMemory(0, 20);
    goto L14;

  L14:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} workerContext == 0;
    havoc Tmp_400;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_729;
    call {:si_unique_call 2420} WPP_RECORDER_SF_(vslice_dummy_var_729, 2, 8, 42, Tmp_400);
    Tmp_396 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} workerContext != 0;
    call {:si_unique_call 2421} workItem := IoAllocateWorkItem(0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} workItem != 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L42;

  L42:
    Tmp_403 := workRoutine;
    call {:si_unique_call 2422} ntStatus_4 := UsbcAcquireRemoveLock(parentFdoExt_39, -344821929, Tmp_403);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} ntStatus_4 >= 0;
    call {:si_unique_call 2423} IoQueueWorkItem#0(workItem, li2bplFunctionConstant2434, 0, workerContext);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L54;

  L54:
    Tmp_396 := ntStatus_4;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} 0 > ntStatus_4;
    call {:si_unique_call 2424} ExFreePoolWithTag(0, -1016958123);
    call {:si_unique_call 2425} IoFreeWorkItem(0);
    havoc Tmp_398;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_730;
    call {:si_unique_call 2426} WPP_RECORDER_SF_(vslice_dummy_var_730, 2, 8, 45, Tmp_398);
    goto L54;

  anon15_Then:
    Tmp_399 := workRoutine;
    havoc Tmp_402;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_731;
    call {:si_unique_call 2427} WPP_RECORDER_SF_qq(vslice_dummy_var_731, 5, 3, 44, Tmp_402, Tmp_399, context);
    goto L42;

  anon14_Then:
    assume {:partition} workItem == 0;
    ntStatus_4 := -1073741670;
    call {:si_unique_call 2428} ExFreePoolWithTag(0, -1016958123);
    havoc Tmp_397;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_732;
    call {:si_unique_call 2429} WPP_RECORDER_SF_(vslice_dummy_var_732, 2, 8, 43, Tmp_397);
    goto L54;

  anon17_Then:
    assume {:partition} workerContext == 0;
    goto L14;
}



procedure {:origName "AllocateWorker"} AllocateWorker#0(actual_parentFdoExt_39: int, actual_workRoutine: int, actual_context: int) returns (Tmp_396: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "AllocateWorker"} AllocateWorker#1(actual_parentFdoExt_39: int, actual_workRoutine: int, actual_context: int) returns (Tmp_396: int)
{
  var {:pointer} workItem: int;
  var {:pointer} sdv_166: int;
  var {:pointer} Tmp_397: int;
  var {:pointer} Tmp_398: int;
  var {:pointer} Tmp_399: int;
  var {:pointer} Tmp_400: int;
  var {:scalar} ntStatus_4: int;
  var {:pointer} Tmp_402: int;
  var {:pointer} Tmp_403: int;
  var {:pointer} workerContext: int;
  var {:pointer} parentFdoExt_39: int;
  var {:scalar} workRoutine: int;
  var {:pointer} context: int;
  var vslice_dummy_var_733: int;
  var vslice_dummy_var_734: int;
  var vslice_dummy_var_735: int;
  var vslice_dummy_var_736: int;

  anon0:
    parentFdoExt_39 := actual_parentFdoExt_39;
    workRoutine := actual_workRoutine;
    context := actual_context;
    ntStatus_4 := 0;
    workItem := 0;
    workerContext := 0;
    call {:si_unique_call 2430} sdv_166 := ExAllocatePoolWithTag(512, 20, -1016958123);
    workerContext := sdv_166;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} workerContext != 0;
    call {:si_unique_call 2431} sdv_RtlZeroMemory(0, 20);
    goto L14;

  L14:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} workerContext == 0;
    havoc Tmp_400;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_733;
    call {:si_unique_call 2432} WPP_RECORDER_SF_(vslice_dummy_var_733, 2, 8, 42, Tmp_400);
    Tmp_396 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} workerContext != 0;
    call {:si_unique_call 2433} workItem := IoAllocateWorkItem(0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} workItem != 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    assume {:nonnull} workerContext != 0;
    assume workerContext > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L42;

  L42:
    Tmp_403 := workRoutine;
    call {:si_unique_call 2434} ntStatus_4 := UsbcAcquireRemoveLock(parentFdoExt_39, -344821929, Tmp_403);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} ntStatus_4 >= 0;
    call {:si_unique_call 2435} IoQueueWorkItem#1(workItem, li2bplFunctionConstant2434, 0, workerContext);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L54;

  L54:
    Tmp_396 := ntStatus_4;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} 0 > ntStatus_4;
    call {:si_unique_call 2436} ExFreePoolWithTag(0, -1016958123);
    call {:si_unique_call 2437} IoFreeWorkItem(0);
    havoc Tmp_398;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_734;
    call {:si_unique_call 2438} WPP_RECORDER_SF_(vslice_dummy_var_734, 2, 8, 45, Tmp_398);
    goto L54;

  anon15_Then:
    Tmp_399 := workRoutine;
    havoc Tmp_402;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_735;
    call {:si_unique_call 2439} WPP_RECORDER_SF_qq(vslice_dummy_var_735, 5, 3, 44, Tmp_402, Tmp_399, context);
    goto L42;

  anon14_Then:
    assume {:partition} workItem == 0;
    ntStatus_4 := -1073741670;
    call {:si_unique_call 2440} ExFreePoolWithTag(0, -1016958123);
    havoc Tmp_397;
    assume {:nonnull} parentFdoExt_39 != 0;
    assume parentFdoExt_39 > 0;
    havoc vslice_dummy_var_736;
    call {:si_unique_call 2441} WPP_RECORDER_SF_(vslice_dummy_var_736, 2, 8, 43, Tmp_397);
    goto L54;

  anon17_Then:
    assume {:partition} workerContext == 0;
    goto L14;
}



procedure {:origName "AllocateWorker"} AllocateWorker#1(actual_parentFdoExt_39: int, actual_workRoutine: int, actual_context: int) returns (Tmp_396: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#0(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_7: int)
{
  var {:scalar} WorkerRoutine: int;
  var {:scalar} QueueType: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_356: int;

  anon0:
    call {:si_unique_call 2442} vslice_dummy_var_356 := __HAVOC_malloc(4);
    WorkerRoutine := actual_WorkerRoutine;
    QueueType := actual_QueueType;
    Context_7 := actual_Context_7;
    call {:si_unique_call 2443} sdv_RunIoQueueWorkItems#0(0, WorkerRoutine, QueueType, Context_7);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#0(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_7: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#1(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_7: int)
{
  var {:scalar} WorkerRoutine: int;
  var {:scalar} QueueType: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_357: int;

  anon0:
    call {:si_unique_call 2444} vslice_dummy_var_357 := __HAVOC_malloc(4);
    WorkerRoutine := actual_WorkerRoutine;
    QueueType := actual_QueueType;
    Context_7 := actual_Context_7;
    call {:si_unique_call 2445} sdv_RunIoQueueWorkItems#1(0, WorkerRoutine, QueueType, Context_7);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#1(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_7: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#0(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_8: int)
{
  var {:scalar} WorkerRoutine_1: int;
  var {:pointer} Context_8: int;
  var vslice_dummy_var_358: int;

  anon0:
    call {:si_unique_call 2446} vslice_dummy_var_358 := __HAVOC_malloc(4);
    WorkerRoutine_1 := actual_WorkerRoutine_1;
    Context_8 := actual_Context_8;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant803;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2447} CheckParentIdleWorker#0(sdv_p_devobj_fdo, Context_8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L4;

  L4:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant827;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2448} PdoInvokeIdleCallbackWorker#0(sdv_p_devobj_fdo, Context_8);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L19;

  L19:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant2844;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2449} ProcessWakeNotificationWorker#0(sdv_p_devobj_fdo, Context_8);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L34;

  L34:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant2434;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2450} UsbcWorkerFunction#0(sdv_p_devobj_fdo, Context_8);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant2434;
    goto L1;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant2844;
    goto L34;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant827;
    goto L19;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant803;
    goto L4;
}



procedure {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#0(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_8: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#1(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_8: int)
{
  var {:scalar} WorkerRoutine_1: int;
  var {:pointer} Context_8: int;
  var vslice_dummy_var_359: int;

  anon0:
    call {:si_unique_call 2451} vslice_dummy_var_359 := __HAVOC_malloc(4);
    WorkerRoutine_1 := actual_WorkerRoutine_1;
    Context_8 := actual_Context_8;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant803;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2452} CheckParentIdleWorker#1(sdv_p_devobj_fdo, Context_8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L4;

  L4:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant827;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2453} PdoInvokeIdleCallbackWorker#1(sdv_p_devobj_fdo, Context_8);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L19;

  L19:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant2844;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2454} ProcessWakeNotificationWorker#1(sdv_p_devobj_fdo, Context_8);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L34;

  L34:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant2434;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2455} UsbcWorkerFunction#1(sdv_p_devobj_fdo, Context_8);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant2434;
    goto L1;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant2844;
    goto L34;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant827;
    goto L19;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant803;
    goto L4;
}



procedure {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#1(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_8: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CheckParentIdleWorker"} CheckParentIdleWorker#0(actual_deviceObject_7: int, actual_context_24: int)
{
  var {:scalar} i_29: int;
  var {:pointer} Tmp_1919: int;
  var {:pointer} Tmp_1920: int;
  var {:pointer} thisFuncPdoExt_5: int;
  var {:pointer} Tmp_1921: int;
  var {:pointer} Tmp_1922: int;
  var {:pointer} Tmp_1923: int;
  var {:pointer} Tmp_1924: int;
  var {:pointer} Tmp_1925: int;
  var {:pointer} Tmp_1926: int;
  var {:pointer} parentFdoExt_130: int;
  var {:scalar} oldIrql_24: int;
  var {:scalar} Tmp_1928: int;
  var {:pointer} Tmp_1929: int;
  var {:scalar} bAllIdle: int;
  var {:scalar} status_92: int;
  var {:pointer} functionDevObj: int;
  var {:pointer} Tmp_1930: int;
  var {:pointer} functionDevExt: int;
  var {:pointer} Tmp_1931: int;
  var {:pointer} context_24: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_737: int;
  var vslice_dummy_var_738: int;
  var vslice_dummy_var_739: int;
  var vslice_dummy_var_740: int;
  var vslice_dummy_var_741: int;
  var vslice_dummy_var_742: int;
  var vslice_dummy_var_743: int;
  var vslice_dummy_var_744: int;
  var vslice_dummy_var_745: int;
  var vslice_dummy_var_746: int;
  var vslice_dummy_var_747: int;

  anon0:
    call {:si_unique_call 2456} vslice_dummy_var_360 := __HAVOC_malloc(4);
    context_24 := actual_context_24;
    call {:si_unique_call 2457} Tmp_1924 := __HAVOC_malloc(4);
    call {:si_unique_call 2458} Tmp_1930 := __HAVOC_malloc(72);
    status_92 := 0;
    parentFdoExt_130 := context_24;
    call {:si_unique_call 2459} Tmp_1923 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    Mem_T.VOID[Tmp_1923] := oldIrql_24;
    call {:si_unique_call 2460} sdv_KeAcquireSpinLock(0, Tmp_1923);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    oldIrql_24 := Mem_T.VOID[Tmp_1923];
    bAllIdle := 1;
    i_29 := 0;
    goto L15;

  L15:
    call {:si_unique_call 2461} i_29, thisFuncPdoExt_5, Tmp_1922, Tmp_1924, Tmp_1925, Tmp_1928, functionDevObj, functionDevExt := CheckParentIdleWorker#0_loop_L15(i_29, thisFuncPdoExt_5, Tmp_1922, Tmp_1924, Tmp_1925, parentFdoExt_130, Tmp_1928, functionDevObj, functionDevExt);
    goto L15_last;

  L15_last:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc Tmp_1925;
    assume {:nonnull} Tmp_1925 != 0;
    assume Tmp_1925 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    Tmp_1928 := i_29;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc Tmp_1922;
    assume {:nonnull} Tmp_1922 != 0;
    assume Tmp_1922 > 0;
    havoc Tmp_1924;
    assume {:nonnull} Tmp_1924 != 0;
    assume Tmp_1924 > 0;
    havoc functionDevObj;
    assume {:nonnull} functionDevObj != 0;
    assume functionDevObj > 0;
    havoc functionDevExt;
    assume {:nonnull} functionDevExt != 0;
    assume functionDevExt > 0;
    thisFuncPdoExt_5 := functionPdoExt_DEVICE_EXTENSION(functionDevExt);
    assume {:nonnull} thisFuncPdoExt_5 != 0;
    assume thisFuncPdoExt_5 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L25;

  L25:
    i_29 := i_29 + 1;
    goto L25_dummy;

  L25_dummy:
    assume false;
    return;

  anon56_Then:
    assume {:nonnull} thisFuncPdoExt_5 != 0;
    assume thisFuncPdoExt_5 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} thisFuncPdoExt_5 != 0;
    assume thisFuncPdoExt_5 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    bAllIdle := 0;
    goto L16;

  L16:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} bAllIdle == 0;
    goto L129;

  L129:
    havoc Tmp_1931;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_737;
    havoc vslice_dummy_var_738;
    havoc vslice_dummy_var_739;
    call {:si_unique_call 2462} WPP_RECORDER_SF_qL(vslice_dummy_var_737, 4, 7, 22, Tmp_1931, vslice_dummy_var_738, vslice_dummy_var_739);
    call {:si_unique_call 2463} sdv_KeReleaseSpinLock(0, oldIrql_24);
    goto L74;

  L74:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2464} vslice_dummy_var_361 := KeSetEvent(noIdleDpcPendingEvent_PARENT_FDO_EXTENSION(parentFdoExt_130), 0, 0);
    call {:si_unique_call 2465} PauseIdleTimer(parentFdoExt_130);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1920 := li2bplFunctionConstant803;
    call {:si_unique_call 2466} UsbcReleaseRemoveLock(parentFdoExt_130, Tmp_1920);
    Tmp_1921 := li2bplFunctionConstant803;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2467} vslice_dummy_var_364 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_130), Tmp_1921);
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} bAllIdle != 0;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L129;

  anon48_Then:
    havoc Tmp_1926;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_740;
    call {:si_unique_call 2468} WPP_RECORDER_SF_(vslice_dummy_var_740, 4, 7, 19, Tmp_1926);
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 2469} sdv_KeReleaseSpinLock(0, oldIrql_24);
    call {:si_unique_call 2470} DisableIdleTimer(parentFdoExt_130, 1, -800896684);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1930 := strConst__li2bpl41;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_741;
    call {:si_unique_call 2471} WaitForSignal(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_130), Tmp_1930, vslice_dummy_var_741);
    call {:si_unique_call 2472} EnableIdleTimer(parentFdoExt_130, 1, -800896684);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2473} Tmp_1923 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    Mem_T.VOID[Tmp_1923] := oldIrql_24;
    call {:si_unique_call 2474} sdv_KeAcquireSpinLock(0, Tmp_1923);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    oldIrql_24 := Mem_T.VOID[Tmp_1923];
    goto L43;

  L43:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    havoc Tmp_1929;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_742;
    call {:si_unique_call 2475} WPP_RECORDER_SF_(vslice_dummy_var_742, 4, 7, 20, Tmp_1929);
    call {:si_unique_call 2476} ChangeIdleState(parentFdoExt_130, 1, 0);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2477} vslice_dummy_var_362 := KeResetEvent(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_130));
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2478} sdv_KeReleaseSpinLock(0, oldIrql_24);
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L109;

  L109:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_743;
    call {:si_unique_call 2479} status_92 := PretendToSubmitParentIdleIrp#0(parentFdoExt_130, vslice_dummy_var_743);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    goto L113;

  L113:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} status_92 < 0;
    call {:si_unique_call 2480} CancelFdoIdleIrp(parentFdoExt_130, 0);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2481} ChangeIdleState(parentFdoExt_130, 0, 1);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2482} vslice_dummy_var_363 := KeSetEvent(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_130), 0, 0);
    goto L74;

  anon65_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:partition} 0 <= status_92;
    goto L74;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_744;
    call {:si_unique_call 2483} status_92 := SubmitParentIdleIrp#0(parentFdoExt_130, vslice_dummy_var_744);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L113;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    goto L109;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    havoc Tmp_1919;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_745;
    havoc vslice_dummy_var_746;
    havoc vslice_dummy_var_747;
    call {:si_unique_call 2484} WPP_RECORDER_SF_qL(vslice_dummy_var_745, 4, 7, 21, Tmp_1919, vslice_dummy_var_746, vslice_dummy_var_747);
    call {:si_unique_call 2485} sdv_KeReleaseSpinLock(0, oldIrql_24);
    goto L74;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    goto L43;

  anon47_Then:
    goto L25;

  anon46_Then:
    goto L25;

  anon55_Then:
    goto L16;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CheckParentIdleWorker"} CheckParentIdleWorker#0(actual_deviceObject_7: int, actual_context_24: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CheckParentIdleWorker"} CheckParentIdleWorker#1(actual_deviceObject_7: int, actual_context_24: int)
{
  var {:scalar} i_29: int;
  var {:pointer} Tmp_1919: int;
  var {:pointer} Tmp_1920: int;
  var {:pointer} thisFuncPdoExt_5: int;
  var {:pointer} Tmp_1921: int;
  var {:pointer} Tmp_1922: int;
  var {:pointer} Tmp_1923: int;
  var {:pointer} Tmp_1924: int;
  var {:pointer} Tmp_1925: int;
  var {:pointer} Tmp_1926: int;
  var {:pointer} parentFdoExt_130: int;
  var {:scalar} oldIrql_24: int;
  var {:scalar} Tmp_1928: int;
  var {:pointer} Tmp_1929: int;
  var {:scalar} bAllIdle: int;
  var {:scalar} status_92: int;
  var {:pointer} functionDevObj: int;
  var {:pointer} Tmp_1930: int;
  var {:pointer} functionDevExt: int;
  var {:pointer} Tmp_1931: int;
  var {:pointer} context_24: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_748: int;
  var vslice_dummy_var_749: int;
  var vslice_dummy_var_750: int;
  var vslice_dummy_var_751: int;
  var vslice_dummy_var_752: int;
  var vslice_dummy_var_753: int;
  var vslice_dummy_var_754: int;
  var vslice_dummy_var_755: int;
  var vslice_dummy_var_756: int;
  var vslice_dummy_var_757: int;
  var vslice_dummy_var_758: int;

  anon0:
    call {:si_unique_call 2486} vslice_dummy_var_365 := __HAVOC_malloc(4);
    context_24 := actual_context_24;
    call {:si_unique_call 2487} Tmp_1924 := __HAVOC_malloc(4);
    call {:si_unique_call 2488} Tmp_1930 := __HAVOC_malloc(72);
    status_92 := 0;
    parentFdoExt_130 := context_24;
    call {:si_unique_call 2489} Tmp_1923 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    Mem_T.VOID[Tmp_1923] := oldIrql_24;
    call {:si_unique_call 2490} sdv_KeAcquireSpinLock(0, Tmp_1923);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    oldIrql_24 := Mem_T.VOID[Tmp_1923];
    bAllIdle := 1;
    i_29 := 0;
    goto L15;

  L15:
    call {:si_unique_call 2491} i_29, thisFuncPdoExt_5, Tmp_1922, Tmp_1924, Tmp_1925, Tmp_1928, functionDevObj, functionDevExt := CheckParentIdleWorker#1_loop_L15(i_29, thisFuncPdoExt_5, Tmp_1922, Tmp_1924, Tmp_1925, parentFdoExt_130, Tmp_1928, functionDevObj, functionDevExt);
    goto L15_last;

  L15_last:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc Tmp_1925;
    assume {:nonnull} Tmp_1925 != 0;
    assume Tmp_1925 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    Tmp_1928 := i_29;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc Tmp_1922;
    assume {:nonnull} Tmp_1922 != 0;
    assume Tmp_1922 > 0;
    havoc Tmp_1924;
    assume {:nonnull} Tmp_1924 != 0;
    assume Tmp_1924 > 0;
    havoc functionDevObj;
    assume {:nonnull} functionDevObj != 0;
    assume functionDevObj > 0;
    havoc functionDevExt;
    assume {:nonnull} functionDevExt != 0;
    assume functionDevExt > 0;
    thisFuncPdoExt_5 := functionPdoExt_DEVICE_EXTENSION(functionDevExt);
    assume {:nonnull} thisFuncPdoExt_5 != 0;
    assume thisFuncPdoExt_5 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L25;

  L25:
    i_29 := i_29 + 1;
    goto L25_dummy;

  L25_dummy:
    assume false;
    return;

  anon56_Then:
    assume {:nonnull} thisFuncPdoExt_5 != 0;
    assume thisFuncPdoExt_5 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} thisFuncPdoExt_5 != 0;
    assume thisFuncPdoExt_5 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    bAllIdle := 0;
    goto L16;

  L16:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} bAllIdle == 0;
    goto L129;

  L129:
    havoc Tmp_1931;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_748;
    havoc vslice_dummy_var_749;
    havoc vslice_dummy_var_750;
    call {:si_unique_call 2492} WPP_RECORDER_SF_qL(vslice_dummy_var_748, 4, 7, 22, Tmp_1931, vslice_dummy_var_749, vslice_dummy_var_750);
    call {:si_unique_call 2493} sdv_KeReleaseSpinLock(0, oldIrql_24);
    goto L74;

  L74:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2494} vslice_dummy_var_366 := KeSetEvent(noIdleDpcPendingEvent_PARENT_FDO_EXTENSION(parentFdoExt_130), 0, 0);
    call {:si_unique_call 2495} PauseIdleTimer(parentFdoExt_130);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1920 := li2bplFunctionConstant803;
    call {:si_unique_call 2496} UsbcReleaseRemoveLock(parentFdoExt_130, Tmp_1920);
    Tmp_1921 := li2bplFunctionConstant803;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2497} vslice_dummy_var_369 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_130), Tmp_1921);
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} bAllIdle != 0;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L129;

  anon48_Then:
    havoc Tmp_1926;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_751;
    call {:si_unique_call 2498} WPP_RECORDER_SF_(vslice_dummy_var_751, 4, 7, 19, Tmp_1926);
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 2499} sdv_KeReleaseSpinLock(0, oldIrql_24);
    call {:si_unique_call 2500} DisableIdleTimer(parentFdoExt_130, 1, -800896684);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1930 := strConst__li2bpl41;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_752;
    call {:si_unique_call 2501} WaitForSignal(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_130), Tmp_1930, vslice_dummy_var_752);
    call {:si_unique_call 2502} EnableIdleTimer(parentFdoExt_130, 1, -800896684);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2503} Tmp_1923 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    Mem_T.VOID[Tmp_1923] := oldIrql_24;
    call {:si_unique_call 2504} sdv_KeAcquireSpinLock(0, Tmp_1923);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1923 != 0;
    assume Tmp_1923 > 0;
    oldIrql_24 := Mem_T.VOID[Tmp_1923];
    goto L43;

  L43:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    havoc Tmp_1929;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_753;
    call {:si_unique_call 2505} WPP_RECORDER_SF_(vslice_dummy_var_753, 4, 7, 20, Tmp_1929);
    call {:si_unique_call 2506} ChangeIdleState(parentFdoExt_130, 1, 0);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2507} vslice_dummy_var_367 := KeResetEvent(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_130));
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2508} sdv_KeReleaseSpinLock(0, oldIrql_24);
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L109;

  L109:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_754;
    call {:si_unique_call 2509} status_92 := PretendToSubmitParentIdleIrp#1(parentFdoExt_130, vslice_dummy_var_754);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    goto L113;

  L113:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} status_92 < 0;
    call {:si_unique_call 2510} CancelFdoIdleIrp(parentFdoExt_130, 0);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2511} ChangeIdleState(parentFdoExt_130, 0, 1);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    call {:si_unique_call 2512} vslice_dummy_var_368 := KeSetEvent(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_130), 0, 0);
    goto L74;

  anon65_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:partition} 0 <= status_92;
    goto L74;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_755;
    call {:si_unique_call 2513} status_92 := SubmitParentIdleIrp#1(parentFdoExt_130, vslice_dummy_var_755);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L113;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    goto L109;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    havoc Tmp_1919;
    assume {:nonnull} parentFdoExt_130 != 0;
    assume parentFdoExt_130 > 0;
    havoc vslice_dummy_var_756;
    havoc vslice_dummy_var_757;
    havoc vslice_dummy_var_758;
    call {:si_unique_call 2514} WPP_RECORDER_SF_qL(vslice_dummy_var_756, 4, 7, 21, Tmp_1919, vslice_dummy_var_757, vslice_dummy_var_758);
    call {:si_unique_call 2515} sdv_KeReleaseSpinLock(0, oldIrql_24);
    goto L74;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    goto L43;

  anon47_Then:
    goto L25;

  anon46_Then:
    goto L25;

  anon55_Then:
    goto L16;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CheckParentIdleWorker"} CheckParentIdleWorker#1(actual_deviceObject_7: int, actual_context_24: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PretendToSubmitParentIdleIrp"} PretendToSubmitParentIdleIrp#0(actual_parentFdoExt_124: int, actual_irp_66: int) returns (Tmp_1868: int)
{
  var {:pointer} nextStack: int;
  var {:pointer} Tmp_1870: int;
  var {:pointer} Tmp_1871: int;
  var {:pointer} Tmp_1872: int;
  var {:pointer} Tmp_1873: int;
  var {:pointer} Tmp_1874: int;
  var {:pointer} Tmp_1875: int;
  var {:scalar} status_91: int;
  var {:pointer} parentFdoExt_124: int;
  var {:pointer} irp_66: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_759: int;
  var vslice_dummy_var_760: int;
  var vslice_dummy_var_761: int;
  var vslice_dummy_var_762: int;

  anon0:
    parentFdoExt_124 := actual_parentFdoExt_124;
    irp_66 := actual_irp_66;
    call {:si_unique_call 2516} IoReuseIrp(irp_66, 0);
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    call {:si_unique_call 2517} nextStack := sdv_IoGetNextIrpStackLocation(irp_66);
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    Tmp_1874 := irp_66;
    call {:si_unique_call 2518} status_91 := UsbcAcquireRemoveLock(parentFdoExt_124, -263629997, Tmp_1874);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_91 < 0;
    havoc Tmp_1875;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    havoc vslice_dummy_var_759;
    call {:si_unique_call 2519} WPP_RECORDER_SF_(vslice_dummy_var_759, 2, 7, 16, Tmp_1875);
    goto L48;

  L48:
    Tmp_1868 := status_91;
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} 0 <= status_91;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    havoc vslice_dummy_var_760;
    havoc vslice_dummy_var_761;
    call {:si_unique_call 2520} SetCompletionRoutine(vslice_dummy_var_760, vslice_dummy_var_761, irp_66, li2bplFunctionConstant806, parentFdoExt_124, 1, 1, 1);
    havoc Tmp_1872;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    havoc vslice_dummy_var_762;
    call {:si_unique_call 2521} WPP_RECORDER_SF_q(vslice_dummy_var_762, 4, 7, 17, Tmp_1872, irp_66);
    assume false;
    return;
}



procedure {:origName "PretendToSubmitParentIdleIrp"} PretendToSubmitParentIdleIrp#0(actual_parentFdoExt_124: int, actual_irp_66: int) returns (Tmp_1868: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1868 == -1073741823 || Tmp_1868 == -1073741738 || Tmp_1868 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PretendToSubmitParentIdleIrp"} PretendToSubmitParentIdleIrp#1(actual_parentFdoExt_124: int, actual_irp_66: int) returns (Tmp_1868: int)
{
  var {:pointer} nextStack: int;
  var {:pointer} Tmp_1870: int;
  var {:pointer} Tmp_1871: int;
  var {:pointer} Tmp_1872: int;
  var {:pointer} Tmp_1873: int;
  var {:pointer} Tmp_1874: int;
  var {:pointer} Tmp_1875: int;
  var {:scalar} status_91: int;
  var {:pointer} parentFdoExt_124: int;
  var {:pointer} irp_66: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_763: int;
  var vslice_dummy_var_764: int;
  var vslice_dummy_var_765: int;
  var vslice_dummy_var_766: int;
  var vslice_dummy_var_767: int;

  anon0:
    parentFdoExt_124 := actual_parentFdoExt_124;
    irp_66 := actual_irp_66;
    call {:si_unique_call 2522} IoReuseIrp(irp_66, 0);
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    call {:si_unique_call 2523} nextStack := sdv_IoGetNextIrpStackLocation(irp_66);
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    assume {:nonnull} nextStack != 0;
    assume nextStack > 0;
    Tmp_1874 := irp_66;
    call {:si_unique_call 2524} status_91 := UsbcAcquireRemoveLock(parentFdoExt_124, -263629997, Tmp_1874);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_91 < 0;
    havoc Tmp_1875;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    havoc vslice_dummy_var_763;
    call {:si_unique_call 2525} WPP_RECORDER_SF_(vslice_dummy_var_763, 2, 7, 16, Tmp_1875);
    goto L48;

  L48:
    Tmp_1868 := status_91;
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} 0 <= status_91;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    havoc vslice_dummy_var_764;
    havoc vslice_dummy_var_765;
    call {:si_unique_call 2526} SetCompletionRoutine(vslice_dummy_var_764, vslice_dummy_var_765, irp_66, li2bplFunctionConstant806, parentFdoExt_124, 1, 1, 1);
    havoc Tmp_1872;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    havoc vslice_dummy_var_766;
    call {:si_unique_call 2527} WPP_RECORDER_SF_q(vslice_dummy_var_766, 4, 7, 17, Tmp_1872, irp_66);
    call {:si_unique_call 2528} status_91 := AllocateWorker#0(parentFdoExt_124, li2bplFunctionConstant808, irp_66);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_91 < 0;
    havoc Tmp_1873;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    havoc vslice_dummy_var_767;
    call {:si_unique_call 2529} WPP_RECORDER_SF_(vslice_dummy_var_767, 2, 7, 18, Tmp_1873);
    Tmp_1871 := irp_66;
    call {:si_unique_call 2530} UsbcReleaseRemoveLock(parentFdoExt_124, Tmp_1871);
    Tmp_1870 := irp_66;
    assume {:nonnull} parentFdoExt_124 != 0;
    assume parentFdoExt_124 > 0;
    call {:si_unique_call 2531} vslice_dummy_var_371 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_124), Tmp_1870);
    goto L48;

  anon8_Then:
    assume {:partition} 0 <= status_91;
    status_91 := 259;
    goto L48;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PretendToSubmitParentIdleIrp"} PretendToSubmitParentIdleIrp#1(actual_parentFdoExt_124: int, actual_irp_66: int) returns (Tmp_1868: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SubmitParentIdleIrp"} SubmitParentIdleIrp#0(actual_parentFdoExt_141: int, actual_irp_68: int) returns (Tmp_2011: int)
{
  var {:pointer} nextStack_1: int;
  var {:pointer} Tmp_2013: int;
  var {:pointer} Tmp_2014: int;
  var {:pointer} Tmp_2015: int;
  var {:scalar} status_96: int;
  var {:scalar} statusReturned: int;
  var {:pointer} parentFdoExt_141: int;
  var {:pointer} irp_68: int;
  var vslice_dummy_var_768: int;
  var vslice_dummy_var_769: int;
  var vslice_dummy_var_770: int;
  var vslice_dummy_var_771: int;
  var vslice_dummy_var_772: int;
  var vslice_dummy_var_773: int;

  anon0:
    parentFdoExt_141 := actual_parentFdoExt_141;
    irp_68 := actual_irp_68;
    status_96 := 0;
    call {:si_unique_call 2532} IoReuseIrp(irp_68, 0);
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    call {:si_unique_call 2533} nextStack_1 := sdv_IoGetNextIrpStackLocation(irp_68);
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    call {:si_unique_call 2534} status_96 := UsbcAcquireRemoveLock(parentFdoExt_141, -263629997, irp_68);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_96 < 0;
    havoc Tmp_2015;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_768;
    call {:si_unique_call 2535} WPP_RECORDER_SF_(vslice_dummy_var_768, 2, 7, 13, Tmp_2015);
    goto L54;

  L54:
    Tmp_2011 := status_96;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 <= status_96;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_769;
    havoc vslice_dummy_var_770;
    call {:si_unique_call 2536} SetCompletionRoutine(vslice_dummy_var_769, vslice_dummy_var_770, irp_68, li2bplFunctionConstant806, parentFdoExt_141, 1, 1, 1);
    havoc Tmp_2014;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_771;
    call {:si_unique_call 2537} WPP_RECORDER_SF_q(vslice_dummy_var_771, 4, 7, 14, Tmp_2014, irp_68);
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_772;
    call {:si_unique_call 2538} statusReturned := sdv_IoCallDriver#0(vslice_dummy_var_772, irp_68);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_2013;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_773;
    call {:si_unique_call 2539} WPP_RECORDER_SF_qd(vslice_dummy_var_773, 4, 7, 15, Tmp_2013, irp_68, statusReturned);
    goto L54;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SubmitParentIdleIrp"} SubmitParentIdleIrp#0(actual_parentFdoExt_141: int, actual_irp_68: int) returns (Tmp_2011: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SubmitParentIdleIrp"} SubmitParentIdleIrp#1(actual_parentFdoExt_141: int, actual_irp_68: int) returns (Tmp_2011: int)
{
  var {:pointer} nextStack_1: int;
  var {:pointer} Tmp_2013: int;
  var {:pointer} Tmp_2014: int;
  var {:pointer} Tmp_2015: int;
  var {:scalar} status_96: int;
  var {:scalar} statusReturned: int;
  var {:pointer} parentFdoExt_141: int;
  var {:pointer} irp_68: int;
  var vslice_dummy_var_774: int;
  var vslice_dummy_var_775: int;
  var vslice_dummy_var_776: int;
  var vslice_dummy_var_777: int;
  var vslice_dummy_var_778: int;
  var vslice_dummy_var_779: int;

  anon0:
    parentFdoExt_141 := actual_parentFdoExt_141;
    irp_68 := actual_irp_68;
    status_96 := 0;
    call {:si_unique_call 2540} IoReuseIrp(irp_68, 0);
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    call {:si_unique_call 2541} nextStack_1 := sdv_IoGetNextIrpStackLocation(irp_68);
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    assume {:nonnull} nextStack_1 != 0;
    assume nextStack_1 > 0;
    call {:si_unique_call 2542} status_96 := UsbcAcquireRemoveLock(parentFdoExt_141, -263629997, irp_68);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_96 < 0;
    havoc Tmp_2015;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_774;
    call {:si_unique_call 2543} WPP_RECORDER_SF_(vslice_dummy_var_774, 2, 7, 13, Tmp_2015);
    goto L54;

  L54:
    Tmp_2011 := status_96;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 <= status_96;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_775;
    havoc vslice_dummy_var_776;
    call {:si_unique_call 2544} SetCompletionRoutine(vslice_dummy_var_775, vslice_dummy_var_776, irp_68, li2bplFunctionConstant806, parentFdoExt_141, 1, 1, 1);
    havoc Tmp_2014;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_777;
    call {:si_unique_call 2545} WPP_RECORDER_SF_q(vslice_dummy_var_777, 4, 7, 14, Tmp_2014, irp_68);
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_778;
    call {:si_unique_call 2546} statusReturned := sdv_IoCallDriver#1(vslice_dummy_var_778, irp_68);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_2013;
    assume {:nonnull} parentFdoExt_141 != 0;
    assume parentFdoExt_141 > 0;
    havoc vslice_dummy_var_779;
    call {:si_unique_call 2547} WPP_RECORDER_SF_qd(vslice_dummy_var_779, 4, 7, 15, Tmp_2013, irp_68, statusReturned);
    goto L54;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SubmitParentIdleIrp"} SubmitParentIdleIrp#1(actual_parentFdoExt_141: int, actual_irp_68: int) returns (Tmp_2011: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#0(actual_DeviceObject_14: int, actual_Irp_10: int) returns (Tmp_1759: int)
{
  var {:pointer} Irp_10: int;

  anon0:
    Irp_10 := actual_Irp_10;
    call {:si_unique_call 2548} Tmp_1759 := IofCallDriver#0(0, Irp_10);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#0(actual_DeviceObject_14: int, actual_Irp_10: int) returns (Tmp_1759: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_1759 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#1(actual_DeviceObject_14: int, actual_Irp_10: int) returns (Tmp_1759: int)
{
  var {:pointer} Irp_10: int;

  anon0:
    Irp_10 := actual_Irp_10;
    call {:si_unique_call 2549} Tmp_1759 := IofCallDriver#1(0, Irp_10);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#1(actual_DeviceObject_14: int, actual_Irp_10: int) returns (Tmp_1759: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver#0(actual_DeviceObject_12: int, actual_Irp_8: int) returns (Tmp_1751: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_89: int;
  var {:pointer} Irp_8: int;

  anon0:
    call {:si_unique_call 2550} completion_1 := __HAVOC_malloc(4);
    Irp_8 := actual_Irp_8;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.VOID[completion_1] := 0;
    status_89 := 259;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L19;

  L19:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L29;

  L29:
    Tmp_1751 := status_89;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    assume false;
    return;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L23;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L19;

  anon68_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L58;

  L58:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L60;

  L60:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume false;
    return;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L62;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L58;

  anon69_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L32;

  L32:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume false;
    return;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L36;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L32;

  anon70_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L45;

  L45:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L47;

  L47:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume false;
    return;

  anon63_Then:
    goto L29;

  anon62_Then:
    goto L29;

  anon61_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L49;

  anon60_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L45;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver#0(actual_DeviceObject_12: int, actual_Irp_8: int) returns (Tmp_1751: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} Tmp_1751 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver#1(actual_DeviceObject_12: int, actual_Irp_8: int) returns (Tmp_1751: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_89: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_780: int;
  var vslice_dummy_var_781: int;
  var vslice_dummy_var_782: int;
  var vslice_dummy_var_783: int;

  anon0:
    call {:si_unique_call 2551} completion_1 := __HAVOC_malloc(4);
    Irp_8 := actual_Irp_8;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.VOID[completion_1] := 0;
    status_89 := 259;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L19;

  L19:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L29;

  L29:
    Tmp_1751 := status_89;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    havoc vslice_dummy_var_780;
    call {:si_unique_call 2552} vslice_dummy_var_372 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_780, completion_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L23;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L19;

  anon68_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L58;

  L58:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L60;

  L60:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc vslice_dummy_var_781;
    call {:si_unique_call 2553} vslice_dummy_var_375 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_781, completion_1);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L62;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L58;

  anon69_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L32;

  L32:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    havoc vslice_dummy_var_782;
    call {:si_unique_call 2554} vslice_dummy_var_373 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_782, completion_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L36;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L32;

  anon70_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L45;

  L45:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    goto L47;

  L47:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    havoc vslice_dummy_var_783;
    call {:si_unique_call 2555} vslice_dummy_var_374 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_783, completion_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    goto L29;

  anon62_Then:
    goto L29;

  anon61_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L49;

  anon60_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L45;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver#1(actual_DeviceObject_12: int, actual_Irp_8: int) returns (Tmp_1751: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PdoInvokeIdleCallbackWorker"} PdoInvokeIdleCallbackWorker#0(actual_deviceObject_8: int, actual_context_26: int)
{
  var {:pointer} idleIrp_4: int;
  var {:pointer} Tmp_2041: int;
  var {:pointer} Tmp_2042: int;
  var {:pointer} Tmp_2043: int;
  var {:pointer} parentFdoExt_146: int;
  var {:pointer} functionPdoExt_63: int;
  var {:pointer} Tmp_2045: int;
  var {:pointer} idleCallbackInfo_3: int;
  var {:pointer} context_26: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_784: int;
  var vslice_dummy_var_785: int;
  var vslice_dummy_var_786: int;
  var vslice_dummy_var_787: int;

  anon0:
    call {:si_unique_call 2556} vslice_dummy_var_376 := __HAVOC_malloc(4);
    context_26 := actual_context_26;
    call {:si_unique_call 2557} sdv_do_paged_code_check();
    idleIrp_4 := context_26;
    call {:si_unique_call 2558} functionPdoExt_63 := GET_FUNCTION_PDO_EXT_FROM_IRP(idleIrp_4);
    assume {:nonnull} functionPdoExt_63 != 0;
    assume functionPdoExt_63 > 0;
    havoc parentFdoExt_146;
    call {:si_unique_call 2559} idleCallbackInfo_3 := GET_IDLE_CALLBACK_INFO_FROM_IRP(idleIrp_4);
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc Tmp_2041;
    havoc Tmp_2042;
    assume {:nonnull} parentFdoExt_146 != 0;
    assume parentFdoExt_146 > 0;
    havoc vslice_dummy_var_784;
    call {:si_unique_call 2560} WPP_RECORDER_SF_qq(vslice_dummy_var_784, 4, 7, 67, Tmp_2042, idleCallbackInfo_3, Tmp_2041);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc vslice_dummy_var_785;
    call {:si_unique_call 2561} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_785);
    goto L33;

  L33:
    assume {:nonnull} functionPdoExt_63 != 0;
    assume functionPdoExt_63 > 0;
    call {:si_unique_call 2562} sdv_IoCsqInsertIrp#0(idleQueue_FUNCTION_PDO_EXTENSION(functionPdoExt_63), idleIrp_4, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    Tmp_2045 := li2bplFunctionConstant827;
    call {:si_unique_call 2563} UsbcReleaseRemoveLock(parentFdoExt_146, Tmp_2045);
    Tmp_2043 := li2bplFunctionConstant827;
    assume {:nonnull} parentFdoExt_146 != 0;
    assume parentFdoExt_146 > 0;
    call {:si_unique_call 2564} vslice_dummy_var_377 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_146), Tmp_2043);
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc vslice_dummy_var_786;
    call {:si_unique_call 2565} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_786);
    goto L33;

  anon9_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc vslice_dummy_var_787;
    call {:si_unique_call 2566} ParentIdleNotificationCallback#0(vslice_dummy_var_787);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L33;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PdoInvokeIdleCallbackWorker"} PdoInvokeIdleCallbackWorker#0(actual_deviceObject_8: int, actual_context_26: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PdoInvokeIdleCallbackWorker"} PdoInvokeIdleCallbackWorker#1(actual_deviceObject_8: int, actual_context_26: int)
{
  var {:pointer} idleIrp_4: int;
  var {:pointer} Tmp_2041: int;
  var {:pointer} Tmp_2042: int;
  var {:pointer} Tmp_2043: int;
  var {:pointer} parentFdoExt_146: int;
  var {:pointer} functionPdoExt_63: int;
  var {:pointer} Tmp_2045: int;
  var {:pointer} idleCallbackInfo_3: int;
  var {:pointer} context_26: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_788: int;
  var vslice_dummy_var_789: int;
  var vslice_dummy_var_790: int;
  var vslice_dummy_var_791: int;

  anon0:
    call {:si_unique_call 2567} vslice_dummy_var_378 := __HAVOC_malloc(4);
    context_26 := actual_context_26;
    call {:si_unique_call 2568} sdv_do_paged_code_check();
    idleIrp_4 := context_26;
    call {:si_unique_call 2569} functionPdoExt_63 := GET_FUNCTION_PDO_EXT_FROM_IRP(idleIrp_4);
    assume {:nonnull} functionPdoExt_63 != 0;
    assume functionPdoExt_63 > 0;
    havoc parentFdoExt_146;
    call {:si_unique_call 2570} idleCallbackInfo_3 := GET_IDLE_CALLBACK_INFO_FROM_IRP(idleIrp_4);
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc Tmp_2041;
    havoc Tmp_2042;
    assume {:nonnull} parentFdoExt_146 != 0;
    assume parentFdoExt_146 > 0;
    havoc vslice_dummy_var_788;
    call {:si_unique_call 2571} WPP_RECORDER_SF_qq(vslice_dummy_var_788, 4, 7, 67, Tmp_2042, idleCallbackInfo_3, Tmp_2041);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc vslice_dummy_var_789;
    call {:si_unique_call 2572} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_789);
    goto L33;

  L33:
    assume {:nonnull} functionPdoExt_63 != 0;
    assume functionPdoExt_63 > 0;
    call {:si_unique_call 2573} sdv_IoCsqInsertIrp#1(idleQueue_FUNCTION_PDO_EXTENSION(functionPdoExt_63), idleIrp_4, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    Tmp_2045 := li2bplFunctionConstant827;
    call {:si_unique_call 2574} UsbcReleaseRemoveLock(parentFdoExt_146, Tmp_2045);
    Tmp_2043 := li2bplFunctionConstant827;
    assume {:nonnull} parentFdoExt_146 != 0;
    assume parentFdoExt_146 > 0;
    call {:si_unique_call 2575} vslice_dummy_var_379 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_146), Tmp_2043);
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc vslice_dummy_var_790;
    call {:si_unique_call 2576} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_790);
    goto L33;

  anon9_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    assume {:nonnull} idleCallbackInfo_3 != 0;
    assume idleCallbackInfo_3 > 0;
    havoc vslice_dummy_var_791;
    call {:si_unique_call 2577} ParentIdleNotificationCallback#1(vslice_dummy_var_791);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L33;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PdoInvokeIdleCallbackWorker"} PdoInvokeIdleCallbackWorker#1(actual_deviceObject_8: int, actual_context_26: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCsqInsertIrp"} {:osmodel} sdv_IoCsqInsertIrp#0(actual_Csq: int, actual_pirp_6: int, actual_Context_9: int)
{
  var {:pointer} Csq: int;
  var {:pointer} pirp_6: int;
  var vslice_dummy_var_380: int;

  anon0:
    call {:si_unique_call 2578} vslice_dummy_var_380 := __HAVOC_malloc(4);
    Csq := actual_Csq;
    pirp_6 := actual_pirp_6;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Csq != 0;
    assume Csq > 0;
    call {:si_unique_call 2579} PdoIdleInsertIrp(Csq, pirp_6);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  L6:
    call {:si_unique_call 2580} sdv_IoMarkIrpPending(0);
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Csq != 0;
    assume Csq > 0;
    call {:si_unique_call 2581} PdoIdleRemoveIrp(Csq, pirp_6);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Csq != 0;
    assume Csq > 0;
    call {:si_unique_call 2582} WaitWakeCancelComplete#0(Csq, pirp_6);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCsqInsertIrp"} {:osmodel} sdv_IoCsqInsertIrp#0(actual_Csq: int, actual_pirp_6: int, actual_Context_9: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_5) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCsqInsertIrp"} {:osmodel} sdv_IoCsqInsertIrp#1(actual_Csq: int, actual_pirp_6: int, actual_Context_9: int)
{
  var {:pointer} Csq: int;
  var {:pointer} pirp_6: int;
  var vslice_dummy_var_381: int;

  anon0:
    call {:si_unique_call 2583} vslice_dummy_var_381 := __HAVOC_malloc(4);
    Csq := actual_Csq;
    pirp_6 := actual_pirp_6;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Csq != 0;
    assume Csq > 0;
    call {:si_unique_call 2584} PdoIdleInsertIrp(Csq, pirp_6);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  L6:
    call {:si_unique_call 2585} sdv_IoMarkIrpPending(0);
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Csq != 0;
    assume Csq > 0;
    call {:si_unique_call 2586} PdoIdleRemoveIrp(Csq, pirp_6);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Csq != 0;
    assume Csq > 0;
    call {:si_unique_call 2587} WaitWakeCancelComplete#1(Csq, pirp_6);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCsqInsertIrp"} {:osmodel} sdv_IoCsqInsertIrp#1(actual_Csq: int, actual_pirp_6: int, actual_Context_9: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WaitWakeCancelComplete"} WaitWakeCancelComplete#0(actual_csq_2: int, actual_Irp_15: int)
{
  var {:pointer} sdv_680: int;
  var {:pointer} parentFdoExt_153: int;
  var {:pointer} functionPdoExt_67: int;
  var {:pointer} Tmp_2083: int;
  var {:pointer} csq_2: int;
  var {:pointer} Irp_15: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_792: int;
  var vslice_dummy_var_793: int;

  anon0:
    call {:si_unique_call 2588} vslice_dummy_var_382 := __HAVOC_malloc(4);
    csq_2 := actual_csq_2;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 2589} sdv_680 := sdv_containing_record(csq_2, 28);
    functionPdoExt_67 := sdv_680;
    assume {:nonnull} functionPdoExt_67 != 0;
    assume functionPdoExt_67 > 0;
    havoc parentFdoExt_153;
    call {:si_unique_call 2590} CheckParentWaitWake#0(parentFdoExt_153);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} parentFdoExt_153 != 0;
    assume parentFdoExt_153 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    havoc Tmp_2083;
    assume {:nonnull} functionPdoExt_67 != 0;
    assume functionPdoExt_67 > 0;
    havoc vslice_dummy_var_792;
    havoc vslice_dummy_var_793;
    call {:si_unique_call 2591} WPP_RECORDER_SF_qq(vslice_dummy_var_792, 4, 3, 10, Tmp_2083, vslice_dummy_var_793, Irp_15);
    call {:si_unique_call 2592} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2593} UsbcReleaseRemoveLock(parentFdoExt_153, Irp_15);
    assume {:nonnull} parentFdoExt_153 != 0;
    assume parentFdoExt_153 > 0;
    call {:si_unique_call 2594} vslice_dummy_var_383 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_153), Irp_15);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    call {:si_unique_call 2595} CancelRemoteWakeNotificationIrp(functionPdoExt_67, Irp_15);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WaitWakeCancelComplete"} WaitWakeCancelComplete#0(actual_csq_2: int, actual_Irp_15: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_5) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WaitWakeCancelComplete"} WaitWakeCancelComplete#1(actual_csq_2: int, actual_Irp_15: int)
{
  var {:pointer} sdv_680: int;
  var {:pointer} parentFdoExt_153: int;
  var {:pointer} functionPdoExt_67: int;
  var {:pointer} Tmp_2083: int;
  var {:pointer} csq_2: int;
  var {:pointer} Irp_15: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_794: int;
  var vslice_dummy_var_795: int;

  anon0:
    call {:si_unique_call 2596} vslice_dummy_var_384 := __HAVOC_malloc(4);
    csq_2 := actual_csq_2;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 2597} sdv_680 := sdv_containing_record(csq_2, 28);
    functionPdoExt_67 := sdv_680;
    assume {:nonnull} functionPdoExt_67 != 0;
    assume functionPdoExt_67 > 0;
    havoc parentFdoExt_153;
    call {:si_unique_call 2598} CheckParentWaitWake#1(parentFdoExt_153);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} parentFdoExt_153 != 0;
    assume parentFdoExt_153 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    havoc Tmp_2083;
    assume {:nonnull} functionPdoExt_67 != 0;
    assume functionPdoExt_67 > 0;
    havoc vslice_dummy_var_794;
    havoc vslice_dummy_var_795;
    call {:si_unique_call 2599} WPP_RECORDER_SF_qq(vslice_dummy_var_794, 4, 3, 10, Tmp_2083, vslice_dummy_var_795, Irp_15);
    call {:si_unique_call 2600} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2601} UsbcReleaseRemoveLock(parentFdoExt_153, Irp_15);
    assume {:nonnull} parentFdoExt_153 != 0;
    assume parentFdoExt_153 > 0;
    call {:si_unique_call 2602} vslice_dummy_var_385 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_153), Irp_15);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    call {:si_unique_call 2603} CancelRemoteWakeNotificationIrp(functionPdoExt_67, Irp_15);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WaitWakeCancelComplete"} WaitWakeCancelComplete#1(actual_csq_2: int, actual_Irp_15: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CheckParentWaitWake"} CheckParentWaitWake#0(actual_parentFdoExt_111: int)
{
  var {:pointer} Tmp_1475: int;
  var {:pointer} Tmp_1476: int;
  var {:scalar} oldIrql_20: int;
  var {:pointer} Tmp_1477: int;
  var {:scalar} status_84: int;
  var {:scalar} Tmp_1478: int;
  var {:pointer} parentFdoExt_111: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_796: int;
  var vslice_dummy_var_797: int;
  var vslice_dummy_var_798: int;

  anon0:
    call {:si_unique_call 2604} vslice_dummy_var_386 := __HAVOC_malloc(4);
    parentFdoExt_111 := actual_parentFdoExt_111;
    status_84 := 0;
    havoc Tmp_1477;
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    havoc vslice_dummy_var_796;
    call {:si_unique_call 2605} WPP_RECORDER_SF_(vslice_dummy_var_796, 4, 3, 33, Tmp_1477);
    call {:si_unique_call 2606} Tmp_1475 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    Mem_T.VOID[Tmp_1475] := oldIrql_20;
    call {:si_unique_call 2607} sdv_KeAcquireSpinLock(0, Tmp_1475);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    oldIrql_20 := Mem_T.VOID[Tmp_1475];
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L20;

  L20:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L39;

  L39:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    havoc Tmp_1478;
    havoc Tmp_1476;
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    havoc vslice_dummy_var_797;
    havoc vslice_dummy_var_798;
    call {:si_unique_call 2608} WPP_RECORDER_SF_dd(vslice_dummy_var_797, 4, 3, 34, Tmp_1476, Tmp_1478, vslice_dummy_var_798);
    call {:si_unique_call 2609} sdv_KeReleaseSpinLock(0, oldIrql_20);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L39;

  anon20_Then:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    call {:si_unique_call 2610} sdv_KeReleaseSpinLock(0, oldIrql_20);
    call {:si_unique_call 2611} status_84 := SubmitParentWaitWakeIrp#0(parentFdoExt_111);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_84 < 0;
    call {:si_unique_call 2612} CompleteAllPdoWaitWakeIrps#0(parentFdoExt_111, status_84);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} 0 <= status_84;
    goto L1;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 2613} sdv_KeReleaseSpinLock(0, oldIrql_20);
    call {:si_unique_call 2614} CancelParentWaitWake(parentFdoExt_111);
    goto L1;

  anon18_Then:
    goto L20;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CheckParentWaitWake"} CheckParentWaitWake#0(actual_parentFdoExt_111: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CheckParentWaitWake"} CheckParentWaitWake#1(actual_parentFdoExt_111: int)
{
  var {:pointer} Tmp_1475: int;
  var {:pointer} Tmp_1476: int;
  var {:scalar} oldIrql_20: int;
  var {:pointer} Tmp_1477: int;
  var {:scalar} status_84: int;
  var {:scalar} Tmp_1478: int;
  var {:pointer} parentFdoExt_111: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_799: int;
  var vslice_dummy_var_800: int;
  var vslice_dummy_var_801: int;

  anon0:
    call {:si_unique_call 2615} vslice_dummy_var_387 := __HAVOC_malloc(4);
    parentFdoExt_111 := actual_parentFdoExt_111;
    status_84 := 0;
    havoc Tmp_1477;
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    havoc vslice_dummy_var_799;
    call {:si_unique_call 2616} WPP_RECORDER_SF_(vslice_dummy_var_799, 4, 3, 33, Tmp_1477);
    call {:si_unique_call 2617} Tmp_1475 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    Mem_T.VOID[Tmp_1475] := oldIrql_20;
    call {:si_unique_call 2618} sdv_KeAcquireSpinLock(0, Tmp_1475);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    oldIrql_20 := Mem_T.VOID[Tmp_1475];
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L20;

  L20:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L39;

  L39:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    havoc Tmp_1478;
    havoc Tmp_1476;
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    havoc vslice_dummy_var_800;
    havoc vslice_dummy_var_801;
    call {:si_unique_call 2619} WPP_RECORDER_SF_dd(vslice_dummy_var_800, 4, 3, 34, Tmp_1476, Tmp_1478, vslice_dummy_var_801);
    call {:si_unique_call 2620} sdv_KeReleaseSpinLock(0, oldIrql_20);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L39;

  anon20_Then:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    call {:si_unique_call 2621} sdv_KeReleaseSpinLock(0, oldIrql_20);
    call {:si_unique_call 2622} status_84 := SubmitParentWaitWakeIrp#1(parentFdoExt_111);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_84 < 0;
    call {:si_unique_call 2623} CompleteAllPdoWaitWakeIrps#1(parentFdoExt_111, status_84);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} 0 <= status_84;
    goto L1;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} parentFdoExt_111 != 0;
    assume parentFdoExt_111 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 2624} sdv_KeReleaseSpinLock(0, oldIrql_20);
    call {:si_unique_call 2625} CancelParentWaitWake(parentFdoExt_111);
    goto L1;

  anon18_Then:
    goto L20;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CheckParentWaitWake"} CheckParentWaitWake#1(actual_parentFdoExt_111: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SubmitParentWaitWakeIrp"} SubmitParentWaitWakeIrp#0(actual_parentFdoExt_103: int) returns (Tmp_1416: int)
{
  var {:pointer} Tmp_1417: int;
  var {:scalar} powerState_8: int;
  var {:scalar} status_78: int;
  var {:pointer} parentFdoExt_103: int;
  var vslice_dummy_var_802: int;

  anon0:
    call {:si_unique_call 2626} powerState_8 := __HAVOC_malloc(8);
    parentFdoExt_103 := actual_parentFdoExt_103;
    assume {:nonnull} parentFdoExt_103 != 0;
    assume parentFdoExt_103 > 0;
    assume {:nonnull} powerState_8 != 0;
    assume powerState_8 > 0;
    havoc Tmp_1417;
    assume {:nonnull} parentFdoExt_103 != 0;
    assume parentFdoExt_103 > 0;
    havoc vslice_dummy_var_802;
    call {:si_unique_call 2627} WPP_RECORDER_SF_(vslice_dummy_var_802, 4, 3, 28, Tmp_1417);
    assume {:nonnull} parentFdoExt_103 != 0;
    assume parentFdoExt_103 > 0;
    assume false;
    return;
}



procedure {:origName "SubmitParentWaitWakeIrp"} SubmitParentWaitWakeIrp#0(actual_parentFdoExt_103: int) returns (Tmp_1416: int);
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SubmitParentWaitWakeIrp"} SubmitParentWaitWakeIrp#1(actual_parentFdoExt_103: int) returns (Tmp_1416: int)
{
  var {:pointer} Tmp_1417: int;
  var {:scalar} powerState_8: int;
  var {:scalar} status_78: int;
  var {:pointer} parentFdoExt_103: int;
  var vslice_dummy_var_803: int;
  var vslice_dummy_var_804: int;

  anon0:
    call {:si_unique_call 2628} powerState_8 := __HAVOC_malloc(8);
    parentFdoExt_103 := actual_parentFdoExt_103;
    assume {:nonnull} parentFdoExt_103 != 0;
    assume parentFdoExt_103 > 0;
    assume {:nonnull} powerState_8 != 0;
    assume powerState_8 > 0;
    havoc Tmp_1417;
    assume {:nonnull} parentFdoExt_103 != 0;
    assume parentFdoExt_103 > 0;
    havoc vslice_dummy_var_803;
    call {:si_unique_call 2629} WPP_RECORDER_SF_(vslice_dummy_var_803, 4, 3, 28, Tmp_1417);
    assume {:nonnull} parentFdoExt_103 != 0;
    assume parentFdoExt_103 > 0;
    havoc vslice_dummy_var_804;
    call {:si_unique_call 2630} status_78 := PoRequestPowerIrp#0(vslice_dummy_var_804, 0, powerState_8, li2bplFunctionConstant2824, parentFdoExt_103, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1416 := status_78;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SubmitParentWaitWakeIrp"} SubmitParentWaitWakeIrp#1(actual_parentFdoExt_103: int) returns (Tmp_1416: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompleteAllPdoWaitWakeIrps"} CompleteAllPdoWaitWakeIrps#0(actual_parentFdoExt_96: int, actual_status_73: int)
{
  var {:scalar} i_21: int;
  var {:scalar} idleFinishCompletion_1: int;
  var {:pointer} thisFuncPdoExt_1: int;
  var {:pointer} devExt_12: int;
  var {:scalar} irpCompletionList: int;
  var {:pointer} listEntry_4: int;
  var {:pointer} Tmp_1386: int;
  var {:pointer} idleFinishCompletionWorkerContext_1: int;
  var {:pointer} completedWaitWakeIrp: int;
  var {:pointer} sdv_461: int;
  var {:pointer} Tmp_1388: int;
  var {:pointer} irpToComplete: int;
  var {:scalar} sdv_465: int;
  var {:scalar} tmpStatus_2: int;
  var {:pointer} Tmp_1389: int;
  var {:scalar} Tmp_1390: int;
  var {:pointer} Tmp_1391: int;
  var {:pointer} Tmp_1392: int;
  var {:scalar} irql: int;
  var {:pointer} devObj_11: int;
  var {:pointer} Tmp_1393: int;
  var {:pointer} parentFdoExt_96: int;
  var {:scalar} status_73: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_805: int;
  var vslice_dummy_var_806: int;
  var vslice_dummy_var_807: int;

  anon0:
    call {:si_unique_call 2631} irpCompletionList := __HAVOC_malloc(8);
    call {:si_unique_call 2632} vslice_dummy_var_388 := __HAVOC_malloc(4);
    parentFdoExt_96 := actual_parentFdoExt_96;
    status_73 := actual_status_73;
    call {:si_unique_call 2633} Tmp_1391 := __HAVOC_malloc(4);
    irpToComplete := 0;
    thisFuncPdoExt_1 := 0;
    completedWaitWakeIrp := 0;
    idleFinishCompletion_1 := 0;
    idleFinishCompletionWorkerContext_1 := 0;
    tmpStatus_2 := 0;
    call {:si_unique_call 2634} InitializeListHead(irpCompletionList);
    i_21 := 0;
    goto L23;

  L23:
    call {:si_unique_call 2635} i_21, thisFuncPdoExt_1, devExt_12, Tmp_1388, irpToComplete, Tmp_1389, Tmp_1390, Tmp_1391, devObj_11, vslice_dummy_var_389 := CompleteAllPdoWaitWakeIrps#0_loop_L23(i_21, thisFuncPdoExt_1, devExt_12, irpCompletionList, Tmp_1388, irpToComplete, Tmp_1389, Tmp_1390, Tmp_1391, devObj_11, parentFdoExt_96, vslice_dummy_var_389);
    goto L23_last;

  L23_last:
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc Tmp_1388;
    assume {:nonnull} Tmp_1388 != 0;
    assume Tmp_1388 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    Tmp_1390 := i_21;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc Tmp_1389;
    assume {:nonnull} Tmp_1389 != 0;
    assume Tmp_1389 > 0;
    havoc Tmp_1391;
    assume {:nonnull} Tmp_1391 != 0;
    assume Tmp_1391 > 0;
    havoc devObj_11;
    assume {:nonnull} devObj_11 != 0;
    assume devObj_11 > 0;
    havoc devExt_12;
    assume {:nonnull} devExt_12 != 0;
    assume devExt_12 > 0;
    thisFuncPdoExt_1 := functionPdoExt_DEVICE_EXTENSION(devExt_12);
    call {:si_unique_call 2636} irpToComplete := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} irpToComplete != 0;
    call {:si_unique_call 2637} SET_FUNCTION_PDO_EXT_IN_IRP(irpToComplete, thisFuncPdoExt_1);
    assume {:nonnull} irpToComplete != 0;
    assume irpToComplete > 0;
    call {:si_unique_call 2638} vslice_dummy_var_389 := sdv_InsertTailList(irpCompletionList, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irpToComplete))));
    goto L35;

  L35:
    i_21 := i_21 + 1;
    goto L35_dummy;

  L35_dummy:
    assume false;
    return;

  anon31_Then:
    assume {:partition} irpToComplete == 0;
    goto L35;

  anon38_Then:
    thisFuncPdoExt_1 := 0;
    call {:si_unique_call 2639} Tmp_1392 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    Mem_T.VOID[Tmp_1392] := irql;
    call {:si_unique_call 2640} sdv_KeAcquireSpinLock(0, Tmp_1392);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    irql := Mem_T.VOID[Tmp_1392];
    havoc Tmp_1386;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc vslice_dummy_var_805;
    call {:si_unique_call 2641} WPP_RECORDER_SF_(vslice_dummy_var_805, 4, 3, 22, Tmp_1386);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L64;

  L64:
    call {:si_unique_call 2642} sdv_KeReleaseSpinLock(0, irql);
    goto L67;

  L67:
    call {:si_unique_call 2643} thisFuncPdoExt_1, listEntry_4, sdv_461, irpToComplete, sdv_465, Tmp_1393, vslice_dummy_var_392 := CompleteAllPdoWaitWakeIrps#0_loop_L67(thisFuncPdoExt_1, irpCompletionList, listEntry_4, sdv_461, irpToComplete, sdv_465, Tmp_1393, parentFdoExt_96, status_73, vslice_dummy_var_392);
    goto L67_last;

  L67_last:
    call {:si_unique_call 2656} sdv_465 := sdv_IsListEmpty(0);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_465 != 0;
    call {:si_unique_call 2644} Tmp_1392 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    Mem_T.VOID[Tmp_1392] := irql;
    call {:si_unique_call 2645} sdv_KeAcquireSpinLock(0, Tmp_1392);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    irql := Mem_T.VOID[Tmp_1392];
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    call {:si_unique_call 2646} vslice_dummy_var_390 := KeSetEvent(waitWakeEvent_PARENT_FDO_EXTENSION(parentFdoExt_96), 0, 0);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    idleFinishCompletion_1 := 1;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc idleFinishCompletionWorkerContext_1;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto L81;

  L81:
    call {:si_unique_call 2647} sdv_KeReleaseSpinLock(0, irql);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} idleFinishCompletion_1 != 0;
    assume false;
    return;

  anon34_Then:
    assume {:partition} idleFinishCompletion_1 == 0;
    goto L89;

  L89:
    assume false;
    return;

  anon33_Then:
    goto L81;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon32_Then:
    assume {:partition} sdv_465 == 0;
    call {:si_unique_call 2648} listEntry_4 := RemoveHeadList(irpCompletionList);
    call {:si_unique_call 2649} sdv_461 := sdv_containing_record(listEntry_4, 88);
    irpToComplete := sdv_461;
    assume {:nonnull} irpToComplete != 0;
    assume irpToComplete > 0;
    call {:si_unique_call 2650} thisFuncPdoExt_1 := GET_FUNCTION_PDO_EXT_FROM_IRP(irpToComplete);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    havoc Tmp_1393;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    assume {:nonnull} thisFuncPdoExt_1 != 0;
    assume thisFuncPdoExt_1 > 0;
    havoc vslice_dummy_var_806;
    havoc vslice_dummy_var_807;
    call {:si_unique_call 2651} WPP_RECORDER_SF_qqd(vslice_dummy_var_806, 4, 3, 23, Tmp_1393, irpToComplete, vslice_dummy_var_807, status_73);
    call {:si_unique_call 2652} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2653} UsbcReleaseRemoveLock(parentFdoExt_96, irpToComplete);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    call {:si_unique_call 2654} vslice_dummy_var_392 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_96), irpToComplete);
    goto anon37_Else_dummy;

  anon37_Else_dummy:
    assume false;
    return;

  anon37_Then:
    call {:si_unique_call 2655} CancelRemoteWakeNotificationIrp(thisFuncPdoExt_1, irpToComplete);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    assume false;
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc completedWaitWakeIrp;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto L64;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CompleteAllPdoWaitWakeIrps"} CompleteAllPdoWaitWakeIrps#0(actual_parentFdoExt_96: int, actual_status_73: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompleteAllPdoWaitWakeIrps"} CompleteAllPdoWaitWakeIrps#1(actual_parentFdoExt_96: int, actual_status_73: int)
{
  var {:scalar} i_21: int;
  var {:scalar} idleFinishCompletion_1: int;
  var {:pointer} thisFuncPdoExt_1: int;
  var {:pointer} devExt_12: int;
  var {:scalar} irpCompletionList: int;
  var {:pointer} listEntry_4: int;
  var {:pointer} Tmp_1386: int;
  var {:pointer} idleFinishCompletionWorkerContext_1: int;
  var {:pointer} completedWaitWakeIrp: int;
  var {:pointer} sdv_461: int;
  var {:pointer} Tmp_1388: int;
  var {:pointer} irpToComplete: int;
  var {:scalar} sdv_465: int;
  var {:scalar} tmpStatus_2: int;
  var {:pointer} Tmp_1389: int;
  var {:scalar} Tmp_1390: int;
  var {:pointer} Tmp_1391: int;
  var {:pointer} Tmp_1392: int;
  var {:scalar} irql: int;
  var {:pointer} devObj_11: int;
  var {:pointer} Tmp_1393: int;
  var {:pointer} parentFdoExt_96: int;
  var {:scalar} status_73: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_808: int;
  var vslice_dummy_var_809: int;
  var vslice_dummy_var_810: int;

  anon0:
    call {:si_unique_call 2657} irpCompletionList := __HAVOC_malloc(8);
    call {:si_unique_call 2658} vslice_dummy_var_393 := __HAVOC_malloc(4);
    parentFdoExt_96 := actual_parentFdoExt_96;
    status_73 := actual_status_73;
    call {:si_unique_call 2659} Tmp_1391 := __HAVOC_malloc(4);
    irpToComplete := 0;
    thisFuncPdoExt_1 := 0;
    completedWaitWakeIrp := 0;
    idleFinishCompletion_1 := 0;
    idleFinishCompletionWorkerContext_1 := 0;
    tmpStatus_2 := 0;
    call {:si_unique_call 2660} InitializeListHead(irpCompletionList);
    i_21 := 0;
    goto L23;

  L23:
    call {:si_unique_call 2661} i_21, thisFuncPdoExt_1, devExt_12, Tmp_1388, irpToComplete, Tmp_1389, Tmp_1390, Tmp_1391, devObj_11, vslice_dummy_var_394 := CompleteAllPdoWaitWakeIrps#1_loop_L23(i_21, thisFuncPdoExt_1, devExt_12, irpCompletionList, Tmp_1388, irpToComplete, Tmp_1389, Tmp_1390, Tmp_1391, devObj_11, parentFdoExt_96, vslice_dummy_var_394);
    goto L23_last;

  L23_last:
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc Tmp_1388;
    assume {:nonnull} Tmp_1388 != 0;
    assume Tmp_1388 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    Tmp_1390 := i_21;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc Tmp_1389;
    assume {:nonnull} Tmp_1389 != 0;
    assume Tmp_1389 > 0;
    havoc Tmp_1391;
    assume {:nonnull} Tmp_1391 != 0;
    assume Tmp_1391 > 0;
    havoc devObj_11;
    assume {:nonnull} devObj_11 != 0;
    assume devObj_11 > 0;
    havoc devExt_12;
    assume {:nonnull} devExt_12 != 0;
    assume devExt_12 > 0;
    thisFuncPdoExt_1 := functionPdoExt_DEVICE_EXTENSION(devExt_12);
    call {:si_unique_call 2662} irpToComplete := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} irpToComplete != 0;
    call {:si_unique_call 2663} SET_FUNCTION_PDO_EXT_IN_IRP(irpToComplete, thisFuncPdoExt_1);
    assume {:nonnull} irpToComplete != 0;
    assume irpToComplete > 0;
    call {:si_unique_call 2664} vslice_dummy_var_394 := sdv_InsertTailList(irpCompletionList, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irpToComplete))));
    goto L35;

  L35:
    i_21 := i_21 + 1;
    goto L35_dummy;

  L35_dummy:
    assume false;
    return;

  anon31_Then:
    assume {:partition} irpToComplete == 0;
    goto L35;

  anon38_Then:
    thisFuncPdoExt_1 := 0;
    call {:si_unique_call 2665} Tmp_1392 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    Mem_T.VOID[Tmp_1392] := irql;
    call {:si_unique_call 2666} sdv_KeAcquireSpinLock(0, Tmp_1392);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    irql := Mem_T.VOID[Tmp_1392];
    havoc Tmp_1386;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc vslice_dummy_var_808;
    call {:si_unique_call 2667} WPP_RECORDER_SF_(vslice_dummy_var_808, 4, 3, 22, Tmp_1386);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L64;

  L64:
    call {:si_unique_call 2668} sdv_KeReleaseSpinLock(0, irql);
    goto L67;

  L67:
    call {:si_unique_call 2669} thisFuncPdoExt_1, listEntry_4, sdv_461, irpToComplete, sdv_465, Tmp_1393, vslice_dummy_var_397 := CompleteAllPdoWaitWakeIrps#1_loop_L67(thisFuncPdoExt_1, irpCompletionList, listEntry_4, sdv_461, irpToComplete, sdv_465, Tmp_1393, parentFdoExt_96, status_73, vslice_dummy_var_397);
    goto L67_last;

  L67_last:
    call {:si_unique_call 2687} sdv_465 := sdv_IsListEmpty(0);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_465 != 0;
    call {:si_unique_call 2670} Tmp_1392 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    Mem_T.VOID[Tmp_1392] := irql;
    call {:si_unique_call 2671} sdv_KeAcquireSpinLock(0, Tmp_1392);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1392 != 0;
    assume Tmp_1392 > 0;
    irql := Mem_T.VOID[Tmp_1392];
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    call {:si_unique_call 2672} vslice_dummy_var_395 := KeSetEvent(waitWakeEvent_PARENT_FDO_EXTENSION(parentFdoExt_96), 0, 0);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    idleFinishCompletion_1 := 1;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc idleFinishCompletionWorkerContext_1;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto L81;

  L81:
    call {:si_unique_call 2673} sdv_KeReleaseSpinLock(0, irql);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} idleFinishCompletion_1 != 0;
    call {:si_unique_call 2674} tmpStatus_2 := AllocateWorker#0(parentFdoExt_96, li2bplFunctionConstant810, idleFinishCompletionWorkerContext_1);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} tmpStatus_2 < 0;
    call {:si_unique_call 2675} IdleFinishCompletionWorker(parentFdoExt_96, idleFinishCompletionWorkerContext_1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L89;

  L89:
    call {:si_unique_call 2676} CheckParentWaitWake#0(parentFdoExt_96);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} completedWaitWakeIrp != 0;
    call {:si_unique_call 2677} UsbcReleaseRemoveLock(parentFdoExt_96, completedWaitWakeIrp);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    call {:si_unique_call 2678} vslice_dummy_var_396 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_96), completedWaitWakeIrp);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon36_Then:
    assume {:partition} completedWaitWakeIrp == 0;
    goto L1;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} 0 <= tmpStatus_2;
    goto L89;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} idleFinishCompletion_1 == 0;
    goto L89;

  anon33_Then:
    goto L81;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} sdv_465 == 0;
    call {:si_unique_call 2679} listEntry_4 := RemoveHeadList(irpCompletionList);
    call {:si_unique_call 2680} sdv_461 := sdv_containing_record(listEntry_4, 88);
    irpToComplete := sdv_461;
    assume {:nonnull} irpToComplete != 0;
    assume irpToComplete > 0;
    call {:si_unique_call 2681} thisFuncPdoExt_1 := GET_FUNCTION_PDO_EXT_FROM_IRP(irpToComplete);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    havoc Tmp_1393;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    assume {:nonnull} thisFuncPdoExt_1 != 0;
    assume thisFuncPdoExt_1 > 0;
    havoc vslice_dummy_var_809;
    havoc vslice_dummy_var_810;
    call {:si_unique_call 2682} WPP_RECORDER_SF_qqd(vslice_dummy_var_809, 4, 3, 23, Tmp_1393, irpToComplete, vslice_dummy_var_810, status_73);
    call {:si_unique_call 2683} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2684} UsbcReleaseRemoveLock(parentFdoExt_96, irpToComplete);
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    call {:si_unique_call 2685} vslice_dummy_var_397 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_96), irpToComplete);
    goto anon37_Else_dummy;

  anon37_Else_dummy:
    assume false;
    return;

  anon37_Then:
    call {:si_unique_call 2686} CancelRemoteWakeNotificationIrp(thisFuncPdoExt_1, irpToComplete);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    assume false;
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    havoc completedWaitWakeIrp;
    assume {:nonnull} parentFdoExt_96 != 0;
    assume parentFdoExt_96 > 0;
    goto L64;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "CompleteAllPdoWaitWakeIrps"} CompleteAllPdoWaitWakeIrps#1(actual_parentFdoExt_96: int, actual_status_73: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentIdleNotificationCallback"} ParentIdleNotificationCallback#0(actual_parentFdoExt_121: int)
{
  var {:scalar} i_27: int;
  var {:pointer} Tmp_1801: int;
  var {:pointer} Tmp_1802: int;
  var {:pointer} Tmp_1803: int;
  var {:pointer} Tmp_1804: int;
  var {:pointer} thisFuncPdoExt_3: int;
  var {:pointer} idleIrp: int;
  var {:pointer} Tmp_1805: int;
  var {:pointer} devExt_16: int;
  var {:scalar} Tmp_1806: int;
  var {:pointer} Tmp_1807: int;
  var {:pointer} Tmp_1808: int;
  var {:scalar} powerState_10: int;
  var {:pointer} Tmp_1809: int;
  var {:scalar} parentDxEvent: int;
  var {:pointer} Tmp_1811: int;
  var {:scalar} oldIrql_22: int;
  var {:pointer} Tmp_1812: int;
  var {:pointer} Tmp_1813: int;
  var {:scalar} status_90: int;
  var {:pointer} idleCallbackInfo: int;
  var {:pointer} Tmp_1814: int;
  var {:pointer} Tmp_1815: int;
  var {:scalar} bIdleOk: int;
  var {:pointer} devObj_17: int;
  var {:pointer} Tmp_1816: int;
  var {:pointer} Tmp_1817: int;
  var {:pointer} Tmp_1818: int;
  var {:pointer} parentFdoExt_121: int;
  var boogieTmp: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_811: int;
  var vslice_dummy_var_812: int;
  var vslice_dummy_var_813: int;
  var vslice_dummy_var_814: int;
  var vslice_dummy_var_815: int;
  var vslice_dummy_var_816: int;
  var vslice_dummy_var_817: int;
  var vslice_dummy_var_818: int;
  var vslice_dummy_var_819: int;
  var vslice_dummy_var_820: int;
  var vslice_dummy_var_821: int;
  var vslice_dummy_var_822: int;
  var vslice_dummy_var_823: int;
  var vslice_dummy_var_824: int;
  var vslice_dummy_var_825: int;
  var vslice_dummy_var_826: int;
  var vslice_dummy_var_827: int;
  var vslice_dummy_var_828: int;
  var vslice_dummy_var_829: int;

  anon0:
    call {:si_unique_call 2688} powerState_10 := __HAVOC_malloc(8);
    call {:si_unique_call 2689} vslice_dummy_var_398 := __HAVOC_malloc(4);
    call {:si_unique_call 2690} parentDxEvent := __HAVOC_malloc(156);
    parentFdoExt_121 := actual_parentFdoExt_121;
    call {:si_unique_call 2691} Tmp_1801 := __HAVOC_malloc(4);
    call {:si_unique_call 2692} Tmp_1809 := __HAVOC_malloc(188);
    bIdleOk := 1;
    status_90 := 0;
    havoc Tmp_1816;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_811;
    havoc vslice_dummy_var_812;
    call {:si_unique_call 2693} WPP_RECORDER_SF_q(vslice_dummy_var_811, 4, 7, 37, Tmp_1816, vslice_dummy_var_812);
    call {:si_unique_call 2694} Tmp_1805 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    Mem_T.VOID[Tmp_1805] := oldIrql_22;
    call {:si_unique_call 2695} sdv_KeAcquireSpinLock(0, Tmp_1805);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    oldIrql_22 := Mem_T.VOID[Tmp_1805];
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc Tmp_1817;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_813;
    havoc vslice_dummy_var_814;
    call {:si_unique_call 2696} WPP_RECORDER_SF_L(vslice_dummy_var_813, 4, 7, 38, Tmp_1817, vslice_dummy_var_814);
    call {:si_unique_call 2697} sdv_KeReleaseSpinLock(0, oldIrql_22);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon67_Then:
    goto L25;

  L25:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    havoc Tmp_1814;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_815;
    call {:si_unique_call 2698} WPP_RECORDER_SF_(vslice_dummy_var_815, 4, 7, 39, Tmp_1814);
    call {:si_unique_call 2699} sdv_KeReleaseSpinLock(0, oldIrql_22);
    goto L1;

  anon66_Then:
    call {:si_unique_call 2700} ChangeIdleState(parentFdoExt_121, 4, 0);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    i_27 := 0;
    goto L58;

  L58:
    call {:si_unique_call 2701} i_27, Tmp_1801, thisFuncPdoExt_3, idleIrp, Tmp_1805, devExt_16, Tmp_1806, Tmp_1807, Tmp_1811, oldIrql_22, idleCallbackInfo, Tmp_1815, devObj_17, Tmp_1818, vslice_dummy_var_399 := ParentIdleNotificationCallback#0_loop_L58(i_27, Tmp_1801, thisFuncPdoExt_3, idleIrp, Tmp_1805, devExt_16, Tmp_1806, Tmp_1807, Tmp_1811, oldIrql_22, idleCallbackInfo, Tmp_1815, devObj_17, Tmp_1818, parentFdoExt_121, vslice_dummy_var_399);
    goto L58_last;

  L58_last:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc Tmp_1811;
    assume {:nonnull} Tmp_1811 != 0;
    assume Tmp_1811 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    Tmp_1806 := i_27;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc Tmp_1818;
    assume {:nonnull} Tmp_1818 != 0;
    assume Tmp_1818 > 0;
    havoc Tmp_1801;
    assume {:nonnull} Tmp_1801 != 0;
    assume Tmp_1801 > 0;
    havoc devObj_17;
    assume {:nonnull} devObj_17 != 0;
    assume devObj_17 > 0;
    havoc devExt_16;
    assume {:nonnull} devExt_16 != 0;
    assume devExt_16 > 0;
    thisFuncPdoExt_3 := functionPdoExt_DEVICE_EXTENSION(devExt_16);
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto L68;

  L68:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    havoc idleIrp;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} idleIrp != 0;
    call {:si_unique_call 2702} idleCallbackInfo := GET_IDLE_CALLBACK_INFO_FROM_IRP(idleIrp);
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    call {:si_unique_call 2703} KeClearEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(thisFuncPdoExt_3));
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2704} sdv_KeReleaseSpinLock(0, oldIrql_22);
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    havoc Tmp_1807;
    havoc Tmp_1815;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_816;
    call {:si_unique_call 2705} WPP_RECORDER_SF_qq(vslice_dummy_var_816, 4, 8, 41, Tmp_1815, idleCallbackInfo, Tmp_1807);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    havoc vslice_dummy_var_817;
    call {:si_unique_call 2706} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_817);
    goto L86;

  L86:
    call {:si_unique_call 2707} Tmp_1805 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    Mem_T.VOID[Tmp_1805] := oldIrql_22;
    call {:si_unique_call 2708} sdv_KeAcquireSpinLock(0, Tmp_1805);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    oldIrql_22 := Mem_T.VOID[Tmp_1805];
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    havoc idleIrp;
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} idleIrp != 0;
    assume {:nonnull} idleIrp != 0;
    assume idleIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    havoc Tmp_1802;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_818;
    call {:si_unique_call 2709} WPP_RECORDER_SF_q(vslice_dummy_var_818, 4, 7, 42, Tmp_1802, thisFuncPdoExt_3);
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    call {:si_unique_call 2710} vslice_dummy_var_400 := KeSetEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(thisFuncPdoExt_3), 0, 0);
    bIdleOk := 0;
    goto L59;

  L59:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} bIdleOk != 0;
    call {:si_unique_call 2711} ChangeIdleState(parentFdoExt_121, 5, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto L144;

  L144:
    call {:si_unique_call 2712} sdv_KeReleaseSpinLock(0, oldIrql_22);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} bIdleOk != 0;
    call {:si_unique_call 2713} KeInitializeEvent(parentDxEvent, 0, 0);
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    call {:si_unique_call 2714} boogieTmp := DeriveParentIdlePowerStateFromChildrenIdleState(parentFdoExt_121);
    goto L166;

  L166:
    havoc Tmp_1812;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    havoc vslice_dummy_var_819;
    havoc vslice_dummy_var_820;
    call {:si_unique_call 2715} WPP_RECORDER_SF_L(vslice_dummy_var_819, 4, 7, 45, Tmp_1812, vslice_dummy_var_820);
    call {:si_unique_call 2716} status_90 := FdoSendSetPowerRequest#0(powerState_10, li2bplFunctionConstant813, parentDxEvent, parentFdoExt_121);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} status_90 != 259;
    havoc Tmp_1804;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    havoc vslice_dummy_var_821;
    havoc vslice_dummy_var_822;
    havoc vslice_dummy_var_823;
    call {:si_unique_call 2717} WPP_RECORDER_SF_qL(vslice_dummy_var_821, 2, 8, 46, Tmp_1804, vslice_dummy_var_822, vslice_dummy_var_823);
    call {:si_unique_call 2718} ChangeIdleState(parentFdoExt_121, 1, 1);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2719} CompleteAllFunctionIdleIrps(parentFdoExt_121, -1073741536);
    call {:si_unique_call 2720} CancelFdoIdleIrp(parentFdoExt_121, 0);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume {:partition} status_90 == 259;
    Tmp_1809 := strConst__li2bpl39;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_824;
    call {:si_unique_call 2721} WaitForSignal(parentDxEvent, Tmp_1809, vslice_dummy_var_824);
    call {:si_unique_call 2722} ChangeIdleState(parentFdoExt_121, 1, 1);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    goto L166;

  anon79_Then:
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    goto L166;

  anon76_Then:
    assume {:partition} bIdleOk == 0;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    havoc Tmp_1813;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_825;
    call {:si_unique_call 2723} WPP_RECORDER_SF_(vslice_dummy_var_825, 4, 7, 47, Tmp_1813);
    call {:si_unique_call 2724} CompleteAllFunctionIdleIrps(parentFdoExt_121, -1073741536);
    goto L204;

  L204:
    call {:si_unique_call 2725} CancelFdoIdleIrp(parentFdoExt_121, 0);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    goto L204;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    assume {:partition} bIdleOk == 0;
    goto L144;

  anon72_Then:
    goto L91;

  L91:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    call {:si_unique_call 2726} vslice_dummy_var_399 := KeSetEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(thisFuncPdoExt_3), 0, 0);
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    havoc Tmp_1803;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_826;
    call {:si_unique_call 2727} WPP_RECORDER_SF_(vslice_dummy_var_826, 4, 7, 43, Tmp_1803);
    bIdleOk := 0;
    goto L59;

  anon73_Then:
    goto L70;

  L70:
    i_27 := i_27 + 1;
    goto L70_dummy;

  L70_dummy:
    assume false;
    return;

  anon71_Then:
    assume {:partition} idleIrp == 0;
    goto L91;

  anon89_Then:
    goto L91;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon81_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    havoc vslice_dummy_var_827;
    call {:si_unique_call 2728} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_827);
    goto L86;

  anon74_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    assume false;
    return;

  anon70_Then:
    goto L86;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    assume {:partition} idleIrp == 0;
    goto L70;

  anon85_Then:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    bIdleOk := 0;
    havoc Tmp_1808;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    havoc vslice_dummy_var_828;
    havoc vslice_dummy_var_829;
    call {:si_unique_call 2729} WPP_RECORDER_SF_q(vslice_dummy_var_828, 4, 7, 40, Tmp_1808, vslice_dummy_var_829);
    goto L59;

  anon75_Then:
    goto L68;

  anon69_Then:
    goto L68;

  anon84_Then:
    goto L59;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    goto L25;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentIdleNotificationCallback"} ParentIdleNotificationCallback#0(actual_parentFdoExt_121: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentIdleNotificationCallback"} ParentIdleNotificationCallback#1(actual_parentFdoExt_121: int)
{
  var {:scalar} i_27: int;
  var {:pointer} Tmp_1801: int;
  var {:pointer} Tmp_1802: int;
  var {:pointer} Tmp_1803: int;
  var {:pointer} Tmp_1804: int;
  var {:pointer} thisFuncPdoExt_3: int;
  var {:pointer} idleIrp: int;
  var {:pointer} Tmp_1805: int;
  var {:pointer} devExt_16: int;
  var {:scalar} Tmp_1806: int;
  var {:pointer} Tmp_1807: int;
  var {:pointer} Tmp_1808: int;
  var {:scalar} powerState_10: int;
  var {:pointer} Tmp_1809: int;
  var {:scalar} parentDxEvent: int;
  var {:pointer} Tmp_1811: int;
  var {:scalar} oldIrql_22: int;
  var {:pointer} Tmp_1812: int;
  var {:pointer} Tmp_1813: int;
  var {:scalar} status_90: int;
  var {:pointer} idleCallbackInfo: int;
  var {:pointer} Tmp_1814: int;
  var {:pointer} Tmp_1815: int;
  var {:scalar} bIdleOk: int;
  var {:pointer} devObj_17: int;
  var {:pointer} Tmp_1816: int;
  var {:pointer} Tmp_1817: int;
  var {:pointer} Tmp_1818: int;
  var {:pointer} parentFdoExt_121: int;
  var boogieTmp: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_830: int;
  var vslice_dummy_var_831: int;
  var vslice_dummy_var_832: int;
  var vslice_dummy_var_833: int;
  var vslice_dummy_var_834: int;
  var vslice_dummy_var_835: int;
  var vslice_dummy_var_836: int;
  var vslice_dummy_var_837: int;
  var vslice_dummy_var_838: int;
  var vslice_dummy_var_839: int;
  var vslice_dummy_var_840: int;
  var vslice_dummy_var_841: int;
  var vslice_dummy_var_842: int;
  var vslice_dummy_var_843: int;
  var vslice_dummy_var_844: int;
  var vslice_dummy_var_845: int;
  var vslice_dummy_var_846: int;
  var vslice_dummy_var_847: int;
  var vslice_dummy_var_848: int;
  var vslice_dummy_var_849: int;

  anon0:
    call {:si_unique_call 2730} powerState_10 := __HAVOC_malloc(8);
    call {:si_unique_call 2731} vslice_dummy_var_401 := __HAVOC_malloc(4);
    call {:si_unique_call 2732} parentDxEvent := __HAVOC_malloc(156);
    parentFdoExt_121 := actual_parentFdoExt_121;
    call {:si_unique_call 2733} Tmp_1801 := __HAVOC_malloc(4);
    call {:si_unique_call 2734} Tmp_1809 := __HAVOC_malloc(188);
    bIdleOk := 1;
    status_90 := 0;
    havoc Tmp_1816;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_830;
    havoc vslice_dummy_var_831;
    call {:si_unique_call 2735} WPP_RECORDER_SF_q(vslice_dummy_var_830, 4, 7, 37, Tmp_1816, vslice_dummy_var_831);
    call {:si_unique_call 2736} Tmp_1805 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    Mem_T.VOID[Tmp_1805] := oldIrql_22;
    call {:si_unique_call 2737} sdv_KeAcquireSpinLock(0, Tmp_1805);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    oldIrql_22 := Mem_T.VOID[Tmp_1805];
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc Tmp_1817;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_832;
    havoc vslice_dummy_var_833;
    call {:si_unique_call 2738} WPP_RECORDER_SF_L(vslice_dummy_var_832, 4, 7, 38, Tmp_1817, vslice_dummy_var_833);
    call {:si_unique_call 2739} sdv_KeReleaseSpinLock(0, oldIrql_22);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon67_Then:
    goto L25;

  L25:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    havoc Tmp_1814;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_834;
    call {:si_unique_call 2740} WPP_RECORDER_SF_(vslice_dummy_var_834, 4, 7, 39, Tmp_1814);
    call {:si_unique_call 2741} sdv_KeReleaseSpinLock(0, oldIrql_22);
    goto L1;

  anon66_Then:
    call {:si_unique_call 2742} ChangeIdleState(parentFdoExt_121, 4, 0);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    i_27 := 0;
    goto L58;

  L58:
    call {:si_unique_call 2743} i_27, Tmp_1801, thisFuncPdoExt_3, idleIrp, Tmp_1805, devExt_16, Tmp_1806, Tmp_1807, Tmp_1811, oldIrql_22, idleCallbackInfo, Tmp_1815, devObj_17, Tmp_1818, vslice_dummy_var_402 := ParentIdleNotificationCallback#1_loop_L58(i_27, Tmp_1801, thisFuncPdoExt_3, idleIrp, Tmp_1805, devExt_16, Tmp_1806, Tmp_1807, Tmp_1811, oldIrql_22, idleCallbackInfo, Tmp_1815, devObj_17, Tmp_1818, parentFdoExt_121, vslice_dummy_var_402);
    goto L58_last;

  L58_last:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc Tmp_1811;
    assume {:nonnull} Tmp_1811 != 0;
    assume Tmp_1811 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    Tmp_1806 := i_27;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc Tmp_1818;
    assume {:nonnull} Tmp_1818 != 0;
    assume Tmp_1818 > 0;
    havoc Tmp_1801;
    assume {:nonnull} Tmp_1801 != 0;
    assume Tmp_1801 > 0;
    havoc devObj_17;
    assume {:nonnull} devObj_17 != 0;
    assume devObj_17 > 0;
    havoc devExt_16;
    assume {:nonnull} devExt_16 != 0;
    assume devExt_16 > 0;
    thisFuncPdoExt_3 := functionPdoExt_DEVICE_EXTENSION(devExt_16);
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto L68;

  L68:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    havoc idleIrp;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} idleIrp != 0;
    call {:si_unique_call 2744} idleCallbackInfo := GET_IDLE_CALLBACK_INFO_FROM_IRP(idleIrp);
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    call {:si_unique_call 2745} KeClearEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(thisFuncPdoExt_3));
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2746} sdv_KeReleaseSpinLock(0, oldIrql_22);
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    havoc Tmp_1807;
    havoc Tmp_1815;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_835;
    call {:si_unique_call 2747} WPP_RECORDER_SF_qq(vslice_dummy_var_835, 4, 8, 41, Tmp_1815, idleCallbackInfo, Tmp_1807);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    havoc vslice_dummy_var_836;
    call {:si_unique_call 2748} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_836);
    goto L86;

  L86:
    call {:si_unique_call 2749} Tmp_1805 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    Mem_T.VOID[Tmp_1805] := oldIrql_22;
    call {:si_unique_call 2750} sdv_KeAcquireSpinLock(0, Tmp_1805);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    oldIrql_22 := Mem_T.VOID[Tmp_1805];
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    havoc idleIrp;
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} idleIrp != 0;
    assume {:nonnull} idleIrp != 0;
    assume idleIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    havoc Tmp_1802;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_837;
    call {:si_unique_call 2751} WPP_RECORDER_SF_q(vslice_dummy_var_837, 4, 7, 42, Tmp_1802, thisFuncPdoExt_3);
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    call {:si_unique_call 2752} vslice_dummy_var_403 := KeSetEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(thisFuncPdoExt_3), 0, 0);
    bIdleOk := 0;
    goto L59;

  L59:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} bIdleOk != 0;
    call {:si_unique_call 2753} ChangeIdleState(parentFdoExt_121, 5, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto L144;

  L144:
    call {:si_unique_call 2754} sdv_KeReleaseSpinLock(0, oldIrql_22);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} bIdleOk != 0;
    call {:si_unique_call 2755} KeInitializeEvent(parentDxEvent, 0, 0);
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    call {:si_unique_call 2756} boogieTmp := DeriveParentIdlePowerStateFromChildrenIdleState(parentFdoExt_121);
    goto L166;

  L166:
    havoc Tmp_1812;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    havoc vslice_dummy_var_838;
    havoc vslice_dummy_var_839;
    call {:si_unique_call 2757} WPP_RECORDER_SF_L(vslice_dummy_var_838, 4, 7, 45, Tmp_1812, vslice_dummy_var_839);
    call {:si_unique_call 2758} status_90 := FdoSendSetPowerRequest#1(powerState_10, li2bplFunctionConstant813, parentDxEvent, parentFdoExt_121);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} status_90 != 259;
    havoc Tmp_1804;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    havoc vslice_dummy_var_840;
    havoc vslice_dummy_var_841;
    havoc vslice_dummy_var_842;
    call {:si_unique_call 2759} WPP_RECORDER_SF_qL(vslice_dummy_var_840, 2, 8, 46, Tmp_1804, vslice_dummy_var_841, vslice_dummy_var_842);
    call {:si_unique_call 2760} ChangeIdleState(parentFdoExt_121, 1, 1);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2761} CompleteAllFunctionIdleIrps(parentFdoExt_121, -1073741536);
    call {:si_unique_call 2762} CancelFdoIdleIrp(parentFdoExt_121, 0);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume {:partition} status_90 == 259;
    Tmp_1809 := strConst__li2bpl39;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_843;
    call {:si_unique_call 2763} WaitForSignal(parentDxEvent, Tmp_1809, vslice_dummy_var_843);
    call {:si_unique_call 2764} ChangeIdleState(parentFdoExt_121, 1, 1);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    goto L166;

  anon79_Then:
    assume {:nonnull} powerState_10 != 0;
    assume powerState_10 > 0;
    goto L166;

  anon76_Then:
    assume {:partition} bIdleOk == 0;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    havoc Tmp_1813;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_844;
    call {:si_unique_call 2765} WPP_RECORDER_SF_(vslice_dummy_var_844, 4, 7, 47, Tmp_1813);
    call {:si_unique_call 2766} CompleteAllFunctionIdleIrps(parentFdoExt_121, -1073741536);
    goto L204;

  L204:
    call {:si_unique_call 2767} CancelFdoIdleIrp(parentFdoExt_121, 0);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    goto L204;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    assume {:partition} bIdleOk == 0;
    goto L144;

  anon72_Then:
    goto L91;

  L91:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    call {:si_unique_call 2768} vslice_dummy_var_402 := KeSetEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(thisFuncPdoExt_3), 0, 0);
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    havoc Tmp_1803;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    havoc vslice_dummy_var_845;
    call {:si_unique_call 2769} WPP_RECORDER_SF_(vslice_dummy_var_845, 4, 7, 43, Tmp_1803);
    bIdleOk := 0;
    goto L59;

  anon73_Then:
    goto L70;

  L70:
    i_27 := i_27 + 1;
    goto L70_dummy;

  L70_dummy:
    assume false;
    return;

  anon71_Then:
    assume {:partition} idleIrp == 0;
    goto L91;

  anon89_Then:
    goto L91;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon81_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    havoc vslice_dummy_var_846;
    call {:si_unique_call 2770} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_846);
    goto L86;

  anon74_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    assume {:nonnull} idleCallbackInfo != 0;
    assume idleCallbackInfo > 0;
    havoc vslice_dummy_var_847;
    call {:si_unique_call 2771} ParentIdleNotificationCallback#0(vslice_dummy_var_847);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto L86;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    goto L86;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    assume {:partition} idleIrp == 0;
    goto L70;

  anon85_Then:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    bIdleOk := 0;
    havoc Tmp_1808;
    assume {:nonnull} parentFdoExt_121 != 0;
    assume parentFdoExt_121 > 0;
    assume {:nonnull} thisFuncPdoExt_3 != 0;
    assume thisFuncPdoExt_3 > 0;
    havoc vslice_dummy_var_848;
    havoc vslice_dummy_var_849;
    call {:si_unique_call 2772} WPP_RECORDER_SF_q(vslice_dummy_var_848, 4, 7, 40, Tmp_1808, vslice_dummy_var_849);
    goto L59;

  anon75_Then:
    goto L68;

  anon69_Then:
    goto L68;

  anon84_Then:
    goto L59;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    goto L25;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentIdleNotificationCallback"} ParentIdleNotificationCallback#1(actual_parentFdoExt_121: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FdoSendSetPowerRequest"} FdoSendSetPowerRequest#0(actual_SD5: int, actual_callbackRoutine: int, actual_context_8: int, actual_parentFdoExt_89: int) returns (Tmp_1312: int)
{
  var {:scalar} powerState_5: int;
  var {:pointer} Tmp_1313: int;
  var {:scalar} oldIrql_12: int;
  var {:pointer} Tmp_1314: int;
  var {:scalar} defaultCallback: int;
  var {:scalar} tmpStatus_1: int;
  var {:pointer} Tmp_1315: int;
  var {:pointer} Tmp_1316: int;
  var {:scalar} status_69: int;
  var {:pointer} SD5: int;
  var {:scalar} callbackRoutine: int;
  var {:pointer} context_8: int;
  var {:pointer} parentFdoExt_89: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_850: int;
  var vslice_dummy_var_851: int;

  anon0:
    call {:si_unique_call 2773} powerState_5 := __HAVOC_malloc(8);
    SD5 := actual_SD5;
    callbackRoutine := actual_callbackRoutine;
    context_8 := actual_context_8;
    parentFdoExt_89 := actual_parentFdoExt_89;
    assume {:nonnull} SD5 != 0;
    assume SD5 > 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    assume {:nonnull} SD5 != 0;
    assume SD5 > 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    status_69 := 0;
    defaultCallback := 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    call {:si_unique_call 2774} Tmp_1315 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1315 != 0;
    assume Tmp_1315 > 0;
    Mem_T.VOID[Tmp_1315] := oldIrql_12;
    call {:si_unique_call 2775} sdv_KeAcquireSpinLock(0, Tmp_1315);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1315 != 0;
    assume Tmp_1315 > 0;
    oldIrql_12 := Mem_T.VOID[Tmp_1315];
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 2776} sdv_KeReleaseSpinLock(0, oldIrql_12);
    havoc Tmp_1316;
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc vslice_dummy_var_850;
    call {:si_unique_call 2777} WPP_RECORDER_SF_(vslice_dummy_var_850, 4, 3, 70, Tmp_1316);
    Tmp_1312 := 17;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc Tmp_1314;
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc vslice_dummy_var_851;
    call {:si_unique_call 2778} WPP_RECORDER_SF_(vslice_dummy_var_851, 4, 3, 71, Tmp_1314);
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    call {:si_unique_call 2779} vslice_dummy_var_404 := KeResetEvent(parentD0Event_PARENT_FDO_EXTENSION(parentFdoExt_89));
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    call {:si_unique_call 2780} sdv_KeReleaseSpinLock(0, oldIrql_12);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} callbackRoutine == 0;
    call {:si_unique_call 2781} vslice_dummy_var_405 := UsbcAcquireRemoveLock(parentFdoExt_89, -545820848, gSetD0Tag);
    callbackRoutine := li2bplFunctionConstant2831;
    defaultCallback := 1;
    goto L10;

  L10:
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    assume false;
    return;

  anon26_Then:
    assume {:partition} callbackRoutine != 0;
    goto L10;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    goto L10;
}



procedure {:origName "FdoSendSetPowerRequest"} FdoSendSetPowerRequest#0(actual_SD5: int, actual_callbackRoutine: int, actual_context_8: int, actual_parentFdoExt_89: int) returns (Tmp_1312: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FdoSendSetPowerRequest"} FdoSendSetPowerRequest#1(actual_SD5: int, actual_callbackRoutine: int, actual_context_8: int, actual_parentFdoExt_89: int) returns (Tmp_1312: int)
{
  var {:scalar} powerState_5: int;
  var {:pointer} Tmp_1313: int;
  var {:scalar} oldIrql_12: int;
  var {:pointer} Tmp_1314: int;
  var {:scalar} defaultCallback: int;
  var {:scalar} tmpStatus_1: int;
  var {:pointer} Tmp_1315: int;
  var {:pointer} Tmp_1316: int;
  var {:scalar} status_69: int;
  var {:pointer} SD5: int;
  var {:scalar} callbackRoutine: int;
  var {:pointer} context_8: int;
  var {:pointer} parentFdoExt_89: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;
  var vslice_dummy_var_852: int;
  var vslice_dummy_var_853: int;
  var vslice_dummy_var_854: int;
  var vslice_dummy_var_855: int;

  anon0:
    call {:si_unique_call 2782} powerState_5 := __HAVOC_malloc(8);
    SD5 := actual_SD5;
    callbackRoutine := actual_callbackRoutine;
    context_8 := actual_context_8;
    parentFdoExt_89 := actual_parentFdoExt_89;
    assume {:nonnull} SD5 != 0;
    assume SD5 > 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    assume {:nonnull} SD5 != 0;
    assume SD5 > 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    status_69 := 0;
    defaultCallback := 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    call {:si_unique_call 2783} Tmp_1315 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1315 != 0;
    assume Tmp_1315 > 0;
    Mem_T.VOID[Tmp_1315] := oldIrql_12;
    call {:si_unique_call 2784} sdv_KeAcquireSpinLock(0, Tmp_1315);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1315 != 0;
    assume Tmp_1315 > 0;
    oldIrql_12 := Mem_T.VOID[Tmp_1315];
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 2785} sdv_KeReleaseSpinLock(0, oldIrql_12);
    havoc Tmp_1316;
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc vslice_dummy_var_852;
    call {:si_unique_call 2786} WPP_RECORDER_SF_(vslice_dummy_var_852, 4, 3, 70, Tmp_1316);
    Tmp_1312 := 17;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc Tmp_1314;
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc vslice_dummy_var_853;
    call {:si_unique_call 2787} WPP_RECORDER_SF_(vslice_dummy_var_853, 4, 3, 71, Tmp_1314);
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    call {:si_unique_call 2788} vslice_dummy_var_407 := KeResetEvent(parentD0Event_PARENT_FDO_EXTENSION(parentFdoExt_89));
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    call {:si_unique_call 2789} sdv_KeReleaseSpinLock(0, oldIrql_12);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} callbackRoutine == 0;
    call {:si_unique_call 2790} vslice_dummy_var_408 := UsbcAcquireRemoveLock(parentFdoExt_89, -545820848, gSetD0Tag);
    callbackRoutine := li2bplFunctionConstant2831;
    defaultCallback := 1;
    goto L10;

  L10:
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc vslice_dummy_var_854;
    call {:si_unique_call 2791} status_69 := PoRequestPowerIrp#0(vslice_dummy_var_854, 2, powerState_5, callbackRoutine, context_8, 0);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_69 != 259;
    havoc Tmp_1313;
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    havoc vslice_dummy_var_855;
    call {:si_unique_call 2792} WPP_RECORDER_SF_d(vslice_dummy_var_855, 2, 8, 72, Tmp_1313, status_69);
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 2793} tmpStatus_1 := AllocateWorkerIfNeeded#0(parentFdoExt_89, li2bplFunctionConstant1619, 0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} tmpStatus_1 < 0;
    call {:si_unique_call 2794} UnblockWorkBlockedOnPendingParentD0#1(parentFdoExt_89, 0);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L66;

  L66:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} defaultCallback != 0;
    call {:si_unique_call 2795} UsbcReleaseRemoveLock(parentFdoExt_89, gSetD0Tag);
    assume {:nonnull} parentFdoExt_89 != 0;
    assume parentFdoExt_89 > 0;
    call {:si_unique_call 2796} vslice_dummy_var_409 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_89), gSetD0Tag);
    goto L55;

  L55:
    Tmp_1312 := status_69;
    goto L1;

  anon29_Then:
    assume {:partition} defaultCallback == 0;
    goto L55;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} 0 <= tmpStatus_1;
    goto L66;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    goto L66;

  anon27_Then:
    assume {:partition} status_69 == 259;
    goto L55;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} callbackRoutine != 0;
    goto L10;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    goto L10;
}



procedure {:origName "FdoSendSetPowerRequest"} FdoSendSetPowerRequest#1(actual_SD5: int, actual_callbackRoutine: int, actual_context_8: int, actual_parentFdoExt_89: int) returns (Tmp_1312: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UnblockWorkBlockedOnPendingParentD0"} UnblockWorkBlockedOnPendingParentD0#0(actual_parentFdoExt_14: int, actual_unusedContext: int)
{
  var {:scalar} idleFinishCompletion: int;
  var {:scalar} enableTimer: int;
  var {:scalar} waitWakeFinishCompletion: int;
  var {:scalar} onPassive: int;
  var {:scalar} sdv_76: int;
  var {:pointer} idleFinishCompletionWorkerContext: int;
  var {:pointer} Tmp_144: int;
  var {:scalar} oldIrql_2: int;
  var {:scalar} sdv_78: int;
  var {:pointer} parentFdoExt_14: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;

  anon0:
    call {:si_unique_call 2797} vslice_dummy_var_410 := __HAVOC_malloc(4);
    parentFdoExt_14 := actual_parentFdoExt_14;
    enableTimer := 0;
    waitWakeFinishCompletion := 0;
    idleFinishCompletion := 0;
    call {:si_unique_call 2798} sdv_76 := sdv_KeGetCurrentIrql();
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_76 != 0;
    onPassive := 0;
    goto L75;

  L75:
    idleFinishCompletionWorkerContext := 0;
    call {:si_unique_call 2799} UnblockAllPendedPdoD0Irps#0(parentFdoExt_14);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2800} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Mem_T.VOID[Tmp_144] := oldIrql_2;
    call {:si_unique_call 2801} sdv_KeAcquireSpinLock(0, Tmp_144);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    oldIrql_2 := Mem_T.VOID[Tmp_144];
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    call {:si_unique_call 2802} vslice_dummy_var_411 := KeSetEvent(parentD0Event_PARENT_FDO_EXTENSION(parentFdoExt_14), 0, 0);
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} onPassive != 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    enableTimer := 1;
    goto L28;

  L28:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    waitWakeFinishCompletion := 1;
    goto L34;

  L34:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    call {:si_unique_call 2803} sdv_78 := KeReadStateEvent(0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_78 != 0;
    idleFinishCompletion := 1;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    havoc idleFinishCompletionWorkerContext;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto L37;

  L37:
    call {:si_unique_call 2804} sdv_KeReleaseSpinLock(0, oldIrql_2);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} enableTimer != 0;
    call {:si_unique_call 2805} EnableIdleTimer(parentFdoExt_14, 1, -682667445);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L50;

  L50:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} waitWakeFinishCompletion != 0;
    call {:si_unique_call 2806} CompleteAllPdoWaitWakeIrps#0(parentFdoExt_14, 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L54;

  L54:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} idleFinishCompletion != 0;
    call {:si_unique_call 2807} IdleFinishCompletionWorker(parentFdoExt_14, idleFinishCompletionWorkerContext);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} idleFinishCompletion == 0;
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:partition} waitWakeFinishCompletion == 0;
    goto L54;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} enableTimer == 0;
    goto L50;

  anon36_Then:
    assume {:partition} sdv_78 == 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto L37;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    goto L37;

  anon33_Then:
    goto L34;

  anon34_Then:
    assume {:partition} onPassive == 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto L28;

  anon32_Then:
    goto L28;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} sdv_76 == 0;
    onPassive := 1;
    goto L75;
}



procedure {:origName "UnblockWorkBlockedOnPendingParentD0"} UnblockWorkBlockedOnPendingParentD0#0(actual_parentFdoExt_14: int, actual_unusedContext: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UnblockWorkBlockedOnPendingParentD0"} UnblockWorkBlockedOnPendingParentD0#1(actual_parentFdoExt_14: int, actual_unusedContext: int)
{
  var {:scalar} idleFinishCompletion: int;
  var {:scalar} enableTimer: int;
  var {:scalar} waitWakeFinishCompletion: int;
  var {:scalar} onPassive: int;
  var {:scalar} sdv_76: int;
  var {:pointer} idleFinishCompletionWorkerContext: int;
  var {:pointer} Tmp_144: int;
  var {:scalar} oldIrql_2: int;
  var {:scalar} sdv_78: int;
  var {:pointer} parentFdoExt_14: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_413: int;

  anon0:
    call {:si_unique_call 2808} vslice_dummy_var_412 := __HAVOC_malloc(4);
    parentFdoExt_14 := actual_parentFdoExt_14;
    enableTimer := 0;
    waitWakeFinishCompletion := 0;
    idleFinishCompletion := 0;
    call {:si_unique_call 2809} sdv_76 := sdv_KeGetCurrentIrql();
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_76 != 0;
    onPassive := 0;
    goto L75;

  L75:
    idleFinishCompletionWorkerContext := 0;
    call {:si_unique_call 2810} UnblockAllPendedPdoD0Irps#1(parentFdoExt_14);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2811} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Mem_T.VOID[Tmp_144] := oldIrql_2;
    call {:si_unique_call 2812} sdv_KeAcquireSpinLock(0, Tmp_144);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    oldIrql_2 := Mem_T.VOID[Tmp_144];
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    call {:si_unique_call 2813} vslice_dummy_var_413 := KeSetEvent(parentD0Event_PARENT_FDO_EXTENSION(parentFdoExt_14), 0, 0);
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} onPassive != 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    enableTimer := 1;
    goto L28;

  L28:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    waitWakeFinishCompletion := 1;
    goto L34;

  L34:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    call {:si_unique_call 2814} sdv_78 := KeReadStateEvent(0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_78 != 0;
    idleFinishCompletion := 1;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    havoc idleFinishCompletionWorkerContext;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto L37;

  L37:
    call {:si_unique_call 2815} sdv_KeReleaseSpinLock(0, oldIrql_2);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} enableTimer != 0;
    call {:si_unique_call 2816} EnableIdleTimer(parentFdoExt_14, 1, -682667445);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L50;

  L50:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} waitWakeFinishCompletion != 0;
    call {:si_unique_call 2817} CompleteAllPdoWaitWakeIrps#1(parentFdoExt_14, 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L54;

  L54:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} idleFinishCompletion != 0;
    call {:si_unique_call 2818} IdleFinishCompletionWorker(parentFdoExt_14, idleFinishCompletionWorkerContext);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} idleFinishCompletion == 0;
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:partition} waitWakeFinishCompletion == 0;
    goto L54;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} enableTimer == 0;
    goto L50;

  anon36_Then:
    assume {:partition} sdv_78 == 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto L37;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    goto L37;

  anon33_Then:
    goto L34;

  anon34_Then:
    assume {:partition} onPassive == 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    assume {:nonnull} parentFdoExt_14 != 0;
    assume parentFdoExt_14 > 0;
    goto L28;

  anon32_Then:
    goto L28;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} sdv_76 == 0;
    onPassive := 1;
    goto L75;
}



procedure {:origName "UnblockWorkBlockedOnPendingParentD0"} UnblockWorkBlockedOnPendingParentD0#1(actual_parentFdoExt_14: int, actual_unusedContext: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UnblockAllPendedPdoD0Irps"} UnblockAllPendedPdoD0Irps#0(actual_parentFdoExt_8: int)
{
  var {:scalar} tmpListHead: int;
  var {:pointer} Tmp_63: int;
  var {:pointer} listEntry: int;
  var {:scalar} sdv_45: int;
  var {:pointer} sdv_46: int;
  var {:scalar} oldIrql: int;
  var {:scalar} sdv_47: int;
  var {:pointer} sdv_49: int;
  var {:pointer} functionPdoExt_6: int;
  var {:pointer} parentFdoExt_8: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;

  anon0:
    call {:si_unique_call 2819} tmpListHead := __HAVOC_malloc(8);
    call {:si_unique_call 2820} vslice_dummy_var_414 := __HAVOC_malloc(4);
    parentFdoExt_8 := actual_parentFdoExt_8;
    functionPdoExt_6 := 0;
    call {:si_unique_call 2821} InitializeListHead(tmpListHead);
    call {:si_unique_call 2822} Tmp_63 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_63 != 0;
    assume Tmp_63 > 0;
    Mem_T.VOID[Tmp_63] := oldIrql;
    call {:si_unique_call 2823} sdv_KeAcquireSpinLock(0, Tmp_63);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_63 != 0;
    assume Tmp_63 > 0;
    oldIrql := Mem_T.VOID[Tmp_63];
    assume {:nonnull} parentFdoExt_8 != 0;
    assume parentFdoExt_8 > 0;
    goto L15;

  L15:
    call {:si_unique_call 2824} sdv_45, sdv_46, vslice_dummy_var_415 := UnblockAllPendedPdoD0Irps#0_loop_L15(tmpListHead, sdv_45, sdv_46, parentFdoExt_8, vslice_dummy_var_415);
    goto L15_last;

  L15_last:
    call {:si_unique_call 2834} sdv_45 := sdv_IsListEmpty(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_45 != 0;
    call {:si_unique_call 2825} sdv_KeReleaseSpinLock(0, oldIrql);
    goto L25;

  L25:
    call {:si_unique_call 2826} listEntry, sdv_47, sdv_49, functionPdoExt_6 := UnblockAllPendedPdoD0Irps#0_loop_L25(tmpListHead, listEntry, sdv_47, sdv_49, functionPdoExt_6, parentFdoExt_8);
    goto L25_last;

  L25_last:
    call {:si_unique_call 2833} sdv_47 := sdv_IsListEmpty(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_47 == 0;
    call {:si_unique_call 2827} listEntry := RemoveHeadList(tmpListHead);
    call {:si_unique_call 2828} InitializeListHead(listEntry);
    call {:si_unique_call 2829} sdv_49 := sdv_containing_record(listEntry, 212);
    functionPdoExt_6 := sdv_49;
    call {:si_unique_call 2830} UnblockPendedPdoD0Irp#0(functionPdoExt_6, parentFdoExt_8);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    assume false;
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} sdv_47 != 0;
    goto LM2;

  anon9_Then:
    assume {:partition} sdv_45 == 0;
    assume {:nonnull} parentFdoExt_8 != 0;
    assume parentFdoExt_8 > 0;
    call {:si_unique_call 2831} sdv_46 := RemoveHeadList(pendingD0List_PARENT_FDO_EXTENSION(parentFdoExt_8));
    call {:si_unique_call 2832} vslice_dummy_var_415 := sdv_InsertTailList(tmpListHead, sdv_46);
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "UnblockAllPendedPdoD0Irps"} UnblockAllPendedPdoD0Irps#0(actual_parentFdoExt_8: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UnblockAllPendedPdoD0Irps"} UnblockAllPendedPdoD0Irps#1(actual_parentFdoExt_8: int)
{
  var {:scalar} tmpListHead: int;
  var {:pointer} Tmp_63: int;
  var {:pointer} listEntry: int;
  var {:scalar} sdv_45: int;
  var {:pointer} sdv_46: int;
  var {:scalar} oldIrql: int;
  var {:scalar} sdv_47: int;
  var {:pointer} sdv_49: int;
  var {:pointer} functionPdoExt_6: int;
  var {:pointer} parentFdoExt_8: int;
  var vslice_dummy_var_416: int;
  var vslice_dummy_var_417: int;

  anon0:
    call {:si_unique_call 2835} tmpListHead := __HAVOC_malloc(8);
    call {:si_unique_call 2836} vslice_dummy_var_416 := __HAVOC_malloc(4);
    parentFdoExt_8 := actual_parentFdoExt_8;
    functionPdoExt_6 := 0;
    call {:si_unique_call 2837} InitializeListHead(tmpListHead);
    call {:si_unique_call 2838} Tmp_63 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_63 != 0;
    assume Tmp_63 > 0;
    Mem_T.VOID[Tmp_63] := oldIrql;
    call {:si_unique_call 2839} sdv_KeAcquireSpinLock(0, Tmp_63);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_63 != 0;
    assume Tmp_63 > 0;
    oldIrql := Mem_T.VOID[Tmp_63];
    assume {:nonnull} parentFdoExt_8 != 0;
    assume parentFdoExt_8 > 0;
    goto L15;

  L15:
    call {:si_unique_call 2840} sdv_45, sdv_46, vslice_dummy_var_417 := UnblockAllPendedPdoD0Irps#1_loop_L15(tmpListHead, sdv_45, sdv_46, parentFdoExt_8, vslice_dummy_var_417);
    goto L15_last;

  L15_last:
    call {:si_unique_call 2850} sdv_45 := sdv_IsListEmpty(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_45 != 0;
    call {:si_unique_call 2841} sdv_KeReleaseSpinLock(0, oldIrql);
    goto L25;

  L25:
    call {:si_unique_call 2842} listEntry, sdv_47, sdv_49, functionPdoExt_6 := UnblockAllPendedPdoD0Irps#1_loop_L25(tmpListHead, listEntry, sdv_47, sdv_49, functionPdoExt_6, parentFdoExt_8);
    goto L25_last;

  L25_last:
    call {:si_unique_call 2849} sdv_47 := sdv_IsListEmpty(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_47 == 0;
    call {:si_unique_call 2843} listEntry := RemoveHeadList(tmpListHead);
    call {:si_unique_call 2844} InitializeListHead(listEntry);
    call {:si_unique_call 2845} sdv_49 := sdv_containing_record(listEntry, 212);
    functionPdoExt_6 := sdv_49;
    call {:si_unique_call 2846} UnblockPendedPdoD0Irp#1(functionPdoExt_6, parentFdoExt_8);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    assume false;
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} sdv_47 != 0;
    goto LM2;

  anon9_Then:
    assume {:partition} sdv_45 == 0;
    assume {:nonnull} parentFdoExt_8 != 0;
    assume parentFdoExt_8 > 0;
    call {:si_unique_call 2847} sdv_46 := RemoveHeadList(pendingD0List_PARENT_FDO_EXTENSION(parentFdoExt_8));
    call {:si_unique_call 2848} vslice_dummy_var_417 := sdv_InsertTailList(tmpListHead, sdv_46);
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "UnblockAllPendedPdoD0Irps"} UnblockAllPendedPdoD0Irps#1(actual_parentFdoExt_8: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UnblockPendedPdoD0Irp"} UnblockPendedPdoD0Irp#0(actual_functionPdoExt_9: int, actual_parentFdoExt_36: int)
{
  var {:pointer} pendingD0Irp: int;
  var {:scalar} sdv_150: int;
  var {:scalar} ntStatus_2: int;
  var {:scalar} ParentSetD0Completion_1: int;
  var {:pointer} functionPdoExt_9: int;
  var {:pointer} parentFdoExt_36: int;
  var vslice_dummy_var_418: int;

  anon0:
    call {:si_unique_call 2851} vslice_dummy_var_418 := __HAVOC_malloc(4);
    functionPdoExt_9 := actual_functionPdoExt_9;
    parentFdoExt_36 := actual_parentFdoExt_36;
    ntStatus_2 := 0;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    havoc ParentSetD0Completion_1;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    havoc pendingD0Irp;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    assume {:nonnull} parentFdoExt_36 != 0;
    assume parentFdoExt_36 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    ntStatus_2 := -1073741668;
    goto L12;

  L12:
    call {:si_unique_call 2852} sdv_150 := sdv_KeGetCurrentIrql();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_150 != 0;
    goto L26;

  L26:
    assume {:IndirectCall} true;
    assume ParentSetD0Completion_1 == li2bplFunctionConstant2840;
    call {:si_unique_call 2853} DispatchPdoSetPower_SetParentD0Completion#0(functionPdoExt_9, pendingD0Irp, ntStatus_2);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} sdv_150 == 0;
    call {:si_unique_call 2854} EnableIdleTimer(parentFdoExt_36, 1, -799849424);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    goto L12;
}



procedure {:origName "UnblockPendedPdoD0Irp"} UnblockPendedPdoD0Irp#0(actual_functionPdoExt_9: int, actual_parentFdoExt_36: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UnblockPendedPdoD0Irp"} UnblockPendedPdoD0Irp#1(actual_functionPdoExt_9: int, actual_parentFdoExt_36: int)
{
  var {:pointer} pendingD0Irp: int;
  var {:scalar} sdv_150: int;
  var {:scalar} ntStatus_2: int;
  var {:scalar} ParentSetD0Completion_1: int;
  var {:pointer} functionPdoExt_9: int;
  var {:pointer} parentFdoExt_36: int;
  var vslice_dummy_var_419: int;

  anon0:
    call {:si_unique_call 2855} vslice_dummy_var_419 := __HAVOC_malloc(4);
    functionPdoExt_9 := actual_functionPdoExt_9;
    parentFdoExt_36 := actual_parentFdoExt_36;
    ntStatus_2 := 0;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    havoc ParentSetD0Completion_1;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    havoc pendingD0Irp;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    assume {:nonnull} functionPdoExt_9 != 0;
    assume functionPdoExt_9 > 0;
    assume {:nonnull} parentFdoExt_36 != 0;
    assume parentFdoExt_36 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    ntStatus_2 := -1073741668;
    goto L12;

  L12:
    call {:si_unique_call 2856} sdv_150 := sdv_KeGetCurrentIrql();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_150 != 0;
    goto L26;

  L26:
    assume {:IndirectCall} true;
    assume ParentSetD0Completion_1 == li2bplFunctionConstant2840;
    call {:si_unique_call 2857} DispatchPdoSetPower_SetParentD0Completion#1(functionPdoExt_9, pendingD0Irp, ntStatus_2);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} sdv_150 == 0;
    call {:si_unique_call 2858} EnableIdleTimer(parentFdoExt_36, 1, -799849424);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    goto L12;
}



procedure {:origName "UnblockPendedPdoD0Irp"} UnblockPendedPdoD0Irp#1(actual_functionPdoExt_9: int, actual_parentFdoExt_36: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoSetPower_SetParentD0Completion"} DispatchPdoSetPower_SetParentD0Completion#0(actual_functionPdoExt_54: int, actual_D0Irp_1: int, actual_status_75: int)
{
  var {:pointer} SD5_1: int;
  var {:pointer} irpSp_28: int;
  var {:scalar} sdv_5: int;
  var {:pointer} parentFdoExt_99: int;
  var {:pointer} Tmp_1402: int;
  var {:pointer} functionPdoExt_54: int;
  var {:pointer} D0Irp_1: int;
  var {:scalar} status_75: int;
  var vslice_dummy_var_420: int;
  var vslice_dummy_var_421: int;
  var vslice_dummy_var_856: int;
  var vslice_dummy_var_857: int;
  var vslice_dummy_var_858: int;
  var vslice_dummy_var_859: int;

  anon0:
    call {:si_unique_call 2859} sdv_5 := __HAVOC_malloc(8);
    call {:si_unique_call 2860} vslice_dummy_var_420 := __HAVOC_malloc(4);
    functionPdoExt_54 := actual_functionPdoExt_54;
    D0Irp_1 := actual_D0Irp_1;
    status_75 := actual_status_75;
    irpSp_28 := 0;
    assume {:nonnull} functionPdoExt_54 != 0;
    assume functionPdoExt_54 > 0;
    havoc parentFdoExt_99;
    call {:si_unique_call 2861} irpSp_28 := sdv_IoGetCurrentIrpStackLocation(D0Irp_1);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_75 < 0;
    havoc Tmp_1402;
    assume {:nonnull} functionPdoExt_54 != 0;
    assume functionPdoExt_54 > 0;
    assume {:nonnull} parentFdoExt_99 != 0;
    assume parentFdoExt_99 > 0;
    havoc vslice_dummy_var_856;
    havoc vslice_dummy_var_857;
    call {:si_unique_call 2862} WPP_RECORDER_SF_qq(vslice_dummy_var_856, 4, 3, 62, Tmp_1402, vslice_dummy_var_857, D0Irp_1);
    goto L15;

  L15:
    assume {:nonnull} functionPdoExt_54 != 0;
    assume functionPdoExt_54 > 0;
    assume {:nonnull} irpSp_28 != 0;
    assume irpSp_28 > 0;
    havoc vslice_dummy_var_858;
    havoc vslice_dummy_var_859;
    call {:si_unique_call 2863} SD5_1 := PoSetPowerState(0, vslice_dummy_var_858, vslice_dummy_var_859);
    assume {:nonnull} SD5_1 != 0;
    assume SD5_1 > 0;
    assume {:nonnull} sdv_5 != 0;
    assume sdv_5 > 0;
    assume {:nonnull} SD5_1 != 0;
    assume SD5_1 > 0;
    assume {:nonnull} sdv_5 != 0;
    assume sdv_5 > 0;
    call {:si_unique_call 2864} CompleteFunctionIdleIrp(functionPdoExt_54, 0);
    assume {:nonnull} parentFdoExt_99 != 0;
    assume parentFdoExt_99 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 2865} SendSetFeatureControlRequestForFunctionSuspend#0(parentFdoExt_99, functionPdoExt_54, D0Irp_1, 2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    status_75 := 0;
    call {:si_unique_call 2866} PoStartNextPowerIrp(0);
    assume {:nonnull} D0Irp_1 != 0;
    assume D0Irp_1 > 0;
    call {:si_unique_call 2867} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2868} UsbcReleaseRemoveLock(parentFdoExt_99, D0Irp_1);
    assume {:nonnull} parentFdoExt_99 != 0;
    assume parentFdoExt_99 > 0;
    call {:si_unique_call 2869} vslice_dummy_var_421 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_99), D0Irp_1);
    goto L1;

  anon7_Then:
    assume {:partition} 0 <= status_75;
    goto L15;
}



procedure {:origName "DispatchPdoSetPower_SetParentD0Completion"} DispatchPdoSetPower_SetParentD0Completion#0(actual_functionPdoExt_54: int, actual_D0Irp_1: int, actual_status_75: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DispatchPdoSetPower_SetParentD0Completion"} DispatchPdoSetPower_SetParentD0Completion#1(actual_functionPdoExt_54: int, actual_D0Irp_1: int, actual_status_75: int)
{
  var {:pointer} SD5_1: int;
  var {:pointer} irpSp_28: int;
  var {:scalar} sdv_5: int;
  var {:pointer} parentFdoExt_99: int;
  var {:pointer} Tmp_1402: int;
  var {:pointer} functionPdoExt_54: int;
  var {:pointer} D0Irp_1: int;
  var {:scalar} status_75: int;
  var vslice_dummy_var_422: int;
  var vslice_dummy_var_423: int;
  var vslice_dummy_var_860: int;
  var vslice_dummy_var_861: int;
  var vslice_dummy_var_862: int;
  var vslice_dummy_var_863: int;

  anon0:
    call {:si_unique_call 2870} sdv_5 := __HAVOC_malloc(8);
    call {:si_unique_call 2871} vslice_dummy_var_422 := __HAVOC_malloc(4);
    functionPdoExt_54 := actual_functionPdoExt_54;
    D0Irp_1 := actual_D0Irp_1;
    status_75 := actual_status_75;
    irpSp_28 := 0;
    assume {:nonnull} functionPdoExt_54 != 0;
    assume functionPdoExt_54 > 0;
    havoc parentFdoExt_99;
    call {:si_unique_call 2872} irpSp_28 := sdv_IoGetCurrentIrpStackLocation(D0Irp_1);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_75 < 0;
    havoc Tmp_1402;
    assume {:nonnull} functionPdoExt_54 != 0;
    assume functionPdoExt_54 > 0;
    assume {:nonnull} parentFdoExt_99 != 0;
    assume parentFdoExt_99 > 0;
    havoc vslice_dummy_var_860;
    havoc vslice_dummy_var_861;
    call {:si_unique_call 2873} WPP_RECORDER_SF_qq(vslice_dummy_var_860, 4, 3, 62, Tmp_1402, vslice_dummy_var_861, D0Irp_1);
    goto L15;

  L15:
    assume {:nonnull} functionPdoExt_54 != 0;
    assume functionPdoExt_54 > 0;
    assume {:nonnull} irpSp_28 != 0;
    assume irpSp_28 > 0;
    havoc vslice_dummy_var_862;
    havoc vslice_dummy_var_863;
    call {:si_unique_call 2874} SD5_1 := PoSetPowerState(0, vslice_dummy_var_862, vslice_dummy_var_863);
    assume {:nonnull} SD5_1 != 0;
    assume SD5_1 > 0;
    assume {:nonnull} sdv_5 != 0;
    assume sdv_5 > 0;
    assume {:nonnull} SD5_1 != 0;
    assume SD5_1 > 0;
    assume {:nonnull} sdv_5 != 0;
    assume sdv_5 > 0;
    call {:si_unique_call 2875} CompleteFunctionIdleIrp(functionPdoExt_54, 0);
    assume {:nonnull} parentFdoExt_99 != 0;
    assume parentFdoExt_99 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 2876} SendSetFeatureControlRequestForFunctionSuspend#1(parentFdoExt_99, functionPdoExt_54, D0Irp_1, 2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    status_75 := 0;
    call {:si_unique_call 2877} PoStartNextPowerIrp(0);
    assume {:nonnull} D0Irp_1 != 0;
    assume D0Irp_1 > 0;
    call {:si_unique_call 2878} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2879} UsbcReleaseRemoveLock(parentFdoExt_99, D0Irp_1);
    assume {:nonnull} parentFdoExt_99 != 0;
    assume parentFdoExt_99 > 0;
    call {:si_unique_call 2880} vslice_dummy_var_423 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_99), D0Irp_1);
    goto L1;

  anon7_Then:
    assume {:partition} 0 <= status_75;
    goto L15;
}



procedure {:origName "DispatchPdoSetPower_SetParentD0Completion"} DispatchPdoSetPower_SetParentD0Completion#1(actual_functionPdoExt_54: int, actual_D0Irp_1: int, actual_status_75: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SendSetFeatureControlRequestForFunctionSuspend"} SendSetFeatureControlRequestForFunctionSuspend#0(actual_parentFdoExt_101: int, actual_functionPdoExt_55: int, actual_PendingDIrp: int, actual_Operation: int)
{
  var {:pointer} nextSp_7: int;
  var {:pointer} setupPacket_1: int;
  var {:pointer} Tmp_1407: int;
  var {:pointer} Tmp_1408: int;
  var {:scalar} suspendOptions: int;
  var {:pointer} Tmp_1409: int;
  var {:pointer} Tmp_1410: int;
  var {:pointer} urb_14: int;
  var {:pointer} suspendContext_7: int;
  var {:pointer} irp_60: int;
  var {:pointer} Tmp_1411: int;
  var {:scalar} status_76: int;
  var {:pointer} parentFdoExt_101: int;
  var {:pointer} functionPdoExt_55: int;
  var {:pointer} PendingDIrp: int;
  var {:scalar} Operation: int;
  var vslice_dummy_var_424: int;
  var vslice_dummy_var_425: int;
  var vslice_dummy_var_864: int;
  var vslice_dummy_var_865: int;
  var vslice_dummy_var_866: int;
  var vslice_dummy_var_867: int;
  var vslice_dummy_var_868: int;
  var vslice_dummy_var_869: int;
  var vslice_dummy_var_870: int;
  var vslice_dummy_var_871: int;
  var vslice_dummy_var_872: int;
  var vslice_dummy_var_873: int;

  anon0:
    call {:si_unique_call 2881} suspendOptions := __HAVOC_malloc(16);
    call {:si_unique_call 2882} vslice_dummy_var_424 := __HAVOC_malloc(4);
    parentFdoExt_101 := actual_parentFdoExt_101;
    functionPdoExt_55 := actual_functionPdoExt_55;
    PendingDIrp := actual_PendingDIrp;
    Operation := actual_Operation;
    Tmp_1410 := li2bplFunctionConstant2849;
    call {:si_unique_call 2883} status_76 := UsbcAcquireRemoveLock(parentFdoExt_101, -767142062, Tmp_1410);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_76 < 0;
    havoc Tmp_1408;
    assume {:nonnull} parentFdoExt_101 != 0;
    assume parentFdoExt_101 > 0;
    havoc vslice_dummy_var_864;
    call {:si_unique_call 2884} WPP_RECORDER_SF_(vslice_dummy_var_864, 2, 8, 85, Tmp_1408);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} 0 <= status_76;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc suspendContext_7;
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    havoc urb_14;
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    havoc irp_60;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    setupPacket_1 := SetupPacket__URB_CONTROL_TRANSFER_EX(urb_14);
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Operation != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Operation == 1;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    goto L34;

  L34:
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    call {:si_unique_call 2885} nextSp_7 := sdv_IoGetNextIrpStackLocation(irp_60);
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    assume {:nonnull} parentFdoExt_101 != 0;
    assume parentFdoExt_101 > 0;
    havoc vslice_dummy_var_865;
    havoc vslice_dummy_var_866;
    call {:si_unique_call 2886} SetCompletionRoutine(vslice_dummy_var_865, vslice_dummy_var_866, irp_60, li2bplFunctionConstant2848, functionPdoExt_55, 1, 1, 1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Operation == 0;
    havoc Tmp_1407;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc vslice_dummy_var_867;
    havoc vslice_dummy_var_868;
    call {:si_unique_call 2887} WPP_RECORDER_SF_qq(vslice_dummy_var_867, 4, 3, 86, Tmp_1407, vslice_dummy_var_868, irp_60);
    goto L76;

  L76:
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    call {:si_unique_call 2888} sdv_IoMarkIrpPending(0);
    assume {:nonnull} parentFdoExt_101 != 0;
    assume parentFdoExt_101 > 0;
    havoc vslice_dummy_var_869;
    call {:si_unique_call 2889} vslice_dummy_var_425 := sdv_IoCallDriver#0(vslice_dummy_var_869, irp_60);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} Operation != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Operation != 1;
    havoc Tmp_1409;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc vslice_dummy_var_870;
    havoc vslice_dummy_var_871;
    call {:si_unique_call 2890} WPP_RECORDER_SF_qq(vslice_dummy_var_870, 4, 3, 88, Tmp_1409, vslice_dummy_var_871, irp_60);
    goto L76;

  anon16_Then:
    assume {:partition} Operation == 1;
    havoc Tmp_1411;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc vslice_dummy_var_872;
    havoc vslice_dummy_var_873;
    call {:si_unique_call 2891} WPP_RECORDER_SF_qq(vslice_dummy_var_872, 4, 3, 87, Tmp_1411, vslice_dummy_var_873, irp_60);
    goto L76;

  anon14_Then:
    assume {:partition} Operation != 1;
    goto L34;

  anon17_Then:
    assume {:partition} Operation == 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    goto L34;
}



procedure {:origName "SendSetFeatureControlRequestForFunctionSuspend"} SendSetFeatureControlRequestForFunctionSuspend#0(actual_parentFdoExt_101: int, actual_functionPdoExt_55: int, actual_PendingDIrp: int, actual_Operation: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SendSetFeatureControlRequestForFunctionSuspend"} SendSetFeatureControlRequestForFunctionSuspend#1(actual_parentFdoExt_101: int, actual_functionPdoExt_55: int, actual_PendingDIrp: int, actual_Operation: int)
{
  var {:pointer} nextSp_7: int;
  var {:pointer} setupPacket_1: int;
  var {:pointer} Tmp_1407: int;
  var {:pointer} Tmp_1408: int;
  var {:scalar} suspendOptions: int;
  var {:pointer} Tmp_1409: int;
  var {:pointer} Tmp_1410: int;
  var {:pointer} urb_14: int;
  var {:pointer} suspendContext_7: int;
  var {:pointer} irp_60: int;
  var {:pointer} Tmp_1411: int;
  var {:scalar} status_76: int;
  var {:pointer} parentFdoExt_101: int;
  var {:pointer} functionPdoExt_55: int;
  var {:pointer} PendingDIrp: int;
  var {:scalar} Operation: int;
  var vslice_dummy_var_426: int;
  var vslice_dummy_var_427: int;
  var vslice_dummy_var_874: int;
  var vslice_dummy_var_875: int;
  var vslice_dummy_var_876: int;
  var vslice_dummy_var_877: int;
  var vslice_dummy_var_878: int;
  var vslice_dummy_var_879: int;
  var vslice_dummy_var_880: int;
  var vslice_dummy_var_881: int;
  var vslice_dummy_var_882: int;
  var vslice_dummy_var_883: int;

  anon0:
    call {:si_unique_call 2892} suspendOptions := __HAVOC_malloc(16);
    call {:si_unique_call 2893} vslice_dummy_var_426 := __HAVOC_malloc(4);
    parentFdoExt_101 := actual_parentFdoExt_101;
    functionPdoExt_55 := actual_functionPdoExt_55;
    PendingDIrp := actual_PendingDIrp;
    Operation := actual_Operation;
    Tmp_1410 := li2bplFunctionConstant2849;
    call {:si_unique_call 2894} status_76 := UsbcAcquireRemoveLock(parentFdoExt_101, -767142062, Tmp_1410);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_76 < 0;
    havoc Tmp_1408;
    assume {:nonnull} parentFdoExt_101 != 0;
    assume parentFdoExt_101 > 0;
    havoc vslice_dummy_var_874;
    call {:si_unique_call 2895} WPP_RECORDER_SF_(vslice_dummy_var_874, 2, 8, 85, Tmp_1408);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} 0 <= status_76;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc suspendContext_7;
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    havoc urb_14;
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    havoc irp_60;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    setupPacket_1 := SetupPacket__URB_CONTROL_TRANSFER_EX(urb_14);
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Operation != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Operation == 1;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    goto L34;

  L34:
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    assume {:nonnull} setupPacket_1 != 0;
    assume setupPacket_1 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    assume {:nonnull} urb_14 != 0;
    assume urb_14 > 0;
    call {:si_unique_call 2896} nextSp_7 := sdv_IoGetNextIrpStackLocation(irp_60);
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    assume {:nonnull} parentFdoExt_101 != 0;
    assume parentFdoExt_101 > 0;
    havoc vslice_dummy_var_875;
    havoc vslice_dummy_var_876;
    call {:si_unique_call 2897} SetCompletionRoutine(vslice_dummy_var_875, vslice_dummy_var_876, irp_60, li2bplFunctionConstant2848, functionPdoExt_55, 1, 1, 1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Operation == 0;
    havoc Tmp_1407;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc vslice_dummy_var_877;
    havoc vslice_dummy_var_878;
    call {:si_unique_call 2898} WPP_RECORDER_SF_qq(vslice_dummy_var_877, 4, 3, 86, Tmp_1407, vslice_dummy_var_878, irp_60);
    goto L76;

  L76:
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    assume {:nonnull} suspendContext_7 != 0;
    assume suspendContext_7 > 0;
    call {:si_unique_call 2899} sdv_IoMarkIrpPending(0);
    assume {:nonnull} parentFdoExt_101 != 0;
    assume parentFdoExt_101 > 0;
    havoc vslice_dummy_var_879;
    call {:si_unique_call 2900} vslice_dummy_var_427 := sdv_IoCallDriver#1(vslice_dummy_var_879, irp_60);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} Operation != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Operation != 1;
    havoc Tmp_1409;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc vslice_dummy_var_880;
    havoc vslice_dummy_var_881;
    call {:si_unique_call 2901} WPP_RECORDER_SF_qq(vslice_dummy_var_880, 4, 3, 88, Tmp_1409, vslice_dummy_var_881, irp_60);
    goto L76;

  anon16_Then:
    assume {:partition} Operation == 1;
    havoc Tmp_1411;
    assume {:nonnull} functionPdoExt_55 != 0;
    assume functionPdoExt_55 > 0;
    havoc vslice_dummy_var_882;
    havoc vslice_dummy_var_883;
    call {:si_unique_call 2902} WPP_RECORDER_SF_qq(vslice_dummy_var_882, 4, 3, 87, Tmp_1411, vslice_dummy_var_883, irp_60);
    goto L76;

  anon14_Then:
    assume {:partition} Operation != 1;
    goto L34;

  anon17_Then:
    assume {:partition} Operation == 0;
    assume {:nonnull} suspendOptions != 0;
    assume suspendOptions > 0;
    goto L34;
}



procedure {:origName "SendSetFeatureControlRequestForFunctionSuspend"} SendSetFeatureControlRequestForFunctionSuspend#1(actual_parentFdoExt_101: int, actual_functionPdoExt_55: int, actual_PendingDIrp: int, actual_Operation: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ProcessWakeNotificationWorker"} ProcessWakeNotificationWorker#0(actual_deviceObject_5: int, actual_context_15: int)
{
  var {:pointer} Tmp_1428: int;
  var {:pointer} Tmp_1429: int;
  var {:pointer} Tmp_1430: int;
  var {:pointer} waitWakeIrpToComplete: int;
  var {:pointer} Tmp_1431: int;
  var {:pointer} parentFdoExt_105: int;
  var {:pointer} Tmp_1432: int;
  var {:pointer} Tmp_1433: int;
  var {:scalar} oldIrql_15: int;
  var {:pointer} Tmp_1434: int;
  var {:pointer} suspendContext_8: int;
  var {:pointer} functionPdoExt_56: int;
  var {:pointer} context_15: int;
  var vslice_dummy_var_428: int;
  var vslice_dummy_var_429: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_884: int;
  var vslice_dummy_var_885: int;
  var vslice_dummy_var_886: int;
  var vslice_dummy_var_887: int;
  var vslice_dummy_var_888: int;
  var vslice_dummy_var_889: int;
  var vslice_dummy_var_890: int;

  anon0:
    call {:si_unique_call 2903} vslice_dummy_var_428 := __HAVOC_malloc(4);
    context_15 := actual_context_15;
    functionPdoExt_56 := context_15;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc parentFdoExt_105;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc suspendContext_8;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L19;

  L19:
    call {:si_unique_call 2904} Tmp_1431 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1431 != 0;
    assume Tmp_1431 > 0;
    Mem_T.VOID[Tmp_1431] := oldIrql_15;
    call {:si_unique_call 2905} sdv_KeAcquireSpinLock(0, Tmp_1431);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1431 != 0;
    assume Tmp_1431 > 0;
    oldIrql_15 := Mem_T.VOID[Tmp_1431];
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    havoc waitWakeIrpToComplete;
    havoc Tmp_1432;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc vslice_dummy_var_884;
    havoc vslice_dummy_var_885;
    call {:si_unique_call 2906} WPP_RECORDER_SF_qq(vslice_dummy_var_884, 4, 3, 76, Tmp_1432, vslice_dummy_var_885, waitWakeIrpToComplete);
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    call {:si_unique_call 2907} sdv_KeReleaseSpinLock(0, oldIrql_15);
    call {:si_unique_call 2908} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2909} UsbcReleaseRemoveLock(parentFdoExt_105, waitWakeIrpToComplete);
    assume {:nonnull} parentFdoExt_105 != 0;
    assume parentFdoExt_105 > 0;
    call {:si_unique_call 2910} vslice_dummy_var_429 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_105), waitWakeIrpToComplete);
    goto L51;

  L51:
    Tmp_1433 := li2bplFunctionConstant2845;
    call {:si_unique_call 2911} UsbcReleaseRemoveLock(parentFdoExt_105, Tmp_1433);
    Tmp_1430 := li2bplFunctionConstant2845;
    assume {:nonnull} parentFdoExt_105 != 0;
    assume parentFdoExt_105 > 0;
    call {:si_unique_call 2912} vslice_dummy_var_430 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_105), Tmp_1430);
    goto LM2;

  LM2:
    return;

  anon13_Then:
    call {:si_unique_call 2913} sdv_KeReleaseSpinLock(0, oldIrql_15);
    havoc Tmp_1434;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc vslice_dummy_var_886;
    havoc vslice_dummy_var_887;
    call {:si_unique_call 2914} WPP_RECORDER_SF_q(vslice_dummy_var_886, 4, 3, 77, Tmp_1434, vslice_dummy_var_887);
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    havoc Tmp_1428;
    assume {:nonnull} Tmp_1428 != 0;
    assume Tmp_1428 > 0;
    havoc vslice_dummy_var_888;
    call {:si_unique_call 2915} CompletePdoWaitWakeIrp#0(functionPdoExt_56, vslice_dummy_var_888);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2916} CompleteFunctionIdleIrp(functionPdoExt_56, 0);
    call {:si_unique_call 2917} SetPdoIdle(parentFdoExt_105, functionPdoExt_56, 2, 0, 1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L51;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    havoc Tmp_1429;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc vslice_dummy_var_889;
    havoc vslice_dummy_var_890;
    call {:si_unique_call 2918} WPP_RECORDER_SF_q(vslice_dummy_var_889, 5, 3, 75, Tmp_1429, vslice_dummy_var_890);
    goto L19;
}



procedure {:origName "ProcessWakeNotificationWorker"} ProcessWakeNotificationWorker#0(actual_deviceObject_5: int, actual_context_15: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ProcessWakeNotificationWorker"} ProcessWakeNotificationWorker#1(actual_deviceObject_5: int, actual_context_15: int)
{
  var {:pointer} Tmp_1428: int;
  var {:pointer} Tmp_1429: int;
  var {:pointer} Tmp_1430: int;
  var {:pointer} waitWakeIrpToComplete: int;
  var {:pointer} Tmp_1431: int;
  var {:pointer} parentFdoExt_105: int;
  var {:pointer} Tmp_1432: int;
  var {:pointer} Tmp_1433: int;
  var {:scalar} oldIrql_15: int;
  var {:pointer} Tmp_1434: int;
  var {:pointer} suspendContext_8: int;
  var {:pointer} functionPdoExt_56: int;
  var {:pointer} context_15: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_891: int;
  var vslice_dummy_var_892: int;
  var vslice_dummy_var_893: int;
  var vslice_dummy_var_894: int;
  var vslice_dummy_var_895: int;
  var vslice_dummy_var_896: int;
  var vslice_dummy_var_897: int;

  anon0:
    call {:si_unique_call 2919} vslice_dummy_var_431 := __HAVOC_malloc(4);
    context_15 := actual_context_15;
    functionPdoExt_56 := context_15;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc parentFdoExt_105;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc suspendContext_8;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L19;

  L19:
    call {:si_unique_call 2920} Tmp_1431 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1431 != 0;
    assume Tmp_1431 > 0;
    Mem_T.VOID[Tmp_1431] := oldIrql_15;
    call {:si_unique_call 2921} sdv_KeAcquireSpinLock(0, Tmp_1431);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1431 != 0;
    assume Tmp_1431 > 0;
    oldIrql_15 := Mem_T.VOID[Tmp_1431];
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    havoc waitWakeIrpToComplete;
    havoc Tmp_1432;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc vslice_dummy_var_891;
    havoc vslice_dummy_var_892;
    call {:si_unique_call 2922} WPP_RECORDER_SF_qq(vslice_dummy_var_891, 4, 3, 76, Tmp_1432, vslice_dummy_var_892, waitWakeIrpToComplete);
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    call {:si_unique_call 2923} sdv_KeReleaseSpinLock(0, oldIrql_15);
    call {:si_unique_call 2924} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2925} UsbcReleaseRemoveLock(parentFdoExt_105, waitWakeIrpToComplete);
    assume {:nonnull} parentFdoExt_105 != 0;
    assume parentFdoExt_105 > 0;
    call {:si_unique_call 2926} vslice_dummy_var_432 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_105), waitWakeIrpToComplete);
    goto L51;

  L51:
    Tmp_1433 := li2bplFunctionConstant2845;
    call {:si_unique_call 2927} UsbcReleaseRemoveLock(parentFdoExt_105, Tmp_1433);
    Tmp_1430 := li2bplFunctionConstant2845;
    assume {:nonnull} parentFdoExt_105 != 0;
    assume parentFdoExt_105 > 0;
    call {:si_unique_call 2928} vslice_dummy_var_433 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_105), Tmp_1430);
    goto LM2;

  LM2:
    return;

  anon13_Then:
    call {:si_unique_call 2929} sdv_KeReleaseSpinLock(0, oldIrql_15);
    havoc Tmp_1434;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc vslice_dummy_var_893;
    havoc vslice_dummy_var_894;
    call {:si_unique_call 2930} WPP_RECORDER_SF_q(vslice_dummy_var_893, 4, 3, 77, Tmp_1434, vslice_dummy_var_894);
    assume {:nonnull} suspendContext_8 != 0;
    assume suspendContext_8 > 0;
    havoc Tmp_1428;
    assume {:nonnull} Tmp_1428 != 0;
    assume Tmp_1428 > 0;
    havoc vslice_dummy_var_895;
    call {:si_unique_call 2931} CompletePdoWaitWakeIrp#1(functionPdoExt_56, vslice_dummy_var_895);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2932} CompleteFunctionIdleIrp(functionPdoExt_56, 0);
    call {:si_unique_call 2933} SetPdoIdle(parentFdoExt_105, functionPdoExt_56, 2, 0, 1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L51;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    havoc Tmp_1429;
    assume {:nonnull} functionPdoExt_56 != 0;
    assume functionPdoExt_56 > 0;
    havoc vslice_dummy_var_896;
    havoc vslice_dummy_var_897;
    call {:si_unique_call 2934} WPP_RECORDER_SF_q(vslice_dummy_var_896, 5, 3, 75, Tmp_1429, vslice_dummy_var_897);
    goto L19;
}



procedure {:origName "ProcessWakeNotificationWorker"} ProcessWakeNotificationWorker#1(actual_deviceObject_5: int, actual_context_15: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletePdoWaitWakeIrp"} CompletePdoWaitWakeIrp#0(actual_functionPdoExt_52: int, actual_status_74: int)
{
  var {:pointer} Tmp_1394: int;
  var {:pointer} parentFdoExt_97: int;
  var {:pointer} irpToComplete_1: int;
  var {:pointer} functionPdoExt_52: int;
  var {:scalar} status_74: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_898: int;
  var vslice_dummy_var_899: int;
  var vslice_dummy_var_900: int;

  anon0:
    call {:si_unique_call 2935} vslice_dummy_var_434 := __HAVOC_malloc(4);
    functionPdoExt_52 := actual_functionPdoExt_52;
    status_74 := actual_status_74;
    irpToComplete_1 := 0;
    assume {:nonnull} functionPdoExt_52 != 0;
    assume functionPdoExt_52 > 0;
    havoc parentFdoExt_97;
    call {:si_unique_call 2936} irpToComplete_1 := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} irpToComplete_1 != 0;
    assume {:nonnull} irpToComplete_1 != 0;
    assume irpToComplete_1 > 0;
    assume {:nonnull} parentFdoExt_97 != 0;
    assume parentFdoExt_97 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    havoc Tmp_1394;
    assume {:nonnull} functionPdoExt_52 != 0;
    assume functionPdoExt_52 > 0;
    assume {:nonnull} parentFdoExt_97 != 0;
    assume parentFdoExt_97 > 0;
    havoc vslice_dummy_var_898;
    havoc vslice_dummy_var_899;
    call {:si_unique_call 2937} WPP_RECORDER_SF_qqd(vslice_dummy_var_898, 4, 3, 21, Tmp_1394, irpToComplete_1, vslice_dummy_var_899, status_74);
    call {:si_unique_call 2938} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2939} UsbcReleaseRemoveLock(parentFdoExt_97, irpToComplete_1);
    assume {:nonnull} parentFdoExt_97 != 0;
    assume parentFdoExt_97 > 0;
    call {:si_unique_call 2940} vslice_dummy_var_435 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_97), irpToComplete_1);
    goto L20;

  L20:
    assume {:nonnull} functionPdoExt_52 != 0;
    assume functionPdoExt_52 > 0;
    havoc vslice_dummy_var_900;
    call {:si_unique_call 2941} CheckParentWaitWake#0(vslice_dummy_var_900);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    call {:si_unique_call 2942} CancelRemoteWakeNotificationIrp(functionPdoExt_52, irpToComplete_1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L20;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} irpToComplete_1 == 0;
    goto L1;
}



procedure {:origName "CompletePdoWaitWakeIrp"} CompletePdoWaitWakeIrp#0(actual_functionPdoExt_52: int, actual_status_74: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_5) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletePdoWaitWakeIrp"} CompletePdoWaitWakeIrp#1(actual_functionPdoExt_52: int, actual_status_74: int)
{
  var {:pointer} Tmp_1394: int;
  var {:pointer} parentFdoExt_97: int;
  var {:pointer} irpToComplete_1: int;
  var {:pointer} functionPdoExt_52: int;
  var {:scalar} status_74: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_901: int;
  var vslice_dummy_var_902: int;
  var vslice_dummy_var_903: int;

  anon0:
    call {:si_unique_call 2943} vslice_dummy_var_436 := __HAVOC_malloc(4);
    functionPdoExt_52 := actual_functionPdoExt_52;
    status_74 := actual_status_74;
    irpToComplete_1 := 0;
    assume {:nonnull} functionPdoExt_52 != 0;
    assume functionPdoExt_52 > 0;
    havoc parentFdoExt_97;
    call {:si_unique_call 2944} irpToComplete_1 := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} irpToComplete_1 != 0;
    assume {:nonnull} irpToComplete_1 != 0;
    assume irpToComplete_1 > 0;
    assume {:nonnull} parentFdoExt_97 != 0;
    assume parentFdoExt_97 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    havoc Tmp_1394;
    assume {:nonnull} functionPdoExt_52 != 0;
    assume functionPdoExt_52 > 0;
    assume {:nonnull} parentFdoExt_97 != 0;
    assume parentFdoExt_97 > 0;
    havoc vslice_dummy_var_901;
    havoc vslice_dummy_var_902;
    call {:si_unique_call 2945} WPP_RECORDER_SF_qqd(vslice_dummy_var_901, 4, 3, 21, Tmp_1394, irpToComplete_1, vslice_dummy_var_902, status_74);
    call {:si_unique_call 2946} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2947} UsbcReleaseRemoveLock(parentFdoExt_97, irpToComplete_1);
    assume {:nonnull} parentFdoExt_97 != 0;
    assume parentFdoExt_97 > 0;
    call {:si_unique_call 2948} vslice_dummy_var_437 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_97), irpToComplete_1);
    goto L20;

  L20:
    assume {:nonnull} functionPdoExt_52 != 0;
    assume functionPdoExt_52 > 0;
    havoc vslice_dummy_var_903;
    call {:si_unique_call 2949} CheckParentWaitWake#1(vslice_dummy_var_903);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    call {:si_unique_call 2950} CancelRemoteWakeNotificationIrp(functionPdoExt_52, irpToComplete_1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L20;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} irpToComplete_1 == 0;
    goto L1;
}



procedure {:origName "CompletePdoWaitWakeIrp"} CompletePdoWaitWakeIrp#1(actual_functionPdoExt_52: int, actual_status_74: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcWorkerFunction"} UsbcWorkerFunction#0(actual_deviceObject: int, actual_context_1: int)
{
  var {:pointer} Tmp_404: int;
  var {:pointer} Tmp_406: int;
  var {:pointer} Tmp_408: int;
  var {:pointer} workerContext_1: int;
  var {:pointer} context_1: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_904: int;
  var vslice_dummy_var_905: int;
  var vslice_dummy_var_906: int;
  var vslice_dummy_var_907: int;
  var vslice_dummy_var_908: int;
  var vslice_dummy_var_909: int;
  var vslice_dummy_var_910: int;
  var vslice_dummy_var_911: int;
  var vslice_dummy_var_912: int;
  var vslice_dummy_var_913: int;
  var vslice_dummy_var_914: int;
  var vslice_dummy_var_915: int;
  var vslice_dummy_var_916: int;
  var vslice_dummy_var_917: int;
  var vslice_dummy_var_918: int;
  var vslice_dummy_var_919: int;
  var vslice_dummy_var_920: int;
  var vslice_dummy_var_921: int;
  var vslice_dummy_var_922: int;
  var vslice_dummy_var_923: int;
  var vslice_dummy_var_924: int;
  var vslice_dummy_var_925: int;
  var vslice_dummy_var_926: int;
  var vslice_dummy_var_927: int;
  var vslice_dummy_var_928: int;

  anon0:
    call {:si_unique_call 2951} vslice_dummy_var_438 := __HAVOC_malloc(4);
    context_1 := actual_context_1;
    workerContext_1 := context_1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_904;
    havoc vslice_dummy_var_905;
    call {:si_unique_call 2952} vslice_dummy_var_441 := D3ColdSupportInterfaceFunctionGetBusDriverD3ColdSupport(vslice_dummy_var_904, vslice_dummy_var_905);
    goto L8;

  L8:
    call {:si_unique_call 2953} IoFreeWorkItem(0);
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc Tmp_406;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_906;
    call {:si_unique_call 2954} UsbcReleaseRemoveLock(vslice_dummy_var_906, Tmp_406);
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc Tmp_408;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc Tmp_404;
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    call {:si_unique_call 2955} vslice_dummy_var_439 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(Tmp_404), Tmp_408);
    call {:si_unique_call 2956} ExFreePoolWithTag(0, -1016958123);
    goto LM2;

  LM2:
    return;

  anon46_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_907;
    havoc vslice_dummy_var_908;
    call {:si_unique_call 2957} vslice_dummy_var_440 := D3ColdSupportInterfaceFunctionGetD3ColdCapability(vslice_dummy_var_907, vslice_dummy_var_908);
    goto L8;

  anon45_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_909;
    havoc vslice_dummy_var_910;
    call {:si_unique_call 2958} D3ColdSupportInterfaceFunctionGetLastTransitionStatus(vslice_dummy_var_909, vslice_dummy_var_910);
    goto L8;

  anon44_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_911;
    havoc vslice_dummy_var_912;
    call {:si_unique_call 2959} IdleFinishCompletionWorker(vslice_dummy_var_911, vslice_dummy_var_912);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_913;
    havoc vslice_dummy_var_914;
    call {:si_unique_call 2960} IdleTimerEnableWorker(vslice_dummy_var_913, vslice_dummy_var_914);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_915;
    havoc vslice_dummy_var_916;
    call {:si_unique_call 2961} InvokeParentIdleCallbackWorker#0(vslice_dummy_var_915, vslice_dummy_var_916);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_917;
    havoc vslice_dummy_var_918;
    call {:si_unique_call 2962} PdoIdleCancelCompleteWorker(vslice_dummy_var_917, vslice_dummy_var_918);
    goto L8;

  anon40_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_919;
    havoc vslice_dummy_var_920;
    call {:si_unique_call 2963} ResumeIdleTimerWorker(vslice_dummy_var_919, vslice_dummy_var_920);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_921;
    havoc vslice_dummy_var_922;
    call {:si_unique_call 2964} SendRemoteWakeNotificationIrp#0(vslice_dummy_var_921, vslice_dummy_var_922);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_923;
    havoc vslice_dummy_var_924;
    call {:si_unique_call 2965} SetSelectiveSuspendRegistryFlag(vslice_dummy_var_923, vslice_dummy_var_924);
    goto L8;

  anon37_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_925;
    havoc vslice_dummy_var_926;
    call {:si_unique_call 2966} UnblockWorkBlockedOnPendingParentD0#0(vslice_dummy_var_925, vslice_dummy_var_926);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_927;
    havoc vslice_dummy_var_928;
    call {:si_unique_call 2967} WaitWakeFinishCompletionWorker#0(vslice_dummy_var_927, vslice_dummy_var_928);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "UsbcWorkerFunction"} UsbcWorkerFunction#0(actual_deviceObject: int, actual_context_1: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "UsbcWorkerFunction"} UsbcWorkerFunction#1(actual_deviceObject: int, actual_context_1: int)
{
  var {:pointer} Tmp_404: int;
  var {:pointer} Tmp_406: int;
  var {:pointer} Tmp_408: int;
  var {:pointer} workerContext_1: int;
  var {:pointer} context_1: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_929: int;
  var vslice_dummy_var_930: int;
  var vslice_dummy_var_931: int;
  var vslice_dummy_var_932: int;
  var vslice_dummy_var_933: int;
  var vslice_dummy_var_934: int;
  var vslice_dummy_var_935: int;
  var vslice_dummy_var_936: int;
  var vslice_dummy_var_937: int;
  var vslice_dummy_var_938: int;
  var vslice_dummy_var_939: int;
  var vslice_dummy_var_940: int;
  var vslice_dummy_var_941: int;
  var vslice_dummy_var_942: int;
  var vslice_dummy_var_943: int;
  var vslice_dummy_var_944: int;
  var vslice_dummy_var_945: int;
  var vslice_dummy_var_946: int;
  var vslice_dummy_var_947: int;
  var vslice_dummy_var_948: int;
  var vslice_dummy_var_949: int;
  var vslice_dummy_var_950: int;
  var vslice_dummy_var_951: int;
  var vslice_dummy_var_952: int;
  var vslice_dummy_var_953: int;

  anon0:
    call {:si_unique_call 2968} vslice_dummy_var_442 := __HAVOC_malloc(4);
    context_1 := actual_context_1;
    workerContext_1 := context_1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_929;
    havoc vslice_dummy_var_930;
    call {:si_unique_call 2969} vslice_dummy_var_445 := D3ColdSupportInterfaceFunctionGetBusDriverD3ColdSupport(vslice_dummy_var_929, vslice_dummy_var_930);
    goto L8;

  L8:
    call {:si_unique_call 2970} IoFreeWorkItem(0);
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc Tmp_406;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_931;
    call {:si_unique_call 2971} UsbcReleaseRemoveLock(vslice_dummy_var_931, Tmp_406);
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc Tmp_408;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc Tmp_404;
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    call {:si_unique_call 2972} vslice_dummy_var_443 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(Tmp_404), Tmp_408);
    call {:si_unique_call 2973} ExFreePoolWithTag(0, -1016958123);
    goto LM2;

  LM2:
    return;

  anon46_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_932;
    havoc vslice_dummy_var_933;
    call {:si_unique_call 2974} vslice_dummy_var_444 := D3ColdSupportInterfaceFunctionGetD3ColdCapability(vslice_dummy_var_932, vslice_dummy_var_933);
    goto L8;

  anon45_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_934;
    havoc vslice_dummy_var_935;
    call {:si_unique_call 2975} D3ColdSupportInterfaceFunctionGetLastTransitionStatus(vslice_dummy_var_934, vslice_dummy_var_935);
    goto L8;

  anon44_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_936;
    havoc vslice_dummy_var_937;
    call {:si_unique_call 2976} IdleFinishCompletionWorker(vslice_dummy_var_936, vslice_dummy_var_937);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_938;
    havoc vslice_dummy_var_939;
    call {:si_unique_call 2977} IdleTimerEnableWorker(vslice_dummy_var_938, vslice_dummy_var_939);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_940;
    havoc vslice_dummy_var_941;
    call {:si_unique_call 2978} InvokeParentIdleCallbackWorker#1(vslice_dummy_var_940, vslice_dummy_var_941);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_942;
    havoc vslice_dummy_var_943;
    call {:si_unique_call 2979} PdoIdleCancelCompleteWorker(vslice_dummy_var_942, vslice_dummy_var_943);
    goto L8;

  anon40_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_944;
    havoc vslice_dummy_var_945;
    call {:si_unique_call 2980} ResumeIdleTimerWorker(vslice_dummy_var_944, vslice_dummy_var_945);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_946;
    havoc vslice_dummy_var_947;
    call {:si_unique_call 2981} SendRemoteWakeNotificationIrp#1(vslice_dummy_var_946, vslice_dummy_var_947);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_948;
    havoc vslice_dummy_var_949;
    call {:si_unique_call 2982} SetSelectiveSuspendRegistryFlag(vslice_dummy_var_948, vslice_dummy_var_949);
    goto L8;

  anon37_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_950;
    havoc vslice_dummy_var_951;
    call {:si_unique_call 2983} UnblockWorkBlockedOnPendingParentD0#1(vslice_dummy_var_950, vslice_dummy_var_951);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    assume {:nonnull} workerContext_1 != 0;
    assume workerContext_1 > 0;
    havoc vslice_dummy_var_952;
    havoc vslice_dummy_var_953;
    call {:si_unique_call 2984} WaitWakeFinishCompletionWorker#1(vslice_dummy_var_952, vslice_dummy_var_953);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "UsbcWorkerFunction"} UsbcWorkerFunction#1(actual_deviceObject: int, actual_context_1: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WaitWakeFinishCompletionWorker"} WaitWakeFinishCompletionWorker#0(actual_parentFdoExt_100: int, actual_context_13: int)
{
  var {:pointer} Tmp_1404: int;
  var {:pointer} parentFdoExt_100: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_954: int;

  anon0:
    call {:si_unique_call 2985} vslice_dummy_var_446 := __HAVOC_malloc(4);
    parentFdoExt_100 := actual_parentFdoExt_100;
    havoc Tmp_1404;
    assume {:nonnull} parentFdoExt_100 != 0;
    assume parentFdoExt_100 > 0;
    havoc vslice_dummy_var_954;
    call {:si_unique_call 2986} WPP_RECORDER_SF_(vslice_dummy_var_954, 4, 3, 25, Tmp_1404);
    assume {:nonnull} parentFdoExt_100 != 0;
    assume parentFdoExt_100 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 2987} FinishWaitWakeCompletionForFuncitonSuspend#0(parentFdoExt_100);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    call {:si_unique_call 2988} CompleteAllPdoWaitWakeIrps#0(parentFdoExt_100, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WaitWakeFinishCompletionWorker"} WaitWakeFinishCompletionWorker#0(actual_parentFdoExt_100: int, actual_context_13: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WaitWakeFinishCompletionWorker"} WaitWakeFinishCompletionWorker#1(actual_parentFdoExt_100: int, actual_context_13: int)
{
  var {:pointer} Tmp_1404: int;
  var {:pointer} parentFdoExt_100: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_955: int;

  anon0:
    call {:si_unique_call 2989} vslice_dummy_var_447 := __HAVOC_malloc(4);
    parentFdoExt_100 := actual_parentFdoExt_100;
    havoc Tmp_1404;
    assume {:nonnull} parentFdoExt_100 != 0;
    assume parentFdoExt_100 > 0;
    havoc vslice_dummy_var_955;
    call {:si_unique_call 2990} WPP_RECORDER_SF_(vslice_dummy_var_955, 4, 3, 25, Tmp_1404);
    assume {:nonnull} parentFdoExt_100 != 0;
    assume parentFdoExt_100 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 2991} FinishWaitWakeCompletionForFuncitonSuspend#1(parentFdoExt_100);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    call {:si_unique_call 2992} CompleteAllPdoWaitWakeIrps#1(parentFdoExt_100, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "WaitWakeFinishCompletionWorker"} WaitWakeFinishCompletionWorker#1(actual_parentFdoExt_100: int, actual_context_13: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FinishWaitWakeCompletionForFuncitonSuspend"} FinishWaitWakeCompletionForFuncitonSuspend#0(actual_parentFdoExt_113: int)
{
  var {:scalar} idleFinishCompletion_2: int;
  var {:pointer} idleFinishCompletionWorkerContext_2: int;
  var {:pointer} completedWaitWakeIrp_1: int;
  var {:scalar} tmpStatus_3: int;
  var {:pointer} Tmp_1482: int;
  var {:scalar} irql_1: int;
  var {:pointer} Tmp_1483: int;
  var {:pointer} parentFdoExt_113: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_956: int;

  anon0:
    call {:si_unique_call 2993} vslice_dummy_var_448 := __HAVOC_malloc(4);
    parentFdoExt_113 := actual_parentFdoExt_113;
    completedWaitWakeIrp_1 := 0;
    idleFinishCompletion_2 := 0;
    idleFinishCompletionWorkerContext_2 := 0;
    tmpStatus_3 := 0;
    call {:si_unique_call 2994} Tmp_1482 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    Mem_T.VOID[Tmp_1482] := irql_1;
    call {:si_unique_call 2995} sdv_KeAcquireSpinLock(0, Tmp_1482);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    irql_1 := Mem_T.VOID[Tmp_1482];
    havoc Tmp_1483;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    havoc vslice_dummy_var_956;
    call {:si_unique_call 2996} WPP_RECORDER_SF_(vslice_dummy_var_956, 4, 3, 24, Tmp_1483);
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L34;

  L34:
    call {:si_unique_call 2997} sdv_KeReleaseSpinLock(0, irql_1);
    call {:si_unique_call 2998} Tmp_1482 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    Mem_T.VOID[Tmp_1482] := irql_1;
    call {:si_unique_call 2999} sdv_KeAcquireSpinLock(0, Tmp_1482);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    irql_1 := Mem_T.VOID[Tmp_1482];
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    call {:si_unique_call 3000} vslice_dummy_var_449 := KeSetEvent(waitWakeEvent_PARENT_FDO_EXTENSION(parentFdoExt_113), 0, 0);
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    idleFinishCompletion_2 := 1;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    havoc idleFinishCompletionWorkerContext_2;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto L44;

  L44:
    call {:si_unique_call 3001} sdv_KeReleaseSpinLock(0, irql_1);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} idleFinishCompletion_2 != 0;
    assume false;
    return;

  anon22_Then:
    assume {:partition} idleFinishCompletion_2 == 0;
    goto L52;

  L52:
    call {:si_unique_call 3002} CheckParentWaitWake#0(parentFdoExt_113);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} completedWaitWakeIrp_1 != 0;
    call {:si_unique_call 3003} UsbcReleaseRemoveLock(parentFdoExt_113, completedWaitWakeIrp_1);
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    call {:si_unique_call 3004} vslice_dummy_var_450 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_113), completedWaitWakeIrp_1);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} completedWaitWakeIrp_1 == 0;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    goto L44;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    havoc completedWaitWakeIrp_1;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto L34;

  anon25_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "FinishWaitWakeCompletionForFuncitonSuspend"} FinishWaitWakeCompletionForFuncitonSuspend#0(actual_parentFdoExt_113: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_previous_5) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_5) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FinishWaitWakeCompletionForFuncitonSuspend"} FinishWaitWakeCompletionForFuncitonSuspend#1(actual_parentFdoExt_113: int)
{
  var {:scalar} idleFinishCompletion_2: int;
  var {:pointer} idleFinishCompletionWorkerContext_2: int;
  var {:pointer} completedWaitWakeIrp_1: int;
  var {:scalar} tmpStatus_3: int;
  var {:pointer} Tmp_1482: int;
  var {:scalar} irql_1: int;
  var {:pointer} Tmp_1483: int;
  var {:pointer} parentFdoExt_113: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_957: int;

  anon0:
    call {:si_unique_call 3005} vslice_dummy_var_451 := __HAVOC_malloc(4);
    parentFdoExt_113 := actual_parentFdoExt_113;
    completedWaitWakeIrp_1 := 0;
    idleFinishCompletion_2 := 0;
    idleFinishCompletionWorkerContext_2 := 0;
    tmpStatus_3 := 0;
    call {:si_unique_call 3006} Tmp_1482 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    Mem_T.VOID[Tmp_1482] := irql_1;
    call {:si_unique_call 3007} sdv_KeAcquireSpinLock(0, Tmp_1482);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    irql_1 := Mem_T.VOID[Tmp_1482];
    havoc Tmp_1483;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    havoc vslice_dummy_var_957;
    call {:si_unique_call 3008} WPP_RECORDER_SF_(vslice_dummy_var_957, 4, 3, 24, Tmp_1483);
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L34;

  L34:
    call {:si_unique_call 3009} sdv_KeReleaseSpinLock(0, irql_1);
    call {:si_unique_call 3010} Tmp_1482 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    Mem_T.VOID[Tmp_1482] := irql_1;
    call {:si_unique_call 3011} sdv_KeAcquireSpinLock(0, Tmp_1482);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1482 != 0;
    assume Tmp_1482 > 0;
    irql_1 := Mem_T.VOID[Tmp_1482];
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    call {:si_unique_call 3012} vslice_dummy_var_452 := KeSetEvent(waitWakeEvent_PARENT_FDO_EXTENSION(parentFdoExt_113), 0, 0);
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    idleFinishCompletion_2 := 1;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    havoc idleFinishCompletionWorkerContext_2;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto L44;

  L44:
    call {:si_unique_call 3013} sdv_KeReleaseSpinLock(0, irql_1);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} idleFinishCompletion_2 != 0;
    call {:si_unique_call 3014} tmpStatus_3 := AllocateWorker#0(parentFdoExt_113, li2bplFunctionConstant810, idleFinishCompletionWorkerContext_2);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} tmpStatus_3 < 0;
    call {:si_unique_call 3015} IdleFinishCompletionWorker(parentFdoExt_113, idleFinishCompletionWorkerContext_2);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L52;

  L52:
    call {:si_unique_call 3016} CheckParentWaitWake#1(parentFdoExt_113);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} completedWaitWakeIrp_1 != 0;
    call {:si_unique_call 3017} UsbcReleaseRemoveLock(parentFdoExt_113, completedWaitWakeIrp_1);
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    call {:si_unique_call 3018} vslice_dummy_var_453 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_113), completedWaitWakeIrp_1);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} completedWaitWakeIrp_1 == 0;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:partition} 0 <= tmpStatus_3;
    goto L52;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    assume {:partition} idleFinishCompletion_2 == 0;
    goto L52;

  anon21_Then:
    goto L44;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    havoc completedWaitWakeIrp_1;
    assume {:nonnull} parentFdoExt_113 != 0;
    assume parentFdoExt_113 > 0;
    goto L34;

  anon25_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "FinishWaitWakeCompletionForFuncitonSuspend"} FinishWaitWakeCompletionForFuncitonSuspend#1(actual_parentFdoExt_113: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SendRemoteWakeNotificationIrp"} SendRemoteWakeNotificationIrp#0(actual_parentFdoExt_116: int, actual_functionPdoExt_58: int)
{
  var {:pointer} Tmp_1505: int;
  var {:pointer} parentFdoExt_116: int;
  var {:pointer} functionPdoExt_58: int;
  var vslice_dummy_var_454: int;
  var vslice_dummy_var_455: int;
  var vslice_dummy_var_958: int;
  var vslice_dummy_var_959: int;

  anon0:
    call {:si_unique_call 3019} vslice_dummy_var_454 := __HAVOC_malloc(4);
    parentFdoExt_116 := actual_parentFdoExt_116;
    functionPdoExt_58 := actual_functionPdoExt_58;
    assume {:nonnull} functionPdoExt_58 != 0;
    assume functionPdoExt_58 > 0;
    havoc Tmp_1505;
    assume {:nonnull} Tmp_1505 != 0;
    assume Tmp_1505 > 0;
    assume {:nonnull} parentFdoExt_116 != 0;
    assume parentFdoExt_116 > 0;
    havoc vslice_dummy_var_958;
    havoc vslice_dummy_var_959;
    call {:si_unique_call 3020} vslice_dummy_var_455 := sdv_IoCallDriver#0(vslice_dummy_var_958, vslice_dummy_var_959);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SendRemoteWakeNotificationIrp"} SendRemoteWakeNotificationIrp#0(actual_parentFdoExt_116: int, actual_functionPdoExt_58: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SendRemoteWakeNotificationIrp"} SendRemoteWakeNotificationIrp#1(actual_parentFdoExt_116: int, actual_functionPdoExt_58: int)
{
  var {:pointer} Tmp_1505: int;
  var {:pointer} parentFdoExt_116: int;
  var {:pointer} functionPdoExt_58: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_457: int;
  var vslice_dummy_var_960: int;
  var vslice_dummy_var_961: int;

  anon0:
    call {:si_unique_call 3021} vslice_dummy_var_456 := __HAVOC_malloc(4);
    parentFdoExt_116 := actual_parentFdoExt_116;
    functionPdoExt_58 := actual_functionPdoExt_58;
    assume {:nonnull} functionPdoExt_58 != 0;
    assume functionPdoExt_58 > 0;
    havoc Tmp_1505;
    assume {:nonnull} Tmp_1505 != 0;
    assume Tmp_1505 > 0;
    assume {:nonnull} parentFdoExt_116 != 0;
    assume parentFdoExt_116 > 0;
    havoc vslice_dummy_var_960;
    havoc vslice_dummy_var_961;
    call {:si_unique_call 3022} vslice_dummy_var_457 := sdv_IoCallDriver#1(vslice_dummy_var_960, vslice_dummy_var_961);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SendRemoteWakeNotificationIrp"} SendRemoteWakeNotificationIrp#1(actual_parentFdoExt_116: int, actual_functionPdoExt_58: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InvokeParentIdleCallbackWorker"} InvokeParentIdleCallbackWorker#0(actual_parentFdoExt_139: int, actual_context_25: int)
{
  var {:pointer} irpSp_37: int;
  var {:pointer} idleIrp_3: int;
  var {:pointer} Tmp_1995: int;
  var {:pointer} idleCallbackInfo_1: int;
  var {:scalar} irql_3: int;
  var {:pointer} parentFdoExt_139: int;
  var {:pointer} context_25: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_962: int;
  var vslice_dummy_var_963: int;
  var vslice_dummy_var_964: int;
  var vslice_dummy_var_965: int;

  anon0:
    call {:si_unique_call 3023} vslice_dummy_var_458 := __HAVOC_malloc(4);
    parentFdoExt_139 := actual_parentFdoExt_139;
    context_25 := actual_context_25;
    idleIrp_3 := context_25;
    call {:si_unique_call 3024} sdv_IoSetNextIrpStackLocation(0);
    call {:si_unique_call 3025} irpSp_37 := sdv_IoGetCurrentIrpStackLocation(idleIrp_3);
    assume {:nonnull} irpSp_37 != 0;
    assume irpSp_37 > 0;
    havoc idleCallbackInfo_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    havoc vslice_dummy_var_962;
    call {:si_unique_call 3026} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_962);
    goto L19;

  L19:
    call {:si_unique_call 3027} Tmp_1995 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1995 != 0;
    assume Tmp_1995 > 0;
    Mem_T.VOID[Tmp_1995] := irql_3;
    call {:si_unique_call 3028} IoAcquireCancelSpinLock(Tmp_1995);
    assume {:nonnull} Tmp_1995 != 0;
    assume Tmp_1995 > 0;
    irql_3 := Mem_T.VOID[Tmp_1995];
    assume {:nonnull} idleIrp_3 != 0;
    assume idleIrp_3 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} idleIrp_3 != 0;
    assume idleIrp_3 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(idleIrp_3)] := irql_3;
    assume {:nonnull} parentFdoExt_139 != 0;
    assume parentFdoExt_139 > 0;
    havoc vslice_dummy_var_963;
    call {:si_unique_call 3029} ParentIdleCancelRoutine(vslice_dummy_var_963, idleIrp_3);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    call {:si_unique_call 3030} vslice_dummy_var_459 := sdv_IoSetCancelRoutine(idleIrp_3, li2bplFunctionConstant829);
    call {:si_unique_call 3031} IoReleaseCancelSpinLock(irql_3);
    goto L1;

  anon10_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    havoc vslice_dummy_var_964;
    call {:si_unique_call 3032} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_964);
    goto L19;

  anon11_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    havoc vslice_dummy_var_965;
    call {:si_unique_call 3033} ParentIdleNotificationCallback#0(vslice_dummy_var_965);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "InvokeParentIdleCallbackWorker"} InvokeParentIdleCallbackWorker#0(actual_parentFdoExt_139: int, actual_context_25: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InvokeParentIdleCallbackWorker"} InvokeParentIdleCallbackWorker#1(actual_parentFdoExt_139: int, actual_context_25: int)
{
  var {:pointer} irpSp_37: int;
  var {:pointer} idleIrp_3: int;
  var {:pointer} Tmp_1995: int;
  var {:pointer} idleCallbackInfo_1: int;
  var {:scalar} irql_3: int;
  var {:pointer} parentFdoExt_139: int;
  var {:pointer} context_25: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_966: int;
  var vslice_dummy_var_967: int;
  var vslice_dummy_var_968: int;
  var vslice_dummy_var_969: int;

  anon0:
    call {:si_unique_call 3034} vslice_dummy_var_460 := __HAVOC_malloc(4);
    parentFdoExt_139 := actual_parentFdoExt_139;
    context_25 := actual_context_25;
    idleIrp_3 := context_25;
    call {:si_unique_call 3035} sdv_IoSetNextIrpStackLocation(0);
    call {:si_unique_call 3036} irpSp_37 := sdv_IoGetCurrentIrpStackLocation(idleIrp_3);
    assume {:nonnull} irpSp_37 != 0;
    assume irpSp_37 > 0;
    havoc idleCallbackInfo_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    havoc vslice_dummy_var_966;
    call {:si_unique_call 3037} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_966);
    goto L19;

  L19:
    call {:si_unique_call 3038} Tmp_1995 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1995 != 0;
    assume Tmp_1995 > 0;
    Mem_T.VOID[Tmp_1995] := irql_3;
    call {:si_unique_call 3039} IoAcquireCancelSpinLock(Tmp_1995);
    assume {:nonnull} Tmp_1995 != 0;
    assume Tmp_1995 > 0;
    irql_3 := Mem_T.VOID[Tmp_1995];
    assume {:nonnull} idleIrp_3 != 0;
    assume idleIrp_3 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} idleIrp_3 != 0;
    assume idleIrp_3 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(idleIrp_3)] := irql_3;
    assume {:nonnull} parentFdoExt_139 != 0;
    assume parentFdoExt_139 > 0;
    havoc vslice_dummy_var_967;
    call {:si_unique_call 3040} ParentIdleCancelRoutine(vslice_dummy_var_967, idleIrp_3);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    call {:si_unique_call 3041} vslice_dummy_var_461 := sdv_IoSetCancelRoutine(idleIrp_3, li2bplFunctionConstant829);
    call {:si_unique_call 3042} IoReleaseCancelSpinLock(irql_3);
    goto L1;

  anon10_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    havoc vslice_dummy_var_968;
    call {:si_unique_call 3043} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_968);
    goto L19;

  anon11_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    assume {:nonnull} idleCallbackInfo_1 != 0;
    assume idleCallbackInfo_1 > 0;
    havoc vslice_dummy_var_969;
    call {:si_unique_call 3044} ParentIdleNotificationCallback#1(vslice_dummy_var_969);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "InvokeParentIdleCallbackWorker"} InvokeParentIdleCallbackWorker#1(actual_parentFdoExt_139: int, actual_context_25: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallbackFdoWaitWake"} CallbackFdoWaitWake#0(actual_deviceObject_6: int, actual_minorFunction_5: int, actual_SD2_1: int, actual_context_17: int, actual_ioStatus_6: int)
{
  var {:scalar} powerState_2: int;
  var {:scalar} waitWakeFinishCompletion_1: int;
  var {:pointer} Tmp_1455: int;
  var {:pointer} Tmp_1456: int;
  var {:pointer} Tmp_1457: int;
  var {:scalar} sdv_486: int;
  var {:pointer} parentFdoExt_109: int;
  var {:scalar} completeChildIrps: int;
  var {:scalar} oldIrql_18: int;
  var {:scalar} status_82: int;
  var {:scalar} pwrState: int;
  var {:pointer} SD2_1: int;
  var {:pointer} context_17: int;
  var {:pointer} ioStatus_6: int;
  var vslice_dummy_var_462: int;
  var vslice_dummy_var_970: int;
  var vslice_dummy_var_971: int;

  anon0:
    call {:si_unique_call 3045} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 3046} vslice_dummy_var_462 := __HAVOC_malloc(4);
    call {:si_unique_call 3047} pwrState := __HAVOC_malloc(8);
    SD2_1 := actual_SD2_1;
    context_17 := actual_context_17;
    ioStatus_6 := actual_ioStatus_6;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    parentFdoExt_109 := context_17;
    status_82 := 0;
    completeChildIrps := 1;
    waitWakeFinishCompletion_1 := 0;
    assume {:nonnull} ioStatus_6 != 0;
    assume ioStatus_6 > 0;
    havoc status_82;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_82 >= 0;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} pwrState != 0;
    assume pwrState > 0;
    call {:si_unique_call 3048} status_82 := FdoSendSetPowerRequest#0(pwrState, 0, 0, parentFdoExt_109);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_82 == 259;
    goto L24;

  L24:
    call {:si_unique_call 3049} Tmp_1457 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1457 != 0;
    assume Tmp_1457 > 0;
    Mem_T.VOID[Tmp_1457] := oldIrql_18;
    call {:si_unique_call 3050} sdv_KeAcquireSpinLock(0, Tmp_1457);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1457 != 0;
    assume Tmp_1457 > 0;
    oldIrql_18 := Mem_T.VOID[Tmp_1457];
    call {:si_unique_call 3051} sdv_486 := KeReadStateEvent(0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_486 != 0;
    waitWakeFinishCompletion_1 := 1;
    goto L33;

  L33:
    call {:si_unique_call 3052} sdv_KeReleaseSpinLock(0, oldIrql_18);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} waitWakeFinishCompletion_1 != 0;
    call {:si_unique_call 3053} status_82 := AllocateWorker#0(parentFdoExt_109, li2bplFunctionConstant2823, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_82 >= 0;
    havoc Tmp_1455;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    havoc vslice_dummy_var_970;
    call {:si_unique_call 3054} WPP_RECORDER_SF_(vslice_dummy_var_970, 4, 3, 26, Tmp_1455);
    completeChildIrps := 0;
    goto L15;

  L15:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} completeChildIrps != 0;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    call {:si_unique_call 3055} FinishWaitWakeCompletionForFuncitonSuspend#0(parentFdoExt_109);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    call {:si_unique_call 3056} CompleteAllPdoWaitWakeIrps#0(parentFdoExt_109, status_82);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} completeChildIrps == 0;
    goto L1;

  anon37_Then:
    assume {:partition} 0 > status_82;
    goto L15;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} waitWakeFinishCompletion_1 == 0;
    goto L15;

  anon35_Then:
    assume {:partition} sdv_486 == 0;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    completeChildIrps := 0;
    goto L33;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:partition} status_82 != 259;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_82 != 17;
    havoc Tmp_1456;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    havoc vslice_dummy_var_971;
    call {:si_unique_call 3057} WPP_RECORDER_SF_(vslice_dummy_var_971, 2, 8, 27, Tmp_1456);
    goto L15;

  anon34_Then:
    assume {:partition} status_82 == 17;
    goto L24;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    goto L15;

  anon39_Then:
    assume {:partition} 0 > status_82;
    goto L15;
}



procedure {:origName "CallbackFdoWaitWake"} CallbackFdoWaitWake#0(actual_deviceObject_6: int, actual_minorFunction_5: int, actual_SD2_1: int, actual_context_17: int, actual_ioStatus_6: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CallbackFdoWaitWake"} CallbackFdoWaitWake#1(actual_deviceObject_6: int, actual_minorFunction_5: int, actual_SD2_1: int, actual_context_17: int, actual_ioStatus_6: int)
{
  var {:scalar} powerState_2: int;
  var {:scalar} waitWakeFinishCompletion_1: int;
  var {:pointer} Tmp_1455: int;
  var {:pointer} Tmp_1456: int;
  var {:pointer} Tmp_1457: int;
  var {:scalar} sdv_486: int;
  var {:pointer} parentFdoExt_109: int;
  var {:scalar} completeChildIrps: int;
  var {:scalar} oldIrql_18: int;
  var {:scalar} status_82: int;
  var {:scalar} pwrState: int;
  var {:pointer} SD2_1: int;
  var {:pointer} context_17: int;
  var {:pointer} ioStatus_6: int;
  var vslice_dummy_var_463: int;
  var vslice_dummy_var_972: int;
  var vslice_dummy_var_973: int;

  anon0:
    call {:si_unique_call 3058} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 3059} vslice_dummy_var_463 := __HAVOC_malloc(4);
    call {:si_unique_call 3060} pwrState := __HAVOC_malloc(8);
    SD2_1 := actual_SD2_1;
    context_17 := actual_context_17;
    ioStatus_6 := actual_ioStatus_6;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    parentFdoExt_109 := context_17;
    status_82 := 0;
    completeChildIrps := 1;
    waitWakeFinishCompletion_1 := 0;
    assume {:nonnull} ioStatus_6 != 0;
    assume ioStatus_6 > 0;
    havoc status_82;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_82 >= 0;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} pwrState != 0;
    assume pwrState > 0;
    call {:si_unique_call 3061} status_82 := FdoSendSetPowerRequest#1(pwrState, 0, 0, parentFdoExt_109);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_82 == 259;
    goto L24;

  L24:
    call {:si_unique_call 3062} Tmp_1457 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1457 != 0;
    assume Tmp_1457 > 0;
    Mem_T.VOID[Tmp_1457] := oldIrql_18;
    call {:si_unique_call 3063} sdv_KeAcquireSpinLock(0, Tmp_1457);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1457 != 0;
    assume Tmp_1457 > 0;
    oldIrql_18 := Mem_T.VOID[Tmp_1457];
    call {:si_unique_call 3064} sdv_486 := KeReadStateEvent(0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_486 != 0;
    waitWakeFinishCompletion_1 := 1;
    goto L33;

  L33:
    call {:si_unique_call 3065} sdv_KeReleaseSpinLock(0, oldIrql_18);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} waitWakeFinishCompletion_1 != 0;
    call {:si_unique_call 3066} status_82 := AllocateWorker#1(parentFdoExt_109, li2bplFunctionConstant2823, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_82 >= 0;
    havoc Tmp_1455;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    havoc vslice_dummy_var_972;
    call {:si_unique_call 3067} WPP_RECORDER_SF_(vslice_dummy_var_972, 4, 3, 26, Tmp_1455);
    completeChildIrps := 0;
    goto L15;

  L15:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} completeChildIrps != 0;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    call {:si_unique_call 3068} FinishWaitWakeCompletionForFuncitonSuspend#1(parentFdoExt_109);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    call {:si_unique_call 3069} CompleteAllPdoWaitWakeIrps#1(parentFdoExt_109, status_82);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} completeChildIrps == 0;
    goto L1;

  anon37_Then:
    assume {:partition} 0 > status_82;
    goto L15;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} waitWakeFinishCompletion_1 == 0;
    goto L15;

  anon35_Then:
    assume {:partition} sdv_486 == 0;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    completeChildIrps := 0;
    goto L33;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:partition} status_82 != 259;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_82 != 17;
    havoc Tmp_1456;
    assume {:nonnull} parentFdoExt_109 != 0;
    assume parentFdoExt_109 > 0;
    havoc vslice_dummy_var_973;
    call {:si_unique_call 3070} WPP_RECORDER_SF_(vslice_dummy_var_973, 2, 8, 27, Tmp_1456);
    goto L15;

  anon34_Then:
    assume {:partition} status_82 == 17;
    goto L24;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    goto L15;

  anon39_Then:
    assume {:partition} 0 > status_82;
    goto L15;
}



procedure {:origName "CallbackFdoWaitWake"} CallbackFdoWaitWake#1(actual_deviceObject_6: int, actual_minorFunction_5: int, actual_SD2_1: int, actual_context_17: int, actual_ioStatus_6: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionFdoSystemSetPower"} CompletionFdoSystemSetPower#0(actual_devObj_6: int, actual_irp_52: int, actual_context_6: int) returns (Tmp_1290: int)
{
  var {:scalar} enableTimer_1: int;
  var {:pointer} irpSp_22: int;
  var {:pointer} Tmp_1291: int;
  var {:pointer} Tmp_1292: int;
  var {:scalar} powerState_7: int;
  var {:pointer} Tmp_1293: int;
  var {:pointer} parentFdoExt_86: int;
  var {:scalar} oldIrql_10: int;
  var {:scalar} systemState: int;
  var {:scalar} sdv_419: int;
  var {:pointer} Tmp_1294: int;
  var {:scalar} completeIrp_1: int;
  var {:pointer} Tmp_1295: int;
  var {:pointer} Tmp_1296: int;
  var {:pointer} Tmp_1297: int;
  var {:scalar} status_67: int;
  var {:pointer} irp_52: int;
  var {:pointer} context_6: int;
  var boogieTmp: int;
  var vslice_dummy_var_464: int;
  var vslice_dummy_var_465: int;
  var vslice_dummy_var_974: int;
  var vslice_dummy_var_975: int;
  var vslice_dummy_var_976: int;
  var vslice_dummy_var_977: int;
  var vslice_dummy_var_978: int;
  var vslice_dummy_var_979: int;
  var vslice_dummy_var_980: int;
  var vslice_dummy_var_981: int;
  var vslice_dummy_var_982: int;

  anon0:
    call {:si_unique_call 3071} powerState_7 := __HAVOC_malloc(8);
    irp_52 := actual_irp_52;
    context_6 := actual_context_6;
    parentFdoExt_86 := context_6;
    status_67 := 0;
    completeIrp_1 := 0;
    enableTimer_1 := 0;
    call {:si_unique_call 3072} irpSp_22 := sdv_IoGetCurrentIrpStackLocation(irp_52);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 3073} sdv_IoMarkIrpPending(0);
    goto L20;

  L20:
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    havoc Tmp_1297;
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_974;
    havoc vslice_dummy_var_975;
    call {:si_unique_call 3074} WPP_RECORDER_SF_d(vslice_dummy_var_974, 2, 8, 15, Tmp_1297, vslice_dummy_var_975);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    havoc status_67;
    completeIrp_1 := 1;
    goto L63;

  L63:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} completeIrp_1 != 0;
    call {:si_unique_call 3075} PoStartNextPowerIrp(0);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    call {:si_unique_call 3076} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3077} UsbcReleaseRemoveLock(parentFdoExt_86, irp_52);
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    call {:si_unique_call 3078} vslice_dummy_var_464 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_86), irp_52);
    goto L64;

  L64:
    Tmp_1290 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon44_Then:
    assume {:partition} completeIrp_1 == 0;
    goto L64;

  anon42_Then:
    assume {:nonnull} irpSp_22 != 0;
    assume irpSp_22 > 0;
    havoc systemState;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} systemState != 1;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} systemState != 2;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} systemState != 3;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} systemState != 4;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} systemState != 5;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} systemState != 6;
    havoc Tmp_1296;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_976;
    call {:si_unique_call 3079} WPP_RECORDER_SF_L(vslice_dummy_var_976, 2, 8, 20, Tmp_1296, systemState);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    havoc status_67;
    completeIrp_1 := 1;
    goto L63;

  anon49_Then:
    assume {:partition} systemState == 6;
    goto L33;

  L33:
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    call {:si_unique_call 3080} boogieTmp := MapSystemStateToDeviceState(parentFdoExt_86, systemState);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_1292;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    havoc vslice_dummy_var_977;
    havoc vslice_dummy_var_978;
    call {:si_unique_call 3081} WPP_RECORDER_SF_LL(vslice_dummy_var_977, 4, 3, 16, Tmp_1292, systemState, vslice_dummy_var_978);
    call {:si_unique_call 3082} status_67 := FdoSendSetPowerRequest#0(powerState_7, li2bplFunctionConstant2818, irp_52, parentFdoExt_86);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_67 == 259;
    goto L63;

  anon43_Then:
    assume {:partition} status_67 != 259;
    havoc Tmp_1293;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_979;
    call {:si_unique_call 3083} WPP_RECORDER_SF_d(vslice_dummy_var_979, 2, 8, 17, Tmp_1293, status_67);
    completeIrp_1 := 1;
    goto L63;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:partition} systemState == 5;
    goto L33;

  anon51_Then:
    assume {:partition} systemState == 4;
    goto L33;

  anon52_Then:
    assume {:partition} systemState == 3;
    goto L33;

  anon53_Then:
    assume {:partition} systemState == 2;
    goto L33;

  anon54_Then:
    assume {:partition} systemState == 1;
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    havoc Tmp_1294;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    havoc vslice_dummy_var_980;
    havoc vslice_dummy_var_981;
    call {:si_unique_call 3084} WPP_RECORDER_SF_LL(vslice_dummy_var_980, 4, 3, 18, Tmp_1294, systemState, vslice_dummy_var_981);
    call {:si_unique_call 3085} status_67 := FdoSendSetPowerRequest#0(powerState_7, 0, 0, parentFdoExt_86);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_67 < 0;
    havoc Tmp_1295;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_982;
    call {:si_unique_call 3086} WPP_RECORDER_SF_d(vslice_dummy_var_982, 2, 8, 19, Tmp_1295, status_67);
    goto L95;

  L95:
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    havoc status_67;
    completeIrp_1 := 1;
    call {:si_unique_call 3087} Tmp_1291 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1291 != 0;
    assume Tmp_1291 > 0;
    Mem_T.VOID[Tmp_1291] := oldIrql_10;
    call {:si_unique_call 3088} sdv_KeAcquireSpinLock(0, Tmp_1291);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1291 != 0;
    assume Tmp_1291 > 0;
    oldIrql_10 := Mem_T.VOID[Tmp_1291];
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    call {:si_unique_call 3089} sdv_419 := KeReadStateEvent(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_419 != 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    enableTimer_1 := 1;
    goto L101;

  L101:
    call {:si_unique_call 3090} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} enableTimer_1 != 0;
    call {:si_unique_call 3091} vslice_dummy_var_465 := AllocateWorker#0(parentFdoExt_86, li2bplFunctionConstant2819, 0);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon48_Then:
    assume {:partition} enableTimer_1 == 0;
    goto L63;

  anon47_Then:
    assume {:partition} sdv_419 == 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    enableTimer_1 := 0;
    goto L101;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    goto L101;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} 0 <= status_67;
    goto L95;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    goto L20;
}



procedure {:origName "CompletionFdoSystemSetPower"} CompletionFdoSystemSetPower#0(actual_devObj_6: int, actual_irp_52: int, actual_context_6: int) returns (Tmp_1290: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionFdoSystemSetPower"} CompletionFdoSystemSetPower#1(actual_devObj_6: int, actual_irp_52: int, actual_context_6: int) returns (Tmp_1290: int)
{
  var {:scalar} enableTimer_1: int;
  var {:pointer} irpSp_22: int;
  var {:pointer} Tmp_1291: int;
  var {:pointer} Tmp_1292: int;
  var {:scalar} powerState_7: int;
  var {:pointer} Tmp_1293: int;
  var {:pointer} parentFdoExt_86: int;
  var {:scalar} oldIrql_10: int;
  var {:scalar} systemState: int;
  var {:scalar} sdv_419: int;
  var {:pointer} Tmp_1294: int;
  var {:scalar} completeIrp_1: int;
  var {:pointer} Tmp_1295: int;
  var {:pointer} Tmp_1296: int;
  var {:pointer} Tmp_1297: int;
  var {:scalar} status_67: int;
  var {:pointer} irp_52: int;
  var {:pointer} context_6: int;
  var boogieTmp: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_467: int;
  var vslice_dummy_var_983: int;
  var vslice_dummy_var_984: int;
  var vslice_dummy_var_985: int;
  var vslice_dummy_var_986: int;
  var vslice_dummy_var_987: int;
  var vslice_dummy_var_988: int;
  var vslice_dummy_var_989: int;
  var vslice_dummy_var_990: int;
  var vslice_dummy_var_991: int;

  anon0:
    call {:si_unique_call 3092} powerState_7 := __HAVOC_malloc(8);
    irp_52 := actual_irp_52;
    context_6 := actual_context_6;
    parentFdoExt_86 := context_6;
    status_67 := 0;
    completeIrp_1 := 0;
    enableTimer_1 := 0;
    call {:si_unique_call 3093} irpSp_22 := sdv_IoGetCurrentIrpStackLocation(irp_52);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 3094} sdv_IoMarkIrpPending(0);
    goto L20;

  L20:
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    havoc Tmp_1297;
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_983;
    havoc vslice_dummy_var_984;
    call {:si_unique_call 3095} WPP_RECORDER_SF_d(vslice_dummy_var_983, 2, 8, 15, Tmp_1297, vslice_dummy_var_984);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    havoc status_67;
    completeIrp_1 := 1;
    goto L63;

  L63:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} completeIrp_1 != 0;
    call {:si_unique_call 3096} PoStartNextPowerIrp(0);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    call {:si_unique_call 3097} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3098} UsbcReleaseRemoveLock(parentFdoExt_86, irp_52);
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    call {:si_unique_call 3099} vslice_dummy_var_466 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_86), irp_52);
    goto L64;

  L64:
    Tmp_1290 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon44_Then:
    assume {:partition} completeIrp_1 == 0;
    goto L64;

  anon42_Then:
    assume {:nonnull} irpSp_22 != 0;
    assume irpSp_22 > 0;
    havoc systemState;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} systemState != 1;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} systemState != 2;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} systemState != 3;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} systemState != 4;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} systemState != 5;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} systemState != 6;
    havoc Tmp_1296;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_985;
    call {:si_unique_call 3100} WPP_RECORDER_SF_L(vslice_dummy_var_985, 2, 8, 20, Tmp_1296, systemState);
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    havoc status_67;
    completeIrp_1 := 1;
    goto L63;

  anon49_Then:
    assume {:partition} systemState == 6;
    goto L33;

  L33:
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    call {:si_unique_call 3101} boogieTmp := MapSystemStateToDeviceState(parentFdoExt_86, systemState);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_1292;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    havoc vslice_dummy_var_986;
    havoc vslice_dummy_var_987;
    call {:si_unique_call 3102} WPP_RECORDER_SF_LL(vslice_dummy_var_986, 4, 3, 16, Tmp_1292, systemState, vslice_dummy_var_987);
    call {:si_unique_call 3103} status_67 := FdoSendSetPowerRequest#1(powerState_7, li2bplFunctionConstant2818, irp_52, parentFdoExt_86);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_67 == 259;
    goto L63;

  anon43_Then:
    assume {:partition} status_67 != 259;
    havoc Tmp_1293;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_988;
    call {:si_unique_call 3104} WPP_RECORDER_SF_d(vslice_dummy_var_988, 2, 8, 17, Tmp_1293, status_67);
    completeIrp_1 := 1;
    goto L63;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:partition} systemState == 5;
    goto L33;

  anon51_Then:
    assume {:partition} systemState == 4;
    goto L33;

  anon52_Then:
    assume {:partition} systemState == 3;
    goto L33;

  anon53_Then:
    assume {:partition} systemState == 2;
    goto L33;

  anon54_Then:
    assume {:partition} systemState == 1;
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    havoc Tmp_1294;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    assume {:nonnull} powerState_7 != 0;
    assume powerState_7 > 0;
    havoc vslice_dummy_var_989;
    havoc vslice_dummy_var_990;
    call {:si_unique_call 3105} WPP_RECORDER_SF_LL(vslice_dummy_var_989, 4, 3, 18, Tmp_1294, systemState, vslice_dummy_var_990);
    call {:si_unique_call 3106} status_67 := FdoSendSetPowerRequest#1(powerState_7, 0, 0, parentFdoExt_86);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_67 < 0;
    havoc Tmp_1295;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    havoc vslice_dummy_var_991;
    call {:si_unique_call 3107} WPP_RECORDER_SF_d(vslice_dummy_var_991, 2, 8, 19, Tmp_1295, status_67);
    goto L95;

  L95:
    assume {:nonnull} irp_52 != 0;
    assume irp_52 > 0;
    havoc status_67;
    completeIrp_1 := 1;
    call {:si_unique_call 3108} Tmp_1291 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1291 != 0;
    assume Tmp_1291 > 0;
    Mem_T.VOID[Tmp_1291] := oldIrql_10;
    call {:si_unique_call 3109} sdv_KeAcquireSpinLock(0, Tmp_1291);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1291 != 0;
    assume Tmp_1291 > 0;
    oldIrql_10 := Mem_T.VOID[Tmp_1291];
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    call {:si_unique_call 3110} sdv_419 := KeReadStateEvent(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_419 != 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    enableTimer_1 := 1;
    goto L101;

  L101:
    call {:si_unique_call 3111} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} enableTimer_1 != 0;
    call {:si_unique_call 3112} vslice_dummy_var_467 := AllocateWorker#1(parentFdoExt_86, li2bplFunctionConstant2819, 0);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon48_Then:
    assume {:partition} enableTimer_1 == 0;
    goto L63;

  anon47_Then:
    assume {:partition} sdv_419 == 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    assume {:nonnull} parentFdoExt_86 != 0;
    assume parentFdoExt_86 > 0;
    enableTimer_1 := 0;
    goto L101;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    goto L101;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} 0 <= status_67;
    goto L95;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    goto L20;
}



procedure {:origName "CompletionFdoSystemSetPower"} CompletionFdoSystemSetPower#1(actual_devObj_6: int, actual_irp_52: int, actual_context_6: int) returns (Tmp_1290: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionRemoteWakeNotication"} CompletionRemoteWakeNotication#0(actual_devObj_10: int, actual_irp_59: int, actual_context_11: int) returns (Tmp_1361: int)
{
  var {:pointer} Tmp_1362: int;
  var {:pointer} Tmp_1364: int;
  var {:pointer} suspendContext_6: int;
  var {:pointer} functionPdoExt_50: int;
  var {:pointer} Tmp_1365: int;
  var {:pointer} irp_59: int;
  var {:pointer} context_11: int;
  var vslice_dummy_var_468: int;
  var vslice_dummy_var_992: int;
  var vslice_dummy_var_993: int;
  var vslice_dummy_var_994: int;
  var vslice_dummy_var_995: int;
  var vslice_dummy_var_996: int;
  var vslice_dummy_var_997: int;
  var vslice_dummy_var_998: int;
  var vslice_dummy_var_999: int;
  var vslice_dummy_var_1000: int;

  anon0:
    irp_59 := actual_irp_59;
    context_11 := actual_context_11;
    functionPdoExt_50 := context_11;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    havoc suspendContext_6;
    havoc Tmp_1364;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    assume {:nonnull} irp_59 != 0;
    assume irp_59 > 0;
    havoc vslice_dummy_var_992;
    havoc vslice_dummy_var_993;
    havoc vslice_dummy_var_994;
    call {:si_unique_call 3113} WPP_RECORDER_SF_qqd(vslice_dummy_var_992, 4, 3, 78, Tmp_1364, vslice_dummy_var_993, irp_59, vslice_dummy_var_994);
    assume {:nonnull} suspendContext_6 != 0;
    assume suspendContext_6 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L34;

  L34:
    havoc Tmp_1362;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    havoc vslice_dummy_var_995;
    havoc vslice_dummy_var_996;
    call {:si_unique_call 3114} WPP_RECORDER_SF_q(vslice_dummy_var_995, 4, 3, 80, Tmp_1362, vslice_dummy_var_996);
    assume {:nonnull} suspendContext_6 != 0;
    assume suspendContext_6 > 0;
    havoc vslice_dummy_var_997;
    call {:si_unique_call 3115} IoQueueWorkItem#0(vslice_dummy_var_997, li2bplFunctionConstant2844, 1, functionPdoExt_50);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1361 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    havoc Tmp_1365;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    assume {:nonnull} suspendContext_6 != 0;
    assume suspendContext_6 > 0;
    havoc vslice_dummy_var_998;
    havoc vslice_dummy_var_999;
    havoc vslice_dummy_var_1000;
    call {:si_unique_call 3116} WPP_RECORDER_SF_qq(vslice_dummy_var_998, 2, 3, 79, Tmp_1365, vslice_dummy_var_999, vslice_dummy_var_1000);
    call {:si_unique_call 3117} vslice_dummy_var_468 := IoCancelIrp(0);
    goto L34;
}



procedure {:origName "CompletionRemoteWakeNotication"} CompletionRemoteWakeNotication#0(actual_devObj_10: int, actual_irp_59: int, actual_context_11: int) returns (Tmp_1361: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CompletionRemoteWakeNotication"} CompletionRemoteWakeNotication#1(actual_devObj_10: int, actual_irp_59: int, actual_context_11: int) returns (Tmp_1361: int)
{
  var {:pointer} Tmp_1362: int;
  var {:pointer} Tmp_1364: int;
  var {:pointer} suspendContext_6: int;
  var {:pointer} functionPdoExt_50: int;
  var {:pointer} Tmp_1365: int;
  var {:pointer} irp_59: int;
  var {:pointer} context_11: int;
  var vslice_dummy_var_469: int;
  var vslice_dummy_var_1001: int;
  var vslice_dummy_var_1002: int;
  var vslice_dummy_var_1003: int;
  var vslice_dummy_var_1004: int;
  var vslice_dummy_var_1005: int;
  var vslice_dummy_var_1006: int;
  var vslice_dummy_var_1007: int;
  var vslice_dummy_var_1008: int;
  var vslice_dummy_var_1009: int;

  anon0:
    irp_59 := actual_irp_59;
    context_11 := actual_context_11;
    functionPdoExt_50 := context_11;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    havoc suspendContext_6;
    havoc Tmp_1364;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    assume {:nonnull} irp_59 != 0;
    assume irp_59 > 0;
    havoc vslice_dummy_var_1001;
    havoc vslice_dummy_var_1002;
    havoc vslice_dummy_var_1003;
    call {:si_unique_call 3118} WPP_RECORDER_SF_qqd(vslice_dummy_var_1001, 4, 3, 78, Tmp_1364, vslice_dummy_var_1002, irp_59, vslice_dummy_var_1003);
    assume {:nonnull} suspendContext_6 != 0;
    assume suspendContext_6 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L34;

  L34:
    havoc Tmp_1362;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    havoc vslice_dummy_var_1004;
    havoc vslice_dummy_var_1005;
    call {:si_unique_call 3119} WPP_RECORDER_SF_q(vslice_dummy_var_1004, 4, 3, 80, Tmp_1362, vslice_dummy_var_1005);
    assume {:nonnull} suspendContext_6 != 0;
    assume suspendContext_6 > 0;
    havoc vslice_dummy_var_1006;
    call {:si_unique_call 3120} IoQueueWorkItem#1(vslice_dummy_var_1006, li2bplFunctionConstant2844, 1, functionPdoExt_50);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1361 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    havoc Tmp_1365;
    assume {:nonnull} functionPdoExt_50 != 0;
    assume functionPdoExt_50 > 0;
    assume {:nonnull} suspendContext_6 != 0;
    assume suspendContext_6 > 0;
    havoc vslice_dummy_var_1007;
    havoc vslice_dummy_var_1008;
    havoc vslice_dummy_var_1009;
    call {:si_unique_call 3121} WPP_RECORDER_SF_qq(vslice_dummy_var_1007, 2, 3, 79, Tmp_1365, vslice_dummy_var_1008, vslice_dummy_var_1009);
    call {:si_unique_call 3122} vslice_dummy_var_469 := IoCancelIrp(0);
    goto L34;
}



procedure {:origName "CompletionRemoteWakeNotication"} CompletionRemoteWakeNotication#1(actual_devObj_10: int, actual_irp_59: int, actual_context_11: int) returns (Tmp_1361: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.VOID, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentIdleNotificationRequestComplete"} ParentIdleNotificationRequestComplete#0(actual_DeviceObject_20: int, actual_Irp_11: int, actual_InputContext: int) returns (Tmp_1861: int)
{
  var {:scalar} idleFinishCompletion_3: int;
  var {:scalar} powerStatus: int;
  var {:pointer} Tmp_1862: int;
  var {:pointer} Tmp_1863: int;
  var {:pointer} context_21: int;
  var {:pointer} Tmp_1864: int;
  var {:pointer} sdv_611: int;
  var {:pointer} parentFdoExt_123: int;
  var {:scalar} ntStatus_31: int;
  var {:scalar} completeChildIrps_1: int;
  var {:scalar} oldIrql_23: int;
  var {:pointer} Tmp_1865: int;
  var {:scalar} sdv_613: int;
  var {:scalar} sdv_614: int;
  var {:pointer} Tmp_1866: int;
  var {:pointer} Tmp_1867: int;
  var {:scalar} pwrState_1: int;
  var {:pointer} Irp_11: int;
  var {:pointer} InputContext: int;
  var vslice_dummy_var_470: int;
  var vslice_dummy_var_471: int;
  var vslice_dummy_var_1010: int;
  var vslice_dummy_var_1011: int;
  var vslice_dummy_var_1012: int;
  var vslice_dummy_var_1013: int;
  var vslice_dummy_var_1014: int;
  var vslice_dummy_var_1015: int;
  var vslice_dummy_var_1016: int;
  var vslice_dummy_var_1017: int;

  anon0:
    call {:si_unique_call 3123} pwrState_1 := __HAVOC_malloc(8);
    Irp_11 := actual_Irp_11;
    InputContext := actual_InputContext;
    context_21 := 0;
    completeChildIrps_1 := 1;
    idleFinishCompletion_3 := 0;
    parentFdoExt_123 := InputContext;
    havoc Tmp_1863;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1010;
    havoc vslice_dummy_var_1011;
    havoc vslice_dummy_var_1012;
    call {:si_unique_call 3124} WPP_RECORDER_SF_qd(vslice_dummy_var_1010, 4, 7, 28, Tmp_1863, vslice_dummy_var_1011, vslice_dummy_var_1012);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc ntStatus_31;
    call {:si_unique_call 3125} ChangeIdleState(parentFdoExt_123, 3, 1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_1864;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1013;
    havoc vslice_dummy_var_1014;
    call {:si_unique_call 3126} WPP_RECORDER_SF_L(vslice_dummy_var_1013, 4, 7, 29, Tmp_1864, vslice_dummy_var_1014);
    assume {:nonnull} pwrState_1 != 0;
    assume pwrState_1 > 0;
    call {:si_unique_call 3127} powerStatus := FdoSendSetPowerRequest#0(pwrState_1, 0, 0, parentFdoExt_123);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} powerStatus != 259;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} powerStatus != 17;
    havoc Tmp_1866;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1015;
    call {:si_unique_call 3128} WPP_RECORDER_SF_d(vslice_dummy_var_1015, 2, 8, 30, Tmp_1866, powerStatus);
    ntStatus_31 := -1073741670;
    goto L58;

  L58:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} completeChildIrps_1 != 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L64;

  L64:
    call {:si_unique_call 3129} ChangeIdleState(parentFdoExt_123, 0, 1);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    call {:si_unique_call 3130} vslice_dummy_var_470 := KeSetEvent(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_123), 0, 0);
    call {:si_unique_call 3131} UsbcReleaseRemoveLock(parentFdoExt_123, Irp_11);
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    call {:si_unique_call 3132} vslice_dummy_var_471 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_123), Irp_11);
    goto L59;

  L59:
    Tmp_1861 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    call {:si_unique_call 3133} CompleteAllFunctionIdleIrps(parentFdoExt_123, ntStatus_31);
    goto L64;

  anon37_Then:
    assume {:partition} completeChildIrps_1 == 0;
    goto L59;

  anon36_Then:
    assume {:partition} powerStatus == 17;
    goto L43;

  L43:
    call {:si_unique_call 3134} sdv_611 := ExAllocatePoolWithTag(512, 12, -1016958123);
    context_21 := sdv_611;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} context_21 != 0;
    call {:si_unique_call 3135} sdv_RtlZeroMemory(0, 12);
    goto L78;

  L78:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} context_21 != 0;
    assume {:nonnull} context_21 != 0;
    assume context_21 > 0;
    assume {:nonnull} context_21 != 0;
    assume context_21 > 0;
    call {:si_unique_call 3136} Tmp_1865 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1865 != 0;
    assume Tmp_1865 > 0;
    Mem_T.VOID[Tmp_1865] := oldIrql_23;
    call {:si_unique_call 3137} sdv_KeAcquireSpinLock(0, Tmp_1865);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1865 != 0;
    assume Tmp_1865 > 0;
    oldIrql_23 := Mem_T.VOID[Tmp_1865];
    call {:si_unique_call 3138} sdv_614 := KeReadStateEvent(0);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} sdv_614 != 0;
    call {:si_unique_call 3139} sdv_613 := KeReadStateEvent(0);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} sdv_613 != 0;
    idleFinishCompletion_3 := 1;
    goto L99;

  L99:
    call {:si_unique_call 3140} sdv_KeReleaseSpinLock(0, oldIrql_23);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} idleFinishCompletion_3 != 0;
    call {:si_unique_call 3141} ntStatus_31 := AllocateWorker#0(parentFdoExt_123, li2bplFunctionConstant810, context_21);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} ntStatus_31 < 0;
    havoc Tmp_1867;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1016;
    call {:si_unique_call 3142} WPP_RECORDER_SF_d(vslice_dummy_var_1016, 2, 8, 32, Tmp_1867, ntStatus_31);
    call {:si_unique_call 3143} ExFreePoolWithTag(0, -1016958123);
    goto L58;

  anon43_Then:
    assume {:partition} 0 <= ntStatus_31;
    goto L103;

  L103:
    completeChildIrps_1 := 0;
    goto L58;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:partition} idleFinishCompletion_3 == 0;
    goto L103;

  anon41_Then:
    assume {:partition} sdv_613 == 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    context_21 := 0;
    goto L99;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} sdv_614 == 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    context_21 := 0;
    goto L99;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} context_21 == 0;
    ntStatus_31 := -1073741670;
    havoc Tmp_1862;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1017;
    call {:si_unique_call 3144} WPP_RECORDER_SF_d(vslice_dummy_var_1017, 2, 8, 31, Tmp_1862, ntStatus_31);
    goto L58;

  anon47_Then:
    assume {:partition} context_21 == 0;
    goto L78;

  anon35_Then:
    assume {:partition} powerStatus == 259;
    goto L43;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentIdleNotificationRequestComplete"} ParentIdleNotificationRequestComplete#0(actual_DeviceObject_20: int, actual_Irp_11: int, actual_InputContext: int) returns (Tmp_1861: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.VOID, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParentIdleNotificationRequestComplete"} ParentIdleNotificationRequestComplete#1(actual_DeviceObject_20: int, actual_Irp_11: int, actual_InputContext: int) returns (Tmp_1861: int)
{
  var {:scalar} idleFinishCompletion_3: int;
  var {:scalar} powerStatus: int;
  var {:pointer} Tmp_1862: int;
  var {:pointer} Tmp_1863: int;
  var {:pointer} context_21: int;
  var {:pointer} Tmp_1864: int;
  var {:pointer} sdv_611: int;
  var {:pointer} parentFdoExt_123: int;
  var {:scalar} ntStatus_31: int;
  var {:scalar} completeChildIrps_1: int;
  var {:scalar} oldIrql_23: int;
  var {:pointer} Tmp_1865: int;
  var {:scalar} sdv_613: int;
  var {:scalar} sdv_614: int;
  var {:pointer} Tmp_1866: int;
  var {:pointer} Tmp_1867: int;
  var {:scalar} pwrState_1: int;
  var {:pointer} Irp_11: int;
  var {:pointer} InputContext: int;
  var vslice_dummy_var_472: int;
  var vslice_dummy_var_473: int;
  var vslice_dummy_var_1018: int;
  var vslice_dummy_var_1019: int;
  var vslice_dummy_var_1020: int;
  var vslice_dummy_var_1021: int;
  var vslice_dummy_var_1022: int;
  var vslice_dummy_var_1023: int;
  var vslice_dummy_var_1024: int;
  var vslice_dummy_var_1025: int;

  anon0:
    call {:si_unique_call 3145} pwrState_1 := __HAVOC_malloc(8);
    Irp_11 := actual_Irp_11;
    InputContext := actual_InputContext;
    context_21 := 0;
    completeChildIrps_1 := 1;
    idleFinishCompletion_3 := 0;
    parentFdoExt_123 := InputContext;
    havoc Tmp_1863;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1018;
    havoc vslice_dummy_var_1019;
    havoc vslice_dummy_var_1020;
    call {:si_unique_call 3146} WPP_RECORDER_SF_qd(vslice_dummy_var_1018, 4, 7, 28, Tmp_1863, vslice_dummy_var_1019, vslice_dummy_var_1020);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc ntStatus_31;
    call {:si_unique_call 3147} ChangeIdleState(parentFdoExt_123, 3, 1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    havoc Tmp_1864;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1021;
    havoc vslice_dummy_var_1022;
    call {:si_unique_call 3148} WPP_RECORDER_SF_L(vslice_dummy_var_1021, 4, 7, 29, Tmp_1864, vslice_dummy_var_1022);
    assume {:nonnull} pwrState_1 != 0;
    assume pwrState_1 > 0;
    call {:si_unique_call 3149} powerStatus := FdoSendSetPowerRequest#1(pwrState_1, 0, 0, parentFdoExt_123);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} powerStatus != 259;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} powerStatus != 17;
    havoc Tmp_1866;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1023;
    call {:si_unique_call 3150} WPP_RECORDER_SF_d(vslice_dummy_var_1023, 2, 8, 30, Tmp_1866, powerStatus);
    ntStatus_31 := -1073741670;
    goto L58;

  L58:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} completeChildIrps_1 != 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L64;

  L64:
    call {:si_unique_call 3151} ChangeIdleState(parentFdoExt_123, 0, 1);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    call {:si_unique_call 3152} vslice_dummy_var_472 := KeSetEvent(idleCompleteEvent_PARENT_FDO_EXTENSION(parentFdoExt_123), 0, 0);
    call {:si_unique_call 3153} UsbcReleaseRemoveLock(parentFdoExt_123, Irp_11);
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    call {:si_unique_call 3154} vslice_dummy_var_473 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(parentFdoExt_123), Irp_11);
    goto L59;

  L59:
    Tmp_1861 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    call {:si_unique_call 3155} CompleteAllFunctionIdleIrps(parentFdoExt_123, ntStatus_31);
    goto L64;

  anon37_Then:
    assume {:partition} completeChildIrps_1 == 0;
    goto L59;

  anon36_Then:
    assume {:partition} powerStatus == 17;
    goto L43;

  L43:
    call {:si_unique_call 3156} sdv_611 := ExAllocatePoolWithTag(512, 12, -1016958123);
    context_21 := sdv_611;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} context_21 != 0;
    call {:si_unique_call 3157} sdv_RtlZeroMemory(0, 12);
    goto L78;

  L78:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} context_21 != 0;
    assume {:nonnull} context_21 != 0;
    assume context_21 > 0;
    assume {:nonnull} context_21 != 0;
    assume context_21 > 0;
    call {:si_unique_call 3158} Tmp_1865 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1865 != 0;
    assume Tmp_1865 > 0;
    Mem_T.VOID[Tmp_1865] := oldIrql_23;
    call {:si_unique_call 3159} sdv_KeAcquireSpinLock(0, Tmp_1865);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Tmp_1865 != 0;
    assume Tmp_1865 > 0;
    oldIrql_23 := Mem_T.VOID[Tmp_1865];
    call {:si_unique_call 3160} sdv_614 := KeReadStateEvent(0);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} sdv_614 != 0;
    call {:si_unique_call 3161} sdv_613 := KeReadStateEvent(0);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} sdv_613 != 0;
    idleFinishCompletion_3 := 1;
    goto L99;

  L99:
    call {:si_unique_call 3162} sdv_KeReleaseSpinLock(0, oldIrql_23);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} idleFinishCompletion_3 != 0;
    call {:si_unique_call 3163} ntStatus_31 := AllocateWorker#1(parentFdoExt_123, li2bplFunctionConstant810, context_21);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} ntStatus_31 < 0;
    havoc Tmp_1867;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1024;
    call {:si_unique_call 3164} WPP_RECORDER_SF_d(vslice_dummy_var_1024, 2, 8, 32, Tmp_1867, ntStatus_31);
    call {:si_unique_call 3165} ExFreePoolWithTag(0, -1016958123);
    goto L58;

  anon43_Then:
    assume {:partition} 0 <= ntStatus_31;
    goto L103;

  L103:
    completeChildIrps_1 := 0;
    goto L58;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:partition} idleFinishCompletion_3 == 0;
    goto L103;

  anon41_Then:
    assume {:partition} sdv_613 == 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    context_21 := 0;
    goto L99;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} sdv_614 == 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    context_21 := 0;
    goto L99;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} context_21 == 0;
    ntStatus_31 := -1073741670;
    havoc Tmp_1862;
    assume {:nonnull} parentFdoExt_123 != 0;
    assume parentFdoExt_123 > 0;
    havoc vslice_dummy_var_1025;
    call {:si_unique_call 3166} WPP_RECORDER_SF_d(vslice_dummy_var_1025, 2, 8, 31, Tmp_1862, ntStatus_31);
    goto L58;

  anon47_Then:
    assume {:partition} context_21 == 0;
    goto L78;

  anon35_Then:
    assume {:partition} powerStatus == 259;
    goto L43;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParentIdleNotificationRequestComplete"} ParentIdleNotificationRequestComplete#1(actual_DeviceObject_20: int, actual_Irp_11: int, actual_InputContext: int) returns (Tmp_1861: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.VOID, sdv_irql_previous_5, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation LegacyGroupInterfaces_loop_L44(in_i: int, in_Tmp_70: int, in_Tmp_71: int, in_interfaceListEntry: int, in_internalFunctionAssoc: int, in_Tmp_73: int, in_ntStatus: int, in_internalNumFunctions: int, in_numFuncIfaces: int, in_Tmp_76: int, in_Tmp_77: int, in_parentFdoExt_9: int) returns (out_i: int, out_Tmp_70: int, out_Tmp_71: int, out_interfaceListEntry: int, out_Tmp_73: int, out_ntStatus: int, out_Tmp_76: int, out_Tmp_77: int)
{

  entry:
    out_i, out_Tmp_70, out_Tmp_71, out_interfaceListEntry, out_Tmp_73, out_ntStatus, out_Tmp_76, out_Tmp_77 := in_i, in_Tmp_70, in_Tmp_71, in_interfaceListEntry, in_Tmp_73, in_ntStatus, in_Tmp_76, in_Tmp_77;
    goto L44, exit;

  exit:
    return;

  L44:
    goto anon17_Else;

  anon17_Else:
    assume {:partition} in_internalNumFunctions > out_i;
    call {:si_unique_call 3167} out_interfaceListEntry := GetFunctionInterfaceListBase(in_parentFdoExt_9, out_i, in_numFuncIfaces);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} out_interfaceListEntry != 0;
    assume out_interfaceListEntry > 0;
    havoc out_Tmp_76;
    assume {:nonnull} out_Tmp_76 != 0;
    assume out_Tmp_76 > 0;
    out_Tmp_71 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_76)];
    out_Tmp_73 := out_i;
    out_Tmp_77 := in_internalFunctionAssoc + out_Tmp_73 * 68;
    assume {:nonnull} in_numFuncIfaces != 0;
    assume in_numFuncIfaces > 0;
    call {:si_unique_call 3168} out_ntStatus := InitializeFunctionAssoc(in_parentFdoExt_9, out_Tmp_77, out_Tmp_71, Mem_T.VOID[in_numFuncIfaces]);
    goto anon19_Then;

  anon19_Then:
    assume {:partition} 0 <= out_ntStatus;
    goto L52;

  L52:
    out_Tmp_70 := out_i;
    assume {:nonnull} in_internalFunctionAssoc != 0;
    assume in_internalFunctionAssoc > 0;
    out_i := out_i + 1;
    goto L52_dummy;

  L52_dummy:
    call {:si_unique_call 3169} {:si_old_unique_call 1} out_i, out_Tmp_70, out_Tmp_71, out_interfaceListEntry, out_Tmp_73, out_ntStatus, out_Tmp_76, out_Tmp_77 := LegacyGroupInterfaces_loop_L44(out_i, out_Tmp_70, out_Tmp_71, out_interfaceListEntry, in_internalFunctionAssoc, out_Tmp_73, out_ntStatus, in_internalNumFunctions, in_numFuncIfaces, out_Tmp_76, out_Tmp_77, in_parentFdoExt_9);
    return;

  anon18_Then:
    goto L52;
}



procedure {:LoopProcedure} LegacyGroupInterfaces_loop_L44(in_i: int, in_Tmp_70: int, in_Tmp_71: int, in_interfaceListEntry: int, in_internalFunctionAssoc: int, in_Tmp_73: int, in_ntStatus: int, in_internalNumFunctions: int, in_numFuncIfaces: int, in_Tmp_76: int, in_Tmp_77: int, in_parentFdoExt_9: int) returns (out_i: int, out_Tmp_70: int, out_Tmp_71: int, out_interfaceListEntry: int, out_Tmp_73: int, out_ntStatus: int, out_Tmp_76: int, out_Tmp_77: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} out_ntStatus == 0 || out_ntStatus == -1073741670 || out_ntStatus == in_ntStatus;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation LegacyGroupInterfaces_loop_L19(in_i: int, in_numFuncIfaces: int, in_parentFdoExt_9: int, in_vslice_dummy_var_10: int) returns (out_i: int, out_vslice_dummy_var_10: int)
{

  entry:
    out_i, out_vslice_dummy_var_10 := in_i, in_vslice_dummy_var_10;
    goto L19, exit;

  exit:
    return;

  L19:
    call {:si_unique_call 3170} out_vslice_dummy_var_10 := GetFunctionInterfaceListBase(in_parentFdoExt_9, out_i, in_numFuncIfaces);
    goto anon15_Else;

  anon15_Else:
    out_i := out_i + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    call {:si_unique_call 3171} {:si_old_unique_call 1} out_i, out_vslice_dummy_var_10 := LegacyGroupInterfaces_loop_L19(out_i, in_numFuncIfaces, in_parentFdoExt_9, out_vslice_dummy_var_10);
    return;
}



procedure {:LoopProcedure} LegacyGroupInterfaces_loop_L19(in_i: int, in_numFuncIfaces: int, in_parentFdoExt_9: int, in_vslice_dummy_var_10: int) returns (out_i: int, out_vslice_dummy_var_10: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParentResetOrCyclePort_loop_L66(in_listEntry_1: int, in_sdv_55: int, in_sdv_58: int, in_dequeuedIrp: int, in_irpsToComplete: int, in_status_8: int, in_parentFdoExt_10: int, in_vslice_dummy_var_11: int) returns (out_listEntry_1: int, out_sdv_55: int, out_sdv_58: int, out_dequeuedIrp: int, out_vslice_dummy_var_11: int)
{

  entry:
    out_listEntry_1, out_sdv_55, out_sdv_58, out_dequeuedIrp, out_vslice_dummy_var_11 := in_listEntry_1, in_sdv_55, in_sdv_58, in_dequeuedIrp, in_vslice_dummy_var_11;
    goto L66, exit;

  exit:
    return;

  L66:
    call {:si_unique_call 3172} out_sdv_58 := sdv_IsListEmpty(0);
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_sdv_58 == 0;
    call {:si_unique_call 3173} out_listEntry_1 := RemoveHeadList(in_irpsToComplete);
    call {:si_unique_call 3174} out_sdv_55 := sdv_containing_record(out_listEntry_1, 88);
    out_dequeuedIrp := out_sdv_55;
    assume {:nonnull} out_dequeuedIrp != 0;
    assume out_dequeuedIrp > 0;
    call {:si_unique_call 3175} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3176} UsbcReleaseRemoveLock(in_parentFdoExt_10, out_dequeuedIrp);
    assume {:nonnull} in_parentFdoExt_10 != 0;
    assume in_parentFdoExt_10 > 0;
    call {:si_unique_call 3177} out_vslice_dummy_var_11 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(in_parentFdoExt_10), out_dequeuedIrp);
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    call {:si_unique_call 3178} {:si_old_unique_call 1} out_listEntry_1, out_sdv_55, out_sdv_58, out_dequeuedIrp, out_vslice_dummy_var_11 := ParentResetOrCyclePort_loop_L66(out_listEntry_1, out_sdv_55, out_sdv_58, out_dequeuedIrp, in_irpsToComplete, in_status_8, in_parentFdoExt_10, out_vslice_dummy_var_11);
    return;
}



procedure {:LoopProcedure} ParentResetOrCyclePort_loop_L66(in_listEntry_1: int, in_sdv_55: int, in_sdv_58: int, in_dequeuedIrp: int, in_irpsToComplete: int, in_status_8: int, in_parentFdoExt_10: int, in_vslice_dummy_var_11: int) returns (out_listEntry_1: int, out_sdv_55: int, out_sdv_58: int, out_dequeuedIrp: int, out_vslice_dummy_var_11: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_58 == 1 || out_sdv_58 == 0 || out_sdv_58 == in_sdv_58;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParentResetOrCyclePort_loop_L56(in_pendingIrpQueue: int, in_listEntry_1: int, in_sdv_56: int, in_irpsToComplete: int, in_vslice_dummy_var_12: int) returns (out_listEntry_1: int, out_sdv_56: int, out_vslice_dummy_var_12: int)
{

  entry:
    out_listEntry_1, out_sdv_56, out_vslice_dummy_var_12 := in_listEntry_1, in_sdv_56, in_vslice_dummy_var_12;
    goto L56, exit;

  exit:
    return;

  L56:
    call {:si_unique_call 3179} out_sdv_56 := sdv_IsListEmpty(0);
    goto anon19_Then;

  anon19_Then:
    assume {:partition} out_sdv_56 == 0;
    call {:si_unique_call 3180} out_listEntry_1 := RemoveHeadList(in_pendingIrpQueue);
    call {:si_unique_call 3181} out_vslice_dummy_var_12 := sdv_InsertTailList(in_irpsToComplete, out_listEntry_1);
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 3182} {:si_old_unique_call 1} out_listEntry_1, out_sdv_56, out_vslice_dummy_var_12 := ParentResetOrCyclePort_loop_L56(in_pendingIrpQueue, out_listEntry_1, out_sdv_56, in_irpsToComplete, out_vslice_dummy_var_12);
    return;
}



procedure {:LoopProcedure} ParentResetOrCyclePort_loop_L56(in_pendingIrpQueue: int, in_listEntry_1: int, in_sdv_56: int, in_irpsToComplete: int, in_vslice_dummy_var_12: int) returns (out_listEntry_1: int, out_sdv_56: int, out_vslice_dummy_var_12: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} out_sdv_56 == 1 || out_sdv_56 == 0 || out_sdv_56 == in_sdv_56;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation QueryParentDeviceRelations_loop_L68(in_i_1: int, in_Tmp_84: int, in_oldRelations: int, in_j: int, in_Tmp_94: int, in_Tmp_95: int, in_Tmp_105: int, in_newRelations: int, in_oldCount: int, in_Tmp_107: int, in_Tmp_111: int) returns (out_i_1: int, out_Tmp_84: int, out_j: int, out_Tmp_94: int, out_Tmp_95: int, out_Tmp_105: int, out_Tmp_107: int, out_Tmp_111: int)
{

  entry:
    out_i_1, out_Tmp_84, out_j, out_Tmp_94, out_Tmp_95, out_Tmp_105, out_Tmp_107, out_Tmp_111 := in_i_1, in_Tmp_84, in_j, in_Tmp_94, in_Tmp_95, in_Tmp_105, in_Tmp_107, in_Tmp_111;
    goto L68, exit;

  exit:
    return;

  L68:
    goto anon32_Else;

  anon32_Else:
    assume {:partition} in_oldCount > out_j;
    out_Tmp_84 := out_j;
    assume {:nonnull} in_oldRelations != 0;
    assume in_oldRelations > 0;
    havoc out_Tmp_95;
    assume {:nonnull} out_Tmp_95 != 0;
    assume out_Tmp_95 > 0;
    goto anon39_Else;

  anon39_Else:
    out_Tmp_94 := out_i_1;
    assume {:nonnull} in_newRelations != 0;
    assume in_newRelations > 0;
    havoc out_Tmp_107;
    out_Tmp_105 := out_j;
    assume {:nonnull} in_oldRelations != 0;
    assume in_oldRelations > 0;
    havoc out_Tmp_111;
    assume {:nonnull} out_Tmp_107 != 0;
    assume out_Tmp_107 > 0;
    assume {:nonnull} out_Tmp_111 != 0;
    assume out_Tmp_111 > 0;
    out_i_1 := out_i_1 + 1;
    out_j := out_j + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    call {:si_unique_call 3183} {:si_old_unique_call 1} out_i_1, out_Tmp_84, out_j, out_Tmp_94, out_Tmp_95, out_Tmp_105, out_Tmp_107, out_Tmp_111 := QueryParentDeviceRelations_loop_L68(out_i_1, out_Tmp_84, in_oldRelations, out_j, out_Tmp_94, out_Tmp_95, out_Tmp_105, in_newRelations, in_oldCount, out_Tmp_107, out_Tmp_111);
    return;
}



procedure {:LoopProcedure} QueryParentDeviceRelations_loop_L68(in_i_1: int, in_Tmp_84: int, in_oldRelations: int, in_j: int, in_Tmp_94: int, in_Tmp_95: int, in_Tmp_105: int, in_newRelations: int, in_oldCount: int, in_Tmp_107: int, in_Tmp_111: int) returns (out_i_1: int, out_Tmp_84: int, out_j: int, out_Tmp_94: int, out_Tmp_95: int, out_Tmp_105: int, out_Tmp_107: int, out_Tmp_111: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation QueryParentDeviceRelations_loop_L74(in_i_1: int, in_Tmp_85: int, in_Tmp_86: int, in_Tmp_88: int, in_Tmp_89: int, in_Tmp_90: int, in_Tmp_91: int, in_j: int, in_Tmp_92: int, in_Tmp_93: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_newRelations: int, in_Tmp_106: int, in_Tmp_108: int, in_Tmp_110: int, in_ourCount: int, in_parentFdoExt_12: int, in_vslice_dummy_var_15: int) returns (out_i_1: int, out_Tmp_85: int, out_Tmp_86: int, out_Tmp_88: int, out_Tmp_89: int, out_Tmp_90: int, out_Tmp_91: int, out_j: int, out_Tmp_92: int, out_Tmp_93: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_Tmp_106: int, out_Tmp_108: int, out_Tmp_110: int, out_vslice_dummy_var_15: int)
{

  entry:
    out_i_1, out_Tmp_85, out_Tmp_86, out_Tmp_88, out_Tmp_89, out_Tmp_90, out_Tmp_91, out_j, out_Tmp_92, out_Tmp_93, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_106, out_Tmp_108, out_Tmp_110, out_vslice_dummy_var_15 := in_i_1, in_Tmp_85, in_Tmp_86, in_Tmp_88, in_Tmp_89, in_Tmp_90, in_Tmp_91, in_j, in_Tmp_92, in_Tmp_93, in_Tmp_97, in_Tmp_98, in_Tmp_99, in_Tmp_100, in_Tmp_101, in_Tmp_106, in_Tmp_108, in_Tmp_110, in_vslice_dummy_var_15;
    goto L74, exit;

  exit:
    return;

  L74:
    goto anon33_Else;

  anon33_Else:
    assume {:partition} in_ourCount > out_j;
    out_Tmp_86 := out_j;
    assume {:nonnull} in_parentFdoExt_12 != 0;
    assume in_parentFdoExt_12 > 0;
    havoc out_Tmp_99;
    assume {:nonnull} out_Tmp_99 != 0;
    assume out_Tmp_99 > 0;
    havoc out_Tmp_90;
    assume {:nonnull} out_Tmp_90 != 0;
    assume out_Tmp_90 > 0;
    goto anon40_Else;

  anon40_Else:
    out_Tmp_89 := out_i_1;
    assume {:nonnull} in_newRelations != 0;
    assume in_newRelations > 0;
    havoc out_Tmp_101;
    out_Tmp_92 := out_j;
    assume {:nonnull} in_parentFdoExt_12 != 0;
    assume in_parentFdoExt_12 > 0;
    havoc out_Tmp_85;
    assume {:nonnull} out_Tmp_85 != 0;
    assume out_Tmp_85 > 0;
    havoc out_Tmp_88;
    assume {:nonnull} out_Tmp_101 != 0;
    assume out_Tmp_101 > 0;
    assume {:nonnull} out_Tmp_88 != 0;
    assume out_Tmp_88 > 0;
    out_Tmp_93 := out_i_1;
    assume {:nonnull} in_newRelations != 0;
    assume in_newRelations > 0;
    havoc out_Tmp_91;
    assume {:nonnull} out_Tmp_91 != 0;
    assume out_Tmp_91 > 0;
    havoc out_Tmp_106;
    out_Tmp_100 := out_i_1;
    assume {:nonnull} in_newRelations != 0;
    assume in_newRelations > 0;
    havoc out_Tmp_98;
    assume {:nonnull} out_Tmp_98 != 0;
    assume out_Tmp_98 > 0;
    havoc out_Tmp_110;
    assume {:nonnull} out_Tmp_106 != 0;
    assume out_Tmp_106 > 0;
    assume {:nonnull} out_Tmp_110 != 0;
    assume out_Tmp_110 > 0;
    out_Tmp_108 := out_i_1;
    assume {:nonnull} in_newRelations != 0;
    assume in_newRelations > 0;
    havoc out_Tmp_97;
    assume {:nonnull} out_Tmp_97 != 0;
    assume out_Tmp_97 > 0;
    call {:si_unique_call 3184} out_vslice_dummy_var_15 := sdv_ObReferenceObject(0);
    out_i_1 := out_i_1 + 1;
    out_j := out_j + 1;
    goto anon40_Else_dummy;

  anon40_Else_dummy:
    call {:si_unique_call 3185} {:si_old_unique_call 1} out_i_1, out_Tmp_85, out_Tmp_86, out_Tmp_88, out_Tmp_89, out_Tmp_90, out_Tmp_91, out_j, out_Tmp_92, out_Tmp_93, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_106, out_Tmp_108, out_Tmp_110, out_vslice_dummy_var_15 := QueryParentDeviceRelations_loop_L74(out_i_1, out_Tmp_85, out_Tmp_86, out_Tmp_88, out_Tmp_89, out_Tmp_90, out_Tmp_91, out_j, out_Tmp_92, out_Tmp_93, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, in_newRelations, out_Tmp_106, out_Tmp_108, out_Tmp_110, in_ourCount, in_parentFdoExt_12, out_vslice_dummy_var_15);
    return;
}



procedure {:LoopProcedure} QueryParentDeviceRelations_loop_L74(in_i_1: int, in_Tmp_85: int, in_Tmp_86: int, in_Tmp_88: int, in_Tmp_89: int, in_Tmp_90: int, in_Tmp_91: int, in_j: int, in_Tmp_92: int, in_Tmp_93: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_newRelations: int, in_Tmp_106: int, in_Tmp_108: int, in_Tmp_110: int, in_ourCount: int, in_parentFdoExt_12: int, in_vslice_dummy_var_15: int) returns (out_i_1: int, out_Tmp_85: int, out_Tmp_86: int, out_Tmp_88: int, out_Tmp_89: int, out_Tmp_90: int, out_Tmp_91: int, out_j: int, out_Tmp_92: int, out_Tmp_93: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_Tmp_106: int, out_Tmp_108: int, out_Tmp_110: int, out_vslice_dummy_var_15: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ChangeParentD3ColdStateLocked_loop_L15(in_i_2: int, in_Tmp_200: int, in_thisFuncPdoExt: int, in_devExt_8: int, in_Tmp_202: int, in_newState: int, in_Tmp_206: int, in_Tmp_207: int, in_devObj_1: int, in_Tmp_209: int, in_parentFdoExt_20: int) returns (out_i_2: int, out_Tmp_200: int, out_thisFuncPdoExt: int, out_devExt_8: int, out_Tmp_202: int, out_newState: int, out_Tmp_206: int, out_Tmp_207: int, out_devObj_1: int, out_Tmp_209: int)
{

  entry:
    out_i_2, out_Tmp_200, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209 := in_i_2, in_Tmp_200, in_thisFuncPdoExt, in_devExt_8, in_Tmp_202, in_newState, in_Tmp_206, in_Tmp_207, in_devObj_1, in_Tmp_209;
    goto L15, exit;

  exit:
    return;

  L15:
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    havoc out_Tmp_202;
    assume {:nonnull} out_Tmp_202 != 0;
    assume out_Tmp_202 > 0;
    goto anon22_Else;

  anon22_Else:
    out_Tmp_206 := out_i_2;
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    havoc out_Tmp_209;
    assume {:nonnull} out_Tmp_209 != 0;
    assume out_Tmp_209 > 0;
    havoc out_Tmp_200;
    assume {:nonnull} out_Tmp_200 != 0;
    assume out_Tmp_200 > 0;
    havoc out_devObj_1;
    assume {:nonnull} out_devObj_1 != 0;
    assume out_devObj_1 > 0;
    havoc out_devExt_8;
    assume {:nonnull} out_devExt_8 != 0;
    assume out_devExt_8 > 0;
    out_thisFuncPdoExt := functionPdoExt_DEVICE_EXTENSION(out_devExt_8);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_i_2 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_newState != 0;
    assume {:nonnull} out_thisFuncPdoExt != 0;
    assume out_thisFuncPdoExt > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    out_Tmp_207 := 1;
    goto L29;

  L29:
    out_newState := out_Tmp_207;
    goto L30;

  L30:
    out_i_2 := out_i_2 + 1;
    goto L30_dummy;

  L30_dummy:
    call {:si_unique_call 3186} {:si_old_unique_call 1} out_i_2, out_Tmp_200, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209 := ChangeParentD3ColdStateLocked_loop_L15(out_i_2, out_Tmp_200, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209, in_parentFdoExt_20);
    return;

  anon19_Then:
    goto L26;

  L26:
    out_Tmp_207 := 0;
    goto L29;

  anon18_Then:
    assume {:partition} out_newState == 0;
    goto L26;

  anon23_Then:
    assume {:partition} out_i_2 == 0;
    assume {:nonnull} out_thisFuncPdoExt != 0;
    assume out_thisFuncPdoExt > 0;
    havoc out_newState;
    goto L30;
}



procedure {:LoopProcedure} ChangeParentD3ColdStateLocked_loop_L15(in_i_2: int, in_Tmp_200: int, in_thisFuncPdoExt: int, in_devExt_8: int, in_Tmp_202: int, in_newState: int, in_Tmp_206: int, in_Tmp_207: int, in_devObj_1: int, in_Tmp_209: int, in_parentFdoExt_20: int) returns (out_i_2: int, out_Tmp_200: int, out_thisFuncPdoExt: int, out_devExt_8: int, out_Tmp_202: int, out_newState: int, out_Tmp_206: int, out_Tmp_207: int, out_devObj_1: int, out_Tmp_209: int);
  free ensures {:va_keep} out_Tmp_207 == 1 || out_Tmp_207 == 0 || out_Tmp_207 == in_Tmp_207;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ChangeParentD3ColdStateLocked_loop_L14(in_i_2: int, in_Tmp_200: int, in_Tmp_201: int, in_thisFuncPdoExt: int, in_devExt_8: int, in_Tmp_202: int, in_Tmp_203: int, in_Tmp_204: int, in_newState: int, in_Tmp_206: int, in_Tmp_207: int, in_devObj_1: int, in_Tmp_209: int, in_parentFdoExt_20: int, in_vslice_dummy_var_31: int) returns (out_i_2: int, out_Tmp_200: int, out_Tmp_201: int, out_thisFuncPdoExt: int, out_devExt_8: int, out_Tmp_202: int, out_Tmp_203: int, out_Tmp_204: int, out_newState: int, out_Tmp_206: int, out_Tmp_207: int, out_devObj_1: int, out_Tmp_209: int, out_vslice_dummy_var_31: int)
{
  var vslice_dummy_var_1026: int;
  var vslice_dummy_var_1027: int;

  entry:
    out_i_2, out_Tmp_200, out_Tmp_201, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_Tmp_203, out_Tmp_204, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209, out_vslice_dummy_var_31 := in_i_2, in_Tmp_200, in_Tmp_201, in_thisFuncPdoExt, in_devExt_8, in_Tmp_202, in_Tmp_203, in_Tmp_204, in_newState, in_Tmp_206, in_Tmp_207, in_devObj_1, in_Tmp_209, in_vslice_dummy_var_31;
    goto L14, exit;

  exit:
    return;

  L14:
    out_i_2 := 0;
    goto L15;

  L15:
    call {:si_unique_call 3190} out_i_2, out_Tmp_200, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209 := ChangeParentD3ColdStateLocked_loop_L15(out_i_2, out_Tmp_200, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209, in_parentFdoExt_20);
    goto L15_last;

  L15_last:
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    havoc out_Tmp_202;
    assume {:nonnull} out_Tmp_202 != 0;
    assume out_Tmp_202 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    out_Tmp_206 := out_i_2;
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    havoc out_Tmp_209;
    assume {:nonnull} out_Tmp_209 != 0;
    assume out_Tmp_209 > 0;
    havoc out_Tmp_200;
    assume {:nonnull} out_Tmp_200 != 0;
    assume out_Tmp_200 > 0;
    havoc out_devObj_1;
    assume {:nonnull} out_devObj_1 != 0;
    assume out_devObj_1 > 0;
    havoc out_devExt_8;
    assume {:nonnull} out_devExt_8 != 0;
    assume out_devExt_8 > 0;
    out_thisFuncPdoExt := functionPdoExt_DEVICE_EXTENSION(out_devExt_8);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_i_2 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_newState != 0;
    assume {:nonnull} out_thisFuncPdoExt != 0;
    assume out_thisFuncPdoExt > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    out_Tmp_207 := 1;
    goto L29;

  L29:
    out_newState := out_Tmp_207;
    goto L30;

  L30:
    out_i_2 := out_i_2 + 1;
    assume false;
    return;

  anon19_Then:
    goto L26;

  L26:
    out_Tmp_207 := 0;
    goto L29;

  anon18_Then:
    assume {:partition} out_newState == 0;
    goto L26;

  anon23_Then:
    assume {:partition} out_i_2 == 0;
    assume {:nonnull} out_thisFuncPdoExt != 0;
    assume out_thisFuncPdoExt > 0;
    havoc out_newState;
    goto L30;

  anon22_Then:
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    goto anon17_Else;

  anon17_Else:
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    call {:si_unique_call 3189} out_vslice_dummy_var_31 := KeReleaseMutex(0, 0);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} out_newState != 0;
    out_Tmp_201 := strConst__li2bpl3;
    goto L44;

  L44:
    havoc out_Tmp_204;
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    havoc vslice_dummy_var_1026;
    call {:si_unique_call 3187} WPP_RECORDER_SF_qs(vslice_dummy_var_1026, 4, 1, 72, out_Tmp_204, in_parentFdoExt_20, out_Tmp_201);
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    out_Tmp_203 := strConst__li2bpl4;
    assume {:nonnull} in_parentFdoExt_20 != 0;
    assume in_parentFdoExt_20 > 0;
    havoc vslice_dummy_var_1027;
    call {:si_unique_call 3188} AcquireMutex(D3ColdStateMutex_PARENT_FDO_EXTENSION(in_parentFdoExt_20), out_Tmp_203, vslice_dummy_var_1027);
    goto L44_dummy;

  L44_dummy:
    call {:si_unique_call 3191} {:si_old_unique_call 1} out_i_2, out_Tmp_200, out_Tmp_201, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_Tmp_203, out_Tmp_204, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209, out_vslice_dummy_var_31 := ChangeParentD3ColdStateLocked_loop_L14(out_i_2, out_Tmp_200, out_Tmp_201, out_thisFuncPdoExt, out_devExt_8, out_Tmp_202, out_Tmp_203, out_Tmp_204, out_newState, out_Tmp_206, out_Tmp_207, out_devObj_1, out_Tmp_209, in_parentFdoExt_20, out_vslice_dummy_var_31);
    return;

  anon20_Then:
    assume {:partition} out_newState == 0;
    out_Tmp_201 := strConst__li2bpl2;
    goto L44;
}



procedure {:LoopProcedure} ChangeParentD3ColdStateLocked_loop_L14(in_i_2: int, in_Tmp_200: int, in_Tmp_201: int, in_thisFuncPdoExt: int, in_devExt_8: int, in_Tmp_202: int, in_Tmp_203: int, in_Tmp_204: int, in_newState: int, in_Tmp_206: int, in_Tmp_207: int, in_devObj_1: int, in_Tmp_209: int, in_parentFdoExt_20: int, in_vslice_dummy_var_31: int) returns (out_i_2: int, out_Tmp_200: int, out_Tmp_201: int, out_thisFuncPdoExt: int, out_devExt_8: int, out_Tmp_202: int, out_Tmp_203: int, out_Tmp_204: int, out_newState: int, out_Tmp_206: int, out_Tmp_207: int, out_devObj_1: int, out_Tmp_209: int, out_vslice_dummy_var_31: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_Tmp_207 == 1 || out_Tmp_207 == 0 || out_Tmp_207 == in_Tmp_207;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParentSelectConfiguration_loop_L31(in_i_3: int, in_Tmp_212: int, in_Tmp_213: int, in_Tmp_215: int, in_length: int, in_sdv_106: int, in_Tmp_219: int, in_Tmp_220: int, in_interfaceInfo: int, in_index: int, in_interfaceList: int, in_numberOfInterfaces: int) returns (out_i_3: int, out_Tmp_212: int, out_Tmp_213: int, out_Tmp_215: int, out_length: int, out_sdv_106: int, out_Tmp_219: int, out_Tmp_220: int, out_interfaceInfo: int)
{

  entry:
    out_i_3, out_Tmp_212, out_Tmp_213, out_Tmp_215, out_length, out_sdv_106, out_Tmp_219, out_Tmp_220, out_interfaceInfo := in_i_3, in_Tmp_212, in_Tmp_213, in_Tmp_215, in_length, in_sdv_106, in_Tmp_219, in_Tmp_220, in_interfaceInfo;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon15_Else;

  anon15_Else:
    assume {:partition} in_numberOfInterfaces > out_i_3;
    out_interfaceInfo := in_index;
    assume {:nonnull} out_interfaceInfo != 0;
    assume out_interfaceInfo > 0;
    havoc out_length;
    call {:si_unique_call 3194} out_sdv_106 := ExAllocatePoolWithTag(512, out_length, -1016958123);
    out_Tmp_213 := out_i_3;
    assume {:nonnull} in_interfaceList != 0;
    assume in_interfaceList > 0;
    out_Tmp_212 := out_i_3;
    assume {:nonnull} in_interfaceList != 0;
    assume in_interfaceList > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    out_Tmp_220 := out_i_3;
    assume {:nonnull} in_interfaceList != 0;
    assume in_interfaceList > 0;
    call {:si_unique_call 3193} sdv_RtlZeroMemory(0, out_length);
    goto L44;

  L44:
    out_Tmp_219 := out_i_3;
    assume {:nonnull} in_interfaceList != 0;
    assume in_interfaceList > 0;
    goto anon18_Then;

  anon18_Then:
    out_Tmp_215 := out_i_3;
    assume {:nonnull} in_interfaceList != 0;
    assume in_interfaceList > 0;
    call {:si_unique_call 3192} sdv_RtlCopyMemory(0, 0, out_length);
    out_i_3 := out_i_3 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    call {:si_unique_call 3195} {:si_old_unique_call 1} out_i_3, out_Tmp_212, out_Tmp_213, out_Tmp_215, out_length, out_sdv_106, out_Tmp_219, out_Tmp_220, out_interfaceInfo := ParentSelectConfiguration_loop_L31(out_i_3, out_Tmp_212, out_Tmp_213, out_Tmp_215, out_length, out_sdv_106, out_Tmp_219, out_Tmp_220, out_interfaceInfo, in_index, in_interfaceList, in_numberOfInterfaces);
    return;

  anon17_Then:
    goto L44;
}



procedure {:LoopProcedure} ParentSelectConfiguration_loop_L31(in_i_3: int, in_Tmp_212: int, in_Tmp_213: int, in_Tmp_215: int, in_length: int, in_sdv_106: int, in_Tmp_219: int, in_Tmp_220: int, in_interfaceInfo: int, in_index: int, in_interfaceList: int, in_numberOfInterfaces: int) returns (out_i_3: int, out_Tmp_212: int, out_Tmp_213: int, out_Tmp_215: int, out_length: int, out_sdv_106: int, out_Tmp_219: int, out_Tmp_220: int, out_interfaceInfo: int);
  modifies alloc;
  free ensures {:va_keep} out_interfaceInfo == in_interfaceInfo || out_interfaceInfo == in_index;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetInterfaceList_loop_L22(in_i_4: int, in_Tmp_225: int, in_interfaceDesc: int, in_interfaceList_1: int, in_Tmp_233: int, in_interfaceNumber: int, in_configDesc_1: int) returns (out_i_4: int, out_Tmp_225: int, out_interfaceDesc: int, out_Tmp_233: int, out_interfaceNumber: int)
{

  entry:
    out_i_4, out_Tmp_225, out_interfaceDesc, out_Tmp_233, out_interfaceNumber := in_i_4, in_Tmp_225, in_interfaceDesc, in_Tmp_233, in_interfaceNumber;
    goto L22, exit;

  exit:
    return;

  L22:
    assume {:nonnull} in_configDesc_1 != 0;
    assume in_configDesc_1 > 0;
    goto anon17_Else;

  anon17_Else:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    out_interfaceDesc := 0;
    goto L29;

  L29:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_interfaceDesc != 0;
    out_Tmp_233 := out_i_4;
    assume {:nonnull} in_interfaceList_1 != 0;
    assume in_interfaceList_1 > 0;
    out_Tmp_225 := out_i_4;
    assume {:nonnull} in_interfaceList_1 != 0;
    assume in_interfaceList_1 > 0;
    out_i_4 := out_i_4 + 1;
    goto L30;

  L30:
    out_interfaceNumber := out_interfaceNumber + 1;
    goto anon21_Then;

  anon21_Then:
    assume {:partition} 256 >= out_interfaceNumber;
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    call {:si_unique_call 3197} {:si_old_unique_call 1} out_i_4, out_Tmp_225, out_interfaceDesc, out_Tmp_233, out_interfaceNumber := GetInterfaceList_loop_L22(out_i_4, out_Tmp_225, out_interfaceDesc, in_interfaceList_1, out_Tmp_233, out_interfaceNumber, in_configDesc_1);
    return;

  anon19_Then:
    assume {:partition} out_interfaceDesc == 0;
    goto L30;

  anon18_Then:
    call {:si_unique_call 3196} out_interfaceDesc := __HAVOC_malloc(1);
    goto L29;
}



procedure {:LoopProcedure} GetInterfaceList_loop_L22(in_i_4: int, in_Tmp_225: int, in_interfaceDesc: int, in_interfaceList_1: int, in_Tmp_233: int, in_interfaceNumber: int, in_configDesc_1: int) returns (out_i_4: int, out_Tmp_225: int, out_interfaceDesc: int, out_Tmp_233: int, out_interfaceNumber: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation StartParentFdo_loop_L121(in_Tmp_250: int, in_Tmp_251: int, in_Tmp_252: int, in_Tmp_253: int, in_Tmp_257: int, in_Tmp_260: int, in_Tmp_262: int, in_vidPidFlags: int, in_Tmp_265: int, in_Tmp_266: int, in_altStatus: int, in_Tmp_268: int, in_Tmp_270: int, in_status_17: int, in_configurationNum_2: int, in_vidPidRevFlags: int, in_retryCount: int, in_parentFdoExt_23: int, in_boogieTmp: int, in_vslice_dummy_var_38: int) returns (out_Tmp_250: int, out_Tmp_251: int, out_Tmp_252: int, out_Tmp_253: int, out_Tmp_257: int, out_Tmp_260: int, out_Tmp_262: int, out_Tmp_265: int, out_Tmp_266: int, out_altStatus: int, out_Tmp_268: int, out_Tmp_270: int, out_status_17: int, out_retryCount: int, out_boogieTmp: int, out_vslice_dummy_var_38: int)
{
  var vslice_dummy_var_1028: int;
  var vslice_dummy_var_1029: int;
  var vslice_dummy_var_1030: int;
  var vslice_dummy_var_1031: int;
  var vslice_dummy_var_1032: int;
  var vslice_dummy_var_1033: int;
  var vslice_dummy_var_1034: int;
  var vslice_dummy_var_1035: int;
  var vslice_dummy_var_1036: int;
  var vslice_dummy_var_1037: int;
  var vslice_dummy_var_1038: int;
  var vslice_dummy_var_1039: int;
  var vslice_dummy_var_1040: int;

  entry:
    out_Tmp_250, out_Tmp_251, out_Tmp_252, out_Tmp_253, out_Tmp_257, out_Tmp_260, out_Tmp_262, out_Tmp_265, out_Tmp_266, out_altStatus, out_Tmp_268, out_Tmp_270, out_status_17, out_retryCount, out_boogieTmp, out_vslice_dummy_var_38 := in_Tmp_250, in_Tmp_251, in_Tmp_252, in_Tmp_253, in_Tmp_257, in_Tmp_260, in_Tmp_262, in_Tmp_265, in_Tmp_266, in_altStatus, in_Tmp_268, in_Tmp_270, in_status_17, in_retryCount, in_boogieTmp, in_vslice_dummy_var_38;
    goto L121, exit;

  exit:
    return;

  L121:
    call {:si_unique_call 3198} out_status_17 := GetDeviceDescriptor(in_parentFdoExt_23);
    goto anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} out_status_17 < 0;
    goto L163;

  L163:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_status_17 < 0;
    havoc out_Tmp_262;
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc vslice_dummy_var_1040;
    call {:si_unique_call 3209} WPP_RECORDER_SF_dD(vslice_dummy_var_1040, 2, 8, 43, out_Tmp_262, out_retryCount, out_status_17);
    call {:si_unique_call 3210} StartCleanup(in_parentFdoExt_23);
    goto anon108_Else;

  anon108_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3208} out_vslice_dummy_var_38 := ResetDevice(in_parentFdoExt_23);
    goto anon109_Else;

  anon109_Else:
    assume {:partition} yogi_error != 1;
    out_retryCount := out_retryCount + 1;
    goto L167;

  L167:
    goto anon87_Then;

  anon87_Then:
    assume {:partition} 0 > out_status_17;
    goto anon88_Then;

  anon88_Then:
    assume {:partition} out_retryCount < 3;
    goto anon88_Then_dummy;

  anon88_Then_dummy:
    call {:si_unique_call 3211} {:si_old_unique_call 1} out_Tmp_250, out_Tmp_251, out_Tmp_252, out_Tmp_253, out_Tmp_257, out_Tmp_260, out_Tmp_262, out_Tmp_265, out_Tmp_266, out_altStatus, out_Tmp_268, out_Tmp_270, out_status_17, out_retryCount, out_boogieTmp, out_vslice_dummy_var_38 := StartParentFdo_loop_L121(out_Tmp_250, out_Tmp_251, out_Tmp_252, out_Tmp_253, out_Tmp_257, out_Tmp_260, out_Tmp_262, in_vidPidFlags, out_Tmp_265, out_Tmp_266, out_altStatus, out_Tmp_268, out_Tmp_270, out_status_17, in_configurationNum_2, in_vidPidRevFlags, out_retryCount, in_parentFdoExt_23, out_boogieTmp, out_vslice_dummy_var_38);
    return;

  anon86_Then:
    assume {:partition} 0 <= out_status_17;
    goto L167;

  anon79_Then:
    assume {:partition} 0 <= out_status_17;
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc vslice_dummy_var_1035;
    havoc vslice_dummy_var_1036;
    havoc vslice_dummy_var_1037;
    call {:si_unique_call 3204} SetRecorderLogIdentifier(vslice_dummy_var_1035, vslice_dummy_var_1036, vslice_dummy_var_1037);
    assume {:nonnull} in_configurationNum_2 != 0;
    assume in_configurationNum_2 > 0;
    call {:si_unique_call 3205} out_status_17 := GetConfigDescriptor(in_parentFdoExt_23, Mem_T.VOID[in_configurationNum_2]);
    goto anon100_Else;

  anon100_Else:
    assume {:partition} yogi_error != 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} out_status_17 < 0;
    goto L163;

  anon80_Then:
    assume {:partition} 0 <= out_status_17;
    call {:si_unique_call 3203} out_status_17 := GetParentFdoCapabilities(in_parentFdoExt_23);
    goto anon101_Else;

  anon101_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} out_status_17 < 0;
    goto L163;

  anon81_Then:
    assume {:partition} 0 <= out_status_17;
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc vslice_dummy_var_1031;
    havoc vslice_dummy_var_1032;
    havoc vslice_dummy_var_1033;
    havoc vslice_dummy_var_1034;
    call {:si_unique_call 3202} USBC_QueryKseDeviceFlags(vslice_dummy_var_1031, vslice_dummy_var_1032, vslice_dummy_var_1033, in_vidPidRevFlags, in_vidPidFlags, vslice_dummy_var_1034);
    assume {:nonnull} in_vidPidRevFlags != 0;
    assume in_vidPidRevFlags > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto L147;

  L147:
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    goto L148;

  L148:
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc out_Tmp_260;
    assume {:nonnull} out_Tmp_260 != 0;
    assume out_Tmp_260 > 0;
    out_Tmp_251 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(out_Tmp_260)];
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc vslice_dummy_var_1030;
    call {:si_unique_call 3201} out_boogieTmp := GetInterfaceList(in_parentFdoExt_23, vslice_dummy_var_1030, out_Tmp_251);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc out_Tmp_266;
    assume {:nonnull} out_Tmp_266 != 0;
    assume out_Tmp_266 > 0;
    havoc out_Tmp_253;
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc out_Tmp_265;
    assume {:nonnull} out_Tmp_265 != 0;
    assume out_Tmp_265 > 0;
    out_Tmp_270 := Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(out_Tmp_265)];
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc vslice_dummy_var_1038;
    havoc vslice_dummy_var_1039;
    call {:si_unique_call 3206} out_status_17 := ParentSelectConfiguration(in_parentFdoExt_23, vslice_dummy_var_1038, out_Tmp_270, vslice_dummy_var_1039, out_Tmp_253);
    goto anon102_Else;

  anon102_Else:
    assume {:partition} yogi_error != 1;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} out_status_17 < 0;
    out_altStatus := 0;
    call {:si_unique_call 3207} out_altStatus := ParentFindAltConfiguration(in_parentFdoExt_23, in_configurationNum_2);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} out_altStatus < 0;
    assume {:nonnull} in_configurationNum_2 != 0;
    assume in_configurationNum_2 > 0;
    out_Tmp_268 := Mem_T.VOID[in_configurationNum_2];
    havoc out_Tmp_257;
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc vslice_dummy_var_1028;
    call {:si_unique_call 3199} WPP_RECORDER_SF_d(vslice_dummy_var_1028, 2, 8, 42, out_Tmp_257, out_Tmp_268);
    goto L163;

  anon93_Then:
    assume {:partition} 0 <= out_altStatus;
    assume {:nonnull} in_configurationNum_2 != 0;
    assume in_configurationNum_2 > 0;
    out_Tmp_250 := Mem_T.VOID[in_configurationNum_2];
    havoc out_Tmp_252;
    assume {:nonnull} in_parentFdoExt_23 != 0;
    assume in_parentFdoExt_23 > 0;
    havoc vslice_dummy_var_1029;
    call {:si_unique_call 3200} WPP_RECORDER_SF_d(vslice_dummy_var_1029, 4, 1, 41, out_Tmp_252, out_Tmp_250);
    goto L163;

  anon85_Then:
    assume {:partition} 0 <= out_status_17;
    goto L163;

  anon84_Then:
    out_status_17 := -1073741668;
    goto L163;

  anon82_Then:
    assume {:nonnull} in_vidPidFlags != 0;
    assume in_vidPidFlags > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L148;

  anon83_Then:
    goto L147;
}



procedure {:LoopProcedure} StartParentFdo_loop_L121(in_Tmp_250: int, in_Tmp_251: int, in_Tmp_252: int, in_Tmp_253: int, in_Tmp_257: int, in_Tmp_260: int, in_Tmp_262: int, in_vidPidFlags: int, in_Tmp_265: int, in_Tmp_266: int, in_altStatus: int, in_Tmp_268: int, in_Tmp_270: int, in_status_17: int, in_configurationNum_2: int, in_vidPidRevFlags: int, in_retryCount: int, in_parentFdoExt_23: int, in_boogieTmp: int, in_vslice_dummy_var_38: int) returns (out_Tmp_250: int, out_Tmp_251: int, out_Tmp_252: int, out_Tmp_253: int, out_Tmp_257: int, out_Tmp_260: int, out_Tmp_262: int, out_Tmp_265: int, out_Tmp_266: int, out_altStatus: int, out_Tmp_268: int, out_Tmp_270: int, out_status_17: int, out_retryCount: int, out_boogieTmp: int, out_vslice_dummy_var_38: int);
  modifies Mem_T.VOID, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_altStatus == 0 || out_altStatus == -1073741811 || out_altStatus == -1073741823 || out_altStatus == 5 || out_altStatus == -1073741789 || out_altStatus == -1073741670 || out_altStatus == -1073741808 || out_altStatus == in_altStatus;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetConfigDescriptor_loop_L18(in_i_5: int, in_Tmp_285: int, in_Tmp_287: int, in_Tmp_288: int, in_validationFail: int, in_usbdStatus_1: int, in_bytesReturned_2: int, in_numAttempts: int, in_Tmp_289: int, in_status_20: int, in_parentFdoExt_26: int, in_configurationNum_3: int) returns (out_i_5: int, out_Tmp_285: int, out_Tmp_287: int, out_Tmp_288: int, out_Tmp_289: int, out_status_20: int)
{
  var vslice_dummy_var_1041: int;
  var vslice_dummy_var_1042: int;
  var vslice_dummy_var_1043: int;
  var vslice_dummy_var_1044: int;
  var vslice_dummy_var_1045: int;
  var vslice_dummy_var_1046: int;
  var vslice_dummy_var_1047: int;

  entry:
    out_i_5, out_Tmp_285, out_Tmp_287, out_Tmp_288, out_Tmp_289, out_status_20 := in_i_5, in_Tmp_285, in_Tmp_287, in_Tmp_288, in_Tmp_289, in_status_20;
    goto L18, exit;

  exit:
    return;

  L18:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} in_numAttempts >= out_i_5;
    call {:si_unique_call 3217} out_status_20 := TryGetConfigDescriptor(in_parentFdoExt_26, in_configurationNum_3, in_validationFail, in_usbdStatus_1, in_bytesReturned_2);
    goto anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Then;

  anon12_Then:
    assume {:partition} 0 > out_status_20;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} in_numAttempts > out_i_5;
    out_Tmp_289 := in_configurationNum_3;
    havoc out_Tmp_288;
    assume {:nonnull} in_parentFdoExt_26 != 0;
    assume in_parentFdoExt_26 > 0;
    havoc vslice_dummy_var_1041;
    call {:si_unique_call 3212} WPP_RECORDER_SF_ddd(vslice_dummy_var_1041, 2, 8, 27, out_Tmp_288, out_Tmp_289, out_status_20, out_i_5);
    assume {:nonnull} in_validationFail != 0;
    assume in_validationFail > 0;
    Mem_T.VOID[in_validationFail] := 0;
    goto L48;

  L48:
    out_i_5 := out_i_5 + 1;
    goto L48_dummy;

  L48_dummy:
    call {:si_unique_call 3218} {:si_old_unique_call 1} out_i_5, out_Tmp_285, out_Tmp_287, out_Tmp_288, out_Tmp_289, out_status_20 := GetConfigDescriptor_loop_L18(out_i_5, out_Tmp_285, out_Tmp_287, out_Tmp_288, in_validationFail, in_usbdStatus_1, in_bytesReturned_2, in_numAttempts, out_Tmp_289, out_status_20, in_parentFdoExt_26, in_configurationNum_3);
    return;

  anon13_Then:
    assume {:partition} out_i_5 >= in_numAttempts;
    assume {:nonnull} in_validationFail != 0;
    assume in_validationFail > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.VOID[in_validationFail] == 0;
    havoc out_Tmp_287;
    assume {:nonnull} in_parentFdoExt_26 != 0;
    assume in_parentFdoExt_26 > 0;
    havoc vslice_dummy_var_1042;
    call {:si_unique_call 3213} WPP_RECORDER_SF_dd(vslice_dummy_var_1042, 2, 8, 29, out_Tmp_287, in_numAttempts, out_status_20);
    assume {:nonnull} in_bytesReturned_2 != 0;
    assume in_bytesReturned_2 > 0;
    assume {:nonnull} in_parentFdoExt_26 != 0;
    assume in_parentFdoExt_26 > 0;
    assume {:nonnull} in_usbdStatus_1 != 0;
    assume in_usbdStatus_1 > 0;
    havoc vslice_dummy_var_1043;
    havoc vslice_dummy_var_1044;
    call {:si_unique_call 3214} RecordFailure(in_parentFdoExt_26, vslice_dummy_var_1043, out_status_20, Mem_T.VOID[in_usbdStatus_1], 536870913, -951892922, vslice_dummy_var_1044, Mem_T.VOID[in_bytesReturned_2]);
    goto L48;

  anon14_Then:
    assume {:partition} Mem_T.VOID[in_validationFail] != 0;
    havoc out_Tmp_285;
    assume {:nonnull} in_parentFdoExt_26 != 0;
    assume in_parentFdoExt_26 > 0;
    havoc vslice_dummy_var_1045;
    call {:si_unique_call 3215} WPP_RECORDER_SF_dD(vslice_dummy_var_1045, 2, 8, 28, out_Tmp_285, in_numAttempts, out_status_20);
    assume {:nonnull} in_bytesReturned_2 != 0;
    assume in_bytesReturned_2 > 0;
    assume {:nonnull} in_parentFdoExt_26 != 0;
    assume in_parentFdoExt_26 > 0;
    assume {:nonnull} in_usbdStatus_1 != 0;
    assume in_usbdStatus_1 > 0;
    havoc vslice_dummy_var_1046;
    havoc vslice_dummy_var_1047;
    call {:si_unique_call 3216} RecordFailure(in_parentFdoExt_26, vslice_dummy_var_1046, out_status_20, Mem_T.VOID[in_usbdStatus_1], 536870918, -1018931642, vslice_dummy_var_1047, Mem_T.VOID[in_bytesReturned_2]);
    goto L48;
}



procedure {:LoopProcedure} GetConfigDescriptor_loop_L18(in_i_5: int, in_Tmp_285: int, in_Tmp_287: int, in_Tmp_288: int, in_validationFail: int, in_usbdStatus_1: int, in_bytesReturned_2: int, in_numAttempts: int, in_Tmp_289: int, in_status_20: int, in_parentFdoExt_26: int, in_configurationNum_3: int) returns (out_i_5: int, out_Tmp_285: int, out_Tmp_287: int, out_Tmp_288: int, out_Tmp_289: int, out_status_20: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_Tmp_289 == in_Tmp_289 || out_Tmp_289 == in_configurationNum_3;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PrepareParentFDOForRemove_loop_L61(in_Tmp_296: int, in_Tmp_297: int, in_devExt_9: int, in_Tmp_298: int, in_Tmp_299: int, in_Tmp_300: int, in_Tmp_301: int, in_Tmp_302: int, in_Tmp_303: int, in_Tmp_304: int, in_oldIrql_4: int, in_functionPdoExt_8: int, in_Tmp_308: int, in_Tmp_310: int, in_Tmp_311: int, in_devObj_2: int, in_parentFdoExt_28: int) returns (out_Tmp_296: int, out_Tmp_297: int, out_devExt_9: int, out_Tmp_298: int, out_Tmp_299: int, out_Tmp_300: int, out_Tmp_301: int, out_Tmp_302: int, out_Tmp_303: int, out_Tmp_304: int, out_oldIrql_4: int, out_functionPdoExt_8: int, out_Tmp_308: int, out_Tmp_310: int, out_Tmp_311: int, out_devObj_2: int)
{

  entry:
    out_Tmp_296, out_Tmp_297, out_devExt_9, out_Tmp_298, out_Tmp_299, out_Tmp_300, out_Tmp_301, out_Tmp_302, out_Tmp_303, out_Tmp_304, out_oldIrql_4, out_functionPdoExt_8, out_Tmp_308, out_Tmp_310, out_Tmp_311, out_devObj_2 := in_Tmp_296, in_Tmp_297, in_devExt_9, in_Tmp_298, in_Tmp_299, in_Tmp_300, in_Tmp_301, in_Tmp_302, in_Tmp_303, in_Tmp_304, in_oldIrql_4, in_functionPdoExt_8, in_Tmp_308, in_Tmp_310, in_Tmp_311, in_devObj_2;
    goto L61, exit;

  exit:
    return;

  L61:
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    havoc out_Tmp_311;
    assume {:nonnull} out_Tmp_311 != 0;
    assume out_Tmp_311 > 0;
    goto anon44_Else;

  anon44_Else:
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    havoc out_Tmp_301;
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    havoc out_Tmp_310;
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    assume {:nonnull} out_Tmp_301 != 0;
    assume out_Tmp_301 > 0;
    assume {:nonnull} out_Tmp_310 != 0;
    assume out_Tmp_310 > 0;
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    havoc out_Tmp_308;
    assume {:nonnull} out_Tmp_308 != 0;
    assume out_Tmp_308 > 0;
    havoc out_Tmp_297;
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    havoc out_Tmp_299;
    assume {:nonnull} out_Tmp_299 != 0;
    assume out_Tmp_299 > 0;
    havoc out_Tmp_303;
    assume {:nonnull} out_Tmp_303 != 0;
    assume out_Tmp_303 > 0;
    havoc out_devObj_2;
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    havoc out_Tmp_304;
    assume {:nonnull} out_Tmp_304 != 0;
    assume out_Tmp_304 > 0;
    havoc out_Tmp_300;
    assume {:nonnull} in_parentFdoExt_28 != 0;
    assume in_parentFdoExt_28 > 0;
    havoc out_Tmp_298;
    assume {:nonnull} out_Tmp_298 != 0;
    assume out_Tmp_298 > 0;
    havoc out_Tmp_296;
    assume {:nonnull} out_Tmp_296 != 0;
    assume out_Tmp_296 > 0;
    assume {:nonnull} out_devObj_2 != 0;
    assume out_devObj_2 > 0;
    havoc out_devExt_9;
    assume {:nonnull} out_devExt_9 != 0;
    assume out_devExt_9 > 0;
    out_functionPdoExt_8 := functionPdoExt_DEVICE_EXTENSION(out_devExt_9);
    call {:si_unique_call 3219} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    call {:si_unique_call 3220} FreeFunctionPDOResources(out_functionPdoExt_8);
    call {:si_unique_call 3221} out_Tmp_302 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_302 != 0;
    assume out_Tmp_302 > 0;
    Mem_T.VOID[out_Tmp_302] := out_oldIrql_4;
    call {:si_unique_call 3222} sdv_KeAcquireSpinLock(0, out_Tmp_302);
    goto anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} out_Tmp_302 != 0;
    assume out_Tmp_302 > 0;
    out_oldIrql_4 := Mem_T.VOID[out_Tmp_302];
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    call {:si_unique_call 3223} {:si_old_unique_call 1} out_Tmp_296, out_Tmp_297, out_devExt_9, out_Tmp_298, out_Tmp_299, out_Tmp_300, out_Tmp_301, out_Tmp_302, out_Tmp_303, out_Tmp_304, out_oldIrql_4, out_functionPdoExt_8, out_Tmp_308, out_Tmp_310, out_Tmp_311, out_devObj_2 := PrepareParentFDOForRemove_loop_L61(out_Tmp_296, out_Tmp_297, out_devExt_9, out_Tmp_298, out_Tmp_299, out_Tmp_300, out_Tmp_301, out_Tmp_302, out_Tmp_303, out_Tmp_304, out_oldIrql_4, out_functionPdoExt_8, out_Tmp_308, out_Tmp_310, out_Tmp_311, out_devObj_2, in_parentFdoExt_28);
    return;
}



procedure {:LoopProcedure} PrepareParentFDOForRemove_loop_L61(in_Tmp_296: int, in_Tmp_297: int, in_devExt_9: int, in_Tmp_298: int, in_Tmp_299: int, in_Tmp_300: int, in_Tmp_301: int, in_Tmp_302: int, in_Tmp_303: int, in_Tmp_304: int, in_oldIrql_4: int, in_functionPdoExt_8: int, in_Tmp_308: int, in_Tmp_310: int, in_Tmp_311: int, in_devObj_2: int, in_parentFdoExt_28: int) returns (out_Tmp_296: int, out_Tmp_297: int, out_devExt_9: int, out_Tmp_298: int, out_Tmp_299: int, out_Tmp_300: int, out_Tmp_301: int, out_Tmp_302: int, out_Tmp_303: int, out_Tmp_304: int, out_oldIrql_4: int, out_functionPdoExt_8: int, out_Tmp_308: int, out_Tmp_310: int, out_Tmp_311: int, out_devObj_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.VOID, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_5);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation FreeInterfaceList_loop_L13(in_i_6: int, in_Tmp_316: int, in_Tmp_317: int, in_Tmp_319: int, in_Tmp_320: int, in_Tmp_321: int, in_iface: int, in_parentFdoExt_30: int) returns (out_i_6: int, out_Tmp_316: int, out_Tmp_317: int, out_Tmp_319: int, out_Tmp_320: int, out_Tmp_321: int, out_iface: int)
{

  entry:
    out_i_6, out_Tmp_316, out_Tmp_317, out_Tmp_319, out_Tmp_320, out_Tmp_321, out_iface := in_i_6, in_Tmp_316, in_Tmp_317, in_Tmp_319, in_Tmp_320, in_Tmp_321, in_iface;
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:nonnull} in_parentFdoExt_30 != 0;
    assume in_parentFdoExt_30 > 0;
    havoc out_Tmp_317;
    assume {:nonnull} out_Tmp_317 != 0;
    assume out_Tmp_317 > 0;
    goto anon14_Else;

  anon14_Else:
    out_Tmp_321 := out_i_6;
    assume {:nonnull} in_parentFdoExt_30 != 0;
    assume in_parentFdoExt_30 > 0;
    havoc out_Tmp_316;
    assume {:nonnull} out_Tmp_316 != 0;
    assume out_Tmp_316 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    out_Tmp_319 := out_i_6;
    assume {:nonnull} in_parentFdoExt_30 != 0;
    assume in_parentFdoExt_30 > 0;
    havoc out_Tmp_320;
    out_iface := out_Tmp_320 + out_Tmp_319 * 8;
    call {:si_unique_call 3224} ExFreePoolWithTag(0, -1016958123);
    assume {:nonnull} out_iface != 0;
    assume out_iface > 0;
    goto L16;

  L16:
    out_i_6 := out_i_6 + 1;
    goto L16_dummy;

  L16_dummy:
    call {:si_unique_call 3225} {:si_old_unique_call 1} out_i_6, out_Tmp_316, out_Tmp_317, out_Tmp_319, out_Tmp_320, out_Tmp_321, out_iface := FreeInterfaceList_loop_L13(out_i_6, out_Tmp_316, out_Tmp_317, out_Tmp_319, out_Tmp_320, out_Tmp_321, out_iface, in_parentFdoExt_30);
    return;

  anon15_Then:
    goto L16;
}



procedure {:LoopProcedure} FreeInterfaceList_loop_L13(in_i_6: int, in_Tmp_316: int, in_Tmp_317: int, in_Tmp_319: int, in_Tmp_320: int, in_Tmp_321: int, in_iface: int, in_parentFdoExt_30: int) returns (out_i_6: int, out_Tmp_316: int, out_Tmp_317: int, out_Tmp_319: int, out_Tmp_320: int, out_Tmp_321: int, out_iface: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation BuildSelectConfigUrb_loop_L64(in_Tmp_417: int, in_Tmp_418: int, in_numEndpoints: int, in_j_1: int, in_iface_1: int, in_Tmp_425: int, in_Tmp_427: int) returns (out_Tmp_417: int, out_Tmp_418: int, out_j_1: int, out_Tmp_425: int, out_Tmp_427: int)
{

  entry:
    out_Tmp_417, out_Tmp_418, out_j_1, out_Tmp_425, out_Tmp_427 := in_Tmp_417, in_Tmp_418, in_j_1, in_Tmp_425, in_Tmp_427;
    goto L64, exit;

  exit:
    return;

  L64:
    goto anon14_Else;

  anon14_Else:
    assume {:partition} in_numEndpoints > out_j_1;
    out_Tmp_425 := out_j_1;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    havoc out_Tmp_418;
    assume {:nonnull} out_Tmp_418 != 0;
    assume out_Tmp_418 > 0;
    out_Tmp_417 := out_j_1;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    havoc out_Tmp_427;
    assume {:nonnull} out_Tmp_427 != 0;
    assume out_Tmp_427 > 0;
    out_j_1 := out_j_1 + 1;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    call {:si_unique_call 3226} {:si_old_unique_call 1} out_Tmp_417, out_Tmp_418, out_j_1, out_Tmp_425, out_Tmp_427 := BuildSelectConfigUrb_loop_L64(out_Tmp_417, out_Tmp_418, in_numEndpoints, out_j_1, in_iface_1, out_Tmp_425, out_Tmp_427);
    return;
}



procedure {:LoopProcedure} BuildSelectConfigUrb_loop_L64(in_Tmp_417: int, in_Tmp_418: int, in_numEndpoints: int, in_j_1: int, in_iface_1: int, in_Tmp_425: int, in_Tmp_427: int) returns (out_Tmp_417: int, out_Tmp_418: int, out_j_1: int, out_Tmp_425: int, out_Tmp_427: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation BuildSelectConfigUrb_loop_L53(in_i_7: int, in_interfaceDescriptor: int, in_Tmp_417: int, in_Tmp_418: int, in_Tmp_420: int, in_numEndpoints: int, in_j_1: int, in_iface_1: int, in_Tmp_425: int, in_Tmp_427: int, in_InterfaceList: int, in_NumberOfInterfaces: int) returns (out_i_7: int, out_interfaceDescriptor: int, out_Tmp_417: int, out_Tmp_418: int, out_Tmp_420: int, out_numEndpoints: int, out_j_1: int, out_Tmp_425: int, out_Tmp_427: int)
{

  entry:
    out_i_7, out_interfaceDescriptor, out_Tmp_417, out_Tmp_418, out_Tmp_420, out_numEndpoints, out_j_1, out_Tmp_425, out_Tmp_427 := in_i_7, in_interfaceDescriptor, in_Tmp_417, in_Tmp_418, in_Tmp_420, in_numEndpoints, in_j_1, in_Tmp_425, in_Tmp_427;
    goto L53, exit;

  exit:
    return;

  L53:
    goto anon13_Else;

  anon13_Else:
    assume {:partition} in_NumberOfInterfaces > out_i_7;
    out_Tmp_420 := out_i_7;
    assume {:nonnull} in_InterfaceList != 0;
    assume in_InterfaceList > 0;
    havoc out_interfaceDescriptor;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    assume {:nonnull} out_interfaceDescriptor != 0;
    assume out_interfaceDescriptor > 0;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    assume {:nonnull} out_interfaceDescriptor != 0;
    assume out_interfaceDescriptor > 0;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    assume {:nonnull} out_interfaceDescriptor != 0;
    assume out_interfaceDescriptor > 0;
    assume {:nonnull} out_interfaceDescriptor != 0;
    assume out_interfaceDescriptor > 0;
    havoc out_numEndpoints;
    out_j_1 := 0;
    goto L64;

  L64:
    call {:si_unique_call 3227} out_Tmp_417, out_Tmp_418, out_j_1, out_Tmp_425, out_Tmp_427 := BuildSelectConfigUrb_loop_L64(out_Tmp_417, out_Tmp_418, out_numEndpoints, out_j_1, in_iface_1, out_Tmp_425, out_Tmp_427);
    goto L64_last;

  L64_last:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} out_numEndpoints > out_j_1;
    out_Tmp_425 := out_j_1;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    havoc out_Tmp_418;
    assume {:nonnull} out_Tmp_418 != 0;
    assume out_Tmp_418 > 0;
    out_Tmp_417 := out_j_1;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    havoc out_Tmp_427;
    assume {:nonnull} out_Tmp_427 != 0;
    assume out_Tmp_427 > 0;
    out_j_1 := out_j_1 + 1;
    assume false;
    return;

  anon14_Then:
    assume {:partition} out_j_1 >= out_numEndpoints;
    assume {:nonnull} in_iface_1 != 0;
    assume in_iface_1 > 0;
    out_i_7 := out_i_7 + 1;
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    call {:si_unique_call 3228} {:si_old_unique_call 1} out_i_7, out_interfaceDescriptor, out_Tmp_417, out_Tmp_418, out_Tmp_420, out_numEndpoints, out_j_1, out_Tmp_425, out_Tmp_427 := BuildSelectConfigUrb_loop_L53(out_i_7, out_interfaceDescriptor, out_Tmp_417, out_Tmp_418, out_Tmp_420, out_numEndpoints, out_j_1, in_iface_1, out_Tmp_425, out_Tmp_427, in_InterfaceList, in_NumberOfInterfaces);
    return;
}



procedure {:LoopProcedure} BuildSelectConfigUrb_loop_L53(in_i_7: int, in_interfaceDescriptor: int, in_Tmp_417: int, in_Tmp_418: int, in_Tmp_420: int, in_numEndpoints: int, in_j_1: int, in_iface_1: int, in_Tmp_425: int, in_Tmp_427: int, in_InterfaceList: int, in_NumberOfInterfaces: int) returns (out_i_7: int, out_interfaceDescriptor: int, out_Tmp_417: int, out_Tmp_418: int, out_Tmp_420: int, out_numEndpoints: int, out_j_1: int, out_Tmp_425: int, out_Tmp_427: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation BuildSelectConfigUrb_loop_L22(in_interfaceCount: int, in_i_7: int, in_siz: int, in_Tmp_419: int, in_Tmp_424: int, in_Tmp_428: int, in_InterfaceList: int, in_NumberOfInterfaces: int) returns (out_interfaceCount: int, out_i_7: int, out_siz: int, out_Tmp_419: int, out_Tmp_424: int, out_Tmp_428: int)
{

  entry:
    out_interfaceCount, out_i_7, out_siz, out_Tmp_419, out_Tmp_424, out_Tmp_428 := in_interfaceCount, in_i_7, in_siz, in_Tmp_419, in_Tmp_424, in_Tmp_428;
    goto L22, exit;

  exit:
    return;

  L22:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} in_NumberOfInterfaces > out_i_7;
    out_siz := out_siz + 16;
    out_Tmp_424 := out_i_7;
    assume {:nonnull} in_InterfaceList != 0;
    assume in_InterfaceList > 0;
    havoc out_Tmp_428;
    assume {:nonnull} out_Tmp_428 != 0;
    assume out_Tmp_428 > 0;
    havoc out_siz;
    out_Tmp_419 := out_i_7;
    assume {:nonnull} in_InterfaceList != 0;
    assume in_InterfaceList > 0;
    out_interfaceCount := out_interfaceCount + 1;
    out_i_7 := out_i_7 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    call {:si_unique_call 3229} {:si_old_unique_call 1} out_interfaceCount, out_i_7, out_siz, out_Tmp_419, out_Tmp_424, out_Tmp_428 := BuildSelectConfigUrb_loop_L22(out_interfaceCount, out_i_7, out_siz, out_Tmp_419, out_Tmp_424, out_Tmp_428, in_InterfaceList, in_NumberOfInterfaces);
    return;
}



procedure {:LoopProcedure} BuildSelectConfigUrb_loop_L22(in_interfaceCount: int, in_i_7: int, in_siz: int, in_Tmp_419: int, in_Tmp_424: int, in_Tmp_428: int, in_InterfaceList: int, in_NumberOfInterfaces: int) returns (out_interfaceCount: int, out_i_7: int, out_siz: int, out_Tmp_419: int, out_Tmp_424: int, out_Tmp_428: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation InitializeFunctionAssoc_loop_L44(in_i_8: int, in_Tmp_439: int, in_Tmp_442: int, in_interfaceListEntry_1: int, in_Tmp_444: int, in_functionAssoc_2: int, in_numInterfaces: int) returns (out_i_8: int, out_Tmp_439: int, out_Tmp_442: int, out_Tmp_444: int)
{

  entry:
    out_i_8, out_Tmp_439, out_Tmp_442, out_Tmp_444 := in_i_8, in_Tmp_439, in_Tmp_442, in_Tmp_444;
    goto L44, exit;

  exit:
    return;

  L44:
    goto anon13_Else;

  anon13_Else:
    assume {:partition} in_numInterfaces > out_i_8;
    out_Tmp_439 := out_i_8;
    assume {:nonnull} in_functionAssoc_2 != 0;
    assume in_functionAssoc_2 > 0;
    havoc out_Tmp_442;
    out_Tmp_444 := out_i_8;
    assume {:nonnull} out_Tmp_442 != 0;
    assume out_Tmp_442 > 0;
    out_i_8 := out_i_8 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    call {:si_unique_call 3230} {:si_old_unique_call 1} out_i_8, out_Tmp_439, out_Tmp_442, out_Tmp_444 := InitializeFunctionAssoc_loop_L44(out_i_8, out_Tmp_439, out_Tmp_442, in_interfaceListEntry_1, out_Tmp_444, in_functionAssoc_2, in_numInterfaces);
    return;
}



procedure {:LoopProcedure} InitializeFunctionAssoc_loop_L44(in_i_8: int, in_Tmp_439: int, in_Tmp_442: int, in_interfaceListEntry_1: int, in_Tmp_444: int, in_functionAssoc_2: int, in_numInterfaces: int) returns (out_i_8: int, out_Tmp_439: int, out_Tmp_442: int, out_Tmp_444: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation InitializeFunctionAssoc_loop_L38(in_Tmp_440: int, in_interfaceListEntry_1: int, in_baseInterfaceNumber: int) returns (out_Tmp_440: int)
{

  entry:
    out_Tmp_440 := in_Tmp_440;
    goto L38, exit;

  exit:
    return;

  L38:
    goto anon12_Else;

  anon12_Else:
    assume {:nonnull} in_interfaceListEntry_1 != 0;
    assume in_interfaceListEntry_1 > 0;
    havoc out_Tmp_440;
    assume {:nonnull} out_Tmp_440 != 0;
    assume out_Tmp_440 > 0;
    goto anon15_Then;

  anon15_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_440)] != in_baseInterfaceNumber;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    call {:si_unique_call 3231} {:si_old_unique_call 1} out_Tmp_440 := InitializeFunctionAssoc_loop_L38(out_Tmp_440, in_interfaceListEntry_1, in_baseInterfaceNumber);
    return;
}



procedure {:LoopProcedure} InitializeFunctionAssoc_loop_L38(in_Tmp_440: int, in_interfaceListEntry_1: int, in_baseInterfaceNumber: int) returns (out_Tmp_440: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetFunctionInterfaceListBase_loop_L46(in_i_9: int, in_Tmp_459: int, in_Tmp_460: int, in_configDesc_2: int, in_Tmp_469: int, in_Tmp_473: int, in_Tmp_474: int, in_iface_2: int, in_Tmp_479: int, in_Tmp_481: int, in_Tmp_482: int, in_parentFdoExt_49: int, in_numFunctionInterfaces: int) returns (out_i_9: int, out_Tmp_459: int, out_Tmp_460: int, out_Tmp_469: int, out_Tmp_473: int, out_Tmp_474: int, out_Tmp_479: int, out_Tmp_481: int, out_Tmp_482: int)
{

  entry:
    out_i_9, out_Tmp_459, out_Tmp_460, out_Tmp_469, out_Tmp_473, out_Tmp_474, out_Tmp_479, out_Tmp_481, out_Tmp_482 := in_i_9, in_Tmp_459, in_Tmp_460, in_Tmp_469, in_Tmp_473, in_Tmp_474, in_Tmp_479, in_Tmp_481, in_Tmp_482;
    goto L46, exit;

  exit:
    return;

  L46:
    assume {:nonnull} in_configDesc_2 != 0;
    assume in_configDesc_2 > 0;
    goto anon35_Else;

  anon35_Else:
    out_Tmp_469 := out_i_9;
    assume {:nonnull} in_parentFdoExt_49 != 0;
    assume in_parentFdoExt_49 > 0;
    havoc out_Tmp_481;
    assume {:nonnull} out_Tmp_481 != 0;
    assume out_Tmp_481 > 0;
    havoc out_Tmp_474;
    assume {:nonnull} in_iface_2 != 0;
    assume in_iface_2 > 0;
    havoc out_Tmp_479;
    assume {:nonnull} out_Tmp_474 != 0;
    assume out_Tmp_474 > 0;
    assume {:nonnull} out_Tmp_479 != 0;
    assume out_Tmp_479 > 0;
    goto anon38_Else;

  anon38_Else:
    out_Tmp_473 := out_i_9;
    assume {:nonnull} in_parentFdoExt_49 != 0;
    assume in_parentFdoExt_49 > 0;
    havoc out_Tmp_459;
    assume {:nonnull} out_Tmp_459 != 0;
    assume out_Tmp_459 > 0;
    havoc out_Tmp_460;
    assume {:nonnull} in_iface_2 != 0;
    assume in_iface_2 > 0;
    havoc out_Tmp_482;
    assume {:nonnull} out_Tmp_460 != 0;
    assume out_Tmp_460 > 0;
    assume {:nonnull} out_Tmp_482 != 0;
    assume out_Tmp_482 > 0;
    goto anon39_Else;

  anon39_Else:
    assume {:nonnull} in_numFunctionInterfaces != 0;
    assume in_numFunctionInterfaces > 0;
    Mem_T.VOID[in_numFunctionInterfaces] := Mem_T.VOID[in_numFunctionInterfaces] + 1;
    out_i_9 := out_i_9 + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    call {:si_unique_call 3232} {:si_old_unique_call 1} out_i_9, out_Tmp_459, out_Tmp_460, out_Tmp_469, out_Tmp_473, out_Tmp_474, out_Tmp_479, out_Tmp_481, out_Tmp_482 := GetFunctionInterfaceListBase_loop_L46(out_i_9, out_Tmp_459, out_Tmp_460, in_configDesc_2, out_Tmp_469, out_Tmp_473, out_Tmp_474, in_iface_2, out_Tmp_479, out_Tmp_481, out_Tmp_482, in_parentFdoExt_49, in_numFunctionInterfaces);
    return;
}



procedure {:LoopProcedure} GetFunctionInterfaceListBase_loop_L46(in_i_9: int, in_Tmp_459: int, in_Tmp_460: int, in_configDesc_2: int, in_Tmp_469: int, in_Tmp_473: int, in_Tmp_474: int, in_iface_2: int, in_Tmp_479: int, in_Tmp_481: int, in_Tmp_482: int, in_parentFdoExt_49: int, in_numFunctionInterfaces: int) returns (out_i_9: int, out_Tmp_459: int, out_Tmp_460: int, out_Tmp_469: int, out_Tmp_473: int, out_Tmp_474: int, out_Tmp_479: int, out_Tmp_481: int, out_Tmp_482: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetFunctionInterfaceListBase_loop_L17(in_i_9: int, in_Tmp_456: int, in_Tmp_457: int, in_audFuncBaseIndex: int, in_ifaceClass: int, in_func: int, in_configDesc_2: int, in_Tmp_461: int, in_Tmp_462: int, in_Tmp_463: int, in_Tmp_464: int, in_Tmp_465: int, in_Tmp_466: int, in_Tmp_468: int, in_Tmp_470: int, in_Tmp_471: int, in_Tmp_472: int, in_Tmp_476: int, in_Tmp_477: int, in_Tmp_478: int, in_parentFdoExt_49: int, in_functionIndex: int) returns (out_i_9: int, out_Tmp_456: int, out_Tmp_457: int, out_audFuncBaseIndex: int, out_ifaceClass: int, out_func: int, out_Tmp_461: int, out_Tmp_462: int, out_Tmp_463: int, out_Tmp_464: int, out_Tmp_465: int, out_Tmp_466: int, out_Tmp_468: int, out_Tmp_470: int, out_Tmp_471: int, out_Tmp_472: int, out_Tmp_476: int, out_Tmp_477: int, out_Tmp_478: int)
{

  entry:
    out_i_9, out_Tmp_456, out_Tmp_457, out_audFuncBaseIndex, out_ifaceClass, out_func, out_Tmp_461, out_Tmp_462, out_Tmp_463, out_Tmp_464, out_Tmp_465, out_Tmp_466, out_Tmp_468, out_Tmp_470, out_Tmp_471, out_Tmp_472, out_Tmp_476, out_Tmp_477, out_Tmp_478 := in_i_9, in_Tmp_456, in_Tmp_457, in_audFuncBaseIndex, in_ifaceClass, in_func, in_Tmp_461, in_Tmp_462, in_Tmp_463, in_Tmp_464, in_Tmp_465, in_Tmp_466, in_Tmp_468, in_Tmp_470, in_Tmp_471, in_Tmp_472, in_Tmp_476, in_Tmp_477, in_Tmp_478;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:nonnull} in_configDesc_2 != 0;
    assume in_configDesc_2 > 0;
    goto anon29_Else;

  anon29_Else:
    out_Tmp_462 := out_i_9;
    assume {:nonnull} in_parentFdoExt_49 != 0;
    assume in_parentFdoExt_49 > 0;
    havoc out_Tmp_465;
    assume {:nonnull} out_Tmp_465 != 0;
    assume out_Tmp_465 > 0;
    havoc out_Tmp_470;
    assume {:nonnull} out_Tmp_470 != 0;
    assume out_Tmp_470 > 0;
    havoc out_ifaceClass;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} out_ifaceClass == 13;
    goto L23;

  L23:
    out_i_9 := out_i_9 + 1;
    goto L23_dummy;

  L23_dummy:
    call {:si_unique_call 3233} {:si_old_unique_call 1} out_i_9, out_Tmp_456, out_Tmp_457, out_audFuncBaseIndex, out_ifaceClass, out_func, out_Tmp_461, out_Tmp_462, out_Tmp_463, out_Tmp_464, out_Tmp_465, out_Tmp_466, out_Tmp_468, out_Tmp_470, out_Tmp_471, out_Tmp_472, out_Tmp_476, out_Tmp_477, out_Tmp_478 := GetFunctionInterfaceListBase_loop_L17(out_i_9, out_Tmp_456, out_Tmp_457, out_audFuncBaseIndex, out_ifaceClass, out_func, in_configDesc_2, out_Tmp_461, out_Tmp_462, out_Tmp_463, out_Tmp_464, out_Tmp_465, out_Tmp_466, out_Tmp_468, out_Tmp_470, out_Tmp_471, out_Tmp_472, out_Tmp_476, out_Tmp_477, out_Tmp_478, in_parentFdoExt_49, in_functionIndex);
    return;

  anon36_Then:
    assume {:partition} out_ifaceClass != 13;
    goto anon31_Else;

  anon31_Else:
    assume {:partition} out_func != in_functionIndex;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} out_ifaceClass == 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} out_audFuncBaseIndex == -1;
    out_audFuncBaseIndex := out_i_9;
    goto L28;

  L28:
    out_Tmp_464 := out_i_9 + 1;
    assume {:nonnull} in_parentFdoExt_49 != 0;
    assume in_parentFdoExt_49 > 0;
    havoc out_Tmp_456;
    assume {:nonnull} out_Tmp_456 != 0;
    assume out_Tmp_456 > 0;
    havoc out_Tmp_476;
    assume {:nonnull} out_Tmp_476 != 0;
    assume out_Tmp_476 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L31;

  L31:
    out_func := out_func + 1;
    out_audFuncBaseIndex := -1;
    goto L23;

  anon40_Then:
    out_Tmp_478 := out_audFuncBaseIndex;
    assume {:nonnull} in_parentFdoExt_49 != 0;
    assume in_parentFdoExt_49 > 0;
    havoc out_Tmp_472;
    assume {:nonnull} out_Tmp_472 != 0;
    assume out_Tmp_472 > 0;
    havoc out_Tmp_477;
    out_Tmp_468 := out_i_9 + 1;
    assume {:nonnull} in_parentFdoExt_49 != 0;
    assume in_parentFdoExt_49 > 0;
    havoc out_Tmp_457;
    assume {:nonnull} out_Tmp_457 != 0;
    assume out_Tmp_457 > 0;
    havoc out_Tmp_463;
    assume {:nonnull} out_Tmp_463 != 0;
    assume out_Tmp_463 > 0;
    assume {:nonnull} out_Tmp_477 != 0;
    assume out_Tmp_477 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L31;

  anon41_Then:
    goto L23;

  anon33_Then:
    assume {:partition} out_audFuncBaseIndex != -1;
    goto L28;

  anon32_Then:
    assume {:partition} out_ifaceClass != 1;
    out_audFuncBaseIndex := -1;
    out_Tmp_461 := out_i_9 + 1;
    assume {:nonnull} in_parentFdoExt_49 != 0;
    assume in_parentFdoExt_49 > 0;
    havoc out_Tmp_471;
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    havoc out_Tmp_466;
    assume {:nonnull} out_Tmp_466 != 0;
    assume out_Tmp_466 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(out_Tmp_466)] == 0;
    out_func := out_func + 1;
    goto L23;

  anon42_Then:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(out_Tmp_466)] != 0;
    goto L23;
}



procedure {:LoopProcedure} GetFunctionInterfaceListBase_loop_L17(in_i_9: int, in_Tmp_456: int, in_Tmp_457: int, in_audFuncBaseIndex: int, in_ifaceClass: int, in_func: int, in_configDesc_2: int, in_Tmp_461: int, in_Tmp_462: int, in_Tmp_463: int, in_Tmp_464: int, in_Tmp_465: int, in_Tmp_466: int, in_Tmp_468: int, in_Tmp_470: int, in_Tmp_471: int, in_Tmp_472: int, in_Tmp_476: int, in_Tmp_477: int, in_Tmp_478: int, in_parentFdoExt_49: int, in_functionIndex: int) returns (out_i_9: int, out_Tmp_456: int, out_Tmp_457: int, out_audFuncBaseIndex: int, out_ifaceClass: int, out_func: int, out_Tmp_461: int, out_Tmp_462: int, out_Tmp_463: int, out_Tmp_464: int, out_Tmp_465: int, out_Tmp_466: int, out_Tmp_468: int, out_Tmp_470: int, out_Tmp_471: int, out_Tmp_472: int, out_Tmp_476: int, out_Tmp_477: int, out_Tmp_478: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParseUSBInterfaceAssociationDescriptors_loop_L103(in_Tmp_484: int, in_interfaceDescriptor_1: int, in_commonDescriptor: int, in_Tmp_492: int, in_interfaceAssociationDescriptor_1: int, in_Tmp_494: int, in_interfacesRemaining: int, in_Tmp_502: int, in_Tmp_503: int, in_Tmp_510: int, in_descriptorEnd: int, in_Tmp_514: int, in_nextInterface: int, in_functionIndex_1: int, in_Tmp_518: int, in_sdv_197: int, in_functionCount: int, in_Tmp_525: int, in_Tmp_526: int, in_functionList: int, in_status_32: int, in_offset_1: int, in_parentFdoExt_50: int) returns (out_Tmp_484: int, out_interfaceDescriptor_1: int, out_commonDescriptor: int, out_Tmp_492: int, out_interfaceAssociationDescriptor_1: int, out_Tmp_494: int, out_interfacesRemaining: int, out_Tmp_502: int, out_Tmp_503: int, out_Tmp_510: int, out_Tmp_514: int, out_nextInterface: int, out_functionIndex_1: int, out_Tmp_518: int, out_sdv_197: int, out_Tmp_525: int, out_Tmp_526: int, out_status_32: int)
{

  entry:
    out_Tmp_484, out_interfaceDescriptor_1, out_commonDescriptor, out_Tmp_492, out_interfaceAssociationDescriptor_1, out_Tmp_494, out_interfacesRemaining, out_Tmp_502, out_Tmp_503, out_Tmp_510, out_Tmp_514, out_nextInterface, out_functionIndex_1, out_Tmp_518, out_sdv_197, out_Tmp_525, out_Tmp_526, out_status_32 := in_Tmp_484, in_interfaceDescriptor_1, in_commonDescriptor, in_Tmp_492, in_interfaceAssociationDescriptor_1, in_Tmp_494, in_interfacesRemaining, in_Tmp_502, in_Tmp_503, in_Tmp_510, in_Tmp_514, in_nextInterface, in_functionIndex_1, in_Tmp_518, in_sdv_197, in_Tmp_525, in_Tmp_526, in_status_32;
    goto L103, exit;

  exit:
    return;

  L103:
    goto anon69_Else;

  anon69_Else:
    assume {:partition} in_descriptorEnd > in_offset_1;
    out_commonDescriptor := in_offset_1;
    assume {:nonnull} out_commonDescriptor != 0;
    assume out_commonDescriptor > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] == 11;
    out_interfaceAssociationDescriptor_1 := out_commonDescriptor;
    call {:si_unique_call 3235} out_sdv_197 := ValidateUSBInterfaceAssociationDescriptor(out_commonDescriptor, in_parentFdoExt_50);
    goto anon72_Else;

  anon72_Else:
    assume {:partition} out_sdv_197 != 0;
    goto anon73_Then;

  anon73_Then:
    assume {:partition} in_functionCount > out_functionIndex_1;
    goto anon74_Then;

  anon74_Then:
    assume {:partition} out_interfacesRemaining == 0;
    assume {:nonnull} out_interfaceAssociationDescriptor_1 != 0;
    assume out_interfaceAssociationDescriptor_1 > 0;
    havoc out_Tmp_492;
    assume {:nonnull} out_interfaceAssociationDescriptor_1 != 0;
    assume out_interfaceAssociationDescriptor_1 > 0;
    havoc out_Tmp_514;
    out_Tmp_510 := out_functionIndex_1;
    out_Tmp_503 := in_functionList + out_Tmp_510 * 68;
    call {:si_unique_call 3234} out_status_32 := InitializeFunctionAssoc(in_parentFdoExt_50, out_Tmp_503, out_Tmp_514, out_Tmp_492);
    goto anon75_Then;

  anon75_Then:
    assume {:partition} 0 <= out_status_32;
    out_Tmp_484 := out_functionIndex_1;
    assume {:nonnull} in_functionList != 0;
    assume in_functionList > 0;
    out_Tmp_494 := out_functionIndex_1;
    assume {:nonnull} in_functionList != 0;
    assume in_functionList > 0;
    out_functionIndex_1 := out_functionIndex_1 + 1;
    assume {:nonnull} out_interfaceAssociationDescriptor_1 != 0;
    assume out_interfaceAssociationDescriptor_1 > 0;
    havoc out_nextInterface;
    assume {:nonnull} out_interfaceAssociationDescriptor_1 != 0;
    assume out_interfaceAssociationDescriptor_1 > 0;
    havoc out_interfacesRemaining;
    goto L107;

  L107:
    assume {:nonnull} out_commonDescriptor != 0;
    assume out_commonDescriptor > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] == 4;
    out_interfaceDescriptor_1 := out_commonDescriptor;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_interfacesRemaining != 0;
    assume {:nonnull} out_interfaceDescriptor_1 != 0;
    assume out_interfaceDescriptor_1 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(out_interfaceDescriptor_1)] == 0;
    assume {:nonnull} out_interfaceDescriptor_1 != 0;
    assume out_interfaceDescriptor_1 > 0;
    goto anon79_Then;

  anon79_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_interfaceDescriptor_1)] == out_nextInterface;
    out_nextInterface := out_nextInterface + 1;
    out_interfacesRemaining := out_interfacesRemaining - 1;
    goto L187;

  L187:
    assume {:nonnull} out_commonDescriptor != 0;
    assume out_commonDescriptor > 0;
    goto anon76_Else;

  anon76_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] != 0;
    goto anon76_Else_dummy;

  anon76_Else_dummy:
    call {:si_unique_call 3237} {:si_old_unique_call 1} out_Tmp_484, out_interfaceDescriptor_1, out_commonDescriptor, out_Tmp_492, out_interfaceAssociationDescriptor_1, out_Tmp_494, out_interfacesRemaining, out_Tmp_502, out_Tmp_503, out_Tmp_510, out_Tmp_514, out_nextInterface, out_functionIndex_1, out_Tmp_518, out_sdv_197, out_Tmp_525, out_Tmp_526, out_status_32 := ParseUSBInterfaceAssociationDescriptors_loop_L103(out_Tmp_484, out_interfaceDescriptor_1, out_commonDescriptor, out_Tmp_492, out_interfaceAssociationDescriptor_1, out_Tmp_494, out_interfacesRemaining, out_Tmp_502, out_Tmp_503, out_Tmp_510, in_descriptorEnd, out_Tmp_514, out_nextInterface, out_functionIndex_1, out_Tmp_518, out_sdv_197, in_functionCount, out_Tmp_525, out_Tmp_526, in_functionList, out_status_32, in_offset_1, in_parentFdoExt_50);
    return;

  anon78_Then:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(out_interfaceDescriptor_1)] != 0;
    goto L191;

  L191:
    assume {:nonnull} out_interfaceDescriptor_1 != 0;
    assume out_interfaceDescriptor_1 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(out_interfaceDescriptor_1)] == 0;
    assume {:nonnull} out_interfaceDescriptor_1 != 0;
    assume out_interfaceDescriptor_1 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto anon81_Then;

  anon81_Then:
    assume {:partition} in_functionCount > out_functionIndex_1;
    assume {:nonnull} out_interfaceDescriptor_1 != 0;
    assume out_interfaceDescriptor_1 > 0;
    out_Tmp_518 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_interfaceDescriptor_1)];
    out_Tmp_502 := out_functionIndex_1;
    out_Tmp_525 := in_functionList + out_Tmp_502 * 68;
    call {:si_unique_call 3236} out_status_32 := InitializeFunctionAssoc(in_parentFdoExt_50, out_Tmp_525, out_Tmp_518, 1);
    goto anon82_Then;

  anon82_Then:
    assume {:partition} 0 <= out_status_32;
    out_Tmp_526 := out_functionIndex_1;
    assume {:nonnull} in_functionList != 0;
    assume in_functionList > 0;
    out_functionIndex_1 := out_functionIndex_1 + 1;
    goto L187;

  anon80_Then:
    goto L187;

  anon77_Then:
    assume {:partition} Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(out_interfaceDescriptor_1)] != 0;
    goto L187;

  anon90_Then:
    assume {:partition} out_interfacesRemaining == 0;
    goto L191;

  anon71_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] != 4;
    goto L187;

  anon89_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] != 11;
    goto L107;
}



procedure {:LoopProcedure} ParseUSBInterfaceAssociationDescriptors_loop_L103(in_Tmp_484: int, in_interfaceDescriptor_1: int, in_commonDescriptor: int, in_Tmp_492: int, in_interfaceAssociationDescriptor_1: int, in_Tmp_494: int, in_interfacesRemaining: int, in_Tmp_502: int, in_Tmp_503: int, in_Tmp_510: int, in_descriptorEnd: int, in_Tmp_514: int, in_nextInterface: int, in_functionIndex_1: int, in_Tmp_518: int, in_sdv_197: int, in_functionCount: int, in_Tmp_525: int, in_Tmp_526: int, in_functionList: int, in_status_32: int, in_offset_1: int, in_parentFdoExt_50: int) returns (out_Tmp_484: int, out_interfaceDescriptor_1: int, out_commonDescriptor: int, out_Tmp_492: int, out_interfaceAssociationDescriptor_1: int, out_Tmp_494: int, out_interfacesRemaining: int, out_Tmp_502: int, out_Tmp_503: int, out_Tmp_510: int, out_Tmp_514: int, out_nextInterface: int, out_functionIndex_1: int, out_Tmp_518: int, out_sdv_197: int, out_Tmp_525: int, out_Tmp_526: int, out_status_32: int);
  modifies alloc;
  free ensures {:va_keep} out_interfaceDescriptor_1 == in_interfaceDescriptor_1 || out_interfaceDescriptor_1 == in_offset_1;
  free ensures {:va_keep} out_commonDescriptor == in_commonDescriptor || out_commonDescriptor == in_offset_1;
  free ensures {:va_keep} out_interfaceAssociationDescriptor_1 == in_interfaceAssociationDescriptor_1 || out_interfaceAssociationDescriptor_1 == in_offset_1;
  free ensures {:va_keep} out_sdv_197 == 0 || out_sdv_197 == 1 || out_sdv_197 == in_sdv_197;
  free ensures {:va_keep} out_status_32 == 0 || out_status_32 == -1073741670 || out_status_32 == in_status_32;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParseUSBInterfaceAssociationDescriptors_loop_L26(in_commonDescriptor: int, in_interfaceAssociationDescriptor: int, in_foundIAD: int, in_interfacesRemaining: int, in_descriptorEnd: int, in_functionCount: int, in_offset_1: int) returns (out_commonDescriptor: int, out_interfaceAssociationDescriptor: int, out_foundIAD: int, out_interfacesRemaining: int, out_functionCount: int)
{

  entry:
    out_commonDescriptor, out_interfaceAssociationDescriptor, out_foundIAD, out_interfacesRemaining, out_functionCount := in_commonDescriptor, in_interfaceAssociationDescriptor, in_foundIAD, in_interfacesRemaining, in_functionCount;
    goto L26, exit;

  exit:
    return;

  L26:
    goto anon61_Else;

  anon61_Else:
    assume {:partition} in_descriptorEnd > in_offset_1;
    out_commonDescriptor := in_offset_1;
    assume {:nonnull} out_commonDescriptor != 0;
    assume out_commonDescriptor > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] == 11;
    out_interfaceAssociationDescriptor := out_commonDescriptor;
    assume {:nonnull} out_interfaceAssociationDescriptor != 0;
    assume out_interfaceAssociationDescriptor > 0;
    goto anon85_Then;

  anon85_Then:
    out_functionCount := out_functionCount + 1;
    assume {:nonnull} out_interfaceAssociationDescriptor != 0;
    assume out_interfaceAssociationDescriptor > 0;
    havoc out_interfacesRemaining;
    out_foundIAD := 1;
    goto L30;

  L30:
    assume {:nonnull} out_commonDescriptor != 0;
    assume out_commonDescriptor > 0;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] != 0;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    call {:si_unique_call 3238} {:si_old_unique_call 1} out_commonDescriptor, out_interfaceAssociationDescriptor, out_foundIAD, out_interfacesRemaining, out_functionCount := ParseUSBInterfaceAssociationDescriptors_loop_L26(out_commonDescriptor, out_interfaceAssociationDescriptor, out_foundIAD, out_interfacesRemaining, in_descriptorEnd, out_functionCount, in_offset_1);
    return;

  anon84_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDescriptor)] != 11;
    goto L30;
}



procedure {:LoopProcedure} ParseUSBInterfaceAssociationDescriptors_loop_L26(in_commonDescriptor: int, in_interfaceAssociationDescriptor: int, in_foundIAD: int, in_interfacesRemaining: int, in_descriptorEnd: int, in_functionCount: int, in_offset_1: int) returns (out_commonDescriptor: int, out_interfaceAssociationDescriptor: int, out_foundIAD: int, out_interfacesRemaining: int, out_functionCount: int);
  free ensures {:va_keep} out_commonDescriptor == in_commonDescriptor || out_commonDescriptor == in_offset_1;
  free ensures {:va_keep} out_interfaceAssociationDescriptor == in_interfaceAssociationDescriptor || out_interfaceAssociationDescriptor == in_offset_1;
  free ensures {:va_keep} out_foundIAD == 1 || out_foundIAD == in_foundIAD;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CalculateMultiStringLength_loop_L10(in_length_2: int, in_sdv_201: int, in_totalLength: int, in_index_1: int) returns (out_length_2: int, out_sdv_201: int, out_totalLength: int)
{

  entry:
    out_length_2, out_sdv_201, out_totalLength := in_length_2, in_sdv_201, in_totalLength;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:nonnull} in_index_1 != 0;
    assume in_index_1 > 0;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.VOID[in_index_1] != 0;
    call {:si_unique_call 3239} out_sdv_201 := WStrLen(in_index_1);
    out_length_2 := out_sdv_201 + 1;
    out_totalLength := out_totalLength + out_length_2;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3240} {:si_old_unique_call 1} out_length_2, out_sdv_201, out_totalLength := CalculateMultiStringLength_loop_L10(out_length_2, out_sdv_201, out_totalLength, in_index_1);
    return;
}



procedure {:LoopProcedure} CalculateMultiStringLength_loop_L10(in_length_2: int, in_sdv_201: int, in_totalLength: int, in_index_1: int) returns (out_length_2: int, out_sdv_201: int, out_totalLength: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_ValidateConfigurationDescriptorInternal_loop_L74(in_Tmp_538: int, in_assocDesc: int, in_interfaceArray: int, in_commonDesc: int, in_interfaceDesc_1: int, in_endpointDesc: int, in_Tmp_540: int, in_Tmp_541: int, in_Tmp_542: int, in_Tmp_543: int, in_Tmp_544: int, in_Tmp_545: int, in_Tmp_546: int, in_firstInterface: int, in_Tmp_547: int, in_interfaceData: int, in_Tmp_548: int, in_Tmp_549: int, in_end: int, in_Tmp_550: int, in_Tmp_551: int, in_endpointAddress: int, in_offset_2: int, in_altSetting: int, in_interfaceNumber_1: int, in_interfacesFound: int, in_ConfigDesc: int, in_Level: int) returns (out_Tmp_538: int, out_assocDesc: int, out_commonDesc: int, out_interfaceDesc_1: int, out_endpointDesc: int, out_Tmp_540: int, out_Tmp_541: int, out_Tmp_542: int, out_Tmp_543: int, out_Tmp_544: int, out_Tmp_545: int, out_Tmp_546: int, out_firstInterface: int, out_Tmp_547: int, out_Tmp_548: int, out_Tmp_549: int, out_Tmp_550: int, out_Tmp_551: int, out_endpointAddress: int, out_altSetting: int, out_interfaceNumber_1: int, out_interfacesFound: int)
{

  entry:
    out_Tmp_538, out_assocDesc, out_commonDesc, out_interfaceDesc_1, out_endpointDesc, out_Tmp_540, out_Tmp_541, out_Tmp_542, out_Tmp_543, out_Tmp_544, out_Tmp_545, out_Tmp_546, out_firstInterface, out_Tmp_547, out_Tmp_548, out_Tmp_549, out_Tmp_550, out_Tmp_551, out_endpointAddress, out_altSetting, out_interfaceNumber_1, out_interfacesFound := in_Tmp_538, in_assocDesc, in_commonDesc, in_interfaceDesc_1, in_endpointDesc, in_Tmp_540, in_Tmp_541, in_Tmp_542, in_Tmp_543, in_Tmp_544, in_Tmp_545, in_Tmp_546, in_firstInterface, in_Tmp_547, in_Tmp_548, in_Tmp_549, in_Tmp_550, in_Tmp_551, in_endpointAddress, in_altSetting, in_interfaceNumber_1, in_interfacesFound;
    goto L74, exit;

  exit:
    return;

  L74:
    goto anon106_Else;

  anon106_Else:
    assume {:partition} in_end > in_offset_2;
    out_commonDesc := in_offset_2;
    goto anon133_Then;

  anon133_Then:
    assume {:partition} in_end >= 2;
    goto anon108_Then;

  anon108_Then:
    assume {:partition} in_end >= in_offset_2;
    assume {:nonnull} out_commonDesc != 0;
    assume out_commonDesc > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc)] != 4;
    assume {:nonnull} out_commonDesc != 0;
    assume out_commonDesc > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc)] != 5;
    assume {:nonnull} out_commonDesc != 0;
    assume out_commonDesc > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc)] != 11;
    goto L105;

  L105:
    assume {:nonnull} out_commonDesc != 0;
    assume out_commonDesc > 0;
    goto anon113_Else;

  anon113_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc)] != 0;
    goto anon113_Else_dummy;

  anon113_Else_dummy:
    call {:si_unique_call 3243} {:si_old_unique_call 1} out_Tmp_538, out_assocDesc, out_commonDesc, out_interfaceDesc_1, out_endpointDesc, out_Tmp_540, out_Tmp_541, out_Tmp_542, out_Tmp_543, out_Tmp_544, out_Tmp_545, out_Tmp_546, out_firstInterface, out_Tmp_547, out_Tmp_548, out_Tmp_549, out_Tmp_550, out_Tmp_551, out_endpointAddress, out_altSetting, out_interfaceNumber_1, out_interfacesFound := USBD_ValidateConfigurationDescriptorInternal_loop_L74(out_Tmp_538, out_assocDesc, in_interfaceArray, out_commonDesc, out_interfaceDesc_1, out_endpointDesc, out_Tmp_540, out_Tmp_541, out_Tmp_542, out_Tmp_543, out_Tmp_544, out_Tmp_545, out_Tmp_546, out_firstInterface, out_Tmp_547, in_interfaceData, out_Tmp_548, out_Tmp_549, in_end, out_Tmp_550, out_Tmp_551, out_endpointAddress, in_offset_2, out_altSetting, out_interfaceNumber_1, out_interfacesFound, in_ConfigDesc, in_Level);
    return;

  anon127_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc)] == 11;
    out_assocDesc := in_offset_2;
    assume {:nonnull} out_assocDesc != 0;
    assume out_assocDesc > 0;
    goto anon141_Then;

  anon141_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_assocDesc)] == 8;
    assume {:nonnull} out_assocDesc != 0;
    assume out_assocDesc > 0;
    goto anon110_Else;

  anon110_Else:
    assume {:nonnull} in_ConfigDesc != 0;
    assume in_ConfigDesc > 0;
    assume {:nonnull} out_assocDesc != 0;
    assume out_assocDesc > 0;
    goto anon111_Else;

  anon111_Else:
    assume {:nonnull} out_assocDesc != 0;
    assume out_assocDesc > 0;
    goto anon112_Else;

  anon112_Else:
    goto L105;

  anon128_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc)] == 5;
    out_endpointDesc := in_offset_2;
    assume {:nonnull} out_endpointDesc != 0;
    assume out_endpointDesc > 0;
    goto anon138_Then;

  anon138_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_endpointDesc)] >= 7;
    assume {:nonnull} out_endpointDesc != 0;
    assume out_endpointDesc > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_endpointDesc)] != 7;
    goto anon115_Then;

  anon115_Then:
    assume {:partition} 3 > in_Level;
    goto L113;

  L113:
    assume {:nonnull} out_endpointDesc != 0;
    assume out_endpointDesc > 0;
    out_endpointAddress := Mem_T.VOID[bEndpointAddress__USB_ENDPOINT_DESCRIPTOR(out_endpointDesc)];
    goto anon139_Then;

  anon139_Then:
    assume {:partition} out_firstInterface == 0;
    out_Tmp_546 := out_endpointAddress;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    havoc out_Tmp_549;
    assume {:nonnull} out_Tmp_549 != 0;
    assume out_Tmp_549 > 0;
    goto anon140_Then;

  anon140_Then:
    assume {:partition} Mem_T.VOID[out_Tmp_549 + out_Tmp_546 * 4] == 0;
    out_Tmp_547 := out_endpointAddress;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    havoc out_Tmp_543;
    assume {:nonnull} out_Tmp_543 != 0;
    assume out_Tmp_543 > 0;
    Mem_T.VOID[out_Tmp_543 + out_Tmp_547 * 4] := 1;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    goto L105;

  anon114_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_endpointDesc)] == 7;
    goto L113;

  anon109_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc)] == 4;
    out_interfaceDesc_1 := in_offset_2;
    assume {:nonnull} out_interfaceDesc_1 != 0;
    assume out_interfaceDesc_1 > 0;
    goto anon134_Then;

  anon134_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_interfaceDesc_1)] >= 9;
    assume {:nonnull} out_interfaceDesc_1 != 0;
    assume out_interfaceDesc_1 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_interfaceDesc_1)] != 9;
    goto anon117_Then;

  anon117_Then:
    assume {:partition} 3 > in_Level;
    goto L134;

  L134:
    assume {:nonnull} out_interfaceDesc_1 != 0;
    assume out_interfaceDesc_1 > 0;
    out_interfaceNumber_1 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_interfaceDesc_1)];
    assume {:nonnull} out_interfaceDesc_1 != 0;
    assume out_interfaceDesc_1 > 0;
    out_altSetting := Mem_T.VOID[bAlternateSetting__USB_INTERFACE_DESCRIPTOR(out_interfaceDesc_1)];
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} out_firstInterface != 0;
    goto anon119_Then;

  anon119_Then:
    assume {:partition} out_altSetting == 0;
    out_firstInterface := 0;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    out_Tmp_545 := out_altSetting;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    havoc out_Tmp_542;
    assume {:nonnull} out_Tmp_542 != 0;
    assume out_Tmp_542 > 0;
    Mem_T.VOID[out_Tmp_542 + out_Tmp_545 * 4] := 1;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    assume {:nonnull} out_interfaceDesc_1 != 0;
    assume out_interfaceDesc_1 > 0;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    out_Tmp_550 := out_interfaceNumber_1;
    assume {:nonnull} in_interfaceArray != 0;
    assume in_interfaceArray > 0;
    Mem_T.VOID[in_interfaceArray + out_Tmp_550 * 4] := 1;
    out_interfacesFound := out_interfacesFound + 1;
    goto L105;

  anon135_Then:
    assume {:partition} out_firstInterface == 0;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    out_Tmp_544 := out_altSetting;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    havoc out_Tmp_538;
    assume {:nonnull} out_Tmp_538 != 0;
    assume out_Tmp_538 > 0;
    goto anon136_Then;

  anon136_Then:
    assume {:partition} Mem_T.VOID[out_Tmp_538 + out_Tmp_544 * 4] != 1;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto anon122_Then;

  anon122_Then:
    assume {:partition} 3 > in_Level;
    goto L161;

  L161:
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    goto anon123_Then;

  anon123_Then:
    assume {:partition} 3 > in_Level;
    goto L166;

  L166:
    call {:si_unique_call 3241} sdv_RtlZeroMemory(0, 256);
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    assume {:nonnull} out_interfaceDesc_1 != 0;
    assume out_interfaceDesc_1 > 0;
    out_Tmp_548 := out_altSetting;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    havoc out_Tmp_551;
    assume {:nonnull} out_Tmp_551 != 0;
    assume out_Tmp_551 > 0;
    Mem_T.VOID[out_Tmp_551 + out_Tmp_548 * 4] := 1;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    goto L105;

  anon121_Then:
    goto L166;

  anon120_Then:
    goto L161;

  anon118_Then:
    out_Tmp_541 := out_interfaceNumber_1;
    assume {:nonnull} in_interfaceArray != 0;
    assume in_interfaceArray > 0;
    goto anon137_Then;

  anon137_Then:
    assume {:partition} Mem_T.VOID[in_interfaceArray + out_Tmp_541 * 4] != 1;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    goto anon126_Then;

  anon126_Then:
    assume {:partition} 3 > in_Level;
    goto L181;

  L181:
    goto anon125_Then;

  anon125_Then:
    assume {:partition} out_altSetting == 0;
    out_Tmp_540 := out_interfaceNumber_1;
    assume {:nonnull} in_interfaceArray != 0;
    assume in_interfaceArray > 0;
    Mem_T.VOID[in_interfaceArray + out_Tmp_540 * 4] := 1;
    assume {:nonnull} in_interfaceData != 0;
    assume in_interfaceData > 0;
    out_interfacesFound := out_interfacesFound + 1;
    call {:si_unique_call 3242} sdv_RtlZeroMemory(0, 256);
    goto L161;

  anon124_Then:
    goto L181;

  anon116_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_interfaceDesc_1)] == 9;
    goto L134;
}



procedure {:LoopProcedure} USBD_ValidateConfigurationDescriptorInternal_loop_L74(in_Tmp_538: int, in_assocDesc: int, in_interfaceArray: int, in_commonDesc: int, in_interfaceDesc_1: int, in_endpointDesc: int, in_Tmp_540: int, in_Tmp_541: int, in_Tmp_542: int, in_Tmp_543: int, in_Tmp_544: int, in_Tmp_545: int, in_Tmp_546: int, in_firstInterface: int, in_Tmp_547: int, in_interfaceData: int, in_Tmp_548: int, in_Tmp_549: int, in_end: int, in_Tmp_550: int, in_Tmp_551: int, in_endpointAddress: int, in_offset_2: int, in_altSetting: int, in_interfaceNumber_1: int, in_interfacesFound: int, in_ConfigDesc: int, in_Level: int) returns (out_Tmp_538: int, out_assocDesc: int, out_commonDesc: int, out_interfaceDesc_1: int, out_endpointDesc: int, out_Tmp_540: int, out_Tmp_541: int, out_Tmp_542: int, out_Tmp_543: int, out_Tmp_544: int, out_Tmp_545: int, out_Tmp_546: int, out_firstInterface: int, out_Tmp_547: int, out_Tmp_548: int, out_Tmp_549: int, out_Tmp_550: int, out_Tmp_551: int, out_endpointAddress: int, out_altSetting: int, out_interfaceNumber_1: int, out_interfacesFound: int);
  modifies Mem_T.VOID, alloc;
  free ensures {:va_keep} out_assocDesc == in_assocDesc || out_assocDesc == in_offset_2;
  free ensures {:va_keep} out_commonDesc == in_commonDesc || out_commonDesc == in_offset_2;
  free ensures {:va_keep} out_interfaceDesc_1 == in_interfaceDesc_1 || out_interfaceDesc_1 == in_offset_2;
  free ensures {:va_keep} out_endpointDesc == in_endpointDesc || out_endpointDesc == in_offset_2;
  free ensures {:va_keep} out_firstInterface == 0 || out_firstInterface == in_firstInterface;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ValidateUSBInterfaceAssociationDescriptor_loop_L37(in_i_10: int, in_FirstInterface: int, in_Tmp_556: int, in_InterfaceCount: int, in_InterfacesFound: int, in_NumInterfaces: int, in_Tmp_560: int, in_Tmp_561: int, in_parentFdoExt_52: int) returns (out_i_10: int, out_Tmp_556: int, out_InterfacesFound: int, out_Tmp_560: int, out_Tmp_561: int)
{

  entry:
    out_i_10, out_Tmp_556, out_InterfacesFound, out_Tmp_560, out_Tmp_561 := in_i_10, in_Tmp_556, in_InterfacesFound, in_Tmp_560, in_Tmp_561;
    goto L37, exit;

  exit:
    return;

  L37:
    goto anon19_Else;

  anon19_Else:
    assume {:partition} in_InterfaceCount > out_InterfacesFound;
    goto anon21_Else;

  anon21_Else:
    assume {:partition} in_NumInterfaces > out_i_10;
    out_Tmp_560 := out_i_10;
    assume {:nonnull} in_parentFdoExt_52 != 0;
    assume in_parentFdoExt_52 > 0;
    havoc out_Tmp_556;
    assume {:nonnull} out_Tmp_556 != 0;
    assume out_Tmp_556 > 0;
    havoc out_Tmp_561;
    assume {:nonnull} out_Tmp_561 != 0;
    assume out_Tmp_561 > 0;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_561)] == in_FirstInterface + out_InterfacesFound;
    out_InterfacesFound := out_InterfacesFound + 1;
    out_i_10 := out_i_10 + 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    call {:si_unique_call 3244} {:si_old_unique_call 1} out_i_10, out_Tmp_556, out_InterfacesFound, out_Tmp_560, out_Tmp_561 := ValidateUSBInterfaceAssociationDescriptor_loop_L37(out_i_10, in_FirstInterface, out_Tmp_556, in_InterfaceCount, out_InterfacesFound, in_NumInterfaces, out_Tmp_560, out_Tmp_561, in_parentFdoExt_52);
    return;
}



procedure {:LoopProcedure} ValidateUSBInterfaceAssociationDescriptor_loop_L37(in_i_10: int, in_FirstInterface: int, in_Tmp_556: int, in_InterfaceCount: int, in_InterfacesFound: int, in_NumInterfaces: int, in_Tmp_560: int, in_Tmp_561: int, in_parentFdoExt_52: int) returns (out_i_10: int, out_Tmp_556: int, out_InterfacesFound: int, out_Tmp_560: int, out_Tmp_561: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ValidateUSBInterfaceAssociationDescriptor_loop_L28(in_i_10: int, in_Tmp_553: int, in_Tmp_554: int, in_FirstInterface: int, in_NumInterfaces: int, in_Tmp_558: int, in_parentFdoExt_52: int) returns (out_i_10: int, out_Tmp_553: int, out_Tmp_554: int, out_Tmp_558: int)
{

  entry:
    out_i_10, out_Tmp_553, out_Tmp_554, out_Tmp_558 := in_i_10, in_Tmp_553, in_Tmp_554, in_Tmp_558;
    goto L28, exit;

  exit:
    return;

  L28:
    goto anon17_Else;

  anon17_Else:
    assume {:partition} in_NumInterfaces > out_i_10;
    out_Tmp_553 := out_i_10;
    assume {:nonnull} in_parentFdoExt_52 != 0;
    assume in_parentFdoExt_52 > 0;
    havoc out_Tmp_558;
    assume {:nonnull} out_Tmp_558 != 0;
    assume out_Tmp_558 > 0;
    havoc out_Tmp_554;
    assume {:nonnull} out_Tmp_554 != 0;
    assume out_Tmp_554 > 0;
    goto anon23_Then;

  anon23_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_554)] != in_FirstInterface;
    out_i_10 := out_i_10 + 1;
    goto anon23_Then_dummy;

  anon23_Then_dummy:
    havoc out_i_10;
    return;
}



procedure {:LoopProcedure} ValidateUSBInterfaceAssociationDescriptor_loop_L28(in_i_10: int, in_Tmp_553: int, in_Tmp_554: int, in_FirstInterface: int, in_NumInterfaces: int, in_Tmp_558: int, in_parentFdoExt_52: int) returns (out_i_10: int, out_Tmp_553: int, out_Tmp_554: int, out_Tmp_558: int);
  free ensures {:va_keep} out_Tmp_553 == in_i_10 || out_Tmp_553 == in_Tmp_553;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation WStrLen_loop_L7(in_result: int, in_str: int) returns (out_result: int)
{

  entry:
    out_result := in_result;
    goto L7, exit;

  exit:
    return;

  L7:
    assume {:nonnull} in_str != 0;
    assume in_str > 0;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.VOID[in_str] != 0;
    out_result := out_result + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    havoc out_result;
    return;
}



procedure {:LoopProcedure} WStrLen_loop_L7(in_result: int, in_str: int) returns (out_result: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CleanFunctionDescriptorArray_loop_L9(in_i_11: int, in_Tmp_566: int, in_Tmp_567: int, in_Tmp_568: int, in_Tmp_570: int, in_Tmp_571: int, in_numFunctions_3: int, in_Tmp_573: int, in_Tmp_577: int, in_Tmp_578: int, in_functionDescriptorArray: int) returns (out_i_11: int, out_Tmp_566: int, out_Tmp_567: int, out_Tmp_568: int, out_Tmp_570: int, out_Tmp_571: int, out_Tmp_573: int, out_Tmp_577: int, out_Tmp_578: int)
{

  entry:
    out_i_11, out_Tmp_566, out_Tmp_567, out_Tmp_568, out_Tmp_570, out_Tmp_571, out_Tmp_573, out_Tmp_577, out_Tmp_578 := in_i_11, in_Tmp_566, in_Tmp_567, in_Tmp_568, in_Tmp_570, in_Tmp_571, in_Tmp_573, in_Tmp_577, in_Tmp_578;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} in_numFunctions_3 > out_i_11;
    out_Tmp_578 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    out_Tmp_571 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    call {:si_unique_call 3248} sdv_ExFreePool(0);
    goto L14;

  L14:
    out_Tmp_573 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    out_Tmp_577 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    call {:si_unique_call 3247} sdv_ExFreePool(0);
    goto L19;

  L19:
    out_Tmp_566 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    out_Tmp_567 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    call {:si_unique_call 3246} sdv_ExFreePool(0);
    goto L24;

  L24:
    out_Tmp_570 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    out_Tmp_568 := out_i_11;
    assume {:nonnull} in_functionDescriptorArray != 0;
    assume in_functionDescriptorArray > 0;
    call {:si_unique_call 3245} sdv_ExFreePool(0);
    goto L29;

  L29:
    out_i_11 := out_i_11 + 1;
    goto L29_dummy;

  L29_dummy:
    havoc out_i_11;
    return;

  anon15_Then:
    goto L29;

  anon14_Then:
    goto L24;

  anon13_Then:
    goto L19;

  anon12_Then:
    goto L14;
}



procedure {:LoopProcedure} CleanFunctionDescriptorArray_loop_L9(in_i_11: int, in_Tmp_566: int, in_Tmp_567: int, in_Tmp_568: int, in_Tmp_570: int, in_Tmp_571: int, in_numFunctions_3: int, in_Tmp_573: int, in_Tmp_577: int, in_Tmp_578: int, in_functionDescriptorArray: int) returns (out_i_11: int, out_Tmp_566: int, out_Tmp_567: int, out_Tmp_568: int, out_Tmp_570: int, out_Tmp_571: int, out_Tmp_573: int, out_Tmp_577: int, out_Tmp_578: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_566 == in_i_11 || out_Tmp_566 == in_Tmp_566;
  free ensures {:va_keep} out_Tmp_567 == in_i_11 || out_Tmp_567 == in_Tmp_567;
  free ensures {:va_keep} out_Tmp_568 == in_i_11 || out_Tmp_568 == in_Tmp_568;
  free ensures {:va_keep} out_Tmp_570 == in_i_11 || out_Tmp_570 == in_Tmp_570;
  free ensures {:va_keep} out_Tmp_571 == in_i_11 || out_Tmp_571 == in_Tmp_571;
  free ensures {:va_keep} out_Tmp_573 == in_i_11 || out_Tmp_573 == in_Tmp_573;
  free ensures {:va_keep} out_Tmp_577 == in_i_11 || out_Tmp_577 == in_Tmp_577;
  free ensures {:va_keep} out_Tmp_578 == in_i_11 || out_Tmp_578 == in_Tmp_578;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_ValidateExtendedPropertyDescriptor_loop_L32(in_propertySize: int, in_customProperty: int, in_end_1: int, in_minimumCustomPropertyLength: int, in_propertyNameLength: int, in_Tmp_585: int, in_propertyDataLength: int, in_Tmp_586: int, in_Tmp_588: int, in_offset_3: int, in_propertyCount: int, in_customPropertyData: int, in_PropertyDescriptor: int) returns (out_propertySize: int, out_customProperty: int, out_propertyNameLength: int, out_Tmp_585: int, out_propertyDataLength: int, out_Tmp_586: int, out_Tmp_588: int, out_propertyCount: int, out_customPropertyData: int)
{

  entry:
    out_propertySize, out_customProperty, out_propertyNameLength, out_Tmp_585, out_propertyDataLength, out_Tmp_586, out_Tmp_588, out_propertyCount, out_customPropertyData := in_propertySize, in_customProperty, in_propertyNameLength, in_Tmp_585, in_propertyDataLength, in_Tmp_586, in_Tmp_588, in_propertyCount, in_customPropertyData;
    goto L32, exit;

  exit:
    return;

  L32:
    goto anon49_Else;

  anon49_Else:
    assume {:partition} in_end_1 > in_offset_3;
    goto anon51_Then;

  anon51_Then:
    assume {:partition} in_end_1 >= in_offset_3;
    out_customProperty := in_offset_3;
    assume {:nonnull} out_customProperty != 0;
    assume out_customProperty > 0;
    havoc out_propertySize;
    goto anon58_Then;

  anon58_Then:
    assume {:partition} in_end_1 >= in_offset_3;
    goto anon52_Else;

  anon52_Else:
    assume {:partition} in_minimumCustomPropertyLength <= out_propertySize;
    assume {:nonnull} out_customProperty != 0;
    assume out_customProperty > 0;
    goto anon53_Then;

  anon53_Then:
    assume {:nonnull} out_customProperty != 0;
    assume out_customProperty > 0;
    goto anon54_Else;

  anon54_Else:
    assume {:nonnull} out_customProperty != 0;
    assume out_customProperty > 0;
    havoc out_propertyNameLength;
    goto anon59_Then;

  anon59_Then:
    assume {:partition} out_propertySize >= out_propertyNameLength + in_minimumCustomPropertyLength;
    goto anon55_Else;

  anon55_Else:
    assume {:partition} out_propertyNameLength != 0;
    goto anon56_Else;

  anon56_Else:
    assume {:partition} INTMOD(out_propertyNameLength, 2) == 0;
    assume {:nonnull} out_customProperty != 0;
    assume out_customProperty > 0;
    havoc out_Tmp_588;
    assume {:nonnull} out_Tmp_588 != 0;
    assume out_Tmp_588 > 0;
    goto anon60_Else;

  anon60_Else:
    assume {:partition} Mem_T.VOID[out_Tmp_588] != 0;
    out_Tmp_585 := INTDIV(out_propertyNameLength, 2) - 1;
    assume {:nonnull} out_customProperty != 0;
    assume out_customProperty > 0;
    havoc out_Tmp_586;
    assume {:nonnull} out_Tmp_586 != 0;
    assume out_Tmp_586 > 0;
    goto anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.VOID[out_Tmp_586 + out_Tmp_585 * 4] == 0;
    out_customPropertyData := in_offset_3;
    assume {:nonnull} out_customPropertyData != 0;
    assume out_customPropertyData > 0;
    havoc out_propertyDataLength;
    goto anon62_Then;

  anon62_Then:
    assume {:partition} out_propertySize >= out_propertyNameLength + out_propertyDataLength + in_minimumCustomPropertyLength;
    out_propertyCount := out_propertyCount + 1;
    assume {:nonnull} in_PropertyDescriptor != 0;
    assume in_PropertyDescriptor > 0;
    goto anon63_Else;

  anon63_Else:
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    havoc out_propertyCount;
    return;
}



procedure {:LoopProcedure} USBD_ValidateExtendedPropertyDescriptor_loop_L32(in_propertySize: int, in_customProperty: int, in_end_1: int, in_minimumCustomPropertyLength: int, in_propertyNameLength: int, in_Tmp_585: int, in_propertyDataLength: int, in_Tmp_586: int, in_Tmp_588: int, in_offset_3: int, in_propertyCount: int, in_customPropertyData: int, in_PropertyDescriptor: int) returns (out_propertySize: int, out_customProperty: int, out_propertyNameLength: int, out_Tmp_585: int, out_propertyDataLength: int, out_Tmp_586: int, out_Tmp_588: int, out_propertyCount: int, out_customPropertyData: int);
  free ensures {:va_keep} out_customProperty == in_offset_3 || out_customProperty == in_customProperty;
  free ensures {:va_keep} out_customPropertyData == in_offset_3 || out_customPropertyData == in_customPropertyData;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation WaitForSignal_loop_L9(in_timeOut: int, in_Tmp_590: int, in_sdv_208: int, in_status_36: int, in_ReasonForWaiting: int, in_DebugLog: int) returns (out_Tmp_590: int, out_sdv_208: int, out_status_36: int)
{

  entry:
    out_Tmp_590, out_sdv_208, out_status_36 := in_Tmp_590, in_sdv_208, in_status_36;
    goto L9, exit;

  exit:
    return;

  L9:
    call {:si_unique_call 3249} out_status_36 := KeWaitForSingleObject(0, 0, 0, 0, in_timeOut);
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_status_36 == 258;
    call {:si_unique_call 3250} out_sdv_208 := PsGetCurrentThread();
    havoc out_Tmp_590;
    call {:si_unique_call 3251} WPP_RECORDER_SF_qs(in_DebugLog, 3, 1, 47, out_Tmp_590, out_sdv_208, in_ReasonForWaiting);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3252} {:si_old_unique_call 1} out_Tmp_590, out_sdv_208, out_status_36 := WaitForSignal_loop_L9(in_timeOut, out_Tmp_590, out_sdv_208, out_status_36, in_ReasonForWaiting, in_DebugLog);
    return;
}



procedure {:LoopProcedure} WaitForSignal_loop_L9(in_timeOut: int, in_Tmp_590: int, in_sdv_208: int, in_status_36: int, in_ReasonForWaiting: int, in_DebugLog: int) returns (out_Tmp_590: int, out_sdv_208: int, out_status_36: int);
  modifies alloc;
  free ensures {:va_keep} out_status_36 == 258 || out_status_36 == 0 || out_status_36 == in_status_36;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation UsbcDecrementPendingCount_loop_L17(in_lockEntry_1: int, in_listEntry_2: int, in_sdv_209: int, in_object_1: int) returns (out_lockEntry_1: int, out_listEntry_2: int, out_sdv_209: int)
{

  entry:
    out_lockEntry_1, out_listEntry_2, out_sdv_209 := in_lockEntry_1, in_listEntry_2, in_sdv_209;
    goto L17, exit;

  exit:
    return;

  L17:
    goto anon7_Else;

  anon7_Else:
    call {:si_unique_call 3253} out_sdv_209 := sdv_containing_record(out_listEntry_2, 4);
    out_lockEntry_1 := out_sdv_209;
    assume {:nonnull} out_lockEntry_1 != 0;
    assume out_lockEntry_1 > 0;
    goto anon9_Then;

  anon9_Then:
    assume {:nonnull} out_listEntry_2 != 0;
    assume out_listEntry_2 > 0;
    havoc out_listEntry_2;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    havoc out_listEntry_2;
    return;
}



procedure {:LoopProcedure} UsbcDecrementPendingCount_loop_L17(in_lockEntry_1: int, in_listEntry_2: int, in_sdv_209: int, in_object_1: int) returns (out_lockEntry_1: int, out_listEntry_2: int, out_sdv_209: int);
  free ensures {:va_keep} out_lockEntry_1 == in_listEntry_2 || out_lockEntry_1 == in_lockEntry_1;
  free ensures {:va_keep} out_sdv_209 == in_listEntry_2 || out_sdv_209 == in_sdv_209;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_ValidateExtendedConfigurationDescriptor_loop_L59(in_i_12: int, in_interfaceArray_1: int, in_Tmp_629: int, in_interAssocDesc: int) returns (out_i_12: int, out_Tmp_629: int)
{

  entry:
    out_i_12, out_Tmp_629 := in_i_12, in_Tmp_629;
    goto L59, exit;

  exit:
    return;

  L59:
    assume {:nonnull} in_interAssocDesc != 0;
    assume in_interAssocDesc > 0;
    goto anon91_Else;

  anon91_Else:
    assume {:nonnull} in_interAssocDesc != 0;
    assume in_interAssocDesc > 0;
    havoc out_Tmp_629;
    assume {:nonnull} in_interfaceArray_1 != 0;
    assume in_interfaceArray_1 > 0;
    Mem_T.VOID[in_interfaceArray_1 + out_Tmp_629 * 4] := 2;
    out_i_12 := out_i_12 + 1;
    goto anon91_Else_dummy;

  anon91_Else_dummy:
    call {:si_unique_call 3254} {:si_old_unique_call 1} out_i_12, out_Tmp_629 := USBD_ValidateExtendedConfigurationDescriptor_loop_L59(out_i_12, in_interfaceArray_1, out_Tmp_629, in_interAssocDesc);
    return;
}



procedure {:LoopProcedure} USBD_ValidateExtendedConfigurationDescriptor_loop_L59(in_i_12: int, in_interfaceArray_1: int, in_Tmp_629: int, in_interAssocDesc: int) returns (out_i_12: int, out_Tmp_629: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_ValidateExtendedConfigurationDescriptor_loop_L115(in_i_12: int, in_Tmp_631: int, in_c: int, in_gotNull: int, in_Tmp_636: int, in_functionDesc: int) returns (out_i_12: int, out_Tmp_631: int, out_c: int, out_gotNull: int, out_Tmp_636: int)
{

  entry:
    out_i_12, out_Tmp_631, out_c, out_gotNull, out_Tmp_636 := in_i_12, in_Tmp_631, in_c, in_gotNull, in_Tmp_636;
    goto L115, exit;

  exit:
    return;

  L115:
    assume {:CounterLoop 8} {:Counter "i_12"} true;
    goto anon107_Else;

  anon107_Else:
    assume {:partition} 8 > out_i_12;
    out_Tmp_636 := out_i_12;
    assume {:nonnull} in_functionDesc != 0;
    assume in_functionDesc > 0;
    havoc out_Tmp_631;
    assume {:nonnull} out_Tmp_631 != 0;
    assume out_Tmp_631 > 0;
    out_c := Mem_T.VOID[out_Tmp_631 + out_Tmp_636 * 4];
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} out_c != 0;
    goto anon108_Then;

  anon108_Then:
    assume {:partition} out_gotNull == 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} out_c >= 65;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} 90 >= out_c;
    goto L126;

  L126:
    out_i_12 := out_i_12 + 1;
    goto L126_dummy;

  L126_dummy:
    call {:si_unique_call 3255} {:si_old_unique_call 1} out_i_12, out_Tmp_631, out_c, out_gotNull, out_Tmp_636 := USBD_ValidateExtendedConfigurationDescriptor_loop_L115(out_i_12, out_Tmp_631, out_c, out_gotNull, out_Tmp_636, in_functionDesc);
    return;

  anon111_Then:
    assume {:partition} out_c > 90;
    goto L124;

  L124:
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} out_c >= 48;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} 57 < out_c;
    goto L127;

  L127:
    goto anon112_Else;

  anon112_Else:
    assume {:partition} out_c == 95;
    goto L126;

  anon113_Then:
    assume {:partition} out_c <= 57;
    goto L126;

  anon110_Then:
    assume {:partition} 48 > out_c;
    goto L127;

  anon109_Then:
    assume {:partition} 65 > out_c;
    goto L124;

  anon123_Then:
    assume {:partition} out_c == 0;
    out_gotNull := 1;
    goto L126;
}



procedure {:LoopProcedure} USBD_ValidateExtendedConfigurationDescriptor_loop_L115(in_i_12: int, in_Tmp_631: int, in_c: int, in_gotNull: int, in_Tmp_636: int, in_functionDesc: int) returns (out_i_12: int, out_Tmp_631: int, out_c: int, out_gotNull: int, out_Tmp_636: int);
  free ensures {:va_keep} out_gotNull == 1 || out_gotNull == in_gotNull;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_ValidateExtendedConfigurationDescriptor_loop_L100(in_i_12: int, in_c: int, in_Tmp_634: int, in_gotNull: int, in_Tmp_635: int, in_functionDesc: int) returns (out_i_12: int, out_c: int, out_Tmp_634: int, out_gotNull: int, out_Tmp_635: int)
{

  entry:
    out_i_12, out_c, out_Tmp_634, out_gotNull, out_Tmp_635 := in_i_12, in_c, in_Tmp_634, in_gotNull, in_Tmp_635;
    goto L100, exit;

  exit:
    return;

  L100:
    assume {:CounterLoop 8} {:Counter "i_12"} true;
    goto anon100_Else;

  anon100_Else:
    assume {:partition} 8 > out_i_12;
    out_Tmp_634 := out_i_12;
    assume {:nonnull} in_functionDesc != 0;
    assume in_functionDesc > 0;
    havoc out_Tmp_635;
    assume {:nonnull} out_Tmp_635 != 0;
    assume out_Tmp_635 > 0;
    out_c := Mem_T.VOID[out_Tmp_635 + out_Tmp_634 * 4];
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} out_c != 0;
    goto anon101_Then;

  anon101_Then:
    assume {:partition} out_gotNull == 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} out_c >= 65;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} 90 >= out_c;
    goto L111;

  L111:
    out_i_12 := out_i_12 + 1;
    goto L111_dummy;

  L111_dummy:
    call {:si_unique_call 3256} {:si_old_unique_call 1} out_i_12, out_c, out_Tmp_634, out_gotNull, out_Tmp_635 := USBD_ValidateExtendedConfigurationDescriptor_loop_L100(out_i_12, out_c, out_Tmp_634, out_gotNull, out_Tmp_635, in_functionDesc);
    return;

  anon104_Then:
    assume {:partition} out_c > 90;
    goto L109;

  L109:
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} out_c >= 48;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} 57 < out_c;
    goto L112;

  L112:
    goto anon105_Else;

  anon105_Else:
    assume {:partition} out_c == 95;
    goto L111;

  anon106_Then:
    assume {:partition} out_c <= 57;
    goto L111;

  anon103_Then:
    assume {:partition} 48 > out_c;
    goto L112;

  anon102_Then:
    assume {:partition} 65 > out_c;
    goto L109;

  anon122_Then:
    assume {:partition} out_c == 0;
    out_gotNull := 1;
    goto L111;
}



procedure {:LoopProcedure} USBD_ValidateExtendedConfigurationDescriptor_loop_L100(in_i_12: int, in_c: int, in_Tmp_634: int, in_gotNull: int, in_Tmp_635: int, in_functionDesc: int) returns (out_i_12: int, out_c: int, out_Tmp_634: int, out_gotNull: int, out_Tmp_635: int);
  free ensures {:va_keep} out_gotNull == 1 || out_gotNull == in_gotNull;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_ValidateExtendedConfigurationDescriptor_loop_L84(in_i_12: int, in_interfaceArray_1: int, in_Tmp_631: int, in_numberFunctions: int, in_Tmp_632: int, in_c: int, in_Tmp_634: int, in_gotNull: int, in_end_2: int, in_functionCount_1: int, in_Tmp_635: int, in_Tmp_636: int, in_Tmp_637: int, in_functionDesc: int, in_offset_4: int) returns (out_i_12: int, out_Tmp_631: int, out_Tmp_632: int, out_c: int, out_Tmp_634: int, out_gotNull: int, out_functionCount_1: int, out_Tmp_635: int, out_Tmp_636: int, out_Tmp_637: int, out_functionDesc: int)
{

  entry:
    out_i_12, out_Tmp_631, out_Tmp_632, out_c, out_Tmp_634, out_gotNull, out_functionCount_1, out_Tmp_635, out_Tmp_636, out_Tmp_637, out_functionDesc := in_i_12, in_Tmp_631, in_Tmp_632, in_c, in_Tmp_634, in_gotNull, in_functionCount_1, in_Tmp_635, in_Tmp_636, in_Tmp_637, in_functionDesc;
    goto L84, exit;

  exit:
    return;

  L84:
    goto anon97_Else;

  anon97_Else:
    assume {:partition} in_end_2 > in_offset_4;
    out_functionDesc := in_offset_4;
    assume {:nonnull} out_functionDesc != 0;
    assume out_functionDesc > 0;
    goto anon120_Then;

  anon120_Then:
    assume {:nonnull} out_functionDesc != 0;
    assume out_functionDesc > 0;
    havoc out_Tmp_637;
    assume {:nonnull} in_interfaceArray_1 != 0;
    assume in_interfaceArray_1 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} Mem_T.VOID[in_interfaceArray_1 + out_Tmp_637 * 4] != 1;
    goto anon99_Then;

  anon99_Then:
    assume {:partition} 1 >= in_numberFunctions;
    goto L94;

  L94:
    assume {:nonnull} out_functionDesc != 0;
    assume out_functionDesc > 0;
    havoc out_Tmp_632;
    assume {:nonnull} in_interfaceArray_1 != 0;
    assume in_interfaceArray_1 > 0;
    Mem_T.VOID[in_interfaceArray_1 + out_Tmp_632 * 4] := 3;
    out_gotNull := 0;
    out_i_12 := 0;
    goto L100;

  L100:
    call {:si_unique_call 3258} out_i_12, out_c, out_Tmp_634, out_gotNull, out_Tmp_635 := USBD_ValidateExtendedConfigurationDescriptor_loop_L100(out_i_12, out_c, out_Tmp_634, out_gotNull, out_Tmp_635, out_functionDesc);
    goto L100_last;

  L100_last:
    assume {:CounterLoop 8} {:Counter "i_12"} true;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} 8 > out_i_12;
    out_Tmp_634 := out_i_12;
    assume {:nonnull} out_functionDesc != 0;
    assume out_functionDesc > 0;
    havoc out_Tmp_635;
    assume {:nonnull} out_Tmp_635 != 0;
    assume out_Tmp_635 > 0;
    out_c := Mem_T.VOID[out_Tmp_635 + out_Tmp_634 * 4];
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} out_c != 0;
    goto anon101_Then;

  anon101_Then:
    assume {:partition} out_gotNull == 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} out_c >= 65;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} 90 >= out_c;
    goto L111;

  L111:
    out_i_12 := out_i_12 + 1;
    assume false;
    return;

  anon104_Then:
    assume {:partition} out_c > 90;
    goto L109;

  L109:
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} out_c >= 48;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} 57 < out_c;
    goto L112;

  L112:
    goto anon105_Else;

  anon105_Else:
    assume {:partition} out_c == 95;
    goto L111;

  anon106_Then:
    assume {:partition} out_c <= 57;
    goto L111;

  anon103_Then:
    assume {:partition} 48 > out_c;
    goto L112;

  anon102_Then:
    assume {:partition} 65 > out_c;
    goto L109;

  anon122_Then:
    assume {:partition} out_c == 0;
    out_gotNull := 1;
    goto L111;

  anon100_Then:
    assume {:partition} out_i_12 >= 8;
    out_gotNull := 0;
    out_i_12 := 0;
    goto L115;

  L115:
    call {:si_unique_call 3257} out_i_12, out_Tmp_631, out_c, out_gotNull, out_Tmp_636 := USBD_ValidateExtendedConfigurationDescriptor_loop_L115(out_i_12, out_Tmp_631, out_c, out_gotNull, out_Tmp_636, out_functionDesc);
    goto L115_last;

  L115_last:
    assume {:CounterLoop 8} {:Counter "i_12"} true;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} 8 > out_i_12;
    out_Tmp_636 := out_i_12;
    assume {:nonnull} out_functionDesc != 0;
    assume out_functionDesc > 0;
    havoc out_Tmp_631;
    assume {:nonnull} out_Tmp_631 != 0;
    assume out_Tmp_631 > 0;
    out_c := Mem_T.VOID[out_Tmp_631 + out_Tmp_636 * 4];
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} out_c != 0;
    goto anon108_Then;

  anon108_Then:
    assume {:partition} out_gotNull == 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} out_c >= 65;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} 90 >= out_c;
    goto L126;

  L126:
    out_i_12 := out_i_12 + 1;
    assume false;
    return;

  anon111_Then:
    assume {:partition} out_c > 90;
    goto L124;

  L124:
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} out_c >= 48;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} 57 < out_c;
    goto L127;

  L127:
    goto anon112_Else;

  anon112_Else:
    assume {:partition} out_c == 95;
    goto L126;

  anon113_Then:
    assume {:partition} out_c <= 57;
    goto L126;

  anon110_Then:
    assume {:partition} 48 > out_c;
    goto L127;

  anon109_Then:
    assume {:partition} 65 > out_c;
    goto L124;

  anon123_Then:
    assume {:partition} out_c == 0;
    out_gotNull := 1;
    goto L126;

  anon107_Then:
    assume {:partition} out_i_12 >= 8;
    out_functionCount_1 := out_functionCount_1 + 1;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    call {:si_unique_call 3259} {:si_old_unique_call 1} out_i_12, out_Tmp_631, out_Tmp_632, out_c, out_Tmp_634, out_gotNull, out_functionCount_1, out_Tmp_635, out_Tmp_636, out_Tmp_637, out_functionDesc := USBD_ValidateExtendedConfigurationDescriptor_loop_L84(out_i_12, in_interfaceArray_1, out_Tmp_631, in_numberFunctions, out_Tmp_632, out_c, out_Tmp_634, out_gotNull, in_end_2, out_functionCount_1, out_Tmp_635, out_Tmp_636, out_Tmp_637, out_functionDesc, in_offset_4);
    return;

  anon121_Then:
    assume {:partition} Mem_T.VOID[in_interfaceArray_1 + out_Tmp_637 * 4] == 1;
    goto L94;
}



procedure {:LoopProcedure} USBD_ValidateExtendedConfigurationDescriptor_loop_L84(in_i_12: int, in_interfaceArray_1: int, in_Tmp_631: int, in_numberFunctions: int, in_Tmp_632: int, in_c: int, in_Tmp_634: int, in_gotNull: int, in_end_2: int, in_functionCount_1: int, in_Tmp_635: int, in_Tmp_636: int, in_Tmp_637: int, in_functionDesc: int, in_offset_4: int) returns (out_i_12: int, out_Tmp_631: int, out_Tmp_632: int, out_c: int, out_Tmp_634: int, out_gotNull: int, out_functionCount_1: int, out_Tmp_635: int, out_Tmp_636: int, out_Tmp_637: int, out_functionDesc: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} out_gotNull == 1 || out_gotNull == 0 || out_gotNull == in_gotNull;
  free ensures {:va_keep} out_functionDesc == in_functionDesc || out_functionDesc == in_offset_4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_ValidateExtendedConfigurationDescriptor_loop_L46(in_i_12: int, in_interfaceArray_1: int, in_Tmp_629: int, in_Tmp_630: int, in_commonDesc_1: int, in_numberFunctions: int, in_numberInterfaces: int, in_Tmp_633: int, in_end_2: int, in_interAssocDesc: int, in_Tmp_638: int, in_offset_4: int, in_interDesc: int) returns (out_i_12: int, out_Tmp_629: int, out_Tmp_630: int, out_commonDesc_1: int, out_numberFunctions: int, out_numberInterfaces: int, out_Tmp_633: int, out_interAssocDesc: int, out_Tmp_638: int, out_interDesc: int)
{

  entry:
    out_i_12, out_Tmp_629, out_Tmp_630, out_commonDesc_1, out_numberFunctions, out_numberInterfaces, out_Tmp_633, out_interAssocDesc, out_Tmp_638, out_interDesc := in_i_12, in_Tmp_629, in_Tmp_630, in_commonDesc_1, in_numberFunctions, in_numberInterfaces, in_Tmp_633, in_interAssocDesc, in_Tmp_638, in_interDesc;
    goto L46, exit;

  exit:
    return;

  L46:
    goto anon88_Else;

  anon88_Else:
    assume {:partition} in_end_2 > in_offset_4;
    out_commonDesc_1 := in_offset_4;
    goto anon116_Then;

  anon116_Then:
    assume {:partition} in_end_2 >= in_offset_4;
    assume {:nonnull} out_commonDesc_1 != 0;
    assume out_commonDesc_1 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_1)] == 11;
    out_interAssocDesc := out_commonDesc_1;
    assume {:nonnull} out_interAssocDesc != 0;
    assume out_interAssocDesc > 0;
    havoc out_Tmp_638;
    assume {:nonnull} in_interfaceArray_1 != 0;
    assume in_interfaceArray_1 > 0;
    Mem_T.VOID[in_interfaceArray_1 + out_Tmp_638 * 4] := 1;
    out_i_12 := 1;
    goto L59;

  L59:
    call {:si_unique_call 3260} out_i_12, out_Tmp_629 := USBD_ValidateExtendedConfigurationDescriptor_loop_L59(out_i_12, in_interfaceArray_1, out_Tmp_629, out_interAssocDesc);
    goto L59_last;

  L59_last:
    assume {:nonnull} out_interAssocDesc != 0;
    assume out_interAssocDesc > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} out_interAssocDesc != 0;
    assume out_interAssocDesc > 0;
    havoc out_Tmp_629;
    assume {:nonnull} in_interfaceArray_1 != 0;
    assume in_interfaceArray_1 > 0;
    Mem_T.VOID[in_interfaceArray_1 + out_Tmp_629 * 4] := 2;
    out_i_12 := out_i_12 + 1;
    assume false;
    return;

  anon91_Then:
    out_numberFunctions := out_numberFunctions + 1;
    assume {:nonnull} out_interAssocDesc != 0;
    assume out_interAssocDesc > 0;
    havoc out_numberInterfaces;
    goto L54;

  L54:
    assume {:nonnull} out_commonDesc_1 != 0;
    assume out_commonDesc_1 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_1)] == 4;
    out_interDesc := in_offset_4;
    assume {:nonnull} out_interDesc != 0;
    assume out_interDesc > 0;
    out_Tmp_633 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_interDesc)];
    assume {:nonnull} in_interfaceArray_1 != 0;
    assume in_interfaceArray_1 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} Mem_T.VOID[in_interfaceArray_1 + out_Tmp_633 * 4] == 0;
    assume {:nonnull} out_interDesc != 0;
    assume out_interDesc > 0;
    out_Tmp_630 := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_interDesc)];
    assume {:nonnull} in_interfaceArray_1 != 0;
    assume in_interfaceArray_1 > 0;
    Mem_T.VOID[in_interfaceArray_1 + out_Tmp_630 * 4] := 1;
    goto L64;

  L64:
    assume {:nonnull} out_commonDesc_1 != 0;
    assume out_commonDesc_1 > 0;
    goto anon92_Else;

  anon92_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_1)] != 0;
    goto anon92_Else_dummy;

  anon92_Else_dummy:
    call {:si_unique_call 3261} {:si_old_unique_call 1} out_i_12, out_Tmp_629, out_Tmp_630, out_commonDesc_1, out_numberFunctions, out_numberInterfaces, out_Tmp_633, out_interAssocDesc, out_Tmp_638, out_interDesc := USBD_ValidateExtendedConfigurationDescriptor_loop_L46(out_i_12, in_interfaceArray_1, out_Tmp_629, out_Tmp_630, out_commonDesc_1, out_numberFunctions, out_numberInterfaces, out_Tmp_633, in_end_2, out_interAssocDesc, out_Tmp_638, in_offset_4, out_interDesc);
    return;

  anon117_Then:
    assume {:partition} Mem_T.VOID[in_interfaceArray_1 + out_Tmp_633 * 4] != 0;
    goto L64;

  anon90_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_1)] != 4;
    goto L64;

  anon89_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_1)] != 11;
    goto L54;
}



procedure {:LoopProcedure} USBD_ValidateExtendedConfigurationDescriptor_loop_L46(in_i_12: int, in_interfaceArray_1: int, in_Tmp_629: int, in_Tmp_630: int, in_commonDesc_1: int, in_numberFunctions: int, in_numberInterfaces: int, in_Tmp_633: int, in_end_2: int, in_interAssocDesc: int, in_Tmp_638: int, in_offset_4: int, in_interDesc: int) returns (out_i_12: int, out_Tmp_629: int, out_Tmp_630: int, out_commonDesc_1: int, out_numberFunctions: int, out_numberInterfaces: int, out_Tmp_633: int, out_interAssocDesc: int, out_Tmp_638: int, out_interDesc: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} out_commonDesc_1 == in_commonDesc_1 || out_commonDesc_1 == in_offset_4;
  free ensures {:va_keep} out_interAssocDesc == in_interAssocDesc || out_interAssocDesc == in_offset_4;
  free ensures {:va_keep} out_interDesc == in_interDesc || out_interDesc == in_offset_4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation UsbcReleaseRemoveLock_loop_L15(in_lockEntry_3: int, in_listEntry_3: int, in_sdv_232: int, in_object_3: int) returns (out_lockEntry_3: int, out_listEntry_3: int, out_sdv_232: int)
{

  entry:
    out_lockEntry_3, out_listEntry_3, out_sdv_232 := in_lockEntry_3, in_listEntry_3, in_sdv_232;
    goto L15, exit;

  exit:
    return;

  L15:
    goto anon5_Else;

  anon5_Else:
    call {:si_unique_call 3262} out_sdv_232 := sdv_containing_record(out_listEntry_3, 4);
    out_lockEntry_3 := out_sdv_232;
    assume {:nonnull} out_lockEntry_3 != 0;
    assume out_lockEntry_3 > 0;
    goto anon6_Then;

  anon6_Then:
    assume {:nonnull} out_listEntry_3 != 0;
    assume out_listEntry_3 > 0;
    havoc out_listEntry_3;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    havoc out_listEntry_3;
    return;
}



procedure {:LoopProcedure} UsbcReleaseRemoveLock_loop_L15(in_lockEntry_3: int, in_listEntry_3: int, in_sdv_232: int, in_object_3: int) returns (out_lockEntry_3: int, out_listEntry_3: int, out_sdv_232: int);
  free ensures {:va_keep} out_lockEntry_3 == in_listEntry_3 || out_lockEntry_3 == in_lockEntry_3;
  free ensures {:va_keep} out_sdv_232 == in_listEntry_3 || out_sdv_232 == in_sdv_232;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation AcquireMutex_loop_L9(in_Tmp_653: int, in_timeOut_1: int, in_sdv_237: int, in_status_40: int, in_ReasonForWaiting_1: int, in_DebugLog_1: int) returns (out_Tmp_653: int, out_sdv_237: int, out_status_40: int)
{

  entry:
    out_Tmp_653, out_sdv_237, out_status_40 := in_Tmp_653, in_sdv_237, in_status_40;
    goto L9, exit;

  exit:
    return;

  L9:
    call {:si_unique_call 3263} out_status_40 := KeWaitForSingleObject(0, 0, 0, 0, in_timeOut_1);
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_status_40 == 258;
    call {:si_unique_call 3264} out_sdv_237 := PsGetCurrentThread();
    havoc out_Tmp_653;
    call {:si_unique_call 3265} WPP_RECORDER_SF_qs(in_DebugLog_1, 3, 1, 48, out_Tmp_653, out_sdv_237, in_ReasonForWaiting_1);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3266} {:si_old_unique_call 1} out_Tmp_653, out_sdv_237, out_status_40 := AcquireMutex_loop_L9(out_Tmp_653, in_timeOut_1, out_sdv_237, out_status_40, in_ReasonForWaiting_1, in_DebugLog_1);
    return;
}



procedure {:LoopProcedure} AcquireMutex_loop_L9(in_Tmp_653: int, in_timeOut_1: int, in_sdv_237: int, in_status_40: int, in_ReasonForWaiting_1: int, in_DebugLog_1: int) returns (out_Tmp_653: int, out_sdv_237: int, out_status_40: int);
  modifies alloc;
  free ensures {:va_keep} out_status_40 == 258 || out_status_40 == 0 || out_status_40 == in_status_40;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation USBD_InstallExtPropDescSections_loop_L27(in_i_13: int, in_customData: int, in_customProp: int, in_ntStatus_17: int, in_unicodeNameString: int, in_descHeader: int, in_offset_5: int) returns (out_i_13: int, out_customData: int, out_customProp: int, out_ntStatus_17: int)
{
  var vslice_dummy_var_1048: int;
  var vslice_dummy_var_1049: int;
  var vslice_dummy_var_1050: int;

  entry:
    out_i_13, out_customData, out_customProp, out_ntStatus_17 := in_i_13, in_customData, in_customProp, in_ntStatus_17;
    goto L27, exit;

  exit:
    return;

  L27:
    assume {:nonnull} in_descHeader != 0;
    assume in_descHeader > 0;
    goto anon21_Else;

  anon21_Else:
    out_customProp := 0;
    out_customData := 0;
    out_customProp := in_offset_5;
    out_customData := in_offset_5;
    assume {:nonnull} out_customProp != 0;
    assume out_customProp > 0;
    havoc vslice_dummy_var_1048;
    call {:si_unique_call 3267} RtlInitUnicodeString(in_unicodeNameString, vslice_dummy_var_1048);
    assume {:nonnull} out_customData != 0;
    assume out_customData > 0;
    assume {:nonnull} out_customProp != 0;
    assume out_customProp > 0;
    havoc vslice_dummy_var_1049;
    havoc vslice_dummy_var_1050;
    call {:si_unique_call 3268} out_ntStatus_17 := ZwSetValueKey(0, 0, 0, vslice_dummy_var_1049, 0, vslice_dummy_var_1050);
    goto anon22_Else;

  anon22_Else:
    assume {:partition} out_ntStatus_17 >= 0;
    out_i_13 := out_i_13 + 1;
    goto anon22_Else_dummy;

  anon22_Else_dummy:
    havoc out_i_13;
    return;
}



procedure {:LoopProcedure} USBD_InstallExtPropDescSections_loop_L27(in_i_13: int, in_customData: int, in_customProp: int, in_ntStatus_17: int, in_unicodeNameString: int, in_descHeader: int, in_offset_5: int) returns (out_i_13: int, out_customData: int, out_customProp: int, out_ntStatus_17: int);
  modifies alloc;
  free ensures {:va_keep} out_customData == in_offset_5 || out_customData == in_customData;
  free ensures {:va_keep} out_customProp == in_offset_5 || out_customProp == in_customProp;
  free ensures {:va_keep} out_ntStatus_17 == -1073741790 || out_ntStatus_17 == -1073741816 || out_ntStatus_17 == -1073741823 || out_ntStatus_17 == 0 || out_ntStatus_17 == in_ntStatus_17;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CleanFunctionList_loop_L8(in_i_14: int, in_Tmp_671: int, in_Tmp_672: int, in_Tmp_673: int, in_Tmp_674: int, in_Tmp_678: int, in_Tmp_679: int, in_Tmp_683: int, in_functionList_1: int, in_numFunctions_4: int) returns (out_i_14: int, out_Tmp_671: int, out_Tmp_672: int, out_Tmp_673: int, out_Tmp_674: int, out_Tmp_678: int, out_Tmp_679: int, out_Tmp_683: int)
{

  entry:
    out_i_14, out_Tmp_671, out_Tmp_672, out_Tmp_673, out_Tmp_674, out_Tmp_678, out_Tmp_679, out_Tmp_683 := in_i_14, in_Tmp_671, in_Tmp_672, in_Tmp_673, in_Tmp_674, in_Tmp_678, in_Tmp_679, in_Tmp_683;
    goto L8, exit;

  exit:
    return;

  L8:
    goto anon13_Else;

  anon13_Else:
    assume {:partition} in_numFunctions_4 > out_i_14;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    out_Tmp_683 := out_i_14;
    assume {:nonnull} in_functionList_1 != 0;
    assume in_functionList_1 > 0;
    call {:si_unique_call 3272} ExFreePoolWithTag(0, -1016958123);
    goto L13;

  L13:
    out_Tmp_673 := out_i_14;
    assume {:nonnull} in_functionList_1 != 0;
    assume in_functionList_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    out_Tmp_679 := out_i_14;
    assume {:nonnull} in_functionList_1 != 0;
    assume in_functionList_1 > 0;
    call {:si_unique_call 3271} sdv_ExFreePool(0);
    goto L18;

  L18:
    out_Tmp_672 := out_i_14;
    assume {:nonnull} in_functionList_1 != 0;
    assume in_functionList_1 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    out_Tmp_678 := out_i_14;
    assume {:nonnull} in_functionList_1 != 0;
    assume in_functionList_1 > 0;
    call {:si_unique_call 3270} sdv_ExFreePool(0);
    goto L23;

  L23:
    out_Tmp_674 := out_i_14;
    assume {:nonnull} in_functionList_1 != 0;
    assume in_functionList_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    out_Tmp_671 := out_i_14;
    assume {:nonnull} in_functionList_1 != 0;
    assume in_functionList_1 > 0;
    call {:si_unique_call 3269} sdv_ExFreePool(0);
    goto L28;

  L28:
    out_i_14 := out_i_14 + 1;
    goto L28_dummy;

  L28_dummy:
    havoc out_i_14;
    return;

  anon18_Then:
    goto L28;

  anon17_Then:
    goto L23;

  anon16_Then:
    goto L18;

  anon15_Then:
    goto L13;
}



procedure {:LoopProcedure} CleanFunctionList_loop_L8(in_i_14: int, in_Tmp_671: int, in_Tmp_672: int, in_Tmp_673: int, in_Tmp_674: int, in_Tmp_678: int, in_Tmp_679: int, in_Tmp_683: int, in_functionList_1: int, in_numFunctions_4: int) returns (out_i_14: int, out_Tmp_671: int, out_Tmp_672: int, out_Tmp_673: int, out_Tmp_674: int, out_Tmp_678: int, out_Tmp_679: int, out_Tmp_683: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_671 == in_i_14 || out_Tmp_671 == in_Tmp_671;
  free ensures {:va_keep} out_Tmp_672 == in_i_14 || out_Tmp_672 == in_Tmp_672;
  free ensures {:va_keep} out_Tmp_673 == in_i_14 || out_Tmp_673 == in_Tmp_673;
  free ensures {:va_keep} out_Tmp_674 == in_i_14 || out_Tmp_674 == in_Tmp_674;
  free ensures {:va_keep} out_Tmp_678 == in_i_14 || out_Tmp_678 == in_Tmp_678;
  free ensures {:va_keep} out_Tmp_679 == in_i_14 || out_Tmp_679 == in_Tmp_679;
  free ensures {:va_keep} out_Tmp_683 == in_i_14 || out_Tmp_683 == in_Tmp_683;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation AppendInterfaceNumber_loop_L50(in_suffixLen: int, in_newIdLen: int, in_buf: int, in_oldIdLen: int, in_suffix: int, in_oldIDs: int, in_vslice_dummy_var_95: int, in_vslice_dummy_var_97: int) returns (out_newIdLen: int, out_oldIdLen: int, out_vslice_dummy_var_95: int, out_vslice_dummy_var_97: int)
{

  entry:
    out_newIdLen, out_oldIdLen, out_vslice_dummy_var_95, out_vslice_dummy_var_97 := in_newIdLen, in_oldIdLen, in_vslice_dummy_var_95, in_vslice_dummy_var_97;
    goto L50, exit;

  exit:
    return;

  L50:
    assume {:nonnull} in_oldIDs != 0;
    assume in_oldIDs > 0;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.VOID[in_oldIDs] != 0;
    call {:si_unique_call 3275} out_oldIdLen := WStrLen(in_oldIDs);
    goto anon14_Then;

  anon14_Then:
    assume {:partition} out_newIdLen >= out_oldIdLen + in_suffixLen + 1;
    call {:si_unique_call 3273} out_vslice_dummy_var_95 := RtlStringCchCopyW(in_buf, out_newIdLen, in_oldIDs);
    out_newIdLen := out_newIdLen - out_oldIdLen;
    call {:si_unique_call 3274} out_vslice_dummy_var_97 := RtlStringCchCopyW(in_buf, out_newIdLen, in_suffix);
    out_newIdLen := out_newIdLen - in_suffixLen;
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    call {:si_unique_call 3276} {:si_old_unique_call 1} out_newIdLen, out_oldIdLen, out_vslice_dummy_var_95, out_vslice_dummy_var_97 := AppendInterfaceNumber_loop_L50(in_suffixLen, out_newIdLen, in_buf, out_oldIdLen, in_suffix, in_oldIDs, out_vslice_dummy_var_95, out_vslice_dummy_var_97);
    return;
}



procedure {:LoopProcedure} AppendInterfaceNumber_loop_L50(in_suffixLen: int, in_newIdLen: int, in_buf: int, in_oldIdLen: int, in_suffix: int, in_oldIDs: int, in_vslice_dummy_var_95: int, in_vslice_dummy_var_97: int) returns (out_newIdLen: int, out_oldIdLen: int, out_vslice_dummy_var_95: int, out_vslice_dummy_var_97: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} out_vslice_dummy_var_95 == 0 || out_vslice_dummy_var_95 == 5 || out_vslice_dummy_var_95 == -1073741811 || out_vslice_dummy_var_95 == in_vslice_dummy_var_95;
  free ensures {:va_keep} out_vslice_dummy_var_97 == 0 || out_vslice_dummy_var_97 == 5 || out_vslice_dummy_var_97 == -1073741811 || out_vslice_dummy_var_97 == in_vslice_dummy_var_97;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation AppendInterfaceNumber_loop_L19(in_newIdLen: int, in_thisIdLen: int, in_id_11: int) returns (out_newIdLen: int, out_thisIdLen: int)
{

  entry:
    out_newIdLen, out_thisIdLen := in_newIdLen, in_thisIdLen;
    goto L19, exit;

  exit:
    return;

  L19:
    assume {:nonnull} in_id_11 != 0;
    assume in_id_11 > 0;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.VOID[in_id_11] != 0;
    call {:si_unique_call 3277} out_thisIdLen := WStrLen(in_id_11);
    out_newIdLen := out_newIdLen + out_thisIdLen + 1 + 14;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    call {:si_unique_call 3278} {:si_old_unique_call 1} out_newIdLen, out_thisIdLen := AppendInterfaceNumber_loop_L19(out_newIdLen, out_thisIdLen, in_id_11);
    return;
}



procedure {:LoopProcedure} AppendInterfaceNumber_loop_L19(in_newIdLen: int, in_thisIdLen: int, in_id_11: int) returns (out_newIdLen: int, out_thisIdLen: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetChannelDescForInterface_loop_L24(in_channelDesc: int, in_methodAndVar: int)
{

  entry:
    goto L24, exit;

  exit:
    return;

  L24:
    assume {:nonnull} in_channelDesc != 0;
    assume in_channelDesc > 0;
    goto anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(in_channelDesc)] > in_methodAndVar;
    assume {:nonnull} in_methodAndVar != 0;
    assume in_methodAndVar > 0;
    goto anon22_Then;

  anon22_Then:
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    call {:si_unique_call 3279} {:si_old_unique_call 1} GetChannelDescForInterface_loop_L24(in_channelDesc, in_methodAndVar);
    return;
}



procedure {:LoopProcedure} GetChannelDescForInterface_loop_L24(in_channelDesc: int, in_methodAndVar: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetChannelDescForInterface_loop_L15(in_commonDesc_2: int, in_Tmp_693: int, in_parentFdoExt_60: int) returns (out_Tmp_693: int)
{

  entry:
    out_Tmp_693 := in_Tmp_693;
    goto L15, exit;

  exit:
    return;

  L15:
    assume {:nonnull} in_parentFdoExt_60 != 0;
    assume in_parentFdoExt_60 > 0;
    havoc out_Tmp_693;
    assume {:nonnull} out_Tmp_693 != 0;
    assume out_Tmp_693 > 0;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.VOID[wTotalLength__USB_CONFIGURATION_DESCRIPTOR(out_Tmp_693)] > in_commonDesc_2;
    assume {:nonnull} in_commonDesc_2 != 0;
    assume in_commonDesc_2 > 0;
    goto anon19_Then;

  anon19_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_2)] != 34;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 3280} {:si_old_unique_call 1} out_Tmp_693 := GetChannelDescForInterface_loop_L15(in_commonDesc_2, out_Tmp_693, in_parentFdoExt_60);
    return;
}



procedure {:LoopProcedure} GetChannelDescForInterface_loop_L15(in_commonDesc_2: int, in_Tmp_693: int, in_parentFdoExt_60: int) returns (out_Tmp_693: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation BuildFunctionConfigurationDescriptor_loop_L34(in_thisIfaceDesc: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_Tmp_793: int, in_totalLength_1: int, in_parentFdoExt_67: int) returns (out_Tmp_793: int, out_totalLength_1: int)
{

  entry:
    out_Tmp_793, out_totalLength_1 := in_Tmp_793, in_totalLength_1;
    goto L34, exit;

  exit:
    return;

  L34:
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    goto anon53_Then;

  anon53_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] >= 2;
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] != 11;
    goto L39;

  L39:
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    out_totalLength_1 := out_totalLength_1 + Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(in_commonDesc_3)];
    goto L40;

  L40:
    goto anon68_Else;

  anon68_Else:
    assume {:partition} in_parentConfigDescEnd > in_commonDesc_3;
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] == 4;
    out_Tmp_793 := in_commonDesc_3;
    assume {:nonnull} out_Tmp_793 != 0;
    assume out_Tmp_793 > 0;
    assume {:nonnull} in_thisIfaceDesc != 0;
    assume in_thisIfaceDesc > 0;
    goto anon69_Then;

  anon69_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_793)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(in_thisIfaceDesc)];
    goto anon69_Then_dummy;

  anon69_Then_dummy:
    goto L_BAF_0;

  L_BAF_0:
    havoc out_totalLength_1;
    return;

  anon56_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] != 4;
    goto anon56_Then_dummy;

  anon56_Then_dummy:
    goto L_BAF_0;

  anon54_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] == 11;
    assume {:nonnull} in_parentFdoExt_67 != 0;
    assume in_parentFdoExt_67 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L40;

  anon55_Then:
    goto L39;
}



procedure {:LoopProcedure} BuildFunctionConfigurationDescriptor_loop_L34(in_thisIfaceDesc: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_Tmp_793: int, in_totalLength_1: int, in_parentFdoExt_67: int) returns (out_Tmp_793: int, out_totalLength_1: int);
  free ensures {:va_keep} out_Tmp_793 == in_Tmp_793 || out_Tmp_793 == in_commonDesc_3;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation BuildFunctionConfigurationDescriptor_loop_L77(in_thisIfaceDesc: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_bytesAvailable: int, in_parentFdoExt_67: int, in_Tmp_796: int, in_Tmp_797: int, in_pch: int) returns (out_bytesAvailable: int, out_Tmp_796: int, out_Tmp_797: int)
{

  entry:
    out_bytesAvailable, out_Tmp_796, out_Tmp_797 := in_bytesAvailable, in_Tmp_796, in_Tmp_797;
    goto L77, exit;

  exit:
    return;

  L77:
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    goto anon61_Then;

  anon61_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] >= 2;
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] != 11;
    goto L82;

  L82:
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    goto anon64_Then;

  anon64_Then:
    assume {:partition} out_bytesAvailable >= Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(in_commonDesc_3)];
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    out_Tmp_797 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(in_commonDesc_3)];
    call {:si_unique_call 3281} sdv_RtlCopyMemory(0, 0, out_Tmp_797);
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    out_bytesAvailable := out_bytesAvailable - Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(in_commonDesc_3)];
    goto L91;

  L91:
    goto anon72_Else;

  anon72_Else:
    assume {:partition} in_parentConfigDescEnd > in_commonDesc_3;
    assume {:nonnull} in_commonDesc_3 != 0;
    assume in_commonDesc_3 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] == 4;
    out_Tmp_796 := in_commonDesc_3;
    assume {:nonnull} out_Tmp_796 != 0;
    assume out_Tmp_796 > 0;
    assume {:nonnull} in_thisIfaceDesc != 0;
    assume in_thisIfaceDesc > 0;
    goto anon73_Then;

  anon73_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_796)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(in_thisIfaceDesc)];
    goto anon73_Then_dummy;

  anon73_Then_dummy:
    goto L_BAF_1;

  L_BAF_1:
    havoc out_bytesAvailable;
    return;

  anon65_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] != 4;
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    goto L_BAF_1;

  anon62_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(in_commonDesc_3)] == 11;
    assume {:nonnull} in_parentFdoExt_67 != 0;
    assume in_parentFdoExt_67 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L91;

  anon63_Then:
    goto L82;
}



procedure {:LoopProcedure} BuildFunctionConfigurationDescriptor_loop_L77(in_thisIfaceDesc: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_bytesAvailable: int, in_parentFdoExt_67: int, in_Tmp_796: int, in_Tmp_797: int, in_pch: int) returns (out_bytesAvailable: int, out_Tmp_796: int, out_Tmp_797: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_796 == in_Tmp_796 || out_Tmp_796 == in_commonDesc_3;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation BuildFunctionConfigurationDescriptor_loop_L73(in_i_15: int, in_functionAssoc_4: int, in_thisIfaceDesc: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_Tmp_789: int, in_Tmp_792: int, in_bytesAvailable: int, in_parentFdoExt_67: int, in_Tmp_796: int, in_Tmp_797: int, in_pch: int, in_Tmp_801: int, in_functionPdoExt_17: int) returns (out_i_15: int, out_thisIfaceDesc: int, out_commonDesc_3: int, out_Tmp_789: int, out_Tmp_792: int, out_bytesAvailable: int, out_Tmp_796: int, out_Tmp_797: int, out_Tmp_801: int)
{

  entry:
    out_i_15, out_thisIfaceDesc, out_commonDesc_3, out_Tmp_789, out_Tmp_792, out_bytesAvailable, out_Tmp_796, out_Tmp_797, out_Tmp_801 := in_i_15, in_thisIfaceDesc, in_commonDesc_3, in_Tmp_789, in_Tmp_792, in_bytesAvailable, in_Tmp_796, in_Tmp_797, in_Tmp_801;
    goto L73, exit;

  exit:
    return;

  L73:
    assume {:nonnull} in_functionPdoExt_17 != 0;
    assume in_functionPdoExt_17 > 0;
    goto anon60_Else;

  anon60_Else:
    out_Tmp_792 := out_i_15;
    assume {:nonnull} in_functionAssoc_4 != 0;
    assume in_functionAssoc_4 > 0;
    havoc out_Tmp_801;
    assume {:nonnull} out_Tmp_801 != 0;
    assume out_Tmp_801 > 0;
    havoc out_Tmp_789;
    assume {:nonnull} out_Tmp_789 != 0;
    assume out_Tmp_789 > 0;
    havoc out_thisIfaceDesc;
    out_commonDesc_3 := out_thisIfaceDesc;
    goto L77;

  L77:
    call {:si_unique_call 3283} out_bytesAvailable, out_Tmp_796, out_Tmp_797 := BuildFunctionConfigurationDescriptor_loop_L77(out_thisIfaceDesc, out_commonDesc_3, in_parentConfigDescEnd, out_bytesAvailable, in_parentFdoExt_67, out_Tmp_796, out_Tmp_797, in_pch);
    goto L77_last;

  L77_last:
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} 2 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)];
    goto L80;

  L80:
    out_i_15 := out_i_15 + 1;
    goto L80_dummy;

  L80_dummy:
    call {:si_unique_call 3284} {:si_old_unique_call 1} out_i_15, out_thisIfaceDesc, out_commonDesc_3, out_Tmp_789, out_Tmp_792, out_bytesAvailable, out_Tmp_796, out_Tmp_797, out_Tmp_801 := BuildFunctionConfigurationDescriptor_loop_L73(out_i_15, in_functionAssoc_4, out_thisIfaceDesc, out_commonDesc_3, in_parentConfigDescEnd, out_Tmp_789, out_Tmp_792, out_bytesAvailable, in_parentFdoExt_67, out_Tmp_796, out_Tmp_797, in_pch, out_Tmp_801, in_functionPdoExt_17);
    return;

  anon61_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] >= 2;
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] != 11;
    goto L82;

  L82:
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    goto anon64_Then;

  anon64_Then:
    assume {:partition} out_bytesAvailable >= Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)];
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    out_Tmp_797 := Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)];
    call {:si_unique_call 3282} sdv_RtlCopyMemory(0, 0, out_Tmp_797);
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    out_bytesAvailable := out_bytesAvailable - Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)];
    goto L91;

  L91:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} in_parentConfigDescEnd > out_commonDesc_3;
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] == 4;
    out_Tmp_796 := out_commonDesc_3;
    assume {:nonnull} out_Tmp_796 != 0;
    assume out_Tmp_796 > 0;
    assume {:nonnull} out_thisIfaceDesc != 0;
    assume out_thisIfaceDesc > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_796)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_thisIfaceDesc)];
    goto L80;

  anon73_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_796)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_thisIfaceDesc)];
    assume false;
    return;

  anon65_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] != 4;
    assume false;
    return;

  anon72_Then:
    assume {:partition} out_commonDesc_3 >= in_parentConfigDescEnd;
    goto L80;

  anon62_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] == 11;
    assume {:nonnull} in_parentFdoExt_67 != 0;
    assume in_parentFdoExt_67 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L91;

  anon63_Then:
    goto L82;
}



procedure {:LoopProcedure} BuildFunctionConfigurationDescriptor_loop_L73(in_i_15: int, in_functionAssoc_4: int, in_thisIfaceDesc: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_Tmp_789: int, in_Tmp_792: int, in_bytesAvailable: int, in_parentFdoExt_67: int, in_Tmp_796: int, in_Tmp_797: int, in_pch: int, in_Tmp_801: int, in_functionPdoExt_17: int) returns (out_i_15: int, out_thisIfaceDesc: int, out_commonDesc_3: int, out_Tmp_789: int, out_Tmp_792: int, out_bytesAvailable: int, out_Tmp_796: int, out_Tmp_797: int, out_Tmp_801: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation BuildFunctionConfigurationDescriptor_loop_L30(in_i_15: int, in_functionAssoc_4: int, in_thisIfaceDesc: int, in_Tmp_784: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_Tmp_786: int, in_Tmp_793: int, in_totalLength_1: int, in_parentFdoExt_67: int, in_Tmp_798: int, in_functionPdoExt_17: int) returns (out_i_15: int, out_thisIfaceDesc: int, out_Tmp_784: int, out_commonDesc_3: int, out_Tmp_786: int, out_Tmp_793: int, out_totalLength_1: int, out_Tmp_798: int)
{

  entry:
    out_i_15, out_thisIfaceDesc, out_Tmp_784, out_commonDesc_3, out_Tmp_786, out_Tmp_793, out_totalLength_1, out_Tmp_798 := in_i_15, in_thisIfaceDesc, in_Tmp_784, in_commonDesc_3, in_Tmp_786, in_Tmp_793, in_totalLength_1, in_Tmp_798;
    goto L30, exit;

  exit:
    return;

  L30:
    assume {:nonnull} in_functionPdoExt_17 != 0;
    assume in_functionPdoExt_17 > 0;
    goto anon52_Else;

  anon52_Else:
    out_Tmp_784 := out_i_15;
    assume {:nonnull} in_functionAssoc_4 != 0;
    assume in_functionAssoc_4 > 0;
    havoc out_Tmp_786;
    assume {:nonnull} out_Tmp_786 != 0;
    assume out_Tmp_786 > 0;
    havoc out_Tmp_798;
    assume {:nonnull} out_Tmp_798 != 0;
    assume out_Tmp_798 > 0;
    havoc out_thisIfaceDesc;
    out_commonDesc_3 := out_thisIfaceDesc;
    goto L34;

  L34:
    call {:si_unique_call 3285} out_Tmp_793, out_totalLength_1 := BuildFunctionConfigurationDescriptor_loop_L34(out_thisIfaceDesc, out_commonDesc_3, in_parentConfigDescEnd, out_Tmp_793, out_totalLength_1, in_parentFdoExt_67);
    goto L34_last;

  L34_last:
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} 2 > Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)];
    goto L37;

  L37:
    out_i_15 := out_i_15 + 1;
    goto L37_dummy;

  L37_dummy:
    call {:si_unique_call 3286} {:si_old_unique_call 1} out_i_15, out_thisIfaceDesc, out_Tmp_784, out_commonDesc_3, out_Tmp_786, out_Tmp_793, out_totalLength_1, out_Tmp_798 := BuildFunctionConfigurationDescriptor_loop_L30(out_i_15, in_functionAssoc_4, out_thisIfaceDesc, out_Tmp_784, out_commonDesc_3, in_parentConfigDescEnd, out_Tmp_786, out_Tmp_793, out_totalLength_1, in_parentFdoExt_67, out_Tmp_798, in_functionPdoExt_17);
    return;

  anon53_Then:
    assume {:partition} Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] >= 2;
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] != 11;
    goto L39;

  L39:
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    out_totalLength_1 := out_totalLength_1 + Mem_T.VOID[bLength__USB_COMMON_DESCRIPTOR(out_commonDesc_3)];
    goto L40;

  L40:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} in_parentConfigDescEnd > out_commonDesc_3;
    assume {:nonnull} out_commonDesc_3 != 0;
    assume out_commonDesc_3 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] == 4;
    out_Tmp_793 := out_commonDesc_3;
    assume {:nonnull} out_Tmp_793 != 0;
    assume out_Tmp_793 > 0;
    assume {:nonnull} out_thisIfaceDesc != 0;
    assume out_thisIfaceDesc > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_793)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_thisIfaceDesc)];
    goto L37;

  anon69_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_793)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_thisIfaceDesc)];
    assume false;
    return;

  anon56_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] != 4;
    assume false;
    return;

  anon68_Then:
    assume {:partition} out_commonDesc_3 >= in_parentConfigDescEnd;
    goto L37;

  anon54_Then:
    assume {:partition} Mem_T.VOID[bDescriptorType__USB_COMMON_DESCRIPTOR(out_commonDesc_3)] == 11;
    assume {:nonnull} in_parentFdoExt_67 != 0;
    assume in_parentFdoExt_67 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L40;

  anon55_Then:
    goto L39;
}



procedure {:LoopProcedure} BuildFunctionConfigurationDescriptor_loop_L30(in_i_15: int, in_functionAssoc_4: int, in_thisIfaceDesc: int, in_Tmp_784: int, in_commonDesc_3: int, in_parentConfigDescEnd: int, in_Tmp_786: int, in_Tmp_793: int, in_totalLength_1: int, in_parentFdoExt_67: int, in_Tmp_798: int, in_functionPdoExt_17: int) returns (out_i_15: int, out_thisIfaceDesc: int, out_Tmp_784: int, out_commonDesc_3: int, out_Tmp_786: int, out_Tmp_793: int, out_totalLength_1: int, out_Tmp_798: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CompletionPdoSelectInterface_loop_L39(in_urbInterface: int, in_interfaceEntry: int, in_Tmp_838: int) returns (out_Tmp_838: int)
{

  entry:
    out_Tmp_838 := in_Tmp_838;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:nonnull} in_interfaceEntry != 0;
    assume in_interfaceEntry > 0;
    goto anon20_Else;

  anon20_Else:
    assume {:nonnull} in_interfaceEntry != 0;
    assume in_interfaceEntry > 0;
    havoc out_Tmp_838;
    assume {:nonnull} out_Tmp_838 != 0;
    assume out_Tmp_838 > 0;
    assume {:nonnull} in_urbInterface != 0;
    assume in_urbInterface > 0;
    goto anon26_Then;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    call {:si_unique_call 3287} {:si_old_unique_call 1} out_Tmp_838 := CompletionPdoSelectInterface_loop_L39(in_urbInterface, in_interfaceEntry, out_Tmp_838);
    return;
}



procedure {:LoopProcedure} CompletionPdoSelectInterface_loop_L39(in_urbInterface: int, in_interfaceEntry: int, in_Tmp_838: int) returns (out_Tmp_838: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetFunctionMSOSCompatibleIDs_loop_L14(in_i_16: int, in_msExtConfigDesc: int, in_Tmp_845: int, in_Tmp_848: int, in_functionPdoExt_23: int) returns (out_i_16: int, out_Tmp_845: int, out_Tmp_848: int)
{

  entry:
    out_i_16, out_Tmp_845, out_Tmp_848 := in_i_16, in_Tmp_845, in_Tmp_848;
    goto L14, exit;

  exit:
    return;

  L14:
    assume {:nonnull} in_msExtConfigDesc != 0;
    assume in_msExtConfigDesc > 0;
    goto anon7_Else;

  anon7_Else:
    out_Tmp_848 := out_i_16;
    assume {:nonnull} in_msExtConfigDesc != 0;
    assume in_msExtConfigDesc > 0;
    havoc out_Tmp_845;
    assume {:nonnull} out_Tmp_845 != 0;
    assume out_Tmp_845 > 0;
    assume {:nonnull} in_functionPdoExt_23 != 0;
    assume in_functionPdoExt_23 > 0;
    goto anon9_Then;

  anon9_Then:
    out_i_16 := out_i_16 + 1;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    havoc out_i_16;
    return;
}



procedure {:LoopProcedure} GetFunctionMSOSCompatibleIDs_loop_L14(in_i_16: int, in_msExtConfigDesc: int, in_Tmp_845: int, in_Tmp_848: int, in_functionPdoExt_23: int) returns (out_i_16: int, out_Tmp_845: int, out_Tmp_848: int);
  free ensures {:va_keep} out_Tmp_848 == in_i_16 || out_Tmp_848 == in_Tmp_848;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CreateStaticFunctionPDOs_loop_L222(in_Tmp_927: int, in_functionPdoExt_30: int, in_i_17: int, in_tempDevObj: int, in_Tmp_954: int, in_Tmp_960: int, in_Tmp_962: int, in_Tmp_964: int, in_Tmp_967: int, in_parentFdoExt_71: int) returns (out_Tmp_927: int, out_functionPdoExt_30: int, out_i_17: int, out_tempDevObj: int, out_Tmp_954: int, out_Tmp_960: int, out_Tmp_962: int, out_Tmp_964: int, out_Tmp_967: int)
{

  entry:
    out_Tmp_927, out_functionPdoExt_30, out_i_17, out_tempDevObj, out_Tmp_954, out_Tmp_960, out_Tmp_962, out_Tmp_964, out_Tmp_967 := in_Tmp_927, in_functionPdoExt_30, in_i_17, in_tempDevObj, in_Tmp_954, in_Tmp_960, in_Tmp_962, in_Tmp_964, in_Tmp_967;
    goto L222, exit;

  exit:
    return;

  L222:
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    goto anon67_Else;

  anon67_Else:
    out_Tmp_967 := out_i_17;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_962;
    assume {:nonnull} out_Tmp_962 != 0;
    assume out_Tmp_962 > 0;
    havoc out_Tmp_927;
    assume {:nonnull} out_Tmp_927 != 0;
    assume out_Tmp_927 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    out_Tmp_954 := out_i_17;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_960;
    assume {:nonnull} out_Tmp_960 != 0;
    assume out_Tmp_960 > 0;
    havoc out_Tmp_964;
    assume {:nonnull} out_Tmp_964 != 0;
    assume out_Tmp_964 > 0;
    havoc out_tempDevObj;
    assume {:nonnull} out_tempDevObj != 0;
    assume out_tempDevObj > 0;
    havoc out_functionPdoExt_30;
    call {:si_unique_call 3288} FreeResourcesForFunctionSuspend(out_functionPdoExt_30);
    call {:si_unique_call 3289} IoDeleteDevice(0);
    goto L227;

  L227:
    out_i_17 := out_i_17 + 1;
    goto L227_dummy;

  L227_dummy:
    call {:si_unique_call 3290} {:si_old_unique_call 1} out_Tmp_927, out_functionPdoExt_30, out_i_17, out_tempDevObj, out_Tmp_954, out_Tmp_960, out_Tmp_962, out_Tmp_964, out_Tmp_967 := CreateStaticFunctionPDOs_loop_L222(out_Tmp_927, out_functionPdoExt_30, out_i_17, out_tempDevObj, out_Tmp_954, out_Tmp_960, out_Tmp_962, out_Tmp_964, out_Tmp_967, in_parentFdoExt_71);
    return;

  anon71_Then:
    goto L227;
}



procedure {:LoopProcedure} CreateStaticFunctionPDOs_loop_L222(in_Tmp_927: int, in_functionPdoExt_30: int, in_i_17: int, in_tempDevObj: int, in_Tmp_954: int, in_Tmp_960: int, in_Tmp_962: int, in_Tmp_964: int, in_Tmp_967: int, in_parentFdoExt_71: int) returns (out_Tmp_927: int, out_functionPdoExt_30: int, out_i_17: int, out_tempDevObj: int, out_Tmp_954: int, out_Tmp_960: int, out_Tmp_962: int, out_Tmp_964: int, out_Tmp_967: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CreateStaticFunctionPDOs_loop_L64(in_functionAssoc_6: int, in_Tmp_928: int, in_ifaceDesc_1: int, in_Tmp_930: int, in_Tmp_932: int, in_sdv_333: int, in_Tmp_933: int, in_pdoIndex: int, in_Tmp_935: int, in_Tmp_936: int, in_Tmp_937: int, in_functionPdoExt_29: int, in_Tmp_940: int, in_Tmp_941: int, in_Tmp_942: int, in_i_17: int, in_Tmp_943: int, in_Tmp_944: int, in_Tmp_945: int, in_Tmp_947: int, in_Tmp_948: int, in_uaspDescriptor: int, in_devExt_10: int, in_Tmp_952: int, in_Tmp_953: int, in_functionPdo: int, in_Tmp_955: int, in_Tmp_957: int, in_Tmp_958: int, in_Tmp_959: int, in_Tmp_961: int, in_Tmp_963: int, in_Tmp_966: int, in_Tmp_968: int, in_Tmp_971: int, in_status_55: int, in_Tmp_973: int, in_Tmp_974: int, in_parentFdoExt_71: int, in_vslice_dummy_var_117: int, in_vslice_dummy_var_118: int) returns (out_functionAssoc_6: int, out_Tmp_928: int, out_ifaceDesc_1: int, out_Tmp_930: int, out_Tmp_932: int, out_sdv_333: int, out_Tmp_933: int, out_pdoIndex: int, out_Tmp_935: int, out_Tmp_936: int, out_Tmp_937: int, out_functionPdoExt_29: int, out_Tmp_940: int, out_Tmp_941: int, out_Tmp_942: int, out_i_17: int, out_Tmp_943: int, out_Tmp_944: int, out_Tmp_945: int, out_Tmp_947: int, out_Tmp_948: int, out_uaspDescriptor: int, out_devExt_10: int, out_Tmp_952: int, out_Tmp_953: int, out_Tmp_955: int, out_Tmp_957: int, out_Tmp_958: int, out_Tmp_959: int, out_Tmp_961: int, out_Tmp_963: int, out_Tmp_966: int, out_Tmp_968: int, out_Tmp_971: int, out_status_55: int, out_Tmp_973: int, out_Tmp_974: int, out_vslice_dummy_var_117: int, out_vslice_dummy_var_118: int)
{
  var vslice_dummy_var_1051: int;
  var vslice_dummy_var_1052: int;
  var vslice_dummy_var_1053: int;
  var vslice_dummy_var_1054: int;
  var vslice_dummy_var_1055: int;
  var vslice_dummy_var_1056: int;

  entry:
    out_functionAssoc_6, out_Tmp_928, out_ifaceDesc_1, out_Tmp_930, out_Tmp_932, out_sdv_333, out_Tmp_933, out_pdoIndex, out_Tmp_935, out_Tmp_936, out_Tmp_937, out_functionPdoExt_29, out_Tmp_940, out_Tmp_941, out_Tmp_942, out_i_17, out_Tmp_943, out_Tmp_944, out_Tmp_945, out_Tmp_947, out_Tmp_948, out_uaspDescriptor, out_devExt_10, out_Tmp_952, out_Tmp_953, out_Tmp_955, out_Tmp_957, out_Tmp_958, out_Tmp_959, out_Tmp_961, out_Tmp_963, out_Tmp_966, out_Tmp_968, out_Tmp_971, out_status_55, out_Tmp_973, out_Tmp_974, out_vslice_dummy_var_117, out_vslice_dummy_var_118 := in_functionAssoc_6, in_Tmp_928, in_ifaceDesc_1, in_Tmp_930, in_Tmp_932, in_sdv_333, in_Tmp_933, in_pdoIndex, in_Tmp_935, in_Tmp_936, in_Tmp_937, in_functionPdoExt_29, in_Tmp_940, in_Tmp_941, in_Tmp_942, in_i_17, in_Tmp_943, in_Tmp_944, in_Tmp_945, in_Tmp_947, in_Tmp_948, in_uaspDescriptor, in_devExt_10, in_Tmp_952, in_Tmp_953, in_Tmp_955, in_Tmp_957, in_Tmp_958, in_Tmp_959, in_Tmp_961, in_Tmp_963, in_Tmp_966, in_Tmp_968, in_Tmp_971, in_status_55, in_Tmp_973, in_Tmp_974, in_vslice_dummy_var_117, in_vslice_dummy_var_118;
    goto L64, exit;

  exit:
    return;

  L64:
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    goto anon57_Else;

  anon57_Else:
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    out_Tmp_971 := out_i_17;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_941;
    out_functionAssoc_6 := out_Tmp_941 + out_Tmp_971 * 68;
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto L75;

  L75:
    out_i_17 := out_i_17 + 1;
    goto L75_dummy;

  L75_dummy:
    call {:si_unique_call 3309} {:si_old_unique_call 1} out_functionAssoc_6, out_Tmp_928, out_ifaceDesc_1, out_Tmp_930, out_Tmp_932, out_sdv_333, out_Tmp_933, out_pdoIndex, out_Tmp_935, out_Tmp_936, out_Tmp_937, out_functionPdoExt_29, out_Tmp_940, out_Tmp_941, out_Tmp_942, out_i_17, out_Tmp_943, out_Tmp_944, out_Tmp_945, out_Tmp_947, out_Tmp_948, out_uaspDescriptor, out_devExt_10, out_Tmp_952, out_Tmp_953, out_Tmp_955, out_Tmp_957, out_Tmp_958, out_Tmp_959, out_Tmp_961, out_Tmp_963, out_Tmp_966, out_Tmp_968, out_Tmp_971, out_status_55, out_Tmp_973, out_Tmp_974, out_vslice_dummy_var_117, out_vslice_dummy_var_118 := CreateStaticFunctionPDOs_loop_L64(out_functionAssoc_6, out_Tmp_928, out_ifaceDesc_1, out_Tmp_930, out_Tmp_932, out_sdv_333, out_Tmp_933, out_pdoIndex, out_Tmp_935, out_Tmp_936, out_Tmp_937, out_functionPdoExt_29, out_Tmp_940, out_Tmp_941, out_Tmp_942, out_i_17, out_Tmp_943, out_Tmp_944, out_Tmp_945, out_Tmp_947, out_Tmp_948, out_uaspDescriptor, out_devExt_10, out_Tmp_952, out_Tmp_953, in_functionPdo, out_Tmp_955, out_Tmp_957, out_Tmp_958, out_Tmp_959, out_Tmp_961, out_Tmp_963, out_Tmp_966, out_Tmp_968, out_Tmp_971, out_status_55, out_Tmp_973, out_Tmp_974, in_parentFdoExt_71, out_vslice_dummy_var_117, out_vslice_dummy_var_118);
    return;

  anon70_Then:
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    goto anon59_Then;

  anon59_Then:
    call {:si_unique_call 3306} out_status_55 := IoCreateDevice(0, 736, 0, 34, 128, 0, in_functionPdo);
    goto anon60_Then;

  anon60_Then:
    assume {:partition} 0 <= out_status_55;
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    goto anon61_Then;

  anon61_Then:
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    havoc out_devExt_10;
    call {:si_unique_call 3305} sdv_RtlZeroMemory(0, 736);
    assume {:nonnull} out_devExt_10 != 0;
    assume out_devExt_10 > 0;
    assume {:nonnull} out_devExt_10 != 0;
    assume out_devExt_10 > 0;
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    assume {:nonnull} out_devExt_10 != 0;
    assume out_devExt_10 > 0;
    out_functionPdoExt_29 := functionPdoExt_DEVICE_EXTENSION(out_devExt_10);
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    goto L107;

  L107:
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    call {:si_unique_call 3294} InitializeListHead(pendingD0ListEntry_FUNCTION_PDO_EXTENSION(out_functionPdoExt_29));
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    call {:si_unique_call 3295} KeInitializeEvent(removeEvent_FUNCTION_PDO_EXTENSION(out_functionPdoExt_29), 0, 0);
    call {:si_unique_call 3296} out_Tmp_947 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_947 != 0;
    assume out_Tmp_947 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    havoc vslice_dummy_var_1053;
    Mem_T.VOID[out_Tmp_947] := vslice_dummy_var_1053;
    call {:si_unique_call 3297} sdv_KeInitializeSpinLock(out_Tmp_947);
    assume {:nonnull} out_Tmp_947 != 0;
    assume out_Tmp_947 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    call {:si_unique_call 3298} InitializeListHead(waitWakeQueueList_FUNCTION_PDO_EXTENSION(out_functionPdoExt_29));
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    call {:si_unique_call 3299} out_vslice_dummy_var_117 := sdv_IoCsqInitialize(waitWakeQueue_FUNCTION_PDO_EXTENSION(out_functionPdoExt_29), li2bplFunctionConstant971, li2bplFunctionConstant972, li2bplFunctionConstant974, li2bplFunctionConstant969, li2bplFunctionConstant970, li2bplFunctionConstant975);
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    call {:si_unique_call 3300} InitializeListHead(idleQueueList_FUNCTION_PDO_EXTENSION(out_functionPdoExt_29));
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    call {:si_unique_call 3301} out_vslice_dummy_var_118 := sdv_IoCsqInitialize(idleQueue_FUNCTION_PDO_EXTENSION(out_functionPdoExt_29), li2bplFunctionConstant978, li2bplFunctionConstant979, li2bplFunctionConstant980, li2bplFunctionConstant976, li2bplFunctionConstant977, li2bplFunctionConstant982);
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    call {:si_unique_call 3302} KeInitializeEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(out_functionPdoExt_29), 0, 1);
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    havoc out_Tmp_953;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc vslice_dummy_var_1054;
    havoc vslice_dummy_var_1055;
    havoc vslice_dummy_var_1056;
    call {:si_unique_call 3303} WPP_RECORDER_SF_dd(vslice_dummy_var_1054, 4, 1, 14, out_Tmp_953, vslice_dummy_var_1055, vslice_dummy_var_1056);
    call {:si_unique_call 3304} sdv_RtlCopyMemory(0, 0, 18);
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    havoc out_Tmp_945;
    assume {:nonnull} out_Tmp_945 != 0;
    assume out_Tmp_945 > 0;
    havoc out_Tmp_973;
    assume {:nonnull} out_Tmp_973 != 0;
    assume out_Tmp_973 > 0;
    havoc out_ifaceDesc_1;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    havoc out_Tmp_952;
    assume {:nonnull} out_Tmp_952 != 0;
    assume out_Tmp_952 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    havoc out_Tmp_955;
    assume {:nonnull} out_Tmp_955 != 0;
    assume out_Tmp_955 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} out_ifaceDesc_1 != 0;
    assume out_ifaceDesc_1 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    out_uaspDescriptor := 0;
    goto L159;

  L159:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_uaspDescriptor != 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    havoc out_Tmp_944;
    assume {:nonnull} out_Tmp_944 != 0;
    assume out_Tmp_944 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    assume {:nonnull} out_uaspDescriptor != 0;
    assume out_uaspDescriptor > 0;
    goto L151;

  L151:
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    havoc out_Tmp_932;
    assume {:nonnull} out_Tmp_932 != 0;
    assume out_Tmp_932 > 0;
    havoc out_Tmp_957;
    assume {:nonnull} out_Tmp_957 != 0;
    assume out_Tmp_957 > 0;
    havoc out_Tmp_961;
    assume {:nonnull} out_Tmp_961 != 0;
    assume out_Tmp_961 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    havoc out_Tmp_966;
    assume {:nonnull} out_Tmp_966 != 0;
    assume out_Tmp_966 > 0;
    havoc out_Tmp_958;
    assume {:nonnull} out_Tmp_958 != 0;
    assume out_Tmp_958 > 0;
    havoc out_Tmp_930;
    assume {:nonnull} out_Tmp_930 != 0;
    assume out_Tmp_930 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    goto L163;

  L163:
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    havoc out_Tmp_943;
    assume {:nonnull} out_Tmp_943 != 0;
    assume out_Tmp_943 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} out_functionAssoc_6 != 0;
    assume out_functionAssoc_6 > 0;
    havoc out_Tmp_942;
    assume {:nonnull} out_Tmp_942 != 0;
    assume out_Tmp_942 > 0;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    goto L165;

  L165:
    out_Tmp_959 := out_pdoIndex;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_928;
    assume {:nonnull} out_Tmp_928 != 0;
    assume out_Tmp_928 > 0;
    havoc out_Tmp_974;
    assume {:nonnull} out_Tmp_974 != 0;
    assume out_Tmp_974 > 0;
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    out_Tmp_936 := out_i_17;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_935;
    assume {:nonnull} out_Tmp_935 != 0;
    assume out_Tmp_935 > 0;
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    out_pdoIndex := out_pdoIndex + 1;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_948;
    assume {:nonnull} out_Tmp_948 != 0;
    assume out_Tmp_948 > 0;
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    out_Tmp_968 := out_i_17;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_963;
    assume {:nonnull} out_Tmp_963 != 0;
    assume out_Tmp_963 > 0;
    havoc out_Tmp_933;
    call {:si_unique_call 3308} SetFunctionHandleData(in_parentFdoExt_71, out_functionPdoExt_29, out_Tmp_933);
    goto anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L172;

  L172:
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L192;

  L192:
    havoc out_Tmp_937;
    assume {:nonnull} in_functionPdo != 0;
    assume in_functionPdo > 0;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc vslice_dummy_var_1051;
    havoc vslice_dummy_var_1052;
    call {:si_unique_call 3291} WPP_RECORDER_SF_qd(vslice_dummy_var_1051, 4, 1, 15, out_Tmp_937, vslice_dummy_var_1052, out_pdoIndex);
    goto L75;

  anon64_Then:
    call {:si_unique_call 3293} out_status_55 := AllocateResourcesForFunctionSuspend(in_parentFdoExt_71, out_functionPdoExt_29);
    goto anon65_Else;

  anon65_Else:
    assume {:partition} out_status_55 >= 0;
    call {:si_unique_call 3292} out_sdv_333 := IsFunctionRemoteWakeCapable(in_parentFdoExt_71, out_functionPdoExt_29);
    goto anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    havoc out_Tmp_940;
    assume {:nonnull} out_Tmp_940 != 0;
    assume out_Tmp_940 > 0;
    goto L192;

  anon77_Then:
    goto L172;

  anon76_Then:
    goto L165;

  anon63_Then:
    goto L165;

  anon75_Then:
    goto L163;

  anon81_Then:
    goto L151;

  anon62_Then:
    assume {:partition} out_uaspDescriptor == 0;
    goto L151;

  anon80_Then:
    call {:si_unique_call 3307} out_uaspDescriptor := __HAVOC_malloc(1);
    goto L159;

  anon74_Then:
    goto L151;

  anon73_Then:
    goto L151;

  anon72_Then:
    assume {:nonnull} out_functionPdoExt_29 != 0;
    assume out_functionPdoExt_29 > 0;
    goto L107;
}



procedure {:LoopProcedure} CreateStaticFunctionPDOs_loop_L64(in_functionAssoc_6: int, in_Tmp_928: int, in_ifaceDesc_1: int, in_Tmp_930: int, in_Tmp_932: int, in_sdv_333: int, in_Tmp_933: int, in_pdoIndex: int, in_Tmp_935: int, in_Tmp_936: int, in_Tmp_937: int, in_functionPdoExt_29: int, in_Tmp_940: int, in_Tmp_941: int, in_Tmp_942: int, in_i_17: int, in_Tmp_943: int, in_Tmp_944: int, in_Tmp_945: int, in_Tmp_947: int, in_Tmp_948: int, in_uaspDescriptor: int, in_devExt_10: int, in_Tmp_952: int, in_Tmp_953: int, in_functionPdo: int, in_Tmp_955: int, in_Tmp_957: int, in_Tmp_958: int, in_Tmp_959: int, in_Tmp_961: int, in_Tmp_963: int, in_Tmp_966: int, in_Tmp_968: int, in_Tmp_971: int, in_status_55: int, in_Tmp_973: int, in_Tmp_974: int, in_parentFdoExt_71: int, in_vslice_dummy_var_117: int, in_vslice_dummy_var_118: int) returns (out_functionAssoc_6: int, out_Tmp_928: int, out_ifaceDesc_1: int, out_Tmp_930: int, out_Tmp_932: int, out_sdv_333: int, out_Tmp_933: int, out_pdoIndex: int, out_Tmp_935: int, out_Tmp_936: int, out_Tmp_937: int, out_functionPdoExt_29: int, out_Tmp_940: int, out_Tmp_941: int, out_Tmp_942: int, out_i_17: int, out_Tmp_943: int, out_Tmp_944: int, out_Tmp_945: int, out_Tmp_947: int, out_Tmp_948: int, out_uaspDescriptor: int, out_devExt_10: int, out_Tmp_952: int, out_Tmp_953: int, out_Tmp_955: int, out_Tmp_957: int, out_Tmp_958: int, out_Tmp_959: int, out_Tmp_961: int, out_Tmp_963: int, out_Tmp_966: int, out_Tmp_968: int, out_Tmp_971: int, out_status_55: int, out_Tmp_973: int, out_Tmp_974: int, out_vslice_dummy_var_117: int, out_vslice_dummy_var_118: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_vslice_dummy_var_117 == 0 || out_vslice_dummy_var_117 == in_vslice_dummy_var_117;
  free ensures {:va_keep} out_vslice_dummy_var_118 == 0 || out_vslice_dummy_var_118 == in_vslice_dummy_var_118;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CreateStaticFunctionPDOs_loop_L15(in_ifaceClass_1: int, in_Tmp_925: int, in_configDesc_3: int, in_Tmp_929: int, in_Tmp_931: int, in_ifaceNum: int, in_Tmp_938: int, in_i_17: int, in_Tmp_946: int, in_Tmp_950: int, in_Tmp_972: int, in_parentFdoExt_71: int) returns (out_ifaceClass_1: int, out_Tmp_925: int, out_Tmp_929: int, out_Tmp_931: int, out_ifaceNum: int, out_Tmp_938: int, out_i_17: int, out_Tmp_946: int, out_Tmp_950: int, out_Tmp_972: int)
{
  var vslice_dummy_var_1057: int;

  entry:
    out_ifaceClass_1, out_Tmp_925, out_Tmp_929, out_Tmp_931, out_ifaceNum, out_Tmp_938, out_i_17, out_Tmp_946, out_Tmp_950, out_Tmp_972 := in_ifaceClass_1, in_Tmp_925, in_Tmp_929, in_Tmp_931, in_ifaceNum, in_Tmp_938, in_i_17, in_Tmp_946, in_Tmp_950, in_Tmp_972;
    goto L15, exit;

  exit:
    return;

  L15:
    assume {:nonnull} in_configDesc_3 != 0;
    assume in_configDesc_3 > 0;
    goto anon55_Then;

  anon55_Then:
    out_Tmp_972 := out_i_17;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_938;
    assume {:nonnull} out_Tmp_938 != 0;
    assume out_Tmp_938 > 0;
    havoc out_Tmp_950;
    assume {:nonnull} out_Tmp_950 != 0;
    assume out_Tmp_950 > 0;
    havoc out_ifaceClass_1;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_ifaceClass_1 == 13;
    out_Tmp_931 := out_i_17;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc out_Tmp_925;
    assume {:nonnull} out_Tmp_925 != 0;
    assume out_Tmp_925 > 0;
    havoc out_Tmp_946;
    assume {:nonnull} out_Tmp_946 != 0;
    assume out_Tmp_946 > 0;
    out_ifaceNum := Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_946)];
    havoc out_Tmp_929;
    assume {:nonnull} in_parentFdoExt_71 != 0;
    assume in_parentFdoExt_71 > 0;
    havoc vslice_dummy_var_1057;
    call {:si_unique_call 3310} WPP_RECORDER_SF_d(vslice_dummy_var_1057, 4, 1, 10, out_Tmp_929, out_ifaceNum);
    call {:si_unique_call 3311} InitCSInfo(in_parentFdoExt_71, out_ifaceNum);
    goto L22;

  L22:
    out_i_17 := out_i_17 + 1;
    goto L22_dummy;

  L22_dummy:
    call {:si_unique_call 3312} {:si_old_unique_call 1} out_ifaceClass_1, out_Tmp_925, out_Tmp_929, out_Tmp_931, out_ifaceNum, out_Tmp_938, out_i_17, out_Tmp_946, out_Tmp_950, out_Tmp_972 := CreateStaticFunctionPDOs_loop_L15(out_ifaceClass_1, out_Tmp_925, in_configDesc_3, out_Tmp_929, out_Tmp_931, out_ifaceNum, out_Tmp_938, out_i_17, out_Tmp_946, out_Tmp_950, out_Tmp_972, in_parentFdoExt_71);
    return;

  anon68_Then:
    assume {:partition} out_ifaceClass_1 != 13;
    goto L22;
}



procedure {:LoopProcedure} CreateStaticFunctionPDOs_loop_L15(in_ifaceClass_1: int, in_Tmp_925: int, in_configDesc_3: int, in_Tmp_929: int, in_Tmp_931: int, in_ifaceNum: int, in_Tmp_938: int, in_i_17: int, in_Tmp_946: int, in_Tmp_950: int, in_Tmp_972: int, in_parentFdoExt_71: int) returns (out_ifaceClass_1: int, out_Tmp_925: int, out_Tmp_929: int, out_Tmp_931: int, out_ifaceNum: int, out_Tmp_938: int, out_i_17: int, out_Tmp_946: int, out_Tmp_950: int, out_Tmp_972: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 8} BuildMSOSCompatibleIDs_loop_L55(in_i_18: int, in_Tmp_1021: int, in_pwchTmp: int, in_Tmp_1025: int, in_pcSubCompatibleID: int) returns (out_i_18: int, out_Tmp_1021: int, out_Tmp_1025: int)
{

  entry:
    out_i_18, out_Tmp_1021, out_Tmp_1025 := in_i_18, in_Tmp_1021, in_Tmp_1025;
    goto L55, exit;

  exit:
    return;

  L55:
    assume {:CounterLoop 8} {:Counter "i_18"} true;
    goto anon58_Else;

  anon58_Else:
    assume {:partition} 8 > out_i_18;
    out_Tmp_1025 := out_i_18;
    assume {:nonnull} in_pcSubCompatibleID != 0;
    assume in_pcSubCompatibleID > 0;
    goto anon65_Else;

  anon65_Else:
    assume {:partition} Mem_T.VOID[in_pcSubCompatibleID + out_Tmp_1025 * 4] != 0;
    out_Tmp_1021 := out_i_18;
    assume {:nonnull} in_pcSubCompatibleID != 0;
    assume in_pcSubCompatibleID > 0;
    assume {:nonnull} in_pwchTmp != 0;
    assume in_pwchTmp > 0;
    Mem_T.VOID[in_pwchTmp] := Mem_T.VOID[in_pcSubCompatibleID + out_Tmp_1021 * 4];
    out_i_18 := out_i_18 + 1;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    call {:si_unique_call 3313} {:si_old_unique_call 1} out_i_18, out_Tmp_1021, out_Tmp_1025 := BuildMSOSCompatibleIDs_loop_L55(out_i_18, out_Tmp_1021, in_pwchTmp, out_Tmp_1025, in_pcSubCompatibleID);
    return;
}



procedure {:LoopProcedure} BuildMSOSCompatibleIDs_loop_L55(in_i_18: int, in_Tmp_1021: int, in_pwchTmp: int, in_Tmp_1025: int, in_pcSubCompatibleID: int) returns (out_i_18: int, out_Tmp_1021: int, out_Tmp_1025: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 8} BuildMSOSCompatibleIDs_loop_L45(in_i_18: int, in_pwchTmp: int, in_Tmp_1028: int, in_Tmp_1029: int, in_pcCompatibleID: int) returns (out_i_18: int, out_Tmp_1028: int, out_Tmp_1029: int)
{

  entry:
    out_i_18, out_Tmp_1028, out_Tmp_1029 := in_i_18, in_Tmp_1028, in_Tmp_1029;
    goto L45, exit;

  exit:
    return;

  L45:
    assume {:CounterLoop 8} {:Counter "i_18"} true;
    goto anon57_Else;

  anon57_Else:
    assume {:partition} 8 > out_i_18;
    out_Tmp_1029 := out_i_18;
    assume {:nonnull} in_pcCompatibleID != 0;
    assume in_pcCompatibleID > 0;
    goto anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.VOID[in_pcCompatibleID + out_Tmp_1029 * 4] != 0;
    out_Tmp_1028 := out_i_18;
    assume {:nonnull} in_pcCompatibleID != 0;
    assume in_pcCompatibleID > 0;
    assume {:nonnull} in_pwchTmp != 0;
    assume in_pwchTmp > 0;
    Mem_T.VOID[in_pwchTmp] := Mem_T.VOID[in_pcCompatibleID + out_Tmp_1028 * 4];
    out_i_18 := out_i_18 + 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    call {:si_unique_call 3314} {:si_old_unique_call 1} out_i_18, out_Tmp_1028, out_Tmp_1029 := BuildMSOSCompatibleIDs_loop_L45(out_i_18, in_pwchTmp, out_Tmp_1028, out_Tmp_1029, in_pcCompatibleID);
    return;
}



procedure {:LoopProcedure} BuildMSOSCompatibleIDs_loop_L45(in_i_18: int, in_pwchTmp: int, in_Tmp_1028: int, in_Tmp_1029: int, in_pcCompatibleID: int) returns (out_i_18: int, out_Tmp_1028: int, out_Tmp_1029: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 8} BuildMSOSCompatibleIDs_loop_L68(in_i_18: int, in_Tmp_1022: int, in_pwchTmp: int, in_Tmp_1027: int, in_pcCompatibleID: int) returns (out_i_18: int, out_Tmp_1022: int, out_Tmp_1027: int)
{

  entry:
    out_i_18, out_Tmp_1022, out_Tmp_1027 := in_i_18, in_Tmp_1022, in_Tmp_1027;
    goto L68, exit;

  exit:
    return;

  L68:
    assume {:CounterLoop 8} {:Counter "i_18"} true;
    goto anon60_Else;

  anon60_Else:
    assume {:partition} 8 > out_i_18;
    out_Tmp_1027 := out_i_18;
    assume {:nonnull} in_pcCompatibleID != 0;
    assume in_pcCompatibleID > 0;
    goto anon66_Else;

  anon66_Else:
    assume {:partition} Mem_T.VOID[in_pcCompatibleID + out_Tmp_1027 * 4] != 0;
    out_Tmp_1022 := out_i_18;
    assume {:nonnull} in_pcCompatibleID != 0;
    assume in_pcCompatibleID > 0;
    assume {:nonnull} in_pwchTmp != 0;
    assume in_pwchTmp > 0;
    Mem_T.VOID[in_pwchTmp] := Mem_T.VOID[in_pcCompatibleID + out_Tmp_1022 * 4];
    out_i_18 := out_i_18 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    call {:si_unique_call 3315} {:si_old_unique_call 1} out_i_18, out_Tmp_1022, out_Tmp_1027 := BuildMSOSCompatibleIDs_loop_L68(out_i_18, out_Tmp_1022, in_pwchTmp, out_Tmp_1027, in_pcCompatibleID);
    return;
}



procedure {:LoopProcedure} BuildMSOSCompatibleIDs_loop_L68(in_i_18: int, in_Tmp_1022: int, in_pwchTmp: int, in_Tmp_1027: int, in_pcCompatibleID: int) returns (out_i_18: int, out_Tmp_1022: int, out_Tmp_1027: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation DispatchPdoUrbSelectConfiguration_loop_L189(in_urbInterface_1: int, in_Tmp_1078: int, in_numPipes: int, in_Tmp_1094: int, in_i_19: int, in_Tmp_1115: int) returns (out_Tmp_1078: int, out_Tmp_1094: int, out_i_19: int, out_Tmp_1115: int)
{

  entry:
    out_Tmp_1078, out_Tmp_1094, out_i_19, out_Tmp_1115 := in_Tmp_1078, in_Tmp_1094, in_i_19, in_Tmp_1115;
    goto L189, exit;

  exit:
    return;

  L189:
    goto anon54_Else;

  anon54_Else:
    assume {:partition} in_numPipes > out_i_19;
    out_Tmp_1094 := out_i_19;
    assume {:nonnull} in_urbInterface_1 != 0;
    assume in_urbInterface_1 > 0;
    havoc out_Tmp_1078;
    assume {:nonnull} out_Tmp_1078 != 0;
    assume out_Tmp_1078 > 0;
    havoc out_Tmp_1115;
    goto anon66_Then;

  anon66_Then:
    assume {:partition} out_Tmp_1115 != 1;
    out_i_19 := out_i_19 + 1;
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    call {:si_unique_call 3316} {:si_old_unique_call 1} out_Tmp_1078, out_Tmp_1094, out_i_19, out_Tmp_1115 := DispatchPdoUrbSelectConfiguration_loop_L189(in_urbInterface_1, out_Tmp_1078, in_numPipes, out_Tmp_1094, out_i_19, out_Tmp_1115);
    return;
}



procedure {:LoopProcedure} DispatchPdoUrbSelectConfiguration_loop_L189(in_urbInterface_1: int, in_Tmp_1078: int, in_numPipes: int, in_Tmp_1094: int, in_i_19: int, in_Tmp_1115: int) returns (out_Tmp_1078: int, out_Tmp_1094: int, out_i_19: int, out_Tmp_1115: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation DispatchPdoUrbSelectConfiguration_loop_L109(in_urbInterface_1: int, in_Tmp_1091: int, in_i_19: int, in_Tmp_1103: int, in_interfaceList_2: int, in_Tmp_1110: int, in_functionPdoExt_36: int) returns (out_Tmp_1091: int, out_i_19: int, out_Tmp_1103: int, out_Tmp_1110: int)
{

  entry:
    out_Tmp_1091, out_i_19, out_Tmp_1103, out_Tmp_1110 := in_Tmp_1091, in_i_19, in_Tmp_1103, in_Tmp_1110;
    goto L109, exit;

  exit:
    return;

  L109:
    assume {:nonnull} in_functionPdoExt_36 != 0;
    assume in_functionPdoExt_36 > 0;
    goto anon50_Else;

  anon50_Else:
    out_Tmp_1091 := out_i_19;
    assume {:nonnull} in_interfaceList_2 != 0;
    assume in_interfaceList_2 > 0;
    havoc out_Tmp_1103;
    assume {:nonnull} out_Tmp_1103 != 0;
    assume out_Tmp_1103 > 0;
    havoc out_Tmp_1110;
    assume {:nonnull} out_Tmp_1110 != 0;
    assume out_Tmp_1110 > 0;
    assume {:nonnull} in_urbInterface_1 != 0;
    assume in_urbInterface_1 > 0;
    goto anon61_Then;

  anon61_Then:
    out_i_19 := out_i_19 + 1;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    call {:si_unique_call 3317} {:si_old_unique_call 1} out_Tmp_1091, out_i_19, out_Tmp_1103, out_Tmp_1110 := DispatchPdoUrbSelectConfiguration_loop_L109(in_urbInterface_1, out_Tmp_1091, out_i_19, out_Tmp_1103, in_interfaceList_2, out_Tmp_1110, in_functionPdoExt_36);
    return;
}



procedure {:LoopProcedure} DispatchPdoUrbSelectConfiguration_loop_L109(in_urbInterface_1: int, in_Tmp_1091: int, in_i_19: int, in_Tmp_1103: int, in_interfaceList_2: int, in_Tmp_1110: int, in_functionPdoExt_36: int) returns (out_Tmp_1091: int, out_i_19: int, out_Tmp_1103: int, out_Tmp_1110: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation DispatchPdoUrbSelectConfiguration_loop_L88(in_functionAssoc_7: int, in_Tmp_1074: int, in_Tmp_1075: int, in_Tmp_1076: int, in_Tmp_1077: int, in_urbInterface_1: int, in_Tmp_1078: int, in_Tmp_1079: int, in_Tmp_1080: int, in_Tmp_1081: int, in_success_1: int, in_numPipes: int, in_Tmp_1084: int, in_Tmp_1085: int, in_Tmp_1086: int, in_end_3: int, in_index_3: int, in_Tmp_1087: int, in_Tmp_1088: int, in_Tmp_1090: int, in_Tmp_1091: int, in_interfacesFound_1: int, in_Tmp_1094: int, in_Tmp_1095: int, in_urbSize: int, in_i_19: int, in_Tmp_1097: int, in_interfaceEntry_1: int, in_Tmp_1100: int, in_Tmp_1101: int, in_Tmp_1102: int, in_Tmp_1103: int, in_Tmp_1104: int, in_sendUrb: int, in_interfaceList_2: int, in_Tmp_1106: int, in_minInterfaceInfoSize: int, in_Tmp_1108: int, in_Tmp_1109: int, in_parentFdoExt_73: int, in_Tmp_1110: int, in_Tmp_1112: int, in_urb_13: int, in_Tmp_1114: int, in_Tmp_1115: int, in_status_58: int, in_Tmp_1117: int, in_functionPdoExt_36: int) returns (out_Tmp_1074: int, out_Tmp_1075: int, out_Tmp_1076: int, out_Tmp_1077: int, out_urbInterface_1: int, out_Tmp_1078: int, out_Tmp_1079: int, out_Tmp_1080: int, out_Tmp_1081: int, out_success_1: int, out_numPipes: int, out_Tmp_1084: int, out_Tmp_1085: int, out_Tmp_1086: int, out_Tmp_1087: int, out_Tmp_1088: int, out_Tmp_1090: int, out_Tmp_1091: int, out_interfacesFound_1: int, out_Tmp_1094: int, out_Tmp_1095: int, out_urbSize: int, out_i_19: int, out_Tmp_1097: int, out_interfaceEntry_1: int, out_Tmp_1100: int, out_Tmp_1101: int, out_Tmp_1102: int, out_Tmp_1103: int, out_Tmp_1104: int, out_sendUrb: int, out_interfaceList_2: int, out_Tmp_1106: int, out_minInterfaceInfoSize: int, out_Tmp_1108: int, out_Tmp_1109: int, out_Tmp_1110: int, out_Tmp_1112: int, out_Tmp_1114: int, out_Tmp_1115: int, out_status_58: int, out_Tmp_1117: int)
{
  var vslice_dummy_var_1058: int;
  var vslice_dummy_var_1059: int;
  var vslice_dummy_var_1060: int;
  var vslice_dummy_var_1061: int;
  var vslice_dummy_var_1062: int;
  var vslice_dummy_var_1063: int;

  entry:
    out_Tmp_1074, out_Tmp_1075, out_Tmp_1076, out_Tmp_1077, out_urbInterface_1, out_Tmp_1078, out_Tmp_1079, out_Tmp_1080, out_Tmp_1081, out_success_1, out_numPipes, out_Tmp_1084, out_Tmp_1085, out_Tmp_1086, out_Tmp_1087, out_Tmp_1088, out_Tmp_1090, out_Tmp_1091, out_interfacesFound_1, out_Tmp_1094, out_Tmp_1095, out_urbSize, out_i_19, out_Tmp_1097, out_interfaceEntry_1, out_Tmp_1100, out_Tmp_1101, out_Tmp_1102, out_Tmp_1103, out_Tmp_1104, out_sendUrb, out_interfaceList_2, out_Tmp_1106, out_minInterfaceInfoSize, out_Tmp_1108, out_Tmp_1109, out_Tmp_1110, out_Tmp_1112, out_Tmp_1114, out_Tmp_1115, out_status_58, out_Tmp_1117 := in_Tmp_1074, in_Tmp_1075, in_Tmp_1076, in_Tmp_1077, in_urbInterface_1, in_Tmp_1078, in_Tmp_1079, in_Tmp_1080, in_Tmp_1081, in_success_1, in_numPipes, in_Tmp_1084, in_Tmp_1085, in_Tmp_1086, in_Tmp_1087, in_Tmp_1088, in_Tmp_1090, in_Tmp_1091, in_interfacesFound_1, in_Tmp_1094, in_Tmp_1095, in_urbSize, in_i_19, in_Tmp_1097, in_interfaceEntry_1, in_Tmp_1100, in_Tmp_1101, in_Tmp_1102, in_Tmp_1103, in_Tmp_1104, in_sendUrb, in_interfaceList_2, in_Tmp_1106, in_minInterfaceInfoSize, in_Tmp_1108, in_Tmp_1109, in_Tmp_1110, in_Tmp_1112, in_Tmp_1114, in_Tmp_1115, in_status_58, in_Tmp_1117;
    goto L88, exit;

  exit:
    return;

  L88:
    goto anon47_Else;

  anon47_Else:
    assume {:partition} in_end_3 > in_index_3;
    out_urbInterface_1 := in_index_3;
    out_minInterfaceInfoSize := 16;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    goto anon60_Then;

  anon60_Then:
    goto anon48_Else;

  anon48_Else:
    assume {:partition} in_index_3 <= in_end_3;
    goto anon49_Else;

  anon49_Else:
    assume {:nonnull} in_functionAssoc_7 != 0;
    assume in_functionAssoc_7 > 0;
    havoc out_interfaceList_2;
    out_success_1 := 0;
    out_i_19 := 0;
    goto L109;

  L109:
    call {:si_unique_call 3324} out_Tmp_1091, out_i_19, out_Tmp_1103, out_Tmp_1110 := DispatchPdoUrbSelectConfiguration_loop_L109(out_urbInterface_1, out_Tmp_1091, out_i_19, out_Tmp_1103, out_interfaceList_2, out_Tmp_1110, in_functionPdoExt_36);
    goto L109_last;

  L109_last:
    assume {:nonnull} in_functionPdoExt_36 != 0;
    assume in_functionPdoExt_36 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    out_Tmp_1091 := out_i_19;
    assume {:nonnull} out_interfaceList_2 != 0;
    assume out_interfaceList_2 > 0;
    havoc out_Tmp_1103;
    assume {:nonnull} out_Tmp_1103 != 0;
    assume out_Tmp_1103 > 0;
    havoc out_Tmp_1110;
    assume {:nonnull} out_Tmp_1110 != 0;
    assume out_Tmp_1110 > 0;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    out_success_1 := 1;
    out_Tmp_1080 := out_i_19;
    assume {:nonnull} out_interfaceList_2 != 0;
    assume out_interfaceList_2 > 0;
    havoc out_interfaceEntry_1;
    out_interfacesFound_1 := out_interfacesFound_1 + 1;
    goto L110;

  L110:
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_success_1 != 0;
    assume {:nonnull} out_interfaceEntry_1 != 0;
    assume out_interfaceEntry_1 > 0;
    havoc out_Tmp_1077;
    assume {:nonnull} out_Tmp_1077 != 0;
    assume out_Tmp_1077 > 0;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1117;
    assume {:nonnull} out_interfaceEntry_1 != 0;
    assume out_interfaceEntry_1 > 0;
    havoc out_Tmp_1086;
    assume {:nonnull} out_Tmp_1086 != 0;
    assume out_Tmp_1086 > 0;
    havoc out_Tmp_1090;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1109;
    havoc out_Tmp_1081;
    assume {:nonnull} in_parentFdoExt_73 != 0;
    assume in_parentFdoExt_73 > 0;
    havoc vslice_dummy_var_1058;
    call {:si_unique_call 3319} WPP_RECORDER_SF_DDD(vslice_dummy_var_1058, 4, 1, 19, out_Tmp_1081, out_Tmp_1109, out_Tmp_1090, out_Tmp_1117);
    out_urbSize := 36;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_urbSize;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1085;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1104;
    havoc out_Tmp_1095;
    assume {:nonnull} in_functionPdoExt_36 != 0;
    assume in_functionPdoExt_36 > 0;
    assume {:nonnull} in_parentFdoExt_73 != 0;
    assume in_parentFdoExt_73 > 0;
    havoc vslice_dummy_var_1059;
    havoc vslice_dummy_var_1060;
    call {:si_unique_call 3320} WPP_RECORDER_SF_qqdd(vslice_dummy_var_1059, 4, 1, 20, out_Tmp_1095, vslice_dummy_var_1060, in_urb_13, out_Tmp_1104, out_Tmp_1085);
    out_sendUrb := 1;
    goto L146;

  L146:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_sendUrb != 0;
    call {:si_unique_call 3325} out_status_58 := SendSelectInterfaceUrb(out_urbSize, out_urbInterface_1, in_functionPdoExt_36, out_interfaceEntry_1);
    goto anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    out_sendUrb := 0;
    goto L153;

  L153:
    assume {:nonnull} in_functionPdoExt_36 != 0;
    assume in_functionPdoExt_36 > 0;
    goto anon53_Else;

  anon53_Else:
    goto anon53_Else_dummy;

  anon53_Else_dummy:
    call {:si_unique_call 3326} {:si_old_unique_call 1} out_Tmp_1074, out_Tmp_1075, out_Tmp_1076, out_Tmp_1077, out_urbInterface_1, out_Tmp_1078, out_Tmp_1079, out_Tmp_1080, out_Tmp_1081, out_success_1, out_numPipes, out_Tmp_1084, out_Tmp_1085, out_Tmp_1086, out_Tmp_1087, out_Tmp_1088, out_Tmp_1090, out_Tmp_1091, out_interfacesFound_1, out_Tmp_1094, out_Tmp_1095, out_urbSize, out_i_19, out_Tmp_1097, out_interfaceEntry_1, out_Tmp_1100, out_Tmp_1101, out_Tmp_1102, out_Tmp_1103, out_Tmp_1104, out_sendUrb, out_interfaceList_2, out_Tmp_1106, out_minInterfaceInfoSize, out_Tmp_1108, out_Tmp_1109, out_Tmp_1110, out_Tmp_1112, out_Tmp_1114, out_Tmp_1115, out_status_58, out_Tmp_1117 := DispatchPdoUrbSelectConfiguration_loop_L88(in_functionAssoc_7, out_Tmp_1074, out_Tmp_1075, out_Tmp_1076, out_Tmp_1077, out_urbInterface_1, out_Tmp_1078, out_Tmp_1079, out_Tmp_1080, out_Tmp_1081, out_success_1, out_numPipes, out_Tmp_1084, out_Tmp_1085, out_Tmp_1086, in_end_3, in_index_3, out_Tmp_1087, out_Tmp_1088, out_Tmp_1090, out_Tmp_1091, out_interfacesFound_1, out_Tmp_1094, out_Tmp_1095, out_urbSize, out_i_19, out_Tmp_1097, out_interfaceEntry_1, out_Tmp_1100, out_Tmp_1101, out_Tmp_1102, out_Tmp_1103, out_Tmp_1104, out_sendUrb, out_interfaceList_2, out_Tmp_1106, out_minInterfaceInfoSize, out_Tmp_1108, out_Tmp_1109, in_parentFdoExt_73, out_Tmp_1110, out_Tmp_1112, in_urb_13, out_Tmp_1114, out_Tmp_1115, out_status_58, out_Tmp_1117, in_functionPdoExt_36);
    return;

  anon52_Then:
    assume {:partition} out_sendUrb == 0;
    assume {:nonnull} out_interfaceEntry_1 != 0;
    assume out_interfaceEntry_1 > 0;
    havoc out_Tmp_1075;
    assume {:nonnull} out_Tmp_1075 != 0;
    assume out_Tmp_1075 > 0;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    goto anon64_Else;

  anon64_Else:
    assume {:nonnull} out_interfaceEntry_1 != 0;
    assume out_interfaceEntry_1 > 0;
    havoc out_Tmp_1087;
    assume {:nonnull} out_Tmp_1087 != 0;
    assume out_Tmp_1087 > 0;
    havoc out_Tmp_1097;
    call {:si_unique_call 3318} sdv_RtlCopyMemory(0, 0, out_Tmp_1097);
    goto L153;

  anon62_Then:
    assume {:nonnull} out_interfaceEntry_1 != 0;
    assume out_interfaceEntry_1 > 0;
    havoc out_Tmp_1114;
    assume {:nonnull} out_Tmp_1114 != 0;
    assume out_Tmp_1114 > 0;
    havoc out_numPipes;
    out_minInterfaceInfoSize := 16;
    out_minInterfaceInfoSize := out_minInterfaceInfoSize + out_numPipes * 20;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    goto anon65_Then;

  anon65_Then:
    out_i_19 := 0;
    goto L189;

  L189:
    call {:si_unique_call 3323} out_Tmp_1078, out_Tmp_1094, out_i_19, out_Tmp_1115 := DispatchPdoUrbSelectConfiguration_loop_L189(out_urbInterface_1, out_Tmp_1078, out_numPipes, out_Tmp_1094, out_i_19, out_Tmp_1115);
    goto L189_last;

  L189_last:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} out_numPipes > out_i_19;
    out_Tmp_1094 := out_i_19;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1078;
    assume {:nonnull} out_Tmp_1078 != 0;
    assume out_Tmp_1078 > 0;
    havoc out_Tmp_1115;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_Tmp_1115 == 1;
    out_Tmp_1108 := out_i_19;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1106;
    assume {:nonnull} out_Tmp_1106 != 0;
    assume out_Tmp_1106 > 0;
    havoc out_Tmp_1076;
    havoc out_Tmp_1112;
    assume {:nonnull} in_parentFdoExt_73 != 0;
    assume in_parentFdoExt_73 > 0;
    havoc vslice_dummy_var_1061;
    call {:si_unique_call 3321} WPP_RECORDER_SF_D(vslice_dummy_var_1061, 2, 8, 22, out_Tmp_1112, out_Tmp_1076);
    out_urbSize := 36;
    out_urbSize := out_urbSize + out_numPipes * 20;
    out_sendUrb := 1;
    out_Tmp_1079 := out_i_19;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1102;
    assume {:nonnull} out_Tmp_1102 != 0;
    assume out_Tmp_1102 > 0;
    havoc out_Tmp_1100;
    out_Tmp_1074 := out_i_19;
    assume {:nonnull} out_urbInterface_1 != 0;
    assume out_urbInterface_1 > 0;
    havoc out_Tmp_1101;
    assume {:nonnull} out_Tmp_1101 != 0;
    assume out_Tmp_1101 > 0;
    havoc out_Tmp_1088;
    havoc out_Tmp_1084;
    assume {:nonnull} in_functionPdoExt_36 != 0;
    assume in_functionPdoExt_36 > 0;
    assume {:nonnull} in_parentFdoExt_73 != 0;
    assume in_parentFdoExt_73 > 0;
    havoc vslice_dummy_var_1062;
    havoc vslice_dummy_var_1063;
    call {:si_unique_call 3322} WPP_RECORDER_SF_qqdd(vslice_dummy_var_1062, 2, 1, 23, out_Tmp_1084, vslice_dummy_var_1063, in_urb_13, out_Tmp_1088, out_Tmp_1100);
    goto L146;

  anon66_Then:
    assume {:partition} out_Tmp_1115 != 1;
    out_i_19 := out_i_19 + 1;
    assume false;
    return;

  anon54_Then:
    assume {:partition} out_i_19 >= out_numPipes;
    goto L146;

  anon61_Then:
    out_i_19 := out_i_19 + 1;
    assume false;
    return;

  anon50_Then:
    goto L110;
}



procedure {:LoopProcedure} DispatchPdoUrbSelectConfiguration_loop_L88(in_functionAssoc_7: int, in_Tmp_1074: int, in_Tmp_1075: int, in_Tmp_1076: int, in_Tmp_1077: int, in_urbInterface_1: int, in_Tmp_1078: int, in_Tmp_1079: int, in_Tmp_1080: int, in_Tmp_1081: int, in_success_1: int, in_numPipes: int, in_Tmp_1084: int, in_Tmp_1085: int, in_Tmp_1086: int, in_end_3: int, in_index_3: int, in_Tmp_1087: int, in_Tmp_1088: int, in_Tmp_1090: int, in_Tmp_1091: int, in_interfacesFound_1: int, in_Tmp_1094: int, in_Tmp_1095: int, in_urbSize: int, in_i_19: int, in_Tmp_1097: int, in_interfaceEntry_1: int, in_Tmp_1100: int, in_Tmp_1101: int, in_Tmp_1102: int, in_Tmp_1103: int, in_Tmp_1104: int, in_sendUrb: int, in_interfaceList_2: int, in_Tmp_1106: int, in_minInterfaceInfoSize: int, in_Tmp_1108: int, in_Tmp_1109: int, in_parentFdoExt_73: int, in_Tmp_1110: int, in_Tmp_1112: int, in_urb_13: int, in_Tmp_1114: int, in_Tmp_1115: int, in_status_58: int, in_Tmp_1117: int, in_functionPdoExt_36: int) returns (out_Tmp_1074: int, out_Tmp_1075: int, out_Tmp_1076: int, out_Tmp_1077: int, out_urbInterface_1: int, out_Tmp_1078: int, out_Tmp_1079: int, out_Tmp_1080: int, out_Tmp_1081: int, out_success_1: int, out_numPipes: int, out_Tmp_1084: int, out_Tmp_1085: int, out_Tmp_1086: int, out_Tmp_1087: int, out_Tmp_1088: int, out_Tmp_1090: int, out_Tmp_1091: int, out_interfacesFound_1: int, out_Tmp_1094: int, out_Tmp_1095: int, out_urbSize: int, out_i_19: int, out_Tmp_1097: int, out_interfaceEntry_1: int, out_Tmp_1100: int, out_Tmp_1101: int, out_Tmp_1102: int, out_Tmp_1103: int, out_Tmp_1104: int, out_sendUrb: int, out_interfaceList_2: int, out_Tmp_1106: int, out_minInterfaceInfoSize: int, out_Tmp_1108: int, out_Tmp_1109: int, out_Tmp_1110: int, out_Tmp_1112: int, out_Tmp_1114: int, out_Tmp_1115: int, out_status_58: int, out_Tmp_1117: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_urbInterface_1 == in_urbInterface_1 || out_urbInterface_1 == in_index_3;
  free ensures {:va_keep} out_success_1 == 1 || out_success_1 == 0 || out_success_1 == in_success_1;
  free ensures {:va_keep} out_sendUrb == 0 || out_sendUrb == 1 || out_sendUrb == in_sendUrb;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetDeviceText_loop_L181(in_Tmp_1203: int, in_i_20: int) returns (out_Tmp_1203: int, out_i_20: int)
{

  entry:
    out_Tmp_1203, out_i_20 := in_Tmp_1203, in_i_20;
    goto L181, exit;

  exit:
    return;

  L181:
    out_Tmp_1203 := out_i_20;
    assume {:nonnull} GenericCompositeUSBDeviceString != 0;
    assume GenericCompositeUSBDeviceString > 0;
    goto anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.VOID[GenericCompositeUSBDeviceString + out_Tmp_1203 * 4] != 0;
    out_i_20 := out_i_20 + 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    havoc out_i_20;
    return;
}



procedure {:LoopProcedure} GetDeviceText_loop_L181(in_Tmp_1203: int, in_i_20: int) returns (out_Tmp_1203: int, out_i_20: int);
  free ensures {:va_keep} out_Tmp_1203 == in_i_20 || out_Tmp_1203 == in_Tmp_1203;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PdoGetStringDescriptor_loop_L11(in_stringDescHeader: int, in_done: int, in_status_65: int, in_functionPdoExt_43: int, in_stringIndex_2: int, in_langId_2: int) returns (out_done: int, out_status_65: int, out_langId_2: int)
{
  var vslice_dummy_var_1064: int;

  entry:
    out_done, out_status_65, out_langId_2 := in_done, in_status_65, in_langId_2;
    goto L11, exit;

  exit:
    return;

  L11:
    out_done := 1;
    assume {:nonnull} in_functionPdoExt_43 != 0;
    assume in_functionPdoExt_43 > 0;
    havoc vslice_dummy_var_1064;
    call {:si_unique_call 3327} out_status_65 := GetStringDescriptor(vslice_dummy_var_1064, in_stringIndex_2, out_langId_2, in_stringDescHeader, 4);
    goto anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_status_65 >= 0;
    goto L18;

  L18:
    goto anon27_Then;

  anon27_Then:
    assume {:partition} out_done == 0;
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    call {:si_unique_call 3328} {:si_old_unique_call 1} out_done, out_status_65, out_langId_2 := PdoGetStringDescriptor_loop_L11(in_stringDescHeader, out_done, out_status_65, in_functionPdoExt_43, in_stringIndex_2, out_langId_2);
    return;

  anon25_Then:
    assume {:partition} 0 > out_status_65;
    goto anon26_Then;

  anon26_Then:
    assume {:partition} out_langId_2 != 1033;
    out_langId_2 := 1033;
    out_done := 0;
    goto L18;
}



procedure {:LoopProcedure} PdoGetStringDescriptor_loop_L11(in_stringDescHeader: int, in_done: int, in_status_65: int, in_functionPdoExt_43: int, in_stringIndex_2: int, in_langId_2: int) returns (out_done: int, out_status_65: int, out_langId_2: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_done == 1 || out_done == 0 || out_done == in_done;
  free ensures {:va_keep} out_langId_2 == 1033 || out_langId_2 == in_langId_2;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetD3ColdLastTransitionStatus_loop_L9(in_i_22: int, in_Tmp_1419: int, in_d3ColdStatus: int, in_Tmp_1420: int, in_Tmp_1421: int, in_thisFuncPdoExt_2: int, in_devExt_14: int, in_Tmp_1423: int, in_devObj_13: int, in_parentFdoExt_104: int) returns (out_i_22: int, out_Tmp_1419: int, out_Tmp_1420: int, out_Tmp_1421: int, out_thisFuncPdoExt_2: int, out_devExt_14: int, out_Tmp_1423: int, out_devObj_13: int)
{

  entry:
    out_i_22, out_Tmp_1419, out_Tmp_1420, out_Tmp_1421, out_thisFuncPdoExt_2, out_devExt_14, out_Tmp_1423, out_devObj_13 := in_i_22, in_Tmp_1419, in_Tmp_1420, in_Tmp_1421, in_thisFuncPdoExt_2, in_devExt_14, in_Tmp_1423, in_devObj_13;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:nonnull} in_parentFdoExt_104 != 0;
    assume in_parentFdoExt_104 > 0;
    havoc out_Tmp_1421;
    assume {:nonnull} out_Tmp_1421 != 0;
    assume out_Tmp_1421 > 0;
    goto anon3_Else;

  anon3_Else:
    out_Tmp_1419 := out_i_22;
    assume {:nonnull} in_parentFdoExt_104 != 0;
    assume in_parentFdoExt_104 > 0;
    havoc out_Tmp_1420;
    assume {:nonnull} out_Tmp_1420 != 0;
    assume out_Tmp_1420 > 0;
    havoc out_Tmp_1423;
    assume {:nonnull} out_Tmp_1423 != 0;
    assume out_Tmp_1423 > 0;
    havoc out_devObj_13;
    assume {:nonnull} out_devObj_13 != 0;
    assume out_devObj_13 > 0;
    havoc out_devExt_14;
    assume {:nonnull} out_devExt_14 != 0;
    assume out_devExt_14 > 0;
    out_thisFuncPdoExt_2 := functionPdoExt_DEVICE_EXTENSION(out_devExt_14);
    assume {:nonnull} out_thisFuncPdoExt_2 != 0;
    assume out_thisFuncPdoExt_2 > 0;
    out_i_22 := out_i_22 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3329} {:si_old_unique_call 1} out_i_22, out_Tmp_1419, out_Tmp_1420, out_Tmp_1421, out_thisFuncPdoExt_2, out_devExt_14, out_Tmp_1423, out_devObj_13 := GetD3ColdLastTransitionStatus_loop_L9(out_i_22, out_Tmp_1419, in_d3ColdStatus, out_Tmp_1420, out_Tmp_1421, out_thisFuncPdoExt_2, out_devExt_14, out_Tmp_1423, out_devObj_13, in_parentFdoExt_104);
    return;
}



procedure {:LoopProcedure} GetD3ColdLastTransitionStatus_loop_L9(in_i_22: int, in_Tmp_1419: int, in_d3ColdStatus: int, in_Tmp_1420: int, in_Tmp_1421: int, in_thisFuncPdoExt_2: int, in_devExt_14: int, in_Tmp_1423: int, in_devObj_13: int, in_parentFdoExt_104: int) returns (out_i_22: int, out_Tmp_1419: int, out_Tmp_1420: int, out_Tmp_1421: int, out_thisFuncPdoExt_2: int, out_devExt_14: int, out_Tmp_1423: int, out_devObj_13: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ProcessCallbackData_loop_L61(in_i_23: int, in_Tmp_1510: int, in_Tmp_1520: int, in_interfaceListIndex: int, in_j_2: int, in_Tmp_1534: int, in_Tmp_1538: int, in_functionDesc_1: int, in_Tmp_1549: int) returns (out_Tmp_1510: int, out_Tmp_1520: int, out_Tmp_1534: int, out_Tmp_1538: int, out_Tmp_1549: int)
{

  entry:
    out_Tmp_1510, out_Tmp_1520, out_Tmp_1534, out_Tmp_1538, out_Tmp_1549 := in_Tmp_1510, in_Tmp_1520, in_Tmp_1534, in_Tmp_1538, in_Tmp_1549;
    goto L61, exit;

  exit:
    return;

  L61:
    goto anon34_Else;

  anon34_Else:
    assume {:nonnull} in_interfaceListIndex != 0;
    assume in_interfaceListIndex > 0;
    havoc out_Tmp_1549;
    out_Tmp_1520 := in_j_2;
    out_Tmp_1534 := in_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    havoc out_Tmp_1510;
    assume {:nonnull} out_Tmp_1510 != 0;
    assume out_Tmp_1510 > 0;
    havoc out_Tmp_1538;
    assume {:nonnull} out_Tmp_1538 != 0;
    assume out_Tmp_1538 > 0;
    assume {:nonnull} out_Tmp_1549 != 0;
    assume out_Tmp_1549 > 0;
    goto anon40_Then;

  anon40_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1549)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1538)];
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    call {:si_unique_call 3330} {:si_old_unique_call 1} out_Tmp_1510, out_Tmp_1520, out_Tmp_1534, out_Tmp_1538, out_Tmp_1549 := ProcessCallbackData_loop_L61(in_i_23, out_Tmp_1510, out_Tmp_1520, in_interfaceListIndex, in_j_2, out_Tmp_1534, out_Tmp_1538, in_functionDesc_1, out_Tmp_1549);
    return;
}



procedure {:LoopProcedure} ProcessCallbackData_loop_L61(in_i_23: int, in_Tmp_1510: int, in_Tmp_1520: int, in_interfaceListIndex: int, in_j_2: int, in_Tmp_1534: int, in_Tmp_1538: int, in_functionDesc_1: int, in_Tmp_1549: int) returns (out_Tmp_1510: int, out_Tmp_1520: int, out_Tmp_1534: int, out_Tmp_1538: int, out_Tmp_1549: int);
  free ensures {:va_keep} out_Tmp_1520 == in_Tmp_1520 || out_Tmp_1520 == in_j_2;
  free ensures {:va_keep} out_Tmp_1534 == in_Tmp_1534 || out_Tmp_1534 == in_i_23;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ProcessCallbackData_loop_L58(in_i_23: int, in_Tmp_1510: int, in_Tmp_1513: int, in_Tmp_1515: int, in_Tmp_1520: int, in_interfaceListIndex: int, in_j_2: int, in_Tmp_1524: int, in_internalFunctionAssoc_1: int, in_Tmp_1534: int, in_Tmp_1538: int, in_functionDesc_1: int, in_Tmp_1542: int, in_Tmp_1549: int, in_parentFdoExt_117: int) returns (out_Tmp_1510: int, out_Tmp_1513: int, out_Tmp_1515: int, out_Tmp_1520: int, out_interfaceListIndex: int, out_j_2: int, out_Tmp_1524: int, out_Tmp_1534: int, out_Tmp_1538: int, out_Tmp_1542: int, out_Tmp_1549: int)
{

  entry:
    out_Tmp_1510, out_Tmp_1513, out_Tmp_1515, out_Tmp_1520, out_interfaceListIndex, out_j_2, out_Tmp_1524, out_Tmp_1534, out_Tmp_1538, out_Tmp_1542, out_Tmp_1549 := in_Tmp_1510, in_Tmp_1513, in_Tmp_1515, in_Tmp_1520, in_interfaceListIndex, in_j_2, in_Tmp_1524, in_Tmp_1534, in_Tmp_1538, in_Tmp_1542, in_Tmp_1549;
    goto L58, exit;

  exit:
    return;

  L58:
    out_Tmp_1524 := in_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto anon39_Else;

  anon39_Else:
    assume {:nonnull} in_parentFdoExt_117 != 0;
    assume in_parentFdoExt_117 > 0;
    havoc out_interfaceListIndex;
    goto L61;

  L61:
    call {:si_unique_call 3331} out_Tmp_1510, out_Tmp_1520, out_Tmp_1534, out_Tmp_1538, out_Tmp_1549 := ProcessCallbackData_loop_L61(in_i_23, out_Tmp_1510, out_Tmp_1520, out_interfaceListIndex, out_j_2, out_Tmp_1534, out_Tmp_1538, in_functionDesc_1, out_Tmp_1549);
    goto L61_last;

  L61_last:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} out_interfaceListIndex != 0;
    assume out_interfaceListIndex > 0;
    havoc out_Tmp_1549;
    out_Tmp_1520 := out_j_2;
    out_Tmp_1534 := in_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    havoc out_Tmp_1510;
    assume {:nonnull} out_Tmp_1510 != 0;
    assume out_Tmp_1510 > 0;
    havoc out_Tmp_1538;
    assume {:nonnull} out_Tmp_1538 != 0;
    assume out_Tmp_1538 > 0;
    assume {:nonnull} out_Tmp_1549 != 0;
    assume out_Tmp_1549 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1549)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1538)];
    out_Tmp_1513 := out_j_2;
    out_Tmp_1515 := in_i_23;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    havoc out_Tmp_1542;
    assume {:nonnull} out_Tmp_1542 != 0;
    assume out_Tmp_1542 > 0;
    goto L62;

  L62:
    out_j_2 := out_j_2 + 1;
    goto L62_dummy;

  L62_dummy:
    call {:si_unique_call 3332} {:si_old_unique_call 1} out_Tmp_1510, out_Tmp_1513, out_Tmp_1515, out_Tmp_1520, out_interfaceListIndex, out_j_2, out_Tmp_1524, out_Tmp_1534, out_Tmp_1538, out_Tmp_1542, out_Tmp_1549 := ProcessCallbackData_loop_L58(in_i_23, out_Tmp_1510, out_Tmp_1513, out_Tmp_1515, out_Tmp_1520, out_interfaceListIndex, out_j_2, out_Tmp_1524, in_internalFunctionAssoc_1, out_Tmp_1534, out_Tmp_1538, in_functionDesc_1, out_Tmp_1542, out_Tmp_1549, in_parentFdoExt_117);
    return;

  anon40_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1549)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1538)];
    assume false;
    return;

  anon34_Then:
    goto L62;
}



procedure {:LoopProcedure} ProcessCallbackData_loop_L58(in_i_23: int, in_Tmp_1510: int, in_Tmp_1513: int, in_Tmp_1515: int, in_Tmp_1520: int, in_interfaceListIndex: int, in_j_2: int, in_Tmp_1524: int, in_internalFunctionAssoc_1: int, in_Tmp_1534: int, in_Tmp_1538: int, in_functionDesc_1: int, in_Tmp_1542: int, in_Tmp_1549: int, in_parentFdoExt_117: int) returns (out_Tmp_1510: int, out_Tmp_1513: int, out_Tmp_1515: int, out_Tmp_1520: int, out_interfaceListIndex: int, out_j_2: int, out_Tmp_1524: int, out_Tmp_1534: int, out_Tmp_1538: int, out_Tmp_1542: int, out_Tmp_1549: int);
  free ensures {:va_keep} out_Tmp_1515 == in_Tmp_1515 || out_Tmp_1515 == in_i_23;
  free ensures {:va_keep} out_Tmp_1524 == in_Tmp_1524 || out_Tmp_1524 == in_i_23;
  free ensures {:va_keep} out_Tmp_1534 == in_Tmp_1534 || out_Tmp_1534 == in_i_23;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ProcessCallbackData_loop_L37(in_i_23: int, in_Tmp_1510: int, in_Tmp_1512: int, in_Tmp_1513: int, in_Tmp_1514: int, in_size_3: int, in_Tmp_1515: int, in_Tmp_1516: int, in_Tmp_1517: int, in_Tmp_1518: int, in_Tmp_1519: int, in_Tmp_1520: int, in_Tmp_1521: int, in_interfaceListIndex: int, in_Tmp_1522: int, in_j_2: int, in_Tmp_1523: int, in_Tmp_1524: int, in_Tmp_1526: int, in_numFunctions_5: int, in_internalFunctionAssoc_1: int, in_Tmp_1528: int, in_Tmp_1529: int, in_Tmp_1530: int, in_Tmp_1531: int, in_Tmp_1532: int, in_sdv_505: int, in_Tmp_1533: int, in_Tmp_1534: int, in_Tmp_1535: int, in_Tmp_1536: int, in_Tmp_1537: int, in_Tmp_1538: int, in_Tmp_1540: int, in_functionDesc_1: int, in_Tmp_1541: int, in_Tmp_1542: int, in_Tmp_1543: int, in_Tmp_1544: int, in_Tmp_1545: int, in_Tmp_1547: int, in_Tmp_1548: int, in_Tmp_1549: int, in_parentFdoExt_117: int) returns (out_i_23: int, out_Tmp_1510: int, out_Tmp_1512: int, out_Tmp_1513: int, out_Tmp_1514: int, out_size_3: int, out_Tmp_1515: int, out_Tmp_1516: int, out_Tmp_1517: int, out_Tmp_1518: int, out_Tmp_1519: int, out_Tmp_1520: int, out_Tmp_1521: int, out_interfaceListIndex: int, out_Tmp_1522: int, out_j_2: int, out_Tmp_1523: int, out_Tmp_1524: int, out_Tmp_1526: int, out_Tmp_1528: int, out_Tmp_1529: int, out_Tmp_1530: int, out_Tmp_1531: int, out_Tmp_1532: int, out_sdv_505: int, out_Tmp_1533: int, out_Tmp_1534: int, out_Tmp_1535: int, out_Tmp_1536: int, out_Tmp_1537: int, out_Tmp_1538: int, out_Tmp_1540: int, out_Tmp_1541: int, out_Tmp_1542: int, out_Tmp_1543: int, out_Tmp_1544: int, out_Tmp_1545: int, out_Tmp_1547: int, out_Tmp_1548: int, out_Tmp_1549: int)
{

  entry:
    out_i_23, out_Tmp_1510, out_Tmp_1512, out_Tmp_1513, out_Tmp_1514, out_size_3, out_Tmp_1515, out_Tmp_1516, out_Tmp_1517, out_Tmp_1518, out_Tmp_1519, out_Tmp_1520, out_Tmp_1521, out_interfaceListIndex, out_Tmp_1522, out_j_2, out_Tmp_1523, out_Tmp_1524, out_Tmp_1526, out_Tmp_1528, out_Tmp_1529, out_Tmp_1530, out_Tmp_1531, out_Tmp_1532, out_sdv_505, out_Tmp_1533, out_Tmp_1534, out_Tmp_1535, out_Tmp_1536, out_Tmp_1537, out_Tmp_1538, out_Tmp_1540, out_Tmp_1541, out_Tmp_1542, out_Tmp_1543, out_Tmp_1544, out_Tmp_1545, out_Tmp_1547, out_Tmp_1548, out_Tmp_1549 := in_i_23, in_Tmp_1510, in_Tmp_1512, in_Tmp_1513, in_Tmp_1514, in_size_3, in_Tmp_1515, in_Tmp_1516, in_Tmp_1517, in_Tmp_1518, in_Tmp_1519, in_Tmp_1520, in_Tmp_1521, in_interfaceListIndex, in_Tmp_1522, in_j_2, in_Tmp_1523, in_Tmp_1524, in_Tmp_1526, in_Tmp_1528, in_Tmp_1529, in_Tmp_1530, in_Tmp_1531, in_Tmp_1532, in_sdv_505, in_Tmp_1533, in_Tmp_1534, in_Tmp_1535, in_Tmp_1536, in_Tmp_1537, in_Tmp_1538, in_Tmp_1540, in_Tmp_1541, in_Tmp_1542, in_Tmp_1543, in_Tmp_1544, in_Tmp_1545, in_Tmp_1547, in_Tmp_1548, in_Tmp_1549;
    goto L37, exit;

  exit:
    return;

  L37:
    goto anon32_Else;

  anon32_Else:
    assume {:partition} in_numFunctions_5 > out_i_23;
    out_Tmp_1512 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    havoc out_size_3;
    call {:si_unique_call 3337} out_sdv_505 := ExAllocatePoolWithTag(512, out_size_3, -1016958123);
    out_Tmp_1517 := out_i_23;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    out_Tmp_1526 := out_i_23;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    call {:si_unique_call 3336} sdv_RtlZeroMemory(0, out_size_3);
    goto L45;

  L45:
    goto anon37_Else;

  anon37_Else:
    out_Tmp_1536 := out_i_23;
    out_Tmp_1532 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    out_Tmp_1548 := out_i_23;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    out_Tmp_1530 := out_i_23;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    out_Tmp_1537 := out_i_23;
    out_Tmp_1543 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    havoc out_Tmp_1521;
    assume {:nonnull} out_Tmp_1521 != 0;
    assume out_Tmp_1521 > 0;
    havoc out_Tmp_1522;
    assume {:nonnull} out_Tmp_1522 != 0;
    assume out_Tmp_1522 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    out_Tmp_1533 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    out_Tmp_1518 := out_i_23;
    out_Tmp_1545 := out_i_23;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    goto L56;

  L56:
    out_j_2 := 0;
    goto L58;

  L58:
    call {:si_unique_call 3334} out_Tmp_1510, out_Tmp_1513, out_Tmp_1515, out_Tmp_1520, out_interfaceListIndex, out_j_2, out_Tmp_1524, out_Tmp_1534, out_Tmp_1538, out_Tmp_1542, out_Tmp_1549 := ProcessCallbackData_loop_L58(out_i_23, out_Tmp_1510, out_Tmp_1513, out_Tmp_1515, out_Tmp_1520, out_interfaceListIndex, out_j_2, out_Tmp_1524, in_internalFunctionAssoc_1, out_Tmp_1534, out_Tmp_1538, in_functionDesc_1, out_Tmp_1542, out_Tmp_1549, in_parentFdoExt_117);
    goto L58_last;

  L58_last:
    out_Tmp_1524 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} in_parentFdoExt_117 != 0;
    assume in_parentFdoExt_117 > 0;
    havoc out_interfaceListIndex;
    goto L61;

  L61:
    call {:si_unique_call 3335} out_Tmp_1510, out_Tmp_1520, out_Tmp_1534, out_Tmp_1538, out_Tmp_1549 := ProcessCallbackData_loop_L61(out_i_23, out_Tmp_1510, out_Tmp_1520, out_interfaceListIndex, out_j_2, out_Tmp_1534, out_Tmp_1538, in_functionDesc_1, out_Tmp_1549);
    goto L61_last;

  L61_last:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} out_interfaceListIndex != 0;
    assume out_interfaceListIndex > 0;
    havoc out_Tmp_1549;
    out_Tmp_1520 := out_j_2;
    out_Tmp_1534 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    havoc out_Tmp_1510;
    assume {:nonnull} out_Tmp_1510 != 0;
    assume out_Tmp_1510 > 0;
    havoc out_Tmp_1538;
    assume {:nonnull} out_Tmp_1538 != 0;
    assume out_Tmp_1538 > 0;
    assume {:nonnull} out_Tmp_1549 != 0;
    assume out_Tmp_1549 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1549)] == Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1538)];
    out_Tmp_1513 := out_j_2;
    out_Tmp_1515 := out_i_23;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    havoc out_Tmp_1542;
    assume {:nonnull} out_Tmp_1542 != 0;
    assume out_Tmp_1542 > 0;
    goto L62;

  L62:
    out_j_2 := out_j_2 + 1;
    assume false;
    return;

  anon40_Then:
    assume {:partition} Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1549)] != Mem_T.VOID[bInterfaceNumber__USB_INTERFACE_DESCRIPTOR(out_Tmp_1538)];
    assume false;
    return;

  anon34_Then:
    goto L62;

  anon39_Then:
    out_Tmp_1544 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    out_Tmp_1528 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    call {:si_unique_call 3333} sdv_ExFreePool(0);
    out_Tmp_1529 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto L67;

  L67:
    out_Tmp_1523 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    out_Tmp_1531 := out_i_23;
    out_Tmp_1516 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    goto L73;

  L73:
    out_Tmp_1541 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    out_Tmp_1547 := out_i_23;
    out_Tmp_1540 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    goto L75;

  L75:
    out_Tmp_1514 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    out_Tmp_1535 := out_i_23;
    out_Tmp_1519 := out_i_23;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    assume {:nonnull} in_functionDesc_1 != 0;
    assume in_functionDesc_1 > 0;
    assume {:nonnull} in_internalFunctionAssoc_1 != 0;
    assume in_internalFunctionAssoc_1 > 0;
    goto L77;

  L77:
    out_i_23 := out_i_23 + 1;
    goto L77_dummy;

  L77_dummy:
    call {:si_unique_call 3338} {:si_old_unique_call 1} out_i_23, out_Tmp_1510, out_Tmp_1512, out_Tmp_1513, out_Tmp_1514, out_size_3, out_Tmp_1515, out_Tmp_1516, out_Tmp_1517, out_Tmp_1518, out_Tmp_1519, out_Tmp_1520, out_Tmp_1521, out_interfaceListIndex, out_Tmp_1522, out_j_2, out_Tmp_1523, out_Tmp_1524, out_Tmp_1526, out_Tmp_1528, out_Tmp_1529, out_Tmp_1530, out_Tmp_1531, out_Tmp_1532, out_sdv_505, out_Tmp_1533, out_Tmp_1534, out_Tmp_1535, out_Tmp_1536, out_Tmp_1537, out_Tmp_1538, out_Tmp_1540, out_Tmp_1541, out_Tmp_1542, out_Tmp_1543, out_Tmp_1544, out_Tmp_1545, out_Tmp_1547, out_Tmp_1548, out_Tmp_1549 := ProcessCallbackData_loop_L37(out_i_23, out_Tmp_1510, out_Tmp_1512, out_Tmp_1513, out_Tmp_1514, out_size_3, out_Tmp_1515, out_Tmp_1516, out_Tmp_1517, out_Tmp_1518, out_Tmp_1519, out_Tmp_1520, out_Tmp_1521, out_interfaceListIndex, out_Tmp_1522, out_j_2, out_Tmp_1523, out_Tmp_1524, out_Tmp_1526, in_numFunctions_5, in_internalFunctionAssoc_1, out_Tmp_1528, out_Tmp_1529, out_Tmp_1530, out_Tmp_1531, out_Tmp_1532, out_sdv_505, out_Tmp_1533, out_Tmp_1534, out_Tmp_1535, out_Tmp_1536, out_Tmp_1537, out_Tmp_1538, out_Tmp_1540, in_functionDesc_1, out_Tmp_1541, out_Tmp_1542, out_Tmp_1543, out_Tmp_1544, out_Tmp_1545, out_Tmp_1547, out_Tmp_1548, out_Tmp_1549, in_parentFdoExt_117);
    return;

  anon44_Then:
    goto L77;

  anon43_Then:
    goto L75;

  anon42_Then:
    goto L73;

  anon41_Then:
    goto L67;

  anon38_Then:
    goto L56;

  anon36_Then:
    goto L45;
}



procedure {:LoopProcedure} ProcessCallbackData_loop_L37(in_i_23: int, in_Tmp_1510: int, in_Tmp_1512: int, in_Tmp_1513: int, in_Tmp_1514: int, in_size_3: int, in_Tmp_1515: int, in_Tmp_1516: int, in_Tmp_1517: int, in_Tmp_1518: int, in_Tmp_1519: int, in_Tmp_1520: int, in_Tmp_1521: int, in_interfaceListIndex: int, in_Tmp_1522: int, in_j_2: int, in_Tmp_1523: int, in_Tmp_1524: int, in_Tmp_1526: int, in_numFunctions_5: int, in_internalFunctionAssoc_1: int, in_Tmp_1528: int, in_Tmp_1529: int, in_Tmp_1530: int, in_Tmp_1531: int, in_Tmp_1532: int, in_sdv_505: int, in_Tmp_1533: int, in_Tmp_1534: int, in_Tmp_1535: int, in_Tmp_1536: int, in_Tmp_1537: int, in_Tmp_1538: int, in_Tmp_1540: int, in_functionDesc_1: int, in_Tmp_1541: int, in_Tmp_1542: int, in_Tmp_1543: int, in_Tmp_1544: int, in_Tmp_1545: int, in_Tmp_1547: int, in_Tmp_1548: int, in_Tmp_1549: int, in_parentFdoExt_117: int) returns (out_i_23: int, out_Tmp_1510: int, out_Tmp_1512: int, out_Tmp_1513: int, out_Tmp_1514: int, out_size_3: int, out_Tmp_1515: int, out_Tmp_1516: int, out_Tmp_1517: int, out_Tmp_1518: int, out_Tmp_1519: int, out_Tmp_1520: int, out_Tmp_1521: int, out_interfaceListIndex: int, out_Tmp_1522: int, out_j_2: int, out_Tmp_1523: int, out_Tmp_1524: int, out_Tmp_1526: int, out_Tmp_1528: int, out_Tmp_1529: int, out_Tmp_1530: int, out_Tmp_1531: int, out_Tmp_1532: int, out_sdv_505: int, out_Tmp_1533: int, out_Tmp_1534: int, out_Tmp_1535: int, out_Tmp_1536: int, out_Tmp_1537: int, out_Tmp_1538: int, out_Tmp_1540: int, out_Tmp_1541: int, out_Tmp_1542: int, out_Tmp_1543: int, out_Tmp_1544: int, out_Tmp_1545: int, out_Tmp_1547: int, out_Tmp_1548: int, out_Tmp_1549: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ValidateCallbackData_loop_L46(in_interfaceDesc_3: int, in_interfaceListIndex_1: int)
{

  entry:
    goto L46, exit;

  exit:
    return;

  L46:
    assume {:nonnull} in_interfaceListIndex_1 != 0;
    assume in_interfaceListIndex_1 > 0;
    goto anon53_Else;

  anon53_Else:
    assume {:nonnull} in_interfaceListIndex_1 != 0;
    assume in_interfaceListIndex_1 > 0;
    goto anon55_Then;

  anon55_Then:
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    call {:si_unique_call 3339} {:si_old_unique_call 1} ValidateCallbackData_loop_L46(in_interfaceDesc_3, in_interfaceListIndex_1);
    return;
}



procedure {:LoopProcedure} ValidateCallbackData_loop_L46(in_interfaceDesc_3: int, in_interfaceListIndex_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ValidateCallbackData_loop_L40(in_i_24: int, in_Tmp_1552: int, in_interfaceDesc_3: int, in_found_1: int, in_interfaceListIndex_1: int, in_functionDescIndex: int, in_Tmp_1556: int, in_interfaceList_3: int) returns (out_i_24: int, out_Tmp_1552: int, out_interfaceDesc_3: int, out_found_1: int, out_interfaceListIndex_1: int, out_Tmp_1556: int)
{

  entry:
    out_i_24, out_Tmp_1552, out_interfaceDesc_3, out_found_1, out_interfaceListIndex_1, out_Tmp_1556 := in_i_24, in_Tmp_1552, in_interfaceDesc_3, in_found_1, in_interfaceListIndex_1, in_Tmp_1556;
    goto L40, exit;

  exit:
    return;

  L40:
    assume {:nonnull} in_functionDescIndex != 0;
    assume in_functionDescIndex > 0;
    goto anon51_Else;

  anon51_Else:
    out_Tmp_1552 := out_i_24;
    assume {:nonnull} in_functionDescIndex != 0;
    assume in_functionDescIndex > 0;
    havoc out_Tmp_1556;
    assume {:nonnull} out_Tmp_1556 != 0;
    assume out_Tmp_1556 > 0;
    havoc out_interfaceDesc_3;
    out_interfaceListIndex_1 := in_interfaceList_3;
    out_found_1 := 0;
    goto L46;

  L46:
    call {:si_unique_call 3340} ValidateCallbackData_loop_L46(out_interfaceDesc_3, out_interfaceListIndex_1);
    goto L46_last;

  L46_last:
    assume {:nonnull} out_interfaceListIndex_1 != 0;
    assume out_interfaceListIndex_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} out_interfaceListIndex_1 != 0;
    assume out_interfaceListIndex_1 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    out_found_1 := 1;
    goto L47;

  L47:
    goto anon54_Else;

  anon54_Else:
    assume {:partition} out_found_1 != 0;
    out_i_24 := out_i_24 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    call {:si_unique_call 3341} {:si_old_unique_call 1} out_i_24, out_Tmp_1552, out_interfaceDesc_3, out_found_1, out_interfaceListIndex_1, out_Tmp_1556 := ValidateCallbackData_loop_L40(out_i_24, out_Tmp_1552, out_interfaceDesc_3, out_found_1, out_interfaceListIndex_1, in_functionDescIndex, out_Tmp_1556, in_interfaceList_3);
    return;

  anon55_Then:
    assume false;
    return;

  anon53_Then:
    goto L47;
}



procedure {:LoopProcedure} ValidateCallbackData_loop_L40(in_i_24: int, in_Tmp_1552: int, in_interfaceDesc_3: int, in_found_1: int, in_interfaceListIndex_1: int, in_functionDescIndex: int, in_Tmp_1556: int, in_interfaceList_3: int) returns (out_i_24: int, out_Tmp_1552: int, out_interfaceDesc_3: int, out_found_1: int, out_interfaceListIndex_1: int, out_Tmp_1556: int);
  free ensures {:va_keep} out_found_1 == 1 || out_found_1 == 0 || out_found_1 == in_found_1;
  free ensures {:va_keep} out_interfaceListIndex_1 == in_interfaceListIndex_1 || out_interfaceListIndex_1 == in_interfaceList_3;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ValidateCallbackData_loop_L29(in_i_24: int, in_strLength: int, in_Tmp_1552: int, in_bufferEnd: int, in_bufferIndex: int, in_interfaceDesc_3: int, in_found_1: int, in_length_4: int, in_interfaceListIndex_1: int, in_interfacesPresent: int, in_Tmp_1554: int, in_ntStatus_27: int, in_functionDescIndex: int, in_Tmp_1555: int, in_maximumLength: int, in_Tmp_1556: int, in_interfaceList_3: int, in_configDesc_4: int) returns (out_i_24: int, out_strLength: int, out_Tmp_1552: int, out_interfaceDesc_3: int, out_found_1: int, out_length_4: int, out_interfaceListIndex_1: int, out_interfacesPresent: int, out_Tmp_1554: int, out_ntStatus_27: int, out_functionDescIndex: int, out_Tmp_1555: int, out_maximumLength: int, out_Tmp_1556: int)
{

  entry:
    out_i_24, out_strLength, out_Tmp_1552, out_interfaceDesc_3, out_found_1, out_length_4, out_interfaceListIndex_1, out_interfacesPresent, out_Tmp_1554, out_ntStatus_27, out_functionDescIndex, out_Tmp_1555, out_maximumLength, out_Tmp_1556 := in_i_24, in_strLength, in_Tmp_1552, in_interfaceDesc_3, in_found_1, in_length_4, in_interfaceListIndex_1, in_interfacesPresent, in_Tmp_1554, in_ntStatus_27, in_functionDescIndex, in_Tmp_1555, in_maximumLength, in_Tmp_1556;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon49_Else;

  anon49_Else:
    assume {:partition} in_bufferEnd > in_bufferIndex;
    goto anon50_Then;

  anon50_Then:
    assume {:partition} in_bufferEnd >= in_bufferIndex;
    out_functionDescIndex := in_bufferIndex;
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    goto anon63_Else;

  anon63_Else:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    havoc out_interfacesPresent;
    assume {:nonnull} in_configDesc_4 != 0;
    assume in_configDesc_4 > 0;
    goto anon64_Then;

  anon64_Then:
    out_i_24 := 0;
    goto L40;

  L40:
    call {:si_unique_call 3342} out_i_24, out_Tmp_1552, out_interfaceDesc_3, out_found_1, out_interfaceListIndex_1, out_Tmp_1556 := ValidateCallbackData_loop_L40(out_i_24, out_Tmp_1552, out_interfaceDesc_3, out_found_1, out_interfaceListIndex_1, out_functionDescIndex, out_Tmp_1556, in_interfaceList_3);
    goto L40_last;

  L40_last:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    out_Tmp_1552 := out_i_24;
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    havoc out_Tmp_1556;
    assume {:nonnull} out_Tmp_1556 != 0;
    assume out_Tmp_1556 > 0;
    havoc out_interfaceDesc_3;
    out_interfaceListIndex_1 := in_interfaceList_3;
    out_found_1 := 0;
    goto L46;

  L46:
    call {:si_unique_call 3343} ValidateCallbackData_loop_L46(out_interfaceDesc_3, out_interfaceListIndex_1);
    goto L46_last;

  L46_last:
    assume {:nonnull} out_interfaceListIndex_1 != 0;
    assume out_interfaceListIndex_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} out_interfaceListIndex_1 != 0;
    assume out_interfaceListIndex_1 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    out_found_1 := 1;
    goto L47;

  L47:
    goto anon54_Else;

  anon54_Else:
    assume {:partition} out_found_1 != 0;
    out_i_24 := out_i_24 + 1;
    assume false;
    return;

  anon55_Then:
    assume false;
    return;

  anon53_Then:
    goto L47;

  anon51_Then:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    call {:si_unique_call 3344} out_ntStatus_27 := ValidateUnicodeMultiString(HardwareId__USBC_FUNCTION_DESCRIPTOR(out_functionDescIndex));
    goto anon57_Then;

  anon57_Then:
    assume {:partition} 0 <= out_ntStatus_27;
    goto L54;

  L54:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    call {:si_unique_call 3345} out_ntStatus_27 := ValidateUnicodeMultiString(CompatibleId__USBC_FUNCTION_DESCRIPTOR(out_functionDescIndex));
    goto anon59_Then;

  anon59_Then:
    assume {:partition} 0 <= out_ntStatus_27;
    goto L61;

  L61:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    havoc out_maximumLength;
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    havoc out_length_4;
    out_strLength := INTDIV(out_length_4, 2);
    goto anon65_Then;

  anon65_Then:
    assume {:partition} INTMOD(out_maximumLength, 2) == 0;
    goto anon60_Else;

  anon60_Else:
    assume {:partition} INTMOD(out_length_4, 2) == 0;
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    goto anon61_Else;

  anon61_Else:
    goto anon62_Else;

  anon62_Else:
    assume {:partition} out_length_4 + 2 <= out_maximumLength;
    out_Tmp_1554 := out_strLength;
    assume {:nonnull} out_functionDescIndex != 0;
    assume out_functionDescIndex > 0;
    havoc out_Tmp_1555;
    assume {:nonnull} out_Tmp_1555 != 0;
    assume out_Tmp_1555 > 0;
    goto anon66_Then;

  anon66_Then:
    assume {:partition} Mem_T.VOID[out_Tmp_1555 + out_Tmp_1554 * 4] == 0;
    goto L68;

  L68:
    goto L68_dummy;

  L68_dummy:
    call {:si_unique_call 3346} {:si_old_unique_call 1} out_i_24, out_strLength, out_Tmp_1552, out_interfaceDesc_3, out_found_1, out_length_4, out_interfaceListIndex_1, out_interfacesPresent, out_Tmp_1554, out_ntStatus_27, out_functionDescIndex, out_Tmp_1555, out_maximumLength, out_Tmp_1556 := ValidateCallbackData_loop_L29(out_i_24, out_strLength, out_Tmp_1552, in_bufferEnd, in_bufferIndex, out_interfaceDesc_3, out_found_1, out_length_4, out_interfaceListIndex_1, out_interfacesPresent, out_Tmp_1554, out_ntStatus_27, out_functionDescIndex, out_Tmp_1555, out_maximumLength, out_Tmp_1556, in_interfaceList_3, in_configDesc_4);
    return;

  anon58_Then:
    goto L68;

  anon56_Then:
    goto L61;

  anon52_Then:
    goto L54;
}



procedure {:LoopProcedure} ValidateCallbackData_loop_L29(in_i_24: int, in_strLength: int, in_Tmp_1552: int, in_bufferEnd: int, in_bufferIndex: int, in_interfaceDesc_3: int, in_found_1: int, in_length_4: int, in_interfaceListIndex_1: int, in_interfacesPresent: int, in_Tmp_1554: int, in_ntStatus_27: int, in_functionDescIndex: int, in_Tmp_1555: int, in_maximumLength: int, in_Tmp_1556: int, in_interfaceList_3: int, in_configDesc_4: int) returns (out_i_24: int, out_strLength: int, out_Tmp_1552: int, out_interfaceDesc_3: int, out_found_1: int, out_length_4: int, out_interfaceListIndex_1: int, out_interfacesPresent: int, out_Tmp_1554: int, out_ntStatus_27: int, out_functionDescIndex: int, out_Tmp_1555: int, out_maximumLength: int, out_Tmp_1556: int);
  modifies alloc;
  free ensures {:va_keep} out_found_1 == 1 || out_found_1 == 0 || out_found_1 == in_found_1;
  free ensures {:va_keep} out_interfaceListIndex_1 == in_interfaceListIndex_1 || out_interfaceListIndex_1 == in_interfaceList_3;
  free ensures {:va_keep} out_ntStatus_27 == -1073741811 || out_ntStatus_27 == 0 || out_ntStatus_27 == in_ntStatus_27;
  free ensures {:va_keep} out_functionDescIndex == in_functionDescIndex || out_functionDescIndex == in_bufferIndex;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation InvokeDeviceClassCallback_loop_L114(in_i_25: int, in_Tmp_1561: int, in_Tmp_1562: int, in_Tmp_1563: int, in_enumeratorRegKeyPresent: int, in_descProtocol: int, in_deviceSubClass: int, in_Tmp_1569: int, in_descClass: int, in_deviceClass: int, in_deviceProtocol: int, in_descSubClass: int) returns (out_i_25: int, out_Tmp_1561: int, out_Tmp_1562: int, out_Tmp_1563: int, out_deviceSubClass: int, out_Tmp_1569: int, out_deviceClass: int, out_deviceProtocol: int)
{

  entry:
    out_i_25, out_Tmp_1561, out_Tmp_1562, out_Tmp_1563, out_deviceSubClass, out_Tmp_1569, out_deviceClass, out_deviceProtocol := in_i_25, in_Tmp_1561, in_Tmp_1562, in_Tmp_1563, in_deviceSubClass, in_Tmp_1569, in_deviceClass, in_deviceProtocol;
    goto L114, exit;

  exit:
    return;

  L114:
    assume {:CounterLoop 1} {:Counter "i_25"} true;
    goto anon45_Else;

  anon45_Else:
    assume {:partition} 1 > out_i_25;
    out_Tmp_1562 := out_i_25;
    havoc out_deviceClass;
    out_Tmp_1569 := out_i_25;
    havoc out_deviceSubClass;
    out_Tmp_1561 := out_i_25;
    havoc out_deviceProtocol;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} in_enumeratorRegKeyPresent != 0;
    goto L120;

  L120:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} in_descClass == out_deviceClass;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} in_descSubClass == out_deviceSubClass;
    goto anon48_Then;

  anon48_Then:
    assume {:partition} in_descProtocol != out_deviceProtocol;
    goto L121;

  L121:
    out_i_25 := out_i_25 + 1;
    goto L121_dummy;

  L121_dummy:
    havoc out_i_25;
    return;

  anon47_Then:
    assume {:partition} in_descSubClass != out_deviceSubClass;
    goto L121;

  anon46_Then:
    assume {:partition} in_descClass != out_deviceClass;
    goto L121;

  anon50_Then:
    assume {:partition} in_enumeratorRegKeyPresent == 0;
    out_Tmp_1563 := out_i_25;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L121;

  anon51_Then:
    goto L120;
}



procedure {:LoopProcedure} InvokeDeviceClassCallback_loop_L114(in_i_25: int, in_Tmp_1561: int, in_Tmp_1562: int, in_Tmp_1563: int, in_enumeratorRegKeyPresent: int, in_descProtocol: int, in_deviceSubClass: int, in_Tmp_1569: int, in_descClass: int, in_deviceClass: int, in_deviceProtocol: int, in_descSubClass: int) returns (out_i_25: int, out_Tmp_1561: int, out_Tmp_1562: int, out_Tmp_1563: int, out_deviceSubClass: int, out_Tmp_1569: int, out_deviceClass: int, out_deviceProtocol: int);
  free ensures {:va_keep} out_Tmp_1561 == in_i_25 || out_Tmp_1561 == in_Tmp_1561;
  free ensures {:va_keep} out_Tmp_1562 == in_i_25 || out_Tmp_1562 == in_Tmp_1562;
  free ensures {:va_keep} out_Tmp_1563 == in_i_25 || out_Tmp_1563 == in_Tmp_1563;
  free ensures {:va_keep} out_Tmp_1569 == in_i_25 || out_Tmp_1569 == in_Tmp_1569;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation InvokePdoEnableCallbacks_loop_L21(in_numPdos: int, in_i_26: int, in_interfaceDescriptor_2: int, in_functionAssoc_10: int, in_sdv_511: int, in_Tmp_1581: int, in_callbackFunction_1: int, in_Tmp_1584: int, in_Tmp_1585: int, in_Tmp_1586: int, in_Tmp_1588: int, in_Tmp_1589: int, in_Tmp_1590: int, in_parentFdoExt_119: int) returns (out_numPdos: int, out_i_26: int, out_interfaceDescriptor_2: int, out_functionAssoc_10: int, out_Tmp_1581: int, out_Tmp_1584: int, out_Tmp_1585: int, out_Tmp_1586: int, out_Tmp_1588: int, out_Tmp_1589: int, out_Tmp_1590: int)
{

  entry:
    out_numPdos, out_i_26, out_interfaceDescriptor_2, out_functionAssoc_10, out_Tmp_1581, out_Tmp_1584, out_Tmp_1585, out_Tmp_1586, out_Tmp_1588, out_Tmp_1589, out_Tmp_1590 := in_numPdos, in_i_26, in_interfaceDescriptor_2, in_functionAssoc_10, in_Tmp_1581, in_Tmp_1584, in_Tmp_1585, in_Tmp_1586, in_Tmp_1588, in_Tmp_1589, in_Tmp_1590;
    goto L21, exit;

  exit:
    return;

  L21:
    assume {:nonnull} in_parentFdoExt_119 != 0;
    assume in_parentFdoExt_119 > 0;
    goto anon16_Else;

  anon16_Else:
    out_Tmp_1585 := out_i_26;
    assume {:nonnull} in_parentFdoExt_119 != 0;
    assume in_parentFdoExt_119 > 0;
    havoc out_Tmp_1584;
    out_functionAssoc_10 := out_Tmp_1584 + out_Tmp_1585 * 68;
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    havoc out_Tmp_1588;
    assume {:nonnull} out_Tmp_1588 != 0;
    assume out_Tmp_1588 > 0;
    havoc out_Tmp_1586;
    assume {:nonnull} out_Tmp_1586 != 0;
    assume out_Tmp_1586 > 0;
    havoc out_interfaceDescriptor_2;
    assume {:nonnull} out_interfaceDescriptor_2 != 0;
    assume out_interfaceDescriptor_2 > 0;
    assume {:nonnull} out_interfaceDescriptor_2 != 0;
    assume out_interfaceDescriptor_2 > 0;
    assume {:nonnull} out_interfaceDescriptor_2 != 0;
    assume out_interfaceDescriptor_2 > 0;
    goto L30;

  L30:
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    assume in_callbackFunction_1 == 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} in_sdv_511 != 0;
    out_numPdos := out_numPdos + 1;
    goto L38;

  L38:
    out_i_26 := out_i_26 + 1;
    goto L38_dummy;

  L38_dummy:
    call {:si_unique_call 3347} {:si_old_unique_call 1} out_numPdos, out_i_26, out_interfaceDescriptor_2, out_functionAssoc_10, out_Tmp_1581, out_Tmp_1584, out_Tmp_1585, out_Tmp_1586, out_Tmp_1588, out_Tmp_1589, out_Tmp_1590 := InvokePdoEnableCallbacks_loop_L21(out_numPdos, out_i_26, out_interfaceDescriptor_2, out_functionAssoc_10, in_sdv_511, out_Tmp_1581, in_callbackFunction_1, out_Tmp_1584, out_Tmp_1585, out_Tmp_1586, out_Tmp_1588, out_Tmp_1589, out_Tmp_1590, in_parentFdoExt_119);
    return;

  anon17_Then:
    assume {:partition} in_sdv_511 == 0;
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    goto L38;

  anon18_Then:
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    havoc out_Tmp_1590;
    assume {:nonnull} out_Tmp_1590 != 0;
    assume out_Tmp_1590 > 0;
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    havoc out_Tmp_1581;
    assume {:nonnull} out_Tmp_1581 != 0;
    assume out_Tmp_1581 > 0;
    assume {:nonnull} out_functionAssoc_10 != 0;
    assume out_functionAssoc_10 > 0;
    havoc out_Tmp_1589;
    assume {:nonnull} out_Tmp_1589 != 0;
    assume out_Tmp_1589 > 0;
    goto L30;
}



procedure {:LoopProcedure} InvokePdoEnableCallbacks_loop_L21(in_numPdos: int, in_i_26: int, in_interfaceDescriptor_2: int, in_functionAssoc_10: int, in_sdv_511: int, in_Tmp_1581: int, in_callbackFunction_1: int, in_Tmp_1584: int, in_Tmp_1585: int, in_Tmp_1586: int, in_Tmp_1588: int, in_Tmp_1589: int, in_Tmp_1590: int, in_parentFdoExt_119: int) returns (out_numPdos: int, out_i_26: int, out_interfaceDescriptor_2: int, out_functionAssoc_10: int, out_Tmp_1581: int, out_Tmp_1584: int, out_Tmp_1585: int, out_Tmp_1586: int, out_Tmp_1588: int, out_Tmp_1589: int, out_Tmp_1590: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation DeriveParentIdlePowerStateFromChildrenIdleState_loop_L7(in_i_28: int, in_childPowerState: int, in_thisFuncPdoExt_4: int, in_devExt_18: int, in_Tmp_1900: int, in_Tmp_1901: int, in_powerState_11: int, in_Tmp_1902: int, in_Tmp_1904: int, in_devObj_19: int, in_Tmp_1905: int, in_parentFdoExt_128: int) returns (out_i_28: int, out_childPowerState: int, out_thisFuncPdoExt_4: int, out_devExt_18: int, out_Tmp_1900: int, out_Tmp_1901: int, out_powerState_11: int, out_Tmp_1902: int, out_Tmp_1904: int, out_devObj_19: int, out_Tmp_1905: int)
{
  var vslice_dummy_var_1065: int;
  var vslice_dummy_var_1066: int;

  entry:
    out_i_28, out_childPowerState, out_thisFuncPdoExt_4, out_devExt_18, out_Tmp_1900, out_Tmp_1901, out_powerState_11, out_Tmp_1902, out_Tmp_1904, out_devObj_19, out_Tmp_1905 := in_i_28, in_childPowerState, in_thisFuncPdoExt_4, in_devExt_18, in_Tmp_1900, in_Tmp_1901, in_powerState_11, in_Tmp_1902, in_Tmp_1904, in_devObj_19, in_Tmp_1905;
    goto L7, exit;

  exit:
    return;

  L7:
    assume {:nonnull} in_parentFdoExt_128 != 0;
    assume in_parentFdoExt_128 > 0;
    havoc out_Tmp_1904;
    assume {:nonnull} out_Tmp_1904 != 0;
    assume out_Tmp_1904 > 0;
    goto anon8_Else;

  anon8_Else:
    out_Tmp_1905 := out_i_28;
    assume {:nonnull} in_parentFdoExt_128 != 0;
    assume in_parentFdoExt_128 > 0;
    havoc out_Tmp_1900;
    assume {:nonnull} out_Tmp_1900 != 0;
    assume out_Tmp_1900 > 0;
    havoc out_Tmp_1902;
    assume {:nonnull} out_Tmp_1902 != 0;
    assume out_Tmp_1902 > 0;
    havoc out_devObj_19;
    assume {:nonnull} out_devObj_19 != 0;
    assume out_devObj_19 > 0;
    havoc out_devExt_18;
    assume {:nonnull} out_devExt_18 != 0;
    assume out_devExt_18 > 0;
    out_thisFuncPdoExt_4 := functionPdoExt_DEVICE_EXTENSION(out_devExt_18);
    assume {:nonnull} out_thisFuncPdoExt_4 != 0;
    assume out_thisFuncPdoExt_4 > 0;
    havoc out_childPowerState;
    assume {:nonnull} out_thisFuncPdoExt_4 != 0;
    assume out_thisFuncPdoExt_4 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    havoc out_Tmp_1901;
    assume {:nonnull} in_parentFdoExt_128 != 0;
    assume in_parentFdoExt_128 > 0;
    havoc vslice_dummy_var_1065;
    havoc vslice_dummy_var_1066;
    call {:si_unique_call 3348} WPP_RECORDER_SF_q(vslice_dummy_var_1065, 4, 7, 68, out_Tmp_1901, vslice_dummy_var_1066);
    out_childPowerState := 3;
    goto L18;

  L18:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} out_powerState_11 > out_childPowerState;
    out_powerState_11 := out_childPowerState;
    goto L29;

  L29:
    out_i_28 := out_i_28 + 1;
    goto L29_dummy;

  L29_dummy:
    call {:si_unique_call 3349} {:si_old_unique_call 1} out_i_28, out_childPowerState, out_thisFuncPdoExt_4, out_devExt_18, out_Tmp_1900, out_Tmp_1901, out_powerState_11, out_Tmp_1902, out_Tmp_1904, out_devObj_19, out_Tmp_1905 := DeriveParentIdlePowerStateFromChildrenIdleState_loop_L7(out_i_28, out_childPowerState, out_thisFuncPdoExt_4, out_devExt_18, out_Tmp_1900, out_Tmp_1901, out_powerState_11, out_Tmp_1902, out_Tmp_1904, out_devObj_19, out_Tmp_1905, in_parentFdoExt_128);
    return;

  anon7_Then:
    assume {:partition} out_childPowerState >= out_powerState_11;
    goto L29;

  anon9_Then:
    goto L18;
}



procedure {:LoopProcedure} DeriveParentIdlePowerStateFromChildrenIdleState_loop_L7(in_i_28: int, in_childPowerState: int, in_thisFuncPdoExt_4: int, in_devExt_18: int, in_Tmp_1900: int, in_Tmp_1901: int, in_powerState_11: int, in_Tmp_1902: int, in_Tmp_1904: int, in_devObj_19: int, in_Tmp_1905: int, in_parentFdoExt_128: int) returns (out_i_28: int, out_childPowerState: int, out_thisFuncPdoExt_4: int, out_devExt_18: int, out_Tmp_1900: int, out_Tmp_1901: int, out_powerState_11: int, out_Tmp_1902: int, out_Tmp_1904: int, out_devObj_19: int, out_Tmp_1905: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CompleteAllFunctionIdleIrps_loop_L25(in_sdv_642: int, in_listEntry_5: int, in_irpCompletionList_1: int, in_Tmp_1977: int, in_sdv_645: int, in_irp_67: int, in_parentFdoExt_136: int, in_status_94: int, in_vslice_dummy_var_290: int) returns (out_sdv_642: int, out_listEntry_5: int, out_Tmp_1977: int, out_sdv_645: int, out_irp_67: int, out_vslice_dummy_var_290: int)
{
  var vslice_dummy_var_1067: int;

  entry:
    out_sdv_642, out_listEntry_5, out_Tmp_1977, out_sdv_645, out_irp_67, out_vslice_dummy_var_290 := in_sdv_642, in_listEntry_5, in_Tmp_1977, in_sdv_645, in_irp_67, in_vslice_dummy_var_290;
    goto L25, exit;

  exit:
    return;

  L25:
    call {:si_unique_call 3350} out_sdv_642 := sdv_IsListEmpty(0);
    goto anon8_Else;

  anon8_Else:
    assume {:partition} out_sdv_642 == 0;
    call {:si_unique_call 3351} out_listEntry_5 := RemoveHeadList(in_irpCompletionList_1);
    call {:si_unique_call 3352} out_sdv_645 := sdv_containing_record(out_listEntry_5, 88);
    out_irp_67 := out_sdv_645;
    assume {:nonnull} out_irp_67 != 0;
    assume out_irp_67 > 0;
    havoc out_Tmp_1977;
    assume {:nonnull} in_parentFdoExt_136 != 0;
    assume in_parentFdoExt_136 > 0;
    havoc vslice_dummy_var_1067;
    call {:si_unique_call 3353} WPP_RECORDER_SF_qd(vslice_dummy_var_1067, 4, 7, 35, out_Tmp_1977, out_irp_67, in_status_94);
    call {:si_unique_call 3354} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3355} UsbcReleaseRemoveLock(in_parentFdoExt_136, out_irp_67);
    assume {:nonnull} in_parentFdoExt_136 != 0;
    assume in_parentFdoExt_136 > 0;
    call {:si_unique_call 3356} out_vslice_dummy_var_290 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(in_parentFdoExt_136), out_irp_67);
    goto anon8_Else_dummy;

  anon8_Else_dummy:
    call {:si_unique_call 3357} {:si_old_unique_call 1} out_sdv_642, out_listEntry_5, out_Tmp_1977, out_sdv_645, out_irp_67, out_vslice_dummy_var_290 := CompleteAllFunctionIdleIrps_loop_L25(out_sdv_642, out_listEntry_5, in_irpCompletionList_1, out_Tmp_1977, out_sdv_645, out_irp_67, in_parentFdoExt_136, in_status_94, out_vslice_dummy_var_290);
    return;
}



procedure {:LoopProcedure} CompleteAllFunctionIdleIrps_loop_L25(in_sdv_642: int, in_listEntry_5: int, in_irpCompletionList_1: int, in_Tmp_1977: int, in_sdv_645: int, in_irp_67: int, in_parentFdoExt_136: int, in_status_94: int, in_vslice_dummy_var_290: int) returns (out_sdv_642: int, out_listEntry_5: int, out_Tmp_1977: int, out_sdv_645: int, out_irp_67: int, out_vslice_dummy_var_290: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_642 == 1 || out_sdv_642 == 0 || out_sdv_642 == in_sdv_642;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CompleteAllFunctionIdleIrps_loop_L24(in_i_30: int, in_Tmp_1975: int, in_devExt_19: int, in_irpCompletionList_1: int, in_Tmp_1978: int, in_irpToComplete_3: int, in_devObj_20: int, in_Tmp_1981: int, in_Tmp_1982: int, in_parentFdoExt_136: int, in_vslice_dummy_var_289: int) returns (out_i_30: int, out_Tmp_1975: int, out_devExt_19: int, out_Tmp_1978: int, out_irpToComplete_3: int, out_devObj_20: int, out_Tmp_1981: int, out_Tmp_1982: int, out_vslice_dummy_var_289: int)
{

  entry:
    out_i_30, out_Tmp_1975, out_devExt_19, out_Tmp_1978, out_irpToComplete_3, out_devObj_20, out_Tmp_1981, out_Tmp_1982, out_vslice_dummy_var_289 := in_i_30, in_Tmp_1975, in_devExt_19, in_Tmp_1978, in_irpToComplete_3, in_devObj_20, in_Tmp_1981, in_Tmp_1982, in_vslice_dummy_var_289;
    goto L24, exit;

  exit:
    return;

  L24:
    assume {:nonnull} in_parentFdoExt_136 != 0;
    assume in_parentFdoExt_136 > 0;
    havoc out_Tmp_1978;
    assume {:nonnull} out_Tmp_1978 != 0;
    assume out_Tmp_1978 > 0;
    goto anon9_Else;

  anon9_Else:
    out_Tmp_1981 := out_i_30;
    assume {:nonnull} in_parentFdoExt_136 != 0;
    assume in_parentFdoExt_136 > 0;
    havoc out_Tmp_1975;
    assume {:nonnull} out_Tmp_1975 != 0;
    assume out_Tmp_1975 > 0;
    havoc out_Tmp_1982;
    assume {:nonnull} out_Tmp_1982 != 0;
    assume out_Tmp_1982 > 0;
    havoc out_devObj_20;
    assume {:nonnull} out_devObj_20 != 0;
    assume out_devObj_20 > 0;
    havoc out_devExt_19;
    assume {:nonnull} out_devExt_19 != 0;
    assume out_devExt_19 > 0;
    call {:si_unique_call 3359} out_irpToComplete_3 := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} out_irpToComplete_3 != 0;
    assume {:nonnull} out_irpToComplete_3 != 0;
    assume out_irpToComplete_3 > 0;
    call {:si_unique_call 3358} out_vslice_dummy_var_289 := sdv_InsertTailList(in_irpCompletionList_1, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irpToComplete_3))));
    goto L38;

  L38:
    out_i_30 := out_i_30 + 1;
    goto L38_dummy;

  L38_dummy:
    call {:si_unique_call 3360} {:si_old_unique_call 1} out_i_30, out_Tmp_1975, out_devExt_19, out_Tmp_1978, out_irpToComplete_3, out_devObj_20, out_Tmp_1981, out_Tmp_1982, out_vslice_dummy_var_289 := CompleteAllFunctionIdleIrps_loop_L24(out_i_30, out_Tmp_1975, out_devExt_19, in_irpCompletionList_1, out_Tmp_1978, out_irpToComplete_3, out_devObj_20, out_Tmp_1981, out_Tmp_1982, in_parentFdoExt_136, out_vslice_dummy_var_289);
    return;

  anon7_Then:
    assume {:partition} out_irpToComplete_3 == 0;
    goto L38;
}



procedure {:LoopProcedure} CompleteAllFunctionIdleIrps_loop_L24(in_i_30: int, in_Tmp_1975: int, in_devExt_19: int, in_irpCompletionList_1: int, in_Tmp_1978: int, in_irpToComplete_3: int, in_devObj_20: int, in_Tmp_1981: int, in_Tmp_1982: int, in_parentFdoExt_136: int, in_vslice_dummy_var_289: int) returns (out_i_30: int, out_Tmp_1975: int, out_devExt_19: int, out_Tmp_1978: int, out_irpToComplete_3: int, out_devObj_20: int, out_Tmp_1981: int, out_Tmp_1982: int, out_vslice_dummy_var_289: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CancelFdoIdleIrp_loop_L9(in_Tmp_2036: int, in_done_1: int, in_Tmp_2037: int, in_oldIrql_28: int, in_Tmp_2040: int, in_parentFdoExt_145: int) returns (out_Tmp_2036: int, out_done_1: int, out_Tmp_2037: int, out_oldIrql_28: int, out_Tmp_2040: int)
{
  var vslice_dummy_var_1068: int;
  var vslice_dummy_var_1069: int;
  var vslice_dummy_var_1070: int;

  entry:
    out_Tmp_2036, out_done_1, out_Tmp_2037, out_oldIrql_28, out_Tmp_2040 := in_Tmp_2036, in_done_1, in_Tmp_2037, in_oldIrql_28, in_Tmp_2040;
    goto L9, exit;

  exit:
    return;

  L9:
    out_done_1 := 1;
    call {:si_unique_call 3361} out_Tmp_2036 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_2036 != 0;
    assume out_Tmp_2036 > 0;
    Mem_T.VOID[out_Tmp_2036] := out_oldIrql_28;
    call {:si_unique_call 3362} sdv_KeAcquireSpinLock(0, out_Tmp_2036);
    goto anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} out_Tmp_2036 != 0;
    assume out_Tmp_2036 > 0;
    out_oldIrql_28 := Mem_T.VOID[out_Tmp_2036];
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    goto anon37_Then;

  anon37_Then:
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    goto anon38_Else;

  anon38_Else:
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    goto anon46_Else;

  anon46_Else:
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    goto anon45_Else;

  anon45_Else:
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    havoc out_Tmp_2037;
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    havoc vslice_dummy_var_1068;
    havoc vslice_dummy_var_1069;
    call {:si_unique_call 3363} WPP_RECORDER_SF_L(vslice_dummy_var_1068, 2, 8, 48, out_Tmp_2037, vslice_dummy_var_1069);
    call {:si_unique_call 3364} sdv_KeReleaseSpinLock(0, out_oldIrql_28);
    goto L73;

  L73:
    goto anon42_Then;

  anon42_Then:
    assume {:partition} out_done_1 == 0;
    goto anon42_Then_dummy;

  anon42_Then_dummy:
    call {:si_unique_call 3371} {:si_old_unique_call 1} out_Tmp_2036, out_done_1, out_Tmp_2037, out_oldIrql_28, out_Tmp_2040 := CancelFdoIdleIrp_loop_L9(out_Tmp_2036, out_done_1, out_Tmp_2037, out_oldIrql_28, out_Tmp_2040, in_parentFdoExt_145);
    return;

  anon43_Then:
    call {:si_unique_call 3365} sdv_KeReleaseSpinLock(0, out_oldIrql_28);
    out_Tmp_2040 := strConst__li2bpl44;
    assume {:nonnull} in_parentFdoExt_145 != 0;
    assume in_parentFdoExt_145 > 0;
    havoc vslice_dummy_var_1070;
    call {:si_unique_call 3366} WaitForSignal(idleCallbackBusyEvent_PARENT_FDO_EXTENSION(in_parentFdoExt_145), out_Tmp_2040, vslice_dummy_var_1070);
    out_done_1 := 0;
    goto L73;

  anon44_Then:
    call {:si_unique_call 3370} ChangeIdleState(in_parentFdoExt_145, 2, 0);
    goto anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3367} sdv_KeReleaseSpinLock(0, out_oldIrql_28);
    goto L73;

  anon47_Then:
    call {:si_unique_call 3369} ChangeIdleState(in_parentFdoExt_145, 2, 0);
    goto anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3368} sdv_KeReleaseSpinLock(0, out_oldIrql_28);
    goto L73;
}



procedure {:LoopProcedure} CancelFdoIdleIrp_loop_L9(in_Tmp_2036: int, in_done_1: int, in_Tmp_2037: int, in_oldIrql_28: int, in_Tmp_2040: int, in_parentFdoExt_145: int) returns (out_Tmp_2036: int, out_done_1: int, out_Tmp_2037: int, out_oldIrql_28: int, out_Tmp_2040: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_done_1 == 1 || out_done_1 == 0 || out_done_1 == in_done_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation RtlStringCopyWorkerW_sdv_static_function_1_loop_L7(in_cchNewDestLength_2: int, in_pszDest_8: int, in_cchDest_8: int, in_pszSrc_2: int, in_cchToCopy: int) returns (out_cchNewDestLength_2: int, out_cchDest_8: int, out_cchToCopy: int)
{

  entry:
    out_cchNewDestLength_2, out_cchDest_8, out_cchToCopy := in_cchNewDestLength_2, in_cchDest_8, in_cchToCopy;
    goto L7, exit;

  exit:
    return;

  L7:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} out_cchDest_8 != 0;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_cchToCopy != 0;
    assume {:nonnull} in_pszSrc_2 != 0;
    assume in_pszSrc_2 > 0;
    goto anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.VOID[in_pszSrc_2] != 0;
    assume {:nonnull} in_pszDest_8 != 0;
    assume in_pszDest_8 > 0;
    assume {:nonnull} in_pszSrc_2 != 0;
    assume in_pszSrc_2 > 0;
    Mem_T.VOID[in_pszDest_8] := Mem_T.VOID[in_pszSrc_2];
    out_cchDest_8 := out_cchDest_8 - 1;
    out_cchToCopy := out_cchToCopy - 1;
    out_cchNewDestLength_2 := out_cchNewDestLength_2 + 1;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    call {:si_unique_call 3372} {:si_old_unique_call 1} out_cchNewDestLength_2, out_cchDest_8, out_cchToCopy := RtlStringCopyWorkerW_sdv_static_function_1_loop_L7(out_cchNewDestLength_2, in_pszDest_8, out_cchDest_8, in_pszSrc_2, out_cchToCopy);
    return;
}



procedure {:LoopProcedure} RtlStringCopyWorkerW_sdv_static_function_1_loop_L7(in_cchNewDestLength_2: int, in_pszDest_8: int, in_cchDest_8: int, in_pszSrc_2: int, in_cchToCopy: int) returns (out_cchNewDestLength_2: int, out_cchDest_8: int, out_cchToCopy: int);
  modifies Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation RtlStringLengthWorkerW_sdv_static_function_1_loop_L7(in_psz_1: int, in_cchMax_7: int) returns (out_cchMax_7: int)
{

  entry:
    out_cchMax_7 := in_cchMax_7;
    goto L7, exit;

  exit:
    return;

  L7:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} out_cchMax_7 != 0;
    assume {:nonnull} in_psz_1 != 0;
    assume in_psz_1 > 0;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.VOID[in_psz_1] != 0;
    out_cchMax_7 := out_cchMax_7 - 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    havoc out_cchMax_7;
    return;
}



procedure {:LoopProcedure} RtlStringLengthWorkerW_sdv_static_function_1_loop_L7(in_psz_1: int, in_cchMax_7: int) returns (out_cchMax_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CheckParentIdleWorker#0_loop_L15(in_i_29: int, in_thisFuncPdoExt_5: int, in_Tmp_1922: int, in_Tmp_1924: int, in_Tmp_1925: int, in_parentFdoExt_130: int, in_Tmp_1928: int, in_functionDevObj: int, in_functionDevExt: int) returns (out_i_29: int, out_thisFuncPdoExt_5: int, out_Tmp_1922: int, out_Tmp_1924: int, out_Tmp_1925: int, out_Tmp_1928: int, out_functionDevObj: int, out_functionDevExt: int)
{

  entry:
    out_i_29, out_thisFuncPdoExt_5, out_Tmp_1922, out_Tmp_1924, out_Tmp_1925, out_Tmp_1928, out_functionDevObj, out_functionDevExt := in_i_29, in_thisFuncPdoExt_5, in_Tmp_1922, in_Tmp_1924, in_Tmp_1925, in_Tmp_1928, in_functionDevObj, in_functionDevExt;
    goto L15, exit;

  exit:
    return;

  L15:
    assume {:nonnull} in_parentFdoExt_130 != 0;
    assume in_parentFdoExt_130 > 0;
    havoc out_Tmp_1925;
    assume {:nonnull} out_Tmp_1925 != 0;
    assume out_Tmp_1925 > 0;
    goto anon55_Else;

  anon55_Else:
    out_Tmp_1928 := out_i_29;
    assume {:nonnull} in_parentFdoExt_130 != 0;
    assume in_parentFdoExt_130 > 0;
    havoc out_Tmp_1922;
    assume {:nonnull} out_Tmp_1922 != 0;
    assume out_Tmp_1922 > 0;
    havoc out_Tmp_1924;
    assume {:nonnull} out_Tmp_1924 != 0;
    assume out_Tmp_1924 > 0;
    havoc out_functionDevObj;
    assume {:nonnull} out_functionDevObj != 0;
    assume out_functionDevObj > 0;
    havoc out_functionDevExt;
    assume {:nonnull} out_functionDevExt != 0;
    assume out_functionDevExt > 0;
    out_thisFuncPdoExt_5 := functionPdoExt_DEVICE_EXTENSION(out_functionDevExt);
    assume {:nonnull} out_thisFuncPdoExt_5 != 0;
    assume out_thisFuncPdoExt_5 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L25;

  L25:
    out_i_29 := out_i_29 + 1;
    goto L25_dummy;

  L25_dummy:
    havoc out_i_29;
    return;

  anon56_Then:
    assume {:nonnull} out_thisFuncPdoExt_5 != 0;
    assume out_thisFuncPdoExt_5 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} out_thisFuncPdoExt_5 != 0;
    assume out_thisFuncPdoExt_5 > 0;
    goto anon47_Then;

  anon47_Then:
    goto L25;

  anon46_Then:
    goto L25;
}



procedure {:LoopProcedure} CheckParentIdleWorker#0_loop_L15(in_i_29: int, in_thisFuncPdoExt_5: int, in_Tmp_1922: int, in_Tmp_1924: int, in_Tmp_1925: int, in_parentFdoExt_130: int, in_Tmp_1928: int, in_functionDevObj: int, in_functionDevExt: int) returns (out_i_29: int, out_thisFuncPdoExt_5: int, out_Tmp_1922: int, out_Tmp_1924: int, out_Tmp_1925: int, out_Tmp_1928: int, out_functionDevObj: int, out_functionDevExt: int);
  free ensures {:va_keep} out_Tmp_1928 == in_i_29 || out_Tmp_1928 == in_Tmp_1928;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CheckParentIdleWorker#1_loop_L15(in_i_29: int, in_thisFuncPdoExt_5: int, in_Tmp_1922: int, in_Tmp_1924: int, in_Tmp_1925: int, in_parentFdoExt_130: int, in_Tmp_1928: int, in_functionDevObj: int, in_functionDevExt: int) returns (out_i_29: int, out_thisFuncPdoExt_5: int, out_Tmp_1922: int, out_Tmp_1924: int, out_Tmp_1925: int, out_Tmp_1928: int, out_functionDevObj: int, out_functionDevExt: int)
{

  entry:
    out_i_29, out_thisFuncPdoExt_5, out_Tmp_1922, out_Tmp_1924, out_Tmp_1925, out_Tmp_1928, out_functionDevObj, out_functionDevExt := in_i_29, in_thisFuncPdoExt_5, in_Tmp_1922, in_Tmp_1924, in_Tmp_1925, in_Tmp_1928, in_functionDevObj, in_functionDevExt;
    goto L15, exit;

  exit:
    return;

  L15:
    assume {:nonnull} in_parentFdoExt_130 != 0;
    assume in_parentFdoExt_130 > 0;
    havoc out_Tmp_1925;
    assume {:nonnull} out_Tmp_1925 != 0;
    assume out_Tmp_1925 > 0;
    goto anon55_Else;

  anon55_Else:
    out_Tmp_1928 := out_i_29;
    assume {:nonnull} in_parentFdoExt_130 != 0;
    assume in_parentFdoExt_130 > 0;
    havoc out_Tmp_1922;
    assume {:nonnull} out_Tmp_1922 != 0;
    assume out_Tmp_1922 > 0;
    havoc out_Tmp_1924;
    assume {:nonnull} out_Tmp_1924 != 0;
    assume out_Tmp_1924 > 0;
    havoc out_functionDevObj;
    assume {:nonnull} out_functionDevObj != 0;
    assume out_functionDevObj > 0;
    havoc out_functionDevExt;
    assume {:nonnull} out_functionDevExt != 0;
    assume out_functionDevExt > 0;
    out_thisFuncPdoExt_5 := functionPdoExt_DEVICE_EXTENSION(out_functionDevExt);
    assume {:nonnull} out_thisFuncPdoExt_5 != 0;
    assume out_thisFuncPdoExt_5 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L25;

  L25:
    out_i_29 := out_i_29 + 1;
    goto L25_dummy;

  L25_dummy:
    havoc out_i_29;
    return;

  anon56_Then:
    assume {:nonnull} out_thisFuncPdoExt_5 != 0;
    assume out_thisFuncPdoExt_5 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} out_thisFuncPdoExt_5 != 0;
    assume out_thisFuncPdoExt_5 > 0;
    goto anon47_Then;

  anon47_Then:
    goto L25;

  anon46_Then:
    goto L25;
}



procedure {:LoopProcedure} CheckParentIdleWorker#1_loop_L15(in_i_29: int, in_thisFuncPdoExt_5: int, in_Tmp_1922: int, in_Tmp_1924: int, in_Tmp_1925: int, in_parentFdoExt_130: int, in_Tmp_1928: int, in_functionDevObj: int, in_functionDevExt: int) returns (out_i_29: int, out_thisFuncPdoExt_5: int, out_Tmp_1922: int, out_Tmp_1924: int, out_Tmp_1925: int, out_Tmp_1928: int, out_functionDevObj: int, out_functionDevExt: int);
  free ensures {:va_keep} out_Tmp_1928 == in_i_29 || out_Tmp_1928 == in_Tmp_1928;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CompleteAllPdoWaitWakeIrps#0_loop_L67(in_thisFuncPdoExt_1: int, in_irpCompletionList: int, in_listEntry_4: int, in_sdv_461: int, in_irpToComplete: int, in_sdv_465: int, in_Tmp_1393: int, in_parentFdoExt_96: int, in_status_73: int, in_vslice_dummy_var_392: int) returns (out_thisFuncPdoExt_1: int, out_listEntry_4: int, out_sdv_461: int, out_irpToComplete: int, out_sdv_465: int, out_Tmp_1393: int, out_vslice_dummy_var_392: int)
{
  var vslice_dummy_var_1071: int;
  var vslice_dummy_var_1072: int;

  entry:
    out_thisFuncPdoExt_1, out_listEntry_4, out_sdv_461, out_irpToComplete, out_sdv_465, out_Tmp_1393, out_vslice_dummy_var_392 := in_thisFuncPdoExt_1, in_listEntry_4, in_sdv_461, in_irpToComplete, in_sdv_465, in_Tmp_1393, in_vslice_dummy_var_392;
    goto L67, exit;

  exit:
    return;

  L67:
    call {:si_unique_call 3373} out_sdv_465 := sdv_IsListEmpty(0);
    goto anon32_Then;

  anon32_Then:
    assume {:partition} out_sdv_465 == 0;
    call {:si_unique_call 3378} out_listEntry_4 := RemoveHeadList(in_irpCompletionList);
    call {:si_unique_call 3379} out_sdv_461 := sdv_containing_record(out_listEntry_4, 88);
    out_irpToComplete := out_sdv_461;
    assume {:nonnull} out_irpToComplete != 0;
    assume out_irpToComplete > 0;
    call {:si_unique_call 3380} out_thisFuncPdoExt_1 := GET_FUNCTION_PDO_EXT_FROM_IRP(out_irpToComplete);
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    havoc out_Tmp_1393;
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    assume {:nonnull} out_thisFuncPdoExt_1 != 0;
    assume out_thisFuncPdoExt_1 > 0;
    havoc vslice_dummy_var_1071;
    havoc vslice_dummy_var_1072;
    call {:si_unique_call 3374} WPP_RECORDER_SF_qqd(vslice_dummy_var_1071, 4, 3, 23, out_Tmp_1393, out_irpToComplete, vslice_dummy_var_1072, in_status_73);
    call {:si_unique_call 3375} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3376} UsbcReleaseRemoveLock(in_parentFdoExt_96, out_irpToComplete);
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    call {:si_unique_call 3377} out_vslice_dummy_var_392 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(in_parentFdoExt_96), out_irpToComplete);
    goto anon37_Else_dummy;

  anon37_Else_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 3382} {:si_old_unique_call 1} out_thisFuncPdoExt_1, out_listEntry_4, out_sdv_461, out_irpToComplete, out_sdv_465, out_Tmp_1393, out_vslice_dummy_var_392 := CompleteAllPdoWaitWakeIrps#0_loop_L67(out_thisFuncPdoExt_1, in_irpCompletionList, out_listEntry_4, out_sdv_461, out_irpToComplete, out_sdv_465, out_Tmp_1393, in_parentFdoExt_96, in_status_73, out_vslice_dummy_var_392);
    return;

  anon37_Then:
    call {:si_unique_call 3381} CancelRemoteWakeNotificationIrp(out_thisFuncPdoExt_1, out_irpToComplete);
    goto anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    goto L_BAF_2;
}



procedure {:LoopProcedure} CompleteAllPdoWaitWakeIrps#0_loop_L67(in_thisFuncPdoExt_1: int, in_irpCompletionList: int, in_listEntry_4: int, in_sdv_461: int, in_irpToComplete: int, in_sdv_465: int, in_Tmp_1393: int, in_parentFdoExt_96: int, in_status_73: int, in_vslice_dummy_var_392: int) returns (out_thisFuncPdoExt_1: int, out_listEntry_4: int, out_sdv_461: int, out_irpToComplete: int, out_sdv_465: int, out_Tmp_1393: int, out_vslice_dummy_var_392: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_465 == 1 || out_sdv_465 == 0 || out_sdv_465 == in_sdv_465;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CompleteAllPdoWaitWakeIrps#0_loop_L23(in_i_21: int, in_thisFuncPdoExt_1: int, in_devExt_12: int, in_irpCompletionList: int, in_Tmp_1388: int, in_irpToComplete: int, in_Tmp_1389: int, in_Tmp_1390: int, in_Tmp_1391: int, in_devObj_11: int, in_parentFdoExt_96: int, in_vslice_dummy_var_389: int) returns (out_i_21: int, out_thisFuncPdoExt_1: int, out_devExt_12: int, out_Tmp_1388: int, out_irpToComplete: int, out_Tmp_1389: int, out_Tmp_1390: int, out_Tmp_1391: int, out_devObj_11: int, out_vslice_dummy_var_389: int)
{

  entry:
    out_i_21, out_thisFuncPdoExt_1, out_devExt_12, out_Tmp_1388, out_irpToComplete, out_Tmp_1389, out_Tmp_1390, out_Tmp_1391, out_devObj_11, out_vslice_dummy_var_389 := in_i_21, in_thisFuncPdoExt_1, in_devExt_12, in_Tmp_1388, in_irpToComplete, in_Tmp_1389, in_Tmp_1390, in_Tmp_1391, in_devObj_11, in_vslice_dummy_var_389;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    havoc out_Tmp_1388;
    assume {:nonnull} out_Tmp_1388 != 0;
    assume out_Tmp_1388 > 0;
    goto anon38_Else;

  anon38_Else:
    out_Tmp_1390 := out_i_21;
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    havoc out_Tmp_1389;
    assume {:nonnull} out_Tmp_1389 != 0;
    assume out_Tmp_1389 > 0;
    havoc out_Tmp_1391;
    assume {:nonnull} out_Tmp_1391 != 0;
    assume out_Tmp_1391 > 0;
    havoc out_devObj_11;
    assume {:nonnull} out_devObj_11 != 0;
    assume out_devObj_11 > 0;
    havoc out_devExt_12;
    assume {:nonnull} out_devExt_12 != 0;
    assume out_devExt_12 > 0;
    out_thisFuncPdoExt_1 := functionPdoExt_DEVICE_EXTENSION(out_devExt_12);
    call {:si_unique_call 3385} out_irpToComplete := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_irpToComplete != 0;
    call {:si_unique_call 3383} SET_FUNCTION_PDO_EXT_IN_IRP(out_irpToComplete, out_thisFuncPdoExt_1);
    assume {:nonnull} out_irpToComplete != 0;
    assume out_irpToComplete > 0;
    call {:si_unique_call 3384} out_vslice_dummy_var_389 := sdv_InsertTailList(in_irpCompletionList, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irpToComplete))));
    goto L35;

  L35:
    out_i_21 := out_i_21 + 1;
    goto L35_dummy;

  L35_dummy:
    call {:si_unique_call 3386} {:si_old_unique_call 1} out_i_21, out_thisFuncPdoExt_1, out_devExt_12, out_Tmp_1388, out_irpToComplete, out_Tmp_1389, out_Tmp_1390, out_Tmp_1391, out_devObj_11, out_vslice_dummy_var_389 := CompleteAllPdoWaitWakeIrps#0_loop_L23(out_i_21, out_thisFuncPdoExt_1, out_devExt_12, in_irpCompletionList, out_Tmp_1388, out_irpToComplete, out_Tmp_1389, out_Tmp_1390, out_Tmp_1391, out_devObj_11, in_parentFdoExt_96, out_vslice_dummy_var_389);
    return;

  anon31_Then:
    assume {:partition} out_irpToComplete == 0;
    goto L35;
}



procedure {:LoopProcedure} CompleteAllPdoWaitWakeIrps#0_loop_L23(in_i_21: int, in_thisFuncPdoExt_1: int, in_devExt_12: int, in_irpCompletionList: int, in_Tmp_1388: int, in_irpToComplete: int, in_Tmp_1389: int, in_Tmp_1390: int, in_Tmp_1391: int, in_devObj_11: int, in_parentFdoExt_96: int, in_vslice_dummy_var_389: int) returns (out_i_21: int, out_thisFuncPdoExt_1: int, out_devExt_12: int, out_Tmp_1388: int, out_irpToComplete: int, out_Tmp_1389: int, out_Tmp_1390: int, out_Tmp_1391: int, out_devObj_11: int, out_vslice_dummy_var_389: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CompleteAllPdoWaitWakeIrps#1_loop_L67(in_thisFuncPdoExt_1: int, in_irpCompletionList: int, in_listEntry_4: int, in_sdv_461: int, in_irpToComplete: int, in_sdv_465: int, in_Tmp_1393: int, in_parentFdoExt_96: int, in_status_73: int, in_vslice_dummy_var_397: int) returns (out_thisFuncPdoExt_1: int, out_listEntry_4: int, out_sdv_461: int, out_irpToComplete: int, out_sdv_465: int, out_Tmp_1393: int, out_vslice_dummy_var_397: int)
{
  var vslice_dummy_var_1073: int;
  var vslice_dummy_var_1074: int;

  entry:
    out_thisFuncPdoExt_1, out_listEntry_4, out_sdv_461, out_irpToComplete, out_sdv_465, out_Tmp_1393, out_vslice_dummy_var_397 := in_thisFuncPdoExt_1, in_listEntry_4, in_sdv_461, in_irpToComplete, in_sdv_465, in_Tmp_1393, in_vslice_dummy_var_397;
    goto L67, exit;

  exit:
    return;

  L67:
    call {:si_unique_call 3387} out_sdv_465 := sdv_IsListEmpty(0);
    goto anon32_Then;

  anon32_Then:
    assume {:partition} out_sdv_465 == 0;
    call {:si_unique_call 3392} out_listEntry_4 := RemoveHeadList(in_irpCompletionList);
    call {:si_unique_call 3393} out_sdv_461 := sdv_containing_record(out_listEntry_4, 88);
    out_irpToComplete := out_sdv_461;
    assume {:nonnull} out_irpToComplete != 0;
    assume out_irpToComplete > 0;
    call {:si_unique_call 3394} out_thisFuncPdoExt_1 := GET_FUNCTION_PDO_EXT_FROM_IRP(out_irpToComplete);
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    havoc out_Tmp_1393;
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    assume {:nonnull} out_thisFuncPdoExt_1 != 0;
    assume out_thisFuncPdoExt_1 > 0;
    havoc vslice_dummy_var_1073;
    havoc vslice_dummy_var_1074;
    call {:si_unique_call 3388} WPP_RECORDER_SF_qqd(vslice_dummy_var_1073, 4, 3, 23, out_Tmp_1393, out_irpToComplete, vslice_dummy_var_1074, in_status_73);
    call {:si_unique_call 3389} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3390} UsbcReleaseRemoveLock(in_parentFdoExt_96, out_irpToComplete);
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    call {:si_unique_call 3391} out_vslice_dummy_var_397 := sdv_IoReleaseRemoveLock(removeLock_PARENT_FDO_EXTENSION(in_parentFdoExt_96), out_irpToComplete);
    goto anon37_Else_dummy;

  anon37_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 3396} {:si_old_unique_call 1} out_thisFuncPdoExt_1, out_listEntry_4, out_sdv_461, out_irpToComplete, out_sdv_465, out_Tmp_1393, out_vslice_dummy_var_397 := CompleteAllPdoWaitWakeIrps#1_loop_L67(out_thisFuncPdoExt_1, in_irpCompletionList, out_listEntry_4, out_sdv_461, out_irpToComplete, out_sdv_465, out_Tmp_1393, in_parentFdoExt_96, in_status_73, out_vslice_dummy_var_397);
    return;

  anon37_Then:
    call {:si_unique_call 3395} CancelRemoteWakeNotificationIrp(out_thisFuncPdoExt_1, out_irpToComplete);
    goto anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    goto L_BAF_3;
}



procedure {:LoopProcedure} CompleteAllPdoWaitWakeIrps#1_loop_L67(in_thisFuncPdoExt_1: int, in_irpCompletionList: int, in_listEntry_4: int, in_sdv_461: int, in_irpToComplete: int, in_sdv_465: int, in_Tmp_1393: int, in_parentFdoExt_96: int, in_status_73: int, in_vslice_dummy_var_397: int) returns (out_thisFuncPdoExt_1: int, out_listEntry_4: int, out_sdv_461: int, out_irpToComplete: int, out_sdv_465: int, out_Tmp_1393: int, out_vslice_dummy_var_397: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_465 == 1 || out_sdv_465 == 0 || out_sdv_465 == in_sdv_465;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CompleteAllPdoWaitWakeIrps#1_loop_L23(in_i_21: int, in_thisFuncPdoExt_1: int, in_devExt_12: int, in_irpCompletionList: int, in_Tmp_1388: int, in_irpToComplete: int, in_Tmp_1389: int, in_Tmp_1390: int, in_Tmp_1391: int, in_devObj_11: int, in_parentFdoExt_96: int, in_vslice_dummy_var_394: int) returns (out_i_21: int, out_thisFuncPdoExt_1: int, out_devExt_12: int, out_Tmp_1388: int, out_irpToComplete: int, out_Tmp_1389: int, out_Tmp_1390: int, out_Tmp_1391: int, out_devObj_11: int, out_vslice_dummy_var_394: int)
{

  entry:
    out_i_21, out_thisFuncPdoExt_1, out_devExt_12, out_Tmp_1388, out_irpToComplete, out_Tmp_1389, out_Tmp_1390, out_Tmp_1391, out_devObj_11, out_vslice_dummy_var_394 := in_i_21, in_thisFuncPdoExt_1, in_devExt_12, in_Tmp_1388, in_irpToComplete, in_Tmp_1389, in_Tmp_1390, in_Tmp_1391, in_devObj_11, in_vslice_dummy_var_394;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    havoc out_Tmp_1388;
    assume {:nonnull} out_Tmp_1388 != 0;
    assume out_Tmp_1388 > 0;
    goto anon38_Else;

  anon38_Else:
    out_Tmp_1390 := out_i_21;
    assume {:nonnull} in_parentFdoExt_96 != 0;
    assume in_parentFdoExt_96 > 0;
    havoc out_Tmp_1389;
    assume {:nonnull} out_Tmp_1389 != 0;
    assume out_Tmp_1389 > 0;
    havoc out_Tmp_1391;
    assume {:nonnull} out_Tmp_1391 != 0;
    assume out_Tmp_1391 > 0;
    havoc out_devObj_11;
    assume {:nonnull} out_devObj_11 != 0;
    assume out_devObj_11 > 0;
    havoc out_devExt_12;
    assume {:nonnull} out_devExt_12 != 0;
    assume out_devExt_12 > 0;
    out_thisFuncPdoExt_1 := functionPdoExt_DEVICE_EXTENSION(out_devExt_12);
    call {:si_unique_call 3399} out_irpToComplete := sdv_IoCsqRemoveNextIrp(0, 0);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_irpToComplete != 0;
    call {:si_unique_call 3397} SET_FUNCTION_PDO_EXT_IN_IRP(out_irpToComplete, out_thisFuncPdoExt_1);
    assume {:nonnull} out_irpToComplete != 0;
    assume out_irpToComplete > 0;
    call {:si_unique_call 3398} out_vslice_dummy_var_394 := sdv_InsertTailList(in_irpCompletionList, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irpToComplete))));
    goto L35;

  L35:
    out_i_21 := out_i_21 + 1;
    goto L35_dummy;

  L35_dummy:
    call {:si_unique_call 3400} {:si_old_unique_call 1} out_i_21, out_thisFuncPdoExt_1, out_devExt_12, out_Tmp_1388, out_irpToComplete, out_Tmp_1389, out_Tmp_1390, out_Tmp_1391, out_devObj_11, out_vslice_dummy_var_394 := CompleteAllPdoWaitWakeIrps#1_loop_L23(out_i_21, out_thisFuncPdoExt_1, out_devExt_12, in_irpCompletionList, out_Tmp_1388, out_irpToComplete, out_Tmp_1389, out_Tmp_1390, out_Tmp_1391, out_devObj_11, in_parentFdoExt_96, out_vslice_dummy_var_394);
    return;

  anon31_Then:
    assume {:partition} out_irpToComplete == 0;
    goto L35;
}



procedure {:LoopProcedure} CompleteAllPdoWaitWakeIrps#1_loop_L23(in_i_21: int, in_thisFuncPdoExt_1: int, in_devExt_12: int, in_irpCompletionList: int, in_Tmp_1388: int, in_irpToComplete: int, in_Tmp_1389: int, in_Tmp_1390: int, in_Tmp_1391: int, in_devObj_11: int, in_parentFdoExt_96: int, in_vslice_dummy_var_394: int) returns (out_i_21: int, out_thisFuncPdoExt_1: int, out_devExt_12: int, out_Tmp_1388: int, out_irpToComplete: int, out_Tmp_1389: int, out_Tmp_1390: int, out_Tmp_1391: int, out_devObj_11: int, out_vslice_dummy_var_394: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParentIdleNotificationCallback#0_loop_L58(in_i_27: int, in_Tmp_1801: int, in_thisFuncPdoExt_3: int, in_idleIrp: int, in_Tmp_1805: int, in_devExt_16: int, in_Tmp_1806: int, in_Tmp_1807: int, in_Tmp_1811: int, in_oldIrql_22: int, in_idleCallbackInfo: int, in_Tmp_1815: int, in_devObj_17: int, in_Tmp_1818: int, in_parentFdoExt_121: int, in_vslice_dummy_var_399: int) returns (out_i_27: int, out_Tmp_1801: int, out_thisFuncPdoExt_3: int, out_idleIrp: int, out_Tmp_1805: int, out_devExt_16: int, out_Tmp_1806: int, out_Tmp_1807: int, out_Tmp_1811: int, out_oldIrql_22: int, out_idleCallbackInfo: int, out_Tmp_1815: int, out_devObj_17: int, out_Tmp_1818: int, out_vslice_dummy_var_399: int)
{
  var vslice_dummy_var_1075: int;
  var vslice_dummy_var_1076: int;
  var vslice_dummy_var_1077: int;

  entry:
    out_i_27, out_Tmp_1801, out_thisFuncPdoExt_3, out_idleIrp, out_Tmp_1805, out_devExt_16, out_Tmp_1806, out_Tmp_1807, out_Tmp_1811, out_oldIrql_22, out_idleCallbackInfo, out_Tmp_1815, out_devObj_17, out_Tmp_1818, out_vslice_dummy_var_399 := in_i_27, in_Tmp_1801, in_thisFuncPdoExt_3, in_idleIrp, in_Tmp_1805, in_devExt_16, in_Tmp_1806, in_Tmp_1807, in_Tmp_1811, in_oldIrql_22, in_idleCallbackInfo, in_Tmp_1815, in_devObj_17, in_Tmp_1818, in_vslice_dummy_var_399;
    goto L58, exit;

  exit:
    return;

  L58:
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    havoc out_Tmp_1811;
    assume {:nonnull} out_Tmp_1811 != 0;
    assume out_Tmp_1811 > 0;
    goto anon84_Else;

  anon84_Else:
    out_Tmp_1806 := out_i_27;
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    havoc out_Tmp_1818;
    assume {:nonnull} out_Tmp_1818 != 0;
    assume out_Tmp_1818 > 0;
    havoc out_Tmp_1801;
    assume {:nonnull} out_Tmp_1801 != 0;
    assume out_Tmp_1801 > 0;
    havoc out_devObj_17;
    assume {:nonnull} out_devObj_17 != 0;
    assume out_devObj_17 > 0;
    havoc out_devExt_16;
    assume {:nonnull} out_devExt_16 != 0;
    assume out_devExt_16 > 0;
    out_thisFuncPdoExt_3 := functionPdoExt_DEVICE_EXTENSION(out_devExt_16);
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto L68;

  L68:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    havoc out_idleIrp;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_idleIrp != 0;
    call {:si_unique_call 3407} out_idleCallbackInfo := GET_IDLE_CALLBACK_INFO_FROM_IRP(out_idleIrp);
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    call {:si_unique_call 3408} KeClearEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(out_thisFuncPdoExt_3));
    goto anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3406} sdv_KeReleaseSpinLock(0, out_oldIrql_22);
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    havoc out_Tmp_1807;
    havoc out_Tmp_1815;
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    havoc vslice_dummy_var_1077;
    call {:si_unique_call 3409} WPP_RECORDER_SF_qq(vslice_dummy_var_1077, 4, 8, 41, out_Tmp_1815, out_idleCallbackInfo, out_Tmp_1807);
    goto anon74_Else;

  anon74_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    havoc vslice_dummy_var_1075;
    call {:si_unique_call 3404} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_1075);
    goto L86;

  L86:
    call {:si_unique_call 3402} out_Tmp_1805 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1805 != 0;
    assume out_Tmp_1805 > 0;
    Mem_T.VOID[out_Tmp_1805] := out_oldIrql_22;
    call {:si_unique_call 3403} sdv_KeAcquireSpinLock(0, out_Tmp_1805);
    goto anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} out_Tmp_1805 != 0;
    assume out_Tmp_1805 > 0;
    out_oldIrql_22 := Mem_T.VOID[out_Tmp_1805];
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    havoc out_idleIrp;
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_idleIrp != 0;
    assume {:nonnull} out_idleIrp != 0;
    assume out_idleIrp > 0;
    goto anon72_Then;

  anon72_Then:
    goto L91;

  L91:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    call {:si_unique_call 3401} out_vslice_dummy_var_399 := KeSetEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(out_thisFuncPdoExt_3), 0, 0);
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    goto anon73_Then;

  anon73_Then:
    goto L70;

  L70:
    out_i_27 := out_i_27 + 1;
    goto L70_dummy;

  L70_dummy:
    call {:si_unique_call 3410} {:si_old_unique_call 1} out_i_27, out_Tmp_1801, out_thisFuncPdoExt_3, out_idleIrp, out_Tmp_1805, out_devExt_16, out_Tmp_1806, out_Tmp_1807, out_Tmp_1811, out_oldIrql_22, out_idleCallbackInfo, out_Tmp_1815, out_devObj_17, out_Tmp_1818, out_vslice_dummy_var_399 := ParentIdleNotificationCallback#0_loop_L58(out_i_27, out_Tmp_1801, out_thisFuncPdoExt_3, out_idleIrp, out_Tmp_1805, out_devExt_16, out_Tmp_1806, out_Tmp_1807, out_Tmp_1811, out_oldIrql_22, out_idleCallbackInfo, out_Tmp_1815, out_devObj_17, out_Tmp_1818, in_parentFdoExt_121, out_vslice_dummy_var_399);
    return;

  anon71_Then:
    assume {:partition} out_idleIrp == 0;
    goto L91;

  anon89_Then:
    goto L91;

  anon81_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    havoc vslice_dummy_var_1076;
    call {:si_unique_call 3405} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_1076);
    goto L86;

  anon70_Then:
    goto L86;

  anon86_Then:
    assume {:partition} out_idleIrp == 0;
    goto L70;

  anon85_Then:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon75_Then;

  anon75_Then:
    goto L68;

  anon69_Then:
    goto L68;
}



procedure {:LoopProcedure} ParentIdleNotificationCallback#0_loop_L58(in_i_27: int, in_Tmp_1801: int, in_thisFuncPdoExt_3: int, in_idleIrp: int, in_Tmp_1805: int, in_devExt_16: int, in_Tmp_1806: int, in_Tmp_1807: int, in_Tmp_1811: int, in_oldIrql_22: int, in_idleCallbackInfo: int, in_Tmp_1815: int, in_devObj_17: int, in_Tmp_1818: int, in_parentFdoExt_121: int, in_vslice_dummy_var_399: int) returns (out_i_27: int, out_Tmp_1801: int, out_thisFuncPdoExt_3: int, out_idleIrp: int, out_Tmp_1805: int, out_devExt_16: int, out_Tmp_1806: int, out_Tmp_1807: int, out_Tmp_1811: int, out_oldIrql_22: int, out_idleCallbackInfo: int, out_Tmp_1815: int, out_devObj_17: int, out_Tmp_1818: int, out_vslice_dummy_var_399: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_5);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParentIdleNotificationCallback#1_loop_L58(in_i_27: int, in_Tmp_1801: int, in_thisFuncPdoExt_3: int, in_idleIrp: int, in_Tmp_1805: int, in_devExt_16: int, in_Tmp_1806: int, in_Tmp_1807: int, in_Tmp_1811: int, in_oldIrql_22: int, in_idleCallbackInfo: int, in_Tmp_1815: int, in_devObj_17: int, in_Tmp_1818: int, in_parentFdoExt_121: int, in_vslice_dummy_var_402: int) returns (out_i_27: int, out_Tmp_1801: int, out_thisFuncPdoExt_3: int, out_idleIrp: int, out_Tmp_1805: int, out_devExt_16: int, out_Tmp_1806: int, out_Tmp_1807: int, out_Tmp_1811: int, out_oldIrql_22: int, out_idleCallbackInfo: int, out_Tmp_1815: int, out_devObj_17: int, out_Tmp_1818: int, out_vslice_dummy_var_402: int)
{
  var vslice_dummy_var_1078: int;
  var vslice_dummy_var_1079: int;
  var vslice_dummy_var_1080: int;
  var vslice_dummy_var_1081: int;

  entry:
    out_i_27, out_Tmp_1801, out_thisFuncPdoExt_3, out_idleIrp, out_Tmp_1805, out_devExt_16, out_Tmp_1806, out_Tmp_1807, out_Tmp_1811, out_oldIrql_22, out_idleCallbackInfo, out_Tmp_1815, out_devObj_17, out_Tmp_1818, out_vslice_dummy_var_402 := in_i_27, in_Tmp_1801, in_thisFuncPdoExt_3, in_idleIrp, in_Tmp_1805, in_devExt_16, in_Tmp_1806, in_Tmp_1807, in_Tmp_1811, in_oldIrql_22, in_idleCallbackInfo, in_Tmp_1815, in_devObj_17, in_Tmp_1818, in_vslice_dummy_var_402;
    goto L58, exit;

  exit:
    return;

  L58:
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    havoc out_Tmp_1811;
    assume {:nonnull} out_Tmp_1811 != 0;
    assume out_Tmp_1811 > 0;
    goto anon84_Else;

  anon84_Else:
    out_Tmp_1806 := out_i_27;
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    havoc out_Tmp_1818;
    assume {:nonnull} out_Tmp_1818 != 0;
    assume out_Tmp_1818 > 0;
    havoc out_Tmp_1801;
    assume {:nonnull} out_Tmp_1801 != 0;
    assume out_Tmp_1801 > 0;
    havoc out_devObj_17;
    assume {:nonnull} out_devObj_17 != 0;
    assume out_devObj_17 > 0;
    havoc out_devExt_16;
    assume {:nonnull} out_devExt_16 != 0;
    assume out_devExt_16 > 0;
    out_thisFuncPdoExt_3 := functionPdoExt_DEVICE_EXTENSION(out_devExt_16);
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto L68;

  L68:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    havoc out_idleIrp;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_idleIrp != 0;
    call {:si_unique_call 3417} out_idleCallbackInfo := GET_IDLE_CALLBACK_INFO_FROM_IRP(out_idleIrp);
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    call {:si_unique_call 3418} KeClearEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(out_thisFuncPdoExt_3));
    goto anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3416} sdv_KeReleaseSpinLock(0, out_oldIrql_22);
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    havoc out_Tmp_1807;
    havoc out_Tmp_1815;
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    havoc vslice_dummy_var_1081;
    call {:si_unique_call 3420} WPP_RECORDER_SF_qq(vslice_dummy_var_1081, 4, 8, 41, out_Tmp_1815, out_idleCallbackInfo, out_Tmp_1807);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    havoc vslice_dummy_var_1078;
    call {:si_unique_call 3414} D3ColdSupportFunctionInterfaceDereference(vslice_dummy_var_1078);
    goto L86;

  L86:
    call {:si_unique_call 3412} out_Tmp_1805 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1805 != 0;
    assume out_Tmp_1805 > 0;
    Mem_T.VOID[out_Tmp_1805] := out_oldIrql_22;
    call {:si_unique_call 3413} sdv_KeAcquireSpinLock(0, out_Tmp_1805);
    goto anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} out_Tmp_1805 != 0;
    assume out_Tmp_1805 > 0;
    out_oldIrql_22 := Mem_T.VOID[out_Tmp_1805];
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    havoc out_idleIrp;
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_idleIrp != 0;
    assume {:nonnull} out_idleIrp != 0;
    assume out_idleIrp > 0;
    goto anon72_Then;

  anon72_Then:
    goto L91;

  L91:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    call {:si_unique_call 3411} out_vslice_dummy_var_402 := KeSetEvent(idleCallbackEvent_FUNCTION_PDO_EXTENSION(out_thisFuncPdoExt_3), 0, 0);
    assume {:nonnull} in_parentFdoExt_121 != 0;
    assume in_parentFdoExt_121 > 0;
    goto anon73_Then;

  anon73_Then:
    goto L70;

  L70:
    out_i_27 := out_i_27 + 1;
    goto L70_dummy;

  L70_dummy:
    call {:si_unique_call 3421} {:si_old_unique_call 1} out_i_27, out_Tmp_1801, out_thisFuncPdoExt_3, out_idleIrp, out_Tmp_1805, out_devExt_16, out_Tmp_1806, out_Tmp_1807, out_Tmp_1811, out_oldIrql_22, out_idleCallbackInfo, out_Tmp_1815, out_devObj_17, out_Tmp_1818, out_vslice_dummy_var_402 := ParentIdleNotificationCallback#1_loop_L58(out_i_27, out_Tmp_1801, out_thisFuncPdoExt_3, out_idleIrp, out_Tmp_1805, out_devExt_16, out_Tmp_1806, out_Tmp_1807, out_Tmp_1811, out_oldIrql_22, out_idleCallbackInfo, out_Tmp_1815, out_devObj_17, out_Tmp_1818, in_parentFdoExt_121, out_vslice_dummy_var_402);
    return;

  anon71_Then:
    assume {:partition} out_idleIrp == 0;
    goto L91;

  anon89_Then:
    goto L91;

  anon81_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    havoc vslice_dummy_var_1079;
    call {:si_unique_call 3415} D3ColdSupportFunctionInterfaceReference(vslice_dummy_var_1079);
    goto L86;

  anon74_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    assume {:nonnull} out_idleCallbackInfo != 0;
    assume out_idleCallbackInfo > 0;
    havoc vslice_dummy_var_1080;
    call {:si_unique_call 3419} ParentIdleNotificationCallback#0(vslice_dummy_var_1080);
    goto anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto L86;

  anon70_Then:
    goto L86;

  anon86_Then:
    assume {:partition} out_idleIrp == 0;
    goto L70;

  anon85_Then:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} out_thisFuncPdoExt_3 != 0;
    assume out_thisFuncPdoExt_3 > 0;
    goto anon75_Then;

  anon75_Then:
    goto L68;

  anon69_Then:
    goto L68;
}



procedure {:LoopProcedure} ParentIdleNotificationCallback#1_loop_L58(in_i_27: int, in_Tmp_1801: int, in_thisFuncPdoExt_3: int, in_idleIrp: int, in_Tmp_1805: int, in_devExt_16: int, in_Tmp_1806: int, in_Tmp_1807: int, in_Tmp_1811: int, in_oldIrql_22: int, in_idleCallbackInfo: int, in_Tmp_1815: int, in_devObj_17: int, in_Tmp_1818: int, in_parentFdoExt_121: int, in_vslice_dummy_var_402: int) returns (out_i_27: int, out_Tmp_1801: int, out_thisFuncPdoExt_3: int, out_idleIrp: int, out_Tmp_1805: int, out_devExt_16: int, out_Tmp_1806: int, out_Tmp_1807: int, out_Tmp_1811: int, out_oldIrql_22: int, out_idleCallbackInfo: int, out_Tmp_1815: int, out_devObj_17: int, out_Tmp_1818: int, out_vslice_dummy_var_402: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation UnblockAllPendedPdoD0Irps#0_loop_L25(in_tmpListHead: int, in_listEntry: int, in_sdv_47: int, in_sdv_49: int, in_functionPdoExt_6: int, in_parentFdoExt_8: int) returns (out_listEntry: int, out_sdv_47: int, out_sdv_49: int, out_functionPdoExt_6: int)
{

  entry:
    out_listEntry, out_sdv_47, out_sdv_49, out_functionPdoExt_6 := in_listEntry, in_sdv_47, in_sdv_49, in_functionPdoExt_6;
    goto L25, exit;

  exit:
    return;

  L25:
    call {:si_unique_call 3422} out_sdv_47 := sdv_IsListEmpty(0);
    goto anon10_Else;

  anon10_Else:
    assume {:partition} out_sdv_47 == 0;
    call {:si_unique_call 3423} out_listEntry := RemoveHeadList(in_tmpListHead);
    call {:si_unique_call 3424} InitializeListHead(out_listEntry);
    call {:si_unique_call 3425} out_sdv_49 := sdv_containing_record(out_listEntry, 212);
    out_functionPdoExt_6 := out_sdv_49;
    call {:si_unique_call 3426} UnblockPendedPdoD0Irp#0(out_functionPdoExt_6, in_parentFdoExt_8);
    goto anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    call {:si_unique_call 3427} {:si_old_unique_call 1} out_listEntry, out_sdv_47, out_sdv_49, out_functionPdoExt_6 := UnblockAllPendedPdoD0Irps#0_loop_L25(in_tmpListHead, out_listEntry, out_sdv_47, out_sdv_49, out_functionPdoExt_6, in_parentFdoExt_8);
    return;
}



procedure {:LoopProcedure} UnblockAllPendedPdoD0Irps#0_loop_L25(in_tmpListHead: int, in_listEntry: int, in_sdv_47: int, in_sdv_49: int, in_functionPdoExt_6: int, in_parentFdoExt_8: int) returns (out_listEntry: int, out_sdv_47: int, out_sdv_49: int, out_functionPdoExt_6: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_47 == 1 || out_sdv_47 == 0 || out_sdv_47 == in_sdv_47;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation UnblockAllPendedPdoD0Irps#0_loop_L15(in_tmpListHead: int, in_sdv_45: int, in_sdv_46: int, in_parentFdoExt_8: int, in_vslice_dummy_var_415: int) returns (out_sdv_45: int, out_sdv_46: int, out_vslice_dummy_var_415: int)
{

  entry:
    out_sdv_45, out_sdv_46, out_vslice_dummy_var_415 := in_sdv_45, in_sdv_46, in_vslice_dummy_var_415;
    goto L15, exit;

  exit:
    return;

  L15:
    call {:si_unique_call 3428} out_sdv_45 := sdv_IsListEmpty(0);
    goto anon9_Then;

  anon9_Then:
    assume {:partition} out_sdv_45 == 0;
    assume {:nonnull} in_parentFdoExt_8 != 0;
    assume in_parentFdoExt_8 > 0;
    call {:si_unique_call 3429} out_sdv_46 := RemoveHeadList(pendingD0List_PARENT_FDO_EXTENSION(in_parentFdoExt_8));
    call {:si_unique_call 3430} out_vslice_dummy_var_415 := sdv_InsertTailList(in_tmpListHead, out_sdv_46);
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    call {:si_unique_call 3431} {:si_old_unique_call 1} out_sdv_45, out_sdv_46, out_vslice_dummy_var_415 := UnblockAllPendedPdoD0Irps#0_loop_L15(in_tmpListHead, out_sdv_45, out_sdv_46, in_parentFdoExt_8, out_vslice_dummy_var_415);
    return;
}



procedure {:LoopProcedure} UnblockAllPendedPdoD0Irps#0_loop_L15(in_tmpListHead: int, in_sdv_45: int, in_sdv_46: int, in_parentFdoExt_8: int, in_vslice_dummy_var_415: int) returns (out_sdv_45: int, out_sdv_46: int, out_vslice_dummy_var_415: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} out_sdv_45 == 1 || out_sdv_45 == 0 || out_sdv_45 == in_sdv_45;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation UnblockAllPendedPdoD0Irps#1_loop_L25(in_tmpListHead: int, in_listEntry: int, in_sdv_47: int, in_sdv_49: int, in_functionPdoExt_6: int, in_parentFdoExt_8: int) returns (out_listEntry: int, out_sdv_47: int, out_sdv_49: int, out_functionPdoExt_6: int)
{

  entry:
    out_listEntry, out_sdv_47, out_sdv_49, out_functionPdoExt_6 := in_listEntry, in_sdv_47, in_sdv_49, in_functionPdoExt_6;
    goto L25, exit;

  exit:
    return;

  L25:
    call {:si_unique_call 3432} out_sdv_47 := sdv_IsListEmpty(0);
    goto anon10_Else;

  anon10_Else:
    assume {:partition} out_sdv_47 == 0;
    call {:si_unique_call 3433} out_listEntry := RemoveHeadList(in_tmpListHead);
    call {:si_unique_call 3434} InitializeListHead(out_listEntry);
    call {:si_unique_call 3435} out_sdv_49 := sdv_containing_record(out_listEntry, 212);
    out_functionPdoExt_6 := out_sdv_49;
    call {:si_unique_call 3436} UnblockPendedPdoD0Irp#1(out_functionPdoExt_6, in_parentFdoExt_8);
    goto anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    call {:si_unique_call 3437} {:si_old_unique_call 1} out_listEntry, out_sdv_47, out_sdv_49, out_functionPdoExt_6 := UnblockAllPendedPdoD0Irps#1_loop_L25(in_tmpListHead, out_listEntry, out_sdv_47, out_sdv_49, out_functionPdoExt_6, in_parentFdoExt_8);
    return;
}



procedure {:LoopProcedure} UnblockAllPendedPdoD0Irps#1_loop_L25(in_tmpListHead: int, in_listEntry: int, in_sdv_47: int, in_sdv_49: int, in_functionPdoExt_6: int, in_parentFdoExt_8: int) returns (out_listEntry: int, out_sdv_47: int, out_sdv_49: int, out_functionPdoExt_6: int);
  modifies alloc, Mem_T.VOID, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_47 == 1 || out_sdv_47 == 0 || out_sdv_47 == in_sdv_47;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation UnblockAllPendedPdoD0Irps#1_loop_L15(in_tmpListHead: int, in_sdv_45: int, in_sdv_46: int, in_parentFdoExt_8: int, in_vslice_dummy_var_417: int) returns (out_sdv_45: int, out_sdv_46: int, out_vslice_dummy_var_417: int)
{

  entry:
    out_sdv_45, out_sdv_46, out_vslice_dummy_var_417 := in_sdv_45, in_sdv_46, in_vslice_dummy_var_417;
    goto L15, exit;

  exit:
    return;

  L15:
    call {:si_unique_call 3438} out_sdv_45 := sdv_IsListEmpty(0);
    goto anon9_Then;

  anon9_Then:
    assume {:partition} out_sdv_45 == 0;
    assume {:nonnull} in_parentFdoExt_8 != 0;
    assume in_parentFdoExt_8 > 0;
    call {:si_unique_call 3439} out_sdv_46 := RemoveHeadList(pendingD0List_PARENT_FDO_EXTENSION(in_parentFdoExt_8));
    call {:si_unique_call 3440} out_vslice_dummy_var_417 := sdv_InsertTailList(in_tmpListHead, out_sdv_46);
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    call {:si_unique_call 3441} {:si_old_unique_call 1} out_sdv_45, out_sdv_46, out_vslice_dummy_var_417 := UnblockAllPendedPdoD0Irps#1_loop_L15(in_tmpListHead, out_sdv_45, out_sdv_46, in_parentFdoExt_8, out_vslice_dummy_var_417);
    return;
}



procedure {:LoopProcedure} UnblockAllPendedPdoD0Irps#1_loop_L15(in_tmpListHead: int, in_sdv_45: int, in_sdv_46: int, in_parentFdoExt_8: int, in_vslice_dummy_var_417: int) returns (out_sdv_45: int, out_sdv_46: int, out_vslice_dummy_var_417: int);
  modifies alloc, Mem_T.VOID;
  free ensures {:va_keep} out_sdv_45 == 1 || out_sdv_45 == 0 || out_sdv_45 == in_sdv_45;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



procedure fakeMain() returns (Tmp_1678: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.VOID, yogi_error, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:entrypoint} fakeMain() returns (Tmp_1678: int, dup_assertVar: bool)
{

  start:
    call Tmp_1678, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


