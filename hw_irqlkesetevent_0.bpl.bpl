var {:scalar} alloc: int;

var {:scalar} sdv_irql_previous_5: int;

var {:scalar} sdv_irql_previous_2: int;

var {:scalar} sdv_irql_current: int;

var {:scalar} sdv_irql_previous: int;

var {:scalar} sdv_irql_previous_4: int;

var {:scalar} sdv_irql_previous_3: int;

var {:scalar} yogi_error: int;

var {:scalar} Mem_T.INT4: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const DEVPKEY_Device_ProblemCode: int;

const DEVPKEY_Device_DHP_Rebalance_Policy: int;

const GUID_NWF_DATA_RATE_MAPPING_TABLE: int;

const DEVPKEY_DeviceContainer_IsMetadataSearchInProgress: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceContainer_IsShowInDisconnectedState: int;

const GUID_NWF_FRAGMENTATION_THRESHOLD: int;

const GUID_NWF_MAX_MAC_ADDRESS_STATES: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const DEVPKEY_Device_SafeRemovalRequired: int;

const DEVPKEY_PciRootBus_PCIExpressAERControl: int;

const DEVPKEY_PciDevice_BaseClass: int;

const GUID_NWF_ACTIVE_PHY_LIST: int;

const DEVPKEY_Device_ResourcePickerTags: int;

const DEVPKEY_DeviceContainer_IsPaired: int;

const DEVPKEY_Device_HardwareIds: int;

const DEVPKEY_DeviceContainer_InstallInProgress: int;

const DEVPKEY_PciDevice_MaxPayloadSize: int;

const GUID_NWF_COUNTRY_STRING: int;

const DEVPKEY_Device_LowerFilters: int;

const DEVPKEY_Device_FirmwareVersion: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_NWF_CURRENT_INDEX: int;

const GUID_NWF_TI_THRESHOLD: int;

const GUID_NWF_ERP_PBCC_OPTION_ENABLED: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const DEVPKEY_PciDevice_BarTypes: int;

const GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM: int;

const GUID_POWER_CONSERVATION_IDLE_TIME: int;

const GUID_NWF_RECV_SENSITIVITY_LIST: int;

const DEVPKEY_DeviceClass_UpperFilters: int;

const DEVPKEY_DeviceClass_NoInstallClass: int;

const GUID_NWF_RANDOM_TABLE_FLAG: int;

const DEVPKEY_Device_DeviceDesc: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const DEVPKEY_PciDevice_Uncorrectable_Error_Mask: int;

const GUID_NWF_RF_USAGE: int;

const DEVPKEY_DeviceContainer_IsEncrypted: int;

const DEVPKEY_Device_LastArrivalDate: int;

const GUID_NWF_RSSI_RANGE: int;

const GUID_NWF_CURRENT_PHY_ID: int;

const GUID_NWF_JOIN_REQUEST: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const DEVPKEY_Device_Characteristics: int;

const DEVPKEY_DrvPkg_DetailedDescription: int;

const DEVPKEY_DeviceContainer_DeviceDescription2: int;

const DEVPKEY_DeviceContainer_CategoryGroup_Desc: int;

const DEVPKEY_PciRootBus_CurrentSpeedAndMode: int;

const GUID_NWF_RTS_THRESHOLD: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_Icon: int;

const DEVPKEY_DeviceInterfaceClass_Name: int;

const GUID_NWF_PRIVACY_EXEMPTION_LIST: int;

const DEVPKEY_Device_InstanceId: int;

const GUID_NWF_SUPPORTED_RX_ANTENNA: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const DEVPKEY_Device_LastRemovalDate: int;

const DEVPKEY_DeviceContainer_RequiresPairingElevation: int;

const GUID_NWF_POWER_MGMT_MODE: int;

const GUID_NWF_ED_THRESHOLD: int;

const DEVPKEY_DeviceContainer_RequiresUninstallElevation: int;

const GUID_NWF_OPERATION_MODE_CAPABILITY: int;

const DEVPKEY_Device_Manufacturer: int;

const DEVPKEY_Device_DriverLogoLevel: int;

const DEVPKEY_DeviceContainer_Address: int;

const DEVPKEY_DeviceContainer_IsAuthenticated: int;

const DEVPKEY_PciDevice_SubClass: int;

const GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED: int;

const DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames: int;

const GUID_NWF_PERMANENT_ADDRESS: int;

const DEVPKEY_Device_ConfigurationId: int;

const GUID_NWF_CURRENT_TX_POWER_LEVEL: int;

const GUID_DEVINTERFACE_PCIDRV: int;

const DEVPKEY_Device_HasProblem: int;

const DEVPKEY_DeviceContainer_Category_Desc_Plural: int;

const GUID_NWF_MEDIA_STREAMING_ENABLED: int;

const DEVPKEY_PciDevice_AriSupport: int;

const GUID_NWF_CCA_WATCHDOG_TIMER_MAX: int;

const GUID_NWF_PMKID_LIST: int;

const DEVPKEY_PciRootBus_DeviceIDMessagingCapable: int;

const DEVPKEY_Device_PhysicalDeviceLocation: int;

const DEVPKEY_DeviceContainer_Version: int;

const GUID_NWF_BEACON_PERIOD: int;

const GUID_NWF_DESIRED_SSID_LIST: int;

const DEVPKEY_PciRootBus_ASPMSupport: int;

const GUID_NWF_CURRENT_OFFLOAD_CAPABILITY: int;

const DEVPKEY_Device_PostInstallInProgress: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED: int;

const DEVPKEY_Device_Driver: int;

const DEVPKEY_PciDevice_CurrentPayloadSize: int;

const GUID_NWF_DSSS_OFDM_OPTION_ENABLED: int;

const GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST: int;

const DEVPKEY_Device_InstallState: int;

const GUID_NWF_MAX_DWELL_TIME: int;

const GUID_NWF_WPA_TSC: int;

const GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED: int;

const GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM: int;

const GUID_BUS_TYPE_PCI: int;

const DEVPKEY_PciDevice_Label_String: int;

const GUID_NWF_NUMBER_OF_HOPPING_SETS: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const DEVPKEY_Device_FirmwareDate: int;

const DEVPKEY_PciDevice_SriovSupport: int;

const GUID_NWF_SAFE_MODE_ENABLED: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceInterface_FriendlyName: int;

const DEVPKEY_PciDevice_Uncorrectable_Error_Severity: int;

const DEVPKEY_PciDevice_S0WakeupSupported: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const DEVPKEY_PciDevice_InterruptSupport: int;

const DEVPKEY_PciDevice_Label_Id: int;

const DEVPKEY_Device_CompatibleIds: int;

const DEVPKEY_Device_ReportedDeviceIdsHash: int;

const DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport: int;

const GUID_NWF_CURRENT_CHANNEL: int;

const GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED: int;

const DEVPKEY_Device_DriverPropPageProvider: int;

const DEVPKEY_DeviceContainer_UnpairUninstall: int;

const DEVPKEY_PciDevice_CurrentLinkSpeed: int;

const GUID_NWF_NIC_SPECIFIC_EXTENSION: int;

const DEVPKEY_Device_BiosDeviceName: int;

const GUID_NWF_CFP_MAX_DURATION: int;

const GUID_NWF_HOPPING_PATTERN: int;

const GUID_NWF_CURRENT_CHANNEL_NUMBER: int;

const GUID_NWF_DISCONNECT_REQUEST: int;

const GUID_NWF_CURRENT_PACKET_FILTER: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const DEVPKEY_Device_PowerRelations: int;

const DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer: int;

const GUID_NWF_SUPPORTED_PHY_TYPES: int;

const GUID_NWF_HOP_ALGORITHM_ADOPTED: int;

const DEVPKEY_DrvPkg_BrandingIcon: int;

const DEVPKEY_DeviceClass_Characteristics: int;

const GUID_NWF_SCAN_REQUEST: int;

const GUID_NWF_DESIRED_BSS_TYPE: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const DEVPKEY_Device_MatchingDeviceId: int;

const GUID_NWF_EXCLUDE_UNENCRYPTED: int;

const GUID_QUERY_CRASHDUMP_FUNCTIONS: int;

const GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST: int;

const DEVPKEY_Device_PDOName: int;

const DEVPKEY_Device_Address: int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_Exclusive: int;

const DEVPKEY_PciDevice_Correctable_Error_Mask: int;

const DEVPKEY_DeviceContainer_DeviceDescription1: int;

const GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED: int;

const DEVPKEY_DeviceContainer_Manufacturer: int;

const DEVPKEY_DeviceClass_NoUseClass: int;

const GUID_NWF_SUPPORTED_DATA_RATES_VALUE: int;

const GUID_NWF_CHANNEL_AGILITY_ENABLED: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const DEVPKEY_PciDevice_MaxLinkWidth: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_Device_DevNodeStatus: int;

const GUID_NWF_WME_ENABLED: int;

const DEVPKEY_Device_DriverProvider: int;

const DEVPKEY_DeviceContainer_CategoryGroup_Icon: int;

const DEVPKEY_PciDevice_CurrentSpeedAndMode: int;

const DEVPKEY_PciDevice_AERCapabilityPresent: int;

const GUID_NWF_WME_AC_PARAMETERS: int;

const DEVPKEY_Device_ModelId: int;

const GUID_NWF_AP_JOIN_REQUEST: int;

const DEVPKEY_DeviceContainer_PrimaryCategory: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const DEVPKEY_Device_Children: int;

const DEVPKEY_Device_Stack: int;

const DEVPKEY_DeviceContainer_IsLocalMachine: int;

const GUID_NWF_MPDU_MAX_LENGTH: int;

const GUID_NWF_CURRENT_OPTIONAL_CAPABILITY: int;

const DEVPKEY_Device_DriverDate: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_NWF_STATION_ID: int;

const GUID_NWF_REG_DOMAINS_SUPPORT_VALUE: int;

const DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect: int;

const GUID_NWF_MEDIUM_OCCUPANCY_LIMIT: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const DEVPKEY_DeviceContainer_DeviceFunctionSubRank: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const DEVPKEY_Device_DriverDesc: int;

const GUID_NWF_HOP_MODULUS: int;

const DEVPKEY_DeviceClass_NoDisplayClass: int;

const GUID_NWF_OFFLOAD_CAPABILITY: int;

const GUID_NWF_SUPPORTED_POWER_LEVELS: int;

const GUID_NWF_DIVERSITY_SELECTION_RX: int;

const GUID_NWF_WME_IMPLEMENTED: int;

const DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const DEVPKEY_Device_BusNumber: int;

const DEVPKEY_Device_PowerData: int;

const DEVPKEY_Device_ConfigFlags: int;

const DEVPKEY_PciDevice_MaxReadRequestSize: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_BUS_TYPE_AVC: int;

const DEVPKEY_DeviceContainer_MetadataPath: int;

const GUID_NWF_CIPHER_DEFAULT_KEY_ID: int;

const GUID_NWF_CURRENT_SET: int;

const GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR: int;

const DEVPKEY_DeviceContainer_FriendlyName: int;

const DEVPKEY_PciRootBus_SupportedSpeedsAndModes: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const DEVPKEY_Device_PresenceNotForDevice: int;

const GUID_NWF_DESIRED_BSSID_LIST: int;

const GUID_NWF_ENUM_ASSOCIATION_INFO: int;

const DEVPKEY_DeviceInterface_ClassGuid: int;

const DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable: int;

const DEVPKEY_Device_FriendlyNameAttributes: int;

const GUID_NWF_NIC_POWER_STATE: int;

const GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST: int;

const DEVPKEY_Device_SessionId: int;

const DEVPKEY_DeviceInterface_Enabled: int;

const DEVPKEY_DeviceInterface_Restricted: int;

const GUID_NWF_FREQUENCY_BANDS_SUPPORTED: int;

const DEVPKEY_Device_TransportRelations: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const DEVPKEY_NAME: int;

const DEVPKEY_Device_UINumberDescFormat: int;

const GUID_NWF_WEP_OFFLOAD: int;

const GUID_NWF_UPDATE_IE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const DEVPKEY_DeviceClass_ClassCoInstallers: int;

const GUID_NWF_POWER_MGMT_REQUEST: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const DEVPKEY_Device_FriendlyName: int;

const DEVPKEY_Device_LocationInfo: int;

const DEVPKEY_DeviceContainer_Category_Icon: int;

const GUID_NWF_DESIRED_PHY_LIST: int;

const GUID_NWF_CCA_WATCHDOG_COUNT_MAX: int;

const DEVPKEY_Device_Exclusive: int;

const GUID_NWF_CIPHER_KEY_MAPPING_KEY: int;

const DEVPKEY_Device_Numa_Proximity_Domain: int;

const GUID_NWF_QOS_TX_DURATION: int;

const DEVPKEY_Device_DriverProblemDesc: int;

const DEVPKEY_DeviceContainer_IsSharedDevice: int;

const GUID_NWF_CURRENT_DWELL_TIME: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

const DEVPKEY_PciDevice_CurrentLinkWidth: int;

const DEVPKEY_Device_UINumber: int;

const DEVPKEY_Device_ExtendedConfigurationIds: int;

const DEVPKEY_Device_DriverRank: int;

const DEVPKEY_DeviceContainer_IsRebootRequired: int;

const DEVPKEY_PciRootBus_PCIExpressNativePMEControl: int;

const GUID_NWF_PORT_STATE_NOTIFICATION: int;

const DEVPKEY_Device_SafeRemovalRequiredOverride: int;

const DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl: int;

const DEVPKEY_PciDevice_DeviceType: int;

const GUID_NWF_QOS_TX_MEDIUM_TIME: int;

const GUID_NWF_DIVERSITY_SUPPORT: int;

const GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR: int;

const DEVPKEY_Device_DriverInfSection: int;

const DEVPKEY_DeviceClass_PropPageProvider: int;

const GUID_NWF_TEMP_TYPE: int;

const DEVPKEY_Device_Class: int;

const DEVPKEY_Device_NoConnectSound: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_DevType: int;

const GUID_NWF_CURRENT_PATTERN: int;

const DEVPKEY_Device_ManufacturerAttributes: int;

const GUID_NWF_ENUM_BSS_LIST: int;

const GUID_BUS_TYPE_ISAPNP: int;

const DEVPKEY_Device_Reported: int;

const DEVPKEY_PciRootBus_NativePciExpressControl: int;

const GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME: int;

const DEVPKEY_DeviceContainer_IsNetworkDevice: int;

const DEVPKEY_Device_ResourcePickerExceptions: int;

const GUID_NWF_OPERATIONAL_RATE_SET: int;

const GUID_BUS_TYPE_ACPI: int;

const DEVPKEY_Device_RemovalPolicyDefault: int;

const DEVPKEY_Device_ProblemStatus: int;

const GUID_NWF_WEP_UPLOAD: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const DEVPKEY_DeviceContainer_IsNotInterestingForDisplay: int;

const GUID_NWF_CCA_MODE_SUPPORTED: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const DEVPKEY_Device_EjectionRelations: int;

const GUID_BUS_TYPE_EISA: int;

const DEVPKEY_PciDevice_MaxLinkSpeed: int;

const DEVPKEY_PciDevice_FirmwareErrorHandling: int;

const GUID_NWF_CURRENT_OPERATION_MODE: int;

const GUID_NWF_STATISTICS: int;

const DEVPKEY_Device_IsAssociateableByUserAction: int;

const DEVPKEY_DrvPkg_Icon: int;

const DEVPKEY_PciDevice_ProgIf: int;

const DEVPKEY_Device_AdditionalSoftwareRequested: int;

const GUID_NWF_CHANNEL_AGILITY_PRESENT: int;

const DEVPKEY_Device_LocationPaths: int;

const GUID_NWF_CURRENT_FREQUENCY: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const DEVPKEY_DeviceClass_SilentInstall: int;

const DEVPKEY_Device_LegacyBusType: int;

const DEVPKEY_DeviceContainer_IsDefaultDevice: int;

const GUID_BUS_TYPE_IRDA: int;

const DEVPKEY_Device_UpperFilters: int;

const DEVPKEY_Device_DevType: int;

const DEVPKEY_Device_DriverInfPath: int;

const DEVPKEY_DeviceInterface_ReferenceString: int;

const GUID_NWF_CCA_WATCHDOG_TIMER_MIN: int;

const GUID_NWF_PBCC_OPTION_IMPLEMENTED: int;

const GUID_POWER_PERFORMANCE_IDLE_TIME: int;

const DEVPKEY_Device_IsRebootRequired: int;

const DEVPKEY_DeviceClass_ClassInstaller: int;

const DEVPKEY_DeviceContainer_IsConnected: int;

const DEVPKEY_DeviceContainer_Icon: int;

const GUID_BUS_TYPE_MCA: int;

const DEVPKEY_DeviceContainer_Category_Desc_Singular: int;

const DEVPKEY_Device_SecuritySDS: int;

const DEVPKEY_DeviceClass_DHPRebalanceOptOut: int;

const GUID_NWF_CFP_PERIOD: int;

const GUID_NWF_EHCC_CAPABILITY_ENABLED: int;

const DEVPKEY_Device_InstallDate: int;

const DEVPKEY_DeviceClass_LowerFilters: int;

const DEVPKEY_DeviceContainer_MetadataChecksum: int;

const DEVPKEY_DeviceClass_DefaultService: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const GUID_NWF_WEP_ICV_ERROR_COUNT: int;

const DEVPKEY_DrvPkg_VendorWebSite: int;

const DEVPKEY_DeviceContainer_ConfigFlags: int;

const DEVPKEY_PciDevice_AcsSupport: int;

const DEVPKEY_Device_RemovalRelations: int;

const DEVPKEY_DrvPkg_DocumentationLink: int;

const GUID_NWF_MULTICAST_LIST: int;

const GUID_NWF_DEFAULT_WEP_UPLOAD: int;

const GUID_NWF_RESET_REQUEST: int;

const DEVPKEY_Device_BusTypeGuid: int;

const GUID_NWF_DTIM_PERIOD: int;

const GUID_NWF_RANDOM_TABLE_FIELD_NUMBER: int;

const GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING: int;

const DEVPKEY_Device_ShowInUninstallUI: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED: int;

const GUID_NWF_CURRENT_ADDRESS: int;

const DEVPKEY_Device_ContainerId: int;

const DEVPKEY_Device_InLocalMachineContainer: int;

const DEVPKEY_DeviceContainer_ExperienceId: int;

const GUID_NWF_CURRENT_RX_ANTENNA: int;

const GUID_NWF_CIPHER_DEFAULT_KEY: int;

const DEVPKEY_Device_FirmwareRevision: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_NWF_SUPPORTED_TX_ANTENNA: int;

const DEVPKEY_DeviceContainer_BaselineExperienceId: int;

const DEVPKEY_PciRootBus_SecondaryInterface: int;

const GUID_NWF_CONNECT_REQUEST: int;

const GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED: int;

const GUID_NWF_EXTSTA_CAPABILITY: int;

const DEVPKEY_Device_Security: int;

const DEVPKEY_DeviceClass_SecuritySDS: int;

const GUID_BUS_TYPE_SD: int;

const DEVPKEY_Device_EnumeratorName: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const DEVPKEY_DeviceClass_Security: int;

const DEVPKEY_DeviceContainer_Last_Seen: int;

const DEVPKEY_PciRootBus_ExtendedConfigAvailable: int;

const DEVPKEY_Device_ClassGuid: int;

const DEVPKEY_Device_FirstInstallDate: int;

const GUID_NWF_MAXIMUM_LIST_SIZE: int;

const GUID_BUS_TYPE_HID: int;

const GUID_NWF_IBSS_PARAMS: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_NWF_ATIM_WINDOW: int;

const GUID_NWF_CF_POLLABLE: int;

const GUID_NWF_MAC_ADDRESS: int;

const DEVPKEY_Device_BusReportedDeviceDesc: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

const GUID_NWF_HOP_TIME: int;

const DEVPKEY_Device_RemovalPolicy: int;

const DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames: int;

const GUID_NWF_START_REQUEST: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const DEVPKEY_DeviceClass_Name: int;

const DEVPKEY_DeviceContainer_ModelName: int;

const DEVPKEY_Device_IsPresent: int;

const GUID_BUS_TYPE_1394: int;

const DEVPKEY_Device_RemovalPolicyOverride: int;

const DEVPKEY_Device_Model: int;

const DEVPKEY_PciDevice_RootError_Reporting: int;

const GUID_NWF_SHORT_RETRY_LIMIT: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY: int;

const DEVPKEY_DeviceContainer_DiscoveryMethod: int;

const DEVPKEY_Device_DriverInfSectionExt: int;

const DEVPKEY_DeviceClass_ClassName: int;

const DEVPKEY_PciRootBus_SystemMsiSupport: int;

const GUID_NWF_QOS_TX_QUEUES_SUPPORTED: int;

const GUID_NWF_HOP_OFFSET: int;

const DEVPKEY_DeviceContainer_AssociationArray: int;

const DEVPKEY_PciRootBus_SecondaryBusWidth: int;

const GUID_NWF_ASSOCIATION_PARAMS: int;

const DEVPKEY_PciRootBus_SHPCNativeHotPlugControl: int;

const DEVPKEY_Device_BaseContainerId: int;

const GUID_NWF_FLUSH_BSS_LIST: int;

const GUID_NWF_CURRENT_TX_ANTENNA: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const DEVPKEY_Device_BusRelations: int;

const GUID_NWF_HR_CCA_MODE_SUPPORTED: int;

const GUID_BUS_TYPE_SERENUM: int;

const DEVPKEY_DeviceContainer_ModelNumber: int;

const PCIDRV_WMI_STD_DATA_GUID: int;

const DEVPKEY_DeviceContainer_Last_Connected: int;

const GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED: int;

const DEVPKEY_PciDevice_Error_Reporting: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const DEVPKEY_PciRootBus_MSISupport: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_NWF_CCA_WATCHDOG_COUNT_MIN: int;

const DEVPKEY_Device_SignalStrength: int;

const DEVPKEY_Device_DebuggerSafe: int;

const DEVPKEY_Device_DriverCoInstallers: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_NWF_OPTIONAL_CAPABILITY: int;

const GUID_NWF_EHCC_PRIME_RADIX: int;

const GUID_NWF_CURRENT_PHY_TYPE: int;

const GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD: int;

const DEVPKEY_Device_Numa_Node: int;

const DEVPKEY_PciDevice_ExpressSpecVersion: int;

const DEVPKEY_PciRootBus_PCIExpressCapabilityControl: int;

const GUID_NWF_DEFAULT_WEP_OFFLOAD: int;

const GUID_NWF_QOS_PARAMS: int;

const GUID_BUS_TYPE_USB: int;

const DEVPKEY_Device_GenericDriverInstalled: int;

const GUID_NWF_CURRENT_REG_DOMAIN: int;

const GUID_NWF_WME_UPDATE_IE: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const DEVPKEY_PciRootBus_PCISegmentGroupsSupport: int;

const DEVPKEY_Device_Service: int;

const DEVPKEY_Device_Capabilities: int;

const DEVPKEY_PciRootBus_ClockPowerManagementSupport: int;

const GUID_NWF_UNICAST_USE_GROUP_ENABLED: int;

const GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING: int;

const GUID_BUS_TYPE_USBPRINT: int;

const DEVPKEY_DeviceInterfaceClass_DefaultInterface: int;

const DEVPKEY_DeviceContainer_MetadataCabinet: int;

const GUID_NWF_COUNTERS_ENTRY: int;

const GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX: int;

const GUID_NWF_PHY_STATE: int;

const DEVPKEY_Device_Parent: int;

const GUID_NWF_MAX_RECEIVE_LIFETIME: int;

const DEVPKEY_DeviceContainer_Category: int;

const DEVPKEY_PciDevice_ECRC_Errors: int;

const GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_NWF_AUTO_CONFIG_ENABLED: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const DEVPKEY_Device_DriverVersion: int;

const GUID_NWF_CURRENT_CCA_MODE: int;

const DEVPKEY_DrvPkg_Model: int;

const DEVPKEY_DeviceClass_IconPath: int;

const GUID_NWF_LONG_RETRY_LIMIT: int;

const DEVPKEY_PciDevice_InterruptMessageMaximum: int;

const GUID_NWF_HIDDEN_NETWORK_ENABLED: int;

const DEVPKEY_Device_Legacy: int;

const DEVPKEY_Device_Siblings: int;

const DEVPKEY_DeviceContainer_HasProblem: int;

const DebugLevel: int;

const Globals: int;

const GUID_PCIEXPRESS_SETTINGS_SUBGROUP: int;

const GUID_NON_ADAPTIVE_INPUT_TIMEOUT: int;

const GUID_ALLOW_RTC_WAKE: int;

const GUID_BATTERY_DISCHARGE_LEVEL_2: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: int;

const GUID_DISK_IDLE_TIMEOUT: int;

const GUID_ACDC_POWER_SOURCE: int;

const GUID_SYSTEM_COOLING_POLICY: int;

const GUID_BATTERY_DISCHARGE_LEVEL_3: int;

const GUID_LOCK_CONSOLE_ON_WAKE: int;

const GUID_VIDEO_POWERDOWN_TIMEOUT: int;

const GUID_PROCESSOR_IDLESTATE_POLICY: int;

const GUID_UNATTEND_SLEEP_TIMEOUT: int;

const PPM_THERMALCONSTRAINT_GUID: int;

const GUID_CRITICAL_POWER_TRANSITION: int;

const GUID_SLEEP_IDLE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: int;

const GUID_PROCESSOR_THROTTLE_MAXIMUM: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT: int;

const GUID_STANDBY_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: int;

const PPM_IDLE_ACCOUNTING_GUID: int;

const GUID_TYPICAL_POWER_SAVINGS: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: int;

const GUID_PROCESSOR_SETTINGS_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_2: int;

const GUID_HIBERNATE_TIMEOUT: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: int;

const GUID_BATTERY_DISCHARGE_ACTION_3: int;

const GUID_PROCESSOR_CORE_PARKING_MIN_CORES: int;

const PPM_IDLESTATES_DATA_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: int;

const GUID_POWERBUTTON_ACTION: int;

const GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: int;

const GUID_AUDIO_PLAYBACK: int;

const GUID_PROCESSOR_THROTTLE_POLICY: int;

const GUID_BATTERY_PERCENTAGE_REMAINING: int;

const GUID_GLOBAL_USER_PRESENCE: int;

const GUID_BATTERY_DISCHARGE_ACTION_2: int;

const GUID_APPLAUNCH_BUTTON: int;

const GUID_PROCESSOR_ALLOW_THROTTLING: int;

const GUID_IDLE_RESILIENCY_PERIOD: int;

const GUID_PROCESSOR_DISTRIBUTE_UTILITY: int;

const GUID_SLEEPBUTTON_ACTION: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: int;

const GUID_PROCESSOR_IDLE_DISABLE: int;

const GUID_CONSOLE_DISPLAY_STATE: int;

const GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_0: int;

const GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: int;

const GUID_INTSTEER_TIME_UNPARK_TRIGGER: int;

const GUID_LIDSWITCH_STATE_CHANGE: int;

const GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: int;

const GUID_SESSION_DISPLAY_STATUS: int;

const GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: int;

const GUID_PROCESSOR_IDLE_STATE_MAXIMUM: int;

const GUID_VIDEO_ANNOYANCE_TIMEOUT: int;

const GUID_BATTERY_DISCHARGE_FLAGS_3: int;

const GUID_PROCESSOR_CORE_PARKING_MAX_CORES: int;

const GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: int;

const GUID_MIN_POWER_SAVINGS: int;

const GUID_DEVICE_IDLE_POLICY: int;

const GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: int;

const GUID_SLEEP_SUBGROUP: int;

const GUID_DISK_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_LEVEL_1: int;

const GUID_BATTERY_DISCHARGE_ACTION_0: int;

const GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: int;

const GUID_BATTERY_DISCHARGE_LEVEL_0: int;

const GUID_VIDEO_DIM_TIMEOUT: int;

const PPM_THERMAL_POLICY_CHANGE_GUID: int;

const GUID_PROCESSOR_PERF_TIME_CHECK: int;

const GUID_LIDOPEN_POWERSTATE: int;

const GUID_PROCESSOR_PARKING_CORE_OVERRIDE: int;

const GUID_PROCESSOR_PERF_INCREASE_TIME: int;

const GUID_MONITOR_POWER_ON: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: int;

const GUID_PROCESSOR_THROTTLE_MINIMUM: int;

const GUID_ALLOW_AWAYMODE: int;

const GUID_DISK_ADAPTIVE_POWERDOWN: int;

const GUID_SYSTEM_BUTTON_SUBGROUP: int;

const PPM_PERFMON_PERFSTATE_GUID: int;

const GUID_ALLOW_SYSTEM_REQUIRED: int;

const GUID_ALLOW_DISPLAY_REQUIRED: int;

const PPM_PERFSTATE_DOMAIN_CHANGE_GUID: int;

const GUID_PROCESSOR_PARKING_PERF_STATE: int;

const GUID_PROCESSOR_PERF_DECREASE_POLICY: int;

const PPM_IDLESTATE_CHANGE_GUID: int;

const GUID_ALLOW_STANDBY_STATES: int;

const GUID_PROCESSOR_PERFSTATE_POLICY: int;

const GUID_BATTERY_DISCHARGE_ACTION_1: int;

const GUID_PROCESSOR_PERF_INCREASE_POLICY: int;

const GUID_VIDEO_SUBGROUP: int;

const GUID_HIBERNATE_FASTS4_POLICY: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: int;

const GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: int;

const PPM_PERFSTATE_CHANGE_GUID: int;

const GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: int;

const GUID_USERINTERFACEBUTTON_ACTION: int;

const GUID_PCIEXPRESS_ASPM_POLICY: int;

const GUID_BATTERY_DISCHARGE_FLAGS_1: int;

const GUID_PROCESSOR_PERF_INCREASE_HISTORY: int;

const GUID_INTSTEER_SUBGROUP: int;

const GUID_DISK_BURST_IGNORE_THRESHOLD: int;

const GUID_DISK_POWERDOWN_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: int;

const PPM_PERFSTATES_DATA_GUID: int;

const NO_SUBGROUP_GUID: int;

const GUID_VIDEO_FULLSCREEN_PLAYBACK: int;

const GUID_PROCESSOR_PERF_BOOST_MODE: int;

const ALL_POWERSCHEMES_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: int;

const GUID_PROCESSOR_IDLE_ALLOW_SCALING: int;

const GUID_PROCESSOR_IDLE_TIME_CHECK: int;

const GUID_INTSTEER_MODE: int;

const GUID_IDLE_RESILIENCY_PLATFORM_STATE: int;

const GUID_BACKGROUND_TASK_NOTIFICATION: int;

const GUID_PROCESSOR_PERF_HISTORY: int;

const GUID_VIDEO_ADAPTIVE_POWERDOWN: int;

const GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: int;

const GUID_PROCESSOR_PERF_BOOST_POLICY: int;

const GUID_SESSION_USER_PRESENCE: int;

const GUID_LIDCLOSE_ACTION: int;

const GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: int;

const PPM_IDLE_ACCOUNTING_EX_GUID: int;

const GUID_PROCESSOR_PERF_DECREASE_TIME: int;

const GUID_MAX_POWER_SAVINGS: int;

const GUID_BATTERY_SUBGROUP: int;

const GUID_PROCESSOR_PERF_DECREASE_HISTORY: int;

const GUID_IDLE_BACKGROUND_TASK: int;

const GUID_POWERSCHEME_PERSONALITY: int;

const GUID_IDLE_RESILIENCY_SUBGROUP: int;

const GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: int;

const GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: int;

const GUID_ACTIVE_POWERSCHEME: int;

const GUID_SYSTEM_AWAYMODE: int;

const DebugFlag: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_driver_object: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const sdv_cancelFptr: int;

procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "MPCalculateE100PatternForFilter"} MPCalculateE100PatternForFilter(actual_pFrame: int, actual_FrameLength: int, actual_pMask: int, actual_MaskLength: int, actual_pSignature: int) returns (Tmp_6: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_6 == -1073741823 || Tmp_6 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPCalculateE100PatternForFilter"} MPCalculateE100PatternForFilter(actual_pFrame: int, actual_FrameLength: int, actual_pMask: int, actual_MaskLength: int, actual_pSignature: int) returns (Tmp_6: int)
{
  var {:scalar} i: int;
  var {:scalar} Tmp_7: int;
  var {:scalar} MaskBit: int;
  var {:pointer} pCurrentMaskByte: int;
  var {:scalar} Signature: int;
  var {:scalar} n: int;
  var {:pointer} Tmp_9: int;
  var {:pointer} Tmp_10: int;
  var {:scalar} MaskOffset: int;
  var {:scalar} Tmp_11: int;
  var {:scalar} BitOffsetInMask: int;
  var {:scalar} status_1: int;
  var {:pointer} pFrame: int;
  var {:scalar} FrameLength: int;
  var {:pointer} pMask: int;
  var {:scalar} MaskLength: int;
  var {:pointer} pSignature: int;

  anon0:
    pFrame := actual_pFrame;
    FrameLength := actual_FrameLength;
    pMask := actual_pMask;
    MaskLength := actual_MaskLength;
    pSignature := actual_pSignature;
    call {:si_unique_call 1} Tmp_9 := __HAVOC_malloc(148);
    call {:si_unique_call 2} Tmp_10 := __HAVOC_malloc(148);
    Signature := 0;
    n := 0;
    i := 0;
    pCurrentMaskByte := pMask;
    MaskOffset := 0;
    BitOffsetInMask := 0;
    MaskBit := 0;
    status_1 := -1073741823;
    Tmp_9 := strConst__li2bpl2;
    call {:si_unique_call 3} DebugPrint(5, 4, Tmp_9);
    assume {:nonnull} pSignature != 0;
    assume pSignature > 0;
    Mem_T.INT4[pSignature] := 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} FrameLength > 128;
    status_1 := -1073741823;
    goto L33;

  L33:
    Tmp_10 := strConst__li2bpl1;
    call {:si_unique_call 4} DebugPrint(5, 4, Tmp_10);
    Tmp_6 := status_1;
    return;

  anon20_Then:
    assume {:partition} 128 >= FrameLength;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} MaskLength > 12;
    status_1 := -1073741823;
    goto L33;

  anon17_Then:
    assume {:partition} 12 >= MaskLength;
    i := 0;
    n := i;
    goto L41;

  L41:
    call {:si_unique_call 5} i, Tmp_7, MaskBit, Signature, n, MaskOffset, Tmp_11, BitOffsetInMask := MPCalculateE100PatternForFilter_loop_L41(i, Tmp_7, MaskBit, pCurrentMaskByte, Signature, n, MaskOffset, Tmp_11, BitOffsetInMask, pFrame, FrameLength, MaskLength);
    goto L41_last;

  L41_last:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 128 > n;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} FrameLength > n;
    BitOffsetInMask := INTMOD(n, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BitOffsetInMask != 0;
    goto L47;

  L47:
    call {:si_unique_call 6} MaskBit := corral_nondet();
    assume {:nonnull} pCurrentMaskByte != 0;
    assume pCurrentMaskByte > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} BAND(MaskBit, Mem_T.INT4[pCurrentMaskByte]) == 0;
    goto L57;

  L57:
    n := n + 1;
    goto L57_dummy;

  L57_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} BAND(MaskBit, Mem_T.INT4[pCurrentMaskByte]) != 0;
    Tmp_11 := n;
    assume {:nonnull} pFrame != 0;
    assume pFrame > 0;
    Tmp_7 := INTMOD(i, 3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(Signature, 0) != 0;
    call {:si_unique_call 7} Signature := corral_nondet();
    goto L56;

  L56:
    i := i + 1;
    goto L57;

  anon23_Then:
    assume {:partition} BAND(Signature, 0) == 0;
    call {:si_unique_call 8} Signature := corral_nondet();
    goto L56;

  anon21_Then:
    assume {:partition} BitOffsetInMask == 0;
    MaskOffset := INTDIV(n, 8);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} MaskOffset != MaskLength;
    goto L47;

  anon24_Then:
    assume {:partition} MaskOffset == MaskLength;
    goto L42;

  L42:
    Signature := BAND(Signature, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(16777216, 33554432), 67108864), 134217728), 268435456), 536870912), 1073741824), -2147483648)));
    assume {:nonnull} pSignature != 0;
    assume pSignature > 0;
    Mem_T.INT4[pSignature] := Signature;
    status_1 := 0;
    goto L33;

  anon19_Then:
    assume {:partition} n >= FrameLength;
    goto L42;

  anon18_Then:
    assume {:partition} n >= 128;
    goto L42;
}



procedure {:origName "NICRemoveAllWakeUpPatterns"} NICRemoveAllWakeUpPatterns(actual_FdoData_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICRemoveAllWakeUpPatterns"} NICRemoveAllWakeUpPatterns(actual_FdoData_1: int)
{
  var {:pointer} sdv_12: int;
  var {:pointer} Tmp_14: int;
  var {:pointer} Tmp_15: int;
  var {:pointer} pPatternEntry: int;
  var {:pointer} Tmp_16: int;
  var {:pointer} FdoData_1: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;

  anon0:
    call {:si_unique_call 9} vslice_dummy_var_1 := __HAVOC_malloc(4);
    FdoData_1 := actual_FdoData_1;
    call {:si_unique_call 10} Tmp_14 := __HAVOC_malloc(128);
    call {:si_unique_call 11} Tmp_16 := __HAVOC_malloc(128);
    assume {:nonnull} FdoData_1 != 0;
    assume FdoData_1 > 0;
    Tmp_15 := PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_1));
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    havoc pPatternEntry;
    Tmp_16 := strConst__li2bpl4;
    call {:si_unique_call 12} DebugPrint(5, 4, Tmp_16);
    goto L8;

  L8:
    call {:si_unique_call 13} sdv_12, pPatternEntry, vslice_dummy_var_2 := NICRemoveAllWakeUpPatterns_loop_L8(sdv_12, pPatternEntry, vslice_dummy_var_2);
    goto L8_last;

  L8_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 14} sdv_12 := sdv_containing_record(pPatternEntry, 0);
    assume {:nonnull} pPatternEntry != 0;
    assume pPatternEntry > 0;
    havoc pPatternEntry;
    call {:si_unique_call 15} vslice_dummy_var_2 := sdv_RemoveEntryList(0);
    call {:si_unique_call 16} ExFreePoolWithTag(0, -1001831600);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    Tmp_14 := strConst__li2bpl3;
    call {:si_unique_call 17} DebugPrint(5, 4, Tmp_14);
    return;
}



procedure {:origName "NICConfigureForWakeUp"} NICConfigureForWakeUp(actual_FdoData_2: int, actual_AddPattern: int) returns (Tmp_17: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_17 == -1073741789 || Tmp_17 == 0 || Tmp_17 == -1073741823 || Tmp_17 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICConfigureForWakeUp"} NICConfigureForWakeUp(actual_FdoData_2: int, actual_AddPattern: int) returns (Tmp_17: int)
{
  var {:pointer} nextPattern: int;
  var {:scalar} bufLen: int;
  var {:pointer} Tmp_18: int;
  var {:pointer} ndisPattern: int;
  var {:dopa} {:scalar} unUsed: int;
  var {:pointer} Tmp_19: int;
  var {:pointer} Buffer: int;
  var {:pointer} wakePattern: int;
  var {:pointer} patternBuffer: int;
  var {:scalar} maskLen: int;
  var {:pointer} nextMask: int;
  var {:scalar} status_2: int;
  var {:pointer} FdoData_2: int;
  var {:scalar} AddPattern: int;
  var boogieTmp: int;

  anon0:
    call {:si_unique_call 18} unUsed := __HAVOC_malloc(4);
    call {:si_unique_call 19} Buffer := __HAVOC_malloc(4);
    FdoData_2 := actual_FdoData_2;
    AddPattern := actual_AddPattern;
    call {:si_unique_call 20} Tmp_18 := __HAVOC_malloc(124);
    call {:si_unique_call 21} Tmp_19 := __HAVOC_malloc(136);
    assume {:nonnull} Buffer != 0;
    assume Buffer > 0;
    call {:si_unique_call 22} boogieTmp := __HAVOC_malloc(608);
    call {:si_unique_call 23} wakePattern := __HAVOC_malloc(24);
    assume {:nonnull} wakePattern != 0;
    assume wakePattern > 0;
    Mem_T.INT4[wakePattern] := -1;
    assume {:nonnull} Buffer != 0;
    assume Buffer > 0;
    havoc patternBuffer;
    ndisPattern := patternBuffer;
    call {:si_unique_call 24} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    havoc maskLen;
    nextMask := patternBuffer;
    nextPattern := nextMask;
    assume {:nonnull} nextMask != 0;
    assume nextMask > 0;
    Mem_T.INT4[nextMask] := 63;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    havoc bufLen;
    call {:si_unique_call 25} sdv_RtlCopyMemory(0, 0, 6);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} AddPattern != 0;
    call {:si_unique_call 26} status_2 := NICAddWakeUpPattern(FdoData_2, Buffer, bufLen, unUsed, unUsed);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_2 >= 0;
    goto L42;

  L42:
    Tmp_17 := status_2;
    return;

  anon8_Then:
    assume {:partition} 0 > status_2;
    Tmp_18 := strConst__li2bpl5;
    call {:si_unique_call 27} DebugPrint(5, 4, Tmp_18);
    goto L42;

  anon7_Then:
    assume {:partition} AddPattern == 0;
    call {:si_unique_call 28} status_2 := NICRemoveWakeUpPattern(FdoData_2, Buffer, bufLen, unUsed, unUsed);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_2 < 0;
    Tmp_19 := strConst__li2bpl6;
    call {:si_unique_call 29} DebugPrint(5, 4, Tmp_19);
    goto L42;

  anon9_Then:
    assume {:partition} 0 <= status_2;
    goto L42;
}



procedure {:origName "MPIssueScbPoMgmtCommand"} MPIssueScbPoMgmtCommand(actual_FdoData_3: int, actual_pNewFilter: int, actual_WaitForScb: int) returns (Tmp_21: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_21 == 0 || Tmp_21 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPIssueScbPoMgmtCommand"} MPIssueScbPoMgmtCommand(actual_FdoData_3: int, actual_pNewFilter: int, actual_WaitForScb: int) returns (Tmp_21: int)
{
  var {:pointer} Tmp_22: int;
  var {:pointer} Tmp_24: int;
  var {:pointer} Tmp_25: int;
  var {:scalar} status_3: int;
  var {:pointer} FdoData_3: int;

  anon0:
    FdoData_3 := actual_FdoData_3;
    call {:si_unique_call 30} Tmp_22 := __HAVOC_malloc(116);
    call {:si_unique_call 31} Tmp_25 := __HAVOC_malloc(128);
    status_3 := -1073741823;
    Tmp_22 := strConst__li2bpl8;
    call {:si_unique_call 32} DebugPrint(5, 4, Tmp_22);
    call {:si_unique_call 33} status_3 := MPSetUpFilterCB(FdoData_3);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_3 != 0;
    goto L15;

  L15:
    Tmp_25 := strConst__li2bpl7;
    call {:si_unique_call 34} DebugPrint(5, 4, Tmp_25);
    Tmp_21 := status_3;
    return;

  anon5_Then:
    assume {:partition} status_3 == 0;
    assume {:nonnull} FdoData_3 != 0;
    assume FdoData_3 > 0;
    havoc Tmp_24;
    assume {:nonnull} FdoData_3 != 0;
    assume FdoData_3 > 0;
    assume {:nonnull} Tmp_24 != 0;
    assume Tmp_24 > 0;
    call {:si_unique_call 35} status_3 := D100SubmitCommandBlockAndWait(FdoData_3);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_3 != 0;
    status_3 := -1073741668;
    goto L15;

  anon6_Then:
    assume {:partition} status_3 == 0;
    goto L15;
}



procedure {:origName "NICRemoveWakeUpPattern"} NICRemoveWakeUpPattern(actual_FdoData_4: int, actual_InformationBuffer: int, actual_InformationBufferLength: int, actual_BytesRead: int, actual_BytesNeeded: int) returns (Tmp_26: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_26 == -1073741789 || Tmp_26 == 0 || Tmp_26 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICRemoveWakeUpPattern"} NICRemoveWakeUpPattern(actual_FdoData_4: int, actual_InformationBuffer: int, actual_InformationBufferLength: int, actual_BytesRead: int, actual_BytesNeeded: int) returns (Tmp_26: int)
{
  var {:pointer} Tmp_28: int;
  var {:pointer} pReqPattern: int;
  var {:pointer} Tmp_29: int;
  var {:scalar} bIsThisThePattern: int;
  var {:pointer} Tmp_30: int;
  var {:dopa} {:scalar} result: int;
  var {:pointer} sdv_19: int;
  var {:pointer} pWakeUpPattern_1: int;
  var {:pointer} pCurrPattern: int;
  var {:scalar} status_4: int;
  var {:pointer} pPatternEntry_1: int;
  var {:pointer} Tmp_31: int;
  var {:pointer} FdoData_4: int;
  var {:pointer} InformationBuffer: int;
  var {:scalar} InformationBufferLength: int;
  var {:pointer} BytesRead: int;
  var {:pointer} BytesNeeded: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_1: int;

  anon0:
    call {:si_unique_call 36} result := __HAVOC_malloc(4);
    FdoData_4 := actual_FdoData_4;
    InformationBuffer := actual_InformationBuffer;
    InformationBufferLength := actual_InformationBufferLength;
    BytesRead := actual_BytesRead;
    BytesNeeded := actual_BytesNeeded;
    call {:si_unique_call 37} Tmp_28 := __HAVOC_malloc(112);
    call {:si_unique_call 38} Tmp_29 := __HAVOC_malloc(4);
    call {:si_unique_call 39} Tmp_30 := __HAVOC_malloc(112);
    status_4 := -1073741823;
    pReqPattern := InformationBuffer;
    assume {:nonnull} FdoData_4 != 0;
    assume FdoData_4 > 0;
    Tmp_31 := PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_4));
    assume {:nonnull} Tmp_31 != 0;
    assume Tmp_31 > 0;
    havoc pPatternEntry_1;
    Tmp_30 := strConst__li2bpl10;
    call {:si_unique_call 40} DebugPrint(5, 4, Tmp_30);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 24 > InformationBufferLength;
    status_4 := -1073741789;
    assume {:nonnull} BytesNeeded != 0;
    assume BytesNeeded > 0;
    Mem_T.INT4[BytesNeeded] := 24;
    goto L20;

  L20:
    Tmp_28 := strConst__li2bpl9;
    call {:si_unique_call 41} DebugPrint(5, 4, Tmp_28);
    Tmp_26 := status_4;
    return;

  anon11_Then:
    assume {:partition} InformationBufferLength >= 24;
    assume {:nonnull} pReqPattern != 0;
    assume pReqPattern > 0;
    havoc vslice_dummy_var_0;
    havoc vslice_dummy_var_1;
    call {:si_unique_call 42} status_4 := RtlULongAdd(vslice_dummy_var_0, vslice_dummy_var_1, result);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_4 >= 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.INT4[result] > InformationBufferLength;
    status_4 := -1073741789;
    assume {:nonnull} BytesNeeded != 0;
    assume BytesNeeded > 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    Mem_T.INT4[BytesNeeded] := Mem_T.INT4[result];
    goto L20;

  anon13_Then:
    assume {:partition} InformationBufferLength >= Mem_T.INT4[result];
    assume {:nonnull} BytesRead != 0;
    assume BytesRead > 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    Mem_T.INT4[BytesRead] := Mem_T.INT4[result];
    goto L32;

  L32:
    call {:si_unique_call 43} Tmp_29, bIsThisThePattern, sdv_19, pWakeUpPattern_1, pCurrPattern, pPatternEntry_1 := NICRemoveWakeUpPattern_loop_L32(pReqPattern, Tmp_29, bIsThisThePattern, sdv_19, pWakeUpPattern_1, pCurrPattern, pPatternEntry_1);
    goto L32_last;

  L32_last:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    bIsThisThePattern := 0;
    pWakeUpPattern_1 := 0;
    pCurrPattern := 0;
    call {:si_unique_call 44} sdv_19 := sdv_containing_record(pPatternEntry_1, 0);
    pWakeUpPattern_1 := sdv_19;
    assume {:nonnull} pWakeUpPattern_1 != 0;
    assume pWakeUpPattern_1 > 0;
    havoc Tmp_29;
    pCurrPattern := Tmp_29;
    assume {:nonnull} pPatternEntry_1 != 0;
    assume pPatternEntry_1 > 0;
    havoc pPatternEntry_1;
    call {:si_unique_call 45} bIsThisThePattern := MPAreTwoPatternsEqual(pReqPattern, pCurrPattern);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} bIsThisThePattern == 1;
    call {:si_unique_call 46} vslice_dummy_var_3 := sdv_RemoveEntryList(0);
    call {:si_unique_call 47} ExFreePoolWithTag(0, -1001831600);
    status_4 := 0;
    goto L20;

  anon15_Then:
    assume {:partition} bIsThisThePattern != 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon14_Then:
    goto L20;

  anon12_Then:
    assume {:partition} 0 > status_4;
    goto L20;
}



procedure {:origName "NICExtractPMInfoFromPciSpace"} NICExtractPMInfoFromPciSpace(actual_FdoData_5: int, actual_pPciConfig: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICExtractPMInfoFromPciSpace"} NICExtractPMInfoFromPciSpace(actual_FdoData_5: int, actual_pPciConfig: int)
{
  var {:scalar} PmCaps: int;
  var {:scalar} PMCSR_1: int;
  var {:pointer} pPmPciConfig: int;
  var {:pointer} FdoData_5: int;
  var {:pointer} pPciConfig: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;

  anon0:
    call {:si_unique_call 48} PmCaps := __HAVOC_malloc(8);
    call {:si_unique_call 49} PMCSR_1 := __HAVOC_malloc(32);
    call {:si_unique_call 50} vslice_dummy_var_4 := __HAVOC_malloc(4);
    FdoData_5 := actual_FdoData_5;
    pPciConfig := actual_pPciConfig;
    pPmPciConfig := pPciConfig;
    assume {:nonnull} PmCaps != 0;
    assume PmCaps > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PmCaps != 0;
    assume PmCaps > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PmCaps != 0;
    assume PmCaps > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} FdoData_5 != 0;
    assume FdoData_5 > 0;
    goto L9;

  L9:
    assume {:nonnull} PmCaps != 0;
    assume PmCaps > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} FdoData_5 != 0;
    assume FdoData_5 > 0;
    goto L11;

  L11:
    assume {:nonnull} PmCaps != 0;
    assume PmCaps > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} FdoData_5 != 0;
    assume FdoData_5 > 0;
    goto L13;

  L13:
    assume {:nonnull} PmCaps != 0;
    assume PmCaps > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} FdoData_5 != 0;
    assume FdoData_5 > 0;
    goto L15;

  L15:
    assume {:nonnull} PmCaps != 0;
    assume PmCaps > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} FdoData_5 != 0;
    assume FdoData_5 > 0;
    goto L17;

  L17:
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    assume {:nonnull} pPmPciConfig != 0;
    assume pPmPciConfig > 0;
    assume {:nonnull} PMCSR_1 != 0;
    assume PMCSR_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 51} vslice_dummy_var_5 := MpClearPME_En(FdoData_5, PMCSR_1);
    goto L1;

  L1:
    return;

  anon18_Then:
    goto L1;

  anon16_Then:
    goto L17;

  anon15_Then:
    goto L15;

  anon14_Then:
    goto L13;

  anon13_Then:
    goto L11;

  anon17_Then:
    goto L9;
}



procedure {:origName "NICAddWakeUpPattern"} NICAddWakeUpPattern(actual_FdoData_6: int, actual_InformationBuffer_1: int, actual_InformationBufferLength_1: int, actual_BytesRead_1: int, actual_BytesNeeded_1: int) returns (Tmp_34: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_34 == -1073741789 || Tmp_34 == 0 || Tmp_34 == -1073741823 || Tmp_34 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICAddWakeUpPattern"} NICAddWakeUpPattern(actual_FdoData_6: int, actual_InformationBuffer_1: int, actual_InformationBufferLength_1: int, actual_BytesRead_1: int, actual_BytesNeeded_1: int) returns (Tmp_34: int)
{
  var {:pointer} Tmp_35: int;
  var {:pointer} Tmp_37: int;
  var {:pointer} Tmp_38: int;
  var {:dopa} {:scalar} Signature_1: int;
  var {:dopa} {:scalar} CopyLength: int;
  var {:pointer} Tmp_40: int;
  var {:pointer} sdv_25: int;
  var {:pointer} Tmp_41: int;
  var {:pointer} pWakeUpPattern_2: int;
  var {:scalar} AllocationLength: int;
  var {:scalar} status_5: int;
  var {:pointer} pPmPattern: int;
  var {:pointer} InformationBuffer_1: int;
  var {:scalar} InformationBufferLength_1: int;
  var {:pointer} BytesRead_1: int;
  var {:pointer} BytesNeeded_1: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;

  anon0:
    call {:si_unique_call 52} Signature_1 := __HAVOC_malloc(4);
    call {:si_unique_call 53} CopyLength := __HAVOC_malloc(4);
    InformationBuffer_1 := actual_InformationBuffer_1;
    InformationBufferLength_1 := actual_InformationBufferLength_1;
    BytesRead_1 := actual_BytesRead_1;
    BytesNeeded_1 := actual_BytesNeeded_1;
    call {:si_unique_call 54} Tmp_35 := __HAVOC_malloc(4);
    call {:si_unique_call 55} Tmp_38 := __HAVOC_malloc(100);
    call {:si_unique_call 56} Tmp_41 := __HAVOC_malloc(100);
    status_5 := -1073741823;
    pWakeUpPattern_2 := 0;
    AllocationLength := 0;
    pPmPattern := 0;
    assume {:nonnull} Signature_1 != 0;
    assume Signature_1 > 0;
    Mem_T.INT4[Signature_1] := 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Mem_T.INT4[CopyLength] := 0;
    Tmp_38 := strConst__li2bpl12;
    call {:si_unique_call 57} DebugPrint(5, 4, Tmp_38);
    pPmPattern := InformationBuffer_1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 24 > InformationBufferLength_1;
    status_5 := -1073741789;
    assume {:nonnull} BytesNeeded_1 != 0;
    assume BytesNeeded_1 > 0;
    Mem_T.INT4[BytesNeeded_1] := 24;
    goto L26;

  L26:
    Tmp_41 := strConst__li2bpl11;
    call {:si_unique_call 58} DebugPrint(5, 4, Tmp_41);
    Tmp_34 := status_5;
    return;

  anon14_Then:
    assume {:partition} InformationBufferLength_1 >= 24;
    assume {:nonnull} pPmPattern != 0;
    assume pPmPattern > 0;
    havoc vslice_dummy_var_2;
    havoc vslice_dummy_var_3;
    call {:si_unique_call 59} status_5 := RtlULongAdd(vslice_dummy_var_2, vslice_dummy_var_3, CopyLength);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_5 >= 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[CopyLength] > InformationBufferLength_1;
    status_5 := -1073741789;
    assume {:nonnull} BytesNeeded_1 != 0;
    assume BytesNeeded_1 > 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Mem_T.INT4[BytesNeeded_1] := Mem_T.INT4[CopyLength];
    goto L26;

  anon12_Then:
    assume {:partition} InformationBufferLength_1 >= Mem_T.INT4[CopyLength];
    assume {:nonnull} BytesRead_1 != 0;
    assume BytesRead_1 > 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Mem_T.INT4[BytesRead_1] := Mem_T.INT4[CopyLength];
    Tmp_37 := pPmPattern;
    Tmp_40 := pPmPattern;
    assume {:nonnull} pPmPattern != 0;
    assume pPmPattern > 0;
    havoc vslice_dummy_var_4;
    havoc vslice_dummy_var_5;
    call {:si_unique_call 60} status_5 := MPCalculateE100PatternForFilter(Tmp_40, vslice_dummy_var_4, Tmp_37, vslice_dummy_var_5, Signature_1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_5 == 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    AllocationLength := 20 + Mem_T.INT4[CopyLength];
    call {:si_unique_call 61} sdv_25 := ExAllocatePoolWithTag(512, AllocationLength, -1001831600);
    pWakeUpPattern_2 := sdv_25;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pWakeUpPattern_2 != 0;
    call {:si_unique_call 62} sdv_RtlZeroMemory(0, AllocationLength);
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    assume {:nonnull} Signature_1 != 0;
    assume Signature_1 > 0;
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    Mem_T.INT4[Signature__MP_WAKE_PATTERN(pWakeUpPattern_2)] := Mem_T.INT4[Signature_1];
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    havoc Tmp_35;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    call {:si_unique_call 63} sdv_RtlMoveMemory(0, 0, Mem_T.INT4[CopyLength]);
    call {:si_unique_call 64} vslice_dummy_var_6 := sdv_ExInterlockedInsertHeadList(0, 0, 0);
    status_5 := 0;
    goto L26;

  anon15_Then:
    assume {:partition} pWakeUpPattern_2 == 0;
    goto L26;

  anon13_Then:
    assume {:partition} status_5 != 0;
    goto L26;

  anon11_Then:
    assume {:partition} 0 > status_5;
    goto L26;
}



procedure {:origName "MPSetUpFilterCB"} MPSetUpFilterCB(actual_FdoData_7: int) returns (Tmp_42: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_42 == 0 || Tmp_42 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetUpFilterCB"} MPSetUpFilterCB(actual_FdoData_7: int) returns (Tmp_42: int)
{
  var {:pointer} pLastPattern: int;
  var {:pointer} pFilterCb: int;
  var {:scalar} Tmp_43: int;
  var {:scalar} Tmp_44: int;
  var {:scalar} Curr: int;
  var {:pointer} sdv_27: int;
  var {:pointer} NonTxCmdBlockHdr: int;
  var {:scalar} sdv_28: int;
  var {:pointer} Tmp_45: int;
  var {:pointer} Tmp_46: int;
  var {:pointer} Tmp_47: int;
  var {:pointer} pWakeUpPattern_3: int;
  var {:pointer} Tmp_48: int;
  var {:scalar} status_6: int;
  var {:dopa} {:scalar} Next: int;
  var {:pointer} pPatternEntry_2: int;
  var {:pointer} Tmp_49: int;
  var {:pointer} Tmp_51: int;
  var {:pointer} FdoData_7: int;

  anon0:
    call {:si_unique_call 65} Next := __HAVOC_malloc(4);
    FdoData_7 := actual_FdoData_7;
    call {:si_unique_call 66} Tmp_45 := __HAVOC_malloc(84);
    call {:si_unique_call 67} Tmp_47 := __HAVOC_malloc(64);
    call {:si_unique_call 68} Tmp_49 := __HAVOC_malloc(84);
    call {:si_unique_call 69} Tmp_51 := __HAVOC_malloc(64);
    status_6 := 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    havoc NonTxCmdBlockHdr;
    pFilterCb := NonTxCmdBlockHdr;
    Curr := 0;
    assume {:nonnull} Next != 0;
    assume Next > 0;
    Mem_T.INT4[Next] := 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    Tmp_48 := PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_7));
    assume {:nonnull} Tmp_48 != 0;
    assume Tmp_48 > 0;
    havoc pPatternEntry_2;
    Tmp_45 := strConst__li2bpl14;
    call {:si_unique_call 70} DebugPrint(5, 4, Tmp_45);
    call {:si_unique_call 71} sdv_RtlZeroMemory(0, 72);
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(NonTxCmdBlockHdr)] := 0;
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    goto L24;

  L24:
    call {:si_unique_call 72} Tmp_43, Curr, sdv_27, Tmp_46, Tmp_47, pWakeUpPattern_3, pPatternEntry_2 := MPSetUpFilterCB_loop_L24(pFilterCb, Tmp_43, Curr, sdv_27, Tmp_46, Tmp_47, pWakeUpPattern_3, Next, pPatternEntry_2);
    goto L24_last;

  L24_last:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto L40;

  L40:
    Tmp_44 := Curr;
    assume {:nonnull} pFilterCb != 0;
    assume pFilterCb > 0;
    havoc Tmp_51;
    pLastPattern := Tmp_51 + Tmp_44 * 4;
    assume {:nonnull} pLastPattern != 0;
    assume pLastPattern > 0;
    Mem_T.INT4[pLastPattern + 3 * 4] := BOR(Mem_T.INT4[pLastPattern + 3 * 4], 128);
    call {:si_unique_call 73} sdv_28 := WaitScb(FdoData_7);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_28 != 0;
    goto L47;

  L47:
    Tmp_49 := strConst__li2bpl13;
    call {:si_unique_call 74} DebugPrint(5, 4, Tmp_49);
    Tmp_42 := status_6;
    return;

  anon9_Then:
    assume {:partition} sdv_28 == 0;
    status_6 := -1073741668;
    goto L47;

  anon7_Then:
    pWakeUpPattern_3 := 0;
    call {:si_unique_call 75} sdv_27 := sdv_containing_record(pPatternEntry_2, 0);
    pWakeUpPattern_3 := sdv_27;
    assume {:nonnull} pPatternEntry_2 != 0;
    assume pPatternEntry_2 > 0;
    havoc pPatternEntry_2;
    assume {:nonnull} Next != 0;
    assume Next > 0;
    Curr := Mem_T.INT4[Next];
    Tmp_43 := Curr;
    assume {:nonnull} pFilterCb != 0;
    assume pFilterCb > 0;
    havoc Tmp_47;
    Tmp_46 := Tmp_47 + Tmp_43 * 4;
    call {:si_unique_call 76} MPCreateProgrammableFilter(pWakeUpPattern_3, Tmp_46, Next);
    assume {:nonnull} Next != 0;
    assume Next > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[Next] >= 16;
    goto L40;

  anon8_Then:
    assume {:partition} 16 > Mem_T.INT4[Next];
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    assume false;
    return;
}



procedure {:origName "MPAreTwoPatternsEqual"} MPAreTwoPatternsEqual(actual_pNdisPattern1: int, actual_pNdisPattern2: int) returns (Tmp_52: int);
  free ensures {:va_keep} Tmp_52 == 0 || Tmp_52 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPAreTwoPatternsEqual"} MPAreTwoPatternsEqual(actual_pNdisPattern1: int, actual_pNdisPattern2: int) returns (Tmp_52: int)
{
  var {:scalar} sdv_29: int;
  var {:scalar} sdv_30: int;
  var {:scalar} bEqual: int;
  var {:pointer} pNdisPattern1: int;
  var {:pointer} pNdisPattern2: int;

  anon0:
    pNdisPattern1 := actual_pNdisPattern1;
    pNdisPattern2 := actual_pNdisPattern2;
    bEqual := 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    bEqual := 0;
    goto L47;

  L47:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  L38:
    Tmp_52 := bEqual;
    return;

  anon22_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    bEqual := 0;
    goto L50;

  L50:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon23_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_29 != 0;
    bEqual := 0;
    goto L56;

  L56:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon25_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bEqual := 0;
    goto L59;

  L59:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon26_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_30 != 0;
    bEqual := 0;
    goto L65;

  L65:
    goto L38;

  anon27_Then:
    assume {:partition} sdv_30 == 0;
    bEqual := 1;
    goto L65;

  anon20_Then:
    bEqual := 1;
    goto L59;

  anon24_Then:
    assume {:partition} sdv_29 == 0;
    bEqual := 1;
    goto L56;

  anon19_Then:
    bEqual := 1;
    goto L50;

  anon21_Then:
    bEqual := 1;
    goto L47;
}



procedure {:origName "MPSetPowerD0Private"} MPSetPowerD0Private(actual_FdoData_8: int) returns (Tmp_54: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_54 == -1073741668 || Tmp_54 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetPowerD0Private"} MPSetPowerD0Private(actual_FdoData_8: int) returns (Tmp_54: int)
{
  var {:pointer} Tmp_55: int;
  var {:pointer} Tmp_56: int;
  var {:pointer} pPMDR: int;
  var {:scalar} status_7: int;
  var {:pointer} FdoData_8: int;

  anon0:
    FdoData_8 := actual_FdoData_8;
    call {:si_unique_call 77} Tmp_55 := __HAVOC_malloc(96);
    call {:si_unique_call 78} Tmp_56 := __HAVOC_malloc(96);
    Tmp_56 := strConst__li2bpl15;
    call {:si_unique_call 79} DebugPrint(5, 4, Tmp_56);
    call {:si_unique_call 80} pPMDR := HwReadPowerPMDR(FdoData_8);
    call {:si_unique_call 81} status_7 := NICInitializeAdapter(FdoData_8);
    assume {:nonnull} pPMDR != 0;
    assume pPMDR > 0;
    Mem_T.INT4[pPMDR] := BOR(Mem_T.INT4[pPMDR], BOR(BOR(32, 64), 128));
    call {:si_unique_call 82} NICIssueSelectiveReset(FdoData_8);
    Tmp_55 := strConst__li2bpl16;
    call {:si_unique_call 83} DebugPrint(5, 4, Tmp_55);
    Tmp_54 := status_7;
    return;
}



procedure {:origName "MpClearPME_En"} MpClearPME_En(actual_FdoData_9: int, actual_structPtr888PMCSR: int) returns (Tmp_58: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_58 == 0 || Tmp_58 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MpClearPME_En"} MpClearPME_En(actual_FdoData_9: int, actual_structPtr888PMCSR: int) returns (Tmp_58: int)
{
  var {:scalar} PMCSR: int;
  var {:scalar} ulResult: int;
  var {:scalar} status_8: int;
  var {:pointer} FdoData_9: int;
  var {:pointer} structPtr888PMCSR: int;

  anon0:
    call {:si_unique_call 84} PMCSR := __HAVOC_malloc(32);
    FdoData_9 := actual_FdoData_9;
    structPtr888PMCSR := actual_structPtr888PMCSR;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} structPtr888PMCSR != 0;
    assume structPtr888PMCSR > 0;
    assume {:nonnull} PMCSR != 0;
    assume PMCSR > 0;
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} ulResult == 2;
    status_8 := 0;
    goto L13;

  L13:
    Tmp_58 := status_8;
    return;

  anon3_Then:
    assume {:partition} ulResult != 2;
    status_8 := -1073741823;
    goto L13;
}



procedure {:origName "MPCreateProgrammableFilter"} MPCreateProgrammableFilter(actual_pMpWakePattern: int, actual_pFilter: int, actual_pNext: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPCreateProgrammableFilter"} MPCreateProgrammableFilter(actual_pMpWakePattern: int, actual_pFilter: int, actual_pNext: int)
{
  var {:pointer} pCurrentUlong: int;
  var {:pointer} Tmp_60: int;
  var {:pointer} pCurrentByte: int;
  var {:pointer} Tmp_62: int;
  var {:scalar} NumUlongs: int;
  var {:pointer} pNdisPattern: int;
  var {:pointer} pSignature_1: int;
  var {:scalar} dwMaskSize: int;
  var {:scalar} NumBytesWritten: int;
  var {:scalar} dwMLen: int;
  var {:scalar} LengthOfFilter: int;
  var {:pointer} Tmp_63: int;
  var {:pointer} pMpWakePattern: int;
  var {:pointer} pFilter: int;
  var {:pointer} pNext: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_6: int;

  anon0:
    call {:si_unique_call 85} vslice_dummy_var_7 := __HAVOC_malloc(4);
    pMpWakePattern := actual_pMpWakePattern;
    pFilter := actual_pFilter;
    pNext := actual_pNext;
    call {:si_unique_call 86} Tmp_60 := __HAVOC_malloc(128);
    call {:si_unique_call 87} Tmp_62 := __HAVOC_malloc(128);
    call {:si_unique_call 88} Tmp_63 := __HAVOC_malloc(4);
    pCurrentByte := pFilter;
    NumBytesWritten := 0;
    pCurrentUlong := pFilter;
    assume {:nonnull} pMpWakePattern != 0;
    assume pMpWakePattern > 0;
    havoc Tmp_63;
    pNdisPattern := Tmp_63;
    LengthOfFilter := 0;
    Tmp_62 := strConst__li2bpl17;
    call {:si_unique_call 89} DebugPrint(5, 4, Tmp_62);
    assume {:nonnull} pNdisPattern != 0;
    assume pNdisPattern > 0;
    havoc LengthOfFilter;
    assume {:nonnull} pNdisPattern != 0;
    assume pNdisPattern > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    LengthOfFilter := LengthOfFilter + 1;
    goto L18;

  L18:
    LengthOfFilter := LengthOfFilter + 1;
    assume {:nonnull} pNext != 0;
    assume pNext > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.INT4[pNext] + LengthOfFilter < 16;
    assume {:nonnull} pCurrentUlong != 0;
    assume pCurrentUlong > 0;
    Mem_T.INT4[pCurrentUlong] := 0;
    assume {:nonnull} pNdisPattern != 0;
    assume pNdisPattern > 0;
    havoc dwMaskSize;
    dwMLen := 0;
    assume {:nonnull} pNdisPattern != 0;
    assume pNdisPattern > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    dwMaskSize := dwMaskSize + 1;
    goto L28;

  L28:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} dwMaskSize == 1;
    dwMLen := 0;
    goto L30;

  L30:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} dwMaskSize == 2;
    dwMLen := 1;
    goto L32;

  L32:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} dwMaskSize == 3;
    dwMLen := 3;
    goto L34;

  L34:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} dwMaskSize == 4;
    dwMLen := 7;
    goto L36;

  L36:
    call {:si_unique_call 90} dwMLen := corral_nondet();
    assume {:nonnull} pCurrentByte != 0;
    assume pCurrentByte > 0;
    Mem_T.INT4[pCurrentByte + 3 * 4] := BOR(Mem_T.INT4[pCurrentByte + 3 * 4], dwMLen);
    assume {:nonnull} pMpWakePattern != 0;
    assume pMpWakePattern > 0;
    pSignature_1 := Signature__MP_WAKE_PATTERN(pMpWakePattern);
    assume {:nonnull} pCurrentByte != 0;
    assume pCurrentByte > 0;
    assume {:nonnull} pSignature_1 != 0;
    assume pSignature_1 > 0;
    Mem_T.INT4[pCurrentByte] := Mem_T.INT4[pSignature_1];
    assume {:nonnull} pCurrentByte != 0;
    assume pCurrentByte > 0;
    assume {:nonnull} pSignature_1 != 0;
    assume pSignature_1 > 0;
    Mem_T.INT4[pCurrentByte + 1 * 4] := Mem_T.INT4[pSignature_1 + 1 * 4];
    assume {:nonnull} pCurrentByte != 0;
    assume pCurrentByte > 0;
    assume {:nonnull} pSignature_1 != 0;
    assume pSignature_1 > 0;
    Mem_T.INT4[pCurrentByte + 2 * 4] := Mem_T.INT4[pSignature_1 + 2 * 4];
    NumBytesWritten := 4;
    pCurrentUlong := pCurrentByte;
    assume {:nonnull} pNdisPattern != 0;
    assume pNdisPattern > 0;
    havoc vslice_dummy_var_6;
    call {:si_unique_call 91} sdv_RtlMoveMemory(0, 0, vslice_dummy_var_6);
    assume {:nonnull} pNdisPattern != 0;
    assume pNdisPattern > 0;
    havoc NumBytesWritten;
    NumUlongs := INTDIV(NumBytesWritten, 4);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} INTMOD(NumBytesWritten, 4) != 0;
    NumUlongs := NumUlongs + 1;
    goto L57;

  L57:
    assume {:nonnull} pNext != 0;
    assume pNext > 0;
    Mem_T.INT4[pNext] := Mem_T.INT4[pNext] + NumUlongs;
    Tmp_60 := strConst__li2bpl18;
    call {:si_unique_call 92} DebugPrint(5, 4, Tmp_60);
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:partition} INTMOD(NumBytesWritten, 4) == 0;
    goto L57;

  anon20_Then:
    assume {:partition} dwMaskSize != 4;
    goto L36;

  anon19_Then:
    assume {:partition} dwMaskSize != 3;
    goto L34;

  anon18_Then:
    assume {:partition} dwMaskSize != 2;
    goto L32;

  anon17_Then:
    assume {:partition} dwMaskSize != 1;
    goto L30;

  anon23_Then:
    goto L28;

  anon22_Then:
    assume {:partition} 16 <= Mem_T.INT4[pNext] + LengthOfFilter;
    goto L1;

  anon21_Then:
    goto L18;
}



procedure {:origName "MPSetPowerLowPrivate"} MPSetPowerLowPrivate(actual_Context: int) returns (Tmp_65: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_65 == 0 || Tmp_65 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetPowerLowPrivate"} MPSetPowerLowPrivate(actual_Context: int) returns (Tmp_65: int)
{
  var {:scalar} IntStatus: int;
  var {:pointer} Tmp_67: int;
  var {:scalar} PMCSR_2: int;
  var {:pointer} Tmp_68: int;
  var {:pointer} Tmp_69: int;
  var {:scalar} ulResult_1: int;
  var {:pointer} FdoData_10: int;
  var {:pointer} Tmp_70: int;
  var {:pointer} Tmp_71: int;
  var {:scalar} Filter: int;
  var {:pointer} Context: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 93} PMCSR_2 := __HAVOC_malloc(32);
    call {:si_unique_call 94} Filter := __HAVOC_malloc(32);
    Context := actual_Context;
    call {:si_unique_call 95} Tmp_67 := __HAVOC_malloc(100);
    call {:si_unique_call 96} Tmp_70 := __HAVOC_malloc(100);
    call {:si_unique_call 97} Tmp_71 := __HAVOC_malloc(116);
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    FdoData_10 := Context;
    Tmp_70 := strConst__li2bpl21;
    call {:si_unique_call 98} DebugPrint(5, 4, Tmp_70);
    call {:si_unique_call 99} sdv_RtlZeroMemory(0, 12);
    call {:si_unique_call 100} NICDisableInterrupt(FdoData_10);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    havoc Tmp_69;
    assume {:nonnull} Tmp_69 != 0;
    assume Tmp_69 > 0;
    havoc IntStatus;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    havoc Tmp_68;
    assume {:nonnull} Tmp_68 != 0;
    assume Tmp_68 > 0;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 101} vslice_dummy_var_8 := MPIssueScbPoMgmtCommand(FdoData_10, Filter, 1);
    goto L35;

  L35:
    Tmp_67 := strConst__li2bpl19;
    call {:si_unique_call 102} DebugPrint(5, 4, Tmp_67);
    Tmp_65 := 1;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ulResult_1 != 2;
    Tmp_71 := strConst__li2bpl20;
    call {:si_unique_call 103} DebugPrint(2, 4, Tmp_71);
    Tmp_65 := 0;
    goto L1;

  anon7_Then:
    assume {:partition} ulResult_1 == 2;
    assume {:nonnull} PMCSR_2 != 0;
    assume PMCSR_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 104} vslice_dummy_var_9 := MpClearPME_En(FdoData_10, PMCSR_2);
    goto L35;

  anon8_Then:
    goto L35;
}



procedure {:origName "HwReadPowerPMDR"} HwReadPowerPMDR(actual_Adapter: int) returns (Tmp_76: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwReadPowerPMDR"} HwReadPowerPMDR(actual_Adapter: int) returns (Tmp_76: int)
{
  var {:pointer} pPMDR_1: int;
  var {:pointer} Adapter: int;

  anon0:
    Adapter := actual_Adapter;
    pPMDR_1 := 0;
    assume {:nonnull} Adapter != 0;
    assume Adapter > 0;
    havoc pPMDR_1;
    assume {:nonnull} pPMDR_1 != 0;
    assume pPMDR_1 > 0;
    Tmp_76 := pPMDR_1;
    return;
}



procedure {:origName "MPSetPowerLow"} MPSetPowerLow(actual_FdoData_12: int, actual_PowerState_6: int) returns (Tmp_78: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_78 == -1073741668 || Tmp_78 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetPowerLow"} MPSetPowerLow(actual_FdoData_12: int, actual_PowerState_6: int) returns (Tmp_78: int)
{
  var {:scalar} status_10: int;
  var {:pointer} Tmp_80: int;
  var {:pointer} FdoData_12: int;
  var vslice_dummy_var_10: int;

  anon0:
    FdoData_12 := actual_FdoData_12;
    status_10 := 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    havoc Tmp_80;
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 105} status_10 := D100IssueScbCommand(FdoData_12, 4, 1);
    goto L6;

  L6:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_10 != 0;
    goto L15;

  L15:
    Tmp_78 := status_10;
    return;

  anon5_Then:
    assume {:partition} status_10 == 0;
    call {:si_unique_call 106} vslice_dummy_var_10 := KeSynchronizeExecution(0, li2bplFunctionConstant1377, FdoData_12);
    call {:si_unique_call 107} IoDisconnectInterrupt(0);
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    status_10 := 0;
    goto L15;

  anon6_Then:
    goto L6;
}



procedure {:origName "ShiftInBits"} ShiftInBits(actual_FdoData_13: int, actual_CSRBaseIoAddress: int) returns (Tmp_81: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ShiftInBits"} ShiftInBits(actual_FdoData_13: int, actual_CSRBaseIoAddress: int) returns (Tmp_81: int)
{
  var {:scalar} i_1: int;
  var {:dopa} {:scalar} x: int;
  var {:pointer} Tmp_82: int;
  var {:scalar} d: int;
  var {:pointer} Tmp_83: int;
  var {:pointer} FdoData_13: int;
  var {:pointer} CSRBaseIoAddress: int;
  var boogieTmp: int;

  anon0:
    call {:si_unique_call 108} x := __HAVOC_malloc(4);
    FdoData_13 := actual_FdoData_13;
    CSRBaseIoAddress := actual_CSRBaseIoAddress;
    Tmp_83 := CSRBaseIoAddress;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} x != 0;
    assume x > 0;
    call {:si_unique_call 109} boogieTmp := NICReadPortUShort(Tmp_83);
    Mem_T.INT4[x] := boogieTmp;
    goto L11;

  L11:
    assume {:nonnull} x != 0;
    assume x > 0;
    Mem_T.INT4[x] := BAND(Mem_T.INT4[x], BNOT(BOR(4, 8)));
    d := 0;
    i_1 := 0;
    goto L14;

  L14:
    call {:si_unique_call 110} i_1, Tmp_82, d, boogieTmp := ShiftInBits_loop_L14(i_1, x, Tmp_82, d, FdoData_13, CSRBaseIoAddress, boogieTmp);
    goto L14_last;

  L14_last:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 16 > i_1;
    call {:si_unique_call 111} d := corral_nondet();
    call {:si_unique_call 112} RaiseClock(FdoData_13, x, CSRBaseIoAddress);
    Tmp_82 := CSRBaseIoAddress;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} x != 0;
    assume x > 0;
    call {:si_unique_call 113} boogieTmp := NICReadPortUShort(Tmp_82);
    Mem_T.INT4[x] := boogieTmp;
    goto L25;

  L25:
    assume {:nonnull} x != 0;
    assume x > 0;
    Mem_T.INT4[x] := BAND(Mem_T.INT4[x], BNOT(4));
    assume {:nonnull} x != 0;
    assume x > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mem_T.INT4[x], 8) != 0;
    d := BOR(d, 1);
    goto L27;

  L27:
    call {:si_unique_call 114} LowerClock(FdoData_13, x, CSRBaseIoAddress);
    i_1 := i_1 + 1;
    goto L27_dummy;

  L27_dummy:
    assume false;
    return;

  anon12_Then:
    assume {:partition} BAND(Mem_T.INT4[x], 8) == 0;
    goto L27;

  anon11_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} x != 0;
    assume x > 0;
    call {:si_unique_call 115} boogieTmp := NICReadRegisterUShort(Tmp_82);
    Mem_T.INT4[x] := boogieTmp;
    goto L25;

  anon9_Then:
    assume {:partition} i_1 >= 16;
    Tmp_81 := d;
    return;

  anon10_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} x != 0;
    assume x > 0;
    call {:si_unique_call 116} boogieTmp := NICReadRegisterUShort(Tmp_83);
    Mem_T.INT4[x] := boogieTmp;
    goto L11;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_11: int;

  anon0:
    call {:si_unique_call 117} vslice_dummy_var_11 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ReadEEprom"} ReadEEprom(actual_FdoData_14: int, actual_CSRBaseIoAddress_1: int, actual_Reg: int, actual_AddressSize: int) returns (Tmp_87: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ReadEEprom"} ReadEEprom(actual_FdoData_14: int, actual_CSRBaseIoAddress_1: int, actual_Reg: int, actual_AddressSize: int) returns (Tmp_87: int)
{
  var {:scalar} x_1: int;
  var {:pointer} Tmp_89: int;
  var {:scalar} data: int;
  var {:pointer} Tmp_90: int;
  var {:pointer} FdoData_14: int;
  var {:pointer} CSRBaseIoAddress_1: int;
  var {:scalar} Reg: int;
  var {:scalar} AddressSize: int;

  anon0:
    FdoData_14 := actual_FdoData_14;
    CSRBaseIoAddress_1 := actual_CSRBaseIoAddress_1;
    Reg := actual_Reg;
    AddressSize := actual_AddressSize;
    Tmp_90 := CSRBaseIoAddress_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    call {:si_unique_call 118} x_1 := NICReadPortUShort(Tmp_90);
    goto L10;

  L10:
    x_1 := BAND(x_1, BNOT(BOR(BOR(1, 4), 8)));
    x_1 := BOR(x_1, 2);
    Tmp_89 := CSRBaseIoAddress_1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    call {:si_unique_call 119} NICWritePortUShort(Tmp_89, x_1);
    goto L16;

  L16:
    call {:si_unique_call 120} ShiftOutBits(FdoData_14, 6, 3, CSRBaseIoAddress_1);
    call {:si_unique_call 121} ShiftOutBits(FdoData_14, Reg, AddressSize, CSRBaseIoAddress_1);
    call {:si_unique_call 122} data := ShiftInBits(FdoData_14, CSRBaseIoAddress_1);
    call {:si_unique_call 123} EEpromCleanup(FdoData_14, CSRBaseIoAddress_1);
    Tmp_87 := data;
    return;

  anon6_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    call {:si_unique_call 124} NICWriteRegisterUShort(Tmp_89, x_1);
    goto L16;

  anon5_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    call {:si_unique_call 125} x_1 := NICReadRegisterUShort(Tmp_90);
    goto L10;
}



procedure {:origName "RaiseClock"} RaiseClock(actual_FdoData_15: int, actual_x_2: int, actual_CSRBaseIoAddress_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RaiseClock"} RaiseClock(actual_FdoData_15: int, actual_x_2: int, actual_CSRBaseIoAddress_2: int)
{
  var {:pointer} Tmp_92: int;
  var {:pointer} FdoData_15: int;
  var {:pointer} x_2: int;
  var {:pointer} CSRBaseIoAddress_2: int;
  var vslice_dummy_var_12: int;

  anon0:
    call {:si_unique_call 126} vslice_dummy_var_12 := __HAVOC_malloc(4);
    FdoData_15 := actual_FdoData_15;
    x_2 := actual_x_2;
    CSRBaseIoAddress_2 := actual_CSRBaseIoAddress_2;
    assume {:nonnull} x_2 != 0;
    assume x_2 > 0;
    Mem_T.INT4[x_2] := BOR(Mem_T.INT4[x_2], 1);
    Tmp_92 := CSRBaseIoAddress_2;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    assume {:nonnull} x_2 != 0;
    assume x_2 > 0;
    call {:si_unique_call 127} NICWritePortUShort(Tmp_92, Mem_T.INT4[x_2]);
    goto L14;

  L14:
    return;

  anon3_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    assume {:nonnull} x_2 != 0;
    assume x_2 > 0;
    call {:si_unique_call 128} NICWriteRegisterUShort(Tmp_92, Mem_T.INT4[x_2]);
    goto L14;
}



procedure {:origName "GetEEpromSize"} GetEEpromSize(actual_FdoData_16: int, actual_CSRBaseIoAddress_3: int) returns (Tmp_94: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetEEpromSize"} GetEEpromSize(actual_FdoData_16: int, actual_CSRBaseIoAddress_3: int) returns (Tmp_94: int)
{
  var {:scalar} size: int;
  var {:dopa} {:scalar} x_3: int;
  var {:pointer} Tmp_96: int;
  var {:pointer} Tmp_97: int;
  var {:pointer} Tmp_98: int;
  var {:pointer} Tmp_99: int;
  var {:pointer} Tmp_100: int;
  var {:pointer} FdoData_16: int;
  var {:pointer} CSRBaseIoAddress_3: int;
  var boogieTmp: int;
  var vslice_dummy_var_13: int;

  anon0:
    call {:si_unique_call 129} x_3 := __HAVOC_malloc(4);
    FdoData_16 := actual_FdoData_16;
    CSRBaseIoAddress_3 := actual_CSRBaseIoAddress_3;
    size := 1;
    Tmp_98 := CSRBaseIoAddress_3;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 130} boogieTmp := NICReadPortUShort(Tmp_98);
    Mem_T.INT4[x_3] := boogieTmp;
    goto L12;

  L12:
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    Mem_T.INT4[x_3] := BAND(Mem_T.INT4[x_3], BNOT(BOR(BOR(1, 4), 8)));
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    Mem_T.INT4[x_3] := BOR(Mem_T.INT4[x_3], 2);
    Tmp_99 := CSRBaseIoAddress_3;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 131} NICWritePortUShort(Tmp_99, Mem_T.INT4[x_3]);
    goto L18;

  L18:
    call {:si_unique_call 132} ShiftOutBits(FdoData_16, 6, 3, CSRBaseIoAddress_3);
    Tmp_100 := CSRBaseIoAddress_3;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 133} boogieTmp := NICReadPortUShort(Tmp_100);
    Mem_T.INT4[x_3] := boogieTmp;
    goto L26;

  L26:
    call {:si_unique_call 134} size, Tmp_96, Tmp_97, boogieTmp := GetEEpromSize_loop_L26(size, x_3, Tmp_96, Tmp_97, FdoData_16, CSRBaseIoAddress_3, boogieTmp);
    goto L26_last;

  L26_last:
    size := size * 2;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    Mem_T.INT4[x_3] := BOR(Mem_T.INT4[x_3], 8);
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    Mem_T.INT4[x_3] := BAND(Mem_T.INT4[x_3], BNOT(4));
    Tmp_96 := CSRBaseIoAddress_3;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 135} NICWritePortUShort(Tmp_96, Mem_T.INT4[x_3]);
    goto L72;

  L72:
    call {:si_unique_call 136} RaiseClock(FdoData_16, x_3, CSRBaseIoAddress_3);
    call {:si_unique_call 137} LowerClock(FdoData_16, x_3, CSRBaseIoAddress_3);
    Tmp_97 := CSRBaseIoAddress_3;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 138} boogieTmp := NICReadPortUShort(Tmp_97);
    Mem_T.INT4[x_3] := boogieTmp;
    goto L47;

  L47:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} size > 256;
    size := 0;
    goto L51;

  L51:
    call {:si_unique_call 139} vslice_dummy_var_13 := ShiftInBits(FdoData_16, CSRBaseIoAddress_3);
    call {:si_unique_call 140} EEpromCleanup(FdoData_16, CSRBaseIoAddress_3);
    Tmp_94 := size;
    return;

  anon15_Then:
    assume {:partition} 256 >= size;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BAND(Mem_T.INT4[x_3], 8) == 0;
    goto L51;

  anon16_Then:
    assume {:partition} BAND(Mem_T.INT4[x_3], 8) != 0;
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 141} boogieTmp := NICReadRegisterUShort(Tmp_97);
    Mem_T.INT4[x_3] := boogieTmp;
    goto L47;

  anon20_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 142} NICWriteRegisterUShort(Tmp_96, Mem_T.INT4[x_3]);
    goto L72;

  anon19_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 143} boogieTmp := NICReadRegisterUShort(Tmp_100);
    Mem_T.INT4[x_3] := boogieTmp;
    goto L26;

  anon18_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 144} NICWriteRegisterUShort(Tmp_99, Mem_T.INT4[x_3]);
    goto L18;

  anon17_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} x_3 != 0;
    assume x_3 > 0;
    call {:si_unique_call 145} boogieTmp := NICReadRegisterUShort(Tmp_98);
    Mem_T.INT4[x_3] := boogieTmp;
    goto L12;
}



procedure {:origName "EEpromCleanup"} EEpromCleanup(actual_FdoData_17: int, actual_CSRBaseIoAddress_4: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "EEpromCleanup"} EEpromCleanup(actual_FdoData_17: int, actual_CSRBaseIoAddress_4: int)
{
  var {:dopa} {:scalar} x_4: int;
  var {:pointer} Tmp_101: int;
  var {:pointer} Tmp_102: int;
  var {:pointer} FdoData_17: int;
  var {:pointer} CSRBaseIoAddress_4: int;
  var boogieTmp: int;
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 146} x_4 := __HAVOC_malloc(4);
    call {:si_unique_call 147} vslice_dummy_var_14 := __HAVOC_malloc(4);
    FdoData_17 := actual_FdoData_17;
    CSRBaseIoAddress_4 := actual_CSRBaseIoAddress_4;
    Tmp_101 := CSRBaseIoAddress_4;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} x_4 != 0;
    assume x_4 > 0;
    call {:si_unique_call 148} boogieTmp := NICReadPortUShort(Tmp_101);
    Mem_T.INT4[x_4] := boogieTmp;
    goto L9;

  L9:
    assume {:nonnull} x_4 != 0;
    assume x_4 > 0;
    Mem_T.INT4[x_4] := BAND(Mem_T.INT4[x_4], BNOT(BOR(2, 4)));
    Tmp_102 := CSRBaseIoAddress_4;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} x_4 != 0;
    assume x_4 > 0;
    call {:si_unique_call 149} NICWritePortUShort(Tmp_102, Mem_T.INT4[x_4]);
    goto L14;

  L14:
    call {:si_unique_call 150} RaiseClock(FdoData_17, x_4, CSRBaseIoAddress_4);
    call {:si_unique_call 151} LowerClock(FdoData_17, x_4, CSRBaseIoAddress_4);
    return;

  anon6_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} x_4 != 0;
    assume x_4 > 0;
    call {:si_unique_call 152} NICWriteRegisterUShort(Tmp_102, Mem_T.INT4[x_4]);
    goto L14;

  anon5_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} x_4 != 0;
    assume x_4 > 0;
    call {:si_unique_call 153} boogieTmp := NICReadRegisterUShort(Tmp_101);
    Mem_T.INT4[x_4] := boogieTmp;
    goto L9;
}



procedure {:origName "LowerClock"} LowerClock(actual_FdoData_18: int, actual_x_5: int, actual_CSRBaseIoAddress_5: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "LowerClock"} LowerClock(actual_FdoData_18: int, actual_x_5: int, actual_CSRBaseIoAddress_5: int)
{
  var {:pointer} Tmp_105: int;
  var {:pointer} FdoData_18: int;
  var {:pointer} x_5: int;
  var {:pointer} CSRBaseIoAddress_5: int;
  var vslice_dummy_var_15: int;

  anon0:
    call {:si_unique_call 154} vslice_dummy_var_15 := __HAVOC_malloc(4);
    FdoData_18 := actual_FdoData_18;
    x_5 := actual_x_5;
    CSRBaseIoAddress_5 := actual_CSRBaseIoAddress_5;
    assume {:nonnull} x_5 != 0;
    assume x_5 > 0;
    Mem_T.INT4[x_5] := BAND(Mem_T.INT4[x_5], BNOT(1));
    Tmp_105 := CSRBaseIoAddress_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} x_5 != 0;
    assume x_5 > 0;
    call {:si_unique_call 155} NICWritePortUShort(Tmp_105, Mem_T.INT4[x_5]);
    goto L14;

  L14:
    return;

  anon3_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} x_5 != 0;
    assume x_5 > 0;
    call {:si_unique_call 156} NICWriteRegisterUShort(Tmp_105, Mem_T.INT4[x_5]);
    goto L14;
}



procedure {:origName "ShiftOutBits"} ShiftOutBits(actual_FdoData_19: int, actual_data_2: int, actual_count: int, actual_CSRBaseIoAddress_6: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ShiftOutBits"} ShiftOutBits(actual_FdoData_19: int, actual_data_2: int, actual_count: int, actual_CSRBaseIoAddress_6: int)
{
  var {:dopa} {:scalar} x_6: int;
  var {:scalar} mask: int;
  var {:pointer} Tmp_110: int;
  var {:pointer} Tmp_111: int;
  var {:pointer} Tmp_112: int;
  var {:pointer} FdoData_19: int;
  var {:scalar} data_2: int;
  var {:pointer} CSRBaseIoAddress_6: int;
  var boogieTmp: int;
  var vslice_dummy_var_16: int;

  anon0:
    call {:si_unique_call 157} vslice_dummy_var_16 := __HAVOC_malloc(4);
    call {:si_unique_call 158} x_6 := __HAVOC_malloc(4);
    FdoData_19 := actual_FdoData_19;
    data_2 := actual_data_2;
    CSRBaseIoAddress_6 := actual_CSRBaseIoAddress_6;
    call {:si_unique_call 159} mask := corral_nondet();
    Tmp_111 := CSRBaseIoAddress_6;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    call {:si_unique_call 160} boogieTmp := NICReadPortUShort(Tmp_111);
    Mem_T.INT4[x_6] := boogieTmp;
    goto L11;

  L11:
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    Mem_T.INT4[x_6] := BAND(Mem_T.INT4[x_6], BNOT(BOR(4, 8)));
    goto L12;

  L12:
    call {:si_unique_call 161} mask, Tmp_112 := ShiftOutBits_loop_L12(x_6, mask, Tmp_112, FdoData_19, data_2, CSRBaseIoAddress_6);
    goto L12_last;

  L12_last:
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    Mem_T.INT4[x_6] := BAND(Mem_T.INT4[x_6], BNOT(4));
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(data_2, mask) != 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    Mem_T.INT4[x_6] := BOR(Mem_T.INT4[x_6], 4);
    goto L14;

  L14:
    Tmp_112 := CSRBaseIoAddress_6;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    call {:si_unique_call 162} NICWritePortUShort(Tmp_112, Mem_T.INT4[x_6]);
    goto L44;

  L44:
    call {:si_unique_call 163} RaiseClock(FdoData_19, x_6, CSRBaseIoAddress_6);
    call {:si_unique_call 164} LowerClock(FdoData_19, x_6, CSRBaseIoAddress_6);
    call {:si_unique_call 165} mask := corral_nondet();
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} mask == 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    Mem_T.INT4[x_6] := BAND(Mem_T.INT4[x_6], BNOT(4));
    Tmp_110 := CSRBaseIoAddress_6;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    call {:si_unique_call 166} NICWritePortUShort(Tmp_110, Mem_T.INT4[x_6]);
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    call {:si_unique_call 167} NICWriteRegisterUShort(Tmp_110, Mem_T.INT4[x_6]);
    goto L1;

  anon14_Then:
    assume {:partition} mask != 0;
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    call {:si_unique_call 168} NICWriteRegisterUShort(Tmp_112, Mem_T.INT4[x_6]);
    goto L44;

  anon12_Then:
    assume {:partition} BAND(data_2, mask) == 0;
    goto L14;

  anon11_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} x_6 != 0;
    assume x_6 > 0;
    call {:si_unique_call 169} boogieTmp := NICReadRegisterUShort(Tmp_111);
    Mem_T.INT4[x_6] := boogieTmp;
    goto L11;
}



procedure {:origName "GetEEpromAddressSize"} GetEEpromAddressSize(actual_Size: int) returns (Tmp_113: int);
  free ensures {:va_keep} Tmp_113 == 8 || Tmp_113 == 0 || Tmp_113 == 7 || Tmp_113 == 6;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetEEpromAddressSize"} GetEEpromAddressSize(actual_Size: int) returns (Tmp_113: int)
{
  var {:scalar} Size: int;

  anon0:
    Size := actual_Size;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Size != 64;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Size != 128;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Size == 256;
    Tmp_113 := 8;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} Size != 256;
    Tmp_113 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} Size == 128;
    Tmp_113 := 7;
    goto L1;

  anon7_Then:
    assume {:partition} Size == 64;
    Tmp_113 := 6;
    goto L1;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_17: int;

  anon0:
    call {:si_unique_call 170} vslice_dummy_var_17 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICReturnRFD"} NICReturnRFD(actual_FdoData_21: int, actual_pMpRfd_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICReturnRFD"} NICReturnRFD(actual_FdoData_21: int, actual_pMpRfd_1: int)
{
  var {:scalar} sdv_63: int;
  var {:pointer} Tmp_125: int;
  var {:pointer} pLastMpRfd: int;
  var {:pointer} pHwRfd: int;
  var {:pointer} FdoData_21: int;
  var {:pointer} pMpRfd_1: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;

  anon0:
    call {:si_unique_call 171} vslice_dummy_var_18 := __HAVOC_malloc(4);
    FdoData_21 := actual_FdoData_21;
    pMpRfd_1 := actual_pMpRfd_1;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    havoc pHwRfd;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(pHwRfd))] := 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    call {:si_unique_call 172} sdv_63 := sdv_IsListEmpty(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_63 != 0;
    goto L16;

  L16:
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    call {:si_unique_call 173} vslice_dummy_var_19 := sdv_InsertTailList(RecvList__FDO_DATA(FdoData_21), pMpRfd_1);
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    return;

  anon3_Then:
    assume {:partition} sdv_63 == 0;
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    Tmp_125 := RecvList__FDO_DATA(FdoData_21);
    assume {:nonnull} Tmp_125 != 0;
    assume Tmp_125 > 0;
    havoc pLastMpRfd;
    assume {:nonnull} pLastMpRfd != 0;
    assume pLastMpRfd > 0;
    havoc pHwRfd;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    goto L16;
}



procedure {:origName "DbgDevicePowerString"} DbgDevicePowerString(actual_Type: int) returns (Tmp_155: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DbgDevicePowerString"} DbgDevicePowerString(actual_Type: int) returns (Tmp_155: int)
{
  var {:scalar} Type: int;

  anon0:
    Type := actual_Type;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Type != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Type != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Type != 2;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Type != 3;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Type != 4;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Type == 5;
    Tmp_155 := strConst__li2bpl43;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} Type != 5;
    Tmp_155 := strConst__li2bpl37;
    goto L1;

  anon15_Then:
    assume {:partition} Type == 4;
    Tmp_155 := strConst__li2bpl42;
    goto L1;

  anon16_Then:
    assume {:partition} Type == 3;
    Tmp_155 := strConst__li2bpl41;
    goto L1;

  anon17_Then:
    assume {:partition} Type == 2;
    Tmp_155 := strConst__li2bpl40;
    goto L1;

  anon18_Then:
    assume {:partition} Type == 1;
    Tmp_155 := strConst__li2bpl39;
    goto L1;

  anon13_Then:
    assume {:partition} Type == 0;
    Tmp_155 := strConst__li2bpl38;
    goto L1;
}



procedure {:origName "DbgPowerMinorFunctionString"} DbgPowerMinorFunctionString(actual_MinorFunction: int) returns (Tmp_164: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DbgPowerMinorFunctionString"} DbgPowerMinorFunctionString(actual_MinorFunction: int) returns (Tmp_164: int)
{
  var {:scalar} MinorFunction: int;

  anon0:
    MinorFunction := actual_MinorFunction;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} MinorFunction != 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction == 3;
    Tmp_164 := strConst__li2bpl48;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} MinorFunction != 3;
    Tmp_164 := strConst__li2bpl44;
    goto L1;

  anon11_Then:
    assume {:partition} MinorFunction == 2;
    Tmp_164 := strConst__li2bpl47;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction == 1;
    Tmp_164 := strConst__li2bpl46;
    goto L1;

  anon9_Then:
    assume {:partition} MinorFunction == 0;
    Tmp_164 := strConst__li2bpl45;
    goto L1;
}



procedure {:origName "PciDrvDispatchSetPowerState"} PciDrvDispatchSetPowerState(actual_DeviceObject_2: int, actual_Irp: int) returns (Tmp_166: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchSetPowerState"} PciDrvDispatchSetPowerState(actual_DeviceObject_2: int, actual_Irp: int) returns (Tmp_166: int)
{
  var {:scalar} Tmp_168: int;
  var {:pointer} Tmp_169: int;
  var {:pointer} stack_2: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    Irp := actual_Irp;
    call {:si_unique_call 174} Tmp_169 := __HAVOC_malloc(148);
    call {:si_unique_call 175} stack_2 := sdv_IoGetCurrentIrpStackLocation(Irp);
    Tmp_169 := strConst__li2bpl49;
    call {:si_unique_call 176} DebugPrint(5, 4, Tmp_169);
    call {:si_unique_call 177} sdv_do_paged_code_check();
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 178} Tmp_168 := PciDrvDispatchDeviceSetPower(DeviceObject_2, Irp);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L22;

  L22:
    Tmp_166 := Tmp_168;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    call {:si_unique_call 179} Tmp_168 := PciDrvDispatchSystemPowerIrp(DeviceObject_2, Irp);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L22;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvGetPowerPoliciesDeviceState"} PciDrvGetPowerPoliciesDeviceState(actual_SIrp_1: int, actual_DeviceObject_3: int, actual_DevicePowerState: int) returns (Tmp_170: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_170 == 0 || Tmp_170 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetPowerPoliciesDeviceState"} PciDrvGetPowerPoliciesDeviceState(actual_SIrp_1: int, actual_DeviceObject_3: int, actual_DevicePowerState: int) returns (Tmp_170: int)
{
  var {:scalar} wakeSupported: int;
  var {:scalar} Tmp_171: int;
  var {:pointer} fdoData_2: int;
  var {:pointer} Tmp_172: int;
  var {:scalar} systemState: int;
  var {:scalar} deviceState_1: int;
  var {:pointer} stack_3: int;
  var {:pointer} SIrp_1: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} DevicePowerState: int;

  anon0:
    SIrp_1 := actual_SIrp_1;
    DeviceObject_3 := actual_DeviceObject_3;
    DevicePowerState := actual_DevicePowerState;
    call {:si_unique_call 180} Tmp_172 := __HAVOC_malloc(28);
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc fdoData_2;
    call {:si_unique_call 181} stack_3 := sdv_IoGetCurrentIrpStackLocation(SIrp_1);
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    havoc systemState;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} systemState == 1;
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := 1;
    Tmp_170 := 0;
    goto L1;

  L1:
    return;

  anon32_Then:
    assume {:partition} systemState != 1;
    assume {:nonnull} fdoData_2 != 0;
    assume fdoData_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := 4;
    Tmp_170 := 0;
    goto L1;

  anon23_Then:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 4 >= systemState;
    assume {:nonnull} fdoData_2 != 0;
    assume fdoData_2 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    Tmp_170 := -1073741823;
    goto L1;

  anon25_Then:
    goto L21;

  L21:
    deviceState_1 := 4;
    goto L24;

  L24:
    call {:si_unique_call 182} wakeSupported, Tmp_171, Tmp_172, deviceState_1 := PciDrvGetPowerPoliciesDeviceState_loop_L24(wakeSupported, Tmp_171, fdoData_2, Tmp_172, systemState, deviceState_1);
    goto L24_last;

  L24_last:
    Tmp_171 := systemState;
    assume {:nonnull} fdoData_2 != 0;
    assume fdoData_2 > 0;
    havoc Tmp_172;
    assume {:nonnull} Tmp_172 != 0;
    assume Tmp_172 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} deviceState_1 >= Mem_T.INT4[Tmp_172 + Tmp_171 * 4];
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} deviceState_1 != 1;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} deviceState_1 != 2;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} deviceState_1 != 3;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} deviceState_1 == 4;
    assume {:nonnull} fdoData_2 != 0;
    assume fdoData_2 > 0;
    havoc wakeSupported;
    goto L33;

  L33:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} wakeSupported != 0;
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := deviceState_1;
    Tmp_170 := 0;
    goto L1;

  anon28_Then:
    assume {:partition} wakeSupported == 0;
    deviceState_1 := deviceState_1 - 1;
    goto anon28_Then_dummy;

  anon28_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} deviceState_1 != 4;
    wakeSupported := 0;
    goto L33;

  anon30_Then:
    assume {:partition} deviceState_1 == 3;
    assume {:nonnull} fdoData_2 != 0;
    assume fdoData_2 > 0;
    havoc wakeSupported;
    goto L33;

  anon31_Then:
    assume {:partition} deviceState_1 == 2;
    assume {:nonnull} fdoData_2 != 0;
    assume fdoData_2 > 0;
    havoc wakeSupported;
    goto L33;

  anon27_Then:
    assume {:partition} deviceState_1 == 1;
    assume {:nonnull} fdoData_2 != 0;
    assume fdoData_2 > 0;
    havoc wakeSupported;
    goto L33;

  anon33_Then:
    assume {:partition} Mem_T.INT4[Tmp_172 + Tmp_171 * 4] > deviceState_1;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 4 >= systemState;
    Tmp_170 := -1073741823;
    goto L1;

  anon26_Then:
    assume {:partition} systemState > 4;
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := 4;
    Tmp_170 := 0;
    goto L1;

  anon24_Then:
    assume {:partition} systemState > 4;
    goto L21;
}



procedure {:origName "PciDrvDispatchQueryPowerState"} PciDrvDispatchQueryPowerState(actual_DeviceObject_5: int, actual_Irp_2: int) returns (Tmp_180: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchQueryPowerState"} PciDrvDispatchQueryPowerState(actual_DeviceObject_5: int, actual_Irp_2: int) returns (Tmp_180: int)
{
  var {:scalar} Tmp_181: int;
  var {:pointer} Tmp_183: int;
  var {:pointer} stack_5: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_2: int;

  anon0:
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_2 := actual_Irp_2;
    call {:si_unique_call 183} Tmp_183 := __HAVOC_malloc(156);
    call {:si_unique_call 184} stack_5 := sdv_IoGetCurrentIrpStackLocation(Irp_2);
    Tmp_183 := strConst__li2bpl53;
    call {:si_unique_call 185} DebugPrint(5, 4, Tmp_183);
    call {:si_unique_call 186} sdv_do_paged_code_check();
    assume {:nonnull} stack_5 != 0;
    assume stack_5 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 187} Tmp_181 := PciDrvDispatchDeviceQueryPower(DeviceObject_5, Irp_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L22;

  L22:
    Tmp_180 := Tmp_181;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    call {:si_unique_call 188} Tmp_181 := PciDrvDispatchSystemPowerIrp(DeviceObject_5, Irp_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L22;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchPower"} PciDrvDispatchPower(actual_DeviceObject_6: int, actual_Irp_3: int) returns (Tmp_184: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPower"} PciDrvDispatchPower(actual_DeviceObject_6: int, actual_Irp_3: int) returns (Tmp_184: int)
{
  var {:pointer} Tmp_185: int;
  var {:pointer} fdoData_4: int;
  var {:pointer} sdv_104: int;
  var {:pointer} sdv_106: int;
  var {:pointer} sdv_108: int;
  var {:scalar} status_17: int;
  var {:pointer} Tmp_187: int;
  var {:pointer} stack_6: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_3: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;

  anon0:
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_3 := actual_Irp_3;
    call {:si_unique_call 189} Tmp_187 := __HAVOC_malloc(104);
    call {:si_unique_call 190} sdv_do_paged_code_check();
    call {:si_unique_call 191} stack_6 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc fdoData_4;
    assume {:nonnull} fdoData_4 != 0;
    assume fdoData_4 > 0;
    havoc vslice_dummy_var_7;
    call {:si_unique_call 192} sdv_104 := DbgDevicePowerString(vslice_dummy_var_7);
    assume {:nonnull} fdoData_4 != 0;
    assume fdoData_4 > 0;
    havoc vslice_dummy_var_8;
    call {:si_unique_call 193} sdv_106 := DbgSystemPowerString(vslice_dummy_var_8);
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    Tmp_185 := strConst__li2bpl55;
    goto L23;

  L23:
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    havoc vslice_dummy_var_9;
    call {:si_unique_call 194} sdv_108 := DbgPowerMinorFunctionString(vslice_dummy_var_9);
    Tmp_187 := strConst__li2bpl56;
    call {:si_unique_call 195} DebugPrint(4, 4, Tmp_187);
    call {:si_unique_call 196} vslice_dummy_var_20 := PciDrvIoIncrement(fdoData_4);
    assume {:nonnull} fdoData_4 != 0;
    assume fdoData_4 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    call {:si_unique_call 197} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    call {:si_unique_call 198} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 199} vslice_dummy_var_21 := PciDrvIoDecrement(fdoData_4);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    Tmp_184 := -1073741810;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:nonnull} fdoData_4 != 0;
    assume fdoData_4 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} fdoData_4 != 0;
    assume fdoData_4 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_4)] != 0;
    call {:si_unique_call 200} PoStartNextPowerIrp(0);
    call {:si_unique_call 201} sdv_IoSkipCurrentIrpStackLocation(Irp_3);
    call {:si_unique_call 202} status_17 := PoCallDriver#1(0, Irp_3);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 203} vslice_dummy_var_22 := PciDrvIoDecrement(fdoData_4);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    Tmp_184 := status_17;
    goto L1;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_4)] == 0;
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    call {:si_unique_call 204} status_17 := PciDrvDispatchQueryPowerState(DeviceObject_6, Irp_3);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto L78;

  L78:
    Tmp_184 := status_17;
    goto L1;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    goto L64;

  L64:
    call {:si_unique_call 205} status_17 := PciDrvDispatchPowerDefault#1(DeviceObject_6, Irp_3);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 206} vslice_dummy_var_23 := PciDrvIoDecrement(fdoData_4);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto L78;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    call {:si_unique_call 207} status_17 := PciDrvDispatchSetPowerState(DeviceObject_6, Irp_3);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L78;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    goto L64;

  anon41_Then:
    call {:si_unique_call 208} status_17 := PciDrvDispatchWaitWake(DeviceObject_6, Irp_3);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L78;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    call {:si_unique_call 209} PoStartNextPowerIrp(0);
    call {:si_unique_call 210} sdv_IoSkipCurrentIrpStackLocation(Irp_3);
    call {:si_unique_call 211} status_17 := PoCallDriver#1(0, Irp_3);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 212} vslice_dummy_var_24 := PciDrvIoDecrement(fdoData_4);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    Tmp_184 := status_17;
    goto L1;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    Tmp_185 := strConst__li2bpl54;
    goto L23;
}



procedure {:origName "DbgSystemPowerString"} DbgSystemPowerString(actual_Type_1: int) returns (Tmp_188: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DbgSystemPowerString"} DbgSystemPowerString(actual_Type_1: int) returns (Tmp_188: int)
{
  var {:scalar} Type_1: int;

  anon0:
    Type_1 := actual_Type_1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Type_1 != 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Type_1 != 1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Type_1 != 2;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Type_1 != 3;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Type_1 != 4;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Type_1 != 5;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Type_1 != 6;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Type_1 == 7;
    Tmp_188 := strConst__li2bpl65;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} Type_1 != 7;
    Tmp_188 := strConst__li2bpl57;
    goto L1;

  anon19_Then:
    assume {:partition} Type_1 == 6;
    Tmp_188 := strConst__li2bpl64;
    goto L1;

  anon20_Then:
    assume {:partition} Type_1 == 5;
    Tmp_188 := strConst__li2bpl63;
    goto L1;

  anon21_Then:
    assume {:partition} Type_1 == 4;
    Tmp_188 := strConst__li2bpl62;
    goto L1;

  anon22_Then:
    assume {:partition} Type_1 == 3;
    Tmp_188 := strConst__li2bpl61;
    goto L1;

  anon23_Then:
    assume {:partition} Type_1 == 2;
    Tmp_188 := strConst__li2bpl60;
    goto L1;

  anon24_Then:
    assume {:partition} Type_1 == 1;
    Tmp_188 := strConst__li2bpl59;
    goto L1;

  anon17_Then:
    assume {:partition} Type_1 == 0;
    Tmp_188 := strConst__li2bpl58;
    goto L1;
}



procedure {:origName "PciDrvDispatchSystemPowerIrp"} PciDrvDispatchSystemPowerIrp(actual_DeviceObject_7: int, actual_Irp_4: int) returns (Tmp_190: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchSystemPowerIrp"} PciDrvDispatchSystemPowerIrp(actual_DeviceObject_7: int, actual_Irp_4: int) returns (Tmp_190: int)
{
  var {:pointer} Tmp_191: int;
  var {:pointer} Tmp_192: int;
  var {:pointer} sdv_114: int;
  var {:pointer} fdoData_5: int;
  var {:pointer} stack_7: int;
  var {:pointer} DeviceObject_7: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_10: int;

  anon0:
    DeviceObject_7 := actual_DeviceObject_7;
    Irp_4 := actual_Irp_4;
    call {:si_unique_call 213} Tmp_191 := __HAVOC_malloc(132);
    call {:si_unique_call 214} Tmp_192 := __HAVOC_malloc(152);
    call {:si_unique_call 215} stack_7 := sdv_IoGetCurrentIrpStackLocation(Irp_4);
    assume {:nonnull} DeviceObject_7 != 0;
    assume DeviceObject_7 > 0;
    havoc fdoData_5;
    Tmp_192 := strConst__li2bpl67;
    call {:si_unique_call 216} DebugPrint(5, 4, Tmp_192);
    call {:si_unique_call 217} sdv_do_paged_code_check();
    assume {:nonnull} stack_7 != 0;
    assume stack_7 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} fdoData_5 != 0;
    assume fdoData_5 > 0;
    assume {:nonnull} stack_7 != 0;
    assume stack_7 > 0;
    assume {:nonnull} fdoData_5 != 0;
    assume fdoData_5 > 0;
    havoc vslice_dummy_var_10;
    call {:si_unique_call 218} sdv_114 := DbgSystemPowerString(vslice_dummy_var_10);
    Tmp_191 := strConst__li2bpl66;
    call {:si_unique_call 219} DebugPrint(4, 4, Tmp_191);
    goto L17;

  L17:
    call {:si_unique_call 220} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 221} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_4);
    call {:si_unique_call 222} sdv_IoSetCompletionRoutine(Irp_4, li2bplFunctionConstant6704, 0, 1, 1, 1);
    call {:si_unique_call 223} vslice_dummy_var_25 := PoCallDriver#1(0, Irp_4);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_190 := 259;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L17;
}



procedure {:origName "PciDrvDispatchDeviceSetPower"} PciDrvDispatchDeviceSetPower(actual_DeviceObject_10: int, actual_Irp_7: int) returns (Tmp_199: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchDeviceSetPower"} PciDrvDispatchDeviceSetPower(actual_DeviceObject_10: int, actual_Irp_7: int) returns (Tmp_199: int)
{
  var {:pointer} Tmp_200: int;
  var {:pointer} fdoData_8: int;
  var {:scalar} status_20: int;
  var {:pointer} stack_8: int;
  var {:scalar} state_1: int;
  var {:pointer} DeviceObject_10: int;
  var {:pointer} Irp_7: int;
  var vslice_dummy_var_26: int;

  anon0:
    call {:si_unique_call 224} state_1 := __HAVOC_malloc(8);
    DeviceObject_10 := actual_DeviceObject_10;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 225} Tmp_200 := __HAVOC_malloc(152);
    call {:si_unique_call 226} stack_8 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    assume {:nonnull} state_1 != 0;
    assume state_1 > 0;
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    assume {:nonnull} state_1 != 0;
    assume state_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(state_1)] := Mem_T.INT4[DeviceState__POWER_STATE(State_unnamed_tag_39(Power_unnamed_tag_8(Parameters__IO_STACK_LOCATION(stack_8))))];
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    havoc fdoData_8;
    Tmp_200 := strConst__li2bpl69;
    call {:si_unique_call 227} DebugPrint(5, 4, Tmp_200);
    call {:si_unique_call 228} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_8 != 0;
    assume fdoData_8 > 0;
    assume {:nonnull} state_1 != 0;
    assume state_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 229} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 230} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_7);
    call {:si_unique_call 231} sdv_IoSetCompletionRoutine(Irp_7, li2bplFunctionConstant6711, 0, 1, 1, 1);
    call {:si_unique_call 232} vslice_dummy_var_26 := PoCallDriver#1(0, Irp_7);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    Tmp_199 := 259;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    call {:si_unique_call 233} status_20 := PciDrvQueuePassiveLevelCallback#1(fdoData_8, li2bplFunctionConstant6710, Irp_7, 1);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_20 >= 0;
    Tmp_199 := 259;
    goto L1;

  anon12_Then:
    assume {:partition} 0 > status_20;
    call {:si_unique_call 234} Tmp_199 := PciDrvFinalizeDevicePowerIrp#1(DeviceObject_10, Irp_7, 1, status_20);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_27: int;

  anon0:
    call {:si_unique_call 235} vslice_dummy_var_27 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PciDrvCompletionOnFinalizedDeviceIrp"} PciDrvCompletionOnFinalizedDeviceIrp(actual_DeviceObject_12: int, actual_MinorFunction_1: int, actual_SD4: int, actual_PowerContext: int, actual_IoStatus: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionOnFinalizedDeviceIrp"} PciDrvCompletionOnFinalizedDeviceIrp(actual_DeviceObject_12: int, actual_MinorFunction_1: int, actual_SD4: int, actual_PowerContext: int, actual_IoStatus: int)
{
  var {:scalar} PowerState_4: int;
  var {:pointer} sIrp: int;
  var {:pointer} Tmp_207: int;
  var {:pointer} fdoData_10: int;
  var {:pointer} SD4: int;
  var {:pointer} PowerContext: int;
  var {:pointer} IoStatus: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 236} PowerState_4 := __HAVOC_malloc(8);
    call {:si_unique_call 237} vslice_dummy_var_28 := __HAVOC_malloc(4);
    SD4 := actual_SD4;
    PowerContext := actual_PowerContext;
    IoStatus := actual_IoStatus;
    assume {:nonnull} PowerState_4 != 0;
    assume PowerState_4 > 0;
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    assume {:nonnull} PowerState_4 != 0;
    assume PowerState_4 > 0;
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState_4)] := Mem_T.INT4[DeviceState__POWER_STATE(SD4)];
    call {:si_unique_call 238} Tmp_207 := __HAVOC_malloc(184);
    fdoData_10 := PowerContext;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    havoc sIrp;
    Tmp_207 := strConst__li2bpl71;
    call {:si_unique_call 239} DebugPrint(5, 4, Tmp_207);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sIrp == -1;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    havoc sIrp;
    call {:si_unique_call 240} vslice_dummy_var_29 := PciDrvIoDecrement(fdoData_10);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} sIrp != -1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sIrp != 0;
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    assume {:nonnull} sIrp != 0;
    assume sIrp > 0;
    call {:si_unique_call 241} PoStartNextPowerIrp(0);
    call {:si_unique_call 242} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    call {:si_unique_call 243} vslice_dummy_var_30 := PciDrvIoDecrement(fdoData_10);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} sIrp == 0;
    goto L1;
}



procedure {:origName "PciDrvCanSuspendDevice"} PciDrvCanSuspendDevice(actual_DeviceObject_13: int) returns (Tmp_213: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_213 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCanSuspendDevice"} PciDrvCanSuspendDevice(actual_DeviceObject_13: int) returns (Tmp_213: int)
{

  anon0:
    call {:si_unique_call 244} sdv_do_paged_code_check();
    Tmp_213 := 0;
    return;
}



procedure {:origName "PciDrvDispatchDeviceQueryPower"} PciDrvDispatchDeviceQueryPower(actual_DeviceObject_15: int, actual_Irp_10: int) returns (Tmp_217: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchDeviceQueryPower"} PciDrvDispatchDeviceQueryPower(actual_DeviceObject_15: int, actual_Irp_10: int) returns (Tmp_217: int)
{
  var {:scalar} deviceState_2: int;
  var {:pointer} Tmp_219: int;
  var {:scalar} status_24: int;
  var {:pointer} stack_10: int;
  var {:pointer} DeviceObject_15: int;
  var {:pointer} Irp_10: int;
  var vslice_dummy_var_11: int;

  anon0:
    DeviceObject_15 := actual_DeviceObject_15;
    Irp_10 := actual_Irp_10;
    call {:si_unique_call 245} Tmp_219 := __HAVOC_malloc(160);
    call {:si_unique_call 246} stack_10 := sdv_IoGetCurrentIrpStackLocation(Irp_10);
    assume {:nonnull} stack_10 != 0;
    assume stack_10 > 0;
    deviceState_2 := Mem_T.INT4[DeviceState__POWER_STATE(State_unnamed_tag_39(Power_unnamed_tag_8(Parameters__IO_STACK_LOCATION(stack_10))))];
    Tmp_219 := strConst__li2bpl73;
    call {:si_unique_call 247} DebugPrint(5, 4, Tmp_219);
    call {:si_unique_call 248} sdv_do_paged_code_check();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} deviceState_2 == 1;
    status_24 := 0;
    goto L22;

  L22:
    call {:si_unique_call 249} Tmp_217 := PciDrvFinalizeDevicePowerIrp#1(DeviceObject_15, Irp_10, 1, status_24);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} deviceState_2 != 1;
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc vslice_dummy_var_11;
    call {:si_unique_call 250} status_24 := PciDrvQueuePassiveLevelCallback#1(vslice_dummy_var_11, li2bplFunctionConstant6708, Irp_10, 1);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_24 >= 0;
    Tmp_217 := 259;
    goto L1;

  anon10_Then:
    assume {:partition} 0 > status_24;
    goto L22;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvWmiRegistration"} PciDrvWmiRegistration(actual_FdoData_24: int) returns (Tmp_220: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_220 == -1073741823 || Tmp_220 == -1073741811 || Tmp_220 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWmiRegistration"} PciDrvWmiRegistration(actual_FdoData_24: int) returns (Tmp_220: int)
{
  var {:scalar} Tmp_221: int;
  var {:scalar} Tmp_222: int;
  var {:scalar} Tmp_223: int;
  var {:scalar} Tmp_224: int;
  var {:scalar} Tmp_225: int;
  var {:scalar} Tmp_226: int;
  var {:scalar} Tmp_227: int;
  var {:scalar} Tmp_228: int;
  var {:scalar} Tmp_229: int;
  var {:scalar} guidCount: int;
  var {:scalar} Tmp_230: int;
  var {:scalar} Tmp_232: int;
  var {:scalar} Tmp_233: int;
  var {:scalar} status_25: int;
  var {:scalar} Tmp_234: int;
  var {:scalar} Tmp_235: int;
  var {:scalar} Tmp_236: int;
  var {:pointer} FdoData_24: int;

  anon0:
    FdoData_24 := actual_FdoData_24;
    guidCount := 0;
    call {:si_unique_call 251} sdv_do_paged_code_check();
    Tmp_236 := guidCount;
    Tmp_223 := guidCount;
    Tmp_227 := guidCount;
    guidCount := guidCount + 1;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_24)] != 0;
    goto L15;

  L15:
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    call {:si_unique_call 252} status_25 := IoWMIRegistrationControl(0, 1);
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    Tmp_220 := status_25;
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_24)] == 0;
    Tmp_230 := guidCount;
    Tmp_235 := guidCount;
    Tmp_226 := guidCount;
    guidCount := guidCount + 1;
    Tmp_221 := guidCount;
    Tmp_234 := guidCount;
    Tmp_233 := guidCount;
    guidCount := guidCount + 1;
    Tmp_232 := guidCount;
    Tmp_229 := guidCount;
    Tmp_222 := guidCount;
    guidCount := guidCount + 1;
    Tmp_228 := guidCount;
    Tmp_224 := guidCount;
    Tmp_225 := guidCount;
    guidCount := guidCount + 1;
    goto L15;
}



procedure {:origName "PciDrvSystemControl"} PciDrvSystemControl(actual_DeviceObject_16: int, actual_Irp_11: int) returns (Tmp_237: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvSystemControl"} PciDrvSystemControl(actual_DeviceObject_16: int, actual_Irp_11: int) returns (Tmp_237: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} fdoData_13: int;
  var {:pointer} sdv_140: int;
  var {:scalar} status_26: int;
  var {:pointer} stack_11: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 253} disposition := __HAVOC_malloc(4);
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_11 := actual_Irp_11;
    call {:si_unique_call 254} Tmp_239 := __HAVOC_malloc(32);
    call {:si_unique_call 255} sdv_do_paged_code_check();
    call {:si_unique_call 256} stack_11 := sdv_IoGetCurrentIrpStackLocation(Irp_11);
    assume {:nonnull} stack_11 != 0;
    assume stack_11 > 0;
    havoc vslice_dummy_var_12;
    call {:si_unique_call 257} sdv_140 := WMIMinorFunctionString_sdv_static_function_12(vslice_dummy_var_12);
    Tmp_239 := strConst__li2bpl74;
    call {:si_unique_call 258} DebugPrint(5, 8, Tmp_239);
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc fdoData_13;
    call {:si_unique_call 259} vslice_dummy_var_34 := PciDrvPowerUpDevice#1(fdoData_13, 1);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 260} vslice_dummy_var_31 := PciDrvIoIncrement(fdoData_13);
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    status_26 := -1073741810;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    call {:si_unique_call 261} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 262} vslice_dummy_var_32 := PciDrvIoDecrement(fdoData_13);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    Tmp_237 := status_26;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    call {:si_unique_call 263} status_26 := WmiSystemControl(0, 0, Irp_11, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.INT4[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[disposition] != 1;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[disposition] != 2;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[disposition] == 3;
    goto L49;

  L49:
    call {:si_unique_call 264} sdv_IoSkipCurrentIrpStackLocation(Irp_11);
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    havoc vslice_dummy_var_13;
    call {:si_unique_call 265} status_26 := sdv_IoCallDriver#1(vslice_dummy_var_13, Irp_11);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  L57:
    call {:si_unique_call 266} vslice_dummy_var_33 := PciDrvIoDecrement(fdoData_13);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    Tmp_237 := status_26;
    goto L1;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:partition} Mem_T.INT4[disposition] != 3;
    call {:si_unique_call 267} sdv_IoSkipCurrentIrpStackLocation(Irp_11);
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    havoc vslice_dummy_var_14;
    call {:si_unique_call 268} status_26 := sdv_IoCallDriver#1(vslice_dummy_var_14, Irp_11);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} Mem_T.INT4[disposition] == 2;
    goto L49;

  anon25_Then:
    assume {:partition} Mem_T.INT4[disposition] == 1;
    call {:si_unique_call 269} sdv_IoCompleteRequest(0, 0);
    goto L57;

  anon22_Then:
    assume {:partition} Mem_T.INT4[disposition] == 0;
    goto L57;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_35: int;

  anon0:
    call {:si_unique_call 270} vslice_dummy_var_35 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PciDrvWmiDeRegistration"} PciDrvWmiDeRegistration(actual_FdoData_25: int) returns (Tmp_242: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_242 == -1073741823 || Tmp_242 == -1073741811 || Tmp_242 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWmiDeRegistration"} PciDrvWmiDeRegistration(actual_FdoData_25: int) returns (Tmp_242: int)
{

  anon0:
    call {:si_unique_call 271} sdv_do_paged_code_check();
    call {:si_unique_call 272} Tmp_242 := IoWMIRegistrationControl(0, 2);
    return;
}



procedure {:origName "WMIMinorFunctionString_sdv_static_function_12"} WMIMinorFunctionString_sdv_static_function_12(actual_MinorFunction_2: int) returns (Tmp_244: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WMIMinorFunctionString_sdv_static_function_12"} WMIMinorFunctionString_sdv_static_function_12(actual_MinorFunction_2: int) returns (Tmp_244: int)
{
  var {:scalar} MinorFunction_2: int;

  anon0:
    MinorFunction_2 := actual_MinorFunction_2;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} MinorFunction_2 != 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} MinorFunction_2 != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} MinorFunction_2 != 4;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} MinorFunction_2 != 5;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} MinorFunction_2 != 6;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} MinorFunction_2 != 7;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} MinorFunction_2 != 8;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} MinorFunction_2 == 9;
    Tmp_244 := strConst__li2bpl85;
    goto L1;

  L1:
    return;

  anon22_Then:
    assume {:partition} MinorFunction_2 != 9;
    Tmp_244 := strConst__li2bpl75;
    goto L1;

  anon23_Then:
    assume {:partition} MinorFunction_2 == 8;
    Tmp_244 := strConst__li2bpl84;
    goto L1;

  anon24_Then:
    assume {:partition} MinorFunction_2 == 7;
    Tmp_244 := strConst__li2bpl83;
    goto L1;

  anon25_Then:
    assume {:partition} MinorFunction_2 == 6;
    Tmp_244 := strConst__li2bpl82;
    goto L1;

  anon26_Then:
    assume {:partition} MinorFunction_2 == 5;
    Tmp_244 := strConst__li2bpl81;
    goto L1;

  anon27_Then:
    assume {:partition} MinorFunction_2 == 4;
    Tmp_244 := strConst__li2bpl80;
    goto L1;

  anon28_Then:
    assume {:partition} MinorFunction_2 == 3;
    Tmp_244 := strConst__li2bpl79;
    goto L1;

  anon29_Then:
    assume {:partition} MinorFunction_2 == 2;
    Tmp_244 := strConst__li2bpl78;
    goto L1;

  anon30_Then:
    assume {:partition} MinorFunction_2 == 1;
    Tmp_244 := strConst__li2bpl77;
    goto L1;

  anon21_Then:
    assume {:partition} MinorFunction_2 == 0;
    Tmp_244 := strConst__li2bpl76;
    goto L1;
}



procedure {:origName "NICInitRecv"} NICInitRecv(actual_FdoData_27: int) returns (Tmp_249: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_249 == 0 || Tmp_249 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInitRecv"} NICInitRecv(actual_FdoData_27: int) returns (Tmp_249: int)
{
  var {:pointer} Tmp_250: int;
  var {:pointer} sdv_155: int;
  var {:pointer} pMpRfd_4: int;
  var {:scalar} RfdCount: int;
  var {:pointer} Tmp_251: int;
  var {:pointer} sdv_156: int;
  var {:scalar} status_28: int;
  var {:pointer} FdoData_27: int;

  anon0:
    FdoData_27 := actual_FdoData_27;
    call {:si_unique_call 273} Tmp_250 := __HAVOC_malloc(68);
    call {:si_unique_call 274} Tmp_251 := __HAVOC_malloc(112);
    status_28 := -1073741670;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    Tmp_250 := strConst__li2bpl88;
    call {:si_unique_call 275} DebugPrint(5, 1, Tmp_250);
    call {:si_unique_call 276} sdv_do_paged_code_check();
    RfdCount := 0;
    goto L16;

  L16:
    call {:si_unique_call 277} sdv_155, pMpRfd_4, RfdCount, status_28 := NICInitRecv_loop_L16(sdv_155, pMpRfd_4, RfdCount, sdv_156, status_28, FdoData_27);
    goto L16_last;

  L16_last:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[NumRfd__FDO_DATA(FdoData_27)] > RfdCount;
    call {:si_unique_call 278} sdv_155 := sdv_ExAllocateFromNPagedLookasideList(0);
    pMpRfd_4 := sdv_155;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} pMpRfd_4 == 0;
    goto L47;

  L47:
    RfdCount := RfdCount + 1;
    goto L47_dummy;

  L47_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:partition} pMpRfd_4 != 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    assume {:nonnull} pMpRfd_4 != 0;
    assume pMpRfd_4 > 0;
    assume {:nonnull} pMpRfd_4 != 0;
    assume pMpRfd_4 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pMpRfd_4 != 0;
    assume pMpRfd_4 > 0;
    assume {:nonnull} pMpRfd_4 != 0;
    assume pMpRfd_4 > 0;
    assume {:nonnull} pMpRfd_4 != 0;
    assume pMpRfd_4 > 0;
    call {:si_unique_call 279} status_28 := NICAllocRfd(FdoData_27, pMpRfd_4);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_28 >= 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    call {:si_unique_call 280} NICReturnRFD(FdoData_27, pMpRfd_4);
    goto L47;

  anon13_Then:
    assume {:partition} 0 > status_28;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    call {:si_unique_call 281} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(FdoData_27), pMpRfd_4);
    goto L47;

  anon15_Then:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    call {:si_unique_call 282} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(FdoData_27), pMpRfd_4);
    goto L47;

  anon11_Then:
    assume {:partition} RfdCount >= Mem_T.INT4[NumRfd__FDO_DATA(FdoData_27)];
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    status_28 := 0;
    goto L50;

  L50:
    Tmp_251 := strConst__li2bpl87;
    call {:si_unique_call 283} DebugPrint(5, 1, Tmp_251);
    Tmp_249 := status_28;
    return;

  anon12_Then:
    goto L50;
}



procedure {:origName "NICFreeAdapterMemory"} NICFreeAdapterMemory(actual_FdoData_28: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeAdapterMemory"} NICFreeAdapterMemory(actual_FdoData_28: int)
{
  var {:pointer} Tmp_254: int;
  var {:pointer} pMpRfd_5: int;
  var {:scalar} sdv_158: int;
  var {:pointer} sdv_159: int;
  var {:pointer} Tmp_256: int;
  var {:pointer} FdoData_28: int;
  var vslice_dummy_var_36: int;

  anon0:
    call {:si_unique_call 284} vslice_dummy_var_36 := __HAVOC_malloc(4);
    FdoData_28 := actual_FdoData_28;
    call {:si_unique_call 285} Tmp_254 := __HAVOC_malloc(104);
    call {:si_unique_call 286} Tmp_256 := __HAVOC_malloc(104);
    Tmp_254 := strConst__li2bpl89;
    call {:si_unique_call 287} DebugPrint(5, 1, Tmp_254);
    call {:si_unique_call 288} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 289} ExDeleteNPagedLookasideList(0);
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto L11;

  L11:
    call {:si_unique_call 290} pMpRfd_5, sdv_158, sdv_159 := NICFreeAdapterMemory_loop_L11(pMpRfd_5, sdv_158, sdv_159, FdoData_28);
    goto L11_last;

  L11_last:
    call {:si_unique_call 297} sdv_158 := sdv_IsListEmpty(0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_158 != 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 291} ExDeleteNPagedLookasideList(0);
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto L23;

  L23:
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto L28;

  L28:
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto L33;

  L33:
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 292} ExFreePoolWithTag(0, -1001831600);
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    goto L42;

  L42:
    call {:si_unique_call 293} NICRemoveAllWakeUpPatterns(FdoData_28);
    Tmp_256 := strConst__li2bpl90;
    call {:si_unique_call 294} DebugPrint(5, 1, Tmp_256);
    return;

  anon18_Then:
    goto L42;

  anon17_Then:
    goto L33;

  anon16_Then:
    goto L28;

  anon15_Then:
    goto L23;

  anon14_Then:
    assume {:partition} sdv_158 == 0;
    assume {:nonnull} FdoData_28 != 0;
    assume FdoData_28 > 0;
    call {:si_unique_call 295} sdv_159 := RemoveHeadList(RecvList__FDO_DATA(FdoData_28));
    pMpRfd_5 := sdv_159;
    call {:si_unique_call 296} NICFreeRfd(FdoData_28, pMpRfd_5);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    assume false;
    return;

  anon13_Then:
    goto L11;
}



procedure {:origName "NICShutdown"} NICShutdown(actual_FdoData_30: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICShutdown"} NICShutdown(actual_FdoData_30: int)
{
  var {:pointer} Tmp_285: int;
  var {:pointer} Tmp_287: int;
  var {:pointer} FdoData_30: int;
  var vslice_dummy_var_37: int;

  anon0:
    call {:si_unique_call 298} vslice_dummy_var_37 := __HAVOC_malloc(4);
    FdoData_30 := actual_FdoData_30;
    call {:si_unique_call 299} Tmp_285 := __HAVOC_malloc(72);
    call {:si_unique_call 300} Tmp_287 := __HAVOC_malloc(72);
    Tmp_287 := strConst__li2bpl105;
    call {:si_unique_call 301} DebugPrint(4, 1, Tmp_287);
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 302} NICDisableInterrupt(FdoData_30);
    call {:si_unique_call 303} NICIssueFullReset(FdoData_30);
    call {:si_unique_call 304} ResetPhy(FdoData_30);
    goto L7;

  L7:
    Tmp_285 := strConst__li2bpl106;
    call {:si_unique_call 305} DebugPrint(4, 1, Tmp_285);
    return;

  anon3_Then:
    goto L7;
}



procedure {:origName "NICUnmapHWResources"} NICUnmapHWResources(actual_FdoData_31: int) returns (Tmp_289: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_289 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICUnmapHWResources"} NICUnmapHWResources(actual_FdoData_31: int) returns (Tmp_289: int)
{
  var {:pointer} DmaAdapterObject_2: int;
  var {:pointer} Tmp_291: int;
  var {:pointer} FdoData_31: int;
  var vslice_dummy_var_15: int;

  anon0:
    FdoData_31 := actual_FdoData_31;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    havoc DmaAdapterObject_2;
    call {:si_unique_call 306} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 307} IoDisconnectInterrupt(0);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto L9;

  L9:
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 308} MmUnmapIoSpace(0, 24);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto L15;

  L15:
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    havoc vslice_dummy_var_15;
    call {:si_unique_call 309} MmUnmapIoSpace(0, vslice_dummy_var_15);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto L20;

  L20:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} DmaAdapterObject_2 != 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} DmaAdapterObject_2 != 0;
    assume DmaAdapterObject_2 > 0;
    havoc Tmp_291;
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto L25;

  L25:
    Tmp_289 := 0;
    return;

  anon15_Then:
    goto L25;

  anon14_Then:
    assume {:partition} DmaAdapterObject_2 == 0;
    goto L25;

  anon13_Then:
    goto L20;

  anon12_Then:
    goto L15;

  anon11_Then:
    goto L9;
}



procedure {:origName "HwSetupIAAddress"} HwSetupIAAddress(actual_FdoData_32: int) returns (Tmp_292: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_292 == 0 || Tmp_292 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwSetupIAAddress"} HwSetupIAAddress(actual_FdoData_32: int) returns (Tmp_292: int)
{
  var {:scalar} i_3: int;
  var {:scalar} Tmp_293: int;
  var {:pointer} Tmp_295: int;
  var {:pointer} Tmp_296: int;
  var {:pointer} Tmp_297: int;
  var {:pointer} NonTxCmdBlockHdr_1: int;
  var {:scalar} Tmp_298: int;
  var {:pointer} Tmp_299: int;
  var {:pointer} Tmp_300: int;
  var {:scalar} status_30: int;
  var {:pointer} Tmp_301: int;
  var {:pointer} FdoData_32: int;

  anon0:
    FdoData_32 := actual_FdoData_32;
    call {:si_unique_call 310} Tmp_295 := __HAVOC_malloc(88);
    call {:si_unique_call 311} Tmp_296 := __HAVOC_malloc(132);
    call {:si_unique_call 312} Tmp_297 := __HAVOC_malloc(24);
    call {:si_unique_call 313} Tmp_300 := __HAVOC_malloc(24);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    havoc NonTxCmdBlockHdr_1;
    Tmp_295 := strConst__li2bpl108;
    call {:si_unique_call 314} DebugPrint(5, 4096, Tmp_295);
    call {:si_unique_call 315} sdv_do_paged_code_check();
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(NonTxCmdBlockHdr_1)] := 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    i_3 := 0;
    goto L17;

  L17:
    call {:si_unique_call 316} i_3, Tmp_293, Tmp_297, Tmp_298, Tmp_299, Tmp_300 := HwSetupIAAddress_loop_L17(i_3, Tmp_293, Tmp_297, Tmp_298, Tmp_299, Tmp_300, FdoData_32);
    goto L17_last;

  L17_last:
    assume {:CounterLoop 6} {:Counter "i_3"} true;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 6 > i_3;
    Tmp_293 := i_3;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    havoc Tmp_299;
    assume {:nonnull} Tmp_299 != 0;
    assume Tmp_299 > 0;
    havoc Tmp_297;
    Tmp_298 := i_3;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    havoc Tmp_300;
    assume {:nonnull} Tmp_297 != 0;
    assume Tmp_297 > 0;
    assume {:nonnull} Tmp_300 != 0;
    assume Tmp_300 > 0;
    Mem_T.INT4[Tmp_297 + Tmp_293 * 4] := Mem_T.INT4[Tmp_300 + Tmp_298 * 4];
    i_3 := i_3 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_3 >= 6;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    havoc Tmp_301;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    assume {:nonnull} Tmp_301 != 0;
    assume Tmp_301 > 0;
    call {:si_unique_call 317} status_30 := D100SubmitCommandBlockAndWait(FdoData_32);
    Tmp_296 := strConst__li2bpl107;
    call {:si_unique_call 318} DebugPrint(5, 4096, Tmp_296);
    Tmp_292 := status_30;
    return;
}



procedure {:origName "HwSoftwareReset"} HwSoftwareReset(actual_FdoData_33: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwSoftwareReset"} HwSoftwareReset(actual_FdoData_33: int)
{
  var {:pointer} Tmp_303: int;
  var {:pointer} Tmp_305: int;
  var {:pointer} Tmp_306: int;
  var {:pointer} FdoData_33: int;
  var vslice_dummy_var_38: int;

  anon0:
    call {:si_unique_call 319} vslice_dummy_var_38 := __HAVOC_malloc(4);
    FdoData_33 := actual_FdoData_33;
    call {:si_unique_call 320} Tmp_303 := __HAVOC_malloc(84);
    call {:si_unique_call 321} Tmp_305 := __HAVOC_malloc(84);
    Tmp_303 := strConst__li2bpl109;
    call {:si_unique_call 322} DebugPrint(5, 4096, Tmp_303);
    assume {:nonnull} FdoData_33 != 0;
    assume FdoData_33 > 0;
    havoc Tmp_306;
    assume {:nonnull} Tmp_306 != 0;
    assume Tmp_306 > 0;
    call {:si_unique_call 323} NICDisableInterrupt(FdoData_33);
    Tmp_305 := strConst__li2bpl110;
    call {:si_unique_call 324} DebugPrint(5, 4096, Tmp_305);
    return;
}



procedure {:origName "NICReadAdapterInfo"} NICReadAdapterInfo(actual_FdoData_34: int) returns (Tmp_307: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_307 == -1073741503 || Tmp_307 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICReadAdapterInfo"} NICReadAdapterInfo(actual_FdoData_34: int) returns (Tmp_307: int)
{
  var {:scalar} i_4: int;
  var {:pointer} Tmp_308: int;
  var {:scalar} Tmp_309: int;
  var {:pointer} Tmp_310: int;
  var {:pointer} Tmp_311: int;
  var {:scalar} Tmp_312: int;
  var {:pointer} Tmp_313: int;
  var {:scalar} sdv_167: int;
  var {:pointer} Tmp_314: int;
  var {:pointer} Tmp_315: int;
  var {:pointer} Tmp_316: int;
  var {:pointer} Tmp_317: int;
  var {:scalar} Tmp_318: int;
  var {:pointer} Tmp_319: int;
  var {:pointer} Tmp_320: int;
  var {:scalar} Tmp_321: int;
  var {:scalar} usValue: int;
  var {:pointer} Tmp_322: int;
  var {:scalar} Tmp_323: int;
  var {:scalar} Tmp_324: int;
  var {:pointer} Tmp_325: int;
  var {:scalar} Tmp_326: int;
  var {:pointer} Tmp_327: int;
  var {:scalar} Tmp_329: int;
  var {:pointer} Tmp_330: int;
  var {:pointer} Tmp_331: int;
  var {:pointer} Tmp_332: int;
  var {:pointer} Tmp_333: int;
  var {:scalar} Tmp_334: int;
  var {:pointer} Tmp_335: int;
  var {:scalar} Tmp_336: int;
  var {:scalar} Tmp_337: int;
  var {:pointer} Tmp_338: int;
  var {:pointer} Tmp_339: int;
  var {:scalar} Tmp_340: int;
  var {:pointer} Tmp_341: int;
  var {:scalar} Tmp_342: int;
  var {:scalar} status_31: int;
  var {:pointer} Tmp_343: int;
  var {:pointer} Tmp_344: int;
  var {:pointer} Tmp_345: int;
  var {:pointer} Tmp_346: int;
  var {:pointer} Tmp_347: int;
  var {:pointer} Tmp_348: int;
  var {:pointer} Tmp_349: int;
  var {:pointer} Tmp_350: int;
  var {:scalar} Tmp_351: int;
  var {:pointer} Tmp_352: int;
  var {:pointer} FdoData_34: int;
  var boogieTmp: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;

  anon0:
    FdoData_34 := actual_FdoData_34;
    call {:si_unique_call 325} Tmp_308 := __HAVOC_malloc(24);
    call {:si_unique_call 326} Tmp_310 := __HAVOC_malloc(24);
    call {:si_unique_call 327} Tmp_311 := __HAVOC_malloc(96);
    call {:si_unique_call 328} Tmp_314 := __HAVOC_malloc(24);
    call {:si_unique_call 329} Tmp_315 := __HAVOC_malloc(24);
    call {:si_unique_call 330} Tmp_316 := __HAVOC_malloc(24);
    call {:si_unique_call 331} Tmp_317 := __HAVOC_malloc(204);
    call {:si_unique_call 332} Tmp_319 := __HAVOC_malloc(24);
    call {:si_unique_call 333} Tmp_320 := __HAVOC_malloc(24);
    call {:si_unique_call 334} Tmp_322 := __HAVOC_malloc(24);
    call {:si_unique_call 335} Tmp_325 := __HAVOC_malloc(24);
    call {:si_unique_call 336} Tmp_330 := __HAVOC_malloc(24);
    call {:si_unique_call 337} Tmp_331 := __HAVOC_malloc(24);
    call {:si_unique_call 338} Tmp_332 := __HAVOC_malloc(196);
    call {:si_unique_call 339} Tmp_333 := __HAVOC_malloc(24);
    call {:si_unique_call 340} Tmp_335 := __HAVOC_malloc(120);
    call {:si_unique_call 341} Tmp_338 := __HAVOC_malloc(24);
    call {:si_unique_call 342} Tmp_339 := __HAVOC_malloc(24);
    call {:si_unique_call 343} Tmp_341 := __HAVOC_malloc(24);
    call {:si_unique_call 344} Tmp_343 := __HAVOC_malloc(24);
    call {:si_unique_call 345} Tmp_345 := __HAVOC_malloc(24);
    call {:si_unique_call 346} Tmp_346 := __HAVOC_malloc(140);
    call {:si_unique_call 347} Tmp_347 := __HAVOC_malloc(96);
    call {:si_unique_call 348} Tmp_348 := __HAVOC_malloc(24);
    call {:si_unique_call 349} Tmp_349 := __HAVOC_malloc(24);
    call {:si_unique_call 350} Tmp_350 := __HAVOC_malloc(24);
    status_31 := 0;
    Tmp_347 := strConst__li2bpl114;
    call {:si_unique_call 351} DebugPrint(5, 1, Tmp_347);
    call {:si_unique_call 352} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc vslice_dummy_var_16;
    call {:si_unique_call 353} sdv_167 := GetEEpromSize(FdoData_34, vslice_dummy_var_16);
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    call {:si_unique_call 354} boogieTmp := GetEEpromAddressSize(sdv_167);
    Tmp_311 := strConst__li2bpl111;
    call {:si_unique_call 355} DebugPrint(6, 1, Tmp_311);
    i_4 := 0;
    goto L24;

  L24:
    call {:si_unique_call 356} i_4, Tmp_318, usValue, Tmp_329, Tmp_343 := NICReadAdapterInfo_loop_L24(i_4, Tmp_318, usValue, Tmp_329, Tmp_343, FdoData_34);
    goto L24_last;

  L24_last:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} 6 > i_4;
    Tmp_318 := 0 + INTDIV(i_4, 2);
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc vslice_dummy_var_17;
    havoc vslice_dummy_var_18;
    call {:si_unique_call 357} usValue := ReadEEprom(FdoData_34, vslice_dummy_var_17, Tmp_318, vslice_dummy_var_18);
    Tmp_329 := i_4;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_343;
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    Mem_T.INT4[Tmp_343 + Tmp_329 * 4] := usValue;
    i_4 := i_4 + 2;
    goto anon19_Else_dummy;

  anon19_Else_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} i_4 >= 6;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_338;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    Tmp_312 := Mem_T.INT4[Tmp_338 + 5 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_341;
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    Tmp_351 := Mem_T.INT4[Tmp_341 + 4 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_319;
    assume {:nonnull} Tmp_319 != 0;
    assume Tmp_319 > 0;
    Tmp_340 := Mem_T.INT4[Tmp_319 + 3 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_314;
    assume {:nonnull} Tmp_314 != 0;
    assume Tmp_314 > 0;
    Tmp_326 := Mem_T.INT4[Tmp_314 + 2 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_310;
    assume {:nonnull} Tmp_310 != 0;
    assume Tmp_310 > 0;
    Tmp_337 := Mem_T.INT4[Tmp_310 + 1 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_333;
    assume {:nonnull} Tmp_333 != 0;
    assume Tmp_333 > 0;
    Tmp_321 := Mem_T.INT4[Tmp_333];
    Tmp_317 := strConst__li2bpl115;
    call {:si_unique_call 358} DebugPrint(4, 1, Tmp_317);
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_350;
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(Mem_T.INT4[Tmp_350], 1) != 0;
    goto L43;

  L43:
    Tmp_335 := strConst__li2bpl112;
    call {:si_unique_call 359} DebugPrint(2, 1, Tmp_335);
    status_31 := -1073741503;
    goto L47;

  L47:
    Tmp_346 := strConst__li2bpl113;
    call {:si_unique_call 360} DebugPrint(5, 1, Tmp_346);
    Tmp_307 := status_31;
    return;

  anon21_Then:
    assume {:partition} BAND(Mem_T.INT4[Tmp_350], 1) == 0;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_345;
    assume {:nonnull} Tmp_345 != 0;
    assume Tmp_345 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.INT4[Tmp_345] == 255;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_349;
    assume {:nonnull} Tmp_349 != 0;
    assume Tmp_349 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[Tmp_349 + 1 * 4] == 255;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_339;
    assume {:nonnull} Tmp_339 != 0;
    assume Tmp_339 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Tmp_339 + 2 * 4] == 255;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_331;
    assume {:nonnull} Tmp_331 != 0;
    assume Tmp_331 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[Tmp_331 + 3 * 4] == 255;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_348;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.INT4[Tmp_348 + 4 * 4] == 255;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_316;
    assume {:nonnull} Tmp_316 != 0;
    assume Tmp_316 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.INT4[Tmp_316 + 5 * 4] != 255;
    goto L51;

  L51:
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L58;

  L58:
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_308;
    assume {:nonnull} Tmp_308 != 0;
    assume Tmp_308 > 0;
    Tmp_324 := Mem_T.INT4[Tmp_308 + 5 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_320;
    assume {:nonnull} Tmp_320 != 0;
    assume Tmp_320 > 0;
    Tmp_323 := Mem_T.INT4[Tmp_320 + 4 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_330;
    assume {:nonnull} Tmp_330 != 0;
    assume Tmp_330 > 0;
    Tmp_336 := Mem_T.INT4[Tmp_330 + 3 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_315;
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    Tmp_334 := Mem_T.INT4[Tmp_315 + 2 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_325;
    assume {:nonnull} Tmp_325 != 0;
    assume Tmp_325 > 0;
    Tmp_342 := Mem_T.INT4[Tmp_325 + 1 * 4];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_322;
    assume {:nonnull} Tmp_322 != 0;
    assume Tmp_322 > 0;
    Tmp_309 := Mem_T.INT4[Tmp_322];
    Tmp_332 := strConst__li2bpl116;
    call {:si_unique_call 361} DebugPrint(4, 1, Tmp_332);
    goto L47;

  anon20_Then:
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_327;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_344;
    assume {:nonnull} Tmp_327 != 0;
    assume Tmp_327 > 0;
    assume {:nonnull} Tmp_344 != 0;
    assume Tmp_344 > 0;
    Mem_T.INT4[Tmp_327] := Mem_T.INT4[Tmp_344];
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_352;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    havoc Tmp_313;
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    assume {:nonnull} Tmp_352 != 0;
    assume Tmp_352 > 0;
    Mem_T.INT4[Tmp_352] := Mem_T.INT4[Tmp_313];
    goto L58;

  anon27_Then:
    assume {:partition} Mem_T.INT4[Tmp_316 + 5 * 4] == 255;
    goto L43;

  anon26_Then:
    assume {:partition} Mem_T.INT4[Tmp_348 + 4 * 4] != 255;
    goto L51;

  anon25_Then:
    assume {:partition} Mem_T.INT4[Tmp_331 + 3 * 4] != 255;
    goto L51;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Tmp_339 + 2 * 4] != 255;
    goto L51;

  anon23_Then:
    assume {:partition} Mem_T.INT4[Tmp_349 + 1 * 4] != 255;
    goto L51;

  anon22_Then:
    assume {:partition} Mem_T.INT4[Tmp_345] != 255;
    goto L51;
}



procedure {:origName "NICGetDeviceInformation"} NICGetDeviceInformation(actual_FdoData_35: int) returns (Tmp_353: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_353 == -1073741808 || Tmp_353 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICGetDeviceInformation"} NICGetDeviceInformation(actual_FdoData_35: int) returns (Tmp_353: int)
{
  var {:pointer} Tmp_354: int;
  var {:pointer} Tmp_355: int;
  var {:scalar} bytesRead: int;
  var {:pointer} buffer_1: int;
  var {:pointer} pPciConfig_1: int;
  var {:scalar} usPciCommand: int;
  var {:pointer} Tmp_357: int;
  var {:pointer} Tmp_358: int;
  var {:scalar} status_32: int;
  var {:pointer} FdoData_35: int;
  var boogieTmp: int;

  anon0:
    call {:si_unique_call 362} buffer_1 := __HAVOC_malloc(4);
    FdoData_35 := actual_FdoData_35;
    call {:si_unique_call 363} Tmp_354 := __HAVOC_malloc(156);
    call {:si_unique_call 364} Tmp_355 := __HAVOC_malloc(116);
    assume {:nonnull} buffer_1 != 0;
    assume buffer_1 > 0;
    call {:si_unique_call 365} boogieTmp := __HAVOC_malloc(904);
    call {:si_unique_call 366} Tmp_357 := __HAVOC_malloc(196);
    call {:si_unique_call 367} Tmp_358 := __HAVOC_malloc(120);
    status_32 := 0;
    pPciConfig_1 := buffer_1;
    bytesRead := 0;
    Tmp_358 := strConst__li2bpl120;
    call {:si_unique_call 368} DebugPrint(5, 1, Tmp_358);
    call {:si_unique_call 369} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} bytesRead != 226;
    Tmp_357 := strConst__li2bpl117;
    call {:si_unique_call 370} DebugPrint(2, 1, Tmp_357);
    Tmp_353 := -1073741808;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} bytesRead == 226;
    assume {:nonnull} pPciConfig_1 != 0;
    assume pPciConfig_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L28;

  L28:
    Tmp_354 := strConst__li2bpl118;
    call {:si_unique_call 371} DebugPrint(2, 1, Tmp_354);
    goto L31;

  L31:
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    assume {:nonnull} pPciConfig_1 != 0;
    assume pPciConfig_1 > 0;
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    assume {:nonnull} pPciConfig_1 != 0;
    assume pPciConfig_1 > 0;
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    assume {:nonnull} pPciConfig_1 != 0;
    assume pPciConfig_1 > 0;
    call {:si_unique_call 372} NICExtractPMInfoFromPciSpace(FdoData_35, pPciConfig_1);
    assume {:nonnull} pPciConfig_1 != 0;
    assume pPciConfig_1 > 0;
    havoc usPciCommand;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(usPciCommand, 16) != 0;
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    goto L42;

  L42:
    Tmp_355 := strConst__li2bpl119;
    call {:si_unique_call 373} DebugPrint(5, 1, Tmp_355);
    Tmp_353 := status_32;
    goto L1;

  anon14_Then:
    goto L39;

  L39:
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    goto L42;

  anon15_Then:
    assume {:partition} BAND(usPciCommand, 16) == 0;
    goto L39;

  anon12_Then:
    assume {:nonnull} pPciConfig_1 != 0;
    assume pPciConfig_1 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L31;

  anon13_Then:
    goto L28;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_39: int;

  anon0:
    call {:si_unique_call 374} vslice_dummy_var_39 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "HwConfigure"} HwConfigure(actual_FdoData_36: int) returns (Tmp_361: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_361 == 0 || Tmp_361 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwConfigure"} HwConfigure(actual_FdoData_36: int) returns (Tmp_361: int)
{
  var {:scalar} i_5: int;
  var {:pointer} Tmp_362: int;
  var {:pointer} Tmp_363: int;
  var {:pointer} Tmp_364: int;
  var {:pointer} Tmp_365: int;
  var {:pointer} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:pointer} Tmp_368: int;
  var {:pointer} Tmp_369: int;
  var {:pointer} Tmp_370: int;
  var {:pointer} Tmp_371: int;
  var {:pointer} Tmp_372: int;
  var {:pointer} Tmp_373: int;
  var {:pointer} Tmp_374: int;
  var {:pointer} Tmp_375: int;
  var {:pointer} Tmp_376: int;
  var {:pointer} Tmp_377: int;
  var {:pointer} Tmp_378: int;
  var {:pointer} Tmp_379: int;
  var {:pointer} Tmp_380: int;
  var {:scalar} sdv_171: int;
  var {:pointer} Tmp_381: int;
  var {:pointer} Tmp_382: int;
  var {:pointer} Tmp_383: int;
  var {:pointer} Tmp_384: int;
  var {:pointer} Tmp_385: int;
  var {:pointer} Tmp_386: int;
  var {:pointer} Tmp_387: int;
  var {:pointer} Tmp_388: int;
  var {:pointer} Tmp_389: int;
  var {:pointer} Tmp_390: int;
  var {:pointer} Tmp_391: int;
  var {:pointer} Tmp_392: int;
  var {:pointer} Tmp_393: int;
  var {:pointer} Tmp_394: int;
  var {:pointer} Tmp_395: int;
  var {:pointer} Tmp_396: int;
  var {:pointer} NonTxCmdBlockHdr_2: int;
  var {:pointer} Tmp_398: int;
  var {:pointer} Tmp_399: int;
  var {:pointer} Tmp_400: int;
  var {:pointer} Tmp_401: int;
  var {:pointer} Tmp_402: int;
  var {:pointer} Tmp_403: int;
  var {:pointer} Tmp_404: int;
  var {:pointer} Tmp_405: int;
  var {:pointer} Tmp_406: int;
  var {:pointer} Tmp_407: int;
  var {:pointer} Tmp_408: int;
  var {:pointer} Tmp_409: int;
  var {:pointer} Tmp_410: int;
  var {:pointer} Tmp_411: int;
  var {:pointer} Tmp_412: int;
  var {:pointer} Tmp_413: int;
  var {:scalar} Tmp_414: int;
  var {:scalar} Tmp_415: int;
  var {:pointer} Tmp_416: int;
  var {:pointer} Tmp_417: int;
  var {:pointer} Tmp_418: int;
  var {:pointer} Tmp_419: int;
  var {:pointer} Tmp_420: int;
  var {:pointer} Tmp_421: int;
  var {:pointer} Tmp_422: int;
  var {:pointer} Tmp_423: int;
  var {:pointer} Tmp_424: int;
  var {:pointer} Tmp_425: int;
  var {:pointer} Tmp_426: int;
  var {:scalar} status_33: int;
  var {:pointer} Tmp_427: int;
  var {:pointer} Tmp_428: int;
  var {:pointer} Tmp_429: int;
  var {:pointer} Tmp_430: int;
  var {:pointer} Tmp_431: int;
  var {:pointer} Tmp_432: int;
  var {:pointer} Tmp_433: int;
  var {:pointer} Tmp_434: int;
  var {:pointer} FdoData_36: int;
  var boogieTmp: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;

  anon0:
    FdoData_36 := actual_FdoData_36;
    call {:si_unique_call 375} Tmp_362 := __HAVOC_malloc(88);
    call {:si_unique_call 376} Tmp_363 := __HAVOC_malloc(88);
    call {:si_unique_call 377} Tmp_366 := __HAVOC_malloc(88);
    call {:si_unique_call 378} Tmp_372 := __HAVOC_malloc(88);
    call {:si_unique_call 379} Tmp_374 := __HAVOC_malloc(88);
    call {:si_unique_call 380} Tmp_376 := __HAVOC_malloc(88);
    call {:si_unique_call 381} Tmp_377 := __HAVOC_malloc(88);
    call {:si_unique_call 382} Tmp_378 := __HAVOC_malloc(88);
    call {:si_unique_call 383} Tmp_384 := __HAVOC_malloc(88);
    call {:si_unique_call 384} Tmp_386 := __HAVOC_malloc(88);
    call {:si_unique_call 385} Tmp_387 := __HAVOC_malloc(88);
    call {:si_unique_call 386} Tmp_388 := __HAVOC_malloc(88);
    call {:si_unique_call 387} Tmp_391 := __HAVOC_malloc(112);
    call {:si_unique_call 388} Tmp_393 := __HAVOC_malloc(88);
    call {:si_unique_call 389} Tmp_394 := __HAVOC_malloc(88);
    call {:si_unique_call 390} Tmp_395 := __HAVOC_malloc(88);
    call {:si_unique_call 391} Tmp_396 := __HAVOC_malloc(88);
    call {:si_unique_call 392} Tmp_398 := __HAVOC_malloc(104);
    call {:si_unique_call 393} Tmp_400 := __HAVOC_malloc(88);
    call {:si_unique_call 394} Tmp_402 := __HAVOC_malloc(88);
    call {:si_unique_call 395} Tmp_403 := __HAVOC_malloc(88);
    call {:si_unique_call 396} Tmp_405 := __HAVOC_malloc(88);
    call {:si_unique_call 397} Tmp_406 := __HAVOC_malloc(88);
    call {:si_unique_call 398} Tmp_407 := __HAVOC_malloc(68);
    call {:si_unique_call 399} Tmp_408 := __HAVOC_malloc(88);
    call {:si_unique_call 400} Tmp_409 := __HAVOC_malloc(88);
    call {:si_unique_call 401} Tmp_411 := __HAVOC_malloc(88);
    call {:si_unique_call 402} Tmp_412 := __HAVOC_malloc(196);
    call {:si_unique_call 403} Tmp_413 := __HAVOC_malloc(88);
    call {:si_unique_call 404} Tmp_416 := __HAVOC_malloc(88);
    call {:si_unique_call 405} Tmp_418 := __HAVOC_malloc(88);
    call {:si_unique_call 406} Tmp_419 := __HAVOC_malloc(88);
    call {:si_unique_call 407} Tmp_424 := __HAVOC_malloc(88);
    call {:si_unique_call 408} Tmp_426 := __HAVOC_malloc(88);
    call {:si_unique_call 409} Tmp_430 := __HAVOC_malloc(120);
    call {:si_unique_call 410} Tmp_431 := __HAVOC_malloc(88);
    call {:si_unique_call 411} Tmp_433 := __HAVOC_malloc(88);
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc NonTxCmdBlockHdr_2;
    Tmp_407 := strConst__li2bpl124;
    call {:si_unique_call 412} DebugPrint(5, 4096, Tmp_407);
    call {:si_unique_call 413} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_2 != 0;
    assume NonTxCmdBlockHdr_2 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(NonTxCmdBlockHdr_2)] := 0;
    assume {:nonnull} NonTxCmdBlockHdr_2 != 0;
    assume NonTxCmdBlockHdr_2 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_2 != 0;
    assume NonTxCmdBlockHdr_2 > 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_381;
    assume {:nonnull} Tmp_381 != 0;
    assume Tmp_381 > 0;
    havoc Tmp_396;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    Mem_T.INT4[Tmp_396] := 22;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_401;
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    havoc Tmp_372;
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    Mem_T.INT4[Tmp_372 + 2 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_421;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    havoc Tmp_394;
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    Mem_T.INT4[Tmp_394 + 3 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_432;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    havoc Tmp_413;
    assume {:nonnull} Tmp_413 != 0;
    assume Tmp_413 > 0;
    Mem_T.INT4[Tmp_413 + 6 * 4] := 50;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_380;
    assume {:nonnull} Tmp_380 != 0;
    assume Tmp_380 > 0;
    havoc Tmp_431;
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    Mem_T.INT4[Tmp_431 + 9 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_371;
    assume {:nonnull} Tmp_371 != 0;
    assume Tmp_371 > 0;
    havoc Tmp_386;
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    Mem_T.INT4[Tmp_386 + 10 * 4] := 46;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_382;
    assume {:nonnull} Tmp_382 != 0;
    assume Tmp_382 > 0;
    havoc Tmp_424;
    assume {:nonnull} Tmp_424 != 0;
    assume Tmp_424 > 0;
    Mem_T.INT4[Tmp_424 + 11 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_389;
    assume {:nonnull} Tmp_389 != 0;
    assume Tmp_389 > 0;
    havoc Tmp_419;
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    Mem_T.INT4[Tmp_419 + 12 * 4] := 96;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_417;
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    havoc Tmp_409;
    assume {:nonnull} Tmp_409 != 0;
    assume Tmp_409 > 0;
    Mem_T.INT4[Tmp_409 + 13 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_368;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    havoc Tmp_388;
    assume {:nonnull} Tmp_388 != 0;
    assume Tmp_388 > 0;
    Mem_T.INT4[Tmp_388 + 14 * 4] := 242;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_399;
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    havoc Tmp_387;
    assume {:nonnull} Tmp_387 != 0;
    assume Tmp_387 > 0;
    Mem_T.INT4[Tmp_387 + 16 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_390;
    assume {:nonnull} Tmp_390 != 0;
    assume Tmp_390 > 0;
    havoc Tmp_395;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    Mem_T.INT4[Tmp_395 + 17 * 4] := 64;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_429;
    assume {:nonnull} Tmp_429 != 0;
    assume Tmp_429 > 0;
    havoc Tmp_403;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    Mem_T.INT4[Tmp_403 + 18 * 4] := 242;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_375;
    assume {:nonnull} Tmp_375 != 0;
    assume Tmp_375 > 0;
    havoc Tmp_362;
    assume {:nonnull} Tmp_362 != 0;
    assume Tmp_362 > 0;
    Mem_T.INT4[Tmp_362 + 20 * 4] := 63;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_422;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    havoc Tmp_393;
    assume {:nonnull} Tmp_393 != 0;
    assume Tmp_393 > 0;
    Mem_T.INT4[Tmp_393 + 21 * 4] := 5;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_369;
    assume {:nonnull} Tmp_369 != 0;
    assume Tmp_369 > 0;
    havoc Tmp_363;
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    call {:si_unique_call 414} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_363 + 1 * 4] := boogieTmp;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_427;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    havoc Tmp_366;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_370;
    assume {:nonnull} Tmp_370 != 0;
    assume Tmp_370 > 0;
    havoc Tmp_405;
    assume {:nonnull} Tmp_366 != 0;
    assume Tmp_366 > 0;
    assume {:nonnull} Tmp_405 != 0;
    assume Tmp_405 > 0;
    Mem_T.INT4[Tmp_366 + 3 * 4] := BOR(Mem_T.INT4[Tmp_405 + 3 * 4], 1);
    goto L36;

  L36:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L39;

  L39:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_425;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    havoc Tmp_402;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    havoc vslice_dummy_var_19;
    Mem_T.INT4[Tmp_402 + 4 * 4] := vslice_dummy_var_19;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_383;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc Tmp_400;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    havoc vslice_dummy_var_20;
    Mem_T.INT4[Tmp_400 + 5 * 4] := vslice_dummy_var_20;
    goto L41;

  L41:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_434;
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    havoc Tmp_418;
    assume {:nonnull} Tmp_418 != 0;
    assume Tmp_418 > 0;
    call {:si_unique_call 415} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_418 + 7 * 4] := boogieTmp;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_379;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    havoc Tmp_426;
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426 + 8 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_364;
    assume {:nonnull} Tmp_364 != 0;
    assume Tmp_364 > 0;
    havoc Tmp_376;
    assume {:nonnull} Tmp_376 != 0;
    assume Tmp_376 > 0;
    Mem_T.INT4[Tmp_376 + 15 * 4] := 234;
    goto L46;

  L46:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_367;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    havoc Tmp_416;
    assume {:nonnull} Tmp_416 != 0;
    assume Tmp_416 > 0;
    Mem_T.INT4[Tmp_416 + 19 * 4] := 0;
    goto L49;

  L49:
    Tmp_430 := strConst__li2bpl121;
    call {:si_unique_call 416} DebugPrint(6, 4096, Tmp_430);
    Tmp_412 := strConst__li2bpl122;
    call {:si_unique_call 417} DebugPrint(6, 4096, Tmp_412);
    i_5 := 0;
    goto L56;

  L56:
    call {:si_unique_call 418} i_5, Tmp_373, Tmp_384, Tmp_398, Tmp_414, Tmp_415 := HwConfigure_loop_L56(i_5, Tmp_373, Tmp_384, Tmp_398, Tmp_414, Tmp_415, FdoData_36);
    goto L56_last;

  L56_last:
    assume {:CounterLoop 22} {:Counter "i_5"} true;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} 22 > i_5;
    Tmp_414 := i_5;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_373;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    havoc Tmp_384;
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    Tmp_415 := Mem_T.INT4[Tmp_384 + Tmp_414 * 4];
    Tmp_398 := strConst__li2bpl125;
    call {:si_unique_call 419} DebugPrint(6, 4096, Tmp_398);
    i_5 := i_5 + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} i_5 >= 22;
    call {:si_unique_call 420} sdv_171 := WaitScb(FdoData_36);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_171 != 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_392;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    call {:si_unique_call 421} status_33 := D100SubmitCommandBlockAndWait(FdoData_36);
    goto L72;

  L72:
    Tmp_391 := strConst__li2bpl123;
    call {:si_unique_call 422} DebugPrint(5, 4096, Tmp_391);
    Tmp_361 := status_33;
    return;

  anon26_Then:
    assume {:partition} sdv_171 == 0;
    status_33 := -1073741668;
    goto L72;

  anon23_Then:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_404;
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    havoc Tmp_408;
    assume {:nonnull} Tmp_408 != 0;
    assume Tmp_408 > 0;
    Mem_T.INT4[Tmp_408 + 19 * 4] := 192;
    goto L49;

  anon24_Then:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L79;

  L79:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_423;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    havoc Tmp_377;
    assume {:nonnull} Tmp_377 != 0;
    assume Tmp_377 > 0;
    Mem_T.INT4[Tmp_377 + 19 * 4] := 128;
    goto L49;

  anon27_Then:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_410;
    assume {:nonnull} Tmp_410 != 0;
    assume Tmp_410 > 0;
    havoc Tmp_433;
    assume {:nonnull} Tmp_433 != 0;
    assume Tmp_433 > 0;
    Mem_T.INT4[Tmp_433 + 19 * 4] := 192;
    goto L49;

  anon28_Then:
    goto L79;

  anon30_Then:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_385;
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    havoc Tmp_411;
    assume {:nonnull} Tmp_411 != 0;
    assume Tmp_411 > 0;
    Mem_T.INT4[Tmp_411 + 8 * 4] := 1;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_420;
    assume {:nonnull} Tmp_420 != 0;
    assume Tmp_420 > 0;
    havoc Tmp_406;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    Mem_T.INT4[Tmp_406 + 15 * 4] := 106;
    goto L46;

  anon21_Then:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_428;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    havoc Tmp_374;
    assume {:nonnull} Tmp_374 != 0;
    assume Tmp_374 > 0;
    Mem_T.INT4[Tmp_374 + 4 * 4] := 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_365;
    assume {:nonnull} Tmp_365 != 0;
    assume Tmp_365 > 0;
    havoc Tmp_378;
    assume {:nonnull} Tmp_378 != 0;
    assume Tmp_378 > 0;
    Mem_T.INT4[Tmp_378 + 5 * 4] := 0;
    goto L41;

  anon22_Then:
    goto L39;

  anon29_Then:
    goto L36;
}



procedure {:origName "NICAllocAdapterMemory"} NICAllocAdapterMemory(actual_FdoData_37: int) returns (Tmp_435: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_435 == 0 || Tmp_435 == -1073741670 || Tmp_435 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICAllocAdapterMemory"} NICAllocAdapterMemory(actual_FdoData_37: int) returns (Tmp_435: int)
{
  var {:pointer} Tmp_436: int;
  var {:scalar} Tmp_438: int;
  var {:pointer} Tmp_439: int;
  var {:pointer} Tmp_440: int;
  var {:pointer} Tmp_441: int;
  var {:scalar} Tmp_442: int;
  var {:pointer} Tmp_443: int;
  var {:scalar} Tmp_444: int;
  var {:pointer} Tmp_445: int;
  var {:scalar} Tmp_446: int;
  var {:pointer} Tmp_447: int;
  var {:pointer} Tmp_448: int;
  var {:pointer} sdv_174: int;
  var {:pointer} Tmp_449: int;
  var {:pointer} Tmp_450: int;
  var {:scalar} Tmp_451: int;
  var {:pointer} pMem: int;
  var {:pointer} sdv_176: int;
  var {:pointer} sdv_177: int;
  var {:pointer} Tmp_452: int;
  var {:scalar} MemPhys: int;
  var {:pointer} Tmp_453: int;
  var {:scalar} status_34: int;
  var {:pointer} Tmp_454: int;
  var {:pointer} Tmp_455: int;
  var {:pointer} FdoData_37: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;

  anon0:
    FdoData_37 := actual_FdoData_37;
    call {:si_unique_call 423} Tmp_436 := __HAVOC_malloc(104);
    call {:si_unique_call 424} Tmp_439 := __HAVOC_malloc(52);
    call {:si_unique_call 425} Tmp_440 := __HAVOC_malloc(128);
    call {:si_unique_call 426} Tmp_441 := __HAVOC_malloc(116);
    call {:si_unique_call 427} Tmp_443 := __HAVOC_malloc(128);
    call {:si_unique_call 428} Tmp_445 := __HAVOC_malloc(44);
    call {:si_unique_call 429} Tmp_448 := __HAVOC_malloc(104);
    call {:si_unique_call 430} Tmp_450 := __HAVOC_malloc(64);
    call {:si_unique_call 431} Tmp_454 := __HAVOC_malloc(108);
    call {:si_unique_call 432} Tmp_455 := __HAVOC_malloc(152);
    status_34 := 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    Tmp_454 := strConst__li2bpl132;
    call {:si_unique_call 433} DebugPrint(5, 1, Tmp_454);
    call {:si_unique_call 434} sdv_do_paged_code_check();
    Tmp_445 := strConst__li2bpl126;
    call {:si_unique_call 435} DebugPrint(6, 1, Tmp_445);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc vslice_dummy_var_21;
    call {:si_unique_call 436} sdv_ExInitializeNPagedLookasideList_NXPoolOptIn(0, 0, 0, 0, vslice_dummy_var_21, -1001831600, 0);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 437} status_34 := RtlULongMult(Mem_T.INT4[NumTcb__FDO_DATA(FdoData_37)], 52, MpTcbMemSize__FDO_DATA(FdoData_37));
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_34 >= 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 438} sdv_174 := ExAllocatePoolWithTag(512, Mem_T.INT4[MpTcbMemSize__FDO_DATA(FdoData_37)], -1001831600);
    pMem := sdv_174;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pMem != 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 439} sdv_RtlZeroMemory(0, Mem_T.INT4[MpTcbMemSize__FDO_DATA(FdoData_37)]);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 440} status_34 := RtlULongMult(Mem_T.INT4[NumTcb__FDO_DATA(FdoData_37)], 320, HwSendMemAllocSize__FDO_DATA(FdoData_37));
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_34 >= 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 441} sdv_RtlZeroMemory(0, Mem_T.INT4[HwSendMemAllocSize__FDO_DATA(FdoData_37)]);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc vslice_dummy_var_22;
    call {:si_unique_call 442} sdv_RtlZeroMemory(0, vslice_dummy_var_22);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc pMem;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc MemPhys;
    Tmp_453 := BAND(pMem + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    Tmp_446 := BAND(MemPhys + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc pMem;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc MemPhys;
    Tmp_449 := BAND(pMem + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    Tmp_444 := BAND(MemPhys + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc pMem;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc MemPhys;
    Tmp_447 := BAND(pMem + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    Tmp_451 := BAND(MemPhys + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc pMem;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc MemPhys;
    Tmp_452 := BAND(pMem + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    Tmp_442 := BAND(MemPhys + 15, BNOT(BOR(BOR(BOR(1, 2), 4), 8)));
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 443} sdv_ExInitializeNPagedLookasideList_NXPoolOptIn(0, 0, 0, 0, 56, -1001831600, 0);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.INT4[NumRfd__FDO_DATA(FdoData_37)] > 128;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    Tmp_438 := Mem_T.INT4[NumRfd__FDO_DATA(FdoData_37)];
    goto L119;

  L119:
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    Tmp_439 := strConst__li2bpl133;
    call {:si_unique_call 444} DebugPrint(6, 1, Tmp_439);
    Tmp_450 := strConst__li2bpl130;
    call {:si_unique_call 445} DebugPrint(6, 1, Tmp_450);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    status_34 := 0;
    goto L128;

  L128:
    Tmp_455 := strConst__li2bpl131;
    call {:si_unique_call 446} DebugPrint(5, 1, Tmp_455);
    Tmp_435 := status_34;
    return;

  anon18_Then:
    assume {:partition} 128 >= Mem_T.INT4[NumRfd__FDO_DATA(FdoData_37)];
    Tmp_438 := 128;
    goto L119;

  anon17_Then:
    Tmp_443 := strConst__li2bpl129;
    call {:si_unique_call 447} DebugPrint(2, 1, Tmp_443);
    status_34 := -1073741670;
    goto L128;

  anon16_Then:
    Tmp_440 := strConst__li2bpl128;
    call {:si_unique_call 448} DebugPrint(2, 1, Tmp_440);
    status_34 := -1073741670;
    goto L128;

  anon14_Then:
    assume {:partition} 0 > status_34;
    Tmp_448 := strConst__li2bpl127;
    call {:si_unique_call 449} DebugPrint(2, 1, Tmp_448);
    goto L128;

  anon15_Then:
    assume {:partition} pMem == 0;
    status_34 := -1073741670;
    Tmp_441 := strConst__li2bpl134;
    call {:si_unique_call 450} DebugPrint(2, 1, Tmp_441);
    goto L128;

  anon13_Then:
    assume {:partition} 0 > status_34;
    Tmp_436 := strConst__li2bpl127;
    call {:si_unique_call 451} DebugPrint(2, 1, Tmp_436);
    goto L128;
}



procedure {:origName "NICAllocRfd"} NICAllocRfd(actual_FdoData_38: int, actual_pMpRfd_6: int) returns (Tmp_456: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_456 == 0 || Tmp_456 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICAllocRfd"} NICAllocRfd(actual_FdoData_38: int, actual_pMpRfd_6: int) returns (Tmp_456: int)
{
  var {:scalar} status_35: int;
  var {:pointer} pHwRfd_2: int;
  var {:pointer} FdoData_38: int;
  var {:pointer} pMpRfd_6: int;
  var boogieTmp: int;

  anon0:
    FdoData_38 := actual_FdoData_38;
    pMpRfd_6 := actual_pMpRfd_6;
    status_35 := 0;
    call {:si_unique_call 452} sdv_do_paged_code_check();
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    havoc pHwRfd_2;
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    call {:si_unique_call 453} boogieTmp := IoAllocateMdl(0, 1514, 0, 0, 0);
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} pHwRfd_2 != 0;
    assume pHwRfd_2 > 0;
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    assume {:nonnull} pHwRfd_2 != 0;
    assume pHwRfd_2 > 0;
    assume {:nonnull} pHwRfd_2 != 0;
    assume pHwRfd_2 > 0;
    goto L24;

  L24:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_35 >= 0;
    goto L26;

  L26:
    Tmp_456 := status_35;
    return;

  anon8_Then:
    assume {:partition} 0 > status_35;
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} FdoData_38 != 0;
    assume FdoData_38 > 0;
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    assume {:nonnull} pMpRfd_6 != 0;
    assume pMpRfd_6 > 0;
    goto L26;

  anon9_Then:
    goto L26;

  anon7_Then:
    status_35 := -1073741670;
    goto L24;
}



procedure {:origName "NICFreeDeviceResources"} NICFreeDeviceResources(actual_FdoData_39: int) returns (Tmp_458: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeDeviceResources"} NICFreeDeviceResources(actual_FdoData_39: int) returns (Tmp_458: int)
{
  var {:pointer} Tmp_459: int;
  var {:scalar} sdv_179: int;
  var {:pointer} Tmp_460: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} Tmp_461: int;
  var {:pointer} Tmp_462: int;
  var {:pointer} FdoData_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;

  anon0:
    FdoData_39 := actual_FdoData_39;
    call {:si_unique_call 454} Tmp_459 := __HAVOC_malloc(108);
    call {:si_unique_call 455} Tmp_460 := __HAVOC_malloc(164);
    call {:si_unique_call 456} Tmp_461 := __HAVOC_malloc(108);
    Tmp_459 := strConst__li2bpl135;
    call {:si_unique_call 457} DebugPrint(4, 1, Tmp_459);
    call {:si_unique_call 458} sdv_179 := KeCancelTimer(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_179 != 0;
    goto L15;

  L15:
    call {:si_unique_call 459} Tmp_462 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_462 != 0;
    assume Tmp_462 > 0;
    Mem_T.INT4[Tmp_462] := oldIrql_1;
    call {:si_unique_call 460} sdv_KeRaiseIrql(2, Tmp_462);
    assume {:nonnull} Tmp_462 != 0;
    assume Tmp_462 > 0;
    oldIrql_1 := Mem_T.INT4[Tmp_462];
    call {:si_unique_call 461} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 462} NICFreeQueuedSendPackets(FdoData_39);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 463} NICFreeBusySendPackets(FdoData_39);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 464} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 465} sdv_KeLowerIrql(oldIrql_1);
    call {:si_unique_call 466} NICFreeAdapterMemory(FdoData_39);
    call {:si_unique_call 467} vslice_dummy_var_40 := NICUnmapHWResources(FdoData_39);
    Tmp_461 := strConst__li2bpl137;
    call {:si_unique_call 468} DebugPrint(4, 1, Tmp_461);
    Tmp_458 := 0;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} sdv_179 == 0;
    Tmp_460 := strConst__li2bpl136;
    call {:si_unique_call 469} DebugPrint(4, 1, Tmp_460);
    call {:si_unique_call 470} vslice_dummy_var_41 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L15;
}



procedure {:origName "NICInitializeDeviceExtension"} NICInitializeDeviceExtension(actual_FdoData_40: int) returns (Tmp_463: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInitializeDeviceExtension"} NICInitializeDeviceExtension(actual_FdoData_40: int) returns (Tmp_463: int)
{
  var {:pointer} Tmp_464: int;
  var {:scalar} status_37: int;
  var {:pointer} FdoData_40: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;

  anon0:
    FdoData_40 := actual_FdoData_40;
    call {:si_unique_call 471} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    havoc vslice_dummy_var_23;
    call {:si_unique_call 472} status_37 := GetPCIBusInterfaceStandard(vslice_dummy_var_23, BusInterface__FDO_DATA(FdoData_40));
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_37 >= 0;
    call {:si_unique_call 473} NICGetDeviceInfSettings(FdoData_40);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 474} InitializeListHead(SendQueueHead__FDO_DATA(FdoData_40));
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 475} InitializeListHead(RecvList__FDO_DATA(FdoData_40));
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 476} InitializeListHead(RecvQueueHead__FDO_DATA(FdoData_40));
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 477} InitializeListHead(PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_40)));
    call {:si_unique_call 478} Tmp_464 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    havoc vslice_dummy_var_24;
    Mem_T.INT4[Tmp_464] := vslice_dummy_var_24;
    call {:si_unique_call 479} sdv_KeInitializeSpinLock(Tmp_464);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    call {:si_unique_call 480} Tmp_464 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    havoc vslice_dummy_var_25;
    Mem_T.INT4[Tmp_464] := vslice_dummy_var_25;
    call {:si_unique_call 481} sdv_KeInitializeSpinLock(Tmp_464);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    call {:si_unique_call 482} Tmp_464 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    havoc vslice_dummy_var_26;
    Mem_T.INT4[Tmp_464] := vslice_dummy_var_26;
    call {:si_unique_call 483} sdv_KeInitializeSpinLock(Tmp_464);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    call {:si_unique_call 484} Tmp_464 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    havoc vslice_dummy_var_27;
    Mem_T.INT4[Tmp_464] := vslice_dummy_var_27;
    call {:si_unique_call 485} sdv_KeInitializeSpinLock(Tmp_464);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 486} KeInitializeDpc(WatchDogTimerDpc__FDO_DATA(FdoData_40), li2bplFunctionConstant911, 0);
    call {:si_unique_call 487} KeInitializeTimer(0);
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 488} KeInitializeEvent(WatchDogTimerEvent__FDO_DATA(FdoData_40), 0, 1);
    Tmp_463 := status_37;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 > status_37;
    Tmp_463 := status_37;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "NICFreeRfd"} NICFreeRfd(actual_FdoData_41: int, actual_pMpRfd_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeRfd"} NICFreeRfd(actual_FdoData_41: int, actual_pMpRfd_7: int)
{
  var {:pointer} FdoData_41: int;
  var {:pointer} pMpRfd_7: int;
  var vslice_dummy_var_42: int;

  anon0:
    call {:si_unique_call 489} vslice_dummy_var_42 := __HAVOC_malloc(4);
    FdoData_41 := actual_FdoData_41;
    pMpRfd_7 := actual_pMpRfd_7;
    call {:si_unique_call 490} sdv_do_paged_code_check();
    call {:si_unique_call 491} IoFreeMdl(0);
    assume {:nonnull} FdoData_41 != 0;
    assume FdoData_41 > 0;
    assume {:nonnull} pMpRfd_7 != 0;
    assume pMpRfd_7 > 0;
    assume {:nonnull} pMpRfd_7 != 0;
    assume pMpRfd_7 > 0;
    assume {:nonnull} FdoData_41 != 0;
    assume FdoData_41 > 0;
    call {:si_unique_call 492} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(FdoData_41), pMpRfd_7);
    return;
}



procedure {:origName "NICInitSend"} NICInitSend(actual_FdoData_42: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInitSend"} NICInitSend(actual_FdoData_42: int)
{
  var {:scalar} HwTcbPhys: int;
  var {:pointer} pHwTbd: int;
  var {:pointer} Tmp_467: int;
  var {:scalar} TcbCount: int;
  var {:pointer} pHwTcb: int;
  var {:pointer} pMpTcb: int;
  var {:pointer} Tmp_470: int;
  var {:scalar} HwTbdPhys: int;
  var {:pointer} FdoData_42: int;
  var vslice_dummy_var_43: int;

  anon0:
    call {:si_unique_call 493} vslice_dummy_var_43 := __HAVOC_malloc(4);
    FdoData_42 := actual_FdoData_42;
    call {:si_unique_call 494} Tmp_467 := __HAVOC_malloc(68);
    call {:si_unique_call 495} Tmp_470 := __HAVOC_malloc(68);
    Tmp_470 := strConst__li2bpl138;
    call {:si_unique_call 496} DebugPrint(5, 1, Tmp_470);
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc pMpTcb;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc pHwTcb;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc HwTcbPhys;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc pHwTbd;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    HwTbdPhys := HwTcbPhys + 256 * Mem_T.INT4[NumTcb__FDO_DATA(FdoData_42)];
    TcbCount := 0;
    goto L20;

  L20:
    call {:si_unique_call 497} HwTcbPhys, TcbCount, HwTbdPhys := NICInitSend_loop_L20(HwTcbPhys, pHwTbd, TcbCount, pHwTcb, pMpTcb, HwTbdPhys, FdoData_42);
    goto L20_last;

  L20_last:
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_42)] > TcbCount;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} TcbCount != 0;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    goto L29;

  L29:
    assume {:nonnull} pHwTcb != 0;
    assume pHwTcb > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(TxCbHeader__GENERIC_TxCB(pHwTcb))] := 0;
    assume {:nonnull} pHwTcb != 0;
    assume pHwTcb > 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_42)] - 1 > TcbCount;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    assume {:nonnull} pHwTcb != 0;
    assume pHwTcb > 0;
    goto L35;

  L35:
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    assume {:nonnull} pHwTcb != 0;
    assume pHwTcb > 0;
    assume {:nonnull} pHwTcb != 0;
    assume pHwTcb > 0;
    HwTcbPhys := HwTcbPhys + 256;
    HwTbdPhys := HwTbdPhys + 64;
    TcbCount := TcbCount + 1;
    goto L35_dummy;

  L35_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} TcbCount >= Mem_T.INT4[NumTcb__FDO_DATA(FdoData_42)] - 1;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    assume {:nonnull} pHwTcb != 0;
    assume pHwTcb > 0;
    goto L35;

  anon8_Then:
    assume {:partition} TcbCount == 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    goto L29;

  anon7_Then:
    assume {:partition} TcbCount >= Mem_T.INT4[NumTcb__FDO_DATA(FdoData_42)];
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    Tmp_467 := strConst__li2bpl139;
    call {:si_unique_call 498} DebugPrint(5, 1, Tmp_467);
    return;
}



procedure {:origName "NICInitializeAdapter"} NICInitializeAdapter(actual_FdoData_43: int) returns (Tmp_471: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_471 == -1073741668 || Tmp_471 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInitializeAdapter"} NICInitializeAdapter(actual_FdoData_43: int) returns (Tmp_471: int)
{
  var {:pointer} Tmp_472: int;
  var {:pointer} Tmp_473: int;
  var {:pointer} Tmp_474: int;
  var {:scalar} sdv_185: int;
  var {:pointer} Tmp_475: int;
  var {:scalar} status_38: int;
  var {:pointer} FdoData_43: int;
  var vslice_dummy_var_44: int;

  anon0:
    FdoData_43 := actual_FdoData_43;
    call {:si_unique_call 499} Tmp_473 := __HAVOC_malloc(104);
    call {:si_unique_call 500} Tmp_475 := __HAVOC_malloc(148);
    Tmp_473 := strConst__li2bpl140;
    call {:si_unique_call 501} DebugPrint(5, 1, Tmp_473);
    call {:si_unique_call 502} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    call {:si_unique_call 503} HwSoftwareReset(FdoData_43);
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    havoc Tmp_474;
    assume {:nonnull} Tmp_474 != 0;
    assume Tmp_474 > 0;
    call {:si_unique_call 504} status_38 := D100IssueScbCommand(FdoData_43, 96, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_38 != 0;
    goto L25;

  L25:
    Tmp_475 := strConst__li2bpl141;
    call {:si_unique_call 505} DebugPrint(5, 1, Tmp_475);
    Tmp_471 := status_38;
    return;

  anon11_Then:
    assume {:partition} status_38 == 0;
    call {:si_unique_call 506} sdv_185 := WaitScb(FdoData_43);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_185 != 0;
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    havoc Tmp_472;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    call {:si_unique_call 507} status_38 := D100IssueScbCommand(FdoData_43, 6, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_38 == 0;
    call {:si_unique_call 508} status_38 := HwConfigure(FdoData_43);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_38 == 0;
    call {:si_unique_call 509} status_38 := HwSetupIAAddress(FdoData_43);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_38 == 0;
    call {:si_unique_call 510} vslice_dummy_var_44 := HwClearAllCounters(FdoData_43);
    goto L25;

  anon15_Then:
    assume {:partition} status_38 != 0;
    goto L25;

  anon14_Then:
    assume {:partition} status_38 != 0;
    goto L25;

  anon13_Then:
    assume {:partition} status_38 != 0;
    goto L25;

  anon12_Then:
    assume {:partition} sdv_185 == 0;
    status_38 := -1073741668;
    goto L25;
}



procedure {:origName "NICSelfTest"} NICSelfTest(actual_FdoData_44: int) returns (Tmp_477: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_477 == 0 || Tmp_477 == -1073741438;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSelfTest"} NICSelfTest(actual_FdoData_44: int) returns (Tmp_477: int)
{
  var {:pointer} Tmp_478: int;
  var {:pointer} Tmp_479: int;
  var {:pointer} Tmp_480: int;
  var {:scalar} SelfTestCommandCode: int;
  var {:pointer} Tmp_481: int;
  var {:pointer} Tmp_483: int;
  var {:pointer} Tmp_484: int;
  var {:pointer} Tmp_485: int;
  var {:pointer} Tmp_486: int;
  var {:scalar} status_39: int;
  var {:pointer} Tmp_487: int;
  var {:pointer} Tmp_488: int;
  var {:pointer} Tmp_489: int;
  var {:pointer} FdoData_44: int;

  anon0:
    FdoData_44 := actual_FdoData_44;
    call {:si_unique_call 511} Tmp_478 := __HAVOC_malloc(120);
    call {:si_unique_call 512} Tmp_484 := __HAVOC_malloc(112);
    call {:si_unique_call 513} Tmp_486 := __HAVOC_malloc(68);
    call {:si_unique_call 514} Tmp_489 := __HAVOC_malloc(120);
    status_39 := 0;
    Tmp_486 := strConst__li2bpl145;
    call {:si_unique_call 515} DebugPrint(5, 1, Tmp_486);
    call {:si_unique_call 516} sdv_do_paged_code_check();
    Tmp_489 := strConst__li2bpl142;
    call {:si_unique_call 517} DebugPrint(6, 1, Tmp_489);
    call {:si_unique_call 518} HwSoftwareReset(FdoData_44);
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc SelfTestCommandCode;
    SelfTestCommandCode := BOR(SelfTestCommandCode, 1);
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc Tmp_488;
    assume {:nonnull} Tmp_488 != 0;
    assume Tmp_488 > 0;
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc Tmp_483;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc Tmp_481;
    assume {:nonnull} Tmp_481 != 0;
    assume Tmp_481 > 0;
    call {:si_unique_call 519} MP_STALL_EXECUTION(5);
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc Tmp_479;
    assume {:nonnull} Tmp_479 != 0;
    assume Tmp_479 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc Tmp_480;
    assume {:nonnull} Tmp_480 != 0;
    assume Tmp_480 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L31;

  L31:
    Tmp_484 := strConst__li2bpl144;
    call {:si_unique_call 520} DebugPrint(5, 1, Tmp_484);
    Tmp_477 := status_39;
    return;

  anon6_Then:
    goto L27;

  L27:
    Tmp_478 := strConst__li2bpl143;
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc Tmp_485;
    assume {:nonnull} FdoData_44 != 0;
    assume FdoData_44 > 0;
    havoc Tmp_487;
    call {:si_unique_call 521} DebugPrint(2, 1, Tmp_478);
    status_39 := -1073741438;
    goto L31;

  anon5_Then:
    goto L27;
}



procedure {:origName "GetPCIBusInterfaceStandard"} GetPCIBusInterfaceStandard(actual_DeviceObject_17: int, actual_BusInterfaceStandard: int) returns (Tmp_490: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetPCIBusInterfaceStandard"} GetPCIBusInterfaceStandard(actual_DeviceObject_17: int, actual_BusInterfaceStandard: int) returns (Tmp_490: int)
{
  var {:pointer} irpStack: int;
  var {:pointer} Tmp_492: int;
  var {:scalar} ioStatusBlock: int;
  var {:pointer} irp_2: int;
  var {:scalar} status_40: int;
  var {:pointer} targetObject: int;
  var {:scalar} event: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} BusInterfaceStandard: int;
  var vslice_dummy_var_45: int;

  anon0:
    call {:si_unique_call 522} ioStatusBlock := __HAVOC_malloc(12);
    call {:si_unique_call 523} event := __HAVOC_malloc(156);
    DeviceObject_17 := actual_DeviceObject_17;
    BusInterfaceStandard := actual_BusInterfaceStandard;
    call {:si_unique_call 524} Tmp_492 := __HAVOC_malloc(148);
    Tmp_492 := strConst__li2bpl146;
    call {:si_unique_call 525} DebugPrint(5, 1, Tmp_492);
    call {:si_unique_call 526} sdv_do_paged_code_check();
    call {:si_unique_call 527} KeInitializeEvent(event, 0, 0);
    call {:si_unique_call 528} targetObject := IoGetAttachedDeviceReference(DeviceObject_17);
    call {:si_unique_call 529} irp_2 := IoBuildSynchronousFsdRequest(27, 0, 0, 0, 0, 0, ioStatusBlock);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_2 != 0;
    call {:si_unique_call 530} irpStack := sdv_IoGetNextIrpStackLocation(irp_2);
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    call {:si_unique_call 531} status_40 := sdv_IoCallDriver#1(targetObject, irp_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_40 == 259;
    call {:si_unique_call 532} status_40 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} ioStatusBlock != 0;
    assume ioStatusBlock > 0;
    havoc status_40;
    goto L44;

  L44:
    call {:si_unique_call 533} vslice_dummy_var_45 := sdv_ObDereferenceObject(0);
    Tmp_490 := status_40;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} status_40 != 259;
    goto L44;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_2 == 0;
    status_40 := -1073741670;
    goto L44;
}



procedure {:origName "HwClearAllCounters"} HwClearAllCounters(actual_FdoData_45: int) returns (Tmp_493: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_493 == -1073741668 || Tmp_493 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwClearAllCounters"} HwClearAllCounters(actual_FdoData_45: int) returns (Tmp_493: int)
{
  var {:scalar} counter: int;
  var {:pointer} Tmp_495: int;
  var {:pointer} Tmp_496: int;
  var {:pointer} Tmp_497: int;
  var {:pointer} Tmp_498: int;
  var {:scalar} status_41: int;
  var {:scalar} bResult: int;
  var {:pointer} FdoData_45: int;

  anon0:
    FdoData_45 := actual_FdoData_45;
    call {:si_unique_call 534} Tmp_495 := __HAVOC_malloc(96);
    call {:si_unique_call 535} Tmp_498 := __HAVOC_malloc(140);
    Tmp_495 := strConst__li2bpl147;
    call {:si_unique_call 536} DebugPrint(5, 4096, Tmp_495);
    call {:si_unique_call 537} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    havoc Tmp_497;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} Tmp_497 != 0;
    assume Tmp_497 > 0;
    call {:si_unique_call 538} status_41 := D100IssueScbCommand(FdoData_45, 64, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_41 != 0;
    goto L21;

  L21:
    Tmp_498 := strConst__li2bpl148;
    call {:si_unique_call 539} DebugPrint(5, 4096, Tmp_498);
    Tmp_493 := status_41;
    return;

  anon11_Then:
    assume {:partition} status_41 == 0;
    call {:si_unique_call 540} status_41 := D100IssueScbCommand(FdoData_45, 112, 1);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_41 == 0;
    bResult := 0;
    counter := 100000;
    goto L31;

  L31:
    call {:si_unique_call 541} counter, Tmp_496 := HwClearAllCounters_loop_L31(counter, Tmp_496, FdoData_45);
    goto L31_last;

  L31_last:
    assume {:CounterLoop 100000} {:Counter "counter"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} counter != 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    havoc Tmp_496;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    counter := counter - 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    bResult := 1;
    goto L32;

  L32:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} bResult != 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    goto L21;

  anon14_Then:
    assume {:partition} bResult == 0;
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    status_41 := -1073741668;
    goto L21;

  anon13_Then:
    assume {:partition} counter == 0;
    goto L32;

  anon12_Then:
    assume {:partition} status_41 != 0;
    goto L21;
}



procedure {:origName "NICAllocRfdWorkItem"} NICAllocRfdWorkItem(actual_DeviceObject_18: int, actual_Context_3: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICAllocRfdWorkItem"} NICAllocRfdWorkItem(actual_DeviceObject_18: int, actual_Context_3: int)
{
  var {:pointer} Tmp_499: int;
  var {:pointer} sdv_197: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} sdv_199: int;
  var {:pointer} TempMpRfd: int;
  var {:pointer} Tmp_501: int;
  var {:pointer} Tmp_502: int;
  var {:pointer} Tmp_503: int;
  var {:pointer} FdoData_46: int;
  var {:scalar} status_42: int;
  var {:pointer} Tmp_504: int;
  var {:pointer} Tmp_505: int;
  var {:pointer} DeviceObject_18: int;
  var {:pointer} Context_3: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;

  anon0:
    call {:si_unique_call 542} vslice_dummy_var_46 := __HAVOC_malloc(4);
    DeviceObject_18 := actual_DeviceObject_18;
    Context_3 := actual_Context_3;
    call {:si_unique_call 543} Tmp_499 := __HAVOC_malloc(104);
    call {:si_unique_call 544} Tmp_501 := __HAVOC_malloc(104);
    call {:si_unique_call 545} Tmp_502 := __HAVOC_malloc(116);
    call {:si_unique_call 546} Tmp_504 := __HAVOC_malloc(140);
    call {:si_unique_call 547} Tmp_505 := __HAVOC_malloc(60);
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc FdoData_46;
    Tmp_501 := strConst__li2bpl153;
    call {:si_unique_call 548} DebugPrint(5, 128, Tmp_501);
    call {:si_unique_call 549} sdv_197 := sdv_ExAllocateFromNPagedLookasideList(0);
    TempMpRfd := sdv_197;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} TempMpRfd != 0;
    assume {:nonnull} FdoData_46 != 0;
    assume FdoData_46 > 0;
    assume {:nonnull} TempMpRfd != 0;
    assume TempMpRfd > 0;
    assume {:nonnull} TempMpRfd != 0;
    assume TempMpRfd > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} TempMpRfd != 0;
    assume TempMpRfd > 0;
    assume {:nonnull} TempMpRfd != 0;
    assume TempMpRfd > 0;
    assume {:nonnull} TempMpRfd != 0;
    assume TempMpRfd > 0;
    call {:si_unique_call 550} status_42 := NICAllocRfd(FdoData_46, TempMpRfd);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_42 >= 0;
    call {:si_unique_call 551} Tmp_503 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_503 != 0;
    assume Tmp_503 > 0;
    Mem_T.INT4[Tmp_503] := oldIrql_2;
    call {:si_unique_call 552} sdv_KeAcquireSpinLock(0, Tmp_503);
    assume {:nonnull} Tmp_503 != 0;
    assume Tmp_503 > 0;
    oldIrql_2 := Mem_T.INT4[Tmp_503];
    assume {:nonnull} FdoData_46 != 0;
    assume FdoData_46 > 0;
    call {:si_unique_call 553} NICReturnRFD(FdoData_46, TempMpRfd);
    call {:si_unique_call 554} sdv_KeReleaseSpinLock(0, oldIrql_2);
    Tmp_505 := strConst__li2bpl149;
    call {:si_unique_call 555} DebugPrint(5, 128, Tmp_505);
    goto L18;

  L18:
    call {:si_unique_call 556} vslice_dummy_var_47 := PciDrvIoDecrement(FdoData_46);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} FdoData_46 != 0;
    assume FdoData_46 > 0;
    call {:si_unique_call 557} IoFreeWorkItem(0);
    call {:si_unique_call 558} sdv_ExFreePool(0);
    Tmp_499 := strConst__li2bpl152;
    call {:si_unique_call 559} DebugPrint(5, 128, Tmp_499);
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} 0 > status_42;
    assume {:nonnull} FdoData_46 != 0;
    assume FdoData_46 > 0;
    call {:si_unique_call 560} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(FdoData_46), TempMpRfd);
    Tmp_502 := strConst__li2bpl150;
    call {:si_unique_call 561} DebugPrint(2, 128, Tmp_502);
    goto L18;

  anon11_Then:
    assume {:nonnull} FdoData_46 != 0;
    assume FdoData_46 > 0;
    call {:si_unique_call 562} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(FdoData_46), TempMpRfd);
    Tmp_504 := strConst__li2bpl151;
    call {:si_unique_call 563} DebugPrint(2, 128, Tmp_504);
    goto L18;

  anon10_Then:
    assume {:partition} TempMpRfd == 0;
    goto L18;
}



procedure {:origName "NICGetDeviceInfSettings"} NICGetDeviceInfSettings(actual_FdoData_47: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICGetDeviceInfSettings"} NICGetDeviceInfSettings(actual_FdoData_47: int)
{
  var {:scalar} Tmp_506: int;
  var {:scalar} Tmp_507: int;
  var {:pointer} Tmp_508: int;
  var {:scalar} sdv_201: int;
  var {:scalar} Tmp_509: int;
  var {:scalar} Tmp_511: int;
  var {:scalar} Tmp_512: int;
  var {:scalar} Tmp_513: int;
  var {:pointer} Tmp_514: int;
  var {:scalar} sdv_202: int;
  var {:scalar} Tmp_515: int;
  var {:pointer} Tmp_516: int;
  var {:scalar} sdv_203: int;
  var {:scalar} sdv_205: int;
  var {:pointer} Tmp_517: int;
  var {:pointer} Tmp_518: int;
  var {:pointer} Tmp_519: int;
  var {:pointer} Tmp_520: int;
  var {:scalar} Tmp_522: int;
  var {:pointer} FdoData_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;

  anon0:
    call {:si_unique_call 564} vslice_dummy_var_48 := __HAVOC_malloc(4);
    FdoData_47 := actual_FdoData_47;
    call {:si_unique_call 565} Tmp_508 := __HAVOC_malloc(48);
    call {:si_unique_call 566} Tmp_514 := __HAVOC_malloc(28);
    call {:si_unique_call 567} Tmp_516 := __HAVOC_malloc(28);
    call {:si_unique_call 568} Tmp_517 := __HAVOC_malloc(64);
    call {:si_unique_call 569} Tmp_518 := __HAVOC_malloc(88);
    call {:si_unique_call 570} Tmp_520 := __HAVOC_malloc(48);
    Tmp_516 := strConst__li2bpl154;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    call {:si_unique_call 571} sdv_201 := PciDrvReadRegistryValue(FdoData_47, Tmp_516, NumRfd__FDO_DATA(FdoData_47));
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_201 != 0;
    goto L8;

  L8:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} 1024 > Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)];
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_507 := Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)];
    goto L11;

  L11:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)] := Tmp_507;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)] > 1;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_515 := Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)];
    goto L15;

  L15:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)] := Tmp_515;
    Tmp_514 := strConst__li2bpl159;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    call {:si_unique_call 572} sdv_202 := PciDrvReadRegistryValue(FdoData_47, Tmp_514, NumTcb__FDO_DATA(FdoData_47));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_202 != 0;
    goto L21;

  L21:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 64 > Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)];
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_513 := Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)];
    goto L24;

  L24:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)] := Tmp_513;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)] > 1;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_509 := Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)];
    goto L28;

  L28:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)] := Tmp_509;
    Tmp_520 := strConst__li2bpl160;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    call {:si_unique_call 573} sdv_203 := PciDrvReadRegistryValue(FdoData_47, Tmp_520, NumBuffers__FDO_DATA(FdoData_47));
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_203 != 0;
    goto L34;

  L34:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 32 > Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)];
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_522 := Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)];
    goto L37;

  L37:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)] := Tmp_522;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)] > 1;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_506 := Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)];
    goto L41;

  L41:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)] := Tmp_506;
    Tmp_508 := strConst__li2bpl161;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    call {:si_unique_call 574} sdv_205 := PciDrvReadRegistryValue(FdoData_47, Tmp_508, SpeedDuplex__FDO_DATA(FdoData_47));
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} sdv_205 != 0;
    goto L47;

  L47:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} 4 > Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)];
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_511 := Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)];
    goto L50;

  L50:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] := Tmp_511;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Tmp_512 := Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)];
    goto L54;

  L54:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] := Tmp_512;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] != 1;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] != 2;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] != 3;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] == 4;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L56;

  L56:
    Tmp_517 := strConst__li2bpl155;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    call {:si_unique_call 575} vslice_dummy_var_49 := PciDrvReadRegistryValue(FdoData_47, Tmp_517, IsUpperEdgeNdis__FDO_DATA(FdoData_47));
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_47)] != 0;
    Tmp_519 := strConst__li2bpl157;
    goto L74;

  L74:
    Tmp_518 := strConst__li2bpl158;
    call {:si_unique_call 576} DebugPrint(4, 1, Tmp_518);
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    return;

  anon43_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_47)] == 0;
    Tmp_519 := strConst__li2bpl156;
    goto L74;

  anon44_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] != 4;
    goto L56;

  anon45_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] == 3;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L56;

  anon46_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] == 2;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L56;

  anon51_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] == 1;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L56;

  anon50_Then:
    assume {:partition} 0 >= Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)];
    Tmp_512 := 0;
    goto L54;

  anon42_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] >= 4;
    Tmp_511 := 4;
    goto L50;

  anon41_Then:
    assume {:partition} sdv_205 == 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_47)] := 0;
    goto L47;

  anon49_Then:
    assume {:partition} 1 >= Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)];
    Tmp_506 := 1;
    goto L41;

  anon40_Then:
    assume {:partition} Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)] >= 32;
    Tmp_522 := 32;
    goto L37;

  anon39_Then:
    assume {:partition} sdv_203 == 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_47)] := 8;
    goto L34;

  anon48_Then:
    assume {:partition} 1 >= Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)];
    Tmp_509 := 1;
    goto L28;

  anon38_Then:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)] >= 64;
    Tmp_513 := 64;
    goto L24;

  anon37_Then:
    assume {:partition} sdv_202 == 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_47)] := 32;
    goto L21;

  anon47_Then:
    assume {:partition} 1 >= Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)];
    Tmp_515 := 1;
    goto L15;

  anon36_Then:
    assume {:partition} Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)] >= 1024;
    Tmp_507 := 1024;
    goto L11;

  anon35_Then:
    assume {:partition} sdv_201 == 0;
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    Mem_T.INT4[NumRfd__FDO_DATA(FdoData_47)] := 32;
    goto L8;
}



procedure {:origName "PciDrvAdjustCapabilities"} PciDrvAdjustCapabilities(actual_DeviceCapabilities: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvAdjustCapabilities"} PciDrvAdjustCapabilities(actual_DeviceCapabilities: int)
{
  var {:scalar} i_6: int;
  var {:scalar} Tmp_524: int;
  var {:scalar} Tmp_526: int;
  var {:scalar} Tmp_527: int;
  var {:pointer} Tmp_528: int;
  var {:scalar} Tmp_529: int;
  var {:scalar} dState: int;
  var {:pointer} Tmp_530: int;
  var {:scalar} Tmp_531: int;
  var {:scalar} deepestDeviceWakeState: int;
  var {:scalar} sState: int;
  var {:pointer} Tmp_532: int;
  var {:pointer} Tmp_533: int;
  var {:pointer} Tmp_534: int;
  var {:pointer} Tmp_535: int;
  var {:pointer} DeviceCapabilities: int;
  var vslice_dummy_var_50: int;

  anon0:
    call {:si_unique_call 577} vslice_dummy_var_50 := __HAVOC_malloc(4);
    DeviceCapabilities := actual_DeviceCapabilities;
    call {:si_unique_call 578} Tmp_528 := __HAVOC_malloc(28);
    call {:si_unique_call 579} Tmp_530 := __HAVOC_malloc(28);
    call {:si_unique_call 580} Tmp_532 := __HAVOC_malloc(28);
    call {:si_unique_call 581} Tmp_533 := __HAVOC_malloc(88);
    call {:si_unique_call 582} Tmp_534 := __HAVOC_malloc(28);
    call {:si_unique_call 583} Tmp_535 := __HAVOC_malloc(28);
    call {:si_unique_call 584} sdv_do_paged_code_check();
    Tmp_533 := strConst__li2bpl162;
    call {:si_unique_call 585} DebugPrint(5, 4, Tmp_533);
    sState := 2;
    goto L14;

  L14:
    call {:si_unique_call 586} Tmp_524, Tmp_527, sState, Tmp_532, Tmp_535 := PciDrvAdjustCapabilities_loop_L14(Tmp_524, Tmp_527, sState, Tmp_532, Tmp_535, DeviceCapabilities);
    goto L14_last;

  L14_last:
    assume {:CounterLoop 3} {:Counter "sState"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 5 >= sState;
    Tmp_524 := sState;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc Tmp_532;
    assume {:nonnull} Tmp_532 != 0;
    assume Tmp_532 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} Mem_T.INT4[Tmp_532 + Tmp_524 * 4] == 2;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto L19;

  L19:
    sState := sState + 1;
    goto L19_dummy;

  L19_dummy:
    assume false;
    return;

  anon53_Then:
    assume {:partition} Mem_T.INT4[Tmp_532 + Tmp_524 * 4] != 2;
    Tmp_527 := sState;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc Tmp_535;
    assume {:nonnull} Tmp_535 != 0;
    assume Tmp_535 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.INT4[Tmp_535 + Tmp_527 * 4] == 3;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto L19;

  anon54_Then:
    assume {:partition} Mem_T.INT4[Tmp_535 + Tmp_527 * 4] != 3;
    goto L19;

  anon39_Then:
    assume {:partition} sState > 5;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc dState;
    i_6 := 0;
    goto L22;

  L22:
    call {:si_unique_call 587} i_6, Tmp_528, dState, Tmp_531 := PciDrvAdjustCapabilities_loop_L22(i_6, Tmp_528, dState, Tmp_531, DeviceCapabilities);
    goto L22_last;

  L22_last:
    assume {:CounterLoop 2} {:Counter "i_6"} true;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 2 > i_6;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} dState != 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} dState != 1;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} dState != 2;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} dState != 3;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} dState == 4;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto L25;

  L25:
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc Tmp_531;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc Tmp_528;
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    dState := Mem_T.INT4[Tmp_528 + Tmp_531 * 4];
    goto L39;

  L39:
    i_6 := i_6 + 1;
    goto L39_dummy;

  L39_dummy:
    assume false;
    return;

  anon43_Then:
    dState := 0;
    goto L39;

  anon49_Then:
    assume {:partition} dState != 4;
    goto L25;

  anon50_Then:
    assume {:partition} dState == 3;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto L25;

  anon51_Then:
    assume {:partition} dState == 2;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto L25;

  anon52_Then:
    assume {:partition} dState == 1;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto L25;

  anon42_Then:
    assume {:partition} dState == 0;
    goto L25;

  anon40_Then:
    assume {:partition} i_6 >= 2;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    deepestDeviceWakeState := 4;
    goto L42;

  L42:
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc sState;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sState == 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} deepestDeviceWakeState != 0;
    sState := 4;
    goto L46;

  L46:
    call {:si_unique_call 588} Tmp_526, Tmp_529, Tmp_530, sState, Tmp_534 := PciDrvAdjustCapabilities_loop_L46(Tmp_526, Tmp_529, Tmp_530, deepestDeviceWakeState, sState, Tmp_534, DeviceCapabilities);
    goto L46_last;

  L46_last:
    assume {:CounterLoop 3} {:Counter "sState"} true;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sState >= 1;
    Tmp_529 := sState;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc Tmp_530;
    assume {:nonnull} Tmp_530 != 0;
    assume Tmp_530 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[Tmp_530 + Tmp_529 * 4] != 0;
    Tmp_526 := sState;
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    havoc Tmp_534;
    assume {:nonnull} Tmp_534 != 0;
    assume Tmp_534 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} deepestDeviceWakeState < Mem_T.INT4[Tmp_534 + Tmp_526 * 4];
    goto L49;

  L49:
    sState := sState - 1;
    goto L49_dummy;

  L49_dummy:
    assume false;
    return;

  anon57_Then:
    assume {:partition} Mem_T.INT4[Tmp_534 + Tmp_526 * 4] <= deepestDeviceWakeState;
    goto L47;

  L47:
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto L1;

  L1:
    return;

  anon56_Then:
    assume {:partition} Mem_T.INT4[Tmp_530 + Tmp_529 * 4] == 0;
    goto L49;

  anon46_Then:
    assume {:partition} 1 > sState;
    goto L47;

  anon45_Then:
    assume {:partition} deepestDeviceWakeState == 0;
    goto L1;

  anon55_Then:
    assume {:partition} sState != 0;
    goto L1;

  anon41_Then:
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    deepestDeviceWakeState := 3;
    goto L42;

  anon44_Then:
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    deepestDeviceWakeState := 2;
    goto L42;

  anon47_Then:
    assume {:nonnull} DeviceCapabilities != 0;
    assume DeviceCapabilities > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    deepestDeviceWakeState := 1;
    goto L42;

  anon48_Then:
    deepestDeviceWakeState := 0;
    goto L42;
}



procedure {:origName "PciDrvSetWaitWakeEnableState"} PciDrvSetWaitWakeEnableState(actual_FdoData_48: int, actual_WakeState: int) returns (Tmp_536: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_536 == 0 || Tmp_536 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvSetWaitWakeEnableState"} PciDrvSetWaitWakeEnableState(actual_FdoData_48: int, actual_WakeState: int) returns (Tmp_536: int)
{
  var {:scalar} sdv_206: int;
  var {:pointer} Tmp_538: int;
  var {:pointer} Tmp_539: int;
  var {:scalar} Tmp_540: int;
  var {:pointer} FdoData_48: int;
  var {:scalar} WakeState: int;

  anon0:
    FdoData_48 := actual_FdoData_48;
    WakeState := actual_WakeState;
    call {:si_unique_call 589} Tmp_538 := __HAVOC_malloc(132);
    call {:si_unique_call 590} Tmp_539 := __HAVOC_malloc(64);
    call {:si_unique_call 591} sdv_do_paged_code_check();
    Tmp_540 := WakeState;
    Tmp_539 := strConst__li2bpl164;
    call {:si_unique_call 592} sdv_206 := PciDrvWriteRegistryValue(FdoData_48, Tmp_539, Tmp_540);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_206 != 0;
    Tmp_536 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} sdv_206 == 0;
    Tmp_538 := strConst__li2bpl163;
    call {:si_unique_call 593} DebugPrint(5, 4, Tmp_538);
    Tmp_536 := -1073741823;
    goto L1;
}



procedure {:origName "PciDrvGetWaitWakeEnableState"} PciDrvGetWaitWakeEnableState(actual_FdoData_49: int) returns (Tmp_541: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetWaitWakeEnableState"} PciDrvGetWaitWakeEnableState(actual_FdoData_49: int) returns (Tmp_541: int)
{
  var {:dopa} {:scalar} waitWakeEnabled: int;
  var {:pointer} Tmp_542: int;
  var {:pointer} Tmp_543: int;
  var {:pointer} Tmp_544: int;
  var {:pointer} FdoData_49: int;
  var vslice_dummy_var_51: int;

  anon0:
    call {:si_unique_call 594} waitWakeEnabled := __HAVOC_malloc(4);
    FdoData_49 := actual_FdoData_49;
    call {:si_unique_call 595} Tmp_542 := __HAVOC_malloc(96);
    call {:si_unique_call 596} Tmp_543 := __HAVOC_malloc(64);
    call {:si_unique_call 597} sdv_do_paged_code_check();
    Tmp_543 := strConst__li2bpl164;
    call {:si_unique_call 598} vslice_dummy_var_51 := PciDrvReadRegistryValue(FdoData_49, Tmp_543, waitWakeEnabled);
    assume {:nonnull} waitWakeEnabled != 0;
    assume waitWakeEnabled > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[waitWakeEnabled] != 0;
    Tmp_544 := strConst__li2bpl157;
    goto L13;

  L13:
    Tmp_542 := strConst__li2bpl166;
    call {:si_unique_call 599} DebugPrint(5, 4, Tmp_542);
    assume {:nonnull} waitWakeEnabled != 0;
    assume waitWakeEnabled > 0;
    Tmp_541 := Mem_T.INT4[waitWakeEnabled];
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[waitWakeEnabled] == 0;
    Tmp_544 := strConst__li2bpl165;
    goto L13;
}



procedure {:origName "PciDrvWaitWakeIoCompletionRoutine"} PciDrvWaitWakeIoCompletionRoutine(actual_DeviceObject_19: int, actual_Irp_14: int, actual_Context_4: int) returns (Tmp_546: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_546 == 0 || Tmp_546 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWaitWakeIoCompletionRoutine"} PciDrvWaitWakeIoCompletionRoutine(actual_DeviceObject_19: int, actual_Irp_14: int, actual_Context_4: int) returns (Tmp_546: int)
{
  var {:scalar} oldWakeState: int;
  var {:scalar} sdv_208: int;
  var {:pointer} Tmp_548: int;
  var {:pointer} DeviceObject_19: int;

  anon0:
    DeviceObject_19 := actual_DeviceObject_19;
    call {:si_unique_call 600} Tmp_548 := __HAVOC_malloc(148);
    Tmp_548 := strConst__li2bpl167;
    call {:si_unique_call 601} DebugPrint(5, 4, Tmp_548);
    assume {:nonnull} DeviceObject_19 != 0;
    assume DeviceObject_19 > 0;
    oldWakeState := sdv_208;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} oldWakeState == 4;
    Tmp_546 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} oldWakeState != 4;
    Tmp_546 := -1073741802;
    goto L1;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 602} vslice_dummy_var_52 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PciDrvPassiveLevelClearWaitWakeEnableState"} PciDrvPassiveLevelClearWaitWakeEnableState(actual_DeviceObject_20: int, actual_Context_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPassiveLevelClearWaitWakeEnableState"} PciDrvPassiveLevelClearWaitWakeEnableState(actual_DeviceObject_20: int, actual_Context_5: int)
{
  var {:pointer} Tmp_556: int;
  var {:pointer} fdoData_15: int;
  var {:pointer} Tmp_559: int;
  var {:pointer} DeviceObject_20: int;
  var {:pointer} Context_5: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;

  anon0:
    call {:si_unique_call 603} vslice_dummy_var_53 := __HAVOC_malloc(4);
    DeviceObject_20 := actual_DeviceObject_20;
    Context_5 := actual_Context_5;
    call {:si_unique_call 604} Tmp_556 := __HAVOC_malloc(208);
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    havoc fdoData_15;
    call {:si_unique_call 605} sdv_do_paged_code_check();
    Tmp_556 := strConst__li2bpl170;
    call {:si_unique_call 606} DebugPrint(5, 4, Tmp_556);
    call {:si_unique_call 607} vslice_dummy_var_54 := PciDrvSetWaitWakeEnableState(fdoData_15, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Context_5 != 0;
    Tmp_559 := Context_5;
    assume {:nonnull} Tmp_559 != 0;
    assume Tmp_559 > 0;
    call {:si_unique_call 608} IoFreeWorkItem(0);
    call {:si_unique_call 609} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Context_5 == 0;
    goto L1;
}



procedure {:origName "PciDrvDispatchWaitWake"} PciDrvDispatchWaitWake(actual_DeviceObject_23: int, actual_Irp_15: int) returns (Tmp_569: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchWaitWake"} PciDrvDispatchWaitWake(actual_DeviceObject_23: int, actual_Irp_15: int) returns (Tmp_569: int)
{
  var {:scalar} oldWakeState_2: int;
  var {:pointer} fdoData_18: int;
  var {:scalar} sdv_226: int;
  var {:pointer} Tmp_571: int;
  var {:scalar} sdv_228: int;
  var {:pointer} stack_13: int;
  var {:pointer} DeviceObject_23: int;
  var {:pointer} Irp_15: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_28: int;

  anon0:
    DeviceObject_23 := actual_DeviceObject_23;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 610} Tmp_571 := __HAVOC_malloc(128);
    call {:si_unique_call 611} sdv_do_paged_code_check();
    Tmp_571 := strConst__li2bpl173;
    call {:si_unique_call 612} DebugPrint(5, 4, Tmp_571);
    assume {:nonnull} DeviceObject_23 != 0;
    assume DeviceObject_23 > 0;
    havoc fdoData_18;
    call {:si_unique_call 613} stack_13 := sdv_IoGetCurrentIrpStackLocation(Irp_15);
    assume {:nonnull} fdoData_18 != 0;
    assume fdoData_18 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L21;

  L21:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 614} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 615} vslice_dummy_var_55 := PciDrvIoDecrement(fdoData_18);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    Tmp_569 := -1073741808;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:nonnull} stack_13 != 0;
    assume stack_13 > 0;
    havoc vslice_dummy_var_28;
    call {:si_unique_call 616} sdv_226 := PciDrvCanWakeUpDevice(fdoData_18, vslice_dummy_var_28);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_226 != 0;
    assume {:nonnull} fdoData_18 != 0;
    assume fdoData_18 > 0;
    oldWakeState_2 := sdv_228;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} oldWakeState_2 == 3;
    assume {:nonnull} fdoData_18 != 0;
    assume fdoData_18 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 617} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 618} vslice_dummy_var_57 := PciDrvIoDecrement(fdoData_18);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    Tmp_569 := -1073741536;
    goto L1;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} oldWakeState_2 != 3;
    call {:si_unique_call 619} vslice_dummy_var_56 := NICConfigureForWakeUp(fdoData_18, 1);
    call {:si_unique_call 620} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 621} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_15);
    call {:si_unique_call 622} sdv_IoSetCompletionRoutine(Irp_15, li2bplFunctionConstant5762, 0, 1, 1, 1);
    call {:si_unique_call 623} vslice_dummy_var_58 := PoCallDriver#1(0, Irp_15);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 624} vslice_dummy_var_59 := PciDrvIoDecrement(fdoData_18);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    Tmp_569 := 259;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} sdv_226 == 0;
    goto L21;
}



procedure {:origName "PciDrvDisarmWake"} PciDrvDisarmWake(actual_FdoData_51: int, actual_DeviceStateChange_1: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDisarmWake"} PciDrvDisarmWake(actual_FdoData_51: int, actual_DeviceStateChange_1: int)
{
  var {:pointer} Tmp_572: int;
  var {:scalar} oldWakeState_3: int;
  var {:scalar} sdv_233: int;
  var {:scalar} sdv_235: int;
  var {:pointer} Tmp_575: int;
  var {:pointer} Tmp_576: int;
  var {:pointer} FdoData_51: int;
  var {:scalar} DeviceStateChange_1: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;

  anon0:
    call {:si_unique_call 625} vslice_dummy_var_60 := __HAVOC_malloc(4);
    FdoData_51 := actual_FdoData_51;
    DeviceStateChange_1 := actual_DeviceStateChange_1;
    call {:si_unique_call 626} Tmp_572 := __HAVOC_malloc(64);
    call {:si_unique_call 627} Tmp_575 := __HAVOC_malloc(64);
    call {:si_unique_call 628} Tmp_576 := __HAVOC_malloc(76);
    call {:si_unique_call 629} sdv_do_paged_code_check();
    Tmp_572 := strConst__li2bpl174;
    call {:si_unique_call 630} DebugPrint(5, 4, Tmp_572);
    call {:si_unique_call 631} KeEnterCriticalRegion();
    call {:si_unique_call 632} vslice_dummy_var_61 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} DeviceStateChange_1 == 0;
    goto L24;

  L24:
    oldWakeState_3 := sdv_233;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} oldWakeState_3 == 4;
    Tmp_576 := strConst__li2bpl175;
    call {:si_unique_call 633} DebugPrint(5, 4, Tmp_576);
    call {:si_unique_call 634} vslice_dummy_var_63 := IoCancelIrp(0);
    oldWakeState_3 := sdv_235;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} oldWakeState_3 == 7;
    call {:si_unique_call 635} sdv_IoCompleteRequest(0, 0);
    goto L26;

  L26:
    call {:si_unique_call 636} vslice_dummy_var_62 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    call {:si_unique_call 637} vslice_dummy_var_64 := KeSetEvent(WakeDisableEnableLock__FDO_DATA(FdoData_51), 0, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 638} KeLeaveCriticalRegion();
    Tmp_575 := strConst__li2bpl176;
    call {:si_unique_call 639} DebugPrint(5, 4, Tmp_575);
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} oldWakeState_3 != 7;
    goto L26;

  anon10_Then:
    assume {:partition} oldWakeState_3 != 4;
    goto L26;

  anon9_Then:
    assume {:partition} DeviceStateChange_1 != 0;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    goto L24;
}



procedure {:origName "PciDrvCanWakeUpDevice"} PciDrvCanWakeUpDevice(actual_FdoData_52: int, actual_PowerState_7: int) returns (Tmp_577: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCanWakeUpDevice"} PciDrvCanWakeUpDevice(actual_FdoData_52: int, actual_PowerState_7: int) returns (Tmp_577: int)
{
  var {:scalar} canWakeUp: int;
  var {:scalar} dState_1: int;
  var {:scalar} Tmp_579: int;
  var {:pointer} Tmp_580: int;
  var {:pointer} FdoData_52: int;
  var {:scalar} PowerState_7: int;

  anon0:
    FdoData_52 := actual_FdoData_52;
    PowerState_7 := actual_PowerState_7;
    call {:si_unique_call 640} Tmp_580 := __HAVOC_malloc(28);
    canWakeUp := 0;
    Tmp_579 := PowerState_7;
    assume {:nonnull} FdoData_52 != 0;
    assume FdoData_52 > 0;
    havoc Tmp_580;
    assume {:nonnull} Tmp_580 != 0;
    assume Tmp_580 > 0;
    dState_1 := Mem_T.INT4[Tmp_580 + Tmp_579 * 4];
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} dState_1 != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} dState_1 != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} dState_1 != 3;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} dState_1 == 4;
    assume {:nonnull} FdoData_52 != 0;
    assume FdoData_52 > 0;
    havoc canWakeUp;
    goto L14;

  L14:
    Tmp_577 := canWakeUp;
    return;

  anon9_Then:
    assume {:partition} dState_1 != 4;
    canWakeUp := 0;
    goto L14;

  anon10_Then:
    assume {:partition} dState_1 == 3;
    assume {:nonnull} FdoData_52 != 0;
    assume FdoData_52 > 0;
    havoc canWakeUp;
    goto L14;

  anon11_Then:
    assume {:partition} dState_1 == 2;
    assume {:nonnull} FdoData_52 != 0;
    assume FdoData_52 > 0;
    havoc canWakeUp;
    goto L14;

  anon12_Then:
    assume {:partition} dState_1 == 1;
    assume {:nonnull} FdoData_52 != 0;
    assume FdoData_52 > 0;
    havoc canWakeUp;
    goto L14;
}



procedure {:origName "PciDrvGetPowerSaveEnableState"} PciDrvGetPowerSaveEnableState(actual_FdoData_54: int) returns (Tmp_585: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetPowerSaveEnableState"} PciDrvGetPowerSaveEnableState(actual_FdoData_54: int) returns (Tmp_585: int)
{
  var {:pointer} Tmp_586: int;
  var {:pointer} Tmp_587: int;
  var {:dopa} {:scalar} savePowerEnabled: int;
  var {:pointer} Tmp_588: int;
  var {:pointer} FdoData_54: int;
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 641} savePowerEnabled := __HAVOC_malloc(4);
    FdoData_54 := actual_FdoData_54;
    call {:si_unique_call 642} Tmp_587 := __HAVOC_malloc(68);
    call {:si_unique_call 643} Tmp_588 := __HAVOC_malloc(116);
    call {:si_unique_call 644} sdv_do_paged_code_check();
    Tmp_587 := strConst__li2bpl179;
    call {:si_unique_call 645} vslice_dummy_var_65 := PciDrvReadRegistryValue(FdoData_54, Tmp_587, savePowerEnabled);
    assume {:nonnull} savePowerEnabled != 0;
    assume savePowerEnabled > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[savePowerEnabled] != 0;
    Tmp_586 := strConst__li2bpl157;
    goto L13;

  L13:
    Tmp_588 := strConst__li2bpl180;
    call {:si_unique_call 646} DebugPrint(5, 4, Tmp_588);
    assume {:nonnull} savePowerEnabled != 0;
    assume savePowerEnabled > 0;
    Tmp_585 := Mem_T.INT4[savePowerEnabled];
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[savePowerEnabled] == 0;
    Tmp_586 := strConst__li2bpl165;
    goto L13;
}



procedure {:origName "PciDrvDeregisterIdleDetection"} PciDrvDeregisterIdleDetection(actual_FdoData_55: int, actual_DeviceStateChange_2: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDeregisterIdleDetection"} PciDrvDeregisterIdleDetection(actual_FdoData_55: int, actual_DeviceStateChange_2: int)
{
  var {:pointer} Tmp_594: int;
  var {:scalar} sdv_246: int;
  var {:pointer} Tmp_596: int;
  var {:pointer} Tmp_598: int;
  var {:pointer} FdoData_55: int;
  var {:scalar} DeviceStateChange_2: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;

  anon0:
    call {:si_unique_call 647} vslice_dummy_var_66 := __HAVOC_malloc(4);
    FdoData_55 := actual_FdoData_55;
    DeviceStateChange_2 := actual_DeviceStateChange_2;
    call {:si_unique_call 648} Tmp_594 := __HAVOC_malloc(140);
    call {:si_unique_call 649} Tmp_596 := __HAVOC_malloc(156);
    call {:si_unique_call 650} Tmp_598 := __HAVOC_malloc(140);
    call {:si_unique_call 651} sdv_do_paged_code_check();
    Tmp_598 := strConst__li2bpl183;
    call {:si_unique_call 652} DebugPrint(5, 4, Tmp_598);
    call {:si_unique_call 653} KeEnterCriticalRegion();
    Tmp_596 := strConst__li2bpl184;
    call {:si_unique_call 654} DebugPrint(5, 1024, Tmp_596);
    call {:si_unique_call 655} vslice_dummy_var_67 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 656} PciDrvUnregisterPowerStateNotification(FdoData_55);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} DeviceStateChange_2 != 0;
    assume {:nonnull} FdoData_55 != 0;
    assume FdoData_55 > 0;
    goto L24;

  L24:
    assume {:nonnull} FdoData_55 != 0;
    assume FdoData_55 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} FdoData_55 != 0;
    assume FdoData_55 > 0;
    call {:si_unique_call 657} sdv_246 := KeCancelTimer(0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_246 != 0;
    call {:si_unique_call 658} vslice_dummy_var_69 := PciDrvIoDecrement(FdoData_55);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  L26:
    assume {:nonnull} FdoData_55 != 0;
    assume FdoData_55 > 0;
    call {:si_unique_call 659} vslice_dummy_var_68 := KeSetEvent(PowerSaveDisableEnableLock__FDO_DATA(FdoData_55), 0, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 660} KeLeaveCriticalRegion();
    Tmp_594 := strConst__li2bpl185;
    call {:si_unique_call 661} DebugPrint(5, 4, Tmp_594);
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} sdv_246 == 0;
    goto L26;

  anon12_Then:
    goto L26;

  anon11_Then:
    assume {:partition} DeviceStateChange_2 == 0;
    goto L24;
}



procedure {:origName "PciDrvCompletionOnIdlePowerUpIrp"} PciDrvCompletionOnIdlePowerUpIrp(actual_DeviceObject_25: int, actual_MinorFunction_4: int, actual_SD3_1: int, actual_PowerContext_1: int, actual_IoStatus_2: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionOnIdlePowerUpIrp"} PciDrvCompletionOnIdlePowerUpIrp(actual_DeviceObject_25: int, actual_MinorFunction_4: int, actual_SD3_1: int, actual_PowerContext_1: int, actual_IoStatus_2: int)
{
  var {:scalar} PowerState_3: int;
  var {:pointer} Tmp_600: int;
  var {:pointer} fdoData_20: int;
  var {:pointer} DeviceObject_25: int;
  var {:pointer} SD3_1: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;

  anon0:
    call {:si_unique_call 662} PowerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 663} vslice_dummy_var_70 := __HAVOC_malloc(4);
    DeviceObject_25 := actual_DeviceObject_25;
    SD3_1 := actual_SD3_1;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState_3)] := Mem_T.INT4[DeviceState__POWER_STATE(SD3_1)];
    call {:si_unique_call 664} Tmp_600 := __HAVOC_malloc(168);
    assume {:nonnull} DeviceObject_25 != 0;
    assume DeviceObject_25 > 0;
    havoc fdoData_20;
    Tmp_600 := strConst__li2bpl186;
    call {:si_unique_call 665} DebugPrint(5, 4, Tmp_600);
    assume {:nonnull} fdoData_20 != 0;
    assume fdoData_20 > 0;
    assume {:nonnull} fdoData_20 != 0;
    assume fdoData_20 > 0;
    call {:si_unique_call 666} vslice_dummy_var_71 := KeSetEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_20), 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvSetIdleTimer"} PciDrvSetIdleTimer(actual_FdoData_56: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvSetIdleTimer"} PciDrvSetIdleTimer(actual_FdoData_56: int)
{
  var {:scalar} delay: int;
  var {:pointer} Tmp_604: int;
  var {:pointer} FdoData_56: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 667} delay := __HAVOC_malloc(20);
    call {:si_unique_call 668} vslice_dummy_var_72 := __HAVOC_malloc(4);
    FdoData_56 := actual_FdoData_56;
    call {:si_unique_call 669} Tmp_604 := __HAVOC_malloc(64);
    Tmp_604 := strConst__li2bpl187;
    call {:si_unique_call 670} DebugPrint(5, 4, Tmp_604);
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    assume {:nonnull} delay != 0;
    assume delay > 0;
    goto L11;

  L11:
    call {:si_unique_call 671} vslice_dummy_var_73 := PciDrvIoIncrement(FdoData_56);
    call {:si_unique_call 672} vslice_dummy_var_74 := KeSetTimer(0, delay, 0);
    return;

  anon3_Then:
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    assume {:nonnull} delay != 0;
    assume delay > 0;
    goto L11;
}



procedure {:origName "PciDrvCompletionOnIdlePowerDownIrp"} PciDrvCompletionOnIdlePowerDownIrp(actual_DeviceObject_26: int, actual_MinorFunction_5: int, actual_SD2: int, actual_PowerContext_2: int, actual_IoStatus_3: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionOnIdlePowerDownIrp"} PciDrvCompletionOnIdlePowerDownIrp(actual_DeviceObject_26: int, actual_MinorFunction_5: int, actual_SD2: int, actual_PowerContext_2: int, actual_IoStatus_3: int)
{
  var {:scalar} PowerState_2: int;
  var {:pointer} fdoData_21: int;
  var {:pointer} Tmp_607: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} SD2: int;
  var {:pointer} IoStatus_3: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;

  anon0:
    call {:si_unique_call 673} PowerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 674} vslice_dummy_var_75 := __HAVOC_malloc(4);
    DeviceObject_26 := actual_DeviceObject_26;
    SD2 := actual_SD2;
    IoStatus_3 := actual_IoStatus_3;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState_2)] := Mem_T.INT4[DeviceState__POWER_STATE(SD2)];
    call {:si_unique_call 675} Tmp_607 := __HAVOC_malloc(176);
    assume {:nonnull} DeviceObject_26 != 0;
    assume DeviceObject_26 > 0;
    havoc fdoData_21;
    Tmp_607 := strConst__li2bpl188;
    call {:si_unique_call 676} DebugPrint(5, 4, Tmp_607);
    assume {:nonnull} IoStatus_3 != 0;
    assume IoStatus_3 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto L10;

  L10:
    assume {:nonnull} fdoData_21 != 0;
    assume fdoData_21 > 0;
    call {:si_unique_call 677} vslice_dummy_var_76 := KeSetEvent(IdlePowerDownCompleteEvent__FDO_DATA(fdoData_21), 0, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:nonnull} fdoData_21 != 0;
    assume fdoData_21 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 678} PciDrvSetIdleTimer(fdoData_21);
    goto L10;

  anon8_Then:
    goto L10;
}



procedure {:origName "PciDrvRegisterPowerStateNotification"} PciDrvRegisterPowerStateNotification(actual_FdoData_57: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvRegisterPowerStateNotification"} PciDrvRegisterPowerStateNotification(actual_FdoData_57: int)
{
  var {:pointer} Tmp_608: int;
  var {:scalar} callbackName: int;
  var {:pointer} Tmp_609: int;
  var {:pointer} Tmp_610: int;
  var {:scalar} status_48: int;
  var {:pointer} FdoData_57: int;
  var boogieTmp: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;

  anon0:
    call {:si_unique_call 679} callbackName := __HAVOC_malloc(12);
    call {:si_unique_call 680} vslice_dummy_var_77 := __HAVOC_malloc(4);
    call {:si_unique_call 681} vslice_dummy_var_78 := __HAVOC_malloc(24);
    FdoData_57 := actual_FdoData_57;
    call {:si_unique_call 682} Tmp_608 := __HAVOC_malloc(84);
    call {:si_unique_call 683} Tmp_609 := __HAVOC_malloc(188);
    call {:si_unique_call 684} Tmp_610 := __HAVOC_malloc(116);
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    Tmp_608 := strConst__li2bpl191;
    call {:si_unique_call 685} RtlInitUnicodeString(callbackName, Tmp_608);
    call {:si_unique_call 686} sdv_InitializeObjectAttributes(0, 0, 80, 0, 0);
    call {:si_unique_call 687} status_48 := ExCreateCallback(0, 0, 0, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_48 >= 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    call {:si_unique_call 688} boogieTmp := ExRegisterCallback(0, li2bplFunctionConstant5299, 0);
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_610 := strConst__li2bpl190;
    call {:si_unique_call 689} DebugPrint(2, 4, Tmp_610);
    call {:si_unique_call 690} vslice_dummy_var_79 := sdv_ObDereferenceObject(0);
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L1;

  anon5_Then:
    assume {:partition} 0 > status_48;
    Tmp_609 := strConst__li2bpl189;
    call {:si_unique_call 691} DebugPrint(2, 4, Tmp_609);
    goto L1;
}



procedure {:origName "PciDrvRegisterForIdleDetection"} PciDrvRegisterForIdleDetection(actual_FdoData_58: int, actual_DeviceStateChange_3: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvRegisterForIdleDetection"} PciDrvRegisterForIdleDetection(actual_FdoData_58: int, actual_DeviceStateChange_3: int)
{
  var {:pointer} Tmp_613: int;
  var {:pointer} Tmp_615: int;
  var {:scalar} sdv_257: int;
  var {:pointer} Tmp_617: int;
  var {:pointer} FdoData_58: int;
  var {:scalar} DeviceStateChange_3: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;

  anon0:
    call {:si_unique_call 692} vslice_dummy_var_80 := __HAVOC_malloc(4);
    FdoData_58 := actual_FdoData_58;
    DeviceStateChange_3 := actual_DeviceStateChange_3;
    call {:si_unique_call 693} Tmp_613 := __HAVOC_malloc(156);
    call {:si_unique_call 694} Tmp_615 := __HAVOC_malloc(144);
    call {:si_unique_call 695} Tmp_617 := __HAVOC_malloc(144);
    call {:si_unique_call 696} sdv_do_paged_code_check();
    Tmp_615 := strConst__li2bpl192;
    call {:si_unique_call 697} DebugPrint(5, 4, Tmp_615);
    call {:si_unique_call 698} KeEnterCriticalRegion();
    Tmp_613 := strConst__li2bpl184;
    call {:si_unique_call 699} DebugPrint(5, 1024, Tmp_613);
    call {:si_unique_call 700} vslice_dummy_var_81 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 701} PciDrvRegisterPowerStateNotification(FdoData_58);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} DeviceStateChange_3 != 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto L24;

  L24:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 702} sdv_257 := PciDrvGetPowerSaveEnableState(FdoData_58);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_257 != 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L37;

  L37:
    call {:si_unique_call 703} PciDrvSetIdleTimer(FdoData_58);
    goto L26;

  L26:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    call {:si_unique_call 704} vslice_dummy_var_82 := KeSetEvent(PowerSaveDisableEnableLock__FDO_DATA(FdoData_58), 0, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 705} KeLeaveCriticalRegion();
    Tmp_617 := strConst__li2bpl193;
    call {:si_unique_call 706} DebugPrint(5, 4, Tmp_617);
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    call {:si_unique_call 707} KeInitializeTimer(0);
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    call {:si_unique_call 708} KeInitializeDpc(IdleDetectionTimerDpc__FDO_DATA(FdoData_58), li2bplFunctionConstant5286, 0);
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    call {:si_unique_call 709} KeInitializeEvent(IdlePowerUpCompleteEvent__FDO_DATA(FdoData_58), 0, 0);
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    call {:si_unique_call 710} KeInitializeEvent(IdlePowerDownCompleteEvent__FDO_DATA(FdoData_58), 0, 0);
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto L37;

  anon13_Then:
    assume {:partition} sdv_257 == 0;
    goto L26;

  anon12_Then:
    goto L26;

  anon11_Then:
    assume {:partition} DeviceStateChange_3 == 0;
    goto L24;
}



procedure {:origName "PciDrvReStartIdleDetectionTimer"} PciDrvReStartIdleDetectionTimer(actual_FdoData_59: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvReStartIdleDetectionTimer"} PciDrvReStartIdleDetectionTimer(actual_FdoData_59: int)
{
  var {:pointer} FdoData_59: int;
  var vslice_dummy_var_83: int;

  anon0:
    call {:si_unique_call 711} vslice_dummy_var_83 := __HAVOC_malloc(4);
    FdoData_59 := actual_FdoData_59;
    call {:si_unique_call 712} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_59 != 0;
    assume FdoData_59 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 713} PciDrvSetIdleTimer(FdoData_59);
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "PciDrvCancelIdleDetectionTimer"} PciDrvCancelIdleDetectionTimer(actual_FdoData_60: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCancelIdleDetectionTimer"} PciDrvCancelIdleDetectionTimer(actual_FdoData_60: int)
{
  var {:scalar} sdv_261: int;
  var {:pointer} FdoData_60: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;

  anon0:
    call {:si_unique_call 714} vslice_dummy_var_84 := __HAVOC_malloc(4);
    FdoData_60 := actual_FdoData_60;
    call {:si_unique_call 715} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 716} sdv_261 := KeCancelTimer(0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_261 != 0;
    call {:si_unique_call 717} vslice_dummy_var_85 := PciDrvIoDecrement(FdoData_60);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} sdv_261 == 0;
    goto L1;

  anon7_Then:
    goto L1;
}



procedure {:origName "PciDrvUnregisterPowerStateNotification"} PciDrvUnregisterPowerStateNotification(actual_FdoData_61: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvUnregisterPowerStateNotification"} PciDrvUnregisterPowerStateNotification(actual_FdoData_61: int)
{
  var {:pointer} FdoData_61: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;

  anon0:
    call {:si_unique_call 718} vslice_dummy_var_86 := __HAVOC_malloc(4);
    FdoData_61 := actual_FdoData_61;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 719} ExUnregisterCallback(0);
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto L4;

  L4:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 720} vslice_dummy_var_87 := sdv_ObDereferenceObject(0);
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L1;

  anon5_Then:
    goto L4;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 721} vslice_dummy_var_88 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_89: int;

  anon0:
    call {:si_unique_call 722} vslice_dummy_var_89 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICFreeQueuedSendPackets"} NICFreeQueuedSendPackets(actual_FdoData_62: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeQueuedSendPackets"} NICFreeQueuedSendPackets(actual_FdoData_62: int)
{
  var {:pointer} pEntry: int;
  var {:pointer} Tmp_634: int;
  var {:scalar} sdv_265: int;
  var {:pointer} sdv_267: int;
  var {:pointer} irp_3: int;
  var {:pointer} Tmp_637: int;
  var {:scalar} status_51: int;
  var {:pointer} FdoData_62: int;
  var vslice_dummy_var_90: int;

  anon0:
    call {:si_unique_call 723} vslice_dummy_var_90 := __HAVOC_malloc(4);
    FdoData_62 := actual_FdoData_62;
    call {:si_unique_call 724} Tmp_634 := __HAVOC_malloc(120);
    call {:si_unique_call 725} Tmp_637 := __HAVOC_malloc(120);
    call {:si_unique_call 726} status_51 := MP_GET_STATUS_FROM_FLAGS(FdoData_62);
    Tmp_634 := strConst__li2bpl196;
    call {:si_unique_call 727} DebugPrint(5, 64, Tmp_634);
    goto L13;

  L13:
    call {:si_unique_call 728} pEntry, sdv_265, sdv_267, irp_3 := NICFreeQueuedSendPackets_loop_L13(pEntry, sdv_265, sdv_267, irp_3, status_51, FdoData_62);
    goto L13_last;

  L13_last:
    call {:si_unique_call 735} sdv_265 := sdv_IsListEmpty(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_265 != 0;
    Tmp_637 := strConst__li2bpl197;
    call {:si_unique_call 729} DebugPrint(5, 64, Tmp_637);
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} sdv_265 == 0;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    call {:si_unique_call 730} pEntry := RemoveHeadList(SendQueueHead__FDO_DATA(FdoData_62));
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    call {:si_unique_call 731} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 732} sdv_267 := sdv_containing_record(pEntry, 88);
    irp_3 := sdv_267;
    call {:si_unique_call 733} NICCompleteSendRequest(FdoData_62, irp_3, status_51, 0, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 734} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_91: int;

  anon0:
    call {:si_unique_call 736} vslice_dummy_var_91 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICWritePacket"} NICWritePacket(actual_FdoData_63: int, actual_Irp_16: int, actual_bFromQueue: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_5) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICWritePacket"} NICWritePacket(actual_FdoData_63: int, actual_Irp_16: int, actual_bFromQueue: int)
{
  var {:pointer} Tmp_640: int;
  var {:scalar} packetLength: int;
  var {:pointer} Tmp_642: int;
  var {:pointer} pMpTcb_1: int;
  var {:pointer} Tmp_645: int;
  var {:pointer} Tmp_646: int;
  var {:pointer} virtualAddress: int;
  var {:pointer} Tmp_647: int;
  var {:pointer} FdoData_63: int;
  var {:pointer} Irp_16: int;
  var boogieTmp: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;

  anon0:
    call {:si_unique_call 737} vslice_dummy_var_92 := __HAVOC_malloc(4);
    FdoData_63 := actual_FdoData_63;
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 738} Tmp_640 := __HAVOC_malloc(116);
    call {:si_unique_call 739} Tmp_642 := __HAVOC_malloc(80);
    call {:si_unique_call 740} Tmp_645 := __HAVOC_malloc(16);
    pMpTcb_1 := 0;
    Tmp_640 := strConst__li2bpl198;
    call {:si_unique_call 741} DebugPrint(5, 64, Tmp_640);
    assume {:nonnull} FdoData_63 != 0;
    assume FdoData_63 > 0;
    havoc pMpTcb_1;
    assume {:nonnull} FdoData_63 != 0;
    assume FdoData_63 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 742} MP_FREE_SEND_PACKET(FdoData_63, pMpTcb_1, -1073741661);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    call {:si_unique_call 743} virtualAddress := sdv_MmGetMdlVirtualAddress(0);
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    call {:si_unique_call 744} packetLength := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    call {:si_unique_call 745} boogieTmp := corral_nondet();
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc Tmp_645;
    assume {:nonnull} Tmp_645 != 0;
    assume Tmp_645 > 0;
    havoc Tmp_647;
    call {:si_unique_call 746} vslice_dummy_var_93 := NICSendPacket(FdoData_63, pMpTcb_1, Tmp_647);
    assume {:nonnull} FdoData_63 != 0;
    assume FdoData_63 > 0;
    assume {:nonnull} FdoData_63 != 0;
    assume FdoData_63 > 0;
    havoc Tmp_646;
    assume {:nonnull} FdoData_63 != 0;
    assume FdoData_63 > 0;
    assume {:nonnull} Tmp_646 != 0;
    assume Tmp_646 > 0;
    Tmp_642 := strConst__li2bpl199;
    call {:si_unique_call 747} DebugPrint(5, 64, Tmp_642);
    goto L1;
}



procedure {:origName "NICCompleteSendRequest"} NICCompleteSendRequest(actual_FdoData_64: int, actual_Irp_17: int, actual_Status: int, actual_Information: int, actual_AtDispatchLevel: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICCompleteSendRequest"} NICCompleteSendRequest(actual_FdoData_64: int, actual_Irp_17: int, actual_Status: int, actual_Information: int, actual_AtDispatchLevel: int)
{
  var {:pointer} Tmp_648: int;
  var {:pointer} Tmp_649: int;
  var {:pointer} Tmp_651: int;
  var {:pointer} sglBuffer: int;
  var {:pointer} Tmp_652: int;
  var {:pointer} sgl: int;
  var {:pointer} Tmp_653: int;
  var {:pointer} Tmp_654: int;
  var {:scalar} oldIrql_3: int;
  var {:pointer} Tmp_655: int;
  var {:pointer} Tmp_656: int;
  var {:pointer} FdoData_64: int;
  var {:pointer} Irp_17: int;
  var {:scalar} Status: int;
  var {:scalar} Information: int;
  var {:scalar} AtDispatchLevel: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;

  anon0:
    call {:si_unique_call 748} vslice_dummy_var_94 := __HAVOC_malloc(4);
    FdoData_64 := actual_FdoData_64;
    Irp_17 := actual_Irp_17;
    Status := actual_Status;
    Information := actual_Information;
    AtDispatchLevel := actual_AtDispatchLevel;
    call {:si_unique_call 749} Tmp_648 := __HAVOC_malloc(16);
    call {:si_unique_call 750} Tmp_649 := __HAVOC_malloc(16);
    call {:si_unique_call 751} Tmp_652 := __HAVOC_malloc(16);
    call {:si_unique_call 752} Tmp_653 := __HAVOC_malloc(160);
    call {:si_unique_call 753} Tmp_654 := __HAVOC_malloc(16);
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc Tmp_654;
    assume {:nonnull} Tmp_654 != 0;
    assume Tmp_654 > 0;
    havoc sgl;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc Tmp_652;
    assume {:nonnull} Tmp_652 != 0;
    assume Tmp_652 > 0;
    havoc sglBuffer;
    oldIrql_3 := 0;
    Tmp_653 := strConst__li2bpl200;
    call {:si_unique_call 754} DebugPrint(5, 64, Tmp_653);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sgl != 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} AtDispatchLevel != 0;
    goto L18;

  L18:
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    havoc Tmp_651;
    assume {:nonnull} Tmp_651 != 0;
    assume Tmp_651 > 0;
    havoc Tmp_655;
    assume {:nonnull} Tmp_655 != 0;
    assume Tmp_655 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} AtDispatchLevel == 0;
    call {:si_unique_call 755} sdv_KeLowerIrql(oldIrql_3);
    goto L13;

  L13:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sglBuffer != 0;
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    call {:si_unique_call 756} ExFreeToNPagedLookasideList(SGListLookasideList__FDO_DATA(FdoData_64), sglBuffer);
    goto L25;

  L25:
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc Tmp_649;
    assume {:nonnull} Tmp_649 != 0;
    assume Tmp_649 > 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc Tmp_648;
    assume {:nonnull} Tmp_648 != 0;
    assume Tmp_648 > 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_17))] := Information;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    call {:si_unique_call 757} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 758} vslice_dummy_var_95 := PciDrvIoDecrement(FdoData_64);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} sglBuffer == 0;
    goto L25;

  anon14_Then:
    assume {:partition} AtDispatchLevel != 0;
    goto L13;

  anon13_Then:
    assume {:partition} AtDispatchLevel == 0;
    call {:si_unique_call 759} Tmp_656 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_656 != 0;
    assume Tmp_656 > 0;
    Mem_T.INT4[Tmp_656] := oldIrql_3;
    call {:si_unique_call 760} sdv_KeRaiseIrql(2, Tmp_656);
    assume {:nonnull} Tmp_656 != 0;
    assume Tmp_656 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_656];
    goto L18;

  anon11_Then:
    assume {:partition} sgl == 0;
    goto L13;
}



procedure {:origName "NICWrite"} NICWrite(actual_FdoData_65: int, actual_Irp_18: int) returns (Tmp_657: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICWrite"} NICWrite(actual_FdoData_65: int, actual_Irp_18: int) returns (Tmp_657: int)
{
  var {:pointer} Tmp_658: int;
  var {:pointer} Tmp_659: int;
  var {:pointer} sgListBuffer: int;
  var {:scalar} length_1: int;
  var {:scalar} sdv_272: int;
  var {:pointer} Tmp_660: int;
  var {:pointer} Tmp_661: int;
  var {:pointer} Tmp_662: int;
  var {:pointer} Tmp_663: int;
  var {:pointer} Tmp_664: int;
  var {:scalar} oldIrql_4: int;
  var {:scalar} sdv_275: int;
  var {:pointer} Tmp_666: int;
  var {:pointer} Tmp_667: int;
  var {:pointer} Tmp_668: int;
  var {:pointer} Tmp_669: int;
  var {:scalar} returnStatus: int;
  var {:pointer} Tmp_670: int;
  var {:pointer} Tmp_671: int;
  var {:pointer} tempMdl: int;
  var {:scalar} pageCount: int;
  var {:scalar} status_52: int;
  var {:pointer} virtualAddress_1: int;
  var {:pointer} Tmp_672: int;
  var {:pointer} mdl: int;
  var {:pointer} FdoData_65: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_96: int;

  anon0:
    FdoData_65 := actual_FdoData_65;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 761} Tmp_658 := __HAVOC_malloc(80);
    call {:si_unique_call 762} Tmp_659 := __HAVOC_malloc(16);
    call {:si_unique_call 763} Tmp_662 := __HAVOC_malloc(80);
    call {:si_unique_call 764} Tmp_663 := __HAVOC_malloc(108);
    call {:si_unique_call 765} Tmp_664 := __HAVOC_malloc(84);
    call {:si_unique_call 766} Tmp_666 := __HAVOC_malloc(16);
    call {:si_unique_call 767} Tmp_667 := __HAVOC_malloc(92);
    call {:si_unique_call 768} Tmp_668 := __HAVOC_malloc(16);
    call {:si_unique_call 769} Tmp_669 := __HAVOC_malloc(120);
    call {:si_unique_call 770} Tmp_670 := __HAVOC_malloc(116);
    call {:si_unique_call 771} Tmp_672 := __HAVOC_malloc(16);
    pageCount := 0;
    length_1 := 0;
    Tmp_658 := strConst__li2bpl207;
    call {:si_unique_call 772} DebugPrint(5, 64, Tmp_658);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_672;
    assume {:nonnull} Tmp_672 != 0;
    assume Tmp_672 > 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_668;
    assume {:nonnull} Tmp_668 != 0;
    assume Tmp_668 > 0;
    status_52 := 0;
    returnStatus := status_52;
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    Tmp_664 := strConst__li2bpl201;
    call {:si_unique_call 773} DebugPrint(2, 64, Tmp_664);
    status_52 := -1073741661;
    returnStatus := status_52;
    goto L29;

  L29:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} status_52 >= 0;
    goto L33;

  L33:
    Tmp_662 := strConst__li2bpl202;
    call {:si_unique_call 774} DebugPrint(6, 64, Tmp_662);
    Tmp_657 := returnStatus;
    goto LM2;

  LM2:
    return;

  anon23_Then:
    assume {:partition} 0 > status_52;
    call {:si_unique_call 775} NICCompleteSendRequest(FdoData_65, Irp_18, status_52, 0, 0);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L33;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc mdl;
    tempMdl := mdl;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} mdl != 0;
    call {:si_unique_call 776} sdv_272 := sdv_MmGetMdlByteCount(0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_272 != 0;
    goto L46;

  L46:
    call {:si_unique_call 777} length_1, sdv_275, tempMdl, pageCount, virtualAddress_1 := NICWrite_loop_L46(length_1, sdv_275, tempMdl, pageCount, virtualAddress_1);
    goto L46_last;

  L46_last:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} tempMdl != 0;
    call {:si_unique_call 778} virtualAddress_1 := sdv_MmGetMdlVirtualAddress(0);
    call {:si_unique_call 779} sdv_275 := sdv_MmGetMdlByteCount(0);
    length_1 := length_1 + sdv_275;
    call {:si_unique_call 780} pageCount := corral_nondet();
    assume {:nonnull} tempMdl != 0;
    assume tempMdl > 0;
    havoc tempMdl;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} tempMdl == 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 60 > length_1;
    Tmp_670 := strConst__li2bpl204;
    call {:si_unique_call 781} DebugPrint(2, 64, Tmp_670);
    returnStatus := -1073741808;
    status_52 := returnStatus;
    goto L29;

  anon26_Then:
    assume {:partition} length_1 >= 60;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} pageCount > 8;
    goto L67;

  L67:
    Tmp_669 := strConst__li2bpl205;
    call {:si_unique_call 782} DebugPrint(2, 64, Tmp_669);
    returnStatus := -1073741808;
    status_52 := returnStatus;
    goto L29;

  anon27_Then:
    assume {:partition} 8 >= pageCount;
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 783} Tmp_661 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_661 != 0;
    assume Tmp_661 > 0;
    Mem_T.INT4[Tmp_661] := oldIrql_4;
    call {:si_unique_call 784} sdv_KeRaiseIrql(2, Tmp_661);
    assume {:nonnull} Tmp_661 != 0;
    assume Tmp_661 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_661];
    call {:si_unique_call 785} sdv_IoMarkIrpPending(0);
    returnStatus := 259;
    call {:si_unique_call 786} sgListBuffer := sdv_ExAllocateFromNPagedLookasideList(0);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} sgListBuffer != 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_659;
    assume {:nonnull} Tmp_659 != 0;
    assume Tmp_659 > 0;
    call {:si_unique_call 787} vslice_dummy_var_96 := sdv_MmGetMdlVirtualAddress(0);
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    havoc Tmp_671;
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    havoc Tmp_660;
    assume {:nonnull} Tmp_660 != 0;
    assume Tmp_660 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} status_52 < 0;
    Tmp_663 := strConst__li2bpl206;
    call {:si_unique_call 788} DebugPrint(2, 64, Tmp_663);
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    call {:si_unique_call 789} ExFreeToNPagedLookasideList(SGListLookasideList__FDO_DATA(FdoData_65), sgListBuffer);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_666;
    assume {:nonnull} Tmp_666 != 0;
    assume Tmp_666 > 0;
    goto L85;

  L85:
    call {:si_unique_call 790} sdv_KeLowerIrql(oldIrql_4);
    goto L29;

  anon30_Then:
    assume {:partition} 0 <= status_52;
    goto L85;

  anon29_Then:
    assume {:partition} sgListBuffer == 0;
    goto L85;

  anon28_Then:
    goto L67;

  anon24_Then:
    assume {:partition} sdv_272 == 0;
    goto L39;

  L39:
    Tmp_667 := strConst__li2bpl203;
    call {:si_unique_call 791} DebugPrint(2, 64, Tmp_667);
    returnStatus := -1073741808;
    status_52 := returnStatus;
    goto L29;

  anon33_Then:
    assume {:partition} mdl == 0;
    goto L39;
}



procedure {:origName "NICSendPacket"} NICSendPacket(actual_FdoData_66: int, actual_pMpTcb_2: int, actual_pFragList: int) returns (Tmp_673: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_673 == -1073741668 || Tmp_673 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSendPacket"} NICSendPacket(actual_FdoData_66: int, actual_pMpTcb_2: int, actual_pFragList: int) returns (Tmp_673: int)
{
  var {:pointer} Tmp_674: int;
  var {:pointer} pHwTbd_1: int;
  var {:pointer} Tmp_675: int;
  var {:pointer} Tmp_676: int;
  var {:scalar} TbdCount: int;
  var {:pointer} Tmp_677: int;
  var {:pointer} Tmp_678: int;
  var {:pointer} Tmp_680: int;
  var {:scalar} index_1: int;
  var {:scalar} Tmp_681: int;
  var {:pointer} pHwTcb_1: int;
  var {:scalar} Tmp_682: int;
  var {:scalar} status_53: int;
  var {:scalar} Tmp_683: int;
  var {:pointer} FdoData_66: int;
  var {:pointer} pMpTcb_2: int;
  var {:pointer} pFragList: int;

  anon0:
    FdoData_66 := actual_FdoData_66;
    pMpTcb_2 := actual_pMpTcb_2;
    pFragList := actual_pFragList;
    call {:si_unique_call 792} Tmp_674 := __HAVOC_malloc(76);
    call {:si_unique_call 793} Tmp_675 := __HAVOC_malloc(4);
    call {:si_unique_call 794} Tmp_676 := __HAVOC_malloc(4);
    call {:si_unique_call 795} Tmp_677 := __HAVOC_malloc(76);
    call {:si_unique_call 796} Tmp_678 := __HAVOC_malloc(128);
    call {:si_unique_call 797} Tmp_680 := __HAVOC_malloc(4);
    TbdCount := 0;
    assume {:nonnull} pMpTcb_2 != 0;
    assume pMpTcb_2 > 0;
    havoc pHwTcb_1;
    assume {:nonnull} pMpTcb_2 != 0;
    assume pMpTcb_2 > 0;
    havoc pHwTbd_1;
    Tmp_674 := strConst__li2bpl210;
    call {:si_unique_call 798} DebugPrint(5, 64, Tmp_674);
    index_1 := 0;
    goto L15;

  L15:
    call {:si_unique_call 799} Tmp_675, Tmp_676, TbdCount, Tmp_680, index_1, Tmp_681, Tmp_682, Tmp_683 := NICSendPacket_loop_L15(pHwTbd_1, Tmp_675, Tmp_676, TbdCount, Tmp_680, index_1, Tmp_681, Tmp_682, Tmp_683, pFragList);
    goto L15_last;

  L15_last:
    assume {:nonnull} pFragList != 0;
    assume pFragList > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_681 := index_1;
    assume {:nonnull} pFragList != 0;
    assume pFragList > 0;
    havoc Tmp_680;
    assume {:nonnull} Tmp_680 != 0;
    assume Tmp_680 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_683 := index_1;
    assume {:nonnull} pFragList != 0;
    assume pFragList > 0;
    havoc Tmp_676;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    assume {:nonnull} pHwTbd_1 != 0;
    assume pHwTbd_1 > 0;
    Tmp_682 := index_1;
    assume {:nonnull} pFragList != 0;
    assume pFragList > 0;
    havoc Tmp_675;
    assume {:nonnull} Tmp_675 != 0;
    assume Tmp_675 > 0;
    assume {:nonnull} pHwTbd_1 != 0;
    assume pHwTbd_1 > 0;
    TbdCount := TbdCount + 1;
    goto L18;

  L18:
    index_1 := index_1 + 1;
    goto L18_dummy;

  L18_dummy:
    assume false;
    return;

  anon9_Then:
    goto L18;

  anon7_Then:
    assume {:nonnull} pHwTcb_1 != 0;
    assume pHwTcb_1 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(TxCbHeader__GENERIC_TxCB(pHwTcb_1))] := 0;
    assume {:nonnull} pHwTcb_1 != 0;
    assume pHwTcb_1 > 0;
    assume {:nonnull} pHwTcb_1 != 0;
    assume pHwTcb_1 > 0;
    assume {:nonnull} pMpTcb_2 != 0;
    assume pMpTcb_2 > 0;
    assume {:nonnull} pHwTcb_1 != 0;
    assume pHwTcb_1 > 0;
    assume {:nonnull} pHwTcb_1 != 0;
    assume pHwTcb_1 > 0;
    assume {:nonnull} FdoData_66 != 0;
    assume FdoData_66 > 0;
    assume {:nonnull} pHwTcb_1 != 0;
    assume pHwTcb_1 > 0;
    call {:si_unique_call 800} status_53 := NICStartSend(FdoData_66, pMpTcb_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_53 >= 0;
    goto L36;

  L36:
    Tmp_677 := strConst__li2bpl209;
    call {:si_unique_call 801} DebugPrint(5, 64, Tmp_677);
    Tmp_673 := status_53;
    return;

  anon8_Then:
    assume {:partition} 0 > status_53;
    Tmp_678 := strConst__li2bpl208;
    call {:si_unique_call 802} DebugPrint(2, 64, Tmp_678);
    goto L36;
}



procedure {:origName "NICHandleSendInterrupt"} NICHandleSendInterrupt(actual_FdoData_67: int) returns (Tmp_684: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleSendInterrupt"} NICHandleSendInterrupt(actual_FdoData_67: int) returns (Tmp_684: int)
{
  var {:scalar} sdv_279: int;
  var {:scalar} Tmp_685: int;
  var {:pointer} pEntry_1: int;
  var {:scalar} sdv_280: int;
  var {:pointer} Tmp_687: int;
  var {:pointer} Tmp_688: int;
  var {:pointer} sdv_282: int;
  var {:pointer} irp_4: int;
  var {:pointer} Tmp_689: int;
  var {:pointer} Tmp_690: int;
  var {:pointer} pMpTcb_3: int;
  var {:pointer} Tmp_691: int;
  var {:scalar} status_54: int;
  var {:pointer} Tmp_692: int;
  var {:pointer} FdoData_67: int;

  anon0:
    FdoData_67 := actual_FdoData_67;
    call {:si_unique_call 803} Tmp_687 := __HAVOC_malloc(116);
    call {:si_unique_call 804} Tmp_688 := __HAVOC_malloc(116);
    call {:si_unique_call 805} Tmp_689 := __HAVOC_malloc(188);
    call {:si_unique_call 806} Tmp_690 := __HAVOC_malloc(116);
    status_54 := 0;
    Tmp_687 := strConst__li2bpl212;
    call {:si_unique_call 807} DebugPrint(5, 64, Tmp_687);
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L13;

  L13:
    call {:si_unique_call 808} Tmp_685, pMpTcb_3, Tmp_691, Tmp_692 := NICHandleSendInterrupt_loop_L13(Tmp_685, pMpTcb_3, Tmp_691, Tmp_692, FdoData_67);
    goto L13_last;

  L13_last:
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    havoc pMpTcb_3;
    assume {:nonnull} pMpTcb_3 != 0;
    assume pMpTcb_3 > 0;
    havoc Tmp_692;
    assume {:nonnull} Tmp_692 != 0;
    assume Tmp_692 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(TxCbHeader__GENERIC_TxCB(Tmp_692))], 32768) != 0;
    assume {:nonnull} pMpTcb_3 != 0;
    assume pMpTcb_3 > 0;
    havoc Tmp_691;
    assume {:nonnull} Tmp_691 != 0;
    assume Tmp_691 > 0;
    havoc Tmp_685;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Tmp_685 != 3;
    call {:si_unique_call 809} MP_FREE_SEND_PACKET(FdoData_67, pMpTcb_3, 0);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto anon26_Else_dummy;

  anon26_Else_dummy:
    assume false;
    return;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:partition} Tmp_685 == 3;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(TxCbHeader__GENERIC_TxCB(Tmp_692))], 32768) == 0;
    goto L14;

  L14:
    call {:si_unique_call 810} pEntry_1, sdv_280, sdv_282, irp_4, Tmp_689 := NICHandleSendInterrupt_loop_L14(pEntry_1, sdv_280, sdv_282, irp_4, Tmp_689, FdoData_67);
    goto L14_last;

  L14_last:
    call {:si_unique_call 818} sdv_280 := sdv_IsListEmpty(0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_280 != 0;
    goto L27;

  L27:
    Tmp_688 := strConst__li2bpl211;
    call {:si_unique_call 811} DebugPrint(5, 64, Tmp_688);
    Tmp_684 := status_54;
    goto L1;

  L1:
    goto LM2;

  anon21_Then:
    assume {:partition} sdv_280 == 0;
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    call {:si_unique_call 812} pEntry_1 := RemoveHeadList(SendQueueHead__FDO_DATA(FdoData_67));
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    call {:si_unique_call 813} sdv_282 := sdv_containing_record(pEntry_1, 88);
    irp_4 := sdv_282;
    Tmp_689 := strConst__li2bpl213;
    call {:si_unique_call 814} DebugPrint(6, 64, Tmp_689);
    call {:si_unique_call 815} NICWritePacket(FdoData_67, irp_4, 1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    goto L27;

  anon20_Then:
    goto L14;

  anon19_Then:
    call {:si_unique_call 816} sdv_279 := sdv_IsListEmpty(0);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} sdv_279 != 0;
    Tmp_690 := strConst__li2bpl211;
    call {:si_unique_call 817} DebugPrint(5, 64, Tmp_690);
    Tmp_684 := status_54;
    goto L1;

  anon23_Then:
    assume {:partition} sdv_279 == 0;
    goto L13;
}



procedure {:origName "NICStartSend"} NICStartSend(actual_FdoData_68: int, actual_pMpTcb_4: int) returns (Tmp_693: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_693 == -1073741668 || Tmp_693 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICStartSend"} NICStartSend(actual_FdoData_68: int, actual_pMpTcb_4: int) returns (Tmp_693: int)
{
  var {:pointer} Tmp_694: int;
  var {:pointer} Tmp_695: int;
  var {:pointer} Tmp_696: int;
  var {:pointer} Tmp_697: int;
  var {:scalar} sdv_283: int;
  var {:pointer} Tmp_698: int;
  var {:pointer} Tmp_699: int;
  var {:pointer} Tmp_700: int;
  var {:pointer} Tmp_702: int;
  var {:scalar} status_55: int;
  var {:pointer} Tmp_703: int;
  var {:pointer} Tmp_704: int;
  var {:pointer} FdoData_68: int;
  var {:pointer} pMpTcb_4: int;
  var vslice_dummy_var_29: int;

  anon0:
    FdoData_68 := actual_FdoData_68;
    pMpTcb_4 := actual_pMpTcb_4;
    call {:si_unique_call 819} Tmp_695 := __HAVOC_malloc(108);
    call {:si_unique_call 820} Tmp_696 := __HAVOC_malloc(184);
    call {:si_unique_call 821} Tmp_697 := __HAVOC_malloc(72);
    call {:si_unique_call 822} Tmp_700 := __HAVOC_malloc(72);
    call {:si_unique_call 823} Tmp_702 := __HAVOC_malloc(112);
    call {:si_unique_call 824} Tmp_703 := __HAVOC_malloc(160);
    Tmp_700 := strConst__li2bpl214;
    call {:si_unique_call 825} DebugPrint(5, 64, Tmp_700);
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_696 := strConst__li2bpl216;
    call {:si_unique_call 826} DebugPrint(5, 64, Tmp_696);
    call {:si_unique_call 827} sdv_283 := WaitScb(FdoData_68);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_283 != 0;
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    havoc Tmp_699;
    assume {:nonnull} Tmp_699 != 0;
    assume Tmp_699 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_695 := strConst__li2bpl218;
    call {:si_unique_call 828} DebugPrint(2, 64, Tmp_695);
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto L22;

  L22:
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    havoc Tmp_698;
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    assume {:nonnull} pMpTcb_4 != 0;
    assume pMpTcb_4 > 0;
    call {:si_unique_call 829} status_55 := D100IssueScbCommand(FdoData_68, 16, 0);
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto L36;

  L36:
    Tmp_697 := strConst__li2bpl219;
    call {:si_unique_call 830} DebugPrint(5, 64, Tmp_697);
    Tmp_693 := status_55;
    return;

  anon9_Then:
    goto L22;

  anon8_Then:
    assume {:partition} sdv_283 == 0;
    Tmp_703 := strConst__li2bpl217;
    call {:si_unique_call 831} DebugPrint(2, 64, Tmp_703);
    status_55 := -1073741668;
    goto L36;

  anon7_Then:
    Tmp_702 := strConst__li2bpl215;
    call {:si_unique_call 832} DebugPrint(6, 64, Tmp_702);
    assume {:nonnull} pMpTcb_4 != 0;
    assume pMpTcb_4 > 0;
    havoc Tmp_704;
    assume {:nonnull} pMpTcb_4 != 0;
    assume pMpTcb_4 > 0;
    havoc Tmp_694;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    assume {:nonnull} Tmp_704 != 0;
    assume Tmp_704 > 0;
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    havoc vslice_dummy_var_29;
    call {:si_unique_call 833} status_55 := D100IssueScbCommand(FdoData_68, 32, vslice_dummy_var_29);
    goto L36;
}



procedure {:origName "NICFreeBusySendPackets"} NICFreeBusySendPackets(actual_FdoData_69: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeBusySendPackets"} NICFreeBusySendPackets(actual_FdoData_69: int)
{
  var {:pointer} Tmp_707: int;
  var {:pointer} pMpTcb_5: int;
  var {:pointer} Tmp_708: int;
  var {:scalar} status_56: int;
  var {:scalar} Tmp_709: int;
  var {:pointer} Tmp_710: int;
  var {:pointer} FdoData_69: int;
  var vslice_dummy_var_97: int;

  anon0:
    call {:si_unique_call 834} vslice_dummy_var_97 := __HAVOC_malloc(4);
    FdoData_69 := actual_FdoData_69;
    call {:si_unique_call 835} Tmp_708 := __HAVOC_malloc(112);
    call {:si_unique_call 836} Tmp_710 := __HAVOC_malloc(112);
    call {:si_unique_call 837} status_56 := MP_GET_STATUS_FROM_FLAGS(FdoData_69);
    Tmp_710 := strConst__li2bpl220;
    call {:si_unique_call 838} DebugPrint(5, 64, Tmp_710);
    goto L12;

  L12:
    call {:si_unique_call 839} Tmp_707, pMpTcb_5, Tmp_709 := NICFreeBusySendPackets_loop_L12(Tmp_707, pMpTcb_5, status_56, Tmp_709, FdoData_69);
    goto L12_last;

  L12_last:
    assume {:nonnull} FdoData_69 != 0;
    assume FdoData_69 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} FdoData_69 != 0;
    assume FdoData_69 > 0;
    havoc pMpTcb_5;
    assume {:nonnull} pMpTcb_5 != 0;
    assume pMpTcb_5 > 0;
    havoc Tmp_707;
    assume {:nonnull} Tmp_707 != 0;
    assume Tmp_707 > 0;
    havoc Tmp_709;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Tmp_709 != 3;
    call {:si_unique_call 840} MP_FREE_SEND_PACKET(FdoData_69, pMpTcb_5, status_56);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} Tmp_709 == 3;
    goto L13;

  L13:
    Tmp_708 := strConst__li2bpl221;
    call {:si_unique_call 841} DebugPrint(5, 64, Tmp_708);
    goto LM2;

  anon7_Then:
    goto L13;
}



procedure {:origName "MP_FREE_SEND_PACKET"} MP_FREE_SEND_PACKET(actual_FdoData_70: int, actual_pMpTcb_6: int, actual_Status_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_4) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_5) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MP_FREE_SEND_PACKET"} MP_FREE_SEND_PACKET(actual_FdoData_70: int, actual_pMpTcb_6: int, actual_Status_1: int)
{
  var {:pointer} Irp_19: int;
  var {:pointer} Tmp_712: int;
  var {:pointer} FdoData_70: int;
  var {:pointer} pMpTcb_6: int;
  var {:scalar} Status_1: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 842} vslice_dummy_var_98 := __HAVOC_malloc(4);
    FdoData_70 := actual_FdoData_70;
    pMpTcb_6 := actual_pMpTcb_6;
    Status_1 := actual_Status_1;
    assume {:nonnull} pMpTcb_6 != 0;
    assume pMpTcb_6 > 0;
    havoc Irp_19;
    assume {:nonnull} pMpTcb_6 != 0;
    assume pMpTcb_6 > 0;
    assume {:nonnull} pMpTcb_6 != 0;
    assume pMpTcb_6 > 0;
    assume {:nonnull} pMpTcb_6 != 0;
    assume pMpTcb_6 > 0;
    assume {:nonnull} FdoData_70 != 0;
    assume FdoData_70 > 0;
    havoc Tmp_712;
    assume {:nonnull} FdoData_70 != 0;
    assume FdoData_70 > 0;
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    assume {:nonnull} FdoData_70 != 0;
    assume FdoData_70 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Irp_19 != 0;
    call {:si_unique_call 843} sdv_KeReleaseSpinLockFromDpcLevel(0);
    assume {:nonnull} pMpTcb_6 != 0;
    assume pMpTcb_6 > 0;
    havoc vslice_dummy_var_30;
    call {:si_unique_call 844} NICCompleteSendRequest(FdoData_70, Irp_19, Status_1, vslice_dummy_var_30, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 845} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} Irp_19 == 0;
    goto L1;
}



procedure {:origName "PciDrvCancelQueuedReadIrps"} PciDrvCancelQueuedReadIrps(actual_FdoData_71: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCancelQueuedReadIrps"} PciDrvCancelQueuedReadIrps(actual_FdoData_71: int)
{
  var {:scalar} sdv_287: int;
  var {:pointer} listEntry_1: int;
  var {:scalar} oldIrql_5: int;
  var {:pointer} sdv_289: int;
  var {:scalar} sdv_291: int;
  var {:pointer} irp_5: int;
  var {:pointer} Tmp_715: int;
  var {:pointer} FdoData_71: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;

  anon0:
    call {:si_unique_call 846} vslice_dummy_var_99 := __HAVOC_malloc(4);
    FdoData_71 := actual_FdoData_71;
    call {:si_unique_call 847} Tmp_715 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    Mem_T.INT4[Tmp_715] := oldIrql_5;
    call {:si_unique_call 848} sdv_KeAcquireSpinLock(0, Tmp_715);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_715];
    goto L10;

  L10:
    call {:si_unique_call 849} sdv_287, listEntry_1, oldIrql_5, sdv_289, sdv_291, irp_5, Tmp_715, vslice_dummy_var_100 := PciDrvCancelQueuedReadIrps_loop_L10(sdv_287, listEntry_1, oldIrql_5, sdv_289, sdv_291, irp_5, Tmp_715, FdoData_71, vslice_dummy_var_100);
    goto L10_last;

  L10_last:
    call {:si_unique_call 859} sdv_287 := sdv_IsListEmpty(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_287 != 0;
    call {:si_unique_call 850} sdv_KeReleaseSpinLock(0, oldIrql_5);
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} sdv_287 == 0;
    assume {:nonnull} FdoData_71 != 0;
    assume FdoData_71 > 0;
    call {:si_unique_call 851} listEntry_1 := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_71));
    call {:si_unique_call 852} sdv_289 := sdv_containing_record(listEntry_1, 88);
    irp_5 := sdv_289;
    call {:si_unique_call 853} sdv_291 := sdv_IoSetCancelRoutine(irp_5, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_291 != 0;
    call {:si_unique_call 854} sdv_KeReleaseSpinLock(0, oldIrql_5);
    assume {:nonnull} irp_5 != 0;
    assume irp_5 > 0;
    assume {:nonnull} irp_5 != 0;
    assume irp_5 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(irp_5))] := 0;
    call {:si_unique_call 855} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 856} vslice_dummy_var_100 := PciDrvIoDecrement(FdoData_71);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 857} Tmp_715 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    Mem_T.INT4[Tmp_715] := oldIrql_5;
    call {:si_unique_call 858} sdv_KeAcquireSpinLock(0, Tmp_715);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_715];
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} sdv_291 == 0;
    irp_5 := 0;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PciDrvDispatchPnp"} PciDrvDispatchPnp(actual_DeviceObject_28: int, actual_Irp_20: int) returns (Tmp_716: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPnp"} PciDrvDispatchPnp(actual_DeviceObject_28: int, actual_Irp_20: int) returns (Tmp_716: int)
{
  var {:pointer} sdv_303: int;
  var {:pointer} fdoData_23: int;
  var {:pointer} deviceState_3: int;
  var {:scalar} status_57: int;
  var {:pointer} Tmp_718: int;
  var {:pointer} Tmp_719: int;
  var {:pointer} Tmp_720: int;
  var {:pointer} stack_14: int;
  var {:pointer} DeviceObject_28: int;
  var {:pointer} Irp_20: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;

  anon0:
    DeviceObject_28 := actual_DeviceObject_28;
    Irp_20 := actual_Irp_20;
    call {:si_unique_call 860} Tmp_718 := __HAVOC_malloc(36);
    call {:si_unique_call 861} Tmp_719 := __HAVOC_malloc(160);
    call {:si_unique_call 862} Tmp_720 := __HAVOC_malloc(160);
    status_57 := 0;
    call {:si_unique_call 863} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_28 != 0;
    assume DeviceObject_28 > 0;
    havoc fdoData_23;
    call {:si_unique_call 864} stack_14 := sdv_IoGetCurrentIrpStackLocation(Irp_20);
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    havoc vslice_dummy_var_31;
    call {:si_unique_call 865} sdv_303 := PnPMinorFunctionString(vslice_dummy_var_31);
    Tmp_718 := strConst__li2bpl222;
    call {:si_unique_call 866} DebugPrint(5, 2, Tmp_718);
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    call {:si_unique_call 867} vslice_dummy_var_102 := PciDrvPowerUpDevice#1(fdoData_23, 1);
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} yogi_error != 1;
    goto L23;

  L23:
    call {:si_unique_call 868} vslice_dummy_var_101 := PciDrvIoIncrement(fdoData_23);
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 869} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 870} vslice_dummy_var_103 := PciDrvIoDecrement(fdoData_23);
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} yogi_error != 1;
    Tmp_716 := -1073741810;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon142_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon122_Then:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:nonnull} stack_14 != 0;
    assume stack_14 > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    call {:si_unique_call 871} PciDrvProcessQueuedRequests#1(fdoData_23);
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 872} PciDrvCancelQueuedReadIrps(fdoData_23);
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 873} PciDrvCancelQueuedIoctlIrps(fdoData_23);
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 874} status_57 := IoSetDeviceInterfaceState(0, 0);
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} status_57 >= 0;
    goto L78;

  L78:
    call {:si_unique_call 875} vslice_dummy_var_105 := PciDrvReturnResources(DeviceObject_28);
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 876} PciDrvDisarmWake(fdoData_23, 1);
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 877} PciDrvDeregisterIdleDetection(fdoData_23, 1);
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 878} vslice_dummy_var_106 := PciDrvWmiDeRegistration(fdoData_23);
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 879} Tmp_716 := PciDrvForwardAndForget(fdoData_23, Irp_20);
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon179_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon178_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon177_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon176_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon125_Then:
    assume {:partition} 0 > status_57;
    Tmp_719 := strConst__li2bpl223;
    call {:si_unique_call 880} DebugPrint(2, 2, Tmp_719);
    goto L78;

  anon175_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon174_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon173_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon133_Then:
    call {:si_unique_call 881} Tmp_716 := PciDrvForwardAndForget(fdoData_23, Irp_20);
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon180_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon134_Then:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    havoc vslice_dummy_var_32;
    call {:si_unique_call 882} vslice_dummy_var_104 := PciDrvSendIrpSynchronously(vslice_dummy_var_32, Irp_20);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    goto L101;

  L101:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 883} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 884} vslice_dummy_var_107 := PciDrvIoDecrement(fdoData_23);
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} yogi_error != 1;
    Tmp_716 := status_57;
    goto L1;

  anon160_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon126_Then:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    deviceState_3 := Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_20));
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} deviceState_3 != 0;
    assume {:nonnull} deviceState_3 != 0;
    assume deviceState_3 > 0;
    Mem_T.INT4[deviceState_3] := BOR(Mem_T.INT4[deviceState_3], 4);
    goto L99;

  L99:
    status_57 := 0;
    goto L101;

  anon172_Then:
    assume {:partition} deviceState_3 == 0;
    goto L99;

  anon171_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon135_Then:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    havoc vslice_dummy_var_33;
    call {:si_unique_call 885} status_57 := PciDrvSendIrpSynchronously(vslice_dummy_var_33, Irp_20);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} yogi_error != 1;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} status_57 >= 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    call {:si_unique_call 886} PciDrvProcessQueuedRequests#1(fdoData_23);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} yogi_error != 1;
    goto L101;

  anon170_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon128_Then:
    goto L101;

  anon127_Then:
    assume {:partition} 0 > status_57;
    goto L101;

  anon169_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon136_Then:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_23)] != 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto L122;

  L122:
    call {:si_unique_call 887} PciDrvWithdrawIrps(fdoData_23);
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 888} PciDrvReleaseAndWait(fdoData_23, 1, 1);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 889} Tmp_716 := PciDrvForwardAndForget(fdoData_23, Irp_20);
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon168_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon167_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon166_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon165_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_23)] == 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto L122;

  anon137_Then:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    call {:si_unique_call 890} status_57 := PciDrvReturnResources(DeviceObject_28);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 891} PciDrvDisarmWake(fdoData_23, 1);
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 892} PciDrvDeregisterIdleDetection(fdoData_23, 1);
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 893} Tmp_716 := PciDrvForwardAndForget(fdoData_23, Irp_20);
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon164_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon163_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon162_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon161_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon138_Then:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    havoc vslice_dummy_var_34;
    call {:si_unique_call 894} status_57 := PciDrvSendIrpSynchronously(vslice_dummy_var_34, Irp_20);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} yogi_error != 1;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} status_57 >= 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    call {:si_unique_call 895} PciDrvProcessQueuedRequests#1(fdoData_23);
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 896} vslice_dummy_var_108 := PciDrvArmForWake#1(fdoData_23, 1);
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 897} PciDrvRegisterForIdleDetection(fdoData_23, 1);
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} yogi_error != 1;
    goto L101;

  anon159_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon158_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon157_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon130_Then:
    goto L101;

  anon129_Then:
    assume {:partition} 0 > status_57;
    goto L101;

  anon156_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon139_Then:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    call {:si_unique_call 898} PciDrvProcessQueuedRequests#1(fdoData_23);
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 899} PciDrvCancelQueuedReadIrps(fdoData_23);
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 900} PciDrvCancelQueuedIoctlIrps(fdoData_23);
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 901} status_57 := IoSetDeviceInterfaceState(0, 0);
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} status_57 >= 0;
    goto L185;

  L185:
    call {:si_unique_call 902} vslice_dummy_var_109 := PciDrvReturnResources(DeviceObject_28);
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 903} vslice_dummy_var_110 := PciDrvWmiDeRegistration(fdoData_23);
    goto L166;

  L166:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    call {:si_unique_call 904} MmUnlockPagableImageSection(0);
    goto L191;

  L191:
    call {:si_unique_call 905} PciDrvReleaseAndWait(fdoData_23, 1, 0);
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 906} sdv_IoSkipCurrentIrpStackLocation(Irp_20);
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    havoc vslice_dummy_var_35;
    call {:si_unique_call 907} status_57 := sdv_IoCallDriver#1(vslice_dummy_var_35, Irp_20);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 908} IoDetachDevice(0);
    call {:si_unique_call 909} RtlFreeUnicodeString(0);
    call {:si_unique_call 910} IoDeleteDevice(0);
    Tmp_716 := status_57;
    goto L1;

  anon155_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon154_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon131_Then:
    goto L191;

  anon153_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon132_Then:
    assume {:partition} 0 > status_57;
    Tmp_720 := strConst__li2bpl223;
    call {:si_unique_call 911} DebugPrint(2, 2, Tmp_720);
    goto L185;

  anon152_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon151_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon150_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon149_Then:
    goto L166;

  anon140_Then:
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_23)] != 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto L217;

  L217:
    call {:si_unique_call 912} PciDrvWithdrawIrps(fdoData_23);
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    call {:si_unique_call 913} PciDrvDisarmWake(fdoData_23, 1);
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 914} PciDrvDeregisterIdleDetection(fdoData_23, 1);
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 915} PciDrvReleaseAndWait(fdoData_23, 1, 1);
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 916} Tmp_716 := PciDrvForwardAndForget(fdoData_23, Irp_20);
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon148_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon147_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon146_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon145_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon144_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon124_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_23)] == 0;
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    goto L217;

  anon123_Then:
    call {:si_unique_call 917} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 918} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_20);
    call {:si_unique_call 919} sdv_IoSetCompletionRoutine(Irp_20, li2bplFunctionConstant7189, fdoData_23, 1, 1, 1);
    assume {:nonnull} fdoData_23 != 0;
    assume fdoData_23 > 0;
    havoc vslice_dummy_var_36;
    call {:si_unique_call 920} vslice_dummy_var_111 := sdv_IoCallDriver#1(vslice_dummy_var_36, Irp_20);
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} yogi_error != 1;
    Tmp_716 := 259;
    goto L1;

  anon143_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon141_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon121_Then:
    goto L23;
}



procedure {:origName "PciDrvWithdrawReadIrps"} PciDrvWithdrawReadIrps(actual_FdoData_72: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWithdrawReadIrps"} PciDrvWithdrawReadIrps(actual_FdoData_72: int)
{
  var {:pointer} Tmp_723: int;
  var {:scalar} sdv_318: int;
  var {:pointer} listEntry_2: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_320: int;
  var {:scalar} sdv_322: int;
  var {:pointer} irp_6: int;
  var {:pointer} FdoData_72: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;

  anon0:
    call {:si_unique_call 921} vslice_dummy_var_112 := __HAVOC_malloc(4);
    FdoData_72 := actual_FdoData_72;
    call {:si_unique_call 922} Tmp_723 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    Mem_T.INT4[Tmp_723] := oldIrql_6;
    call {:si_unique_call 923} sdv_KeAcquireSpinLock(0, Tmp_723);
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    oldIrql_6 := Mem_T.INT4[Tmp_723];
    goto L10;

  L10:
    call {:si_unique_call 924} Tmp_723, sdv_318, listEntry_2, oldIrql_6, sdv_320, sdv_322, irp_6, vslice_dummy_var_113 := PciDrvWithdrawReadIrps_loop_L10(Tmp_723, sdv_318, listEntry_2, oldIrql_6, sdv_320, sdv_322, irp_6, FdoData_72, vslice_dummy_var_113);
    goto L10_last;

  L10_last:
    call {:si_unique_call 934} sdv_318 := sdv_IsListEmpty(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_318 != 0;
    call {:si_unique_call 925} sdv_KeReleaseSpinLock(0, oldIrql_6);
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} sdv_318 == 0;
    assume {:nonnull} FdoData_72 != 0;
    assume FdoData_72 > 0;
    call {:si_unique_call 926} listEntry_2 := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_72));
    call {:si_unique_call 927} sdv_320 := sdv_containing_record(listEntry_2, 88);
    irp_6 := sdv_320;
    call {:si_unique_call 928} sdv_322 := sdv_IoSetCancelRoutine(irp_6, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_322 != 0;
    call {:si_unique_call 929} sdv_KeReleaseSpinLock(0, oldIrql_6);
    call {:si_unique_call 930} vslice_dummy_var_113 := PciDrvQueueRequest(FdoData_72, irp_6);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 931} Tmp_723 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    Mem_T.INT4[Tmp_723] := oldIrql_6;
    call {:si_unique_call 932} sdv_KeAcquireSpinLock(0, Tmp_723);
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    oldIrql_6 := Mem_T.INT4[Tmp_723];
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} sdv_322 == 0;
    call {:si_unique_call 933} InitializeListHead(listEntry_2);
    irp_6 := 0;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PciDrvCleanup"} PciDrvCleanup(actual_DeviceObject_30: int, actual_Irp_22: int) returns (Tmp_725: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCleanup"} PciDrvCleanup(actual_DeviceObject_30: int, actual_Irp_22: int) returns (Tmp_725: int)
{
  var {:scalar} cleanupList: int;
  var {:pointer} thisEntry: int;
  var {:pointer} irpStack_1: int;
  var {:pointer} listHead: int;
  var {:pointer} nextEntry: int;
  var {:pointer} Tmp_726: int;
  var {:scalar} sdv_324: int;
  var {:pointer} fdoData_25: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} sdv_328: int;
  var {:scalar} sdv_331: int;
  var {:pointer} pendingIrp: int;
  var {:pointer} sdv_332: int;
  var {:pointer} Tmp_727: int;
  var {:pointer} pendingIrpStack: int;
  var {:pointer} DeviceObject_30: int;
  var {:pointer} Irp_22: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;

  anon0:
    call {:si_unique_call 935} cleanupList := __HAVOC_malloc(8);
    DeviceObject_30 := actual_DeviceObject_30;
    Irp_22 := actual_Irp_22;
    call {:si_unique_call 936} Tmp_727 := __HAVOC_malloc(64);
    Tmp_727 := strConst__li2bpl224;
    call {:si_unique_call 937} DebugPrint(5, 16, Tmp_727);
    assume {:nonnull} DeviceObject_30 != 0;
    assume DeviceObject_30 > 0;
    havoc fdoData_25;
    call {:si_unique_call 938} vslice_dummy_var_117 := PciDrvIoIncrement(fdoData_25);
    call {:si_unique_call 939} irpStack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_22);
    call {:si_unique_call 940} InitializeListHead(cleanupList);
    call {:si_unique_call 941} Tmp_726 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    Mem_T.INT4[Tmp_726] := oldIrql_7;
    call {:si_unique_call 942} sdv_KeAcquireSpinLock(0, Tmp_726);
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    oldIrql_7 := Mem_T.INT4[Tmp_726];
    assume {:nonnull} fdoData_25 != 0;
    assume fdoData_25 > 0;
    listHead := NewRequestsQueue__FDO_DATA(fdoData_25);
    assume {:nonnull} listHead != 0;
    assume listHead > 0;
    havoc thisEntry;
    goto L31;

  L31:
    call {:si_unique_call 943} thisEntry, nextEntry, sdv_324, sdv_328, pendingIrp, pendingIrpStack, vslice_dummy_var_114, vslice_dummy_var_115 := PciDrvCleanup_loop_L31(cleanupList, thisEntry, irpStack_1, nextEntry, sdv_324, sdv_328, pendingIrp, pendingIrpStack, vslice_dummy_var_114, vslice_dummy_var_115);
    goto L31_last;

  L31_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} thisEntry != 0;
    assume thisEntry > 0;
    havoc nextEntry;
    call {:si_unique_call 944} sdv_328 := sdv_containing_record(thisEntry, 88);
    pendingIrp := sdv_328;
    call {:si_unique_call 945} pendingIrpStack := sdv_IoGetCurrentIrpStackLocation(pendingIrp);
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    assume {:nonnull} pendingIrpStack != 0;
    assume pendingIrpStack > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 946} vslice_dummy_var_114 := sdv_RemoveEntryList(0);
    call {:si_unique_call 947} sdv_324 := sdv_IoSetCancelRoutine(pendingIrp, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_324 != 0;
    call {:si_unique_call 948} vslice_dummy_var_115 := sdv_InsertTailList(cleanupList, thisEntry);
    goto L45;

  L45:
    thisEntry := nextEntry;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} sdv_324 == 0;
    call {:si_unique_call 949} InitializeListHead(thisEntry);
    goto L45;

  anon12_Then:
    goto L45;

  anon11_Then:
    call {:si_unique_call 950} sdv_KeReleaseSpinLock(0, oldIrql_7);
    goto L59;

  L59:
    call {:si_unique_call 951} thisEntry, sdv_331, pendingIrp, sdv_332 := PciDrvCleanup_loop_L59(cleanupList, thisEntry, sdv_331, pendingIrp, sdv_332);
    goto L59_last;

  L59_last:
    call {:si_unique_call 957} sdv_331 := sdv_IsListEmpty(0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_331 != 0;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_22))] := 0;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 952} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 953} vslice_dummy_var_116 := PciDrvIoDecrement(fdoData_25);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_725 := 0;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} sdv_331 == 0;
    call {:si_unique_call 954} thisEntry := RemoveHeadList(cleanupList);
    call {:si_unique_call 955} sdv_332 := sdv_containing_record(thisEntry, 88);
    pendingIrp := sdv_332;
    assume {:nonnull} pendingIrp != 0;
    assume pendingIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(pendingIrp))] := 0;
    assume {:nonnull} pendingIrp != 0;
    assume pendingIrp > 0;
    call {:si_unique_call 956} sdv_IoCompleteRequest(0, 0);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    assume false;
    return;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_118: int;

  anon0:
    call {:si_unique_call 958} vslice_dummy_var_118 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    assume DebugLevel == 6;
    assume DebugFlag == 15;
    return;
}



procedure {:origName "PciDrvWriteRegistryValue"} PciDrvWriteRegistryValue(actual_FdoData_73: int, actual_Name: int, actual_Value: int) returns (Tmp_730: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_730 == 1 || Tmp_730 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWriteRegistryValue"} PciDrvWriteRegistryValue(actual_FdoData_73: int, actual_Name: int, actual_Value: int) returns (Tmp_730: int)
{
  var {:scalar} valName: int;
  var {:scalar} retValue: int;
  var {:pointer} Tmp_732: int;
  var {:scalar} status_59: int;
  var {:pointer} Name: int;
  var vslice_dummy_var_119: int;

  anon0:
    call {:si_unique_call 959} valName := __HAVOC_malloc(12);
    Name := actual_Name;
    call {:si_unique_call 960} Tmp_732 := __HAVOC_malloc(136);
    retValue := 0;
    call {:si_unique_call 961} sdv_do_paged_code_check();
    Tmp_732 := strConst__li2bpl225;
    call {:si_unique_call 962} DebugPrint(5, 1, Tmp_732);
    call {:si_unique_call 963} status_59 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_59 >= 0;
    call {:si_unique_call 964} RtlInitUnicodeString(valName, Name);
    call {:si_unique_call 965} status_59 := ZwSetValueKey(0, 0, 0, 4, 0, 4);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_59 >= 0;
    retValue := 1;
    goto L29;

  L29:
    call {:si_unique_call 966} vslice_dummy_var_119 := ZwClose(0);
    goto L20;

  L20:
    Tmp_730 := retValue;
    return;

  anon6_Then:
    assume {:partition} 0 > status_59;
    goto L29;

  anon5_Then:
    assume {:partition} 0 > status_59;
    goto L20;
}



procedure {:origName "PciDrvSendIrpSynchronously"} PciDrvSendIrpSynchronously(actual_DeviceObject_31: int, actual_Irp_23: int) returns (Tmp_733: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvSendIrpSynchronously"} PciDrvSendIrpSynchronously(actual_DeviceObject_31: int, actual_Irp_23: int) returns (Tmp_733: int)
{
  var {:scalar} status_60: int;
  var {:scalar} event_1: int;
  var {:pointer} DeviceObject_31: int;
  var {:pointer} Irp_23: int;

  anon0:
    call {:si_unique_call 967} event_1 := __HAVOC_malloc(156);
    DeviceObject_31 := actual_DeviceObject_31;
    Irp_23 := actual_Irp_23;
    call {:si_unique_call 968} sdv_do_paged_code_check();
    call {:si_unique_call 969} KeInitializeEvent(event_1, 0, 0);
    call {:si_unique_call 970} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_23);
    call {:si_unique_call 971} sdv_IoSetCompletionRoutine(Irp_23, li2bplFunctionConstant7191, event_1, 1, 1, 1);
    call {:si_unique_call 972} status_60 := sdv_IoCallDriver#1(DeviceObject_31, Irp_23);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_60 == 259;
    call {:si_unique_call 973} status_60 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc status_60;
    goto L22;

  L22:
    Tmp_733 := status_60;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} status_60 != 259;
    goto L22;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvCancelQueuedIoctlIrps"} PciDrvCancelQueuedIoctlIrps(actual_FdoData_74: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCancelQueuedIoctlIrps"} PciDrvCancelQueuedIoctlIrps(actual_FdoData_74: int)
{
  var {:scalar} i_7: int;
  var {:scalar} sdv_338: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} irp_7: int;
  var {:pointer} Tmp_736: int;
  var {:pointer} FdoData_74: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;

  anon0:
    call {:si_unique_call 974} vslice_dummy_var_120 := __HAVOC_malloc(4);
    FdoData_74 := actual_FdoData_74;
    irp_7 := 0;
    call {:si_unique_call 975} Tmp_736 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    Mem_T.INT4[Tmp_736] := oldIrql_8;
    call {:si_unique_call 976} sdv_KeAcquireSpinLock(0, Tmp_736);
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    oldIrql_8 := Mem_T.INT4[Tmp_736];
    i_7 := 0;
    goto L11;

  L11:
    call {:si_unique_call 977} i_7, sdv_338, oldIrql_8, irp_7, Tmp_736, vslice_dummy_var_121 := PciDrvCancelQueuedIoctlIrps_loop_L11(i_7, sdv_338, oldIrql_8, irp_7, Tmp_736, FdoData_74, vslice_dummy_var_121);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 3} {:Counter "i_7"} true;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 3 > i_7;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} i_7 != 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} i_7 != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} i_7 != 2;
    goto L22;

  L22:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} irp_7 != 0;
    call {:si_unique_call 978} sdv_338 := sdv_IoSetCancelRoutine(irp_7, 0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_338 != 0;
    call {:si_unique_call 979} sdv_KeReleaseSpinLock(0, oldIrql_8);
    assume {:nonnull} irp_7 != 0;
    assume irp_7 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(irp_7))] := 0;
    assume {:nonnull} irp_7 != 0;
    assume irp_7 > 0;
    call {:si_unique_call 980} sdv_IoCompleteRequest(0, 0);
    irp_7 := 0;
    call {:si_unique_call 981} Tmp_736 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    Mem_T.INT4[Tmp_736] := oldIrql_8;
    call {:si_unique_call 982} sdv_KeAcquireSpinLock(0, Tmp_736);
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    oldIrql_8 := Mem_T.INT4[Tmp_736];
    call {:si_unique_call 983} vslice_dummy_var_121 := PciDrvIoDecrement(FdoData_74);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L23;

  L23:
    i_7 := i_7 + 1;
    goto L23_dummy;

  L23_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} sdv_338 == 0;
    irp_7 := 0;
    goto L23;

  anon17_Then:
    assume {:partition} irp_7 == 0;
    goto L23;

  anon19_Then:
    assume {:partition} i_7 == 2;
    assume {:nonnull} FdoData_74 != 0;
    assume FdoData_74 > 0;
    havoc irp_7;
    assume {:nonnull} FdoData_74 != 0;
    assume FdoData_74 > 0;
    goto L22;

  anon20_Then:
    assume {:partition} i_7 == 1;
    assume {:nonnull} FdoData_74 != 0;
    assume FdoData_74 > 0;
    havoc irp_7;
    assume {:nonnull} FdoData_74 != 0;
    assume FdoData_74 > 0;
    goto L22;

  anon16_Then:
    assume {:partition} i_7 == 0;
    assume {:nonnull} FdoData_74 != 0;
    assume FdoData_74 > 0;
    havoc irp_7;
    assume {:nonnull} FdoData_74 != 0;
    assume FdoData_74 > 0;
    goto L22;

  anon15_Then:
    assume {:partition} i_7 >= 3;
    call {:si_unique_call 984} sdv_KeReleaseSpinLock(0, oldIrql_8);
    goto LM2;
}



procedure {:origName "PciDrvIoDecrement"} PciDrvIoDecrement(actual_FdoData_75: int) returns (Tmp_740: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvIoDecrement"} PciDrvIoDecrement(actual_FdoData_75: int) returns (Tmp_740: int)
{
  var {:pointer} Tmp_741: int;
  var {:pointer} Tmp_742: int;
  var {:scalar} result_1: int;
  var {:pointer} FdoData_75: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_37: int;

  anon0:
    FdoData_75 := actual_FdoData_75;
    call {:si_unique_call 985} Tmp_742 := __HAVOC_malloc(88);
    call {:si_unique_call 986} Tmp_741 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_75 != 0;
    assume FdoData_75 > 0;
    assume {:nonnull} Tmp_741 != 0;
    assume Tmp_741 > 0;
    havoc vslice_dummy_var_37;
    Mem_T.INT4[Tmp_741] := vslice_dummy_var_37;
    call {:si_unique_call 987} result_1 := sdv_InterlockedDecrement(Tmp_741);
    assume {:nonnull} FdoData_75 != 0;
    assume FdoData_75 > 0;
    assume {:nonnull} Tmp_741 != 0;
    assume Tmp_741 > 0;
    Tmp_742 := strConst__li2bpl227;
    call {:si_unique_call 988} DebugPrint(6, 1024, Tmp_742);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} result_1 == 1;
    assume {:nonnull} FdoData_75 != 0;
    assume FdoData_75 > 0;
    call {:si_unique_call 989} vslice_dummy_var_122 := KeSetEvent(StopEvent__FDO_DATA(FdoData_75), 0, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  L12:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} result_1 != 0;
    goto L19;

  L19:
    Tmp_740 := result_1;
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} result_1 == 0;
    assume {:nonnull} FdoData_75 != 0;
    assume FdoData_75 > 0;
    call {:si_unique_call 990} vslice_dummy_var_123 := KeSetEvent(RemoveEvent__FDO_DATA(FdoData_75), 0, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} result_1 != 1;
    goto L12;
}



procedure {:origName "PciDrvClose"} PciDrvClose(actual_DeviceObject_33: int, actual_Irp_25: int) returns (Tmp_743: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvClose"} PciDrvClose(actual_DeviceObject_33: int, actual_Irp_25: int) returns (Tmp_743: int)
{
  var {:pointer} fdoData_27: int;
  var {:pointer} Tmp_744: int;
  var {:scalar} status_62: int;
  var {:pointer} DeviceObject_33: int;
  var {:pointer} Irp_25: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;

  anon0:
    DeviceObject_33 := actual_DeviceObject_33;
    Irp_25 := actual_Irp_25;
    call {:si_unique_call 991} Tmp_744 := __HAVOC_malloc(32);
    call {:si_unique_call 992} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_33 != 0;
    assume DeviceObject_33 > 0;
    havoc fdoData_27;
    Tmp_744 := strConst__li2bpl228;
    call {:si_unique_call 993} DebugPrint(5, 16, Tmp_744);
    call {:si_unique_call 994} vslice_dummy_var_124 := PciDrvIoIncrement(fdoData_27);
    status_62 := 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    call {:si_unique_call 995} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 996} vslice_dummy_var_125 := PciDrvIoDecrement(fdoData_27);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_743 := status_62;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvAddDevice"} PciDrvAddDevice(actual_DriverObject: int, actual_PhysicalDeviceObject: int) returns (Tmp_748: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvAddDevice"} PciDrvAddDevice(actual_DriverObject: int, actual_PhysicalDeviceObject: int) returns (Tmp_748: int)
{
  var {:pointer} SD2_1: int;
  var {:pointer} Tmp_749: int;
  var {:pointer} Tmp_750: int;
  var {:pointer} deviceObject: int;
  var {:pointer} Tmp_751: int;
  var {:pointer} Tmp_752: int;
  var {:scalar} powerState_3: int;
  var {:pointer} Tmp_753: int;
  var {:pointer} fdoData_29: int;
  var {:scalar} sdv_2: int;
  var {:pointer} Tmp_755: int;
  var {:scalar} status_64: int;
  var {:pointer} PhysicalDeviceObject: int;
  var boogieTmp: int;
  var vslice_dummy_var_38: int;

  anon0:
    call {:si_unique_call 997} deviceObject := __HAVOC_malloc(4);
    call {:si_unique_call 998} powerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 999} sdv_2 := __HAVOC_malloc(8);
    PhysicalDeviceObject := actual_PhysicalDeviceObject;
    call {:si_unique_call 1000} Tmp_749 := __HAVOC_malloc(88);
    call {:si_unique_call 1001} Tmp_750 := __HAVOC_malloc(200);
    call {:si_unique_call 1002} Tmp_751 := __HAVOC_malloc(168);
    call {:si_unique_call 1003} Tmp_753 := __HAVOC_malloc(148);
    status_64 := 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    call {:si_unique_call 1004} sdv_do_paged_code_check();
    Tmp_749 := strConst__li2bpl229;
    call {:si_unique_call 1005} DebugPrint(5, 2, Tmp_749);
    call {:si_unique_call 1006} status_64 := IoCreateDevice(0, 1360, 0, 34, 256, 0, deviceObject);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_64 >= 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    havoc fdoData_29;
    Tmp_753 := strConst__li2bpl232;
    call {:si_unique_call 1007} DebugPrint(4, 2, Tmp_753);
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1008} InitializeListHead(NewRequestsQueue__FDO_DATA(fdoData_29));
    call {:si_unique_call 1009} Tmp_752 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    havoc vslice_dummy_var_38;
    Mem_T.INT4[Tmp_752] := vslice_dummy_var_38;
    call {:si_unique_call 1010} sdv_KeInitializeSpinLock(Tmp_752);
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1011} KeInitializeEvent(RemoveEvent__FDO_DATA(fdoData_29), 1, 0);
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1012} KeInitializeEvent(StopEvent__FDO_DATA(fdoData_29), 1, 0);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_3)] := 4;
    call {:si_unique_call 1013} SD2_1 := PoSetPowerState(0, 1, powerState_3);
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv_2)] := Mem_T.INT4[DeviceState__POWER_STATE(SD2_1)];
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1014} KeInitializeEvent(WakeDisableEnableLock__FDO_DATA(fdoData_29), 1, 1);
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1015} KeInitializeEvent(WakeCompletedEvent__FDO_DATA(fdoData_29), 0, 1);
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1016} KeInitializeEvent(PowerSaveDisableEnableLock__FDO_DATA(fdoData_29), 1, 1);
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1017} boogieTmp := IoAttachDeviceToDeviceStack(0, PhysicalDeviceObject);
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    havoc Tmp_755;
    assume {:nonnull} Tmp_755 != 0;
    assume Tmp_755 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto L75;

  L75:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L79;

  L79:
    call {:si_unique_call 1018} status_64 := NICInitializeDeviceExtension(fdoData_29);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_64 >= 0;
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1019} status_64 := IoRegisterDeviceInterface(0, 0, 0, InterfaceName__FDO_DATA(fdoData_29));
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_64 >= 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    Tmp_748 := status_64;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} 0 > status_64;
    Tmp_750 := strConst__li2bpl231;
    call {:si_unique_call 1020} DebugPrint(2, 2, Tmp_750);
    call {:si_unique_call 1021} IoDetachDevice(0);
    call {:si_unique_call 1022} IoDeleteDevice(0);
    Tmp_748 := status_64;
    goto L1;

  anon18_Then:
    assume {:partition} 0 > status_64;
    Tmp_751 := strConst__li2bpl230;
    call {:si_unique_call 1023} DebugPrint(2, 2, Tmp_751);
    call {:si_unique_call 1024} IoDetachDevice(0);
    call {:si_unique_call 1025} IoDeleteDevice(0);
    Tmp_748 := status_64;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} fdoData_29 != 0;
    assume fdoData_29 > 0;
    call {:si_unique_call 1026} boogieTmp := sdv_MmLockPagableCodeSection(li2bplFunctionConstant6699);
    goto L79;

  anon20_Then:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto L75;

  anon16_Then:
    call {:si_unique_call 1027} IoDeleteDevice(0);
    Tmp_748 := -1073741810;
    goto L1;

  anon15_Then:
    assume {:partition} 0 > status_64;
    Tmp_748 := status_64;
    goto L1;
}



procedure {:origName "PciDrvWrite"} PciDrvWrite(actual_FdoData_76: int, actual_Irp_26: int) returns (Tmp_756: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWrite"} PciDrvWrite(actual_FdoData_76: int, actual_Irp_26: int) returns (Tmp_756: int)
{
  var {:pointer} FdoData_76: int;
  var {:pointer} Irp_26: int;

  anon0:
    FdoData_76 := actual_FdoData_76;
    Irp_26 := actual_Irp_26;
    call {:si_unique_call 1028} Tmp_756 := NICWrite(FdoData_76, Irp_26);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvRead"} PciDrvRead(actual_FdoData_77: int, actual_Irp_27: int) returns (Tmp_758: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvRead"} PciDrvRead(actual_FdoData_77: int, actual_Irp_27: int) returns (Tmp_758: int)
{
  var {:pointer} Tmp_759: int;
  var {:scalar} sdv_363: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} Tmp_760: int;
  var {:scalar} status_65: int;
  var {:pointer} Tmp_761: int;
  var {:pointer} FdoData_77: int;
  var {:pointer} Irp_27: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;

  anon0:
    FdoData_77 := actual_FdoData_77;
    Irp_27 := actual_Irp_27;
    call {:si_unique_call 1029} Tmp_759 := __HAVOC_malloc(76);
    call {:si_unique_call 1030} Tmp_761 := __HAVOC_malloc(80);
    Tmp_759 := strConst__li2bpl233;
    call {:si_unique_call 1031} DebugPrint(5, 128, Tmp_759);
    call {:si_unique_call 1032} Tmp_760 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_760 != 0;
    assume Tmp_760 > 0;
    Mem_T.INT4[Tmp_760] := oldIrql_9;
    call {:si_unique_call 1033} sdv_KeAcquireSpinLock(0, Tmp_760);
    assume {:nonnull} Tmp_760 != 0;
    assume Tmp_760 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_760];
    call {:si_unique_call 1034} vslice_dummy_var_126 := sdv_IoSetCancelRoutine(Irp_27, li2bplFunctionConstant7194);
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 1035} sdv_363 := sdv_IoSetCancelRoutine(Irp_27, 0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_363 != 0;
    status_65 := -1073741536;
    goto L23;

  L23:
    call {:si_unique_call 1036} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_65 != 259;
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_27))] := 0;
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    call {:si_unique_call 1037} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1038} vslice_dummy_var_127 := PciDrvIoDecrement(FdoData_77);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  L27:
    Tmp_761 := strConst__li2bpl234;
    call {:si_unique_call 1039} DebugPrint(5, 128, Tmp_761);
    Tmp_758 := status_65;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} status_65 == 259;
    goto L27;

  anon10_Then:
    assume {:partition} sdv_363 == 0;
    goto L15;

  L15:
    call {:si_unique_call 1040} sdv_IoMarkIrpPending(0);
    assume {:nonnull} FdoData_77 != 0;
    assume FdoData_77 > 0;
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    call {:si_unique_call 1041} vslice_dummy_var_128 := sdv_InsertTailList(RecvQueueHead__FDO_DATA(FdoData_77), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_27))));
    status_65 := 259;
    goto L23;

  anon9_Then:
    goto L15;
}



procedure {:origName "PciDrvForwardAndForget"} PciDrvForwardAndForget(actual_FdoData_78: int, actual_Irp_28: int) returns (Tmp_762: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvForwardAndForget"} PciDrvForwardAndForget(actual_FdoData_78: int, actual_Irp_28: int) returns (Tmp_762: int)
{
  var {:scalar} status_66: int;
  var {:pointer} FdoData_78: int;
  var {:pointer} Irp_28: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_39: int;

  anon0:
    FdoData_78 := actual_FdoData_78;
    Irp_28 := actual_Irp_28;
    call {:si_unique_call 1042} sdv_IoSkipCurrentIrpStackLocation(Irp_28);
    assume {:nonnull} FdoData_78 != 0;
    assume FdoData_78 > 0;
    havoc vslice_dummy_var_39;
    call {:si_unique_call 1043} status_66 := sdv_IoCallDriver#1(vslice_dummy_var_39, Irp_28);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1044} vslice_dummy_var_129 := PciDrvIoDecrement(FdoData_78);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_762 := status_66;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvQueueIoctlIrp"} PciDrvQueueIoctlIrp(actual_FdoData_79: int, actual_Irp_29: int) returns (Tmp_764: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_764 == -1073741536 || Tmp_764 == 259 || Tmp_764 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueueIoctlIrp"} PciDrvQueueIoctlIrp(actual_FdoData_79: int, actual_Irp_29: int) returns (Tmp_764: int)
{
  var {:pointer} Tmp_765: int;
  var {:pointer} Tmp_767: int;
  var {:scalar} status_67: int;
  var {:pointer} pIrpSp: int;
  var {:pointer} FdoData_79: int;
  var {:pointer} Irp_29: int;
  var vslice_dummy_var_130: int;

  anon0:
    FdoData_79 := actual_FdoData_79;
    Irp_29 := actual_Irp_29;
    call {:si_unique_call 1045} Tmp_765 := __HAVOC_malloc(84);
    call {:si_unique_call 1046} Tmp_767 := __HAVOC_malloc(84);
    status_67 := 259;
    pIrpSp := 0;
    Tmp_765 := strConst__li2bpl236;
    call {:si_unique_call 1047} DebugPrint(5, 32, Tmp_765);
    call {:si_unique_call 1048} pIrpSp := sdv_IoGetCurrentIrpStackLocation(Irp_29);
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_764 := -1073741536;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L24;

  L24:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_67 == 259;
    call {:si_unique_call 1049} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1050} vslice_dummy_var_130 := sdv_IoSetCancelRoutine(Irp_29, li2bplFunctionConstant7201);
    goto L25;

  L25:
    Tmp_767 := strConst__li2bpl235;
    call {:si_unique_call 1051} DebugPrint(5, 32, Tmp_767);
    Tmp_764 := status_67;
    goto L1;

  anon22_Then:
    assume {:partition} status_67 != 259;
    goto L25;

  anon23_Then:
    assume {:nonnull} FdoData_79 != 0;
    assume FdoData_79 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    status_67 := -1073741808;
    goto L24;

  anon21_Then:
    assume {:nonnull} FdoData_79 != 0;
    assume FdoData_79 > 0;
    goto L24;

  anon24_Then:
    assume {:nonnull} FdoData_79 != 0;
    assume FdoData_79 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    status_67 := -1073741808;
    goto L24;

  anon20_Then:
    assume {:nonnull} FdoData_79 != 0;
    assume FdoData_79 > 0;
    goto L24;

  anon18_Then:
    assume {:nonnull} FdoData_79 != 0;
    assume FdoData_79 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    status_67 := -1073741808;
    goto L24;

  anon19_Then:
    assume {:nonnull} FdoData_79 != 0;
    assume FdoData_79 > 0;
    goto L24;
}



procedure {:origName "DriverEntry"} DriverEntry(actual_DriverObject_1: int, actual_RegistryPath: int) returns (Tmp_774: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_774 == 0 || Tmp_774 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DriverEntry"} DriverEntry(actual_DriverObject_1: int, actual_RegistryPath: int) returns (Tmp_774: int)
{
  var {:pointer} Tmp_775: int;
  var {:pointer} Tmp_776: int;
  var {:pointer} Tmp_777: int;
  var {:pointer} Tmp_778: int;
  var {:pointer} Tmp_779: int;
  var {:pointer} Tmp_780: int;
  var {:pointer} sdv_382: int;
  var {:pointer} Tmp_782: int;
  var {:pointer} Tmp_783: int;
  var {:pointer} Tmp_784: int;
  var {:scalar} Tmp_785: int;
  var {:pointer} Tmp_786: int;
  var {:pointer} Tmp_787: int;
  var {:scalar} status_69: int;
  var {:pointer} Tmp_788: int;
  var {:pointer} DriverObject_1: int;
  var {:pointer} RegistryPath: int;

  anon0:
    DriverObject_1 := actual_DriverObject_1;
    RegistryPath := actual_RegistryPath;
    call {:si_unique_call 1052} Tmp_775 := __HAVOC_malloc(112);
    call {:si_unique_call 1053} Tmp_776 := __HAVOC_malloc(112);
    call {:si_unique_call 1054} Tmp_778 := __HAVOC_malloc(112);
    call {:si_unique_call 1055} Tmp_779 := __HAVOC_malloc(112);
    call {:si_unique_call 1056} Tmp_780 := __HAVOC_malloc(112);
    call {:si_unique_call 1057} Tmp_782 := __HAVOC_malloc(288);
    call {:si_unique_call 1058} Tmp_783 := __HAVOC_malloc(168);
    call {:si_unique_call 1059} Tmp_784 := __HAVOC_malloc(112);
    call {:si_unique_call 1060} Tmp_786 := __HAVOC_malloc(112);
    call {:si_unique_call 1061} Tmp_787 := __HAVOC_malloc(112);
    call {:si_unique_call 1062} Tmp_788 := __HAVOC_malloc(112);
    status_69 := 0;
    Tmp_782 := strConst__li2bpl240;
    call {:si_unique_call 1063} DebugPrint(4, 1, Tmp_782);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_785;
    call {:si_unique_call 1064} sdv_382 := ExAllocatePoolWithTag(1, Tmp_785, -1001831600);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_784;
    assume {:nonnull} Tmp_784 != 0;
    assume Tmp_784 > 0;
    Mem_T.INT4[Tmp_784 + 27 * 4] := li2bplFunctionConstant7182;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_779;
    assume {:nonnull} Tmp_779 != 0;
    assume Tmp_779 > 0;
    Mem_T.INT4[Tmp_779 + 22 * 4] := li2bplFunctionConstant6699;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_776;
    assume {:nonnull} Tmp_776 != 0;
    assume Tmp_776 > 0;
    Mem_T.INT4[Tmp_776] := li2bplFunctionConstant7183;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_778;
    assume {:nonnull} Tmp_778 != 0;
    assume Tmp_778 > 0;
    Mem_T.INT4[Tmp_778 + 2 * 4] := li2bplFunctionConstant7184;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_787;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    Mem_T.INT4[Tmp_787 + 18 * 4] := li2bplFunctionConstant7185;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_786;
    assume {:nonnull} Tmp_786 != 0;
    assume Tmp_786 > 0;
    Mem_T.INT4[Tmp_786 + 14 * 4] := li2bplFunctionConstant7186;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_788;
    assume {:nonnull} Tmp_788 != 0;
    assume Tmp_788 > 0;
    Mem_T.INT4[Tmp_788 + 3 * 4] := li2bplFunctionConstant7186;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_775;
    assume {:nonnull} Tmp_775 != 0;
    assume Tmp_775 > 0;
    Mem_T.INT4[Tmp_775 + 4 * 4] := li2bplFunctionConstant7186;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_780;
    assume {:nonnull} Tmp_780 != 0;
    assume Tmp_780 > 0;
    Mem_T.INT4[Tmp_780 + 23 * 4] := li2bplFunctionConstant6237;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    havoc Tmp_777;
    assume {:nonnull} Tmp_777 != 0;
    assume Tmp_777 > 0;
    assume {:nonnull} DriverObject_1 != 0;
    assume DriverObject_1 > 0;
    Tmp_774 := status_69;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_783 := strConst__li2bpl239;
    call {:si_unique_call 1065} DebugPrint(2, 1, Tmp_783);
    Tmp_774 := -1073741670;
    goto L1;
}



procedure {:origName "DebugPrint"} DebugPrint(actual_DebugPrintLevel: int, actual_DebugPrintFlag: int, actual_DebugMessage: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DebugPrint"} DebugPrint(actual_DebugPrintLevel: int, actual_DebugPrintFlag: int, actual_DebugMessage: int)
{
  var vslice_dummy_var_131: int;

  anon0:
    call {:si_unique_call 1066} vslice_dummy_var_131 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PciDrvReleaseAndWait"} PciDrvReleaseAndWait(actual_FdoData_82: int, actual_OnHoldCount: int, actual_Reason: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvReleaseAndWait"} PciDrvReleaseAndWait(actual_FdoData_82: int, actual_OnHoldCount: int, actual_Reason: int)
{
  var {:scalar} chargeRemining: int;
  var {:pointer} Tmp_794: int;
  var {:scalar} Tmp_796: int;
  var {:scalar} Tmp_797: int;
  var {:pointer} Tmp_798: int;
  var {:scalar} Tmp_799: int;
  var {:pointer} FdoData_82: int;
  var {:scalar} OnHoldCount: int;
  var {:scalar} Reason: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;

  anon0:
    call {:si_unique_call 1067} vslice_dummy_var_132 := __HAVOC_malloc(4);
    FdoData_82 := actual_FdoData_82;
    OnHoldCount := actual_OnHoldCount;
    Reason := actual_Reason;
    call {:si_unique_call 1068} Tmp_794 := __HAVOC_malloc(208);
    call {:si_unique_call 1069} Tmp_798 := __HAVOC_malloc(216);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Reason == 1;
    chargeRemining := OnHoldCount + 1;
    goto L8;

  L8:
    call {:si_unique_call 1070} chargeRemining, Tmp_796, vslice_dummy_var_133 := PciDrvReleaseAndWait_loop_L8(chargeRemining, Tmp_796, FdoData_82, vslice_dummy_var_133);
    goto L8_last;

  L8_last:
    Tmp_796 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_796 != 0;
    call {:si_unique_call 1071} vslice_dummy_var_133 := PciDrvIoDecrement(FdoData_82);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} Tmp_796 == 0;
    Tmp_794 := strConst__li2bpl241;
    call {:si_unique_call 1072} DebugPrint(4, 2, Tmp_794);
    call {:si_unique_call 1073} vslice_dummy_var_134 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    chargeRemining := OnHoldCount + 1;
    goto L20;

  L20:
    call {:si_unique_call 1074} chargeRemining, Tmp_799, vslice_dummy_var_135 := PciDrvReleaseAndWait_loop_L20(chargeRemining, Tmp_799, FdoData_82, vslice_dummy_var_135);
    goto L20_last;

  L20_last:
    Tmp_799 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Tmp_799 != 0;
    call {:si_unique_call 1075} vslice_dummy_var_135 := PciDrvIoIncrement(FdoData_82);
    goto anon19_Else_dummy;

  anon19_Else_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} Tmp_799 == 0;
    goto L1;

  L1:
    goto LM2;

  anon15_Then:
    assume {:partition} Reason != 1;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Reason == 0;
    chargeRemining := OnHoldCount + 2;
    goto L26;

  L26:
    call {:si_unique_call 1076} chargeRemining, Tmp_797, vslice_dummy_var_136 := PciDrvReleaseAndWait_loop_L26(chargeRemining, Tmp_797, FdoData_82, vslice_dummy_var_136);
    goto L26_last;

  L26_last:
    Tmp_797 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Tmp_797 != 0;
    call {:si_unique_call 1077} vslice_dummy_var_136 := PciDrvIoDecrement(FdoData_82);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} Tmp_797 == 0;
    Tmp_798 := strConst__li2bpl242;
    call {:si_unique_call 1078} DebugPrint(4, 2, Tmp_798);
    call {:si_unique_call 1079} vslice_dummy_var_137 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L1;

  anon16_Then:
    assume {:partition} Reason != 0;
    goto L1;
}



procedure {:origName "PciDrvWithdrawIoctlIrps"} PciDrvWithdrawIoctlIrps(actual_FdoData_83: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWithdrawIoctlIrps"} PciDrvWithdrawIoctlIrps(actual_FdoData_83: int)
{
  var {:scalar} i_8: int;
  var {:scalar} oldIrql_11: int;
  var {:pointer} irp_9: int;
  var {:pointer} Tmp_801: int;
  var {:pointer} FdoData_83: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;

  anon0:
    call {:si_unique_call 1080} vslice_dummy_var_138 := __HAVOC_malloc(4);
    FdoData_83 := actual_FdoData_83;
    call {:si_unique_call 1081} Tmp_801 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    Mem_T.INT4[Tmp_801] := oldIrql_11;
    call {:si_unique_call 1082} sdv_KeAcquireSpinLock(0, Tmp_801);
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_801];
    i_8 := 0;
    goto L10;

  L10:
    call {:si_unique_call 1083} i_8, oldIrql_11, irp_9, Tmp_801, vslice_dummy_var_139 := PciDrvWithdrawIoctlIrps_loop_L10(i_8, oldIrql_11, irp_9, Tmp_801, FdoData_83, vslice_dummy_var_139);
    goto L10_last;

  L10_last:
    assume {:CounterLoop 3} {:Counter "i_8"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 3 > i_8;
    irp_9 := 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} i_8 != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} i_8 != 1;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} i_8 != 2;
    goto L22;

  L22:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} irp_9 != 0;
    call {:si_unique_call 1084} sdv_KeReleaseSpinLock(0, oldIrql_11);
    call {:si_unique_call 1085} vslice_dummy_var_139 := PciDrvQueueRequest(FdoData_83, irp_9);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1086} Tmp_801 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    Mem_T.INT4[Tmp_801] := oldIrql_11;
    call {:si_unique_call 1087} sdv_KeAcquireSpinLock(0, Tmp_801);
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_801];
    goto L23;

  L23:
    i_8 := i_8 + 1;
    goto L23_dummy;

  L23_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} irp_9 == 0;
    goto L23;

  anon15_Then:
    assume {:partition} i_8 == 2;
    assume {:nonnull} FdoData_83 != 0;
    assume FdoData_83 > 0;
    havoc irp_9;
    assume {:nonnull} FdoData_83 != 0;
    assume FdoData_83 > 0;
    goto L22;

  anon16_Then:
    assume {:partition} i_8 == 1;
    assume {:nonnull} FdoData_83 != 0;
    assume FdoData_83 > 0;
    havoc irp_9;
    assume {:nonnull} FdoData_83 != 0;
    assume FdoData_83 > 0;
    goto L22;

  anon17_Then:
    assume {:partition} i_8 == 0;
    assume {:nonnull} FdoData_83 != 0;
    assume FdoData_83 > 0;
    havoc irp_9;
    assume {:nonnull} FdoData_83 != 0;
    assume FdoData_83 > 0;
    goto L22;

  anon13_Then:
    assume {:partition} i_8 >= 3;
    call {:si_unique_call 1088} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto LM2;
}



procedure {:origName "PciDrvQueueRequest"} PciDrvQueueRequest(actual_FdoData_84: int, actual_Irp_30: int) returns (Tmp_802: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueueRequest"} PciDrvQueueRequest(actual_FdoData_84: int, actual_Irp_30: int) returns (Tmp_802: int)
{
  var {:pointer} Tmp_803: int;
  var {:scalar} ret: int;
  var {:scalar} oldIrql_12: int;
  var {:pointer} Tmp_804: int;
  var {:pointer} FdoData_84: int;
  var {:pointer} Irp_30: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;

  anon0:
    FdoData_84 := actual_FdoData_84;
    Irp_30 := actual_Irp_30;
    call {:si_unique_call 1089} Tmp_804 := __HAVOC_malloc(72);
    Tmp_804 := strConst__li2bpl243;
    call {:si_unique_call 1090} DebugPrint(5, 2048, Tmp_804);
    call {:si_unique_call 1091} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1092} Tmp_803 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_803 != 0;
    assume Tmp_803 > 0;
    Mem_T.INT4[Tmp_803] := oldIrql_12;
    call {:si_unique_call 1093} sdv_KeAcquireSpinLock(0, Tmp_803);
    assume {:nonnull} Tmp_803 != 0;
    assume Tmp_803 > 0;
    oldIrql_12 := Mem_T.INT4[Tmp_803];
    call {:si_unique_call 1094} vslice_dummy_var_140 := sdv_IoSetCancelRoutine(Irp_30, li2bplFunctionConstant7198);
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 1095} ret := sdv_IoSetCancelRoutine(Irp_30, 0);
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    call {:si_unique_call 1096} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_30))));
    call {:si_unique_call 1097} sdv_KeReleaseSpinLock(0, oldIrql_12);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} ret != 0;
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_30))] := 0;
    call {:si_unique_call 1098} sdv_IoCompleteRequest(0, 0);
    goto L33;

  L33:
    call {:si_unique_call 1099} vslice_dummy_var_142 := PciDrvIoDecrement(FdoData_84);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_802 := 259;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} ret == 0;
    goto L33;

  anon7_Then:
    assume {:nonnull} FdoData_84 != 0;
    assume FdoData_84 > 0;
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    call {:si_unique_call 1100} vslice_dummy_var_141 := sdv_InsertTailList(NewRequestsQueue__FDO_DATA(FdoData_84), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_30))));
    call {:si_unique_call 1101} sdv_KeReleaseSpinLock(0, oldIrql_12);
    goto L33;
}



procedure {:origName "PciDrvCreate"} PciDrvCreate(actual_DeviceObject_36: int, actual_Irp_31: int) returns (Tmp_805: int);
  modifies alloc, Mem_T.INT4, yogi_error, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCreate"} PciDrvCreate(actual_DeviceObject_36: int, actual_Irp_31: int) returns (Tmp_805: int)
{
  var {:pointer} Tmp_806: int;
  var {:pointer} fdoData_30: int;
  var {:scalar} status_72: int;
  var {:pointer} DeviceObject_36: int;
  var {:pointer} Irp_31: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;

  anon0:
    DeviceObject_36 := actual_DeviceObject_36;
    Irp_31 := actual_Irp_31;
    call {:si_unique_call 1102} Tmp_806 := __HAVOC_malloc(36);
    status_72 := 0;
    call {:si_unique_call 1103} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_36 != 0;
    assume DeviceObject_36 > 0;
    havoc fdoData_30;
    Tmp_806 := strConst__li2bpl244;
    call {:si_unique_call 1104} DebugPrint(5, 16, Tmp_806);
    call {:si_unique_call 1105} vslice_dummy_var_143 := PciDrvIoIncrement(fdoData_30);
    assume {:nonnull} fdoData_30 != 0;
    assume fdoData_30 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} Irp_31 != 0;
    assume Irp_31 > 0;
    call {:si_unique_call 1106} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1107} vslice_dummy_var_144 := PciDrvIoDecrement(fdoData_30);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} yogi_error != 1;
    Tmp_805 := -1073741810;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    call {:si_unique_call 1108} status_72 := PciDrvPowerUpDevice#1(fdoData_30, 1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_31 != 0;
    assume Irp_31 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_31))] := 0;
    assume {:nonnull} Irp_31 != 0;
    assume Irp_31 > 0;
    call {:si_unique_call 1109} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1110} vslice_dummy_var_145 := PciDrvIoDecrement(fdoData_30);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    Tmp_805 := status_72;
    goto L1;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvReadRegistryValue"} PciDrvReadRegistryValue(actual_FdoData_85: int, actual_Name_1: int, actual_Value_1: int) returns (Tmp_808: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_808 == 1 || Tmp_808 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvReadRegistryValue"} PciDrvReadRegistryValue(actual_FdoData_85: int, actual_Name_1: int, actual_Value_1: int) returns (Tmp_808: int)
{
  var {:scalar} valueName: int;
  var {:pointer} Tmp_809: int;
  var {:pointer} fullInfo: int;
  var {:scalar} retValue_1: int;
  var {:scalar} length_2: int;
  var {:pointer} Tmp_810: int;
  var {:pointer} sdv_399: int;
  var {:scalar} status_73: int;
  var {:pointer} Tmp_812: int;
  var {:pointer} Name_1: int;
  var {:pointer} Value_1: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_40: int;

  anon0:
    call {:si_unique_call 1111} valueName := __HAVOC_malloc(12);
    Name_1 := actual_Name_1;
    Value_1 := actual_Value_1;
    call {:si_unique_call 1112} Tmp_809 := __HAVOC_malloc(144);
    call {:si_unique_call 1113} Tmp_810 := __HAVOC_malloc(116);
    retValue_1 := 0;
    call {:si_unique_call 1114} sdv_do_paged_code_check();
    Tmp_810 := strConst__li2bpl245;
    call {:si_unique_call 1115} DebugPrint(5, 1, Tmp_810);
    assume {:nonnull} Value_1 != 0;
    assume Value_1 > 0;
    Mem_T.INT4[Value_1] := 0;
    call {:si_unique_call 1116} status_73 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_73 >= 0;
    call {:si_unique_call 1117} RtlInitUnicodeString(valueName, Name_1);
    assume {:nonnull} valueName != 0;
    assume valueName > 0;
    havoc length_2;
    call {:si_unique_call 1118} sdv_399 := ExAllocatePoolWithTag(1, length_2, -1001831600);
    fullInfo := sdv_399;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 1119} Tmp_812 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_812 != 0;
    assume Tmp_812 > 0;
    Mem_T.INT4[Tmp_812] := length_2;
    call {:si_unique_call 1120} status_73 := ZwQueryValueKey(0, 0, 1, 0, length_2, Tmp_812);
    assume {:nonnull} Tmp_812 != 0;
    assume Tmp_812 > 0;
    length_2 := Mem_T.INT4[Tmp_812];
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_73 >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_40;
    call {:si_unique_call 1121} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_40);
    retValue_1 := 1;
    goto L43;

  L43:
    call {:si_unique_call 1122} sdv_ExFreePool(0);
    goto L35;

  L35:
    call {:si_unique_call 1123} vslice_dummy_var_146 := ZwClose(0);
    goto L23;

  L23:
    Tmp_809 := strConst__li2bpl246;
    call {:si_unique_call 1124} DebugPrint(5, 1, Tmp_809);
    Tmp_808 := retValue_1;
    return;

  anon8_Then:
    assume {:partition} 0 > status_73;
    goto L43;

  anon9_Then:
    assume {:partition} fullInfo == 0;
    goto L35;

  anon7_Then:
    assume {:partition} 0 > status_73;
    goto L23;
}



procedure {:origName "PciDrvWithdrawIrps"} PciDrvWithdrawIrps(actual_FdoData_86: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWithdrawIrps"} PciDrvWithdrawIrps(actual_FdoData_86: int)
{
  var {:pointer} FdoData_86: int;
  var vslice_dummy_var_147: int;

  anon0:
    call {:si_unique_call 1125} vslice_dummy_var_147 := __HAVOC_malloc(4);
    FdoData_86 := actual_FdoData_86;
    call {:si_unique_call 1126} PciDrvWithdrawIoctlIrps(FdoData_86);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1127} PciDrvWithdrawReadIrps(FdoData_86);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvReturnResources"} PciDrvReturnResources(actual_DeviceObject_37: int) returns (Tmp_815: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvReturnResources"} PciDrvReturnResources(actual_DeviceObject_37: int) returns (Tmp_815: int)
{
  var {:pointer} SD1_1: int;
  var {:scalar} powerState_4: int;
  var {:pointer} Tmp_816: int;
  var {:pointer} fdoData_31: int;
  var {:scalar} sdv_1: int;
  var {:pointer} Tmp_817: int;
  var {:scalar} status_74: int;
  var {:pointer} DeviceObject_37: int;

  anon0:
    call {:si_unique_call 1128} powerState_4 := __HAVOC_malloc(8);
    call {:si_unique_call 1129} sdv_1 := __HAVOC_malloc(8);
    DeviceObject_37 := actual_DeviceObject_37;
    call {:si_unique_call 1130} Tmp_816 := __HAVOC_malloc(104);
    call {:si_unique_call 1131} Tmp_817 := __HAVOC_malloc(104);
    assume {:nonnull} DeviceObject_37 != 0;
    assume DeviceObject_37 > 0;
    havoc fdoData_31;
    Tmp_816 := strConst__li2bpl247;
    call {:si_unique_call 1132} DebugPrint(4, 2, Tmp_816);
    assume {:nonnull} fdoData_31 != 0;
    assume fdoData_31 > 0;
    assume {:nonnull} fdoData_31 != 0;
    assume fdoData_31 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} fdoData_31 != 0;
    assume fdoData_31 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} powerState_4 != 0;
    assume powerState_4 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_4)] := 4;
    call {:si_unique_call 1133} SD1_1 := PoSetPowerState(0, 1, powerState_4);
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv_1)] := Mem_T.INT4[DeviceState__POWER_STATE(SD1_1)];
    goto L17;

  L17:
    call {:si_unique_call 1134} NICShutdown(fdoData_31);
    goto L13;

  L13:
    call {:si_unique_call 1135} status_74 := NICFreeDeviceResources(fdoData_31);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} fdoData_31 != 0;
    assume fdoData_31 > 0;
    Tmp_817 := strConst__li2bpl248;
    call {:si_unique_call 1136} DebugPrint(4, 2, Tmp_817);
    Tmp_815 := status_74;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    goto L17;

  anon8_Then:
    goto L13;
}



procedure {:origName "PnPMinorFunctionString"} PnPMinorFunctionString(actual_MinorFunction_6: int) returns (Tmp_819: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PnPMinorFunctionString"} PnPMinorFunctionString(actual_MinorFunction_6: int) returns (Tmp_819: int)
{
  var {:scalar} MinorFunction_6: int;

  anon0:
    MinorFunction_6 := actual_MinorFunction_6;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} MinorFunction_6 != 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} MinorFunction_6 != 1;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} MinorFunction_6 != 2;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} MinorFunction_6 != 3;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} MinorFunction_6 != 4;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} MinorFunction_6 != 5;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} MinorFunction_6 != 6;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} MinorFunction_6 != 7;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} MinorFunction_6 != 8;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} MinorFunction_6 != 9;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} MinorFunction_6 != 10;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} MinorFunction_6 != 11;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} MinorFunction_6 != 12;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} MinorFunction_6 != 13;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} MinorFunction_6 != 15;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} MinorFunction_6 != 16;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} MinorFunction_6 != 17;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} MinorFunction_6 != 18;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} MinorFunction_6 != 19;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} MinorFunction_6 != 20;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} MinorFunction_6 != 21;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} MinorFunction_6 != 22;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} MinorFunction_6 != 23;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} MinorFunction_6 == 24;
    Tmp_819 := strConst__li2bpl273;
    goto L1;

  L1:
    return;

  anon50_Then:
    assume {:partition} MinorFunction_6 != 24;
    Tmp_819 := strConst__li2bpl249;
    goto L1;

  anon51_Then:
    assume {:partition} MinorFunction_6 == 23;
    Tmp_819 := strConst__li2bpl272;
    goto L1;

  anon52_Then:
    assume {:partition} MinorFunction_6 == 22;
    Tmp_819 := strConst__li2bpl271;
    goto L1;

  anon53_Then:
    assume {:partition} MinorFunction_6 == 21;
    Tmp_819 := strConst__li2bpl270;
    goto L1;

  anon54_Then:
    assume {:partition} MinorFunction_6 == 20;
    Tmp_819 := strConst__li2bpl269;
    goto L1;

  anon55_Then:
    assume {:partition} MinorFunction_6 == 19;
    Tmp_819 := strConst__li2bpl268;
    goto L1;

  anon56_Then:
    assume {:partition} MinorFunction_6 == 18;
    Tmp_819 := strConst__li2bpl267;
    goto L1;

  anon57_Then:
    assume {:partition} MinorFunction_6 == 17;
    Tmp_819 := strConst__li2bpl266;
    goto L1;

  anon58_Then:
    assume {:partition} MinorFunction_6 == 16;
    Tmp_819 := strConst__li2bpl265;
    goto L1;

  anon59_Then:
    assume {:partition} MinorFunction_6 == 15;
    Tmp_819 := strConst__li2bpl264;
    goto L1;

  anon60_Then:
    assume {:partition} MinorFunction_6 == 13;
    Tmp_819 := strConst__li2bpl263;
    goto L1;

  anon61_Then:
    assume {:partition} MinorFunction_6 == 12;
    Tmp_819 := strConst__li2bpl262;
    goto L1;

  anon62_Then:
    assume {:partition} MinorFunction_6 == 11;
    Tmp_819 := strConst__li2bpl261;
    goto L1;

  anon63_Then:
    assume {:partition} MinorFunction_6 == 10;
    Tmp_819 := strConst__li2bpl260;
    goto L1;

  anon64_Then:
    assume {:partition} MinorFunction_6 == 9;
    Tmp_819 := strConst__li2bpl259;
    goto L1;

  anon65_Then:
    assume {:partition} MinorFunction_6 == 8;
    Tmp_819 := strConst__li2bpl258;
    goto L1;

  anon66_Then:
    assume {:partition} MinorFunction_6 == 7;
    Tmp_819 := strConst__li2bpl257;
    goto L1;

  anon67_Then:
    assume {:partition} MinorFunction_6 == 6;
    Tmp_819 := strConst__li2bpl256;
    goto L1;

  anon68_Then:
    assume {:partition} MinorFunction_6 == 5;
    Tmp_819 := strConst__li2bpl255;
    goto L1;

  anon69_Then:
    assume {:partition} MinorFunction_6 == 4;
    Tmp_819 := strConst__li2bpl254;
    goto L1;

  anon70_Then:
    assume {:partition} MinorFunction_6 == 3;
    Tmp_819 := strConst__li2bpl253;
    goto L1;

  anon71_Then:
    assume {:partition} MinorFunction_6 == 2;
    Tmp_819 := strConst__li2bpl252;
    goto L1;

  anon72_Then:
    assume {:partition} MinorFunction_6 == 1;
    Tmp_819 := strConst__li2bpl251;
    goto L1;

  anon49_Then:
    assume {:partition} MinorFunction_6 == 0;
    Tmp_819 := strConst__li2bpl250;
    goto L1;
}



procedure {:origName "PciDrvDispatchPnpComplete"} PciDrvDispatchPnpComplete(actual_DeviceObject_38: int, actual_Irp_32: int, actual_Context_12: int) returns (Tmp_821: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPnpComplete"} PciDrvDispatchPnpComplete(actual_DeviceObject_38: int, actual_Irp_32: int, actual_Context_12: int) returns (Tmp_821: int)
{
  var {:pointer} event_2: int;
  var {:pointer} Irp_32: int;
  var {:pointer} Context_12: int;
  var vslice_dummy_var_148: int;

  anon0:
    Irp_32 := actual_Irp_32;
    Context_12 := actual_Context_12;
    event_2 := Context_12;
    assume {:nonnull} Irp_32 != 0;
    assume Irp_32 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1137} vslice_dummy_var_148 := KeSetEvent(event_2, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  L6:
    Tmp_821 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L6;
}



procedure {:origName "PciDrvIoIncrement"} PciDrvIoIncrement(actual_FdoData_89: int) returns (Tmp_834: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvIoIncrement"} PciDrvIoIncrement(actual_FdoData_89: int) returns (Tmp_834: int)
{
  var {:pointer} Tmp_835: int;
  var {:pointer} Tmp_836: int;
  var {:scalar} result_2: int;
  var {:pointer} FdoData_89: int;
  var vslice_dummy_var_41: int;

  anon0:
    FdoData_89 := actual_FdoData_89;
    call {:si_unique_call 1138} Tmp_836 := __HAVOC_malloc(88);
    call {:si_unique_call 1139} Tmp_835 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_89 != 0;
    assume FdoData_89 > 0;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    havoc vslice_dummy_var_41;
    Mem_T.INT4[Tmp_835] := vslice_dummy_var_41;
    call {:si_unique_call 1140} result_2 := sdv_InterlockedIncrement(Tmp_835);
    assume {:nonnull} FdoData_89 != 0;
    assume FdoData_89 > 0;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    Tmp_836 := strConst__li2bpl279;
    call {:si_unique_call 1141} DebugPrint(6, 1024, Tmp_836);
    Tmp_834 := result_2;
    return;
}



procedure {:origName "sdv_RunKSynchronizeRoutines"} {:osmodel} sdv_RunKSynchronizeRoutines(actual_SynchronizeRoutine: int, actual_Context_13: int) returns (Tmp_837: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_837 == 0 || Tmp_837 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunKSynchronizeRoutines"} {:osmodel} sdv_RunKSynchronizeRoutines(actual_SynchronizeRoutine: int, actual_Context_13: int) returns (Tmp_837: int)
{
  var {:scalar} SynchronizeRoutine: int;
  var {:pointer} Context_13: int;

  anon0:
    SynchronizeRoutine := actual_SynchronizeRoutine;
    Context_13 := actual_Context_13;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} SynchronizeRoutine == li2bplFunctionConstant1377;
    call {:si_unique_call 1142} Tmp_837 := MPSetPowerLowPrivate(Context_13);
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} SynchronizeRoutine != li2bplFunctionConstant1377;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SynchronizeRoutine == li2bplFunctionConstant903;
    call {:si_unique_call 1143} Tmp_837 := NICEnableInterrupt(Context_13);
    goto L1;

  anon6_Then:
    assume {:partition} SynchronizeRoutine != li2bplFunctionConstant903;
    Tmp_837 := 0;
    goto L1;
}



procedure {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int)
{
  var vslice_dummy_var_149: int;

  anon0:
    call {:si_unique_call 1144} vslice_dummy_var_149 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int)
{
  var vslice_dummy_var_150: int;

  anon0:
    call {:si_unique_call 1145} vslice_dummy_var_150 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_151: int;

  anon0:
    call {:si_unique_call 1146} vslice_dummy_var_151 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_845: int);
  free ensures {:va_keep} Tmp_845 == actual_Address;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_845: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    record := Address;
    Tmp_845 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_152: int;

  anon0:
    call {:si_unique_call 1147} vslice_dummy_var_152 := __HAVOC_malloc(4);
    p := actual_p;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := sdv_irql_previous;
    return;
}



procedure {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_849: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_849: int)
{
  var {:scalar} status_77: int;
  var {:pointer} p1: int;
  var {:pointer} p2: int;

  anon0:
    p1 := actual_p1;
    p2 := actual_p2;
    status_77 := 0;
    call {:si_unique_call 1148} sdv_stub_add_begin();
    call {:si_unique_call 1149} status_77 := PciDrvAddDevice(p1, p2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1150} sdv_stub_add_end();
    Tmp_849 := status_77;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_851: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_851 == 1 || Tmp_851 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_851: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 1151} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_851 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_851 := 0;
    goto L1;
}



procedure {:origName "sdv_MmGetMdlByteCount"} {:osmodel} sdv_MmGetMdlByteCount(actual_Mdl: int) returns (Tmp_853: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmGetMdlByteCount"} {:osmodel} sdv_MmGetMdlByteCount(actual_Mdl: int) returns (Tmp_853: int)
{
  var {:scalar} x_7: int;
  var {:pointer} sdv_421: int;

  anon0:
    call {:si_unique_call 1152} sdv_421 := __HAVOC_malloc(1);
    x_7 := sdv_421;
    Tmp_853 := x_7;
    return;
}



procedure {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int)
{
  var vslice_dummy_var_153: int;

  anon0:
    call {:si_unique_call 1153} vslice_dummy_var_153 := __HAVOC_malloc(4);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_857: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_857: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_857 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_857 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_857 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion()
{
  var vslice_dummy_var_154: int;

  anon0:
    call {:si_unique_call 1154} vslice_dummy_var_154 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc_1: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_155: int;

  anon0:
    call {:si_unique_call 1155} vslice_dummy_var_155 := __HAVOC_malloc(4);
    Dpc_1 := actual_Dpc_1;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_1 != 0;
    assume Dpc_1 > 0;
    return;
}



procedure {:origName "IoGetDmaAdapter"} {:osmodel} IoGetDmaAdapter(actual_PhysicalDeviceObject_1: int, actual_DeviceDescription: int, actual_NumberOfMapRegisters: int) returns (Tmp_863: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoGetDmaAdapter"} {:osmodel} IoGetDmaAdapter(actual_PhysicalDeviceObject_1: int, actual_DeviceDescription: int, actual_NumberOfMapRegisters: int) returns (Tmp_863: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_863 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_863 := sdv_IoGetDmaAdapter_DMA_ADAPTER;
    goto L1;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_2: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_39: int) returns (Tmp_865: int);
  free ensures {:va_keep} Tmp_865 == -1073741824 || Tmp_865 == -1073741771 || Tmp_865 == -1073741670 || Tmp_865 == -1073741823 || Tmp_865 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_2: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_39: int) returns (Tmp_865: int)
{
  var {:pointer} DeviceObject_39: int;

  anon0:
    DeviceObject_39 := actual_DeviceObject_39;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_39 != 0;
    assume DeviceObject_39 > 0;
    Tmp_865 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_39 != 0;
    assume DeviceObject_39 > 0;
    Tmp_865 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_39 != 0;
    assume DeviceObject_39 > 0;
    Tmp_865 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_39 != 0;
    assume DeviceObject_39 > 0;
    Tmp_865 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_39 != 0;
    assume DeviceObject_39 > 0;
    goto L21;

  L21:
    Tmp_865 := 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_39 != 0;
    assume DeviceObject_39 > 0;
    goto L21;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_156: int;

  anon0:
    call {:si_unique_call 1156} vslice_dummy_var_156 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_ExInitializeNPagedLookasideList_NXPoolOptIn"} {:osmodel} sdv_ExInitializeNPagedLookasideList_NXPoolOptIn(actual_Lookaside: int, actual_Allocate: int, actual_Free: int, actual_Flags: int, actual_Size_1: int, actual_Tag: int, actual_Depth: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExInitializeNPagedLookasideList_NXPoolOptIn"} {:osmodel} sdv_ExInitializeNPagedLookasideList_NXPoolOptIn(actual_Lookaside: int, actual_Allocate: int, actual_Free: int, actual_Flags: int, actual_Size_1: int, actual_Tag: int, actual_Depth: int)
{
  var vslice_dummy_var_157: int;

  anon0:
    call {:si_unique_call 1157} vslice_dummy_var_157 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_873: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_873: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_873 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_158: int;

  anon0:
    call {:si_unique_call 1158} vslice_dummy_var_158 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_159: int;

  anon0:
    call {:si_unique_call 1159} vslice_dummy_var_159 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_160: int;

  anon0:
    call {:si_unique_call 1160} vslice_dummy_var_160 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_161: int;

  anon0:
    call {:si_unique_call 1161} vslice_dummy_var_161 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;
}



procedure {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_887: int);
  free ensures {:va_keep} Tmp_887 == 0 || Tmp_887 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_887: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_887 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_887 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} Tmp_889: int;
  var {:scalar} u: int;
  var {:scalar} Tmp_891: int;
  var {:scalar} status_78: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;

  anon0:
    call {:si_unique_call 1162} u := __HAVOC_malloc(12);
    call {:si_unique_call 1163} vslice_dummy_var_162 := __HAVOC_malloc(4);
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 1164} status_78 := DriverEntry(sdv_driver_object, u);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_78 < 0;
    Tmp_891 := 0;
    goto L63;

  L63:
    assume Tmp_891 != 0;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 1165} status_78 := sdv_RunAddDevice(sdv_driver_object, sdv_p_devobj_pdo);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_78 < 0;
    Tmp_889 := 0;
    goto L74;

  L74:
    assume Tmp_889 != 0;
    call {:si_unique_call 1166} sdv_stub_driver_init();
    call {:si_unique_call 1167} vslice_dummy_var_163 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} 0 <= status_78;
    Tmp_889 := 1;
    goto L74;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} 0 <= status_78;
    Tmp_891 := 1;
    goto L63;
}



procedure {:origName "_sdv_init16"} {:osmodel} _sdv_init16();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == 0;
  free ensures {:va_keep} sdv_irql_previous_2 == 0;
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == 0;
  free ensures {:va_keep} sdv_irql_previous_4 == 0;
  free ensures {:va_keep} sdv_irql_previous_3 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init16"} {:osmodel} _sdv_init16()
{
  var vslice_dummy_var_164: int;

  anon0:
    call {:si_unique_call 1168} vslice_dummy_var_164 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    sdv_irql_current := 0;
    sdv_irql_previous := 0;
    sdv_irql_previous_2 := 0;
    sdv_irql_previous_3 := 0;
    sdv_irql_previous_4 := 0;
    sdv_irql_previous_5 := 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant7729;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_p_devobj_top == sdv_devobj_top;
    Mem_T.INT4[sdv_MmMapIoSpace_int] := 0;
    return;
}



procedure {:origName "sdv_MmGetSystemAddressForMdlSafe"} {:osmodel} sdv_MmGetSystemAddressForMdlSafe(actual_MDL: int, actual_PRIORITY: int) returns (Tmp_895: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmGetSystemAddressForMdlSafe"} {:osmodel} sdv_MmGetSystemAddressForMdlSafe(actual_MDL: int, actual_PRIORITY: int) returns (Tmp_895: int)
{
  var {:pointer} sdv_434: int;
  var {:pointer} p_1: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1169} sdv_434 := __HAVOC_malloc(1);
    p_1 := sdv_434;
    Tmp_895 := p_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_895 := 0;
    goto L1;
}



procedure {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion()
{
  var vslice_dummy_var_165: int;

  anon0:
    call {:si_unique_call 1170} vslice_dummy_var_165 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_MmGetMdlVirtualAddress"} {:osmodel} sdv_MmGetMdlVirtualAddress(actual_Mdl_1: int) returns (Tmp_899: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmGetMdlVirtualAddress"} {:osmodel} sdv_MmGetMdlVirtualAddress(actual_Mdl_1: int) returns (Tmp_899: int)
{
  var {:pointer} x_10: int;
  var {:pointer} sdv_435: int;

  anon0:
    call {:si_unique_call 1171} sdv_435 := __HAVOC_malloc(1);
    x_10 := sdv_435;
    Tmp_899 := x_10;
    return;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_41: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_903: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_903 == 0 || Tmp_903 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_41: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_903: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 1172} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_903 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 2;
    call {:si_unique_call 1173} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 1174} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 1175} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_42: int, actual_Type_2: int, actual_structPtr888State: int) returns (structPtr888Tmp: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_42: int, actual_Type_2: int, actual_structPtr888State: int) returns (structPtr888Tmp: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 1176} State := __HAVOC_malloc(8);
    call {:si_unique_call 1177} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1178} Tmp := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(State)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888State)];
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(Tmp)] := Mem_T.INT4[DeviceState__POWER_STATE(r_2)];
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_2: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == actual_new;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_2: int)
{
  var {:scalar} new: int;
  var {:pointer} p_2: int;
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 1179} vslice_dummy_var_166 := __HAVOC_malloc(4);
    new := actual_new;
    p_2 := actual_p_2;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := new;
    assume {:nonnull} p_2 != 0;
    assume p_2 > 0;
    Mem_T.INT4[p_2] := sdv_irql_previous;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_908: int);
  free ensures {:va_keep} Tmp_908 == 1 || Tmp_908 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_908: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_908 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_908 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_16: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_16: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_16: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 1180} vslice_dummy_var_167 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_16 := actual_Context_16;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 1181} irpSp := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    return;
}



procedure {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin()
{
  var vslice_dummy_var_168: int;

  anon0:
    call {:si_unique_call 1182} vslice_dummy_var_168 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_914: int);
  free ensures {:va_keep} Tmp_914 == 1 || Tmp_914 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_914: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_914 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_914 := 0;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_36: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_36: int)
{
  var vslice_dummy_var_169: int;

  anon0:
    call {:si_unique_call 1183} vslice_dummy_var_169 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_918: int);
  free ensures {:va_keep} Tmp_918 == 258 || Tmp_918 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_918: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_918 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_918 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_918 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_43: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_43: int)
{
  var vslice_dummy_var_170: int;

  anon0:
    call {:si_unique_call 1184} vslice_dummy_var_170 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_922: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_922: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;
  var {:scalar} Wait_1: int;

  anon0:
    Event := actual_Event;
    Wait_1 := actual_Wait_1;
    call {:si_unique_call 1185} SLIC_KeSetEvent_entry(strConst__li2bpl280, Wait_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_922 := OldState;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_926: int);
  free ensures {:va_keep} Tmp_926 == actual_AddressWithinSection;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_926: int)
{
  var {:pointer} AddressWithinSection: int;

  anon0:
    AddressWithinSection := actual_AddressWithinSection;
    Tmp_926 := AddressWithinSection;
    return;
}



procedure {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction_1: int, actual_CallbackContext: int) returns (Tmp_928: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction_1: int, actual_CallbackContext: int) returns (Tmp_928: int)
{
  var {:pointer} sdv_448: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_928 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1186} sdv_448 := __HAVOC_malloc(1);
    Tmp_928 := sdv_448;
    goto L1;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_930: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_930: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_930;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_3: int, actual_n_1: int, actual_a: int, actual_r_3: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_3: int, actual_n_1: int, actual_a: int, actual_r_3: int, actual_s_2: int)
{
  var vslice_dummy_var_171: int;

  anon0:
    call {:si_unique_call 1187} vslice_dummy_var_171 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin()
{
  var vslice_dummy_var_172: int;

  anon0:
    call {:si_unique_call 1188} vslice_dummy_var_172 := __HAVOC_malloc(4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    goto L1;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_936: int);
  free ensures {:va_keep} Tmp_936 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_936: int)
{

  anon0:
    Tmp_936 := sdv_irql_current;
    return;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_940: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "main"} {:osmodel} main() returns (Tmp_940: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_941: int;
  var {:scalar} Tmp_942: int;
  var boogieTmp: int;
  var DEVPKEY_Device_ProblemCode__Loc: int;
  var DEVPKEY_Device_DHP_Rebalance_Policy__Loc: int;
  var GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc: int;
  var DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc: int;
  var GUID_NWF_FRAGMENTATION_THRESHOLD__Loc: int;
  var GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_SafeRemovalRequired__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressAERControl__Loc: int;
  var DEVPKEY_PciDevice_BaseClass__Loc: int;
  var GUID_NWF_ACTIVE_PHY_LIST__Loc: int;
  var DEVPKEY_Device_ResourcePickerTags__Loc: int;
  var DEVPKEY_DeviceContainer_IsPaired__Loc: int;
  var DEVPKEY_Device_HardwareIds__Loc: int;
  var DEVPKEY_DeviceContainer_InstallInProgress__Loc: int;
  var DEVPKEY_PciDevice_MaxPayloadSize__Loc: int;
  var GUID_NWF_COUNTRY_STRING__Loc: int;
  var DEVPKEY_Device_LowerFilters__Loc: int;
  var DEVPKEY_Device_FirmwareVersion__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_NWF_CURRENT_INDEX__Loc: int;
  var GUID_NWF_TI_THRESHOLD__Loc: int;
  var GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_BarTypes__Loc: int;
  var GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc: int;
  var GUID_POWER_CONSERVATION_IDLE_TIME__Loc: int;
  var GUID_NWF_RECV_SENSITIVITY_LIST__Loc: int;
  var DEVPKEY_DeviceClass_UpperFilters__Loc: int;
  var DEVPKEY_DeviceClass_NoInstallClass__Loc: int;
  var GUID_NWF_RANDOM_TABLE_FLAG__Loc: int;
  var DEVPKEY_Device_DeviceDesc__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc: int;
  var GUID_NWF_RF_USAGE__Loc: int;
  var DEVPKEY_DeviceContainer_IsEncrypted__Loc: int;
  var DEVPKEY_Device_LastArrivalDate__Loc: int;
  var GUID_NWF_RSSI_RANGE__Loc: int;
  var GUID_NWF_CURRENT_PHY_ID__Loc: int;
  var GUID_NWF_JOIN_REQUEST__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_Characteristics__Loc: int;
  var DEVPKEY_DrvPkg_DetailedDescription__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceDescription2__Loc: int;
  var DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc: int;
  var DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc: int;
  var GUID_NWF_RTS_THRESHOLD__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_Icon__Loc: int;
  var DEVPKEY_DeviceInterfaceClass_Name__Loc: int;
  var GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc: int;
  var DEVPKEY_Device_InstanceId__Loc: int;
  var GUID_NWF_SUPPORTED_RX_ANTENNA__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var DEVPKEY_Device_LastRemovalDate__Loc: int;
  var DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc: int;
  var GUID_NWF_POWER_MGMT_MODE__Loc: int;
  var GUID_NWF_ED_THRESHOLD__Loc: int;
  var DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc: int;
  var GUID_NWF_OPERATION_MODE_CAPABILITY__Loc: int;
  var DEVPKEY_Device_Manufacturer__Loc: int;
  var DEVPKEY_Device_DriverLogoLevel__Loc: int;
  var DEVPKEY_DeviceContainer_Address__Loc: int;
  var DEVPKEY_DeviceContainer_IsAuthenticated__Loc: int;
  var DEVPKEY_PciDevice_SubClass__Loc: int;
  var GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc: int;
  var DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc: int;
  var GUID_NWF_PERMANENT_ADDRESS__Loc: int;
  var DEVPKEY_Device_ConfigurationId__Loc: int;
  var GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc: int;
  var GUID_DEVINTERFACE_PCIDRV__Loc: int;
  var DEVPKEY_Device_HasProblem__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc: int;
  var GUID_NWF_MEDIA_STREAMING_ENABLED__Loc: int;
  var DEVPKEY_PciDevice_AriSupport__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc: int;
  var GUID_NWF_PMKID_LIST__Loc: int;
  var DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc: int;
  var DEVPKEY_Device_PhysicalDeviceLocation__Loc: int;
  var DEVPKEY_DeviceContainer_Version__Loc: int;
  var GUID_NWF_BEACON_PERIOD__Loc: int;
  var GUID_NWF_DESIRED_SSID_LIST__Loc: int;
  var DEVPKEY_PciRootBus_ASPMSupport__Loc: int;
  var GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc: int;
  var DEVPKEY_Device_PostInstallInProgress__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc: int;
  var DEVPKEY_Device_Driver__Loc: int;
  var DEVPKEY_PciDevice_CurrentPayloadSize__Loc: int;
  var GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc: int;
  var GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc: int;
  var DEVPKEY_Device_InstallState__Loc: int;
  var GUID_NWF_MAX_DWELL_TIME__Loc: int;
  var GUID_NWF_WPA_TSC__Loc: int;
  var GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc: int;
  var GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var DEVPKEY_PciDevice_Label_String__Loc: int;
  var GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var DEVPKEY_Device_FirmwareDate__Loc: int;
  var DEVPKEY_PciDevice_SriovSupport__Loc: int;
  var GUID_NWF_SAFE_MODE_ENABLED__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceInterface_FriendlyName__Loc: int;
  var DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc: int;
  var DEVPKEY_PciDevice_S0WakeupSupported__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var DEVPKEY_PciDevice_InterruptSupport__Loc: int;
  var DEVPKEY_PciDevice_Label_Id__Loc: int;
  var DEVPKEY_Device_CompatibleIds__Loc: int;
  var DEVPKEY_Device_ReportedDeviceIdsHash__Loc: int;
  var DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc: int;
  var GUID_NWF_CURRENT_CHANNEL__Loc: int;
  var GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc: int;
  var DEVPKEY_Device_DriverPropPageProvider__Loc: int;
  var DEVPKEY_DeviceContainer_UnpairUninstall__Loc: int;
  var DEVPKEY_PciDevice_CurrentLinkSpeed__Loc: int;
  var GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc: int;
  var DEVPKEY_Device_BiosDeviceName__Loc: int;
  var GUID_NWF_CFP_MAX_DURATION__Loc: int;
  var GUID_NWF_HOPPING_PATTERN__Loc: int;
  var GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc: int;
  var GUID_NWF_DISCONNECT_REQUEST__Loc: int;
  var GUID_NWF_CURRENT_PACKET_FILTER__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_PowerRelations__Loc: int;
  var DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc: int;
  var GUID_NWF_SUPPORTED_PHY_TYPES__Loc: int;
  var GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc: int;
  var DEVPKEY_DrvPkg_BrandingIcon__Loc: int;
  var DEVPKEY_DeviceClass_Characteristics__Loc: int;
  var GUID_NWF_SCAN_REQUEST__Loc: int;
  var GUID_NWF_DESIRED_BSS_TYPE__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var DEVPKEY_Device_MatchingDeviceId__Loc: int;
  var GUID_NWF_EXCLUDE_UNENCRYPTED__Loc: int;
  var GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc: int;
  var GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc: int;
  var DEVPKEY_Device_PDOName__Loc: int;
  var DEVPKEY_Device_Address__Loc: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_Exclusive__Loc: int;
  var DEVPKEY_PciDevice_Correctable_Error_Mask__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceDescription1__Loc: int;
  var GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc: int;
  var DEVPKEY_DeviceContainer_Manufacturer__Loc: int;
  var DEVPKEY_DeviceClass_NoUseClass__Loc: int;
  var GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc: int;
  var GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_MaxLinkWidth__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_DevNodeStatus__Loc: int;
  var GUID_NWF_WME_ENABLED__Loc: int;
  var DEVPKEY_Device_DriverProvider__Loc: int;
  var DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc: int;
  var DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc: int;
  var DEVPKEY_PciDevice_AERCapabilityPresent__Loc: int;
  var GUID_NWF_WME_AC_PARAMETERS__Loc: int;
  var DEVPKEY_Device_ModelId__Loc: int;
  var GUID_NWF_AP_JOIN_REQUEST__Loc: int;
  var DEVPKEY_DeviceContainer_PrimaryCategory__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var DEVPKEY_Device_Children__Loc: int;
  var DEVPKEY_Device_Stack__Loc: int;
  var DEVPKEY_DeviceContainer_IsLocalMachine__Loc: int;
  var GUID_NWF_MPDU_MAX_LENGTH__Loc: int;
  var GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc: int;
  var DEVPKEY_Device_DriverDate__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_NWF_STATION_ID__Loc: int;
  var GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc: int;
  var DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc: int;
  var GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var DEVPKEY_Device_DriverDesc__Loc: int;
  var GUID_NWF_HOP_MODULUS__Loc: int;
  var DEVPKEY_DeviceClass_NoDisplayClass__Loc: int;
  var GUID_NWF_OFFLOAD_CAPABILITY__Loc: int;
  var GUID_NWF_SUPPORTED_POWER_LEVELS__Loc: int;
  var GUID_NWF_DIVERSITY_SELECTION_RX__Loc: int;
  var GUID_NWF_WME_IMPLEMENTED__Loc: int;
  var DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var DEVPKEY_Device_BusNumber__Loc: int;
  var DEVPKEY_Device_PowerData__Loc: int;
  var DEVPKEY_Device_ConfigFlags__Loc: int;
  var DEVPKEY_PciDevice_MaxReadRequestSize__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataPath__Loc: int;
  var GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc: int;
  var GUID_NWF_CURRENT_SET__Loc: int;
  var GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc: int;
  var DEVPKEY_DeviceContainer_FriendlyName__Loc: int;
  var DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_PresenceNotForDevice__Loc: int;
  var GUID_NWF_DESIRED_BSSID_LIST__Loc: int;
  var GUID_NWF_ENUM_ASSOCIATION_INFO__Loc: int;
  var DEVPKEY_DeviceInterface_ClassGuid__Loc: int;
  var DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc: int;
  var DEVPKEY_Device_FriendlyNameAttributes__Loc: int;
  var GUID_NWF_NIC_POWER_STATE__Loc: int;
  var GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc: int;
  var DEVPKEY_Device_SessionId__Loc: int;
  var DEVPKEY_DeviceInterface_Enabled__Loc: int;
  var DEVPKEY_DeviceInterface_Restricted__Loc: int;
  var GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc: int;
  var DEVPKEY_Device_TransportRelations__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var DEVPKEY_NAME__Loc: int;
  var DEVPKEY_Device_UINumberDescFormat__Loc: int;
  var GUID_NWF_WEP_OFFLOAD__Loc: int;
  var GUID_NWF_UPDATE_IE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceClass_ClassCoInstallers__Loc: int;
  var GUID_NWF_POWER_MGMT_REQUEST__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var DEVPKEY_Device_FriendlyName__Loc: int;
  var DEVPKEY_Device_LocationInfo__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Icon__Loc: int;
  var GUID_NWF_DESIRED_PHY_LIST__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc: int;
  var DEVPKEY_Device_Exclusive__Loc: int;
  var GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc: int;
  var DEVPKEY_Device_Numa_Proximity_Domain__Loc: int;
  var GUID_NWF_QOS_TX_DURATION__Loc: int;
  var DEVPKEY_Device_DriverProblemDesc__Loc: int;
  var DEVPKEY_DeviceContainer_IsSharedDevice__Loc: int;
  var GUID_NWF_CURRENT_DWELL_TIME__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_CurrentLinkWidth__Loc: int;
  var DEVPKEY_Device_UINumber__Loc: int;
  var DEVPKEY_Device_ExtendedConfigurationIds__Loc: int;
  var DEVPKEY_Device_DriverRank__Loc: int;
  var DEVPKEY_DeviceContainer_IsRebootRequired__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc: int;
  var GUID_NWF_PORT_STATE_NOTIFICATION__Loc: int;
  var DEVPKEY_Device_SafeRemovalRequiredOverride__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc: int;
  var DEVPKEY_PciDevice_DeviceType__Loc: int;
  var GUID_NWF_QOS_TX_MEDIUM_TIME__Loc: int;
  var GUID_NWF_DIVERSITY_SUPPORT__Loc: int;
  var GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc: int;
  var DEVPKEY_Device_DriverInfSection__Loc: int;
  var DEVPKEY_DeviceClass_PropPageProvider__Loc: int;
  var GUID_NWF_TEMP_TYPE__Loc: int;
  var DEVPKEY_Device_Class__Loc: int;
  var DEVPKEY_Device_NoConnectSound__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_DevType__Loc: int;
  var GUID_NWF_CURRENT_PATTERN__Loc: int;
  var DEVPKEY_Device_ManufacturerAttributes__Loc: int;
  var GUID_NWF_ENUM_BSS_LIST__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var DEVPKEY_Device_Reported__Loc: int;
  var DEVPKEY_PciRootBus_NativePciExpressControl__Loc: int;
  var GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc: int;
  var DEVPKEY_DeviceContainer_IsNetworkDevice__Loc: int;
  var DEVPKEY_Device_ResourcePickerExceptions__Loc: int;
  var GUID_NWF_OPERATIONAL_RATE_SET__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var DEVPKEY_Device_RemovalPolicyDefault__Loc: int;
  var DEVPKEY_Device_ProblemStatus__Loc: int;
  var GUID_NWF_WEP_UPLOAD__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc: int;
  var GUID_NWF_CCA_MODE_SUPPORTED__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var DEVPKEY_Device_EjectionRelations__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var DEVPKEY_PciDevice_MaxLinkSpeed__Loc: int;
  var DEVPKEY_PciDevice_FirmwareErrorHandling__Loc: int;
  var GUID_NWF_CURRENT_OPERATION_MODE__Loc: int;
  var GUID_NWF_STATISTICS__Loc: int;
  var DEVPKEY_Device_IsAssociateableByUserAction__Loc: int;
  var DEVPKEY_DrvPkg_Icon__Loc: int;
  var DEVPKEY_PciDevice_ProgIf__Loc: int;
  var DEVPKEY_Device_AdditionalSoftwareRequested__Loc: int;
  var GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc: int;
  var DEVPKEY_Device_LocationPaths__Loc: int;
  var GUID_NWF_CURRENT_FREQUENCY__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var DEVPKEY_DeviceClass_SilentInstall__Loc: int;
  var DEVPKEY_Device_LegacyBusType__Loc: int;
  var DEVPKEY_DeviceContainer_IsDefaultDevice__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var DEVPKEY_Device_UpperFilters__Loc: int;
  var DEVPKEY_Device_DevType__Loc: int;
  var DEVPKEY_Device_DriverInfPath__Loc: int;
  var DEVPKEY_DeviceInterface_ReferenceString__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc: int;
  var GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc: int;
  var GUID_POWER_PERFORMANCE_IDLE_TIME__Loc: int;
  var DEVPKEY_Device_IsRebootRequired__Loc: int;
  var DEVPKEY_DeviceClass_ClassInstaller__Loc: int;
  var DEVPKEY_DeviceContainer_IsConnected__Loc: int;
  var DEVPKEY_DeviceContainer_Icon__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc: int;
  var DEVPKEY_Device_SecuritySDS__Loc: int;
  var DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc: int;
  var GUID_NWF_CFP_PERIOD__Loc: int;
  var GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc: int;
  var DEVPKEY_Device_InstallDate__Loc: int;
  var DEVPKEY_DeviceClass_LowerFilters__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataChecksum__Loc: int;
  var DEVPKEY_DeviceClass_DefaultService__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var GUID_NWF_WEP_ICV_ERROR_COUNT__Loc: int;
  var DEVPKEY_DrvPkg_VendorWebSite__Loc: int;
  var DEVPKEY_DeviceContainer_ConfigFlags__Loc: int;
  var DEVPKEY_PciDevice_AcsSupport__Loc: int;
  var DEVPKEY_Device_RemovalRelations__Loc: int;
  var DEVPKEY_DrvPkg_DocumentationLink__Loc: int;
  var GUID_NWF_MULTICAST_LIST__Loc: int;
  var GUID_NWF_DEFAULT_WEP_UPLOAD__Loc: int;
  var GUID_NWF_RESET_REQUEST__Loc: int;
  var DEVPKEY_Device_BusTypeGuid__Loc: int;
  var GUID_NWF_DTIM_PERIOD__Loc: int;
  var GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc: int;
  var GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc: int;
  var DEVPKEY_Device_ShowInUninstallUI__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc: int;
  var GUID_NWF_CURRENT_ADDRESS__Loc: int;
  var DEVPKEY_Device_ContainerId__Loc: int;
  var DEVPKEY_Device_InLocalMachineContainer__Loc: int;
  var DEVPKEY_DeviceContainer_ExperienceId__Loc: int;
  var GUID_NWF_CURRENT_RX_ANTENNA__Loc: int;
  var GUID_NWF_CIPHER_DEFAULT_KEY__Loc: int;
  var DEVPKEY_Device_FirmwareRevision__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_NWF_SUPPORTED_TX_ANTENNA__Loc: int;
  var DEVPKEY_DeviceContainer_BaselineExperienceId__Loc: int;
  var DEVPKEY_PciRootBus_SecondaryInterface__Loc: int;
  var GUID_NWF_CONNECT_REQUEST__Loc: int;
  var GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc: int;
  var GUID_NWF_EXTSTA_CAPABILITY__Loc: int;
  var DEVPKEY_Device_Security__Loc: int;
  var DEVPKEY_DeviceClass_SecuritySDS__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var DEVPKEY_Device_EnumeratorName__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var DEVPKEY_DeviceClass_Security__Loc: int;
  var DEVPKEY_DeviceContainer_Last_Seen__Loc: int;
  var DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc: int;
  var DEVPKEY_Device_ClassGuid__Loc: int;
  var DEVPKEY_Device_FirstInstallDate__Loc: int;
  var GUID_NWF_MAXIMUM_LIST_SIZE__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_NWF_IBSS_PARAMS__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_NWF_ATIM_WINDOW__Loc: int;
  var GUID_NWF_CF_POLLABLE__Loc: int;
  var GUID_NWF_MAC_ADDRESS__Loc: int;
  var DEVPKEY_Device_BusReportedDeviceDesc__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var GUID_NWF_HOP_TIME__Loc: int;
  var DEVPKEY_Device_RemovalPolicy__Loc: int;
  var DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc: int;
  var GUID_NWF_START_REQUEST__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var DEVPKEY_DeviceClass_Name__Loc: int;
  var DEVPKEY_DeviceContainer_ModelName__Loc: int;
  var DEVPKEY_Device_IsPresent__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var DEVPKEY_Device_RemovalPolicyOverride__Loc: int;
  var DEVPKEY_Device_Model__Loc: int;
  var DEVPKEY_PciDevice_RootError_Reporting__Loc: int;
  var GUID_NWF_SHORT_RETRY_LIMIT__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc: int;
  var DEVPKEY_DeviceContainer_DiscoveryMethod__Loc: int;
  var DEVPKEY_Device_DriverInfSectionExt__Loc: int;
  var DEVPKEY_DeviceClass_ClassName__Loc: int;
  var DEVPKEY_PciRootBus_SystemMsiSupport__Loc: int;
  var GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc: int;
  var GUID_NWF_HOP_OFFSET__Loc: int;
  var DEVPKEY_DeviceContainer_AssociationArray__Loc: int;
  var DEVPKEY_PciRootBus_SecondaryBusWidth__Loc: int;
  var GUID_NWF_ASSOCIATION_PARAMS__Loc: int;
  var DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc: int;
  var DEVPKEY_Device_BaseContainerId__Loc: int;
  var GUID_NWF_FLUSH_BSS_LIST__Loc: int;
  var GUID_NWF_CURRENT_TX_ANTENNA__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var DEVPKEY_Device_BusRelations__Loc: int;
  var GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var DEVPKEY_DeviceContainer_ModelNumber__Loc: int;
  var PCIDRV_WMI_STD_DATA_GUID__Loc: int;
  var DEVPKEY_DeviceContainer_Last_Connected__Loc: int;
  var GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc: int;
  var DEVPKEY_PciDevice_Error_Reporting__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var DEVPKEY_PciRootBus_MSISupport__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc: int;
  var DEVPKEY_Device_SignalStrength__Loc: int;
  var DEVPKEY_Device_DebuggerSafe__Loc: int;
  var DEVPKEY_Device_DriverCoInstallers__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_NWF_OPTIONAL_CAPABILITY__Loc: int;
  var GUID_NWF_EHCC_PRIME_RADIX__Loc: int;
  var GUID_NWF_CURRENT_PHY_TYPE__Loc: int;
  var GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc: int;
  var DEVPKEY_Device_Numa_Node__Loc: int;
  var DEVPKEY_PciDevice_ExpressSpecVersion__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc: int;
  var GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc: int;
  var GUID_NWF_QOS_PARAMS__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var DEVPKEY_Device_GenericDriverInstalled__Loc: int;
  var GUID_NWF_CURRENT_REG_DOMAIN__Loc: int;
  var GUID_NWF_WME_UPDATE_IE__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc: int;
  var DEVPKEY_Device_Service__Loc: int;
  var DEVPKEY_Device_Capabilities__Loc: int;
  var DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc: int;
  var GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc: int;
  var GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataCabinet__Loc: int;
  var GUID_NWF_COUNTERS_ENTRY__Loc: int;
  var GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc: int;
  var GUID_NWF_PHY_STATE__Loc: int;
  var DEVPKEY_Device_Parent__Loc: int;
  var GUID_NWF_MAX_RECEIVE_LIFETIME__Loc: int;
  var DEVPKEY_DeviceContainer_Category__Loc: int;
  var DEVPKEY_PciDevice_ECRC_Errors__Loc: int;
  var GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_NWF_AUTO_CONFIG_ENABLED__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var DEVPKEY_Device_DriverVersion__Loc: int;
  var GUID_NWF_CURRENT_CCA_MODE__Loc: int;
  var DEVPKEY_DrvPkg_Model__Loc: int;
  var DEVPKEY_DeviceClass_IconPath__Loc: int;
  var GUID_NWF_LONG_RETRY_LIMIT__Loc: int;
  var DEVPKEY_PciDevice_InterruptMessageMaximum__Loc: int;
  var GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc: int;
  var DEVPKEY_Device_Legacy__Loc: int;
  var DEVPKEY_Device_Siblings__Loc: int;
  var DEVPKEY_DeviceContainer_HasProblem__Loc: int;
  var Globals__Loc: int;
  var GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc: int;
  var GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc: int;
  var GUID_ALLOW_RTC_WAKE__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_2__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc: int;
  var GUID_DISK_IDLE_TIMEOUT__Loc: int;
  var GUID_ACDC_POWER_SOURCE__Loc: int;
  var GUID_SYSTEM_COOLING_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_3__Loc: int;
  var GUID_LOCK_CONSOLE_ON_WAKE__Loc: int;
  var GUID_VIDEO_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLESTATE_POLICY__Loc: int;
  var GUID_UNATTEND_SLEEP_TIMEOUT__Loc: int;
  var PPM_THERMALCONSTRAINT_GUID__Loc: int;
  var GUID_CRITICAL_POWER_TRANSITION__Loc: int;
  var GUID_SLEEP_IDLE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT__Loc: int;
  var GUID_STANDBY_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc: int;
  var PPM_IDLE_ACCOUNTING_GUID__Loc: int;
  var GUID_TYPICAL_POWER_SAVINGS__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc: int;
  var GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_2__Loc: int;
  var GUID_HIBERNATE_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc: int;
  var PPM_IDLESTATES_DATA_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc: int;
  var GUID_POWERBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc: int;
  var GUID_AUDIO_PLAYBACK__Loc: int;
  var GUID_PROCESSOR_THROTTLE_POLICY__Loc: int;
  var GUID_BATTERY_PERCENTAGE_REMAINING__Loc: int;
  var GUID_GLOBAL_USER_PRESENCE__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_2__Loc: int;
  var GUID_APPLAUNCH_BUTTON__Loc: int;
  var GUID_PROCESSOR_ALLOW_THROTTLING__Loc: int;
  var GUID_IDLE_RESILIENCY_PERIOD__Loc: int;
  var GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc: int;
  var GUID_SLEEPBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc: int;
  var GUID_PROCESSOR_IDLE_DISABLE__Loc: int;
  var GUID_CONSOLE_DISPLAY_STATE__Loc: int;
  var GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_0__Loc: int;
  var GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc: int;
  var GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc: int;
  var GUID_LIDSWITCH_STATE_CHANGE__Loc: int;
  var GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc: int;
  var GUID_SESSION_DISPLAY_STATUS__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc: int;
  var GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc: int;
  var GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc: int;
  var GUID_MIN_POWER_SAVINGS__Loc: int;
  var GUID_DEVICE_IDLE_POLICY__Loc: int;
  var GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc: int;
  var GUID_SLEEP_SUBGROUP__Loc: int;
  var GUID_DISK_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_1__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_0__Loc: int;
  var GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_0__Loc: int;
  var GUID_VIDEO_DIM_TIMEOUT__Loc: int;
  var PPM_THERMAL_POLICY_CHANGE_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_TIME_CHECK__Loc: int;
  var GUID_LIDOPEN_POWERSTATE__Loc: int;
  var GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_TIME__Loc: int;
  var GUID_MONITOR_POWER_ON__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MINIMUM__Loc: int;
  var GUID_ALLOW_AWAYMODE__Loc: int;
  var GUID_DISK_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_SYSTEM_BUTTON_SUBGROUP__Loc: int;
  var PPM_PERFMON_PERFSTATE_GUID__Loc: int;
  var GUID_ALLOW_SYSTEM_REQUIRED__Loc: int;
  var GUID_ALLOW_DISPLAY_REQUIRED__Loc: int;
  var PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc: int;
  var GUID_PROCESSOR_PARKING_PERF_STATE__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc: int;
  var PPM_IDLESTATE_CHANGE_GUID__Loc: int;
  var GUID_ALLOW_STANDBY_STATES__Loc: int;
  var GUID_PROCESSOR_PERFSTATE_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc: int;
  var GUID_VIDEO_SUBGROUP__Loc: int;
  var GUID_HIBERNATE_FASTS4_POLICY__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc: int;
  var PPM_PERFSTATE_CHANGE_GUID__Loc: int;
  var GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_USERINTERFACEBUTTON_ACTION__Loc: int;
  var GUID_PCIEXPRESS_ASPM_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc: int;
  var GUID_INTSTEER_SUBGROUP__Loc: int;
  var GUID_DISK_BURST_IGNORE_THRESHOLD__Loc: int;
  var GUID_DISK_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc: int;
  var PPM_PERFSTATES_DATA_GUID__Loc: int;
  var NO_SUBGROUP_GUID__Loc: int;
  var GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_MODE__Loc: int;
  var ALL_POWERSCHEMES_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc: int;
  var GUID_PROCESSOR_IDLE_TIME_CHECK__Loc: int;
  var GUID_INTSTEER_MODE__Loc: int;
  var GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc: int;
  var GUID_BACKGROUND_TASK_NOTIFICATION__Loc: int;
  var GUID_PROCESSOR_PERF_HISTORY__Loc: int;
  var GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_POLICY__Loc: int;
  var GUID_SESSION_USER_PRESENCE__Loc: int;
  var GUID_LIDCLOSE_ACTION__Loc: int;
  var GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc: int;
  var PPM_IDLE_ACCOUNTING_EX_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_TIME__Loc: int;
  var GUID_MAX_POWER_SAVINGS__Loc: int;
  var GUID_BATTERY_SUBGROUP__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc: int;
  var GUID_IDLE_BACKGROUND_TASK__Loc: int;
  var GUID_POWERSCHEME_PERSONALITY__Loc: int;
  var GUID_IDLE_RESILIENCY_SUBGROUP__Loc: int;
  var GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc: int;
  var GUID_ACTIVE_POWERSCHEME__Loc: int;
  var GUID_SYSTEM_AWAYMODE__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_driver_object__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var sdv_MmMapIoSpace_int__Loc: int;
  var vslice_dummy_var_42: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 1189} DEVPKEY_Device_ProblemCode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ProblemCode__Loc == DEVPKEY_Device_ProblemCode;
    assume DEVPKEY_Device_ProblemCode != 0;
    call {:si_unique_call 1190} DEVPKEY_Device_DHP_Rebalance_Policy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DHP_Rebalance_Policy__Loc == DEVPKEY_Device_DHP_Rebalance_Policy;
    assume DEVPKEY_Device_DHP_Rebalance_Policy != 0;
    call {:si_unique_call 1191} GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc == GUID_NWF_DATA_RATE_MAPPING_TABLE;
    assume GUID_NWF_DATA_RATE_MAPPING_TABLE != 0;
    call {:si_unique_call 1192} DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc == DEVPKEY_DeviceContainer_IsMetadataSearchInProgress;
    assume DEVPKEY_DeviceContainer_IsMetadataSearchInProgress != 0;
    call {:si_unique_call 1193} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1194} DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc == DEVPKEY_DeviceContainer_IsShowInDisconnectedState;
    assume DEVPKEY_DeviceContainer_IsShowInDisconnectedState != 0;
    call {:si_unique_call 1195} GUID_NWF_FRAGMENTATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FRAGMENTATION_THRESHOLD__Loc == GUID_NWF_FRAGMENTATION_THRESHOLD;
    assume GUID_NWF_FRAGMENTATION_THRESHOLD != 0;
    call {:si_unique_call 1196} GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc == GUID_NWF_MAX_MAC_ADDRESS_STATES;
    assume GUID_NWF_MAX_MAC_ADDRESS_STATES != 0;
    call {:si_unique_call 1197} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1198} DEVPKEY_Device_SafeRemovalRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SafeRemovalRequired__Loc == DEVPKEY_Device_SafeRemovalRequired;
    assume DEVPKEY_Device_SafeRemovalRequired != 0;
    call {:si_unique_call 1199} DEVPKEY_PciRootBus_PCIExpressAERControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressAERControl__Loc == DEVPKEY_PciRootBus_PCIExpressAERControl;
    assume DEVPKEY_PciRootBus_PCIExpressAERControl != 0;
    call {:si_unique_call 1200} DEVPKEY_PciDevice_BaseClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_BaseClass__Loc == DEVPKEY_PciDevice_BaseClass;
    assume DEVPKEY_PciDevice_BaseClass != 0;
    call {:si_unique_call 1201} GUID_NWF_ACTIVE_PHY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ACTIVE_PHY_LIST__Loc == GUID_NWF_ACTIVE_PHY_LIST;
    assume GUID_NWF_ACTIVE_PHY_LIST != 0;
    call {:si_unique_call 1202} DEVPKEY_Device_ResourcePickerTags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ResourcePickerTags__Loc == DEVPKEY_Device_ResourcePickerTags;
    assume DEVPKEY_Device_ResourcePickerTags != 0;
    call {:si_unique_call 1203} DEVPKEY_DeviceContainer_IsPaired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsPaired__Loc == DEVPKEY_DeviceContainer_IsPaired;
    assume DEVPKEY_DeviceContainer_IsPaired != 0;
    call {:si_unique_call 1204} DEVPKEY_Device_HardwareIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_HardwareIds__Loc == DEVPKEY_Device_HardwareIds;
    assume DEVPKEY_Device_HardwareIds != 0;
    call {:si_unique_call 1205} DEVPKEY_DeviceContainer_InstallInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_InstallInProgress__Loc == DEVPKEY_DeviceContainer_InstallInProgress;
    assume DEVPKEY_DeviceContainer_InstallInProgress != 0;
    call {:si_unique_call 1206} DEVPKEY_PciDevice_MaxPayloadSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxPayloadSize__Loc == DEVPKEY_PciDevice_MaxPayloadSize;
    assume DEVPKEY_PciDevice_MaxPayloadSize != 0;
    call {:si_unique_call 1207} GUID_NWF_COUNTRY_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_COUNTRY_STRING__Loc == GUID_NWF_COUNTRY_STRING;
    assume GUID_NWF_COUNTRY_STRING != 0;
    call {:si_unique_call 1208} DEVPKEY_Device_LowerFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LowerFilters__Loc == DEVPKEY_Device_LowerFilters;
    assume DEVPKEY_Device_LowerFilters != 0;
    call {:si_unique_call 1209} DEVPKEY_Device_FirmwareVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareVersion__Loc == DEVPKEY_Device_FirmwareVersion;
    assume DEVPKEY_Device_FirmwareVersion != 0;
    call {:si_unique_call 1210} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 1211} GUID_NWF_CURRENT_INDEX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_INDEX__Loc == GUID_NWF_CURRENT_INDEX;
    assume GUID_NWF_CURRENT_INDEX != 0;
    call {:si_unique_call 1212} GUID_NWF_TI_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_TI_THRESHOLD__Loc == GUID_NWF_TI_THRESHOLD;
    assume GUID_NWF_TI_THRESHOLD != 0;
    call {:si_unique_call 1213} GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc == GUID_NWF_ERP_PBCC_OPTION_ENABLED;
    assume GUID_NWF_ERP_PBCC_OPTION_ENABLED != 0;
    call {:si_unique_call 1214} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 1215} DEVPKEY_PciDevice_BarTypes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_BarTypes__Loc == DEVPKEY_PciDevice_BarTypes;
    assume DEVPKEY_PciDevice_BarTypes != 0;
    call {:si_unique_call 1216} GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc == GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM;
    assume GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM != 0;
    call {:si_unique_call 1217} GUID_POWER_CONSERVATION_IDLE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_CONSERVATION_IDLE_TIME__Loc == GUID_POWER_CONSERVATION_IDLE_TIME;
    assume GUID_POWER_CONSERVATION_IDLE_TIME != 0;
    call {:si_unique_call 1218} GUID_NWF_RECV_SENSITIVITY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RECV_SENSITIVITY_LIST__Loc == GUID_NWF_RECV_SENSITIVITY_LIST;
    assume GUID_NWF_RECV_SENSITIVITY_LIST != 0;
    call {:si_unique_call 1219} DEVPKEY_DeviceClass_UpperFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_UpperFilters__Loc == DEVPKEY_DeviceClass_UpperFilters;
    assume DEVPKEY_DeviceClass_UpperFilters != 0;
    call {:si_unique_call 1220} DEVPKEY_DeviceClass_NoInstallClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoInstallClass__Loc == DEVPKEY_DeviceClass_NoInstallClass;
    assume DEVPKEY_DeviceClass_NoInstallClass != 0;
    call {:si_unique_call 1221} GUID_NWF_RANDOM_TABLE_FLAG__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RANDOM_TABLE_FLAG__Loc == GUID_NWF_RANDOM_TABLE_FLAG;
    assume GUID_NWF_RANDOM_TABLE_FLAG != 0;
    call {:si_unique_call 1222} DEVPKEY_Device_DeviceDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DeviceDesc__Loc == DEVPKEY_Device_DeviceDesc;
    assume DEVPKEY_Device_DeviceDesc != 0;
    call {:si_unique_call 1223} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 1224} DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc == DEVPKEY_PciDevice_Uncorrectable_Error_Mask;
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Mask != 0;
    call {:si_unique_call 1225} GUID_NWF_RF_USAGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RF_USAGE__Loc == GUID_NWF_RF_USAGE;
    assume GUID_NWF_RF_USAGE != 0;
    call {:si_unique_call 1226} DEVPKEY_DeviceContainer_IsEncrypted__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsEncrypted__Loc == DEVPKEY_DeviceContainer_IsEncrypted;
    assume DEVPKEY_DeviceContainer_IsEncrypted != 0;
    call {:si_unique_call 1227} DEVPKEY_Device_LastArrivalDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LastArrivalDate__Loc == DEVPKEY_Device_LastArrivalDate;
    assume DEVPKEY_Device_LastArrivalDate != 0;
    call {:si_unique_call 1228} GUID_NWF_RSSI_RANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RSSI_RANGE__Loc == GUID_NWF_RSSI_RANGE;
    assume GUID_NWF_RSSI_RANGE != 0;
    call {:si_unique_call 1229} GUID_NWF_CURRENT_PHY_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PHY_ID__Loc == GUID_NWF_CURRENT_PHY_ID;
    assume GUID_NWF_CURRENT_PHY_ID != 0;
    call {:si_unique_call 1230} GUID_NWF_JOIN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_JOIN_REQUEST__Loc == GUID_NWF_JOIN_REQUEST;
    assume GUID_NWF_JOIN_REQUEST != 0;
    call {:si_unique_call 1231} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1232} DEVPKEY_Device_Characteristics__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Characteristics__Loc == DEVPKEY_Device_Characteristics;
    assume DEVPKEY_Device_Characteristics != 0;
    call {:si_unique_call 1233} DEVPKEY_DrvPkg_DetailedDescription__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_DetailedDescription__Loc == DEVPKEY_DrvPkg_DetailedDescription;
    assume DEVPKEY_DrvPkg_DetailedDescription != 0;
    call {:si_unique_call 1234} DEVPKEY_DeviceContainer_DeviceDescription2__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceDescription2__Loc == DEVPKEY_DeviceContainer_DeviceDescription2;
    assume DEVPKEY_DeviceContainer_DeviceDescription2 != 0;
    call {:si_unique_call 1235} DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc == DEVPKEY_DeviceContainer_CategoryGroup_Desc;
    assume DEVPKEY_DeviceContainer_CategoryGroup_Desc != 0;
    call {:si_unique_call 1236} DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc == DEVPKEY_PciRootBus_CurrentSpeedAndMode;
    assume DEVPKEY_PciRootBus_CurrentSpeedAndMode != 0;
    call {:si_unique_call 1237} GUID_NWF_RTS_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RTS_THRESHOLD__Loc == GUID_NWF_RTS_THRESHOLD;
    assume GUID_NWF_RTS_THRESHOLD != 0;
    call {:si_unique_call 1238} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1239} DEVPKEY_DeviceClass_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Icon__Loc == DEVPKEY_DeviceClass_Icon;
    assume DEVPKEY_DeviceClass_Icon != 0;
    call {:si_unique_call 1240} DEVPKEY_DeviceInterfaceClass_Name__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterfaceClass_Name__Loc == DEVPKEY_DeviceInterfaceClass_Name;
    assume DEVPKEY_DeviceInterfaceClass_Name != 0;
    call {:si_unique_call 1241} GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc == GUID_NWF_PRIVACY_EXEMPTION_LIST;
    assume GUID_NWF_PRIVACY_EXEMPTION_LIST != 0;
    call {:si_unique_call 1242} DEVPKEY_Device_InstanceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstanceId__Loc == DEVPKEY_Device_InstanceId;
    assume DEVPKEY_Device_InstanceId != 0;
    call {:si_unique_call 1243} GUID_NWF_SUPPORTED_RX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_RX_ANTENNA__Loc == GUID_NWF_SUPPORTED_RX_ANTENNA;
    assume GUID_NWF_SUPPORTED_RX_ANTENNA != 0;
    call {:si_unique_call 1244} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 1245} DEVPKEY_Device_LastRemovalDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LastRemovalDate__Loc == DEVPKEY_Device_LastRemovalDate;
    assume DEVPKEY_Device_LastRemovalDate != 0;
    call {:si_unique_call 1246} DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc == DEVPKEY_DeviceContainer_RequiresPairingElevation;
    assume DEVPKEY_DeviceContainer_RequiresPairingElevation != 0;
    call {:si_unique_call 1247} GUID_NWF_POWER_MGMT_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_POWER_MGMT_MODE__Loc == GUID_NWF_POWER_MGMT_MODE;
    assume GUID_NWF_POWER_MGMT_MODE != 0;
    call {:si_unique_call 1248} GUID_NWF_ED_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ED_THRESHOLD__Loc == GUID_NWF_ED_THRESHOLD;
    assume GUID_NWF_ED_THRESHOLD != 0;
    call {:si_unique_call 1249} DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc == DEVPKEY_DeviceContainer_RequiresUninstallElevation;
    assume DEVPKEY_DeviceContainer_RequiresUninstallElevation != 0;
    call {:si_unique_call 1250} GUID_NWF_OPERATION_MODE_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPERATION_MODE_CAPABILITY__Loc == GUID_NWF_OPERATION_MODE_CAPABILITY;
    assume GUID_NWF_OPERATION_MODE_CAPABILITY != 0;
    call {:si_unique_call 1251} DEVPKEY_Device_Manufacturer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Manufacturer__Loc == DEVPKEY_Device_Manufacturer;
    assume DEVPKEY_Device_Manufacturer != 0;
    call {:si_unique_call 1252} DEVPKEY_Device_DriverLogoLevel__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverLogoLevel__Loc == DEVPKEY_Device_DriverLogoLevel;
    assume DEVPKEY_Device_DriverLogoLevel != 0;
    call {:si_unique_call 1253} DEVPKEY_DeviceContainer_Address__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Address__Loc == DEVPKEY_DeviceContainer_Address;
    assume DEVPKEY_DeviceContainer_Address != 0;
    call {:si_unique_call 1254} DEVPKEY_DeviceContainer_IsAuthenticated__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsAuthenticated__Loc == DEVPKEY_DeviceContainer_IsAuthenticated;
    assume DEVPKEY_DeviceContainer_IsAuthenticated != 0;
    call {:si_unique_call 1255} DEVPKEY_PciDevice_SubClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_SubClass__Loc == DEVPKEY_PciDevice_SubClass;
    assume DEVPKEY_PciDevice_SubClass != 0;
    call {:si_unique_call 1256} GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc == GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED;
    assume GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1257} DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc == DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames;
    assume DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames != 0;
    call {:si_unique_call 1258} GUID_NWF_PERMANENT_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PERMANENT_ADDRESS__Loc == GUID_NWF_PERMANENT_ADDRESS;
    assume GUID_NWF_PERMANENT_ADDRESS != 0;
    call {:si_unique_call 1259} DEVPKEY_Device_ConfigurationId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ConfigurationId__Loc == DEVPKEY_Device_ConfigurationId;
    assume DEVPKEY_Device_ConfigurationId != 0;
    call {:si_unique_call 1260} GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc == GUID_NWF_CURRENT_TX_POWER_LEVEL;
    assume GUID_NWF_CURRENT_TX_POWER_LEVEL != 0;
    call {:si_unique_call 1261} GUID_DEVINTERFACE_PCIDRV__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_PCIDRV__Loc == GUID_DEVINTERFACE_PCIDRV;
    assume GUID_DEVINTERFACE_PCIDRV != 0;
    call {:si_unique_call 1262} DEVPKEY_Device_HasProblem__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_HasProblem__Loc == DEVPKEY_Device_HasProblem;
    assume DEVPKEY_Device_HasProblem != 0;
    call {:si_unique_call 1263} DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc == DEVPKEY_DeviceContainer_Category_Desc_Plural;
    assume DEVPKEY_DeviceContainer_Category_Desc_Plural != 0;
    call {:si_unique_call 1264} GUID_NWF_MEDIA_STREAMING_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MEDIA_STREAMING_ENABLED__Loc == GUID_NWF_MEDIA_STREAMING_ENABLED;
    assume GUID_NWF_MEDIA_STREAMING_ENABLED != 0;
    call {:si_unique_call 1265} DEVPKEY_PciDevice_AriSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AriSupport__Loc == DEVPKEY_PciDevice_AriSupport;
    assume DEVPKEY_PciDevice_AriSupport != 0;
    call {:si_unique_call 1266} GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc == GUID_NWF_CCA_WATCHDOG_TIMER_MAX;
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MAX != 0;
    call {:si_unique_call 1267} GUID_NWF_PMKID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PMKID_LIST__Loc == GUID_NWF_PMKID_LIST;
    assume GUID_NWF_PMKID_LIST != 0;
    call {:si_unique_call 1268} DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc == DEVPKEY_PciRootBus_DeviceIDMessagingCapable;
    assume DEVPKEY_PciRootBus_DeviceIDMessagingCapable != 0;
    call {:si_unique_call 1269} DEVPKEY_Device_PhysicalDeviceLocation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PhysicalDeviceLocation__Loc == DEVPKEY_Device_PhysicalDeviceLocation;
    assume DEVPKEY_Device_PhysicalDeviceLocation != 0;
    call {:si_unique_call 1270} DEVPKEY_DeviceContainer_Version__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Version__Loc == DEVPKEY_DeviceContainer_Version;
    assume DEVPKEY_DeviceContainer_Version != 0;
    call {:si_unique_call 1271} GUID_NWF_BEACON_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_BEACON_PERIOD__Loc == GUID_NWF_BEACON_PERIOD;
    assume GUID_NWF_BEACON_PERIOD != 0;
    call {:si_unique_call 1272} GUID_NWF_DESIRED_SSID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_SSID_LIST__Loc == GUID_NWF_DESIRED_SSID_LIST;
    assume GUID_NWF_DESIRED_SSID_LIST != 0;
    call {:si_unique_call 1273} DEVPKEY_PciRootBus_ASPMSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ASPMSupport__Loc == DEVPKEY_PciRootBus_ASPMSupport;
    assume DEVPKEY_PciRootBus_ASPMSupport != 0;
    call {:si_unique_call 1274} GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc == GUID_NWF_CURRENT_OFFLOAD_CAPABILITY;
    assume GUID_NWF_CURRENT_OFFLOAD_CAPABILITY != 0;
    call {:si_unique_call 1275} DEVPKEY_Device_PostInstallInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PostInstallInProgress__Loc == DEVPKEY_Device_PostInstallInProgress;
    assume DEVPKEY_Device_PostInstallInProgress != 0;
    call {:si_unique_call 1276} GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED != 0;
    call {:si_unique_call 1277} DEVPKEY_Device_Driver__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Driver__Loc == DEVPKEY_Device_Driver;
    assume DEVPKEY_Device_Driver != 0;
    call {:si_unique_call 1278} DEVPKEY_PciDevice_CurrentPayloadSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentPayloadSize__Loc == DEVPKEY_PciDevice_CurrentPayloadSize;
    assume DEVPKEY_PciDevice_CurrentPayloadSize != 0;
    call {:si_unique_call 1279} GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc == GUID_NWF_DSSS_OFDM_OPTION_ENABLED;
    assume GUID_NWF_DSSS_OFDM_OPTION_ENABLED != 0;
    call {:si_unique_call 1280} GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc == GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST;
    assume GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST != 0;
    call {:si_unique_call 1281} DEVPKEY_Device_InstallState__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstallState__Loc == DEVPKEY_Device_InstallState;
    assume DEVPKEY_Device_InstallState != 0;
    call {:si_unique_call 1282} GUID_NWF_MAX_DWELL_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_DWELL_TIME__Loc == GUID_NWF_MAX_DWELL_TIME;
    assume GUID_NWF_MAX_DWELL_TIME != 0;
    call {:si_unique_call 1283} GUID_NWF_WPA_TSC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WPA_TSC__Loc == GUID_NWF_WPA_TSC;
    assume GUID_NWF_WPA_TSC != 0;
    call {:si_unique_call 1284} GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc == GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED;
    assume GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1285} GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc == GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM;
    assume GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM != 0;
    call {:si_unique_call 1286} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 1287} DEVPKEY_PciDevice_Label_String__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Label_String__Loc == DEVPKEY_PciDevice_Label_String;
    assume DEVPKEY_PciDevice_Label_String != 0;
    call {:si_unique_call 1288} GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc == GUID_NWF_NUMBER_OF_HOPPING_SETS;
    assume GUID_NWF_NUMBER_OF_HOPPING_SETS != 0;
    call {:si_unique_call 1289} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 1290} DEVPKEY_Device_FirmwareDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareDate__Loc == DEVPKEY_Device_FirmwareDate;
    assume DEVPKEY_Device_FirmwareDate != 0;
    call {:si_unique_call 1291} DEVPKEY_PciDevice_SriovSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_SriovSupport__Loc == DEVPKEY_PciDevice_SriovSupport;
    assume DEVPKEY_PciDevice_SriovSupport != 0;
    call {:si_unique_call 1292} GUID_NWF_SAFE_MODE_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SAFE_MODE_ENABLED__Loc == GUID_NWF_SAFE_MODE_ENABLED;
    assume GUID_NWF_SAFE_MODE_ENABLED != 0;
    call {:si_unique_call 1293} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1294} DEVPKEY_DeviceInterface_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_FriendlyName__Loc == DEVPKEY_DeviceInterface_FriendlyName;
    assume DEVPKEY_DeviceInterface_FriendlyName != 0;
    call {:si_unique_call 1295} DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc == DEVPKEY_PciDevice_Uncorrectable_Error_Severity;
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Severity != 0;
    call {:si_unique_call 1296} DEVPKEY_PciDevice_S0WakeupSupported__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_S0WakeupSupported__Loc == DEVPKEY_PciDevice_S0WakeupSupported;
    assume DEVPKEY_PciDevice_S0WakeupSupported != 0;
    call {:si_unique_call 1297} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 1298} DEVPKEY_PciDevice_InterruptSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_InterruptSupport__Loc == DEVPKEY_PciDevice_InterruptSupport;
    assume DEVPKEY_PciDevice_InterruptSupport != 0;
    call {:si_unique_call 1299} DEVPKEY_PciDevice_Label_Id__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Label_Id__Loc == DEVPKEY_PciDevice_Label_Id;
    assume DEVPKEY_PciDevice_Label_Id != 0;
    call {:si_unique_call 1300} DEVPKEY_Device_CompatibleIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_CompatibleIds__Loc == DEVPKEY_Device_CompatibleIds;
    assume DEVPKEY_Device_CompatibleIds != 0;
    call {:si_unique_call 1301} DEVPKEY_Device_ReportedDeviceIdsHash__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ReportedDeviceIdsHash__Loc == DEVPKEY_Device_ReportedDeviceIdsHash;
    assume DEVPKEY_Device_ReportedDeviceIdsHash != 0;
    call {:si_unique_call 1302} DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc == DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport;
    assume DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport != 0;
    call {:si_unique_call 1303} GUID_NWF_CURRENT_CHANNEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CHANNEL__Loc == GUID_NWF_CURRENT_CHANNEL;
    assume GUID_NWF_CURRENT_CHANNEL != 0;
    call {:si_unique_call 1304} GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc == GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED;
    assume GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED != 0;
    call {:si_unique_call 1305} DEVPKEY_Device_DriverPropPageProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverPropPageProvider__Loc == DEVPKEY_Device_DriverPropPageProvider;
    assume DEVPKEY_Device_DriverPropPageProvider != 0;
    call {:si_unique_call 1306} DEVPKEY_DeviceContainer_UnpairUninstall__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_UnpairUninstall__Loc == DEVPKEY_DeviceContainer_UnpairUninstall;
    assume DEVPKEY_DeviceContainer_UnpairUninstall != 0;
    call {:si_unique_call 1307} DEVPKEY_PciDevice_CurrentLinkSpeed__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentLinkSpeed__Loc == DEVPKEY_PciDevice_CurrentLinkSpeed;
    assume DEVPKEY_PciDevice_CurrentLinkSpeed != 0;
    call {:si_unique_call 1308} GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc == GUID_NWF_NIC_SPECIFIC_EXTENSION;
    assume GUID_NWF_NIC_SPECIFIC_EXTENSION != 0;
    call {:si_unique_call 1309} DEVPKEY_Device_BiosDeviceName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BiosDeviceName__Loc == DEVPKEY_Device_BiosDeviceName;
    assume DEVPKEY_Device_BiosDeviceName != 0;
    call {:si_unique_call 1310} GUID_NWF_CFP_MAX_DURATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CFP_MAX_DURATION__Loc == GUID_NWF_CFP_MAX_DURATION;
    assume GUID_NWF_CFP_MAX_DURATION != 0;
    call {:si_unique_call 1311} GUID_NWF_HOPPING_PATTERN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOPPING_PATTERN__Loc == GUID_NWF_HOPPING_PATTERN;
    assume GUID_NWF_HOPPING_PATTERN != 0;
    call {:si_unique_call 1312} GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc == GUID_NWF_CURRENT_CHANNEL_NUMBER;
    assume GUID_NWF_CURRENT_CHANNEL_NUMBER != 0;
    call {:si_unique_call 1313} GUID_NWF_DISCONNECT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DISCONNECT_REQUEST__Loc == GUID_NWF_DISCONNECT_REQUEST;
    assume GUID_NWF_DISCONNECT_REQUEST != 0;
    call {:si_unique_call 1314} GUID_NWF_CURRENT_PACKET_FILTER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PACKET_FILTER__Loc == GUID_NWF_CURRENT_PACKET_FILTER;
    assume GUID_NWF_CURRENT_PACKET_FILTER != 0;
    call {:si_unique_call 1315} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1316} DEVPKEY_Device_PowerRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PowerRelations__Loc == DEVPKEY_Device_PowerRelations;
    assume DEVPKEY_Device_PowerRelations != 0;
    call {:si_unique_call 1317} DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc == DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer;
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer != 0;
    call {:si_unique_call 1318} GUID_NWF_SUPPORTED_PHY_TYPES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_PHY_TYPES__Loc == GUID_NWF_SUPPORTED_PHY_TYPES;
    assume GUID_NWF_SUPPORTED_PHY_TYPES != 0;
    call {:si_unique_call 1319} GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc == GUID_NWF_HOP_ALGORITHM_ADOPTED;
    assume GUID_NWF_HOP_ALGORITHM_ADOPTED != 0;
    call {:si_unique_call 1320} DEVPKEY_DrvPkg_BrandingIcon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_BrandingIcon__Loc == DEVPKEY_DrvPkg_BrandingIcon;
    assume DEVPKEY_DrvPkg_BrandingIcon != 0;
    call {:si_unique_call 1321} DEVPKEY_DeviceClass_Characteristics__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Characteristics__Loc == DEVPKEY_DeviceClass_Characteristics;
    assume DEVPKEY_DeviceClass_Characteristics != 0;
    call {:si_unique_call 1322} GUID_NWF_SCAN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SCAN_REQUEST__Loc == GUID_NWF_SCAN_REQUEST;
    assume GUID_NWF_SCAN_REQUEST != 0;
    call {:si_unique_call 1323} GUID_NWF_DESIRED_BSS_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_BSS_TYPE__Loc == GUID_NWF_DESIRED_BSS_TYPE;
    assume GUID_NWF_DESIRED_BSS_TYPE != 0;
    call {:si_unique_call 1324} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 1325} DEVPKEY_Device_MatchingDeviceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_MatchingDeviceId__Loc == DEVPKEY_Device_MatchingDeviceId;
    assume DEVPKEY_Device_MatchingDeviceId != 0;
    call {:si_unique_call 1326} GUID_NWF_EXCLUDE_UNENCRYPTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXCLUDE_UNENCRYPTED__Loc == GUID_NWF_EXCLUDE_UNENCRYPTED;
    assume GUID_NWF_EXCLUDE_UNENCRYPTED != 0;
    call {:si_unique_call 1327} GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc == GUID_QUERY_CRASHDUMP_FUNCTIONS;
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS != 0;
    call {:si_unique_call 1328} GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc == GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST;
    assume GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST != 0;
    call {:si_unique_call 1329} DEVPKEY_Device_PDOName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PDOName__Loc == DEVPKEY_Device_PDOName;
    assume DEVPKEY_Device_PDOName != 0;
    call {:si_unique_call 1330} DEVPKEY_Device_Address__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Address__Loc == DEVPKEY_Device_Address;
    assume DEVPKEY_Device_Address != 0;
    call {:si_unique_call 1331} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 1332} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1333} DEVPKEY_DeviceClass_Exclusive__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Exclusive__Loc == DEVPKEY_DeviceClass_Exclusive;
    assume DEVPKEY_DeviceClass_Exclusive != 0;
    call {:si_unique_call 1334} DEVPKEY_PciDevice_Correctable_Error_Mask__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Correctable_Error_Mask__Loc == DEVPKEY_PciDevice_Correctable_Error_Mask;
    assume DEVPKEY_PciDevice_Correctable_Error_Mask != 0;
    call {:si_unique_call 1335} DEVPKEY_DeviceContainer_DeviceDescription1__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceDescription1__Loc == DEVPKEY_DeviceContainer_DeviceDescription1;
    assume DEVPKEY_DeviceContainer_DeviceDescription1 != 0;
    call {:si_unique_call 1336} GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc == GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED;
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED != 0;
    call {:si_unique_call 1337} DEVPKEY_DeviceContainer_Manufacturer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Manufacturer__Loc == DEVPKEY_DeviceContainer_Manufacturer;
    assume DEVPKEY_DeviceContainer_Manufacturer != 0;
    call {:si_unique_call 1338} DEVPKEY_DeviceClass_NoUseClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoUseClass__Loc == DEVPKEY_DeviceClass_NoUseClass;
    assume DEVPKEY_DeviceClass_NoUseClass != 0;
    call {:si_unique_call 1339} GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc == GUID_NWF_SUPPORTED_DATA_RATES_VALUE;
    assume GUID_NWF_SUPPORTED_DATA_RATES_VALUE != 0;
    call {:si_unique_call 1340} GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc == GUID_NWF_CHANNEL_AGILITY_ENABLED;
    assume GUID_NWF_CHANNEL_AGILITY_ENABLED != 0;
    call {:si_unique_call 1341} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1342} DEVPKEY_PciDevice_MaxLinkWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxLinkWidth__Loc == DEVPKEY_PciDevice_MaxLinkWidth;
    assume DEVPKEY_PciDevice_MaxLinkWidth != 0;
    call {:si_unique_call 1343} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1344} DEVPKEY_Device_DevNodeStatus__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DevNodeStatus__Loc == DEVPKEY_Device_DevNodeStatus;
    assume DEVPKEY_Device_DevNodeStatus != 0;
    call {:si_unique_call 1345} GUID_NWF_WME_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_ENABLED__Loc == GUID_NWF_WME_ENABLED;
    assume GUID_NWF_WME_ENABLED != 0;
    call {:si_unique_call 1346} DEVPKEY_Device_DriverProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverProvider__Loc == DEVPKEY_Device_DriverProvider;
    assume DEVPKEY_Device_DriverProvider != 0;
    call {:si_unique_call 1347} DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc == DEVPKEY_DeviceContainer_CategoryGroup_Icon;
    assume DEVPKEY_DeviceContainer_CategoryGroup_Icon != 0;
    call {:si_unique_call 1348} DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc == DEVPKEY_PciDevice_CurrentSpeedAndMode;
    assume DEVPKEY_PciDevice_CurrentSpeedAndMode != 0;
    call {:si_unique_call 1349} DEVPKEY_PciDevice_AERCapabilityPresent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AERCapabilityPresent__Loc == DEVPKEY_PciDevice_AERCapabilityPresent;
    assume DEVPKEY_PciDevice_AERCapabilityPresent != 0;
    call {:si_unique_call 1350} GUID_NWF_WME_AC_PARAMETERS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_AC_PARAMETERS__Loc == GUID_NWF_WME_AC_PARAMETERS;
    assume GUID_NWF_WME_AC_PARAMETERS != 0;
    call {:si_unique_call 1351} DEVPKEY_Device_ModelId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ModelId__Loc == DEVPKEY_Device_ModelId;
    assume DEVPKEY_Device_ModelId != 0;
    call {:si_unique_call 1352} GUID_NWF_AP_JOIN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_AP_JOIN_REQUEST__Loc == GUID_NWF_AP_JOIN_REQUEST;
    assume GUID_NWF_AP_JOIN_REQUEST != 0;
    call {:si_unique_call 1353} DEVPKEY_DeviceContainer_PrimaryCategory__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_PrimaryCategory__Loc == DEVPKEY_DeviceContainer_PrimaryCategory;
    assume DEVPKEY_DeviceContainer_PrimaryCategory != 0;
    call {:si_unique_call 1354} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 1355} DEVPKEY_Device_Children__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Children__Loc == DEVPKEY_Device_Children;
    assume DEVPKEY_Device_Children != 0;
    call {:si_unique_call 1356} DEVPKEY_Device_Stack__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Stack__Loc == DEVPKEY_Device_Stack;
    assume DEVPKEY_Device_Stack != 0;
    call {:si_unique_call 1357} DEVPKEY_DeviceContainer_IsLocalMachine__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsLocalMachine__Loc == DEVPKEY_DeviceContainer_IsLocalMachine;
    assume DEVPKEY_DeviceContainer_IsLocalMachine != 0;
    call {:si_unique_call 1358} GUID_NWF_MPDU_MAX_LENGTH__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MPDU_MAX_LENGTH__Loc == GUID_NWF_MPDU_MAX_LENGTH;
    assume GUID_NWF_MPDU_MAX_LENGTH != 0;
    call {:si_unique_call 1359} GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc == GUID_NWF_CURRENT_OPTIONAL_CAPABILITY;
    assume GUID_NWF_CURRENT_OPTIONAL_CAPABILITY != 0;
    call {:si_unique_call 1360} DEVPKEY_Device_DriverDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverDate__Loc == DEVPKEY_Device_DriverDate;
    assume DEVPKEY_Device_DriverDate != 0;
    call {:si_unique_call 1361} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 1362} GUID_NWF_STATION_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_STATION_ID__Loc == GUID_NWF_STATION_ID;
    assume GUID_NWF_STATION_ID != 0;
    call {:si_unique_call 1363} GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc == GUID_NWF_REG_DOMAINS_SUPPORT_VALUE;
    assume GUID_NWF_REG_DOMAINS_SUPPORT_VALUE != 0;
    call {:si_unique_call 1364} DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc == DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect;
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect != 0;
    call {:si_unique_call 1365} GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc == GUID_NWF_MEDIUM_OCCUPANCY_LIMIT;
    assume GUID_NWF_MEDIUM_OCCUPANCY_LIMIT != 0;
    call {:si_unique_call 1366} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 1367} DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc == DEVPKEY_DeviceContainer_DeviceFunctionSubRank;
    assume DEVPKEY_DeviceContainer_DeviceFunctionSubRank != 0;
    call {:si_unique_call 1368} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 1369} DEVPKEY_Device_DriverDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverDesc__Loc == DEVPKEY_Device_DriverDesc;
    assume DEVPKEY_Device_DriverDesc != 0;
    call {:si_unique_call 1370} GUID_NWF_HOP_MODULUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_MODULUS__Loc == GUID_NWF_HOP_MODULUS;
    assume GUID_NWF_HOP_MODULUS != 0;
    call {:si_unique_call 1371} DEVPKEY_DeviceClass_NoDisplayClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoDisplayClass__Loc == DEVPKEY_DeviceClass_NoDisplayClass;
    assume DEVPKEY_DeviceClass_NoDisplayClass != 0;
    call {:si_unique_call 1372} GUID_NWF_OFFLOAD_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OFFLOAD_CAPABILITY__Loc == GUID_NWF_OFFLOAD_CAPABILITY;
    assume GUID_NWF_OFFLOAD_CAPABILITY != 0;
    call {:si_unique_call 1373} GUID_NWF_SUPPORTED_POWER_LEVELS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_POWER_LEVELS__Loc == GUID_NWF_SUPPORTED_POWER_LEVELS;
    assume GUID_NWF_SUPPORTED_POWER_LEVELS != 0;
    call {:si_unique_call 1374} GUID_NWF_DIVERSITY_SELECTION_RX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DIVERSITY_SELECTION_RX__Loc == GUID_NWF_DIVERSITY_SELECTION_RX;
    assume GUID_NWF_DIVERSITY_SELECTION_RX != 0;
    call {:si_unique_call 1375} GUID_NWF_WME_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_IMPLEMENTED__Loc == GUID_NWF_WME_IMPLEMENTED;
    assume GUID_NWF_WME_IMPLEMENTED != 0;
    call {:si_unique_call 1376} DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc == DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected;
    assume DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected != 0;
    call {:si_unique_call 1377} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 1378} DEVPKEY_Device_BusNumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusNumber__Loc == DEVPKEY_Device_BusNumber;
    assume DEVPKEY_Device_BusNumber != 0;
    call {:si_unique_call 1379} DEVPKEY_Device_PowerData__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PowerData__Loc == DEVPKEY_Device_PowerData;
    assume DEVPKEY_Device_PowerData != 0;
    call {:si_unique_call 1380} DEVPKEY_Device_ConfigFlags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ConfigFlags__Loc == DEVPKEY_Device_ConfigFlags;
    assume DEVPKEY_Device_ConfigFlags != 0;
    call {:si_unique_call 1381} DEVPKEY_PciDevice_MaxReadRequestSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxReadRequestSize__Loc == DEVPKEY_PciDevice_MaxReadRequestSize;
    assume DEVPKEY_PciDevice_MaxReadRequestSize != 0;
    call {:si_unique_call 1382} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 1383} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 1384} DEVPKEY_DeviceContainer_MetadataPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataPath__Loc == DEVPKEY_DeviceContainer_MetadataPath;
    assume DEVPKEY_DeviceContainer_MetadataPath != 0;
    call {:si_unique_call 1385} GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc == GUID_NWF_CIPHER_DEFAULT_KEY_ID;
    assume GUID_NWF_CIPHER_DEFAULT_KEY_ID != 0;
    call {:si_unique_call 1386} GUID_NWF_CURRENT_SET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_SET__Loc == GUID_NWF_CURRENT_SET;
    assume GUID_NWF_CURRENT_SET != 0;
    call {:si_unique_call 1387} GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc == GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR;
    assume GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR != 0;
    call {:si_unique_call 1388} DEVPKEY_DeviceContainer_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_FriendlyName__Loc == DEVPKEY_DeviceContainer_FriendlyName;
    assume DEVPKEY_DeviceContainer_FriendlyName != 0;
    call {:si_unique_call 1389} DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc == DEVPKEY_PciRootBus_SupportedSpeedsAndModes;
    assume DEVPKEY_PciRootBus_SupportedSpeedsAndModes != 0;
    call {:si_unique_call 1390} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1391} DEVPKEY_Device_PresenceNotForDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PresenceNotForDevice__Loc == DEVPKEY_Device_PresenceNotForDevice;
    assume DEVPKEY_Device_PresenceNotForDevice != 0;
    call {:si_unique_call 1392} GUID_NWF_DESIRED_BSSID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_BSSID_LIST__Loc == GUID_NWF_DESIRED_BSSID_LIST;
    assume GUID_NWF_DESIRED_BSSID_LIST != 0;
    call {:si_unique_call 1393} GUID_NWF_ENUM_ASSOCIATION_INFO__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENUM_ASSOCIATION_INFO__Loc == GUID_NWF_ENUM_ASSOCIATION_INFO;
    assume GUID_NWF_ENUM_ASSOCIATION_INFO != 0;
    call {:si_unique_call 1394} DEVPKEY_DeviceInterface_ClassGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_ClassGuid__Loc == DEVPKEY_DeviceInterface_ClassGuid;
    assume DEVPKEY_DeviceInterface_ClassGuid != 0;
    call {:si_unique_call 1395} DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc == DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable;
    assume DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable != 0;
    call {:si_unique_call 1396} DEVPKEY_Device_FriendlyNameAttributes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FriendlyNameAttributes__Loc == DEVPKEY_Device_FriendlyNameAttributes;
    assume DEVPKEY_Device_FriendlyNameAttributes != 0;
    call {:si_unique_call 1397} GUID_NWF_NIC_POWER_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NIC_POWER_STATE__Loc == GUID_NWF_NIC_POWER_STATE;
    assume GUID_NWF_NIC_POWER_STATE != 0;
    call {:si_unique_call 1398} GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc == GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST;
    assume GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST != 0;
    call {:si_unique_call 1399} DEVPKEY_Device_SessionId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SessionId__Loc == DEVPKEY_Device_SessionId;
    assume DEVPKEY_Device_SessionId != 0;
    call {:si_unique_call 1400} DEVPKEY_DeviceInterface_Enabled__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_Enabled__Loc == DEVPKEY_DeviceInterface_Enabled;
    assume DEVPKEY_DeviceInterface_Enabled != 0;
    call {:si_unique_call 1401} DEVPKEY_DeviceInterface_Restricted__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_Restricted__Loc == DEVPKEY_DeviceInterface_Restricted;
    assume DEVPKEY_DeviceInterface_Restricted != 0;
    call {:si_unique_call 1402} GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc == GUID_NWF_FREQUENCY_BANDS_SUPPORTED;
    assume GUID_NWF_FREQUENCY_BANDS_SUPPORTED != 0;
    call {:si_unique_call 1403} DEVPKEY_Device_TransportRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_TransportRelations__Loc == DEVPKEY_Device_TransportRelations;
    assume DEVPKEY_Device_TransportRelations != 0;
    call {:si_unique_call 1404} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 1405} DEVPKEY_NAME__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_NAME__Loc == DEVPKEY_NAME;
    assume DEVPKEY_NAME != 0;
    call {:si_unique_call 1406} DEVPKEY_Device_UINumberDescFormat__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UINumberDescFormat__Loc == DEVPKEY_Device_UINumberDescFormat;
    assume DEVPKEY_Device_UINumberDescFormat != 0;
    call {:si_unique_call 1407} GUID_NWF_WEP_OFFLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_OFFLOAD__Loc == GUID_NWF_WEP_OFFLOAD;
    assume GUID_NWF_WEP_OFFLOAD != 0;
    call {:si_unique_call 1408} GUID_NWF_UPDATE_IE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UPDATE_IE__Loc == GUID_NWF_UPDATE_IE;
    assume GUID_NWF_UPDATE_IE != 0;
    call {:si_unique_call 1409} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 1410} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 1411} DEVPKEY_DeviceClass_ClassCoInstallers__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassCoInstallers__Loc == DEVPKEY_DeviceClass_ClassCoInstallers;
    assume DEVPKEY_DeviceClass_ClassCoInstallers != 0;
    call {:si_unique_call 1412} GUID_NWF_POWER_MGMT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_POWER_MGMT_REQUEST__Loc == GUID_NWF_POWER_MGMT_REQUEST;
    assume GUID_NWF_POWER_MGMT_REQUEST != 0;
    call {:si_unique_call 1413} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 1414} DEVPKEY_Device_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FriendlyName__Loc == DEVPKEY_Device_FriendlyName;
    assume DEVPKEY_Device_FriendlyName != 0;
    call {:si_unique_call 1415} DEVPKEY_Device_LocationInfo__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LocationInfo__Loc == DEVPKEY_Device_LocationInfo;
    assume DEVPKEY_Device_LocationInfo != 0;
    call {:si_unique_call 1416} DEVPKEY_DeviceContainer_Category_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Icon__Loc == DEVPKEY_DeviceContainer_Category_Icon;
    assume DEVPKEY_DeviceContainer_Category_Icon != 0;
    call {:si_unique_call 1417} GUID_NWF_DESIRED_PHY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_PHY_LIST__Loc == GUID_NWF_DESIRED_PHY_LIST;
    assume GUID_NWF_DESIRED_PHY_LIST != 0;
    call {:si_unique_call 1418} GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc == GUID_NWF_CCA_WATCHDOG_COUNT_MAX;
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MAX != 0;
    call {:si_unique_call 1419} DEVPKEY_Device_Exclusive__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Exclusive__Loc == DEVPKEY_Device_Exclusive;
    assume DEVPKEY_Device_Exclusive != 0;
    call {:si_unique_call 1420} GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc == GUID_NWF_CIPHER_KEY_MAPPING_KEY;
    assume GUID_NWF_CIPHER_KEY_MAPPING_KEY != 0;
    call {:si_unique_call 1421} DEVPKEY_Device_Numa_Proximity_Domain__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Numa_Proximity_Domain__Loc == DEVPKEY_Device_Numa_Proximity_Domain;
    assume DEVPKEY_Device_Numa_Proximity_Domain != 0;
    call {:si_unique_call 1422} GUID_NWF_QOS_TX_DURATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_DURATION__Loc == GUID_NWF_QOS_TX_DURATION;
    assume GUID_NWF_QOS_TX_DURATION != 0;
    call {:si_unique_call 1423} DEVPKEY_Device_DriverProblemDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverProblemDesc__Loc == DEVPKEY_Device_DriverProblemDesc;
    assume DEVPKEY_Device_DriverProblemDesc != 0;
    call {:si_unique_call 1424} DEVPKEY_DeviceContainer_IsSharedDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsSharedDevice__Loc == DEVPKEY_DeviceContainer_IsSharedDevice;
    assume DEVPKEY_DeviceContainer_IsSharedDevice != 0;
    call {:si_unique_call 1425} GUID_NWF_CURRENT_DWELL_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_DWELL_TIME__Loc == GUID_NWF_CURRENT_DWELL_TIME;
    assume GUID_NWF_CURRENT_DWELL_TIME != 0;
    call {:si_unique_call 1426} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1427} DEVPKEY_PciDevice_CurrentLinkWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentLinkWidth__Loc == DEVPKEY_PciDevice_CurrentLinkWidth;
    assume DEVPKEY_PciDevice_CurrentLinkWidth != 0;
    call {:si_unique_call 1428} DEVPKEY_Device_UINumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UINumber__Loc == DEVPKEY_Device_UINumber;
    assume DEVPKEY_Device_UINumber != 0;
    call {:si_unique_call 1429} DEVPKEY_Device_ExtendedConfigurationIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ExtendedConfigurationIds__Loc == DEVPKEY_Device_ExtendedConfigurationIds;
    assume DEVPKEY_Device_ExtendedConfigurationIds != 0;
    call {:si_unique_call 1430} DEVPKEY_Device_DriverRank__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverRank__Loc == DEVPKEY_Device_DriverRank;
    assume DEVPKEY_Device_DriverRank != 0;
    call {:si_unique_call 1431} DEVPKEY_DeviceContainer_IsRebootRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsRebootRequired__Loc == DEVPKEY_DeviceContainer_IsRebootRequired;
    assume DEVPKEY_DeviceContainer_IsRebootRequired != 0;
    call {:si_unique_call 1432} DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc == DEVPKEY_PciRootBus_PCIExpressNativePMEControl;
    assume DEVPKEY_PciRootBus_PCIExpressNativePMEControl != 0;
    call {:si_unique_call 1433} GUID_NWF_PORT_STATE_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PORT_STATE_NOTIFICATION__Loc == GUID_NWF_PORT_STATE_NOTIFICATION;
    assume GUID_NWF_PORT_STATE_NOTIFICATION != 0;
    call {:si_unique_call 1434} DEVPKEY_Device_SafeRemovalRequiredOverride__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SafeRemovalRequiredOverride__Loc == DEVPKEY_Device_SafeRemovalRequiredOverride;
    assume DEVPKEY_Device_SafeRemovalRequiredOverride != 0;
    call {:si_unique_call 1435} DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc == DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl;
    assume DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl != 0;
    call {:si_unique_call 1436} DEVPKEY_PciDevice_DeviceType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_DeviceType__Loc == DEVPKEY_PciDevice_DeviceType;
    assume DEVPKEY_PciDevice_DeviceType != 0;
    call {:si_unique_call 1437} GUID_NWF_QOS_TX_MEDIUM_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_MEDIUM_TIME__Loc == GUID_NWF_QOS_TX_MEDIUM_TIME;
    assume GUID_NWF_QOS_TX_MEDIUM_TIME != 0;
    call {:si_unique_call 1438} GUID_NWF_DIVERSITY_SUPPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DIVERSITY_SUPPORT__Loc == GUID_NWF_DIVERSITY_SUPPORT;
    assume GUID_NWF_DIVERSITY_SUPPORT != 0;
    call {:si_unique_call 1439} GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc == GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR;
    assume GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR != 0;
    call {:si_unique_call 1440} DEVPKEY_Device_DriverInfSection__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfSection__Loc == DEVPKEY_Device_DriverInfSection;
    assume DEVPKEY_Device_DriverInfSection != 0;
    call {:si_unique_call 1441} DEVPKEY_DeviceClass_PropPageProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_PropPageProvider__Loc == DEVPKEY_DeviceClass_PropPageProvider;
    assume DEVPKEY_DeviceClass_PropPageProvider != 0;
    call {:si_unique_call 1442} GUID_NWF_TEMP_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_TEMP_TYPE__Loc == GUID_NWF_TEMP_TYPE;
    assume GUID_NWF_TEMP_TYPE != 0;
    call {:si_unique_call 1443} DEVPKEY_Device_Class__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Class__Loc == DEVPKEY_Device_Class;
    assume DEVPKEY_Device_Class != 0;
    call {:si_unique_call 1444} DEVPKEY_Device_NoConnectSound__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_NoConnectSound__Loc == DEVPKEY_Device_NoConnectSound;
    assume DEVPKEY_Device_NoConnectSound != 0;
    call {:si_unique_call 1445} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1446} DEVPKEY_DeviceClass_DevType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DevType__Loc == DEVPKEY_DeviceClass_DevType;
    assume DEVPKEY_DeviceClass_DevType != 0;
    call {:si_unique_call 1447} GUID_NWF_CURRENT_PATTERN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PATTERN__Loc == GUID_NWF_CURRENT_PATTERN;
    assume GUID_NWF_CURRENT_PATTERN != 0;
    call {:si_unique_call 1448} DEVPKEY_Device_ManufacturerAttributes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ManufacturerAttributes__Loc == DEVPKEY_Device_ManufacturerAttributes;
    assume DEVPKEY_Device_ManufacturerAttributes != 0;
    call {:si_unique_call 1449} GUID_NWF_ENUM_BSS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENUM_BSS_LIST__Loc == GUID_NWF_ENUM_BSS_LIST;
    assume GUID_NWF_ENUM_BSS_LIST != 0;
    call {:si_unique_call 1450} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 1451} DEVPKEY_Device_Reported__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Reported__Loc == DEVPKEY_Device_Reported;
    assume DEVPKEY_Device_Reported != 0;
    call {:si_unique_call 1452} DEVPKEY_PciRootBus_NativePciExpressControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_NativePciExpressControl__Loc == DEVPKEY_PciRootBus_NativePciExpressControl;
    assume DEVPKEY_PciRootBus_NativePciExpressControl != 0;
    call {:si_unique_call 1453} GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc == GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME;
    assume GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME != 0;
    call {:si_unique_call 1454} DEVPKEY_DeviceContainer_IsNetworkDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsNetworkDevice__Loc == DEVPKEY_DeviceContainer_IsNetworkDevice;
    assume DEVPKEY_DeviceContainer_IsNetworkDevice != 0;
    call {:si_unique_call 1455} DEVPKEY_Device_ResourcePickerExceptions__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ResourcePickerExceptions__Loc == DEVPKEY_Device_ResourcePickerExceptions;
    assume DEVPKEY_Device_ResourcePickerExceptions != 0;
    call {:si_unique_call 1456} GUID_NWF_OPERATIONAL_RATE_SET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPERATIONAL_RATE_SET__Loc == GUID_NWF_OPERATIONAL_RATE_SET;
    assume GUID_NWF_OPERATIONAL_RATE_SET != 0;
    call {:si_unique_call 1457} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 1458} DEVPKEY_Device_RemovalPolicyDefault__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicyDefault__Loc == DEVPKEY_Device_RemovalPolicyDefault;
    assume DEVPKEY_Device_RemovalPolicyDefault != 0;
    call {:si_unique_call 1459} DEVPKEY_Device_ProblemStatus__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ProblemStatus__Loc == DEVPKEY_Device_ProblemStatus;
    assume DEVPKEY_Device_ProblemStatus != 0;
    call {:si_unique_call 1460} GUID_NWF_WEP_UPLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_UPLOAD__Loc == GUID_NWF_WEP_UPLOAD;
    assume GUID_NWF_WEP_UPLOAD != 0;
    call {:si_unique_call 1461} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 1462} DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc == DEVPKEY_DeviceContainer_IsNotInterestingForDisplay;
    assume DEVPKEY_DeviceContainer_IsNotInterestingForDisplay != 0;
    call {:si_unique_call 1463} GUID_NWF_CCA_MODE_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_MODE_SUPPORTED__Loc == GUID_NWF_CCA_MODE_SUPPORTED;
    assume GUID_NWF_CCA_MODE_SUPPORTED != 0;
    call {:si_unique_call 1464} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 1465} DEVPKEY_Device_EjectionRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_EjectionRelations__Loc == DEVPKEY_Device_EjectionRelations;
    assume DEVPKEY_Device_EjectionRelations != 0;
    call {:si_unique_call 1466} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 1467} DEVPKEY_PciDevice_MaxLinkSpeed__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxLinkSpeed__Loc == DEVPKEY_PciDevice_MaxLinkSpeed;
    assume DEVPKEY_PciDevice_MaxLinkSpeed != 0;
    call {:si_unique_call 1468} DEVPKEY_PciDevice_FirmwareErrorHandling__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_FirmwareErrorHandling__Loc == DEVPKEY_PciDevice_FirmwareErrorHandling;
    assume DEVPKEY_PciDevice_FirmwareErrorHandling != 0;
    call {:si_unique_call 1469} GUID_NWF_CURRENT_OPERATION_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OPERATION_MODE__Loc == GUID_NWF_CURRENT_OPERATION_MODE;
    assume GUID_NWF_CURRENT_OPERATION_MODE != 0;
    call {:si_unique_call 1470} GUID_NWF_STATISTICS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_STATISTICS__Loc == GUID_NWF_STATISTICS;
    assume GUID_NWF_STATISTICS != 0;
    call {:si_unique_call 1471} DEVPKEY_Device_IsAssociateableByUserAction__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsAssociateableByUserAction__Loc == DEVPKEY_Device_IsAssociateableByUserAction;
    assume DEVPKEY_Device_IsAssociateableByUserAction != 0;
    call {:si_unique_call 1472} DEVPKEY_DrvPkg_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_Icon__Loc == DEVPKEY_DrvPkg_Icon;
    assume DEVPKEY_DrvPkg_Icon != 0;
    call {:si_unique_call 1473} DEVPKEY_PciDevice_ProgIf__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ProgIf__Loc == DEVPKEY_PciDevice_ProgIf;
    assume DEVPKEY_PciDevice_ProgIf != 0;
    call {:si_unique_call 1474} DEVPKEY_Device_AdditionalSoftwareRequested__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_AdditionalSoftwareRequested__Loc == DEVPKEY_Device_AdditionalSoftwareRequested;
    assume DEVPKEY_Device_AdditionalSoftwareRequested != 0;
    call {:si_unique_call 1475} GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc == GUID_NWF_CHANNEL_AGILITY_PRESENT;
    assume GUID_NWF_CHANNEL_AGILITY_PRESENT != 0;
    call {:si_unique_call 1476} DEVPKEY_Device_LocationPaths__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LocationPaths__Loc == DEVPKEY_Device_LocationPaths;
    assume DEVPKEY_Device_LocationPaths != 0;
    call {:si_unique_call 1477} GUID_NWF_CURRENT_FREQUENCY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_FREQUENCY__Loc == GUID_NWF_CURRENT_FREQUENCY;
    assume GUID_NWF_CURRENT_FREQUENCY != 0;
    call {:si_unique_call 1478} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 1479} DEVPKEY_DeviceClass_SilentInstall__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_SilentInstall__Loc == DEVPKEY_DeviceClass_SilentInstall;
    assume DEVPKEY_DeviceClass_SilentInstall != 0;
    call {:si_unique_call 1480} DEVPKEY_Device_LegacyBusType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LegacyBusType__Loc == DEVPKEY_Device_LegacyBusType;
    assume DEVPKEY_Device_LegacyBusType != 0;
    call {:si_unique_call 1481} DEVPKEY_DeviceContainer_IsDefaultDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsDefaultDevice__Loc == DEVPKEY_DeviceContainer_IsDefaultDevice;
    assume DEVPKEY_DeviceContainer_IsDefaultDevice != 0;
    call {:si_unique_call 1482} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 1483} DEVPKEY_Device_UpperFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UpperFilters__Loc == DEVPKEY_Device_UpperFilters;
    assume DEVPKEY_Device_UpperFilters != 0;
    call {:si_unique_call 1484} DEVPKEY_Device_DevType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DevType__Loc == DEVPKEY_Device_DevType;
    assume DEVPKEY_Device_DevType != 0;
    call {:si_unique_call 1485} DEVPKEY_Device_DriverInfPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfPath__Loc == DEVPKEY_Device_DriverInfPath;
    assume DEVPKEY_Device_DriverInfPath != 0;
    call {:si_unique_call 1486} DEVPKEY_DeviceInterface_ReferenceString__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_ReferenceString__Loc == DEVPKEY_DeviceInterface_ReferenceString;
    assume DEVPKEY_DeviceInterface_ReferenceString != 0;
    call {:si_unique_call 1487} GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc == GUID_NWF_CCA_WATCHDOG_TIMER_MIN;
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MIN != 0;
    call {:si_unique_call 1488} GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc == GUID_NWF_PBCC_OPTION_IMPLEMENTED;
    assume GUID_NWF_PBCC_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1489} GUID_POWER_PERFORMANCE_IDLE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_PERFORMANCE_IDLE_TIME__Loc == GUID_POWER_PERFORMANCE_IDLE_TIME;
    assume GUID_POWER_PERFORMANCE_IDLE_TIME != 0;
    call {:si_unique_call 1490} DEVPKEY_Device_IsRebootRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsRebootRequired__Loc == DEVPKEY_Device_IsRebootRequired;
    assume DEVPKEY_Device_IsRebootRequired != 0;
    call {:si_unique_call 1491} DEVPKEY_DeviceClass_ClassInstaller__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassInstaller__Loc == DEVPKEY_DeviceClass_ClassInstaller;
    assume DEVPKEY_DeviceClass_ClassInstaller != 0;
    call {:si_unique_call 1492} DEVPKEY_DeviceContainer_IsConnected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsConnected__Loc == DEVPKEY_DeviceContainer_IsConnected;
    assume DEVPKEY_DeviceContainer_IsConnected != 0;
    call {:si_unique_call 1493} DEVPKEY_DeviceContainer_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Icon__Loc == DEVPKEY_DeviceContainer_Icon;
    assume DEVPKEY_DeviceContainer_Icon != 0;
    call {:si_unique_call 1494} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 1495} DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc == DEVPKEY_DeviceContainer_Category_Desc_Singular;
    assume DEVPKEY_DeviceContainer_Category_Desc_Singular != 0;
    call {:si_unique_call 1496} DEVPKEY_Device_SecuritySDS__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SecuritySDS__Loc == DEVPKEY_Device_SecuritySDS;
    assume DEVPKEY_Device_SecuritySDS != 0;
    call {:si_unique_call 1497} DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc == DEVPKEY_DeviceClass_DHPRebalanceOptOut;
    assume DEVPKEY_DeviceClass_DHPRebalanceOptOut != 0;
    call {:si_unique_call 1498} GUID_NWF_CFP_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CFP_PERIOD__Loc == GUID_NWF_CFP_PERIOD;
    assume GUID_NWF_CFP_PERIOD != 0;
    call {:si_unique_call 1499} GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc == GUID_NWF_EHCC_CAPABILITY_ENABLED;
    assume GUID_NWF_EHCC_CAPABILITY_ENABLED != 0;
    call {:si_unique_call 1500} DEVPKEY_Device_InstallDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstallDate__Loc == DEVPKEY_Device_InstallDate;
    assume DEVPKEY_Device_InstallDate != 0;
    call {:si_unique_call 1501} DEVPKEY_DeviceClass_LowerFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_LowerFilters__Loc == DEVPKEY_DeviceClass_LowerFilters;
    assume DEVPKEY_DeviceClass_LowerFilters != 0;
    call {:si_unique_call 1502} DEVPKEY_DeviceContainer_MetadataChecksum__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataChecksum__Loc == DEVPKEY_DeviceContainer_MetadataChecksum;
    assume DEVPKEY_DeviceContainer_MetadataChecksum != 0;
    call {:si_unique_call 1503} DEVPKEY_DeviceClass_DefaultService__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DefaultService__Loc == DEVPKEY_DeviceClass_DefaultService;
    assume DEVPKEY_DeviceClass_DefaultService != 0;
    call {:si_unique_call 1504} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 1505} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 1506} GUID_NWF_WEP_ICV_ERROR_COUNT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_ICV_ERROR_COUNT__Loc == GUID_NWF_WEP_ICV_ERROR_COUNT;
    assume GUID_NWF_WEP_ICV_ERROR_COUNT != 0;
    call {:si_unique_call 1507} DEVPKEY_DrvPkg_VendorWebSite__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_VendorWebSite__Loc == DEVPKEY_DrvPkg_VendorWebSite;
    assume DEVPKEY_DrvPkg_VendorWebSite != 0;
    call {:si_unique_call 1508} DEVPKEY_DeviceContainer_ConfigFlags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ConfigFlags__Loc == DEVPKEY_DeviceContainer_ConfigFlags;
    assume DEVPKEY_DeviceContainer_ConfigFlags != 0;
    call {:si_unique_call 1509} DEVPKEY_PciDevice_AcsSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AcsSupport__Loc == DEVPKEY_PciDevice_AcsSupport;
    assume DEVPKEY_PciDevice_AcsSupport != 0;
    call {:si_unique_call 1510} DEVPKEY_Device_RemovalRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalRelations__Loc == DEVPKEY_Device_RemovalRelations;
    assume DEVPKEY_Device_RemovalRelations != 0;
    call {:si_unique_call 1511} DEVPKEY_DrvPkg_DocumentationLink__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_DocumentationLink__Loc == DEVPKEY_DrvPkg_DocumentationLink;
    assume DEVPKEY_DrvPkg_DocumentationLink != 0;
    call {:si_unique_call 1512} GUID_NWF_MULTICAST_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTICAST_LIST__Loc == GUID_NWF_MULTICAST_LIST;
    assume GUID_NWF_MULTICAST_LIST != 0;
    call {:si_unique_call 1513} GUID_NWF_DEFAULT_WEP_UPLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DEFAULT_WEP_UPLOAD__Loc == GUID_NWF_DEFAULT_WEP_UPLOAD;
    assume GUID_NWF_DEFAULT_WEP_UPLOAD != 0;
    call {:si_unique_call 1514} GUID_NWF_RESET_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RESET_REQUEST__Loc == GUID_NWF_RESET_REQUEST;
    assume GUID_NWF_RESET_REQUEST != 0;
    call {:si_unique_call 1515} DEVPKEY_Device_BusTypeGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusTypeGuid__Loc == DEVPKEY_Device_BusTypeGuid;
    assume DEVPKEY_Device_BusTypeGuid != 0;
    call {:si_unique_call 1516} GUID_NWF_DTIM_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DTIM_PERIOD__Loc == GUID_NWF_DTIM_PERIOD;
    assume GUID_NWF_DTIM_PERIOD != 0;
    call {:si_unique_call 1517} GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc == GUID_NWF_RANDOM_TABLE_FIELD_NUMBER;
    assume GUID_NWF_RANDOM_TABLE_FIELD_NUMBER != 0;
    call {:si_unique_call 1518} GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc == GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING;
    assume GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING != 0;
    call {:si_unique_call 1519} DEVPKEY_Device_ShowInUninstallUI__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ShowInUninstallUI__Loc == DEVPKEY_Device_ShowInUninstallUI;
    assume DEVPKEY_Device_ShowInUninstallUI != 0;
    call {:si_unique_call 1520} GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED != 0;
    call {:si_unique_call 1521} GUID_NWF_CURRENT_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_ADDRESS__Loc == GUID_NWF_CURRENT_ADDRESS;
    assume GUID_NWF_CURRENT_ADDRESS != 0;
    call {:si_unique_call 1522} DEVPKEY_Device_ContainerId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ContainerId__Loc == DEVPKEY_Device_ContainerId;
    assume DEVPKEY_Device_ContainerId != 0;
    call {:si_unique_call 1523} DEVPKEY_Device_InLocalMachineContainer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InLocalMachineContainer__Loc == DEVPKEY_Device_InLocalMachineContainer;
    assume DEVPKEY_Device_InLocalMachineContainer != 0;
    call {:si_unique_call 1524} DEVPKEY_DeviceContainer_ExperienceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ExperienceId__Loc == DEVPKEY_DeviceContainer_ExperienceId;
    assume DEVPKEY_DeviceContainer_ExperienceId != 0;
    call {:si_unique_call 1525} GUID_NWF_CURRENT_RX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_RX_ANTENNA__Loc == GUID_NWF_CURRENT_RX_ANTENNA;
    assume GUID_NWF_CURRENT_RX_ANTENNA != 0;
    call {:si_unique_call 1526} GUID_NWF_CIPHER_DEFAULT_KEY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_DEFAULT_KEY__Loc == GUID_NWF_CIPHER_DEFAULT_KEY;
    assume GUID_NWF_CIPHER_DEFAULT_KEY != 0;
    call {:si_unique_call 1527} DEVPKEY_Device_FirmwareRevision__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareRevision__Loc == DEVPKEY_Device_FirmwareRevision;
    assume DEVPKEY_Device_FirmwareRevision != 0;
    call {:si_unique_call 1528} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1529} GUID_NWF_SUPPORTED_TX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_TX_ANTENNA__Loc == GUID_NWF_SUPPORTED_TX_ANTENNA;
    assume GUID_NWF_SUPPORTED_TX_ANTENNA != 0;
    call {:si_unique_call 1530} DEVPKEY_DeviceContainer_BaselineExperienceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_BaselineExperienceId__Loc == DEVPKEY_DeviceContainer_BaselineExperienceId;
    assume DEVPKEY_DeviceContainer_BaselineExperienceId != 0;
    call {:si_unique_call 1531} DEVPKEY_PciRootBus_SecondaryInterface__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SecondaryInterface__Loc == DEVPKEY_PciRootBus_SecondaryInterface;
    assume DEVPKEY_PciRootBus_SecondaryInterface != 0;
    call {:si_unique_call 1532} GUID_NWF_CONNECT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CONNECT_REQUEST__Loc == GUID_NWF_CONNECT_REQUEST;
    assume GUID_NWF_CONNECT_REQUEST != 0;
    call {:si_unique_call 1533} GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc == GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED;
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1534} GUID_NWF_EXTSTA_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXTSTA_CAPABILITY__Loc == GUID_NWF_EXTSTA_CAPABILITY;
    assume GUID_NWF_EXTSTA_CAPABILITY != 0;
    call {:si_unique_call 1535} DEVPKEY_Device_Security__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Security__Loc == DEVPKEY_Device_Security;
    assume DEVPKEY_Device_Security != 0;
    call {:si_unique_call 1536} DEVPKEY_DeviceClass_SecuritySDS__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_SecuritySDS__Loc == DEVPKEY_DeviceClass_SecuritySDS;
    assume DEVPKEY_DeviceClass_SecuritySDS != 0;
    call {:si_unique_call 1537} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 1538} DEVPKEY_Device_EnumeratorName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_EnumeratorName__Loc == DEVPKEY_Device_EnumeratorName;
    assume DEVPKEY_Device_EnumeratorName != 0;
    call {:si_unique_call 1539} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 1540} DEVPKEY_DeviceClass_Security__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Security__Loc == DEVPKEY_DeviceClass_Security;
    assume DEVPKEY_DeviceClass_Security != 0;
    call {:si_unique_call 1541} DEVPKEY_DeviceContainer_Last_Seen__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Last_Seen__Loc == DEVPKEY_DeviceContainer_Last_Seen;
    assume DEVPKEY_DeviceContainer_Last_Seen != 0;
    call {:si_unique_call 1542} DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc == DEVPKEY_PciRootBus_ExtendedConfigAvailable;
    assume DEVPKEY_PciRootBus_ExtendedConfigAvailable != 0;
    call {:si_unique_call 1543} DEVPKEY_Device_ClassGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ClassGuid__Loc == DEVPKEY_Device_ClassGuid;
    assume DEVPKEY_Device_ClassGuid != 0;
    call {:si_unique_call 1544} DEVPKEY_Device_FirstInstallDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirstInstallDate__Loc == DEVPKEY_Device_FirstInstallDate;
    assume DEVPKEY_Device_FirstInstallDate != 0;
    call {:si_unique_call 1545} GUID_NWF_MAXIMUM_LIST_SIZE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAXIMUM_LIST_SIZE__Loc == GUID_NWF_MAXIMUM_LIST_SIZE;
    assume GUID_NWF_MAXIMUM_LIST_SIZE != 0;
    call {:si_unique_call 1546} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 1547} GUID_NWF_IBSS_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_IBSS_PARAMS__Loc == GUID_NWF_IBSS_PARAMS;
    assume GUID_NWF_IBSS_PARAMS != 0;
    call {:si_unique_call 1548} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 1549} GUID_NWF_ATIM_WINDOW__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ATIM_WINDOW__Loc == GUID_NWF_ATIM_WINDOW;
    assume GUID_NWF_ATIM_WINDOW != 0;
    call {:si_unique_call 1550} GUID_NWF_CF_POLLABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CF_POLLABLE__Loc == GUID_NWF_CF_POLLABLE;
    assume GUID_NWF_CF_POLLABLE != 0;
    call {:si_unique_call 1551} GUID_NWF_MAC_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAC_ADDRESS__Loc == GUID_NWF_MAC_ADDRESS;
    assume GUID_NWF_MAC_ADDRESS != 0;
    call {:si_unique_call 1552} DEVPKEY_Device_BusReportedDeviceDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusReportedDeviceDesc__Loc == DEVPKEY_Device_BusReportedDeviceDesc;
    assume DEVPKEY_Device_BusReportedDeviceDesc != 0;
    call {:si_unique_call 1553} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 1554} GUID_NWF_HOP_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_TIME__Loc == GUID_NWF_HOP_TIME;
    assume GUID_NWF_HOP_TIME != 0;
    call {:si_unique_call 1555} DEVPKEY_Device_RemovalPolicy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicy__Loc == DEVPKEY_Device_RemovalPolicy;
    assume DEVPKEY_Device_RemovalPolicy != 0;
    call {:si_unique_call 1556} DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc == DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames;
    assume DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames != 0;
    call {:si_unique_call 1557} GUID_NWF_START_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_START_REQUEST__Loc == GUID_NWF_START_REQUEST;
    assume GUID_NWF_START_REQUEST != 0;
    call {:si_unique_call 1558} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1559} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 1560} DEVPKEY_DeviceClass_Name__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Name__Loc == DEVPKEY_DeviceClass_Name;
    assume DEVPKEY_DeviceClass_Name != 0;
    call {:si_unique_call 1561} DEVPKEY_DeviceContainer_ModelName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ModelName__Loc == DEVPKEY_DeviceContainer_ModelName;
    assume DEVPKEY_DeviceContainer_ModelName != 0;
    call {:si_unique_call 1562} DEVPKEY_Device_IsPresent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsPresent__Loc == DEVPKEY_Device_IsPresent;
    assume DEVPKEY_Device_IsPresent != 0;
    call {:si_unique_call 1563} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 1564} DEVPKEY_Device_RemovalPolicyOverride__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicyOverride__Loc == DEVPKEY_Device_RemovalPolicyOverride;
    assume DEVPKEY_Device_RemovalPolicyOverride != 0;
    call {:si_unique_call 1565} DEVPKEY_Device_Model__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Model__Loc == DEVPKEY_Device_Model;
    assume DEVPKEY_Device_Model != 0;
    call {:si_unique_call 1566} DEVPKEY_PciDevice_RootError_Reporting__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_RootError_Reporting__Loc == DEVPKEY_PciDevice_RootError_Reporting;
    assume DEVPKEY_PciDevice_RootError_Reporting != 0;
    call {:si_unique_call 1567} GUID_NWF_SHORT_RETRY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_RETRY_LIMIT__Loc == GUID_NWF_SHORT_RETRY_LIMIT;
    assume GUID_NWF_SHORT_RETRY_LIMIT != 0;
    call {:si_unique_call 1568} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 1569} GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY != 0;
    call {:si_unique_call 1570} DEVPKEY_DeviceContainer_DiscoveryMethod__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DiscoveryMethod__Loc == DEVPKEY_DeviceContainer_DiscoveryMethod;
    assume DEVPKEY_DeviceContainer_DiscoveryMethod != 0;
    call {:si_unique_call 1571} DEVPKEY_Device_DriverInfSectionExt__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfSectionExt__Loc == DEVPKEY_Device_DriverInfSectionExt;
    assume DEVPKEY_Device_DriverInfSectionExt != 0;
    call {:si_unique_call 1572} DEVPKEY_DeviceClass_ClassName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassName__Loc == DEVPKEY_DeviceClass_ClassName;
    assume DEVPKEY_DeviceClass_ClassName != 0;
    call {:si_unique_call 1573} DEVPKEY_PciRootBus_SystemMsiSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SystemMsiSupport__Loc == DEVPKEY_PciRootBus_SystemMsiSupport;
    assume DEVPKEY_PciRootBus_SystemMsiSupport != 0;
    call {:si_unique_call 1574} GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc == GUID_NWF_QOS_TX_QUEUES_SUPPORTED;
    assume GUID_NWF_QOS_TX_QUEUES_SUPPORTED != 0;
    call {:si_unique_call 1575} GUID_NWF_HOP_OFFSET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_OFFSET__Loc == GUID_NWF_HOP_OFFSET;
    assume GUID_NWF_HOP_OFFSET != 0;
    call {:si_unique_call 1576} DEVPKEY_DeviceContainer_AssociationArray__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_AssociationArray__Loc == DEVPKEY_DeviceContainer_AssociationArray;
    assume DEVPKEY_DeviceContainer_AssociationArray != 0;
    call {:si_unique_call 1577} DEVPKEY_PciRootBus_SecondaryBusWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SecondaryBusWidth__Loc == DEVPKEY_PciRootBus_SecondaryBusWidth;
    assume DEVPKEY_PciRootBus_SecondaryBusWidth != 0;
    call {:si_unique_call 1578} GUID_NWF_ASSOCIATION_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ASSOCIATION_PARAMS__Loc == GUID_NWF_ASSOCIATION_PARAMS;
    assume GUID_NWF_ASSOCIATION_PARAMS != 0;
    call {:si_unique_call 1579} DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc == DEVPKEY_PciRootBus_SHPCNativeHotPlugControl;
    assume DEVPKEY_PciRootBus_SHPCNativeHotPlugControl != 0;
    call {:si_unique_call 1580} DEVPKEY_Device_BaseContainerId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BaseContainerId__Loc == DEVPKEY_Device_BaseContainerId;
    assume DEVPKEY_Device_BaseContainerId != 0;
    call {:si_unique_call 1581} GUID_NWF_FLUSH_BSS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FLUSH_BSS_LIST__Loc == GUID_NWF_FLUSH_BSS_LIST;
    assume GUID_NWF_FLUSH_BSS_LIST != 0;
    call {:si_unique_call 1582} GUID_NWF_CURRENT_TX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_TX_ANTENNA__Loc == GUID_NWF_CURRENT_TX_ANTENNA;
    assume GUID_NWF_CURRENT_TX_ANTENNA != 0;
    call {:si_unique_call 1583} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 1584} DEVPKEY_Device_BusRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusRelations__Loc == DEVPKEY_Device_BusRelations;
    assume DEVPKEY_Device_BusRelations != 0;
    call {:si_unique_call 1585} GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc == GUID_NWF_HR_CCA_MODE_SUPPORTED;
    assume GUID_NWF_HR_CCA_MODE_SUPPORTED != 0;
    call {:si_unique_call 1586} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 1587} DEVPKEY_DeviceContainer_ModelNumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ModelNumber__Loc == DEVPKEY_DeviceContainer_ModelNumber;
    assume DEVPKEY_DeviceContainer_ModelNumber != 0;
    call {:si_unique_call 1588} PCIDRV_WMI_STD_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIDRV_WMI_STD_DATA_GUID__Loc == PCIDRV_WMI_STD_DATA_GUID;
    assume PCIDRV_WMI_STD_DATA_GUID != 0;
    call {:si_unique_call 1589} DEVPKEY_DeviceContainer_Last_Connected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Last_Connected__Loc == DEVPKEY_DeviceContainer_Last_Connected;
    assume DEVPKEY_DeviceContainer_Last_Connected != 0;
    call {:si_unique_call 1590} GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc == GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED;
    assume GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1591} DEVPKEY_PciDevice_Error_Reporting__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Error_Reporting__Loc == DEVPKEY_PciDevice_Error_Reporting;
    assume DEVPKEY_PciDevice_Error_Reporting != 0;
    call {:si_unique_call 1592} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 1593} DEVPKEY_PciRootBus_MSISupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_MSISupport__Loc == DEVPKEY_PciRootBus_MSISupport;
    assume DEVPKEY_PciRootBus_MSISupport != 0;
    call {:si_unique_call 1594} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 1595} GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc == GUID_NWF_CCA_WATCHDOG_COUNT_MIN;
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MIN != 0;
    call {:si_unique_call 1596} DEVPKEY_Device_SignalStrength__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SignalStrength__Loc == DEVPKEY_Device_SignalStrength;
    assume DEVPKEY_Device_SignalStrength != 0;
    call {:si_unique_call 1597} DEVPKEY_Device_DebuggerSafe__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DebuggerSafe__Loc == DEVPKEY_Device_DebuggerSafe;
    assume DEVPKEY_Device_DebuggerSafe != 0;
    call {:si_unique_call 1598} DEVPKEY_Device_DriverCoInstallers__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverCoInstallers__Loc == DEVPKEY_Device_DriverCoInstallers;
    assume DEVPKEY_Device_DriverCoInstallers != 0;
    call {:si_unique_call 1599} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 1600} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 1601} GUID_NWF_OPTIONAL_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPTIONAL_CAPABILITY__Loc == GUID_NWF_OPTIONAL_CAPABILITY;
    assume GUID_NWF_OPTIONAL_CAPABILITY != 0;
    call {:si_unique_call 1602} GUID_NWF_EHCC_PRIME_RADIX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_PRIME_RADIX__Loc == GUID_NWF_EHCC_PRIME_RADIX;
    assume GUID_NWF_EHCC_PRIME_RADIX != 0;
    call {:si_unique_call 1603} GUID_NWF_CURRENT_PHY_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PHY_TYPE__Loc == GUID_NWF_CURRENT_PHY_TYPE;
    assume GUID_NWF_CURRENT_PHY_TYPE != 0;
    call {:si_unique_call 1604} GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc == GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD;
    assume GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD != 0;
    call {:si_unique_call 1605} DEVPKEY_Device_Numa_Node__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Numa_Node__Loc == DEVPKEY_Device_Numa_Node;
    assume DEVPKEY_Device_Numa_Node != 0;
    call {:si_unique_call 1606} DEVPKEY_PciDevice_ExpressSpecVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ExpressSpecVersion__Loc == DEVPKEY_PciDevice_ExpressSpecVersion;
    assume DEVPKEY_PciDevice_ExpressSpecVersion != 0;
    call {:si_unique_call 1607} DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc == DEVPKEY_PciRootBus_PCIExpressCapabilityControl;
    assume DEVPKEY_PciRootBus_PCIExpressCapabilityControl != 0;
    call {:si_unique_call 1608} GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc == GUID_NWF_DEFAULT_WEP_OFFLOAD;
    assume GUID_NWF_DEFAULT_WEP_OFFLOAD != 0;
    call {:si_unique_call 1609} GUID_NWF_QOS_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_PARAMS__Loc == GUID_NWF_QOS_PARAMS;
    assume GUID_NWF_QOS_PARAMS != 0;
    call {:si_unique_call 1610} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 1611} DEVPKEY_Device_GenericDriverInstalled__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_GenericDriverInstalled__Loc == DEVPKEY_Device_GenericDriverInstalled;
    assume DEVPKEY_Device_GenericDriverInstalled != 0;
    call {:si_unique_call 1612} GUID_NWF_CURRENT_REG_DOMAIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_REG_DOMAIN__Loc == GUID_NWF_CURRENT_REG_DOMAIN;
    assume GUID_NWF_CURRENT_REG_DOMAIN != 0;
    call {:si_unique_call 1613} GUID_NWF_WME_UPDATE_IE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_UPDATE_IE__Loc == GUID_NWF_WME_UPDATE_IE;
    assume GUID_NWF_WME_UPDATE_IE != 0;
    call {:si_unique_call 1614} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1615} DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc == DEVPKEY_PciRootBus_PCISegmentGroupsSupport;
    assume DEVPKEY_PciRootBus_PCISegmentGroupsSupport != 0;
    call {:si_unique_call 1616} DEVPKEY_Device_Service__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Service__Loc == DEVPKEY_Device_Service;
    assume DEVPKEY_Device_Service != 0;
    call {:si_unique_call 1617} DEVPKEY_Device_Capabilities__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Capabilities__Loc == DEVPKEY_Device_Capabilities;
    assume DEVPKEY_Device_Capabilities != 0;
    call {:si_unique_call 1618} DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc == DEVPKEY_PciRootBus_ClockPowerManagementSupport;
    assume DEVPKEY_PciRootBus_ClockPowerManagementSupport != 0;
    call {:si_unique_call 1619} GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc == GUID_NWF_UNICAST_USE_GROUP_ENABLED;
    assume GUID_NWF_UNICAST_USE_GROUP_ENABLED != 0;
    call {:si_unique_call 1620} GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc == GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING;
    assume GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING != 0;
    call {:si_unique_call 1621} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 1622} DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc == DEVPKEY_DeviceInterfaceClass_DefaultInterface;
    assume DEVPKEY_DeviceInterfaceClass_DefaultInterface != 0;
    call {:si_unique_call 1623} DEVPKEY_DeviceContainer_MetadataCabinet__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataCabinet__Loc == DEVPKEY_DeviceContainer_MetadataCabinet;
    assume DEVPKEY_DeviceContainer_MetadataCabinet != 0;
    call {:si_unique_call 1624} GUID_NWF_COUNTERS_ENTRY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_COUNTERS_ENTRY__Loc == GUID_NWF_COUNTERS_ENTRY;
    assume GUID_NWF_COUNTERS_ENTRY != 0;
    call {:si_unique_call 1625} GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc == GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX;
    assume GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX != 0;
    call {:si_unique_call 1626} GUID_NWF_PHY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PHY_STATE__Loc == GUID_NWF_PHY_STATE;
    assume GUID_NWF_PHY_STATE != 0;
    call {:si_unique_call 1627} DEVPKEY_Device_Parent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Parent__Loc == DEVPKEY_Device_Parent;
    assume DEVPKEY_Device_Parent != 0;
    call {:si_unique_call 1628} GUID_NWF_MAX_RECEIVE_LIFETIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_RECEIVE_LIFETIME__Loc == GUID_NWF_MAX_RECEIVE_LIFETIME;
    assume GUID_NWF_MAX_RECEIVE_LIFETIME != 0;
    call {:si_unique_call 1629} DEVPKEY_DeviceContainer_Category__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category__Loc == DEVPKEY_DeviceContainer_Category;
    assume DEVPKEY_DeviceContainer_Category != 0;
    call {:si_unique_call 1630} DEVPKEY_PciDevice_ECRC_Errors__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ECRC_Errors__Loc == DEVPKEY_PciDevice_ECRC_Errors;
    assume DEVPKEY_PciDevice_ECRC_Errors != 0;
    call {:si_unique_call 1631} GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc == GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM;
    assume GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM != 0;
    call {:si_unique_call 1632} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 1633} GUID_NWF_AUTO_CONFIG_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_AUTO_CONFIG_ENABLED__Loc == GUID_NWF_AUTO_CONFIG_ENABLED;
    assume GUID_NWF_AUTO_CONFIG_ENABLED != 0;
    call {:si_unique_call 1634} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 1635} DEVPKEY_Device_DriverVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverVersion__Loc == DEVPKEY_Device_DriverVersion;
    assume DEVPKEY_Device_DriverVersion != 0;
    call {:si_unique_call 1636} GUID_NWF_CURRENT_CCA_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CCA_MODE__Loc == GUID_NWF_CURRENT_CCA_MODE;
    assume GUID_NWF_CURRENT_CCA_MODE != 0;
    call {:si_unique_call 1637} DEVPKEY_DrvPkg_Model__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_Model__Loc == DEVPKEY_DrvPkg_Model;
    assume DEVPKEY_DrvPkg_Model != 0;
    call {:si_unique_call 1638} DEVPKEY_DeviceClass_IconPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_IconPath__Loc == DEVPKEY_DeviceClass_IconPath;
    assume DEVPKEY_DeviceClass_IconPath != 0;
    call {:si_unique_call 1639} GUID_NWF_LONG_RETRY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_LONG_RETRY_LIMIT__Loc == GUID_NWF_LONG_RETRY_LIMIT;
    assume GUID_NWF_LONG_RETRY_LIMIT != 0;
    call {:si_unique_call 1640} DEVPKEY_PciDevice_InterruptMessageMaximum__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_InterruptMessageMaximum__Loc == DEVPKEY_PciDevice_InterruptMessageMaximum;
    assume DEVPKEY_PciDevice_InterruptMessageMaximum != 0;
    call {:si_unique_call 1641} GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc == GUID_NWF_HIDDEN_NETWORK_ENABLED;
    assume GUID_NWF_HIDDEN_NETWORK_ENABLED != 0;
    call {:si_unique_call 1642} DEVPKEY_Device_Legacy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Legacy__Loc == DEVPKEY_Device_Legacy;
    assume DEVPKEY_Device_Legacy != 0;
    call {:si_unique_call 1643} DEVPKEY_Device_Siblings__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Siblings__Loc == DEVPKEY_Device_Siblings;
    assume DEVPKEY_Device_Siblings != 0;
    call {:si_unique_call 1644} DEVPKEY_DeviceContainer_HasProblem__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_HasProblem__Loc == DEVPKEY_DeviceContainer_HasProblem;
    assume DEVPKEY_DeviceContainer_HasProblem != 0;
    call {:si_unique_call 1645} Globals__Loc := __HAVOC_malloc_or_null(12);
    assume Globals__Loc == Globals;
    assume Globals != 0;
    call {:si_unique_call 1646} GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc == GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 1647} GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc == GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT != 0;
    call {:si_unique_call 1648} GUID_ALLOW_RTC_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_RTC_WAKE__Loc == GUID_ALLOW_RTC_WAKE;
    assume GUID_ALLOW_RTC_WAKE != 0;
    call {:si_unique_call 1649} GUID_BATTERY_DISCHARGE_LEVEL_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_2__Loc == GUID_BATTERY_DISCHARGE_LEVEL_2;
    assume GUID_BATTERY_DISCHARGE_LEVEL_2 != 0;
    call {:si_unique_call 1650} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 1651} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 1652} GUID_DISK_IDLE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_IDLE_TIMEOUT__Loc == GUID_DISK_IDLE_TIMEOUT;
    assume GUID_DISK_IDLE_TIMEOUT != 0;
    call {:si_unique_call 1653} GUID_ACDC_POWER_SOURCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACDC_POWER_SOURCE__Loc == GUID_ACDC_POWER_SOURCE;
    assume GUID_ACDC_POWER_SOURCE != 0;
    call {:si_unique_call 1654} GUID_SYSTEM_COOLING_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_COOLING_POLICY__Loc == GUID_SYSTEM_COOLING_POLICY;
    assume GUID_SYSTEM_COOLING_POLICY != 0;
    call {:si_unique_call 1655} GUID_BATTERY_DISCHARGE_LEVEL_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_3__Loc == GUID_BATTERY_DISCHARGE_LEVEL_3;
    assume GUID_BATTERY_DISCHARGE_LEVEL_3 != 0;
    call {:si_unique_call 1656} GUID_LOCK_CONSOLE_ON_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LOCK_CONSOLE_ON_WAKE__Loc == GUID_LOCK_CONSOLE_ON_WAKE;
    assume GUID_LOCK_CONSOLE_ON_WAKE != 0;
    call {:si_unique_call 1657} GUID_VIDEO_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_POWERDOWN_TIMEOUT__Loc == GUID_VIDEO_POWERDOWN_TIMEOUT;
    assume GUID_VIDEO_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1658} GUID_PROCESSOR_IDLESTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLESTATE_POLICY__Loc == GUID_PROCESSOR_IDLESTATE_POLICY;
    assume GUID_PROCESSOR_IDLESTATE_POLICY != 0;
    call {:si_unique_call 1659} GUID_UNATTEND_SLEEP_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_UNATTEND_SLEEP_TIMEOUT__Loc == GUID_UNATTEND_SLEEP_TIMEOUT;
    assume GUID_UNATTEND_SLEEP_TIMEOUT != 0;
    call {:si_unique_call 1660} PPM_THERMALCONSTRAINT_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_THERMALCONSTRAINT_GUID__Loc == PPM_THERMALCONSTRAINT_GUID;
    assume PPM_THERMALCONSTRAINT_GUID != 0;
    call {:si_unique_call 1661} GUID_CRITICAL_POWER_TRANSITION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CRITICAL_POWER_TRANSITION__Loc == GUID_CRITICAL_POWER_TRANSITION;
    assume GUID_CRITICAL_POWER_TRANSITION != 0;
    call {:si_unique_call 1662} GUID_SLEEP_IDLE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_IDLE_THRESHOLD__Loc == GUID_SLEEP_IDLE_THRESHOLD;
    assume GUID_SLEEP_IDLE_THRESHOLD != 0;
    call {:si_unique_call 1663} GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY != 0;
    call {:si_unique_call 1664} GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc == GUID_PROCESSOR_THROTTLE_MAXIMUM;
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM != 0;
    call {:si_unique_call 1665} GUID_PROCESSOR_PERF_LATENCY_HINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT != 0;
    call {:si_unique_call 1666} GUID_STANDBY_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_STANDBY_TIMEOUT__Loc == GUID_STANDBY_TIMEOUT;
    assume GUID_STANDBY_TIMEOUT != 0;
    call {:si_unique_call 1667} GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD != 0;
    call {:si_unique_call 1668} PPM_IDLE_ACCOUNTING_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLE_ACCOUNTING_GUID__Loc == PPM_IDLE_ACCOUNTING_GUID;
    assume PPM_IDLE_ACCOUNTING_GUID != 0;
    call {:si_unique_call 1669} GUID_TYPICAL_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TYPICAL_POWER_SAVINGS__Loc == GUID_TYPICAL_POWER_SAVINGS;
    assume GUID_TYPICAL_POWER_SAVINGS != 0;
    call {:si_unique_call 1670} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1671} GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc == GUID_PROCESSOR_SETTINGS_SUBGROUP;
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 1672} GUID_BATTERY_DISCHARGE_FLAGS_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_2__Loc == GUID_BATTERY_DISCHARGE_FLAGS_2;
    assume GUID_BATTERY_DISCHARGE_FLAGS_2 != 0;
    call {:si_unique_call 1673} GUID_HIBERNATE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_TIMEOUT__Loc == GUID_HIBERNATE_TIMEOUT;
    assume GUID_HIBERNATE_TIMEOUT != 0;
    call {:si_unique_call 1674} GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME != 0;
    call {:si_unique_call 1675} GUID_BATTERY_DISCHARGE_ACTION_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_3__Loc == GUID_BATTERY_DISCHARGE_ACTION_3;
    assume GUID_BATTERY_DISCHARGE_ACTION_3 != 0;
    call {:si_unique_call 1676} GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES != 0;
    call {:si_unique_call 1677} PPM_IDLESTATES_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLESTATES_DATA_GUID__Loc == PPM_IDLESTATES_DATA_GUID;
    assume PPM_IDLESTATES_DATA_GUID != 0;
    call {:si_unique_call 1678} GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING != 0;
    call {:si_unique_call 1679} GUID_POWERBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERBUTTON_ACTION__Loc == GUID_POWERBUTTON_ACTION;
    assume GUID_POWERBUTTON_ACTION != 0;
    call {:si_unique_call 1680} GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc == GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY != 0;
    call {:si_unique_call 1681} GUID_AUDIO_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AUDIO_PLAYBACK__Loc == GUID_AUDIO_PLAYBACK;
    assume GUID_AUDIO_PLAYBACK != 0;
    call {:si_unique_call 1682} GUID_PROCESSOR_THROTTLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_POLICY__Loc == GUID_PROCESSOR_THROTTLE_POLICY;
    assume GUID_PROCESSOR_THROTTLE_POLICY != 0;
    call {:si_unique_call 1683} GUID_BATTERY_PERCENTAGE_REMAINING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_PERCENTAGE_REMAINING__Loc == GUID_BATTERY_PERCENTAGE_REMAINING;
    assume GUID_BATTERY_PERCENTAGE_REMAINING != 0;
    call {:si_unique_call 1684} GUID_GLOBAL_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_GLOBAL_USER_PRESENCE__Loc == GUID_GLOBAL_USER_PRESENCE;
    assume GUID_GLOBAL_USER_PRESENCE != 0;
    call {:si_unique_call 1685} GUID_BATTERY_DISCHARGE_ACTION_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_2__Loc == GUID_BATTERY_DISCHARGE_ACTION_2;
    assume GUID_BATTERY_DISCHARGE_ACTION_2 != 0;
    call {:si_unique_call 1686} GUID_APPLAUNCH_BUTTON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_APPLAUNCH_BUTTON__Loc == GUID_APPLAUNCH_BUTTON;
    assume GUID_APPLAUNCH_BUTTON != 0;
    call {:si_unique_call 1687} GUID_PROCESSOR_ALLOW_THROTTLING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_ALLOW_THROTTLING__Loc == GUID_PROCESSOR_ALLOW_THROTTLING;
    assume GUID_PROCESSOR_ALLOW_THROTTLING != 0;
    call {:si_unique_call 1688} GUID_IDLE_RESILIENCY_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PERIOD__Loc == GUID_IDLE_RESILIENCY_PERIOD;
    assume GUID_IDLE_RESILIENCY_PERIOD != 0;
    call {:si_unique_call 1689} GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc == GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY != 0;
    call {:si_unique_call 1690} GUID_SLEEPBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEPBUTTON_ACTION__Loc == GUID_SLEEPBUTTON_ACTION;
    assume GUID_SLEEPBUTTON_ACTION != 0;
    call {:si_unique_call 1691} GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF != 0;
    call {:si_unique_call 1692} GUID_PROCESSOR_IDLE_DISABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DISABLE__Loc == GUID_PROCESSOR_IDLE_DISABLE;
    assume GUID_PROCESSOR_IDLE_DISABLE != 0;
    call {:si_unique_call 1693} GUID_CONSOLE_DISPLAY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CONSOLE_DISPLAY_STATE__Loc == GUID_CONSOLE_DISPLAY_STATE;
    assume GUID_CONSOLE_DISPLAY_STATE != 0;
    call {:si_unique_call 1694} GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc == GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP != 0;
    call {:si_unique_call 1695} GUID_BATTERY_DISCHARGE_FLAGS_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_0__Loc == GUID_BATTERY_DISCHARGE_FLAGS_0;
    assume GUID_BATTERY_DISCHARGE_FLAGS_0 != 0;
    call {:si_unique_call 1696} GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD != 0;
    call {:si_unique_call 1697} GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS != 0;
    call {:si_unique_call 1698} GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc == GUID_INTSTEER_TIME_UNPARK_TRIGGER;
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER != 0;
    call {:si_unique_call 1699} GUID_LIDSWITCH_STATE_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDSWITCH_STATE_CHANGE__Loc == GUID_LIDSWITCH_STATE_CHANGE;
    assume GUID_LIDSWITCH_STATE_CHANGE != 0;
    call {:si_unique_call 1700} GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc == GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS != 0;
    call {:si_unique_call 1701} GUID_SESSION_DISPLAY_STATUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_DISPLAY_STATUS__Loc == GUID_SESSION_DISPLAY_STATUS;
    assume GUID_SESSION_DISPLAY_STATUS != 0;
    call {:si_unique_call 1702} GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1703} GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc == GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM != 0;
    call {:si_unique_call 1704} GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc == GUID_VIDEO_ANNOYANCE_TIMEOUT;
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT != 0;
    call {:si_unique_call 1705} GUID_BATTERY_DISCHARGE_FLAGS_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_3__Loc == GUID_BATTERY_DISCHARGE_FLAGS_3;
    assume GUID_BATTERY_DISCHARGE_FLAGS_3 != 0;
    call {:si_unique_call 1706} GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES != 0;
    call {:si_unique_call 1707} GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc == GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE != 0;
    call {:si_unique_call 1708} GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1709} GUID_MIN_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MIN_POWER_SAVINGS__Loc == GUID_MIN_POWER_SAVINGS;
    assume GUID_MIN_POWER_SAVINGS != 0;
    call {:si_unique_call 1710} GUID_DEVICE_IDLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_IDLE_POLICY__Loc == GUID_DEVICE_IDLE_POLICY;
    assume GUID_DEVICE_IDLE_POLICY != 0;
    call {:si_unique_call 1711} GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc == GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT != 0;
    call {:si_unique_call 1712} GUID_SLEEP_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_SUBGROUP__Loc == GUID_SLEEP_SUBGROUP;
    assume GUID_SLEEP_SUBGROUP != 0;
    call {:si_unique_call 1713} GUID_DISK_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_SUBGROUP__Loc == GUID_DISK_SUBGROUP;
    assume GUID_DISK_SUBGROUP != 0;
    call {:si_unique_call 1714} GUID_BATTERY_DISCHARGE_LEVEL_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_1__Loc == GUID_BATTERY_DISCHARGE_LEVEL_1;
    assume GUID_BATTERY_DISCHARGE_LEVEL_1 != 0;
    call {:si_unique_call 1715} GUID_BATTERY_DISCHARGE_ACTION_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_0__Loc == GUID_BATTERY_DISCHARGE_ACTION_0;
    assume GUID_BATTERY_DISCHARGE_ACTION_0 != 0;
    call {:si_unique_call 1716} GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc == GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER != 0;
    call {:si_unique_call 1717} GUID_BATTERY_DISCHARGE_LEVEL_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_0__Loc == GUID_BATTERY_DISCHARGE_LEVEL_0;
    assume GUID_BATTERY_DISCHARGE_LEVEL_0 != 0;
    call {:si_unique_call 1718} GUID_VIDEO_DIM_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_DIM_TIMEOUT__Loc == GUID_VIDEO_DIM_TIMEOUT;
    assume GUID_VIDEO_DIM_TIMEOUT != 0;
    call {:si_unique_call 1719} PPM_THERMAL_POLICY_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_THERMAL_POLICY_CHANGE_GUID__Loc == PPM_THERMAL_POLICY_CHANGE_GUID;
    assume PPM_THERMAL_POLICY_CHANGE_GUID != 0;
    call {:si_unique_call 1720} GUID_PROCESSOR_PERF_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_TIME_CHECK__Loc == GUID_PROCESSOR_PERF_TIME_CHECK;
    assume GUID_PROCESSOR_PERF_TIME_CHECK != 0;
    call {:si_unique_call 1721} GUID_LIDOPEN_POWERSTATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDOPEN_POWERSTATE__Loc == GUID_LIDOPEN_POWERSTATE;
    assume GUID_LIDOPEN_POWERSTATE != 0;
    call {:si_unique_call 1722} GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc == GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE != 0;
    call {:si_unique_call 1723} GUID_PROCESSOR_PERF_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_TIME__Loc == GUID_PROCESSOR_PERF_INCREASE_TIME;
    assume GUID_PROCESSOR_PERF_INCREASE_TIME != 0;
    call {:si_unique_call 1724} GUID_MONITOR_POWER_ON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MONITOR_POWER_ON__Loc == GUID_MONITOR_POWER_ON;
    assume GUID_MONITOR_POWER_ON != 0;
    call {:si_unique_call 1725} GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME != 0;
    call {:si_unique_call 1726} GUID_PROCESSOR_THROTTLE_MINIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MINIMUM__Loc == GUID_PROCESSOR_THROTTLE_MINIMUM;
    assume GUID_PROCESSOR_THROTTLE_MINIMUM != 0;
    call {:si_unique_call 1727} GUID_ALLOW_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_AWAYMODE__Loc == GUID_ALLOW_AWAYMODE;
    assume GUID_ALLOW_AWAYMODE != 0;
    call {:si_unique_call 1728} GUID_DISK_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_ADAPTIVE_POWERDOWN__Loc == GUID_DISK_ADAPTIVE_POWERDOWN;
    assume GUID_DISK_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1729} GUID_SYSTEM_BUTTON_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_BUTTON_SUBGROUP__Loc == GUID_SYSTEM_BUTTON_SUBGROUP;
    assume GUID_SYSTEM_BUTTON_SUBGROUP != 0;
    call {:si_unique_call 1730} PPM_PERFMON_PERFSTATE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFMON_PERFSTATE_GUID__Loc == PPM_PERFMON_PERFSTATE_GUID;
    assume PPM_PERFMON_PERFSTATE_GUID != 0;
    call {:si_unique_call 1731} GUID_ALLOW_SYSTEM_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_SYSTEM_REQUIRED__Loc == GUID_ALLOW_SYSTEM_REQUIRED;
    assume GUID_ALLOW_SYSTEM_REQUIRED != 0;
    call {:si_unique_call 1732} GUID_ALLOW_DISPLAY_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_DISPLAY_REQUIRED__Loc == GUID_ALLOW_DISPLAY_REQUIRED;
    assume GUID_ALLOW_DISPLAY_REQUIRED != 0;
    call {:si_unique_call 1733} PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc == PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
    assume PPM_PERFSTATE_DOMAIN_CHANGE_GUID != 0;
    call {:si_unique_call 1734} GUID_PROCESSOR_PARKING_PERF_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_PERF_STATE__Loc == GUID_PROCESSOR_PARKING_PERF_STATE;
    assume GUID_PROCESSOR_PARKING_PERF_STATE != 0;
    call {:si_unique_call 1735} GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc == GUID_PROCESSOR_PERF_DECREASE_POLICY;
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY != 0;
    call {:si_unique_call 1736} PPM_IDLESTATE_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLESTATE_CHANGE_GUID__Loc == PPM_IDLESTATE_CHANGE_GUID;
    assume PPM_IDLESTATE_CHANGE_GUID != 0;
    call {:si_unique_call 1737} GUID_ALLOW_STANDBY_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_STANDBY_STATES__Loc == GUID_ALLOW_STANDBY_STATES;
    assume GUID_ALLOW_STANDBY_STATES != 0;
    call {:si_unique_call 1738} GUID_PROCESSOR_PERFSTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERFSTATE_POLICY__Loc == GUID_PROCESSOR_PERFSTATE_POLICY;
    assume GUID_PROCESSOR_PERFSTATE_POLICY != 0;
    call {:si_unique_call 1739} GUID_BATTERY_DISCHARGE_ACTION_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_1__Loc == GUID_BATTERY_DISCHARGE_ACTION_1;
    assume GUID_BATTERY_DISCHARGE_ACTION_1 != 0;
    call {:si_unique_call 1740} GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc == GUID_PROCESSOR_PERF_INCREASE_POLICY;
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY != 0;
    call {:si_unique_call 1741} GUID_VIDEO_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_SUBGROUP__Loc == GUID_VIDEO_SUBGROUP;
    assume GUID_VIDEO_SUBGROUP != 0;
    call {:si_unique_call 1742} GUID_HIBERNATE_FASTS4_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_FASTS4_POLICY__Loc == GUID_HIBERNATE_FASTS4_POLICY;
    assume GUID_HIBERNATE_FASTS4_POLICY != 0;
    call {:si_unique_call 1743} GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS != 0;
    call {:si_unique_call 1744} GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD != 0;
    call {:si_unique_call 1745} GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1746} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1747} PPM_PERFSTATE_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATE_CHANGE_GUID__Loc == PPM_PERFSTATE_CHANGE_GUID;
    assume PPM_PERFSTATE_CHANGE_GUID != 0;
    call {:si_unique_call 1748} GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc == GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1749} GUID_USERINTERFACEBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USERINTERFACEBUTTON_ACTION__Loc == GUID_USERINTERFACEBUTTON_ACTION;
    assume GUID_USERINTERFACEBUTTON_ACTION != 0;
    call {:si_unique_call 1750} GUID_PCIEXPRESS_ASPM_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_ASPM_POLICY__Loc == GUID_PCIEXPRESS_ASPM_POLICY;
    assume GUID_PCIEXPRESS_ASPM_POLICY != 0;
    call {:si_unique_call 1751} GUID_BATTERY_DISCHARGE_FLAGS_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_1__Loc == GUID_BATTERY_DISCHARGE_FLAGS_1;
    assume GUID_BATTERY_DISCHARGE_FLAGS_1 != 0;
    call {:si_unique_call 1752} GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_INCREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY != 0;
    call {:si_unique_call 1753} GUID_INTSTEER_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_SUBGROUP__Loc == GUID_INTSTEER_SUBGROUP;
    assume GUID_INTSTEER_SUBGROUP != 0;
    call {:si_unique_call 1754} GUID_DISK_BURST_IGNORE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_BURST_IGNORE_THRESHOLD__Loc == GUID_DISK_BURST_IGNORE_THRESHOLD;
    assume GUID_DISK_BURST_IGNORE_THRESHOLD != 0;
    call {:si_unique_call 1755} GUID_DISK_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_POWERDOWN_TIMEOUT__Loc == GUID_DISK_POWERDOWN_TIMEOUT;
    assume GUID_DISK_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1756} GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD != 0;
    call {:si_unique_call 1757} PPM_PERFSTATES_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATES_DATA_GUID__Loc == PPM_PERFSTATES_DATA_GUID;
    assume PPM_PERFSTATES_DATA_GUID != 0;
    call {:si_unique_call 1758} NO_SUBGROUP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NO_SUBGROUP_GUID__Loc == NO_SUBGROUP_GUID;
    assume NO_SUBGROUP_GUID != 0;
    call {:si_unique_call 1759} GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc == GUID_VIDEO_FULLSCREEN_PLAYBACK;
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK != 0;
    call {:si_unique_call 1760} GUID_PROCESSOR_PERF_BOOST_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_MODE__Loc == GUID_PROCESSOR_PERF_BOOST_MODE;
    assume GUID_PROCESSOR_PERF_BOOST_MODE != 0;
    call {:si_unique_call 1761} ALL_POWERSCHEMES_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume ALL_POWERSCHEMES_GUID__Loc == ALL_POWERSCHEMES_GUID;
    assume ALL_POWERSCHEMES_GUID != 0;
    call {:si_unique_call 1762} GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY != 0;
    call {:si_unique_call 1763} GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc == GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING != 0;
    call {:si_unique_call 1764} GUID_PROCESSOR_IDLE_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_TIME_CHECK__Loc == GUID_PROCESSOR_IDLE_TIME_CHECK;
    assume GUID_PROCESSOR_IDLE_TIME_CHECK != 0;
    call {:si_unique_call 1765} GUID_INTSTEER_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_MODE__Loc == GUID_INTSTEER_MODE;
    assume GUID_INTSTEER_MODE != 0;
    call {:si_unique_call 1766} GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc == GUID_IDLE_RESILIENCY_PLATFORM_STATE;
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE != 0;
    call {:si_unique_call 1767} GUID_BACKGROUND_TASK_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BACKGROUND_TASK_NOTIFICATION__Loc == GUID_BACKGROUND_TASK_NOTIFICATION;
    assume GUID_BACKGROUND_TASK_NOTIFICATION != 0;
    call {:si_unique_call 1768} GUID_PROCESSOR_PERF_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_HISTORY__Loc == GUID_PROCESSOR_PERF_HISTORY;
    assume GUID_PROCESSOR_PERF_HISTORY != 0;
    call {:si_unique_call 1769} GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc == GUID_VIDEO_ADAPTIVE_POWERDOWN;
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1770} GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc == GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT != 0;
    call {:si_unique_call 1771} GUID_PROCESSOR_PERF_BOOST_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_POLICY__Loc == GUID_PROCESSOR_PERF_BOOST_POLICY;
    assume GUID_PROCESSOR_PERF_BOOST_POLICY != 0;
    call {:si_unique_call 1772} GUID_SESSION_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_USER_PRESENCE__Loc == GUID_SESSION_USER_PRESENCE;
    assume GUID_SESSION_USER_PRESENCE != 0;
    call {:si_unique_call 1773} GUID_LIDCLOSE_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDCLOSE_ACTION__Loc == GUID_LIDCLOSE_ACTION;
    assume GUID_LIDCLOSE_ACTION != 0;
    call {:si_unique_call 1774} GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc == GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS != 0;
    call {:si_unique_call 1775} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD != 0;
    call {:si_unique_call 1776} PPM_IDLE_ACCOUNTING_EX_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLE_ACCOUNTING_EX_GUID__Loc == PPM_IDLE_ACCOUNTING_EX_GUID;
    assume PPM_IDLE_ACCOUNTING_EX_GUID != 0;
    call {:si_unique_call 1777} GUID_PROCESSOR_PERF_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_TIME__Loc == GUID_PROCESSOR_PERF_DECREASE_TIME;
    assume GUID_PROCESSOR_PERF_DECREASE_TIME != 0;
    call {:si_unique_call 1778} GUID_MAX_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MAX_POWER_SAVINGS__Loc == GUID_MAX_POWER_SAVINGS;
    assume GUID_MAX_POWER_SAVINGS != 0;
    call {:si_unique_call 1779} GUID_BATTERY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_SUBGROUP__Loc == GUID_BATTERY_SUBGROUP;
    assume GUID_BATTERY_SUBGROUP != 0;
    call {:si_unique_call 1780} GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_DECREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY != 0;
    call {:si_unique_call 1781} GUID_IDLE_BACKGROUND_TASK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_BACKGROUND_TASK__Loc == GUID_IDLE_BACKGROUND_TASK;
    assume GUID_IDLE_BACKGROUND_TASK != 0;
    call {:si_unique_call 1782} GUID_POWERSCHEME_PERSONALITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERSCHEME_PERSONALITY__Loc == GUID_POWERSCHEME_PERSONALITY;
    assume GUID_POWERSCHEME_PERSONALITY != 0;
    call {:si_unique_call 1783} GUID_IDLE_RESILIENCY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_SUBGROUP__Loc == GUID_IDLE_RESILIENCY_SUBGROUP;
    assume GUID_IDLE_RESILIENCY_SUBGROUP != 0;
    call {:si_unique_call 1784} GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc == GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN != 0;
    call {:si_unique_call 1785} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING != 0;
    call {:si_unique_call 1786} GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1787} GUID_ACTIVE_POWERSCHEME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACTIVE_POWERSCHEME__Loc == GUID_ACTIVE_POWERSCHEME;
    assume GUID_ACTIVE_POWERSCHEME != 0;
    call {:si_unique_call 1788} GUID_SYSTEM_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_AWAYMODE__Loc == GUID_SYSTEM_AWAYMODE;
    assume GUID_SYSTEM_AWAYMODE != 0;
    call {:si_unique_call 1789} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 1790} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 1791} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1792} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 1793} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1794} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1795} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 1796} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 1797} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 1798} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 1799} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 1800} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1801} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 1802} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 1803} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 1804} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 1805} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 1806} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 1807} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1808} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 1809} sdv_driver_object__Loc := __HAVOC_malloc_or_null(68);
    assume sdv_driver_object__Loc == sdv_driver_object;
    assume sdv_driver_object != 0;
    call {:si_unique_call 1810} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 1811} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 1812} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 1813} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 1814} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 1815} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1816} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 1817} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 1818} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 1819} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 1820} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 1821} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 1822} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1823} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 1824} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 1825} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 1826} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 1827} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 1828} sdv_MmMapIoSpace_int__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MmMapIoSpace_int__Loc == sdv_MmMapIoSpace_int;
    assume sdv_MmMapIoSpace_int != 0;
    call {:si_unique_call 1829} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1830} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 1831} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1832} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 1833} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 1834} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1835} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 1836} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 1837} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 1838} vslice_dummy_var_42 := __HAVOC_malloc(60);
    assume {:mainInitDone} true;
    call {:si_unique_call 1839} corralExtraInit();
    call {:si_unique_call 1840} corralExplainErrorInit();
    call {:si_unique_call 1841} _sdv_init18();
    call {:si_unique_call 1842} _sdv_init1();
    call {:si_unique_call 1843} _sdv_init4();
    call {:si_unique_call 1844} _sdv_init5();
    call {:si_unique_call 1845} _sdv_init3();
    call {:si_unique_call 1846} _sdv_init16();
    call {:si_unique_call 1847} _sdv_init14();
    call {:si_unique_call 1848} _sdv_init6();
    call {:si_unique_call 1849} _sdv_init15();
    call {:si_unique_call 1850} _sdv_init10();
    call {:si_unique_call 1851} _sdv_init11();
    call {:si_unique_call 1852} _sdv_init9();
    call {:si_unique_call 1853} _sdv_init12();
    call {:si_unique_call 1854} _sdv_init13();
    call {:si_unique_call 1855} _sdv_init7();
    call {:si_unique_call 1856} _sdv_init8();
    call {:si_unique_call 1857} _sdv_init2();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_942 := 0;
    goto L41;

  L41:
    assume Tmp_942 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_941 := 0;
    goto L45;

  L45:
    assume Tmp_941 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1858} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L39;

  L39:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_941 := 1;
    goto L45;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_942 := 1;
    goto L41;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_TitleIndex: int, actual_Type_3: int, actual_Data: int, actual_DataSize: int) returns (Tmp_944: int);
  free ensures {:va_keep} Tmp_944 == -1073741790 || Tmp_944 == -1073741816 || Tmp_944 == -1073741823 || Tmp_944 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_TitleIndex: int, actual_Type_3: int, actual_Data: int, actual_DataSize: int) returns (Tmp_944: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_944 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_944 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_944 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_944 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_173: int;

  anon0:
    call {:si_unique_call 1859} vslice_dummy_var_173 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_38: int) returns (Tmp_948: int);
  free ensures {:va_keep} Tmp_948 == 0 || Tmp_948 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_38: int) returns (Tmp_948: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_948 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_948 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_950: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_950: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_950 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end()
{
  var vslice_dummy_var_174: int;

  anon0:
    call {:si_unique_call 1860} vslice_dummy_var_174 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoAllocateMdl"} {:osmodel} IoAllocateMdl(actual_VirtualAddress: int, actual_Length_1: int, actual_SecondaryBuffer: int, actual_ChargeQuota: int, actual_Irp_39: int) returns (Tmp_956: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateMdl"} {:osmodel} IoAllocateMdl(actual_VirtualAddress: int, actual_Length_1: int, actual_SecondaryBuffer: int, actual_ChargeQuota: int, actual_Irp_39: int) returns (Tmp_956: int)
{
  var {:pointer} sdv_455: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1861} sdv_455 := __HAVOC_malloc(1);
    Tmp_956 := sdv_455;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_956 := 0;
    goto L1;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_175: int;

  anon0:
    call {:si_unique_call 1862} vslice_dummy_var_175 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_47: int) returns (Tmp_962: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_47: int) returns (Tmp_962: int)
{
  var {:pointer} DeviceObject_47: int;

  anon0:
    DeviceObject_47 := actual_DeviceObject_47;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_962 := sdv_p_devobj_top;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_962 := DeviceObject_47;
    goto L1;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_176: int;

  anon0:
    call {:si_unique_call 1863} vslice_dummy_var_176 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_966: int);
  free ensures {:va_keep} Tmp_966 == 0 || Tmp_966 == actual_TargetDevice_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_966: int)
{
  var {:pointer} TargetDevice_1: int;

  anon0:
    TargetDevice_1 := actual_TargetDevice_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} TargetDevice_1 == sdv_p_devobj_pdo;
    Tmp_966 := TargetDevice_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} TargetDevice_1 != sdv_p_devobj_pdo;
    Tmp_966 := 0;
    goto L1;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_2: int)
{
  var vslice_dummy_var_177: int;

  anon0:
    call {:si_unique_call 1864} vslice_dummy_var_177 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeFlushIoBuffers"} {:osmodel} sdv_KeFlushIoBuffers(actual_Mdl_2: int, actual_ReadOperation: int, actual_DmaOperation: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeFlushIoBuffers"} {:osmodel} sdv_KeFlushIoBuffers(actual_Mdl_2: int, actual_ReadOperation: int, actual_DmaOperation: int)
{
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1865} vslice_dummy_var_178 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl_3: int)
{
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 1866} vslice_dummy_var_179 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 1867} vslice_dummy_var_180 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_NewIrql;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1868} vslice_dummy_var_181 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    sdv_irql_current := NewIrql;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "KeWaitForMultipleObjects"} {:osmodel} KeWaitForMultipleObjects(actual_Count: int, actual_Object_1: int, actual_WaitType: int, actual_WaitReason_1: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout_1: int, actual_WaitBlockArray: int) returns (Tmp_978: int);
  free ensures {:va_keep} Tmp_978 == 0 || Tmp_978 == 258;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForMultipleObjects"} {:osmodel} KeWaitForMultipleObjects(actual_Count: int, actual_Object_1: int, actual_WaitType: int, actual_WaitReason_1: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout_1: int, actual_WaitBlockArray: int) returns (Tmp_978: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_978 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_978 := 258;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int)
{
  var vslice_dummy_var_182: int;

  anon0:
    call {:si_unique_call 1869} vslice_dummy_var_182 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int)
{
  var vslice_dummy_var_183: int;

  anon0:
    call {:si_unique_call 1870} vslice_dummy_var_183 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes: int)
{
  var vslice_dummy_var_184: int;

  anon0:
    call {:si_unique_call 1871} vslice_dummy_var_184 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_986: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_986: int)
{
  var {:pointer} ps: int;
  var {:scalar} minor_1: int;
  var {:scalar} Tmp_988: int;
  var {:scalar} sdv_466: int;
  var {:scalar} Tmp_989: int;
  var {:scalar} status_81: int;
  var {:pointer} po: int;
  var {:pointer} pirp_12: int;

  anon0:
    po := actual_po;
    pirp_12 := actual_pirp_12;
    status_81 := 0;
    minor_1 := sdv_466;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    havoc ps;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 1872} sdv_SetStatus(pirp_12);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1873} sdv_stub_dispatch_begin();
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto L60;

  L60:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    Tmp_989 := 0;
    goto L216;

  L216:
    assume Tmp_989 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L66;

  L66:
    call {:si_unique_call 1874} status_81 := PciDrvDispatchPnp(po, pirp_12);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 1875} sdv_stub_dispatch_end(status_81, 0);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Tmp_986 := status_81;
    goto LM2;

  LM2:
    return;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    goto L66;

  anon65_Then:
    Tmp_989 := 1;
    goto L216;

  anon63_Then:
    goto L61;

  anon89_Then:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_start_irp_already_issued != 0;
    Tmp_988 := 0;
    goto L222;

  L222:
    assume Tmp_988 != 0;
    goto L60;

  anon62_Then:
    assume {:partition} sdv_start_irp_already_issued == 0;
    Tmp_988 := 1;
    goto L222;

  anon66_Then:
    call {:si_unique_call 1876} status_81 := sdv_DoNothing();
    goto L72;

  anon67_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1877} status_81 := PciDrvSystemControl(po, pirp_12);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1878} sdv_SetPowerIrpMinorFunction(pirp_12);
    call {:si_unique_call 1879} status_81 := PciDrvDispatchPower(po, pirp_12);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1880} status_81 := PciDrvCleanup(po, pirp_12);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon86_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    call {:si_unique_call 1881} status_81 := sdv_DoNothing();
    goto L72;

  anon71_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1882} status_81 := sdv_DoNothing();
    goto L72;

  anon72_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1883} status_81 := sdv_DoNothing();
    goto L72;

  anon73_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1884} status_81 := PciDrvDispatchIO#1(po, pirp_12);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon85_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    call {:si_unique_call 1885} status_81 := sdv_DoNothing();
    goto L72;

  anon75_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1886} status_81 := sdv_DoNothing();
    goto L72;

  anon76_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1887} status_81 := sdv_DoNothing();
    goto L72;

  anon77_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1888} status_81 := sdv_DoNothing();
    goto L72;

  anon78_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1889} status_81 := PciDrvDispatchIO#1(po, pirp_12);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon79_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1890} status_81 := PciDrvDispatchIO#1(po, pirp_12);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1891} status_81 := PciDrvClose(po, pirp_12);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1892} status_81 := PciDrvCreate(po, pirp_12);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_185: int;

  anon0:
    call {:si_unique_call 1893} vslice_dummy_var_185 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_2: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName: int) returns (Tmp_992: int);
  free ensures {:va_keep} Tmp_992 == -1073741823 || Tmp_992 == -1073741808 || Tmp_992 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_2: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName: int) returns (Tmp_992: int)
{
  var {:scalar} Tmp_994: int;
  var {:pointer} SymbolicLinkName: int;

  anon0:
    SymbolicLinkName := actual_SymbolicLinkName;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_992 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_992 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName != 0;
    assume SymbolicLinkName > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_994 := 0;
    goto L22;

  L22:
    assume Tmp_994 != 0;
    Tmp_992 := 0;
    goto L1;

  anon8_Then:
    Tmp_994 := 1;
    goto L22;
}



procedure {:origName "IoBuildSynchronousFsdRequest"} {:osmodel} IoBuildSynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_48: int, actual_Buffer_1: int, actual_Length_3: int, actual_StartingOffset: int, actual_Event_1: int, actual_IoStatusBlock: int) returns (Tmp_995: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoBuildSynchronousFsdRequest"} {:osmodel} IoBuildSynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_48: int, actual_Buffer_1: int, actual_Length_3: int, actual_StartingOffset: int, actual_Event_1: int, actual_IoStatusBlock: int) returns (Tmp_995: int)
{
  var {:pointer} Tmp_996: int;
  var {:scalar} MajorFunction: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    MajorFunction := actual_MajorFunction;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    havoc Tmp_996;
    assume {:nonnull} Tmp_996 != 0;
    assume Tmp_996 > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    Tmp_995 := sdv_IoBuildSynchronousFsdRequest_irp;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_995 := 0;
    goto L1;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_186: int;

  anon0:
    call {:si_unique_call 1894} vslice_dummy_var_186 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    sdv_irql_current := new_1;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_187: int;

  anon0:
    call {:si_unique_call 1895} vslice_dummy_var_187 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_4: int)
{
  var vslice_dummy_var_188: int;

  anon0:
    call {:si_unique_call 1896} vslice_dummy_var_188 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_1: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_5: int, actual_ResultLength: int) returns (Tmp_1006: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1006 == -1073741811 || Tmp_1006 == -1073741823 || Tmp_1006 == 0 || Tmp_1006 == 5 || Tmp_1006 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_1: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_5: int, actual_ResultLength: int) returns (Tmp_1006: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_479: int;
  var {:scalar} Length_5: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_5 := actual_Length_5;
    ResultLength := actual_ResultLength;
    L := sdv_479;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_1006 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_1006 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_5;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_5 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_1006 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_5 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_5;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_1006 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_5 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_1006 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_5;
    goto L13;
}



procedure {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_1: int, actual_CacheType: int) returns (Tmp_1008: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_1: int, actual_CacheType: int) returns (Tmp_1008: int)
{
  var {:scalar} PhysicalAddress: int;
  var {:pointer} structPtr888PhysicalAddress: int;

  anon0:
    call {:si_unique_call 1897} PhysicalAddress := __HAVOC_malloc(20);
    structPtr888PhysicalAddress := actual_structPtr888PhysicalAddress;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Tmp_1008 := sdv_MmMapIoSpace_int;
    return;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int)
{
  var vslice_dummy_var_189: int;

  anon0:
    call {:si_unique_call 1898} vslice_dummy_var_189 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine_1: int, actual_SynchronizeContext: int) returns (Tmp_1012: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, alloc, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1012 == 0 || Tmp_1012 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine_1: int, actual_SynchronizeContext: int) returns (Tmp_1012: int)
{
  var {:scalar} b: int;
  var {:scalar} SynchronizeRoutine_1: int;
  var {:pointer} SynchronizeContext: int;

  anon0:
    SynchronizeRoutine_1 := actual_SynchronizeRoutine_1;
    SynchronizeContext := actual_SynchronizeContext;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 4;
    call {:si_unique_call 1899} b := sdv_RunKSynchronizeRoutines(SynchronizeRoutine_1, SynchronizeContext);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    Tmp_1012 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_190: int;

  anon0:
    call {:si_unique_call 1900} vslice_dummy_var_190 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag_1: int)
{
  var vslice_dummy_var_191: int;

  anon0:
    call {:si_unique_call 1901} vslice_dummy_var_191 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int)
{
  var vslice_dummy_var_192: int;

  anon0:
    call {:si_unique_call 1902} vslice_dummy_var_192 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int)
{
  var vslice_dummy_var_193: int;

  anon0:
    call {:si_unique_call 1903} vslice_dummy_var_193 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1024: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1024: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_1024 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "ExDeleteNPagedLookasideList"} {:osmodel} ExDeleteNPagedLookasideList(actual_Lookaside_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExDeleteNPagedLookasideList"} {:osmodel} ExDeleteNPagedLookasideList(actual_Lookaside_1: int)
{
  var vslice_dummy_var_194: int;

  anon0:
    call {:si_unique_call 1904} vslice_dummy_var_194 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_1028: int);
  free ensures {:va_keep} Tmp_1028 == 1 || Tmp_1028 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_1028: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1028 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1028 := 0;
    goto L1;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 1905} vslice_dummy_var_195 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_2: int, actual_Type_4: int, actual_State_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_2: int, actual_Type_4: int, actual_State_2: int)
{
  var {:pointer} Event_2: int;
  var {:scalar} Type_4: int;
  var {:scalar} State_2: int;
  var vslice_dummy_var_196: int;

  anon0:
    call {:si_unique_call 1906} vslice_dummy_var_196 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    Type_4 := actual_Type_4;
    State_2 := actual_State_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:origName "sdv_IoInitializeDpcRequest"} {:osmodel} sdv_IoInitializeDpcRequest(actual_DeviceObject_52: int, actual_DpcRoutine: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoInitializeDpcRequest"} {:osmodel} sdv_IoInitializeDpcRequest(actual_DeviceObject_52: int, actual_DpcRoutine: int)
{
  var {:scalar} DpcRoutine: int;
  var vslice_dummy_var_197: int;

  anon0:
    call {:si_unique_call 1907} vslice_dummy_var_197 := __HAVOC_malloc(4);
    DpcRoutine := actual_DpcRoutine;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int)
{
  var vslice_dummy_var_198: int;

  anon0:
    call {:si_unique_call 1908} vslice_dummy_var_198 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_ExInterlockedInsertHeadList"} {:osmodel} sdv_ExInterlockedInsertHeadList(actual_ListHead_1: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_1044: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExInterlockedInsertHeadList"} {:osmodel} sdv_ExInterlockedInsertHeadList(actual_ListHead_1: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_1044: int)
{
  var {:pointer} sdv_495: int;
  var {:pointer} p_5: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1909} sdv_495 := __HAVOC_malloc(1);
    p_5 := sdv_495;
    Tmp_1044 := p_5;
    goto L1;

  L1:
    return;

  anon3_Then:
    p_5 := 0;
    Tmp_1044 := p_5;
    goto L1;
}



procedure {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_4: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_4: int)
{
  var {:pointer} SpinLock_4: int;
  var vslice_dummy_var_199: int;

  anon0:
    call {:si_unique_call 1910} vslice_dummy_var_199 := __HAVOC_malloc(4);
    SpinLock_4 := actual_SpinLock_4;
    assume {:nonnull} SpinLock_4 != 0;
    assume SpinLock_4 > 0;
    Mem_T.INT4[SpinLock_4] := 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_2: int, actual_Tag_2: int) returns (Tmp_1048: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_2: int, actual_Tag_2: int) returns (Tmp_1048: int)
{
  var {:pointer} sdv_497: int;
  var {:scalar} NumberOfBytes_2: int;

  anon0:
    NumberOfBytes_2 := actual_NumberOfBytes_2;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1911} sdv_497 := __HAVOC_malloc(NumberOfBytes_2);
    Tmp_1048 := sdv_497;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1048 := 0;
    goto L1;
}



procedure {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_54: int) returns (Tmp_1050: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_54: int) returns (Tmp_1050: int)
{
  var {:pointer} ioWorkItem: int;
  var {:pointer} sdv_499: int;
  var {:scalar} Tmp_1051: int;

  anon0:
    call {:si_unique_call 1912} sdv_499 := __HAVOC_malloc(1);
    ioWorkItem := sdv_499;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ioWorkItem == 0;
    Tmp_1051 := 0;
    goto L27;

  L27:
    assume Tmp_1051 != 0;
    assume {:nonnull} ioWorkItem != 0;
    assume ioWorkItem > 0;
    Tmp_1050 := ioWorkItem;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} ioWorkItem != 0;
    Tmp_1051 := 1;
    goto L27;

  anon6_Then:
    Tmp_1050 := 0;
    goto L1;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_1: int, actual_Enable: int) returns (Tmp_1053: int);
  free ensures {:va_keep} Tmp_1053 == -1073741772 || Tmp_1053 == -1073741824 || Tmp_1053 == -1073741789 || Tmp_1053 == -1073741670 || Tmp_1053 == -1073741808 || Tmp_1053 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_1: int, actual_Enable: int) returns (Tmp_1053: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_1053 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_1053 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_1053 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_1053 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_1053 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_1053 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 1913} vslice_dummy_var_200 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_201: int;

  anon0:
    call {:si_unique_call 1914} vslice_dummy_var_201 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_55: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_1061: int);
  free ensures {:va_keep} Tmp_1061 == -1073741811 || Tmp_1061 == -1073741808 || Tmp_1061 == -1073741823 || Tmp_1061 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_55: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_1061: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1061 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1061 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_1061 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1061 := 0;
    goto L1;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_1063: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_1063: int)
{
  var {:scalar} p_6: int;

  anon0:
    Tmp_1063 := p_6;
    return;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_1065: int);
  free ensures {:va_keep} Tmp_1065 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_1065: int)
{

  anon0:
    Tmp_1065 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1067: int);
  free ensures {:va_keep} Tmp_1067 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1067: int)
{

  anon0:
    Tmp_1067 := -1073741823;
    return;
}



procedure {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside_2: int) returns (Tmp_1069: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside_2: int) returns (Tmp_1069: int)
{
  var {:pointer} sdv_505: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1915} sdv_505 := __HAVOC_malloc(1);
    Tmp_1069 := sdv_505;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1069 := 0;
    goto L1;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_56: int, actual_Action: int) returns (Tmp_1071: int);
  free ensures {:va_keep} Tmp_1071 == -1073741823 || Tmp_1071 == -1073741811 || Tmp_1071 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_56: int, actual_Action: int) returns (Tmp_1071: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1071 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1071 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_1071 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int)
{
  var {:pointer} Event_3: int;
  var vslice_dummy_var_202: int;

  anon0:
    call {:si_unique_call 1916} vslice_dummy_var_202 := __HAVOC_malloc(4);
    Event_3 := actual_Event_3;
    assume {:nonnull} Event_3 != 0;
    assume Event_3 > 0;
    return;
}



procedure {:origName "NICSetMulticastList"} NICSetMulticastList(actual_FdoData_91: int) returns (Tmp_1087: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1087 == -1073741661 || Tmp_1087 == 0 || Tmp_1087 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSetMulticastList"} NICSetMulticastList(actual_FdoData_91: int) returns (Tmp_1087: int)
{
  var {:scalar} i_9: int;
  var {:pointer} Tmp_1088: int;
  var {:scalar} Tmp_1089: int;
  var {:pointer} Tmp_1090: int;
  var {:pointer} Tmp_1091: int;
  var {:scalar} Tmp_1092: int;
  var {:scalar} Tmp_1093: int;
  var {:scalar} counter_1: int;
  var {:scalar} Tmp_1094: int;
  var {:pointer} McAddress: int;
  var {:scalar} Tmp_1095: int;
  var {:pointer} Tmp_1096: int;
  var {:pointer} Tmp_1097: int;
  var {:scalar} sdv_518: int;
  var {:pointer} Tmp_1098: int;
  var {:pointer} Tmp_1099: int;
  var {:scalar} Tmp_1100: int;
  var {:pointer} Tmp_1101: int;
  var {:scalar} Tmp_1102: int;
  var {:scalar} Tmp_1103: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_1104: int;
  var {:pointer} Tmp_1105: int;
  var {:scalar} Tmp_1106: int;
  var {:scalar} Tmp_1107: int;
  var {:pointer} Tmp_1108: int;
  var {:pointer} Tmp_1109: int;
  var {:pointer} Tmp_1110: int;
  var {:scalar} Tmp_1111: int;
  var {:scalar} Tmp_1112: int;
  var {:scalar} Tmp_1113: int;
  var {:pointer} Tmp_1114: int;
  var {:pointer} Tmp_1116: int;
  var {:pointer} Tmp_1117: int;
  var {:pointer} Tmp_1118: int;
  var {:scalar} Tmp_1119: int;
  var {:pointer} Tmp_1120: int;
  var {:pointer} Tmp_1121: int;
  var {:pointer} Tmp_1122: int;
  var {:scalar} bResult_1: int;
  var {:scalar} status_84: int;
  var {:scalar} Tmp_1123: int;
  var {:pointer} Tmp_1124: int;
  var {:pointer} Tmp_1125: int;
  var {:pointer} Tmp_1126: int;
  var {:pointer} Tmp_1127: int;
  var {:scalar} Tmp_1128: int;
  var {:pointer} FdoData_91: int;

  anon0:
    FdoData_91 := actual_FdoData_91;
    call {:si_unique_call 1917} Tmp_1090 := __HAVOC_malloc(24);
    call {:si_unique_call 1918} Tmp_1091 := __HAVOC_malloc(24);
    call {:si_unique_call 1919} Tmp_1096 := __HAVOC_malloc(24);
    call {:si_unique_call 1920} Tmp_1097 := __HAVOC_malloc(24);
    call {:si_unique_call 1921} Tmp_1098 := __HAVOC_malloc(768);
    call {:si_unique_call 1922} Tmp_1099 := __HAVOC_malloc(24);
    call {:si_unique_call 1923} Tmp_1104 := __HAVOC_malloc(100);
    call {:si_unique_call 1924} Tmp_1105 := __HAVOC_malloc(768);
    call {:si_unique_call 1925} Tmp_1108 := __HAVOC_malloc(768);
    call {:si_unique_call 1926} Tmp_1114 := __HAVOC_malloc(768);
    call {:si_unique_call 1927} Tmp_1116 := __HAVOC_malloc(768);
    call {:si_unique_call 1928} Tmp_1117 := __HAVOC_malloc(144);
    call {:si_unique_call 1929} Tmp_1120 := __HAVOC_malloc(768);
    call {:si_unique_call 1930} Tmp_1121 := __HAVOC_malloc(24);
    call {:si_unique_call 1931} Tmp_1124 := __HAVOC_malloc(768);
    call {:si_unique_call 1932} Tmp_1125 := __HAVOC_malloc(160);
    call {:si_unique_call 1933} Tmp_1126 := __HAVOC_malloc(768);
    call {:si_unique_call 1934} Tmp_1127 := __HAVOC_malloc(24);
    Tmp_1104 := strConst__li2bpl286;
    call {:si_unique_call 1935} DebugPrint(5, 32, Tmp_1104);
    i_9 := 0;
    goto L12;

  L12:
    call {:si_unique_call 1936} i_9, Tmp_1089, Tmp_1090, Tmp_1091, Tmp_1092, Tmp_1093, Tmp_1094, McAddress, Tmp_1095, Tmp_1096, Tmp_1097, Tmp_1098, Tmp_1099, Tmp_1100, Tmp_1102, Tmp_1103, j, Tmp_1105, Tmp_1106, Tmp_1108, Tmp_1109, Tmp_1111, Tmp_1112, Tmp_1113, Tmp_1114, Tmp_1116, Tmp_1119, Tmp_1120, Tmp_1121, Tmp_1123, Tmp_1124, Tmp_1125, Tmp_1126, Tmp_1127, Tmp_1128 := NICSetMulticastList_loop_L12(i_9, Tmp_1089, Tmp_1090, Tmp_1091, Tmp_1092, Tmp_1093, Tmp_1094, McAddress, Tmp_1095, Tmp_1096, Tmp_1097, Tmp_1098, Tmp_1099, Tmp_1100, Tmp_1102, Tmp_1103, j, Tmp_1105, Tmp_1106, Tmp_1108, Tmp_1109, Tmp_1111, Tmp_1112, Tmp_1113, Tmp_1114, Tmp_1116, Tmp_1119, Tmp_1120, Tmp_1121, Tmp_1123, Tmp_1124, Tmp_1125, Tmp_1126, Tmp_1127, Tmp_1128, FdoData_91);
    goto L12_last;

  L12_last:
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_1103 := i_9;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1116;
    assume {:nonnull} Tmp_1116 != 0;
    assume Tmp_1116 > 0;
    havoc Tmp_1099;
    assume {:nonnull} Tmp_1099 != 0;
    assume Tmp_1099 > 0;
    Tmp_1092 := Mem_T.INT4[Tmp_1099 + 5 * 4];
    Tmp_1106 := i_9;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1120;
    assume {:nonnull} Tmp_1120 != 0;
    assume Tmp_1120 > 0;
    havoc Tmp_1121;
    assume {:nonnull} Tmp_1121 != 0;
    assume Tmp_1121 > 0;
    Tmp_1112 := Mem_T.INT4[Tmp_1121 + 4 * 4];
    Tmp_1113 := i_9;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1124;
    assume {:nonnull} Tmp_1124 != 0;
    assume Tmp_1124 > 0;
    havoc Tmp_1097;
    assume {:nonnull} Tmp_1097 != 0;
    assume Tmp_1097 > 0;
    Tmp_1094 := Mem_T.INT4[Tmp_1097 + 3 * 4];
    Tmp_1093 := i_9;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1105;
    assume {:nonnull} Tmp_1105 != 0;
    assume Tmp_1105 > 0;
    havoc Tmp_1096;
    assume {:nonnull} Tmp_1096 != 0;
    assume Tmp_1096 > 0;
    Tmp_1111 := Mem_T.INT4[Tmp_1096 + 2 * 4];
    Tmp_1119 := i_9;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1108;
    assume {:nonnull} Tmp_1108 != 0;
    assume Tmp_1108 > 0;
    havoc Tmp_1090;
    assume {:nonnull} Tmp_1090 != 0;
    assume Tmp_1090 > 0;
    Tmp_1102 := Mem_T.INT4[Tmp_1090 + 1 * 4];
    Tmp_1128 := i_9;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1098;
    assume {:nonnull} Tmp_1098 != 0;
    assume Tmp_1098 > 0;
    havoc Tmp_1091;
    assume {:nonnull} Tmp_1091 != 0;
    assume Tmp_1091 > 0;
    Tmp_1089 := Mem_T.INT4[Tmp_1091];
    Tmp_1125 := strConst__li2bpl288;
    call {:si_unique_call 1937} DebugPrint(5, 32, Tmp_1125);
    Tmp_1100 := i_9 * 6;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1109;
    assume {:nonnull} Tmp_1109 != 0;
    assume Tmp_1109 > 0;
    havoc Tmp_1114;
    McAddress := Tmp_1114 + Tmp_1100 * 4;
    j := 0;
    goto L25;

  L25:
    call {:si_unique_call 1938} Tmp_1095, j, Tmp_1123, Tmp_1126, Tmp_1127 := NICSetMulticastList_loop_L25(i_9, McAddress, Tmp_1095, j, Tmp_1123, Tmp_1126, Tmp_1127, FdoData_91);
    goto L25_last;

  L25_last:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 6 > j;
    Tmp_1123 := j;
    Tmp_1095 := i_9;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1126;
    assume {:nonnull} Tmp_1126 != 0;
    assume Tmp_1126 > 0;
    havoc Tmp_1127;
    assume {:nonnull} McAddress != 0;
    assume McAddress > 0;
    assume {:nonnull} Tmp_1127 != 0;
    assume Tmp_1127 > 0;
    Mem_T.INT4[McAddress] := Mem_T.INT4[Tmp_1127 + Tmp_1123 * 4];
    j := j + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:partition} j >= 6;
    i_9 := i_9 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1101;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    assume {:nonnull} Tmp_1101 != 0;
    assume Tmp_1101 > 0;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1118;
    assume {:nonnull} Tmp_1118 != 0;
    assume Tmp_1118 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(Tmp_1118)] := 0;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1122;
    assume {:nonnull} Tmp_1122 != 0;
    assume Tmp_1122 > 0;
    call {:si_unique_call 1939} sdv_518 := WaitScb(FdoData_91);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_518 != 0;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bResult_1 := 0;
    counter_1 := 250000;
    goto L51;

  L51:
    call {:si_unique_call 1940} counter_1, Tmp_1107, Tmp_1110 := NICSetMulticastList_loop_L51(counter_1, Tmp_1107, Tmp_1110, FdoData_91);
    goto L51_last;

  L51_last:
    assume {:CounterLoop 250000} {:Counter "counter_1"} true;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} counter_1 != 0;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1110;
    assume {:nonnull} Tmp_1110 != 0;
    assume Tmp_1110 > 0;
    havoc Tmp_1107;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Tmp_1107 == 128;
    counter_1 := counter_1 - 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} Tmp_1107 != 128;
    bResult_1 := 1;
    goto L52;

  L52:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} bResult_1 != 0;
    goto L62;

  L62:
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    goto L38;

  L38:
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    havoc Tmp_1088;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    assume {:nonnull} Tmp_1088 != 0;
    assume Tmp_1088 > 0;
    call {:si_unique_call 1941} status_84 := D100SubmitCommandBlockAndWait(FdoData_91);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_84 != 0;
    status_84 := -1073741661;
    goto L44;

  L44:
    Tmp_1117 := strConst__li2bpl287;
    call {:si_unique_call 1942} DebugPrint(5, 32, Tmp_1117);
    Tmp_1087 := status_84;
    return;

  anon21_Then:
    assume {:partition} status_84 == 0;
    goto L44;

  anon23_Then:
    assume {:partition} bResult_1 == 0;
    assume {:nonnull} FdoData_91 != 0;
    assume FdoData_91 > 0;
    status_84 := -1073741668;
    goto L62;

  anon22_Then:
    assume {:partition} counter_1 == 0;
    goto L52;

  anon20_Then:
    goto L38;

  anon19_Then:
    assume {:partition} sdv_518 == 0;
    status_84 := -1073741668;
    goto L44;
}



procedure {:origName "NICServiceIndicateStatusIrp"} NICServiceIndicateStatusIrp(actual_FdoData_92: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICServiceIndicateStatusIrp"} NICServiceIndicateStatusIrp(actual_FdoData_92: int)
{
  var {:pointer} Tmp_1129: int;
  var {:pointer} pIndicateStatus: int;
  var {:scalar} sdv_520: int;
  var {:scalar} ntStatus: int;
  var {:scalar} oldIrql_15: int;
  var {:pointer} Tmp_1131: int;
  var {:pointer} pIrp: int;
  var {:pointer} Tmp_1132: int;
  var {:pointer} pIrpSp_3: int;
  var {:scalar} outBufLength: int;
  var {:pointer} FdoData_92: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;

  anon0:
    call {:si_unique_call 1943} vslice_dummy_var_203 := __HAVOC_malloc(4);
    FdoData_92 := actual_FdoData_92;
    call {:si_unique_call 1944} Tmp_1129 := __HAVOC_malloc(132);
    call {:si_unique_call 1945} Tmp_1132 := __HAVOC_malloc(132);
    pIrp := 0;
    pIrpSp_3 := 0;
    pIndicateStatus := 0;
    ntStatus := -1073741536;
    Tmp_1132 := strConst__li2bpl290;
    call {:si_unique_call 1946} DebugPrint(5, 32, Tmp_1132);
    call {:si_unique_call 1947} Tmp_1131 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1131 != 0;
    assume Tmp_1131 > 0;
    Mem_T.INT4[Tmp_1131] := oldIrql_15;
    call {:si_unique_call 1948} sdv_KeAcquireSpinLock(0, Tmp_1131);
    assume {:nonnull} Tmp_1131 != 0;
    assume Tmp_1131 > 0;
    oldIrql_15 := Mem_T.INT4[Tmp_1131];
    assume {:nonnull} FdoData_92 != 0;
    assume FdoData_92 > 0;
    havoc pIrp;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} pIrp != 0;
    call {:si_unique_call 1949} sdv_520 := sdv_IoSetCancelRoutine(pIrp, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_520 != 0;
    call {:si_unique_call 1950} pIrpSp_3 := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    havoc pIndicateStatus;
    assume {:nonnull} pIrpSp_3 != 0;
    assume pIrpSp_3 > 0;
    assume {:nonnull} pIrpSp_3 != 0;
    assume pIrpSp_3 > 0;
    havoc outBufLength;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} outBufLength >= 12;
    assume {:nonnull} FdoData_92 != 0;
    assume FdoData_92 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    goto L42;

  L42:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    ntStatus := 0;
    goto L45;

  L45:
    assume {:nonnull} FdoData_92 != 0;
    assume FdoData_92 > 0;
    goto L22;

  L22:
    call {:si_unique_call 1951} sdv_KeReleaseSpinLock(0, oldIrql_15);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pIrp != 0;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(pIrp))] := 12;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    call {:si_unique_call 1952} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1953} vslice_dummy_var_204 := PciDrvIoDecrement(FdoData_92);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L47;

  L47:
    Tmp_1129 := strConst__li2bpl289;
    call {:si_unique_call 1954} DebugPrint(5, 32, Tmp_1129);
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} pIrp == 0;
    goto L47;

  anon14_Then:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    goto L42;

  anon17_Then:
    assume {:partition} 12 > outBufLength;
    ntStatus := 5;
    goto L45;

  anon13_Then:
    assume {:partition} sdv_520 == 0;
    pIrp := 0;
    goto L22;

  anon16_Then:
    assume {:partition} pIrp == 0;
    goto L22;
}



procedure {:origName "NICGetStatsCounters"} NICGetStatsCounters(actual_FdoData_93: int, actual_Oid_1: int, actual_pCounter: int) returns (Tmp_1133: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1133 == 0 || Tmp_1133 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICGetStatsCounters"} NICGetStatsCounters(actual_FdoData_93: int, actual_Oid_1: int, actual_pCounter: int) returns (Tmp_1133: int)
{
  var {:pointer} Tmp_1134: int;
  var {:scalar} status_85: int;
  var {:pointer} Tmp_1136: int;
  var {:pointer} FdoData_93: int;
  var {:scalar} Oid_1: int;
  var {:pointer} pCounter: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;

  anon0:
    FdoData_93 := actual_FdoData_93;
    Oid_1 := actual_Oid_1;
    pCounter := actual_pCounter;
    call {:si_unique_call 1955} Tmp_1134 := __HAVOC_malloc(100);
    call {:si_unique_call 1956} Tmp_1136 := __HAVOC_malloc(100);
    status_85 := 0;
    Tmp_1136 := strConst__li2bpl292;
    call {:si_unique_call 1957} DebugPrint(5, 32, Tmp_1136);
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    Mem_T.INT4[pCounter] := 0;
    call {:si_unique_call 1958} DumpStatsCounters(FdoData_93);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Oid_1 != 131329;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Oid_1 != 131330;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Oid_1 != 131331;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Oid_1 != 131332;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Oid_1 != 131333;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Oid_1 != 131597;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Oid_1 != 131598;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Oid_1 != 16908545;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Oid_1 != 16908546;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Oid_1 != 16908547;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Oid_1 != 16908801;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Oid_1 != 16908802;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Oid_1 != 16908803;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Oid_1 != 16908804;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Oid_1 != 16908805;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Oid_1 != 16908806;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Oid_1 == 16908807;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_43;
    Mem_T.INT4[pCounter] := vslice_dummy_var_43;
    goto L32;

  L32:
    Tmp_1134 := strConst__li2bpl291;
    call {:si_unique_call 1959} DebugPrint(5, 32, Tmp_1134);
    Tmp_1133 := status_85;
    return;

  anon36_Then:
    assume {:partition} Oid_1 != 16908807;
    status_85 := -1073741637;
    goto L32;

  anon37_Then:
    assume {:partition} Oid_1 == 16908806;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_44;
    Mem_T.INT4[pCounter] := vslice_dummy_var_44;
    goto L32;

  anon38_Then:
    assume {:partition} Oid_1 == 16908805;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_45;
    Mem_T.INT4[pCounter] := vslice_dummy_var_45;
    goto L32;

  anon39_Then:
    assume {:partition} Oid_1 == 16908804;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_46;
    Mem_T.INT4[pCounter] := vslice_dummy_var_46;
    goto L32;

  anon40_Then:
    assume {:partition} Oid_1 == 16908803;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_47;
    Mem_T.INT4[pCounter] := vslice_dummy_var_47;
    goto L32;

  anon41_Then:
    assume {:partition} Oid_1 == 16908802;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_48;
    Mem_T.INT4[pCounter] := vslice_dummy_var_48;
    goto L32;

  anon42_Then:
    assume {:partition} Oid_1 == 16908801;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_49;
    Mem_T.INT4[pCounter] := vslice_dummy_var_49;
    goto L32;

  anon43_Then:
    assume {:partition} Oid_1 == 16908547;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_50;
    Mem_T.INT4[pCounter] := vslice_dummy_var_50;
    goto L32;

  anon44_Then:
    assume {:partition} Oid_1 == 16908546;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_51;
    Mem_T.INT4[pCounter] := vslice_dummy_var_51;
    goto L32;

  anon45_Then:
    assume {:partition} Oid_1 == 16908545;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_52;
    Mem_T.INT4[pCounter] := vslice_dummy_var_52;
    goto L32;

  anon46_Then:
    assume {:partition} Oid_1 == 131598;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_53;
    Mem_T.INT4[pCounter] := vslice_dummy_var_53;
    goto L32;

  anon47_Then:
    assume {:partition} Oid_1 == 131597;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_54;
    Mem_T.INT4[pCounter] := vslice_dummy_var_54;
    goto L32;

  anon48_Then:
    assume {:partition} Oid_1 == 131333;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_55;
    Mem_T.INT4[pCounter] := vslice_dummy_var_55;
    goto L32;

  anon49_Then:
    assume {:partition} Oid_1 == 131332;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_56;
    Mem_T.INT4[pCounter] := vslice_dummy_var_56;
    goto L32;

  anon50_Then:
    assume {:partition} Oid_1 == 131331;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_57;
    Mem_T.INT4[pCounter] := vslice_dummy_var_57;
    goto L32;

  anon51_Then:
    assume {:partition} Oid_1 == 131330;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_58;
    Mem_T.INT4[pCounter] := vslice_dummy_var_58;
    goto L32;

  anon35_Then:
    assume {:partition} Oid_1 == 131329;
    assume {:nonnull} FdoData_93 != 0;
    assume FdoData_93 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_59;
    Mem_T.INT4[pCounter] := vslice_dummy_var_59;
    goto L32;
}



procedure {:origName "NICSetPacketFilter"} NICSetPacketFilter(actual_FdoData_94: int, actual_PacketFilter_1: int) returns (Tmp_1137: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1137 == 0 || Tmp_1137 == -1073741668 || Tmp_1137 == -1073741661;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSetPacketFilter"} NICSetPacketFilter(actual_FdoData_94: int, actual_PacketFilter_1: int) returns (Tmp_1137: int)
{
  var {:scalar} i_10: int;
  var {:pointer} Tmp_1138: int;
  var {:pointer} Tmp_1139: int;
  var {:pointer} Tmp_1140: int;
  var {:pointer} Tmp_1141: int;
  var {:pointer} Tmp_1142: int;
  var {:pointer} Tmp_1143: int;
  var {:pointer} Tmp_1144: int;
  var {:pointer} Tmp_1145: int;
  var {:pointer} Tmp_1146: int;
  var {:pointer} Tmp_1147: int;
  var {:pointer} Tmp_1148: int;
  var {:pointer} Tmp_1149: int;
  var {:pointer} Tmp_1150: int;
  var {:pointer} Tmp_1151: int;
  var {:pointer} Tmp_1152: int;
  var {:pointer} Tmp_1153: int;
  var {:scalar} counter_2: int;
  var {:pointer} Tmp_1154: int;
  var {:pointer} Tmp_1155: int;
  var {:pointer} Tmp_1156: int;
  var {:scalar} NewParameterField: int;
  var {:pointer} Tmp_1157: int;
  var {:pointer} Tmp_1158: int;
  var {:pointer} Tmp_1159: int;
  var {:pointer} Tmp_1160: int;
  var {:pointer} Tmp_1161: int;
  var {:scalar} sdv_523: int;
  var {:pointer} Tmp_1162: int;
  var {:pointer} Tmp_1163: int;
  var {:pointer} Tmp_1164: int;
  var {:scalar} Tmp_1165: int;
  var {:pointer} Tmp_1166: int;
  var {:pointer} Tmp_1167: int;
  var {:pointer} Tmp_1168: int;
  var {:scalar} Tmp_1169: int;
  var {:pointer} Tmp_1170: int;
  var {:pointer} Tmp_1171: int;
  var {:pointer} Tmp_1172: int;
  var {:pointer} Tmp_1173: int;
  var {:pointer} Tmp_1174: int;
  var {:pointer} Tmp_1175: int;
  var {:pointer} Tmp_1176: int;
  var {:pointer} Tmp_1177: int;
  var {:pointer} Tmp_1178: int;
  var {:pointer} Tmp_1179: int;
  var {:pointer} Tmp_1180: int;
  var {:pointer} Tmp_1181: int;
  var {:pointer} Tmp_1182: int;
  var {:pointer} Tmp_1183: int;
  var {:pointer} Tmp_1184: int;
  var {:pointer} Tmp_1185: int;
  var {:pointer} Tmp_1186: int;
  var {:pointer} Tmp_1187: int;
  var {:scalar} Tmp_1188: int;
  var {:pointer} Tmp_1189: int;
  var {:scalar} sdv_525: int;
  var {:pointer} Tmp_1190: int;
  var {:pointer} Tmp_1191: int;
  var {:pointer} Tmp_1192: int;
  var {:pointer} Tmp_1193: int;
  var {:pointer} Tmp_1194: int;
  var {:pointer} Tmp_1195: int;
  var {:pointer} Tmp_1196: int;
  var {:pointer} Tmp_1197: int;
  var {:pointer} Tmp_1198: int;
  var {:pointer} Tmp_1199: int;
  var {:pointer} Tmp_1200: int;
  var {:pointer} Tmp_1201: int;
  var {:pointer} Tmp_1202: int;
  var {:pointer} Tmp_1203: int;
  var {:pointer} Tmp_1204: int;
  var {:pointer} Tmp_1205: int;
  var {:pointer} Tmp_1206: int;
  var {:pointer} Tmp_1207: int;
  var {:scalar} bResult_2: int;
  var {:scalar} status_86: int;
  var {:pointer} Tmp_1208: int;
  var {:pointer} Tmp_1209: int;
  var {:pointer} Tmp_1210: int;
  var {:pointer} Tmp_1211: int;
  var {:pointer} Tmp_1212: int;
  var {:pointer} Tmp_1214: int;
  var {:pointer} Tmp_1215: int;
  var {:pointer} Tmp_1216: int;
  var {:pointer} Tmp_1217: int;
  var {:pointer} Tmp_1218: int;
  var {:pointer} FdoData_94: int;
  var {:scalar} PacketFilter_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;

  anon0:
    FdoData_94 := actual_FdoData_94;
    PacketFilter_1 := actual_PacketFilter_1;
    call {:si_unique_call 1960} Tmp_1142 := __HAVOC_malloc(100);
    call {:si_unique_call 1961} Tmp_1144 := __HAVOC_malloc(88);
    call {:si_unique_call 1962} Tmp_1146 := __HAVOC_malloc(88);
    call {:si_unique_call 1963} Tmp_1147 := __HAVOC_malloc(88);
    call {:si_unique_call 1964} Tmp_1148 := __HAVOC_malloc(88);
    call {:si_unique_call 1965} Tmp_1155 := __HAVOC_malloc(88);
    call {:si_unique_call 1966} Tmp_1157 := __HAVOC_malloc(88);
    call {:si_unique_call 1967} Tmp_1160 := __HAVOC_malloc(88);
    call {:si_unique_call 1968} Tmp_1162 := __HAVOC_malloc(88);
    call {:si_unique_call 1969} Tmp_1163 := __HAVOC_malloc(188);
    call {:si_unique_call 1970} Tmp_1164 := __HAVOC_malloc(88);
    call {:si_unique_call 1971} Tmp_1166 := __HAVOC_malloc(172);
    call {:si_unique_call 1972} Tmp_1168 := __HAVOC_malloc(88);
    call {:si_unique_call 1973} Tmp_1170 := __HAVOC_malloc(88);
    call {:si_unique_call 1974} Tmp_1171 := __HAVOC_malloc(88);
    call {:si_unique_call 1975} Tmp_1175 := __HAVOC_malloc(88);
    call {:si_unique_call 1976} Tmp_1176 := __HAVOC_malloc(140);
    call {:si_unique_call 1977} Tmp_1177 := __HAVOC_malloc(88);
    call {:si_unique_call 1978} Tmp_1178 := __HAVOC_malloc(88);
    call {:si_unique_call 1979} Tmp_1180 := __HAVOC_malloc(88);
    call {:si_unique_call 1980} Tmp_1182 := __HAVOC_malloc(88);
    call {:si_unique_call 1981} Tmp_1184 := __HAVOC_malloc(88);
    call {:si_unique_call 1982} Tmp_1185 := __HAVOC_malloc(88);
    call {:si_unique_call 1983} Tmp_1186 := __HAVOC_malloc(88);
    call {:si_unique_call 1984} Tmp_1189 := __HAVOC_malloc(88);
    call {:si_unique_call 1985} Tmp_1190 := __HAVOC_malloc(88);
    call {:si_unique_call 1986} Tmp_1191 := __HAVOC_malloc(88);
    call {:si_unique_call 1987} Tmp_1192 := __HAVOC_malloc(88);
    call {:si_unique_call 1988} Tmp_1195 := __HAVOC_malloc(88);
    call {:si_unique_call 1989} Tmp_1200 := __HAVOC_malloc(88);
    call {:si_unique_call 1990} Tmp_1201 := __HAVOC_malloc(88);
    call {:si_unique_call 1991} Tmp_1203 := __HAVOC_malloc(88);
    call {:si_unique_call 1992} Tmp_1204 := __HAVOC_malloc(192);
    call {:si_unique_call 1993} Tmp_1205 := __HAVOC_malloc(88);
    call {:si_unique_call 1994} Tmp_1208 := __HAVOC_malloc(88);
    call {:si_unique_call 1995} Tmp_1211 := __HAVOC_malloc(88);
    call {:si_unique_call 1996} Tmp_1216 := __HAVOC_malloc(88);
    status_86 := 0;
    Tmp_1166 := strConst__li2bpl295;
    call {:si_unique_call 1997} DebugPrint(5, 32, Tmp_1166);
    NewParameterField := 234;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} BAND(PacketFilter_1, 8) != 0;
    NewParameterField := BAND(NewParameterField, BNOT(2));
    goto L15;

  L15:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(PacketFilter_1, 32) != 0;
    NewParameterField := BOR(NewParameterField, 1);
    goto L18;

  L18:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(PacketFilter_1, 4) == 0;
    goto L22;

  L22:
    Tmp_1176 := strConst__li2bpl293;
    call {:si_unique_call 1998} DebugPrint(5, 32, Tmp_1176);
    Tmp_1137 := status_86;
    return;

  anon45_Then:
    assume {:partition} BAND(PacketFilter_1, 4) != 0;
    goto L19;

  L19:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1156;
    assume {:nonnull} Tmp_1156 != 0;
    assume Tmp_1156 > 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1210;
    assume {:nonnull} Tmp_1210 != 0;
    assume Tmp_1210 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(Tmp_1210)] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1158;
    assume {:nonnull} Tmp_1158 != 0;
    assume Tmp_1158 > 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1198;
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    havoc Tmp_1205;
    assume {:nonnull} Tmp_1205 != 0;
    assume Tmp_1205 > 0;
    Mem_T.INT4[Tmp_1205] := 22;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1209;
    assume {:nonnull} Tmp_1209 != 0;
    assume Tmp_1209 > 0;
    havoc Tmp_1182;
    assume {:nonnull} Tmp_1182 != 0;
    assume Tmp_1182 > 0;
    Mem_T.INT4[Tmp_1182 + 2 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1140;
    assume {:nonnull} Tmp_1140 != 0;
    assume Tmp_1140 > 0;
    havoc Tmp_1160;
    assume {:nonnull} Tmp_1160 != 0;
    assume Tmp_1160 > 0;
    Mem_T.INT4[Tmp_1160 + 3 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1149;
    assume {:nonnull} Tmp_1149 != 0;
    assume Tmp_1149 > 0;
    havoc Tmp_1171;
    assume {:nonnull} Tmp_1171 != 0;
    assume Tmp_1171 > 0;
    Mem_T.INT4[Tmp_1171 + 6 * 4] := 50;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1215;
    assume {:nonnull} Tmp_1215 != 0;
    assume Tmp_1215 > 0;
    havoc Tmp_1157;
    assume {:nonnull} Tmp_1157 != 0;
    assume Tmp_1157 > 0;
    Mem_T.INT4[Tmp_1157 + 9 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1199;
    assume {:nonnull} Tmp_1199 != 0;
    assume Tmp_1199 > 0;
    havoc Tmp_1175;
    assume {:nonnull} Tmp_1175 != 0;
    assume Tmp_1175 > 0;
    Mem_T.INT4[Tmp_1175 + 10 * 4] := 46;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1150;
    assume {:nonnull} Tmp_1150 != 0;
    assume Tmp_1150 > 0;
    havoc Tmp_1203;
    assume {:nonnull} Tmp_1203 != 0;
    assume Tmp_1203 > 0;
    Mem_T.INT4[Tmp_1203 + 11 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1145;
    assume {:nonnull} Tmp_1145 != 0;
    assume Tmp_1145 > 0;
    havoc Tmp_1147;
    assume {:nonnull} Tmp_1147 != 0;
    assume Tmp_1147 > 0;
    Mem_T.INT4[Tmp_1147 + 12 * 4] := 96;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1202;
    assume {:nonnull} Tmp_1202 != 0;
    assume Tmp_1202 > 0;
    havoc Tmp_1164;
    assume {:nonnull} Tmp_1164 != 0;
    assume Tmp_1164 > 0;
    Mem_T.INT4[Tmp_1164 + 13 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1152;
    assume {:nonnull} Tmp_1152 != 0;
    assume Tmp_1152 > 0;
    havoc Tmp_1177;
    assume {:nonnull} Tmp_1177 != 0;
    assume Tmp_1177 > 0;
    Mem_T.INT4[Tmp_1177 + 14 * 4] := 242;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1161;
    assume {:nonnull} Tmp_1161 != 0;
    assume Tmp_1161 > 0;
    havoc Tmp_1178;
    assume {:nonnull} Tmp_1178 != 0;
    assume Tmp_1178 > 0;
    Mem_T.INT4[Tmp_1178 + 16 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1173;
    assume {:nonnull} Tmp_1173 != 0;
    assume Tmp_1173 > 0;
    havoc Tmp_1184;
    assume {:nonnull} Tmp_1184 != 0;
    assume Tmp_1184 > 0;
    Mem_T.INT4[Tmp_1184 + 17 * 4] := 64;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1179;
    assume {:nonnull} Tmp_1179 != 0;
    assume Tmp_1179 > 0;
    havoc Tmp_1146;
    assume {:nonnull} Tmp_1146 != 0;
    assume Tmp_1146 > 0;
    Mem_T.INT4[Tmp_1146 + 18 * 4] := 242;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1187;
    assume {:nonnull} Tmp_1187 != 0;
    assume Tmp_1187 > 0;
    havoc Tmp_1155;
    assume {:nonnull} Tmp_1155 != 0;
    assume Tmp_1155 > 0;
    Mem_T.INT4[Tmp_1155 + 20 * 4] := 63;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1159;
    assume {:nonnull} Tmp_1159 != 0;
    assume Tmp_1159 > 0;
    havoc Tmp_1168;
    assume {:nonnull} Tmp_1168 != 0;
    assume Tmp_1168 > 0;
    call {:si_unique_call 1999} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_1168 + 7 * 4] := boogieTmp;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1214;
    assume {:nonnull} Tmp_1214 != 0;
    assume Tmp_1214 > 0;
    havoc Tmp_1192;
    assume {:nonnull} Tmp_1192 != 0;
    assume Tmp_1192 > 0;
    call {:si_unique_call 2000} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_1192 + 1 * 4] := boogieTmp;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1138;
    assume {:nonnull} Tmp_1138 != 0;
    assume Tmp_1138 > 0;
    havoc Tmp_1208;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1217;
    assume {:nonnull} Tmp_1217 != 0;
    assume Tmp_1217 > 0;
    havoc Tmp_1191;
    assume {:nonnull} Tmp_1191 != 0;
    assume Tmp_1191 > 0;
    assume {:nonnull} Tmp_1208 != 0;
    assume Tmp_1208 > 0;
    Mem_T.INT4[Tmp_1208 + 3 * 4] := BOR(Mem_T.INT4[Tmp_1191 + 3 * 4], 1);
    goto L46;

  L46:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto L49;

  L49:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1172;
    assume {:nonnull} Tmp_1172 != 0;
    assume Tmp_1172 > 0;
    havoc Tmp_1200;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    assume {:nonnull} Tmp_1200 != 0;
    assume Tmp_1200 > 0;
    havoc vslice_dummy_var_60;
    Mem_T.INT4[Tmp_1200 + 4 * 4] := vslice_dummy_var_60;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1151;
    assume {:nonnull} Tmp_1151 != 0;
    assume Tmp_1151 > 0;
    havoc Tmp_1148;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    assume {:nonnull} Tmp_1148 != 0;
    assume Tmp_1148 > 0;
    havoc vslice_dummy_var_61;
    Mem_T.INT4[Tmp_1148 + 5 * 4] := vslice_dummy_var_61;
    goto L51;

  L51:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1207;
    assume {:nonnull} Tmp_1207 != 0;
    assume Tmp_1207 > 0;
    havoc Tmp_1195;
    assume {:nonnull} Tmp_1195 != 0;
    assume Tmp_1195 > 0;
    Mem_T.INT4[Tmp_1195 + 8 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1141;
    assume {:nonnull} Tmp_1141 != 0;
    assume Tmp_1141 > 0;
    havoc Tmp_1189;
    assume {:nonnull} Tmp_1189 != 0;
    assume Tmp_1189 > 0;
    Mem_T.INT4[Tmp_1189 + 15 * 4] := BOR(NewParameterField, 128);
    goto L55;

  L55:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1206;
    assume {:nonnull} Tmp_1206 != 0;
    assume Tmp_1206 > 0;
    havoc Tmp_1211;
    assume {:nonnull} Tmp_1211 != 0;
    assume Tmp_1211 > 0;
    Mem_T.INT4[Tmp_1211 + 19 * 4] := 0;
    goto L58;

  L58:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(PacketFilter_1, 4) != 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1196;
    assume {:nonnull} Tmp_1196 != 0;
    assume Tmp_1196 > 0;
    havoc Tmp_1216;
    assume {:nonnull} Tmp_1216 != 0;
    assume Tmp_1216 > 0;
    Mem_T.INT4[Tmp_1216 + 21 * 4] := 13;
    goto L61;

  L61:
    call {:si_unique_call 2001} sdv_523 := WaitScb(FdoData_94);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_523 != 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    bResult_2 := 0;
    counter_2 := 250000;
    goto L91;

  L91:
    call {:si_unique_call 2002} counter_2, Tmp_1154, Tmp_1188 := NICSetPacketFilter_loop_L91(counter_2, Tmp_1154, Tmp_1188, FdoData_94);
    goto L91_last;

  L91_last:
    assume {:CounterLoop 250000} {:Counter "counter_2"} true;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} counter_2 != 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1154;
    assume {:nonnull} Tmp_1154 != 0;
    assume Tmp_1154 > 0;
    havoc Tmp_1188;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Tmp_1188 == 128;
    counter_2 := counter_2 - 1;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} Tmp_1188 != 128;
    bResult_2 := 1;
    goto L92;

  L92:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} bResult_2 != 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1193;
    assume {:nonnull} Tmp_1193 != 0;
    assume Tmp_1193 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    call {:si_unique_call 2003} status_86 := D100IssueScbCommand(FdoData_94, 4, 1);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_86 == 0;
    goto L103;

  L103:
    call {:si_unique_call 2004} sdv_525 := WaitScb(FdoData_94);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_525 != 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto L68;

  L68:
    Tmp_1204 := strConst__li2bpl294;
    call {:si_unique_call 2005} DebugPrint(5, 32, Tmp_1204);
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1197;
    assume {:nonnull} Tmp_1197 != 0;
    assume Tmp_1197 > 0;
    Tmp_1183 := CbStatus__CB_HEADER_STRUC(Tmp_1197);
    Tmp_1163 := strConst__li2bpl296;
    call {:si_unique_call 2006} DebugPrint(5, 32, Tmp_1163);
    i_10 := 0;
    goto L76;

  L76:
    call {:si_unique_call 2007} i_10, Tmp_1142, Tmp_1165, Tmp_1169, Tmp_1170, Tmp_1174 := NICSetPacketFilter_loop_L76(i_10, Tmp_1142, Tmp_1165, Tmp_1169, Tmp_1170, Tmp_1174, FdoData_94);
    goto L76_last;

  L76_last:
    assume {:CounterLoop 22} {:Counter "i_10"} true;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} 22 > i_10;
    Tmp_1169 := i_10;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1174;
    assume {:nonnull} Tmp_1174 != 0;
    assume Tmp_1174 > 0;
    havoc Tmp_1170;
    assume {:nonnull} Tmp_1170 != 0;
    assume Tmp_1170 > 0;
    Tmp_1165 := Mem_T.INT4[Tmp_1170 + Tmp_1169 * 4];
    Tmp_1142 := strConst__li2bpl297;
    call {:si_unique_call 2008} DebugPrint(6, 32, Tmp_1142);
    i_10 := i_10 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} i_10 >= 22;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1153;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    assume {:nonnull} Tmp_1153 != 0;
    assume Tmp_1153 > 0;
    call {:si_unique_call 2009} status_86 := D100SubmitCommandBlockAndWait(FdoData_94);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_86 != 0;
    status_86 := -1073741661;
    goto L22;

  anon55_Then:
    assume {:partition} status_86 == 0;
    goto L22;

  anon59_Then:
    assume {:partition} sdv_525 == 0;
    status_86 := -1073741668;
    goto L22;

  anon58_Then:
    assume {:partition} status_86 != 0;
    goto L22;

  anon63_Then:
    goto L103;

  anon57_Then:
    assume {:partition} bResult_2 == 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    status_86 := -1073741668;
    goto L22;

  anon56_Then:
    assume {:partition} counter_2 == 0;
    goto L92;

  anon53_Then:
    goto L68;

  anon52_Then:
    assume {:partition} sdv_523 == 0;
    status_86 := -1073741668;
    goto L22;

  anon51_Then:
    assume {:partition} BAND(PacketFilter_1, 4) == 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1143;
    assume {:nonnull} Tmp_1143 != 0;
    assume Tmp_1143 > 0;
    havoc Tmp_1190;
    assume {:nonnull} Tmp_1190 != 0;
    assume Tmp_1190 > 0;
    Mem_T.INT4[Tmp_1190 + 21 * 4] := 5;
    goto L61;

  anon49_Then:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1212;
    assume {:nonnull} Tmp_1212 != 0;
    assume Tmp_1212 > 0;
    havoc Tmp_1186;
    assume {:nonnull} Tmp_1186 != 0;
    assume Tmp_1186 > 0;
    Mem_T.INT4[Tmp_1186 + 19 * 4] := 192;
    goto L58;

  anon50_Then:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1139;
    assume {:nonnull} Tmp_1139 != 0;
    assume Tmp_1139 > 0;
    havoc Tmp_1201;
    assume {:nonnull} Tmp_1201 != 0;
    assume Tmp_1201 > 0;
    Mem_T.INT4[Tmp_1201 + 19 * 4] := 128;
    goto L58;

  anon48_Then:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1181;
    assume {:nonnull} Tmp_1181 != 0;
    assume Tmp_1181 > 0;
    havoc Tmp_1162;
    assume {:nonnull} Tmp_1162 != 0;
    assume Tmp_1162 > 0;
    Mem_T.INT4[Tmp_1162 + 8 * 4] := 1;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1194;
    assume {:nonnull} Tmp_1194 != 0;
    assume Tmp_1194 > 0;
    havoc Tmp_1180;
    assume {:nonnull} Tmp_1180 != 0;
    assume Tmp_1180 > 0;
    Mem_T.INT4[Tmp_1180 + 15 * 4] := BAND(NewParameterField, BNOT(128));
    goto L55;

  anon46_Then:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1218;
    assume {:nonnull} Tmp_1218 != 0;
    assume Tmp_1218 > 0;
    havoc Tmp_1185;
    assume {:nonnull} Tmp_1185 != 0;
    assume Tmp_1185 > 0;
    Mem_T.INT4[Tmp_1185 + 4 * 4] := 0;
    assume {:nonnull} FdoData_94 != 0;
    assume FdoData_94 > 0;
    havoc Tmp_1167;
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    havoc Tmp_1144;
    assume {:nonnull} Tmp_1144 != 0;
    assume Tmp_1144 > 0;
    Mem_T.INT4[Tmp_1144 + 5 * 4] := 0;
    goto L51;

  anon47_Then:
    goto L49;

  anon61_Then:
    goto L46;

  anon44_Then:
    goto L19;

  anon43_Then:
    assume {:partition} BAND(PacketFilter_1, 32) == 0;
    NewParameterField := BAND(NewParameterField, BNOT(1));
    goto L18;

  anon60_Then:
    assume {:partition} BAND(PacketFilter_1, 8) == 0;
    NewParameterField := BOR(NewParameterField, 2);
    goto L15;
}



procedure {:origName "NICHandleQueryOidRequest"} NICHandleQueryOidRequest(actual_FdoData_95: int, actual_Irp_46: int, actual_BytesWritten: int) returns (Tmp_1219: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleQueryOidRequest"} NICHandleQueryOidRequest(actual_FdoData_95: int, actual_Irp_46: int, actual_BytesWritten: int) returns (Tmp_1219: int)
{
  var {:dopa} {:scalar} ulInfoLen: int;
  var {:scalar} CurrMediaState: int;
  var {:dopa} {:scalar} ulInfo: int;
  var {:pointer} DataBuffer_1: int;
  var {:scalar} InformationBufferLength_3: int;
  var {:scalar} Oid_2: int;
  var {:scalar} Power: int;
  var {:scalar} BufferLength_1: int;
  var {:pointer} Tmp_1220: int;
  var {:scalar} oldIrql_16: int;
  var {:pointer} Tmp_1221: int;
  var {:scalar} ulBytesAvailable: int;
  var {:dopa} {:scalar} ul64Info: int;
  var {:dopa} {:scalar} status_87: int;
  var {:scalar} Tmp_1222: int;
  var {:pointer} pIrpSp_4: int;
  var {:pointer} Tmp_1223: int;
  var {:pointer} Tmp_1224: int;
  var {:pointer} pQuery: int;
  var {:pointer} FdoData_95: int;
  var {:pointer} Irp_46: int;
  var {:pointer} BytesWritten: int;
  var boogieTmp: int;
  var vslice_dummy_var_62: int;

  anon0:
    call {:si_unique_call 2010} ulInfoLen := __HAVOC_malloc(4);
    call {:si_unique_call 2011} ulInfo := __HAVOC_malloc(4);
    call {:si_unique_call 2012} Power := __HAVOC_malloc(16);
    call {:si_unique_call 2013} ul64Info := __HAVOC_malloc(4);
    call {:si_unique_call 2014} status_87 := __HAVOC_malloc(4);
    FdoData_95 := actual_FdoData_95;
    Irp_46 := actual_Irp_46;
    BytesWritten := actual_BytesWritten;
    call {:si_unique_call 2015} Tmp_1221 := __HAVOC_malloc(180);
    call {:si_unique_call 2016} Tmp_1223 := __HAVOC_malloc(16);
    call {:si_unique_call 2017} Tmp_1224 := __HAVOC_malloc(108);
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    Mem_T.INT4[status_87] := 0;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    Mem_T.INT4[ulInfo] := 0;
    assume {:nonnull} ul64Info != 0;
    assume ul64Info > 0;
    Mem_T.INT4[ul64Info] := 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 4;
    InformationBufferLength_3 := 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    call {:si_unique_call 2018} pIrpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_46);
    assume {:nonnull} Irp_46 != 0;
    assume Irp_46 > 0;
    havoc DataBuffer_1;
    assume {:nonnull} pIrpSp_4 != 0;
    assume pIrpSp_4 > 0;
    havoc BufferLength_1;
    Tmp_1224 := strConst__li2bpl299;
    call {:si_unique_call 2019} DebugPrint(5, 32, Tmp_1224);
    Oid_2 := 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} 8 > BufferLength_1;
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    Mem_T.INT4[status_87] := 5;
    goto L41;

  L41:
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.INT4[status_87] != 0;
    goto L43;

  L43:
    Tmp_1221 := strConst__li2bpl298;
    call {:si_unique_call 2020} DebugPrint(6, 32, Tmp_1221);
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    Tmp_1219 := Mem_T.INT4[status_87];
    goto LM2;

  LM2:
    return;

  anon73_Then:
    assume {:partition} Mem_T.INT4[status_87] == 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} InformationBufferLength_3 >= Mem_T.INT4[ulInfoLen];
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[BytesWritten] := Mem_T.INT4[ulInfoLen];
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} Mem_T.INT4[ulInfoLen] != 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    call {:si_unique_call 2021} sdv_RtlMoveMemory(0, 0, Mem_T.INT4[ulInfoLen]);
    goto L43;

  anon105_Then:
    assume {:partition} Mem_T.INT4[ulInfoLen] == 0;
    goto L43;

  anon74_Then:
    assume {:partition} Mem_T.INT4[ulInfoLen] > InformationBufferLength_3;
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[BytesWritten] := Mem_T.INT4[ulInfoLen];
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    Mem_T.INT4[status_87] := -1073741789;
    goto L43;

  anon104_Then:
    assume {:partition} BufferLength_1 >= 8;
    pQuery := DataBuffer_1;
    assume {:nonnull} pQuery != 0;
    assume pQuery > 0;
    havoc Oid_2;
    assume {:nonnull} pQuery != 0;
    assume pQuery > 0;
    havoc Tmp_1223;
    InformationBufferLength_3 := BufferLength_1 - 4;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} Oid_2 != 65799;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} Oid_2 != 65812;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} Oid_2 != 131329;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} Oid_2 != 131330;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} Oid_2 != 131331;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Oid_2 != 131332;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} Oid_2 != 131333;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} Oid_2 != 131597;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} Oid_2 != 131598;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} Oid_2 != 16843009;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Oid_2 != 16843010;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} Oid_2 != 16843012;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} Oid_2 != 16908545;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} Oid_2 != 16908546;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Oid_2 != 16908547;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Oid_2 != 16908801;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Oid_2 != 16908802;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} Oid_2 != 16908803;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} Oid_2 != 16908804;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} Oid_2 != 16908805;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Oid_2 != 16908806;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} Oid_2 != 16908807;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Oid_2 != -50265856;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} Oid_2 == -50265854;
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    Mem_T.INT4[status_87] := 0;
    goto L41;

  anon81_Then:
    assume {:partition} Oid_2 != -50265854;
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    Mem_T.INT4[status_87] := -1073741637;
    goto L41;

  anon82_Then:
    assume {:partition} Oid_2 == -50265856;
    call {:si_unique_call 2022} NICFillPoMgmtCaps(FdoData_95, Power, status_87, ulInfoLen);
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} Mem_T.INT4[status_87] != 0;
    goto L41;

  anon76_Then:
    assume {:partition} Mem_T.INT4[status_87] == 0;
    goto L41;

  anon83_Then:
    assume {:partition} Oid_2 == 16908807;
    goto L60;

  L60:
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    call {:si_unique_call 2023} boogieTmp := NICGetStatsCounters(FdoData_95, Oid_2, ul64Info);
    Mem_T.INT4[status_87] := boogieTmp;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 8;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.INT4[status_87] == 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} 4 > InformationBufferLength_3;
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    Mem_T.INT4[status_87] := -1073741789;
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    Mem_T.INT4[BytesWritten] := ulBytesAvailable;
    goto L41;

  anon77_Then:
    assume {:partition} InformationBufferLength_3 >= 4;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} InformationBufferLength_3 > ulBytesAvailable;
    Tmp_1222 := ulBytesAvailable;
    goto L94;

  L94:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := Tmp_1222;
    goto L41;

  anon78_Then:
    assume {:partition} ulBytesAvailable >= InformationBufferLength_3;
    Tmp_1222 := InformationBufferLength_3;
    goto L94;

  anon108_Then:
    assume {:partition} Mem_T.INT4[status_87] != 0;
    goto L41;

  anon84_Then:
    assume {:partition} Oid_2 == 16908806;
    goto L60;

  anon85_Then:
    assume {:partition} Oid_2 == 16908805;
    goto L60;

  anon86_Then:
    assume {:partition} Oid_2 == 16908804;
    goto L60;

  anon87_Then:
    assume {:partition} Oid_2 == 16908803;
    goto L60;

  anon88_Then:
    assume {:partition} Oid_2 == 16908802;
    goto L60;

  anon89_Then:
    assume {:partition} Oid_2 == 16908801;
    goto L60;

  anon90_Then:
    assume {:partition} Oid_2 == 16908547;
    goto L60;

  anon91_Then:
    assume {:partition} Oid_2 == 16908546;
    goto L60;

  anon92_Then:
    assume {:partition} Oid_2 == 16908545;
    goto L60;

  anon93_Then:
    assume {:partition} Oid_2 == 16843012;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    Mem_T.INT4[ulInfo] := 32;
    goto L41;

  anon94_Then:
    assume {:partition} Oid_2 == 16843010;
    assume {:nonnull} FdoData_95 != 0;
    assume FdoData_95 > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 6;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    goto L41;

  anon95_Then:
    assume {:partition} Oid_2 == 16843009;
    assume {:nonnull} FdoData_95 != 0;
    assume FdoData_95 > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 6;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    goto L41;

  anon96_Then:
    assume {:partition} Oid_2 == 131598;
    goto L60;

  anon97_Then:
    assume {:partition} Oid_2 == 131597;
    goto L60;

  anon98_Then:
    assume {:partition} Oid_2 == 131333;
    goto L60;

  anon99_Then:
    assume {:partition} Oid_2 == 131332;
    goto L60;

  anon100_Then:
    assume {:partition} Oid_2 == 131331;
    goto L60;

  anon101_Then:
    assume {:partition} Oid_2 == 131330;
    goto L60;

  anon102_Then:
    assume {:partition} Oid_2 == 131329;
    goto L60;

  anon103_Then:
    assume {:partition} Oid_2 == 65812;
    goto L59;

  L59:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Mem_T.INT4[ulInfoLen] <= InformationBufferLength_3;
    call {:si_unique_call 2024} Tmp_1220 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1220 != 0;
    assume Tmp_1220 > 0;
    Mem_T.INT4[Tmp_1220] := oldIrql_16;
    call {:si_unique_call 2025} sdv_KeAcquireSpinLock(0, Tmp_1220);
    assume {:nonnull} Tmp_1220 != 0;
    assume Tmp_1220 > 0;
    oldIrql_16 := Mem_T.INT4[Tmp_1220];
    assume {:nonnull} FdoData_95 != 0;
    assume FdoData_95 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} status_87 != 0;
    assume status_87 > 0;
    call {:si_unique_call 2026} boogieTmp := PciDrvQueueIoctlIrp(FdoData_95, Irp_46);
    Mem_T.INT4[status_87] := boogieTmp;
    call {:si_unique_call 2027} sdv_KeReleaseSpinLock(0, oldIrql_16);
    goto L41;

  anon79_Then:
    call {:si_unique_call 2028} sdv_KeReleaseSpinLock(0, oldIrql_16);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Oid_2 == 65799;
    assume {:nonnull} FdoData_95 != 0;
    assume FdoData_95 > 0;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    havoc vslice_dummy_var_62;
    Mem_T.INT4[ulInfo] := vslice_dummy_var_62;
    goto L41;

  anon80_Then:
    assume {:partition} Oid_2 != 65799;
    call {:si_unique_call 2029} CurrMediaState := NICIndicateMediaState(FdoData_95);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    Mem_T.INT4[ulInfo] := CurrMediaState;
    goto L41;

  anon107_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:partition} InformationBufferLength_3 < Mem_T.INT4[ulInfoLen];
    goto L41;

  anon106_Then:
    assume {:partition} Oid_2 == 65799;
    goto L59;
}



procedure {:origName "NICFillPoMgmtCaps"} NICFillPoMgmtCaps(actual_FdoData_96: int, actual_pPower: int, actual_pStatus: int, actual_pulInfoLen: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFillPoMgmtCaps"} NICFillPoMgmtCaps(actual_FdoData_96: int, actual_pPower: int, actual_pStatus: int, actual_pulInfoLen: int)
{
  var {:scalar} bIsPoMgmtSupported: int;
  var {:pointer} FdoData_96: int;
  var {:pointer} pPower: int;
  var {:pointer} pStatus: int;
  var {:pointer} pulInfoLen: int;
  var vslice_dummy_var_205: int;

  anon0:
    call {:si_unique_call 2030} vslice_dummy_var_205 := __HAVOC_malloc(4);
    FdoData_96 := actual_FdoData_96;
    pPower := actual_pPower;
    pStatus := actual_pStatus;
    pulInfoLen := actual_pulInfoLen;
    call {:si_unique_call 2031} bIsPoMgmtSupported := IsPoMgmtSupported(FdoData_96);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} bIsPoMgmtSupported == 1;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pulInfoLen != 0;
    assume pulInfoLen > 0;
    Mem_T.INT4[pulInfoLen] := 16;
    assume {:nonnull} pStatus != 0;
    assume pStatus > 0;
    Mem_T.INT4[pStatus] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} bIsPoMgmtSupported != 1;
    call {:si_unique_call 2032} sdv_RtlZeroMemory(0, 16);
    assume {:nonnull} pStatus != 0;
    assume pStatus > 0;
    Mem_T.INT4[pStatus] := -1073741637;
    assume {:nonnull} pulInfoLen != 0;
    assume pulInfoLen > 0;
    Mem_T.INT4[pulInfoLen] := 0;
    goto L1;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_206: int;

  anon0:
    call {:si_unique_call 2033} vslice_dummy_var_206 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICIndicateMediaState"} NICIndicateMediaState(actual_FdoData_97: int) returns (Tmp_1229: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICIndicateMediaState"} NICIndicateMediaState(actual_FdoData_97: int) returns (Tmp_1229: int)
{
  var {:scalar} CurrMediaState_1: int;
  var {:pointer} Tmp_1230: int;
  var {:pointer} Tmp_1231: int;
  var {:pointer} Tmp_1232: int;
  var {:scalar} oldIrql_17: int;
  var {:pointer} FdoData_97: int;

  anon0:
    FdoData_97 := actual_FdoData_97;
    call {:si_unique_call 2034} Tmp_1231 := __HAVOC_malloc(108);
    call {:si_unique_call 2035} Tmp_1232 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1232 != 0;
    assume Tmp_1232 > 0;
    Mem_T.INT4[Tmp_1232] := oldIrql_17;
    call {:si_unique_call 2036} sdv_KeAcquireSpinLock(0, Tmp_1232);
    assume {:nonnull} Tmp_1232 != 0;
    assume Tmp_1232 > 0;
    oldIrql_17 := Mem_T.INT4[Tmp_1232];
    call {:si_unique_call 2037} CurrMediaState_1 := GetMediaState(FdoData_97);
    assume {:nonnull} FdoData_97 != 0;
    assume FdoData_97 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} CurrMediaState_1 != 0;
    Tmp_1230 := strConst__li2bpl301;
    goto L19;

  L19:
    Tmp_1231 := strConst__li2bpl302;
    call {:si_unique_call 2038} DebugPrint(3, 32, Tmp_1231);
    assume {:nonnull} FdoData_97 != 0;
    assume FdoData_97 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} CurrMediaState_1 != 0;
    assume {:nonnull} FdoData_97 != 0;
    assume FdoData_97 > 0;
    goto L26;

  L26:
    call {:si_unique_call 2039} sdv_KeReleaseSpinLock(0, oldIrql_17);
    call {:si_unique_call 2040} NICServiceIndicateStatusIrp(FdoData_97);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    Tmp_1229 := CurrMediaState_1;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} CurrMediaState_1 == 0;
    assume {:nonnull} FdoData_97 != 0;
    assume FdoData_97 > 0;
    goto L26;

  anon10_Then:
    assume {:partition} CurrMediaState_1 == 0;
    Tmp_1230 := strConst__li2bpl300;
    goto L19;

  anon9_Then:
    call {:si_unique_call 2041} sdv_KeReleaseSpinLock(0, oldIrql_17);
    goto L32;
}



procedure {:origName "MdiRead"} MdiRead(actual_Adapter_1: int, actual_RegAddress: int, actual_PhyAddress: int, actual_Recoverable: int, actual_DataValue: int) returns (Tmp_1233: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1233 == 1 || Tmp_1233 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MdiRead"} MdiRead(actual_Adapter_1: int, actual_RegAddress: int, actual_PhyAddress: int, actual_Recoverable: int, actual_DataValue: int) returns (Tmp_1233: int)
{
  var {:scalar} counter_3: int;
  var {:pointer} Tmp_1234: int;
  var {:pointer} Tmp_1235: int;
  var {:scalar} bResult_3: int;
  var {:pointer} Tmp_1237: int;
  var {:pointer} Adapter_1: int;
  var {:scalar} Recoverable: int;
  var {:pointer} DataValue: int;
  var boogieTmp: int;
  var vslice_dummy_var_63: int;

  anon0:
    Adapter_1 := actual_Adapter_1;
    Recoverable := actual_Recoverable;
    DataValue := actual_DataValue;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_1235;
    assume {:nonnull} Tmp_1235 != 0;
    assume Tmp_1235 > 0;
    call {:si_unique_call 2042} boogieTmp := corral_nondet();
    bResult_3 := 0;
    counter_3 := 100000;
    goto L11;

  L11:
    call {:si_unique_call 2043} counter_3, Tmp_1234 := MdiRead_loop_L11(counter_3, Tmp_1234, Adapter_1);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100000} {:Counter "counter_3"} true;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} counter_3 != 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_1234;
    assume {:nonnull} Tmp_1234 != 0;
    assume Tmp_1234 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    counter_3 := counter_3 - 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    assume false;
    return;

  anon12_Then:
    bResult_3 := 1;
    goto L12;

  L12:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} bResult_3 != 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_1237;
    assume {:nonnull} DataValue != 0;
    assume DataValue > 0;
    assume {:nonnull} Tmp_1237 != 0;
    assume Tmp_1237 > 0;
    havoc vslice_dummy_var_63;
    Mem_T.INT4[DataValue] := vslice_dummy_var_63;
    Tmp_1233 := bResult_3;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} bResult_3 == 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Recoverable != 0;
    goto L24;

  L24:
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    Tmp_1233 := bResult_3;
    goto L1;

  anon11_Then:
    assume {:partition} Recoverable == 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    goto L24;

  anon9_Then:
    assume {:partition} counter_3 == 0;
    goto L12;
}



procedure {:origName "WaitScb"} WaitScb(actual_FdoData_98: int) returns (Tmp_1238: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1238 == 1 || Tmp_1238 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WaitScb"} WaitScb(actual_FdoData_98: int) returns (Tmp_1238: int)
{
  var {:scalar} counter_4: int;
  var {:pointer} pCSRAddress: int;
  var {:scalar} bResult_4: int;
  var {:pointer} Tmp_1240: int;
  var {:pointer} FdoData_98: int;

  anon0:
    FdoData_98 := actual_FdoData_98;
    call {:si_unique_call 2044} Tmp_1240 := __HAVOC_malloc(136);
    assume {:nonnull} FdoData_98 != 0;
    assume FdoData_98 > 0;
    havoc pCSRAddress;
    bResult_4 := 0;
    counter_4 := 30000;
    goto L9;

  L9:
    call {:si_unique_call 2045} counter_4 := WaitScb_loop_L9(counter_4, pCSRAddress);
    goto L9_last;

  L9_last:
    assume {:CounterLoop 30000} {:Counter "counter_4"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_4 != 0;
    assume {:nonnull} pCSRAddress != 0;
    assume pCSRAddress > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_4 := counter_4 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_4 := 1;
    goto L10;

  L10:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_4 != 0;
    goto L21;

  L21:
    Tmp_1238 := bResult_4;
    return;

  anon8_Then:
    assume {:partition} bResult_4 == 0;
    Tmp_1240 := strConst__li2bpl303;
    call {:si_unique_call 2046} DebugPrint(2, 4096, Tmp_1240);
    assume {:nonnull} FdoData_98 != 0;
    assume FdoData_98 > 0;
    goto L21;

  anon7_Then:
    assume {:partition} counter_4 == 0;
    goto L10;
}



procedure {:origName "D100SubmitCommandBlockAndWait"} D100SubmitCommandBlockAndWait(actual_Adapter_2: int) returns (Tmp_1241: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1241 == 0 || Tmp_1241 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D100SubmitCommandBlockAndWait"} D100SubmitCommandBlockAndWait(actual_Adapter_2: int) returns (Tmp_1241: int)
{
  var {:scalar} counter_5: int;
  var {:pointer} Tmp_1242: int;
  var {:pointer} Tmp_1243: int;
  var {:pointer} CommandBlock: int;
  var {:scalar} sdv_534: int;
  var {:pointer} Tmp_1244: int;
  var {:pointer} Tmp_1245: int;
  var {:scalar} status_88: int;
  var {:scalar} bResult_5: int;
  var {:pointer} Adapter_2: int;
  var vslice_dummy_var_207: int;

  anon0:
    Adapter_2 := actual_Adapter_2;
    call {:si_unique_call 2047} Tmp_1244 := __HAVOC_malloc(64);
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc CommandBlock;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))] := 0;
    call {:si_unique_call 2048} vslice_dummy_var_207 := D100IssueScbCommand(Adapter_2, 16, 0);
    call {:si_unique_call 2049} sdv_534 := WaitScb(Adapter_2);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_534 != 0;
    bResult_5 := 0;
    counter_5 := 150000;
    goto L20;

  L20:
    call {:si_unique_call 2050} counter_5 := D100SubmitCommandBlockAndWait_loop_L20(counter_5, CommandBlock);
    goto L20_last;

  L20_last:
    assume {:CounterLoop 150000} {:Counter "counter_5"} true;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} counter_5 != 0;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 32768) == 0;
    counter_5 := counter_5 - 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    assume false;
    return;

  anon16_Then:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 32768) != 0;
    bResult_5 := 1;
    goto L21;

  L21:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} bResult_5 != 0;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_1243;
    assume {:nonnull} Tmp_1243 != 0;
    assume Tmp_1243 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_1242;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_1245;
    assume {:nonnull} Tmp_1242 != 0;
    assume Tmp_1242 > 0;
    assume {:nonnull} Tmp_1245 != 0;
    assume Tmp_1245 > 0;
    goto L31;

  L31:
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 8192) != 0;
    status_88 := 0;
    goto L37;

  L37:
    Tmp_1241 := status_88;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 8192) == 0;
    Tmp_1244 := strConst__li2bpl304;
    call {:si_unique_call 2051} DebugPrint(2, 4096, Tmp_1244);
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    status_88 := -1073741668;
    goto L37;

  anon18_Then:
    goto L31;

  anon15_Then:
    assume {:partition} bResult_5 == 0;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    Tmp_1241 := -1073741668;
    goto L1;

  anon14_Then:
    assume {:partition} counter_5 == 0;
    goto L21;

  anon13_Then:
    assume {:partition} sdv_534 == 0;
    Tmp_1241 := -1073741668;
    goto L1;
}



procedure {:origName "GetMediaState"} GetMediaState(actual_Adapter_3: int) returns (Tmp_1247: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetMediaState"} GetMediaState(actual_Adapter_3: int) returns (Tmp_1247: int)
{
  var {:dopa} {:scalar} MdiStatusReg: int;
  var {:scalar} bResult2: int;
  var {:scalar} bResult1: int;
  var {:pointer} Adapter_3: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 2052} MdiStatusReg := __HAVOC_malloc(4);
    Adapter_3 := actual_Adapter_3;
    assume {:nonnull} MdiStatusReg != 0;
    assume MdiStatusReg > 0;
    Mem_T.INT4[MdiStatusReg] := 0;
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc vslice_dummy_var_64;
    call {:si_unique_call 2053} bResult1 := MdiRead(Adapter_3, 1, vslice_dummy_var_64, 1, MdiStatusReg);
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc vslice_dummy_var_65;
    call {:si_unique_call 2054} bResult2 := MdiRead(Adapter_3, 1, vslice_dummy_var_65, 1, MdiStatusReg);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} bResult1 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult2 != 0;
    assume {:nonnull} MdiStatusReg != 0;
    assume MdiStatusReg > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(Mem_T.INT4[MdiStatusReg], 4) != 0;
    Tmp_1247 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} BAND(Mem_T.INT4[MdiStatusReg], 4) == 0;
    Tmp_1247 := 1;
    goto L1;

  anon8_Then:
    assume {:partition} bResult2 == 0;
    goto L16;

  L16:
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc Tmp_1247;
    goto L1;

  anon7_Then:
    assume {:partition} bResult1 == 0;
    goto L16;
}



procedure {:origName "NICIssueFullReset"} NICIssueFullReset(actual_Adapter_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICIssueFullReset"} NICIssueFullReset(actual_Adapter_4: int)
{
  var {:pointer} Tmp_1249: int;
  var {:scalar} counter_6: int;
  var {:pointer} Tmp_1250: int;
  var {:scalar} bResult_6: int;
  var {:pointer} Adapter_4: int;
  var vslice_dummy_var_208: int;

  anon0:
    call {:si_unique_call 2055} vslice_dummy_var_208 := __HAVOC_malloc(4);
    Adapter_4 := actual_Adapter_4;
    call {:si_unique_call 2056} NICIssueSelectiveReset(Adapter_4);
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    havoc Tmp_1250;
    assume {:nonnull} Tmp_1250 != 0;
    assume Tmp_1250 > 0;
    bResult_6 := 0;
    counter_6 := 100;
    goto L11;

  L11:
    call {:si_unique_call 2057} Tmp_1249, counter_6 := NICIssueFullReset_loop_L11(Tmp_1249, counter_6, Adapter_4);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100} {:Counter "counter_6"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_6 != 0;
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    havoc Tmp_1249;
    assume {:nonnull} Tmp_1249 != 0;
    assume Tmp_1249 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_6 := counter_6 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_6 := 1;
    goto L12;

  L12:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_6 != 0;
    call {:si_unique_call 2058} NICDisableInterrupt(Adapter_4);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_6 == 0;
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_6 == 0;
    goto L12;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_209: int;

  anon0:
    call {:si_unique_call 2059} vslice_dummy_var_209 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "DumpStatsCounters"} DumpStatsCounters(actual_Adapter_5: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DumpStatsCounters"} DumpStatsCounters(actual_Adapter_5: int)
{
  var {:pointer} Tmp_1255: int;
  var {:pointer} Tmp_1256: int;
  var {:pointer} Tmp_1257: int;
  var {:pointer} Tmp_1258: int;
  var {:pointer} Tmp_1259: int;
  var {:pointer} Tmp_1260: int;
  var {:pointer} Tmp_1261: int;
  var {:pointer} Tmp_1262: int;
  var {:pointer} Tmp_1263: int;
  var {:scalar} counter_7: int;
  var {:pointer} Tmp_1264: int;
  var {:pointer} Tmp_1265: int;
  var {:pointer} Tmp_1266: int;
  var {:pointer} Tmp_1267: int;
  var {:pointer} Tmp_1268: int;
  var {:pointer} Tmp_1269: int;
  var {:pointer} Tmp_1270: int;
  var {:pointer} Tmp_1271: int;
  var {:pointer} Tmp_1272: int;
  var {:pointer} Tmp_1273: int;
  var {:pointer} Tmp_1274: int;
  var {:pointer} Tmp_1275: int;
  var {:pointer} Tmp_1276: int;
  var {:pointer} Tmp_1277: int;
  var {:pointer} Tmp_1279: int;
  var {:pointer} Tmp_1280: int;
  var {:pointer} Tmp_1281: int;
  var {:pointer} Tmp_1282: int;
  var {:pointer} Tmp_1283: int;
  var {:pointer} Tmp_1284: int;
  var {:pointer} Tmp_1285: int;
  var {:pointer} Tmp_1286: int;
  var {:pointer} Tmp_1287: int;
  var {:pointer} Tmp_1288: int;
  var {:scalar} oldIrql_18: int;
  var {:pointer} Tmp_1289: int;
  var {:pointer} Tmp_1290: int;
  var {:pointer} Tmp_1291: int;
  var {:pointer} Tmp_1292: int;
  var {:pointer} Tmp_1293: int;
  var {:pointer} Tmp_1294: int;
  var {:pointer} Tmp_1295: int;
  var {:pointer} Tmp_1296: int;
  var {:scalar} bResult_7: int;
  var {:pointer} Tmp_1297: int;
  var {:pointer} Tmp_1298: int;
  var {:pointer} Tmp_1299: int;
  var {:pointer} Tmp_1300: int;
  var {:pointer} Tmp_1301: int;
  var {:pointer} Tmp_1302: int;
  var {:pointer} Tmp_1303: int;
  var {:pointer} Tmp_1304: int;
  var {:pointer} Tmp_1305: int;
  var {:pointer} Tmp_1306: int;
  var {:pointer} Adapter_5: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;

  anon0:
    call {:si_unique_call 2060} vslice_dummy_var_210 := __HAVOC_malloc(4);
    Adapter_5 := actual_Adapter_5;
    call {:si_unique_call 2061} Tmp_1261 := __HAVOC_malloc(72);
    call {:si_unique_call 2062} Tmp_1263 := __HAVOC_malloc(76);
    call {:si_unique_call 2063} Tmp_1266 := __HAVOC_malloc(100);
    call {:si_unique_call 2064} Tmp_1267 := __HAVOC_malloc(92);
    call {:si_unique_call 2065} Tmp_1272 := __HAVOC_malloc(92);
    call {:si_unique_call 2066} Tmp_1273 := __HAVOC_malloc(84);
    call {:si_unique_call 2067} Tmp_1281 := __HAVOC_malloc(108);
    call {:si_unique_call 2068} Tmp_1283 := __HAVOC_malloc(92);
    call {:si_unique_call 2069} Tmp_1284 := __HAVOC_malloc(96);
    call {:si_unique_call 2070} Tmp_1287 := __HAVOC_malloc(100);
    call {:si_unique_call 2071} Tmp_1294 := __HAVOC_malloc(88);
    call {:si_unique_call 2072} Tmp_1295 := __HAVOC_malloc(116);
    call {:si_unique_call 2073} Tmp_1297 := __HAVOC_malloc(92);
    call {:si_unique_call 2074} Tmp_1298 := __HAVOC_malloc(80);
    call {:si_unique_call 2075} Tmp_1302 := __HAVOC_malloc(100);
    call {:si_unique_call 2076} Tmp_1306 := __HAVOC_malloc(76);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1288;
    assume {:nonnull} Tmp_1288 != 0;
    assume Tmp_1288 > 0;
    call {:si_unique_call 2077} Tmp_1296 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1296 != 0;
    assume Tmp_1296 > 0;
    Mem_T.INT4[Tmp_1296] := oldIrql_18;
    call {:si_unique_call 2078} sdv_KeAcquireSpinLock(0, Tmp_1296);
    assume {:nonnull} Tmp_1296 != 0;
    assume Tmp_1296 > 0;
    oldIrql_18 := Mem_T.INT4[Tmp_1296];
    call {:si_unique_call 2079} vslice_dummy_var_211 := D100IssueScbCommand(Adapter_5, 112, 1);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    call {:si_unique_call 2080} sdv_KeReleaseSpinLock(0, oldIrql_18);
    bResult_7 := 0;
    counter_7 := 100000;
    goto L19;

  L19:
    call {:si_unique_call 2081} counter_7, Tmp_1292 := DumpStatsCounters_loop_L19(counter_7, Tmp_1292, Adapter_5);
    goto L19_last;

  L19_last:
    assume {:CounterLoop 100000} {:Counter "counter_7"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_7 != 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1292;
    assume {:nonnull} Tmp_1292 != 0;
    assume Tmp_1292 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_7 := counter_7 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_7 := 1;
    goto L20;

  L20:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_7 != 0;
    Tmp_1263 := strConst__li2bpl305;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1268;
    call {:si_unique_call 2082} DebugPrint(6, 32, Tmp_1263);
    Tmp_1261 := strConst__li2bpl306;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1270;
    call {:si_unique_call 2083} DebugPrint(6, 32, Tmp_1261);
    Tmp_1306 := strConst__li2bpl307;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1299;
    call {:si_unique_call 2084} DebugPrint(6, 32, Tmp_1306);
    Tmp_1298 := strConst__li2bpl308;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1274;
    call {:si_unique_call 2085} DebugPrint(6, 32, Tmp_1298);
    Tmp_1272 := strConst__li2bpl309;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1257;
    call {:si_unique_call 2086} DebugPrint(6, 32, Tmp_1272);
    Tmp_1294 := strConst__li2bpl310;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1264;
    call {:si_unique_call 2087} DebugPrint(6, 32, Tmp_1294);
    Tmp_1283 := strConst__li2bpl311;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1300;
    call {:si_unique_call 2088} DebugPrint(6, 32, Tmp_1283);
    Tmp_1284 := strConst__li2bpl312;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1256;
    call {:si_unique_call 2089} DebugPrint(6, 32, Tmp_1284);
    Tmp_1302 := strConst__li2bpl313;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1269;
    call {:si_unique_call 2090} DebugPrint(6, 32, Tmp_1302);
    Tmp_1273 := strConst__li2bpl314;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1303;
    call {:si_unique_call 2091} DebugPrint(6, 32, Tmp_1273);
    Tmp_1297 := strConst__li2bpl315;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1279;
    call {:si_unique_call 2092} DebugPrint(6, 32, Tmp_1297);
    Tmp_1295 := strConst__li2bpl316;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1293;
    call {:si_unique_call 2093} DebugPrint(6, 32, Tmp_1295);
    Tmp_1266 := strConst__li2bpl317;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1277;
    call {:si_unique_call 2094} DebugPrint(6, 32, Tmp_1266);
    Tmp_1281 := strConst__li2bpl318;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1301;
    call {:si_unique_call 2095} DebugPrint(6, 32, Tmp_1281);
    Tmp_1267 := strConst__li2bpl319;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1255;
    call {:si_unique_call 2096} DebugPrint(6, 32, Tmp_1267);
    Tmp_1287 := strConst__li2bpl320;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1262;
    call {:si_unique_call 2097} DebugPrint(6, 32, Tmp_1287);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1258;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1258 != 0;
    assume Tmp_1258 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1291;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1291 != 0;
    assume Tmp_1291 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1265;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1265 != 0;
    assume Tmp_1265 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1304;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1304 != 0;
    assume Tmp_1304 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1285;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1285 != 0;
    assume Tmp_1285 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1275;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1275 != 0;
    assume Tmp_1275 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1271;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1271 != 0;
    assume Tmp_1271 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1260;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1260 != 0;
    assume Tmp_1260 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1305;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1305 != 0;
    assume Tmp_1305 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1280;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1280 != 0;
    assume Tmp_1280 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1259;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1259 != 0;
    assume Tmp_1259 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1290;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1290 != 0;
    assume Tmp_1290 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1282;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1282 != 0;
    assume Tmp_1282 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1289;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1289 != 0;
    assume Tmp_1289 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1276;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1276 != 0;
    assume Tmp_1276 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_1286;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_1286 != 0;
    assume Tmp_1286 > 0;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_7 == 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_7 == 0;
    goto L20;
}



procedure {:origName "NICIssueSelectiveReset"} NICIssueSelectiveReset(actual_Adapter_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICIssueSelectiveReset"} NICIssueSelectiveReset(actual_Adapter_6: int)
{
  var {:pointer} Tmp_1307: int;
  var {:scalar} Tmp_1308: int;
  var {:scalar} counter_8: int;
  var {:pointer} Tmp_1309: int;
  var {:pointer} Tmp_1310: int;
  var {:pointer} Tmp_1311: int;
  var {:scalar} counter_9: int;
  var {:scalar} bResult_8: int;
  var {:pointer} Tmp_1314: int;
  var {:pointer} Tmp_1315: int;
  var {:pointer} Adapter_6: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;

  anon0:
    call {:si_unique_call 2098} vslice_dummy_var_212 := __HAVOC_malloc(4);
    Adapter_6 := actual_Adapter_6;
    call {:si_unique_call 2099} Tmp_1315 := __HAVOC_malloc(208);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L9;

  L9:
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bResult_8 := 0;
    counter_8 := 100000;
    goto L13;

  L13:
    call {:si_unique_call 2100} Tmp_1308, counter_8, Tmp_1309 := NICIssueSelectiveReset_loop_L13(Tmp_1308, counter_8, Tmp_1309, Adapter_6);
    goto L13_last;

  L13_last:
    assume {:CounterLoop 100000} {:Counter "counter_8"} true;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} counter_8 != 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_1309;
    assume {:nonnull} Tmp_1309 != 0;
    assume Tmp_1309 > 0;
    havoc Tmp_1308;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Tmp_1308 == 128;
    counter_8 := counter_8 - 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} Tmp_1308 != 128;
    bResult_8 := 1;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} bResult_8 != 0;
    goto L24;

  L24:
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_1307;
    assume {:nonnull} Tmp_1307 != 0;
    assume Tmp_1307 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 2101} vslice_dummy_var_214 := D100IssueScbCommand(Adapter_6, 4, 1);
    goto L25;

  L25:
    Tmp_1315 := strConst__li2bpl321;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_1311;
    call {:si_unique_call 2102} DebugPrint(5, 4096, Tmp_1315);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_1314;
    assume {:nonnull} Tmp_1314 != 0;
    assume Tmp_1314 > 0;
    bResult_8 := 0;
    counter_9 := 100;
    goto L39;

  L39:
    call {:si_unique_call 2103} Tmp_1310, counter_9 := NICIssueSelectiveReset_loop_L39(Tmp_1310, counter_9, Adapter_6);
    goto L39_last;

  L39_last:
    assume {:CounterLoop 100} {:Counter "counter_9"} true;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} counter_9 != 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_1310;
    assume {:nonnull} Tmp_1310 != 0;
    assume Tmp_1310 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    counter_9 := counter_9 - 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    bResult_8 := 1;
    goto L40;

  L40:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} bResult_8 != 0;
    goto L49;

  L49:
    call {:si_unique_call 2104} NICDisableInterrupt(Adapter_6);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:partition} bResult_8 == 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L49;

  anon23_Then:
    assume {:partition} counter_9 == 0;
    goto L40;

  anon26_Then:
    goto L25;

  anon22_Then:
    assume {:partition} bResult_8 == 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L24;

  anon21_Then:
    assume {:partition} counter_8 == 0;
    goto L14;

  anon20_Then:
    goto L1;

  anon19_Then:
    call {:si_unique_call 2105} vslice_dummy_var_213 := WaitScb(Adapter_6);
    goto L9;
}



procedure {:origName "MdiWrite"} MdiWrite(actual_Adapter_7: int, actual_RegAddress_1: int, actual_PhyAddress_1: int, actual_DataValue_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MdiWrite"} MdiWrite(actual_Adapter_7: int, actual_RegAddress_1: int, actual_PhyAddress_1: int, actual_DataValue_1: int)
{
  var {:scalar} counter_10: int;
  var {:pointer} Tmp_1317: int;
  var {:pointer} Tmp_1318: int;
  var {:scalar} bResult_9: int;
  var {:pointer} Adapter_7: int;
  var boogieTmp: int;
  var vslice_dummy_var_215: int;

  anon0:
    call {:si_unique_call 2106} vslice_dummy_var_215 := __HAVOC_malloc(4);
    Adapter_7 := actual_Adapter_7;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    havoc Tmp_1317;
    assume {:nonnull} Tmp_1317 != 0;
    assume Tmp_1317 > 0;
    call {:si_unique_call 2107} boogieTmp := corral_nondet();
    bResult_9 := 0;
    counter_10 := 100000;
    goto L11;

  L11:
    call {:si_unique_call 2108} counter_10, Tmp_1318 := MdiWrite_loop_L11(counter_10, Tmp_1318, Adapter_7);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100000} {:Counter "counter_10"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_10 != 0;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    havoc Tmp_1318;
    assume {:nonnull} Tmp_1318 != 0;
    assume Tmp_1318 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_10 := counter_10 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_9 := 1;
    goto L12;

  L12:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_9 == 0;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_9 != 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_10 == 0;
    goto L12;
}



procedure {:origName "ResetPhy"} ResetPhy(actual_FdoData_99: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ResetPhy"} ResetPhy(actual_FdoData_99: int)
{
  var {:scalar} MdiControlReg: int;
  var {:pointer} FdoData_99: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_66: int;

  anon0:
    call {:si_unique_call 2109} vslice_dummy_var_216 := __HAVOC_malloc(4);
    FdoData_99 := actual_FdoData_99;
    MdiControlReg := 37376;
    assume {:nonnull} FdoData_99 != 0;
    assume FdoData_99 > 0;
    havoc vslice_dummy_var_66;
    call {:si_unique_call 2110} MdiWrite(FdoData_99, 0, vslice_dummy_var_66, MdiControlReg);
    return;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_217: int;

  anon0:
    call {:si_unique_call 2111} vslice_dummy_var_217 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICWritePortUShort"} NICWritePortUShort(actual_x_19: int, actual_y_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICWritePortUShort"} NICWritePortUShort(actual_x_19: int, actual_y_2: int)
{
  var vslice_dummy_var_218: int;

  anon0:
    call {:si_unique_call 2112} vslice_dummy_var_218 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_219: int;

  anon0:
    call {:si_unique_call 2113} vslice_dummy_var_219 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "RtlULongAdd"} RtlULongAdd(actual_ulAugend: int, actual_ulAddend: int, actual_pulResult: int) returns (Tmp_1339: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1339 == 0 || Tmp_1339 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlULongAdd"} RtlULongAdd(actual_ulAugend: int, actual_ulAddend: int, actual_pulResult: int) returns (Tmp_1339: int)
{
  var {:scalar} status_90: int;
  var {:scalar} ulAugend: int;
  var {:scalar} ulAddend: int;
  var {:pointer} pulResult: int;

  anon0:
    ulAugend := actual_ulAugend;
    ulAddend := actual_ulAddend;
    pulResult := actual_pulResult;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} ulAugend + ulAddend >= ulAugend;
    assume {:nonnull} pulResult != 0;
    assume pulResult > 0;
    Mem_T.INT4[pulResult] := ulAugend + ulAddend;
    status_90 := 0;
    goto L8;

  L8:
    Tmp_1339 := status_90;
    return;

  anon3_Then:
    assume {:partition} ulAugend > ulAugend + ulAddend;
    assume {:nonnull} pulResult != 0;
    assume pulResult > 0;
    Mem_T.INT4[pulResult] := -1;
    status_90 := -1073741675;
    goto L8;
}



procedure {:origName "RtlULongMult"} RtlULongMult(actual_ulMultiplicand: int, actual_ulMultiplier: int, actual_pulResult_1: int) returns (Tmp_1341: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1341 == 0 || Tmp_1341 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlULongMult"} RtlULongMult(actual_ulMultiplicand: int, actual_ulMultiplier: int, actual_pulResult_1: int) returns (Tmp_1341: int)
{
  var {:scalar} ull64Result: int;
  var {:scalar} ulMultiplicand: int;
  var {:scalar} ulMultiplier: int;
  var {:pointer} pulResult_1: int;

  anon0:
    ulMultiplicand := actual_ulMultiplicand;
    ulMultiplier := actual_ulMultiplier;
    pulResult_1 := actual_pulResult_1;
    ull64Result := ulMultiplicand * ulMultiplier;
    call {:si_unique_call 2114} Tmp_1341 := RtlULongLongToULong(ull64Result, pulResult_1);
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_1343: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_1343: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} Entry_1: int;
  var {:pointer} ListHead_2: int;

  anon0:
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    havoc Entry_1;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    havoc NextEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 2115} FatalListEntryError(ListHead_2, Entry_1, NextEntry);
    goto L12;

  L12:
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    Tmp_1343 := Entry_1;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "RtlULongLongToULong"} RtlULongLongToULong(actual_ullOperand: int, actual_pulResult_2: int) returns (Tmp_1345: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1345 == 0 || Tmp_1345 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlULongLongToULong"} RtlULongLongToULong(actual_ullOperand: int, actual_pulResult_2: int) returns (Tmp_1345: int)
{
  var {:scalar} status_91: int;
  var {:scalar} ullOperand: int;
  var {:pointer} pulResult_2: int;

  anon0:
    ullOperand := actual_ullOperand;
    pulResult_2 := actual_pulResult_2;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} -1 >= ullOperand;
    assume {:nonnull} pulResult_2 != 0;
    assume pulResult_2 > 0;
    Mem_T.INT4[pulResult_2] := ullOperand;
    status_91 := 0;
    goto L8;

  L8:
    Tmp_1345 := status_91;
    return;

  anon3_Then:
    assume {:partition} ullOperand > -1;
    assume {:nonnull} pulResult_2 != 0;
    assume pulResult_2 > 0;
    Mem_T.INT4[pulResult_2] := -1;
    status_91 := -1073741675;
    goto L8;
}



procedure {:origName "NICReadPortUShort"} NICReadPortUShort(actual_x_20: int) returns (Tmp_1347: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICReadPortUShort"} NICReadPortUShort(actual_x_20: int) returns (Tmp_1347: int)
{

  anon0:
    call {:si_unique_call 2116} Tmp_1347 := corral_nondet();
    return;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_220: int;

  anon0:
    call {:si_unique_call 2117} vslice_dummy_var_220 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MP_STALL_EXECUTION"} MP_STALL_EXECUTION(actual_MsecDelay: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MP_STALL_EXECUTION"} MP_STALL_EXECUTION(actual_MsecDelay: int)
{
  var {:scalar} MsecDelay: int;
  var vslice_dummy_var_221: int;

  anon0:
    call {:si_unique_call 2118} vslice_dummy_var_221 := __HAVOC_malloc(4);
    MsecDelay := actual_MsecDelay;
    MsecDelay := MsecDelay * 10;
    goto L4;

  L4:
    call {:si_unique_call 2119} MsecDelay := MP_STALL_EXECUTION_loop_L4(MsecDelay);
    goto L4_last;

  L4_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} MsecDelay != 0;
    MsecDelay := MsecDelay - 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} MsecDelay == 0;
    return;
}



procedure {:origName "MP_GET_STATUS_FROM_FLAGS"} MP_GET_STATUS_FROM_FLAGS(actual_FdoData_101: int) returns (Tmp_1353: int);
  free ensures {:va_keep} Tmp_1353 == -1073741661 || Tmp_1353 == 16 || Tmp_1353 == -1073741667 || Tmp_1353 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MP_GET_STATUS_FROM_FLAGS"} MP_GET_STATUS_FROM_FLAGS(actual_FdoData_101: int) returns (Tmp_1353: int)
{
  var {:scalar} Status_3: int;
  var {:pointer} FdoData_101: int;

  anon0:
    FdoData_101 := actual_FdoData_101;
    Status_3 := -1073741823;
    assume {:nonnull} FdoData_101 != 0;
    assume FdoData_101 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Status_3 := -1073741661;
    goto L8;

  L8:
    Tmp_1353 := Status_3;
    return;

  anon9_Then:
    assume {:nonnull} FdoData_101 != 0;
    assume FdoData_101 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Status_3 := 16;
    goto L8;

  anon7_Then:
    assume {:nonnull} FdoData_101 != 0;
    assume FdoData_101 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Status_3 := -1073741667;
    goto L8;

  anon8_Then:
    goto L8;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_3: int)
{
  var {:pointer} ListHead_3: int;
  var vslice_dummy_var_222: int;

  anon0:
    call {:si_unique_call 2120} vslice_dummy_var_222 := __HAVOC_malloc(4);
    ListHead_3 := actual_ListHead_3;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    return;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int)
{
  var vslice_dummy_var_223: int;

  anon0:
    call {:si_unique_call 2121} vslice_dummy_var_223 := __HAVOC_malloc(4);
    call {:si_unique_call 2122} RtlFailFast(3);
    return;
}



procedure {:origName "NICWriteRegisterUShort"} NICWriteRegisterUShort(actual_x_21: int, actual_y_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICWriteRegisterUShort"} NICWriteRegisterUShort(actual_x_21: int, actual_y_3: int)
{
  var vslice_dummy_var_224: int;

  anon0:
    call {:si_unique_call 2123} vslice_dummy_var_224 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IsPoMgmtSupported"} IsPoMgmtSupported(actual_FdoData_102: int) returns (Tmp_1365: int);
  free ensures {:va_keep} Tmp_1365 == 1 || Tmp_1365 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IsPoMgmtSupported"} IsPoMgmtSupported(actual_FdoData_102: int) returns (Tmp_1365: int)
{
  var {:pointer} FdoData_102: int;

  anon0:
    FdoData_102 := actual_FdoData_102;
    assume {:nonnull} FdoData_102 != 0;
    assume FdoData_102 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} FdoData_102 != 0;
    assume FdoData_102 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} FdoData_102 != 0;
    assume FdoData_102 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_1365 := 1;
    goto L1;

  L1:
    return;

  anon9_Then:
    goto L4;

  L4:
    Tmp_1365 := 0;
    goto L1;

  anon8_Then:
    goto L4;

  anon7_Then:
    goto L4;
}



procedure {:origName "D100IssueScbCommand"} D100IssueScbCommand(actual_FdoData_103: int, actual_ScbCommandLow: int, actual_WaitForScb_1: int) returns (Tmp_1367: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1367 == -1073741668 || Tmp_1367 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D100IssueScbCommand"} D100IssueScbCommand(actual_FdoData_103: int, actual_ScbCommandLow: int, actual_WaitForScb_1: int) returns (Tmp_1367: int)
{
  var {:pointer} Tmp_1368: int;
  var {:scalar} sdv_545: int;
  var {:pointer} FdoData_103: int;
  var {:scalar} ScbCommandLow: int;
  var {:scalar} WaitForScb_1: int;

  anon0:
    FdoData_103 := actual_FdoData_103;
    ScbCommandLow := actual_ScbCommandLow;
    WaitForScb_1 := actual_WaitForScb_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} WaitForScb_1 == 1;
    call {:si_unique_call 2124} sdv_545 := WaitScb(FdoData_103);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_545 == 0;
    Tmp_1367 := -1073741668;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_545 != 0;
    goto L4;

  L4:
    assume {:nonnull} FdoData_103 != 0;
    assume FdoData_103 > 0;
    havoc Tmp_1368;
    assume {:nonnull} Tmp_1368 != 0;
    assume Tmp_1368 > 0;
    Tmp_1367 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} WaitForScb_1 != 1;
    goto L4;
}



procedure {:origName "NICDisableInterrupt"} NICDisableInterrupt(actual_FdoData_104: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICDisableInterrupt"} NICDisableInterrupt(actual_FdoData_104: int)
{
  var {:pointer} Tmp_1371: int;
  var {:pointer} FdoData_104: int;
  var vslice_dummy_var_225: int;

  anon0:
    call {:si_unique_call 2125} vslice_dummy_var_225 := __HAVOC_malloc(4);
    FdoData_104 := actual_FdoData_104;
    assume {:nonnull} FdoData_104 != 0;
    assume FdoData_104 > 0;
    havoc Tmp_1371;
    assume {:nonnull} Tmp_1371 != 0;
    assume Tmp_1371 > 0;
    return;
}



procedure {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_3: int, actual_Entry_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_3: int, actual_Entry_2: int)
{
  var {:pointer} Tmp_1375: int;
  var {:pointer} Lookaside_3: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;

  anon0:
    call {:si_unique_call 2126} vslice_dummy_var_226 := __HAVOC_malloc(4);
    Lookaside_3 := actual_Lookaside_3;
    assume {:nonnull} Lookaside_3 != 0;
    assume Lookaside_3 > 0;
    assume {:nonnull} Lookaside_3 != 0;
    assume Lookaside_3 > 0;
    Tmp_1375 := ListHead__GENERAL_LOOKASIDE(L__NPAGED_LOOKASIDE_LIST(Lookaside_3));
    assume {:nonnull} Lookaside_3 != 0;
    assume Lookaside_3 > 0;
    assume {:nonnull} Tmp_1375 != 0;
    assume Tmp_1375 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Lookaside_3 != 0;
    assume Lookaside_3 > 0;
    assume {:nonnull} Lookaside_3 != 0;
    assume Lookaside_3 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L1;

  anon5_Then:
    call {:si_unique_call 2127} vslice_dummy_var_227 := __HAVOC_malloc(1);
    goto L1;
}



procedure {:origName "NICReadRegisterUShort"} NICReadRegisterUShort(actual_x_22: int) returns (Tmp_1376: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICReadRegisterUShort"} NICReadRegisterUShort(actual_x_22: int) returns (Tmp_1376: int)
{

  anon0:
    call {:si_unique_call 2128} Tmp_1376 := corral_nondet();
    return;
}



procedure {:origName "NICEnableInterrupt"} NICEnableInterrupt(actual_Context_23: int) returns (Tmp_1378: int);
  free ensures {:va_keep} Tmp_1378 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICEnableInterrupt"} NICEnableInterrupt(actual_Context_23: int) returns (Tmp_1378: int)
{
  var {:pointer} FdoData_105: int;
  var {:pointer} Tmp_1380: int;
  var {:pointer} Context_23: int;

  anon0:
    Context_23 := actual_Context_23;
    FdoData_105 := Context_23;
    assume {:nonnull} FdoData_105 != 0;
    assume FdoData_105 > 0;
    havoc Tmp_1380;
    assume {:nonnull} Tmp_1380 != 0;
    assume Tmp_1380 > 0;
    Tmp_1378 := 1;
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_563: int, actual_sdv_564: int) returns (Tmp_1393: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_563: int, actual_sdv_564: int) returns (Tmp_1393: int)
{
  var {:scalar} sdv_565: int;

  anon0:
    call {:si_unique_call 2129} sdv_565 := __HAVOC_malloc(4);
    call {:si_unique_call 2130} Tmp_1393 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1393 != 0;
    assume Tmp_1393 > 0;
    assume {:nonnull} sdv_565 != 0;
    assume sdv_565 > 0;
    Mem_T.INT4[Tmp_1393] := Mem_T.INT4[sdv_565];
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init18"} _sdv_init18()
{

  anon0:
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller: int, actual_KeSetEvent_1: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller: int, actual_KeSetEvent_1: int)
{
  var {:pointer} caller: int;
  var {:scalar} KeSetEvent_1: int;

  anon0:
    caller := actual_caller;
    KeSetEvent_1 := actual_KeSetEvent_1;
    call {:si_unique_call 2131} SLIC_ERROR_ROUTINE(strConst__li2bpl327);
    return;
}



procedure {:origName "SLIC_KeSetEvent_entry"} {:osmodel} SLIC_KeSetEvent_entry(actual_caller_1: int, actual_KeSetEvent_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_KeSetEvent_entry"} {:osmodel} SLIC_KeSetEvent_entry(actual_caller_1: int, actual_KeSetEvent_2: int)
{
  var {:pointer} caller_1: int;
  var {:scalar} KeSetEvent_2: int;

  anon0:
    caller_1 := actual_caller_1;
    KeSetEvent_2 := actual_KeSetEvent_2;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} KeSetEvent_2 != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_irql_current == 2;
    call {:si_unique_call 2132} SLIC_ABORT_1_1(caller_1, KeSetEvent_2);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} sdv_irql_current != 2;
    goto L2;

  anon17_Then:
    assume {:partition} KeSetEvent_2 == 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2133} SLIC_ABORT_1_0(caller_1, KeSetEvent_2);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon19_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon15_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_1_1"} SLIC_ABORT_1_1(actual_caller_2: int, actual_KeSetEvent_3: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_1_1"} SLIC_ABORT_1_1(actual_caller_2: int, actual_KeSetEvent_3: int)
{
  var {:pointer} caller_2: int;
  var {:scalar} KeSetEvent_3: int;

  anon0:
    caller_2 := actual_caller_2;
    KeSetEvent_3 := actual_KeSetEvent_3;
    call {:si_unique_call 2134} SLIC_ERROR_ROUTINE(strConst__li2bpl328);
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddDevice__DRIVER_EXTENSION"} {:fieldname "AddDevice"} AddDevice__DRIVER_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Address__DEVICE_CAPABILITIES"} {:fieldname "Address"} Address__DEVICE_CAPABILITIES(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.Address__SCATTER_GATHER_ELEMENT"} {:fieldname "Address"} Address__SCATTER_GATHER_ELEMENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_45"} {:fieldname "Affinity"} Affinity_unnamed_tag_45(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.AiForceDpx__FDO_DATA"} {:fieldname "AiForceDpx"} AiForceDpx__FDO_DATA(x: int) : int
{
  x + 1760
}

function {:inline true} {:fieldmap "Mem_T.AiRxDmaCount__FDO_DATA"} {:fieldname "AiRxDmaCount"} AiRxDmaCount__FDO_DATA(x: int) : int
{
  x + 1752
}

function {:inline true} {:fieldmap "Mem_T.AiRxFifo__FDO_DATA"} {:fieldname "AiRxFifo"} AiRxFifo__FDO_DATA(x: int) : int
{
  x + 1744
}

function {:inline true} {:fieldmap "Mem_T.AiTempSpeed__FDO_DATA"} {:fieldname "AiTempSpeed"} AiTempSpeed__FDO_DATA(x: int) : int
{
  x + 1764
}

function {:inline true} {:fieldmap "Mem_T.AiThreshold__FDO_DATA"} {:fieldname "AiThreshold"} AiThreshold__FDO_DATA(x: int) : int
{
  x + 1768
}

function {:inline true} {:fieldmap "Mem_T.AiTxDmaCount__FDO_DATA"} {:fieldname "AiTxDmaCount"} AiTxDmaCount__FDO_DATA(x: int) : int
{
  x + 1748
}

function {:inline true} {:fieldmap "Mem_T.AiTxFifo__FDO_DATA"} {:fieldname "AiTxFifo"} AiTxFifo__FDO_DATA(x: int) : int
{
  x + 1740
}

function {:inline true} {:fieldmap "Mem_T.AiUnderrunRetry__FDO_DATA"} {:fieldname "AiUnderrunRetry"} AiUnderrunRetry__FDO_DATA(x: int) : int
{
  x + 1756
}

function {:inline true} {:fieldmap "Mem_T.AllocNewRfd__FDO_DATA"} {:fieldname "AllocNewRfd"} AllocNewRfd__FDO_DATA(x: int) : int
{
  x + 2308
}

function {:inline true} {:fieldmap "Mem_T.AllocateCommonBuffer__DMA_OPERATIONS"} {:fieldname "AllocateCommonBuffer"} AllocateCommonBuffer__DMA_OPERATIONS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.AllocateCommonBuffer__FDO_DATA"} {:fieldname "AllocateCommonBuffer"} AllocateCommonBuffer__FDO_DATA(x: int) : int
{
  x + 2044
}

function {:inline true} {:fieldmap "Mem_T.AllocatedMapRegisters__FDO_DATA"} {:fieldname "AllocatedMapRegisters"} AllocatedMapRegisters__FDO_DATA(x: int) : int
{
  x + 1920
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_40"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__MP_WAKE_PATTERN"} {:fieldname "AllocationSize"} AllocationSize__MP_WAKE_PATTERN(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AllowIdleDetectionRegistration__FDO_DATA"} {:fieldname "AllowIdleDetectionRegistration"} AllowIdleDetectionRegistration__FDO_DATA(x: int) : int
{
  x + 1620
}

function {:inline true} {:fieldmap "Mem_T.AllowWakeArming__FDO_DATA"} {:fieldname "AllowWakeArming"} AllowWakeArming__FDO_DATA(x: int) : int
{
  x + 900
}

function {:inline true} {:fieldmap "Mem_T.Argument1__WORKER_ITEM_CONTEXT"} {:fieldname "Argument1"} Argument1__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Argument2__WORKER_ITEM_CONTEXT"} {:fieldname "Argument2"} Argument2__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BufferCount__MP_TCB"} {:fieldname "BufferCount"} BufferCount__MP_TCB(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Buffer__MP_RFD"} {:fieldname "Buffer"} Buffer__MP_RFD(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BuildScatterGatherList__DMA_OPERATIONS"} {:fieldname "BuildScatterGatherList"} BuildScatterGatherList__DMA_OPERATIONS(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T._BUS_INTERFACE_STANDARD"} {:fieldname "BusInterface"} BusInterface__FDO_DATA(x: int) : int
{
  x + 1856
}

function {:inline true} {:fieldmap "Mem_T.CSRAddress__FDO_DATA"} {:fieldname "CSRAddress"} CSRAddress__FDO_DATA(x: int) : int
{
  x + 1852
}

function {:inline true} {:fieldmap "Mem_T.CalculateScatterGatherList__DMA_OPERATIONS"} {:fieldname "CalculateScatterGatherList"} CalculateScatterGatherList__DMA_OPERATIONS(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CbCommand__CB_HEADER_STRUC"} {:fieldname "CbCommand"} CbCommand__CB_HEADER_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CbLinkPointer__CB_HEADER_STRUC"} {:fieldname "CbLinkPointer"} CbLinkPointer__CB_HEADER_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "CbStatus"} CbStatus__CB_HEADER_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CheckForHang__FDO_DATA"} {:fieldname "CheckForHang"} CheckForHang__FDO_DATA(x: int) : int
{
  x + 3584
}

function {:inline true} {:fieldmap "Mem_T.CommandComplete__ERR_COUNT_STRUC"} {:fieldname "CommandComplete"} CommandComplete__ERR_COUNT_STRUC(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Command__PCI_COMMON_CONFIG"} {:fieldname "Command"} Command__PCI_COMMON_CONFIG(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.ConfigBytes__CONFIG_CB_STRUC"} {:fieldname "ConfigBytes"} ConfigBytes__CONFIG_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ConfigCBHeader__CONFIG_CB_STRUC"} {:fieldname "ConfigCBHeader"} ConfigCBHeader__CONFIG_CB_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Config_unnamed_tag_69"} {:fieldname "Config"} Config_unnamed_tag_69(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.Congest__FDO_DATA"} {:fieldname "Congest"} Congest__FDO_DATA(x: int) : int
{
  x + 1776
}

function {:inline true} {:fieldmap "Mem_T.Connector__FDO_DATA"} {:fieldname "Connector"} Connector__FDO_DATA(x: int) : int
{
  x + 3172
}

function {:inline true} {:fieldmap "Mem_T.ConservationIdleTime__FDO_DATA"} {:fieldname "ConservationIdleTime"} ConservationIdleTime__FDO_DATA(x: int) : int
{
  x + 1624
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__MP_TCB"} {:fieldname "Count"} Count__MP_TCB(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CurrNumRfd__FDO_DATA"} {:fieldname "CurrNumRfd"} CurrNumRfd__FDO_DATA(x: int) : int
{
  x + 2164
}

function {:inline true} {:fieldmap "Mem_T.CurrSendHead__FDO_DATA"} {:fieldname "CurrSendHead"} CurrSendHead__FDO_DATA(x: int) : int
{
  x + 2052
}

function {:inline true} {:fieldmap "Mem_T.CurrSendTail__FDO_DATA"} {:fieldname "CurrSendTail"} CurrSendTail__FDO_DATA(x: int) : int
{
  x + 2056
}

function {:inline true} {:fieldmap "Mem_T.CurrentAddress__FDO_DATA"} {:fieldname "CurrentAddress"} CurrentAddress__FDO_DATA(x: int) : int
{
  x + 1712
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_6"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_6(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataScale__MP_PMCSR"} {:fieldname "DataScale"} DataScale__MP_PMCSR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DataSel__MP_PMCSR"} {:fieldname "DataSel"} DataSel__MP_PMCSR(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Data__NDISPROT_QUERY_OID"} {:fieldname "Data"} Data__NDISPROT_QUERY_OID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DebugPrintLevel__PCIDRV_WMI_STD_DATA"} {:fieldname "DebugPrintLevel"} DebugPrintLevel__PCIDRV_WMI_STD_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Depth__GENERAL_LOOKASIDE"} {:fieldname "Depth"} Depth__GENERAL_LOOKASIDE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Depth__SLIST_HEADER"} {:fieldname "Depth"} Depth__SLIST_HEADER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T._DEVICE_CAPABILITIES"} {:fieldname "DeviceCaps"} DeviceCaps__FDO_DATA(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.DeviceD1__DEVICE_CAPABILITIES"} {:fieldname "DeviceD1"} DeviceD1__DEVICE_CAPABILITIES(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceD2__DEVICE_CAPABILITIES"} {:fieldname "DeviceD2"} DeviceD2__DEVICE_CAPABILITIES(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceID__PCI_COMMON_CONFIG"} {:fieldname "DeviceID"} DeviceID__PCI_COMMON_CONFIG(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DevicePnPState__FDO_DATA"} {:fieldname "DevicePnPState"} DevicePnPState__FDO_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DevicePowerState__FDO_DATA"} {:fieldname "DevicePowerState"} DevicePowerState__FDO_DATA(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.Dma32BitAddresses__DEVICE_DESCRIPTION"} {:fieldname "Dma32BitAddresses"} Dma32BitAddresses__DEVICE_DESCRIPTION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Dma64BitAddresses__DEVICE_DESCRIPTION"} {:fieldname "Dma64BitAddresses"} Dma64BitAddresses__DEVICE_DESCRIPTION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.DmaAdapterObject__FDO_DATA"} {:fieldname "DmaAdapterObject"} DmaAdapterObject__FDO_DATA(x: int) : int
{
  x + 2040
}

function {:inline true} {:fieldmap "Mem_T.DmaOperations__DMA_ADAPTER"} {:fieldname "DmaOperations"} DmaOperations__DMA_ADAPTER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DriverContext_unnamed_tag_6"} {:fieldname "DriverContext"} DriverContext_unnamed_tag_6(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DriverExtension__DRIVER_OBJECT"} {:fieldname "DriverExtension"} DriverExtension__DRIVER_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverUnload__DRIVER_OBJECT"} {:fieldname "DriverUnload"} DriverUnload__DRIVER_OBJECT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.DumpSpacePhys__FDO_DATA"} {:fieldname "DumpSpacePhys"} DumpSpacePhys__FDO_DATA(x: int) : int
{
  x + 3156
}

function {:inline true} {:fieldmap "Mem_T.DumpSpace__FDO_DATA"} {:fieldname "DumpSpace"} DumpSpace__FDO_DATA(x: int) : int
{
  x + 3152
}

function {:inline true} {:fieldmap "Mem_T.DynData__MP_PMCSR"} {:fieldname "DynData"} DynData__MP_PMCSR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.EepromAddressSize__FDO_DATA"} {:fieldname "EepromAddressSize"} EepromAddressSize__FDO_DATA(x: int) : int
{
  x + 1912
}

function {:inline true} {:fieldmap "Mem_T.Elements__SCATTER_GATHER_LIST"} {:fieldname "Elements"} Elements__SCATTER_GATHER_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.FileObject__IO_STACK_LOCATION"} {:fieldname "FileObject"} FileObject__IO_STACK_LOCATION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.FirstBuffer__MP_TCB"} {:fieldname "FirstBuffer"} FirstBuffer__MP_TCB(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__FDO_DATA"} {:fieldname "Flags"} Flags__FDO_DATA(x: int) : int
{
  x + 1680
}

function {:inline true} {:fieldmap "Mem_T.Flags__MP_RFD"} {:fieldname "Flags"} Flags__MP_RFD(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.Flags__MP_TCB"} {:fieldname "Flags"} Flags__MP_TCB(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flags__NDIS_PNP_CAPABILITIES"} {:fieldname "Flags"} Flags__NDIS_PNP_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Flags__WMIGUIDREGINFO"} {:fieldname "Flags"} Flags__WMIGUIDREGINFO(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FreeCommonBuffer__DMA_OPERATIONS"} {:fieldname "FreeCommonBuffer"} FreeCommonBuffer__DMA_OPERATIONS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.FreeCommonBuffer__FDO_DATA"} {:fieldname "FreeCommonBuffer"} FreeCommonBuffer__FDO_DATA(x: int) : int
{
  x + 2048
}

function {:inline true} {:fieldmap "Mem_T.FreeMisses__GENERAL_LOOKASIDE"} {:fieldname "FreeMisses"} FreeMisses__GENERAL_LOOKASIDE(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Free__GENERAL_LOOKASIDE"} {:fieldname "Free"} Free__GENERAL_LOOKASIDE(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.GetBusData__BUS_INTERFACE_STANDARD"} {:fieldname "GetBusData"} GetBusData__BUS_INTERFACE_STANDARD(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.GoodReceives__FDO_DATA"} {:fieldname "GoodReceives"} GoodReceives__FDO_DATA(x: int) : int
{
  x + 3604
}

function {:inline true} {:fieldmap "Mem_T.GoodTransmits__FDO_DATA"} {:fieldname "GoodTransmits"} GoodTransmits__FDO_DATA(x: int) : int
{
  x + 3600
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Guid__WMIGUIDREGINFO"} {:fieldname "Guid"} Guid__WMIGUIDREGINFO(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HwMiscMemAllocPa__FDO_DATA"} {:fieldname "HwMiscMemAllocPa"} HwMiscMemAllocPa__FDO_DATA(x: int) : int
{
  x + 3116
}

function {:inline true} {:fieldmap "Mem_T.HwMiscMemAllocSize__FDO_DATA"} {:fieldname "HwMiscMemAllocSize"} HwMiscMemAllocSize__FDO_DATA(x: int) : int
{
  x + 3112
}

function {:inline true} {:fieldmap "Mem_T.HwMiscMemAllocVa__FDO_DATA"} {:fieldname "HwMiscMemAllocVa"} HwMiscMemAllocVa__FDO_DATA(x: int) : int
{
  x + 3108
}

function {:inline true} {:fieldmap "Mem_T.HwRfdPa__MP_RFD"} {:fieldname "HwRfdPa"} HwRfdPa__MP_RFD(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.HwRfdPhys__MP_RFD"} {:fieldname "HwRfdPhys"} HwRfdPhys__MP_RFD(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.HwRfdSize__FDO_DATA"} {:fieldname "HwRfdSize"} HwRfdSize__FDO_DATA(x: int) : int
{
  x + 2172
}

function {:inline true} {:fieldmap "Mem_T.HwRfd__MP_RFD"} {:fieldname "HwRfd"} HwRfd__MP_RFD(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.HwSendMemAllocPa__FDO_DATA"} {:fieldname "HwSendMemAllocPa"} HwSendMemAllocPa__FDO_DATA(x: int) : int
{
  x + 2116
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "HwSendMemAllocSize"} HwSendMemAllocSize__FDO_DATA(x: int) : int
{
  x + 2112
}

function {:inline true} {:fieldmap "Mem_T.HwSendMemAllocVa__FDO_DATA"} {:fieldname "HwSendMemAllocVa"} HwSendMemAllocVa__FDO_DATA(x: int) : int
{
  x + 2108
}

function {:inline true} {:fieldmap "Mem_T.HwTbdPhys__MP_TCB"} {:fieldname "HwTbdPhys"} HwTbdPhys__MP_TCB(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.HwTbd__MP_TCB"} {:fieldname "HwTbd"} HwTbd__MP_TCB(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.HwTcbPhys__MP_TCB"} {:fieldname "HwTcbPhys"} HwTcbPhys__MP_TCB(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.HwTcb__MP_TCB"} {:fieldname "HwTcb"} HwTcb__MP_TCB(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.IaAddress__IA_CB_STRUC"} {:fieldname "IaAddress"} IaAddress__IA_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IdleDetectionEnabled__FDO_DATA"} {:fieldname "IdleDetectionEnabled"} IdleDetectionEnabled__FDO_DATA(x: int) : int
{
  x + 1616
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IdleDetectionTimerDpc"} IdleDetectionTimerDpc__FDO_DATA(x: int) : int
{
  x + 1064
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "IdlePowerDownCompleteEvent"} IdlePowerDownCompleteEvent__FDO_DATA(x: int) : int
{
  x + 1460
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "IdlePowerUpCompleteEvent"} IdlePowerUpCompleteEvent__FDO_DATA(x: int) : int
{
  x + 1304
}

function {:inline true} {:fieldmap "Mem_T.IdlePowerUpRequested__FDO_DATA"} {:fieldname "IdlePowerUpRequested"} IdlePowerUpRequested__FDO_DATA(x: int) : int
{
  x + 1300
}

function {:inline true} {:fieldmap "Mem_T.IndicatedStatus__NDISPROT_INDICATE_STATUS"} {:fieldname "IndicatedStatus"} IndicatedStatus__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InstanceCount__WMIGUIDREGINFO"} {:fieldname "InstanceCount"} InstanceCount__WMIGUIDREGINFO(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "InterfaceName"} InterfaceName__FDO_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.InterfaceSpecificData_unnamed_tag_29"} {:fieldname "InterfaceSpecificData"} InterfaceSpecificData_unnamed_tag_29(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__DEVICE_DESCRIPTION"} {:fieldname "InterfaceType"} InterfaceType__DEVICE_DESCRIPTION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType_unnamed_tag_29"} {:fieldname "InterfaceType"} InterfaceType_unnamed_tag_29(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Interface_unnamed_tag_29"} {:fieldname "Interface"} Interface_unnamed_tag_29(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.InterruptAffinity__FDO_DATA"} {:fieldname "InterruptAffinity"} InterruptAffinity__FDO_DATA(x: int) : int
{
  x + 1840
}

function {:inline true} {:fieldmap "Mem_T.InterruptLevel__FDO_DATA"} {:fieldname "InterruptLevel"} InterruptLevel__FDO_DATA(x: int) : int
{
  x + 1832
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__FDO_DATA"} {:fieldname "InterruptMode"} InterruptMode__FDO_DATA(x: int) : int
{
  x + 1844
}

function {:inline true} {:fieldmap "Mem_T.InterruptVector__FDO_DATA"} {:fieldname "InterruptVector"} InterruptVector__FDO_DATA(x: int) : int
{
  x + 1836
}

function {:inline true} {:fieldmap "Mem_T.P_KINTERRUPT"} {:fieldname "Interrupt"} Interrupt__FDO_DATA(x: int) : int
{
  x + 1828
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_43"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_43(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.IoBaseAddress__FDO_DATA"} {:fieldname "IoBaseAddress"} IoBaseAddress__FDO_DATA(x: int) : int
{
  x + 1800
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoRange__FDO_DATA"} {:fieldname "IoRange"} IoRange__FDO_DATA(x: int) : int
{
  x + 1804
}

function {:inline true} {:fieldmap "Mem_T._IO_STATUS_BLOCK"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Irp__MP_TCB"} {:fieldname "Irp"} Irp__MP_TCB(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IsDeviceIdle__FDO_DATA"} {:fieldname "IsDeviceIdle"} IsDeviceIdle__FDO_DATA(x: int) : int
{
  x + 904
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "IsUpperEdgeNdis"} IsUpperEdgeNdis__FDO_DATA(x: int) : int
{
  x + 1684
}

function {:inline true} {:fieldmap "Mem_T.L__NPAGED_LOOKASIDE_LIST"} {:fieldname "L"} L__NPAGED_LOOKASIDE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length__SCATTER_GATHER_ELEMENT"} {:fieldname "Length"} Length__SCATTER_GATHER_ELEMENT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_44"} {:fieldname "Length"} Length_unnamed_tag_44(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_45"} {:fieldname "Level"} Level_unnamed_tag_45(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_6(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T._SLIST_HEADER"} {:fieldname "ListHead"} ListHead__GENERAL_LOOKASIDE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__WORK_QUEUE_ITEM"} {:fieldname "List"} List__WORK_QUEUE_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Lock__FDO_DATA"} {:fieldname "Lock"} Lock__FDO_DATA(x: int) : int
{
  x + 2312
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MCAddressCount__FDO_DATA"} {:fieldname "MCAddressCount"} MCAddressCount__FDO_DATA(x: int) : int
{
  x + 2336
}

function {:inline true} {:fieldmap "Mem_T.MCList__FDO_DATA"} {:fieldname "MCList"} MCList__FDO_DATA(x: int) : int
{
  x + 2340
}

function {:inline true} {:fieldmap "Mem_T.MDIControl__CSR_STRUC"} {:fieldname "MDIControl"} MDIControl__CSR_STRUC(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MWIEnable__FDO_DATA"} {:fieldname "MWIEnable"} MWIEnable__FDO_DATA(x: int) : int
{
  x + 1772
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MappedPorts__FDO_DATA"} {:fieldname "MappedPorts"} MappedPorts__FDO_DATA(x: int) : int
{
  x + 1848
}

function {:inline true} {:fieldmap "Mem_T.MaskSize__NDIS_PM_PACKET_PATTERN"} {:fieldname "MaskSize"} MaskSize__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Master__DEVICE_DESCRIPTION"} {:fieldname "Master"} Master__DEVICE_DESCRIPTION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaxNumRfd__FDO_DATA"} {:fieldname "MaxNumRfd"} MaxNumRfd__FDO_DATA(x: int) : int
{
  x + 2168
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__DEVICE_DESCRIPTION"} {:fieldname "MaximumLength"} MaximumLength__DEVICE_DESCRIPTION(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.McAddress__MULTICAST_CB_STRUC"} {:fieldname "McAddress"} McAddress__MULTICAST_CB_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.McCount__MULTICAST_CB_STRUC"} {:fieldname "McCount"} McCount__MULTICAST_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MdlAddress__IRP"} {:fieldname "MdlAddress"} MdlAddress__IRP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Mdl__MP_RFD"} {:fieldname "Mdl"} Mdl__MP_RFD(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MediaState__FDO_DATA"} {:fieldname "MediaState"} MediaState__FDO_DATA(x: int) : int
{
  x + 1916
}

function {:inline true} {:fieldmap "Mem_T.MemPhysAddress__FDO_DATA"} {:fieldname "MemPhysAddress"} MemPhysAddress__FDO_DATA(x: int) : int
{
  x + 1808
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_43"} {:fieldname "Memory"} Memory_unnamed_tag_43(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.MinLinkChangeWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinLinkChangeWakeUp"} MinLinkChangeWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinMagicPacketWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinMagicPacketWakeUp"} MinMagicPacketWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MinPatternWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinPatternWakeUp"} MinPatternWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MoreThanOneRetry__FDO_DATA"} {:fieldname "MoreThanOneRetry"} MoreThanOneRetry__FDO_DATA(x: int) : int
{
  x + 3636
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MpTcbMemSize"} MpTcbMemSize__FDO_DATA(x: int) : int
{
  x + 2104
}

function {:inline true} {:fieldmap "Mem_T.MpTcbMem__FDO_DATA"} {:fieldname "MpTcbMem"} MpTcbMem__FDO_DATA(x: int) : int
{
  x + 2100
}

function {:inline true} {:fieldmap "Mem_T.Multicast_unnamed_tag_69"} {:fieldname "Multicast"} Multicast_unnamed_tag_69(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "NewRequestsQueue"} NewRequestsQueue__FDO_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NextLowerDriver__FDO_DATA"} {:fieldname "NextLowerDriver"} NextLowerDriver__FDO_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Next__MDL"} {:fieldname "Next"} Next__MDL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Next__MP_TCB"} {:fieldname "Next"} Next__MP_TCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NonTxCb__NON_TRANSMIT_CB"} {:fieldname "NonTxCb"} NonTxCb__NON_TRANSMIT_CB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NonTxCmdBlockPhys__FDO_DATA"} {:fieldname "NonTxCmdBlockPhys"} NonTxCmdBlockPhys__FDO_DATA(x: int) : int
{
  x + 3148
}

function {:inline true} {:fieldmap "Mem_T.NonTxCmdBlock__FDO_DATA"} {:fieldname "NonTxCmdBlock"} NonTxCmdBlock__FDO_DATA(x: int) : int
{
  x + 3144
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "NumBuffers"} NumBuffers__FDO_DATA(x: int) : int
{
  x + 2096
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "NumRfd"} NumRfd__FDO_DATA(x: int) : int
{
  x + 2160
}

function {:inline true} {:fieldmap "Mem_T.NumTbd__FDO_DATA"} {:fieldname "NumTbd"} NumTbd__FDO_DATA(x: int) : int
{
  x + 2092
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "NumTcb"} NumTcb__FDO_DATA(x: int) : int
{
  x + 2084
}

function {:inline true} {:fieldmap "Mem_T.NumberOfElements__SCATTER_GATHER_LIST"} {:fieldname "NumberOfElements"} NumberOfElements__SCATTER_GATHER_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Oid__NDISPROT_QUERY_OID"} {:fieldname "Oid"} Oid__NDISPROT_QUERY_OID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OldPacketFilter__FDO_DATA"} {:fieldname "OldPacketFilter"} OldPacketFilter__FDO_DATA(x: int) : int
{
  x + 2320
}

function {:inline true} {:fieldmap "Mem_T.OldParameterField__FDO_DATA"} {:fieldname "OldParameterField"} OldParameterField__FDO_DATA(x: int) : int
{
  x + 3176
}

function {:inline true} {:fieldmap "Mem_T.OneRetry__FDO_DATA"} {:fieldname "OneRetry"} OneRetry__FDO_DATA(x: int) : int
{
  x + 3632
}

function {:inline true} {:fieldmap "Mem_T.OriginalHwRfdPa__MP_RFD"} {:fieldname "OriginalHwRfdPa"} OriginalHwRfdPa__MP_RFD(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.OriginalHwRfd__MP_RFD"} {:fieldname "OriginalHwRfd"} OriginalHwRfd__MP_RFD(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutstandingIO__FDO_DATA"} {:fieldname "OutstandingIO"} OutstandingIO__FDO_DATA(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_5"} {:fieldname "Overlay"} Overlay_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PMCSR__MP_PM_PCI_SPACE"} {:fieldname "PMCSR"} PMCSR__MP_PM_PCI_SPACE(x: int) : int
{
  x + 896
}

function {:inline true} {:fieldmap "Mem_T.PMCaps__MP_PM_PCI_SPACE"} {:fieldname "PMCaps"} PMCaps__MP_PM_PCI_SPACE(x: int) : int
{
  x + 888
}

function {:inline true} {:fieldmap "Mem_T.PME_En__MP_PMCSR"} {:fieldname "PME_En"} PME_En__MP_PMCSR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PME_Status__MP_PMCSR"} {:fieldname "PME_Status"} PME_Status__MP_PMCSR(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PME_Support__MP_PM_CAP_REG"} {:fieldname "PME_Support"} PME_Support__MP_PM_CAP_REG(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PacketFilter__FDO_DATA"} {:fieldname "PacketFilter"} PacketFilter__FDO_DATA(x: int) : int
{
  x + 2316
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__MP_TCB"} {:fieldname "PacketLength"} PacketLength__MP_TCB(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.PacketSize__MP_RFD"} {:fieldname "PacketSize"} PacketSize__MP_RFD(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PatternList"} PatternList__MP_POWER_MGMT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PatternOffset__NDIS_PM_PACKET_PATTERN"} {:fieldname "PatternOffset"} PatternOffset__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.PatternSize__NDIS_PM_PACKET_PATTERN"} {:fieldname "PatternSize"} PatternSize__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Pattern__FILTER_CB_STRUC"} {:fieldname "Pattern"} Pattern__FILTER_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Pattern__MP_WAKE_PATTERN"} {:fieldname "Pattern"} Pattern__MP_WAKE_PATTERN(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PendingSIrp__FDO_DATA"} {:fieldname "PendingSIrp"} PendingSIrp__FDO_DATA(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.PerformanceIdleTime__FDO_DATA"} {:fieldname "PerformanceIdleTime"} PerformanceIdleTime__FDO_DATA(x: int) : int
{
  x + 1628
}

function {:inline true} {:fieldmap "Mem_T.PermanentAddress__FDO_DATA"} {:fieldname "PermanentAddress"} PermanentAddress__FDO_DATA(x: int) : int
{
  x + 1688
}

function {:inline true} {:fieldmap "Mem_T.PhyAddress__FDO_DATA"} {:fieldname "PhyAddress"} PhyAddress__FDO_DATA(x: int) : int
{
  x + 3168
}

function {:inline true} {:fieldmap "Mem_T.PhysBufCount__MP_TCB"} {:fieldname "PhysBufCount"} PhysBufCount__MP_TCB(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.PoMgmt__FDO_DATA"} {:fieldname "PoMgmt"} PoMgmt__FDO_DATA(x: int) : int
{
  x + 516
}

function {:inline true} {:fieldmap "Mem_T.Port__CSR_STRUC"} {:fieldname "Port"} Port__CSR_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_43"} {:fieldname "Port"} Port_unnamed_tag_43(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.PowerCodeLockHandle__FDO_DATA"} {:fieldname "PowerCodeLockHandle"} PowerCodeLockHandle__FDO_DATA(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerSaveDisableEnableLock"} PowerSaveDisableEnableLock__FDO_DATA(x: int) : int
{
  x + 908
}

function {:inline true} {:fieldmap "Mem_T.PowerStateCallbackObject__FDO_DATA"} {:fieldname "PowerStateCallbackObject"} PowerStateCallbackObject__FDO_DATA(x: int) : int
{
  x + 1636
}

function {:inline true} {:fieldmap "Mem_T.PowerStateCallbackRegistrationHandle__FDO_DATA"} {:fieldname "PowerStateCallbackRegistrationHandle"} PowerStateCallbackRegistrationHandle__FDO_DATA(x: int) : int
{
  x + 1640
}

function {:inline true} {:fieldmap "Mem_T.PowerState_unnamed_tag_37"} {:fieldname "PowerState"} PowerState_unnamed_tag_37(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.PrevHwTcb__MP_TCB"} {:fieldname "PrevHwTcb"} PrevHwTcb__MP_TCB(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.PreviousPnPState__FDO_DATA"} {:fieldname "PreviousPnPState"} PreviousPnPState__FDO_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Priority__NDIS_PM_PACKET_PATTERN"} {:fieldname "Priority"} Priority__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PutDmaAdapter__DMA_OPERATIONS"} {:fieldname "PutDmaAdapter"} PutDmaAdapter__DMA_OPERATIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PutScatterGatherList__DMA_OPERATIONS"} {:fieldname "PutScatterGatherList"} PutScatterGatherList__DMA_OPERATIONS(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryInterface_unnamed_tag_8"} {:fieldname "QueryInterface"} QueryInterface_unnamed_tag_8(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.QueryRequest__FDO_DATA"} {:fieldname "QueryRequest"} QueryRequest__FDO_DATA(x: int) : int
{
  x + 3588
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.QueueLock__FDO_DATA"} {:fieldname "QueueLock"} QueueLock__FDO_DATA(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.QueueState__FDO_DATA"} {:fieldname "QueueState"} QueueState__FDO_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.RcvAlignmentErrors__ERR_COUNT_STRUC"} {:fieldname "RcvAlignmentErrors"} RcvAlignmentErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.RcvAlignmentErrors__FDO_DATA"} {:fieldname "RcvAlignmentErrors"} RcvAlignmentErrors__FDO_DATA(x: int) : int
{
  x + 3648
}

function {:inline true} {:fieldmap "Mem_T.RcvCdtErrors__ERR_COUNT_STRUC"} {:fieldname "RcvCdtErrors"} RcvCdtErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.RcvCdtFrames__FDO_DATA"} {:fieldname "RcvCdtFrames"} RcvCdtFrames__FDO_DATA(x: int) : int
{
  x + 3660
}

function {:inline true} {:fieldmap "Mem_T.RcvCrcErrors__ERR_COUNT_STRUC"} {:fieldname "RcvCrcErrors"} RcvCrcErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.RcvCrcErrors__FDO_DATA"} {:fieldname "RcvCrcErrors"} RcvCrcErrors__FDO_DATA(x: int) : int
{
  x + 3644
}

function {:inline true} {:fieldmap "Mem_T.RcvDmaOverrunErrors__FDO_DATA"} {:fieldname "RcvDmaOverrunErrors"} RcvDmaOverrunErrors__FDO_DATA(x: int) : int
{
  x + 3656
}

function {:inline true} {:fieldmap "Mem_T.RcvGoodFrames__ERR_COUNT_STRUC"} {:fieldname "RcvGoodFrames"} RcvGoodFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.RcvLock__FDO_DATA"} {:fieldname "RcvLock"} RcvLock__FDO_DATA(x: int) : int
{
  x + 2192
}

function {:inline true} {:fieldmap "Mem_T.RcvOverrunErrors__ERR_COUNT_STRUC"} {:fieldname "RcvOverrunErrors"} RcvOverrunErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.RcvResourceErrors__ERR_COUNT_STRUC"} {:fieldname "RcvResourceErrors"} RcvResourceErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.RcvResourceErrors__FDO_DATA"} {:fieldname "RcvResourceErrors"} RcvResourceErrors__FDO_DATA(x: int) : int
{
  x + 3652
}

function {:inline true} {:fieldmap "Mem_T.RcvRuntErrors__FDO_DATA"} {:fieldname "RcvRuntErrors"} RcvRuntErrors__FDO_DATA(x: int) : int
{
  x + 3664
}

function {:inline true} {:fieldmap "Mem_T.RcvShortFrames__ERR_COUNT_STRUC"} {:fieldname "RcvShortFrames"} RcvShortFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.ReadPort__FDO_DATA"} {:fieldname "ReadPort"} ReadPort__FDO_DATA(x: int) : int
{
  x + 1892
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "RecvList"} RecvList__FDO_DATA(x: int) : int
{
  x + 2144
}

function {:inline true} {:fieldmap "Mem_T._NPAGED_LOOKASIDE_LIST"} {:fieldname "RecvLookaside"} RecvLookaside__FDO_DATA(x: int) : int
{
  x + 2196
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "RecvQueueHead"} RecvQueueHead__FDO_DATA(x: int) : int
{
  x + 2180
}

function {:inline true} {:fieldmap "Mem_T.RecvQueueLock__FDO_DATA"} {:fieldname "RecvQueueLock"} RecvQueueLock__FDO_DATA(x: int) : int
{
  x + 2188
}

function {:inline true} {:fieldmap "Mem_T.RegistryPath__GLOBALS"} {:fieldname "RegistryPath"} RegistryPath__GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "RemoveEvent"} RemoveEvent__FDO_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.Res1__MP_PMCSR"} {:fieldname "Res1"} Res1__MP_PMCSR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Res__MP_PMCSR"} {:fieldname "Res"} Res__MP_PMCSR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ResumeWait__FDO_DATA"} {:fieldname "ResumeWait"} ResumeWait__FDO_DATA(x: int) : int
{
  x + 2140
}

function {:inline true} {:fieldmap "Mem_T.RevisionID__PCI_COMMON_CONFIG"} {:fieldname "RevisionID"} RevisionID__PCI_COMMON_CONFIG(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.RevsionID__FDO_DATA"} {:fieldname "RevsionID"} RevsionID__FDO_DATA(x: int) : int
{
  x + 1784
}

function {:inline true} {:fieldmap "Mem_T.RfdActualCount__RFD_STRUC"} {:fieldname "RfdActualCount"} RfdActualCount__RFD_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.RfdBuffer__RFD_STRUC"} {:fieldname "RfdBuffer"} RfdBuffer__RFD_STRUC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.RfdCbHeader__RFD_STRUC"} {:fieldname "RfdCbHeader"} RfdCbHeader__RFD_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RfdRbdPointer__RFD_STRUC"} {:fieldname "RfdRbdPointer"} RfdRbdPointer__RFD_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.RfdShrinkCount__FDO_DATA"} {:fieldname "RfdShrinkCount"} RfdShrinkCount__FDO_DATA(x: int) : int
{
  x + 2176
}

function {:inline true} {:fieldmap "Mem_T.RfdSize__RFD_STRUC"} {:fieldname "RfdSize"} RfdSize__RFD_STRUC(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RunningOnBattery__FDO_DATA"} {:fieldname "RunningOnBattery"} RunningOnBattery__FDO_DATA(x: int) : int
{
  x + 1632
}

function {:inline true} {:fieldmap "Mem_T._ETH_HEADER_STRUC"} {:fieldname "RxMacHeader"} RxMacHeader__ETH_RX_BUFFER_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._NPAGED_LOOKASIDE_LIST"} {:fieldname "SGListLookasideList"} SGListLookasideList__FDO_DATA(x: int) : int
{
  x + 1928
}

function {:inline true} {:fieldmap "Mem_T.ScatterGatherListSize__FDO_DATA"} {:fieldname "ScatterGatherListSize"} ScatterGatherListSize__FDO_DATA(x: int) : int
{
  x + 1924
}

function {:inline true} {:fieldmap "Mem_T.ScatterGather__DEVICE_DESCRIPTION"} {:fieldname "ScatterGather"} ScatterGather__DEVICE_DESCRIPTION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ScbCommandHigh__CSR_STRUC"} {:fieldname "ScbCommandHigh"} ScbCommandHigh__CSR_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ScbCommandLow__CSR_STRUC"} {:fieldname "ScbCommandLow"} ScbCommandLow__CSR_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ScbGeneralPointer__CSR_STRUC"} {:fieldname "ScbGeneralPointer"} ScbGeneralPointer__CSR_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ScbStatus__CSR_STRUC"} {:fieldname "ScbStatus"} ScbStatus__CSR_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SelfTestPhys__FDO_DATA"} {:fieldname "SelfTestPhys"} SelfTestPhys__FDO_DATA(x: int) : int
{
  x + 3140
}

function {:inline true} {:fieldmap "Mem_T.SelfTest__FDO_DATA"} {:fieldname "SelfTest"} SelfTest__FDO_DATA(x: int) : int
{
  x + 3136
}

function {:inline true} {:fieldmap "Mem_T.Self__FDO_DATA"} {:fieldname "Self"} Self__FDO_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SendLock__FDO_DATA"} {:fieldname "SendLock"} SendLock__FDO_DATA(x: int) : int
{
  x + 2080
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SendQueueHead"} SendQueueHead__FDO_DATA(x: int) : int
{
  x + 2072
}

function {:inline true} {:fieldmap "Mem_T.SetBusData__BUS_INTERFACE_STANDARD"} {:fieldname "SetBusData"} SetBusData__BUS_INTERFACE_STANDARD(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.SetRequest__FDO_DATA"} {:fieldname "SetRequest"} SetRequest__FDO_DATA(x: int) : int
{
  x + 3592
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Setup_unnamed_tag_69"} {:fieldname "Setup"} Setup_unnamed_tag_69(x: int) : int
{
  x + 884
}

function {:inline true} {:fieldmap "Mem_T.ShutdownType_unnamed_tag_39"} {:fieldname "ShutdownType"} ShutdownType_unnamed_tag_39(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Signature__DRIVE_LAYOUT_INFORMATION_MBR"} {:fieldname "Signature"} Signature__DRIVE_LAYOUT_INFORMATION_MBR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Signature"} Signature__MP_WAKE_PATTERN(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Size__DEVICE_CAPABILITIES"} {:fieldname "Size"} Size__DEVICE_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.Size_unnamed_tag_29"} {:fieldname "Size"} Size_unnamed_tag_29(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SpeedDuplex"} SpeedDuplex__FDO_DATA(x: int) : int
{
  x + 1780
}

function {:inline true} {:fieldmap "Mem_T.StResults__SELF_TEST_STRUC"} {:fieldname "StResults"} StResults__SELF_TEST_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.StSignature__SELF_TEST_STRUC"} {:fieldname "StSignature"} StSignature__SELF_TEST_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_44"} {:fieldname "Start"} Start_unnamed_tag_44(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatsCounterPhys__FDO_DATA"} {:fieldname "StatsCounterPhys"} StatsCounterPhys__FDO_DATA(x: int) : int
{
  x + 3164
}

function {:inline true} {:fieldmap "Mem_T.StatsCounters__FDO_DATA"} {:fieldname "StatsCounters"} StatsCounters__FDO_DATA(x: int) : int
{
  x + 3160
}

function {:inline true} {:fieldmap "Mem_T.StatusBufferLength__NDISPROT_INDICATE_STATUS"} {:fieldname "StatusBufferLength"} StatusBufferLength__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.StatusBufferOffset__NDISPROT_INDICATE_STATUS"} {:fieldname "StatusBufferOffset"} StatusBufferOffset__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.StatusIndicationIrp__FDO_DATA"} {:fieldname "StatusIndicationIrp"} StatusIndicationIrp__FDO_DATA(x: int) : int
{
  x + 3596
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StdDeviceData__FDO_DATA"} {:fieldname "StdDeviceData"} StdDeviceData__FDO_DATA(x: int) : int
{
  x + 1676
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "StopEvent"} StopEvent__FDO_DATA(x: int) : int
{
  x + 208
}

function {:inline true} {:fieldmap "Mem_T.SubSystemID__FDO_DATA"} {:fieldname "SubSystemID"} SubSystemID__FDO_DATA(x: int) : int
{
  x + 1792
}

function {:inline true} {:fieldmap "Mem_T.SubSystemID__PCI_HEADER_TYPE_0"} {:fieldname "SubSystemID"} SubSystemID__PCI_HEADER_TYPE_0(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.SubVendorID__FDO_DATA"} {:fieldname "SubVendorID"} SubVendorID__FDO_DATA(x: int) : int
{
  x + 1788
}

function {:inline true} {:fieldmap "Mem_T.SubVendorID__PCI_HEADER_TYPE_0"} {:fieldname "SubVendorID"} SubVendorID__PCI_HEADER_TYPE_0(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_1"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_1(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemPowerState__FDO_DATA"} {:fieldname "SystemPowerState"} SystemPowerState__FDO_DATA(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.TbdBufferAddress__TBD_STRUC"} {:fieldname "TbdBufferAddress"} TbdBufferAddress__TBD_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TbdCount__TBD_STRUC"} {:fieldname "TbdCount"} TbdCount__TBD_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TotalFrees__GENERAL_LOOKASIDE"} {:fieldname "TotalFrees"} TotalFrees__GENERAL_LOOKASIDE(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.TotalRetries__FDO_DATA"} {:fieldname "TotalRetries"} TotalRetries__FDO_DATA(x: int) : int
{
  x + 3640
}

function {:inline true} {:fieldmap "Mem_T.TransmitIdle__FDO_DATA"} {:fieldname "TransmitIdle"} TransmitIdle__FDO_DATA(x: int) : int
{
  x + 2136
}

function {:inline true} {:fieldmap "Mem_T.TxAbortExcessCollisions__FDO_DATA"} {:fieldname "TxAbortExcessCollisions"} TxAbortExcessCollisions__FDO_DATA(x: int) : int
{
  x + 3612
}

function {:inline true} {:fieldmap "Mem_T.TxCbCount__GENERIC_TxCB"} {:fieldname "TxCbCount"} TxCbCount__GENERIC_TxCB(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.TxCbHeader__GENERIC_TxCB"} {:fieldname "TxCbHeader"} TxCbHeader__GENERIC_TxCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TxCbTbdNumber__GENERIC_TxCB"} {:fieldname "TxCbTbdNumber"} TxCbTbdNumber__GENERIC_TxCB(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.TxCbTbdPointer__GENERIC_TxCB"} {:fieldname "TxCbTbdPointer"} TxCbTbdPointer__GENERIC_TxCB(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.TxCbThreshold__GENERIC_TxCB"} {:fieldname "TxCbThreshold"} TxCbThreshold__GENERIC_TxCB(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.TxDmaUnderrun__FDO_DATA"} {:fieldname "TxDmaUnderrun"} TxDmaUnderrun__FDO_DATA(x: int) : int
{
  x + 3620
}

function {:inline true} {:fieldmap "Mem_T.TxLateCollisions__FDO_DATA"} {:fieldname "TxLateCollisions"} TxLateCollisions__FDO_DATA(x: int) : int
{
  x + 3616
}

function {:inline true} {:fieldmap "Mem_T.TxLostCRS__FDO_DATA"} {:fieldname "TxLostCRS"} TxLostCRS__FDO_DATA(x: int) : int
{
  x + 3624
}

function {:inline true} {:fieldmap "Mem_T.TxOKButDeferred__FDO_DATA"} {:fieldname "TxOKButDeferred"} TxOKButDeferred__FDO_DATA(x: int) : int
{
  x + 3628
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UINumber__DEVICE_CAPABILITIES"} {:fieldname "UINumber"} UINumber__DEVICE_CAPABILITIES(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.UnInteresting__MP_PM_CAP_REG"} {:fieldname "UnInteresting"} UnInteresting__MP_PM_CAP_REG(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.UnderlyingPDO__FDO_DATA"} {:fieldname "UnderlyingPDO"} UnderlyingPDO__FDO_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_45"} {:fieldname "Vector"} Vector_unnamed_tag_45(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.VendorID__PCI_COMMON_CONFIG"} {:fieldname "VendorID"} VendorID__PCI_COMMON_CONFIG(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Version__DEVICE_CAPABILITIES"} {:fieldname "Version"} Version__DEVICE_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version__DEVICE_DESCRIPTION"} {:fieldname "Version"} Version__DEVICE_DESCRIPTION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Version_unnamed_tag_29"} {:fieldname "Version"} Version_unnamed_tag_29(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.WaitWake_unnamed_tag_8"} {:fieldname "WaitWake"} WaitWake_unnamed_tag_8(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WakeCompletedEvent"} WakeCompletedEvent__FDO_DATA(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WakeDisableEnableLock"} WakeDisableEnableLock__FDO_DATA(x: int) : int
{
  x + 740
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD0__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD0"} WakeFromD0__DEVICE_CAPABILITIES(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD1__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD1"} WakeFromD1__DEVICE_CAPABILITIES(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD2__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD2"} WakeFromD2__DEVICE_CAPABILITIES(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD3__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD3"} WakeFromD3__DEVICE_CAPABILITIES(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.WakeIrp__FDO_DATA"} {:fieldname "WakeIrp"} WakeIrp__FDO_DATA(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.WakeState__FDO_DATA"} {:fieldname "WakeState"} WakeState__FDO_DATA(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.WakeUpCapabilities__NDIS_PNP_CAPABILITIES"} {:fieldname "WakeUpCapabilities"} WakeUpCapabilities__NDIS_PNP_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "WatchDogTimerDpc"} WatchDogTimerDpc__FDO_DATA(x: int) : int
{
  x + 3184
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WatchDogTimerEvent"} WatchDogTimerEvent__FDO_DATA(x: int) : int
{
  x + 3420
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WmiLibInfo__FDO_DATA"} {:fieldname "WmiLibInfo"} WmiLibInfo__FDO_DATA(x: int) : int
{
  x + 1644
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__IO_WORKITEM"} {:fieldname "WorkItem"} WorkItem__IO_WORKITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__WORKER_ITEM_CONTEXT"} {:fieldname "WorkItem"} WorkItem__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WritePort__FDO_DATA"} {:fieldname "WritePort"} WritePort__FDO_DATA(x: int) : int
{
  x + 1896
}

function {:inline true} {:fieldmap "Mem_T.XmtDeferred__ERR_COUNT_STRUC"} {:fieldname "XmtDeferred"} XmtDeferred__ERR_COUNT_STRUC(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XmtGoodFrames__ERR_COUNT_STRUC"} {:fieldname "XmtGoodFrames"} XmtGoodFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.XmtLateCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtLateCollisions"} XmtLateCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XmtLostCRS__ERR_COUNT_STRUC"} {:fieldname "XmtLostCRS"} XmtLostCRS__ERR_COUNT_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XmtMaxCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtMaxCollisions"} XmtMaxCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.XmtMultCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtMultCollisions"} XmtMultCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XmtSingleCollision__ERR_COUNT_STRUC"} {:fieldname "XmtSingleCollision"} XmtSingleCollision__ERR_COUNT_STRUC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XmtTotalCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtTotalCollisions"} XmtTotalCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.XmtUnderruns__ERR_COUNT_STRUC"} {:fieldname "XmtUnderruns"} XmtUnderruns__ERR_COUNT_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.bLinkDetectionWait__FDO_DATA"} {:fieldname "bLinkDetectionWait"} bLinkDetectionWait__FDO_DATA(x: int) : int
{
  x + 3576
}

function {:inline true} {:fieldmap "Mem_T.bLookForLink__FDO_DATA"} {:fieldname "bLookForLink"} bLookForLink__FDO_DATA(x: int) : int
{
  x + 3580
}

function {:inline true} {:fieldmap "Mem_T.bOverrideAddress__FDO_DATA"} {:fieldname "bOverrideAddress"} bOverrideAddress__FDO_DATA(x: int) : int
{
  x + 1736
}

function {:inline true} {:fieldmap "Mem_T.bWakeFromD0__MP_POWER_MGMT"} {:fieldname "bWakeFromD0"} bWakeFromD0__MP_POWER_MGMT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.bWakeFromD1__MP_POWER_MGMT"} {:fieldname "bWakeFromD1"} bWakeFromD1__MP_POWER_MGMT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.bWakeFromD2__MP_POWER_MGMT"} {:fieldname "bWakeFromD2"} bWakeFromD2__MP_POWER_MGMT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.bWakeFromD3Aux__MP_POWER_MGMT"} {:fieldname "bWakeFromD3Aux"} bWakeFromD3Aux__MP_POWER_MGMT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.bWakeFromD3Hot__MP_POWER_MGMT"} {:fieldname "bWakeFromD3Hot"} bWakeFromD3Hot__MP_POWER_MGMT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.fmtid__DEVPROPKEY"} {:fieldname "fmtid"} fmtid__DEVPROPKEY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.nBusySend__FDO_DATA"} {:fieldname "nBusySend"} nBusySend__FDO_DATA(x: int) : int
{
  x + 2060
}

function {:inline true} {:fieldmap "Mem_T.nReadyRecv__FDO_DATA"} {:fieldname "nReadyRecv"} nReadyRecv__FDO_DATA(x: int) : int
{
  x + 2152
}

function {:inline true} {:fieldmap "Mem_T.nWaitSend__FDO_DATA"} {:fieldname "nWaitSend"} nWaitSend__FDO_DATA(x: int) : int
{
  x + 2064
}

function {:inline true} {:fieldmap "Mem_T.pid__DEVPROPKEY"} {:fieldname "pid"} pid__DEVPROPKEY(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.type0_unnamed_tag_70"} {:fieldname "type0"} type0_unnamed_tag_70(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.u__PCI_COMMON_CONFIG"} {:fieldname "u"} u__PCI_COMMON_CONFIG(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.usDuplexMode__FDO_DATA"} {:fieldname "usDuplexMode"} usDuplexMode__FDO_DATA(x: int) : int
{
  x + 2332
}

function {:inline true} {:fieldmap "Mem_T.usLinkSpeed__FDO_DATA"} {:fieldname "usLinkSpeed"} usLinkSpeed__FDO_DATA(x: int) : int
{
  x + 2328
}

const {:string ""} unique strConst__li2bpl157: int;

const {:string "\t ****Completing S0 IRP\n"} unique strConst__li2bpl35: int;

const {:string "\tNo Change in Power state\n"} unique strConst__li2bpl52: int;

const {:string "\tSetting the device state from %s to %s\n"} unique strConst__li2bpl51: int;

const {:string "\tSetting the system state to %s\n"} unique strConst__li2bpl66: int;

const {:string "   Config Block at virt addr %p phys address %x\n"} unique strConst__li2bpl122: int;

const {:string "   Config byte %x = %.2x\n"} unique strConst__li2bpl125: int;

const {:string "   Issuing Configure command\n"} unique strConst__li2bpl121: int;

const {:string "  Config byte %x = %.2x\n"} unique strConst__li2bpl297: int;

const {:string " not"} unique strConst__li2bpl165: int;

const {:string "---> NICAllocRfdWorkItem\n"} unique strConst__li2bpl153: int;

const {:string "---> NICGetDeviceInformation\n"} unique strConst__li2bpl120: int;

const {:string "---> NICHandleRecvInterrupt\n"} unique strConst__li2bpl30: int;

const {:string "---> NICHandleSendInterrupt\n"} unique strConst__li2bpl212: int;

const {:string "---> NICShutdown\n"} unique strConst__li2bpl105: int;

const {:string "---> NICStartRecv\n"} unique strConst__li2bpl31: int;

const {:string "--->PciDrvRead %p\n"} unique strConst__li2bpl233: int;

const {:string "--> ArmForWake\n"} unique strConst__li2bpl168: int;

const {:string "--> DisarmWake\n"} unique strConst__li2bpl174: int;

const {:string "--> HandleQueryOIDRequest\n"} unique strConst__li2bpl299: int;

const {:string "--> HandleSetOIDRequest\n"} unique strConst__li2bpl285: int;

const {:string "--> HwClearAllCounters\n"} unique strConst__li2bpl147: int;

const {:string "--> HwConfigure\n"} unique strConst__li2bpl124: int;

const {:string "--> HwSetupIAAddress\n"} unique strConst__li2bpl108: int;

const {:string "--> HwSoftwareReset\n"} unique strConst__li2bpl109: int;

const {:string "--> MPCalculateE100PatternForFilter\n"} unique strConst__li2bpl2: int;

const {:string "--> MPCreateProgrammableFilter\n"} unique strConst__li2bpl17: int;

const {:string "--> MPIssueScbPoMgmtCommand\n"} unique strConst__li2bpl8: int;

const {:string "--> MPSetUpFilterCB\n"} unique strConst__li2bpl14: int;

const {:string "--> NICAddWakeUpPattern\n"} unique strConst__li2bpl12: int;

const {:string "--> NICAllocAdapterMemory\n"} unique strConst__li2bpl132: int;

const {:string "--> NICDpcForIsr\n"} unique strConst__li2bpl326: int;

const {:string "--> NICFreeAdapterMemory\n"} unique strConst__li2bpl89: int;

const {:string "--> NICFreeBusySendPackets\n"} unique strConst__li2bpl220: int;

const {:string "--> NICFreeQueuedSendPackets\n"} unique strConst__li2bpl196: int;

const {:string "--> NICGetStatsCounters\n"} unique strConst__li2bpl292: int;

const {:string "--> NICInitRecv\n"} unique strConst__li2bpl88: int;

const {:string "--> NICInitSend\n"} unique strConst__li2bpl138: int;

const {:string "--> NICInitializeAdapter\n"} unique strConst__li2bpl140: int;

const {:string "--> NICInterruptHandler\n"} unique strConst__li2bpl323: int;

const {:string "--> NICReadAdapterInfo\n"} unique strConst__li2bpl114: int;

const {:string "--> NICRemoveAllWakeUpPatterns\n"} unique strConst__li2bpl4: int;

const {:string "--> NICRemoveWakeUpPattern\n"} unique strConst__li2bpl10: int;

const {:string "--> NICSelfTest\n"} unique strConst__li2bpl145: int;

const {:string "--> NICSendPacket\n"} unique strConst__li2bpl210: int;

const {:string "--> NICServiceReadIrps\n"} unique strConst__li2bpl25: int;

const {:string "--> NICSetMulticastList\n"} unique strConst__li2bpl286: int;

const {:string "--> NICSetPacketFilter, PacketFilter=%08x\n"} unique strConst__li2bpl295: int;

const {:string "--> NICStartSend\n"} unique strConst__li2bpl214: int;

const {:string "--> NICWritePacket, Irp= %p\n"} unique strConst__li2bpl198: int;

const {:string "--> OID_PNP_ADD_WAKE_UP_PATTERN\n"} unique strConst__li2bpl282: int;

const {:string "--> OID_PNP_ENABLE_WAKE_UP\n"} unique strConst__li2bpl283: int;

const {:string "--> PciDrvDeregisterIdleDetection\n"} unique strConst__li2bpl183: int;

const {:string "--> PciDrvPowerDownDevice\n"} unique strConst__li2bpl182: int;

const {:string "--> PciDrvPowerUpDeviceCallback\n"} unique strConst__li2bpl195: int;

const {:string "--> PciDrvRegisterForIdleDetection\n"} unique strConst__li2bpl192: int;

const {:string "--> PciDrvWrite %p\n"} unique strConst__li2bpl207: int;

const {:string "-->MPSetPowerD0Private\n"} unique strConst__li2bpl15: int;

const {:string "-->MPSetPowerLowPrivate\n"} unique strConst__li2bpl21: int;

const {:string "-->NICFreeDeviceResources\n"} unique strConst__li2bpl135: int;

const {:string "-->NICQueueIoctlIrp\n"} unique strConst__li2bpl236: int;

const {:string "-->PciDrvProcessQueuedRequests\n"} unique strConst__li2bpl238: int;

const {:string "-->PciDrvReadRegistryValue \n"} unique strConst__li2bpl245: int;

const {:string "-->PciDrvReturnResources\n"} unique strConst__li2bpl247: int;

const {:string "-->ndisServiceIndicateStatusIrp\n"} unique strConst__li2bpl290: int;

const {:string "<-- ArmForWake\n"} unique strConst__li2bpl169: int;

const {:string "<-- DisarmWake\n"} unique strConst__li2bpl176: int;

const {:string "<-- HandleSetOIDRequest\n"} unique strConst__li2bpl281: int;

const {:string "<-- HwClearAllCounters, status=%x\n"} unique strConst__li2bpl148: int;

const {:string "<-- HwConfigure, status=%x\n"} unique strConst__li2bpl123: int;

const {:string "<-- HwSetupIAAddress, status=%x\n"} unique strConst__li2bpl107: int;

const {:string "<-- HwSoftwareReset\n"} unique strConst__li2bpl110: int;

const {:string "<-- MPCalculateE100PatternForFilter\n"} unique strConst__li2bpl1: int;

const {:string "<-- MPCreateProgrammableFilter\n"} unique strConst__li2bpl18: int;

const {:string "<-- MPIssueScbPoMgmtCommand %x\n"} unique strConst__li2bpl7: int;

const {:string "<-- MPSetUpFilterCB\n"} unique strConst__li2bpl13: int;

const {:string "<-- NICAddWakeUpPattern\n"} unique strConst__li2bpl11: int;

const {:string "<-- NICAllocAdapterMemory, status=%x\n"} unique strConst__li2bpl131: int;

const {:string "<-- NICDpcForIsr\n"} unique strConst__li2bpl325: int;

const {:string "<-- NICFreeAdapterMemory\n"} unique strConst__li2bpl90: int;

const {:string "<-- NICFreeBusySendPackets\n"} unique strConst__li2bpl221: int;

const {:string "<-- NICFreeQueuedSendPackets\n"} unique strConst__li2bpl197: int;

const {:string "<-- NICGetDeviceInformation\n"} unique strConst__li2bpl119: int;

const {:string "<-- NICGetStatsCounters\n"} unique strConst__li2bpl291: int;

const {:string "<-- NICInitRecv, status=%x\n"} unique strConst__li2bpl87: int;

const {:string "<-- NICInitSend\n"} unique strConst__li2bpl139: int;

const {:string "<-- NICInitializeAdapter, status=%x\n"} unique strConst__li2bpl141: int;

const {:string "<-- NICInterruptHandler\n"} unique strConst__li2bpl322: int;

const {:string "<-- NICReadAdapterInfo, status=%x\n"} unique strConst__li2bpl113: int;

const {:string "<-- NICRemoveAllWakeUpPatterns\n"} unique strConst__li2bpl3: int;

const {:string "<-- NICRemoveWakeUpPattern\n"} unique strConst__li2bpl9: int;

const {:string "<-- NICSelfTest, status=%x\n"} unique strConst__li2bpl144: int;

const {:string "<-- NICSendPacket\n"} unique strConst__li2bpl209: int;

const {:string "<-- NICServiceReadIrps\n"} unique strConst__li2bpl24: int;

const {:string "<-- NICSetMulticastList, status=%x\n"} unique strConst__li2bpl287: int;

const {:string "<-- NICSetPacketFilter, Status=%x\n"} unique strConst__li2bpl293: int;

const {:string "<-- NICStartSend\n"} unique strConst__li2bpl219: int;

const {:string "<-- NICWritePacket\n"} unique strConst__li2bpl199: int;

const {:string "<-- PciDrvDeregisterIdleDetection\n"} unique strConst__li2bpl185: int;

const {:string "<-- PciDrvPowerDownDevice\n"} unique strConst__li2bpl181: int;

const {:string "<-- PciDrvPowerUpDeviceCallback\n"} unique strConst__li2bpl194: int;

const {:string "<-- PciDrvRegisterForIdleDetection\n"} unique strConst__li2bpl193: int;

const {:string "<-- PciDrvWrite %x\n"} unique strConst__li2bpl202: int;

const {:string "<-- Read called %x\n"} unique strConst__li2bpl234: int;

const {:string "<--- NICAllocRfdWorkItem\n"} unique strConst__li2bpl152: int;

const {:string "<--- NICHandleRecvInterrupt\n"} unique strConst__li2bpl29: int;

const {:string "<--- NICHandleSendInterrupt\n"} unique strConst__li2bpl211: int;

const {:string "<--- NICShutdown\n"} unique strConst__li2bpl106: int;

const {:string "<--- NICStartRecv, Status=%x\n"} unique strConst__li2bpl34: int;

const {:string "<--HandleQueryOIDRequest: OID %x, Status %x\n"} unique strConst__li2bpl298: int;

const {:string "<--MPSetPowerD0Private\n"} unique strConst__li2bpl16: int;

const {:string "<--MPSetPowerLowPrivate\n"} unique strConst__li2bpl19: int;

const {:string "<--NICFreeDeviceResources\n"} unique strConst__li2bpl137: int;

const {:string "<--NICQueueIoctlIrp\n"} unique strConst__li2bpl235: int;

const {:string "<--PciDrvProcessQueuedRequests %d\n"} unique strConst__li2bpl237: int;

const {:string "<--PciDrvReadRegistryValue %ws %d \n"} unique strConst__li2bpl246: int;

const {:string "<--PciDrvReturnResources\n"} unique strConst__li2bpl248: int;

const {:string "<--ndisServiceIndicateStatusIrp\n"} unique strConst__li2bpl289: int;

const {:string "Acquiring  PowerSaveDisableEnableLock\n"} unique strConst__li2bpl184: int;

const {:string "AddDevice FDO (0x%p), DevExt (0x%p)\n"} unique strConst__li2bpl232: int;

const {:string "AddDevice PDO (0x%p)\n"} unique strConst__li2bpl229: int;

const {:string "AddDevice: IoRegisterDeviceInterface failed (%x)\n"} unique strConst__li2bpl231: int;

const {:string "AdjustCapabilities  \n"} unique strConst__li2bpl162: int;

const {:string "Adjusted TCB count is %d\n"} unique strConst__li2bpl102: int;

const {:string "BuildScatterGatherList %x\n"} unique strConst__li2bpl206: int;

const {:string "CSRAddress=%p\n"} unique strConst__li2bpl94: int;

const {:string "CU is idle -- First TCB added to Active List\n"} unique strConst__li2bpl216: int;

const {:string "CU suspended. ScbStatus=%04x Issue selective reset\n"} unique strConst__li2bpl321: int;

const {:string "Cleanup called\n"} unique strConst__li2bpl224: int;

const {:string "Close \n"} unique strConst__li2bpl228: int;

const {:string "Command failed\n"} unique strConst__li2bpl304: int;

const {:string "Config Block at virt addr %p, phys address %x\n"} unique strConst__li2bpl296: int;

const {:string "Connected"} unique strConst__li2bpl300: int;

const {:string "Couldn't allocate pool for registry path."} unique strConst__li2bpl239: int;

const {:string "Create \n"} unique strConst__li2bpl244: int;

const {:string "CurrNumRfd=%d\n"} unique strConst__li2bpl149: int;

const {:string "Current Address = %02x-%02x-%02x-%02x-%02x-%02x\n"} unique strConst__li2bpl116: int;

const {:string "DIRP"} unique strConst__li2bpl55: int;

const {:string "Device does%s support power management\n"} unique strConst__li2bpl277: int;

const {:string "Device not ready %p\n"} unique strConst__li2bpl201: int;

const {:string "Disconnected"} unique strConst__li2bpl301: int;

const {:string "EepromAddressSize = %d\n"} unique strConst__li2bpl111: int;

const {:string "Entered DriverEntry of PCIDRV version built on Aug  7 2014 at 02:42:33\n"} unique strConst__li2bpl240: int;

const {:string "Entered PciDrvCallbackHandleDeviceSetPower\n"} unique strConst__li2bpl50: int;

const {:string "Entered PciDrvCompletionDevicePowerUp\n"} unique strConst__li2bpl70: int;

const {:string "Entered PciDrvCompletionOnFinalizedDeviceIrp\n"} unique strConst__li2bpl71: int;

const {:string "Entered PciDrvCompletionOnIdlePowerDownIrp\n"} unique strConst__li2bpl188: int;

const {:string "Entered PciDrvCompletionOnIdlePowerUpIrp\n"} unique strConst__li2bpl186: int;

const {:string "Entered PciDrvCompletionSystemPowerUp\n"} unique strConst__li2bpl72: int;

const {:string "Entered PciDrvDispatchDeviceQueryPower\n"} unique strConst__li2bpl73: int;

const {:string "Entered PciDrvDispatchDeviceSetPower\n"} unique strConst__li2bpl69: int;

const {:string "Entered PciDrvDispatchQueryPowerState\n"} unique strConst__li2bpl53: int;

const {:string "Entered PciDrvDispatchSetPowerState\n"} unique strConst__li2bpl49: int;

const {:string "Entered PciDrvDispatchSystemPowerIrp\n"} unique strConst__li2bpl67: int;

const {:string "Entered PciDrvDispatchWaitWake\n"} unique strConst__li2bpl173: int;

const {:string "Entered PciDrvFinalizeDevicePowerIrp\n"} unique strConst__li2bpl68: int;

const {:string "Entered PciDrvPassiveLevelClearWaitWakeEnableState\n"} unique strConst__li2bpl170: int;

const {:string "Entered PciDrvPassiveLevelReArmCallbackWorker\n"} unique strConst__li2bpl172: int;

const {:string "Entered PciDrvQueueCorrespondingDeviceIrp\n"} unique strConst__li2bpl36: int;

const {:string "Entered PciDrvWriteRegistryValue\n"} unique strConst__li2bpl225: int;

const {:string "Entered WaitWakeIoCompletionRoutine\n"} unique strConst__li2bpl167: int;

const {:string "Entering a deeper sleep state\n"} unique strConst__li2bpl22: int;

const {:string "Entering fully on state\n"} unique strConst__li2bpl23: int;

const {:string "FDO %s\n"} unique strConst__li2bpl74: int;

const {:string "FDO %s \n"} unique strConst__li2bpl222: int;

const {:string "FDO %s %s IRP:0x%p %s %s\n"} unique strConst__li2bpl56: int;

const {:string "Failed to allocate MP_TCB's\n"} unique strConst__li2bpl134: int;

const {:string "Failed to allocate misc memory\n"} unique strConst__li2bpl129: int;

const {:string "Failed to allocate send memory\n"} unique strConst__li2bpl128: int;

const {:string "Failed to create a Callback object status %lx\n"} unique strConst__li2bpl189: int;

const {:string "Failed to register callback\n"} unique strConst__li2bpl190: int;

const {:string "FdoData = %p, CU Not IDLE\n"} unique strConst__li2bpl218: int;

const {:string "Flash memory:(%x:%x) Length:(%d)\n"} unique strConst__li2bpl97: int;

const {:string "GetBusData (NIC_PCI_E100_HDR_LENGTH) failed =%d\n"} unique strConst__li2bpl117: int;

const {:string "GetBusData for PMCSR failed\n"} unique strConst__li2bpl20: int;

const {:string "GetPciBusInterfaceStandard entered.\n"} unique strConst__li2bpl146: int;

const {:string "Good Receives %d\n"} unique strConst__li2bpl306: int;

const {:string "Good Transmits %d\n"} unique strConst__li2bpl305: int;

const {:string "I/O mapped CSR in Memory Space: (%x) Length: (%d)\n"} unique strConst__li2bpl95: int;

const {:string "I/O mapped CSR is not in the right order\n"} unique strConst__li2bpl99: int;

const {:string "I/O mapped CSR: (%x) Length: (%d)\n"} unique strConst__li2bpl103: int;

const {:string "IRP_MN_CANCEL_REMOVE_DEVICE"} unique strConst__li2bpl253: int;

const {:string "IRP_MN_CANCEL_STOP_DEVICE"} unique strConst__li2bpl256: int;

const {:string "IRP_MN_CHANGE_SINGLE_INSTANCE"} unique strConst__li2bpl78: int;

const {:string "IRP_MN_CHANGE_SINGLE_ITEM"} unique strConst__li2bpl79: int;

const {:string "IRP_MN_DEVICE_USAGE_NOTIFICATION"} unique strConst__li2bpl271: int;

const {:string "IRP_MN_DISABLE_COLLECTION"} unique strConst__li2bpl83: int;

const {:string "IRP_MN_DISABLE_EVENTS"} unique strConst__li2bpl81: int;

const {:string "IRP_MN_EJECT"} unique strConst__li2bpl266: int;

const {:string "IRP_MN_ENABLE_COLLECTION"} unique strConst__li2bpl82: int;

const {:string "IRP_MN_ENABLE_EVENTS"} unique strConst__li2bpl80: int;

const {:string "IRP_MN_EXECUTE_METHOD"} unique strConst__li2bpl85: int;

const {:string "IRP_MN_FILTER_RESOURCE_REQUIREMENTS"} unique strConst__li2bpl263: int;

const {:string "IRP_MN_POWER_SEQUENCE"} unique strConst__li2bpl46: int;

const {:string "IRP_MN_QUERY_ALL_DATA"} unique strConst__li2bpl76: int;

const {:string "IRP_MN_QUERY_BUS_INFORMATION"} unique strConst__li2bpl270: int;

const {:string "IRP_MN_QUERY_CAPABILITIES"} unique strConst__li2bpl259: int;

const {:string "IRP_MN_QUERY_DEVICE_RELATIONS"} unique strConst__li2bpl257: int;

const {:string "IRP_MN_QUERY_DEVICE_TEXT"} unique strConst__li2bpl262: int;

const {:string "IRP_MN_QUERY_ID"} unique strConst__li2bpl268: int;

const {:string "IRP_MN_QUERY_INTERFACE"} unique strConst__li2bpl258: int;

const {:string "IRP_MN_QUERY_LEGACY_BUS_INFORMATION"} unique strConst__li2bpl273: int;

const {:string "IRP_MN_QUERY_PNP_DEVICE_STATE"} unique strConst__li2bpl269: int;

const {:string "IRP_MN_QUERY_POWER"} unique strConst__li2bpl48: int;

const {:string "IRP_MN_QUERY_REMOVE_DEVICE"} unique strConst__li2bpl251: int;

const {:string "IRP_MN_QUERY_RESOURCES"} unique strConst__li2bpl260: int;

const {:string "IRP_MN_QUERY_RESOURCE_REQUIREMENTS"} unique strConst__li2bpl261: int;

const {:string "IRP_MN_QUERY_SINGLE_INSTANCE"} unique strConst__li2bpl77: int;

const {:string "IRP_MN_QUERY_STOP_DEVICE"} unique strConst__li2bpl255: int;

const {:string "IRP_MN_READ_CONFIG"} unique strConst__li2bpl264: int;

const {:string "IRP_MN_REGINFO"} unique strConst__li2bpl84: int;

const {:string "IRP_MN_REMOVE_DEVICE"} unique strConst__li2bpl252: int;

const {:string "IRP_MN_SET_LOCK"} unique strConst__li2bpl267: int;

const {:string "IRP_MN_SET_POWER"} unique strConst__li2bpl47: int;

const {:string "IRP_MN_START_DEVICE"} unique strConst__li2bpl250: int;

const {:string "IRP_MN_STOP_DEVICE"} unique strConst__li2bpl254: int;

const {:string "IRP_MN_SURPRISE_REMOVAL"} unique strConst__li2bpl272: int;

const {:string "IRP_MN_WAIT_WAKE"} unique strConst__li2bpl45: int;

const {:string "IRP_MN_WRITE_CONFIG"} unique strConst__li2bpl265: int;

const {:string "Idle detection is%s enabled\n"} unique strConst__li2bpl180: int;

const {:string "Interrupt level: 0x%0x, Vector: 0x%0x, Affinity: 0x%x\n"} unique strConst__li2bpl98: int;

const {:string "IoConnectInterrupt failed %x\n"} unique strConst__li2bpl0: int;

const {:string "IoGetDmaAdapter failed\n"} unique strConst__li2bpl100: int;

const {:string "IoSetDeviceInterfaceState failed: 0x%x\n"} unique strConst__li2bpl223: int;

const {:string "IoWMIRegistrationControl failed (%x)\n"} unique strConst__li2bpl275: int;

const {:string "Ioctl called %p\n"} unique strConst__li2bpl278: int;

const {:string "IsUpperEdgeNdis"} unique strConst__li2bpl155: int;

const {:string "KeSetEvent should only be called at IRQL <= APC_LEVEL when Wait is set to TRUE."} unique strConst__li2bpl328: int;

const {:string "KeSetEvent should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl327: int;

const {:string "KeWaitForMultipleObjects %x"} unique strConst__li2bpl178: int;

const {:string "Late Collisions %d\n"} unique strConst__li2bpl308: int;

const {:string "MC(%d) = %02x-%02x-%02x-%02x-%02x-%02x\n"} unique strConst__li2bpl288: int;

const {:string "MapRegisters Allocated %d\n"} unique strConst__li2bpl104: int;

const {:string "Max Collisions %d\n"} unique strConst__li2bpl307: int;

const {:string "MaxNumRfd = %d\n"} unique strConst__li2bpl130: int;

const {:string "Media state changed to %s\n"} unique strConst__li2bpl302: int;

const {:string "Media state changed to Connected\n"} unique strConst__li2bpl28: int;

const {:string "Memory Resources are not in the right order\n"} unique strConst__li2bpl96: int;

const {:string "Memory mapped CSR:(%x:%x) Length:(%d)\n"} unique strConst__li2bpl92: int;

const {:string "MmMapIoSpace failed\n"} unique strConst__li2bpl93: int;

const {:string "Mult Collision xmits %d\n"} unique strConst__li2bpl313: int;

const {:string "NICAddWakeupPattern failed %x\n"} unique strConst__li2bpl5: int;

const {:string "NICAllocateDeviceResources failed: 0x%x\n"} unique strConst__li2bpl274: int;

const {:string "NICCompleteSendRequest, Pkt= %p Sgl %p\n"} unique strConst__li2bpl200: int;

const {:string "NICHandleSendInterrupt - send a queued packet\n"} unique strConst__li2bpl213: int;

const {:string "NICInitializeDeviceExtension failed (%x)\n"} unique strConst__li2bpl230: int;

const {:string "NICMapHWResources failed: 0x%x\n"} unique strConst__li2bpl86: int;

const {:string "NICRemoveWakeUpPattern failed %x\n"} unique strConst__li2bpl6: int;

const {:string "NICStartSend -- WaitScb returned error\n"} unique strConst__li2bpl217: int;

const {:string "NICStartSend returned error %x\n"} unique strConst__li2bpl208: int;

const {:string "Not enough map registers: Allocated %d, Required %d\n"} unique strConst__li2bpl101: int;

const {:string "NumCoalesce"} unique strConst__li2bpl160: int;

const {:string "NumRfd"} unique strConst__li2bpl154: int;

const {:string "NumRfd = %d\n"} unique strConst__li2bpl133: int;

const {:string "NumTcb"} unique strConst__li2bpl159: int;

const {:string "NumTcb=%d\n"} unique strConst__li2bpl126: int;

const {:string "One Collision xmits %d\n"} unique strConst__li2bpl312: int;

const {:string "Packet needs to be coalesced\n"} unique strConst__li2bpl205: int;

const {:string "Packet size is less than %d\n"} unique strConst__li2bpl204: int;

const {:string "PciDrvDispatchIO called %p\n"} unique strConst__li2bpl226: int;

const {:string "PciDrvGetDeviceCapabilities failed (%x)\n"} unique strConst__li2bpl276: int;

const {:string "PciDrvIoDecrement %d\n"} unique strConst__li2bpl227: int;

const {:string "PciDrvIoIncrement %d\n"} unique strConst__li2bpl279: int;

const {:string "PciDrvWriteRegistryValue failed\n"} unique strConst__li2bpl163: int;

const {:string "Permanent Address = %02x-%02x-%02x-%02x-%02x-%02x\n"} unique strConst__li2bpl115: int;

const {:string "Permanent address is invalid\n"} unique strConst__li2bpl112: int;

const {:string "PowerDeviceD0"} unique strConst__li2bpl39: int;

const {:string "PowerDeviceD1"} unique strConst__li2bpl40: int;

const {:string "PowerDeviceD2"} unique strConst__li2bpl41: int;

const {:string "PowerDeviceD3"} unique strConst__li2bpl42: int;

const {:string "PowerDeviceMaximum"} unique strConst__li2bpl43: int;

const {:string "PowerDeviceUnspecified"} unique strConst__li2bpl38: int;

const {:string "PowerSaveEnabled"} unique strConst__li2bpl179: int;

const {:string "PowerSystemHibernate"} unique strConst__li2bpl63: int;

const {:string "PowerSystemMaximum"} unique strConst__li2bpl65: int;

const {:string "PowerSystemShutdown"} unique strConst__li2bpl64: int;

const {:string "PowerSystemSleeping1"} unique strConst__li2bpl60: int;

const {:string "PowerSystemSleeping2"} unique strConst__li2bpl61: int;

const {:string "PowerSystemSleeping3"} unique strConst__li2bpl62: int;

const {:string "PowerSystemUnspecified"} unique strConst__li2bpl58: int;

const {:string "PowerSystemWorking"} unique strConst__li2bpl59: int;

const {:string "Queuing Requests\n"} unique strConst__li2bpl243: int;

const {:string "Re-Issuing Configure command for filter change\n"} unique strConst__li2bpl294: int;

const {:string "Re-start receive unit...\n"} unique strConst__li2bpl32: int;

const {:string "Receive Alignment errors %d\n"} unique strConst__li2bpl316: int;

const {:string "Receive CDT errors %d\n"} unique strConst__li2bpl319: int;

const {:string "Receive CRC errors %d\n"} unique strConst__li2bpl315: int;

const {:string "Receive failure = %x\n"} unique strConst__li2bpl27: int;

const {:string "Receive no resources %d\n"} unique strConst__li2bpl317: int;

const {:string "Receive overrun errors %d\n"} unique strConst__li2bpl318: int;

const {:string "Receive short frames %d\n"} unique strConst__li2bpl320: int;

const {:string "Receive unit already active\n"} unique strConst__li2bpl33: int;

const {:string "Recv: AllocateCommonBuffer failed\n"} unique strConst__li2bpl151: int;

const {:string "Recv: NICAllocRfd failed %x\n"} unique strConst__li2bpl150: int;

const {:string "Requesting DPC\n"} unique strConst__li2bpl324: int;

const {:string "RtlUlongMult failed 0x%x\n"} unique strConst__li2bpl127: int;

const {:string "SET Power: Hardware error !!!\n"} unique strConst__li2bpl284: int;

const {:string "SIRP"} unique strConst__li2bpl54: int;

const {:string "SelfTest=%p, SelfTestPhys=%x\n"} unique strConst__li2bpl142: int;

const {:string "Set Idle timer\n"} unique strConst__li2bpl187: int;

const {:string "Shrink... CurrNumRfd = %d\n"} unique strConst__li2bpl26: int;

const {:string "SpeedDuplex"} unique strConst__li2bpl161: int;

const {:string "StSignature=%x, StResults=%x\n"} unique strConst__li2bpl143: int;

const {:string "Total Collisions %d\n"} unique strConst__li2bpl314: int;

const {:string "Transmit Lost CRS %d\n"} unique strConst__li2bpl310: int;

const {:string "Transmit Underruns %d\n"} unique strConst__li2bpl309: int;

const {:string "Transmits Deferred %d\n"} unique strConst__li2bpl311: int;

const {:string "UnKnown Device Power State"} unique strConst__li2bpl37: int;

const {:string "UnKnown System Power State"} unique strConst__li2bpl57: int;

const {:string "Unhandled resource type (0x%x)\n"} unique strConst__li2bpl91: int;

const {:string "Upper edge is %sNDIS\n"} unique strConst__li2bpl158: int;

const {:string "VendorID/DeviceID don't match - %x/%x\n"} unique strConst__li2bpl118: int;

const {:string "Wait-Wake is%s enabled\n"} unique strConst__li2bpl166: int;

const {:string "WaitScb failed, ScbCommandLow=%x\n"} unique strConst__li2bpl303: int;

const {:string "WaitWakeEnabled"} unique strConst__li2bpl164: int;

const {:string "WaitWakePoCompletionRoutine  \n"} unique strConst__li2bpl171: int;

const {:string "Waiting for pending requests to complete (Remove)...\n"} unique strConst__li2bpl242: int;

const {:string "Waiting for pending requests to complete (Stop)...\n"} unique strConst__li2bpl241: int;

const {:string "Waiting for the previously generated power irp to complete\n"} unique strConst__li2bpl177: int;

const {:string "Waiting for the watchdogtimer to exit..\n"} unique strConst__li2bpl136: int;

const {:string "Zero length buffer %p\n"} unique strConst__li2bpl203: int;

const {:string "\\Callback\\PowerState"} unique strConst__li2bpl191: int;

const {:string "adding TCB to Active chain\n"} unique strConst__li2bpl215: int;

const {:string "callee"} unique strConst__li2bpl280: int;

const {:string "canceling wakeIrp\n"} unique strConst__li2bpl175: int;

const {:string "not "} unique strConst__li2bpl156: int;

const {:string "unknown_pnp_irp"} unique strConst__li2bpl249: int;

const {:string "unknown_power_irp"} unique strConst__li2bpl44: int;

const {:string "unknown_syscontrol_irp"} unique strConst__li2bpl75: int;

const {:allocated} li2bplFunctionConstant1377: int;

axiom li2bplFunctionConstant1377 == 1377;

const {:allocated} li2bplFunctionConstant3726: int;

axiom li2bplFunctionConstant3726 == 3726;

const {:allocated} li2bplFunctionConstant3731: int;

axiom li2bplFunctionConstant3731 == 3731;

const {:allocated} li2bplFunctionConstant5286: int;

axiom li2bplFunctionConstant5286 == 5286;

const {:allocated} li2bplFunctionConstant5291: int;

axiom li2bplFunctionConstant5291 == 5291;

const {:allocated} li2bplFunctionConstant5292: int;

axiom li2bplFunctionConstant5292 == 5292;

const {:allocated} li2bplFunctionConstant5293: int;

axiom li2bplFunctionConstant5293 == 5293;

const {:allocated} li2bplFunctionConstant5295: int;

axiom li2bplFunctionConstant5295 == 5295;

const {:allocated} li2bplFunctionConstant5299: int;

axiom li2bplFunctionConstant5299 == 5299;

const {:allocated} li2bplFunctionConstant5762: int;

axiom li2bplFunctionConstant5762 == 5762;

const {:allocated} li2bplFunctionConstant5764: int;

axiom li2bplFunctionConstant5764 == 5764;

const {:allocated} li2bplFunctionConstant5766: int;

axiom li2bplFunctionConstant5766 == 5766;

const {:allocated} li2bplFunctionConstant5767: int;

axiom li2bplFunctionConstant5767 == 5767;

const {:allocated} li2bplFunctionConstant6233: int;

axiom li2bplFunctionConstant6233 == 6233;

const {:allocated} li2bplFunctionConstant6234: int;

axiom li2bplFunctionConstant6234 == 6234;

const {:allocated} li2bplFunctionConstant6235: int;

axiom li2bplFunctionConstant6235 == 6235;

const {:allocated} li2bplFunctionConstant6237: int;

axiom li2bplFunctionConstant6237 == 6237;

const {:allocated} li2bplFunctionConstant6699: int;

axiom li2bplFunctionConstant6699 == 6699;

const {:allocated} li2bplFunctionConstant6704: int;

axiom li2bplFunctionConstant6704 == 6704;

const {:allocated} li2bplFunctionConstant6706: int;

axiom li2bplFunctionConstant6706 == 6706;

const {:allocated} li2bplFunctionConstant6708: int;

axiom li2bplFunctionConstant6708 == 6708;

const {:allocated} li2bplFunctionConstant6710: int;

axiom li2bplFunctionConstant6710 == 6710;

const {:allocated} li2bplFunctionConstant6711: int;

axiom li2bplFunctionConstant6711 == 6711;

const {:allocated} li2bplFunctionConstant7182: int;

axiom li2bplFunctionConstant7182 == 7182;

const {:allocated} li2bplFunctionConstant7183: int;

axiom li2bplFunctionConstant7183 == 7183;

const {:allocated} li2bplFunctionConstant7184: int;

axiom li2bplFunctionConstant7184 == 7184;

const {:allocated} li2bplFunctionConstant7185: int;

axiom li2bplFunctionConstant7185 == 7185;

const {:allocated} li2bplFunctionConstant7186: int;

axiom li2bplFunctionConstant7186 == 7186;

const {:allocated} li2bplFunctionConstant7187: int;

axiom li2bplFunctionConstant7187 == 7187;

const {:allocated} li2bplFunctionConstant7188: int;

axiom li2bplFunctionConstant7188 == 7188;

const {:allocated} li2bplFunctionConstant7189: int;

axiom li2bplFunctionConstant7189 == 7189;

const {:allocated} li2bplFunctionConstant7190: int;

axiom li2bplFunctionConstant7190 == 7190;

const {:allocated} li2bplFunctionConstant7191: int;

axiom li2bplFunctionConstant7191 == 7191;

const {:allocated} li2bplFunctionConstant7194: int;

axiom li2bplFunctionConstant7194 == 7194;

const {:allocated} li2bplFunctionConstant7198: int;

axiom li2bplFunctionConstant7198 == 7198;

const {:allocated} li2bplFunctionConstant7201: int;

axiom li2bplFunctionConstant7201 == 7201;

const {:allocated} li2bplFunctionConstant7727: int;

axiom li2bplFunctionConstant7727 == 7727;

const {:allocated} li2bplFunctionConstant7729: int;

axiom li2bplFunctionConstant7729 == 7729;

const {:allocated} li2bplFunctionConstant7732: int;

axiom li2bplFunctionConstant7732 == 7732;

const {:allocated} li2bplFunctionConstant903: int;

axiom li2bplFunctionConstant903 == 903;

const {:allocated} li2bplFunctionConstant905: int;

axiom li2bplFunctionConstant905 == 905;

const {:allocated} li2bplFunctionConstant906: int;

axiom li2bplFunctionConstant906 == 906;

const {:allocated} li2bplFunctionConstant907: int;

axiom li2bplFunctionConstant907 == 907;

const {:allocated} li2bplFunctionConstant908: int;

axiom li2bplFunctionConstant908 == 908;

const {:allocated} li2bplFunctionConstant909: int;

axiom li2bplFunctionConstant909 == 909;

const {:allocated} li2bplFunctionConstant910: int;

axiom li2bplFunctionConstant910 == 910;

const {:allocated} li2bplFunctionConstant911: int;

axiom li2bplFunctionConstant911 == 911;

implementation {:origName "MPSetPowerD0"} MPSetPowerD0#0(actual_FdoData: int) returns (Tmp_3: int)
{
  var {:pointer} Tmp_4: int;
  var {:scalar} oldIrql: int;
  var {:scalar} DueTime_1: int;
  var {:pointer} Tmp_5: int;
  var {:scalar} status: int;
  var {:pointer} FdoData: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;

  anon0:
    call {:si_unique_call 2135} DueTime_1 := __HAVOC_malloc(20);
    FdoData := actual_FdoData;
    call {:si_unique_call 2136} Tmp_5 := __HAVOC_malloc(120);
    call {:si_unique_call 2137} vslice_dummy_var_228 := MPSetPowerD0Private(FdoData);
    call {:si_unique_call 2138} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    Mem_T.INT4[Tmp_4] := oldIrql;
    call {:si_unique_call 2139} sdv_KeAcquireSpinLock(0, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    oldIrql := Mem_T.INT4[Tmp_4];
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_67;
    call {:si_unique_call 2140} status := NICSetPacketFilter(FdoData, vslice_dummy_var_67);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status != 0;
    goto L18;

  L18:
    call {:si_unique_call 2141} sdv_KeReleaseSpinLock(0, oldIrql);
    call {:si_unique_call 2142} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    Mem_T.INT4[Tmp_4] := oldIrql;
    call {:si_unique_call 2143} sdv_KeRaiseIrql(2, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    oldIrql := Mem_T.INT4[Tmp_4];
    call {:si_unique_call 2144} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2145} status := NICSetMulticastList(FdoData);
    call {:si_unique_call 2146} vslice_dummy_var_229 := NICStartRecv#0(FdoData);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2147} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2148} sdv_KeLowerIrql(oldIrql);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 2149} KeClearEvent(WatchDogTimerEvent__FDO_DATA(FdoData));
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    call {:si_unique_call 2150} vslice_dummy_var_231 := KeSetTimer(0, DueTime_1, 0);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 2151} vslice_dummy_var_230 := NICEnableInterrupt(FdoData);
    goto L54;

  L54:
    Tmp_3 := status;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_68;
    havoc vslice_dummy_var_69;
    havoc vslice_dummy_var_70;
    havoc vslice_dummy_var_71;
    havoc vslice_dummy_var_72;
    call {:si_unique_call 2152} status := IoConnectInterrupt#0(Interrupt__FDO_DATA(FdoData), li2bplFunctionConstant909, FdoData, 0, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, 1, vslice_dummy_var_72, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status >= 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 2153} vslice_dummy_var_232 := NICEnableInterrupt(FdoData);
    goto L54;

  anon13_Then:
    assume {:partition} 0 > status;
    Tmp_5 := strConst__li2bpl0;
    call {:si_unique_call 2154} DebugPrint(2, 1, Tmp_5);
    goto L54;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} status == 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto L18;
}



procedure {:origName "MPSetPowerD0"} MPSetPowerD0#0(actual_FdoData: int) returns (Tmp_3: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetPowerD0"} MPSetPowerD0#1(actual_FdoData: int) returns (Tmp_3: int)
{
  var {:pointer} Tmp_4: int;
  var {:scalar} oldIrql: int;
  var {:scalar} DueTime_1: int;
  var {:pointer} Tmp_5: int;
  var {:scalar} status: int;
  var {:pointer} FdoData: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;

  anon0:
    call {:si_unique_call 2155} DueTime_1 := __HAVOC_malloc(20);
    FdoData := actual_FdoData;
    call {:si_unique_call 2156} Tmp_5 := __HAVOC_malloc(120);
    call {:si_unique_call 2157} vslice_dummy_var_233 := MPSetPowerD0Private(FdoData);
    call {:si_unique_call 2158} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    Mem_T.INT4[Tmp_4] := oldIrql;
    call {:si_unique_call 2159} sdv_KeAcquireSpinLock(0, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    oldIrql := Mem_T.INT4[Tmp_4];
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_73;
    call {:si_unique_call 2160} status := NICSetPacketFilter(FdoData, vslice_dummy_var_73);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status != 0;
    goto L18;

  L18:
    call {:si_unique_call 2161} sdv_KeReleaseSpinLock(0, oldIrql);
    call {:si_unique_call 2162} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    Mem_T.INT4[Tmp_4] := oldIrql;
    call {:si_unique_call 2163} sdv_KeRaiseIrql(2, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    oldIrql := Mem_T.INT4[Tmp_4];
    call {:si_unique_call 2164} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2165} status := NICSetMulticastList(FdoData);
    call {:si_unique_call 2166} vslice_dummy_var_234 := NICStartRecv#1(FdoData);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2167} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2168} sdv_KeLowerIrql(oldIrql);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 2169} KeClearEvent(WatchDogTimerEvent__FDO_DATA(FdoData));
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    call {:si_unique_call 2170} vslice_dummy_var_236 := KeSetTimer(0, DueTime_1, 0);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 2171} vslice_dummy_var_235 := NICEnableInterrupt(FdoData);
    goto L54;

  L54:
    Tmp_3 := status;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_74;
    havoc vslice_dummy_var_75;
    havoc vslice_dummy_var_76;
    havoc vslice_dummy_var_77;
    havoc vslice_dummy_var_78;
    call {:si_unique_call 2172} status := IoConnectInterrupt#1(Interrupt__FDO_DATA(FdoData), li2bplFunctionConstant909, FdoData, 0, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, 1, vslice_dummy_var_78, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status >= 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 2173} vslice_dummy_var_237 := NICEnableInterrupt(FdoData);
    goto L54;

  anon13_Then:
    assume {:partition} 0 > status;
    Tmp_5 := strConst__li2bpl0;
    call {:si_unique_call 2174} DebugPrint(2, 1, Tmp_5);
    goto L54;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} status == 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto L18;
}



procedure {:origName "MPSetPowerD0"} MPSetPowerD0#1(actual_FdoData: int) returns (Tmp_3: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICStartRecv"} NICStartRecv#0(actual_FdoData_23: int) returns (Tmp_139: int)
{
  var {:scalar} Tmp_140: int;
  var {:pointer} Tmp_141: int;
  var {:pointer} Tmp_142: int;
  var {:pointer} Tmp_143: int;
  var {:scalar} sdv_70: int;
  var {:pointer} pMpRfd_3: int;
  var {:pointer} Tmp_144: int;
  var {:pointer} Tmp_145: int;
  var {:pointer} Tmp_146: int;
  var {:scalar} sdv_72: int;
  var {:pointer} Tmp_148: int;
  var {:scalar} status_13: int;
  var {:pointer} Tmp_149: int;
  var {:pointer} Tmp_150: int;
  var {:pointer} FdoData_23: int;

  anon0:
    FdoData_23 := actual_FdoData_23;
    call {:si_unique_call 2175} Tmp_141 := __HAVOC_malloc(120);
    call {:si_unique_call 2176} Tmp_142 := __HAVOC_malloc(76);
    call {:si_unique_call 2177} Tmp_145 := __HAVOC_malloc(104);
    call {:si_unique_call 2178} Tmp_146 := __HAVOC_malloc(116);
    Tmp_142 := strConst__li2bpl31;
    call {:si_unique_call 2179} DebugPrint(5, 128, Tmp_142);
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    havoc Tmp_144;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    havoc Tmp_140;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Tmp_140 == 16;
    Tmp_146 := strConst__li2bpl33;
    call {:si_unique_call 2180} DebugPrint(6, 128, Tmp_146);
    Tmp_139 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} Tmp_140 != 16;
    Tmp_145 := strConst__li2bpl32;
    call {:si_unique_call 2181} DebugPrint(6, 128, Tmp_145);
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_148 := RecvList__FDO_DATA(FdoData_23);
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    havoc pMpRfd_3;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    havoc Tmp_149;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(Tmp_149))] != 0;
    call {:si_unique_call 2182} NICHandleRecvInterrupt#0(FdoData_23);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_150 := RecvList__FDO_DATA(FdoData_23);
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    havoc pMpRfd_3;
    goto L19;

  L19:
    call {:si_unique_call 2183} sdv_70 := WaitScb(FdoData_23);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_70 != 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    status_13 := -1073741668;
    goto L32;

  L32:
    Tmp_141 := strConst__li2bpl34;
    call {:si_unique_call 2184} DebugPrint(5, 128, Tmp_141);
    Tmp_139 := status_13;
    goto L1;

  anon16_Then:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    havoc Tmp_143;
    assume {:nonnull} Tmp_143 != 0;
    assume Tmp_143 > 0;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    call {:si_unique_call 2185} status_13 := D100IssueScbCommand(FdoData_23, 1, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_13 == 0;
    call {:si_unique_call 2186} sdv_72 := WaitScb(FdoData_23);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_72 == 0;
    status_13 := -1073741668;
    goto L32;

  anon18_Then:
    assume {:partition} sdv_72 != 0;
    goto L32;

  anon17_Then:
    assume {:partition} status_13 != 0;
    goto L32;

  anon15_Then:
    assume {:partition} sdv_70 == 0;
    status_13 := -1073741668;
    goto L32;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(Tmp_149))] == 0;
    goto L19;
}



procedure {:origName "NICStartRecv"} NICStartRecv#0(actual_FdoData_23: int) returns (Tmp_139: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICStartRecv"} NICStartRecv#1(actual_FdoData_23: int) returns (Tmp_139: int)
{
  var {:scalar} Tmp_140: int;
  var {:pointer} Tmp_141: int;
  var {:pointer} Tmp_142: int;
  var {:pointer} Tmp_143: int;
  var {:scalar} sdv_70: int;
  var {:pointer} pMpRfd_3: int;
  var {:pointer} Tmp_144: int;
  var {:pointer} Tmp_145: int;
  var {:pointer} Tmp_146: int;
  var {:scalar} sdv_72: int;
  var {:pointer} Tmp_148: int;
  var {:scalar} status_13: int;
  var {:pointer} Tmp_149: int;
  var {:pointer} Tmp_150: int;
  var {:pointer} FdoData_23: int;

  anon0:
    FdoData_23 := actual_FdoData_23;
    call {:si_unique_call 2187} Tmp_141 := __HAVOC_malloc(120);
    call {:si_unique_call 2188} Tmp_142 := __HAVOC_malloc(76);
    call {:si_unique_call 2189} Tmp_145 := __HAVOC_malloc(104);
    call {:si_unique_call 2190} Tmp_146 := __HAVOC_malloc(116);
    Tmp_142 := strConst__li2bpl31;
    call {:si_unique_call 2191} DebugPrint(5, 128, Tmp_142);
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    havoc Tmp_144;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    havoc Tmp_140;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Tmp_140 == 16;
    Tmp_146 := strConst__li2bpl33;
    call {:si_unique_call 2192} DebugPrint(6, 128, Tmp_146);
    Tmp_139 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} Tmp_140 != 16;
    Tmp_145 := strConst__li2bpl32;
    call {:si_unique_call 2193} DebugPrint(6, 128, Tmp_145);
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_148 := RecvList__FDO_DATA(FdoData_23);
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    havoc pMpRfd_3;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    havoc Tmp_149;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(Tmp_149))] != 0;
    call {:si_unique_call 2194} NICHandleRecvInterrupt#1(FdoData_23);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_150 := RecvList__FDO_DATA(FdoData_23);
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    havoc pMpRfd_3;
    goto L19;

  L19:
    call {:si_unique_call 2195} sdv_70 := WaitScb(FdoData_23);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_70 != 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    status_13 := -1073741668;
    goto L32;

  L32:
    Tmp_141 := strConst__li2bpl34;
    call {:si_unique_call 2196} DebugPrint(5, 128, Tmp_141);
    Tmp_139 := status_13;
    goto L1;

  anon16_Then:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    havoc Tmp_143;
    assume {:nonnull} Tmp_143 != 0;
    assume Tmp_143 > 0;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    call {:si_unique_call 2197} status_13 := D100IssueScbCommand(FdoData_23, 1, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_13 == 0;
    call {:si_unique_call 2198} sdv_72 := WaitScb(FdoData_23);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_72 == 0;
    status_13 := -1073741668;
    goto L32;

  anon18_Then:
    assume {:partition} sdv_72 != 0;
    goto L32;

  anon17_Then:
    assume {:partition} status_13 != 0;
    goto L32;

  anon15_Then:
    assume {:partition} sdv_70 == 0;
    status_13 := -1073741668;
    goto L32;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(Tmp_149))] == 0;
    goto L19;
}



procedure {:origName "NICStartRecv"} NICStartRecv#1(actual_FdoData_23: int) returns (Tmp_139: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt#0(actual_FdoData_22: int)
{
  var {:scalar} PacketArrayCount_1: int;
  var {:pointer} Tmp_127: int;
  var {:scalar} Tmp_128: int;
  var {:pointer} Tmp_129: int;
  var {:scalar} Tmp_130: int;
  var {:scalar} LoopCount: int;
  var {:scalar} PacketStatus: int;
  var {:scalar} Tmp_131: int;
  var {:scalar} sdv_64: int;
  var {:pointer} pMpRfd_2: int;
  var {:scalar} Tmp_133: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} Tmp_135: int;
  var {:scalar} LoopIndex: int;
  var {:scalar} PacketFreeCount: int;
  var {:scalar} Tmp_136: int;
  var {:pointer} PacketFreeArray: int;
  var {:pointer} PacketArray_1: int;
  var {:pointer} Tmp_137: int;
  var {:scalar} status_12: int;
  var {:scalar} bContinue: int;
  var {:scalar} bAllocNewRfd: int;
  var {:scalar} Index: int;
  var {:pointer} pHwRfd_1: int;
  var {:pointer} FdoData_22: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;

  anon0:
    call {:si_unique_call 2199} vslice_dummy_var_238 := __HAVOC_malloc(4);
    FdoData_22 := actual_FdoData_22;
    call {:si_unique_call 2200} Tmp_127 := __HAVOC_malloc(116);
    call {:si_unique_call 2201} Tmp_129 := __HAVOC_malloc(136);
    call {:si_unique_call 2202} Tmp_134 := __HAVOC_malloc(88);
    call {:si_unique_call 2203} Tmp_135 := __HAVOC_malloc(116);
    call {:si_unique_call 2204} PacketFreeArray := __HAVOC_malloc(80);
    call {:si_unique_call 2205} PacketArray_1 := __HAVOC_malloc(80);
    pMpRfd_2 := 0;
    pHwRfd_1 := 0;
    LoopIndex := 0;
    LoopCount := 52;
    bContinue := 1;
    bAllocNewRfd := 0;
    Tmp_127 := strConst__li2bpl30;
    call {:si_unique_call 2206} DebugPrint(5, 128, Tmp_127);
    goto L24;

  L24:
    call {:si_unique_call 2207} PacketArrayCount_1, Tmp_128, Tmp_129, Tmp_130, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_133, Tmp_134, LoopIndex, PacketFreeCount, Tmp_136, Tmp_137, bContinue, bAllocNewRfd, Index, pHwRfd_1, vslice_dummy_var_239, vslice_dummy_var_242 := NICHandleRecvInterrupt#0_loop_L24(PacketArrayCount_1, Tmp_128, Tmp_129, Tmp_130, LoopCount, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_133, Tmp_134, LoopIndex, PacketFreeCount, Tmp_136, PacketFreeArray, PacketArray_1, Tmp_137, bContinue, bAllocNewRfd, Index, pHwRfd_1, FdoData_22, vslice_dummy_var_239, vslice_dummy_var_242);
    goto L24_last;

  L24_last:
    Tmp_136 := LoopIndex;
    LoopIndex := LoopIndex + 1;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} LoopCount > Tmp_136;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} bContinue != 0;
    PacketArrayCount_1 := 0;
    PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 2208} PacketArrayCount_1, Tmp_128, Tmp_130, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_134, PacketFreeCount, Tmp_137, bAllocNewRfd, pHwRfd_1, vslice_dummy_var_239, vslice_dummy_var_242 := NICHandleRecvInterrupt#0_loop_L29(PacketArrayCount_1, Tmp_128, Tmp_130, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_134, PacketFreeCount, PacketFreeArray, PacketArray_1, Tmp_137, bAllocNewRfd, pHwRfd_1, FdoData_22, vslice_dummy_var_239, vslice_dummy_var_242);
    goto L29_last;

  L29_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 20 > PacketArrayCount_1;
    call {:si_unique_call 2209} sdv_64 := sdv_IsListEmpty(0);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_64 != 0;
    bContinue := 0;
    goto L30;

  L30:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} PacketArrayCount_1 != 0;
    call {:si_unique_call 2210} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2211} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    Tmp_129 := strConst__li2bpl28;
    call {:si_unique_call 2212} DebugPrint(3, 128, Tmp_129);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    call {:si_unique_call 2213} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2214} NICServiceIndicateStatusIrp(FdoData_22);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L108;

  L108:
    call {:si_unique_call 2215} NICServiceReadIrps#0(FdoData_22, PacketArray_1, PacketArrayCount_1);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2216} sdv_KeAcquireSpinLockAtDpcLevel(0);
    Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 2217} pMpRfd_2, Tmp_133, Index := NICHandleRecvInterrupt#0_loop_L115(pMpRfd_2, Tmp_133, PacketFreeCount, PacketFreeArray, Index, FdoData_22);
    goto L115_last;

  L115_last:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} PacketFreeCount > Index;
    Tmp_133 := Index;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 2218} NICReturnRFD(FdoData_22, pMpRfd_2);
    Index := Index + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    assume false;
    return;

  anon52_Then:
    assume {:partition} Index >= PacketFreeCount;
    goto anon52_Then_dummy;

  anon52_Then_dummy:
    assume false;
    return;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    call {:si_unique_call 2219} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon46_Then:
    assume {:partition} PacketArrayCount_1 == 0;
    goto L25;

  L25:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} bAllocNewRfd != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    call {:si_unique_call 2220} vslice_dummy_var_240 := PciDrvIoIncrement(FdoData_22);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume false;
    return;

  anon54_Then:
    goto L122;

  L122:
    Tmp_135 := strConst__li2bpl29;
    call {:si_unique_call 2221} DebugPrint(5, 128, Tmp_135);
    goto LM2;

  anon53_Then:
    goto L122;

  anon43_Then:
    assume {:partition} bAllocNewRfd == 0;
    goto L122;

  anon47_Then:
    assume {:partition} sdv_64 == 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    Tmp_137 := RecvList__FDO_DATA(FdoData_22);
    assume {:nonnull} Tmp_137 != 0;
    assume Tmp_137 > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    havoc pHwRfd_1;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(pHwRfd_1))];
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} BAND(PacketStatus, 32768) != 0;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    havoc Tmp_131;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Tmp_131 == 49152;
    call {:si_unique_call 2222} vslice_dummy_var_239 := sdv_RemoveEntryList(0);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} BAND(PacketStatus, 8192) != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 2223} NICReturnRFD(FdoData_22, pMpRfd_2);
    goto anon49_Else_dummy;

  anon49_Else_dummy:
    assume false;
    return;

  anon49_Then:
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 2224} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto L70;

  L70:
    Tmp_130 := PacketArrayCount_1;
    assume {:nonnull} PacketArray_1 != 0;
    assume PacketArray_1 > 0;
    PacketArrayCount_1 := PacketArrayCount_1 + 1;
    call {:si_unique_call 2225} vslice_dummy_var_242 := PciDrvIoIncrement(FdoData_22);
    goto L70_dummy;

  L70_dummy:
    assume false;
    return;

  anon50_Then:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    Tmp_128 := PacketFreeCount;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    PacketFreeCount := PacketFreeCount + 1;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    bAllocNewRfd := 1;
    goto L70;

  anon48_Then:
    call {:si_unique_call 2226} NICReturnRFD(FdoData_22, pMpRfd_2);
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    assume false;
    return;

  anon63_Then:
    assume {:partition} BAND(PacketStatus, 8192) == 0;
    Tmp_134 := strConst__li2bpl27;
    call {:si_unique_call 2227} DebugPrint(3, 128, Tmp_134);
    call {:si_unique_call 2228} NICReturnRFD(FdoData_22, pMpRfd_2);
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} Tmp_131 != 49152;
    bContinue := 0;
    goto L30;

  anon61_Then:
    assume {:partition} BAND(PacketStatus, 32768) == 0;
    bContinue := 0;
    goto L30;

  anon45_Then:
    assume {:partition} PacketArrayCount_1 >= 20;
    goto L30;

  anon44_Then:
    assume {:partition} bContinue == 0;
    goto L25;

  anon56_Then:
    assume {:partition} Tmp_136 >= LoopCount;
    goto L25;
}



procedure {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt#0(actual_FdoData_22: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt#1(actual_FdoData_22: int)
{
  var {:scalar} PacketArrayCount_1: int;
  var {:pointer} Tmp_127: int;
  var {:scalar} Tmp_128: int;
  var {:pointer} Tmp_129: int;
  var {:scalar} Tmp_130: int;
  var {:scalar} LoopCount: int;
  var {:scalar} PacketStatus: int;
  var {:scalar} Tmp_131: int;
  var {:scalar} sdv_64: int;
  var {:pointer} pMpRfd_2: int;
  var {:scalar} Tmp_133: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} Tmp_135: int;
  var {:scalar} LoopIndex: int;
  var {:scalar} PacketFreeCount: int;
  var {:scalar} Tmp_136: int;
  var {:pointer} PacketFreeArray: int;
  var {:pointer} PacketArray_1: int;
  var {:pointer} Tmp_137: int;
  var {:scalar} status_12: int;
  var {:scalar} bContinue: int;
  var {:scalar} bAllocNewRfd: int;
  var {:scalar} Index: int;
  var {:pointer} pHwRfd_1: int;
  var {:pointer} FdoData_22: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;

  anon0:
    call {:si_unique_call 2229} vslice_dummy_var_243 := __HAVOC_malloc(4);
    FdoData_22 := actual_FdoData_22;
    call {:si_unique_call 2230} Tmp_127 := __HAVOC_malloc(116);
    call {:si_unique_call 2231} Tmp_129 := __HAVOC_malloc(136);
    call {:si_unique_call 2232} Tmp_134 := __HAVOC_malloc(88);
    call {:si_unique_call 2233} Tmp_135 := __HAVOC_malloc(116);
    call {:si_unique_call 2234} PacketFreeArray := __HAVOC_malloc(80);
    call {:si_unique_call 2235} PacketArray_1 := __HAVOC_malloc(80);
    pMpRfd_2 := 0;
    pHwRfd_1 := 0;
    LoopIndex := 0;
    LoopCount := 52;
    bContinue := 1;
    bAllocNewRfd := 0;
    Tmp_127 := strConst__li2bpl30;
    call {:si_unique_call 2236} DebugPrint(5, 128, Tmp_127);
    goto L24;

  L24:
    call {:si_unique_call 2237} PacketArrayCount_1, Tmp_128, Tmp_129, Tmp_130, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_133, Tmp_134, LoopIndex, PacketFreeCount, Tmp_136, Tmp_137, bContinue, bAllocNewRfd, Index, pHwRfd_1, vslice_dummy_var_244, vslice_dummy_var_247 := NICHandleRecvInterrupt#1_loop_L24(PacketArrayCount_1, Tmp_128, Tmp_129, Tmp_130, LoopCount, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_133, Tmp_134, LoopIndex, PacketFreeCount, Tmp_136, PacketFreeArray, PacketArray_1, Tmp_137, bContinue, bAllocNewRfd, Index, pHwRfd_1, FdoData_22, vslice_dummy_var_244, vslice_dummy_var_247);
    goto L24_last;

  L24_last:
    Tmp_136 := LoopIndex;
    LoopIndex := LoopIndex + 1;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} LoopCount > Tmp_136;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} bContinue != 0;
    PacketArrayCount_1 := 0;
    PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 2238} PacketArrayCount_1, Tmp_128, Tmp_130, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_134, PacketFreeCount, Tmp_137, bAllocNewRfd, pHwRfd_1, vslice_dummy_var_244, vslice_dummy_var_247 := NICHandleRecvInterrupt#1_loop_L29(PacketArrayCount_1, Tmp_128, Tmp_130, PacketStatus, Tmp_131, sdv_64, pMpRfd_2, Tmp_134, PacketFreeCount, PacketFreeArray, PacketArray_1, Tmp_137, bAllocNewRfd, pHwRfd_1, FdoData_22, vslice_dummy_var_244, vslice_dummy_var_247);
    goto L29_last;

  L29_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 20 > PacketArrayCount_1;
    call {:si_unique_call 2239} sdv_64 := sdv_IsListEmpty(0);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_64 != 0;
    bContinue := 0;
    goto L30;

  L30:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} PacketArrayCount_1 != 0;
    call {:si_unique_call 2240} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2241} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    Tmp_129 := strConst__li2bpl28;
    call {:si_unique_call 2242} DebugPrint(3, 128, Tmp_129);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    call {:si_unique_call 2243} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2244} NICServiceIndicateStatusIrp(FdoData_22);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L108;

  L108:
    call {:si_unique_call 2245} NICServiceReadIrps#1(FdoData_22, PacketArray_1, PacketArrayCount_1);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2246} sdv_KeAcquireSpinLockAtDpcLevel(0);
    Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 2247} pMpRfd_2, Tmp_133, Index := NICHandleRecvInterrupt#1_loop_L115(pMpRfd_2, Tmp_133, PacketFreeCount, PacketFreeArray, Index, FdoData_22);
    goto L115_last;

  L115_last:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} PacketFreeCount > Index;
    Tmp_133 := Index;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 2248} NICReturnRFD(FdoData_22, pMpRfd_2);
    Index := Index + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    assume false;
    return;

  anon52_Then:
    assume {:partition} Index >= PacketFreeCount;
    goto anon52_Then_dummy;

  anon52_Then_dummy:
    assume false;
    return;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    call {:si_unique_call 2249} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon46_Then:
    assume {:partition} PacketArrayCount_1 == 0;
    goto L25;

  L25:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} bAllocNewRfd != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    call {:si_unique_call 2250} vslice_dummy_var_245 := PciDrvIoIncrement(FdoData_22);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    call {:si_unique_call 2251} status_12 := PciDrvQueuePassiveLevelCallback#0(FdoData_22, li2bplFunctionConstant3726, 0, 0);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_12 < 0;
    call {:si_unique_call 2252} vslice_dummy_var_246 := PciDrvIoDecrement(FdoData_22);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto L122;

  L122:
    Tmp_135 := strConst__li2bpl29;
    call {:si_unique_call 2253} DebugPrint(5, 128, Tmp_135);
    goto LM2;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} 0 <= status_12;
    goto L122;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    goto L122;

  anon53_Then:
    goto L122;

  anon43_Then:
    assume {:partition} bAllocNewRfd == 0;
    goto L122;

  anon47_Then:
    assume {:partition} sdv_64 == 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    Tmp_137 := RecvList__FDO_DATA(FdoData_22);
    assume {:nonnull} Tmp_137 != 0;
    assume Tmp_137 > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    havoc pHwRfd_1;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(pHwRfd_1))];
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} BAND(PacketStatus, 32768) != 0;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    havoc Tmp_131;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Tmp_131 == 49152;
    call {:si_unique_call 2254} vslice_dummy_var_244 := sdv_RemoveEntryList(0);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} BAND(PacketStatus, 8192) != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 2255} NICReturnRFD(FdoData_22, pMpRfd_2);
    goto anon49_Else_dummy;

  anon49_Else_dummy:
    assume false;
    return;

  anon49_Then:
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 2256} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto L70;

  L70:
    Tmp_130 := PacketArrayCount_1;
    assume {:nonnull} PacketArray_1 != 0;
    assume PacketArray_1 > 0;
    PacketArrayCount_1 := PacketArrayCount_1 + 1;
    call {:si_unique_call 2257} vslice_dummy_var_247 := PciDrvIoIncrement(FdoData_22);
    goto L70_dummy;

  L70_dummy:
    assume false;
    return;

  anon50_Then:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    Tmp_128 := PacketFreeCount;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    PacketFreeCount := PacketFreeCount + 1;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    bAllocNewRfd := 1;
    goto L70;

  anon48_Then:
    call {:si_unique_call 2258} NICReturnRFD(FdoData_22, pMpRfd_2);
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    assume false;
    return;

  anon63_Then:
    assume {:partition} BAND(PacketStatus, 8192) == 0;
    Tmp_134 := strConst__li2bpl27;
    call {:si_unique_call 2259} DebugPrint(3, 128, Tmp_134);
    call {:si_unique_call 2260} NICReturnRFD(FdoData_22, pMpRfd_2);
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} Tmp_131 != 49152;
    bContinue := 0;
    goto L30;

  anon61_Then:
    assume {:partition} BAND(PacketStatus, 32768) == 0;
    bContinue := 0;
    goto L30;

  anon45_Then:
    assume {:partition} PacketArrayCount_1 >= 20;
    goto L30;

  anon44_Then:
    assume {:partition} bContinue == 0;
    goto L25;

  anon56_Then:
    assume {:partition} Tmp_136 >= LoopCount;
    goto L25;
}



procedure {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt#1(actual_FdoData_22: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICServiceReadIrps"} NICServiceReadIrps#0(actual_FdoData_20: int, actual_PacketArray: int, actual_PacketArrayCount: int)
{
  var {:scalar} Tmp_117: int;
  var {:scalar} length: int;
  var {:pointer} pMpRfd: int;
  var {:pointer} listEntry: int;
  var {:scalar} sdv_52: int;
  var {:scalar} sdv_53: int;
  var {:pointer} buffer: int;
  var {:pointer} sdv_58: int;
  var {:scalar} index: int;
  var {:scalar} sdv_60: int;
  var {:pointer} Tmp_120: int;
  var {:pointer} Tmp_121: int;
  var {:pointer} irp: int;
  var {:scalar} Tmp_122: int;
  var {:scalar} status_11: int;
  var {:pointer} Tmp_123: int;
  var {:pointer} FdoData_20: int;
  var {:pointer} PacketArray: int;
  var {:scalar} PacketArrayCount: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;

  anon0:
    call {:si_unique_call 2261} vslice_dummy_var_248 := __HAVOC_malloc(4);
    FdoData_20 := actual_FdoData_20;
    PacketArray := actual_PacketArray;
    PacketArrayCount := actual_PacketArrayCount;
    call {:si_unique_call 2262} Tmp_120 := __HAVOC_malloc(96);
    call {:si_unique_call 2263} Tmp_121 := __HAVOC_malloc(96);
    call {:si_unique_call 2264} Tmp_123 := __HAVOC_malloc(108);
    pMpRfd := 0;
    Tmp_121 := strConst__li2bpl25;
    call {:si_unique_call 2265} DebugPrint(5, 128, Tmp_121);
    index := 0;
    goto L15;

  L15:
    call {:si_unique_call 2266} Tmp_117, length, pMpRfd, listEntry, sdv_52, sdv_53, buffer, sdv_58, index, sdv_60, irp, Tmp_122, status_11, vslice_dummy_var_249, vslice_dummy_var_250 := NICServiceReadIrps#0_loop_L15(Tmp_117, length, pMpRfd, listEntry, sdv_52, sdv_53, buffer, sdv_58, index, sdv_60, irp, Tmp_122, status_11, FdoData_20, PacketArray, PacketArrayCount, vslice_dummy_var_249, vslice_dummy_var_250);
    goto L15_last;

  L15_last:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} PacketArrayCount > index;
    Tmp_122 := index;
    assume {:nonnull} PacketArray != 0;
    assume PacketArray > 0;
    havoc pMpRfd;
    call {:si_unique_call 2267} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 2268} listEntry, sdv_52, sdv_58, sdv_60, irp := NICServiceReadIrps#0_loop_L27(listEntry, sdv_52, sdv_58, sdv_60, irp, FdoData_20);
    goto L27_last;

  L27_last:
    call {:si_unique_call 2287} sdv_52 := sdv_IsListEmpty(0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_52 != 0;
    call {:si_unique_call 2269} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 2270} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2271} vslice_dummy_var_250 := PciDrvIoDecrement(FdoData_20);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2272} NICReturnRFD(FdoData_20, pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 2273} sdv_KeReleaseSpinLockFromDpcLevel(0);
    index := index + 1;
    goto L96_dummy;

  L96_dummy:
    assume false;
    return;

  anon30_Then:
    call {:si_unique_call 2274} vslice_dummy_var_251 := PciDrvIoIncrement(FdoData_20);
    assume false;
    return;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} sdv_52 == 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    call {:si_unique_call 2275} listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_20));
    call {:si_unique_call 2276} sdv_58 := sdv_containing_record(listEntry, 88);
    irp := sdv_58;
    call {:si_unique_call 2277} sdv_60 := sdv_IoSetCancelRoutine(irp, 0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_60 != 0;
    call {:si_unique_call 2278} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2279} buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 2280} sdv_53 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2281} Tmp_117 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    length := Tmp_117;
    call {:si_unique_call 2282} sdv_RtlCopyMemory(0, 0, length);
    status_11 := 0;
    goto L73;

  L73:
    assume {:nonnull} irp != 0;
    assume irp > 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(irp))] := length;
    call {:si_unique_call 2283} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2284} vslice_dummy_var_249 := PciDrvIoDecrement(FdoData_20);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    havoc Tmp_117;
    goto L68;

  anon26_Then:
    assume {:partition} buffer == 0;
    status_11 := -1073741670;
    length := 0;
    goto L73;

  anon25_Then:
    assume {:partition} sdv_60 == 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    call {:si_unique_call 2285} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irp))));
    irp := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} index >= PacketArrayCount;
    Tmp_120 := strConst__li2bpl24;
    call {:si_unique_call 2286} DebugPrint(5, 128, Tmp_120);
    goto LM2;
}



procedure {:origName "NICServiceReadIrps"} NICServiceReadIrps#0(actual_FdoData_20: int, actual_PacketArray: int, actual_PacketArrayCount: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICServiceReadIrps"} NICServiceReadIrps#1(actual_FdoData_20: int, actual_PacketArray: int, actual_PacketArrayCount: int)
{
  var {:scalar} Tmp_117: int;
  var {:scalar} length: int;
  var {:pointer} pMpRfd: int;
  var {:pointer} listEntry: int;
  var {:scalar} sdv_52: int;
  var {:scalar} sdv_53: int;
  var {:pointer} buffer: int;
  var {:pointer} sdv_58: int;
  var {:scalar} index: int;
  var {:scalar} sdv_60: int;
  var {:pointer} Tmp_120: int;
  var {:pointer} Tmp_121: int;
  var {:pointer} irp: int;
  var {:scalar} Tmp_122: int;
  var {:scalar} status_11: int;
  var {:pointer} Tmp_123: int;
  var {:pointer} FdoData_20: int;
  var {:pointer} PacketArray: int;
  var {:scalar} PacketArrayCount: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;

  anon0:
    call {:si_unique_call 2288} vslice_dummy_var_253 := __HAVOC_malloc(4);
    FdoData_20 := actual_FdoData_20;
    PacketArray := actual_PacketArray;
    PacketArrayCount := actual_PacketArrayCount;
    call {:si_unique_call 2289} Tmp_120 := __HAVOC_malloc(96);
    call {:si_unique_call 2290} Tmp_121 := __HAVOC_malloc(96);
    call {:si_unique_call 2291} Tmp_123 := __HAVOC_malloc(108);
    pMpRfd := 0;
    Tmp_121 := strConst__li2bpl25;
    call {:si_unique_call 2292} DebugPrint(5, 128, Tmp_121);
    index := 0;
    goto L15;

  L15:
    call {:si_unique_call 2293} Tmp_117, length, pMpRfd, listEntry, sdv_52, sdv_53, buffer, sdv_58, index, sdv_60, irp, Tmp_122, status_11, Tmp_123, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257 := NICServiceReadIrps#1_loop_L15(Tmp_117, length, pMpRfd, listEntry, sdv_52, sdv_53, buffer, sdv_58, index, sdv_60, irp, Tmp_122, status_11, Tmp_123, FdoData_20, PacketArray, PacketArrayCount, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257);
    goto L15_last;

  L15_last:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} PacketArrayCount > index;
    Tmp_122 := index;
    assume {:nonnull} PacketArray != 0;
    assume PacketArray > 0;
    havoc pMpRfd;
    call {:si_unique_call 2294} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 2295} listEntry, sdv_52, sdv_58, sdv_60, irp := NICServiceReadIrps#1_loop_L27(listEntry, sdv_52, sdv_58, sdv_60, irp, FdoData_20);
    goto L27_last;

  L27_last:
    call {:si_unique_call 2318} sdv_52 := sdv_IsListEmpty(0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_52 != 0;
    call {:si_unique_call 2296} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 2297} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2298} vslice_dummy_var_255 := PciDrvIoDecrement(FdoData_20);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2299} NICReturnRFD(FdoData_20, pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 2300} sdv_KeReleaseSpinLockFromDpcLevel(0);
    index := index + 1;
    goto L96_dummy;

  L96_dummy:
    assume false;
    return;

  anon30_Then:
    call {:si_unique_call 2301} vslice_dummy_var_256 := PciDrvIoIncrement(FdoData_20);
    call {:si_unique_call 2302} status_11 := PciDrvQueuePassiveLevelCallback#0(FdoData_20, li2bplFunctionConstant3731, pMpRfd, 0);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_11 >= 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    Tmp_123 := strConst__li2bpl26;
    call {:si_unique_call 2303} DebugPrint(5, 128, Tmp_123);
    goto L96;

  anon28_Then:
    assume {:partition} 0 > status_11;
    call {:si_unique_call 2304} vslice_dummy_var_257 := PciDrvIoDecrement(FdoData_20);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2305} NICReturnRFD(FdoData_20, pMpRfd);
    goto L96;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} sdv_52 == 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    call {:si_unique_call 2306} listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_20));
    call {:si_unique_call 2307} sdv_58 := sdv_containing_record(listEntry, 88);
    irp := sdv_58;
    call {:si_unique_call 2308} sdv_60 := sdv_IoSetCancelRoutine(irp, 0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_60 != 0;
    call {:si_unique_call 2309} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2310} buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 2311} sdv_53 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2312} Tmp_117 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    length := Tmp_117;
    call {:si_unique_call 2313} sdv_RtlCopyMemory(0, 0, length);
    status_11 := 0;
    goto L73;

  L73:
    assume {:nonnull} irp != 0;
    assume irp > 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(irp))] := length;
    call {:si_unique_call 2314} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2315} vslice_dummy_var_254 := PciDrvIoDecrement(FdoData_20);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    havoc Tmp_117;
    goto L68;

  anon26_Then:
    assume {:partition} buffer == 0;
    status_11 := -1073741670;
    length := 0;
    goto L73;

  anon25_Then:
    assume {:partition} sdv_60 == 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    call {:si_unique_call 2316} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irp))));
    irp := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} index >= PacketArrayCount;
    Tmp_120 := strConst__li2bpl24;
    call {:si_unique_call 2317} DebugPrint(5, 128, Tmp_120);
    goto LM2;
}



procedure {:origName "NICServiceReadIrps"} NICServiceReadIrps#1(actual_FdoData_20: int, actual_PacketArray: int, actual_PacketArrayCount: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback#0(actual_FdoData_81: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_789: int)
{
  var {:pointer} item: int;
  var {:pointer} sdv_383: int;
  var {:pointer} context: int;
  var {:scalar} status_70: int;
  var {:scalar} CallbackFunction: int;
  var {:pointer} Context1: int;
  var {:pointer} Context2: int;

  anon0:
    CallbackFunction := actual_CallbackFunction;
    Context1 := actual_Context1;
    Context2 := actual_Context2;
    item := 0;
    status_70 := 0;
    call {:si_unique_call 2319} sdv_383 := ExAllocatePoolWithTag(512, 16, -1001831600);
    context := sdv_383;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} context != 0;
    call {:si_unique_call 2320} item := IoAllocateWorkItem(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} item != 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    call {:si_unique_call 2321} IoQueueWorkItem#0(item, CallbackFunction, 1, context);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  L26:
    Tmp_789 := status_70;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} item == 0;
    status_70 := -1073741670;
    call {:si_unique_call 2322} ExFreePoolWithTag(0, -1001831600);
    goto L26;

  anon8_Then:
    assume {:partition} context == 0;
    Tmp_789 := -1073741670;
    goto L1;
}



procedure {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback#0(actual_FdoData_81: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_789: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback#1(actual_FdoData_81: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_789: int)
{
  var {:pointer} item: int;
  var {:pointer} sdv_383: int;
  var {:pointer} context: int;
  var {:scalar} status_70: int;
  var {:scalar} CallbackFunction: int;
  var {:pointer} Context1: int;
  var {:pointer} Context2: int;

  anon0:
    CallbackFunction := actual_CallbackFunction;
    Context1 := actual_Context1;
    Context2 := actual_Context2;
    item := 0;
    status_70 := 0;
    call {:si_unique_call 2323} sdv_383 := ExAllocatePoolWithTag(512, 16, -1001831600);
    context := sdv_383;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} context != 0;
    call {:si_unique_call 2324} item := IoAllocateWorkItem(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} item != 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    call {:si_unique_call 2325} IoQueueWorkItem#1(item, CallbackFunction, 1, context);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  L26:
    Tmp_789 := status_70;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} item == 0;
    status_70 := -1073741670;
    call {:si_unique_call 2326} ExFreePoolWithTag(0, -1001831600);
    goto L26;

  anon8_Then:
    assume {:partition} context == 0;
    Tmp_789 := -1073741670;
    goto L1;
}



procedure {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback#1(actual_FdoData_81: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_789: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#0(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_14: int)
{
  var {:scalar} WorkerRoutine: int;
  var {:scalar} QueueType: int;
  var {:pointer} Context_14: int;
  var vslice_dummy_var_258: int;

  anon0:
    call {:si_unique_call 2327} vslice_dummy_var_258 := __HAVOC_malloc(4);
    WorkerRoutine := actual_WorkerRoutine;
    QueueType := actual_QueueType;
    Context_14 := actual_Context_14;
    call {:si_unique_call 2328} sdv_RunIoQueueWorkItems#0(0, WorkerRoutine, QueueType, Context_14);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#0(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_14: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#1(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_14: int)
{
  var {:scalar} WorkerRoutine: int;
  var {:scalar} QueueType: int;
  var {:pointer} Context_14: int;
  var vslice_dummy_var_259: int;

  anon0:
    call {:si_unique_call 2329} vslice_dummy_var_259 := __HAVOC_malloc(4);
    WorkerRoutine := actual_WorkerRoutine;
    QueueType := actual_QueueType;
    Context_14 := actual_Context_14;
    call {:si_unique_call 2330} sdv_RunIoQueueWorkItems#1(0, WorkerRoutine, QueueType, Context_14);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#1(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_14: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#0(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_15: int)
{
  var {:scalar} WorkerRoutine_1: int;
  var {:pointer} Context_15: int;
  var vslice_dummy_var_260: int;

  anon0:
    call {:si_unique_call 2331} vslice_dummy_var_260 := __HAVOC_malloc(4);
    WorkerRoutine_1 := actual_WorkerRoutine_1;
    Context_15 := actual_Context_15;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant3726;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2332} NICAllocRfdWorkItem(sdv_p_devobj_fdo, Context_15);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L4;

  L4:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant6708;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2333} PciDrvCallbackHandleDeviceQueryPower#0(sdv_p_devobj_fdo, Context_15);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L19;

  L19:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant6710;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2334} PciDrvCallbackHandleDeviceSetPower#0(sdv_p_devobj_fdo, Context_15);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L34;

  L34:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5767;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2335} PciDrvPassiveLevelClearWaitWakeEnableState(sdv_p_devobj_fdo, Context_15);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L49;

  L49:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5766;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2336} PciDrvPassiveLevelReArmCallbackWorker#0(sdv_p_devobj_fdo, Context_15);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L64;

  L64:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5291;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2337} PciDrvPowerDownDeviceCallback#0(sdv_p_devobj_fdo, Context_15);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L79;

  L79:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5293;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2338} PciDrvPowerUpDeviceCallback#0(sdv_p_devobj_fdo, Context_15);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L94;

  L94:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant7190;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2339} PciDrvStartDeviceWorker#0(sdv_p_devobj_fdo, Context_15);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant7190;
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5293;
    goto L94;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5291;
    goto L79;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5766;
    goto L64;

  anon34_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5767;
    goto L49;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant6710;
    goto L34;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant6708;
    goto L19;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant3726;
    goto L4;
}



procedure {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#0(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_15: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#1(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_15: int)
{
  var {:scalar} WorkerRoutine_1: int;
  var {:pointer} Context_15: int;
  var vslice_dummy_var_261: int;

  anon0:
    call {:si_unique_call 2340} vslice_dummy_var_261 := __HAVOC_malloc(4);
    WorkerRoutine_1 := actual_WorkerRoutine_1;
    Context_15 := actual_Context_15;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant3726;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2341} NICAllocRfdWorkItem(sdv_p_devobj_fdo, Context_15);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L4;

  L4:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant6708;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2342} PciDrvCallbackHandleDeviceQueryPower#1(sdv_p_devobj_fdo, Context_15);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L19;

  L19:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant6710;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2343} PciDrvCallbackHandleDeviceSetPower#1(sdv_p_devobj_fdo, Context_15);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L34;

  L34:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5767;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2344} PciDrvPassiveLevelClearWaitWakeEnableState(sdv_p_devobj_fdo, Context_15);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L49;

  L49:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5766;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2345} PciDrvPassiveLevelReArmCallbackWorker#1(sdv_p_devobj_fdo, Context_15);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L64;

  L64:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5291;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2346} PciDrvPowerDownDeviceCallback#1(sdv_p_devobj_fdo, Context_15);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L79;

  L79:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant5293;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2347} PciDrvPowerUpDeviceCallback#1(sdv_p_devobj_fdo, Context_15);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L94;

  L94:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant7190;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    call {:si_unique_call 2348} PciDrvStartDeviceWorker#1(sdv_p_devobj_fdo, Context_15);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant7190;
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5293;
    goto L94;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5291;
    goto L79;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5766;
    goto L64;

  anon34_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant5767;
    goto L49;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant6710;
    goto L34;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant6708;
    goto L19;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant3726;
    goto L4;
}



procedure {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#1(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_15: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCallbackHandleDeviceQueryPower"} PciDrvCallbackHandleDeviceQueryPower#0(actual_DeviceObject_1: int, actual_Context_1: int)
{
  var {:scalar} direction: int;
  var {:pointer} fdoData_1: int;
  var {:pointer} irp_1: int;
  var {:pointer} Tmp_159: int;
  var {:pointer} Tmp_160: int;
  var {:scalar} status_15: int;
  var {:scalar} Tmp_162: int;
  var {:pointer} stack_1: int;
  var {:pointer} Tmp_163: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Context_1: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;

  anon0:
    call {:si_unique_call 2349} vslice_dummy_var_262 := __HAVOC_malloc(4);
    DeviceObject_1 := actual_DeviceObject_1;
    Context_1 := actual_Context_1;
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc fdoData_1;
    call {:si_unique_call 2350} sdv_do_paged_code_check();
    Tmp_160 := Context_1;
    assume {:nonnull} Tmp_160 != 0;
    assume Tmp_160 > 0;
    havoc irp_1;
    Tmp_159 := Context_1;
    assume {:nonnull} Tmp_159 != 0;
    assume Tmp_159 > 0;
    havoc direction;
    call {:si_unique_call 2351} stack_1 := sdv_IoGetCurrentIrpStackLocation(irp_1);
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_162 := 2;
    goto L23;

  L23:
    call {:si_unique_call 2352} status_15 := PciDrvPowerBeginQueuingIrps#0(DeviceObject_1, Tmp_162, 1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2353} vslice_dummy_var_263 := PciDrvFinalizeDevicePowerIrp#0(DeviceObject_1, irp_1, direction, status_15);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_163 := Context_1;
    assume {:nonnull} Tmp_163 != 0;
    assume Tmp_163 > 0;
    call {:si_unique_call 2354} IoFreeWorkItem(0);
    call {:si_unique_call 2355} sdv_ExFreePool(0);
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    Tmp_162 := 1;
    goto L23;
}



procedure {:origName "PciDrvCallbackHandleDeviceQueryPower"} PciDrvCallbackHandleDeviceQueryPower#0(actual_DeviceObject_1: int, actual_Context_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCallbackHandleDeviceQueryPower"} PciDrvCallbackHandleDeviceQueryPower#1(actual_DeviceObject_1: int, actual_Context_1: int)
{
  var {:scalar} direction: int;
  var {:pointer} fdoData_1: int;
  var {:pointer} irp_1: int;
  var {:pointer} Tmp_159: int;
  var {:pointer} Tmp_160: int;
  var {:scalar} status_15: int;
  var {:scalar} Tmp_162: int;
  var {:pointer} stack_1: int;
  var {:pointer} Tmp_163: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Context_1: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;

  anon0:
    call {:si_unique_call 2356} vslice_dummy_var_264 := __HAVOC_malloc(4);
    DeviceObject_1 := actual_DeviceObject_1;
    Context_1 := actual_Context_1;
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc fdoData_1;
    call {:si_unique_call 2357} sdv_do_paged_code_check();
    Tmp_160 := Context_1;
    assume {:nonnull} Tmp_160 != 0;
    assume Tmp_160 > 0;
    havoc irp_1;
    Tmp_159 := Context_1;
    assume {:nonnull} Tmp_159 != 0;
    assume Tmp_159 > 0;
    havoc direction;
    call {:si_unique_call 2358} stack_1 := sdv_IoGetCurrentIrpStackLocation(irp_1);
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_162 := 2;
    goto L23;

  L23:
    call {:si_unique_call 2359} status_15 := PciDrvPowerBeginQueuingIrps#1(DeviceObject_1, Tmp_162, 1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2360} vslice_dummy_var_265 := PciDrvFinalizeDevicePowerIrp#1(DeviceObject_1, irp_1, direction, status_15);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_163 := Context_1;
    assume {:nonnull} Tmp_163 != 0;
    assume Tmp_163 > 0;
    call {:si_unique_call 2361} IoFreeWorkItem(0);
    call {:si_unique_call 2362} sdv_ExFreePool(0);
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    Tmp_162 := 1;
    goto L23;
}



procedure {:origName "PciDrvCallbackHandleDeviceQueryPower"} PciDrvCallbackHandleDeviceQueryPower#1(actual_DeviceObject_1: int, actual_Context_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#0(actual_DeviceObject_14: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_215: int)
{
  var {:pointer} fdoData_12: int;
  var {:scalar} status_23: int;
  var {:pointer} DeviceObject_14: int;
  var {:scalar} IrpIoCharges: int;
  var {:scalar} Query: int;

  anon0:
    DeviceObject_14 := actual_DeviceObject_14;
    IrpIoCharges := actual_IrpIoCharges;
    Query := actual_Query;
    call {:si_unique_call 2363} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    havoc fdoData_12;
    assume {:nonnull} fdoData_12 != 0;
    assume fdoData_12 > 0;
    call {:si_unique_call 2364} PciDrvWithdrawIrps(fdoData_12);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2365} PciDrvCancelIdleDetectionTimer(fdoData_12);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2366} PciDrvReleaseAndWait(fdoData_12, IrpIoCharges, 1);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Query != 0;
    call {:si_unique_call 2367} status_23 := PciDrvCanSuspendDevice(DeviceObject_14);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_23 >= 0;
    goto L27;

  L27:
    Tmp_215 := status_23;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} 0 > status_23;
    assume {:nonnull} fdoData_12 != 0;
    assume fdoData_12 > 0;
    call {:si_unique_call 2368} PciDrvProcessQueuedRequests#0(fdoData_12);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} Query == 0;
    status_23 := 0;
    goto L27;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#0(actual_DeviceObject_14: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_215: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#1(actual_DeviceObject_14: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_215: int)
{
  var {:pointer} fdoData_12: int;
  var {:scalar} status_23: int;
  var {:pointer} DeviceObject_14: int;
  var {:scalar} IrpIoCharges: int;
  var {:scalar} Query: int;

  anon0:
    DeviceObject_14 := actual_DeviceObject_14;
    IrpIoCharges := actual_IrpIoCharges;
    Query := actual_Query;
    call {:si_unique_call 2369} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    havoc fdoData_12;
    assume {:nonnull} fdoData_12 != 0;
    assume fdoData_12 > 0;
    call {:si_unique_call 2370} PciDrvWithdrawIrps(fdoData_12);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2371} PciDrvCancelIdleDetectionTimer(fdoData_12);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2372} PciDrvReleaseAndWait(fdoData_12, IrpIoCharges, 1);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Query != 0;
    call {:si_unique_call 2373} status_23 := PciDrvCanSuspendDevice(DeviceObject_14);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_23 >= 0;
    goto L27;

  L27:
    Tmp_215 := status_23;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} 0 > status_23;
    assume {:nonnull} fdoData_12 != 0;
    assume fdoData_12 > 0;
    call {:si_unique_call 2374} PciDrvProcessQueuedRequests#1(fdoData_12);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} Query == 0;
    status_23 := 0;
    goto L27;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#1(actual_DeviceObject_14: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_215: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#0(actual_FdoData_80: int)
{
  var {:pointer} Tmp_770: int;
  var {:pointer} Tmp_771: int;
  var {:scalar} sdv_375: int;
  var {:pointer} listEntry_3: int;
  var {:pointer} Tmp_773: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} sdv_378: int;
  var {:scalar} nIrpsReDispatched: int;
  var {:pointer} nextIrp: int;
  var {:pointer} FdoData_80: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_79: int;

  anon0:
    call {:si_unique_call 2375} vslice_dummy_var_266 := __HAVOC_malloc(4);
    FdoData_80 := actual_FdoData_80;
    call {:si_unique_call 2376} Tmp_770 := __HAVOC_malloc(140);
    call {:si_unique_call 2377} Tmp_771 := __HAVOC_malloc(128);
    nIrpsReDispatched := 0;
    Tmp_771 := strConst__li2bpl238;
    call {:si_unique_call 2378} DebugPrint(5, 2048, Tmp_771);
    goto L13;

  L13:
    call {:si_unique_call 2379} sdv_375, listEntry_3, Tmp_773, cancelRoutine, oldIrql_10, sdv_378, nIrpsReDispatched, nextIrp, vslice_dummy_var_268 := PciDrvProcessQueuedRequests#0_loop_L13(sdv_375, listEntry_3, Tmp_773, cancelRoutine, oldIrql_10, sdv_378, nIrpsReDispatched, nextIrp, FdoData_80, vslice_dummy_var_268);
    goto L13_last;

  L13_last:
    call {:si_unique_call 2394} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := oldIrql_10;
    call {:si_unique_call 2395} sdv_KeAcquireSpinLock(0, Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_773];
    call {:si_unique_call 2396} sdv_375 := sdv_IsListEmpty(0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_375 != 0;
    call {:si_unique_call 2380} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto L27;

  L27:
    Tmp_770 := strConst__li2bpl237;
    call {:si_unique_call 2381} DebugPrint(5, 2048, Tmp_770);
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} sdv_375 == 0;
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    call {:si_unique_call 2382} listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(FdoData_80));
    call {:si_unique_call 2383} sdv_378 := sdv_containing_record(listEntry_3, 88);
    nextIrp := sdv_378;
    call {:si_unique_call 2384} cancelRoutine := sdv_IoSetCancelRoutine(nextIrp, 0);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} cancelRoutine != 0;
    call {:si_unique_call 2385} sdv_KeReleaseSpinLock(0, oldIrql_10);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2386} sdv_IoCompleteRequest(0, 0);
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 2387} InitializeListHead(listEntry_3);
    call {:si_unique_call 2388} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon16_Then:
    call {:si_unique_call 2389} sdv_KeReleaseSpinLock(0, oldIrql_10);
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2390} sdv_IoCompleteRequest(0, 0);
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    havoc vslice_dummy_var_79;
    call {:si_unique_call 2391} vslice_dummy_var_268 := PciDrvDispatchIO#0(vslice_dummy_var_79, nextIrp);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    nIrpsReDispatched := nIrpsReDispatched + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    call {:si_unique_call 2392} vslice_dummy_var_267 := PciDrvIoIncrement(FdoData_80);
    call {:si_unique_call 2393} vslice_dummy_var_269 := PciDrvQueueRequest(FdoData_80, nextIrp);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#0(actual_FdoData_80: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#1(actual_FdoData_80: int)
{
  var {:pointer} Tmp_770: int;
  var {:pointer} Tmp_771: int;
  var {:scalar} sdv_375: int;
  var {:pointer} listEntry_3: int;
  var {:pointer} Tmp_773: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} sdv_378: int;
  var {:scalar} nIrpsReDispatched: int;
  var {:pointer} nextIrp: int;
  var {:pointer} FdoData_80: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_80: int;

  anon0:
    call {:si_unique_call 2397} vslice_dummy_var_270 := __HAVOC_malloc(4);
    FdoData_80 := actual_FdoData_80;
    call {:si_unique_call 2398} Tmp_770 := __HAVOC_malloc(140);
    call {:si_unique_call 2399} Tmp_771 := __HAVOC_malloc(128);
    nIrpsReDispatched := 0;
    Tmp_771 := strConst__li2bpl238;
    call {:si_unique_call 2400} DebugPrint(5, 2048, Tmp_771);
    goto L13;

  L13:
    call {:si_unique_call 2401} sdv_375, listEntry_3, Tmp_773, cancelRoutine, oldIrql_10, sdv_378, nIrpsReDispatched, nextIrp, vslice_dummy_var_272 := PciDrvProcessQueuedRequests#1_loop_L13(sdv_375, listEntry_3, Tmp_773, cancelRoutine, oldIrql_10, sdv_378, nIrpsReDispatched, nextIrp, FdoData_80, vslice_dummy_var_272);
    goto L13_last;

  L13_last:
    call {:si_unique_call 2416} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := oldIrql_10;
    call {:si_unique_call 2417} sdv_KeAcquireSpinLock(0, Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_773];
    call {:si_unique_call 2418} sdv_375 := sdv_IsListEmpty(0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_375 != 0;
    call {:si_unique_call 2402} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto L27;

  L27:
    Tmp_770 := strConst__li2bpl237;
    call {:si_unique_call 2403} DebugPrint(5, 2048, Tmp_770);
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} sdv_375 == 0;
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    call {:si_unique_call 2404} listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(FdoData_80));
    call {:si_unique_call 2405} sdv_378 := sdv_containing_record(listEntry_3, 88);
    nextIrp := sdv_378;
    call {:si_unique_call 2406} cancelRoutine := sdv_IoSetCancelRoutine(nextIrp, 0);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} cancelRoutine != 0;
    call {:si_unique_call 2407} sdv_KeReleaseSpinLock(0, oldIrql_10);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2408} sdv_IoCompleteRequest(0, 0);
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 2409} InitializeListHead(listEntry_3);
    call {:si_unique_call 2410} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon16_Then:
    call {:si_unique_call 2411} sdv_KeReleaseSpinLock(0, oldIrql_10);
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2412} sdv_IoCompleteRequest(0, 0);
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} FdoData_80 != 0;
    assume FdoData_80 > 0;
    havoc vslice_dummy_var_80;
    call {:si_unique_call 2413} vslice_dummy_var_272 := PciDrvDispatchIO#1(vslice_dummy_var_80, nextIrp);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    nIrpsReDispatched := nIrpsReDispatched + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    call {:si_unique_call 2414} vslice_dummy_var_271 := PciDrvIoIncrement(FdoData_80);
    call {:si_unique_call 2415} vslice_dummy_var_273 := PciDrvQueueRequest(FdoData_80, nextIrp);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#1(actual_FdoData_80: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#0(actual_DeviceObject_32: int, actual_Irp_24: int) returns (Tmp_737: int)
{
  var {:pointer} irpStack_2: int;
  var {:pointer} fdoData_26: int;
  var {:pointer} Tmp_739: int;
  var {:scalar} status_61: int;
  var {:pointer} DeviceObject_32: int;
  var {:pointer} Irp_24: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;

  anon0:
    DeviceObject_32 := actual_DeviceObject_32;
    Irp_24 := actual_Irp_24;
    call {:si_unique_call 2419} Tmp_739 := __HAVOC_malloc(112);
    status_61 := 0;
    Tmp_739 := strConst__li2bpl226;
    call {:si_unique_call 2420} DebugPrint(6, 32, Tmp_739);
    assume {:nonnull} DeviceObject_32 != 0;
    assume DeviceObject_32 > 0;
    havoc fdoData_26;
    call {:si_unique_call 2421} irpStack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_24);
    call {:si_unique_call 2422} status_61 := PciDrvPowerUpDevice#0(fdoData_26, 0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_61 >= 0;
    call {:si_unique_call 2423} vslice_dummy_var_274 := PciDrvIoIncrement(fdoData_26);
    assume {:nonnull} fdoData_26 != 0;
    assume fdoData_26 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2424} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2425} vslice_dummy_var_275 := PciDrvIoDecrement(fdoData_26);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    Tmp_737 := -1073741810;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:nonnull} fdoData_26 != 0;
    assume fdoData_26 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L35;

  L35:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    call {:si_unique_call 2426} status_61 := PciDrvDispatchIoctl#0(fdoData_26, Irp_24);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  L48:
    Tmp_737 := status_61;
    goto L1;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    status_61 := -1073741823;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2427} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2428} vslice_dummy_var_276 := PciDrvIoDecrement(fdoData_26);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    call {:si_unique_call 2429} status_61 := PciDrvWrite(fdoData_26, Irp_24);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    call {:si_unique_call 2430} status_61 := PciDrvRead(fdoData_26, Irp_24);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:nonnull} fdoData_26 != 0;
    assume fdoData_26 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_26)] != 0;
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto L61;

  L61:
    call {:si_unique_call 2431} Tmp_737 := PciDrvQueueRequest(fdoData_26, Irp_24);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    goto L35;

  anon38_Then:
    goto L61;

  anon36_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_26)] == 0;
    goto L61;

  anon33_Then:
    assume {:partition} 0 > status_61;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2432} sdv_IoCompleteRequest(0, 0);
    Tmp_737 := status_61;
    goto L1;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#0(actual_DeviceObject_32: int, actual_Irp_24: int) returns (Tmp_737: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#1(actual_DeviceObject_32: int, actual_Irp_24: int) returns (Tmp_737: int)
{
  var {:pointer} irpStack_2: int;
  var {:pointer} fdoData_26: int;
  var {:pointer} Tmp_739: int;
  var {:scalar} status_61: int;
  var {:pointer} DeviceObject_32: int;
  var {:pointer} Irp_24: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;

  anon0:
    DeviceObject_32 := actual_DeviceObject_32;
    Irp_24 := actual_Irp_24;
    call {:si_unique_call 2433} Tmp_739 := __HAVOC_malloc(112);
    status_61 := 0;
    Tmp_739 := strConst__li2bpl226;
    call {:si_unique_call 2434} DebugPrint(6, 32, Tmp_739);
    assume {:nonnull} DeviceObject_32 != 0;
    assume DeviceObject_32 > 0;
    havoc fdoData_26;
    call {:si_unique_call 2435} irpStack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_24);
    call {:si_unique_call 2436} status_61 := PciDrvPowerUpDevice#1(fdoData_26, 0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_61 >= 0;
    call {:si_unique_call 2437} vslice_dummy_var_277 := PciDrvIoIncrement(fdoData_26);
    assume {:nonnull} fdoData_26 != 0;
    assume fdoData_26 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2438} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2439} vslice_dummy_var_278 := PciDrvIoDecrement(fdoData_26);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    Tmp_737 := -1073741810;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:nonnull} fdoData_26 != 0;
    assume fdoData_26 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L35;

  L35:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    call {:si_unique_call 2440} status_61 := PciDrvDispatchIoctl#1(fdoData_26, Irp_24);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  L48:
    Tmp_737 := status_61;
    goto L1;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    status_61 := -1073741823;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2441} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2442} vslice_dummy_var_279 := PciDrvIoDecrement(fdoData_26);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    call {:si_unique_call 2443} status_61 := PciDrvWrite(fdoData_26, Irp_24);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    call {:si_unique_call 2444} status_61 := PciDrvRead(fdoData_26, Irp_24);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:nonnull} fdoData_26 != 0;
    assume fdoData_26 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_26)] != 0;
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto L61;

  L61:
    call {:si_unique_call 2445} Tmp_737 := PciDrvQueueRequest(fdoData_26, Irp_24);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    goto L35;

  anon38_Then:
    goto L61;

  anon36_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_26)] == 0;
    goto L61;

  anon33_Then:
    assume {:partition} 0 > status_61;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2446} sdv_IoCompleteRequest(0, 0);
    Tmp_737 := status_61;
    goto L1;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#1(actual_DeviceObject_32: int, actual_Irp_24: int) returns (Tmp_737: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice#0(actual_FdoData_53: int, actual_Wait: int) returns (Tmp_581: int)
{
  var {:pointer} waitObjects: int;
  var {:pointer} Tmp_582: int;
  var {:scalar} sdv_238: int;
  var {:pointer} Tmp_584: int;
  var {:scalar} status_45: int;
  var {:pointer} FdoData_53: int;
  var {:scalar} Wait: int;
  var vslice_dummy_var_81: int;

  anon0:
    FdoData_53 := actual_FdoData_53;
    Wait := actual_Wait;
    call {:si_unique_call 2447} waitObjects := __HAVOC_malloc(8);
    call {:si_unique_call 2448} Tmp_582 := __HAVOC_malloc(112);
    call {:si_unique_call 2449} Tmp_584 := __HAVOC_malloc(240);
    status_45 := 0;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Wait != 0;
    Tmp_584 := strConst__li2bpl177;
    call {:si_unique_call 2450} DebugPrint(5, 4, Tmp_584);
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    call {:si_unique_call 2451} status_45 := KeWaitForMultipleObjects(2, 0, 0, 0, 0, 0, 0, 0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} status_45 < 0;
    Tmp_582 := strConst__li2bpl178;
    call {:si_unique_call 2452} DebugPrint(2, 4, Tmp_582);
    goto L7;

  L7:
    Tmp_581 := status_45;
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} 0 <= status_45;
    goto L11;

  L11:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 2453} sdv_238 := sdv_KeGetCurrentIrql();
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_238 == 2;
    assume false;
    return;

  anon26_Then:
    assume {:partition} sdv_238 != 2;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    havoc vslice_dummy_var_81;
    call {:si_unique_call 2454} PciDrvPowerUpDeviceCallback#0(vslice_dummy_var_81, 0);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    goto L7;

  anon22_Then:
    goto L7;

  anon23_Then:
    assume {:partition} Wait == 0;
    goto L7;

  anon28_Then:
    goto L11;

  anon21_Then:
    goto L7;

  anon27_Then:
    goto L7;
}



procedure {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice#0(actual_FdoData_53: int, actual_Wait: int) returns (Tmp_581: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice#1(actual_FdoData_53: int, actual_Wait: int) returns (Tmp_581: int)
{
  var {:pointer} waitObjects: int;
  var {:pointer} Tmp_582: int;
  var {:scalar} sdv_238: int;
  var {:pointer} Tmp_584: int;
  var {:scalar} status_45: int;
  var {:pointer} FdoData_53: int;
  var {:scalar} Wait: int;
  var vslice_dummy_var_82: int;

  anon0:
    FdoData_53 := actual_FdoData_53;
    Wait := actual_Wait;
    call {:si_unique_call 2455} waitObjects := __HAVOC_malloc(8);
    call {:si_unique_call 2456} Tmp_582 := __HAVOC_malloc(112);
    call {:si_unique_call 2457} Tmp_584 := __HAVOC_malloc(240);
    status_45 := 0;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Wait != 0;
    Tmp_584 := strConst__li2bpl177;
    call {:si_unique_call 2458} DebugPrint(5, 4, Tmp_584);
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    call {:si_unique_call 2459} status_45 := KeWaitForMultipleObjects(2, 0, 0, 0, 0, 0, 0, 0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} status_45 < 0;
    Tmp_582 := strConst__li2bpl178;
    call {:si_unique_call 2460} DebugPrint(2, 4, Tmp_582);
    goto L7;

  L7:
    Tmp_581 := status_45;
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} 0 <= status_45;
    goto L11;

  L11:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 2461} sdv_238 := sdv_KeGetCurrentIrql();
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_238 == 2;
    call {:si_unique_call 2462} status_45 := PciDrvQueuePassiveLevelCallback#0(FdoData_53, li2bplFunctionConstant5293, 0, 0);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} sdv_238 != 2;
    assume {:nonnull} FdoData_53 != 0;
    assume FdoData_53 > 0;
    havoc vslice_dummy_var_82;
    call {:si_unique_call 2463} PciDrvPowerUpDeviceCallback#1(vslice_dummy_var_82, 0);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    goto L7;

  anon22_Then:
    goto L7;

  anon23_Then:
    assume {:partition} Wait == 0;
    goto L7;

  anon28_Then:
    goto L11;

  anon21_Then:
    goto L7;

  anon27_Then:
    goto L7;
}



procedure {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice#1(actual_FdoData_53: int, actual_Wait: int) returns (Tmp_581: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback#0(actual_DeviceObject_27: int, actual_Context_9: int)
{
  var {:pointer} Tmp_618: int;
  var {:pointer} Tmp_620: int;
  var {:pointer} Tmp_621: int;
  var {:scalar} powerState_2: int;
  var {:pointer} fdoData_22: int;
  var {:scalar} status_50: int;
  var {:pointer} DeviceObject_27: int;
  var {:pointer} Context_9: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_83: int;

  anon0:
    call {:si_unique_call 2464} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 2465} vslice_dummy_var_280 := __HAVOC_malloc(4);
    DeviceObject_27 := actual_DeviceObject_27;
    Context_9 := actual_Context_9;
    call {:si_unique_call 2466} Tmp_618 := __HAVOC_malloc(132);
    call {:si_unique_call 2467} Tmp_620 := __HAVOC_malloc(132);
    assume {:nonnull} DeviceObject_27 != 0;
    assume DeviceObject_27 > 0;
    havoc fdoData_22;
    Tmp_618 := strConst__li2bpl195;
    call {:si_unique_call 2468} DebugPrint(5, 4, Tmp_618);
    call {:si_unique_call 2469} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    call {:si_unique_call 2470} KeClearEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_22));
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_2)] := 1;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    havoc vslice_dummy_var_83;
    call {:si_unique_call 2471} status_50 := PoRequestPowerIrp#0(vslice_dummy_var_83, 2, powerState_2, li2bplFunctionConstant5292, IdlePowerUpCompleteEvent__FDO_DATA(fdoData_22), 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_50 >= 0;
    call {:si_unique_call 2472} status_50 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L28;

  L28:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Context_9 != 0;
    Tmp_621 := Context_9;
    assume {:nonnull} Tmp_621 != 0;
    assume Tmp_621 > 0;
    call {:si_unique_call 2473} IoFreeWorkItem(0);
    call {:si_unique_call 2474} sdv_ExFreePool(0);
    goto L29;

  L29:
    Tmp_620 := strConst__li2bpl194;
    call {:si_unique_call 2475} DebugPrint(5, 4, Tmp_620);
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} Context_9 == 0;
    goto L29;

  anon9_Then:
    assume {:partition} 0 > status_50;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    call {:si_unique_call 2476} vslice_dummy_var_281 := KeSetEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_22), 0, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback#0(actual_DeviceObject_27: int, actual_Context_9: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback#1(actual_DeviceObject_27: int, actual_Context_9: int)
{
  var {:pointer} Tmp_618: int;
  var {:pointer} Tmp_620: int;
  var {:pointer} Tmp_621: int;
  var {:scalar} powerState_2: int;
  var {:pointer} fdoData_22: int;
  var {:scalar} status_50: int;
  var {:pointer} DeviceObject_27: int;
  var {:pointer} Context_9: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_84: int;

  anon0:
    call {:si_unique_call 2477} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 2478} vslice_dummy_var_282 := __HAVOC_malloc(4);
    DeviceObject_27 := actual_DeviceObject_27;
    Context_9 := actual_Context_9;
    call {:si_unique_call 2479} Tmp_618 := __HAVOC_malloc(132);
    call {:si_unique_call 2480} Tmp_620 := __HAVOC_malloc(132);
    assume {:nonnull} DeviceObject_27 != 0;
    assume DeviceObject_27 > 0;
    havoc fdoData_22;
    Tmp_618 := strConst__li2bpl195;
    call {:si_unique_call 2481} DebugPrint(5, 4, Tmp_618);
    call {:si_unique_call 2482} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    call {:si_unique_call 2483} KeClearEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_22));
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_2)] := 1;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    havoc vslice_dummy_var_84;
    call {:si_unique_call 2484} status_50 := PoRequestPowerIrp#1(vslice_dummy_var_84, 2, powerState_2, li2bplFunctionConstant5292, IdlePowerUpCompleteEvent__FDO_DATA(fdoData_22), 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_50 >= 0;
    call {:si_unique_call 2485} status_50 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L28;

  L28:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Context_9 != 0;
    Tmp_621 := Context_9;
    assume {:nonnull} Tmp_621 != 0;
    assume Tmp_621 > 0;
    call {:si_unique_call 2486} IoFreeWorkItem(0);
    call {:si_unique_call 2487} sdv_ExFreePool(0);
    goto L29;

  L29:
    Tmp_620 := strConst__li2bpl194;
    call {:si_unique_call 2488} DebugPrint(5, 4, Tmp_620);
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} Context_9 == 0;
    goto L29;

  anon9_Then:
    assume {:partition} 0 > status_50;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    assume {:nonnull} fdoData_22 != 0;
    assume fdoData_22 > 0;
    call {:si_unique_call 2489} vslice_dummy_var_283 := KeSetEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_22), 0, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback#1(actual_DeviceObject_27: int, actual_Context_9: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_44: int, actual_MinorFunction_7: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_17: int, actual_Irp_37: int) returns (Tmp_938: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_44: int;
  var {:scalar} MinorFunction_7: int;
  var {:pointer} SD1_2: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_17: int;
  var vslice_dummy_var_284: int;

  anon0:
    call {:si_unique_call 2490} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_44 := actual_DeviceObject_44;
    MinorFunction_7 := actual_MinorFunction_7;
    SD1_2 := actual_SD1_2;
    CompletionFunction := actual_CompletionFunction;
    Context_17 := actual_Context_17;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState_1)] := Mem_T.INT4[DeviceState__POWER_STATE(SD1_2)];
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} MinorFunction_7 != 3;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_7 != 2;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} MinorFunction_7 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_938 := -1073741584;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} MinorFunction_7 == 0;
    goto L13;

  L13:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2491} vslice_dummy_var_284 := sdv_RunPowerCompletionRoutines#0(DeviceObject_44, MinorFunction_7, PowerState_1, Context_17, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_938 := 259;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_938 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction_7 == 2;
    goto L13;

  anon14_Then:
    assume {:partition} MinorFunction_7 == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_44: int, actual_MinorFunction_7: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_17: int, actual_Irp_37: int) returns (Tmp_938: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_44: int, actual_MinorFunction_7: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_17: int, actual_Irp_37: int) returns (Tmp_938: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_44: int;
  var {:scalar} MinorFunction_7: int;
  var {:pointer} SD1_2: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_17: int;
  var vslice_dummy_var_285: int;

  anon0:
    call {:si_unique_call 2492} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_44 := actual_DeviceObject_44;
    MinorFunction_7 := actual_MinorFunction_7;
    SD1_2 := actual_SD1_2;
    CompletionFunction := actual_CompletionFunction;
    Context_17 := actual_Context_17;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState_1)] := Mem_T.INT4[DeviceState__POWER_STATE(SD1_2)];
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} MinorFunction_7 != 3;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_7 != 2;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} MinorFunction_7 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_938 := -1073741584;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} MinorFunction_7 == 0;
    goto L13;

  L13:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2493} vslice_dummy_var_285 := sdv_RunPowerCompletionRoutines#1(DeviceObject_44, MinorFunction_7, PowerState_1, Context_17, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_938 := 259;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_938 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction_7 == 2;
    goto L13;

  anon14_Then:
    assume {:partition} MinorFunction_7 == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_44: int, actual_MinorFunction_7: int, actual_SD1_2: int, actual_CompletionFunction: int, actual_Context_17: int, actual_Irp_37: int) returns (Tmp_938: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_45: int, actual_MinorFunction_8: int, actual_structPtr888PowerState: int, actual_Context_18: int, actual_IoStatus_4: int, actual_CompletionFunction_1: int) returns (Tmp_952: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_45: int;
  var {:scalar} MinorFunction_8: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_18: int;
  var {:pointer} IoStatus_4: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2494} PowerState := __HAVOC_malloc(8);
    DeviceObject_45 := actual_DeviceObject_45;
    MinorFunction_8 := actual_MinorFunction_8;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_18 := actual_Context_18;
    IoStatus_4 := actual_IoStatus_4;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888PowerState)];
    CompletionFunction_2 := 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant6706;
    call {:si_unique_call 2495} sdv_stub_power_completion_begin();
    call {:si_unique_call 2496} PciDrvCompletionOnFinalizedDeviceIrp(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant5295;
    call {:si_unique_call 2497} sdv_stub_power_completion_begin();
    call {:si_unique_call 2498} PciDrvCompletionOnIdlePowerDownIrp(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant5292;
    call {:si_unique_call 2499} sdv_stub_power_completion_begin();
    call {:si_unique_call 2500} PciDrvCompletionOnIdlePowerUpIrp(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L32;

  L32:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant5764;
    call {:si_unique_call 2501} sdv_stub_power_completion_begin();
    call {:si_unique_call 2502} PciDrvWaitWakePoCompletionRoutine#0(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L45;

  L45:
    Tmp_952 := CompletionFunction_2;
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant5764;
    goto L45;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant5292;
    goto L32;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant5295;
    goto L19;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant6706;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_45: int, actual_MinorFunction_8: int, actual_structPtr888PowerState: int, actual_Context_18: int, actual_IoStatus_4: int, actual_CompletionFunction_1: int) returns (Tmp_952: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_45: int, actual_MinorFunction_8: int, actual_structPtr888PowerState: int, actual_Context_18: int, actual_IoStatus_4: int, actual_CompletionFunction_1: int) returns (Tmp_952: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_45: int;
  var {:scalar} MinorFunction_8: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_18: int;
  var {:pointer} IoStatus_4: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2503} PowerState := __HAVOC_malloc(8);
    DeviceObject_45 := actual_DeviceObject_45;
    MinorFunction_8 := actual_MinorFunction_8;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_18 := actual_Context_18;
    IoStatus_4 := actual_IoStatus_4;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888PowerState)];
    CompletionFunction_2 := 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant6706;
    call {:si_unique_call 2504} sdv_stub_power_completion_begin();
    call {:si_unique_call 2505} PciDrvCompletionOnFinalizedDeviceIrp(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant5295;
    call {:si_unique_call 2506} sdv_stub_power_completion_begin();
    call {:si_unique_call 2507} PciDrvCompletionOnIdlePowerDownIrp(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant5292;
    call {:si_unique_call 2508} sdv_stub_power_completion_begin();
    call {:si_unique_call 2509} PciDrvCompletionOnIdlePowerUpIrp(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L32;

  L32:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant5764;
    call {:si_unique_call 2510} sdv_stub_power_completion_begin();
    call {:si_unique_call 2511} PciDrvWaitWakePoCompletionRoutine#1(DeviceObject_45, MinorFunction_8, PowerState, Context_18, IoStatus_4);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L45;

  L45:
    Tmp_952 := CompletionFunction_2;
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant5764;
    goto L45;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant5292;
    goto L32;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant5295;
    goto L19;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant6706;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_45: int, actual_MinorFunction_8: int, actual_structPtr888PowerState: int, actual_Context_18: int, actual_IoStatus_4: int, actual_CompletionFunction_1: int) returns (Tmp_952: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWaitWakePoCompletionRoutine"} PciDrvWaitWakePoCompletionRoutine#0(actual_DeviceObject_21: int, actual_MinorFunction_3: int, actual_SD1: int, actual_Context_6: int, actual_IoStatus_1: int)
{
  var {:scalar} State_1: int;
  var {:pointer} fdoData_16: int;
  var {:pointer} Tmp_562: int;
  var {:pointer} SD1: int;
  var {:pointer} Context_6: int;
  var {:pointer} IoStatus_1: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;

  anon0:
    call {:si_unique_call 2512} State_1 := __HAVOC_malloc(8);
    call {:si_unique_call 2513} vslice_dummy_var_286 := __HAVOC_malloc(4);
    SD1 := actual_SD1;
    Context_6 := actual_Context_6;
    IoStatus_1 := actual_IoStatus_1;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} State_1 != 0;
    assume State_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} State_1 != 0;
    assume State_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(State_1)] := Mem_T.INT4[DeviceState__POWER_STATE(SD1)];
    call {:si_unique_call 2514} Tmp_562 := __HAVOC_malloc(124);
    Tmp_562 := strConst__li2bpl171;
    call {:si_unique_call 2515} DebugPrint(5, 4, Tmp_562);
    fdoData_16 := Context_6;
    assume {:nonnull} fdoData_16 != 0;
    assume fdoData_16 > 0;
    assume {:nonnull} fdoData_16 != 0;
    assume fdoData_16 > 0;
    call {:si_unique_call 2516} vslice_dummy_var_288 := NICConfigureForWakeUp(fdoData_16, 0);
    assume {:nonnull} fdoData_16 != 0;
    assume fdoData_16 > 0;
    call {:si_unique_call 2517} vslice_dummy_var_287 := KeSetEvent(WakeCompletedEvent__FDO_DATA(fdoData_16), 0, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume false;
    return;

  anon15_Then:
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L23;

  L23:
    assume false;
    return;

  anon16_Then:
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L23;

  anon18_Then:
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon17_Then:
    goto L23;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvWaitWakePoCompletionRoutine"} PciDrvWaitWakePoCompletionRoutine#0(actual_DeviceObject_21: int, actual_MinorFunction_3: int, actual_SD1: int, actual_Context_6: int, actual_IoStatus_1: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWaitWakePoCompletionRoutine"} PciDrvWaitWakePoCompletionRoutine#1(actual_DeviceObject_21: int, actual_MinorFunction_3: int, actual_SD1: int, actual_Context_6: int, actual_IoStatus_1: int)
{
  var {:scalar} State_1: int;
  var {:pointer} fdoData_16: int;
  var {:pointer} Tmp_562: int;
  var {:pointer} SD1: int;
  var {:pointer} Context_6: int;
  var {:pointer} IoStatus_1: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;

  anon0:
    call {:si_unique_call 2518} State_1 := __HAVOC_malloc(8);
    call {:si_unique_call 2519} vslice_dummy_var_289 := __HAVOC_malloc(4);
    SD1 := actual_SD1;
    Context_6 := actual_Context_6;
    IoStatus_1 := actual_IoStatus_1;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} State_1 != 0;
    assume State_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} State_1 != 0;
    assume State_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(State_1)] := Mem_T.INT4[DeviceState__POWER_STATE(SD1)];
    call {:si_unique_call 2520} Tmp_562 := __HAVOC_malloc(124);
    Tmp_562 := strConst__li2bpl171;
    call {:si_unique_call 2521} DebugPrint(5, 4, Tmp_562);
    fdoData_16 := Context_6;
    assume {:nonnull} fdoData_16 != 0;
    assume fdoData_16 > 0;
    assume {:nonnull} fdoData_16 != 0;
    assume fdoData_16 > 0;
    call {:si_unique_call 2522} vslice_dummy_var_293 := NICConfigureForWakeUp(fdoData_16, 0);
    assume {:nonnull} fdoData_16 != 0;
    assume fdoData_16 > 0;
    call {:si_unique_call 2523} vslice_dummy_var_290 := KeSetEvent(WakeCompletedEvent__FDO_DATA(fdoData_16), 0, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 2524} vslice_dummy_var_291 := PciDrvQueuePassiveLevelCallback#0(fdoData_16, li2bplFunctionConstant5766, 0, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L23;

  L23:
    call {:si_unique_call 2525} vslice_dummy_var_292 := PciDrvQueuePassiveLevelCallback#0(fdoData_16, li2bplFunctionConstant5767, 0, 0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L23;

  anon18_Then:
    goto L1;

  anon17_Then:
    goto L23;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvWaitWakePoCompletionRoutine"} PciDrvWaitWakePoCompletionRoutine#1(actual_DeviceObject_21: int, actual_MinorFunction_3: int, actual_SD1: int, actual_Context_6: int, actual_IoStatus_1: int);
  modifies alloc, Mem_T.INT4, yogi_error, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#0(actual_FdoData_88: int, actual_Irp_34: int) returns (Tmp_831: int)
{
  var {:scalar} FunctionCode: int;
  var {:pointer} Tmp_832: int;
  var {:pointer} Tmp_833: int;
  var {:dopa} {:scalar} bytesReturned: int;
  var {:scalar} oldIrql_13: int;
  var {:scalar} status_76: int;
  var {:pointer} pIrpSp_1: int;
  var {:pointer} FdoData_88: int;
  var {:pointer} Irp_34: int;
  var vslice_dummy_var_294: int;

  anon0:
    call {:si_unique_call 2526} bytesReturned := __HAVOC_malloc(4);
    FdoData_88 := actual_FdoData_88;
    Irp_34 := actual_Irp_34;
    call {:si_unique_call 2527} Tmp_832 := __HAVOC_malloc(68);
    status_76 := 0;
    Tmp_832 := strConst__li2bpl278;
    call {:si_unique_call 2528} DebugPrint(6, 32, Tmp_832);
    call {:si_unique_call 2529} pIrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_34);
    assume {:nonnull} pIrpSp_1 != 0;
    assume pIrpSp_1 > 0;
    havoc FunctionCode;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} FunctionCode != 1230852;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} FunctionCode != 1230868;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} FunctionCode == 1230872;
    call {:si_unique_call 2530} Tmp_833 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    Mem_T.INT4[Tmp_833] := oldIrql_13;
    call {:si_unique_call 2531} sdv_KeAcquireSpinLock(0, Tmp_833);
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    oldIrql_13 := Mem_T.INT4[Tmp_833];
    call {:si_unique_call 2532} status_76 := PciDrvQueueIoctlIrp(FdoData_88, Irp_34);
    call {:si_unique_call 2533} sdv_KeReleaseSpinLock(0, oldIrql_13);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  L38:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_76 != 259;
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_34))] := Mem_T.INT4[bytesReturned];
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    call {:si_unique_call 2534} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2535} vslice_dummy_var_294 := PciDrvIoDecrement(FdoData_88);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  L39:
    Tmp_831 := status_76;
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} status_76 == 259;
    goto L39;

  anon16_Then:
    assume {:partition} FunctionCode != 1230872;
    status_76 := -1073741637;
    goto L38;

  anon17_Then:
    assume {:partition} FunctionCode == 1230868;
    call {:si_unique_call 2536} status_76 := NICHandleSetOidRequest#0(FdoData_88, Irp_34);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} FunctionCode == 1230852;
    call {:si_unique_call 2537} status_76 := NICHandleQueryOidRequest(FdoData_88, Irp_34, bytesReturned);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := Mem_T.INT4[bytesReturned] + 4;
    goto L38;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#0(actual_FdoData_88: int, actual_Irp_34: int) returns (Tmp_831: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#1(actual_FdoData_88: int, actual_Irp_34: int) returns (Tmp_831: int)
{
  var {:scalar} FunctionCode: int;
  var {:pointer} Tmp_832: int;
  var {:pointer} Tmp_833: int;
  var {:dopa} {:scalar} bytesReturned: int;
  var {:scalar} oldIrql_13: int;
  var {:scalar} status_76: int;
  var {:pointer} pIrpSp_1: int;
  var {:pointer} FdoData_88: int;
  var {:pointer} Irp_34: int;
  var vslice_dummy_var_295: int;

  anon0:
    call {:si_unique_call 2538} bytesReturned := __HAVOC_malloc(4);
    FdoData_88 := actual_FdoData_88;
    Irp_34 := actual_Irp_34;
    call {:si_unique_call 2539} Tmp_832 := __HAVOC_malloc(68);
    status_76 := 0;
    Tmp_832 := strConst__li2bpl278;
    call {:si_unique_call 2540} DebugPrint(6, 32, Tmp_832);
    call {:si_unique_call 2541} pIrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_34);
    assume {:nonnull} pIrpSp_1 != 0;
    assume pIrpSp_1 > 0;
    havoc FunctionCode;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} FunctionCode != 1230852;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} FunctionCode != 1230868;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} FunctionCode == 1230872;
    call {:si_unique_call 2542} Tmp_833 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    Mem_T.INT4[Tmp_833] := oldIrql_13;
    call {:si_unique_call 2543} sdv_KeAcquireSpinLock(0, Tmp_833);
    assume {:nonnull} Tmp_833 != 0;
    assume Tmp_833 > 0;
    oldIrql_13 := Mem_T.INT4[Tmp_833];
    call {:si_unique_call 2544} status_76 := PciDrvQueueIoctlIrp(FdoData_88, Irp_34);
    call {:si_unique_call 2545} sdv_KeReleaseSpinLock(0, oldIrql_13);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  L38:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_76 != 259;
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_34))] := Mem_T.INT4[bytesReturned];
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    call {:si_unique_call 2546} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2547} vslice_dummy_var_295 := PciDrvIoDecrement(FdoData_88);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  L39:
    Tmp_831 := status_76;
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} status_76 == 259;
    goto L39;

  anon16_Then:
    assume {:partition} FunctionCode != 1230872;
    status_76 := -1073741637;
    goto L38;

  anon17_Then:
    assume {:partition} FunctionCode == 1230868;
    call {:si_unique_call 2548} status_76 := NICHandleSetOidRequest#1(FdoData_88, Irp_34);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} FunctionCode == 1230852;
    call {:si_unique_call 2549} status_76 := NICHandleQueryOidRequest(FdoData_88, Irp_34, bytesReturned);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := Mem_T.INT4[bytesReturned] + 4;
    goto L38;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#1(actual_FdoData_88: int, actual_Irp_34: int) returns (Tmp_831: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#0(actual_FdoData_90: int, actual_Irp_45: int) returns (Tmp_1075: int)
{
  var {:pointer} DataBuffer: int;
  var {:pointer} Tmp_1076: int;
  var {:scalar} Tmp_1077: int;
  var {:pointer} Tmp_1078: int;
  var {:pointer} Tmp_1079: int;
  var {:pointer} pSet: int;
  var {:dopa} {:scalar} unUsed_1: int;
  var {:scalar} InformationBufferLength_2: int;
  var {:scalar} oldDeviceState_1: int;
  var {:scalar} Oid: int;
  var {:pointer} Tmp_1080: int;
  var {:pointer} InformationBuffer_2: int;
  var {:pointer} Tmp_1081: int;
  var {:scalar} PacketFilter: int;
  var {:pointer} Tmp_1082: int;
  var {:pointer} Tmp_1083: int;
  var {:scalar} sdv_511: int;
  var {:scalar} BufferLength: int;
  var {:scalar} newDeviceState_1: int;
  var {:scalar} oldIrql_14: int;
  var {:scalar} sdv_513: int;
  var {:scalar} sdv_514: int;
  var {:scalar} WakeUpEnable: int;
  var {:scalar} status_83: int;
  var {:pointer} pIrpSp_2: int;
  var {:pointer} Tmp_1084: int;
  var {:pointer} Tmp_1085: int;
  var {:scalar} Tmp_1086: int;
  var {:pointer} FdoData_90: int;
  var {:pointer} Irp_45: int;

  anon0:
    call {:si_unique_call 2550} unUsed_1 := __HAVOC_malloc(4);
    FdoData_90 := actual_FdoData_90;
    Irp_45 := actual_Irp_45;
    call {:si_unique_call 2551} Tmp_1076 := __HAVOC_malloc(124);
    call {:si_unique_call 2552} Tmp_1078 := __HAVOC_malloc(132);
    call {:si_unique_call 2553} Tmp_1079 := __HAVOC_malloc(112);
    call {:si_unique_call 2554} Tmp_1080 := __HAVOC_malloc(16);
    call {:si_unique_call 2555} Tmp_1083 := __HAVOC_malloc(132);
    call {:si_unique_call 2556} Tmp_1084 := __HAVOC_malloc(100);
    call {:si_unique_call 2557} Tmp_1085 := __HAVOC_malloc(100);
    status_83 := 0;
    InformationBuffer_2 := 0;
    InformationBufferLength_2 := 0;
    call {:si_unique_call 2558} pIrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_45);
    assume {:nonnull} Irp_45 != 0;
    assume Irp_45 > 0;
    havoc DataBuffer;
    assume {:nonnull} pIrpSp_2 != 0;
    assume pIrpSp_2 > 0;
    havoc BufferLength;
    Tmp_1085 := strConst__li2bpl285;
    call {:si_unique_call 2559} DebugPrint(6, 32, Tmp_1085);
    Oid := 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} 8 > BufferLength;
    status_83 := 5;
    goto L33;

  L33:
    Tmp_1084 := strConst__li2bpl281;
    call {:si_unique_call 2560} DebugPrint(6, 32, Tmp_1084);
    Tmp_1075 := status_83;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon71_Then:
    assume {:partition} BufferLength >= 8;
    pSet := DataBuffer;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Oid;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Tmp_1080;
    InformationBuffer_2 := Tmp_1080;
    InformationBufferLength_2 := BufferLength - 4;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Oid != 65806;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Oid != 16843011;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Oid != -50265855;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Oid != -50265853;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Oid != -50265852;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Oid == -50265850;
    Tmp_1079 := strConst__li2bpl283;
    call {:si_unique_call 2561} DebugPrint(5, 32, Tmp_1079);
    call {:si_unique_call 2562} sdv_511 := IsPoMgmtSupported(FdoData_90);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_511 != 0;
    call {:si_unique_call 2563} sdv_RtlMoveMemory(0, 0, 4);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} WakeUpEnable != 0;
    Tmp_1077 := BAND(WakeUpEnable, 2);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Tmp_1077 != 2;
    status_83 := -1073741637;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto L33;

  anon78_Then:
    assume {:partition} Tmp_1077 == 2;
    goto L64;

  L64:
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    status_83 := 0;
    goto L33;

  anon57_Then:
    assume {:partition} WakeUpEnable == 0;
    goto L64;

  anon56_Then:
    assume {:partition} sdv_511 == 0;
    status_83 := -1073741637;
    goto L33;

  anon66_Then:
    assume {:partition} Oid != -50265850;
    status_83 := -1073741637;
    goto L33;

  anon67_Then:
    assume {:partition} Oid == -50265852;
    Tmp_1078 := strConst__li2bpl282;
    call {:si_unique_call 2564} DebugPrint(5, 32, Tmp_1078);
    call {:si_unique_call 2565} sdv_513 := IsPoMgmtSupported(FdoData_90);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_513 != 0;
    call {:si_unique_call 2566} status_83 := NICRemoveWakeUpPattern(FdoData_90, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon58_Then:
    assume {:partition} sdv_513 == 0;
    status_83 := -1073741637;
    goto L33;

  anon68_Then:
    assume {:partition} Oid == -50265853;
    Tmp_1083 := strConst__li2bpl282;
    call {:si_unique_call 2567} DebugPrint(5, 32, Tmp_1083);
    call {:si_unique_call 2568} sdv_514 := IsPoMgmtSupported(FdoData_90);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_514 != 0;
    call {:si_unique_call 2569} status_83 := NICAddWakeUpPattern(FdoData_90, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon59_Then:
    assume {:partition} sdv_514 == 0;
    status_83 := -1073741637;
    goto L33;

  anon69_Then:
    assume {:partition} Oid == -50265855;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_1075 := -1073741789;
    goto L1;

  anon55_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    Tmp_1082 := InformationBuffer_2;
    assume {:nonnull} Tmp_1082 != 0;
    assume Tmp_1082 > 0;
    newDeviceState_1 := Mem_T.INT4[Tmp_1082];
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    havoc oldDeviceState_1;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} oldDeviceState_1 == 1;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    assume false;
    return;

  anon74_Then:
    assume {:partition} oldDeviceState_1 != 1;
    goto L97;

  L97:
    call {:si_unique_call 2570} status_83 := NICSetPower#0(FdoData_90, newDeviceState_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} status_83 != 0;
    Tmp_1076 := strConst__li2bpl284;
    call {:si_unique_call 2571} DebugPrint(2, 32, Tmp_1076);
    goto L33;

  anon60_Then:
    assume {:partition} status_83 == 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} newDeviceState_1 == 1;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    assume false;
    return;

  anon61_Then:
    assume {:partition} newDeviceState_1 != 1;
    goto L111;

  L111:
    status_83 := 0;
    goto L33;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    assume {:partition} Oid == 16843011;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) != 0;
    Tmp_1075 := -1073741306;
    goto L1;

  anon54_Then:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) == 0;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} InformationBufferLength_2 > 192;
    Tmp_1086 := 192;
    goto L122;

  L122:
    InformationBufferLength_2 := Tmp_1086;
    call {:si_unique_call 2572} sdv_RtlMoveMemory(0, 0, InformationBufferLength_2);
    call {:si_unique_call 2573} Tmp_1081 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    Mem_T.INT4[Tmp_1081] := oldIrql_14;
    call {:si_unique_call 2574} sdv_KeAcquireSpinLock(0, Tmp_1081);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    oldIrql_14 := Mem_T.INT4[Tmp_1081];
    call {:si_unique_call 2575} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2576} status_83 := NICSetMulticastList(FdoData_90);
    call {:si_unique_call 2577} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2578} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto L33;

  anon73_Then:
    assume {:partition} 192 >= InformationBufferLength_2;
    Tmp_1086 := InformationBufferLength_2;
    goto L122;

  anon72_Then:
    assume {:partition} Oid == 65806;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_1075 := -1073741306;
    goto L1;

  anon53_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    call {:si_unique_call 2579} sdv_RtlMoveMemory(0, 0, 4);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} BAND(PacketFilter, -48) != 0;
    Tmp_1075 := -1073741637;
    goto L1;

  anon62_Then:
    assume {:partition} BAND(PacketFilter, -48) == 0;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    call {:si_unique_call 2580} Tmp_1081 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    Mem_T.INT4[Tmp_1081] := oldIrql_14;
    call {:si_unique_call 2581} sdv_KeAcquireSpinLock(0, Tmp_1081);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    oldIrql_14 := Mem_T.INT4[Tmp_1081];
    call {:si_unique_call 2582} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    call {:si_unique_call 2583} status_83 := PciDrvQueueIoctlIrp(FdoData_90, Irp_45);
    call {:si_unique_call 2584} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2585} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto L33;

  anon64_Then:
    call {:si_unique_call 2586} status_83 := NICSetPacketFilter(FdoData_90, PacketFilter);
    call {:si_unique_call 2587} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2588} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status_83 == 0;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto L33;

  anon65_Then:
    assume {:partition} status_83 != 0;
    goto L33;

  anon63_Then:
    goto L33;
}



procedure {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#0(actual_FdoData_90: int, actual_Irp_45: int) returns (Tmp_1075: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#1(actual_FdoData_90: int, actual_Irp_45: int) returns (Tmp_1075: int)
{
  var {:pointer} DataBuffer: int;
  var {:pointer} Tmp_1076: int;
  var {:scalar} Tmp_1077: int;
  var {:pointer} Tmp_1078: int;
  var {:pointer} Tmp_1079: int;
  var {:pointer} pSet: int;
  var {:dopa} {:scalar} unUsed_1: int;
  var {:scalar} InformationBufferLength_2: int;
  var {:scalar} oldDeviceState_1: int;
  var {:scalar} Oid: int;
  var {:pointer} Tmp_1080: int;
  var {:pointer} InformationBuffer_2: int;
  var {:pointer} Tmp_1081: int;
  var {:scalar} PacketFilter: int;
  var {:pointer} Tmp_1082: int;
  var {:pointer} Tmp_1083: int;
  var {:scalar} sdv_511: int;
  var {:scalar} BufferLength: int;
  var {:scalar} newDeviceState_1: int;
  var {:scalar} oldIrql_14: int;
  var {:scalar} sdv_513: int;
  var {:scalar} sdv_514: int;
  var {:scalar} WakeUpEnable: int;
  var {:scalar} status_83: int;
  var {:pointer} pIrpSp_2: int;
  var {:pointer} Tmp_1084: int;
  var {:pointer} Tmp_1085: int;
  var {:scalar} Tmp_1086: int;
  var {:pointer} FdoData_90: int;
  var {:pointer} Irp_45: int;
  var vslice_dummy_var_85: int;

  anon0:
    call {:si_unique_call 2589} unUsed_1 := __HAVOC_malloc(4);
    FdoData_90 := actual_FdoData_90;
    Irp_45 := actual_Irp_45;
    call {:si_unique_call 2590} Tmp_1076 := __HAVOC_malloc(124);
    call {:si_unique_call 2591} Tmp_1078 := __HAVOC_malloc(132);
    call {:si_unique_call 2592} Tmp_1079 := __HAVOC_malloc(112);
    call {:si_unique_call 2593} Tmp_1080 := __HAVOC_malloc(16);
    call {:si_unique_call 2594} Tmp_1083 := __HAVOC_malloc(132);
    call {:si_unique_call 2595} Tmp_1084 := __HAVOC_malloc(100);
    call {:si_unique_call 2596} Tmp_1085 := __HAVOC_malloc(100);
    status_83 := 0;
    InformationBuffer_2 := 0;
    InformationBufferLength_2 := 0;
    call {:si_unique_call 2597} pIrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_45);
    assume {:nonnull} Irp_45 != 0;
    assume Irp_45 > 0;
    havoc DataBuffer;
    assume {:nonnull} pIrpSp_2 != 0;
    assume pIrpSp_2 > 0;
    havoc BufferLength;
    Tmp_1085 := strConst__li2bpl285;
    call {:si_unique_call 2598} DebugPrint(6, 32, Tmp_1085);
    Oid := 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} 8 > BufferLength;
    status_83 := 5;
    goto L33;

  L33:
    Tmp_1084 := strConst__li2bpl281;
    call {:si_unique_call 2599} DebugPrint(6, 32, Tmp_1084);
    Tmp_1075 := status_83;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon71_Then:
    assume {:partition} BufferLength >= 8;
    pSet := DataBuffer;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Oid;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Tmp_1080;
    InformationBuffer_2 := Tmp_1080;
    InformationBufferLength_2 := BufferLength - 4;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Oid != 65806;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Oid != 16843011;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Oid != -50265855;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Oid != -50265853;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Oid != -50265852;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Oid == -50265850;
    Tmp_1079 := strConst__li2bpl283;
    call {:si_unique_call 2600} DebugPrint(5, 32, Tmp_1079);
    call {:si_unique_call 2601} sdv_511 := IsPoMgmtSupported(FdoData_90);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_511 != 0;
    call {:si_unique_call 2602} sdv_RtlMoveMemory(0, 0, 4);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} WakeUpEnable != 0;
    Tmp_1077 := BAND(WakeUpEnable, 2);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Tmp_1077 != 2;
    status_83 := -1073741637;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto L33;

  anon78_Then:
    assume {:partition} Tmp_1077 == 2;
    goto L64;

  L64:
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    status_83 := 0;
    goto L33;

  anon57_Then:
    assume {:partition} WakeUpEnable == 0;
    goto L64;

  anon56_Then:
    assume {:partition} sdv_511 == 0;
    status_83 := -1073741637;
    goto L33;

  anon66_Then:
    assume {:partition} Oid != -50265850;
    status_83 := -1073741637;
    goto L33;

  anon67_Then:
    assume {:partition} Oid == -50265852;
    Tmp_1078 := strConst__li2bpl282;
    call {:si_unique_call 2603} DebugPrint(5, 32, Tmp_1078);
    call {:si_unique_call 2604} sdv_513 := IsPoMgmtSupported(FdoData_90);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_513 != 0;
    call {:si_unique_call 2605} status_83 := NICRemoveWakeUpPattern(FdoData_90, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon58_Then:
    assume {:partition} sdv_513 == 0;
    status_83 := -1073741637;
    goto L33;

  anon68_Then:
    assume {:partition} Oid == -50265853;
    Tmp_1083 := strConst__li2bpl282;
    call {:si_unique_call 2606} DebugPrint(5, 32, Tmp_1083);
    call {:si_unique_call 2607} sdv_514 := IsPoMgmtSupported(FdoData_90);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_514 != 0;
    call {:si_unique_call 2608} status_83 := NICAddWakeUpPattern(FdoData_90, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon59_Then:
    assume {:partition} sdv_514 == 0;
    status_83 := -1073741637;
    goto L33;

  anon69_Then:
    assume {:partition} Oid == -50265855;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_1075 := -1073741789;
    goto L1;

  anon55_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    Tmp_1082 := InformationBuffer_2;
    assume {:nonnull} Tmp_1082 != 0;
    assume Tmp_1082 > 0;
    newDeviceState_1 := Mem_T.INT4[Tmp_1082];
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    havoc oldDeviceState_1;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} oldDeviceState_1 == 1;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    havoc vslice_dummy_var_85;
    call {:si_unique_call 2609} status_83 := PciDrvPowerBeginQueuingIrps#0(vslice_dummy_var_85, 1, 0);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L97;

  L97:
    call {:si_unique_call 2610} status_83 := NICSetPower#1(FdoData_90, newDeviceState_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} status_83 != 0;
    Tmp_1076 := strConst__li2bpl284;
    call {:si_unique_call 2611} DebugPrint(2, 32, Tmp_1076);
    goto L33;

  anon60_Then:
    assume {:partition} status_83 == 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} newDeviceState_1 == 1;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    call {:si_unique_call 2612} PciDrvProcessQueuedRequests#0(FdoData_90);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} yogi_error != 1;
    goto L111;

  L111:
    status_83 := 0;
    goto L33;

  anon77_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} newDeviceState_1 != 1;
    goto L111;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    assume {:partition} oldDeviceState_1 != 1;
    goto L97;

  anon70_Then:
    assume {:partition} Oid == 16843011;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) != 0;
    Tmp_1075 := -1073741306;
    goto L1;

  anon54_Then:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) == 0;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} InformationBufferLength_2 > 192;
    Tmp_1086 := 192;
    goto L122;

  L122:
    InformationBufferLength_2 := Tmp_1086;
    call {:si_unique_call 2613} sdv_RtlMoveMemory(0, 0, InformationBufferLength_2);
    call {:si_unique_call 2614} Tmp_1081 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    Mem_T.INT4[Tmp_1081] := oldIrql_14;
    call {:si_unique_call 2615} sdv_KeAcquireSpinLock(0, Tmp_1081);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    oldIrql_14 := Mem_T.INT4[Tmp_1081];
    call {:si_unique_call 2616} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2617} status_83 := NICSetMulticastList(FdoData_90);
    call {:si_unique_call 2618} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2619} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto L33;

  anon73_Then:
    assume {:partition} 192 >= InformationBufferLength_2;
    Tmp_1086 := InformationBufferLength_2;
    goto L122;

  anon72_Then:
    assume {:partition} Oid == 65806;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_1075 := -1073741306;
    goto L1;

  anon53_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    call {:si_unique_call 2620} sdv_RtlMoveMemory(0, 0, 4);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} BAND(PacketFilter, -48) != 0;
    Tmp_1075 := -1073741637;
    goto L1;

  anon62_Then:
    assume {:partition} BAND(PacketFilter, -48) == 0;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    call {:si_unique_call 2621} Tmp_1081 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    Mem_T.INT4[Tmp_1081] := oldIrql_14;
    call {:si_unique_call 2622} sdv_KeAcquireSpinLock(0, Tmp_1081);
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    oldIrql_14 := Mem_T.INT4[Tmp_1081];
    call {:si_unique_call 2623} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    call {:si_unique_call 2624} status_83 := PciDrvQueueIoctlIrp(FdoData_90, Irp_45);
    call {:si_unique_call 2625} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2626} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto L33;

  anon64_Then:
    call {:si_unique_call 2627} status_83 := NICSetPacketFilter(FdoData_90, PacketFilter);
    call {:si_unique_call 2628} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2629} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status_83 == 0;
    assume {:nonnull} FdoData_90 != 0;
    assume FdoData_90 > 0;
    goto L33;

  anon65_Then:
    assume {:partition} status_83 != 0;
    goto L33;

  anon63_Then:
    goto L33;
}



procedure {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#1(actual_FdoData_90: int, actual_Irp_45: int) returns (Tmp_1075: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSetPower"} NICSetPower#0(actual_FdoData_11: int, actual_PowerState_5: int) returns (Tmp_72: int)
{
  var {:pointer} Tmp_73: int;
  var {:scalar} status_9: int;
  var {:pointer} Tmp_75: int;
  var {:pointer} FdoData_11: int;
  var {:scalar} PowerState_5: int;
  var vslice_dummy_var_296: int;

  anon0:
    FdoData_11 := actual_FdoData_11;
    PowerState_5 := actual_PowerState_5;
    call {:si_unique_call 2630} Tmp_73 := __HAVOC_malloc(100);
    call {:si_unique_call 2631} Tmp_75 := __HAVOC_malloc(124);
    status_9 := 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} PowerState_5 == 1;
    Tmp_73 := strConst__li2bpl23;
    call {:si_unique_call 2632} DebugPrint(5, 4, Tmp_73);
    call {:si_unique_call 2633} vslice_dummy_var_296 := MPSetPowerD0#0(FdoData_11);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L15;

  L15:
    Tmp_72 := status_9;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} PowerState_5 != 1;
    Tmp_75 := strConst__li2bpl22;
    call {:si_unique_call 2634} DebugPrint(5, 4, Tmp_75);
    call {:si_unique_call 2635} status_9 := MPSetPowerLow(FdoData_11, PowerState_5);
    goto L15;
}



procedure {:origName "NICSetPower"} NICSetPower#0(actual_FdoData_11: int, actual_PowerState_5: int) returns (Tmp_72: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSetPower"} NICSetPower#1(actual_FdoData_11: int, actual_PowerState_5: int) returns (Tmp_72: int)
{
  var {:pointer} Tmp_73: int;
  var {:scalar} status_9: int;
  var {:pointer} Tmp_75: int;
  var {:pointer} FdoData_11: int;
  var {:scalar} PowerState_5: int;
  var vslice_dummy_var_297: int;

  anon0:
    FdoData_11 := actual_FdoData_11;
    PowerState_5 := actual_PowerState_5;
    call {:si_unique_call 2636} Tmp_73 := __HAVOC_malloc(100);
    call {:si_unique_call 2637} Tmp_75 := __HAVOC_malloc(124);
    status_9 := 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} PowerState_5 == 1;
    Tmp_73 := strConst__li2bpl23;
    call {:si_unique_call 2638} DebugPrint(5, 4, Tmp_73);
    call {:si_unique_call 2639} vslice_dummy_var_297 := MPSetPowerD0#1(FdoData_11);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L15;

  L15:
    Tmp_72 := status_9;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} PowerState_5 != 1;
    Tmp_75 := strConst__li2bpl22;
    call {:si_unique_call 2640} DebugPrint(5, 4, Tmp_75);
    call {:si_unique_call 2641} status_9 := MPSetPowerLow(FdoData_11, PowerState_5);
    goto L15;
}



procedure {:origName "NICSetPower"} NICSetPower#1(actual_FdoData_11: int, actual_PowerState_5: int) returns (Tmp_72: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#0(actual_DeviceObject_9: int, actual_Irp_6: int, actual_Direction_1: int, actual_Result: int) returns (Tmp_196: int)
{
  var {:pointer} fdoData_7: int;
  var {:pointer} Tmp_198: int;
  var {:scalar} status_19: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} Irp_6: int;
  var {:scalar} Direction_1: int;
  var {:scalar} Result: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;

  anon0:
    DeviceObject_9 := actual_DeviceObject_9;
    Irp_6 := actual_Irp_6;
    Direction_1 := actual_Direction_1;
    Result := actual_Result;
    call {:si_unique_call 2642} Tmp_198 := __HAVOC_malloc(152);
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    havoc fdoData_7;
    Tmp_198 := strConst__li2bpl68;
    call {:si_unique_call 2643} DebugPrint(5, 4, Tmp_198);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Direction_1 == 2;
    goto L11;

  L11:
    call {:si_unique_call 2644} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 2645} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2646} vslice_dummy_var_298 := PciDrvIoDecrement(fdoData_7);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    Tmp_196 := Result;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} Direction_1 != 2;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Result >= 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 2647} status_19 := PciDrvDispatchPowerDefault#0(DeviceObject_9, Irp_6);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2648} vslice_dummy_var_299 := PciDrvIoDecrement(fdoData_7);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_196 := status_19;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} 0 > Result;
    goto L11;
}



procedure {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#0(actual_DeviceObject_9: int, actual_Irp_6: int, actual_Direction_1: int, actual_Result: int) returns (Tmp_196: int);
  modifies alloc, Mem_T.INT4, yogi_error, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == 0 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#1(actual_DeviceObject_9: int, actual_Irp_6: int, actual_Direction_1: int, actual_Result: int) returns (Tmp_196: int)
{
  var {:pointer} fdoData_7: int;
  var {:pointer} Tmp_198: int;
  var {:scalar} status_19: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} Irp_6: int;
  var {:scalar} Direction_1: int;
  var {:scalar} Result: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;

  anon0:
    DeviceObject_9 := actual_DeviceObject_9;
    Irp_6 := actual_Irp_6;
    Direction_1 := actual_Direction_1;
    Result := actual_Result;
    call {:si_unique_call 2649} Tmp_198 := __HAVOC_malloc(152);
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    havoc fdoData_7;
    Tmp_198 := strConst__li2bpl68;
    call {:si_unique_call 2650} DebugPrint(5, 4, Tmp_198);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Direction_1 == 2;
    goto L11;

  L11:
    call {:si_unique_call 2651} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 2652} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2653} vslice_dummy_var_300 := PciDrvIoDecrement(fdoData_7);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    Tmp_196 := Result;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} Direction_1 != 2;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Result >= 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 2654} status_19 := PciDrvDispatchPowerDefault#1(DeviceObject_9, Irp_6);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2655} vslice_dummy_var_301 := PciDrvIoDecrement(fdoData_7);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_196 := status_19;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} 0 > Result;
    goto L11;
}



procedure {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#1(actual_DeviceObject_9: int, actual_Irp_6: int, actual_Direction_1: int, actual_Result: int) returns (Tmp_196: int);
  modifies alloc, Mem_T.INT4, yogi_error, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#0(actual_DeviceObject_8: int, actual_Irp_5: int) returns (Tmp_194: int)
{
  var {:scalar} status_18: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} Irp_5: int;

  anon0:
    DeviceObject_8 := actual_DeviceObject_8;
    Irp_5 := actual_Irp_5;
    call {:si_unique_call 2656} sdv_do_paged_code_check();
    call {:si_unique_call 2657} PoStartNextPowerIrp(0);
    call {:si_unique_call 2658} sdv_IoSkipCurrentIrpStackLocation(Irp_5);
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    call {:si_unique_call 2659} status_18 := PoCallDriver#0(0, Irp_5);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_194 := status_18;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#0(actual_DeviceObject_8: int, actual_Irp_5: int) returns (Tmp_194: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == 0 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#1(actual_DeviceObject_8: int, actual_Irp_5: int) returns (Tmp_194: int)
{
  var {:scalar} status_18: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} Irp_5: int;

  anon0:
    DeviceObject_8 := actual_DeviceObject_8;
    Irp_5 := actual_Irp_5;
    call {:si_unique_call 2660} sdv_do_paged_code_check();
    call {:si_unique_call 2661} PoStartNextPowerIrp(0);
    call {:si_unique_call 2662} sdv_IoSkipCurrentIrpStackLocation(Irp_5);
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    call {:si_unique_call 2663} status_18 := PoCallDriver#1(0, Irp_5);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_194 := status_18;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#1(actual_DeviceObject_8: int, actual_Irp_5: int) returns (Tmp_194: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver#0(actual_DeviceObject_40: int, actual_Irp_35: int) returns (Tmp_901: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_79: int;
  var {:pointer} Irp_35: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;

  anon0:
    call {:si_unique_call 2664} completion := __HAVOC_malloc(4);
    Irp_35 := actual_Irp_35;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.INT4[completion] := 0;
    status_79 := 259;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L21;

  L21:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L29;

  L29:
    Tmp_901 := status_79;
    goto LM2;

  LM2:
    return;

  anon56_Then:
    havoc vslice_dummy_var_86;
    call {:si_unique_call 2665} vslice_dummy_var_302 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_86, completion);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L23;

  anon54_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L19;

  anon69_Then:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L58;

  L58:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L60;

  L60:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    havoc vslice_dummy_var_87;
    call {:si_unique_call 2666} vslice_dummy_var_305 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_87, completion);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L62;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L58;

  anon70_Then:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L32;

  L32:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L34;

  L34:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    havoc vslice_dummy_var_88;
    call {:si_unique_call 2667} vslice_dummy_var_303 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_88, completion);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L36;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L32;

  anon53_Then:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L45;

  L45:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L47;

  L47:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    havoc vslice_dummy_var_89;
    call {:si_unique_call 2668} vslice_dummy_var_304 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_89, completion);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    goto L29;

  anon63_Then:
    goto L29;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L49;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L45;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver#0(actual_DeviceObject_40: int, actual_Irp_35: int) returns (Tmp_901: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == 0 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver#1(actual_DeviceObject_40: int, actual_Irp_35: int) returns (Tmp_901: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_79: int;
  var {:pointer} Irp_35: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;

  anon0:
    call {:si_unique_call 2669} completion := __HAVOC_malloc(4);
    Irp_35 := actual_Irp_35;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.INT4[completion] := 0;
    status_79 := 259;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L21;

  L21:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L29;

  L29:
    Tmp_901 := status_79;
    goto LM2;

  LM2:
    return;

  anon56_Then:
    havoc vslice_dummy_var_90;
    call {:si_unique_call 2670} vslice_dummy_var_306 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_90, completion);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L23;

  anon54_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L19;

  anon69_Then:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L58;

  L58:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L60;

  L60:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    havoc vslice_dummy_var_91;
    call {:si_unique_call 2671} vslice_dummy_var_309 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_91, completion);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L62;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L58;

  anon70_Then:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L32;

  L32:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L34;

  L34:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    havoc vslice_dummy_var_92;
    call {:si_unique_call 2672} vslice_dummy_var_307 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_92, completion);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L36;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L32;

  anon53_Then:
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L45;

  L45:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_35;
    goto L47;

  L47:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_35;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    havoc vslice_dummy_var_93;
    call {:si_unique_call 2673} vslice_dummy_var_308 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_35, vslice_dummy_var_93, completion);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    goto L29;

  anon63_Then:
    goto L29;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_35;
    goto L49;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_35;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_35;
    goto L45;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver#1(actual_DeviceObject_40: int, actual_Irp_35: int) returns (Tmp_901: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_51: int, actual_Irp_43: int, actual_Context_21: int, actual_Completion: int) returns (Tmp_1034: int)
{
  var {:scalar} Status_2: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_51: int;
  var {:pointer} Irp_43: int;
  var {:pointer} Context_21: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_51 := actual_DeviceObject_51;
    Irp_43 := actual_Irp_43;
    Context_21 := actual_Context_21;
    Completion := actual_Completion;
    call {:si_unique_call 2674} irpsp := sdv_IoGetNextIrpStackLocation(Irp_43);
    Status_2 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2675} Status_2 := PciDrvCompletionDevicePowerUp#0(DeviceObject_51, Irp_43, Context_21);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2676} Status_2 := PciDrvCompletionSystemPowerUp#0(DeviceObject_51, Irp_43, Context_21);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2677} Status_2 := PciDrvDispatchPnpComplete(DeviceObject_51, Irp_43, Context_21);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2678} Status_2 := PciDrvDispatchPnpStartComplete#0(DeviceObject_51, Irp_43, Context_21);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2679} Status_2 := PciDrvWaitWakeIoCompletionRoutine(DeviceObject_51, Irp_43, Context_21);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L79;

  L79:
    Tmp_1034 := Status_2;
    goto LM2;

  LM2:
    return;

  anon22_Then:
    goto L79;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    goto L62;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    goto L45;

  anon25_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    goto L28;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_51: int, actual_Irp_43: int, actual_Context_21: int, actual_Completion: int) returns (Tmp_1034: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, alloc, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == 0 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_51: int, actual_Irp_43: int, actual_Context_21: int, actual_Completion: int) returns (Tmp_1034: int)
{
  var {:scalar} Status_2: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_51: int;
  var {:pointer} Irp_43: int;
  var {:pointer} Context_21: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_51 := actual_DeviceObject_51;
    Irp_43 := actual_Irp_43;
    Context_21 := actual_Context_21;
    Completion := actual_Completion;
    call {:si_unique_call 2680} irpsp := sdv_IoGetNextIrpStackLocation(Irp_43);
    Status_2 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2681} Status_2 := PciDrvCompletionDevicePowerUp#1(DeviceObject_51, Irp_43, Context_21);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2682} Status_2 := PciDrvCompletionSystemPowerUp#1(DeviceObject_51, Irp_43, Context_21);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2683} Status_2 := PciDrvDispatchPnpComplete(DeviceObject_51, Irp_43, Context_21);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2684} Status_2 := PciDrvDispatchPnpStartComplete#1(DeviceObject_51, Irp_43, Context_21);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2685} Status_2 := PciDrvWaitWakeIoCompletionRoutine(DeviceObject_51, Irp_43, Context_21);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L79;

  L79:
    Tmp_1034 := Status_2;
    goto LM2;

  LM2:
    return;

  anon22_Then:
    goto L79;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    goto L62;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    goto L45;

  anon25_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    goto L28;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_51: int, actual_Irp_43: int, actual_Context_21: int, actual_Completion: int) returns (Tmp_1034: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, alloc, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#0(actual_DeviceObject_11: int, actual_Irp_8: int, actual_NotUsed: int) returns (Tmp_202: int)
{
  var {:pointer} Tmp_203: int;
  var {:pointer} fdoData_9: int;
  var {:scalar} status_21: int;
  var {:pointer} DeviceObject_11: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;

  anon0:
    DeviceObject_11 := actual_DeviceObject_11;
    Irp_8 := actual_Irp_8;
    call {:si_unique_call 2686} Tmp_203 := __HAVOC_malloc(156);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc fdoData_9;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    havoc status_21;
    call {:si_unique_call 2687} vslice_dummy_var_311 := sdv_IoGetCurrentIrpStackLocation(Irp_8);
    Tmp_203 := strConst__li2bpl70;
    call {:si_unique_call 2688} DebugPrint(5, 4, Tmp_203);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_21 >= 0;
    assume false;
    return;

  anon11_Then:
    assume {:partition} 0 > status_21;
    call {:si_unique_call 2689} PoStartNextPowerIrp(0);
    call {:si_unique_call 2690} vslice_dummy_var_310 := PciDrvIoDecrement(fdoData_9);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_202 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#0(actual_DeviceObject_11: int, actual_Irp_8: int, actual_NotUsed: int) returns (Tmp_202: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#1(actual_DeviceObject_11: int, actual_Irp_8: int, actual_NotUsed: int) returns (Tmp_202: int)
{
  var {:pointer} Tmp_203: int;
  var {:pointer} fdoData_9: int;
  var {:scalar} status_21: int;
  var {:pointer} DeviceObject_11: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;

  anon0:
    DeviceObject_11 := actual_DeviceObject_11;
    Irp_8 := actual_Irp_8;
    call {:si_unique_call 2691} Tmp_203 := __HAVOC_malloc(156);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc fdoData_9;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    havoc status_21;
    call {:si_unique_call 2692} vslice_dummy_var_314 := sdv_IoGetCurrentIrpStackLocation(Irp_8);
    Tmp_203 := strConst__li2bpl70;
    call {:si_unique_call 2693} DebugPrint(5, 4, Tmp_203);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_21 >= 0;
    call {:si_unique_call 2694} status_21 := PciDrvQueuePassiveLevelCallback#0(fdoData_9, li2bplFunctionConstant6710, Irp_8, 2);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_21 >= 0;
    goto L27;

  L27:
    Tmp_202 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} 0 > status_21;
    call {:si_unique_call 2695} vslice_dummy_var_312 := PciDrvFinalizeDevicePowerIrp#0(DeviceObject_11, Irp_8, 2, status_21);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} 0 > status_21;
    call {:si_unique_call 2696} PoStartNextPowerIrp(0);
    call {:si_unique_call 2697} vslice_dummy_var_313 := PciDrvIoDecrement(fdoData_9);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_202 := 0;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#1(actual_DeviceObject_11: int, actual_Irp_8: int, actual_NotUsed: int) returns (Tmp_202: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionSystemPowerUp"} PciDrvCompletionSystemPowerUp#0(actual_Fdo: int, actual_Irp_9: int, actual_NotUsed_1: int) returns (Tmp_210: int)
{
  var {:pointer} Tmp_211: int;
  var {:pointer} fdoData_11: int;
  var {:scalar} status_22: int;
  var {:pointer} Fdo: int;
  var {:pointer} Irp_9: int;
  var vslice_dummy_var_315: int;

  anon0:
    Fdo := actual_Fdo;
    Irp_9 := actual_Irp_9;
    call {:si_unique_call 2698} Tmp_211 := __HAVOC_malloc(156);
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    havoc fdoData_11;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    havoc status_22;
    Tmp_211 := strConst__li2bpl72;
    call {:si_unique_call 2699} DebugPrint(5, 4, Tmp_211);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_22 >= 0;
    call {:si_unique_call 2700} PciDrvQueueCorrespondingDeviceIrp#0(Irp_9, Fdo);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    Tmp_210 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} 0 > status_22;
    call {:si_unique_call 2701} PoStartNextPowerIrp(0);
    call {:si_unique_call 2702} vslice_dummy_var_315 := PciDrvIoDecrement(fdoData_11);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_210 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvCompletionSystemPowerUp"} PciDrvCompletionSystemPowerUp#0(actual_Fdo: int, actual_Irp_9: int, actual_NotUsed_1: int) returns (Tmp_210: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionSystemPowerUp"} PciDrvCompletionSystemPowerUp#1(actual_Fdo: int, actual_Irp_9: int, actual_NotUsed_1: int) returns (Tmp_210: int)
{
  var {:pointer} Tmp_211: int;
  var {:pointer} fdoData_11: int;
  var {:scalar} status_22: int;
  var {:pointer} Fdo: int;
  var {:pointer} Irp_9: int;
  var vslice_dummy_var_316: int;

  anon0:
    Fdo := actual_Fdo;
    Irp_9 := actual_Irp_9;
    call {:si_unique_call 2703} Tmp_211 := __HAVOC_malloc(156);
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    havoc fdoData_11;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    havoc status_22;
    Tmp_211 := strConst__li2bpl72;
    call {:si_unique_call 2704} DebugPrint(5, 4, Tmp_211);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_22 >= 0;
    call {:si_unique_call 2705} PciDrvQueueCorrespondingDeviceIrp#1(Irp_9, Fdo);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    Tmp_210 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} 0 > status_22;
    call {:si_unique_call 2706} PoStartNextPowerIrp(0);
    call {:si_unique_call 2707} vslice_dummy_var_316 := PciDrvIoDecrement(fdoData_11);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_210 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvCompletionSystemPowerUp"} PciDrvCompletionSystemPowerUp#1(actual_Fdo: int, actual_Irp_9: int, actual_NotUsed_1: int) returns (Tmp_210: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueueCorrespondingDeviceIrp"} PciDrvQueueCorrespondingDeviceIrp#0(actual_SIrp: int, actual_DeviceObject: int)
{
  var {:pointer} Tmp_151: int;
  var {:scalar} sIrpCompleted: int;
  var {:pointer} fdoData: int;
  var {:pointer} Tmp_153: int;
  var {:scalar} status_14: int;
  var {:pointer} stack: int;
  var {:scalar} minor: int;
  var {:scalar} state: int;
  var {:pointer} SIrp: int;
  var {:pointer} DeviceObject: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_318: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_94: int;

  anon0:
    call {:si_unique_call 2708} vslice_dummy_var_317 := __HAVOC_malloc(4);
    call {:si_unique_call 2709} state := __HAVOC_malloc(8);
    SIrp := actual_SIrp;
    DeviceObject := actual_DeviceObject;
    call {:si_unique_call 2710} Tmp_151 := __HAVOC_malloc(100);
    call {:si_unique_call 2711} Tmp_153 := __HAVOC_malloc(172);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc fdoData;
    call {:si_unique_call 2712} stack := sdv_IoGetCurrentIrpStackLocation(SIrp);
    assume {:nonnull} stack != 0;
    assume stack > 0;
    havoc minor;
    sIrpCompleted := 0;
    Tmp_153 := strConst__li2bpl36;
    call {:si_unique_call 2713} DebugPrint(5, 4, Tmp_153);
    assume {:nonnull} state != 0;
    assume state > 0;
    call {:si_unique_call 2714} status_14 := PciDrvGetPowerPoliciesDeviceState(SIrp, DeviceObject, DeviceState__POWER_STATE(state));
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_14 >= 0;
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_151 := strConst__li2bpl35;
    call {:si_unique_call 2715} DebugPrint(5, 4, Tmp_151);
    assume {:nonnull} SIrp != 0;
    assume SIrp > 0;
    call {:si_unique_call 2716} vslice_dummy_var_321 := PciDrvIoIncrement(fdoData);
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    call {:si_unique_call 2717} PoStartNextPowerIrp(0);
    call {:si_unique_call 2718} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2719} vslice_dummy_var_318 := PciDrvIoDecrement(fdoData);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    sIrpCompleted := 1;
    goto L27;

  L27:
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    havoc vslice_dummy_var_94;
    call {:si_unique_call 2720} status_14 := PoRequestPowerIrp#0(vslice_dummy_var_94, minor, state, li2bplFunctionConstant6706, fdoData, 0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  L24:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_14 < 0;
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sIrpCompleted != 0;
    call {:si_unique_call 2721} vslice_dummy_var_319 := PciDrvIoDecrement(fdoData);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} sIrpCompleted == 0;
    call {:si_unique_call 2722} PoStartNextPowerIrp(0);
    assume {:nonnull} SIrp != 0;
    assume SIrp > 0;
    call {:si_unique_call 2723} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2724} vslice_dummy_var_320 := PciDrvIoDecrement(fdoData);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} 0 <= status_14;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    goto L27;

  anon22_Then:
    goto L27;

  anon19_Then:
    assume {:partition} 0 > status_14;
    goto L24;
}



procedure {:origName "PciDrvQueueCorrespondingDeviceIrp"} PciDrvQueueCorrespondingDeviceIrp#0(actual_SIrp: int, actual_DeviceObject: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueueCorrespondingDeviceIrp"} PciDrvQueueCorrespondingDeviceIrp#1(actual_SIrp: int, actual_DeviceObject: int)
{
  var {:pointer} Tmp_151: int;
  var {:scalar} sIrpCompleted: int;
  var {:pointer} fdoData: int;
  var {:pointer} Tmp_153: int;
  var {:scalar} status_14: int;
  var {:pointer} stack: int;
  var {:scalar} minor: int;
  var {:scalar} state: int;
  var {:pointer} SIrp: int;
  var {:pointer} DeviceObject: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_95: int;

  anon0:
    call {:si_unique_call 2725} vslice_dummy_var_322 := __HAVOC_malloc(4);
    call {:si_unique_call 2726} state := __HAVOC_malloc(8);
    SIrp := actual_SIrp;
    DeviceObject := actual_DeviceObject;
    call {:si_unique_call 2727} Tmp_151 := __HAVOC_malloc(100);
    call {:si_unique_call 2728} Tmp_153 := __HAVOC_malloc(172);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc fdoData;
    call {:si_unique_call 2729} stack := sdv_IoGetCurrentIrpStackLocation(SIrp);
    assume {:nonnull} stack != 0;
    assume stack > 0;
    havoc minor;
    sIrpCompleted := 0;
    Tmp_153 := strConst__li2bpl36;
    call {:si_unique_call 2730} DebugPrint(5, 4, Tmp_153);
    assume {:nonnull} state != 0;
    assume state > 0;
    call {:si_unique_call 2731} status_14 := PciDrvGetPowerPoliciesDeviceState(SIrp, DeviceObject, DeviceState__POWER_STATE(state));
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_14 >= 0;
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_151 := strConst__li2bpl35;
    call {:si_unique_call 2732} DebugPrint(5, 4, Tmp_151);
    assume {:nonnull} SIrp != 0;
    assume SIrp > 0;
    call {:si_unique_call 2733} vslice_dummy_var_326 := PciDrvIoIncrement(fdoData);
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    call {:si_unique_call 2734} PoStartNextPowerIrp(0);
    call {:si_unique_call 2735} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2736} vslice_dummy_var_323 := PciDrvIoDecrement(fdoData);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    sIrpCompleted := 1;
    goto L27;

  L27:
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    havoc vslice_dummy_var_95;
    call {:si_unique_call 2737} status_14 := PoRequestPowerIrp#1(vslice_dummy_var_95, minor, state, li2bplFunctionConstant6706, fdoData, 0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  L24:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_14 < 0;
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sIrpCompleted != 0;
    call {:si_unique_call 2738} vslice_dummy_var_324 := PciDrvIoDecrement(fdoData);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} sIrpCompleted == 0;
    call {:si_unique_call 2739} PoStartNextPowerIrp(0);
    assume {:nonnull} SIrp != 0;
    assume SIrp > 0;
    call {:si_unique_call 2740} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2741} vslice_dummy_var_325 := PciDrvIoDecrement(fdoData);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} 0 <= status_14;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    goto L27;

  anon22_Then:
    goto L27;

  anon19_Then:
    assume {:partition} 0 > status_14;
    goto L24;
}



procedure {:origName "PciDrvQueueCorrespondingDeviceIrp"} PciDrvQueueCorrespondingDeviceIrp#1(actual_SIrp: int, actual_DeviceObject: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPnpStartComplete"} PciDrvDispatchPnpStartComplete#0(actual_DeviceObject_29: int, actual_Irp_21: int, actual_Context_10: int) returns (Tmp_721: int)
{
  var {:pointer} fdoData_24: int;
  var {:scalar} status_58: int;
  var {:pointer} Irp_21: int;
  var {:pointer} Context_10: int;
  var vslice_dummy_var_327: int;

  anon0:
    Irp_21 := actual_Irp_21;
    Context_10 := actual_Context_10;
    fdoData_24 := Context_10;
    assume false;
    return;
}



procedure {:origName "PciDrvDispatchPnpStartComplete"} PciDrvDispatchPnpStartComplete#0(actual_DeviceObject_29: int, actual_Irp_21: int, actual_Context_10: int) returns (Tmp_721: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPnpStartComplete"} PciDrvDispatchPnpStartComplete#1(actual_DeviceObject_29: int, actual_Irp_21: int, actual_Context_10: int) returns (Tmp_721: int)
{
  var {:pointer} fdoData_24: int;
  var {:scalar} status_58: int;
  var {:pointer} Irp_21: int;
  var {:pointer} Context_10: int;
  var vslice_dummy_var_328: int;

  anon0:
    Irp_21 := actual_Irp_21;
    Context_10 := actual_Context_10;
    fdoData_24 := Context_10;
    call {:si_unique_call 2742} status_58 := PciDrvQueuePassiveLevelCallback#0(fdoData_24, li2bplFunctionConstant7190, Irp_21, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_58 >= 0;
    Tmp_721 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} 0 > status_58;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    call {:si_unique_call 2743} vslice_dummy_var_328 := PciDrvIoDecrement(fdoData_24);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_721 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvDispatchPnpStartComplete"} PciDrvDispatchPnpStartComplete#1(actual_DeviceObject_29: int, actual_Irp_21: int, actual_Context_10: int) returns (Tmp_721: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCallbackHandleDeviceSetPower"} PciDrvCallbackHandleDeviceSetPower#0(actual_DeviceObject_4: int, actual_Context_2: int)
{
  var {:pointer} SD3: int;
  var {:scalar} newDeviceAction: int;
  var {:scalar} Tmp_175: int;
  var {:pointer} Irp_1: int;
  var {:scalar} Direction: int;
  var {:scalar} oldDeviceState: int;
  var {:pointer} Tmp_176: int;
  var {:scalar} sdv_3: int;
  var {:pointer} sdv_90: int;
  var {:pointer} fdoData_3: int;
  var {:scalar} newState: int;
  var {:pointer} Tmp_177: int;
  var {:scalar} newDeviceState: int;
  var {:pointer} sdv_92: int;
  var {:pointer} Tmp_178: int;
  var {:scalar} status_16: int;
  var {:pointer} stack_4: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Context_2: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;

  anon0:
    call {:si_unique_call 2744} sdv_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2745} newState := __HAVOC_malloc(8);
    call {:si_unique_call 2746} vslice_dummy_var_329 := __HAVOC_malloc(4);
    DeviceObject_4 := actual_DeviceObject_4;
    Context_2 := actual_Context_2;
    call {:si_unique_call 2747} Tmp_176 := __HAVOC_malloc(176);
    call {:si_unique_call 2748} Tmp_177 := __HAVOC_malloc(108);
    call {:si_unique_call 2749} Tmp_178 := __HAVOC_malloc(164);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc fdoData_3;
    status_16 := 0;
    assume {:nonnull} Context_2 != 0;
    assume Context_2 > 0;
    havoc Irp_1;
    assume {:nonnull} Context_2 != 0;
    assume Context_2 > 0;
    havoc Direction;
    call {:si_unique_call 2750} stack_4 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    Tmp_176 := strConst__li2bpl50;
    call {:si_unique_call 2751} DebugPrint(5, 4, Tmp_176);
    call {:si_unique_call 2752} sdv_do_paged_code_check();
    assume {:nonnull} newState != 0;
    assume newState > 0;
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    assume {:nonnull} newState != 0;
    assume newState > 0;
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(newState)] := Mem_T.INT4[DeviceState__POWER_STATE(State_unnamed_tag_39(Power_unnamed_tag_8(Parameters__IO_STACK_LOCATION(stack_4))))];
    assume {:nonnull} newState != 0;
    assume newState > 0;
    newDeviceState := Mem_T.INT4[DeviceState__POWER_STATE(newState)];
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    havoc oldDeviceState;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 2753} vslice_dummy_var_330 := PciDrvFinalizeDevicePowerIrp#0(DeviceObject_4, Irp_1, Direction, -1073741823);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  L38:
    call {:si_unique_call 2754} IoFreeWorkItem(0);
    call {:si_unique_call 2755} sdv_ExFreePool(0);
    goto LM2;

  LM2:
    return;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    goto L30;

  L30:
    call {:si_unique_call 2756} sdv_90 := DbgDevicePowerString(newDeviceState);
    call {:si_unique_call 2757} sdv_92 := DbgDevicePowerString(oldDeviceState);
    Tmp_178 := strConst__li2bpl51;
    call {:si_unique_call 2758} DebugPrint(4, 4, Tmp_178);
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} newDeviceState == oldDeviceState;
    Tmp_177 := strConst__li2bpl52;
    call {:si_unique_call 2759} DebugPrint(4, 4, Tmp_177);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    call {:si_unique_call 2760} PciDrvProcessQueuedRequests#0(fdoData_3);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  L57:
    call {:si_unique_call 2761} vslice_dummy_var_331 := PciDrvFinalizeDevicePowerIrp#0(DeviceObject_4, Irp_1, Direction, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} newDeviceState != 1;
    goto L57;

  anon41_Then:
    assume {:partition} newDeviceState != oldDeviceState;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} oldDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Tmp_175 := 2;
    goto L71;

  L71:
    call {:si_unique_call 2762} status_16 := PciDrvPowerBeginQueuingIrps#0(DeviceObject_4, Tmp_175, 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L65;

  L65:
    call {:si_unique_call 2763} status_16 := NICSetPower#0(fdoData_3, newDeviceState);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2764} SD3 := PoSetPowerState(0, 1, newState);
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv_3)] := Mem_T.INT4[DeviceState__POWER_STATE(SD3)];
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    havoc newDeviceAction;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} newDeviceState > oldDeviceState;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} newDeviceAction >= 4;
    call {:si_unique_call 2765} NICShutdown(fdoData_3);
    goto L81;

  L81:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    call {:si_unique_call 2766} PciDrvProcessQueuedRequests#0(fdoData_3);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2767} PciDrvReStartIdleDetectionTimer(fdoData_3);
    goto L86;

  L86:
    call {:si_unique_call 2768} vslice_dummy_var_332 := PciDrvFinalizeDevicePowerIrp#0(DeviceObject_4, Irp_1, Direction, status_16);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} newDeviceState != 1;
    goto L86;

  anon38_Then:
    assume {:partition} 4 > newDeviceAction;
    goto L81;

  anon46_Then:
    assume {:partition} oldDeviceState >= newDeviceState;
    goto L81;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    Tmp_175 := 1;
    goto L71;

  anon34_Then:
    assume {:partition} oldDeviceState != 1;
    goto L65;

  anon39_Then:
    assume {:partition} newDeviceState != 1;
    goto L30;
}



procedure {:origName "PciDrvCallbackHandleDeviceSetPower"} PciDrvCallbackHandleDeviceSetPower#0(actual_DeviceObject_4: int, actual_Context_2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCallbackHandleDeviceSetPower"} PciDrvCallbackHandleDeviceSetPower#1(actual_DeviceObject_4: int, actual_Context_2: int)
{
  var {:pointer} SD3: int;
  var {:scalar} newDeviceAction: int;
  var {:scalar} Tmp_175: int;
  var {:pointer} Irp_1: int;
  var {:scalar} Direction: int;
  var {:scalar} oldDeviceState: int;
  var {:pointer} Tmp_176: int;
  var {:scalar} sdv_3: int;
  var {:pointer} sdv_90: int;
  var {:pointer} fdoData_3: int;
  var {:scalar} newState: int;
  var {:pointer} Tmp_177: int;
  var {:scalar} newDeviceState: int;
  var {:pointer} sdv_92: int;
  var {:pointer} Tmp_178: int;
  var {:scalar} status_16: int;
  var {:pointer} stack_4: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Context_2: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;

  anon0:
    call {:si_unique_call 2769} sdv_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2770} newState := __HAVOC_malloc(8);
    call {:si_unique_call 2771} vslice_dummy_var_333 := __HAVOC_malloc(4);
    DeviceObject_4 := actual_DeviceObject_4;
    Context_2 := actual_Context_2;
    call {:si_unique_call 2772} Tmp_176 := __HAVOC_malloc(176);
    call {:si_unique_call 2773} Tmp_177 := __HAVOC_malloc(108);
    call {:si_unique_call 2774} Tmp_178 := __HAVOC_malloc(164);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc fdoData_3;
    status_16 := 0;
    assume {:nonnull} Context_2 != 0;
    assume Context_2 > 0;
    havoc Irp_1;
    assume {:nonnull} Context_2 != 0;
    assume Context_2 > 0;
    havoc Direction;
    call {:si_unique_call 2775} stack_4 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    Tmp_176 := strConst__li2bpl50;
    call {:si_unique_call 2776} DebugPrint(5, 4, Tmp_176);
    call {:si_unique_call 2777} sdv_do_paged_code_check();
    assume {:nonnull} newState != 0;
    assume newState > 0;
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    assume {:nonnull} newState != 0;
    assume newState > 0;
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(newState)] := Mem_T.INT4[DeviceState__POWER_STATE(State_unnamed_tag_39(Power_unnamed_tag_8(Parameters__IO_STACK_LOCATION(stack_4))))];
    assume {:nonnull} newState != 0;
    assume newState > 0;
    newDeviceState := Mem_T.INT4[DeviceState__POWER_STATE(newState)];
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    havoc oldDeviceState;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 2778} vslice_dummy_var_334 := PciDrvFinalizeDevicePowerIrp#1(DeviceObject_4, Irp_1, Direction, -1073741823);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  L38:
    call {:si_unique_call 2779} IoFreeWorkItem(0);
    call {:si_unique_call 2780} sdv_ExFreePool(0);
    goto LM2;

  LM2:
    return;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    goto L30;

  L30:
    call {:si_unique_call 2781} sdv_90 := DbgDevicePowerString(newDeviceState);
    call {:si_unique_call 2782} sdv_92 := DbgDevicePowerString(oldDeviceState);
    Tmp_178 := strConst__li2bpl51;
    call {:si_unique_call 2783} DebugPrint(4, 4, Tmp_178);
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} newDeviceState == oldDeviceState;
    Tmp_177 := strConst__li2bpl52;
    call {:si_unique_call 2784} DebugPrint(4, 4, Tmp_177);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    call {:si_unique_call 2785} PciDrvProcessQueuedRequests#1(fdoData_3);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  L57:
    call {:si_unique_call 2786} vslice_dummy_var_335 := PciDrvFinalizeDevicePowerIrp#1(DeviceObject_4, Irp_1, Direction, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} newDeviceState != 1;
    goto L57;

  anon41_Then:
    assume {:partition} newDeviceState != oldDeviceState;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} oldDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Tmp_175 := 2;
    goto L71;

  L71:
    call {:si_unique_call 2787} status_16 := PciDrvPowerBeginQueuingIrps#1(DeviceObject_4, Tmp_175, 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L65;

  L65:
    call {:si_unique_call 2788} status_16 := NICSetPower#1(fdoData_3, newDeviceState);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2789} SD3 := PoSetPowerState(0, 1, newState);
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv_3)] := Mem_T.INT4[DeviceState__POWER_STATE(SD3)];
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    havoc newDeviceAction;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} newDeviceState > oldDeviceState;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} newDeviceAction >= 4;
    call {:si_unique_call 2790} NICShutdown(fdoData_3);
    goto L81;

  L81:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} fdoData_3 != 0;
    assume fdoData_3 > 0;
    call {:si_unique_call 2791} PciDrvProcessQueuedRequests#1(fdoData_3);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2792} PciDrvReStartIdleDetectionTimer(fdoData_3);
    goto L86;

  L86:
    call {:si_unique_call 2793} vslice_dummy_var_336 := PciDrvFinalizeDevicePowerIrp#1(DeviceObject_4, Irp_1, Direction, status_16);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L38;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} newDeviceState != 1;
    goto L86;

  anon38_Then:
    assume {:partition} 4 > newDeviceAction;
    goto L81;

  anon46_Then:
    assume {:partition} oldDeviceState >= newDeviceState;
    goto L81;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    Tmp_175 := 1;
    goto L71;

  anon34_Then:
    assume {:partition} oldDeviceState != 1;
    goto L65;

  anon39_Then:
    assume {:partition} newDeviceState != 1;
    goto L30;
}



procedure {:origName "PciDrvCallbackHandleDeviceSetPower"} PciDrvCallbackHandleDeviceSetPower#1(actual_DeviceObject_4: int, actual_Context_2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPassiveLevelReArmCallbackWorker"} PciDrvPassiveLevelReArmCallbackWorker#0(actual_DeviceObject_22: int, actual_Context_7: int)
{
  var {:pointer} Tmp_564: int;
  var {:pointer} fdoData_17: int;
  var {:pointer} Tmp_566: int;
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;

  anon0:
    call {:si_unique_call 2794} vslice_dummy_var_337 := __HAVOC_malloc(4);
    DeviceObject_22 := actual_DeviceObject_22;
    Context_7 := actual_Context_7;
    call {:si_unique_call 2795} Tmp_564 := __HAVOC_malloc(188);
    assume {:nonnull} DeviceObject_22 != 0;
    assume DeviceObject_22 > 0;
    havoc fdoData_17;
    call {:si_unique_call 2796} sdv_do_paged_code_check();
    Tmp_564 := strConst__li2bpl172;
    call {:si_unique_call 2797} DebugPrint(5, 4, Tmp_564);
    call {:si_unique_call 2798} vslice_dummy_var_338 := PciDrvPowerUpDevice#0(fdoData_17, 1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2799} vslice_dummy_var_339 := PciDrvArmForWake#0(fdoData_17, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Context_7 != 0;
    Tmp_566 := Context_7;
    assume {:nonnull} Tmp_566 != 0;
    assume Tmp_566 > 0;
    call {:si_unique_call 2800} IoFreeWorkItem(0);
    call {:si_unique_call 2801} sdv_ExFreePool(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} Context_7 == 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPassiveLevelReArmCallbackWorker"} PciDrvPassiveLevelReArmCallbackWorker#0(actual_DeviceObject_22: int, actual_Context_7: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPassiveLevelReArmCallbackWorker"} PciDrvPassiveLevelReArmCallbackWorker#1(actual_DeviceObject_22: int, actual_Context_7: int)
{
  var {:pointer} Tmp_564: int;
  var {:pointer} fdoData_17: int;
  var {:pointer} Tmp_566: int;
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;

  anon0:
    call {:si_unique_call 2802} vslice_dummy_var_340 := __HAVOC_malloc(4);
    DeviceObject_22 := actual_DeviceObject_22;
    Context_7 := actual_Context_7;
    call {:si_unique_call 2803} Tmp_564 := __HAVOC_malloc(188);
    assume {:nonnull} DeviceObject_22 != 0;
    assume DeviceObject_22 > 0;
    havoc fdoData_17;
    call {:si_unique_call 2804} sdv_do_paged_code_check();
    Tmp_564 := strConst__li2bpl172;
    call {:si_unique_call 2805} DebugPrint(5, 4, Tmp_564);
    call {:si_unique_call 2806} vslice_dummy_var_341 := PciDrvPowerUpDevice#1(fdoData_17, 1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2807} vslice_dummy_var_342 := PciDrvArmForWake#1(fdoData_17, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Context_7 != 0;
    Tmp_566 := Context_7;
    assume {:nonnull} Tmp_566 != 0;
    assume Tmp_566 > 0;
    call {:si_unique_call 2808} IoFreeWorkItem(0);
    call {:si_unique_call 2809} sdv_ExFreePool(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} Context_7 == 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPassiveLevelReArmCallbackWorker"} PciDrvPassiveLevelReArmCallbackWorker#1(actual_DeviceObject_22: int, actual_Context_7: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvArmForWake"} PciDrvArmForWake#0(actual_FdoData_50: int, actual_DeviceStateChange: int) returns (Tmp_551: int)
{
  var {:scalar} oldWakeState_1: int;
  var {:pointer} Tmp_552: int;
  var {:scalar} sdv_209: int;
  var {:pointer} Tmp_553: int;
  var {:scalar} powerState: int;
  var {:scalar} sdv_212: int;
  var {:scalar} sdv_214: int;
  var {:scalar} status_43: int;
  var {:scalar} Tmp_554: int;
  var {:pointer} FdoData_50: int;
  var {:scalar} DeviceStateChange: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_96: int;

  anon0:
    call {:si_unique_call 2810} powerState := __HAVOC_malloc(8);
    FdoData_50 := actual_FdoData_50;
    DeviceStateChange := actual_DeviceStateChange;
    call {:si_unique_call 2811} Tmp_552 := __HAVOC_malloc(64);
    call {:si_unique_call 2812} Tmp_553 := __HAVOC_malloc(64);
    call {:si_unique_call 2813} sdv_do_paged_code_check();
    call {:si_unique_call 2814} sdv_209 := IsPoMgmtSupported(FdoData_50);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_209 != 0;
    Tmp_552 := strConst__li2bpl168;
    call {:si_unique_call 2815} DebugPrint(5, 4, Tmp_552);
    call {:si_unique_call 2816} KeEnterCriticalRegion();
    call {:si_unique_call 2817} status_43 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} DeviceStateChange != 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    goto L25;

  L25:
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 2818} sdv_212 := PciDrvGetWaitWakeEnableState(FdoData_50);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_212 != 0;
    oldWakeState_1 := sdv_214;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} oldWakeState_1 != 1;
    status_43 := 0;
    goto L42;

  L42:
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    call {:si_unique_call 2819} vslice_dummy_var_343 := KeSetEvent(WakeDisableEnableLock__FDO_DATA(FdoData_50), 0, 0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2820} KeLeaveCriticalRegion();
    Tmp_553 := strConst__li2bpl169;
    call {:si_unique_call 2821} DebugPrint(5, 4, Tmp_553);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_43 == 259;
    Tmp_554 := 1;
    goto L54;

  L54:
    Tmp_551 := Tmp_554;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:partition} status_43 != 259;
    Tmp_554 := 0;
    goto L54;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:partition} oldWakeState_1 == 1;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    call {:si_unique_call 2822} KeClearEvent(WakeCompletedEvent__FDO_DATA(FdoData_50));
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    havoc vslice_dummy_var_96;
    call {:si_unique_call 2823} status_43 := PoRequestPowerIrp#0(vslice_dummy_var_96, 0, powerState, li2bplFunctionConstant5764, FdoData_50, 0);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_43 < 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    call {:si_unique_call 2824} vslice_dummy_var_344 := KeSetEvent(WakeCompletedEvent__FDO_DATA(FdoData_50), 0, 0);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} 0 <= status_43;
    goto L42;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} sdv_212 == 0;
    goto L27;

  L27:
    status_43 := -1073741823;
    goto L42;

  anon23_Then:
    goto L27;

  anon22_Then:
    assume {:partition} DeviceStateChange == 0;
    goto L25;

  anon21_Then:
    assume {:partition} sdv_209 == 0;
    Tmp_551 := 0;
    goto L1;
}



procedure {:origName "PciDrvArmForWake"} PciDrvArmForWake#0(actual_FdoData_50: int, actual_DeviceStateChange: int) returns (Tmp_551: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvArmForWake"} PciDrvArmForWake#1(actual_FdoData_50: int, actual_DeviceStateChange: int) returns (Tmp_551: int)
{
  var {:scalar} oldWakeState_1: int;
  var {:pointer} Tmp_552: int;
  var {:scalar} sdv_209: int;
  var {:pointer} Tmp_553: int;
  var {:scalar} powerState: int;
  var {:scalar} sdv_212: int;
  var {:scalar} sdv_214: int;
  var {:scalar} status_43: int;
  var {:scalar} Tmp_554: int;
  var {:pointer} FdoData_50: int;
  var {:scalar} DeviceStateChange: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_97: int;

  anon0:
    call {:si_unique_call 2825} powerState := __HAVOC_malloc(8);
    FdoData_50 := actual_FdoData_50;
    DeviceStateChange := actual_DeviceStateChange;
    call {:si_unique_call 2826} Tmp_552 := __HAVOC_malloc(64);
    call {:si_unique_call 2827} Tmp_553 := __HAVOC_malloc(64);
    call {:si_unique_call 2828} sdv_do_paged_code_check();
    call {:si_unique_call 2829} sdv_209 := IsPoMgmtSupported(FdoData_50);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_209 != 0;
    Tmp_552 := strConst__li2bpl168;
    call {:si_unique_call 2830} DebugPrint(5, 4, Tmp_552);
    call {:si_unique_call 2831} KeEnterCriticalRegion();
    call {:si_unique_call 2832} status_43 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} DeviceStateChange != 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    goto L25;

  L25:
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 2833} sdv_212 := PciDrvGetWaitWakeEnableState(FdoData_50);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_212 != 0;
    oldWakeState_1 := sdv_214;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} oldWakeState_1 != 1;
    status_43 := 0;
    goto L42;

  L42:
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    call {:si_unique_call 2834} vslice_dummy_var_345 := KeSetEvent(WakeDisableEnableLock__FDO_DATA(FdoData_50), 0, 0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2835} KeLeaveCriticalRegion();
    Tmp_553 := strConst__li2bpl169;
    call {:si_unique_call 2836} DebugPrint(5, 4, Tmp_553);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_43 == 259;
    Tmp_554 := 1;
    goto L54;

  L54:
    Tmp_551 := Tmp_554;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:partition} status_43 != 259;
    Tmp_554 := 0;
    goto L54;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:partition} oldWakeState_1 == 1;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    call {:si_unique_call 2837} KeClearEvent(WakeCompletedEvent__FDO_DATA(FdoData_50));
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    havoc vslice_dummy_var_97;
    call {:si_unique_call 2838} status_43 := PoRequestPowerIrp#1(vslice_dummy_var_97, 0, powerState, li2bplFunctionConstant5764, FdoData_50, 0);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_43 < 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    assume {:nonnull} FdoData_50 != 0;
    assume FdoData_50 > 0;
    call {:si_unique_call 2839} vslice_dummy_var_346 := KeSetEvent(WakeCompletedEvent__FDO_DATA(FdoData_50), 0, 0);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} 0 <= status_43;
    goto L42;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} sdv_212 == 0;
    goto L27;

  L27:
    status_43 := -1073741823;
    goto L42;

  anon23_Then:
    goto L27;

  anon22_Then:
    assume {:partition} DeviceStateChange == 0;
    goto L25;

  anon21_Then:
    assume {:partition} sdv_209 == 0;
    Tmp_551 := 0;
    goto L1;
}



procedure {:origName "PciDrvArmForWake"} PciDrvArmForWake#1(actual_FdoData_50: int, actual_DeviceStateChange: int) returns (Tmp_551: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerDownDeviceCallback"} PciDrvPowerDownDeviceCallback#0(actual_DeviceObject_24: int, actual_Context_8: int)
{
  var {:scalar} powerState_1: int;
  var {:pointer} Tmp_591: int;
  var {:pointer} fdoData_19: int;
  var {:scalar} status_46: int;
  var {:pointer} Tmp_593: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} Context_8: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;

  anon0:
    call {:si_unique_call 2840} vslice_dummy_var_347 := __HAVOC_malloc(4);
    call {:si_unique_call 2841} powerState_1 := __HAVOC_malloc(8);
    DeviceObject_24 := actual_DeviceObject_24;
    Context_8 := actual_Context_8;
    call {:si_unique_call 2842} Tmp_591 := __HAVOC_malloc(108);
    call {:si_unique_call 2843} Tmp_593 := __HAVOC_malloc(108);
    assume {:nonnull} DeviceObject_24 != 0;
    assume DeviceObject_24 > 0;
    havoc fdoData_19;
    Tmp_593 := strConst__li2bpl182;
    call {:si_unique_call 2844} DebugPrint(5, 4, Tmp_593);
    call {:si_unique_call 2845} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    havoc vslice_dummy_var_98;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_1)] := vslice_dummy_var_98;
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    call {:si_unique_call 2846} KeClearEvent(IdlePowerDownCompleteEvent__FDO_DATA(fdoData_19));
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    havoc vslice_dummy_var_99;
    call {:si_unique_call 2847} status_46 := PoRequestPowerIrp#0(vslice_dummy_var_99, 2, powerState_1, li2bplFunctionConstant5295, IdlePowerDownCompleteEvent__FDO_DATA(fdoData_19), 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_46 >= 0;
    call {:si_unique_call 2848} status_46 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L29;

  L29:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Context_8 != 0;
    call {:si_unique_call 2849} IoFreeWorkItem(0);
    call {:si_unique_call 2850} sdv_ExFreePool(0);
    goto L30;

  L30:
    Tmp_591 := strConst__li2bpl181;
    call {:si_unique_call 2851} DebugPrint(5, 4, Tmp_591);
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} Context_8 == 0;
    goto L30;

  anon9_Then:
    assume {:partition} 0 > status_46;
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    call {:si_unique_call 2852} vslice_dummy_var_348 := KeSetEvent(IdlePowerDownCompleteEvent__FDO_DATA(fdoData_19), 0, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2853} PciDrvSetIdleTimer(fdoData_19);
    goto L29;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPowerDownDeviceCallback"} PciDrvPowerDownDeviceCallback#0(actual_DeviceObject_24: int, actual_Context_8: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerDownDeviceCallback"} PciDrvPowerDownDeviceCallback#1(actual_DeviceObject_24: int, actual_Context_8: int)
{
  var {:scalar} powerState_1: int;
  var {:pointer} Tmp_591: int;
  var {:pointer} fdoData_19: int;
  var {:scalar} status_46: int;
  var {:pointer} Tmp_593: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} Context_8: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;

  anon0:
    call {:si_unique_call 2854} vslice_dummy_var_349 := __HAVOC_malloc(4);
    call {:si_unique_call 2855} powerState_1 := __HAVOC_malloc(8);
    DeviceObject_24 := actual_DeviceObject_24;
    Context_8 := actual_Context_8;
    call {:si_unique_call 2856} Tmp_591 := __HAVOC_malloc(108);
    call {:si_unique_call 2857} Tmp_593 := __HAVOC_malloc(108);
    assume {:nonnull} DeviceObject_24 != 0;
    assume DeviceObject_24 > 0;
    havoc fdoData_19;
    Tmp_593 := strConst__li2bpl182;
    call {:si_unique_call 2858} DebugPrint(5, 4, Tmp_593);
    call {:si_unique_call 2859} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    havoc vslice_dummy_var_100;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_1)] := vslice_dummy_var_100;
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    call {:si_unique_call 2860} KeClearEvent(IdlePowerDownCompleteEvent__FDO_DATA(fdoData_19));
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    havoc vslice_dummy_var_101;
    call {:si_unique_call 2861} status_46 := PoRequestPowerIrp#1(vslice_dummy_var_101, 2, powerState_1, li2bplFunctionConstant5295, IdlePowerDownCompleteEvent__FDO_DATA(fdoData_19), 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_46 >= 0;
    call {:si_unique_call 2862} status_46 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L29;

  L29:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Context_8 != 0;
    call {:si_unique_call 2863} IoFreeWorkItem(0);
    call {:si_unique_call 2864} sdv_ExFreePool(0);
    goto L30;

  L30:
    Tmp_591 := strConst__li2bpl181;
    call {:si_unique_call 2865} DebugPrint(5, 4, Tmp_591);
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} Context_8 == 0;
    goto L30;

  anon9_Then:
    assume {:partition} 0 > status_46;
    assume {:nonnull} fdoData_19 != 0;
    assume fdoData_19 > 0;
    call {:si_unique_call 2866} vslice_dummy_var_350 := KeSetEvent(IdlePowerDownCompleteEvent__FDO_DATA(fdoData_19), 0, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2867} PciDrvSetIdleTimer(fdoData_19);
    goto L29;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvPowerDownDeviceCallback"} PciDrvPowerDownDeviceCallback#1(actual_DeviceObject_24: int, actual_Context_8: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvStartDeviceWorker"} PciDrvStartDeviceWorker#0(actual_DeviceObject_34: int, actual_Context_11: int)
{
  var {:pointer} fdoData_28: int;
  var {:pointer} irp_8: int;
  var {:scalar} status_63: int;
  var {:pointer} workItemContext: int;
  var {:pointer} DeviceObject_34: int;
  var {:pointer} Context_11: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_352: int;

  anon0:
    call {:si_unique_call 2868} vslice_dummy_var_351 := __HAVOC_malloc(4);
    DeviceObject_34 := actual_DeviceObject_34;
    Context_11 := actual_Context_11;
    assume {:nonnull} DeviceObject_34 != 0;
    assume DeviceObject_34 > 0;
    havoc fdoData_28;
    workItemContext := Context_11;
    call {:si_unique_call 2869} sdv_do_paged_code_check();
    assume {:nonnull} workItemContext != 0;
    assume workItemContext > 0;
    havoc irp_8;
    call {:si_unique_call 2870} status_63 := PciDrvStartDevice#0(fdoData_28, irp_8);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} irp_8 != 0;
    assume irp_8 > 0;
    call {:si_unique_call 2871} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2872} vslice_dummy_var_352 := PciDrvIoDecrement(fdoData_28);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2873} IoFreeWorkItem(0);
    call {:si_unique_call 2874} sdv_ExFreePool(0);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvStartDeviceWorker"} PciDrvStartDeviceWorker#0(actual_DeviceObject_34: int, actual_Context_11: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvStartDeviceWorker"} PciDrvStartDeviceWorker#1(actual_DeviceObject_34: int, actual_Context_11: int)
{
  var {:pointer} fdoData_28: int;
  var {:pointer} irp_8: int;
  var {:scalar} status_63: int;
  var {:pointer} workItemContext: int;
  var {:pointer} DeviceObject_34: int;
  var {:pointer} Context_11: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;

  anon0:
    call {:si_unique_call 2875} vslice_dummy_var_353 := __HAVOC_malloc(4);
    DeviceObject_34 := actual_DeviceObject_34;
    Context_11 := actual_Context_11;
    assume {:nonnull} DeviceObject_34 != 0;
    assume DeviceObject_34 > 0;
    havoc fdoData_28;
    workItemContext := Context_11;
    call {:si_unique_call 2876} sdv_do_paged_code_check();
    assume {:nonnull} workItemContext != 0;
    assume workItemContext > 0;
    havoc irp_8;
    call {:si_unique_call 2877} status_63 := PciDrvStartDevice#1(fdoData_28, irp_8);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} irp_8 != 0;
    assume irp_8 > 0;
    call {:si_unique_call 2878} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2879} vslice_dummy_var_354 := PciDrvIoDecrement(fdoData_28);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2880} IoFreeWorkItem(0);
    call {:si_unique_call 2881} sdv_ExFreePool(0);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvStartDeviceWorker"} PciDrvStartDeviceWorker#1(actual_DeviceObject_34: int, actual_Context_11: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvStartDevice"} PciDrvStartDevice#0(actual_FdoData_87: int, actual_Irp_33: int) returns (Tmp_823: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:pointer} Tmp_824: int;
  var {:scalar} powerState_5: int;
  var {:pointer} Tmp_826: int;
  var {:pointer} Tmp_827: int;
  var {:scalar} sdv: int;
  var {:pointer} Tmp_828: int;
  var {:scalar} sdv_410: int;
  var {:pointer} Tmp_829: int;
  var {:scalar} status_75: int;
  var {:pointer} Tmp_830: int;
  var {:pointer} FdoData_87: int;
  var {:pointer} Irp_33: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_102: int;

  anon0:
    call {:si_unique_call 2882} powerState_5 := __HAVOC_malloc(8);
    call {:si_unique_call 2883} sdv := __HAVOC_malloc(8);
    FdoData_87 := actual_FdoData_87;
    Irp_33 := actual_Irp_33;
    call {:si_unique_call 2884} Tmp_824 := __HAVOC_malloc(160);
    call {:si_unique_call 2885} Tmp_827 := __HAVOC_malloc(164);
    call {:si_unique_call 2886} Tmp_828 := __HAVOC_malloc(160);
    call {:si_unique_call 2887} Tmp_829 := __HAVOC_malloc(152);
    call {:si_unique_call 2888} Tmp_830 := __HAVOC_malloc(164);
    status_75 := 0;
    call {:si_unique_call 2889} sdv_do_paged_code_check();
    call {:si_unique_call 2890} vslice_dummy_var_355 := sdv_IoGetCurrentIrpStackLocation(Irp_33);
    call {:si_unique_call 2891} status_75 := NICAllocateDeviceResources#0(FdoData_87, Irp_33);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_75 >= 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_5)] := 1;
    call {:si_unique_call 2892} structPtr888sdv := PoSetPowerState(0, 1, powerState_5);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888sdv)];
    call {:si_unique_call 2893} status_75 := IoSetDeviceInterfaceState(0, 1);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_75 >= 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2894} status_75 := PciDrvWmiRegistration(FdoData_87);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_75 < 0;
    Tmp_829 := strConst__li2bpl275;
    call {:si_unique_call 2895} DebugPrint(2, 1, Tmp_829);
    Tmp_823 := status_75;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} 0 <= status_75;
    goto L36;

  L36:
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    havoc vslice_dummy_var_102;
    call {:si_unique_call 2896} status_75 := PciDrvGetDeviceCapabilities#0(vslice_dummy_var_102, DeviceCaps__FDO_DATA(FdoData_87));
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_75 >= 0;
    call {:si_unique_call 2897} sdv_410 := IsPoMgmtSupported(FdoData_87);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} sdv_410 != 0;
    Tmp_826 := strConst__li2bpl157;
    goto L62;

  L62:
    Tmp_824 := strConst__li2bpl277;
    call {:si_unique_call 2898} DebugPrint(4, 1, Tmp_824);
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_87)] != 0;
    goto L69;

  L69:
    call {:si_unique_call 2899} vslice_dummy_var_356 := PciDrvArmForWake#0(FdoData_87, 1);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2900} PciDrvRegisterForIdleDetection(FdoData_87, 1);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2901} PciDrvProcessQueuedRequests#0(FdoData_87);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    Tmp_823 := status_75;
    goto L1;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_87)] == 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    call {:si_unique_call 2902} PciDrvAdjustCapabilities(DeviceCaps__FDO_DATA(FdoData_87));
    goto L69;

  anon30_Then:
    assume {:partition} sdv_410 == 0;
    Tmp_826 := strConst__li2bpl165;
    goto L62;

  anon29_Then:
    assume {:partition} 0 > status_75;
    Tmp_830 := strConst__li2bpl276;
    call {:si_unique_call 2903} DebugPrint(2, 1, Tmp_830);
    Tmp_823 := status_75;
    goto L1;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    goto L36;

  anon26_Then:
    assume {:partition} 0 > status_75;
    Tmp_828 := strConst__li2bpl223;
    call {:si_unique_call 2904} DebugPrint(2, 1, Tmp_828);
    Tmp_823 := status_75;
    goto L1;

  anon25_Then:
    assume {:partition} 0 > status_75;
    Tmp_827 := strConst__li2bpl274;
    call {:si_unique_call 2905} DebugPrint(2, 1, Tmp_827);
    Tmp_823 := status_75;
    goto L1;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvStartDevice"} PciDrvStartDevice#0(actual_FdoData_87: int, actual_Irp_33: int) returns (Tmp_823: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvStartDevice"} PciDrvStartDevice#1(actual_FdoData_87: int, actual_Irp_33: int) returns (Tmp_823: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:pointer} Tmp_824: int;
  var {:scalar} powerState_5: int;
  var {:pointer} Tmp_826: int;
  var {:pointer} Tmp_827: int;
  var {:scalar} sdv: int;
  var {:pointer} Tmp_828: int;
  var {:scalar} sdv_410: int;
  var {:pointer} Tmp_829: int;
  var {:scalar} status_75: int;
  var {:pointer} Tmp_830: int;
  var {:pointer} FdoData_87: int;
  var {:pointer} Irp_33: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_103: int;

  anon0:
    call {:si_unique_call 2906} powerState_5 := __HAVOC_malloc(8);
    call {:si_unique_call 2907} sdv := __HAVOC_malloc(8);
    FdoData_87 := actual_FdoData_87;
    Irp_33 := actual_Irp_33;
    call {:si_unique_call 2908} Tmp_824 := __HAVOC_malloc(160);
    call {:si_unique_call 2909} Tmp_827 := __HAVOC_malloc(164);
    call {:si_unique_call 2910} Tmp_828 := __HAVOC_malloc(160);
    call {:si_unique_call 2911} Tmp_829 := __HAVOC_malloc(152);
    call {:si_unique_call 2912} Tmp_830 := __HAVOC_malloc(164);
    status_75 := 0;
    call {:si_unique_call 2913} sdv_do_paged_code_check();
    call {:si_unique_call 2914} vslice_dummy_var_357 := sdv_IoGetCurrentIrpStackLocation(Irp_33);
    call {:si_unique_call 2915} status_75 := NICAllocateDeviceResources#1(FdoData_87, Irp_33);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_75 >= 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} powerState_5 != 0;
    assume powerState_5 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_5)] := 1;
    call {:si_unique_call 2916} structPtr888sdv := PoSetPowerState(0, 1, powerState_5);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888sdv)];
    call {:si_unique_call 2917} status_75 := IoSetDeviceInterfaceState(0, 1);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_75 >= 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2918} status_75 := PciDrvWmiRegistration(FdoData_87);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_75 < 0;
    Tmp_829 := strConst__li2bpl275;
    call {:si_unique_call 2919} DebugPrint(2, 1, Tmp_829);
    Tmp_823 := status_75;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} 0 <= status_75;
    goto L36;

  L36:
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    havoc vslice_dummy_var_103;
    call {:si_unique_call 2920} status_75 := PciDrvGetDeviceCapabilities#1(vslice_dummy_var_103, DeviceCaps__FDO_DATA(FdoData_87));
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_75 >= 0;
    call {:si_unique_call 2921} sdv_410 := IsPoMgmtSupported(FdoData_87);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} sdv_410 != 0;
    Tmp_826 := strConst__li2bpl157;
    goto L62;

  L62:
    Tmp_824 := strConst__li2bpl277;
    call {:si_unique_call 2922} DebugPrint(4, 1, Tmp_824);
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_87)] != 0;
    goto L69;

  L69:
    call {:si_unique_call 2923} vslice_dummy_var_358 := PciDrvArmForWake#1(FdoData_87, 1);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2924} PciDrvRegisterForIdleDetection(FdoData_87, 1);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2925} PciDrvProcessQueuedRequests#1(FdoData_87);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    Tmp_823 := status_75;
    goto L1;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_87)] == 0;
    assume {:nonnull} FdoData_87 != 0;
    assume FdoData_87 > 0;
    call {:si_unique_call 2926} PciDrvAdjustCapabilities(DeviceCaps__FDO_DATA(FdoData_87));
    goto L69;

  anon30_Then:
    assume {:partition} sdv_410 == 0;
    Tmp_826 := strConst__li2bpl165;
    goto L62;

  anon29_Then:
    assume {:partition} 0 > status_75;
    Tmp_830 := strConst__li2bpl276;
    call {:si_unique_call 2927} DebugPrint(2, 1, Tmp_830);
    Tmp_823 := status_75;
    goto L1;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    goto L36;

  anon26_Then:
    assume {:partition} 0 > status_75;
    Tmp_828 := strConst__li2bpl223;
    call {:si_unique_call 2928} DebugPrint(2, 1, Tmp_828);
    Tmp_823 := status_75;
    goto L1;

  anon25_Then:
    assume {:partition} 0 > status_75;
    Tmp_827 := strConst__li2bpl274;
    call {:si_unique_call 2929} DebugPrint(2, 1, Tmp_827);
    Tmp_823 := status_75;
    goto L1;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PciDrvStartDevice"} PciDrvStartDevice#1(actual_FdoData_87: int, actual_Irp_33: int) returns (Tmp_823: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICAllocateDeviceResources"} NICAllocateDeviceResources#0(actual_FdoData_26: int, actual_Irp_12: int) returns (Tmp_246: int)
{
  var {:pointer} Tmp_248: int;
  var {:scalar} DueTime_2: int;
  var {:scalar} status_27: int;
  var {:pointer} FdoData_26: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;

  anon0:
    call {:si_unique_call 2930} DueTime_2 := __HAVOC_malloc(20);
    FdoData_26 := actual_FdoData_26;
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 2931} Tmp_248 := __HAVOC_malloc(128);
    call {:si_unique_call 2932} sdv_do_paged_code_check();
    call {:si_unique_call 2933} status_27 := NICGetDeviceInformation(FdoData_26);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_27 >= 0;
    call {:si_unique_call 2934} status_27 := NICMapHWResources#0(FdoData_26, Irp_12);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_27 >= 0;
    call {:si_unique_call 2935} status_27 := NICReadAdapterInfo(FdoData_26);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_27 != 0;
    goto L31;

  L31:
    Tmp_246 := status_27;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2936} status_27 := NICAllocAdapterMemory(FdoData_26);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2937} NICInitSend(FdoData_26);
    call {:si_unique_call 2938} status_27 := NICInitRecv(FdoData_26);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2939} status_27 := NICSelfTest(FdoData_26);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2940} status_27 := NICInitializeAdapter(FdoData_26);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2941} vslice_dummy_var_359 := NICEnableInterrupt(FdoData_26);
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    call {:si_unique_call 2942} KeClearEvent(WatchDogTimerEvent__FDO_DATA(FdoData_26));
    assume {:nonnull} DueTime_2 != 0;
    assume DueTime_2 > 0;
    call {:si_unique_call 2943} vslice_dummy_var_360 := KeSetTimer(0, DueTime_2, 0);
    goto L31;

  anon23_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon22_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon21_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon20_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon18_Then:
    assume {:partition} 0 > status_27;
    Tmp_248 := strConst__li2bpl86;
    call {:si_unique_call 2944} DebugPrint(2, 1, Tmp_248);
    goto L31;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} 0 > status_27;
    Tmp_246 := status_27;
    goto L1;
}



procedure {:origName "NICAllocateDeviceResources"} NICAllocateDeviceResources#0(actual_FdoData_26: int, actual_Irp_12: int) returns (Tmp_246: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICAllocateDeviceResources"} NICAllocateDeviceResources#1(actual_FdoData_26: int, actual_Irp_12: int) returns (Tmp_246: int)
{
  var {:pointer} Tmp_248: int;
  var {:scalar} DueTime_2: int;
  var {:scalar} status_27: int;
  var {:pointer} FdoData_26: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;

  anon0:
    call {:si_unique_call 2945} DueTime_2 := __HAVOC_malloc(20);
    FdoData_26 := actual_FdoData_26;
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 2946} Tmp_248 := __HAVOC_malloc(128);
    call {:si_unique_call 2947} sdv_do_paged_code_check();
    call {:si_unique_call 2948} status_27 := NICGetDeviceInformation(FdoData_26);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_27 >= 0;
    call {:si_unique_call 2949} status_27 := NICMapHWResources#1(FdoData_26, Irp_12);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_27 >= 0;
    call {:si_unique_call 2950} status_27 := NICReadAdapterInfo(FdoData_26);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_27 != 0;
    goto L31;

  L31:
    Tmp_246 := status_27;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2951} status_27 := NICAllocAdapterMemory(FdoData_26);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2952} NICInitSend(FdoData_26);
    call {:si_unique_call 2953} status_27 := NICInitRecv(FdoData_26);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2954} status_27 := NICSelfTest(FdoData_26);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2955} status_27 := NICInitializeAdapter(FdoData_26);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} status_27 == 0;
    call {:si_unique_call 2956} vslice_dummy_var_361 := NICEnableInterrupt(FdoData_26);
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    call {:si_unique_call 2957} KeClearEvent(WatchDogTimerEvent__FDO_DATA(FdoData_26));
    assume {:nonnull} DueTime_2 != 0;
    assume DueTime_2 > 0;
    call {:si_unique_call 2958} vslice_dummy_var_362 := KeSetTimer(0, DueTime_2, 0);
    goto L31;

  anon23_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon22_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon21_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon20_Then:
    assume {:partition} status_27 != 0;
    goto L31;

  anon18_Then:
    assume {:partition} 0 > status_27;
    Tmp_248 := strConst__li2bpl86;
    call {:si_unique_call 2959} DebugPrint(2, 1, Tmp_248);
    goto L31;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} 0 > status_27;
    Tmp_246 := status_27;
    goto L1;
}



procedure {:origName "NICAllocateDeviceResources"} NICAllocateDeviceResources#1(actual_FdoData_26: int, actual_Irp_12: int) returns (Tmp_246: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICMapHWResources"} NICMapHWResources#0(actual_FdoData_29: int, actual_Irp_13: int) returns (Tmp_257: int)
{
  var {:scalar} i_2: int;
  var {:pointer} DmaAdapterObject_1: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:pointer} Tmp_260: int;
  var {:pointer} Tmp_261: int;
  var {:scalar} deviceDescription: int;
  var {:pointer} Tmp_262: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} Tmp_264: int;
  var {:scalar} numberOfBARs: int;
  var {:pointer} Tmp_265: int;
  var {:pointer} Tmp_266: int;
  var {:pointer} Tmp_267: int;
  var {:pointer} Tmp_269: int;
  var {:pointer} Tmp_270: int;
  var {:pointer} Tmp_271: int;
  var {:pointer} Tmp_272: int;
  var {:scalar} bResInterrupt: int;
  var {:scalar} miniMapRegisters: int;
  var {:scalar} bResPort: int;
  var {:pointer} Tmp_273: int;
  var {:scalar} MaximumPhysicalMapping: int;
  var {:pointer} sdv_162: int;
  var {:pointer} Tmp_274: int;
  var {:scalar} Tmp_275: int;
  var {:pointer} sdv_163: int;
  var {:pointer} Tmp_276: int;
  var {:pointer} Tmp_278: int;
  var {:pointer} Tmp_279: int;
  var {:pointer} Tmp_280: int;
  var {:scalar} Tmp_281: int;
  var {:scalar} ScatterGatherListSize: int;
  var {:pointer} partialResourceListTranslated: int;
  var {:pointer} resourceTrans: int;
  var {:scalar} status_29: int;
  var {:scalar} MapRegisters: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} Tmp_283: int;
  var {:pointer} stack_12: int;
  var {:pointer} Tmp_284: int;
  var {:scalar} bResMemory: int;
  var {:pointer} FdoData_29: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;

  anon0:
    call {:si_unique_call 2960} deviceDescription := __HAVOC_malloc(96);
    FdoData_29 := actual_FdoData_29;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 2961} Tmp_258 := __HAVOC_malloc(128);
    call {:si_unique_call 2962} Tmp_259 := __HAVOC_malloc(156);
    call {:si_unique_call 2963} Tmp_261 := __HAVOC_malloc(84);
    call {:si_unique_call 2964} Tmp_262 := __HAVOC_malloc(312);
    call {:si_unique_call 2965} Tmp_263 := __HAVOC_malloc(180);
    call {:si_unique_call 2966} Tmp_264 := __HAVOC_malloc(108);
    call {:si_unique_call 2967} Tmp_265 := __HAVOC_malloc(104);
    call {:si_unique_call 2968} Tmp_266 := __HAVOC_malloc(220);
    call {:si_unique_call 2969} Tmp_267 := __HAVOC_malloc(96);
    call {:si_unique_call 2970} Tmp_269 := __HAVOC_malloc(204);
    call {:si_unique_call 2971} Tmp_271 := __HAVOC_malloc(136);
    call {:si_unique_call 2972} Tmp_272 := __HAVOC_malloc(212);
    call {:si_unique_call 2973} Tmp_273 := __HAVOC_malloc(84);
    call {:si_unique_call 2974} Tmp_274 := __HAVOC_malloc(292);
    call {:si_unique_call 2975} Tmp_276 := __HAVOC_malloc(60);
    call {:si_unique_call 2976} Tmp_280 := __HAVOC_malloc(120);
    call {:si_unique_call 2977} Tmp_283 := __HAVOC_malloc(168);
    call {:si_unique_call 2978} Tmp_284 := __HAVOC_malloc(140);
    status_29 := 0;
    bResPort := 0;
    bResInterrupt := 0;
    bResMemory := 0;
    numberOfBARs := 0;
    call {:si_unique_call 2979} stack_12 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    call {:si_unique_call 2980} sdv_do_paged_code_check();
    assume {:nonnull} stack_12 != 0;
    assume stack_12 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} stack_12 != 0;
    assume stack_12 > 0;
    havoc Tmp_279;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    havoc Tmp_262;
    assume {:nonnull} Tmp_262 != 0;
    assume Tmp_262 > 0;
    partialResourceListTranslated := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(Tmp_262);
    assume {:nonnull} partialResourceListTranslated != 0;
    assume partialResourceListTranslated > 0;
    havoc Tmp_274;
    resourceTrans := Tmp_274;
    i_2 := 0;
    goto L37;

  L37:
    call {:si_unique_call 2981} i_2, Tmp_258, Tmp_259, numberOfBARs, Tmp_266, Tmp_269, Tmp_271, bResInterrupt, bResPort, sdv_162, sdv_163, Tmp_276, Tmp_284, bResMemory := NICMapHWResources#0_loop_L37(i_2, Tmp_258, Tmp_259, numberOfBARs, Tmp_266, Tmp_269, Tmp_271, bResInterrupt, bResPort, sdv_162, sdv_163, Tmp_276, partialResourceListTranslated, resourceTrans, Tmp_284, bResMemory, FdoData_29);
    goto L37_last;

  L37_last:
    assume {:nonnull} partialResourceListTranslated != 0;
    assume partialResourceListTranslated > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    numberOfBARs := numberOfBARs + 1;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} numberOfBARs == 1;
    Tmp_259 := strConst__li2bpl92;
    call {:si_unique_call 2982} DebugPrint(6, 1, Tmp_259);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    havoc vslice_dummy_var_104;
    call {:si_unique_call 2983} sdv_162 := MmMapIoSpace(vslice_dummy_var_104, 24, 0);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    Tmp_276 := strConst__li2bpl94;
    call {:si_unique_call 2984} DebugPrint(6, 1, Tmp_276);
    bResMemory := 1;
    goto L65;

  L65:
    i_2 := i_2 + 1;
    goto L65_dummy;

  L65_dummy:
    assume false;
    return;

  anon60_Then:
    Tmp_273 := strConst__li2bpl93;
    call {:si_unique_call 2985} DebugPrint(2, 1, Tmp_273);
    status_29 := -1073741670;
    goto L69;

  L69:
    Tmp_257 := status_29;
    goto LM2;

  LM2:
    return;

  anon59_Then:
    assume {:partition} numberOfBARs != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} numberOfBARs == 2;
    Tmp_269 := strConst__li2bpl95;
    call {:si_unique_call 2986} DebugPrint(6, 1, Tmp_269);
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    havoc vslice_dummy_var_105;
    havoc vslice_dummy_var_106;
    call {:si_unique_call 2987} sdv_163 := MmMapIoSpace(vslice_dummy_var_105, vslice_dummy_var_106, 0);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    bResPort := 1;
    goto L65;

  anon61_Then:
    Tmp_261 := strConst__li2bpl93;
    call {:si_unique_call 2988} DebugPrint(2, 1, Tmp_261);
    status_29 := -1073741670;
    goto L69;

  anon47_Then:
    assume {:partition} numberOfBARs != 2;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} numberOfBARs == 3;
    Tmp_271 := strConst__li2bpl97;
    call {:si_unique_call 2989} DebugPrint(6, 1, Tmp_271);
    goto L65;

  anon48_Then:
    assume {:partition} numberOfBARs != 3;
    Tmp_263 := strConst__li2bpl96;
    call {:si_unique_call 2990} DebugPrint(2, 1, Tmp_263);
    status_29 := -1073741438;
    goto L69;

  anon56_Then:
    Tmp_258 := strConst__li2bpl91;
    call {:si_unique_call 2991} DebugPrint(6, 1, Tmp_258);
    goto L65;

  anon57_Then:
    bResInterrupt := 1;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L102;

  L102:
    Tmp_266 := strConst__li2bpl98;
    call {:si_unique_call 2992} DebugPrint(6, 1, Tmp_266);
    goto L65;

  anon58_Then:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L102;

  anon46_Then:
    numberOfBARs := numberOfBARs + 1;
    Tmp_284 := strConst__li2bpl103;
    call {:si_unique_call 2993} DebugPrint(6, 1, Tmp_284);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} numberOfBARs != 2;
    Tmp_283 := strConst__li2bpl99;
    call {:si_unique_call 2994} DebugPrint(2, 1, Tmp_283);
    status_29 := -1073741438;
    goto L69;

  anon49_Then:
    assume {:partition} numberOfBARs == 2;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    bResPort := 1;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L65;

  anon44_Then:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} bResPort != 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} bResInterrupt != 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} bResMemory != 0;
    call {:si_unique_call 2995} NICDisableInterrupt(FdoData_29);
    call {:si_unique_call 2996} sdv_IoInitializeDpcRequest(0, li2bplFunctionConstant910);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    havoc vslice_dummy_var_107;
    havoc vslice_dummy_var_108;
    havoc vslice_dummy_var_109;
    havoc vslice_dummy_var_110;
    havoc vslice_dummy_var_111;
    call {:si_unique_call 2997} status_29 := IoConnectInterrupt#0(Interrupt__FDO_DATA(FdoData_29), li2bplFunctionConstant909, FdoData_29, 0, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, 1, vslice_dummy_var_111, 0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} status_29 != 0;
    Tmp_280 := strConst__li2bpl0;
    call {:si_unique_call 2998} DebugPrint(2, 1, Tmp_280);
    goto L69;

  anon52_Then:
    assume {:partition} status_29 == 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 2999} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    miniMapRegisters := 2;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 3000} MaximumPhysicalMapping := corral_nondet();
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    call {:si_unique_call 3001} DmaAdapterObject_1 := IoGetDmaAdapter(0, 0, 0);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} DmaAdapterObject_1 != 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} miniMapRegisters > MapRegisters;
    Tmp_272 := strConst__li2bpl101;
    call {:si_unique_call 3002} DebugPrint(2, 1, Tmp_272);
    status_29 := -1073741670;
    goto L69;

  anon54_Then:
    assume {:partition} MapRegisters >= miniMapRegisters;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)] := INTDIV(MapRegisters, miniMapRegisters);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} 64 > Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)];
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    Tmp_282 := Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)];
    goto L174;

  L174:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)] := Tmp_282;
    Tmp_264 := strConst__li2bpl104;
    call {:si_unique_call 3003} DebugPrint(5, 1, Tmp_264);
    Tmp_265 := strConst__li2bpl102;
    call {:si_unique_call 3004} DebugPrint(5, 1, Tmp_265);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} DmaAdapterObject_1 != 0;
    assume DmaAdapterObject_1 > 0;
    havoc Tmp_260;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_29 >= 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} DmaAdapterObject_1 != 0;
    assume DmaAdapterObject_1 > 0;
    havoc Tmp_278;
    assume {:nonnull} Tmp_278 != 0;
    assume Tmp_278 > 0;
    havoc Tmp_275;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} DmaAdapterObject_1 != 0;
    assume DmaAdapterObject_1 > 0;
    havoc Tmp_270;
    assume {:nonnull} Tmp_270 != 0;
    assume Tmp_270 > 0;
    havoc Tmp_281;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} Tmp_281 != 0;
    assume Tmp_281 > 0;
    goto L69;

  anon55_Then:
    assume {:partition} 0 > status_29;
    status_29 := -1073741670;
    goto L69;

  anon63_Then:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)] >= 64;
    Tmp_282 := 64;
    goto L174;

  anon53_Then:
    assume {:partition} DmaAdapterObject_1 == 0;
    Tmp_267 := strConst__li2bpl100;
    call {:si_unique_call 3005} DebugPrint(2, 1, Tmp_267);
    status_29 := -1073741670;
    goto L69;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:partition} bResMemory == 0;
    goto L123;

  L123:
    status_29 := -1073741438;
    goto L69;

  anon50_Then:
    assume {:partition} bResInterrupt == 0;
    goto L123;

  anon45_Then:
    assume {:partition} bResPort == 0;
    goto L123;

  anon43_Then:
    status_29 := -1073741438;
    goto L69;
}



procedure {:origName "NICMapHWResources"} NICMapHWResources#0(actual_FdoData_29: int, actual_Irp_13: int) returns (Tmp_257: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICMapHWResources"} NICMapHWResources#1(actual_FdoData_29: int, actual_Irp_13: int) returns (Tmp_257: int)
{
  var {:scalar} i_2: int;
  var {:pointer} DmaAdapterObject_1: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:pointer} Tmp_260: int;
  var {:pointer} Tmp_261: int;
  var {:scalar} deviceDescription: int;
  var {:pointer} Tmp_262: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} Tmp_264: int;
  var {:scalar} numberOfBARs: int;
  var {:pointer} Tmp_265: int;
  var {:pointer} Tmp_266: int;
  var {:pointer} Tmp_267: int;
  var {:pointer} Tmp_269: int;
  var {:pointer} Tmp_270: int;
  var {:pointer} Tmp_271: int;
  var {:pointer} Tmp_272: int;
  var {:scalar} bResInterrupt: int;
  var {:scalar} miniMapRegisters: int;
  var {:scalar} bResPort: int;
  var {:pointer} Tmp_273: int;
  var {:scalar} MaximumPhysicalMapping: int;
  var {:pointer} sdv_162: int;
  var {:pointer} Tmp_274: int;
  var {:scalar} Tmp_275: int;
  var {:pointer} sdv_163: int;
  var {:pointer} Tmp_276: int;
  var {:pointer} Tmp_278: int;
  var {:pointer} Tmp_279: int;
  var {:pointer} Tmp_280: int;
  var {:scalar} Tmp_281: int;
  var {:scalar} ScatterGatherListSize: int;
  var {:pointer} partialResourceListTranslated: int;
  var {:pointer} resourceTrans: int;
  var {:scalar} status_29: int;
  var {:scalar} MapRegisters: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} Tmp_283: int;
  var {:pointer} stack_12: int;
  var {:pointer} Tmp_284: int;
  var {:scalar} bResMemory: int;
  var {:pointer} FdoData_29: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;

  anon0:
    call {:si_unique_call 3006} deviceDescription := __HAVOC_malloc(96);
    FdoData_29 := actual_FdoData_29;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 3007} Tmp_258 := __HAVOC_malloc(128);
    call {:si_unique_call 3008} Tmp_259 := __HAVOC_malloc(156);
    call {:si_unique_call 3009} Tmp_261 := __HAVOC_malloc(84);
    call {:si_unique_call 3010} Tmp_262 := __HAVOC_malloc(312);
    call {:si_unique_call 3011} Tmp_263 := __HAVOC_malloc(180);
    call {:si_unique_call 3012} Tmp_264 := __HAVOC_malloc(108);
    call {:si_unique_call 3013} Tmp_265 := __HAVOC_malloc(104);
    call {:si_unique_call 3014} Tmp_266 := __HAVOC_malloc(220);
    call {:si_unique_call 3015} Tmp_267 := __HAVOC_malloc(96);
    call {:si_unique_call 3016} Tmp_269 := __HAVOC_malloc(204);
    call {:si_unique_call 3017} Tmp_271 := __HAVOC_malloc(136);
    call {:si_unique_call 3018} Tmp_272 := __HAVOC_malloc(212);
    call {:si_unique_call 3019} Tmp_273 := __HAVOC_malloc(84);
    call {:si_unique_call 3020} Tmp_274 := __HAVOC_malloc(292);
    call {:si_unique_call 3021} Tmp_276 := __HAVOC_malloc(60);
    call {:si_unique_call 3022} Tmp_280 := __HAVOC_malloc(120);
    call {:si_unique_call 3023} Tmp_283 := __HAVOC_malloc(168);
    call {:si_unique_call 3024} Tmp_284 := __HAVOC_malloc(140);
    status_29 := 0;
    bResPort := 0;
    bResInterrupt := 0;
    bResMemory := 0;
    numberOfBARs := 0;
    call {:si_unique_call 3025} stack_12 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    call {:si_unique_call 3026} sdv_do_paged_code_check();
    assume {:nonnull} stack_12 != 0;
    assume stack_12 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} stack_12 != 0;
    assume stack_12 > 0;
    havoc Tmp_279;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    havoc Tmp_262;
    assume {:nonnull} Tmp_262 != 0;
    assume Tmp_262 > 0;
    partialResourceListTranslated := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(Tmp_262);
    assume {:nonnull} partialResourceListTranslated != 0;
    assume partialResourceListTranslated > 0;
    havoc Tmp_274;
    resourceTrans := Tmp_274;
    i_2 := 0;
    goto L37;

  L37:
    call {:si_unique_call 3027} i_2, Tmp_258, Tmp_259, numberOfBARs, Tmp_266, Tmp_269, Tmp_271, bResInterrupt, bResPort, sdv_162, sdv_163, Tmp_276, Tmp_284, bResMemory := NICMapHWResources#1_loop_L37(i_2, Tmp_258, Tmp_259, numberOfBARs, Tmp_266, Tmp_269, Tmp_271, bResInterrupt, bResPort, sdv_162, sdv_163, Tmp_276, partialResourceListTranslated, resourceTrans, Tmp_284, bResMemory, FdoData_29);
    goto L37_last;

  L37_last:
    assume {:nonnull} partialResourceListTranslated != 0;
    assume partialResourceListTranslated > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    numberOfBARs := numberOfBARs + 1;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} numberOfBARs == 1;
    Tmp_259 := strConst__li2bpl92;
    call {:si_unique_call 3028} DebugPrint(6, 1, Tmp_259);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    havoc vslice_dummy_var_112;
    call {:si_unique_call 3029} sdv_162 := MmMapIoSpace(vslice_dummy_var_112, 24, 0);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    Tmp_276 := strConst__li2bpl94;
    call {:si_unique_call 3030} DebugPrint(6, 1, Tmp_276);
    bResMemory := 1;
    goto L65;

  L65:
    i_2 := i_2 + 1;
    goto L65_dummy;

  L65_dummy:
    assume false;
    return;

  anon60_Then:
    Tmp_273 := strConst__li2bpl93;
    call {:si_unique_call 3031} DebugPrint(2, 1, Tmp_273);
    status_29 := -1073741670;
    goto L69;

  L69:
    Tmp_257 := status_29;
    goto LM2;

  LM2:
    return;

  anon59_Then:
    assume {:partition} numberOfBARs != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} numberOfBARs == 2;
    Tmp_269 := strConst__li2bpl95;
    call {:si_unique_call 3032} DebugPrint(6, 1, Tmp_269);
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    havoc vslice_dummy_var_113;
    havoc vslice_dummy_var_114;
    call {:si_unique_call 3033} sdv_163 := MmMapIoSpace(vslice_dummy_var_113, vslice_dummy_var_114, 0);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    bResPort := 1;
    goto L65;

  anon61_Then:
    Tmp_261 := strConst__li2bpl93;
    call {:si_unique_call 3034} DebugPrint(2, 1, Tmp_261);
    status_29 := -1073741670;
    goto L69;

  anon47_Then:
    assume {:partition} numberOfBARs != 2;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} numberOfBARs == 3;
    Tmp_271 := strConst__li2bpl97;
    call {:si_unique_call 3035} DebugPrint(6, 1, Tmp_271);
    goto L65;

  anon48_Then:
    assume {:partition} numberOfBARs != 3;
    Tmp_263 := strConst__li2bpl96;
    call {:si_unique_call 3036} DebugPrint(2, 1, Tmp_263);
    status_29 := -1073741438;
    goto L69;

  anon56_Then:
    Tmp_258 := strConst__li2bpl91;
    call {:si_unique_call 3037} DebugPrint(6, 1, Tmp_258);
    goto L65;

  anon57_Then:
    bResInterrupt := 1;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L102;

  L102:
    Tmp_266 := strConst__li2bpl98;
    call {:si_unique_call 3038} DebugPrint(6, 1, Tmp_266);
    goto L65;

  anon58_Then:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L102;

  anon46_Then:
    numberOfBARs := numberOfBARs + 1;
    Tmp_284 := strConst__li2bpl103;
    call {:si_unique_call 3039} DebugPrint(6, 1, Tmp_284);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} numberOfBARs != 2;
    Tmp_283 := strConst__li2bpl99;
    call {:si_unique_call 3040} DebugPrint(2, 1, Tmp_283);
    status_29 := -1073741438;
    goto L69;

  anon49_Then:
    assume {:partition} numberOfBARs == 2;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} resourceTrans != 0;
    assume resourceTrans > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    bResPort := 1;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L65;

  anon44_Then:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} bResPort != 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} bResInterrupt != 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} bResMemory != 0;
    call {:si_unique_call 3041} NICDisableInterrupt(FdoData_29);
    call {:si_unique_call 3042} sdv_IoInitializeDpcRequest(0, li2bplFunctionConstant910);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    havoc vslice_dummy_var_115;
    havoc vslice_dummy_var_116;
    havoc vslice_dummy_var_117;
    havoc vslice_dummy_var_118;
    havoc vslice_dummy_var_119;
    call {:si_unique_call 3043} status_29 := IoConnectInterrupt#1(Interrupt__FDO_DATA(FdoData_29), li2bplFunctionConstant909, FdoData_29, 0, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, 1, vslice_dummy_var_119, 0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} status_29 != 0;
    Tmp_280 := strConst__li2bpl0;
    call {:si_unique_call 3044} DebugPrint(2, 1, Tmp_280);
    goto L69;

  anon52_Then:
    assume {:partition} status_29 == 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 3045} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    miniMapRegisters := 2;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 3046} MaximumPhysicalMapping := corral_nondet();
    assume {:nonnull} deviceDescription != 0;
    assume deviceDescription > 0;
    call {:si_unique_call 3047} DmaAdapterObject_1 := IoGetDmaAdapter(0, 0, 0);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} DmaAdapterObject_1 != 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} miniMapRegisters > MapRegisters;
    Tmp_272 := strConst__li2bpl101;
    call {:si_unique_call 3048} DebugPrint(2, 1, Tmp_272);
    status_29 := -1073741670;
    goto L69;

  anon54_Then:
    assume {:partition} MapRegisters >= miniMapRegisters;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)] := INTDIV(MapRegisters, miniMapRegisters);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} 64 > Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)];
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    Tmp_282 := Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)];
    goto L174;

  L174:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)] := Tmp_282;
    Tmp_264 := strConst__li2bpl104;
    call {:si_unique_call 3049} DebugPrint(5, 1, Tmp_264);
    Tmp_265 := strConst__li2bpl102;
    call {:si_unique_call 3050} DebugPrint(5, 1, Tmp_265);
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} DmaAdapterObject_1 != 0;
    assume DmaAdapterObject_1 > 0;
    havoc Tmp_260;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_29 >= 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} DmaAdapterObject_1 != 0;
    assume DmaAdapterObject_1 > 0;
    havoc Tmp_278;
    assume {:nonnull} Tmp_278 != 0;
    assume Tmp_278 > 0;
    havoc Tmp_275;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} DmaAdapterObject_1 != 0;
    assume DmaAdapterObject_1 > 0;
    havoc Tmp_270;
    assume {:nonnull} Tmp_270 != 0;
    assume Tmp_270 > 0;
    havoc Tmp_281;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    assume {:nonnull} Tmp_281 != 0;
    assume Tmp_281 > 0;
    goto L69;

  anon55_Then:
    assume {:partition} 0 > status_29;
    status_29 := -1073741670;
    goto L69;

  anon63_Then:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_29)] >= 64;
    Tmp_282 := 64;
    goto L174;

  anon53_Then:
    assume {:partition} DmaAdapterObject_1 == 0;
    Tmp_267 := strConst__li2bpl100;
    call {:si_unique_call 3051} DebugPrint(2, 1, Tmp_267);
    status_29 := -1073741670;
    goto L69;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:partition} bResMemory == 0;
    goto L123;

  L123:
    status_29 := -1073741438;
    goto L69;

  anon50_Then:
    assume {:partition} bResInterrupt == 0;
    goto L123;

  anon45_Then:
    assume {:partition} bResPort == 0;
    goto L123;

  anon43_Then:
    status_29 := -1073741438;
    goto L69;
}



procedure {:origName "NICMapHWResources"} NICMapHWResources#1(actual_FdoData_29: int, actual_Irp_13: int) returns (Tmp_257: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt#0(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1055: int)
{
  var {:pointer} InterruptObject_1: int;
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    InterruptObject_1 := actual_InterruptObject_1;
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_1055 := -1073741811;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    Tmp_1055 := -1073741670;
    goto L1;

  anon8_Then:
    call {:si_unique_call 3052} sdv_RunISRRoutines#0(InterruptObject_1, ServiceContext);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1055 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt#0(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1055: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt#1(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1055: int)
{
  var {:pointer} InterruptObject_1: int;
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    InterruptObject_1 := actual_InterruptObject_1;
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_1055 := -1073741811;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    Tmp_1055 := -1073741670;
    goto L1;

  anon8_Then:
    call {:si_unique_call 3053} sdv_RunISRRoutines#1(InterruptObject_1, ServiceContext);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1055 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt#1(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1055: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines#0(actual_ki: int, actual_pv1: int)
{
  var {:pointer} ki: int;
  var {:pointer} pv1: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;

  anon0:
    call {:si_unique_call 3054} vslice_dummy_var_363 := __HAVOC_malloc(4);
    ki := actual_ki;
    pv1 := actual_pv1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 4;
    call {:si_unique_call 3055} vslice_dummy_var_364 := NICInterruptHandler#0(ki, pv1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L1;
}



procedure {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines#0(actual_ki: int, actual_pv1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines#1(actual_ki: int, actual_pv1: int)
{
  var {:pointer} ki: int;
  var {:pointer} pv1: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;

  anon0:
    call {:si_unique_call 3056} vslice_dummy_var_365 := __HAVOC_malloc(4);
    ki := actual_ki;
    pv1 := actual_pv1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 4;
    call {:si_unique_call 3057} vslice_dummy_var_366 := NICInterruptHandler#1(ki, pv1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L1;
}



procedure {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines#1(actual_ki: int, actual_pv1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInterruptHandler"} NICInterruptHandler#0(actual_Interupt: int, actual_ServiceContext_1: int) returns (Tmp_1328: int)
{
  var {:scalar} IntStatus_1: int;
  var {:pointer} Tmp_1329: int;
  var {:pointer} Tmp_1330: int;
  var {:pointer} Tmp_1331: int;
  var {:scalar} InterruptRecognized: int;
  var {:pointer} Tmp_1332: int;
  var {:scalar} Tmp_1334: int;
  var {:pointer} Tmp_1335: int;
  var {:pointer} FdoData_100: int;
  var {:pointer} Tmp_1336: int;
  var {:pointer} Tmp_1337: int;
  var {:pointer} Tmp_1338: int;
  var {:pointer} ServiceContext_1: int;
  var vslice_dummy_var_120: int;

  anon0:
    ServiceContext_1 := actual_ServiceContext_1;
    call {:si_unique_call 3058} Tmp_1329 := __HAVOC_malloc(64);
    call {:si_unique_call 3059} Tmp_1332 := __HAVOC_malloc(100);
    call {:si_unique_call 3060} Tmp_1338 := __HAVOC_malloc(100);
    InterruptRecognized := 0;
    FdoData_100 := ServiceContext_1;
    Tmp_1338 := strConst__li2bpl323;
    call {:si_unique_call 3061} DebugPrint(5, 512, Tmp_1338);
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L14;

  L14:
    Tmp_1332 := strConst__li2bpl322;
    call {:si_unique_call 3062} DebugPrint(5, 512, Tmp_1332);
    Tmp_1328 := InterruptRecognized;
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1336;
    assume {:nonnull} Tmp_1336 != 0;
    assume Tmp_1336 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1330;
    assume {:nonnull} Tmp_1330 != 0;
    assume Tmp_1330 > 0;
    havoc Tmp_1334;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_1334 != 65280;
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1331;
    assume {:nonnull} Tmp_1331 != 0;
    assume Tmp_1331 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    InterruptRecognized := 1;
    call {:si_unique_call 3063} NICDisableInterrupt(FdoData_100);
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1337;
    assume {:nonnull} Tmp_1337 != 0;
    assume Tmp_1337 > 0;
    havoc IntStatus_1;
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1335;
    assume {:nonnull} Tmp_1335 != 0;
    assume Tmp_1335 > 0;
    Tmp_1329 := strConst__li2bpl324;
    call {:si_unique_call 3064} DebugPrint(5, 512, Tmp_1329);
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc vslice_dummy_var_120;
    call {:si_unique_call 3065} sdv_IoRequestDpc#0(vslice_dummy_var_120, 0, FdoData_100);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    goto L14;

  anon13_Then:
    assume {:partition} Tmp_1334 == 65280;
    goto L14;

  anon12_Then:
    goto L14;
}



procedure {:origName "NICInterruptHandler"} NICInterruptHandler#0(actual_Interupt: int, actual_ServiceContext_1: int) returns (Tmp_1328: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInterruptHandler"} NICInterruptHandler#1(actual_Interupt: int, actual_ServiceContext_1: int) returns (Tmp_1328: int)
{
  var {:scalar} IntStatus_1: int;
  var {:pointer} Tmp_1329: int;
  var {:pointer} Tmp_1330: int;
  var {:pointer} Tmp_1331: int;
  var {:scalar} InterruptRecognized: int;
  var {:pointer} Tmp_1332: int;
  var {:scalar} Tmp_1334: int;
  var {:pointer} Tmp_1335: int;
  var {:pointer} FdoData_100: int;
  var {:pointer} Tmp_1336: int;
  var {:pointer} Tmp_1337: int;
  var {:pointer} Tmp_1338: int;
  var {:pointer} ServiceContext_1: int;
  var vslice_dummy_var_121: int;

  anon0:
    ServiceContext_1 := actual_ServiceContext_1;
    call {:si_unique_call 3066} Tmp_1329 := __HAVOC_malloc(64);
    call {:si_unique_call 3067} Tmp_1332 := __HAVOC_malloc(100);
    call {:si_unique_call 3068} Tmp_1338 := __HAVOC_malloc(100);
    InterruptRecognized := 0;
    FdoData_100 := ServiceContext_1;
    Tmp_1338 := strConst__li2bpl323;
    call {:si_unique_call 3069} DebugPrint(5, 512, Tmp_1338);
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L14;

  L14:
    Tmp_1332 := strConst__li2bpl322;
    call {:si_unique_call 3070} DebugPrint(5, 512, Tmp_1332);
    Tmp_1328 := InterruptRecognized;
    goto LM2;

  LM2:
    return;

  anon11_Then:
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1336;
    assume {:nonnull} Tmp_1336 != 0;
    assume Tmp_1336 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1330;
    assume {:nonnull} Tmp_1330 != 0;
    assume Tmp_1330 > 0;
    havoc Tmp_1334;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_1334 != 65280;
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1331;
    assume {:nonnull} Tmp_1331 != 0;
    assume Tmp_1331 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    InterruptRecognized := 1;
    call {:si_unique_call 3071} NICDisableInterrupt(FdoData_100);
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1337;
    assume {:nonnull} Tmp_1337 != 0;
    assume Tmp_1337 > 0;
    havoc IntStatus_1;
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc Tmp_1335;
    assume {:nonnull} Tmp_1335 != 0;
    assume Tmp_1335 > 0;
    Tmp_1329 := strConst__li2bpl324;
    call {:si_unique_call 3072} DebugPrint(5, 512, Tmp_1329);
    assume {:nonnull} FdoData_100 != 0;
    assume FdoData_100 > 0;
    havoc vslice_dummy_var_121;
    call {:si_unique_call 3073} sdv_IoRequestDpc#1(vslice_dummy_var_121, 0, FdoData_100);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    goto L14;

  anon13_Then:
    assume {:partition} Tmp_1334 == 65280;
    goto L14;

  anon12_Then:
    goto L14;
}



procedure {:origName "NICInterruptHandler"} NICInterruptHandler#1(actual_Interupt: int, actual_ServiceContext_1: int) returns (Tmp_1328: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoRequestDpc"} {:osmodel} sdv_IoRequestDpc#0(actual_DeviceObject_46: int, actual_Irp_40: int, actual_Context_19: int)
{
  var {:pointer} DeviceObject_46: int;
  var {:pointer} Irp_40: int;
  var {:pointer} Context_19: int;
  var vslice_dummy_var_367: int;

  anon0:
    call {:si_unique_call 3074} vslice_dummy_var_367 := __HAVOC_malloc(4);
    DeviceObject_46 := actual_DeviceObject_46;
    Irp_40 := actual_Irp_40;
    Context_19 := actual_Context_19;
    call {:si_unique_call 3075} sdv_RunIoDpcRoutines#0(Context_19, DeviceObject_46, Irp_40, Context_19);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoRequestDpc"} {:osmodel} sdv_IoRequestDpc#0(actual_DeviceObject_46: int, actual_Irp_40: int, actual_Context_19: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoRequestDpc"} {:osmodel} sdv_IoRequestDpc#1(actual_DeviceObject_46: int, actual_Irp_40: int, actual_Context_19: int)
{
  var {:pointer} DeviceObject_46: int;
  var {:pointer} Irp_40: int;
  var {:pointer} Context_19: int;
  var vslice_dummy_var_368: int;

  anon0:
    call {:si_unique_call 3076} vslice_dummy_var_368 := __HAVOC_malloc(4);
    DeviceObject_46 := actual_DeviceObject_46;
    Irp_40 := actual_Irp_40;
    Context_19 := actual_Context_19;
    call {:si_unique_call 3077} sdv_RunIoDpcRoutines#1(Context_19, DeviceObject_46, Irp_40, Context_19);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoRequestDpc"} {:osmodel} sdv_IoRequestDpc#1(actual_DeviceObject_46: int, actual_Irp_40: int, actual_Context_19: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoDpcRoutines"} {:osmodel} sdv_RunIoDpcRoutines#0(actual_Dpc_2: int, actual_DeviceObject_49: int, actual_Irp_41: int, actual_Context_20: int)
{
  var {:pointer} Dpc_2: int;
  var {:pointer} DeviceObject_49: int;
  var {:pointer} Irp_41: int;
  var {:pointer} Context_20: int;
  var vslice_dummy_var_369: int;

  anon0:
    call {:si_unique_call 3078} vslice_dummy_var_369 := __HAVOC_malloc(4);
    Dpc_2 := actual_Dpc_2;
    DeviceObject_49 := actual_DeviceObject_49;
    Irp_41 := actual_Irp_41;
    Context_20 := actual_Context_20;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 3079} NICDpcForIsr#0(Dpc_2, DeviceObject_49, Irp_41, Context_20);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    goto L1;

  anon7_Then:
    goto L1;
}



procedure {:origName "sdv_RunIoDpcRoutines"} {:osmodel} sdv_RunIoDpcRoutines#0(actual_Dpc_2: int, actual_DeviceObject_49: int, actual_Irp_41: int, actual_Context_20: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoDpcRoutines"} {:osmodel} sdv_RunIoDpcRoutines#1(actual_Dpc_2: int, actual_DeviceObject_49: int, actual_Irp_41: int, actual_Context_20: int)
{
  var {:pointer} Dpc_2: int;
  var {:pointer} DeviceObject_49: int;
  var {:pointer} Irp_41: int;
  var {:pointer} Context_20: int;
  var vslice_dummy_var_370: int;

  anon0:
    call {:si_unique_call 3080} vslice_dummy_var_370 := __HAVOC_malloc(4);
    Dpc_2 := actual_Dpc_2;
    DeviceObject_49 := actual_DeviceObject_49;
    Irp_41 := actual_Irp_41;
    Context_20 := actual_Context_20;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 3081} NICDpcForIsr#1(Dpc_2, DeviceObject_49, Irp_41, Context_20);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    goto L1;

  anon7_Then:
    goto L1;
}



procedure {:origName "sdv_RunIoDpcRoutines"} {:osmodel} sdv_RunIoDpcRoutines#1(actual_Dpc_2: int, actual_DeviceObject_49: int, actual_Irp_41: int, actual_Context_20: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICDpcForIsr"} NICDpcForIsr#0(actual_Dpc_3: int, actual_DeviceObject_57: int, actual_Irp_47: int, actual_Context_22: int)
{
  var {:pointer} Tmp_1361: int;
  var {:pointer} fdoData_32: int;
  var {:pointer} Tmp_1363: int;
  var {:pointer} Context_22: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;

  anon0:
    call {:si_unique_call 3082} vslice_dummy_var_371 := __HAVOC_malloc(4);
    Context_22 := actual_Context_22;
    call {:si_unique_call 3083} Tmp_1361 := __HAVOC_malloc(72);
    call {:si_unique_call 3084} Tmp_1363 := __HAVOC_malloc(72);
    fdoData_32 := Context_22;
    Tmp_1363 := strConst__li2bpl326;
    call {:si_unique_call 3085} DebugPrint(5, 256, Tmp_1363);
    call {:si_unique_call 3086} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3087} NICHandleRecvInterrupt#0(fdoData_32);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3088} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3089} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3090} vslice_dummy_var_372 := NICHandleSendInterrupt(fdoData_32);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3091} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3092} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3093} vslice_dummy_var_373 := NICStartRecv#0(fdoData_32);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3094} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3095} vslice_dummy_var_374 := KeSynchronizeExecution(0, li2bplFunctionConstant903, fdoData_32);
    Tmp_1361 := strConst__li2bpl325;
    call {:si_unique_call 3096} DebugPrint(5, 256, Tmp_1361);
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "NICDpcForIsr"} NICDpcForIsr#0(actual_Dpc_3: int, actual_DeviceObject_57: int, actual_Irp_47: int, actual_Context_22: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICDpcForIsr"} NICDpcForIsr#1(actual_Dpc_3: int, actual_DeviceObject_57: int, actual_Irp_47: int, actual_Context_22: int)
{
  var {:pointer} Tmp_1361: int;
  var {:pointer} fdoData_32: int;
  var {:pointer} Tmp_1363: int;
  var {:pointer} Context_22: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;

  anon0:
    call {:si_unique_call 3097} vslice_dummy_var_375 := __HAVOC_malloc(4);
    Context_22 := actual_Context_22;
    call {:si_unique_call 3098} Tmp_1361 := __HAVOC_malloc(72);
    call {:si_unique_call 3099} Tmp_1363 := __HAVOC_malloc(72);
    fdoData_32 := Context_22;
    Tmp_1363 := strConst__li2bpl326;
    call {:si_unique_call 3100} DebugPrint(5, 256, Tmp_1363);
    call {:si_unique_call 3101} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3102} NICHandleRecvInterrupt#1(fdoData_32);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3103} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3104} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3105} vslice_dummy_var_376 := NICHandleSendInterrupt(fdoData_32);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3106} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3107} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3108} vslice_dummy_var_377 := NICStartRecv#1(fdoData_32);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3109} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3110} vslice_dummy_var_378 := KeSynchronizeExecution(0, li2bplFunctionConstant903, fdoData_32);
    Tmp_1361 := strConst__li2bpl325;
    call {:si_unique_call 3111} DebugPrint(5, 256, Tmp_1361);
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "NICDpcForIsr"} NICDpcForIsr#1(actual_Dpc_3: int, actual_DeviceObject_57: int, actual_Irp_47: int, actual_Context_22: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetDeviceCapabilities"} PciDrvGetDeviceCapabilities#0(actual_DeviceObject_35: int, actual_DeviceCapabilities_1: int) returns (Tmp_768: int)
{
  var {:pointer} irpStack_3: int;
  var {:scalar} pnpEvent: int;
  var {:pointer} pnpIrp: int;
  var {:scalar} ioStatus: int;
  var {:scalar} status_68: int;
  var {:pointer} targetObject_1: int;
  var {:pointer} DeviceObject_35: int;
  var {:pointer} DeviceCapabilities_1: int;
  var vslice_dummy_var_379: int;

  anon0:
    call {:si_unique_call 3112} pnpEvent := __HAVOC_malloc(156);
    call {:si_unique_call 3113} ioStatus := __HAVOC_malloc(12);
    DeviceObject_35 := actual_DeviceObject_35;
    DeviceCapabilities_1 := actual_DeviceCapabilities_1;
    call {:si_unique_call 3114} sdv_do_paged_code_check();
    call {:si_unique_call 3115} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    call {:si_unique_call 3116} KeInitializeEvent(pnpEvent, 0, 0);
    call {:si_unique_call 3117} targetObject_1 := IoGetAttachedDeviceReference(DeviceObject_35);
    call {:si_unique_call 3118} pnpIrp := IoBuildSynchronousFsdRequest(27, 0, 0, 0, 0, 0, ioStatus);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} pnpIrp != 0;
    assume {:nonnull} pnpIrp != 0;
    assume pnpIrp > 0;
    call {:si_unique_call 3119} irpStack_3 := sdv_IoGetNextIrpStackLocation(pnpIrp);
    call {:si_unique_call 3120} sdv_RtlZeroMemory(0, 36);
    assume {:nonnull} irpStack_3 != 0;
    assume irpStack_3 > 0;
    assume {:nonnull} irpStack_3 != 0;
    assume irpStack_3 > 0;
    assume {:nonnull} irpStack_3 != 0;
    assume irpStack_3 > 0;
    call {:si_unique_call 3121} status_68 := sdv_IoCallDriver#0(targetObject_1, pnpIrp);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_68 == 259;
    call {:si_unique_call 3122} status_68 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} ioStatus != 0;
    assume ioStatus > 0;
    havoc status_68;
    goto L48;

  L48:
    call {:si_unique_call 3123} vslice_dummy_var_379 := sdv_ObDereferenceObject(0);
    Tmp_768 := status_68;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} status_68 != 259;
    goto L48;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} pnpIrp == 0;
    status_68 := -1073741670;
    goto L48;
}



procedure {:origName "PciDrvGetDeviceCapabilities"} PciDrvGetDeviceCapabilities#0(actual_DeviceObject_35: int, actual_DeviceCapabilities_1: int) returns (Tmp_768: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == 0 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetDeviceCapabilities"} PciDrvGetDeviceCapabilities#1(actual_DeviceObject_35: int, actual_DeviceCapabilities_1: int) returns (Tmp_768: int)
{
  var {:pointer} irpStack_3: int;
  var {:scalar} pnpEvent: int;
  var {:pointer} pnpIrp: int;
  var {:scalar} ioStatus: int;
  var {:scalar} status_68: int;
  var {:pointer} targetObject_1: int;
  var {:pointer} DeviceObject_35: int;
  var {:pointer} DeviceCapabilities_1: int;
  var vslice_dummy_var_380: int;

  anon0:
    call {:si_unique_call 3124} pnpEvent := __HAVOC_malloc(156);
    call {:si_unique_call 3125} ioStatus := __HAVOC_malloc(12);
    DeviceObject_35 := actual_DeviceObject_35;
    DeviceCapabilities_1 := actual_DeviceCapabilities_1;
    call {:si_unique_call 3126} sdv_do_paged_code_check();
    call {:si_unique_call 3127} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    assume {:nonnull} DeviceCapabilities_1 != 0;
    assume DeviceCapabilities_1 > 0;
    call {:si_unique_call 3128} KeInitializeEvent(pnpEvent, 0, 0);
    call {:si_unique_call 3129} targetObject_1 := IoGetAttachedDeviceReference(DeviceObject_35);
    call {:si_unique_call 3130} pnpIrp := IoBuildSynchronousFsdRequest(27, 0, 0, 0, 0, 0, ioStatus);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} pnpIrp != 0;
    assume {:nonnull} pnpIrp != 0;
    assume pnpIrp > 0;
    call {:si_unique_call 3131} irpStack_3 := sdv_IoGetNextIrpStackLocation(pnpIrp);
    call {:si_unique_call 3132} sdv_RtlZeroMemory(0, 36);
    assume {:nonnull} irpStack_3 != 0;
    assume irpStack_3 > 0;
    assume {:nonnull} irpStack_3 != 0;
    assume irpStack_3 > 0;
    assume {:nonnull} irpStack_3 != 0;
    assume irpStack_3 > 0;
    call {:si_unique_call 3133} status_68 := sdv_IoCallDriver#1(targetObject_1, pnpIrp);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_68 == 259;
    call {:si_unique_call 3134} status_68 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} ioStatus != 0;
    assume ioStatus > 0;
    havoc status_68;
    goto L48;

  L48:
    call {:si_unique_call 3135} vslice_dummy_var_380 := sdv_ObDereferenceObject(0);
    Tmp_768 := status_68;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} status_68 != 259;
    goto L48;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} pnpIrp == 0;
    status_68 := -1073741670;
    goto L48;
}



procedure {:origName "PciDrvGetDeviceCapabilities"} PciDrvGetDeviceCapabilities#1(actual_DeviceObject_35: int, actual_DeviceCapabilities_1: int) returns (Tmp_768: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#0(actual_DeviceObject_53: int, actual_Irp_44: int) returns (Tmp_1042: int)
{
  var {:pointer} Irp_44: int;

  anon0:
    Irp_44 := actual_Irp_44;
    call {:si_unique_call 3136} Tmp_1042 := IofCallDriver#0(0, Irp_44);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#0(actual_DeviceObject_53: int, actual_Irp_44: int) returns (Tmp_1042: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == 0 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#1(actual_DeviceObject_53: int, actual_Irp_44: int) returns (Tmp_1042: int)
{
  var {:pointer} Irp_44: int;

  anon0:
    Irp_44 := actual_Irp_44;
    call {:si_unique_call 3137} Tmp_1042 := IofCallDriver#1(0, Irp_44);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver#1(actual_DeviceObject_53: int, actual_Irp_44: int) returns (Tmp_1042: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver#0(actual_DeviceObject_50: int, actual_Irp_42: int) returns (Tmp_1030: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_82: int;
  var {:pointer} Irp_42: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;

  anon0:
    call {:si_unique_call 3138} completion_1 := __HAVOC_malloc(4);
    Irp_42 := actual_Irp_42;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_82 := 259;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L29;

  L29:
    Tmp_1030 := status_82;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    havoc vslice_dummy_var_122;
    call {:si_unique_call 3139} vslice_dummy_var_381 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_122, completion_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L23;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L19;

  anon68_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L58;

  L58:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L60;

  L60:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc vslice_dummy_var_123;
    call {:si_unique_call 3140} vslice_dummy_var_384 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_123, completion_1);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L62;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L58;

  anon69_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L32;

  L32:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    havoc vslice_dummy_var_124;
    call {:si_unique_call 3141} vslice_dummy_var_382 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_124, completion_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L36;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L32;

  anon70_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L45;

  L45:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L47;

  L47:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    havoc vslice_dummy_var_125;
    call {:si_unique_call 3142} vslice_dummy_var_383 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_125, completion_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    goto L29;

  anon62_Then:
    goto L29;

  anon61_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L49;

  anon60_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L45;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver#0(actual_DeviceObject_50: int, actual_Irp_42: int) returns (Tmp_1030: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == 0 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver#1(actual_DeviceObject_50: int, actual_Irp_42: int) returns (Tmp_1030: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_82: int;
  var {:pointer} Irp_42: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;

  anon0:
    call {:si_unique_call 3143} completion_1 := __HAVOC_malloc(4);
    Irp_42 := actual_Irp_42;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_82 := 259;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L29;

  L29:
    Tmp_1030 := status_82;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    havoc vslice_dummy_var_126;
    call {:si_unique_call 3144} vslice_dummy_var_385 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_126, completion_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L23;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L19;

  anon68_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L58;

  L58:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L60;

  L60:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc vslice_dummy_var_127;
    call {:si_unique_call 3145} vslice_dummy_var_388 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_127, completion_1);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L62;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L58;

  anon69_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L32;

  L32:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    havoc vslice_dummy_var_128;
    call {:si_unique_call 3146} vslice_dummy_var_386 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_128, completion_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L36;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L32;

  anon70_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L45;

  L45:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_42;
    goto L47;

  L47:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_42;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    havoc vslice_dummy_var_129;
    call {:si_unique_call 3147} vslice_dummy_var_387 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_42, vslice_dummy_var_129, completion_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    goto L29;

  anon62_Then:
    goto L29;

  anon61_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_42;
    goto L49;

  anon60_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_42;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_42;
    goto L45;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver#1(actual_DeviceObject_50: int, actual_Irp_42: int) returns (Tmp_1030: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation MPCalculateE100PatternForFilter_loop_L41(in_i: int, in_Tmp_7: int, in_MaskBit: int, in_pCurrentMaskByte: int, in_Signature: int, in_n: int, in_MaskOffset: int, in_Tmp_11: int, in_BitOffsetInMask: int, in_pFrame: int, in_FrameLength: int, in_MaskLength: int) returns (out_i: int, out_Tmp_7: int, out_MaskBit: int, out_Signature: int, out_n: int, out_MaskOffset: int, out_Tmp_11: int, out_BitOffsetInMask: int)
{

  entry:
    out_i, out_Tmp_7, out_MaskBit, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask := in_i, in_Tmp_7, in_MaskBit, in_Signature, in_n, in_MaskOffset, in_Tmp_11, in_BitOffsetInMask;
    goto L41, exit;

  exit:
    return;

  L41:
    goto anon18_Else;

  anon18_Else:
    assume {:partition} 128 > out_n;
    goto anon19_Else;

  anon19_Else:
    assume {:partition} in_FrameLength > out_n;
    out_BitOffsetInMask := INTMOD(out_n, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_BitOffsetInMask != 0;
    goto L47;

  L47:
    call {:si_unique_call 3150} out_MaskBit := corral_nondet();
    assume {:nonnull} in_pCurrentMaskByte != 0;
    assume in_pCurrentMaskByte > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} BAND(out_MaskBit, Mem_T.INT4[in_pCurrentMaskByte]) == 0;
    goto L57;

  L57:
    out_n := out_n + 1;
    goto L57_dummy;

  L57_dummy:
    call {:si_unique_call 3151} {:si_old_unique_call 1} out_i, out_Tmp_7, out_MaskBit, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask := MPCalculateE100PatternForFilter_loop_L41(out_i, out_Tmp_7, out_MaskBit, in_pCurrentMaskByte, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask, in_pFrame, in_FrameLength, in_MaskLength);
    return;

  anon22_Then:
    assume {:partition} BAND(out_MaskBit, Mem_T.INT4[in_pCurrentMaskByte]) != 0;
    out_Tmp_11 := out_n;
    assume {:nonnull} in_pFrame != 0;
    assume in_pFrame > 0;
    out_Tmp_7 := INTMOD(out_i, 3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(out_Signature, 0) != 0;
    call {:si_unique_call 3148} out_Signature := corral_nondet();
    goto L56;

  L56:
    out_i := out_i + 1;
    goto L57;

  anon23_Then:
    assume {:partition} BAND(out_Signature, 0) == 0;
    call {:si_unique_call 3149} out_Signature := corral_nondet();
    goto L56;

  anon21_Then:
    assume {:partition} out_BitOffsetInMask == 0;
    out_MaskOffset := INTDIV(out_n, 8);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_MaskOffset != in_MaskLength;
    goto L47;
}



procedure {:LoopProcedure} MPCalculateE100PatternForFilter_loop_L41(in_i: int, in_Tmp_7: int, in_MaskBit: int, in_pCurrentMaskByte: int, in_Signature: int, in_n: int, in_MaskOffset: int, in_Tmp_11: int, in_BitOffsetInMask: int, in_pFrame: int, in_FrameLength: int, in_MaskLength: int) returns (out_i: int, out_Tmp_7: int, out_MaskBit: int, out_Signature: int, out_n: int, out_MaskOffset: int, out_Tmp_11: int, out_BitOffsetInMask: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICRemoveAllWakeUpPatterns_loop_L8(in_sdv_12: int, in_pPatternEntry: int, in_vslice_dummy_var_2: int) returns (out_sdv_12: int, out_pPatternEntry: int, out_vslice_dummy_var_2: int)
{

  entry:
    out_sdv_12, out_pPatternEntry, out_vslice_dummy_var_2 := in_sdv_12, in_pPatternEntry, in_vslice_dummy_var_2;
    goto L8, exit;

  exit:
    return;

  L8:
    goto anon3_Else;

  anon3_Else:
    call {:si_unique_call 3152} out_sdv_12 := sdv_containing_record(out_pPatternEntry, 0);
    assume {:nonnull} out_pPatternEntry != 0;
    assume out_pPatternEntry > 0;
    havoc out_pPatternEntry;
    call {:si_unique_call 3153} out_vslice_dummy_var_2 := sdv_RemoveEntryList(0);
    call {:si_unique_call 3154} ExFreePoolWithTag(0, -1001831600);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_pPatternEntry;
    return;
}



procedure {:LoopProcedure} NICRemoveAllWakeUpPatterns_loop_L8(in_sdv_12: int, in_pPatternEntry: int, in_vslice_dummy_var_2: int) returns (out_sdv_12: int, out_pPatternEntry: int, out_vslice_dummy_var_2: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_12 == in_pPatternEntry || out_sdv_12 == in_sdv_12;
  free ensures {:va_keep} out_vslice_dummy_var_2 == 1 || out_vslice_dummy_var_2 == 0 || out_vslice_dummy_var_2 == in_vslice_dummy_var_2;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICRemoveWakeUpPattern_loop_L32(in_pReqPattern: int, in_Tmp_29: int, in_bIsThisThePattern: int, in_sdv_19: int, in_pWakeUpPattern_1: int, in_pCurrPattern: int, in_pPatternEntry_1: int) returns (out_Tmp_29: int, out_bIsThisThePattern: int, out_sdv_19: int, out_pWakeUpPattern_1: int, out_pCurrPattern: int, out_pPatternEntry_1: int)
{

  entry:
    out_Tmp_29, out_bIsThisThePattern, out_sdv_19, out_pWakeUpPattern_1, out_pCurrPattern, out_pPatternEntry_1 := in_Tmp_29, in_bIsThisThePattern, in_sdv_19, in_pWakeUpPattern_1, in_pCurrPattern, in_pPatternEntry_1;
    goto L32, exit;

  exit:
    return;

  L32:
    goto anon14_Else;

  anon14_Else:
    out_bIsThisThePattern := 0;
    out_pWakeUpPattern_1 := 0;
    out_pCurrPattern := 0;
    call {:si_unique_call 3155} out_sdv_19 := sdv_containing_record(out_pPatternEntry_1, 0);
    out_pWakeUpPattern_1 := out_sdv_19;
    assume {:nonnull} out_pWakeUpPattern_1 != 0;
    assume out_pWakeUpPattern_1 > 0;
    havoc out_Tmp_29;
    out_pCurrPattern := out_Tmp_29;
    assume {:nonnull} out_pPatternEntry_1 != 0;
    assume out_pPatternEntry_1 > 0;
    havoc out_pPatternEntry_1;
    call {:si_unique_call 3156} out_bIsThisThePattern := MPAreTwoPatternsEqual(in_pReqPattern, out_pCurrPattern);
    goto anon15_Then;

  anon15_Then:
    assume {:partition} out_bIsThisThePattern != 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    havoc out_pPatternEntry_1;
    return;
}



procedure {:LoopProcedure} NICRemoveWakeUpPattern_loop_L32(in_pReqPattern: int, in_Tmp_29: int, in_bIsThisThePattern: int, in_sdv_19: int, in_pWakeUpPattern_1: int, in_pCurrPattern: int, in_pPatternEntry_1: int) returns (out_Tmp_29: int, out_bIsThisThePattern: int, out_sdv_19: int, out_pWakeUpPattern_1: int, out_pCurrPattern: int, out_pPatternEntry_1: int);
  free ensures {:va_keep} out_bIsThisThePattern == 0 || out_bIsThisThePattern == 1 || out_bIsThisThePattern == in_bIsThisThePattern;
  free ensures {:va_keep} out_sdv_19 == in_pPatternEntry_1 || out_sdv_19 == in_sdv_19;
  free ensures {:va_keep} out_pWakeUpPattern_1 == in_pPatternEntry_1 || out_pWakeUpPattern_1 == in_pWakeUpPattern_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation MPSetUpFilterCB_loop_L24(in_pFilterCb: int, in_Tmp_43: int, in_Curr: int, in_sdv_27: int, in_Tmp_46: int, in_Tmp_47: int, in_pWakeUpPattern_3: int, in_Next: int, in_pPatternEntry_2: int) returns (out_Tmp_43: int, out_Curr: int, out_sdv_27: int, out_Tmp_46: int, out_Tmp_47: int, out_pWakeUpPattern_3: int, out_pPatternEntry_2: int)
{

  entry:
    out_Tmp_43, out_Curr, out_sdv_27, out_Tmp_46, out_Tmp_47, out_pWakeUpPattern_3, out_pPatternEntry_2 := in_Tmp_43, in_Curr, in_sdv_27, in_Tmp_46, in_Tmp_47, in_pWakeUpPattern_3, in_pPatternEntry_2;
    goto L24, exit;

  exit:
    return;

  L24:
    goto anon7_Then;

  anon7_Then:
    out_pWakeUpPattern_3 := 0;
    call {:si_unique_call 3157} out_sdv_27 := sdv_containing_record(out_pPatternEntry_2, 0);
    out_pWakeUpPattern_3 := out_sdv_27;
    assume {:nonnull} out_pPatternEntry_2 != 0;
    assume out_pPatternEntry_2 > 0;
    havoc out_pPatternEntry_2;
    assume {:nonnull} in_Next != 0;
    assume in_Next > 0;
    out_Curr := Mem_T.INT4[in_Next];
    out_Tmp_43 := out_Curr;
    assume {:nonnull} in_pFilterCb != 0;
    assume in_pFilterCb > 0;
    havoc out_Tmp_47;
    out_Tmp_46 := out_Tmp_47 + out_Tmp_43 * 4;
    call {:si_unique_call 3158} MPCreateProgrammableFilter(out_pWakeUpPattern_3, out_Tmp_46, in_Next);
    assume {:nonnull} in_Next != 0;
    assume in_Next > 0;
    goto anon8_Then;

  anon8_Then:
    assume {:partition} 16 > Mem_T.INT4[in_Next];
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    call {:si_unique_call 3159} {:si_old_unique_call 1} out_Tmp_43, out_Curr, out_sdv_27, out_Tmp_46, out_Tmp_47, out_pWakeUpPattern_3, out_pPatternEntry_2 := MPSetUpFilterCB_loop_L24(in_pFilterCb, out_Tmp_43, out_Curr, out_sdv_27, out_Tmp_46, out_Tmp_47, out_pWakeUpPattern_3, in_Next, out_pPatternEntry_2);
    return;
}



procedure {:LoopProcedure} MPSetUpFilterCB_loop_L24(in_pFilterCb: int, in_Tmp_43: int, in_Curr: int, in_sdv_27: int, in_Tmp_46: int, in_Tmp_47: int, in_pWakeUpPattern_3: int, in_Next: int, in_pPatternEntry_2: int) returns (out_Tmp_43: int, out_Curr: int, out_sdv_27: int, out_Tmp_46: int, out_Tmp_47: int, out_pWakeUpPattern_3: int, out_pPatternEntry_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ShiftInBits_loop_L14(in_i_1: int, in_x: int, in_Tmp_82: int, in_d: int, in_FdoData_13: int, in_CSRBaseIoAddress: int, in_boogieTmp: int) returns (out_i_1: int, out_Tmp_82: int, out_d: int, out_boogieTmp: int)
{

  entry:
    out_i_1, out_Tmp_82, out_d, out_boogieTmp := in_i_1, in_Tmp_82, in_d, in_boogieTmp;
    goto L14, exit;

  exit:
    return;

  L14:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} 16 > out_i_1;
    call {:si_unique_call 3163} out_d := corral_nondet();
    call {:si_unique_call 3164} RaiseClock(in_FdoData_13, in_x, in_CSRBaseIoAddress);
    out_Tmp_82 := in_CSRBaseIoAddress;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_13 != 0;
    assume in_FdoData_13 > 0;
    assume {:nonnull} in_x != 0;
    assume in_x > 0;
    call {:si_unique_call 3161} out_boogieTmp := NICReadPortUShort(out_Tmp_82);
    Mem_T.INT4[in_x] := out_boogieTmp;
    goto L25;

  L25:
    assume {:nonnull} in_x != 0;
    assume in_x > 0;
    Mem_T.INT4[in_x] := BAND(Mem_T.INT4[in_x], BNOT(4));
    assume {:nonnull} in_x != 0;
    assume in_x > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mem_T.INT4[in_x], 8) != 0;
    out_d := BOR(out_d, 1);
    goto L27;

  L27:
    call {:si_unique_call 3160} LowerClock(in_FdoData_13, in_x, in_CSRBaseIoAddress);
    out_i_1 := out_i_1 + 1;
    goto L27_dummy;

  L27_dummy:
    havoc out_i_1;
    return;

  anon12_Then:
    assume {:partition} BAND(Mem_T.INT4[in_x], 8) == 0;
    goto L27;

  anon11_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_13 != 0;
    assume in_FdoData_13 > 0;
    assume {:nonnull} in_x != 0;
    assume in_x > 0;
    call {:si_unique_call 3162} out_boogieTmp := NICReadRegisterUShort(out_Tmp_82);
    Mem_T.INT4[in_x] := out_boogieTmp;
    goto L25;
}



procedure {:LoopProcedure} ShiftInBits_loop_L14(in_i_1: int, in_x: int, in_Tmp_82: int, in_d: int, in_FdoData_13: int, in_CSRBaseIoAddress: int, in_boogieTmp: int) returns (out_i_1: int, out_Tmp_82: int, out_d: int, out_boogieTmp: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_82 == in_CSRBaseIoAddress || out_Tmp_82 == in_Tmp_82;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetEEpromSize_loop_L26(in_size: int, in_x_3: int, in_Tmp_96: int, in_Tmp_97: int, in_FdoData_16: int, in_CSRBaseIoAddress_3: int, in_boogieTmp: int) returns (out_size: int, out_Tmp_96: int, out_Tmp_97: int, out_boogieTmp: int)
{

  entry:
    out_size, out_Tmp_96, out_Tmp_97, out_boogieTmp := in_size, in_Tmp_96, in_Tmp_97, in_boogieTmp;
    goto L26, exit;

  exit:
    return;

  L26:
    out_size := out_size * 2;
    assume {:nonnull} in_x_3 != 0;
    assume in_x_3 > 0;
    Mem_T.INT4[in_x_3] := BOR(Mem_T.INT4[in_x_3], 8);
    assume {:nonnull} in_x_3 != 0;
    assume in_x_3 > 0;
    Mem_T.INT4[in_x_3] := BAND(Mem_T.INT4[in_x_3], BNOT(4));
    out_Tmp_96 := in_CSRBaseIoAddress_3;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_16 != 0;
    assume in_FdoData_16 > 0;
    assume {:nonnull} in_x_3 != 0;
    assume in_x_3 > 0;
    call {:si_unique_call 3169} NICWritePortUShort(out_Tmp_96, Mem_T.INT4[in_x_3]);
    goto L72;

  L72:
    call {:si_unique_call 3167} RaiseClock(in_FdoData_16, in_x_3, in_CSRBaseIoAddress_3);
    call {:si_unique_call 3168} LowerClock(in_FdoData_16, in_x_3, in_CSRBaseIoAddress_3);
    out_Tmp_97 := in_CSRBaseIoAddress_3;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_16 != 0;
    assume in_FdoData_16 > 0;
    assume {:nonnull} in_x_3 != 0;
    assume in_x_3 > 0;
    call {:si_unique_call 3165} out_boogieTmp := NICReadPortUShort(out_Tmp_97);
    Mem_T.INT4[in_x_3] := out_boogieTmp;
    goto L47;

  L47:
    goto anon15_Then;

  anon15_Then:
    assume {:partition} 256 >= out_size;
    assume {:nonnull} in_x_3 != 0;
    assume in_x_3 > 0;
    goto anon16_Then;

  anon16_Then:
    assume {:partition} BAND(Mem_T.INT4[in_x_3], 8) != 0;
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    havoc out_size;
    return;

  anon21_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_16 != 0;
    assume in_FdoData_16 > 0;
    assume {:nonnull} in_x_3 != 0;
    assume in_x_3 > 0;
    call {:si_unique_call 3166} out_boogieTmp := NICReadRegisterUShort(out_Tmp_97);
    Mem_T.INT4[in_x_3] := out_boogieTmp;
    goto L47;

  anon20_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_16 != 0;
    assume in_FdoData_16 > 0;
    assume {:nonnull} in_x_3 != 0;
    assume in_x_3 > 0;
    call {:si_unique_call 3170} NICWriteRegisterUShort(out_Tmp_96, Mem_T.INT4[in_x_3]);
    goto L72;
}



procedure {:LoopProcedure} GetEEpromSize_loop_L26(in_size: int, in_x_3: int, in_Tmp_96: int, in_Tmp_97: int, in_FdoData_16: int, in_CSRBaseIoAddress_3: int, in_boogieTmp: int) returns (out_size: int, out_Tmp_96: int, out_Tmp_97: int, out_boogieTmp: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_Tmp_96 == in_CSRBaseIoAddress_3 || out_Tmp_96 == in_Tmp_96;
  free ensures {:va_keep} out_Tmp_97 == in_CSRBaseIoAddress_3 || out_Tmp_97 == in_Tmp_97;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ShiftOutBits_loop_L12(in_x_6: int, in_mask: int, in_Tmp_112: int, in_FdoData_19: int, in_data_2: int, in_CSRBaseIoAddress_6: int) returns (out_mask: int, out_Tmp_112: int)
{

  entry:
    out_mask, out_Tmp_112 := in_mask, in_Tmp_112;
    goto L12, exit;

  exit:
    return;

  L12:
    assume {:nonnull} in_x_6 != 0;
    assume in_x_6 > 0;
    Mem_T.INT4[in_x_6] := BAND(Mem_T.INT4[in_x_6], BNOT(4));
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(in_data_2, out_mask) != 0;
    assume {:nonnull} in_x_6 != 0;
    assume in_x_6 > 0;
    Mem_T.INT4[in_x_6] := BOR(Mem_T.INT4[in_x_6], 4);
    goto L14;

  L14:
    out_Tmp_112 := in_CSRBaseIoAddress_6;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_19 != 0;
    assume in_FdoData_19 > 0;
    assume {:nonnull} in_x_6 != 0;
    assume in_x_6 > 0;
    call {:si_unique_call 3174} NICWritePortUShort(out_Tmp_112, Mem_T.INT4[in_x_6]);
    goto L44;

  L44:
    call {:si_unique_call 3171} RaiseClock(in_FdoData_19, in_x_6, in_CSRBaseIoAddress_6);
    call {:si_unique_call 3172} LowerClock(in_FdoData_19, in_x_6, in_CSRBaseIoAddress_6);
    call {:si_unique_call 3173} out_mask := corral_nondet();
    goto anon14_Then;

  anon14_Then:
    assume {:partition} out_mask != 0;
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    call {:si_unique_call 3176} {:si_old_unique_call 1} out_mask, out_Tmp_112 := ShiftOutBits_loop_L12(in_x_6, out_mask, out_Tmp_112, in_FdoData_19, in_data_2, in_CSRBaseIoAddress_6);
    return;

  anon13_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} in_FdoData_19 != 0;
    assume in_FdoData_19 > 0;
    assume {:nonnull} in_x_6 != 0;
    assume in_x_6 > 0;
    call {:si_unique_call 3175} NICWriteRegisterUShort(out_Tmp_112, Mem_T.INT4[in_x_6]);
    goto L44;

  anon12_Then:
    assume {:partition} BAND(in_data_2, out_mask) == 0;
    goto L14;
}



procedure {:LoopProcedure} ShiftOutBits_loop_L12(in_x_6: int, in_mask: int, in_Tmp_112: int, in_FdoData_19: int, in_data_2: int, in_CSRBaseIoAddress_6: int) returns (out_mask: int, out_Tmp_112: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_Tmp_112 == in_Tmp_112 || out_Tmp_112 == in_CSRBaseIoAddress_6;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvGetPowerPoliciesDeviceState_loop_L24(in_wakeSupported: int, in_Tmp_171: int, in_fdoData_2: int, in_Tmp_172: int, in_systemState: int, in_deviceState_1: int) returns (out_wakeSupported: int, out_Tmp_171: int, out_Tmp_172: int, out_deviceState_1: int)
{

  entry:
    out_wakeSupported, out_Tmp_171, out_Tmp_172, out_deviceState_1 := in_wakeSupported, in_Tmp_171, in_Tmp_172, in_deviceState_1;
    goto L24, exit;

  exit:
    return;

  L24:
    out_Tmp_171 := in_systemState;
    assume {:nonnull} in_fdoData_2 != 0;
    assume in_fdoData_2 > 0;
    havoc out_Tmp_172;
    assume {:nonnull} out_Tmp_172 != 0;
    assume out_Tmp_172 > 0;
    goto anon33_Else;

  anon33_Else:
    assume {:partition} out_deviceState_1 >= Mem_T.INT4[out_Tmp_172 + out_Tmp_171 * 4];
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} out_deviceState_1 != 1;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_deviceState_1 != 2;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} out_deviceState_1 != 3;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_deviceState_1 == 4;
    assume {:nonnull} in_fdoData_2 != 0;
    assume in_fdoData_2 > 0;
    havoc out_wakeSupported;
    goto L33;

  L33:
    goto anon28_Then;

  anon28_Then:
    assume {:partition} out_wakeSupported == 0;
    out_deviceState_1 := out_deviceState_1 - 1;
    goto anon28_Then_dummy;

  anon28_Then_dummy:
    havoc out_deviceState_1;
    return;

  anon29_Then:
    assume {:partition} out_deviceState_1 != 4;
    out_wakeSupported := 0;
    goto L33;

  anon30_Then:
    assume {:partition} out_deviceState_1 == 3;
    assume {:nonnull} in_fdoData_2 != 0;
    assume in_fdoData_2 > 0;
    havoc out_wakeSupported;
    goto L33;

  anon31_Then:
    assume {:partition} out_deviceState_1 == 2;
    assume {:nonnull} in_fdoData_2 != 0;
    assume in_fdoData_2 > 0;
    havoc out_wakeSupported;
    goto L33;

  anon27_Then:
    assume {:partition} out_deviceState_1 == 1;
    assume {:nonnull} in_fdoData_2 != 0;
    assume in_fdoData_2 > 0;
    havoc out_wakeSupported;
    goto L33;
}



procedure {:LoopProcedure} PciDrvGetPowerPoliciesDeviceState_loop_L24(in_wakeSupported: int, in_Tmp_171: int, in_fdoData_2: int, in_Tmp_172: int, in_systemState: int, in_deviceState_1: int) returns (out_wakeSupported: int, out_Tmp_171: int, out_Tmp_172: int, out_deviceState_1: int);
  free ensures {:va_keep} out_Tmp_171 == in_systemState || out_Tmp_171 == in_Tmp_171;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICInitRecv_loop_L16(in_sdv_155: int, in_pMpRfd_4: int, in_RfdCount: int, in_sdv_156: int, in_status_28: int, in_FdoData_27: int) returns (out_sdv_155: int, out_pMpRfd_4: int, out_RfdCount: int, out_status_28: int)
{

  entry:
    out_sdv_155, out_pMpRfd_4, out_RfdCount, out_status_28 := in_sdv_155, in_pMpRfd_4, in_RfdCount, in_status_28;
    goto L16, exit;

  exit:
    return;

  L16:
    assume {:nonnull} in_FdoData_27 != 0;
    assume in_FdoData_27 > 0;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[NumRfd__FDO_DATA(in_FdoData_27)] > out_RfdCount;
    call {:si_unique_call 3180} out_sdv_155 := sdv_ExAllocateFromNPagedLookasideList(0);
    out_pMpRfd_4 := out_sdv_155;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} out_pMpRfd_4 == 0;
    goto L47;

  L47:
    out_RfdCount := out_RfdCount + 1;
    goto L47_dummy;

  L47_dummy:
    call {:si_unique_call 3182} {:si_old_unique_call 1} out_sdv_155, out_pMpRfd_4, out_RfdCount, out_status_28 := NICInitRecv_loop_L16(out_sdv_155, out_pMpRfd_4, out_RfdCount, in_sdv_156, out_status_28, in_FdoData_27);
    return;

  anon14_Then:
    assume {:partition} out_pMpRfd_4 != 0;
    assume {:nonnull} in_FdoData_27 != 0;
    assume in_FdoData_27 > 0;
    assume {:nonnull} out_pMpRfd_4 != 0;
    assume out_pMpRfd_4 > 0;
    assume {:nonnull} out_pMpRfd_4 != 0;
    assume out_pMpRfd_4 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} out_pMpRfd_4 != 0;
    assume out_pMpRfd_4 > 0;
    assume {:nonnull} out_pMpRfd_4 != 0;
    assume out_pMpRfd_4 > 0;
    assume {:nonnull} out_pMpRfd_4 != 0;
    assume out_pMpRfd_4 > 0;
    call {:si_unique_call 3181} out_status_28 := NICAllocRfd(in_FdoData_27, out_pMpRfd_4);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_status_28 >= 0;
    assume {:nonnull} in_FdoData_27 != 0;
    assume in_FdoData_27 > 0;
    call {:si_unique_call 3177} NICReturnRFD(in_FdoData_27, out_pMpRfd_4);
    goto L47;

  anon13_Then:
    assume {:partition} 0 > out_status_28;
    assume {:nonnull} in_FdoData_27 != 0;
    assume in_FdoData_27 > 0;
    call {:si_unique_call 3178} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(in_FdoData_27), out_pMpRfd_4);
    goto L47;

  anon15_Then:
    assume {:nonnull} in_FdoData_27 != 0;
    assume in_FdoData_27 > 0;
    call {:si_unique_call 3179} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(in_FdoData_27), out_pMpRfd_4);
    goto L47;
}



procedure {:LoopProcedure} NICInitRecv_loop_L16(in_sdv_155: int, in_pMpRfd_4: int, in_RfdCount: int, in_sdv_156: int, in_status_28: int, in_FdoData_27: int) returns (out_sdv_155: int, out_pMpRfd_4: int, out_RfdCount: int, out_status_28: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_status_28 == 0 || out_status_28 == -1073741670 || out_status_28 == in_status_28;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICFreeAdapterMemory_loop_L11(in_pMpRfd_5: int, in_sdv_158: int, in_sdv_159: int, in_FdoData_28: int) returns (out_pMpRfd_5: int, out_sdv_158: int, out_sdv_159: int)
{

  entry:
    out_pMpRfd_5, out_sdv_158, out_sdv_159 := in_pMpRfd_5, in_sdv_158, in_sdv_159;
    goto L11, exit;

  exit:
    return;

  L11:
    call {:si_unique_call 3183} out_sdv_158 := sdv_IsListEmpty(0);
    goto anon14_Then;

  anon14_Then:
    assume {:partition} out_sdv_158 == 0;
    assume {:nonnull} in_FdoData_28 != 0;
    assume in_FdoData_28 > 0;
    call {:si_unique_call 3184} out_sdv_159 := RemoveHeadList(RecvList__FDO_DATA(in_FdoData_28));
    out_pMpRfd_5 := out_sdv_159;
    call {:si_unique_call 3185} NICFreeRfd(in_FdoData_28, out_pMpRfd_5);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    call {:si_unique_call 3186} {:si_old_unique_call 1} out_pMpRfd_5, out_sdv_158, out_sdv_159 := NICFreeAdapterMemory_loop_L11(out_pMpRfd_5, out_sdv_158, out_sdv_159, in_FdoData_28);
    return;
}



procedure {:LoopProcedure} NICFreeAdapterMemory_loop_L11(in_pMpRfd_5: int, in_sdv_158: int, in_sdv_159: int, in_FdoData_28: int) returns (out_pMpRfd_5: int, out_sdv_158: int, out_sdv_159: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_158 == 1 || out_sdv_158 == 0 || out_sdv_158 == in_sdv_158;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 6} HwSetupIAAddress_loop_L17(in_i_3: int, in_Tmp_293: int, in_Tmp_297: int, in_Tmp_298: int, in_Tmp_299: int, in_Tmp_300: int, in_FdoData_32: int) returns (out_i_3: int, out_Tmp_293: int, out_Tmp_297: int, out_Tmp_298: int, out_Tmp_299: int, out_Tmp_300: int)
{

  entry:
    out_i_3, out_Tmp_293, out_Tmp_297, out_Tmp_298, out_Tmp_299, out_Tmp_300 := in_i_3, in_Tmp_293, in_Tmp_297, in_Tmp_298, in_Tmp_299, in_Tmp_300;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:CounterLoop 6} {:Counter "i_3"} true;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} 6 > out_i_3;
    out_Tmp_293 := out_i_3;
    assume {:nonnull} in_FdoData_32 != 0;
    assume in_FdoData_32 > 0;
    havoc out_Tmp_299;
    assume {:nonnull} out_Tmp_299 != 0;
    assume out_Tmp_299 > 0;
    havoc out_Tmp_297;
    out_Tmp_298 := out_i_3;
    assume {:nonnull} in_FdoData_32 != 0;
    assume in_FdoData_32 > 0;
    havoc out_Tmp_300;
    assume {:nonnull} out_Tmp_297 != 0;
    assume out_Tmp_297 > 0;
    assume {:nonnull} out_Tmp_300 != 0;
    assume out_Tmp_300 > 0;
    Mem_T.INT4[out_Tmp_297 + out_Tmp_293 * 4] := Mem_T.INT4[out_Tmp_300 + out_Tmp_298 * 4];
    out_i_3 := out_i_3 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3187} {:si_old_unique_call 1} out_i_3, out_Tmp_293, out_Tmp_297, out_Tmp_298, out_Tmp_299, out_Tmp_300 := HwSetupIAAddress_loop_L17(out_i_3, out_Tmp_293, out_Tmp_297, out_Tmp_298, out_Tmp_299, out_Tmp_300, in_FdoData_32);
    return;
}



procedure {:LoopProcedure} HwSetupIAAddress_loop_L17(in_i_3: int, in_Tmp_293: int, in_Tmp_297: int, in_Tmp_298: int, in_Tmp_299: int, in_Tmp_300: int, in_FdoData_32: int) returns (out_i_3: int, out_Tmp_293: int, out_Tmp_297: int, out_Tmp_298: int, out_Tmp_299: int, out_Tmp_300: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 4} NICReadAdapterInfo_loop_L24(in_i_4: int, in_Tmp_318: int, in_usValue: int, in_Tmp_329: int, in_Tmp_343: int, in_FdoData_34: int) returns (out_i_4: int, out_Tmp_318: int, out_usValue: int, out_Tmp_329: int, out_Tmp_343: int)
{
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;

  entry:
    out_i_4, out_Tmp_318, out_usValue, out_Tmp_329, out_Tmp_343 := in_i_4, in_Tmp_318, in_usValue, in_Tmp_329, in_Tmp_343;
    goto L24, exit;

  exit:
    return;

  L24:
    goto anon19_Else;

  anon19_Else:
    assume {:partition} 6 > out_i_4;
    out_Tmp_318 := 0 + INTDIV(out_i_4, 2);
    assume {:nonnull} in_FdoData_34 != 0;
    assume in_FdoData_34 > 0;
    havoc vslice_dummy_var_130;
    havoc vslice_dummy_var_131;
    call {:si_unique_call 3188} out_usValue := ReadEEprom(in_FdoData_34, vslice_dummy_var_130, out_Tmp_318, vslice_dummy_var_131);
    out_Tmp_329 := out_i_4;
    assume {:nonnull} in_FdoData_34 != 0;
    assume in_FdoData_34 > 0;
    havoc out_Tmp_343;
    assume {:nonnull} out_Tmp_343 != 0;
    assume out_Tmp_343 > 0;
    Mem_T.INT4[out_Tmp_343 + out_Tmp_329 * 4] := out_usValue;
    out_i_4 := out_i_4 + 2;
    goto anon19_Else_dummy;

  anon19_Else_dummy:
    call {:si_unique_call 3189} {:si_old_unique_call 1} out_i_4, out_Tmp_318, out_usValue, out_Tmp_329, out_Tmp_343 := NICReadAdapterInfo_loop_L24(out_i_4, out_Tmp_318, out_usValue, out_Tmp_329, out_Tmp_343, in_FdoData_34);
    return;
}



procedure {:LoopProcedure} NICReadAdapterInfo_loop_L24(in_i_4: int, in_Tmp_318: int, in_usValue: int, in_Tmp_329: int, in_Tmp_343: int, in_FdoData_34: int) returns (out_i_4: int, out_Tmp_318: int, out_usValue: int, out_Tmp_329: int, out_Tmp_343: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation HwConfigure_loop_L56(in_i_5: int, in_Tmp_373: int, in_Tmp_384: int, in_Tmp_398: int, in_Tmp_414: int, in_Tmp_415: int, in_FdoData_36: int) returns (out_i_5: int, out_Tmp_373: int, out_Tmp_384: int, out_Tmp_398: int, out_Tmp_414: int, out_Tmp_415: int)
{

  entry:
    out_i_5, out_Tmp_373, out_Tmp_384, out_Tmp_398, out_Tmp_414, out_Tmp_415 := in_i_5, in_Tmp_373, in_Tmp_384, in_Tmp_398, in_Tmp_414, in_Tmp_415;
    goto L56, exit;

  exit:
    return;

  L56:
    assume {:CounterLoop 22} {:Counter "i_5"} true;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} 22 > out_i_5;
    out_Tmp_414 := out_i_5;
    assume {:nonnull} in_FdoData_36 != 0;
    assume in_FdoData_36 > 0;
    havoc out_Tmp_373;
    assume {:nonnull} out_Tmp_373 != 0;
    assume out_Tmp_373 > 0;
    havoc out_Tmp_384;
    assume {:nonnull} out_Tmp_384 != 0;
    assume out_Tmp_384 > 0;
    out_Tmp_415 := Mem_T.INT4[out_Tmp_384 + out_Tmp_414 * 4];
    out_Tmp_398 := strConst__li2bpl125;
    call {:si_unique_call 3190} DebugPrint(6, 4096, out_Tmp_398);
    out_i_5 := out_i_5 + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    havoc out_i_5;
    return;
}



procedure {:LoopProcedure} HwConfigure_loop_L56(in_i_5: int, in_Tmp_373: int, in_Tmp_384: int, in_Tmp_398: int, in_Tmp_414: int, in_Tmp_415: int, in_FdoData_36: int) returns (out_i_5: int, out_Tmp_373: int, out_Tmp_384: int, out_Tmp_398: int, out_Tmp_414: int, out_Tmp_415: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_414 == in_i_5 || out_Tmp_414 == in_Tmp_414;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICInitSend_loop_L20(in_HwTcbPhys: int, in_pHwTbd: int, in_TcbCount: int, in_pHwTcb: int, in_pMpTcb: int, in_HwTbdPhys: int, in_FdoData_42: int) returns (out_HwTcbPhys: int, out_TcbCount: int, out_HwTbdPhys: int)
{

  entry:
    out_HwTcbPhys, out_TcbCount, out_HwTbdPhys := in_HwTcbPhys, in_TcbCount, in_HwTbdPhys;
    goto L20, exit;

  exit:
    return;

  L20:
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(in_FdoData_42)] > out_TcbCount;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} out_TcbCount != 0;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    goto L29;

  L29:
    assume {:nonnull} in_pHwTcb != 0;
    assume in_pHwTcb > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(TxCbHeader__GENERIC_TxCB(in_pHwTcb))] := 0;
    assume {:nonnull} in_pHwTcb != 0;
    assume in_pHwTcb > 0;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(in_FdoData_42)] - 1 > out_TcbCount;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    assume {:nonnull} in_pHwTcb != 0;
    assume in_pHwTcb > 0;
    goto L35;

  L35:
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    assume {:nonnull} in_pHwTcb != 0;
    assume in_pHwTcb > 0;
    assume {:nonnull} in_pHwTcb != 0;
    assume in_pHwTcb > 0;
    out_HwTcbPhys := out_HwTcbPhys + 256;
    out_HwTbdPhys := out_HwTbdPhys + 64;
    out_TcbCount := out_TcbCount + 1;
    goto L35_dummy;

  L35_dummy:
    call {:si_unique_call 3191} {:si_old_unique_call 1} out_HwTcbPhys, out_TcbCount, out_HwTbdPhys := NICInitSend_loop_L20(out_HwTcbPhys, in_pHwTbd, out_TcbCount, in_pHwTcb, in_pMpTcb, out_HwTbdPhys, in_FdoData_42);
    return;

  anon9_Then:
    assume {:partition} out_TcbCount >= Mem_T.INT4[NumTcb__FDO_DATA(in_FdoData_42)] - 1;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    assume {:nonnull} in_pHwTcb != 0;
    assume in_pHwTcb > 0;
    goto L35;

  anon8_Then:
    assume {:partition} out_TcbCount == 0;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    assume {:nonnull} in_pMpTcb != 0;
    assume in_pMpTcb > 0;
    goto L29;
}



procedure {:LoopProcedure} NICInitSend_loop_L20(in_HwTcbPhys: int, in_pHwTbd: int, in_TcbCount: int, in_pHwTcb: int, in_pMpTcb: int, in_HwTbdPhys: int, in_FdoData_42: int) returns (out_HwTcbPhys: int, out_TcbCount: int, out_HwTbdPhys: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation HwClearAllCounters_loop_L31(in_counter: int, in_Tmp_496: int, in_FdoData_45: int) returns (out_counter: int, out_Tmp_496: int)
{

  entry:
    out_counter, out_Tmp_496 := in_counter, in_Tmp_496;
    goto L31, exit;

  exit:
    return;

  L31:
    assume {:CounterLoop 100000} {:Counter "counter"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_counter != 0;
    assume {:nonnull} in_FdoData_45 != 0;
    assume in_FdoData_45 > 0;
    havoc out_Tmp_496;
    assume {:nonnull} out_Tmp_496 != 0;
    assume out_Tmp_496 > 0;
    goto anon15_Else;

  anon15_Else:
    out_counter := out_counter - 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    havoc out_counter;
    return;
}



procedure {:LoopProcedure} HwClearAllCounters_loop_L31(in_counter: int, in_Tmp_496: int, in_FdoData_45: int) returns (out_counter: int, out_Tmp_496: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvAdjustCapabilities_loop_L46(in_Tmp_526: int, in_Tmp_529: int, in_Tmp_530: int, in_deepestDeviceWakeState: int, in_sState: int, in_Tmp_534: int, in_DeviceCapabilities: int) returns (out_Tmp_526: int, out_Tmp_529: int, out_Tmp_530: int, out_sState: int, out_Tmp_534: int)
{

  entry:
    out_Tmp_526, out_Tmp_529, out_Tmp_530, out_sState, out_Tmp_534 := in_Tmp_526, in_Tmp_529, in_Tmp_530, in_sState, in_Tmp_534;
    goto L46, exit;

  exit:
    return;

  L46:
    assume {:CounterLoop 3} {:Counter "sState"} true;
    goto anon46_Else;

  anon46_Else:
    assume {:partition} out_sState >= 1;
    out_Tmp_529 := out_sState;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    havoc out_Tmp_530;
    assume {:nonnull} out_Tmp_530 != 0;
    assume out_Tmp_530 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_530 + out_Tmp_529 * 4] != 0;
    out_Tmp_526 := out_sState;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    havoc out_Tmp_534;
    assume {:nonnull} out_Tmp_534 != 0;
    assume out_Tmp_534 > 0;
    goto anon57_Else;

  anon57_Else:
    assume {:partition} in_deepestDeviceWakeState < Mem_T.INT4[out_Tmp_534 + out_Tmp_526 * 4];
    goto L49;

  L49:
    out_sState := out_sState - 1;
    goto L49_dummy;

  L49_dummy:
    havoc out_sState;
    return;

  anon56_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_530 + out_Tmp_529 * 4] == 0;
    goto L49;
}



procedure {:LoopProcedure} PciDrvAdjustCapabilities_loop_L46(in_Tmp_526: int, in_Tmp_529: int, in_Tmp_530: int, in_deepestDeviceWakeState: int, in_sState: int, in_Tmp_534: int, in_DeviceCapabilities: int) returns (out_Tmp_526: int, out_Tmp_529: int, out_Tmp_530: int, out_sState: int, out_Tmp_534: int);
  free ensures {:va_keep} out_Tmp_526 == in_sState || out_Tmp_526 == in_Tmp_526;
  free ensures {:va_keep} out_Tmp_529 == in_sState || out_Tmp_529 == in_Tmp_529;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} PciDrvAdjustCapabilities_loop_L22(in_i_6: int, in_Tmp_528: int, in_dState: int, in_Tmp_531: int, in_DeviceCapabilities: int) returns (out_i_6: int, out_Tmp_528: int, out_dState: int, out_Tmp_531: int)
{

  entry:
    out_i_6, out_Tmp_528, out_dState, out_Tmp_531 := in_i_6, in_Tmp_528, in_dState, in_Tmp_531;
    goto L22, exit;

  exit:
    return;

  L22:
    assume {:CounterLoop 2} {:Counter "i_6"} true;
    goto anon40_Else;

  anon40_Else:
    assume {:partition} 2 > out_i_6;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} out_dState != 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_dState != 1;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} out_dState != 2;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} out_dState != 3;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} out_dState == 4;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    goto L25;

  L25:
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    havoc out_Tmp_531;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    havoc out_Tmp_528;
    assume {:nonnull} out_Tmp_528 != 0;
    assume out_Tmp_528 > 0;
    out_dState := Mem_T.INT4[out_Tmp_528 + out_Tmp_531 * 4];
    goto L39;

  L39:
    out_i_6 := out_i_6 + 1;
    goto L39_dummy;

  L39_dummy:
    call {:si_unique_call 3192} {:si_old_unique_call 1} out_i_6, out_Tmp_528, out_dState, out_Tmp_531 := PciDrvAdjustCapabilities_loop_L22(out_i_6, out_Tmp_528, out_dState, out_Tmp_531, in_DeviceCapabilities);
    return;

  anon43_Then:
    out_dState := 0;
    goto L39;

  anon49_Then:
    assume {:partition} out_dState != 4;
    goto L25;

  anon50_Then:
    assume {:partition} out_dState == 3;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    goto L25;

  anon51_Then:
    assume {:partition} out_dState == 2;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    goto L25;

  anon52_Then:
    assume {:partition} out_dState == 1;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    goto L25;

  anon42_Then:
    assume {:partition} out_dState == 0;
    goto L25;
}



procedure {:LoopProcedure} PciDrvAdjustCapabilities_loop_L22(in_i_6: int, in_Tmp_528: int, in_dState: int, in_Tmp_531: int, in_DeviceCapabilities: int) returns (out_i_6: int, out_Tmp_528: int, out_dState: int, out_Tmp_531: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvAdjustCapabilities_loop_L14(in_Tmp_524: int, in_Tmp_527: int, in_sState: int, in_Tmp_532: int, in_Tmp_535: int, in_DeviceCapabilities: int) returns (out_Tmp_524: int, out_Tmp_527: int, out_sState: int, out_Tmp_532: int, out_Tmp_535: int)
{

  entry:
    out_Tmp_524, out_Tmp_527, out_sState, out_Tmp_532, out_Tmp_535 := in_Tmp_524, in_Tmp_527, in_sState, in_Tmp_532, in_Tmp_535;
    goto L14, exit;

  exit:
    return;

  L14:
    assume {:CounterLoop 3} {:Counter "sState"} true;
    goto anon39_Else;

  anon39_Else:
    assume {:partition} 5 >= out_sState;
    out_Tmp_524 := out_sState;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    havoc out_Tmp_532;
    assume {:nonnull} out_Tmp_532 != 0;
    assume out_Tmp_532 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_532 + out_Tmp_524 * 4] == 2;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    goto L19;

  L19:
    out_sState := out_sState + 1;
    goto L19_dummy;

  L19_dummy:
    havoc out_sState;
    return;

  anon53_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_532 + out_Tmp_524 * 4] != 2;
    out_Tmp_527 := out_sState;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    havoc out_Tmp_535;
    assume {:nonnull} out_Tmp_535 != 0;
    assume out_Tmp_535 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_535 + out_Tmp_527 * 4] == 3;
    assume {:nonnull} in_DeviceCapabilities != 0;
    assume in_DeviceCapabilities > 0;
    goto L19;

  anon54_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_535 + out_Tmp_527 * 4] != 3;
    goto L19;
}



procedure {:LoopProcedure} PciDrvAdjustCapabilities_loop_L14(in_Tmp_524: int, in_Tmp_527: int, in_sState: int, in_Tmp_532: int, in_Tmp_535: int, in_DeviceCapabilities: int) returns (out_Tmp_524: int, out_Tmp_527: int, out_sState: int, out_Tmp_532: int, out_Tmp_535: int);
  free ensures {:va_keep} out_Tmp_524 == in_sState || out_Tmp_524 == in_Tmp_524;
  free ensures {:va_keep} out_Tmp_527 == in_Tmp_527 || out_Tmp_527 == in_sState;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICFreeQueuedSendPackets_loop_L13(in_pEntry: int, in_sdv_265: int, in_sdv_267: int, in_irp_3: int, in_status_51: int, in_FdoData_62: int) returns (out_pEntry: int, out_sdv_265: int, out_sdv_267: int, out_irp_3: int)
{

  entry:
    out_pEntry, out_sdv_265, out_sdv_267, out_irp_3 := in_pEntry, in_sdv_265, in_sdv_267, in_irp_3;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 3193} out_sdv_265 := sdv_IsListEmpty(0);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_sdv_265 == 0;
    assume {:nonnull} in_FdoData_62 != 0;
    assume in_FdoData_62 > 0;
    call {:si_unique_call 3195} out_pEntry := RemoveHeadList(SendQueueHead__FDO_DATA(in_FdoData_62));
    assume {:nonnull} in_FdoData_62 != 0;
    assume in_FdoData_62 > 0;
    call {:si_unique_call 3196} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3197} out_sdv_267 := sdv_containing_record(out_pEntry, 88);
    out_irp_3 := out_sdv_267;
    call {:si_unique_call 3198} NICCompleteSendRequest(in_FdoData_62, out_irp_3, in_status_51, 0, 1);
    goto anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3194} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 3199} {:si_old_unique_call 1} out_pEntry, out_sdv_265, out_sdv_267, out_irp_3 := NICFreeQueuedSendPackets_loop_L13(out_pEntry, out_sdv_265, out_sdv_267, out_irp_3, in_status_51, in_FdoData_62);
    return;
}



procedure {:LoopProcedure} NICFreeQueuedSendPackets_loop_L13(in_pEntry: int, in_sdv_265: int, in_sdv_267: int, in_irp_3: int, in_status_51: int, in_FdoData_62: int) returns (out_pEntry: int, out_sdv_265: int, out_sdv_267: int, out_irp_3: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_265 == 1 || out_sdv_265 == 0 || out_sdv_265 == in_sdv_265;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} NICWrite_loop_L46(in_length_1: int, in_sdv_275: int, in_tempMdl: int, in_pageCount: int, in_virtualAddress_1: int) returns (out_length_1: int, out_sdv_275: int, out_tempMdl: int, out_pageCount: int, out_virtualAddress_1: int)
{

  entry:
    out_length_1, out_sdv_275, out_tempMdl, out_pageCount, out_virtualAddress_1 := in_length_1, in_sdv_275, in_tempMdl, in_pageCount, in_virtualAddress_1;
    goto L46, exit;

  exit:
    return;

  L46:
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_tempMdl != 0;
    call {:si_unique_call 3200} out_virtualAddress_1 := sdv_MmGetMdlVirtualAddress(0);
    call {:si_unique_call 3201} out_sdv_275 := sdv_MmGetMdlByteCount(0);
    out_length_1 := out_length_1 + out_sdv_275;
    call {:si_unique_call 3202} out_pageCount := corral_nondet();
    assume {:nonnull} out_tempMdl != 0;
    assume out_tempMdl > 0;
    havoc out_tempMdl;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    call {:si_unique_call 3203} {:si_old_unique_call 1} out_length_1, out_sdv_275, out_tempMdl, out_pageCount, out_virtualAddress_1 := NICWrite_loop_L46(out_length_1, out_sdv_275, out_tempMdl, out_pageCount, out_virtualAddress_1);
    return;
}



procedure {:LoopProcedure} NICWrite_loop_L46(in_length_1: int, in_sdv_275: int, in_tempMdl: int, in_pageCount: int, in_virtualAddress_1: int) returns (out_length_1: int, out_sdv_275: int, out_tempMdl: int, out_pageCount: int, out_virtualAddress_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSendPacket_loop_L15(in_pHwTbd_1: int, in_Tmp_675: int, in_Tmp_676: int, in_TbdCount: int, in_Tmp_680: int, in_index_1: int, in_Tmp_681: int, in_Tmp_682: int, in_Tmp_683: int, in_pFragList: int) returns (out_Tmp_675: int, out_Tmp_676: int, out_TbdCount: int, out_Tmp_680: int, out_index_1: int, out_Tmp_681: int, out_Tmp_682: int, out_Tmp_683: int)
{

  entry:
    out_Tmp_675, out_Tmp_676, out_TbdCount, out_Tmp_680, out_index_1, out_Tmp_681, out_Tmp_682, out_Tmp_683 := in_Tmp_675, in_Tmp_676, in_TbdCount, in_Tmp_680, in_index_1, in_Tmp_681, in_Tmp_682, in_Tmp_683;
    goto L15, exit;

  exit:
    return;

  L15:
    assume {:nonnull} in_pFragList != 0;
    assume in_pFragList > 0;
    goto anon7_Else;

  anon7_Else:
    out_Tmp_681 := out_index_1;
    assume {:nonnull} in_pFragList != 0;
    assume in_pFragList > 0;
    havoc out_Tmp_680;
    assume {:nonnull} out_Tmp_680 != 0;
    assume out_Tmp_680 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    out_Tmp_683 := out_index_1;
    assume {:nonnull} in_pFragList != 0;
    assume in_pFragList > 0;
    havoc out_Tmp_676;
    assume {:nonnull} out_Tmp_676 != 0;
    assume out_Tmp_676 > 0;
    assume {:nonnull} in_pHwTbd_1 != 0;
    assume in_pHwTbd_1 > 0;
    out_Tmp_682 := out_index_1;
    assume {:nonnull} in_pFragList != 0;
    assume in_pFragList > 0;
    havoc out_Tmp_675;
    assume {:nonnull} out_Tmp_675 != 0;
    assume out_Tmp_675 > 0;
    assume {:nonnull} in_pHwTbd_1 != 0;
    assume in_pHwTbd_1 > 0;
    out_TbdCount := out_TbdCount + 1;
    goto L18;

  L18:
    out_index_1 := out_index_1 + 1;
    goto L18_dummy;

  L18_dummy:
    call {:si_unique_call 3204} {:si_old_unique_call 1} out_Tmp_675, out_Tmp_676, out_TbdCount, out_Tmp_680, out_index_1, out_Tmp_681, out_Tmp_682, out_Tmp_683 := NICSendPacket_loop_L15(in_pHwTbd_1, out_Tmp_675, out_Tmp_676, out_TbdCount, out_Tmp_680, out_index_1, out_Tmp_681, out_Tmp_682, out_Tmp_683, in_pFragList);
    return;

  anon9_Then:
    goto L18;
}



procedure {:LoopProcedure} NICSendPacket_loop_L15(in_pHwTbd_1: int, in_Tmp_675: int, in_Tmp_676: int, in_TbdCount: int, in_Tmp_680: int, in_index_1: int, in_Tmp_681: int, in_Tmp_682: int, in_Tmp_683: int, in_pFragList: int) returns (out_Tmp_675: int, out_Tmp_676: int, out_TbdCount: int, out_Tmp_680: int, out_index_1: int, out_Tmp_681: int, out_Tmp_682: int, out_Tmp_683: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleSendInterrupt_loop_L14(in_pEntry_1: int, in_sdv_280: int, in_sdv_282: int, in_irp_4: int, in_Tmp_689: int, in_FdoData_67: int) returns (out_pEntry_1: int, out_sdv_280: int, out_sdv_282: int, out_irp_4: int, out_Tmp_689: int)
{

  entry:
    out_pEntry_1, out_sdv_280, out_sdv_282, out_irp_4, out_Tmp_689 := in_pEntry_1, in_sdv_280, in_sdv_282, in_irp_4, in_Tmp_689;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 3205} out_sdv_280 := sdv_IsListEmpty(0);
    goto anon21_Then;

  anon21_Then:
    assume {:partition} out_sdv_280 == 0;
    assume {:nonnull} in_FdoData_67 != 0;
    assume in_FdoData_67 > 0;
    goto anon22_Else;

  anon22_Else:
    assume {:nonnull} in_FdoData_67 != 0;
    assume in_FdoData_67 > 0;
    call {:si_unique_call 3206} out_pEntry_1 := RemoveHeadList(SendQueueHead__FDO_DATA(in_FdoData_67));
    assume {:nonnull} in_FdoData_67 != 0;
    assume in_FdoData_67 > 0;
    call {:si_unique_call 3207} out_sdv_282 := sdv_containing_record(out_pEntry_1, 88);
    out_irp_4 := out_sdv_282;
    out_Tmp_689 := strConst__li2bpl213;
    call {:si_unique_call 3208} DebugPrint(6, 64, out_Tmp_689);
    call {:si_unique_call 3209} NICWritePacket(in_FdoData_67, out_irp_4, 1);
    goto anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    call {:si_unique_call 3210} {:si_old_unique_call 1} out_pEntry_1, out_sdv_280, out_sdv_282, out_irp_4, out_Tmp_689 := NICHandleSendInterrupt_loop_L14(out_pEntry_1, out_sdv_280, out_sdv_282, out_irp_4, out_Tmp_689, in_FdoData_67);
    return;
}



procedure {:LoopProcedure} NICHandleSendInterrupt_loop_L14(in_pEntry_1: int, in_sdv_280: int, in_sdv_282: int, in_irp_4: int, in_Tmp_689: int, in_FdoData_67: int) returns (out_pEntry_1: int, out_sdv_280: int, out_sdv_282: int, out_irp_4: int, out_Tmp_689: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_280 == 1 || out_sdv_280 == 0 || out_sdv_280 == in_sdv_280;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleSendInterrupt_loop_L13(in_Tmp_685: int, in_pMpTcb_3: int, in_Tmp_691: int, in_Tmp_692: int, in_FdoData_67: int) returns (out_Tmp_685: int, out_pMpTcb_3: int, out_Tmp_691: int, out_Tmp_692: int)
{

  entry:
    out_Tmp_685, out_pMpTcb_3, out_Tmp_691, out_Tmp_692 := in_Tmp_685, in_pMpTcb_3, in_Tmp_691, in_Tmp_692;
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:nonnull} in_FdoData_67 != 0;
    assume in_FdoData_67 > 0;
    goto anon20_Else;

  anon20_Else:
    assume {:nonnull} in_FdoData_67 != 0;
    assume in_FdoData_67 > 0;
    havoc out_pMpTcb_3;
    assume {:nonnull} out_pMpTcb_3 != 0;
    assume out_pMpTcb_3 > 0;
    havoc out_Tmp_692;
    assume {:nonnull} out_Tmp_692 != 0;
    assume out_Tmp_692 > 0;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(TxCbHeader__GENERIC_TxCB(out_Tmp_692))], 32768) != 0;
    assume {:nonnull} out_pMpTcb_3 != 0;
    assume out_pMpTcb_3 > 0;
    havoc out_Tmp_691;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    havoc out_Tmp_685;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_Tmp_685 != 3;
    call {:si_unique_call 3211} MP_FREE_SEND_PACKET(in_FdoData_67, out_pMpTcb_3, 0);
    goto anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto anon26_Else_dummy;

  anon26_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 3212} {:si_old_unique_call 1} out_Tmp_685, out_pMpTcb_3, out_Tmp_691, out_Tmp_692 := NICHandleSendInterrupt_loop_L13(out_Tmp_685, out_pMpTcb_3, out_Tmp_691, out_Tmp_692, in_FdoData_67);
    return;

  anon25_Then:
    assume {:partition} out_Tmp_685 == 3;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    goto L_BAF_0;
}



procedure {:LoopProcedure} NICHandleSendInterrupt_loop_L13(in_Tmp_685: int, in_pMpTcb_3: int, in_Tmp_691: int, in_Tmp_692: int, in_FdoData_67: int) returns (out_Tmp_685: int, out_pMpTcb_3: int, out_Tmp_691: int, out_Tmp_692: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICFreeBusySendPackets_loop_L12(in_Tmp_707: int, in_pMpTcb_5: int, in_status_56: int, in_Tmp_709: int, in_FdoData_69: int) returns (out_Tmp_707: int, out_pMpTcb_5: int, out_Tmp_709: int)
{

  entry:
    out_Tmp_707, out_pMpTcb_5, out_Tmp_709 := in_Tmp_707, in_pMpTcb_5, in_Tmp_709;
    goto L12, exit;

  exit:
    return;

  L12:
    assume {:nonnull} in_FdoData_69 != 0;
    assume in_FdoData_69 > 0;
    goto anon7_Else;

  anon7_Else:
    assume {:nonnull} in_FdoData_69 != 0;
    assume in_FdoData_69 > 0;
    havoc out_pMpTcb_5;
    assume {:nonnull} out_pMpTcb_5 != 0;
    assume out_pMpTcb_5 > 0;
    havoc out_Tmp_707;
    assume {:nonnull} out_Tmp_707 != 0;
    assume out_Tmp_707 > 0;
    havoc out_Tmp_709;
    goto anon8_Else;

  anon8_Else:
    assume {:partition} out_Tmp_709 != 3;
    call {:si_unique_call 3213} MP_FREE_SEND_PACKET(in_FdoData_69, out_pMpTcb_5, in_status_56);
    goto anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    call {:si_unique_call 3214} {:si_old_unique_call 1} out_Tmp_707, out_pMpTcb_5, out_Tmp_709 := NICFreeBusySendPackets_loop_L12(out_Tmp_707, out_pMpTcb_5, in_status_56, out_Tmp_709, in_FdoData_69);
    return;
}



procedure {:LoopProcedure} NICFreeBusySendPackets_loop_L12(in_Tmp_707: int, in_pMpTcb_5: int, in_status_56: int, in_Tmp_709: int, in_FdoData_69: int) returns (out_Tmp_707: int, out_pMpTcb_5: int, out_Tmp_709: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvCancelQueuedReadIrps_loop_L10(in_sdv_287: int, in_listEntry_1: int, in_oldIrql_5: int, in_sdv_289: int, in_sdv_291: int, in_irp_5: int, in_Tmp_715: int, in_FdoData_71: int, in_vslice_dummy_var_100: int) returns (out_sdv_287: int, out_listEntry_1: int, out_oldIrql_5: int, out_sdv_289: int, out_sdv_291: int, out_irp_5: int, out_Tmp_715: int, out_vslice_dummy_var_100: int)
{

  entry:
    out_sdv_287, out_listEntry_1, out_oldIrql_5, out_sdv_289, out_sdv_291, out_irp_5, out_Tmp_715, out_vslice_dummy_var_100 := in_sdv_287, in_listEntry_1, in_oldIrql_5, in_sdv_289, in_sdv_291, in_irp_5, in_Tmp_715, in_vslice_dummy_var_100;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 3215} out_sdv_287 := sdv_IsListEmpty(0);
    goto anon7_Then;

  anon7_Then:
    assume {:partition} out_sdv_287 == 0;
    assume {:nonnull} in_FdoData_71 != 0;
    assume in_FdoData_71 > 0;
    call {:si_unique_call 3221} out_listEntry_1 := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_71));
    call {:si_unique_call 3222} out_sdv_289 := sdv_containing_record(out_listEntry_1, 88);
    out_irp_5 := out_sdv_289;
    call {:si_unique_call 3223} out_sdv_291 := sdv_IoSetCancelRoutine(out_irp_5, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} out_sdv_291 != 0;
    call {:si_unique_call 3218} sdv_KeReleaseSpinLock(0, out_oldIrql_5);
    assume {:nonnull} out_irp_5 != 0;
    assume out_irp_5 > 0;
    assume {:nonnull} out_irp_5 != 0;
    assume out_irp_5 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_irp_5))] := 0;
    call {:si_unique_call 3219} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3220} out_vslice_dummy_var_100 := PciDrvIoDecrement(in_FdoData_71);
    goto anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3216} out_Tmp_715 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_715 != 0;
    assume out_Tmp_715 > 0;
    Mem_T.INT4[out_Tmp_715] := out_oldIrql_5;
    call {:si_unique_call 3217} sdv_KeAcquireSpinLock(0, out_Tmp_715);
    assume {:nonnull} out_Tmp_715 != 0;
    assume out_Tmp_715 > 0;
    out_oldIrql_5 := Mem_T.INT4[out_Tmp_715];
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 3224} {:si_old_unique_call 1} out_sdv_287, out_listEntry_1, out_oldIrql_5, out_sdv_289, out_sdv_291, out_irp_5, out_Tmp_715, out_vslice_dummy_var_100 := PciDrvCancelQueuedReadIrps_loop_L10(out_sdv_287, out_listEntry_1, out_oldIrql_5, out_sdv_289, out_sdv_291, out_irp_5, out_Tmp_715, in_FdoData_71, out_vslice_dummy_var_100);
    return;

  anon8_Then:
    assume {:partition} out_sdv_291 == 0;
    out_irp_5 := 0;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    goto L_BAF_1;
}



procedure {:LoopProcedure} PciDrvCancelQueuedReadIrps_loop_L10(in_sdv_287: int, in_listEntry_1: int, in_oldIrql_5: int, in_sdv_289: int, in_sdv_291: int, in_irp_5: int, in_Tmp_715: int, in_FdoData_71: int, in_vslice_dummy_var_100: int) returns (out_sdv_287: int, out_listEntry_1: int, out_oldIrql_5: int, out_sdv_289: int, out_sdv_291: int, out_irp_5: int, out_Tmp_715: int, out_vslice_dummy_var_100: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_287 == 1 || out_sdv_287 == 0 || out_sdv_287 == in_sdv_287;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvWithdrawReadIrps_loop_L10(in_Tmp_723: int, in_sdv_318: int, in_listEntry_2: int, in_oldIrql_6: int, in_sdv_320: int, in_sdv_322: int, in_irp_6: int, in_FdoData_72: int, in_vslice_dummy_var_113: int) returns (out_Tmp_723: int, out_sdv_318: int, out_listEntry_2: int, out_oldIrql_6: int, out_sdv_320: int, out_sdv_322: int, out_irp_6: int, out_vslice_dummy_var_113: int)
{

  entry:
    out_Tmp_723, out_sdv_318, out_listEntry_2, out_oldIrql_6, out_sdv_320, out_sdv_322, out_irp_6, out_vslice_dummy_var_113 := in_Tmp_723, in_sdv_318, in_listEntry_2, in_oldIrql_6, in_sdv_320, in_sdv_322, in_irp_6, in_vslice_dummy_var_113;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 3225} out_sdv_318 := sdv_IsListEmpty(0);
    goto anon7_Then;

  anon7_Then:
    assume {:partition} out_sdv_318 == 0;
    assume {:nonnull} in_FdoData_72 != 0;
    assume in_FdoData_72 > 0;
    call {:si_unique_call 3230} out_listEntry_2 := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_72));
    call {:si_unique_call 3231} out_sdv_320 := sdv_containing_record(out_listEntry_2, 88);
    out_irp_6 := out_sdv_320;
    call {:si_unique_call 3232} out_sdv_322 := sdv_IoSetCancelRoutine(out_irp_6, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} out_sdv_322 != 0;
    call {:si_unique_call 3228} sdv_KeReleaseSpinLock(0, out_oldIrql_6);
    call {:si_unique_call 3229} out_vslice_dummy_var_113 := PciDrvQueueRequest(in_FdoData_72, out_irp_6);
    goto anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3226} out_Tmp_723 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_723 != 0;
    assume out_Tmp_723 > 0;
    Mem_T.INT4[out_Tmp_723] := out_oldIrql_6;
    call {:si_unique_call 3227} sdv_KeAcquireSpinLock(0, out_Tmp_723);
    assume {:nonnull} out_Tmp_723 != 0;
    assume out_Tmp_723 > 0;
    out_oldIrql_6 := Mem_T.INT4[out_Tmp_723];
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 3234} {:si_old_unique_call 1} out_Tmp_723, out_sdv_318, out_listEntry_2, out_oldIrql_6, out_sdv_320, out_sdv_322, out_irp_6, out_vslice_dummy_var_113 := PciDrvWithdrawReadIrps_loop_L10(out_Tmp_723, out_sdv_318, out_listEntry_2, out_oldIrql_6, out_sdv_320, out_sdv_322, out_irp_6, in_FdoData_72, out_vslice_dummy_var_113);
    return;

  anon8_Then:
    assume {:partition} out_sdv_322 == 0;
    call {:si_unique_call 3233} InitializeListHead(out_listEntry_2);
    out_irp_6 := 0;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    goto L_BAF_2;
}



procedure {:LoopProcedure} PciDrvWithdrawReadIrps_loop_L10(in_Tmp_723: int, in_sdv_318: int, in_listEntry_2: int, in_oldIrql_6: int, in_sdv_320: int, in_sdv_322: int, in_irp_6: int, in_FdoData_72: int, in_vslice_dummy_var_113: int) returns (out_Tmp_723: int, out_sdv_318: int, out_listEntry_2: int, out_oldIrql_6: int, out_sdv_320: int, out_sdv_322: int, out_irp_6: int, out_vslice_dummy_var_113: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_318 == 1 || out_sdv_318 == 0 || out_sdv_318 == in_sdv_318;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvCleanup_loop_L59(in_cleanupList: int, in_thisEntry: int, in_sdv_331: int, in_pendingIrp: int, in_sdv_332: int) returns (out_thisEntry: int, out_sdv_331: int, out_pendingIrp: int, out_sdv_332: int)
{

  entry:
    out_thisEntry, out_sdv_331, out_pendingIrp, out_sdv_332 := in_thisEntry, in_sdv_331, in_pendingIrp, in_sdv_332;
    goto L59, exit;

  exit:
    return;

  L59:
    call {:si_unique_call 3235} out_sdv_331 := sdv_IsListEmpty(0);
    goto anon14_Then;

  anon14_Then:
    assume {:partition} out_sdv_331 == 0;
    call {:si_unique_call 3236} out_thisEntry := RemoveHeadList(in_cleanupList);
    call {:si_unique_call 3237} out_sdv_332 := sdv_containing_record(out_thisEntry, 88);
    out_pendingIrp := out_sdv_332;
    assume {:nonnull} out_pendingIrp != 0;
    assume out_pendingIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_pendingIrp))] := 0;
    assume {:nonnull} out_pendingIrp != 0;
    assume out_pendingIrp > 0;
    call {:si_unique_call 3238} sdv_IoCompleteRequest(0, 0);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    call {:si_unique_call 3239} {:si_old_unique_call 1} out_thisEntry, out_sdv_331, out_pendingIrp, out_sdv_332 := PciDrvCleanup_loop_L59(in_cleanupList, out_thisEntry, out_sdv_331, out_pendingIrp, out_sdv_332);
    return;
}



procedure {:LoopProcedure} PciDrvCleanup_loop_L59(in_cleanupList: int, in_thisEntry: int, in_sdv_331: int, in_pendingIrp: int, in_sdv_332: int) returns (out_thisEntry: int, out_sdv_331: int, out_pendingIrp: int, out_sdv_332: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_sdv_331 == 1 || out_sdv_331 == 0 || out_sdv_331 == in_sdv_331;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvCleanup_loop_L31(in_cleanupList: int, in_thisEntry: int, in_irpStack_1: int, in_nextEntry: int, in_sdv_324: int, in_sdv_328: int, in_pendingIrp: int, in_pendingIrpStack: int, in_vslice_dummy_var_114: int, in_vslice_dummy_var_115: int) returns (out_thisEntry: int, out_nextEntry: int, out_sdv_324: int, out_sdv_328: int, out_pendingIrp: int, out_pendingIrpStack: int, out_vslice_dummy_var_114: int, out_vslice_dummy_var_115: int)
{

  entry:
    out_thisEntry, out_nextEntry, out_sdv_324, out_sdv_328, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := in_thisEntry, in_nextEntry, in_sdv_324, in_sdv_328, in_pendingIrp, in_pendingIrpStack, in_vslice_dummy_var_114, in_vslice_dummy_var_115;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon11_Else;

  anon11_Else:
    assume {:nonnull} out_thisEntry != 0;
    assume out_thisEntry > 0;
    havoc out_nextEntry;
    call {:si_unique_call 3242} out_sdv_328 := sdv_containing_record(out_thisEntry, 88);
    out_pendingIrp := out_sdv_328;
    call {:si_unique_call 3243} out_pendingIrpStack := sdv_IoGetCurrentIrpStackLocation(out_pendingIrp);
    assume {:nonnull} in_irpStack_1 != 0;
    assume in_irpStack_1 > 0;
    assume {:nonnull} out_pendingIrpStack != 0;
    assume out_pendingIrpStack > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 3244} out_vslice_dummy_var_114 := sdv_RemoveEntryList(0);
    call {:si_unique_call 3245} out_sdv_324 := sdv_IoSetCancelRoutine(out_pendingIrp, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_sdv_324 != 0;
    call {:si_unique_call 3240} out_vslice_dummy_var_115 := sdv_InsertTailList(in_cleanupList, out_thisEntry);
    goto L45;

  L45:
    out_thisEntry := out_nextEntry;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 3246} {:si_old_unique_call 1} out_thisEntry, out_nextEntry, out_sdv_324, out_sdv_328, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := PciDrvCleanup_loop_L31(in_cleanupList, out_thisEntry, in_irpStack_1, out_nextEntry, out_sdv_324, out_sdv_328, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_114, out_vslice_dummy_var_115);
    return;

  anon13_Then:
    assume {:partition} out_sdv_324 == 0;
    call {:si_unique_call 3241} InitializeListHead(out_thisEntry);
    goto L45;

  anon12_Then:
    goto L45;
}



procedure {:LoopProcedure} PciDrvCleanup_loop_L31(in_cleanupList: int, in_thisEntry: int, in_irpStack_1: int, in_nextEntry: int, in_sdv_324: int, in_sdv_328: int, in_pendingIrp: int, in_pendingIrpStack: int, in_vslice_dummy_var_114: int, in_vslice_dummy_var_115: int) returns (out_thisEntry: int, out_nextEntry: int, out_sdv_324: int, out_sdv_328: int, out_pendingIrp: int, out_pendingIrpStack: int, out_vslice_dummy_var_114: int, out_vslice_dummy_var_115: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_vslice_dummy_var_114 == 1 || out_vslice_dummy_var_114 == 0 || out_vslice_dummy_var_114 == in_vslice_dummy_var_114;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 3} PciDrvCancelQueuedIoctlIrps_loop_L11(in_i_7: int, in_sdv_338: int, in_oldIrql_8: int, in_irp_7: int, in_Tmp_736: int, in_FdoData_74: int, in_vslice_dummy_var_121: int) returns (out_i_7: int, out_sdv_338: int, out_oldIrql_8: int, out_irp_7: int, out_Tmp_736: int, out_vslice_dummy_var_121: int)
{

  entry:
    out_i_7, out_sdv_338, out_oldIrql_8, out_irp_7, out_Tmp_736, out_vslice_dummy_var_121 := in_i_7, in_sdv_338, in_oldIrql_8, in_irp_7, in_Tmp_736, in_vslice_dummy_var_121;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 3} {:Counter "i_7"} true;
    goto anon15_Else;

  anon15_Else:
    assume {:partition} 3 > out_i_7;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} out_i_7 != 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} out_i_7 != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_i_7 != 2;
    goto L22;

  L22:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_irp_7 != 0;
    call {:si_unique_call 3247} out_sdv_338 := sdv_IoSetCancelRoutine(out_irp_7, 0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_sdv_338 != 0;
    call {:si_unique_call 3248} sdv_KeReleaseSpinLock(0, out_oldIrql_8);
    assume {:nonnull} out_irp_7 != 0;
    assume out_irp_7 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_irp_7))] := 0;
    assume {:nonnull} out_irp_7 != 0;
    assume out_irp_7 > 0;
    call {:si_unique_call 3249} sdv_IoCompleteRequest(0, 0);
    out_irp_7 := 0;
    call {:si_unique_call 3250} out_Tmp_736 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_736 != 0;
    assume out_Tmp_736 > 0;
    Mem_T.INT4[out_Tmp_736] := out_oldIrql_8;
    call {:si_unique_call 3251} sdv_KeAcquireSpinLock(0, out_Tmp_736);
    assume {:nonnull} out_Tmp_736 != 0;
    assume out_Tmp_736 > 0;
    out_oldIrql_8 := Mem_T.INT4[out_Tmp_736];
    call {:si_unique_call 3252} out_vslice_dummy_var_121 := PciDrvIoDecrement(in_FdoData_74);
    goto anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L23;

  L23:
    out_i_7 := out_i_7 + 1;
    goto L23_dummy;

  L23_dummy:
    call {:si_unique_call 3253} {:si_old_unique_call 1} out_i_7, out_sdv_338, out_oldIrql_8, out_irp_7, out_Tmp_736, out_vslice_dummy_var_121 := PciDrvCancelQueuedIoctlIrps_loop_L11(out_i_7, out_sdv_338, out_oldIrql_8, out_irp_7, out_Tmp_736, in_FdoData_74, out_vslice_dummy_var_121);
    return;

  anon18_Then:
    assume {:partition} out_sdv_338 == 0;
    out_irp_7 := 0;
    goto L23;

  anon17_Then:
    assume {:partition} out_irp_7 == 0;
    goto L23;

  anon19_Then:
    assume {:partition} out_i_7 == 2;
    assume {:nonnull} in_FdoData_74 != 0;
    assume in_FdoData_74 > 0;
    havoc out_irp_7;
    assume {:nonnull} in_FdoData_74 != 0;
    assume in_FdoData_74 > 0;
    goto L22;

  anon20_Then:
    assume {:partition} out_i_7 == 1;
    assume {:nonnull} in_FdoData_74 != 0;
    assume in_FdoData_74 > 0;
    havoc out_irp_7;
    assume {:nonnull} in_FdoData_74 != 0;
    assume in_FdoData_74 > 0;
    goto L22;

  anon16_Then:
    assume {:partition} out_i_7 == 0;
    assume {:nonnull} in_FdoData_74 != 0;
    assume in_FdoData_74 > 0;
    havoc out_irp_7;
    assume {:nonnull} in_FdoData_74 != 0;
    assume in_FdoData_74 > 0;
    goto L22;
}



procedure {:LoopProcedure} PciDrvCancelQueuedIoctlIrps_loop_L11(in_i_7: int, in_sdv_338: int, in_oldIrql_8: int, in_irp_7: int, in_Tmp_736: int, in_FdoData_74: int, in_vslice_dummy_var_121: int) returns (out_i_7: int, out_sdv_338: int, out_oldIrql_8: int, out_irp_7: int, out_Tmp_736: int, out_vslice_dummy_var_121: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvReleaseAndWait_loop_L20(in_chargeRemining: int, in_Tmp_799: int, in_FdoData_82: int, in_vslice_dummy_var_135: int) returns (out_chargeRemining: int, out_Tmp_799: int, out_vslice_dummy_var_135: int)
{

  entry:
    out_chargeRemining, out_Tmp_799, out_vslice_dummy_var_135 := in_chargeRemining, in_Tmp_799, in_vslice_dummy_var_135;
    goto L20, exit;

  exit:
    return;

  L20:
    out_Tmp_799 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon19_Else;

  anon19_Else:
    assume {:partition} out_Tmp_799 != 0;
    call {:si_unique_call 3254} out_vslice_dummy_var_135 := PciDrvIoIncrement(in_FdoData_82);
    goto anon19_Else_dummy;

  anon19_Else_dummy:
    call {:si_unique_call 3255} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_799, out_vslice_dummy_var_135 := PciDrvReleaseAndWait_loop_L20(out_chargeRemining, out_Tmp_799, in_FdoData_82, out_vslice_dummy_var_135);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L20(in_chargeRemining: int, in_Tmp_799: int, in_FdoData_82: int, in_vslice_dummy_var_135: int) returns (out_chargeRemining: int, out_Tmp_799: int, out_vslice_dummy_var_135: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvReleaseAndWait_loop_L8(in_chargeRemining: int, in_Tmp_796: int, in_FdoData_82: int, in_vslice_dummy_var_133: int) returns (out_chargeRemining: int, out_Tmp_796: int, out_vslice_dummy_var_133: int)
{

  entry:
    out_chargeRemining, out_Tmp_796, out_vslice_dummy_var_133 := in_chargeRemining, in_Tmp_796, in_vslice_dummy_var_133;
    goto L8, exit;

  exit:
    return;

  L8:
    out_Tmp_796 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} out_Tmp_796 != 0;
    call {:si_unique_call 3256} out_vslice_dummy_var_133 := PciDrvIoDecrement(in_FdoData_82);
    goto anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    call {:si_unique_call 3257} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_796, out_vslice_dummy_var_133 := PciDrvReleaseAndWait_loop_L8(out_chargeRemining, out_Tmp_796, in_FdoData_82, out_vslice_dummy_var_133);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L8(in_chargeRemining: int, in_Tmp_796: int, in_FdoData_82: int, in_vslice_dummy_var_133: int) returns (out_chargeRemining: int, out_Tmp_796: int, out_vslice_dummy_var_133: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvReleaseAndWait_loop_L26(in_chargeRemining: int, in_Tmp_797: int, in_FdoData_82: int, in_vslice_dummy_var_136: int) returns (out_chargeRemining: int, out_Tmp_797: int, out_vslice_dummy_var_136: int)
{

  entry:
    out_chargeRemining, out_Tmp_797, out_vslice_dummy_var_136 := in_chargeRemining, in_Tmp_797, in_vslice_dummy_var_136;
    goto L26, exit;

  exit:
    return;

  L26:
    out_Tmp_797 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_Tmp_797 != 0;
    call {:si_unique_call 3258} out_vslice_dummy_var_136 := PciDrvIoDecrement(in_FdoData_82);
    goto anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    call {:si_unique_call 3259} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_797, out_vslice_dummy_var_136 := PciDrvReleaseAndWait_loop_L26(out_chargeRemining, out_Tmp_797, in_FdoData_82, out_vslice_dummy_var_136);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L26(in_chargeRemining: int, in_Tmp_797: int, in_FdoData_82: int, in_vslice_dummy_var_136: int) returns (out_chargeRemining: int, out_Tmp_797: int, out_vslice_dummy_var_136: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 3} PciDrvWithdrawIoctlIrps_loop_L10(in_i_8: int, in_oldIrql_11: int, in_irp_9: int, in_Tmp_801: int, in_FdoData_83: int, in_vslice_dummy_var_139: int) returns (out_i_8: int, out_oldIrql_11: int, out_irp_9: int, out_Tmp_801: int, out_vslice_dummy_var_139: int)
{

  entry:
    out_i_8, out_oldIrql_11, out_irp_9, out_Tmp_801, out_vslice_dummy_var_139 := in_i_8, in_oldIrql_11, in_irp_9, in_Tmp_801, in_vslice_dummy_var_139;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:CounterLoop 3} {:Counter "i_8"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} 3 > out_i_8;
    out_irp_9 := 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_i_8 != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} out_i_8 != 1;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} out_i_8 != 2;
    goto L22;

  L22:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} out_irp_9 != 0;
    call {:si_unique_call 3262} sdv_KeReleaseSpinLock(0, out_oldIrql_11);
    call {:si_unique_call 3263} out_vslice_dummy_var_139 := PciDrvQueueRequest(in_FdoData_83, out_irp_9);
    goto anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3260} out_Tmp_801 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_801 != 0;
    assume out_Tmp_801 > 0;
    Mem_T.INT4[out_Tmp_801] := out_oldIrql_11;
    call {:si_unique_call 3261} sdv_KeAcquireSpinLock(0, out_Tmp_801);
    assume {:nonnull} out_Tmp_801 != 0;
    assume out_Tmp_801 > 0;
    out_oldIrql_11 := Mem_T.INT4[out_Tmp_801];
    goto L23;

  L23:
    out_i_8 := out_i_8 + 1;
    goto L23_dummy;

  L23_dummy:
    call {:si_unique_call 3264} {:si_old_unique_call 1} out_i_8, out_oldIrql_11, out_irp_9, out_Tmp_801, out_vslice_dummy_var_139 := PciDrvWithdrawIoctlIrps_loop_L10(out_i_8, out_oldIrql_11, out_irp_9, out_Tmp_801, in_FdoData_83, out_vslice_dummy_var_139);
    return;

  anon14_Then:
    assume {:partition} out_irp_9 == 0;
    goto L23;

  anon15_Then:
    assume {:partition} out_i_8 == 2;
    assume {:nonnull} in_FdoData_83 != 0;
    assume in_FdoData_83 > 0;
    havoc out_irp_9;
    assume {:nonnull} in_FdoData_83 != 0;
    assume in_FdoData_83 > 0;
    goto L22;

  anon16_Then:
    assume {:partition} out_i_8 == 1;
    assume {:nonnull} in_FdoData_83 != 0;
    assume in_FdoData_83 > 0;
    havoc out_irp_9;
    assume {:nonnull} in_FdoData_83 != 0;
    assume in_FdoData_83 > 0;
    goto L22;

  anon17_Then:
    assume {:partition} out_i_8 == 0;
    assume {:nonnull} in_FdoData_83 != 0;
    assume in_FdoData_83 > 0;
    havoc out_irp_9;
    assume {:nonnull} in_FdoData_83 != 0;
    assume in_FdoData_83 > 0;
    goto L22;
}



procedure {:LoopProcedure} PciDrvWithdrawIoctlIrps_loop_L10(in_i_8: int, in_oldIrql_11: int, in_irp_9: int, in_Tmp_801: int, in_FdoData_83: int, in_vslice_dummy_var_139: int) returns (out_i_8: int, out_oldIrql_11: int, out_irp_9: int, out_Tmp_801: int, out_vslice_dummy_var_139: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetMulticastList_loop_L25(in_i_9: int, in_McAddress: int, in_Tmp_1095: int, in_j: int, in_Tmp_1123: int, in_Tmp_1126: int, in_Tmp_1127: int, in_FdoData_91: int) returns (out_Tmp_1095: int, out_j: int, out_Tmp_1123: int, out_Tmp_1126: int, out_Tmp_1127: int)
{

  entry:
    out_Tmp_1095, out_j, out_Tmp_1123, out_Tmp_1126, out_Tmp_1127 := in_Tmp_1095, in_j, in_Tmp_1123, in_Tmp_1126, in_Tmp_1127;
    goto L25, exit;

  exit:
    return;

  L25:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Else;

  anon18_Else:
    assume {:partition} 6 > out_j;
    out_Tmp_1123 := out_j;
    out_Tmp_1095 := in_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1126;
    assume {:nonnull} out_Tmp_1126 != 0;
    assume out_Tmp_1126 > 0;
    havoc out_Tmp_1127;
    assume {:nonnull} in_McAddress != 0;
    assume in_McAddress > 0;
    assume {:nonnull} out_Tmp_1127 != 0;
    assume out_Tmp_1127 > 0;
    Mem_T.INT4[in_McAddress] := Mem_T.INT4[out_Tmp_1127 + out_Tmp_1123 * 4];
    out_j := out_j + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    call {:si_unique_call 3265} {:si_old_unique_call 1} out_Tmp_1095, out_j, out_Tmp_1123, out_Tmp_1126, out_Tmp_1127 := NICSetMulticastList_loop_L25(in_i_9, in_McAddress, out_Tmp_1095, out_j, out_Tmp_1123, out_Tmp_1126, out_Tmp_1127, in_FdoData_91);
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L25(in_i_9: int, in_McAddress: int, in_Tmp_1095: int, in_j: int, in_Tmp_1123: int, in_Tmp_1126: int, in_Tmp_1127: int, in_FdoData_91: int) returns (out_Tmp_1095: int, out_j: int, out_Tmp_1123: int, out_Tmp_1126: int, out_Tmp_1127: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1095 == in_Tmp_1095 || out_Tmp_1095 == in_i_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetMulticastList_loop_L51(in_counter_1: int, in_Tmp_1107: int, in_Tmp_1110: int, in_FdoData_91: int) returns (out_counter_1: int, out_Tmp_1107: int, out_Tmp_1110: int)
{

  entry:
    out_counter_1, out_Tmp_1107, out_Tmp_1110 := in_counter_1, in_Tmp_1107, in_Tmp_1110;
    goto L51, exit;

  exit:
    return;

  L51:
    assume {:CounterLoop 250000} {:Counter "counter_1"} true;
    goto anon22_Else;

  anon22_Else:
    assume {:partition} out_counter_1 != 0;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1110;
    assume {:nonnull} out_Tmp_1110 != 0;
    assume out_Tmp_1110 > 0;
    havoc out_Tmp_1107;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_Tmp_1107 == 128;
    out_counter_1 := out_counter_1 - 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    havoc out_counter_1;
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L51(in_counter_1: int, in_Tmp_1107: int, in_Tmp_1110: int, in_FdoData_91: int) returns (out_counter_1: int, out_Tmp_1107: int, out_Tmp_1110: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetMulticastList_loop_L12(in_i_9: int, in_Tmp_1089: int, in_Tmp_1090: int, in_Tmp_1091: int, in_Tmp_1092: int, in_Tmp_1093: int, in_Tmp_1094: int, in_McAddress: int, in_Tmp_1095: int, in_Tmp_1096: int, in_Tmp_1097: int, in_Tmp_1098: int, in_Tmp_1099: int, in_Tmp_1100: int, in_Tmp_1102: int, in_Tmp_1103: int, in_j: int, in_Tmp_1105: int, in_Tmp_1106: int, in_Tmp_1108: int, in_Tmp_1109: int, in_Tmp_1111: int, in_Tmp_1112: int, in_Tmp_1113: int, in_Tmp_1114: int, in_Tmp_1116: int, in_Tmp_1119: int, in_Tmp_1120: int, in_Tmp_1121: int, in_Tmp_1123: int, in_Tmp_1124: int, in_Tmp_1125: int, in_Tmp_1126: int, in_Tmp_1127: int, in_Tmp_1128: int, in_FdoData_91: int) returns (out_i_9: int, out_Tmp_1089: int, out_Tmp_1090: int, out_Tmp_1091: int, out_Tmp_1092: int, out_Tmp_1093: int, out_Tmp_1094: int, out_McAddress: int, out_Tmp_1095: int, out_Tmp_1096: int, out_Tmp_1097: int, out_Tmp_1098: int, out_Tmp_1099: int, out_Tmp_1100: int, out_Tmp_1102: int, out_Tmp_1103: int, out_j: int, out_Tmp_1105: int, out_Tmp_1106: int, out_Tmp_1108: int, out_Tmp_1109: int, out_Tmp_1111: int, out_Tmp_1112: int, out_Tmp_1113: int, out_Tmp_1114: int, out_Tmp_1116: int, out_Tmp_1119: int, out_Tmp_1120: int, out_Tmp_1121: int, out_Tmp_1123: int, out_Tmp_1124: int, out_Tmp_1125: int, out_Tmp_1126: int, out_Tmp_1127: int, out_Tmp_1128: int)
{

  entry:
    out_i_9, out_Tmp_1089, out_Tmp_1090, out_Tmp_1091, out_Tmp_1092, out_Tmp_1093, out_Tmp_1094, out_McAddress, out_Tmp_1095, out_Tmp_1096, out_Tmp_1097, out_Tmp_1098, out_Tmp_1099, out_Tmp_1100, out_Tmp_1102, out_Tmp_1103, out_j, out_Tmp_1105, out_Tmp_1106, out_Tmp_1108, out_Tmp_1109, out_Tmp_1111, out_Tmp_1112, out_Tmp_1113, out_Tmp_1114, out_Tmp_1116, out_Tmp_1119, out_Tmp_1120, out_Tmp_1121, out_Tmp_1123, out_Tmp_1124, out_Tmp_1125, out_Tmp_1126, out_Tmp_1127, out_Tmp_1128 := in_i_9, in_Tmp_1089, in_Tmp_1090, in_Tmp_1091, in_Tmp_1092, in_Tmp_1093, in_Tmp_1094, in_McAddress, in_Tmp_1095, in_Tmp_1096, in_Tmp_1097, in_Tmp_1098, in_Tmp_1099, in_Tmp_1100, in_Tmp_1102, in_Tmp_1103, in_j, in_Tmp_1105, in_Tmp_1106, in_Tmp_1108, in_Tmp_1109, in_Tmp_1111, in_Tmp_1112, in_Tmp_1113, in_Tmp_1114, in_Tmp_1116, in_Tmp_1119, in_Tmp_1120, in_Tmp_1121, in_Tmp_1123, in_Tmp_1124, in_Tmp_1125, in_Tmp_1126, in_Tmp_1127, in_Tmp_1128;
    goto L12, exit;

  exit:
    return;

  L12:
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    goto anon17_Else;

  anon17_Else:
    out_Tmp_1103 := out_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1116;
    assume {:nonnull} out_Tmp_1116 != 0;
    assume out_Tmp_1116 > 0;
    havoc out_Tmp_1099;
    assume {:nonnull} out_Tmp_1099 != 0;
    assume out_Tmp_1099 > 0;
    out_Tmp_1092 := Mem_T.INT4[out_Tmp_1099 + 5 * 4];
    out_Tmp_1106 := out_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1120;
    assume {:nonnull} out_Tmp_1120 != 0;
    assume out_Tmp_1120 > 0;
    havoc out_Tmp_1121;
    assume {:nonnull} out_Tmp_1121 != 0;
    assume out_Tmp_1121 > 0;
    out_Tmp_1112 := Mem_T.INT4[out_Tmp_1121 + 4 * 4];
    out_Tmp_1113 := out_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1124;
    assume {:nonnull} out_Tmp_1124 != 0;
    assume out_Tmp_1124 > 0;
    havoc out_Tmp_1097;
    assume {:nonnull} out_Tmp_1097 != 0;
    assume out_Tmp_1097 > 0;
    out_Tmp_1094 := Mem_T.INT4[out_Tmp_1097 + 3 * 4];
    out_Tmp_1093 := out_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1105;
    assume {:nonnull} out_Tmp_1105 != 0;
    assume out_Tmp_1105 > 0;
    havoc out_Tmp_1096;
    assume {:nonnull} out_Tmp_1096 != 0;
    assume out_Tmp_1096 > 0;
    out_Tmp_1111 := Mem_T.INT4[out_Tmp_1096 + 2 * 4];
    out_Tmp_1119 := out_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1108;
    assume {:nonnull} out_Tmp_1108 != 0;
    assume out_Tmp_1108 > 0;
    havoc out_Tmp_1090;
    assume {:nonnull} out_Tmp_1090 != 0;
    assume out_Tmp_1090 > 0;
    out_Tmp_1102 := Mem_T.INT4[out_Tmp_1090 + 1 * 4];
    out_Tmp_1128 := out_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1098;
    assume {:nonnull} out_Tmp_1098 != 0;
    assume out_Tmp_1098 > 0;
    havoc out_Tmp_1091;
    assume {:nonnull} out_Tmp_1091 != 0;
    assume out_Tmp_1091 > 0;
    out_Tmp_1089 := Mem_T.INT4[out_Tmp_1091];
    out_Tmp_1125 := strConst__li2bpl288;
    call {:si_unique_call 3267} DebugPrint(5, 32, out_Tmp_1125);
    out_Tmp_1100 := out_i_9 * 6;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1109;
    assume {:nonnull} out_Tmp_1109 != 0;
    assume out_Tmp_1109 > 0;
    havoc out_Tmp_1114;
    out_McAddress := out_Tmp_1114 + out_Tmp_1100 * 4;
    out_j := 0;
    goto L25;

  L25:
    call {:si_unique_call 3266} out_Tmp_1095, out_j, out_Tmp_1123, out_Tmp_1126, out_Tmp_1127 := NICSetMulticastList_loop_L25(out_i_9, out_McAddress, out_Tmp_1095, out_j, out_Tmp_1123, out_Tmp_1126, out_Tmp_1127, in_FdoData_91);
    goto L25_last;

  L25_last:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 6 > out_j;
    out_Tmp_1123 := out_j;
    out_Tmp_1095 := out_i_9;
    assume {:nonnull} in_FdoData_91 != 0;
    assume in_FdoData_91 > 0;
    havoc out_Tmp_1126;
    assume {:nonnull} out_Tmp_1126 != 0;
    assume out_Tmp_1126 > 0;
    havoc out_Tmp_1127;
    assume {:nonnull} out_McAddress != 0;
    assume out_McAddress > 0;
    assume {:nonnull} out_Tmp_1127 != 0;
    assume out_Tmp_1127 > 0;
    Mem_T.INT4[out_McAddress] := Mem_T.INT4[out_Tmp_1127 + out_Tmp_1123 * 4];
    out_j := out_j + 1;
    assume false;
    return;

  anon18_Then:
    assume {:partition} out_j >= 6;
    out_i_9 := out_i_9 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    call {:si_unique_call 3268} {:si_old_unique_call 1} out_i_9, out_Tmp_1089, out_Tmp_1090, out_Tmp_1091, out_Tmp_1092, out_Tmp_1093, out_Tmp_1094, out_McAddress, out_Tmp_1095, out_Tmp_1096, out_Tmp_1097, out_Tmp_1098, out_Tmp_1099, out_Tmp_1100, out_Tmp_1102, out_Tmp_1103, out_j, out_Tmp_1105, out_Tmp_1106, out_Tmp_1108, out_Tmp_1109, out_Tmp_1111, out_Tmp_1112, out_Tmp_1113, out_Tmp_1114, out_Tmp_1116, out_Tmp_1119, out_Tmp_1120, out_Tmp_1121, out_Tmp_1123, out_Tmp_1124, out_Tmp_1125, out_Tmp_1126, out_Tmp_1127, out_Tmp_1128 := NICSetMulticastList_loop_L12(out_i_9, out_Tmp_1089, out_Tmp_1090, out_Tmp_1091, out_Tmp_1092, out_Tmp_1093, out_Tmp_1094, out_McAddress, out_Tmp_1095, out_Tmp_1096, out_Tmp_1097, out_Tmp_1098, out_Tmp_1099, out_Tmp_1100, out_Tmp_1102, out_Tmp_1103, out_j, out_Tmp_1105, out_Tmp_1106, out_Tmp_1108, out_Tmp_1109, out_Tmp_1111, out_Tmp_1112, out_Tmp_1113, out_Tmp_1114, out_Tmp_1116, out_Tmp_1119, out_Tmp_1120, out_Tmp_1121, out_Tmp_1123, out_Tmp_1124, out_Tmp_1125, out_Tmp_1126, out_Tmp_1127, out_Tmp_1128, in_FdoData_91);
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L12(in_i_9: int, in_Tmp_1089: int, in_Tmp_1090: int, in_Tmp_1091: int, in_Tmp_1092: int, in_Tmp_1093: int, in_Tmp_1094: int, in_McAddress: int, in_Tmp_1095: int, in_Tmp_1096: int, in_Tmp_1097: int, in_Tmp_1098: int, in_Tmp_1099: int, in_Tmp_1100: int, in_Tmp_1102: int, in_Tmp_1103: int, in_j: int, in_Tmp_1105: int, in_Tmp_1106: int, in_Tmp_1108: int, in_Tmp_1109: int, in_Tmp_1111: int, in_Tmp_1112: int, in_Tmp_1113: int, in_Tmp_1114: int, in_Tmp_1116: int, in_Tmp_1119: int, in_Tmp_1120: int, in_Tmp_1121: int, in_Tmp_1123: int, in_Tmp_1124: int, in_Tmp_1125: int, in_Tmp_1126: int, in_Tmp_1127: int, in_Tmp_1128: int, in_FdoData_91: int) returns (out_i_9: int, out_Tmp_1089: int, out_Tmp_1090: int, out_Tmp_1091: int, out_Tmp_1092: int, out_Tmp_1093: int, out_Tmp_1094: int, out_McAddress: int, out_Tmp_1095: int, out_Tmp_1096: int, out_Tmp_1097: int, out_Tmp_1098: int, out_Tmp_1099: int, out_Tmp_1100: int, out_Tmp_1102: int, out_Tmp_1103: int, out_j: int, out_Tmp_1105: int, out_Tmp_1106: int, out_Tmp_1108: int, out_Tmp_1109: int, out_Tmp_1111: int, out_Tmp_1112: int, out_Tmp_1113: int, out_Tmp_1114: int, out_Tmp_1116: int, out_Tmp_1119: int, out_Tmp_1120: int, out_Tmp_1121: int, out_Tmp_1123: int, out_Tmp_1124: int, out_Tmp_1125: int, out_Tmp_1126: int, out_Tmp_1127: int, out_Tmp_1128: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetPacketFilter_loop_L91(in_counter_2: int, in_Tmp_1154: int, in_Tmp_1188: int, in_FdoData_94: int) returns (out_counter_2: int, out_Tmp_1154: int, out_Tmp_1188: int)
{

  entry:
    out_counter_2, out_Tmp_1154, out_Tmp_1188 := in_counter_2, in_Tmp_1154, in_Tmp_1188;
    goto L91, exit;

  exit:
    return;

  L91:
    assume {:CounterLoop 250000} {:Counter "counter_2"} true;
    goto anon56_Else;

  anon56_Else:
    assume {:partition} out_counter_2 != 0;
    assume {:nonnull} in_FdoData_94 != 0;
    assume in_FdoData_94 > 0;
    havoc out_Tmp_1154;
    assume {:nonnull} out_Tmp_1154 != 0;
    assume out_Tmp_1154 > 0;
    havoc out_Tmp_1188;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} out_Tmp_1188 == 128;
    out_counter_2 := out_counter_2 - 1;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    havoc out_counter_2;
    return;
}



procedure {:LoopProcedure} NICSetPacketFilter_loop_L91(in_counter_2: int, in_Tmp_1154: int, in_Tmp_1188: int, in_FdoData_94: int) returns (out_counter_2: int, out_Tmp_1154: int, out_Tmp_1188: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetPacketFilter_loop_L76(in_i_10: int, in_Tmp_1142: int, in_Tmp_1165: int, in_Tmp_1169: int, in_Tmp_1170: int, in_Tmp_1174: int, in_FdoData_94: int) returns (out_i_10: int, out_Tmp_1142: int, out_Tmp_1165: int, out_Tmp_1169: int, out_Tmp_1170: int, out_Tmp_1174: int)
{

  entry:
    out_i_10, out_Tmp_1142, out_Tmp_1165, out_Tmp_1169, out_Tmp_1170, out_Tmp_1174 := in_i_10, in_Tmp_1142, in_Tmp_1165, in_Tmp_1169, in_Tmp_1170, in_Tmp_1174;
    goto L76, exit;

  exit:
    return;

  L76:
    assume {:CounterLoop 22} {:Counter "i_10"} true;
    goto anon54_Else;

  anon54_Else:
    assume {:partition} 22 > out_i_10;
    out_Tmp_1169 := out_i_10;
    assume {:nonnull} in_FdoData_94 != 0;
    assume in_FdoData_94 > 0;
    havoc out_Tmp_1174;
    assume {:nonnull} out_Tmp_1174 != 0;
    assume out_Tmp_1174 > 0;
    havoc out_Tmp_1170;
    assume {:nonnull} out_Tmp_1170 != 0;
    assume out_Tmp_1170 > 0;
    out_Tmp_1165 := Mem_T.INT4[out_Tmp_1170 + out_Tmp_1169 * 4];
    out_Tmp_1142 := strConst__li2bpl297;
    call {:si_unique_call 3269} DebugPrint(6, 32, out_Tmp_1142);
    out_i_10 := out_i_10 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    havoc out_i_10;
    return;
}



procedure {:LoopProcedure} NICSetPacketFilter_loop_L76(in_i_10: int, in_Tmp_1142: int, in_Tmp_1165: int, in_Tmp_1169: int, in_Tmp_1170: int, in_Tmp_1174: int, in_FdoData_94: int) returns (out_i_10: int, out_Tmp_1142: int, out_Tmp_1165: int, out_Tmp_1169: int, out_Tmp_1170: int, out_Tmp_1174: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1169 == in_i_10 || out_Tmp_1169 == in_Tmp_1169;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation MdiRead_loop_L11(in_counter_3: int, in_Tmp_1234: int, in_Adapter_1: int) returns (out_counter_3: int, out_Tmp_1234: int)
{

  entry:
    out_counter_3, out_Tmp_1234 := in_counter_3, in_Tmp_1234;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100000} {:Counter "counter_3"} true;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} out_counter_3 != 0;
    assume {:nonnull} in_Adapter_1 != 0;
    assume in_Adapter_1 > 0;
    havoc out_Tmp_1234;
    assume {:nonnull} out_Tmp_1234 != 0;
    assume out_Tmp_1234 > 0;
    goto anon12_Else;

  anon12_Else:
    out_counter_3 := out_counter_3 - 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    havoc out_counter_3;
    return;
}



procedure {:LoopProcedure} MdiRead_loop_L11(in_counter_3: int, in_Tmp_1234: int, in_Adapter_1: int) returns (out_counter_3: int, out_Tmp_1234: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation WaitScb_loop_L9(in_counter_4: int, in_pCSRAddress: int) returns (out_counter_4: int)
{

  entry:
    out_counter_4 := in_counter_4;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:CounterLoop 30000} {:Counter "counter_4"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_4 != 0;
    assume {:nonnull} in_pCSRAddress != 0;
    assume in_pCSRAddress > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_4 := out_counter_4 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_4;
    return;
}



procedure {:LoopProcedure} WaitScb_loop_L9(in_counter_4: int, in_pCSRAddress: int) returns (out_counter_4: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation D100SubmitCommandBlockAndWait_loop_L20(in_counter_5: int, in_CommandBlock: int) returns (out_counter_5: int)
{

  entry:
    out_counter_5 := in_counter_5;
    goto L20, exit;

  exit:
    return;

  L20:
    assume {:CounterLoop 150000} {:Counter "counter_5"} true;
    goto anon14_Else;

  anon14_Else:
    assume {:partition} out_counter_5 != 0;
    assume {:nonnull} in_CommandBlock != 0;
    assume in_CommandBlock > 0;
    goto anon16_Else;

  anon16_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(in_CommandBlock))))], 32768) == 0;
    out_counter_5 := out_counter_5 - 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    havoc out_counter_5;
    return;
}



procedure {:LoopProcedure} D100SubmitCommandBlockAndWait_loop_L20(in_counter_5: int, in_CommandBlock: int) returns (out_counter_5: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICIssueFullReset_loop_L11(in_Tmp_1249: int, in_counter_6: int, in_Adapter_4: int) returns (out_Tmp_1249: int, out_counter_6: int)
{

  entry:
    out_Tmp_1249, out_counter_6 := in_Tmp_1249, in_counter_6;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100} {:Counter "counter_6"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_6 != 0;
    assume {:nonnull} in_Adapter_4 != 0;
    assume in_Adapter_4 > 0;
    havoc out_Tmp_1249;
    assume {:nonnull} out_Tmp_1249 != 0;
    assume out_Tmp_1249 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_6 := out_counter_6 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_6;
    return;
}



procedure {:LoopProcedure} NICIssueFullReset_loop_L11(in_Tmp_1249: int, in_counter_6: int, in_Adapter_4: int) returns (out_Tmp_1249: int, out_counter_6: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation DumpStatsCounters_loop_L19(in_counter_7: int, in_Tmp_1292: int, in_Adapter_5: int) returns (out_counter_7: int, out_Tmp_1292: int)
{

  entry:
    out_counter_7, out_Tmp_1292 := in_counter_7, in_Tmp_1292;
    goto L19, exit;

  exit:
    return;

  L19:
    assume {:CounterLoop 100000} {:Counter "counter_7"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_7 != 0;
    assume {:nonnull} in_Adapter_5 != 0;
    assume in_Adapter_5 > 0;
    havoc out_Tmp_1292;
    assume {:nonnull} out_Tmp_1292 != 0;
    assume out_Tmp_1292 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_7 := out_counter_7 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_7;
    return;
}



procedure {:LoopProcedure} DumpStatsCounters_loop_L19(in_counter_7: int, in_Tmp_1292: int, in_Adapter_5: int) returns (out_counter_7: int, out_Tmp_1292: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICIssueSelectiveReset_loop_L39(in_Tmp_1310: int, in_counter_9: int, in_Adapter_6: int) returns (out_Tmp_1310: int, out_counter_9: int)
{

  entry:
    out_Tmp_1310, out_counter_9 := in_Tmp_1310, in_counter_9;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:CounterLoop 100} {:Counter "counter_9"} true;
    goto anon23_Else;

  anon23_Else:
    assume {:partition} out_counter_9 != 0;
    assume {:nonnull} in_Adapter_6 != 0;
    assume in_Adapter_6 > 0;
    havoc out_Tmp_1310;
    assume {:nonnull} out_Tmp_1310 != 0;
    assume out_Tmp_1310 > 0;
    goto anon27_Else;

  anon27_Else:
    out_counter_9 := out_counter_9 - 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    havoc out_counter_9;
    return;
}



procedure {:LoopProcedure} NICIssueSelectiveReset_loop_L39(in_Tmp_1310: int, in_counter_9: int, in_Adapter_6: int) returns (out_Tmp_1310: int, out_counter_9: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICIssueSelectiveReset_loop_L13(in_Tmp_1308: int, in_counter_8: int, in_Tmp_1309: int, in_Adapter_6: int) returns (out_Tmp_1308: int, out_counter_8: int, out_Tmp_1309: int)
{

  entry:
    out_Tmp_1308, out_counter_8, out_Tmp_1309 := in_Tmp_1308, in_counter_8, in_Tmp_1309;
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:CounterLoop 100000} {:Counter "counter_8"} true;
    goto anon21_Else;

  anon21_Else:
    assume {:partition} out_counter_8 != 0;
    assume {:nonnull} in_Adapter_6 != 0;
    assume in_Adapter_6 > 0;
    havoc out_Tmp_1309;
    assume {:nonnull} out_Tmp_1309 != 0;
    assume out_Tmp_1309 > 0;
    havoc out_Tmp_1308;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_Tmp_1308 == 128;
    out_counter_8 := out_counter_8 - 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    havoc out_counter_8;
    return;
}



procedure {:LoopProcedure} NICIssueSelectiveReset_loop_L13(in_Tmp_1308: int, in_counter_8: int, in_Tmp_1309: int, in_Adapter_6: int) returns (out_Tmp_1308: int, out_counter_8: int, out_Tmp_1309: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation MdiWrite_loop_L11(in_counter_10: int, in_Tmp_1318: int, in_Adapter_7: int) returns (out_counter_10: int, out_Tmp_1318: int)
{

  entry:
    out_counter_10, out_Tmp_1318 := in_counter_10, in_Tmp_1318;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100000} {:Counter "counter_10"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_10 != 0;
    assume {:nonnull} in_Adapter_7 != 0;
    assume in_Adapter_7 > 0;
    havoc out_Tmp_1318;
    assume {:nonnull} out_Tmp_1318 != 0;
    assume out_Tmp_1318 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_10 := out_counter_10 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_10;
    return;
}



procedure {:LoopProcedure} MdiWrite_loop_L11(in_counter_10: int, in_Tmp_1318: int, in_Adapter_7: int) returns (out_counter_10: int, out_Tmp_1318: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation MP_STALL_EXECUTION_loop_L4(in_MsecDelay: int) returns (out_MsecDelay: int)
{

  entry:
    out_MsecDelay := in_MsecDelay;
    goto L4, exit;

  exit:
    return;

  L4:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_MsecDelay != 0;
    out_MsecDelay := out_MsecDelay - 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_MsecDelay;
    return;
}



procedure {:LoopProcedure} MP_STALL_EXECUTION_loop_L4(in_MsecDelay: int) returns (out_MsecDelay: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt#0_loop_L115(in_pMpRfd_2: int, in_Tmp_133: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_22: int) returns (out_pMpRfd_2: int, out_Tmp_133: int, out_Index: int)
{

  entry:
    out_pMpRfd_2, out_Tmp_133, out_Index := in_pMpRfd_2, in_Tmp_133, in_Index;
    goto L115, exit;

  exit:
    return;

  L115:
    goto anon52_Else;

  anon52_Else:
    assume {:partition} in_PacketFreeCount > out_Index;
    out_Tmp_133 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3270} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    out_Index := out_Index + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    call {:si_unique_call 3271} {:si_old_unique_call 1} out_pMpRfd_2, out_Tmp_133, out_Index := NICHandleRecvInterrupt#0_loop_L115(out_pMpRfd_2, out_Tmp_133, in_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_22);
    return;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt#0_loop_L115(in_pMpRfd_2: int, in_Tmp_133: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_22: int) returns (out_pMpRfd_2: int, out_Tmp_133: int, out_Index: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt#0_loop_L29(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_130: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_134: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_239: int, in_vslice_dummy_var_242: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_134: int, out_PacketFreeCount: int, out_Tmp_137: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_239: int, out_vslice_dummy_var_242: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_239, out_vslice_dummy_var_242 := in_PacketArrayCount_1, in_Tmp_128, in_Tmp_130, in_PacketStatus, in_Tmp_131, in_sdv_64, in_pMpRfd_2, in_Tmp_134, in_PacketFreeCount, in_Tmp_137, in_bAllocNewRfd, in_pHwRfd_1, in_vslice_dummy_var_239, in_vslice_dummy_var_242;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 3274} out_sdv_64 := sdv_IsListEmpty(0);
    goto anon47_Then;

  anon47_Then:
    assume {:partition} out_sdv_64 == 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_Tmp_137 := RecvList__FDO_DATA(in_FdoData_22);
    assume {:nonnull} out_Tmp_137 != 0;
    assume out_Tmp_137 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    out_PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(out_pHwRfd_1))];
    goto anon61_Else;

  anon61_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_131;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} out_Tmp_131 == 49152;
    call {:si_unique_call 3273} out_vslice_dummy_var_239 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 3272} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    goto anon49_Else_dummy;

  anon49_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 3280} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_239, out_vslice_dummy_var_242 := NICHandleRecvInterrupt#0_loop_L29(out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_22, out_vslice_dummy_var_239, out_vslice_dummy_var_242);
    return;

  anon49_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3276} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_130 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 3275} out_vslice_dummy_var_242 := PciDrvIoIncrement(in_FdoData_22);
    goto L70_dummy;

  L70_dummy:
    goto L_BAF_3;

  anon50_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_128 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon48_Then:
    call {:si_unique_call 3277} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    goto L_BAF_3;

  anon63_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_134 := strConst__li2bpl27;
    call {:si_unique_call 3278} DebugPrint(3, 128, out_Tmp_134);
    call {:si_unique_call 3279} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    goto L_BAF_3;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt#0_loop_L29(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_130: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_134: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_239: int, in_vslice_dummy_var_242: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_134: int, out_PacketFreeCount: int, out_Tmp_137: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_239: int, out_vslice_dummy_var_242: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_64 == 1 || out_sdv_64 == 0 || out_sdv_64 == in_sdv_64;
  free ensures {:va_keep} out_Tmp_137 == in_Tmp_137 || out_Tmp_137 == RecvList__FDO_DATA(in_FdoData_22);
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_239 == 1 || out_vslice_dummy_var_239 == 0 || out_vslice_dummy_var_239 == in_vslice_dummy_var_239;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt#0_loop_L24(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_129: int, in_Tmp_130: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_133: int, in_Tmp_134: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_136: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_239: int, in_vslice_dummy_var_242: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_129: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_133: int, out_Tmp_134: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_136: int, out_Tmp_137: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_239: int, out_vslice_dummy_var_242: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_128, out_Tmp_129, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_133, out_Tmp_134, out_LoopIndex, out_PacketFreeCount, out_Tmp_136, out_Tmp_137, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_239, out_vslice_dummy_var_242 := in_PacketArrayCount_1, in_Tmp_128, in_Tmp_129, in_Tmp_130, in_PacketStatus, in_Tmp_131, in_sdv_64, in_pMpRfd_2, in_Tmp_133, in_Tmp_134, in_LoopIndex, in_PacketFreeCount, in_Tmp_136, in_Tmp_137, in_bContinue, in_bAllocNewRfd, in_Index, in_pHwRfd_1, in_vslice_dummy_var_239, in_vslice_dummy_var_242;
    goto L24, exit;

  exit:
    return;

  L24:
    out_Tmp_136 := out_LoopIndex;
    out_LoopIndex := out_LoopIndex + 1;
    goto anon56_Else;

  anon56_Else:
    assume {:partition} in_LoopCount > out_Tmp_136;
    goto anon44_Else;

  anon44_Else:
    assume {:partition} out_bContinue != 0;
    out_PacketArrayCount_1 := 0;
    out_PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 3288} out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_239, out_vslice_dummy_var_242 := NICHandleRecvInterrupt#0_loop_L29(out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_22, out_vslice_dummy_var_239, out_vslice_dummy_var_242);
    goto L29_last;

  L29_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 3295} out_sdv_64 := sdv_IsListEmpty(0);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} out_sdv_64 != 0;
    out_bContinue := 0;
    goto L30;

  L30:
    goto anon46_Else;

  anon46_Else:
    assume {:partition} out_PacketArrayCount_1 != 0;
    call {:si_unique_call 3286} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3287} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    out_Tmp_129 := strConst__li2bpl28;
    call {:si_unique_call 3297} DebugPrint(3, 128, out_Tmp_129);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    call {:si_unique_call 3298} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3299} NICServiceIndicateStatusIrp(in_FdoData_22);
    goto anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L108;

  L108:
    call {:si_unique_call 3284} NICServiceReadIrps#0(in_FdoData_22, in_PacketArray_1, out_PacketArrayCount_1);
    goto anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3282} sdv_KeAcquireSpinLockAtDpcLevel(0);
    out_Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 3281} out_pMpRfd_2, out_Tmp_133, out_Index := NICHandleRecvInterrupt#0_loop_L115(out_pMpRfd_2, out_Tmp_133, out_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_22);
    goto L115_last;

  L115_last:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_PacketFreeCount > out_Index;
    out_Tmp_133 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3283} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    out_Index := out_Index + 1;
    assume false;
    return;

  anon52_Then:
    assume {:partition} out_Index >= out_PacketFreeCount;
    goto anon52_Then_dummy;

  anon52_Then_dummy:
    call {:si_unique_call 3300} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_128, out_Tmp_129, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_133, out_Tmp_134, out_LoopIndex, out_PacketFreeCount, out_Tmp_136, out_Tmp_137, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_239, out_vslice_dummy_var_242 := NICHandleRecvInterrupt#0_loop_L24(out_PacketArrayCount_1, out_Tmp_128, out_Tmp_129, out_Tmp_130, in_LoopCount, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_133, out_Tmp_134, out_LoopIndex, out_PacketFreeCount, out_Tmp_136, in_PacketFreeArray, in_PacketArray_1, out_Tmp_137, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, in_FdoData_22, out_vslice_dummy_var_239, out_vslice_dummy_var_242);
    return;

  anon51_Then:
    call {:si_unique_call 3285} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon47_Then:
    assume {:partition} out_sdv_64 == 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_Tmp_137 := RecvList__FDO_DATA(in_FdoData_22);
    assume {:nonnull} out_Tmp_137 != 0;
    assume out_Tmp_137 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    out_PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(out_pHwRfd_1))];
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_131;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_Tmp_131 == 49152;
    call {:si_unique_call 3294} out_vslice_dummy_var_239 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 3289} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    assume false;
    return;

  anon49_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3296} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_130 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 3290} out_vslice_dummy_var_242 := PciDrvIoIncrement(in_FdoData_22);
    assume false;
    return;

  anon50_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_128 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon48_Then:
    call {:si_unique_call 3291} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    assume false;
    return;

  anon63_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_134 := strConst__li2bpl27;
    call {:si_unique_call 3292} DebugPrint(3, 128, out_Tmp_134);
    call {:si_unique_call 3293} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    assume false;
    return;

  anon62_Then:
    assume {:partition} out_Tmp_131 != 49152;
    out_bContinue := 0;
    goto L30;

  anon61_Then:
    assume {:partition} BAND(out_PacketStatus, 32768) == 0;
    out_bContinue := 0;
    goto L30;

  anon45_Then:
    assume {:partition} out_PacketArrayCount_1 >= 20;
    goto L30;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt#0_loop_L24(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_129: int, in_Tmp_130: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_133: int, in_Tmp_134: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_136: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_239: int, in_vslice_dummy_var_242: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_129: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_133: int, out_Tmp_134: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_136: int, out_Tmp_137: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_239: int, out_vslice_dummy_var_242: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_64 == 1 || out_sdv_64 == 0 || out_sdv_64 == in_sdv_64;
  free ensures {:va_keep} out_Tmp_137 == in_Tmp_137 || out_Tmp_137 == RecvList__FDO_DATA(in_FdoData_22);
  free ensures {:va_keep} out_bContinue == 0 || out_bContinue == in_bContinue;
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_239 == 1 || out_vslice_dummy_var_239 == 0 || out_vslice_dummy_var_239 == in_vslice_dummy_var_239;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt#1_loop_L115(in_pMpRfd_2: int, in_Tmp_133: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_22: int) returns (out_pMpRfd_2: int, out_Tmp_133: int, out_Index: int)
{

  entry:
    out_pMpRfd_2, out_Tmp_133, out_Index := in_pMpRfd_2, in_Tmp_133, in_Index;
    goto L115, exit;

  exit:
    return;

  L115:
    goto anon52_Else;

  anon52_Else:
    assume {:partition} in_PacketFreeCount > out_Index;
    out_Tmp_133 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3301} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    out_Index := out_Index + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    call {:si_unique_call 3302} {:si_old_unique_call 1} out_pMpRfd_2, out_Tmp_133, out_Index := NICHandleRecvInterrupt#1_loop_L115(out_pMpRfd_2, out_Tmp_133, in_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_22);
    return;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt#1_loop_L115(in_pMpRfd_2: int, in_Tmp_133: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_22: int) returns (out_pMpRfd_2: int, out_Tmp_133: int, out_Index: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt#1_loop_L29(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_130: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_134: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_244: int, in_vslice_dummy_var_247: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_134: int, out_PacketFreeCount: int, out_Tmp_137: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_244: int, out_vslice_dummy_var_247: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_244, out_vslice_dummy_var_247 := in_PacketArrayCount_1, in_Tmp_128, in_Tmp_130, in_PacketStatus, in_Tmp_131, in_sdv_64, in_pMpRfd_2, in_Tmp_134, in_PacketFreeCount, in_Tmp_137, in_bAllocNewRfd, in_pHwRfd_1, in_vslice_dummy_var_244, in_vslice_dummy_var_247;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 3305} out_sdv_64 := sdv_IsListEmpty(0);
    goto anon47_Then;

  anon47_Then:
    assume {:partition} out_sdv_64 == 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_Tmp_137 := RecvList__FDO_DATA(in_FdoData_22);
    assume {:nonnull} out_Tmp_137 != 0;
    assume out_Tmp_137 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    out_PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(out_pHwRfd_1))];
    goto anon61_Else;

  anon61_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_131;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} out_Tmp_131 == 49152;
    call {:si_unique_call 3304} out_vslice_dummy_var_244 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 3303} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    goto anon49_Else_dummy;

  anon49_Else_dummy:
    goto L_BAF_4;

  L_BAF_4:
    call {:si_unique_call 3311} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_244, out_vslice_dummy_var_247 := NICHandleRecvInterrupt#1_loop_L29(out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_22, out_vslice_dummy_var_244, out_vslice_dummy_var_247);
    return;

  anon49_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3307} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_130 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 3306} out_vslice_dummy_var_247 := PciDrvIoIncrement(in_FdoData_22);
    goto L70_dummy;

  L70_dummy:
    goto L_BAF_4;

  anon50_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_128 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon48_Then:
    call {:si_unique_call 3308} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    goto L_BAF_4;

  anon63_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_134 := strConst__li2bpl27;
    call {:si_unique_call 3309} DebugPrint(3, 128, out_Tmp_134);
    call {:si_unique_call 3310} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    goto L_BAF_4;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt#1_loop_L29(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_130: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_134: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_244: int, in_vslice_dummy_var_247: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_134: int, out_PacketFreeCount: int, out_Tmp_137: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_244: int, out_vslice_dummy_var_247: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_64 == 1 || out_sdv_64 == 0 || out_sdv_64 == in_sdv_64;
  free ensures {:va_keep} out_Tmp_137 == in_Tmp_137 || out_Tmp_137 == RecvList__FDO_DATA(in_FdoData_22);
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_244 == 1 || out_vslice_dummy_var_244 == 0 || out_vslice_dummy_var_244 == in_vslice_dummy_var_244;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt#1_loop_L24(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_129: int, in_Tmp_130: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_133: int, in_Tmp_134: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_136: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_244: int, in_vslice_dummy_var_247: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_129: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_133: int, out_Tmp_134: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_136: int, out_Tmp_137: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_244: int, out_vslice_dummy_var_247: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_128, out_Tmp_129, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_133, out_Tmp_134, out_LoopIndex, out_PacketFreeCount, out_Tmp_136, out_Tmp_137, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_244, out_vslice_dummy_var_247 := in_PacketArrayCount_1, in_Tmp_128, in_Tmp_129, in_Tmp_130, in_PacketStatus, in_Tmp_131, in_sdv_64, in_pMpRfd_2, in_Tmp_133, in_Tmp_134, in_LoopIndex, in_PacketFreeCount, in_Tmp_136, in_Tmp_137, in_bContinue, in_bAllocNewRfd, in_Index, in_pHwRfd_1, in_vslice_dummy_var_244, in_vslice_dummy_var_247;
    goto L24, exit;

  exit:
    return;

  L24:
    out_Tmp_136 := out_LoopIndex;
    out_LoopIndex := out_LoopIndex + 1;
    goto anon56_Else;

  anon56_Else:
    assume {:partition} in_LoopCount > out_Tmp_136;
    goto anon44_Else;

  anon44_Else:
    assume {:partition} out_bContinue != 0;
    out_PacketArrayCount_1 := 0;
    out_PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 3319} out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_244, out_vslice_dummy_var_247 := NICHandleRecvInterrupt#1_loop_L29(out_PacketArrayCount_1, out_Tmp_128, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_134, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_137, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_22, out_vslice_dummy_var_244, out_vslice_dummy_var_247);
    goto L29_last;

  L29_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 3326} out_sdv_64 := sdv_IsListEmpty(0);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} out_sdv_64 != 0;
    out_bContinue := 0;
    goto L30;

  L30:
    goto anon46_Else;

  anon46_Else:
    assume {:partition} out_PacketArrayCount_1 != 0;
    call {:si_unique_call 3317} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3318} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    out_Tmp_129 := strConst__li2bpl28;
    call {:si_unique_call 3328} DebugPrint(3, 128, out_Tmp_129);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    call {:si_unique_call 3329} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3330} NICServiceIndicateStatusIrp(in_FdoData_22);
    goto anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L108;

  L108:
    call {:si_unique_call 3315} NICServiceReadIrps#1(in_FdoData_22, in_PacketArray_1, out_PacketArrayCount_1);
    goto anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3313} sdv_KeAcquireSpinLockAtDpcLevel(0);
    out_Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 3312} out_pMpRfd_2, out_Tmp_133, out_Index := NICHandleRecvInterrupt#1_loop_L115(out_pMpRfd_2, out_Tmp_133, out_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_22);
    goto L115_last;

  L115_last:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_PacketFreeCount > out_Index;
    out_Tmp_133 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3314} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    out_Index := out_Index + 1;
    assume false;
    return;

  anon52_Then:
    assume {:partition} out_Index >= out_PacketFreeCount;
    goto anon52_Then_dummy;

  anon52_Then_dummy:
    call {:si_unique_call 3331} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_128, out_Tmp_129, out_Tmp_130, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_133, out_Tmp_134, out_LoopIndex, out_PacketFreeCount, out_Tmp_136, out_Tmp_137, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_244, out_vslice_dummy_var_247 := NICHandleRecvInterrupt#1_loop_L24(out_PacketArrayCount_1, out_Tmp_128, out_Tmp_129, out_Tmp_130, in_LoopCount, out_PacketStatus, out_Tmp_131, out_sdv_64, out_pMpRfd_2, out_Tmp_133, out_Tmp_134, out_LoopIndex, out_PacketFreeCount, out_Tmp_136, in_PacketFreeArray, in_PacketArray_1, out_Tmp_137, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, in_FdoData_22, out_vslice_dummy_var_244, out_vslice_dummy_var_247);
    return;

  anon51_Then:
    call {:si_unique_call 3316} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon47_Then:
    assume {:partition} out_sdv_64 == 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_Tmp_137 := RecvList__FDO_DATA(in_FdoData_22);
    assume {:nonnull} out_Tmp_137 != 0;
    assume out_Tmp_137 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    out_PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(out_pHwRfd_1))];
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_131;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_Tmp_131 == 49152;
    call {:si_unique_call 3325} out_vslice_dummy_var_244 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 3320} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    assume false;
    return;

  anon49_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 3327} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_130 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 3321} out_vslice_dummy_var_247 := PciDrvIoIncrement(in_FdoData_22);
    assume false;
    return;

  anon50_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_128 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon48_Then:
    call {:si_unique_call 3322} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    assume false;
    return;

  anon63_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_134 := strConst__li2bpl27;
    call {:si_unique_call 3323} DebugPrint(3, 128, out_Tmp_134);
    call {:si_unique_call 3324} NICReturnRFD(in_FdoData_22, out_pMpRfd_2);
    assume false;
    return;

  anon62_Then:
    assume {:partition} out_Tmp_131 != 49152;
    out_bContinue := 0;
    goto L30;

  anon61_Then:
    assume {:partition} BAND(out_PacketStatus, 32768) == 0;
    out_bContinue := 0;
    goto L30;

  anon45_Then:
    assume {:partition} out_PacketArrayCount_1 >= 20;
    goto L30;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt#1_loop_L24(in_PacketArrayCount_1: int, in_Tmp_128: int, in_Tmp_129: int, in_Tmp_130: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_131: int, in_sdv_64: int, in_pMpRfd_2: int, in_Tmp_133: int, in_Tmp_134: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_136: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_137: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_22: int, in_vslice_dummy_var_244: int, in_vslice_dummy_var_247: int) returns (out_PacketArrayCount_1: int, out_Tmp_128: int, out_Tmp_129: int, out_Tmp_130: int, out_PacketStatus: int, out_Tmp_131: int, out_sdv_64: int, out_pMpRfd_2: int, out_Tmp_133: int, out_Tmp_134: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_136: int, out_Tmp_137: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_244: int, out_vslice_dummy_var_247: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_64 == 1 || out_sdv_64 == 0 || out_sdv_64 == in_sdv_64;
  free ensures {:va_keep} out_Tmp_137 == in_Tmp_137 || out_Tmp_137 == RecvList__FDO_DATA(in_FdoData_22);
  free ensures {:va_keep} out_bContinue == 0 || out_bContinue == in_bContinue;
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_244 == 1 || out_vslice_dummy_var_244 == 0 || out_vslice_dummy_var_244 == in_vslice_dummy_var_244;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICServiceReadIrps#0_loop_L27(in_listEntry: int, in_sdv_52: int, in_sdv_58: int, in_sdv_60: int, in_irp: int, in_FdoData_20: int) returns (out_listEntry: int, out_sdv_52: int, out_sdv_58: int, out_sdv_60: int, out_irp: int)
{

  entry:
    out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp := in_listEntry, in_sdv_52, in_sdv_58, in_sdv_60, in_irp;
    goto L27, exit;

  exit:
    return;

  L27:
    call {:si_unique_call 3332} out_sdv_52 := sdv_IsListEmpty(0);
    goto anon24_Then;

  anon24_Then:
    assume {:partition} out_sdv_52 == 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    call {:si_unique_call 3334} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_20));
    call {:si_unique_call 3335} out_sdv_58 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_58;
    call {:si_unique_call 3336} out_sdv_60 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon25_Then;

  anon25_Then:
    assume {:partition} out_sdv_60 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 3333} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    call {:si_unique_call 3337} {:si_old_unique_call 1} out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp := NICServiceReadIrps#0_loop_L27(out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp, in_FdoData_20);
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps#0_loop_L27(in_listEntry: int, in_sdv_52: int, in_sdv_58: int, in_sdv_60: int, in_irp: int, in_FdoData_20: int) returns (out_listEntry: int, out_sdv_52: int, out_sdv_58: int, out_sdv_60: int, out_irp: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_52 == 1 || out_sdv_52 == 0 || out_sdv_52 == in_sdv_52;
  free ensures {:va_keep} out_irp == 0 || out_irp == in_irp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICServiceReadIrps#0_loop_L15(in_Tmp_117: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_52: int, in_sdv_53: int, in_buffer: int, in_sdv_58: int, in_index: int, in_sdv_60: int, in_irp: int, in_Tmp_122: int, in_status_11: int, in_FdoData_20: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_249: int, in_vslice_dummy_var_250: int) returns (out_Tmp_117: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_52: int, out_sdv_53: int, out_buffer: int, out_sdv_58: int, out_index: int, out_sdv_60: int, out_irp: int, out_Tmp_122: int, out_status_11: int, out_vslice_dummy_var_249: int, out_vslice_dummy_var_250: int)
{

  entry:
    out_Tmp_117, out_length, out_pMpRfd, out_listEntry, out_sdv_52, out_sdv_53, out_buffer, out_sdv_58, out_index, out_sdv_60, out_irp, out_Tmp_122, out_status_11, out_vslice_dummy_var_249, out_vslice_dummy_var_250 := in_Tmp_117, in_length, in_pMpRfd, in_listEntry, in_sdv_52, in_sdv_53, in_buffer, in_sdv_58, in_index, in_sdv_60, in_irp, in_Tmp_122, in_status_11, in_vslice_dummy_var_249, in_vslice_dummy_var_250;
    goto L15, exit;

  exit:
    return;

  L15:
    goto anon23_Else;

  anon23_Else:
    assume {:partition} in_PacketArrayCount > out_index;
    out_Tmp_122 := out_index;
    assume {:nonnull} in_PacketArray != 0;
    assume in_PacketArray > 0;
    havoc out_pMpRfd;
    call {:si_unique_call 3353} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 3351} out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp := NICServiceReadIrps#0_loop_L27(out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp, in_FdoData_20);
    goto L27_last;

  L27_last:
    call {:si_unique_call 3352} out_sdv_52 := sdv_IsListEmpty(0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} out_sdv_52 != 0;
    call {:si_unique_call 3342} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 3340} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3341} out_vslice_dummy_var_250 := PciDrvIoDecrement(in_FdoData_20);
    goto anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    goto anon30_Else;

  anon30_Else:
    call {:si_unique_call 3339} NICReturnRFD(in_FdoData_20, out_pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 3338} sdv_KeReleaseSpinLockFromDpcLevel(0);
    out_index := out_index + 1;
    goto L96_dummy;

  L96_dummy:
    call {:si_unique_call 3357} {:si_old_unique_call 1} out_Tmp_117, out_length, out_pMpRfd, out_listEntry, out_sdv_52, out_sdv_53, out_buffer, out_sdv_58, out_index, out_sdv_60, out_irp, out_Tmp_122, out_status_11, out_vslice_dummy_var_249, out_vslice_dummy_var_250 := NICServiceReadIrps#0_loop_L15(out_Tmp_117, out_length, out_pMpRfd, out_listEntry, out_sdv_52, out_sdv_53, out_buffer, out_sdv_58, out_index, out_sdv_60, out_irp, out_Tmp_122, out_status_11, in_FdoData_20, in_PacketArray, in_PacketArrayCount, out_vslice_dummy_var_249, out_vslice_dummy_var_250);
    return;

  anon24_Then:
    assume {:partition} out_sdv_52 == 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    call {:si_unique_call 3348} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_20));
    call {:si_unique_call 3349} out_sdv_58 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_58;
    call {:si_unique_call 3350} out_sdv_60 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_sdv_60 != 0;
    call {:si_unique_call 3346} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3347} out_buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} out_buffer != 0;
    call {:si_unique_call 3356} out_sdv_53 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 3355} out_Tmp_117 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    out_length := out_Tmp_117;
    call {:si_unique_call 3345} sdv_RtlCopyMemory(0, 0, out_length);
    out_status_11 := 0;
    goto L73;

  L73:
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_irp))] := out_length;
    call {:si_unique_call 3343} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3344} out_vslice_dummy_var_249 := PciDrvIoDecrement(in_FdoData_20);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  anon27_Then:
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    havoc out_Tmp_117;
    goto L68;

  anon26_Then:
    assume {:partition} out_buffer == 0;
    out_status_11 := -1073741670;
    out_length := 0;
    goto L73;

  anon25_Then:
    assume {:partition} out_sdv_60 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 3354} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    assume false;
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps#0_loop_L15(in_Tmp_117: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_52: int, in_sdv_53: int, in_buffer: int, in_sdv_58: int, in_index: int, in_sdv_60: int, in_irp: int, in_Tmp_122: int, in_status_11: int, in_FdoData_20: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_249: int, in_vslice_dummy_var_250: int) returns (out_Tmp_117: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_52: int, out_sdv_53: int, out_buffer: int, out_sdv_58: int, out_index: int, out_sdv_60: int, out_irp: int, out_Tmp_122: int, out_status_11: int, out_vslice_dummy_var_249: int, out_vslice_dummy_var_250: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_52 == 1 || out_sdv_52 == 0 || out_sdv_52 == in_sdv_52;
  free ensures {:va_keep} out_status_11 == 0 || out_status_11 == -1073741670 || out_status_11 == in_status_11;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICServiceReadIrps#1_loop_L27(in_listEntry: int, in_sdv_52: int, in_sdv_58: int, in_sdv_60: int, in_irp: int, in_FdoData_20: int) returns (out_listEntry: int, out_sdv_52: int, out_sdv_58: int, out_sdv_60: int, out_irp: int)
{

  entry:
    out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp := in_listEntry, in_sdv_52, in_sdv_58, in_sdv_60, in_irp;
    goto L27, exit;

  exit:
    return;

  L27:
    call {:si_unique_call 3358} out_sdv_52 := sdv_IsListEmpty(0);
    goto anon24_Then;

  anon24_Then:
    assume {:partition} out_sdv_52 == 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    call {:si_unique_call 3360} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_20));
    call {:si_unique_call 3361} out_sdv_58 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_58;
    call {:si_unique_call 3362} out_sdv_60 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon25_Then;

  anon25_Then:
    assume {:partition} out_sdv_60 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 3359} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    call {:si_unique_call 3363} {:si_old_unique_call 1} out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp := NICServiceReadIrps#1_loop_L27(out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp, in_FdoData_20);
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps#1_loop_L27(in_listEntry: int, in_sdv_52: int, in_sdv_58: int, in_sdv_60: int, in_irp: int, in_FdoData_20: int) returns (out_listEntry: int, out_sdv_52: int, out_sdv_58: int, out_sdv_60: int, out_irp: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_52 == 1 || out_sdv_52 == 0 || out_sdv_52 == in_sdv_52;
  free ensures {:va_keep} out_irp == 0 || out_irp == in_irp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICServiceReadIrps#1_loop_L15(in_Tmp_117: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_52: int, in_sdv_53: int, in_buffer: int, in_sdv_58: int, in_index: int, in_sdv_60: int, in_irp: int, in_Tmp_122: int, in_status_11: int, in_Tmp_123: int, in_FdoData_20: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_254: int, in_vslice_dummy_var_255: int, in_vslice_dummy_var_256: int, in_vslice_dummy_var_257: int) returns (out_Tmp_117: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_52: int, out_sdv_53: int, out_buffer: int, out_sdv_58: int, out_index: int, out_sdv_60: int, out_irp: int, out_Tmp_122: int, out_status_11: int, out_Tmp_123: int, out_vslice_dummy_var_254: int, out_vslice_dummy_var_255: int, out_vslice_dummy_var_256: int, out_vslice_dummy_var_257: int)
{

  entry:
    out_Tmp_117, out_length, out_pMpRfd, out_listEntry, out_sdv_52, out_sdv_53, out_buffer, out_sdv_58, out_index, out_sdv_60, out_irp, out_Tmp_122, out_status_11, out_Tmp_123, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257 := in_Tmp_117, in_length, in_pMpRfd, in_listEntry, in_sdv_52, in_sdv_53, in_buffer, in_sdv_58, in_index, in_sdv_60, in_irp, in_Tmp_122, in_status_11, in_Tmp_123, in_vslice_dummy_var_254, in_vslice_dummy_var_255, in_vslice_dummy_var_256, in_vslice_dummy_var_257;
    goto L15, exit;

  exit:
    return;

  L15:
    goto anon23_Else;

  anon23_Else:
    assume {:partition} in_PacketArrayCount > out_index;
    out_Tmp_122 := out_index;
    assume {:nonnull} in_PacketArray != 0;
    assume in_PacketArray > 0;
    havoc out_pMpRfd;
    call {:si_unique_call 3384} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 3382} out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp := NICServiceReadIrps#1_loop_L27(out_listEntry, out_sdv_52, out_sdv_58, out_sdv_60, out_irp, in_FdoData_20);
    goto L27_last;

  L27_last:
    call {:si_unique_call 3383} out_sdv_52 := sdv_IsListEmpty(0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} out_sdv_52 != 0;
    call {:si_unique_call 3373} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 3371} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 3372} out_vslice_dummy_var_255 := PciDrvIoDecrement(in_FdoData_20);
    goto anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 3365} NICReturnRFD(in_FdoData_20, out_pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 3364} sdv_KeReleaseSpinLockFromDpcLevel(0);
    out_index := out_index + 1;
    goto L96_dummy;

  L96_dummy:
    call {:si_unique_call 3388} {:si_old_unique_call 1} out_Tmp_117, out_length, out_pMpRfd, out_listEntry, out_sdv_52, out_sdv_53, out_buffer, out_sdv_58, out_index, out_sdv_60, out_irp, out_Tmp_122, out_status_11, out_Tmp_123, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257 := NICServiceReadIrps#1_loop_L15(out_Tmp_117, out_length, out_pMpRfd, out_listEntry, out_sdv_52, out_sdv_53, out_buffer, out_sdv_58, out_index, out_sdv_60, out_irp, out_Tmp_122, out_status_11, out_Tmp_123, in_FdoData_20, in_PacketArray, in_PacketArrayCount, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257);
    return;

  anon30_Then:
    call {:si_unique_call 3369} out_vslice_dummy_var_256 := PciDrvIoIncrement(in_FdoData_20);
    call {:si_unique_call 3370} out_status_11 := PciDrvQueuePassiveLevelCallback#0(in_FdoData_20, li2bplFunctionConstant3731, out_pMpRfd, 0);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} out_status_11 >= 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    out_Tmp_123 := strConst__li2bpl26;
    call {:si_unique_call 3366} DebugPrint(5, 128, out_Tmp_123);
    goto L96;

  anon28_Then:
    assume {:partition} 0 > out_status_11;
    call {:si_unique_call 3368} out_vslice_dummy_var_257 := PciDrvIoDecrement(in_FdoData_20);
    goto anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3367} NICReturnRFD(in_FdoData_20, out_pMpRfd);
    goto L96;

  anon24_Then:
    assume {:partition} out_sdv_52 == 0;
    assume {:nonnull} in_FdoData_20 != 0;
    assume in_FdoData_20 > 0;
    call {:si_unique_call 3379} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_20));
    call {:si_unique_call 3380} out_sdv_58 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_58;
    call {:si_unique_call 3381} out_sdv_60 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_sdv_60 != 0;
    call {:si_unique_call 3377} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 3378} out_buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} out_buffer != 0;
    call {:si_unique_call 3387} out_sdv_53 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 3386} out_Tmp_117 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    out_length := out_Tmp_117;
    call {:si_unique_call 3376} sdv_RtlCopyMemory(0, 0, out_length);
    out_status_11 := 0;
    goto L73;

  L73:
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_irp))] := out_length;
    call {:si_unique_call 3374} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 3375} out_vslice_dummy_var_254 := PciDrvIoDecrement(in_FdoData_20);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  anon27_Then:
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    havoc out_Tmp_117;
    goto L68;

  anon26_Then:
    assume {:partition} out_buffer == 0;
    out_status_11 := -1073741670;
    out_length := 0;
    goto L73;

  anon25_Then:
    assume {:partition} out_sdv_60 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 3385} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    assume false;
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps#1_loop_L15(in_Tmp_117: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_52: int, in_sdv_53: int, in_buffer: int, in_sdv_58: int, in_index: int, in_sdv_60: int, in_irp: int, in_Tmp_122: int, in_status_11: int, in_Tmp_123: int, in_FdoData_20: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_254: int, in_vslice_dummy_var_255: int, in_vslice_dummy_var_256: int, in_vslice_dummy_var_257: int) returns (out_Tmp_117: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_52: int, out_sdv_53: int, out_buffer: int, out_sdv_58: int, out_index: int, out_sdv_60: int, out_irp: int, out_Tmp_122: int, out_status_11: int, out_Tmp_123: int, out_vslice_dummy_var_254: int, out_vslice_dummy_var_255: int, out_vslice_dummy_var_256: int, out_vslice_dummy_var_257: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_52 == 1 || out_sdv_52 == 0 || out_sdv_52 == in_sdv_52;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvProcessQueuedRequests#0_loop_L13(in_sdv_375: int, in_listEntry_3: int, in_Tmp_773: int, in_cancelRoutine: int, in_oldIrql_10: int, in_sdv_378: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_80: int, in_vslice_dummy_var_268: int) returns (out_sdv_375: int, out_listEntry_3: int, out_Tmp_773: int, out_cancelRoutine: int, out_oldIrql_10: int, out_sdv_378: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_268: int)
{
  var vslice_dummy_var_132: int;

  entry:
    out_sdv_375, out_listEntry_3, out_Tmp_773, out_cancelRoutine, out_oldIrql_10, out_sdv_378, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_268 := in_sdv_375, in_listEntry_3, in_Tmp_773, in_cancelRoutine, in_oldIrql_10, in_sdv_378, in_nIrpsReDispatched, in_nextIrp, in_vslice_dummy_var_268;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 3389} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_oldIrql_10;
    call {:si_unique_call 3390} sdv_KeAcquireSpinLock(0, out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_oldIrql_10 := Mem_T.INT4[out_Tmp_773];
    call {:si_unique_call 3391} out_sdv_375 := sdv_IsListEmpty(0);
    goto anon15_Then;

  anon15_Then:
    assume {:partition} out_sdv_375 == 0;
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    call {:si_unique_call 3394} out_listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(in_FdoData_80));
    call {:si_unique_call 3395} out_sdv_378 := sdv_containing_record(out_listEntry_3, 88);
    out_nextIrp := out_sdv_378;
    call {:si_unique_call 3396} out_cancelRoutine := sdv_IoSetCancelRoutine(out_nextIrp, 0);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_cancelRoutine != 0;
    call {:si_unique_call 3392} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 3393} sdv_IoCompleteRequest(0, 0);
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    goto L_BAF_5;

  L_BAF_5:
    call {:si_unique_call 3402} {:si_old_unique_call 1} out_sdv_375, out_listEntry_3, out_Tmp_773, out_cancelRoutine, out_oldIrql_10, out_sdv_378, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_268 := PciDrvProcessQueuedRequests#0_loop_L13(out_sdv_375, out_listEntry_3, out_Tmp_773, out_cancelRoutine, out_oldIrql_10, out_sdv_378, out_nIrpsReDispatched, out_nextIrp, in_FdoData_80, out_vslice_dummy_var_268);
    return;

  anon17_Then:
    assume {:partition} out_cancelRoutine == 0;
    call {:si_unique_call 3397} InitializeListHead(out_listEntry_3);
    call {:si_unique_call 3398} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    goto L_BAF_5;

  anon16_Then:
    call {:si_unique_call 3400} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 3399} sdv_IoCompleteRequest(0, 0);
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    goto L_BAF_5;

  anon18_Then:
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    goto anon19_Else;

  anon19_Else:
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    havoc vslice_dummy_var_132;
    call {:si_unique_call 3401} out_vslice_dummy_var_268 := PciDrvDispatchIO#0(vslice_dummy_var_132, out_nextIrp);
    goto anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    out_nIrpsReDispatched := out_nIrpsReDispatched + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    goto L_BAF_5;
}



procedure {:LoopProcedure} PciDrvProcessQueuedRequests#0_loop_L13(in_sdv_375: int, in_listEntry_3: int, in_Tmp_773: int, in_cancelRoutine: int, in_oldIrql_10: int, in_sdv_378: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_80: int, in_vslice_dummy_var_268: int) returns (out_sdv_375: int, out_listEntry_3: int, out_Tmp_773: int, out_cancelRoutine: int, out_oldIrql_10: int, out_sdv_378: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_268: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_375 == 1 || out_sdv_375 == 0 || out_sdv_375 == in_sdv_375;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvProcessQueuedRequests#1_loop_L13(in_sdv_375: int, in_listEntry_3: int, in_Tmp_773: int, in_cancelRoutine: int, in_oldIrql_10: int, in_sdv_378: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_80: int, in_vslice_dummy_var_272: int) returns (out_sdv_375: int, out_listEntry_3: int, out_Tmp_773: int, out_cancelRoutine: int, out_oldIrql_10: int, out_sdv_378: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_272: int)
{
  var vslice_dummy_var_133: int;

  entry:
    out_sdv_375, out_listEntry_3, out_Tmp_773, out_cancelRoutine, out_oldIrql_10, out_sdv_378, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_272 := in_sdv_375, in_listEntry_3, in_Tmp_773, in_cancelRoutine, in_oldIrql_10, in_sdv_378, in_nIrpsReDispatched, in_nextIrp, in_vslice_dummy_var_272;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 3403} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_oldIrql_10;
    call {:si_unique_call 3404} sdv_KeAcquireSpinLock(0, out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_oldIrql_10 := Mem_T.INT4[out_Tmp_773];
    call {:si_unique_call 3405} out_sdv_375 := sdv_IsListEmpty(0);
    goto anon15_Then;

  anon15_Then:
    assume {:partition} out_sdv_375 == 0;
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    call {:si_unique_call 3408} out_listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(in_FdoData_80));
    call {:si_unique_call 3409} out_sdv_378 := sdv_containing_record(out_listEntry_3, 88);
    out_nextIrp := out_sdv_378;
    call {:si_unique_call 3410} out_cancelRoutine := sdv_IoSetCancelRoutine(out_nextIrp, 0);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_cancelRoutine != 0;
    call {:si_unique_call 3406} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 3407} sdv_IoCompleteRequest(0, 0);
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    goto L_BAF_6;

  L_BAF_6:
    call {:si_unique_call 3416} {:si_old_unique_call 1} out_sdv_375, out_listEntry_3, out_Tmp_773, out_cancelRoutine, out_oldIrql_10, out_sdv_378, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_272 := PciDrvProcessQueuedRequests#1_loop_L13(out_sdv_375, out_listEntry_3, out_Tmp_773, out_cancelRoutine, out_oldIrql_10, out_sdv_378, out_nIrpsReDispatched, out_nextIrp, in_FdoData_80, out_vslice_dummy_var_272);
    return;

  anon17_Then:
    assume {:partition} out_cancelRoutine == 0;
    call {:si_unique_call 3411} InitializeListHead(out_listEntry_3);
    call {:si_unique_call 3412} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    goto L_BAF_6;

  anon16_Then:
    call {:si_unique_call 3414} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 3413} sdv_IoCompleteRequest(0, 0);
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    goto L_BAF_6;

  anon18_Then:
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    goto anon19_Else;

  anon19_Else:
    assume {:nonnull} in_FdoData_80 != 0;
    assume in_FdoData_80 > 0;
    havoc vslice_dummy_var_133;
    call {:si_unique_call 3415} out_vslice_dummy_var_272 := PciDrvDispatchIO#1(vslice_dummy_var_133, out_nextIrp);
    goto anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    out_nIrpsReDispatched := out_nIrpsReDispatched + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    goto L_BAF_6;
}



procedure {:LoopProcedure} PciDrvProcessQueuedRequests#1_loop_L13(in_sdv_375: int, in_listEntry_3: int, in_Tmp_773: int, in_cancelRoutine: int, in_oldIrql_10: int, in_sdv_378: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_80: int, in_vslice_dummy_var_272: int) returns (out_sdv_375: int, out_listEntry_3: int, out_Tmp_773: int, out_cancelRoutine: int, out_oldIrql_10: int, out_sdv_378: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_272: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_375 == 1 || out_sdv_375 == 0 || out_sdv_375 == in_sdv_375;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICMapHWResources#0_loop_L37(in_i_2: int, in_Tmp_258: int, in_Tmp_259: int, in_numberOfBARs: int, in_Tmp_266: int, in_Tmp_269: int, in_Tmp_271: int, in_bResInterrupt: int, in_bResPort: int, in_sdv_162: int, in_sdv_163: int, in_Tmp_276: int, in_partialResourceListTranslated: int, in_resourceTrans: int, in_Tmp_284: int, in_bResMemory: int, in_FdoData_29: int) returns (out_i_2: int, out_Tmp_258: int, out_Tmp_259: int, out_numberOfBARs: int, out_Tmp_266: int, out_Tmp_269: int, out_Tmp_271: int, out_bResInterrupt: int, out_bResPort: int, out_sdv_162: int, out_sdv_163: int, out_Tmp_276: int, out_Tmp_284: int, out_bResMemory: int)
{
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;

  entry:
    out_i_2, out_Tmp_258, out_Tmp_259, out_numberOfBARs, out_Tmp_266, out_Tmp_269, out_Tmp_271, out_bResInterrupt, out_bResPort, out_sdv_162, out_sdv_163, out_Tmp_276, out_Tmp_284, out_bResMemory := in_i_2, in_Tmp_258, in_Tmp_259, in_numberOfBARs, in_Tmp_266, in_Tmp_269, in_Tmp_271, in_bResInterrupt, in_bResPort, in_sdv_162, in_sdv_163, in_Tmp_276, in_Tmp_284, in_bResMemory;
    goto L37, exit;

  exit:
    return;

  L37:
    assume {:nonnull} in_partialResourceListTranslated != 0;
    assume in_partialResourceListTranslated > 0;
    goto anon44_Else;

  anon44_Else:
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    out_numberOfBARs := out_numberOfBARs + 1;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} out_numberOfBARs == 1;
    out_Tmp_259 := strConst__li2bpl92;
    call {:si_unique_call 3424} DebugPrint(6, 1, out_Tmp_259);
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    havoc vslice_dummy_var_136;
    call {:si_unique_call 3425} out_sdv_162 := MmMapIoSpace(vslice_dummy_var_136, 24, 0);
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto anon60_Else;

  anon60_Else:
    out_Tmp_276 := strConst__li2bpl94;
    call {:si_unique_call 3417} DebugPrint(6, 1, out_Tmp_276);
    out_bResMemory := 1;
    goto L65;

  L65:
    out_i_2 := out_i_2 + 1;
    goto L65_dummy;

  L65_dummy:
    call {:si_unique_call 3426} {:si_old_unique_call 1} out_i_2, out_Tmp_258, out_Tmp_259, out_numberOfBARs, out_Tmp_266, out_Tmp_269, out_Tmp_271, out_bResInterrupt, out_bResPort, out_sdv_162, out_sdv_163, out_Tmp_276, out_Tmp_284, out_bResMemory := NICMapHWResources#0_loop_L37(out_i_2, out_Tmp_258, out_Tmp_259, out_numberOfBARs, out_Tmp_266, out_Tmp_269, out_Tmp_271, out_bResInterrupt, out_bResPort, out_sdv_162, out_sdv_163, out_Tmp_276, in_partialResourceListTranslated, in_resourceTrans, out_Tmp_284, out_bResMemory, in_FdoData_29);
    return;

  anon59_Then:
    assume {:partition} out_numberOfBARs != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} out_numberOfBARs == 2;
    out_Tmp_269 := strConst__li2bpl95;
    call {:si_unique_call 3422} DebugPrint(6, 1, out_Tmp_269);
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    havoc vslice_dummy_var_134;
    havoc vslice_dummy_var_135;
    call {:si_unique_call 3423} out_sdv_163 := MmMapIoSpace(vslice_dummy_var_134, vslice_dummy_var_135, 0);
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto anon61_Else;

  anon61_Else:
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    out_bResPort := 1;
    goto L65;

  anon47_Then:
    assume {:partition} out_numberOfBARs != 2;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} out_numberOfBARs == 3;
    out_Tmp_271 := strConst__li2bpl97;
    call {:si_unique_call 3418} DebugPrint(6, 1, out_Tmp_271);
    goto L65;

  anon56_Then:
    out_Tmp_258 := strConst__li2bpl91;
    call {:si_unique_call 3419} DebugPrint(6, 1, out_Tmp_258);
    goto L65;

  anon57_Then:
    out_bResInterrupt := 1;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto L102;

  L102:
    out_Tmp_266 := strConst__li2bpl98;
    call {:si_unique_call 3420} DebugPrint(6, 1, out_Tmp_266);
    goto L65;

  anon58_Then:
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto L102;

  anon46_Then:
    out_numberOfBARs := out_numberOfBARs + 1;
    out_Tmp_284 := strConst__li2bpl103;
    call {:si_unique_call 3421} DebugPrint(6, 1, out_Tmp_284);
    goto anon49_Then;

  anon49_Then:
    assume {:partition} out_numberOfBARs == 2;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    out_bResPort := 1;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto L65;
}



procedure {:LoopProcedure} NICMapHWResources#0_loop_L37(in_i_2: int, in_Tmp_258: int, in_Tmp_259: int, in_numberOfBARs: int, in_Tmp_266: int, in_Tmp_269: int, in_Tmp_271: int, in_bResInterrupt: int, in_bResPort: int, in_sdv_162: int, in_sdv_163: int, in_Tmp_276: int, in_partialResourceListTranslated: int, in_resourceTrans: int, in_Tmp_284: int, in_bResMemory: int, in_FdoData_29: int) returns (out_i_2: int, out_Tmp_258: int, out_Tmp_259: int, out_numberOfBARs: int, out_Tmp_266: int, out_Tmp_269: int, out_Tmp_271: int, out_bResInterrupt: int, out_bResPort: int, out_sdv_162: int, out_sdv_163: int, out_Tmp_276: int, out_Tmp_284: int, out_bResMemory: int);
  modifies alloc;
  free ensures {:va_keep} out_bResInterrupt == 1 || out_bResInterrupt == in_bResInterrupt;
  free ensures {:va_keep} out_bResPort == 1 || out_bResPort == in_bResPort;
  free ensures {:va_keep} out_bResMemory == 1 || out_bResMemory == in_bResMemory;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICMapHWResources#1_loop_L37(in_i_2: int, in_Tmp_258: int, in_Tmp_259: int, in_numberOfBARs: int, in_Tmp_266: int, in_Tmp_269: int, in_Tmp_271: int, in_bResInterrupt: int, in_bResPort: int, in_sdv_162: int, in_sdv_163: int, in_Tmp_276: int, in_partialResourceListTranslated: int, in_resourceTrans: int, in_Tmp_284: int, in_bResMemory: int, in_FdoData_29: int) returns (out_i_2: int, out_Tmp_258: int, out_Tmp_259: int, out_numberOfBARs: int, out_Tmp_266: int, out_Tmp_269: int, out_Tmp_271: int, out_bResInterrupt: int, out_bResPort: int, out_sdv_162: int, out_sdv_163: int, out_Tmp_276: int, out_Tmp_284: int, out_bResMemory: int)
{
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;

  entry:
    out_i_2, out_Tmp_258, out_Tmp_259, out_numberOfBARs, out_Tmp_266, out_Tmp_269, out_Tmp_271, out_bResInterrupt, out_bResPort, out_sdv_162, out_sdv_163, out_Tmp_276, out_Tmp_284, out_bResMemory := in_i_2, in_Tmp_258, in_Tmp_259, in_numberOfBARs, in_Tmp_266, in_Tmp_269, in_Tmp_271, in_bResInterrupt, in_bResPort, in_sdv_162, in_sdv_163, in_Tmp_276, in_Tmp_284, in_bResMemory;
    goto L37, exit;

  exit:
    return;

  L37:
    assume {:nonnull} in_partialResourceListTranslated != 0;
    assume in_partialResourceListTranslated > 0;
    goto anon44_Else;

  anon44_Else:
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    out_numberOfBARs := out_numberOfBARs + 1;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} out_numberOfBARs == 1;
    out_Tmp_259 := strConst__li2bpl92;
    call {:si_unique_call 3434} DebugPrint(6, 1, out_Tmp_259);
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    havoc vslice_dummy_var_139;
    call {:si_unique_call 3435} out_sdv_162 := MmMapIoSpace(vslice_dummy_var_139, 24, 0);
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto anon60_Else;

  anon60_Else:
    out_Tmp_276 := strConst__li2bpl94;
    call {:si_unique_call 3427} DebugPrint(6, 1, out_Tmp_276);
    out_bResMemory := 1;
    goto L65;

  L65:
    out_i_2 := out_i_2 + 1;
    goto L65_dummy;

  L65_dummy:
    call {:si_unique_call 3436} {:si_old_unique_call 1} out_i_2, out_Tmp_258, out_Tmp_259, out_numberOfBARs, out_Tmp_266, out_Tmp_269, out_Tmp_271, out_bResInterrupt, out_bResPort, out_sdv_162, out_sdv_163, out_Tmp_276, out_Tmp_284, out_bResMemory := NICMapHWResources#1_loop_L37(out_i_2, out_Tmp_258, out_Tmp_259, out_numberOfBARs, out_Tmp_266, out_Tmp_269, out_Tmp_271, out_bResInterrupt, out_bResPort, out_sdv_162, out_sdv_163, out_Tmp_276, in_partialResourceListTranslated, in_resourceTrans, out_Tmp_284, out_bResMemory, in_FdoData_29);
    return;

  anon59_Then:
    assume {:partition} out_numberOfBARs != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} out_numberOfBARs == 2;
    out_Tmp_269 := strConst__li2bpl95;
    call {:si_unique_call 3432} DebugPrint(6, 1, out_Tmp_269);
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    havoc vslice_dummy_var_137;
    havoc vslice_dummy_var_138;
    call {:si_unique_call 3433} out_sdv_163 := MmMapIoSpace(vslice_dummy_var_137, vslice_dummy_var_138, 0);
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto anon61_Else;

  anon61_Else:
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    out_bResPort := 1;
    goto L65;

  anon47_Then:
    assume {:partition} out_numberOfBARs != 2;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} out_numberOfBARs == 3;
    out_Tmp_271 := strConst__li2bpl97;
    call {:si_unique_call 3428} DebugPrint(6, 1, out_Tmp_271);
    goto L65;

  anon56_Then:
    out_Tmp_258 := strConst__li2bpl91;
    call {:si_unique_call 3429} DebugPrint(6, 1, out_Tmp_258);
    goto L65;

  anon57_Then:
    out_bResInterrupt := 1;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto L102;

  L102:
    out_Tmp_266 := strConst__li2bpl98;
    call {:si_unique_call 3430} DebugPrint(6, 1, out_Tmp_266);
    goto L65;

  anon58_Then:
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto L102;

  anon46_Then:
    out_numberOfBARs := out_numberOfBARs + 1;
    out_Tmp_284 := strConst__li2bpl103;
    call {:si_unique_call 3431} DebugPrint(6, 1, out_Tmp_284);
    goto anon49_Then;

  anon49_Then:
    assume {:partition} out_numberOfBARs == 2;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_resourceTrans != 0;
    assume in_resourceTrans > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    out_bResPort := 1;
    assume {:nonnull} in_FdoData_29 != 0;
    assume in_FdoData_29 > 0;
    goto L65;
}



procedure {:LoopProcedure} NICMapHWResources#1_loop_L37(in_i_2: int, in_Tmp_258: int, in_Tmp_259: int, in_numberOfBARs: int, in_Tmp_266: int, in_Tmp_269: int, in_Tmp_271: int, in_bResInterrupt: int, in_bResPort: int, in_sdv_162: int, in_sdv_163: int, in_Tmp_276: int, in_partialResourceListTranslated: int, in_resourceTrans: int, in_Tmp_284: int, in_bResMemory: int, in_FdoData_29: int) returns (out_i_2: int, out_Tmp_258: int, out_Tmp_259: int, out_numberOfBARs: int, out_Tmp_266: int, out_Tmp_269: int, out_Tmp_271: int, out_bResInterrupt: int, out_bResPort: int, out_sdv_162: int, out_sdv_163: int, out_Tmp_276: int, out_Tmp_284: int, out_bResMemory: int);
  modifies alloc;
  free ensures {:va_keep} out_bResInterrupt == 1 || out_bResInterrupt == in_bResInterrupt;
  free ensures {:va_keep} out_bResPort == 1 || out_bResPort == in_bResPort;
  free ensures {:va_keep} out_bResMemory == 1 || out_bResMemory == in_bResMemory;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



procedure fakeMain() returns (Tmp_940: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:entrypoint} fakeMain() returns (Tmp_940: int, dup_assertVar: bool)
{

  start:
    call Tmp_940, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


