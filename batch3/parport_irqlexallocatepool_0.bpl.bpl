var {:scalar} alloc: int;

var {:scalar} sdv_irql_previous_5: int;

var {:scalar} sdv_irql_previous_2: int;

var {:scalar} sdv_irql_current: int;

var {:scalar} sdv_irql_previous: int;

var {:scalar} sdv_irql_previous_4: int;

var {:scalar} sdv_irql_previous_3: int;

var {:scalar} yogi_error: int;

var {:scalar} Mem_T.CancelIrql__IRP: [int]int;

var {:scalar} Mem_T.INT4: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const RegistryPath: int;

const Dot3_EndOfFrame2: int;

const Dot3_StartOfFrame1: int;

const Dot3_EndOfFrame1: int;

const Dot3_StartOfFrame2: int;

const PptWmiAllocFreeCountsGuid: int;

const GUID_DEVINTERFACE_PARALLEL: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_pv1: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_kdpc: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_driver_object: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const KeTickCount: int;

const SppNoRaiseIrql: int;

const AllowAsserts: int;

const ParEnableLegacyZip: int;

const PhysicalZero: int;

const AcquirePortTimeout: int;

const PowerStateIsAC: int;

const DbgMaskFdo: int;

const DbgMaskDaisyChain1: int;

const DbgMaskEndOfChain: int;

const DbgMaskRawPort: int;

const DbgMaskDaisyChain0: int;

const DbgMaskNoDevice: int;

const DbgMaskLegacyZip: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_DEVINTERFACE_PARCLASS: int;

const WarmPollPeriod: int;

const PptDot3Retries: int;

const Trace: int;

const DefaultModes: int;

const Break: int;

const ParLegacyZipPseudoId: int;

const sdv_cancelFptr: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const GUID_QUERY_CRASHDUMP_FUNCTIONS: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_1394: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_BUS_TYPE_ISAPNP: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const GUID_BUS_TYPE_ACPI: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const GUID_BUS_TYPE_EISA: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_IRDA: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_BUS_TYPE_SERENUM: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const GUID_BUS_TYPE_MCA: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_BUS_TYPE_AVC: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USB: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USBPRINT: int;

const GUID_BUS_TYPE_PCI: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const PortInfoReferenceCount: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const GUID_BUS_TYPE_SD: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_HID: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoClose"} PptPdoClose(actual_Pdo: int, actual_Irp: int) returns (Tmp_4: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_4 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoClose"} PptPdoClose(actual_Pdo: int, actual_Irp: int) returns (Tmp_4: int)
{
  var {:scalar} haveShadowBuffer: int;
  var {:pointer} threadObject: int;
  var {:pointer} pdx: int;
  var {:pointer} Tmp_5: int;
  var {:pointer} Pdo: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_0: int;

  anon0:
    Pdo := actual_Pdo;
    Irp := actual_Irp;
    assume {:nonnull} Pdo != 0;
    assume Pdo > 0;
    havoc pdx;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    call {:si_unique_call 1} ExAcquireFastMutex(0);
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    havoc haveShadowBuffer;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    havoc threadObject;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    call {:si_unique_call 2} ExReleaseFastMutex(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} haveShadowBuffer != 0;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    call {:si_unique_call 3} vslice_dummy_var_1 := Queue_Delete(ShadowBuffer__PDO_EXTENSION(pdx));
    goto L19;

  L19:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} threadObject != 0;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L28;

  L28:
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    call {:si_unique_call 4} vslice_dummy_var_2 := KeSetEvent(PauseEvent__PDO_EXTENSION(pdx), 0, 1);
    call {:si_unique_call 5} vslice_dummy_var_3 := KeWaitForSingleObject(0, 6, 0, 0, 0);
    call {:si_unique_call 6} vslice_dummy_var_4 := sdv_ObDereferenceObject(0);
    goto L23;

  L23:
    call {:si_unique_call 7} ExAcquireFastMutex(0);
    call {:si_unique_call 8} Tmp_5 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_5 != 0;
    assume Tmp_5 > 0;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    havoc vslice_dummy_var_0;
    Mem_T.INT4[Tmp_5] := vslice_dummy_var_0;
    call {:si_unique_call 9} vslice_dummy_var_5 := sdv_InterlockedDecrement(Tmp_5);
    assume {:nonnull} Tmp_5 != 0;
    assume Tmp_5 > 0;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    goto L44;

  L44:
    call {:si_unique_call 10} ExReleaseFastMutex(0);
    call {:si_unique_call 11} Tmp_4 := P4CompleteRequest(Irp, 0, 0);
    return;

  anon12_Then:
    goto L44;

  anon11_Then:
    assume {:nonnull} pdx != 0;
    assume pdx > 0;
    call {:si_unique_call 12} vslice_dummy_var_6 := KeReleaseSemaphore(0, 0, 1, 0);
    goto L28;

  anon10_Then:
    assume {:partition} threadObject == 0;
    goto L23;

  anon9_Then:
    assume {:partition} haveShadowBuffer == 0;
    goto L19;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_7: int;

  anon0:
    call {:si_unique_call 13} vslice_dummy_var_7 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptUnload"} PptUnload(actual_DriverObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptUnload"} PptUnload(actual_DriverObject: int)
{
  var {:scalar} sdv_10: int;
  var {:pointer} CurrentDevice: int;
  var {:pointer} sdv_12: int;
  var {:pointer} Extension: int;
  var {:pointer} sdv_13: int;
  var {:pointer} Head: int;
  var {:pointer} DriverObject: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 14} vslice_dummy_var_8 := __HAVOC_malloc(4);
    DriverObject := actual_DriverObject;
    assume {:nonnull} DriverObject != 0;
    assume DriverObject > 0;
    havoc CurrentDevice;
    goto L8;

  L8:
    call {:si_unique_call 15} sdv_10, CurrentDevice, sdv_12, Extension, sdv_13, Head := PptUnload_loop_L8(sdv_10, CurrentDevice, sdv_12, Extension, sdv_13, Head, DriverObject);
    goto L8_last;

  L8_last:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} CurrentDevice != 0;
    assume {:nonnull} CurrentDevice != 0;
    assume CurrentDevice > 0;
    havoc Extension;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 16} PptDisconnectInterrupt(Extension);
    goto L12;

  L12:
    call {:si_unique_call 17} sdv_10, sdv_13, Head := PptUnload_loop_L12(sdv_10, Extension, sdv_13, Head);
    goto L12_last;

  L12_last:
    call {:si_unique_call 28} sdv_10 := sdv_IsListEmpty(0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_10 != 0;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    call {:si_unique_call 18} sdv_ExFreePool(0);
    call {:si_unique_call 19} IoDeleteDevice(0);
    call {:si_unique_call 20} sdv_12 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_12 != 0;
    assume sdv_12 > 0;
    assume {:nonnull} DriverObject != 0;
    assume DriverObject > 0;
    havoc CurrentDevice;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} sdv_10 == 0;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    call {:si_unique_call 21} Head := RemoveHeadList(IsrList__FDO_EXTENSION(Extension));
    call {:si_unique_call 22} sdv_13 := sdv_containing_record(Head, 0);
    call {:si_unique_call 23} sdv_ExFreePool(0);
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon18_Then:
    goto L12;

  anon13_Then:
    assume {:partition} CurrentDevice == 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 24} sdv_ExFreePool(0);
    goto L41;

  L41:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 25} ExUnregisterCallback(0);
    goto L46;

  L46:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 26} vslice_dummy_var_9 := sdv_ObDereferenceObject(0);
    goto L51;

  L51:
    call {:si_unique_call 27} RtlFreeUnicodeString(0);
    return;

  anon17_Then:
    goto L51;

  anon16_Then:
    goto L46;

  anon14_Then:
    goto L41;
}



procedure {:origName "ParMLCECPReset"} ParMLCECPReset(actual_Pdx: int) returns (Tmp_11: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_11 == 0 || Tmp_11 == -1073741643 || Tmp_11 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParMLCECPReset"} ParMLCECPReset(actual_Pdx: int) returns (Tmp_11: int)
{
  var {:scalar} ResetLen: int;
  var {:scalar} Status: int;
  var {:scalar} BytesWritten: int;
  var {:scalar} Tmp_13: int;
  var {:pointer} Pdx: int;
  var vslice_dummy_var_10: int;

  anon0:
    Pdx := actual_Pdx;
    call {:si_unique_call 29} vslice_dummy_var_10 := __HAVOC_malloc(1024);
    Status := 0;
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    havoc ResetLen;
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    Tmp_11 := 0;
    goto L1;

  L1:
    return;

  anon13_Then:
    goto L10;

  L10:
    call {:si_unique_call 30} Status := ParReverseToForward(Pdx);
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    call {:si_unique_call 31} Status := ParSetFwdAddress(Pdx);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Status >= 0;
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    havoc Tmp_13;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Status >= 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BytesWritten == ResetLen;
    assume {:nonnull} Pdx != 0;
    assume Pdx > 0;
    call {:si_unique_call 32} Status := ParSetFwdAddress(Pdx);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Status >= 0;
    Tmp_11 := Status;
    goto L1;

  anon17_Then:
    assume {:partition} 0 > Status;
    Tmp_11 := Status;
    goto L1;

  anon16_Then:
    assume {:partition} BytesWritten != ResetLen;
    goto L32;

  L32:
    Tmp_11 := Status;
    goto L1;

  anon15_Then:
    assume {:partition} 0 > Status;
    goto L32;

  anon14_Then:
    assume {:partition} 0 > Status;
    Tmp_11 := Status;
    goto L1;

  anon18_Then:
    goto L10;
}



procedure {:origName "ParDot3ParseModes"} ParDot3ParseModes(actual_Pdx_1: int, actual_DOT3M: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot3ParseModes"} ParDot3ParseModes(actual_Pdx_1: int, actual_DOT3M: int)
{
  var {:scalar} numValues: int;
  var {:dopa} {:scalar} rev: int;
  var {:dopa} {:scalar} fwd: int;
  var {:scalar} sdv_21: int;
  var {:scalar} sdv_22: int;
  var {:pointer} Pdx_1: int;
  var {:pointer} DOT3M: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_1: int;

  anon0:
    call {:si_unique_call 33} vslice_dummy_var_11 := __HAVOC_malloc(4);
    call {:si_unique_call 34} rev := __HAVOC_malloc(4);
    call {:si_unique_call 35} fwd := __HAVOC_malloc(4);
    Pdx_1 := actual_Pdx_1;
    call {:si_unique_call 36} DOT3M := __HAVOC_malloc(4);
    assume {:nonnull} fwd != 0;
    assume fwd > 0;
    Mem_T.INT4[fwd] := 0;
    assume {:nonnull} rev != 0;
    assume rev > 0;
    Mem_T.INT4[rev] := 0;
    assume {:nonnull} DOT3M != 0;
    assume DOT3M > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DOT3M != 0;
    assume DOT3M > 0;
    havoc vslice_dummy_var_1;
    call {:si_unique_call 37} numValues := StringCountValues(vslice_dummy_var_1, 44);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} numValues != 2;
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} numValues == 2;
    call {:si_unique_call 38} sdv_21 := String2Num(DOT3M, 44, fwd);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_21 != 0;
    goto L23;

  L23:
    call {:si_unique_call 39} sdv_22 := String2Num(DOT3M, 44, rev);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_22 == 0;
    assume {:nonnull} rev != 0;
    assume rev > 0;
    Mem_T.INT4[rev] := 2040;
    goto L8;

  L8:
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    assume {:nonnull} fwd != 0;
    assume fwd > 0;
    assume {:nonnull} Pdx_1 != 0;
    assume Pdx_1 > 0;
    assume {:nonnull} rev != 0;
    assume rev > 0;
    goto L1;

  anon11_Then:
    assume {:partition} sdv_22 != 0;
    goto L8;

  anon10_Then:
    assume {:partition} sdv_21 == 0;
    assume {:nonnull} fwd != 0;
    assume fwd > 0;
    Mem_T.INT4[fwd] := 992;
    goto L23;

  anon12_Then:
    goto L8;
}



procedure {:origName "ParDot3Connect"} ParDot3Connect(actual_Pdx_2: int) returns (Tmp_16: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot3Connect"} ParDot3Connect(actual_Pdx_2: int) returns (Tmp_16: int)
{
  var {:dopa} {:scalar} ParResetByteDefault: int;
  var {:scalar} Tmp_17: int;
  var {:pointer} paramTable: int;
  var {:scalar} Dot3NameSize: int;
  var {:scalar} Tmp_19: int;
  var {:dopa} {:scalar} ParResetByteCount: int;
  var {:scalar} Tmp_21: int;
  var {:scalar} Tmp_22: int;
  var {:scalar} Status_1: int;
  var {:dopa} {:scalar} ParResetByteCountDefault: int;
  var {:scalar} Tmp_24: int;
  var {:dopa} {:scalar} ParRevSkip: int;
  var {:pointer} sdv_26: int;
  var {:dopa} {:scalar} ParResetByte: int;
  var {:scalar} Tmp_25: int;
  var {:dopa} {:scalar} ParResetChannelDefault: int;
  var {:scalar} Tmp_26: int;
  var {:dopa} {:scalar} ParFwdSkip: int;
  var {:scalar} Tmp_27: int;
  var {:scalar} Tmp_28: int;
  var {:dopa} {:scalar} ParSkipDefault: int;
  var {:pointer} buffer: int;
  var {:scalar} Tmp_30: int;
  var {:pointer} resultString: int;
  var {:scalar} sdv_33: int;
  var {:scalar} bConsiderEppDangerous: int;
  var {:dopa} {:scalar} ParResetChannel: int;
  var {:scalar} Dot3Key: int;
  var {:scalar} status: int;
  var {:scalar} Tmp_31: int;
  var {:dopa} {:scalar} bufferLength: int;
  var {:pointer} Pdx_2: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;

  anon0:
    call {:si_unique_call 40} ParResetByteDefault := __HAVOC_malloc(4);
    call {:si_unique_call 41} vslice_dummy_var_12 := __HAVOC_malloc(12);
    call {:si_unique_call 42} ParResetByteCount := __HAVOC_malloc(4);
    call {:si_unique_call 43} ParResetByteCountDefault := __HAVOC_malloc(4);
    call {:si_unique_call 44} vslice_dummy_var_13 := __HAVOC_malloc(12);
    call {:si_unique_call 45} ParRevSkip := __HAVOC_malloc(4);
    call {:si_unique_call 46} ParResetByte := __HAVOC_malloc(4);
    call {:si_unique_call 47} ParResetChannelDefault := __HAVOC_malloc(4);
    call {:si_unique_call 48} ParFwdSkip := __HAVOC_malloc(4);
    call {:si_unique_call 49} ParSkipDefault := __HAVOC_malloc(4);
    call {:si_unique_call 50} ParResetChannel := __HAVOC_malloc(4);
    call {:si_unique_call 51} Dot3Key := __HAVOC_malloc(12);
    call {:si_unique_call 52} bufferLength := __HAVOC_malloc(4);
    Pdx_2 := actual_Pdx_2;
    call {:si_unique_call 53} paramTable := __HAVOC_malloc(168);
    call {:si_unique_call 54} vslice_dummy_var_14 := __HAVOC_malloc(24);
    call {:si_unique_call 55} resultString := __HAVOC_malloc(1024);
    Status_1 := 0;
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    Mem_T.INT4[ParFwdSkip] := 0;
    assume {:nonnull} ParRevSkip != 0;
    assume ParRevSkip > 0;
    Mem_T.INT4[ParRevSkip] := 0;
    assume {:nonnull} ParResetChannel != 0;
    assume ParResetChannel > 0;
    Mem_T.INT4[ParResetChannel] := -1;
    assume {:nonnull} ParResetByteCount != 0;
    assume ParResetByteCount > 0;
    Mem_T.INT4[ParResetByteCount] := 4;
    assume {:nonnull} ParResetByte != 0;
    assume ParResetByte > 0;
    Mem_T.INT4[ParResetByte] := 0;
    assume {:nonnull} ParSkipDefault != 0;
    assume ParSkipDefault > 0;
    Mem_T.INT4[ParSkipDefault] := 0;
    assume {:nonnull} ParResetChannelDefault != 0;
    assume ParResetChannelDefault > 0;
    Mem_T.INT4[ParResetChannelDefault] := -1;
    assume {:nonnull} ParResetByteCountDefault != 0;
    assume ParResetByteCountDefault > 0;
    Mem_T.INT4[ParResetByteCountDefault] := 4;
    assume {:nonnull} ParResetByteDefault != 0;
    assume ParResetByteDefault > 0;
    Mem_T.INT4[ParResetByteDefault] := 0;
    bConsiderEppDangerous := 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    Tmp_16 := -1073741823;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon59_Then:
    call {:si_unique_call 56} ParTerminate(Pdx_2);
    buffer := 0;
    call {:si_unique_call 57} sdv_RtlZeroMemory(0, 256);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    call {:si_unique_call 58} buffer := Par3QueryDeviceId(Pdx_2, 0, 0, bufferLength, 0, 1);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    goto L53;

  L53:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 59} Status_1 := ParPnpGetId(buffer, 0, resultString, 0);
    Tmp_27 := sdv_33;
    call {:si_unique_call 60} StringSubst(resultString, 32, 95, Tmp_27);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Status_1 >= 0;
    call {:si_unique_call 61} sdv_RtlZeroMemory(0, 168);
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    Dot3NameSize := 14;
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    havoc Tmp_24;
    call {:si_unique_call 62} sdv_26 := ExAllocatePoolWithTag(1, Tmp_24, -797810352);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    havoc Tmp_26;
    call {:si_unique_call 63} sdv_RtlZeroMemory(0, Tmp_26);
    call {:si_unique_call 64} status := corral_nondet();
    call {:si_unique_call 65} RtlInitAnsiString(0, 0);
    call {:si_unique_call 66} status := RtlAnsiStringToUnicodeString(0, 0, 1);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status >= 0;
    Tmp_17 := INTDIV(Dot3NameSize, 2) - 1;
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    havoc Mem_T.INT4;
    call {:si_unique_call 67} status := corral_nondet();
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} status >= 0;
    call {:si_unique_call 68} Status_1 := sdv_RtlQueryRegistryValues(2, 0, 0, 0, 0);
    goto L144;

  L144:
    call {:si_unique_call 69} RtlFreeUnicodeString(0);
    goto L135;

  L135:
    assume {:nonnull} Dot3Key != 0;
    assume Dot3Key > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    call {:si_unique_call 70} sdv_ExFreePool(0);
    goto L152;

  L152:
    call {:si_unique_call 71} sdv_ExFreePool(0);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Status_1 >= 0;
    goto L160;

  L160:
    assume {:nonnull} ParRevSkip != 0;
    assume ParRevSkip > 0;
    assume {:nonnull} ParSkipDefault != 0;
    assume ParSkipDefault > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Mem_T.INT4[ParSkipDefault] == Mem_T.INT4[ParRevSkip];
    assume {:nonnull} ParRevSkip != 0;
    assume ParRevSkip > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    havoc vslice_dummy_var_2;
    Mem_T.INT4[ParRevSkip] := vslice_dummy_var_2;
    goto L163;

  L163:
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    assume {:nonnull} ParSkipDefault != 0;
    assume ParSkipDefault > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Mem_T.INT4[ParSkipDefault] == Mem_T.INT4[ParFwdSkip];
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    havoc vslice_dummy_var_3;
    Mem_T.INT4[ParFwdSkip] := vslice_dummy_var_3;
    goto L166;

  L166:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} bConsiderEppDangerous != 0;
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    Mem_T.INT4[ParFwdSkip] := BOR(Mem_T.INT4[ParFwdSkip], BOR(32, 64));
    assume {:nonnull} ParRevSkip != 0;
    assume ParRevSkip > 0;
    Mem_T.INT4[ParRevSkip] := BOR(Mem_T.INT4[ParRevSkip], BOR(32, 64));
    goto L167;

  L167:
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    Tmp_25 := Mem_T.INT4[ParFwdSkip];
    assume {:nonnull} ParRevSkip != 0;
    assume ParRevSkip > 0;
    Tmp_21 := Mem_T.INT4[ParRevSkip];
    call {:si_unique_call 72} Status_1 := IeeeNegotiateBestMode(Pdx_2, Tmp_21, Tmp_25);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Status_1 >= 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} ParResetChannel != 0;
    assume ParResetChannel > 0;
    assume {:nonnull} ParResetChannelDefault != 0;
    assume ParResetChannelDefault > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[ParResetChannel] != Mem_T.INT4[ParResetChannelDefault];
    assume {:nonnull} ParResetByte != 0;
    assume ParResetByte > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} ParResetByteCount != 0;
    assume ParResetByteCount > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} ParResetChannel != 0;
    assume ParResetChannel > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} Mem_T.INT4[ParResetChannel] == 300;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto L179;

  L179:
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    call {:si_unique_call 73} Status_1 := ParMLCCompatReset(Pdx_2);
    goto L195;

  L195:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} Status_1 >= 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    havoc Tmp_19;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    havoc Tmp_31;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    havoc Tmp_28;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_16 := -1073741823;
    goto L1;

  anon86_Then:
    goto L198;

  L198:
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    havoc Tmp_30;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    havoc Tmp_22;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto L202;

  L202:
    Tmp_16 := Status_1;
    goto L1;

  anon77_Then:
    goto L202;

  anon85_Then:
    goto L198;

  anon84_Then:
    goto L198;

  anon76_Then:
    assume {:partition} 0 > Status_1;
    Tmp_16 := Status_1;
    goto L1;

  anon75_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    call {:si_unique_call 74} Status_1 := ParMLCECPReset(Pdx_2);
    goto L195;

  anon73_Then:
    call {:si_unique_call 75} Status_1 := ParSetFwdAddress(Pdx_2);
    goto L195;

  anon83_Then:
    assume {:partition} Mem_T.INT4[ParResetChannel] != 300;
    assume {:nonnull} ParResetChannel != 0;
    assume ParResetChannel > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto L179;

  anon74_Then:
    assume {:partition} Mem_T.INT4[ParResetChannel] == Mem_T.INT4[ParResetChannelDefault];
    goto L179;

  anon82_Then:
    goto L179;

  anon72_Then:
    assume {:partition} 0 > Status_1;
    Tmp_16 := Status_1;
    goto L1;

  anon71_Then:
    assume {:partition} bConsiderEppDangerous == 0;
    goto L167;

  anon70_Then:
    assume {:partition} Mem_T.INT4[ParSkipDefault] != Mem_T.INT4[ParFwdSkip];
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto L166;

  anon69_Then:
    assume {:partition} Mem_T.INT4[ParSkipDefault] != Mem_T.INT4[ParRevSkip];
    assume {:nonnull} ParRevSkip != 0;
    assume ParRevSkip > 0;
    assume {:nonnull} Pdx_2 != 0;
    assume Pdx_2 > 0;
    goto L163;

  anon68_Then:
    assume {:partition} 0 > Status_1;
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    assume {:nonnull} ParSkipDefault != 0;
    assume ParSkipDefault > 0;
    Mem_T.INT4[ParFwdSkip] := Mem_T.INT4[ParSkipDefault];
    assume {:nonnull} ParFwdSkip != 0;
    assume ParFwdSkip > 0;
    assume {:nonnull} ParRevSkip != 0;
    assume ParRevSkip > 0;
    Mem_T.INT4[ParRevSkip] := Mem_T.INT4[ParFwdSkip];
    bConsiderEppDangerous := 1;
    goto L160;

  anon66_Then:
    goto L152;

  anon67_Then:
    assume {:partition} 0 > status;
    goto L144;

  anon65_Then:
    assume {:partition} 0 > status;
    goto L135;

  anon81_Then:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 76} sdv_ExFreePool(0);
    goto L210;

  L210:
    Tmp_16 := -1073741823;
    goto L1;

  anon64_Then:
    assume {:partition} buffer == 0;
    goto L210;

  anon80_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:partition} 0 > Status_1;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 77} sdv_ExFreePool(0);
    goto L214;

  L214:
    Tmp_16 := -1073741823;
    goto L1;

  anon63_Then:
    assume {:partition} buffer == 0;
    goto L214;

  anon61_Then:
    assume {:partition} buffer == 0;
    Tmp_16 := -1073741823;
    goto L1;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    call {:si_unique_call 78} buffer := Par3QueryDeviceId(Pdx_2, 0, 0, bufferLength, 0, 0);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    goto L53;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    Tmp_16 := -1073741823;
    goto L1;
}



procedure {:origName "ParDot3Write"} ParDot3Write(actual_Pdx_3: int, actual_Buffer: int, actual_BufferSize: int, actual_BytesTransferred: int) returns (Tmp_32: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot3Write"} ParDot3Write(actual_Pdx_3: int, actual_Buffer: int, actual_BufferSize: int, actual_BytesTransferred: int) returns (Tmp_32: int)
{
  var {:scalar} scrapLow: int;
  var {:scalar} sum: int;
  var {:dopa} {:scalar} scrap2: int;
  var {:scalar} dataLengthMinusOne: int;
  var {:scalar} Status_2: int;
  var {:scalar} pid: int;
  var {:scalar} bytesToWrite: int;
  var {:scalar} frameBytesTransferred: int;
  var {:scalar} checkSum: int;
  var {:scalar} scrap1: int;
  var {:scalar} scrapHigh: int;
  var {:pointer} p: int;
  var {:pointer} Pdx_3: int;
  var {:scalar} BufferSize: int;
  var {:pointer} BytesTransferred: int;

  anon0:
    call {:si_unique_call 79} scrap2 := __HAVOC_malloc(4);
    Pdx_3 := actual_Pdx_3;
    BufferSize := actual_BufferSize;
    BytesTransferred := actual_BytesTransferred;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} 1 > BufferSize;
    goto L13;

  L13:
    Tmp_32 := -1073741811;
    goto L1;

  L1:
    return;

  anon51_Then:
    assume {:partition} BufferSize >= 1;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BufferSize <= 65536;
    bytesToWrite := 1;
    frameBytesTransferred := 0;
    goto L16;

  L16:
    call {:si_unique_call 80} ParDot3Write_loop_L16(Status_2, bytesToWrite, frameBytesTransferred, Pdx_3);
    goto L16_last;

  L16_last:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} Status_2 >= 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} frameBytesTransferred == bytesToWrite;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Status_2 >= 0;
    bytesToWrite := 1;
    frameBytesTransferred := 0;
    goto L26;

  L26:
    call {:si_unique_call 81} ParDot3Write_loop_L26(Status_2, bytesToWrite, frameBytesTransferred, Pdx_3);
    goto L26_last;

  L26_last:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Status_2 >= 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} frameBytesTransferred == bytesToWrite;
    goto L31;

  L31:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} Status_2 >= 0;
    bytesToWrite := 2;
    frameBytesTransferred := 0;
    goto L36;

  L36:
    call {:si_unique_call 82} ParDot3Write_loop_L36(Status_2, bytesToWrite, frameBytesTransferred, Pdx_3);
    goto L36_last;

  L36_last:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} Status_2 >= 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} frameBytesTransferred == bytesToWrite;
    goto L41;

  L41:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Status_2 >= 0;
    bytesToWrite := 2;
    frameBytesTransferred := 0;
    scrap1 := BufferSize - 1;
    scrapLow := BAND(scrap1, BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128));
    call {:si_unique_call 83} scrapHigh := corral_nondet();
    p := scrap2;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := scrapHigh;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := scrapLow;
    goto L52;

  L52:
    call {:si_unique_call 84} ParDot3Write_loop_L52(Status_2, bytesToWrite, frameBytesTransferred, Pdx_3);
    goto L52_last;

  L52_last:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Status_2 >= 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} frameBytesTransferred == bytesToWrite;
    goto L57;

  L57:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Status_2 >= 0;
    bytesToWrite := 2;
    frameBytesTransferred := 0;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    havoc pid;
    dataLengthMinusOne := BufferSize - 1;
    sum := pid + dataLengthMinusOne;
    goto L69;

  L69:
    call {:si_unique_call 85} sum := ParDot3Write_loop_L69(sum);
    goto L69_last;

  L69_last:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 86} sum := corral_nondet();
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    assume false;
    return;

  anon65_Then:
    checkSum := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), BNOT(sum));
    scrap1 := checkSum;
    scrapLow := BAND(scrap1, BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128));
    call {:si_unique_call 87} scrapHigh := corral_nondet();
    p := scrap2;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := scrapHigh;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := scrapLow;
    goto L79;

  L79:
    call {:si_unique_call 88} ParDot3Write_loop_L79(Status_2, bytesToWrite, frameBytesTransferred, Pdx_3);
    goto L79_last;

  L79_last:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Status_2 >= 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} frameBytesTransferred == bytesToWrite;
    goto L84;

  L84:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Status_2 >= 0;
    bytesToWrite := 1;
    frameBytesTransferred := 0;
    goto L95;

  L95:
    call {:si_unique_call 89} ParDot3Write_loop_L95(Status_2, bytesToWrite, frameBytesTransferred, Pdx_3);
    goto L95_last;

  L95_last:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Status_2 >= 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} frameBytesTransferred == bytesToWrite;
    goto L100;

  L100:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Status_2 >= 0;
    bytesToWrite := 1;
    frameBytesTransferred := 0;
    goto L105;

  L105:
    call {:si_unique_call 90} ParDot3Write_loop_L105(Status_2, bytesToWrite, frameBytesTransferred, Pdx_3);
    goto L105_last;

  L105_last:
    assume {:nonnull} Pdx_3 != 0;
    assume Pdx_3 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Status_2 >= 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} frameBytesTransferred == bytesToWrite;
    goto L110;

  L110:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Status_2 < 0;
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := 0;
    Tmp_32 := Status_2;
    goto L1;

  anon74_Then:
    assume {:partition} 0 <= Status_2;
    goto L92;

  L92:
    Tmp_32 := Status_2;
    goto L1;

  anon75_Then:
    assume {:partition} frameBytesTransferred != bytesToWrite;
    goto anon75_Then_dummy;

  anon75_Then_dummy:
    assume false;
    return;

  anon73_Then:
    assume {:partition} 0 > Status_2;
    goto L110;

  anon71_Then:
    assume {:partition} 0 > Status_2;
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := 0;
    Tmp_32 := Status_2;
    goto L1;

  anon72_Then:
    assume {:partition} frameBytesTransferred != bytesToWrite;
    goto anon72_Then_dummy;

  anon72_Then_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:partition} 0 > Status_2;
    goto L100;

  anon69_Then:
    assume {:partition} 0 > Status_2;
    goto L92;

  anon67_Then:
    assume {:partition} 0 > Status_2;
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := 0;
    Tmp_32 := Status_2;
    goto L1;

  anon68_Then:
    assume {:partition} frameBytesTransferred != bytesToWrite;
    goto anon68_Then_dummy;

  anon68_Then_dummy:
    assume false;
    return;

  anon66_Then:
    assume {:partition} 0 > Status_2;
    goto L84;

  anon63_Then:
    assume {:partition} 0 > Status_2;
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := 0;
    Tmp_32 := Status_2;
    goto L1;

  anon64_Then:
    assume {:partition} frameBytesTransferred != bytesToWrite;
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} 0 > Status_2;
    goto L57;

  anon60_Then:
    assume {:partition} 0 > Status_2;
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := 0;
    Tmp_32 := Status_2;
    goto L1;

  anon61_Then:
    assume {:partition} frameBytesTransferred != bytesToWrite;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon59_Then:
    assume {:partition} 0 > Status_2;
    goto L41;

  anon57_Then:
    assume {:partition} 0 > Status_2;
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := 0;
    Tmp_32 := Status_2;
    goto L1;

  anon58_Then:
    assume {:partition} frameBytesTransferred != bytesToWrite;
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    assume false;
    return;

  anon56_Then:
    assume {:partition} 0 > Status_2;
    goto L31;

  anon54_Then:
    assume {:partition} 0 > Status_2;
    assume {:nonnull} BytesTransferred != 0;
    assume BytesTransferred > 0;
    Mem_T.INT4[BytesTransferred] := 0;
    Tmp_32 := Status_2;
    goto L1;

  anon55_Then:
    assume {:partition} frameBytesTransferred != bytesToWrite;
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    assume false;
    return;

  anon53_Then:
    assume {:partition} 0 > Status_2;
    goto L21;

  anon52_Then:
    assume {:partition} 65536 < BufferSize;
    goto L13;
}



procedure {:origName "ParMLCCreateObject"} ParMLCCreateObject(actual_Pdx_4: int, actual_CMDField: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParMLCCreateObject"} ParMLCCreateObject(actual_Pdx_4: int, actual_CMDField: int)
{
  var {:pointer} Pdx_4: int;
  var {:pointer} CMDField: int;
  var vslice_dummy_var_15: int;

  anon0:
    call {:si_unique_call 91} vslice_dummy_var_15 := __HAVOC_malloc(4);
    Pdx_4 := actual_Pdx_4;
    CMDField := actual_CMDField;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} CMDField != 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    assume {:nonnull} Pdx_4 != 0;
    assume Pdx_4 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} CMDField == 0;
    goto L1;
}



procedure {:origName "ParMLCCompatReset"} ParMLCCompatReset(actual_Pdx_5: int) returns (Tmp_37: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} Tmp_37 == 0 || Tmp_37 == -1073741536 || Tmp_37 == 15 || Tmp_37 == 17 || Tmp_37 == -1073741667 || Tmp_37 == 16 || Tmp_37 == 14;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParMLCCompatReset"} ParMLCCompatReset(actual_Pdx_5: int) returns (Tmp_37: int)
{
  var {:pointer} Reset_1: int;
  var {:scalar} ResetLen_1: int;
  var {:scalar} Status_3: int;
  var {:dopa} {:scalar} BytesWritten_1: int;
  var {:pointer} Pdx_5: int;
  var boogieTmp: int;

  anon0:
    call {:si_unique_call 92} Reset_1 := __HAVOC_malloc(4);
    call {:si_unique_call 93} BytesWritten_1 := __HAVOC_malloc(4);
    Pdx_5 := actual_Pdx_5;
    assume {:nonnull} Reset_1 != 0;
    assume Reset_1 > 0;
    call {:si_unique_call 94} boogieTmp := __HAVOC_malloc(1024);
    Status_3 := 0;
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    havoc ResetLen_1;
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Pdx_5 != 0;
    assume Pdx_5 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_37 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    goto L10;

  L10:
    call {:si_unique_call 95} ParTerminate(Pdx_5);
    call {:si_unique_call 96} Status_3 := SppWrite(Pdx_5, Reset_1, ResetLen_1, BytesWritten_1);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Status_3 >= 0;
    assume {:nonnull} BytesWritten_1 != 0;
    assume BytesWritten_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[BytesWritten_1] == ResetLen_1;
    Tmp_37 := Status_3;
    goto L1;

  anon11_Then:
    assume {:partition} Mem_T.INT4[BytesWritten_1] != ResetLen_1;
    goto L24;

  L24:
    Tmp_37 := Status_3;
    goto L1;

  anon10_Then:
    assume {:partition} 0 > Status_3;
    goto L24;

  anon12_Then:
    goto L10;
}



procedure {:origName "ParDot3CreateObject"} ParDot3CreateObject(actual_Pdx_6: int, actual_DOT3DL: int, actual_DOT3C: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot3CreateObject"} ParDot3CreateObject(actual_Pdx_6: int, actual_DOT3DL: int, actual_DOT3C: int)
{
  var {:scalar} sdv_46: int;
  var {:dopa} {:scalar} pid_1: int;
  var {:dopa} {:scalar} dataChannel: int;
  var {:scalar} sdv_47: int;
  var {:pointer} Pdx_6: int;
  var {:pointer} DOT3DL: int;
  var {:pointer} DOT3C: int;
  var vslice_dummy_var_16: int;

  anon0:
    call {:si_unique_call 97} pid_1 := __HAVOC_malloc(4);
    call {:si_unique_call 98} dataChannel := __HAVOC_malloc(4);
    call {:si_unique_call 99} vslice_dummy_var_16 := __HAVOC_malloc(4);
    Pdx_6 := actual_Pdx_6;
    call {:si_unique_call 100} DOT3DL := __HAVOC_malloc(4);
    call {:si_unique_call 101} DOT3C := __HAVOC_malloc(4);
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    assume {:nonnull} DOT3DL != 0;
    assume DOT3DL > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} pid_1 != 0;
    assume pid_1 > 0;
    Mem_T.INT4[pid_1] := 645;
    call {:si_unique_call 102} sdv_46 := String2Num(DOT3DL, 44, dataChannel);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_46 != 0;
    goto L15;

  L15:
    assume {:nonnull} DOT3C != 0;
    assume DOT3C > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 103} sdv_47 := String2Num(DOT3C, 44, pid_1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_47 == 0;
    assume {:nonnull} pid_1 != 0;
    assume pid_1 > 0;
    Mem_T.INT4[pid_1] := 645;
    goto L16;

  L16:
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    assume {:nonnull} dataChannel != 0;
    assume dataChannel > 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    assume {:nonnull} pid_1 != 0;
    assume pid_1 > 0;
    assume {:nonnull} Pdx_6 != 0;
    assume Pdx_6 > 0;
    goto L6;

  L6:
    return;

  anon11_Then:
    assume {:partition} sdv_47 != 0;
    goto L16;

  anon10_Then:
    goto L16;

  anon9_Then:
    assume {:partition} sdv_46 == 0;
    assume {:nonnull} dataChannel != 0;
    assume dataChannel > 0;
    Mem_T.INT4[dataChannel] := 77;
    goto L15;

  anon12_Then:
    goto L6;
}



procedure {:origName "_sdv_init43"} _sdv_init43();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init43"} _sdv_init43()
{
  var vslice_dummy_var_17: int;

  anon0:
    call {:si_unique_call 104} vslice_dummy_var_17 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    assume Dot3_StartOfFrame1 == 85;
    assume Dot3_StartOfFrame2 == 170;
    assume Dot3_EndOfFrame1 == 0;
    assume Dot3_EndOfFrame2 == 255;
    return;
}



procedure {:origName "ParDot3Read"} ParDot3Read(actual_Pdx_7: int, actual_Buffer_1: int, actual_BufferSize_1: int, actual_BytesTransferred_1: int) returns (Tmp_43: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot3Read"} ParDot3Read(actual_Pdx_7: int, actual_Buffer_1: int, actual_BufferSize_1: int, actual_BytesTransferred_1: int) returns (Tmp_43: int)
{
  var {:scalar} sum_1: int;
  var {:scalar} Status_4: int;
  var {:scalar} pid_2: int;
  var {:scalar} checkSum_1: int;
  var {:scalar} bytesToRead: int;
  var {:scalar} Dot3CheckSum: int;
  var {:scalar} usScrap1: int;
  var {:scalar} bytesTransferred: int;
  var {:pointer} ucScrap2: int;
  var {:scalar} Dot3DataLen: int;
  var {:scalar} ucScrap1: int;
  var {:pointer} Pdx_7: int;
  var {:scalar} BufferSize_1: int;
  var {:pointer} BytesTransferred_1: int;

  anon0:
    Pdx_7 := actual_Pdx_7;
    BufferSize_1 := actual_BufferSize_1;
    BytesTransferred_1 := actual_BytesTransferred_1;
    call {:si_unique_call 105} ucScrap2 := __HAVOC_malloc(8);
    bytesToRead := 1;
    bytesTransferred := 0;
    goto L13;

  L13:
    call {:si_unique_call 106} ParDot3Read_loop_L13(Status_4, bytesToRead, bytesTransferred, Pdx_7);
    goto L13_last;

  L13_last:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Status_4 >= 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} bytesTransferred == bytesToRead;
    goto L18;

  L18:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Status_4 >= 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} ucScrap1 == Dot3_StartOfFrame1;
    bytesToRead := 1;
    bytesTransferred := 0;
    goto L24;

  L24:
    call {:si_unique_call 107} ParDot3Read_loop_L24(Status_4, bytesToRead, bytesTransferred, Pdx_7);
    goto L24_last;

  L24_last:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Status_4 >= 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} bytesTransferred == bytesToRead;
    goto L29;

  L29:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Status_4 >= 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} ucScrap1 == Dot3_StartOfFrame2;
    bytesToRead := 2;
    bytesTransferred := 0;
    goto L35;

  L35:
    call {:si_unique_call 108} ParDot3Read_loop_L35(Status_4, bytesToRead, bytesTransferred, Pdx_7);
    goto L35_last;

  L35_last:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Status_4 >= 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} bytesTransferred == bytesToRead;
    goto L40;

  L40:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Status_4 >= 0;
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    bytesToRead := 2;
    bytesTransferred := 0;
    goto L46;

  L46:
    call {:si_unique_call 109} ParDot3Read_loop_L46(Status_4, bytesToRead, bytesTransferred, ucScrap2, Pdx_7);
    goto L46_last;

  L46_last:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Status_4 >= 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} bytesTransferred == bytesToRead;
    goto L52;

  L52:
    call {:si_unique_call 110} Dot3DataLen := corral_nondet();
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Status_4 >= 0;
    bytesToRead := 2;
    bytesTransferred := 0;
    goto L58;

  L58:
    call {:si_unique_call 111} ParDot3Read_loop_L58(Status_4, bytesToRead, bytesTransferred, ucScrap2, Pdx_7);
    goto L58_last;

  L58_last:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Status_4 >= 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} bytesTransferred == bytesToRead;
    goto L64;

  L64:
    call {:si_unique_call 112} Dot3CheckSum := corral_nondet();
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Status_4 >= 0;
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} Status_4 >= 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Dot3DataLen + 1 <= BufferSize_1;
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    havoc pid_2;
    sum_1 := pid_2 + Dot3DataLen + Dot3CheckSum;
    goto L81;

  L81:
    call {:si_unique_call 113} sum_1 := ParDot3Read_loop_L81(sum_1);
    goto L81_last;

  L81_last:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    call {:si_unique_call 114} sum_1 := corral_nondet();
    goto anon79_Else_dummy;

  anon79_Else_dummy:
    assume false;
    return;

  anon79_Then:
    checkSum_1 := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768), BNOT(sum_1));
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} checkSum_1 != 0;
    Tmp_43 := -1073741434;
    goto L1;

  L1:
    return;

  anon90_Then:
    assume {:partition} checkSum_1 == 0;
    bytesToRead := 1;
    bytesTransferred := 0;
    goto L89;

  L89:
    call {:si_unique_call 115} ParDot3Read_loop_L89(Status_4, bytesToRead, bytesTransferred, Pdx_7);
    goto L89_last;

  L89_last:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Status_4 >= 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} bytesTransferred == bytesToRead;
    goto L94;

  L94:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} Status_4 >= 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} ucScrap1 == Dot3_EndOfFrame1;
    bytesToRead := 1;
    bytesTransferred := 0;
    goto L100;

  L100:
    call {:si_unique_call 116} ParDot3Read_loop_L100(Status_4, bytesToRead, bytesTransferred, Pdx_7);
    goto L100_last;

  L100_last:
    assume {:nonnull} Pdx_7 != 0;
    assume Pdx_7 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Status_4 >= 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} bytesTransferred == bytesToRead;
    goto L105;

  L105:
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} Status_4 >= 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} ucScrap1 == Dot3_EndOfFrame2;
    Tmp_43 := Status_4;
    goto L1;

  anon87_Then:
    assume {:partition} ucScrap1 != Dot3_EndOfFrame2;
    goto L107;

  L107:
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := 0;
    Tmp_43 := Status_4;
    goto L1;

  anon85_Then:
    assume {:partition} 0 > Status_4;
    goto L107;

  anon86_Then:
    assume {:partition} bytesTransferred != bytesToRead;
    goto anon86_Then_dummy;

  anon86_Then_dummy:
    assume false;
    return;

  anon84_Then:
    assume {:partition} 0 > Status_4;
    goto L105;

  anon83_Then:
    assume {:partition} ucScrap1 != Dot3_EndOfFrame1;
    goto L96;

  L96:
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := 0;
    Tmp_43 := Status_4;
    goto L1;

  anon81_Then:
    assume {:partition} 0 > Status_4;
    goto L96;

  anon82_Then:
    assume {:partition} bytesTransferred != bytesToRead;
    goto anon82_Then_dummy;

  anon82_Then_dummy:
    assume false;
    return;

  anon80_Then:
    assume {:partition} 0 > Status_4;
    goto L94;

  anon78_Then:
    assume {:partition} BufferSize_1 < Dot3DataLen + 1;
    Tmp_43 := 5;
    goto L1;

  anon77_Then:
    assume {:partition} 0 > Status_4;
    Tmp_43 := Status_4;
    goto L1;

  anon89_Then:
    assume {:partition} 0 > Status_4;
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := 0;
    Tmp_43 := Status_4;
    goto L1;

  anon76_Then:
    assume {:partition} bytesTransferred != bytesToRead;
    goto anon76_Then_dummy;

  anon76_Then_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} 0 > Status_4;
    goto L64;

  anon88_Then:
    assume {:partition} 0 > Status_4;
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := 0;
    Tmp_43 := Status_4;
    goto L1;

  anon74_Then:
    assume {:partition} bytesTransferred != bytesToRead;
    goto anon74_Then_dummy;

  anon74_Then_dummy:
    assume false;
    return;

  anon73_Then:
    assume {:partition} 0 > Status_4;
    goto L52;

  anon72_Then:
    goto L42;

  L42:
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := 0;
    Tmp_43 := Status_4;
    goto L1;

  anon70_Then:
    assume {:partition} 0 > Status_4;
    goto L42;

  anon71_Then:
    assume {:partition} bytesTransferred != bytesToRead;
    goto anon71_Then_dummy;

  anon71_Then_dummy:
    assume false;
    return;

  anon69_Then:
    assume {:partition} 0 > Status_4;
    goto L40;

  anon68_Then:
    assume {:partition} ucScrap1 != Dot3_StartOfFrame2;
    goto L31;

  L31:
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := 0;
    Tmp_43 := Status_4;
    goto L1;

  anon66_Then:
    assume {:partition} 0 > Status_4;
    goto L31;

  anon67_Then:
    assume {:partition} bytesTransferred != bytesToRead;
    goto anon67_Then_dummy;

  anon67_Then_dummy:
    assume false;
    return;

  anon65_Then:
    assume {:partition} 0 > Status_4;
    goto L29;

  anon64_Then:
    assume {:partition} ucScrap1 != Dot3_StartOfFrame1;
    goto L20;

  L20:
    assume {:nonnull} BytesTransferred_1 != 0;
    assume BytesTransferred_1 > 0;
    Mem_T.INT4[BytesTransferred_1] := 0;
    Tmp_43 := Status_4;
    goto L1;

  anon62_Then:
    assume {:partition} 0 > Status_4;
    goto L20;

  anon63_Then:
    assume {:partition} bytesTransferred != bytesToRead;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon61_Then:
    assume {:partition} 0 > Status_4;
    goto L18;
}



procedure {:origName "ParDot4CreateObject"} ParDot4CreateObject(actual_Pdx_8: int, actual_DOT4DL: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot4CreateObject"} ParDot4CreateObject(actual_Pdx_8: int, actual_DOT4DL: int)
{
  var {:scalar} numValues_1: int;
  var {:dopa} {:scalar} ResetByteCount: int;
  var {:dopa} {:scalar} dataChannel_1: int;
  var {:scalar} sdv_57: int;
  var {:scalar} sdv_58: int;
  var {:scalar} sdv_59: int;
  var {:dopa} {:scalar} resetChannel: int;
  var {:pointer} Pdx_8: int;
  var {:pointer} DOT4DL: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_4: int;

  anon0:
    call {:si_unique_call 117} ResetByteCount := __HAVOC_malloc(4);
    call {:si_unique_call 118} dataChannel_1 := __HAVOC_malloc(4);
    call {:si_unique_call 119} vslice_dummy_var_18 := __HAVOC_malloc(4);
    call {:si_unique_call 120} resetChannel := __HAVOC_malloc(4);
    Pdx_8 := actual_Pdx_8;
    call {:si_unique_call 121} DOT4DL := __HAVOC_malloc(4);
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} DOT4DL != 0;
    assume DOT4DL > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} DOT4DL != 0;
    assume DOT4DL > 0;
    havoc vslice_dummy_var_4;
    call {:si_unique_call 122} numValues_1 := StringCountValues(vslice_dummy_var_4, 44);
    call {:si_unique_call 123} sdv_57 := String2Num(DOT4DL, 44, dataChannel_1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_57 != 0;
    goto L19;

  L19:
    call {:si_unique_call 124} sdv_58 := String2Num(DOT4DL, 44, resetChannel);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_58 != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} numValues_1 > 1;
    assume {:nonnull} resetChannel != 0;
    assume resetChannel > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.INT4[resetChannel] == -1;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto L28;

  L28:
    call {:si_unique_call 125} sdv_59 := String2Num(DOT4DL, 0, ResetByteCount);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_59 != 0;
    goto L33;

  L33:
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} dataChannel_1 != 0;
    assume dataChannel_1 > 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} resetChannel != 0;
    assume resetChannel > 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    assume {:nonnull} ResetByteCount != 0;
    assume ResetByteCount > 0;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto L1;

  L1:
    return;

  anon19_Then:
    assume {:partition} sdv_59 == 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} numValues_1 > 2;
    assume {:nonnull} ResetByteCount != 0;
    assume ResetByteCount > 0;
    Mem_T.INT4[ResetByteCount] := 4;
    goto L33;

  anon20_Then:
    assume {:partition} 2 >= numValues_1;
    goto L33;

  anon18_Then:
    assume {:partition} Mem_T.INT4[resetChannel] != -1;
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto L28;

  anon17_Then:
    assume {:partition} 1 >= numValues_1;
    goto L23;

  L23:
    assume {:nonnull} Pdx_8 != 0;
    assume Pdx_8 > 0;
    goto L28;

  anon16_Then:
    assume {:partition} sdv_58 == 0;
    goto L23;

  anon15_Then:
    assume {:partition} sdv_57 == 0;
    assume {:nonnull} dataChannel_1 != 0;
    assume dataChannel_1 > 0;
    Mem_T.INT4[dataChannel_1] := 77;
    goto L19;

  anon21_Then:
    goto L1;
}



procedure {:origName "ParDot3Disconnect"} ParDot3Disconnect(actual_Pdx_9: int) returns (Tmp_50: int);
  free ensures {:va_keep} Tmp_50 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot3Disconnect"} ParDot3Disconnect(actual_Pdx_9: int) returns (Tmp_50: int)
{
  var {:scalar} Tmp_51: int;
  var {:scalar} Tmp_52: int;
  var {:pointer} Pdx_9: int;

  anon0:
    Pdx_9 := actual_Pdx_9;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    havoc Tmp_52;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    havoc Tmp_51;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    goto L4;

  L4:
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    assume {:nonnull} Pdx_9 != 0;
    assume Pdx_9 > 0;
    Tmp_50 := 0;
    return;

  anon3_Then:
    goto L4;
}



procedure {:origName "PptWmiInitWmi"} PptWmiInitWmi(actual_DeviceObject: int) returns (Tmp_54: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_54 == -1073741823 || Tmp_54 == -1073741811 || Tmp_54 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptWmiInitWmi"} PptWmiInitWmi(actual_DeviceObject: int) returns (Tmp_54: int)
{
  var {:pointer} wmiContext: int;
  var {:pointer} devExt: int;
  var {:pointer} DeviceObject: int;

  anon0:
    DeviceObject := actual_DeviceObject;
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc devExt;
    assume {:nonnull} devExt != 0;
    assume devExt > 0;
    wmiContext := WmiLibContext__FDO_EXTENSION(devExt);
    call {:si_unique_call 126} sdv_do_paged_code_check();
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    assume {:nonnull} wmiContext != 0;
    assume wmiContext > 0;
    call {:si_unique_call 127} Tmp_54 := IoWMIRegistrationControl(0, 1);
    return;
}



procedure {:origName "PptFdoSystemControl"} PptFdoSystemControl(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_56: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_56 == 259 || Tmp_56 == 0 || Tmp_56 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoSystemControl"} PptFdoSystemControl(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_56: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} pDevExt: int;
  var {:scalar} status_1: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;

  anon0:
    call {:si_unique_call 128} disposition := __HAVOC_malloc(4);
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_1 := actual_Irp_1;
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc pDevExt;
    call {:si_unique_call 129} sdv_do_paged_code_check();
    call {:si_unique_call 130} status_1 := WmiSystemControl(0, 0, Irp_1, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[disposition] != 1;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[disposition] != 2;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Mem_T.INT4[disposition] == 3;
    goto L22;

  L22:
    call {:si_unique_call 131} sdv_IoSkipCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_5;
    call {:si_unique_call 132} status_1 := sdv_IoCallDriver(vslice_dummy_var_5, Irp_1);
    goto L30;

  L30:
    Tmp_56 := status_1;
    return;

  anon10_Then:
    assume {:partition} Mem_T.INT4[disposition] != 3;
    call {:si_unique_call 133} sdv_IoSkipCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_6;
    call {:si_unique_call 134} status_1 := sdv_IoCallDriver(vslice_dummy_var_6, Irp_1);
    goto L30;

  anon11_Then:
    assume {:partition} Mem_T.INT4[disposition] == 2;
    goto L22;

  anon12_Then:
    assume {:partition} Mem_T.INT4[disposition] == 1;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    havoc vslice_dummy_var_7;
    havoc vslice_dummy_var_8;
    call {:si_unique_call 135} vslice_dummy_var_19 := P4CompleteRequest(Irp_1, vslice_dummy_var_7, vslice_dummy_var_8);
    goto L30;

  anon9_Then:
    assume {:partition} Mem_T.INT4[disposition] == 0;
    goto L30;
}



procedure {:origName "_sdv_init29"} _sdv_init29();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init29"} _sdv_init29()
{
  var vslice_dummy_var_20: int;

  anon0:
    call {:si_unique_call 136} vslice_dummy_var_20 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "P5AddDevice"} P5AddDevice(actual_DriverObject_1: int, actual_Pdo_1: int) returns (Tmp_60: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5AddDevice"} P5AddDevice(actual_DriverObject_1: int, actual_Pdo_1: int) returns (Tmp_60: int)
{
  var {:scalar} haveDeviceInterface: int;
  var {:pointer} sdv_68: int;
  var {:pointer} fdo: int;
  var {:pointer} fdx: int;
  var {:scalar} status_2: int;
  var {:pointer} lowerDevObj: int;
  var {:pointer} DriverObject_1: int;
  var {:pointer} Pdo_1: int;

  anon0:
    DriverObject_1 := actual_DriverObject_1;
    Pdo_1 := actual_Pdo_1;
    status_2 := 0;
    fdo := 0;
    lowerDevObj := 0;
    fdx := 0;
    haveDeviceInterface := 0;
    call {:si_unique_call 137} fdo := PptBuildFdo(DriverObject_1, Pdo_1);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} fdo != 0;
    assume {:nonnull} fdo != 0;
    assume fdo > 0;
    havoc fdx;
    assume {:nonnull} fdx != 0;
    assume fdx > 0;
    call {:si_unique_call 138} status_2 := IoRegisterDeviceInterface(0, 0, 0, DeviceInterface__FDO_EXTENSION(fdx));
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status_2 != 0;
    goto L36;

  L36:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_2 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} haveDeviceInterface != 0;
    call {:si_unique_call 139} RtlFreeUnicodeString(0);
    goto L39;

  L39:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} fdo != 0;
    call {:si_unique_call 140} IoDeleteDevice(0);
    goto L37;

  L37:
    Tmp_60 := status_2;
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} fdo == 0;
    goto L37;

  anon18_Then:
    assume {:partition} haveDeviceInterface == 0;
    goto L39;

  anon17_Then:
    assume {:partition} status_2 == 0;
    goto L37;

  anon16_Then:
    assume {:partition} status_2 == 0;
    haveDeviceInterface := 1;
    call {:si_unique_call 141} lowerDevObj := IoAttachDeviceToDeviceStack(0, Pdo_1);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} lowerDevObj != 0;
    assume {:nonnull} fdx != 0;
    assume fdx > 0;
    assume {:nonnull} fdx != 0;
    assume fdx > 0;
    call {:si_unique_call 142} KeInitializeEvent(FdoThreadEvent__FDO_EXTENSION(fdx), 0, 0);
    call {:si_unique_call 143} sdv_68 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_68 != 0;
    assume sdv_68 > 0;
    assume {:nonnull} fdo != 0;
    assume fdo > 0;
    goto L36;

  anon20_Then:
    assume {:partition} lowerDevObj == 0;
    status_2 := -1073741823;
    goto L36;

  anon15_Then:
    assume {:partition} fdo == 0;
    status_2 := -1073741823;
    goto L36;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init48"} _sdv_init48();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init48"} _sdv_init48()
{
  var vslice_dummy_var_21: int;

  anon0:
    call {:si_unique_call 144} vslice_dummy_var_21 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int)
{
  var vslice_dummy_var_22: int;

  anon0:
    call {:si_unique_call 145} vslice_dummy_var_22 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint()
{
  var vslice_dummy_var_23: int;

  anon0:
    call {:si_unique_call 146} vslice_dummy_var_23 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int)
{
  var vslice_dummy_var_24: int;

  anon0:
    call {:si_unique_call 147} vslice_dummy_var_24 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 148} vslice_dummy_var_25 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_72: int);
  free ensures {:va_keep} Tmp_72 == actual_Address;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_72: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    record := Address;
    Tmp_72 := record;
    return;
}



procedure {:origName "sdv_IoInitializeRemoveLock"} {:osmodel} sdv_IoInitializeRemoveLock(actual_Lock: int, actual_AllocateTag: int, actual_MaxLockedMinutes: int, actual_HighWatermark: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoInitializeRemoveLock"} {:osmodel} sdv_IoInitializeRemoveLock(actual_Lock: int, actual_AllocateTag: int, actual_MaxLockedMinutes: int, actual_HighWatermark: int)
{
  var vslice_dummy_var_26: int;

  anon0:
    call {:si_unique_call 149} vslice_dummy_var_26 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_76: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_76: int)
{
  var {:scalar} status_3: int;
  var {:pointer} p1: int;
  var {:pointer} p2: int;

  anon0:
    p1 := actual_p1;
    p2 := actual_p2;
    status_3 := 0;
    call {:si_unique_call 150} sdv_stub_add_begin();
    call {:si_unique_call 151} status_3 := P5AddDevice(p1, p2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 152} sdv_stub_add_end();
    Tmp_76 := status_3;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_78: int);
  free ensures {:va_keep} Tmp_78 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_78: int)
{

  anon0:
    Tmp_78 := 1;
    return;
}



procedure {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end()
{
  var vslice_dummy_var_27: int;

  anon0:
    call {:si_unique_call 153} vslice_dummy_var_27 := __HAVOC_malloc(4);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_82: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_82: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_82 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_82 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_82 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_28: int;

  anon0:
    call {:si_unique_call 154} vslice_dummy_var_28 := __HAVOC_malloc(4);
    Dpc := actual_Dpc;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc != 0;
    assume Dpc > 0;
    return;
}



procedure {:origName "IoReportResourceUsage"} {:osmodel} IoReportResourceUsage(actual_DriverClassName: int, actual_DriverObject_2: int, actual_DriverList: int, actual_DriverListSize: int, actual_DeviceObject_2: int, actual_DeviceList: int, actual_DeviceListSize: int, actual_OverrideConflict: int, actual_ConflictDetected: int) returns (Tmp_86: int);
  free ensures {:va_keep} Tmp_86 == 0 || Tmp_86 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoReportResourceUsage"} {:osmodel} IoReportResourceUsage(actual_DriverClassName: int, actual_DriverObject_2: int, actual_DriverList: int, actual_DriverListSize: int, actual_DeviceObject_2: int, actual_DeviceList: int, actual_DeviceListSize: int, actual_OverrideConflict: int, actual_ConflictDetected: int) returns (Tmp_86: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_86 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_86 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag: int)
{
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 155} vslice_dummy_var_29 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_3: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_3: int) returns (Tmp_90: int);
  free ensures {:va_keep} Tmp_90 == -1073741824 || Tmp_90 == -1073741771 || Tmp_90 == -1073741670 || Tmp_90 == -1073741823 || Tmp_90 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_3: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_3: int) returns (Tmp_90: int)
{
  var {:pointer} DeviceObject_3: int;

  anon0:
    DeviceObject_3 := actual_DeviceObject_3;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_90 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_90 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_90 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_90 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    goto L21;

  L21:
    Tmp_90 := 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    goto L21;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context: int)
{
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 156} vslice_dummy_var_30 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_31: int;

  anon0:
    call {:si_unique_call 157} vslice_dummy_var_31 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_96: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_96: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_96 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_32: int;

  anon0:
    call {:si_unique_call 158} vslice_dummy_var_32 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_100: int);
  free ensures {:va_keep} Tmp_100 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_100: int)
{

  anon0:
    Tmp_100 := 1;
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_33: int;

  anon0:
    call {:si_unique_call 159} vslice_dummy_var_33 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_34: int;

  anon0:
    call {:si_unique_call 160} vslice_dummy_var_34 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_106: int);
  free ensures {:va_keep} Tmp_106 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_106: int)
{

  anon0:
    Tmp_106 := 1;
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_108: int);
  free ensures {:va_keep} Tmp_108 == 1 || Tmp_108 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_108: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_108 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_108 := 0;
    goto L1;
}



procedure {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_1: int, actual_Environment: int) returns (Tmp_110: int);
  free ensures {:va_keep} Tmp_110 == 0 || Tmp_110 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_1: int, actual_Environment: int) returns (Tmp_110: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_110 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_110 := -1073741823;
    goto L1;
}



procedure {:origName "IoCreateUnprotectedSymbolicLink"} {:osmodel} IoCreateUnprotectedSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_112: int);
  free ensures {:va_keep} Tmp_112 == 0 || Tmp_112 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateUnprotectedSymbolicLink"} {:osmodel} IoCreateUnprotectedSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_112: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_112 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_112 := -1073741823;
    goto L1;
}



procedure {:origName "RtlInitAnsiString"} {:osmodel} RtlInitAnsiString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlInitAnsiString"} {:osmodel} RtlInitAnsiString(actual_DestinationString: int, actual_SourceString: int)
{
  var vslice_dummy_var_35: int;

  anon0:
    call {:si_unique_call 161} vslice_dummy_var_35 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_36: int;

  anon0:
    call {:si_unique_call 162} vslice_dummy_var_36 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;
}



procedure {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_118: int);
  free ensures {:va_keep} Tmp_118 == 0 || Tmp_118 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_118: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_118 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_118 := -1073741823;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_120: int);
  free ensures {:va_keep} Tmp_120 == 0 || Tmp_120 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_120: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_120 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_120 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} sdv_82: int;
  var {:scalar} u: int;
  var {:pointer} Tmp_123: int;
  var {:scalar} sdv_102: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 163} vslice_dummy_var_37 := __HAVOC_malloc(4);
    call {:si_unique_call 164} u := __HAVOC_malloc(12);
    call {:si_unique_call 165} sdv_102 := sdv_CheckDispatchRoutines();
    call {:si_unique_call 166} sdv_82 := sdv_CheckStartIoRoutines();
    call {:si_unique_call 167} vslice_dummy_var_38 := sdv_CheckDpcRoutines();
    call {:si_unique_call 168} vslice_dummy_var_39 := sdv_CheckIsrRoutines();
    call {:si_unique_call 169} vslice_dummy_var_40 := sdv_CheckCancelRoutines();
    call {:si_unique_call 170} vslice_dummy_var_41 := sdv_CheckIoDpcRoutines();
    call {:si_unique_call 171} vslice_dummy_var_42 := sdv_IoCompletionRoutines();
    call {:si_unique_call 172} vslice_dummy_var_43 := sdv_CheckWorkerRoutines();
    call {:si_unique_call 173} vslice_dummy_var_44 := sdv_CheckAddDevice();
    call {:si_unique_call 174} vslice_dummy_var_45 := sdv_CheckIrpMjPnp();
    call {:si_unique_call 175} vslice_dummy_var_46 := sdv_CheckIrpMjPower();
    call {:si_unique_call 176} vslice_dummy_var_47 := sdv_CheckDriverUnload();
    goto anon199_Then, anon199_Else;

  anon199_Else:
    goto anon290_Then, anon290_Else;

  anon290_Else:
    goto anon289_Then, anon289_Else;

  anon289_Else:
    goto anon288_Then, anon288_Else;

  anon288_Else:
    goto anon287_Then, anon287_Else;

  anon287_Else:
    goto anon286_Then, anon286_Else;

  anon286_Else:
    goto anon285_Then, anon285_Else;

  anon285_Else:
    goto anon284_Then, anon284_Else;

  anon284_Else:
    goto anon283_Then, anon283_Else;

  anon283_Else:
    goto anon282_Then, anon282_Else;

  anon282_Else:
    goto anon281_Then, anon281_Else;

  anon281_Else:
    goto anon280_Then, anon280_Else;

  anon280_Else:
    goto anon279_Then, anon279_Else;

  anon279_Else:
    goto anon278_Then, anon278_Else;

  anon278_Else:
    goto anon277_Then, anon277_Else;

  anon277_Else:
    goto anon276_Then, anon276_Else;

  anon276_Else:
    goto anon275_Then, anon275_Else;

  anon275_Else:
    goto anon274_Then, anon274_Else;

  anon274_Else:
    goto anon273_Then, anon273_Else;

  anon273_Else:
    goto anon272_Then, anon272_Else;

  anon272_Else:
    goto anon271_Then, anon271_Else;

  anon271_Else:
    goto anon270_Then, anon270_Else;

  anon270_Else:
    goto anon269_Then, anon269_Else;

  anon269_Else:
    goto anon268_Then, anon268_Else;

  anon268_Else:
    goto anon267_Then, anon267_Else;

  anon267_Else:
    goto anon266_Then, anon266_Else;

  anon266_Else:
    goto anon265_Then, anon265_Else;

  anon265_Else:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    goto anon263_Then, anon263_Else;

  anon263_Else:
    goto anon262_Then, anon262_Else;

  anon262_Else:
    goto anon261_Then, anon261_Else;

  anon261_Else:
    goto anon260_Then, anon260_Else;

  anon260_Else:
    goto anon259_Then, anon259_Else;

  anon259_Else:
    goto anon258_Then, anon258_Else;

  anon258_Else:
    goto anon257_Then, anon257_Else;

  anon257_Else:
    goto anon256_Then, anon256_Else;

  anon256_Else:
    goto anon255_Then, anon255_Else;

  anon255_Else:
    goto anon254_Then, anon254_Else;

  anon254_Else:
    goto anon253_Then, anon253_Else;

  anon253_Else:
    goto anon252_Then, anon252_Else;

  anon252_Else:
    goto anon251_Then, anon251_Else;

  anon251_Else:
    goto anon250_Then, anon250_Else;

  anon250_Else:
    goto anon249_Then, anon249_Else;

  anon249_Else:
    goto anon248_Then, anon248_Else;

  anon248_Else:
    goto anon247_Then, anon247_Else;

  anon247_Else:
    goto anon246_Then, anon246_Else;

  anon246_Else:
    goto anon245_Then, anon245_Else;

  anon245_Else:
    goto anon244_Then, anon244_Else;

  anon244_Else:
    goto anon243_Then, anon243_Else;

  anon243_Else:
    goto anon242_Then, anon242_Else;

  anon242_Else:
    goto anon241_Then, anon241_Else;

  anon241_Else:
    goto anon240_Then, anon240_Else;

  anon240_Else:
    goto anon239_Then, anon239_Else;

  anon239_Else:
    goto anon238_Then, anon238_Else;

  anon238_Else:
    goto anon237_Then, anon237_Else;

  anon237_Else:
    goto anon236_Then, anon236_Else;

  anon236_Else:
    goto anon235_Then, anon235_Else;

  anon235_Else:
    goto anon234_Then, anon234_Else;

  anon234_Else:
    goto anon233_Then, anon233_Else;

  anon233_Else:
    goto anon232_Then, anon232_Else;

  anon232_Else:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    goto anon230_Then, anon230_Else;

  anon230_Else:
    goto anon229_Then, anon229_Else;

  anon229_Else:
    goto anon228_Then, anon228_Else;

  anon228_Else:
    goto anon227_Then, anon227_Else;

  anon227_Else:
    goto anon226_Then, anon226_Else;

  anon226_Else:
    goto anon225_Then, anon225_Else;

  anon225_Else:
    goto anon224_Then, anon224_Else;

  anon224_Else:
    goto anon223_Then, anon223_Else;

  anon223_Else:
    goto anon222_Then, anon222_Else;

  anon222_Else:
    goto anon221_Then, anon221_Else;

  anon221_Else:
    goto anon220_Then, anon220_Else;

  anon220_Else:
    goto anon219_Then, anon219_Else;

  anon219_Else:
    goto anon218_Then, anon218_Else;

  anon218_Else:
    goto anon217_Then, anon217_Else;

  anon217_Else:
    goto anon216_Then, anon216_Else;

  anon216_Else:
    goto anon215_Then, anon215_Else;

  anon215_Else:
    goto anon214_Then, anon214_Else;

  anon214_Else:
    goto anon213_Then, anon213_Else;

  anon213_Else:
    goto anon212_Then, anon212_Else;

  anon212_Else:
    goto anon211_Then, anon211_Else;

  anon211_Else:
    goto anon210_Then, anon210_Else;

  anon210_Else:
    goto anon209_Then, anon209_Else;

  anon209_Else:
    goto anon208_Then, anon208_Else;

  anon208_Else:
    goto anon207_Then, anon207_Else;

  anon207_Else:
    goto anon206_Then, anon206_Else;

  anon206_Else:
    goto anon205_Then, anon205_Else;

  anon205_Else:
    goto anon204_Then, anon204_Else;

  anon204_Else:
    goto anon203_Then, anon203_Else;

  anon203_Else:
    goto anon202_Then, anon202_Else;

  anon202_Else:
    call {:si_unique_call 177} sdv_RunUnload(sdv_driver_object);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon202_Then:
    goto L1;

  anon203_Then:
    call {:si_unique_call 178} vslice_dummy_var_49 := sdv_RunRemoveDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon297_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon204_Then:
    call {:si_unique_call 179} sdv_stub_driver_init();
    call {:si_unique_call 180} vslice_dummy_var_50 := sdv_RunStartDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon296_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon205_Then:
    call {:si_unique_call 181} vslice_dummy_var_48 := sdv_RunAddDevice(sdv_driver_object, sdv_p_devobj_pdo);
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon295_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon206_Then:
    call {:si_unique_call 182} vslice_dummy_var_57 := DriverEntry(sdv_driver_object, u);
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon294_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon207_Then:
    goto L1;

  anon208_Then:
    goto L1;

  anon209_Then:
    goto L1;

  anon210_Then:
    goto L1;

  anon211_Then:
    goto L1;

  anon212_Then:
    goto L1;

  anon213_Then:
    goto L1;

  anon214_Then:
    goto L1;

  anon215_Then:
    goto L1;

  anon216_Then:
    goto L1;

  anon217_Then:
    goto L1;

  anon218_Then:
    goto L1;

  anon219_Then:
    goto L1;

  anon220_Then:
    goto L1;

  anon221_Then:
    goto L1;

  anon222_Then:
    goto L1;

  anon223_Then:
    goto L1;

  anon224_Then:
    goto L1;

  anon225_Then:
    goto L1;

  anon226_Then:
    goto L1;

  anon227_Then:
    goto L1;

  anon228_Then:
    goto L1;

  anon229_Then:
    goto L1;

  anon230_Then:
    goto L1;

  anon231_Then:
    goto L1;

  anon232_Then:
    goto L1;

  anon233_Then:
    goto L1;

  anon234_Then:
    goto L1;

  anon235_Then:
    goto L1;

  anon236_Then:
    goto L1;

  anon237_Then:
    goto L1;

  anon238_Then:
    goto L1;

  anon239_Then:
    goto L1;

  anon240_Then:
    goto L1;

  anon241_Then:
    goto L1;

  anon242_Then:
    goto L1;

  anon243_Then:
    goto L1;

  anon244_Then:
    goto L1;

  anon245_Then:
    goto L1;

  anon246_Then:
    goto L1;

  anon247_Then:
    goto L1;

  anon248_Then:
    goto L1;

  anon249_Then:
    goto L1;

  anon250_Then:
    goto L1;

  anon251_Then:
    goto L1;

  anon252_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 183} vslice_dummy_var_56 := PptSynchCompletionRoutine(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon253_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 184} vslice_dummy_var_55 := PptPowerComplete(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon254_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 185} vslice_dummy_var_54 := ParSynchCompletionRoutine(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon255_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 186} vslice_dummy_var_53 := ParAllocPortCompletionRoutine(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon256_Then:
    goto L1;

  anon257_Then:
    goto L1;

  anon258_Then:
    goto L1;

  anon259_Then:
    goto L1;

  anon260_Then:
    goto L1;

  anon261_Then:
    goto L1;

  anon262_Then:
    call {:si_unique_call 187} Tmp_123 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_123] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 188} IoAcquireCancelSpinLock(Tmp_123);
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_123];
    call {:si_unique_call 189} ParCancelRequest(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    goto L1;

  anon263_Then:
    goto L1;

  anon264_Then:
    goto L1;

  anon265_Then:
    goto L1;

  anon266_Then:
    goto L1;

  anon267_Then:
    goto L1;

  anon268_Then:
    goto L1;

  anon269_Then:
    goto L1;

  anon270_Then:
    goto L1;

  anon271_Then:
    goto L1;

  anon272_Then:
    goto L1;

  anon273_Then:
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    call {:si_unique_call 190} PptPdoThread(sdv_pv2);
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon293_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon274_Then:
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    call {:si_unique_call 191} P5FdoThread(sdv_pv2);
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon292_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon275_Then:
    goto L1;

  anon276_Then:
    goto L1;

  anon277_Then:
    goto L1;

  anon278_Then:
    goto L1;

  anon279_Then:
    goto L1;

  anon280_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 4;
    call {:si_unique_call 192} vslice_dummy_var_52 := PptInterruptService(sdv_kinterrupt, sdv_pv1);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon281_Then:
    goto L1;

  anon282_Then:
    goto L1;

  anon283_Then:
    goto L1;

  anon284_Then:
    goto L1;

  anon285_Then:
    goto L1;

  anon286_Then:
    goto L1;

  anon287_Then:
    goto L1;

  anon288_Then:
    goto L1;

  anon289_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_9;
    call {:si_unique_call 193} PptFreePortDpc(sdv_kdpc, vslice_dummy_var_9, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon290_Then:
    goto anon201_Then, anon201_Else;

  anon201_Else:
    assume {:partition} sdv_82 != 0;
    call {:si_unique_call 194} sdv_stub_driver_init();
    call {:si_unique_call 195} sdv_RunStartIo(0, 0);
    goto L1;

  anon201_Then:
    assume {:partition} sdv_82 == 0;
    goto L1;

  anon199_Then:
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:partition} sdv_102 != 0;
    call {:si_unique_call 196} sdv_stub_driver_init();
    call {:si_unique_call 197} vslice_dummy_var_51 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon291_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon200_Then:
    assume {:partition} sdv_102 == 0;
    goto L1;
}



procedure {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_124: int);
  free ensures {:va_keep} Tmp_124 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_124: int)
{

  anon0:
    Tmp_124 := 1;
    return;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_126: int);
  free ensures {:va_keep} Tmp_126 == 0 || Tmp_126 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_126: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_126 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_126 := -1073741823;
    goto L1;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_128: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_128: int)
{
  var {:pointer} sdv_118: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 198} sdv_118 := __HAVOC_malloc(1);
    Tmp_128 := sdv_118;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_128 := 0;
    goto L1;
}



procedure {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_130: int);
  free ensures {:va_keep} Tmp_130 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_130: int)
{

  anon0:
    Tmp_130 := 0;
    return;
}



procedure {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_132: int);
  free ensures {:va_keep} Tmp_132 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_132: int)
{

  anon0:
    Tmp_132 := 1;
    return;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_4: int, actual_Irp_2: int) returns (Tmp_134: int);
  free ensures {:va_keep} Tmp_134 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_4: int, actual_Irp_2: int) returns (Tmp_134: int)
{
  var {:scalar} status_5: int;
  var {:pointer} Irp_2: int;

  anon0:
    Irp_2 := actual_Irp_2;
    status_5 := 259;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    goto L19;

  L19:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L25;

  L25:
    Tmp_134 := status_5;
    return;

  anon33_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon32_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L19;

  anon40_Then:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    goto L44;

  L44:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon39_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L44;

  anon41_Then:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    goto L28;

  L28:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L28;

  anon31_Then:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    goto L36;

  L36:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L36;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_5: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_136: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_136 == 0 || Tmp_136 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_5: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_136: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 199} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_136 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 2;
    call {:si_unique_call 200} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 201} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 202} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_6: int, actual_Type: int, actual_structPtr888State: int) returns (SD1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_6: int, actual_Type: int, actual_structPtr888State: int) returns (SD1: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp_1: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 203} State := __HAVOC_malloc(8);
    call {:si_unique_call 204} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 205} Tmp_1 := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    SD1 := Tmp_1;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == actual_new;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int)
{
  var {:scalar} new: int;
  var {:pointer} p_1: int;
  var vslice_dummy_var_58: int;

  anon0:
    call {:si_unique_call 206} vslice_dummy_var_58 := __HAVOC_malloc(4);
    new := actual_new;
    p_1 := actual_p_1;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := new;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    Mem_T.INT4[p_1] := sdv_irql_previous;
    return;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_59: int;

  anon0:
    call {:si_unique_call 207} vslice_dummy_var_59 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_2: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_60: int;

  anon0:
    call {:si_unique_call 208} vslice_dummy_var_60 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_2 := actual_Context_2;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 209} irpSp := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    return;
}



procedure {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int)
{
  var vslice_dummy_var_61: int;

  anon0:
    call {:si_unique_call 210} vslice_dummy_var_61 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 1;
    return;
}



procedure {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin()
{
  var vslice_dummy_var_62: int;

  anon0:
    call {:si_unique_call 211} vslice_dummy_var_62 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_149: int);
  free ensures {:va_keep} Tmp_149 == 1 || Tmp_149 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_149: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_149 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_149 := 0;
    goto L1;
}



procedure {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_151: int);
  free ensures {:va_keep} Tmp_151 == 0 || Tmp_151 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_151: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_151 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_151 := -1073741823;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_3: int)
{
  var vslice_dummy_var_63: int;

  anon0:
    call {:si_unique_call 212} vslice_dummy_var_63 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_155: int);
  free ensures {:va_keep} Tmp_155 == 258 || Tmp_155 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_155: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_155 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_155 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_155 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_7: int)
{
  var vslice_dummy_var_64: int;

  anon0:
    call {:si_unique_call 213} vslice_dummy_var_64 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_159: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_159: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_159 := OldState;
    return;
}



procedure {:origName "KeReadStateSemaphore"} {:osmodel} KeReadStateSemaphore(actual_Semaphore: int) returns (Tmp_163: int);
  free ensures {:va_keep} Tmp_163 == 1 || Tmp_163 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeReadStateSemaphore"} {:osmodel} KeReadStateSemaphore(actual_Semaphore: int) returns (Tmp_163: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_163 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_163 := 0;
    goto L1;
}



procedure {:origName "ObReferenceObjectByHandle"} {:osmodel} ObReferenceObjectByHandle(actual_Handle: int, actual_DesiredAccess: int, actual_ObjectType: int, actual_AccessMode: int, actual_Object_1: int, actual_HandleInformation: int) returns (Tmp_165: int);
  free ensures {:va_keep} Tmp_165 == 0 || Tmp_165 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ObReferenceObjectByHandle"} {:osmodel} ObReferenceObjectByHandle(actual_Handle: int, actual_DesiredAccess: int, actual_ObjectType: int, actual_AccessMode: int, actual_Object_1: int, actual_HandleInformation: int) returns (Tmp_165: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_165 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_165 := -1073741823;
    goto L1;
}



procedure {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction: int, actual_CallbackContext: int) returns (Tmp_167: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction: int, actual_CallbackContext: int) returns (Tmp_167: int)
{
  var {:pointer} sdv_129: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_167 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 214} sdv_129 := __HAVOC_malloc(1);
    Tmp_167 := sdv_129;
    goto L1;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_169: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_169: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_169;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int)
{
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 215} vslice_dummy_var_65 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_66: int;

  anon0:
    call {:si_unique_call 216} vslice_dummy_var_66 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    sdv_irql_current := new_1;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "KeReleaseSemaphore"} {:osmodel} KeReleaseSemaphore(actual_Semaphore_1: int, actual_Increment_1: int, actual_Adjustment: int, actual_Wait_1: int) returns (Tmp_175: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeReleaseSemaphore"} {:osmodel} KeReleaseSemaphore(actual_Semaphore_1: int, actual_Increment_1: int, actual_Adjustment: int, actual_Wait_1: int) returns (Tmp_175: int)
{
  var {:scalar} r_4: int;

  anon0:
    Tmp_175 := r_4;
    return;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_177: int);
  free ensures {:va_keep} Tmp_177 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_177: int)
{

  anon0:
    Tmp_177 := sdv_irql_current;
    return;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_8: int, actual_MinorFunction: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_3: int, actual_Irp_4: int) returns (Tmp_179: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_179 == -1073741584 || Tmp_179 == 259 || Tmp_179 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_8: int, actual_MinorFunction: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_3: int, actual_Irp_4: int) returns (Tmp_179: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 217} PowerState := __HAVOC_malloc(8);
    MinorFunction := actual_MinorFunction;
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_179 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_179 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_179 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_181: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "main"} {:osmodel} main() returns (Tmp_181: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_183: int;
  var {:scalar} Tmp_184: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var RegistryPath__Loc: int;
  var PptWmiAllocFreeCountsGuid__Loc: int;
  var GUID_DEVINTERFACE_PARALLEL__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_driver_object__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var KeTickCount__Loc: int;
  var SppNoRaiseIrql__Loc: int;
  var AllowAsserts__Loc: int;
  var ParEnableLegacyZip__Loc: int;
  var PhysicalZero__Loc: int;
  var AcquirePortTimeout__Loc: int;
  var DbgMaskFdo__Loc: int;
  var DbgMaskDaisyChain1__Loc: int;
  var DbgMaskEndOfChain__Loc: int;
  var DbgMaskRawPort__Loc: int;
  var DbgMaskDaisyChain0__Loc: int;
  var DbgMaskNoDevice__Loc: int;
  var DbgMaskLegacyZip__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_DEVINTERFACE_PARCLASS__Loc: int;
  var WarmPollPeriod__Loc: int;
  var Trace__Loc: int;
  var DefaultModes__Loc: int;
  var Break__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 218} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 219} RegistryPath__Loc := __HAVOC_malloc_or_null(12);
    assume RegistryPath__Loc == RegistryPath;
    assume RegistryPath != 0;
    call {:si_unique_call 220} PptWmiAllocFreeCountsGuid__Loc := __HAVOC_malloc_or_null(16);
    assume PptWmiAllocFreeCountsGuid__Loc == PptWmiAllocFreeCountsGuid;
    assume PptWmiAllocFreeCountsGuid != 0;
    call {:si_unique_call 221} GUID_DEVINTERFACE_PARALLEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_PARALLEL__Loc == GUID_DEVINTERFACE_PARALLEL;
    assume GUID_DEVINTERFACE_PARALLEL != 0;
    call {:si_unique_call 222} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 223} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 224} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 225} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 226} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 227} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 228} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 229} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 230} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 231} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 232} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 233} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 234} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 235} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 236} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 237} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 238} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 239} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 240} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 241} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 242} sdv_driver_object__Loc := __HAVOC_malloc_or_null(68);
    assume sdv_driver_object__Loc == sdv_driver_object;
    assume sdv_driver_object != 0;
    call {:si_unique_call 243} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 244} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 245} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 246} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 247} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 248} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 249} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 250} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 251} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 252} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 253} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 254} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 255} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 256} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 257} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 258} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 259} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 260} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 261} KeTickCount__Loc := __HAVOC_malloc_or_null(12);
    assume KeTickCount__Loc == KeTickCount;
    assume KeTickCount != 0;
    call {:si_unique_call 262} SppNoRaiseIrql__Loc := __HAVOC_malloc_or_null(4);
    assume SppNoRaiseIrql__Loc == SppNoRaiseIrql;
    assume SppNoRaiseIrql != 0;
    call {:si_unique_call 263} AllowAsserts__Loc := __HAVOC_malloc_or_null(4);
    assume AllowAsserts__Loc == AllowAsserts;
    assume AllowAsserts != 0;
    call {:si_unique_call 264} ParEnableLegacyZip__Loc := __HAVOC_malloc_or_null(4);
    assume ParEnableLegacyZip__Loc == ParEnableLegacyZip;
    assume ParEnableLegacyZip != 0;
    call {:si_unique_call 265} PhysicalZero__Loc := __HAVOC_malloc_or_null(20);
    assume PhysicalZero__Loc == PhysicalZero;
    assume PhysicalZero != 0;
    call {:si_unique_call 266} AcquirePortTimeout__Loc := __HAVOC_malloc_or_null(20);
    assume AcquirePortTimeout__Loc == AcquirePortTimeout;
    assume AcquirePortTimeout != 0;
    call {:si_unique_call 267} DbgMaskFdo__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskFdo__Loc == DbgMaskFdo;
    assume DbgMaskFdo != 0;
    call {:si_unique_call 268} DbgMaskDaisyChain1__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskDaisyChain1__Loc == DbgMaskDaisyChain1;
    assume DbgMaskDaisyChain1 != 0;
    call {:si_unique_call 269} DbgMaskEndOfChain__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskEndOfChain__Loc == DbgMaskEndOfChain;
    assume DbgMaskEndOfChain != 0;
    call {:si_unique_call 270} DbgMaskRawPort__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskRawPort__Loc == DbgMaskRawPort;
    assume DbgMaskRawPort != 0;
    call {:si_unique_call 271} DbgMaskDaisyChain0__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskDaisyChain0__Loc == DbgMaskDaisyChain0;
    assume DbgMaskDaisyChain0 != 0;
    call {:si_unique_call 272} DbgMaskNoDevice__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskNoDevice__Loc == DbgMaskNoDevice;
    assume DbgMaskNoDevice != 0;
    call {:si_unique_call 273} DbgMaskLegacyZip__Loc := __HAVOC_malloc_or_null(4);
    assume DbgMaskLegacyZip__Loc == DbgMaskLegacyZip;
    assume DbgMaskLegacyZip != 0;
    call {:si_unique_call 274} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 275} GUID_DEVINTERFACE_PARCLASS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_PARCLASS__Loc == GUID_DEVINTERFACE_PARCLASS;
    assume GUID_DEVINTERFACE_PARCLASS != 0;
    call {:si_unique_call 276} WarmPollPeriod__Loc := __HAVOC_malloc_or_null(4);
    assume WarmPollPeriod__Loc == WarmPollPeriod;
    assume WarmPollPeriod != 0;
    call {:si_unique_call 277} Trace__Loc := __HAVOC_malloc_or_null(4);
    assume Trace__Loc == Trace;
    assume Trace != 0;
    call {:si_unique_call 278} DefaultModes__Loc := __HAVOC_malloc_or_null(4);
    assume DefaultModes__Loc == DefaultModes;
    assume DefaultModes != 0;
    call {:si_unique_call 279} Break__Loc := __HAVOC_malloc_or_null(4);
    assume Break__Loc == Break;
    assume Break != 0;
    call {:si_unique_call 280} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 281} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 282} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 283} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 284} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 285} GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc == GUID_QUERY_CRASHDUMP_FUNCTIONS;
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS != 0;
    call {:si_unique_call 286} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 287} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 288} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 289} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 290} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 291} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 292} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 293} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 294} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 295} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 296} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 297} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 298} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 299} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 300} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 301} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 302} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 303} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 304} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 305} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 306} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 307} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 308} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 309} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 310} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 311} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 312} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 313} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 314} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 315} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 316} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 317} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 318} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 319} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 320} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 321} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 322} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 323} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 324} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 325} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 326} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 327} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 328} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 329} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 330} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 331} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 332} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 333} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 334} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 335} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 336} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 337} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 338} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 339} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 340} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 341} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 342} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 343} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 344} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 345} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 346} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 347} boogieTmp := __HAVOC_malloc_or_null(44);
    call {:si_unique_call 348} boogieTmp := __HAVOC_malloc_or_null(36);
    call {:si_unique_call 349} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 350} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 351} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 352} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 353} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 354} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 355} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 356} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 357} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 358} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv1 == boogieTmp;
    call {:si_unique_call 359} boogieTmp := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc == boogieTmp;
    call {:si_unique_call 360} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 361} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 362} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 363} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 364} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 365} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 366} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 367} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 368} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 369} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 370} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 371} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 372} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 373} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 374} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 375} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 376} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 377} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 378} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 379} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 380} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 381} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 382} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 383} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 384} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 385} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 386} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 387} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 388} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 389} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 390} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 391} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 392} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 393} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 394} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 395} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 396} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 397} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 398} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 399} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 400} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 401} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 402} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 403} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 404} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 405} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 406} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 407} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 408} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 409} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 410} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 411} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 412} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 413} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 414} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 415} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 416} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 417} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 418} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 419} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 420} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 421} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 422} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 423} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 424} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 425} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 426} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 427} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 428} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 429} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 430} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 431} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 432} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 433} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 434} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 435} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 436} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 437} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 438} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 439} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 440} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 441} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 442} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 443} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 444} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 445} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 446} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 447} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 448} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 449} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 450} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 451} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 452} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 453} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 454} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 455} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 456} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 457} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 458} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 459} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 460} vslice_dummy_var_10 := __HAVOC_malloc(28);
    call {:si_unique_call 461} vslice_dummy_var_11 := __HAVOC_malloc(12);
    call {:si_unique_call 462} vslice_dummy_var_12 := __HAVOC_malloc(28);
    call {:si_unique_call 463} vslice_dummy_var_13 := __HAVOC_malloc(12);
    call {:si_unique_call 464} vslice_dummy_var_14 := __HAVOC_malloc(28);
    call {:si_unique_call 465} vslice_dummy_var_15 := __HAVOC_malloc(4);
    call {:si_unique_call 466} vslice_dummy_var_16 := __HAVOC_malloc(4);
    call {:si_unique_call 467} vslice_dummy_var_17 := __HAVOC_malloc(12);
    call {:si_unique_call 468} vslice_dummy_var_18 := __HAVOC_malloc(28);
    call {:si_unique_call 469} vslice_dummy_var_19 := __HAVOC_malloc(12);
    call {:si_unique_call 470} vslice_dummy_var_20 := __HAVOC_malloc(12);
    call {:si_unique_call 471} vslice_dummy_var_21 := __HAVOC_malloc(28);
    call {:si_unique_call 472} vslice_dummy_var_22 := __HAVOC_malloc(12);
    call {:si_unique_call 473} vslice_dummy_var_23 := __HAVOC_malloc(28);
    call {:si_unique_call 474} vslice_dummy_var_24 := __HAVOC_malloc(12);
    call {:si_unique_call 475} vslice_dummy_var_25 := __HAVOC_malloc(28);
    call {:si_unique_call 476} vslice_dummy_var_26 := __HAVOC_malloc(12);
    call {:si_unique_call 477} vslice_dummy_var_27 := __HAVOC_malloc(28);
    call {:si_unique_call 478} vslice_dummy_var_28 := __HAVOC_malloc(12);
    call {:si_unique_call 479} vslice_dummy_var_29 := __HAVOC_malloc(28);
    call {:si_unique_call 480} vslice_dummy_var_30 := __HAVOC_malloc(12);
    call {:si_unique_call 481} vslice_dummy_var_31 := __HAVOC_malloc(28);
    call {:si_unique_call 482} vslice_dummy_var_32 := __HAVOC_malloc(12);
    call {:si_unique_call 483} vslice_dummy_var_33 := __HAVOC_malloc(28);
    call {:si_unique_call 484} vslice_dummy_var_34 := __HAVOC_malloc(12);
    call {:si_unique_call 485} vslice_dummy_var_35 := __HAVOC_malloc(28);
    call {:si_unique_call 486} vslice_dummy_var_36 := __HAVOC_malloc(12);
    call {:si_unique_call 487} vslice_dummy_var_37 := __HAVOC_malloc(28);
    call {:si_unique_call 488} vslice_dummy_var_38 := __HAVOC_malloc(12);
    call {:si_unique_call 489} vslice_dummy_var_39 := __HAVOC_malloc(28);
    call {:si_unique_call 490} vslice_dummy_var_40 := __HAVOC_malloc(12);
    call {:si_unique_call 491} vslice_dummy_var_41 := __HAVOC_malloc(28);
    call {:si_unique_call 492} vslice_dummy_var_42 := __HAVOC_malloc(4);
    call {:si_unique_call 493} vslice_dummy_var_43 := __HAVOC_malloc(12);
    call {:si_unique_call 494} vslice_dummy_var_44 := __HAVOC_malloc(28);
    call {:si_unique_call 495} vslice_dummy_var_45 := __HAVOC_malloc(4);
    call {:si_unique_call 496} vslice_dummy_var_46 := __HAVOC_malloc(4);
    call {:si_unique_call 497} vslice_dummy_var_47 := __HAVOC_malloc(12);
    call {:si_unique_call 498} vslice_dummy_var_48 := __HAVOC_malloc(28);
    call {:si_unique_call 499} vslice_dummy_var_49 := __HAVOC_malloc(100);
    call {:si_unique_call 500} vslice_dummy_var_50 := __HAVOC_malloc(52);
    call {:si_unique_call 501} vslice_dummy_var_51 := __HAVOC_malloc(12);
    call {:si_unique_call 502} vslice_dummy_var_52 := __HAVOC_malloc(28);
    call {:si_unique_call 503} vslice_dummy_var_53 := __HAVOC_malloc(12);
    call {:si_unique_call 504} vslice_dummy_var_54 := __HAVOC_malloc(28);
    call {:si_unique_call 505} vslice_dummy_var_55 := __HAVOC_malloc(396);
    call {:si_unique_call 506} vslice_dummy_var_56 := __HAVOC_malloc(288);
    call {:si_unique_call 507} vslice_dummy_var_57 := __HAVOC_malloc(12);
    call {:si_unique_call 508} vslice_dummy_var_58 := __HAVOC_malloc(28);
    call {:si_unique_call 509} vslice_dummy_var_59 := __HAVOC_malloc(12);
    call {:si_unique_call 510} vslice_dummy_var_60 := __HAVOC_malloc(28);
    call {:si_unique_call 511} vslice_dummy_var_61 := __HAVOC_malloc(12);
    call {:si_unique_call 512} vslice_dummy_var_62 := __HAVOC_malloc(28);
    call {:si_unique_call 513} vslice_dummy_var_63 := __HAVOC_malloc(12);
    call {:si_unique_call 514} vslice_dummy_var_64 := __HAVOC_malloc(28);
    call {:si_unique_call 515} vslice_dummy_var_65 := __HAVOC_malloc(12);
    call {:si_unique_call 516} vslice_dummy_var_66 := __HAVOC_malloc(28);
    call {:si_unique_call 517} vslice_dummy_var_67 := __HAVOC_malloc(12);
    call {:si_unique_call 518} vslice_dummy_var_68 := __HAVOC_malloc(28);
    call {:si_unique_call 519} vslice_dummy_var_69 := __HAVOC_malloc(12);
    call {:si_unique_call 520} vslice_dummy_var_70 := __HAVOC_malloc(28);
    call {:si_unique_call 521} vslice_dummy_var_71 := __HAVOC_malloc(12);
    call {:si_unique_call 522} vslice_dummy_var_72 := __HAVOC_malloc(28);
    call {:si_unique_call 523} vslice_dummy_var_73 := __HAVOC_malloc(12);
    call {:si_unique_call 524} vslice_dummy_var_74 := __HAVOC_malloc(28);
    call {:si_unique_call 525} vslice_dummy_var_75 := __HAVOC_malloc(12);
    call {:si_unique_call 526} vslice_dummy_var_76 := __HAVOC_malloc(28);
    call {:si_unique_call 527} vslice_dummy_var_77 := __HAVOC_malloc(12);
    call {:si_unique_call 528} vslice_dummy_var_78 := __HAVOC_malloc(28);
    call {:si_unique_call 529} vslice_dummy_var_79 := __HAVOC_malloc(12);
    call {:si_unique_call 530} vslice_dummy_var_80 := __HAVOC_malloc(28);
    call {:si_unique_call 531} vslice_dummy_var_81 := __HAVOC_malloc(100);
    call {:si_unique_call 532} vslice_dummy_var_82 := __HAVOC_malloc(12);
    call {:si_unique_call 533} vslice_dummy_var_83 := __HAVOC_malloc(28);
    call {:si_unique_call 534} vslice_dummy_var_84 := __HAVOC_malloc(12);
    call {:si_unique_call 535} vslice_dummy_var_85 := __HAVOC_malloc(28);
    call {:si_unique_call 536} vslice_dummy_var_86 := __HAVOC_malloc(12);
    call {:si_unique_call 537} vslice_dummy_var_87 := __HAVOC_malloc(28);
    call {:si_unique_call 538} vslice_dummy_var_88 := __HAVOC_malloc(12);
    call {:si_unique_call 539} vslice_dummy_var_89 := __HAVOC_malloc(28);
    call {:si_unique_call 540} vslice_dummy_var_90 := __HAVOC_malloc(12);
    call {:si_unique_call 541} vslice_dummy_var_91 := __HAVOC_malloc(28);
    call {:si_unique_call 542} vslice_dummy_var_92 := __HAVOC_malloc(12);
    call {:si_unique_call 543} vslice_dummy_var_93 := __HAVOC_malloc(28);
    call {:si_unique_call 544} vslice_dummy_var_94 := __HAVOC_malloc(12);
    call {:si_unique_call 545} vslice_dummy_var_95 := __HAVOC_malloc(28);
    call {:si_unique_call 546} vslice_dummy_var_96 := __HAVOC_malloc(12);
    call {:si_unique_call 547} vslice_dummy_var_97 := __HAVOC_malloc(28);
    call {:si_unique_call 548} vslice_dummy_var_98 := __HAVOC_malloc(12);
    call {:si_unique_call 549} vslice_dummy_var_99 := __HAVOC_malloc(28);
    call {:si_unique_call 550} vslice_dummy_var_100 := __HAVOC_malloc(12);
    call {:si_unique_call 551} vslice_dummy_var_101 := __HAVOC_malloc(28);
    call {:si_unique_call 552} vslice_dummy_var_102 := __HAVOC_malloc(12);
    call {:si_unique_call 553} vslice_dummy_var_103 := __HAVOC_malloc(28);
    call {:si_unique_call 554} vslice_dummy_var_104 := __HAVOC_malloc(12);
    call {:si_unique_call 555} vslice_dummy_var_105 := __HAVOC_malloc(28);
    call {:si_unique_call 556} vslice_dummy_var_106 := __HAVOC_malloc(112);
    call {:si_unique_call 557} vslice_dummy_var_107 := __HAVOC_malloc(12);
    call {:si_unique_call 558} vslice_dummy_var_108 := __HAVOC_malloc(28);
    call {:si_unique_call 559} vslice_dummy_var_109 := __HAVOC_malloc(12);
    call {:si_unique_call 560} vslice_dummy_var_110 := __HAVOC_malloc(28);
    call {:si_unique_call 561} vslice_dummy_var_111 := __HAVOC_malloc(4);
    call {:si_unique_call 562} vslice_dummy_var_112 := __HAVOC_malloc(4);
    call {:si_unique_call 563} vslice_dummy_var_113 := __HAVOC_malloc(12);
    call {:si_unique_call 564} vslice_dummy_var_114 := __HAVOC_malloc(28);
    call {:si_unique_call 565} vslice_dummy_var_115 := __HAVOC_malloc(100);
    call {:si_unique_call 566} vslice_dummy_var_116 := __HAVOC_malloc(12);
    call {:si_unique_call 567} vslice_dummy_var_117 := __HAVOC_malloc(28);
    call {:si_unique_call 568} vslice_dummy_var_118 := __HAVOC_malloc(12);
    call {:si_unique_call 569} vslice_dummy_var_119 := __HAVOC_malloc(28);
    call {:si_unique_call 570} vslice_dummy_var_120 := __HAVOC_malloc(4);
    call {:si_unique_call 571} vslice_dummy_var_121 := __HAVOC_malloc(4);
    call {:si_unique_call 572} vslice_dummy_var_122 := __HAVOC_malloc(12);
    call {:si_unique_call 573} vslice_dummy_var_123 := __HAVOC_malloc(28);
    call {:si_unique_call 574} vslice_dummy_var_124 := __HAVOC_malloc(12);
    call {:si_unique_call 575} vslice_dummy_var_125 := __HAVOC_malloc(28);
    call {:si_unique_call 576} vslice_dummy_var_126 := __HAVOC_malloc(12);
    assume {:mainInitDone} true;
    call {:si_unique_call 577} corralExtraInit();
    call {:si_unique_call 578} corralExplainErrorInit();
    call {:si_unique_call 579} _sdv_init53();
    call {:si_unique_call 580} _sdv_init22();
    call {:si_unique_call 581} _sdv_init45();
    call {:si_unique_call 582} _sdv_init18();
    call {:si_unique_call 583} _sdv_init19();
    call {:si_unique_call 584} _sdv_init32();
    call {:si_unique_call 585} _sdv_init17();
    call {:si_unique_call 586} _sdv_init50();
    call {:si_unique_call 587} _sdv_init1();
    call {:si_unique_call 588} _sdv_init28();
    call {:si_unique_call 589} _sdv_init23();
    call {:si_unique_call 590} _sdv_init25();
    call {:si_unique_call 591} _sdv_init40();
    call {:si_unique_call 592} _sdv_init47();
    call {:si_unique_call 593} _sdv_init44();
    call {:si_unique_call 594} _sdv_init49();
    call {:si_unique_call 595} _sdv_init4();
    call {:si_unique_call 596} _sdv_init5();
    call {:si_unique_call 597} _sdv_init3();
    call {:si_unique_call 598} _sdv_init30();
    call {:si_unique_call 599} _sdv_init16();
    call {:si_unique_call 600} _sdv_init24();
    call {:si_unique_call 601} _sdv_init14();
    call {:si_unique_call 602} _sdv_init21();
    call {:si_unique_call 603} _sdv_init33();
    call {:si_unique_call 604} _sdv_init37();
    call {:si_unique_call 605} _sdv_init36();
    call {:si_unique_call 606} _sdv_init6();
    call {:si_unique_call 607} _sdv_init15();
    call {:si_unique_call 608} _sdv_init41();
    call {:si_unique_call 609} _sdv_init27();
    call {:si_unique_call 610} _sdv_init10();
    call {:si_unique_call 611} _sdv_init26();
    call {:si_unique_call 612} _sdv_init38();
    call {:si_unique_call 613} _sdv_init42();
    call {:si_unique_call 614} _sdv_init11();
    call {:si_unique_call 615} _sdv_init9();
    call {:si_unique_call 616} _sdv_init31();
    call {:si_unique_call 617} _sdv_init12();
    call {:si_unique_call 618} _sdv_init46();
    call {:si_unique_call 619} _sdv_init13();
    call {:si_unique_call 620} _sdv_init39();
    call {:si_unique_call 621} _sdv_init7();
    call {:si_unique_call 622} _sdv_init34();
    call {:si_unique_call 623} _sdv_init8();
    call {:si_unique_call 624} _sdv_init35();
    call {:si_unique_call 625} _sdv_init51();
    call {:si_unique_call 626} _sdv_init48();
    call {:si_unique_call 627} _sdv_init29();
    call {:si_unique_call 628} _sdv_init43();
    call {:si_unique_call 629} _sdv_init2();
    call {:si_unique_call 630} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_184 := 0;
    goto L76;

  L76:
    assume Tmp_184 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_183 := 0;
    goto L80;

  L80:
    assume Tmp_183 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 631} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L74;

  L74:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L74;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_183 := 1;
    goto L80;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_184 := 1;
    goto L76;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data: int, actual_DataSize: int) returns (Tmp_185: int);
  free ensures {:va_keep} Tmp_185 == -1073741790 || Tmp_185 == -1073741816 || Tmp_185 == -1073741823 || Tmp_185 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data: int, actual_DataSize: int) returns (Tmp_185: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_185 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_185 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_185 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_185 := 0;
    goto L1;
}



procedure {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_187: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_187: int)
{
  var {:pointer} sdv_133: int;

  anon0:
    call {:si_unique_call 632} sdv_133 := __HAVOC_malloc(1);
    Tmp_187 := sdv_133;
    return;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_67: int;

  anon0:
    call {:si_unique_call 633} vslice_dummy_var_67 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_5: int) returns (Tmp_191: int);
  free ensures {:va_keep} Tmp_191 == 0 || Tmp_191 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_5: int) returns (Tmp_191: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_191 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_191 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_193: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_193: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_193 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_195: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_195: int)
{
  var {:pointer} ps: int;
  var {:scalar} status_7: int;
  var {:pointer} po: int;
  var {:pointer} pirp_10: int;

  anon0:
    po := actual_po;
    pirp_10 := actual_pirp_10;
    status_7 := 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    havoc ps;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 634} sdv_stub_dispatch_begin();
    call {:si_unique_call 635} sdv_SetStatus(pirp_10);
    call {:si_unique_call 636} status_7 := PptDispatchPnp(po, pirp_10);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 637} sdv_stub_dispatch_end(status_7, 0);
    Tmp_195 := status_7;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end()
{
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 638} vslice_dummy_var_68 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString_1: int, actual_SourceString_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString_1: int, actual_SourceString_1: int)
{
  var {:pointer} DestinationString_1: int;
  var {:pointer} SourceString_1: int;
  var vslice_dummy_var_69: int;

  anon0:
    call {:si_unique_call 639} vslice_dummy_var_69 := __HAVOC_malloc(4);
    DestinationString_1 := actual_DestinationString_1;
    SourceString_1 := actual_SourceString_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString_1 != 0;
    assume {:nonnull} DestinationString_1 != 0;
    assume DestinationString_1 > 0;
    assume {:nonnull} DestinationString_1 != 0;
    assume DestinationString_1 > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString_1 == 0;
    assume {:nonnull} DestinationString_1 != 0;
    assume DestinationString_1 > 0;
    assume {:nonnull} DestinationString_1 != 0;
    assume DestinationString_1 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString_1 != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString_1 == 0;
    goto L4;
}



procedure {:origName "RtlCompareMemory"} {:osmodel} RtlCompareMemory(actual_Source1: int, actual_Source2: int, actual_Length_1: int) returns (Tmp_201: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlCompareMemory"} {:osmodel} RtlCompareMemory(actual_Source1: int, actual_Source2: int, actual_Length_1: int) returns (Tmp_201: int)
{
  var {:scalar} r_5: int;
  var {:scalar} sdv_136: int;

  anon0:
    r_5 := sdv_136;
    Tmp_201 := r_5;
    return;
}



procedure {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_203: int);
  free ensures {:va_keep} Tmp_203 == 0 || Tmp_203 == actual_TargetDevice_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_203: int)
{
  var {:pointer} TargetDevice_1: int;

  anon0:
    TargetDevice_1 := actual_TargetDevice_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} TargetDevice_1 == sdv_p_devobj_pdo;
    Tmp_203 := TargetDevice_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} TargetDevice_1 != sdv_p_devobj_pdo;
    Tmp_203 := 0;
    goto L1;
}



procedure {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po_1: int, actual_pirp_11: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po_1: int, actual_pirp_11: int)
{
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;

  anon0:
    call {:si_unique_call 640} vslice_dummy_var_70 := __HAVOC_malloc(4);
    call {:si_unique_call 641} sdv_stub_startio_begin();
    call {:si_unique_call 642} vslice_dummy_var_71 := sdv_DoNothing();
    call {:si_unique_call 643} sdv_stub_startio_end();
    return;
}



procedure {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_207: int);
  free ensures {:va_keep} Tmp_207 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_207: int)
{

  anon0:
    Tmp_207 := 1;
    return;
}



procedure {:origName "PsCreateSystemThread"} {:osmodel} PsCreateSystemThread(actual_ThreadHandle: int, actual_DesiredAccess_1: int, actual_ObjectAttributes_1: int, actual_ProcessHandle: int, actual_ClientId: int, actual_StartRoutine: int, actual_StartContext: int) returns (Tmp_209: int);
  free ensures {:va_keep} Tmp_209 == 0 || Tmp_209 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PsCreateSystemThread"} {:osmodel} PsCreateSystemThread(actual_ThreadHandle: int, actual_DesiredAccess_1: int, actual_ObjectAttributes_1: int, actual_ProcessHandle: int, actual_ClientId: int, actual_StartRoutine: int, actual_StartContext: int) returns (Tmp_209: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_209 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_209 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_2: int)
{
  var vslice_dummy_var_72: int;

  anon0:
    call {:si_unique_call 644} vslice_dummy_var_72 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeSemaphore"} {:osmodel} KeInitializeSemaphore(actual_Semaphore_2: int, actual_Count: int, actual_Limit: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeSemaphore"} {:osmodel} KeInitializeSemaphore(actual_Semaphore_2: int, actual_Count: int, actual_Limit: int)
{
  var vslice_dummy_var_73: int;

  anon0:
    call {:si_unique_call 645} vslice_dummy_var_73 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_2: int, actual_pirp_12: int) returns (Tmp_215: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_2: int, actual_pirp_12: int) returns (Tmp_215: int)
{
  var {:pointer} ps_1: int;
  var {:scalar} status_8: int;
  var {:pointer} po_2: int;
  var {:pointer} pirp_12: int;

  anon0:
    po_2 := actual_po_2;
    pirp_12 := actual_pirp_12;
    status_8 := 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    havoc ps_1;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 646} sdv_SetStatus(pirp_12);
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 647} sdv_stub_dispatch_begin();
    call {:si_unique_call 648} status_8 := PptDispatchPnp(po_2, pirp_12);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 649} sdv_stub_dispatch_end(status_8, 0);
    Tmp_215 := status_8;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin()
{
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 650} vslice_dummy_var_74 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    return;
}



procedure {:origName "RtlIntegerToUnicodeString"} {:osmodel} RtlIntegerToUnicodeString(actual_Value: int, actual_Base: int, actual_String: int) returns (Tmp_219: int);
  free ensures {:va_keep} Tmp_219 == 0 || Tmp_219 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlIntegerToUnicodeString"} {:osmodel} RtlIntegerToUnicodeString(actual_Value: int, actual_Base: int, actual_String: int) returns (Tmp_219: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_219 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_219 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 651} vslice_dummy_var_75 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_NewIrql;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_76: int;

  anon0:
    call {:si_unique_call 652} vslice_dummy_var_76 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    sdv_irql_current := NewIrql;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_13: int)
{
  var vslice_dummy_var_77: int;

  anon0:
    call {:si_unique_call 653} vslice_dummy_var_77 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_14: int)
{
  var vslice_dummy_var_78: int;

  anon0:
    call {:si_unique_call 654} vslice_dummy_var_78 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_3: int, actual_pirp_15: int) returns (Tmp_229: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_3: int, actual_pirp_15: int) returns (Tmp_229: int)
{
  var {:pointer} ps_2: int;
  var {:scalar} minor: int;
  var {:scalar} Tmp_230: int;
  var {:scalar} sdv_149: int;
  var {:scalar} Tmp_231: int;
  var {:scalar} status_9: int;
  var {:pointer} po_3: int;
  var {:pointer} pirp_15: int;

  anon0:
    po_3 := actual_po_3;
    pirp_15 := actual_pirp_15;
    status_9 := 0;
    minor := sdv_149;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    havoc ps_2;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    call {:si_unique_call 655} sdv_SetStatus(pirp_15);
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 656} sdv_stub_dispatch_begin();
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L60;

  L60:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    Tmp_231 := 0;
    goto L209;

  L209:
    assume Tmp_231 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L66;

  L66:
    call {:si_unique_call 657} status_9 := PptDispatchPnp(po_3, pirp_15);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 658} sdv_stub_dispatch_end(status_9, 0);
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    Tmp_229 := status_9;
    goto LM2;

  LM2:
    return;

  anon69_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    goto L66;

  anon51_Then:
    Tmp_231 := 1;
    goto L209;

  anon49_Then:
    goto L61;

  anon68_Then:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    Tmp_230 := 0;
    goto L215;

  L215:
    assume Tmp_230 != 0;
    goto L60;

  anon48_Then:
    Tmp_230 := 1;
    goto L215;

  anon52_Then:
    call {:si_unique_call 659} status_9 := sdv_DoNothing();
    goto L72;

  anon53_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 660} status_9 := PptDispatchSystemControl(po_3, pirp_15);
    goto L72;

  anon54_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 661} sdv_SetPowerIrpMinorFunction(pirp_15);
    call {:si_unique_call 662} status_9 := PptDispatchPower(po_3, pirp_15);
    goto L72;

  anon55_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 663} status_9 := PptDispatchCleanup(po_3, pirp_15);
    goto L72;

  anon56_Then:
    call {:si_unique_call 664} status_9 := sdv_DoNothing();
    goto L72;

  anon57_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 665} status_9 := sdv_DoNothing();
    goto L72;

  anon58_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 666} status_9 := PptDispatchInternalDeviceControl(po_3, pirp_15);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon67_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 667} status_9 := PptDispatchDeviceControl(po_3, pirp_15);
    goto L72;

  anon60_Then:
    call {:si_unique_call 668} status_9 := sdv_DoNothing();
    goto L72;

  anon61_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 669} status_9 := sdv_DoNothing();
    goto L72;

  anon62_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 670} status_9 := PptDispatchSetInformation(po_3, pirp_15);
    goto L72;

  anon63_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 671} status_9 := PptDispatchQueryInformation(po_3, pirp_15);
    goto L72;

  anon64_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 672} status_9 := PptDispatchWrite(po_3, pirp_15);
    goto L72;

  anon65_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 673} status_9 := PptDispatchRead(po_3, pirp_15);
    goto L72;

  anon66_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 674} status_9 := PptDispatchClose(po_3, pirp_15);
    goto L72;

  anon47_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 675} status_9 := PptDispatchCreateOpen(po_3, pirp_15);
    goto L72;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_79: int;

  anon0:
    call {:si_unique_call 676} vslice_dummy_var_79 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_235: int);
  free ensures {:va_keep} Tmp_235 == -1073741823 || Tmp_235 == -1073741808 || Tmp_235 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_235: int)
{
  var {:scalar} Tmp_236: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_235 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_235 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_236 := 0;
    goto L22;

  L22:
    assume Tmp_236 != 0;
    Tmp_235 := 0;
    goto L1;

  anon8_Then:
    Tmp_236 := 1;
    goto L22;
}



procedure {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_238: int);
  free ensures {:va_keep} Tmp_238 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_238: int)
{

  anon0:
    Tmp_238 := 1;
    return;
}



procedure {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_240: int);
  free ensures {:va_keep} Tmp_240 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_240: int)
{

  anon0:
    Tmp_240 := 1;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_16: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_16: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_80: int;

  anon0:
    call {:si_unique_call 677} vslice_dummy_var_80 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlAnsiStringToUnicodeString"} {:osmodel} RtlAnsiStringToUnicodeString(actual_DestinationString_2: int, actual_SourceString_2: int, actual_AllocateDestinationString: int) returns (Tmp_244: int);
  free ensures {:va_keep} Tmp_244 == 0 || Tmp_244 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlAnsiStringToUnicodeString"} {:osmodel} RtlAnsiStringToUnicodeString(actual_DestinationString_2: int, actual_SourceString_2: int, actual_AllocateDestinationString: int) returns (Tmp_244: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_244 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_244 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int)
{
  var vslice_dummy_var_81: int;

  anon0:
    call {:si_unique_call 678} vslice_dummy_var_81 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_1: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength: int) returns (Tmp_248: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_248 == -1073741811 || Tmp_248 == -1073741823 || Tmp_248 == 0 || Tmp_248 == 5 || Tmp_248 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_1: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength: int) returns (Tmp_248: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_162: int;
  var {:scalar} Length_4: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_4 := actual_Length_4;
    ResultLength := actual_ResultLength;
    L := sdv_162;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_248 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_248 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_4;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_4 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_248 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_4 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_4;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_248 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_4 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_248 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_4;
    goto L13;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_17: int)
{
  var vslice_dummy_var_82: int;

  anon0:
    call {:si_unique_call 679} vslice_dummy_var_82 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_252: int);
  free ensures {:va_keep} Tmp_252 == 1 || Tmp_252 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_252: int)
{
  var {:scalar} b: int;

  anon0:
    call {:si_unique_call 680} b := OneOfTwoBOOLEAN();
    Tmp_252 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_83: int;

  anon0:
    call {:si_unique_call 681} vslice_dummy_var_83 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_256: int);
  free ensures {:va_keep} Tmp_256 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_256: int)
{

  anon0:
    Tmp_256 := 1;
    return;
}



procedure {:origName "PsTerminateSystemThread"} {:osmodel} PsTerminateSystemThread(actual_ExitStatus: int) returns (Tmp_258: int);
  free ensures {:va_keep} Tmp_258 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PsTerminateSystemThread"} {:osmodel} PsTerminateSystemThread(actual_ExitStatus: int) returns (Tmp_258: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume false;
    Tmp_258 := 0;
    return;

  anon3_Then:
    Tmp_258 := -1073741823;
    goto L1;

  L1:
    return;
}



procedure {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int)
{
  var vslice_dummy_var_84: int;

  anon0:
    call {:si_unique_call 682} vslice_dummy_var_84 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_18: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_18: int)
{
  var vslice_dummy_var_85: int;

  anon0:
    call {:si_unique_call 683} vslice_dummy_var_85 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_1: int) returns (Tmp_266: int);
  free ensures {:va_keep} Tmp_266 == -1073741823 || Tmp_266 == -1073741738 || Tmp_266 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_1: int) returns (Tmp_266: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_266 := -1073741823;
    goto L1;

  L1:
    return;

  anon5_Then:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_266 := -1073741738;
    goto L1;

  anon6_Then:
    Tmp_266 := 0;
    goto L1;
}



procedure {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_268: int);
  free ensures {:va_keep} Tmp_268 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_268: int)
{

  anon0:
    Tmp_268 := 0;
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_270: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_270: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_270 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int)
{
  var vslice_dummy_var_86: int;

  anon0:
    call {:si_unique_call 684} vslice_dummy_var_86 := __HAVOC_malloc(4);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_274: int);
  free ensures {:va_keep} Tmp_274 == 1 || Tmp_274 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_274: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_274 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_274 := 0;
    goto L1;
}



procedure {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_276: int);
  free ensures {:va_keep} Tmp_276 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_276: int)
{

  anon0:
    Tmp_276 := 1;
    return;
}



procedure {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_278: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_278: int)
{
  var {:pointer} irpSp_1: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 685} irpSp_1 := sdv_IoGetNextIrpStackLocation(sdv_other_irp);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    Tmp_278 := sdv_other_irp;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_278 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_9: int, actual_Irp_6: int) returns (Tmp_280: int);
  free ensures {:va_keep} Tmp_280 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_9: int, actual_Irp_6: int) returns (Tmp_280: int)
{
  var {:scalar} status_10: int;
  var {:pointer} Irp_6: int;

  anon0:
    Irp_6 := actual_Irp_6;
    status_10 := 259;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_6;
    goto L19;

  L19:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_6;
    goto L25;

  L25:
    Tmp_280 := status_10;
    return;

  anon32_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon31_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_6;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_6;
    goto L19;

  anon39_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_6;
    goto L44;

  L44:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_6;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_6;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_6;
    goto L44;

  anon40_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_6;
    goto L28;

  L28:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_6;
    goto L25;

  anon33_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_6;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_6;
    goto L28;

  anon41_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_6;
    goto L36;

  L36:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_6;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_6;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_6;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_6;
    goto L36;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_87: int;

  anon0:
    call {:si_unique_call 686} vslice_dummy_var_87 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_2: int) returns (Tmp_284: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_2: int) returns (Tmp_284: int)
{
  var {:scalar} p_4: int;

  anon0:
    Tmp_284 := p_4;
    return;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_2: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 687} vslice_dummy_var_88 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_2 := actual_Type_2;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_10: int, actual_Irp_7: int) returns (Tmp_288: int);
  free ensures {:va_keep} Tmp_288 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_10: int, actual_Irp_7: int) returns (Tmp_288: int)
{
  var {:pointer} Irp_7: int;

  anon0:
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 688} Tmp_288 := IofCallDriver(0, Irp_7);
    return;
}



procedure {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_11: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_2: int, actual_IoStatusBlock: int) returns (Tmp_290: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_11: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_2: int, actual_IoStatusBlock: int) returns (Tmp_290: int)
{
  var {:pointer} Tmp_291: int;
  var {:pointer} Tmp_293: int;
  var {:scalar} InternalDeviceIoControl: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    InternalDeviceIoControl := actual_InternalDeviceIoControl;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} InternalDeviceIoControl != 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_291;
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    goto L14;

  L14:
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_290 := sdv_IoBuildDeviceIoControlRequest_irp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} InternalDeviceIoControl == 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_293;
    assume {:nonnull} Tmp_293 != 0;
    assume Tmp_293 > 0;
    goto L14;

  anon5_Then:
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_290 := 0;
    goto L1;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_5: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_5: int)
{
  var {:pointer} p_5: int;
  var vslice_dummy_var_89: int;

  anon0:
    call {:si_unique_call 689} vslice_dummy_var_89 := __HAVOC_malloc(4);
    p_5 := actual_p_5;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p_5 != 0;
    assume p_5 > 0;
    Mem_T.INT4[p_5] := sdv_irql_previous;
    return;
}



procedure {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_19: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_19: int)
{
  var vslice_dummy_var_90: int;

  anon0:
    call {:si_unique_call 690} vslice_dummy_var_90 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_5: int) returns (Tmp_298: int);
  free ensures {:va_keep} Tmp_298 == 0 || Tmp_298 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_5: int) returns (Tmp_298: int)
{
  var {:scalar} Tmp_299: int;
  var {:scalar} choice_19: int;
  var {:scalar} Status_5: int;

  anon0:
    Status_5 := actual_Status_5;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_5 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_5;
    Tmp_298 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_5 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_19 != 0;
    Tmp_299 := 1;
    goto L14;

  L14:
    Tmp_298 := Tmp_299;
    goto L1;

  anon8_Then:
    assume {:partition} choice_19 == 0;
    Tmp_299 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_5;
    goto L9;
}



procedure {:origName "IoInvalidateDeviceRelations"} {:osmodel} IoInvalidateDeviceRelations(actual_DeviceObject_12: int, actual_Type_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoInvalidateDeviceRelations"} {:osmodel} IoInvalidateDeviceRelations(actual_DeviceObject_12: int, actual_Type_3: int)
{
  var vslice_dummy_var_91: int;

  anon0:
    call {:si_unique_call 691} vslice_dummy_var_91 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag_2: int) returns (Tmp_303: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag_2: int) returns (Tmp_303: int)
{
  var {:pointer} sdv_175: int;
  var {:scalar} PoolType: int;
  var {:scalar} NumberOfBytes: int;

  anon0:
    PoolType := actual_PoolType;
    NumberOfBytes := actual_NumberOfBytes;
    call {:si_unique_call 692} SLIC_ExAllocatePoolWithTag_entry(strConst__li2bpl6, PoolType);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 693} sdv_175 := __HAVOC_malloc(NumberOfBytes);
    Tmp_303 := sdv_175;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    Tmp_303 := 0;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_3: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_305: int);
  free ensures {:va_keep} Tmp_305 == 0 || Tmp_305 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_3: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_305: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_305 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_305 := -1073741823;
    goto L1;
}



procedure {:origName "_sdv_init51"} {:osmodel} _sdv_init51();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == 0;
  free ensures {:va_keep} sdv_irql_previous_2 == 0;
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == 0;
  free ensures {:va_keep} sdv_irql_previous_4 == 0;
  free ensures {:va_keep} sdv_irql_previous_3 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init51"} {:osmodel} _sdv_init51()
{
  var vslice_dummy_var_92: int;

  anon0:
    call {:si_unique_call 694} vslice_dummy_var_92 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    sdv_irql_current := 0;
    sdv_irql_previous := 0;
    sdv_irql_previous_2 := 0;
    sdv_irql_previous_3 := 0;
    sdv_irql_previous_4 := 0;
    sdv_irql_previous_5 := 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_ke_dpc == li2bplFunctionConstant1053;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant1056;
    assume sdv_p_devobj_top == sdv_devobj_top;
    assume sdv_MmMapIoSpace_int == 0;
    return;
}



procedure {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_13: int) returns (Tmp_309: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_13: int) returns (Tmp_309: int)
{
  var {:pointer} ioWorkItem: int;
  var {:pointer} sdv_178: int;
  var {:scalar} Tmp_310: int;

  anon0:
    call {:si_unique_call 695} sdv_178 := __HAVOC_malloc(1);
    ioWorkItem := sdv_178;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ioWorkItem == 0;
    Tmp_310 := 0;
    goto L27;

  L27:
    assume Tmp_310 != 0;
    assume {:nonnull} ioWorkItem != 0;
    assume ioWorkItem > 0;
    Tmp_309 := ioWorkItem;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} ioWorkItem != 0;
    Tmp_310 := 1;
    goto L27;

  anon6_Then:
    Tmp_309 := 0;
    goto L1;
}



procedure {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int)
{
  var {:pointer} pdrivo: int;
  var vslice_dummy_var_93: int;

  anon0:
    call {:si_unique_call 696} vslice_dummy_var_93 := __HAVOC_malloc(4);
    pdrivo := actual_pdrivo;
    call {:si_unique_call 697} PptUnload(pdrivo);
    return;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_314: int);
  free ensures {:va_keep} Tmp_314 == -1073741772 || Tmp_314 == -1073741824 || Tmp_314 == -1073741789 || Tmp_314 == -1073741670 || Tmp_314 == -1073741808 || Tmp_314 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_314: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_314 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_314 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_314 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_314 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_314 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_314 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_316: int);
  free ensures {:va_keep} Tmp_316 == -1073741811 || Tmp_316 == -1073741670 || Tmp_316 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_316: int)
{
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_316 := -1073741811;
    goto L1;

  L1:
    return;

  anon5_Then:
    Tmp_316 := -1073741670;
    goto L1;

  anon6_Then:
    Tmp_316 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_94: int;

  anon0:
    call {:si_unique_call 698} vslice_dummy_var_94 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_95: int;

  anon0:
    call {:si_unique_call 699} vslice_dummy_var_95 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_14: int, actual_DevInstKeyType: int, actual_DesiredAccess_2: int, actual_DevInstRegKey: int) returns (Tmp_322: int);
  free ensures {:va_keep} Tmp_322 == -1073741811 || Tmp_322 == -1073741808 || Tmp_322 == -1073741823 || Tmp_322 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_14: int, actual_DevInstKeyType: int, actual_DesiredAccess_2: int, actual_DevInstRegKey: int) returns (Tmp_322: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_322 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_322 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_322 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_322 := 0;
    goto L1;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_3: int) returns (Tmp_324: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_3: int) returns (Tmp_324: int)
{
  var {:scalar} p_6: int;

  anon0:
    Tmp_324 := p_6;
    return;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_326: int);
  free ensures {:va_keep} Tmp_326 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_326: int)
{

  anon0:
    Tmp_326 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_328: int);
  free ensures {:va_keep} Tmp_328 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_328: int)
{

  anon0:
    Tmp_328 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_15: int, actual_Action: int) returns (Tmp_330: int);
  free ensures {:va_keep} Tmp_330 == -1073741823 || Tmp_330 == -1073741811 || Tmp_330 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_15: int, actual_Action: int) returns (Tmp_330: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_330 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_330 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_330 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int)
{
  var {:pointer} Event_3: int;
  var vslice_dummy_var_96: int;

  anon0:
    call {:si_unique_call 700} vslice_dummy_var_96 := __HAVOC_malloc(4);
    Event_3 := actual_Event_3;
    assume {:nonnull} Event_3 != 0;
    assume Event_3 > 0;
    return;
}



procedure {:origName "_sdv_init35"} _sdv_init35();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init35"} _sdv_init35()
{
  var vslice_dummy_var_97: int;

  anon0:
    call {:si_unique_call 701} vslice_dummy_var_97 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoClose"} PptFdoClose(actual_DeviceObject_16: int, actual_Irp_8: int) returns (Tmp_336: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_336 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoClose"} PptFdoClose(actual_DeviceObject_16: int, actual_Irp_8: int) returns (Tmp_336: int)
{
  var {:scalar} sdv_184: int;
  var {:pointer} Tmp_337: int;
  var {:pointer} fdx_1: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;

  anon0:
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_8 := actual_Irp_8;
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc fdx_1;
    call {:si_unique_call 702} sdv_do_paged_code_check();
    call {:si_unique_call 703} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 704} Tmp_337 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    havoc vslice_dummy_var_127;
    Mem_T.INT4[Tmp_337] := vslice_dummy_var_127;
    call {:si_unique_call 705} sdv_184 := sdv_InterlockedDecrement(Tmp_337);
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 0 > sdv_184;
    call {:si_unique_call 706} Tmp_337 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    havoc vslice_dummy_var_128;
    Mem_T.INT4[Tmp_337] := vslice_dummy_var_128;
    call {:si_unique_call 707} vslice_dummy_var_98 := sdv_InterlockedIncrement(Tmp_337);
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} fdx_1 != 0;
    assume fdx_1 > 0;
    goto L12;

  L12:
    call {:si_unique_call 708} ExReleaseFastMutex(0);
    call {:si_unique_call 709} Tmp_336 := P4CompleteRequest(Irp_8, 0, 0);
    return;

  anon6_Then:
    assume {:partition} sdv_184 >= 0;
    goto L12;

  anon5_Then:
    goto L12;
}



procedure {:origName "SppQueryDeviceId"} SppQueryDeviceId(actual_Pdx_10: int, actual_DeviceIdBuffer: int, actual_BufferSize_2: int, actual_DeviceIdSize: int, actual_bReturnRawString: int) returns (Tmp_338: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SppQueryDeviceId"} SppQueryDeviceId(actual_Pdx_10: int, actual_DeviceIdBuffer: int, actual_BufferSize_2: int, actual_DeviceIdSize: int, actual_bReturnRawString: int) returns (Tmp_338: int)
{
  var {:pointer} idBuffer: int;
  var {:pointer} Pdx_10: int;
  var {:pointer} DeviceIdBuffer: int;
  var {:scalar} BufferSize_2: int;
  var {:pointer} DeviceIdSize: int;
  var {:scalar} bReturnRawString: int;

  anon0:
    Pdx_10 := actual_Pdx_10;
    DeviceIdBuffer := actual_DeviceIdBuffer;
    BufferSize_2 := actual_BufferSize_2;
    DeviceIdSize := actual_DeviceIdSize;
    bReturnRawString := actual_bReturnRawString;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 710} idBuffer := Par3QueryDeviceId(Pdx_10, DeviceIdBuffer, BufferSize_2, DeviceIdSize, bReturnRawString, 1);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  L12:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} idBuffer != 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} idBuffer != DeviceIdBuffer;
    call {:si_unique_call 711} sdv_ExFreePool(0);
    Tmp_338 := -1073741789;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} idBuffer == DeviceIdBuffer;
    Tmp_338 := 0;
    goto L1;

  anon12_Then:
    assume {:partition} idBuffer == 0;
    Tmp_338 := -1073741823;
    goto L1;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    call {:si_unique_call 712} idBuffer := Par3QueryDeviceId(Pdx_10, DeviceIdBuffer, BufferSize_2, DeviceIdSize, bReturnRawString, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SppCheckBusyDelay"} SppCheckBusyDelay(actual_Pdx_11: int, actual_WriteBuffer: int, actual_NumBytesToWrite: int) returns (Tmp_340: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_5);
  free ensures {:va_keep} Tmp_340 == 0 || Tmp_340 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SppCheckBusyDelay"} SppCheckBusyDelay(actual_Pdx_11: int, actual_WriteBuffer: int, actual_NumBytesToWrite: int) returns (Tmp_340: int)
{
  var {:scalar} i: int;
  var {:scalar} DeviceStatus: int;
  var {:scalar} NumberOfCalls: int;
  var {:scalar} maxTries: int;
  var {:scalar} BusyDelay: int;
  var {:pointer} Controller: int;
  var {:scalar} OldIrql: int;
  var {:pointer} Tmp_346: int;
  var {:scalar} End: int;
  var {:scalar} Tmp_350: int;
  var {:scalar} Start: int;
  var {:scalar} GetStatusTime: int;
  var {:scalar} CallOverhead: int;
  var {:scalar} PerfFreq: int;
  var {:pointer} Pdx_11: int;
  var {:pointer} WriteBuffer: int;
  var boogieTmp: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;

  anon0:
    call {:si_unique_call 713} vslice_dummy_var_99 := __HAVOC_malloc(20);
    call {:si_unique_call 714} vslice_dummy_var_100 := __HAVOC_malloc(20);
    call {:si_unique_call 715} vslice_dummy_var_101 := __HAVOC_malloc(20);
    call {:si_unique_call 716} vslice_dummy_var_102 := __HAVOC_malloc(20);
    call {:si_unique_call 717} End := __HAVOC_malloc(20);
    call {:si_unique_call 718} Start := __HAVOC_malloc(20);
    call {:si_unique_call 719} GetStatusTime := __HAVOC_malloc(20);
    call {:si_unique_call 720} CallOverhead := __HAVOC_malloc(20);
    call {:si_unique_call 721} PerfFreq := __HAVOC_malloc(20);
    Pdx_11 := actual_Pdx_11;
    WriteBuffer := actual_WriteBuffer;
    OldIrql := 0;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    havoc Controller;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    havoc BusyDelay;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    Tmp_340 := 0;
    goto L1;

  L1:
    return;

  anon71_Then:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] != 0;
    goto L25;

  L25:
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 722} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 723} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 724} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 725} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 726} boogieTmp := corral_nondet();
    call {:si_unique_call 727} DeviceStatus := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 728} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 729} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 730} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 731} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 732} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    assume {:nonnull} GetStatusTime != 0;
    assume GetStatusTime > 0;
    assume {:nonnull} Start != 0;
    assume Start > 0;
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 733} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 734} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 735} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 736} boogieTmp := corral_nondet();
    assume {:nonnull} Start != 0;
    assume Start > 0;
    call {:si_unique_call 737} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 738} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 739} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 740} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 741} boogieTmp := corral_nondet();
    assume {:nonnull} End != 0;
    assume End > 0;
    call {:si_unique_call 742} boogieTmp := corral_nondet();
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] != 0;
    goto L51;

  L51:
    assume {:nonnull} CallOverhead != 0;
    assume CallOverhead > 0;
    assume {:nonnull} End != 0;
    assume End > 0;
    assume {:nonnull} Start != 0;
    assume Start > 0;
    assume {:nonnull} CallOverhead != 0;
    assume CallOverhead > 0;
    assume {:nonnull} GetStatusTime != 0;
    assume GetStatusTime > 0;
    assume {:nonnull} GetStatusTime != 0;
    assume GetStatusTime > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} GetStatusTime != 0;
    assume GetStatusTime > 0;
    goto L54;

  L54:
    assume {:nonnull} GetStatusTime != 0;
    assume GetStatusTime > 0;
    assume {:nonnull} PerfFreq != 0;
    assume PerfFreq > 0;
    havoc NumberOfCalls;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} NumberOfCalls > 25;
    Tmp_350 := 25;
    goto L59;

  L59:
    maxTries := Tmp_350;
    i := 0;
    goto L61;

  L61:
    call {:si_unique_call 743} i, DeviceStatus := SppCheckBusyDelay_loop_L61(i, DeviceStatus, maxTries, Controller);
    goto L61_last;

  L61_last:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} maxTries > i;
    call {:si_unique_call 744} DeviceStatus := corral_nondet();
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} BAND(DeviceStatus, 8) != 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(DeviceStatus, 128) != 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} BAND(DeviceStatus, 16) == 0;
    goto L69;

  L69:
    i := i + 1;
    goto L69_dummy;

  L69_dummy:
    assume false;
    return;

  anon57_Then:
    assume {:partition} BAND(DeviceStatus, 16) != 0;
    goto L62;

  L62:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(DeviceStatus, 8) != 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} BAND(DeviceStatus, 128) != 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} BAND(DeviceStatus, 16) != 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} BusyDelay != 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] != 0;
    goto L86;

  L86:
    assume {:nonnull} WriteBuffer != 0;
    assume WriteBuffer > 0;
    i := 0;
    goto L109;

  L109:
    call {:si_unique_call 745} i, DeviceStatus := SppCheckBusyDelay_loop_L109(i, DeviceStatus, NumberOfCalls, Controller);
    goto L109_last;

  L109_last:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} NumberOfCalls > i;
    call {:si_unique_call 746} DeviceStatus := corral_nondet();
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} BAND(DeviceStatus, 128) != 0;
    i := i + 1;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    assume false;
    return;

  anon65_Then:
    assume {:partition} BAND(DeviceStatus, 128) == 0;
    goto L110;

  L110:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] != 0;
    goto L122;

  L122:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} i != 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} i == NumberOfCalls;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    goto L127;

  L127:
    Tmp_340 := 1;
    goto L1;

  anon67_Then:
    assume {:partition} i != NumberOfCalls;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    goto L127;

  anon66_Then:
    assume {:partition} i == 0;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    assume {:nonnull} Pdx_11 != 0;
    assume Pdx_11 > 0;
    goto L127;

  anon64_Then:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] == 0;
    call {:si_unique_call 747} sdv_KeLowerIrql(OldIrql);
    goto L122;

  anon63_Then:
    assume {:partition} i >= NumberOfCalls;
    goto L110;

  anon62_Then:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] == 0;
    call {:si_unique_call 748} Tmp_346 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    Mem_T.INT4[Tmp_346] := OldIrql;
    call {:si_unique_call 749} sdv_KeRaiseIrql(2, Tmp_346);
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    OldIrql := Mem_T.INT4[Tmp_346];
    goto L86;

  anon60_Then:
    assume {:partition} BusyDelay == 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] != 0;
    goto L133;

  L133:
    assume {:nonnull} WriteBuffer != 0;
    assume WriteBuffer > 0;
    i := 0;
    goto L153;

  L153:
    call {:si_unique_call 750} i, DeviceStatus := SppCheckBusyDelay_loop_L153(i, DeviceStatus, NumberOfCalls, Controller);
    goto L153_last;

  L153_last:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} NumberOfCalls > i;
    call {:si_unique_call 751} DeviceStatus := corral_nondet();
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} BAND(DeviceStatus, 128) != 0;
    i := i + 1;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:partition} BAND(DeviceStatus, 128) == 0;
    goto L154;

  L154:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] == 0;
    call {:si_unique_call 752} sdv_KeLowerIrql(OldIrql);
    goto L122;

  anon69_Then:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] != 0;
    goto L122;

  anon68_Then:
    assume {:partition} i >= NumberOfCalls;
    goto L154;

  anon61_Then:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] == 0;
    call {:si_unique_call 753} Tmp_346 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    Mem_T.INT4[Tmp_346] := OldIrql;
    call {:si_unique_call 754} sdv_KeRaiseIrql(2, Tmp_346);
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    OldIrql := Mem_T.INT4[Tmp_346];
    goto L133;

  anon59_Then:
    assume {:partition} BAND(DeviceStatus, 16) == 0;
    goto L75;

  L75:
    Tmp_340 := 0;
    goto L1;

  anon75_Then:
    goto L75;

  anon58_Then:
    assume {:partition} BAND(DeviceStatus, 128) == 0;
    goto L75;

  anon54_Then:
    assume {:partition} BAND(DeviceStatus, 8) == 0;
    goto L75;

  anon74_Then:
    goto L69;

  anon56_Then:
    assume {:partition} BAND(DeviceStatus, 128) == 0;
    goto L69;

  anon55_Then:
    assume {:partition} BAND(DeviceStatus, 8) == 0;
    goto L69;

  anon53_Then:
    assume {:partition} i >= maxTries;
    goto L62;

  anon73_Then:
    assume {:partition} 25 >= NumberOfCalls;
    Tmp_350 := NumberOfCalls;
    goto L59;

  anon72_Then:
    goto L54;

  anon52_Then:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] == 0;
    call {:si_unique_call 755} sdv_KeLowerIrql(OldIrql);
    goto L51;

  anon51_Then:
    assume {:partition} Mem_T.INT4[SppNoRaiseIrql] == 0;
    call {:si_unique_call 756} Tmp_346 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    Mem_T.INT4[Tmp_346] := OldIrql;
    call {:si_unique_call 757} sdv_KeRaiseIrql(2, Tmp_346);
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    OldIrql := Mem_T.INT4[Tmp_346];
    goto L25;
}



procedure {:origName "SppWrite"} SppWrite(actual_Pdx_12: int, actual_Buffer_2: int, actual_BytesToWrite: int, actual_BytesTransferred_2: int) returns (Tmp_357: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} Tmp_357 == -1073741536 || Tmp_357 == 15 || Tmp_357 == 17 || Tmp_357 == -1073741667 || Tmp_357 == 16 || Tmp_357 == 14 || Tmp_357 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SppWrite"} SppWrite(actual_Pdx_12: int, actual_Buffer_2: int, actual_BytesToWrite: int, actual_BytesTransferred_2: int) returns (Tmp_357: int)
{
  var {:scalar} DoDelays: int;
  var {:scalar} Tmp_358: int;
  var {:scalar} DeviceStatus_1: int;
  var {:scalar} Tmp_360: int;
  var {:scalar} CountDown: int;
  var {:scalar} Tmp_361: int;
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:scalar} Tmp_365: int;
  var {:scalar} sdv_198: int;
  var {:pointer} Tmp_369: int;
  var {:scalar} MaxBytes: int;
  var {:scalar} Tmp_372: int;
  var {:scalar} Tmp_373: int;
  var {:pointer} Tmp_374: int;
  var {:scalar} Tmp_376: int;
  var {:scalar} Tmp_377: int;
  var {:scalar} PortFree: int;
  var {:scalar} Tmp_380: int;
  var {:scalar} Tmp_381: int;
  var {:scalar} Tmp_382: int;
  var {:pointer} IrpBuffer: int;
  var {:scalar} sdv_200: int;
  var {:scalar} TimerStart: int;
  var {:scalar} Tmp_383: int;
  var {:scalar} StartOfSpin: int;
  var {:scalar} MaxBusyDelay: int;
  var {:scalar} Difference: int;
  var {:scalar} sdv_204: int;
  var {:scalar} NumBytesWritten: int;
  var {:scalar} Tmp_387: int;
  var {:pointer} s_p_e_c_i_a_l_2: int;
  var {:scalar} Tmp_389: int;
  var {:scalar} Tmp_392: int;
  var {:pointer} Tmp_394: int;
  var {:pointer} Tmp_395: int;
  var {:scalar} Tmp_398: int;
  var {:scalar} LoopNumber: int;
  var {:scalar} Tmp_399: int;
  var {:scalar} sdv_208: int;
  var {:scalar} NumberOfBusyChecks: int;
  var {:scalar} Tmp_401: int;
  var {:scalar} Tmp_402: int;
  var {:scalar} status_11: int;
  var {:scalar} Tmp_404: int;
  var {:scalar} Tmp_405: int;
  var {:scalar} Tmp_406: int;
  var {:scalar} Tmp_407: int;
  var {:scalar} Tmp_408: int;
  var {:scalar} Tmp_411: int;
  var {:scalar} Tmp_412: int;
  var {:scalar} NextQuery: int;
  var {:scalar} Tmp_415: int;
  var {:pointer} Pdx_12: int;
  var {:pointer} Buffer_2: int;
  var {:scalar} BytesToWrite: int;
  var {:pointer} BytesTransferred_2: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_132: int;

  anon0:
    call {:si_unique_call 758} StartOfSpin := __HAVOC_malloc(20);
    call {:si_unique_call 759} Difference := __HAVOC_malloc(20);
    call {:si_unique_call 760} NextQuery := __HAVOC_malloc(20);
    Pdx_12 := actual_Pdx_12;
    Buffer_2 := actual_Buffer_2;
    BytesToWrite := actual_BytesToWrite;
    BytesTransferred_2 := actual_BytesTransferred_2;
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := 0;
    IrpBuffer := Buffer_2;
    MaxBytes := BytesToWrite;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    havoc TimerStart;
    CountDown := TimerStart;
    NumberOfBusyChecks := 9;
    MaxBusyDelay := 0;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto L29;

  L29:
    call {:si_unique_call 761} DoDelays, Tmp_358, DeviceStatus_1, Tmp_360, CountDown, s_p_e_c_i_a_l_1, sdv_198, Tmp_369, Tmp_372, Tmp_373, Tmp_374, Tmp_376, Tmp_377, PortFree, Tmp_382, sdv_200, Tmp_383, MaxBusyDelay, sdv_204, NumBytesWritten, Tmp_387, s_p_e_c_i_a_l_2, Tmp_389, Tmp_392, Tmp_394, Tmp_395, Tmp_398, LoopNumber, Tmp_399, sdv_208, NumberOfBusyChecks, Tmp_402, Tmp_404, Tmp_405, Tmp_406, Tmp_407, Tmp_408, Tmp_411, Tmp_415, BytesToWrite, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106 := SppWrite_loop_L29(DoDelays, Tmp_358, DeviceStatus_1, Tmp_360, CountDown, s_p_e_c_i_a_l_1, sdv_198, Tmp_369, MaxBytes, Tmp_372, Tmp_373, Tmp_374, Tmp_376, Tmp_377, PortFree, Tmp_382, IrpBuffer, sdv_200, TimerStart, Tmp_383, StartOfSpin, MaxBusyDelay, Difference, sdv_204, NumBytesWritten, Tmp_387, s_p_e_c_i_a_l_2, Tmp_389, Tmp_392, Tmp_394, Tmp_395, Tmp_398, LoopNumber, Tmp_399, sdv_208, NumberOfBusyChecks, Tmp_402, Tmp_404, Tmp_405, Tmp_406, Tmp_407, Tmp_408, Tmp_411, NextQuery, Tmp_415, Pdx_12, BytesToWrite, BytesTransferred_2, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106);
    goto L29_last;

  L29_last:
    LoopNumber := 512;
    goto anon358_Then, anon358_Else;

  anon358_Else:
    assume {:partition} LoopNumber > BytesToWrite;
    LoopNumber := BytesToWrite;
    goto L31;

  L31:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    havoc vslice_dummy_var_129;
    havoc vslice_dummy_var_130;
    call {:si_unique_call 762} NumBytesWritten := SppWriteLoopPI(vslice_dummy_var_129, IrpBuffer, LoopNumber, vslice_dummy_var_130);
    goto L44;

  L44:
    goto anon261_Then, anon261_Else;

  anon261_Else:
    assume {:partition} NumBytesWritten != 0;
    CountDown := TimerStart;
    BytesToWrite := BytesToWrite - NumBytesWritten;
    goto L45;

  L45:
    goto anon262_Then, anon262_Else;

  anon262_Else:
    assume {:partition} BytesToWrite != 0;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    havoc Tmp_394;
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    goto anon359_Then, anon359_Else;

  anon359_Else:
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := MaxBytes - BytesToWrite;
    status_11 := -1073741536;
    goto L55;

  L55:
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    Tmp_357 := status_11;
    return;

  anon359_Then:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    call {:si_unique_call 763} DeviceStatus_1 := corral_nondet();
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon360_Then, anon360_Else;

  anon360_Else:
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L62;

  L62:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto L69;

  L69:
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:partition} CountDown > 0;
    CountDown := CountDown - 1;
    call {:si_unique_call 764} ParFreePort(Pdx_12);
    call {:si_unique_call 765} vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    call {:si_unique_call 766} sdv_200 := ParAllocPort(Pdx_12);
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume {:partition} sdv_200 == 0;
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := MaxBytes - BytesToWrite;
    status_11 := 17;
    goto L55;

  anon269_Then:
    assume {:partition} sdv_200 != 0;
    goto anon269_Then_dummy;

  anon269_Then_dummy:
    assume false;
    return;

  anon268_Then:
    assume {:partition} 0 >= CountDown;
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := MaxBytes - BytesToWrite;
    goto anon361_Then, anon361_Else;

  anon361_Else:
    assume {:partition} 0 != 1;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    goto anon362_Then, anon362_Else;

  anon362_Else:
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    Tmp_380 := 1;
    goto L94;

  L94:
    Tmp_361 := Tmp_380;
    goto L95;

  L95:
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume {:partition} Tmp_361 != 0;
    status_11 := 16;
    goto L55;

  anon272_Then:
    assume {:partition} Tmp_361 == 0;
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume {:partition} 0 != 1;
    goto anon363_Then, anon363_Else;

  anon363_Else:
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_412 := 1;
    goto L108;

  L108:
    Tmp_401 := Tmp_412;
    goto L109;

  L109:
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume {:partition} Tmp_401 != 0;
    status_11 := -1073741667;
    goto L55;

  anon279_Then:
    assume {:partition} Tmp_401 == 0;
    status_11 := 14;
    goto L55;

  anon278_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L102;

  L102:
    Tmp_412 := 0;
    goto L108;

  anon277_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L102;

  anon276_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L102;

  anon275_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L102;

  anon363_Then:
    goto L102;

  anon273_Then:
    assume {:partition} 0 == 1;
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon281_Then, anon281_Else;

  anon281_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_365 := 1;
    goto L120;

  L120:
    Tmp_401 := Tmp_365;
    goto L109;

  anon283_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L114;

  L114:
    Tmp_365 := 0;
    goto L120;

  anon282_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L114;

  anon281_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L114;

  anon280_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L114;

  anon274_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L114;

  anon271_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto L89;

  L89:
    Tmp_380 := 0;
    goto L94;

  anon362_Then:
    goto L89;

  anon270_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L89;

  anon361_Then:
    assume {:partition} 0 == 1;
    goto anon364_Then, anon364_Else;

  anon364_Else:
    goto anon365_Then, anon365_Else;

  anon365_Else:
    goto anon366_Then, anon366_Else;

  anon366_Else:
    goto anon284_Then, anon284_Else;

  anon284_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    Tmp_381 := 1;
    goto L129;

  L129:
    Tmp_361 := Tmp_381;
    goto L95;

  anon284_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto L122;

  L122:
    Tmp_381 := 0;
    goto L129;

  anon366_Then:
    goto L122;

  anon365_Then:
    goto L122;

  anon364_Then:
    goto L122;

  anon264_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume {:partition} 0 != 1;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    goto anon367_Then, anon367_Else;

  anon367_Else:
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    Tmp_382 := 1;
    goto L137;

  L137:
    Tmp_402 := Tmp_382;
    goto L138;

  L138:
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume {:partition} Tmp_402 == 0;
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume {:partition} 0 != 1;
    goto anon368_Then, anon368_Else;

  anon368_Else:
    goto anon369_Then, anon369_Else;

  anon369_Else:
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    Tmp_373 := 1;
    goto L148;

  L148:
    Tmp_398 := Tmp_373;
    goto L149;

  L149:
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume {:partition} Tmp_398 != 0;
    goto L151;

  L151:
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := MaxBytes - BytesToWrite;
    goto anon370_Then, anon370_Else;

  anon370_Else:
    assume {:partition} 0 != 1;
    goto anon371_Then, anon371_Else;

  anon371_Else:
    goto anon372_Then, anon372_Else;

  anon372_Else:
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    Tmp_407 := 1;
    goto L161;

  L161:
    Tmp_360 := Tmp_407;
    goto L162;

  L162:
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume {:partition} Tmp_360 != 0;
    status_11 := 15;
    goto L55;

  anon293_Then:
    assume {:partition} Tmp_360 == 0;
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L169;

  L169:
    status_11 := -1073741667;
    goto L55;

  anon297_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto L166;

  L166:
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume {:partition} 0 != 1;
    goto anon373_Then, anon373_Else;

  anon373_Else:
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_415 := 1;
    goto L180;

  L180:
    Tmp_404 := Tmp_415;
    goto L181;

  L181:
    goto anon303_Then, anon303_Else;

  anon303_Else:
    assume {:partition} Tmp_404 == 0;
    goto L183;

  L183:
    Tmp_374 := KeTickCount;
    assume {:nonnull} Tmp_374 != 0;
    assume Tmp_374 > 0;
    havoc s_p_e_c_i_a_l_1;
    goto L185;

  L185:
    call {:si_unique_call 767} SppWrite_loop_L185(s_p_e_c_i_a_l_1, StartOfSpin);
    goto L185_last;

  L185_last:
    assume {:nonnull} StartOfSpin != 0;
    assume StartOfSpin > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} StartOfSpin != 0;
    assume StartOfSpin > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} StartOfSpin != 0;
    assume StartOfSpin > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    goto anon374_Then, anon374_Else;

  anon374_Else:
    DoDelays := 0;
    goto L193;

  L193:
    call {:si_unique_call 768} DoDelays, Tmp_358, DeviceStatus_1, CountDown, sdv_198, Tmp_369, Tmp_376, PortFree, Tmp_383, sdv_204, s_p_e_c_i_a_l_2, Tmp_395, Tmp_399, sdv_208, Tmp_406, Tmp_408, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106 := SppWrite_loop_L193(DoDelays, Tmp_358, DeviceStatus_1, CountDown, sdv_198, Tmp_369, Tmp_376, PortFree, Tmp_383, StartOfSpin, Difference, sdv_204, s_p_e_c_i_a_l_2, Tmp_395, Tmp_399, sdv_208, Tmp_406, Tmp_408, NextQuery, Pdx_12, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106);
    goto L193_last;

  L193_last:
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume {:partition} DoDelays == 0;
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    havoc vslice_dummy_var_131;
    call {:si_unique_call 769} sdv_208 := PptQueryNumWaiters(vslice_dummy_var_131);
    goto anon331_Then, anon331_Else;

  anon331_Else:
    assume {:partition} sdv_208 != 0;
    call {:si_unique_call 770} ParFreePort(Pdx_12);
    PortFree := 1;
    goto L285;

  L285:
    Tmp_395 := KeTickCount;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    havoc s_p_e_c_i_a_l_2;
    goto L287;

  L287:
    call {:si_unique_call 771} SppWrite_loop_L287(s_p_e_c_i_a_l_2, NextQuery);
    goto L287_last;

  L287_last:
    assume {:nonnull} NextQuery != 0;
    assume NextQuery > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} NextQuery != 0;
    assume NextQuery > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} NextQuery != 0;
    assume NextQuery > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    assume {:nonnull} Difference != 0;
    assume Difference > 0;
    assume {:nonnull} NextQuery != 0;
    assume NextQuery > 0;
    assume {:nonnull} StartOfSpin != 0;
    assume StartOfSpin > 0;
    call {:si_unique_call 772} sdv_198 := corral_nondet();
    assume {:nonnull} Difference != 0;
    assume Difference > 0;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    CountDown := CountDown - 1;
    DoDelays := 1;
    goto L213;

  L213:
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume {:partition} 0 >= CountDown;
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := MaxBytes - BytesToWrite;
    status_11 := 17;
    goto L55;

  anon305_Then:
    assume {:partition} CountDown > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:partition} PortFree != 0;
    call {:si_unique_call 773} sdv_204 := ParAllocPort(Pdx_12);
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume {:partition} sdv_204 == 0;
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := MaxBytes - BytesToWrite;
    status_11 := 17;
    goto L55;

  anon307_Then:
    assume {:partition} sdv_204 != 0;
    goto L218;

  L218:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    call {:si_unique_call 774} DeviceStatus_1 := corral_nondet();
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon375_Then, anon375_Else;

  anon375_Else:
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L231;

  L231:
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume {:partition} 0 != 1;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    goto anon377_Then, anon377_Else;

  anon377_Else:
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    Tmp_383 := 1;
    goto L247;

  L247:
    Tmp_406 := Tmp_383;
    goto L248;

  L248:
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:partition} Tmp_406 == 0;
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon318_Then, anon318_Else;

  anon318_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto L250;

  L250:
    goto anon316_Then, anon316_Else;

  anon316_Else:
    assume {:partition} 0 != 1;
    goto anon378_Then, anon378_Else;

  anon378_Else:
    goto anon320_Then, anon320_Else;

  anon320_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_376 := 1;
    goto L262;

  L262:
    Tmp_408 := Tmp_376;
    goto L263;

  L263:
    goto anon324_Then, anon324_Else;

  anon324_Else:
    assume {:partition} Tmp_408 == 0;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    havoc Tmp_369;
    assume {:nonnull} Tmp_369 != 0;
    assume Tmp_369 > 0;
    goto anon379_Then, anon379_Else;

  anon379_Else:
    goto anon379_Else_dummy;

  anon379_Else_dummy:
    assume false;
    return;

  anon379_Then:
    goto anon379_Then_dummy;

  anon379_Then_dummy:
    assume false;
    return;

  anon324_Then:
    assume {:partition} Tmp_408 != 0;
    goto anon324_Then_dummy;

  anon324_Then_dummy:
    assume false;
    return;

  anon323_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L256;

  L256:
    Tmp_376 := 0;
    goto L262;

  anon322_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L256;

  anon321_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L256;

  anon320_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L256;

  anon378_Then:
    goto L256;

  anon316_Then:
    assume {:partition} 0 == 1;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_399 := 1;
    goto L271;

  L271:
    Tmp_408 := Tmp_399;
    goto L263;

  anon328_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L265;

  L265:
    Tmp_399 := 0;
    goto L271;

  anon327_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L265;

  anon326_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L265;

  anon325_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L265;

  anon319_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L265;

  anon318_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto anon318_Then_dummy;

  anon318_Then_dummy:
    assume false;
    return;

  anon317_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L250;

  anon315_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L250;

  anon314_Then:
    assume {:partition} Tmp_406 != 0;
    goto anon314_Then_dummy;

  anon314_Then_dummy:
    assume false;
    return;

  anon313_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L242;

  L242:
    Tmp_383 := 0;
    goto L247;

  anon377_Then:
    goto L242;

  anon376_Then:
    goto L242;

  anon312_Then:
    assume {:partition} 0 == 1;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    goto anon329_Then, anon329_Else;

  anon329_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    Tmp_358 := 1;
    goto L277;

  L277:
    Tmp_406 := Tmp_358;
    goto L248;

  anon330_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L273;

  L273:
    Tmp_358 := 0;
    goto L277;

  anon329_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L273;

  anon380_Then:
    goto L273;

  anon309_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon309_Then_dummy;

  anon309_Then_dummy:
    assume false;
    return;

  anon311_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon311_Then_dummy;

  anon311_Then_dummy:
    assume false;
    return;

  anon375_Then:
    goto L231;

  anon310_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L231;

  anon308_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L231;

  anon306_Then:
    assume {:partition} PortFree == 0;
    goto L218;

  anon332_Then:
    goto L213;

  anon381_Then:
    goto anon381_Then_dummy;

  anon381_Then_dummy:
    assume false;
    return;

  anon331_Then:
    assume {:partition} sdv_208 == 0;
    PortFree := 0;
    goto L285;

  anon304_Then:
    assume {:partition} DoDelays != 0;
    call {:si_unique_call 775} ParFreePort(Pdx_12);
    PortFree := 1;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    call {:si_unique_call 776} vslice_dummy_var_105 := corral_nondet();
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    call {:si_unique_call 777} vslice_dummy_var_106 := corral_nondet();
    call {:si_unique_call 778} vslice_dummy_var_104 := KeDelayExecutionThread(0, 0, 0);
    CountDown := CountDown - 1;
    goto L213;

  anon374_Then:
    goto anon374_Then_dummy;

  anon374_Then_dummy:
    assume false;
    return;

  anon303_Then:
    assume {:partition} Tmp_404 != 0;
    goto L169;

  anon302_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L174;

  L174:
    Tmp_415 := 0;
    goto L180;

  anon301_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L174;

  anon300_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L174;

  anon299_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L174;

  anon373_Then:
    goto L174;

  anon295_Then:
    assume {:partition} 0 == 1;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon333_Then, anon333_Else;

  anon333_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon334_Then, anon334_Else;

  anon334_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon335_Then, anon335_Else;

  anon335_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon336_Then, anon336_Else;

  anon336_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_377 := 1;
    goto L309;

  L309:
    Tmp_404 := Tmp_377;
    goto L181;

  anon336_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L303;

  L303:
    Tmp_377 := 0;
    goto L309;

  anon335_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L303;

  anon334_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L303;

  anon333_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L303;

  anon298_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L303;

  anon296_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L166;

  anon294_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L166;

  anon292_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L156;

  L156:
    Tmp_407 := 0;
    goto L161;

  anon372_Then:
    goto L156;

  anon371_Then:
    goto L156;

  anon370_Then:
    assume {:partition} 0 == 1;
    goto anon382_Then, anon382_Else;

  anon382_Else:
    goto anon337_Then, anon337_Else;

  anon337_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon338_Then, anon338_Else;

  anon338_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    Tmp_372 := 1;
    goto L315;

  L315:
    Tmp_360 := Tmp_372;
    goto L162;

  anon338_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L311;

  L311:
    Tmp_372 := 0;
    goto L315;

  anon337_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L311;

  anon382_Then:
    goto L311;

  anon290_Then:
    assume {:partition} Tmp_398 == 0;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    goto anon340_Then, anon340_Else;

  anon340_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto L316;

  L316:
    goto anon339_Then, anon339_Else;

  anon339_Else:
    assume {:partition} 0 != 1;
    goto anon383_Then, anon383_Else;

  anon383_Else:
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon345_Then, anon345_Else;

  anon345_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_389 := 1;
    goto L328;

  L328:
    Tmp_405 := Tmp_389;
    goto L329;

  L329:
    goto anon347_Then, anon347_Else;

  anon347_Else:
    assume {:partition} Tmp_405 == 0;
    goto L183;

  anon347_Then:
    assume {:partition} Tmp_405 != 0;
    goto L151;

  anon346_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L322;

  L322:
    Tmp_389 := 0;
    goto L328;

  anon345_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L322;

  anon344_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L322;

  anon343_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L322;

  anon383_Then:
    goto L322;

  anon339_Then:
    assume {:partition} 0 == 1;
    goto anon342_Then, anon342_Else;

  anon342_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon349_Then, anon349_Else;

  anon349_Else:
    assume {:partition} BAND(DeviceStatus_1, 32) != 0;
    goto anon350_Then, anon350_Else;

  anon350_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:partition} BAND(DeviceStatus_1, 8) != 0;
    Tmp_411 := 1;
    goto L336;

  L336:
    Tmp_405 := Tmp_411;
    goto L329;

  anon351_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L330;

  L330:
    Tmp_411 := 0;
    goto L336;

  anon350_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L330;

  anon349_Then:
    assume {:partition} BAND(DeviceStatus_1, 32) == 0;
    goto L330;

  anon348_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L330;

  anon342_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L330;

  anon341_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    goto L151;

  anon340_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L316;

  anon291_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L316;

  anon289_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L143;

  L143:
    Tmp_373 := 0;
    goto L148;

  anon369_Then:
    goto L143;

  anon368_Then:
    goto L143;

  anon288_Then:
    assume {:partition} 0 == 1;
    goto anon384_Then, anon384_Else;

  anon384_Else:
    goto anon352_Then, anon352_Else;

  anon352_Else:
    assume {:partition} BAND(DeviceStatus_1, 64) != 0;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    assume {:partition} BAND(DeviceStatus_1, 128) != 0;
    Tmp_392 := 1;
    goto L342;

  L342:
    Tmp_398 := Tmp_392;
    goto L149;

  anon353_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L338;

  L338:
    Tmp_392 := 0;
    goto L342;

  anon352_Then:
    assume {:partition} BAND(DeviceStatus_1, 64) == 0;
    goto L338;

  anon384_Then:
    goto L338;

  anon287_Then:
    assume {:partition} Tmp_402 != 0;
    goto L69;

  anon286_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto L132;

  L132:
    Tmp_382 := 0;
    goto L137;

  anon367_Then:
    goto L132;

  anon285_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L132;

  anon267_Then:
    assume {:partition} 0 == 1;
    goto anon385_Then, anon385_Else;

  anon385_Else:
    goto anon386_Then, anon386_Else;

  anon386_Else:
    goto anon387_Then, anon387_Else;

  anon387_Else:
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:partition} BAND(DeviceStatus_1, 16) == 0;
    Tmp_387 := 1;
    goto L351;

  L351:
    Tmp_402 := Tmp_387;
    goto L138;

  anon354_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto L344;

  L344:
    Tmp_387 := 0;
    goto L351;

  anon387_Then:
    goto L344;

  anon386_Then:
    goto L344;

  anon385_Then:
    goto L344;

  anon266_Then:
    assume {:partition} BAND(DeviceStatus_1, 16) != 0;
    goto anon266_Then_dummy;

  anon266_Then_dummy:
    assume false;
    return;

  anon360_Then:
    goto L62;

  anon265_Then:
    assume {:partition} BAND(DeviceStatus_1, 128) == 0;
    goto L62;

  anon263_Then:
    assume {:partition} BAND(DeviceStatus_1, 8) == 0;
    goto L62;

  anon262_Then:
    assume {:partition} BytesToWrite == 0;
    assume {:nonnull} BytesTransferred_2 != 0;
    assume BytesTransferred_2 > 0;
    Mem_T.INT4[BytesTransferred_2] := MaxBytes;
    status_11 := 0;
    goto L55;

  anon261_Then:
    assume {:partition} NumBytesWritten == 0;
    goto L45;

  anon260_Then:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    havoc vslice_dummy_var_132;
    call {:si_unique_call 779} NumBytesWritten := SppWriteLoopPI(vslice_dummy_var_132, IrpBuffer, LoopNumber, 1);
    goto L44;

  anon259_Then:
    call {:si_unique_call 780} NumBytesWritten := SppCheckBusyDelay(Pdx_12, IrpBuffer, LoopNumber);
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    havoc MaxBusyDelay;
    NumberOfBusyChecks := 10;
    goto L358;

  L358:
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:partition} NumberOfBusyChecks != 0;
    NumberOfBusyChecks := NumberOfBusyChecks - 1;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto L44;

  anon357_Then:
    assume {:partition} NumberOfBusyChecks == 0;
    assume {:nonnull} Pdx_12 != 0;
    assume Pdx_12 > 0;
    goto L44;

  anon356_Then:
    goto L358;

  anon355_Then:
    goto L44;

  anon358_Then:
    assume {:partition} BytesToWrite >= LoopNumber;
    goto L31;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_107: int;

  anon0:
    call {:si_unique_call 781} vslice_dummy_var_107 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SppWriteLoopPI"} SppWriteLoopPI(actual_Controller_1: int, actual_WriteBuffer_1: int, actual_NumBytesToWrite_1: int, actual_BusyDelay_1: int) returns (Tmp_420: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SppWriteLoopPI"} SppWriteLoopPI(actual_Controller_1: int, actual_WriteBuffer_1: int, actual_NumBytesToWrite_1: int, actual_BusyDelay_1: int) returns (Tmp_420: int)
{
  var {:scalar} i_1: int;
  var {:scalar} DeviceStatus_2: int;
  var {:scalar} sdv_210: int;
  var {:pointer} Controller_1: int;
  var {:pointer} WriteBuffer_1: int;
  var {:scalar} NumBytesToWrite_1: int;
  var {:scalar} BusyDelay_1: int;

  anon0:
    Controller_1 := actual_Controller_1;
    WriteBuffer_1 := actual_WriteBuffer_1;
    NumBytesToWrite_1 := actual_NumBytesToWrite_1;
    BusyDelay_1 := actual_BusyDelay_1;
    call {:si_unique_call 782} sdv_210 := sdv_KeGetCurrentIrql();
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_210 != 0;
    goto L12;

  L12:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BusyDelay_1 != 0;
    goto L14;

  L14:
    i_1 := 0;
    goto L15;

  L15:
    call {:si_unique_call 783} i_1, DeviceStatus_2 := SppWriteLoopPI_loop_L15(i_1, DeviceStatus_2, Controller_1, WriteBuffer_1, NumBytesToWrite_1);
    goto L15_last;

  L15_last:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} NumBytesToWrite_1 > i_1;
    call {:si_unique_call 784} DeviceStatus_2 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(DeviceStatus_2, 8) != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} BAND(DeviceStatus_2, 128) != 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(DeviceStatus_2, 16) != 0;
    assume {:nonnull} WriteBuffer_1 != 0;
    assume WriteBuffer_1 > 0;
    i_1 := i_1 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} BAND(DeviceStatus_2, 16) == 0;
    goto L16;

  L16:
    Tmp_420 := i_1;
    return;

  anon21_Then:
    goto L16;

  anon19_Then:
    assume {:partition} BAND(DeviceStatus_2, 128) == 0;
    goto L16;

  anon18_Then:
    assume {:partition} BAND(DeviceStatus_2, 8) == 0;
    goto L16;

  anon17_Then:
    assume {:partition} i_1 >= NumBytesToWrite_1;
    goto L16;

  anon16_Then:
    assume {:partition} BusyDelay_1 == 0;
    BusyDelay_1 := 1;
    goto L14;

  anon15_Then:
    assume {:partition} sdv_210 == 0;
    goto L12;
}



procedure {:origName "_sdv_init34"} _sdv_init34();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init34"} _sdv_init34()
{
  var vslice_dummy_var_108: int;

  anon0:
    call {:si_unique_call 785} vslice_dummy_var_108 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoCreateOpen"} PptFdoCreateOpen(actual_DeviceObject_17: int, actual_Irp_9: int) returns (Tmp_430: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_430 == -1073741738 || Tmp_430 == -1073741823 || Tmp_430 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoCreateOpen"} PptFdoCreateOpen(actual_DeviceObject_17: int, actual_Irp_9: int) returns (Tmp_430: int)
{
  var {:pointer} Tmp_431: int;
  var {:pointer} fdx_2: int;
  var {:scalar} status_12: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_9: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;

  anon0:
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_9 := actual_Irp_9;
    assume {:nonnull} DeviceObject_17 != 0;
    assume DeviceObject_17 > 0;
    havoc fdx_2;
    status_12 := 0;
    call {:si_unique_call 786} sdv_do_paged_code_check();
    assume {:nonnull} fdx_2 != 0;
    assume fdx_2 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    havoc vslice_dummy_var_133;
    call {:si_unique_call 787} Tmp_430 := P4CompleteRequest(Irp_9, -1073741738, vslice_dummy_var_133);
    goto L1;

  L1:
    return;

  anon5_Then:
    call {:si_unique_call 788} status_12 := PptAcquireRemoveLockOrFailIrp(DeviceObject_17, Irp_9);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_12 >= 0;
    call {:si_unique_call 789} ExAcquireFastMutex(0);
    call {:si_unique_call 790} Tmp_431 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    assume {:nonnull} fdx_2 != 0;
    assume fdx_2 > 0;
    havoc vslice_dummy_var_134;
    Mem_T.INT4[Tmp_431] := vslice_dummy_var_134;
    call {:si_unique_call 791} vslice_dummy_var_111 := sdv_InterlockedIncrement(Tmp_431);
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    assume {:nonnull} fdx_2 != 0;
    assume fdx_2 > 0;
    call {:si_unique_call 792} ExReleaseFastMutex(0);
    assume {:nonnull} fdx_2 != 0;
    assume fdx_2 > 0;
    call {:si_unique_call 793} vslice_dummy_var_109 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_2), Irp_9);
    call {:si_unique_call 794} vslice_dummy_var_110 := P4CompleteRequest(Irp_9, status_12, 0);
    Tmp_430 := status_12;
    goto L1;

  anon6_Then:
    assume {:partition} 0 > status_12;
    Tmp_430 := status_12;
    goto L1;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_112: int;

  anon0:
    call {:si_unique_call 795} vslice_dummy_var_112 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init39"} _sdv_init39();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init39"} _sdv_init39()
{
  var vslice_dummy_var_113: int;

  anon0:
    call {:si_unique_call 796} vslice_dummy_var_113 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ParEcpHaveReadData"} ParEcpHaveReadData(actual_Pdx_13: int) returns (Tmp_436: int);
  free ensures {:va_keep} Tmp_436 == 0 || Tmp_436 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParEcpHaveReadData"} ParEcpHaveReadData(actual_Pdx_13: int) returns (Tmp_436: int)
{
  var {:scalar} sdv_216: int;
  var {:scalar} Tmp_438: int;
  var {:pointer} Pdx_13: int;

  anon0:
    Pdx_13 := actual_Pdx_13;
    assume {:nonnull} Pdx_13 != 0;
    assume Pdx_13 > 0;
    call {:si_unique_call 797} sdv_216 := corral_nondet();
    Tmp_438 := BAND(sdv_216, 8);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 0 != Tmp_438;
    Tmp_436 := 0;
    goto L14;

  L14:
    return;

  anon3_Then:
    assume {:partition} 0 == Tmp_438;
    Tmp_436 := 1;
    goto L14;
}



procedure {:origName "P5SelectDaisyChainDevice"} P5SelectDaisyChainDevice(actual_Controller_2: int, actual_DeviceId: int) returns (Tmp_440: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_440 == 1 || Tmp_440 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5SelectDaisyChainDevice"} P5SelectDaisyChainDevice(actual_Controller_2: int, actual_DeviceId: int) returns (Tmp_440: int)
{
  var {:scalar} Tmp_441: int;
  var {:scalar} maxRetries: int;
  var {:scalar} selected: int;
  var {:scalar} retryCount: int;
  var {:pointer} Controller_2: int;
  var {:scalar} DeviceId: int;

  anon0:
    Controller_2 := actual_Controller_2;
    DeviceId := actual_DeviceId;
    maxRetries := 4;
    retryCount := 0;
    selected := 0;
    goto L9;

  L9:
    call {:si_unique_call 798} Tmp_441, selected, retryCount := P5SelectDaisyChainDevice_loop_L9(Tmp_441, maxRetries, selected, retryCount, Controller_2, DeviceId);
    goto L9_last;

  L9_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} selected != 0;
    goto L11;

  L11:
    Tmp_440 := selected;
    return;

  anon5_Then:
    assume {:partition} selected == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} maxRetries > retryCount;
    Tmp_441 := BOR(BOR(BOR(32, 64), 128), DeviceId);
    call {:si_unique_call 799} selected := PptSend1284_3Command(Controller_2, Tmp_441);
    retryCount := retryCount + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} retryCount >= maxRetries;
    goto L11;
}



procedure {:origName "PptPnpStartValidateResources"} PptPnpStartValidateResources(actual_DeviceObject_18: int, actual_FoundPort: int, actual_FoundIrq: int, actual_FoundDma: int) returns (Tmp_443: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_443 == 0 || Tmp_443 == -1073741709 || Tmp_443 == -1073741810;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpStartValidateResources"} PptPnpStartValidateResources(actual_DeviceObject_18: int, actual_FoundPort: int, actual_FoundIrq: int, actual_FoundDma: int) returns (Tmp_443: int)
{
  var {:scalar} Tmp_444: int;
  var {:pointer} fdx_3: int;
  var {:scalar} status_13: int;
  var {:pointer} DeviceObject_18: int;
  var {:scalar} FoundPort: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;

  anon0:
    call {:si_unique_call 800} Tmp_444 := __HAVOC_malloc(20);
    DeviceObject_18 := actual_DeviceObject_18;
    FoundPort := actual_FoundPort;
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc fdx_3;
    status_13 := 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} FoundPort != 0;
    assume {:nonnull} fdx_3 != 0;
    assume fdx_3 > 0;
    assume {:nonnull} fdx_3 != 0;
    assume fdx_3 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L12;

  L12:
    Tmp_443 := status_13;
    return;

  anon6_Then:
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    assume {:nonnull} fdx_3 != 0;
    assume fdx_3 > 0;
    havoc vslice_dummy_var_135;
    havoc vslice_dummy_var_136;
    call {:si_unique_call 801} PptLogError(vslice_dummy_var_135, DeviceObject_18, vslice_dummy_var_136, Tmp_444, 0, 0, 0, 10, 0, -1073283068);
    status_13 := -1073741709;
    goto L12;

  anon5_Then:
    assume {:partition} FoundPort == 0;
    status_13 := -1073741810;
    goto L12;
}



procedure {:origName "P4MakePdoDeviceName"} P4MakePdoDeviceName(actual_LptName: int, actual_PdoType: int, actual_DaisyChainId: int, actual_RetryNumber: int) returns (Tmp_446: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4MakePdoDeviceName"} P4MakePdoDeviceName(actual_LptName: int, actual_PdoType: int, actual_DaisyChainId: int, actual_RetryNumber: int) returns (Tmp_446: int)
{
  var {:scalar} legacyZipSuffix: int;
  var {:scalar} maxDaisyChainSuffix: int;
  var {:scalar} endOfChainSuffix: int;
  var {:scalar} sdv_218: int;
  var {:scalar} maxDeviceNameLength: int;
  var {:scalar} sdv_222: int;
  var {:pointer} buffer_1: int;
  var {:scalar} sdv_223: int;
  var {:pointer} sdv_224: int;
  var {:pointer} sdv_226: int;
  var {:scalar} lptNumber: int;
  var {:pointer} LptName: int;
  var {:scalar} PdoType: int;
  var {:scalar} DaisyChainId: int;
  var {:scalar} RetryNumber: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;

  anon0:
    LptName := actual_LptName;
    PdoType := actual_PdoType;
    DaisyChainId := actual_DaisyChainId;
    RetryNumber := actual_RetryNumber;
    call {:si_unique_call 802} vslice_dummy_var_114 := __HAVOC_malloc(96);
    call {:si_unique_call 803} vslice_dummy_var_115 := __HAVOC_malloc(92);
    call {:si_unique_call 804} vslice_dummy_var_116 := __HAVOC_malloc(108);
    call {:si_unique_call 805} vslice_dummy_var_117 := __HAVOC_malloc(80);
    maxDaisyChainSuffix := 3;
    endOfChainSuffix := 4;
    legacyZipSuffix := 5;
    buffer_1 := 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} LptName != 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} PdoType != 1;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} PdoType != 2;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} PdoType != 4;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} PdoType == 8;
    goto L27;

  L27:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_218 != 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_222 != 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_223 != 0;
    Tmp_446 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon39_Then:
    assume {:partition} sdv_223 == 0;
    lptNumber := 3;
    goto L41;

  L41:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} RetryNumber != 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} 9 < RetryNumber;
    goto L63;

  L63:
    Tmp_446 := buffer_1;
    goto L1;

  anon41_Then:
    assume {:partition} RetryNumber <= 9;
    maxDeviceNameLength := 44;
    call {:si_unique_call 806} sdv_224 := ExAllocatePoolWithTag(257, maxDeviceNameLength, -797810352);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    buffer_1 := sdv_224;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} buffer_1 == 0;
    goto L63;

  anon49_Then:
    assume {:partition} buffer_1 != 0;
    call {:si_unique_call 807} sdv_RtlZeroMemory(0, maxDeviceNameLength);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} 1 == PdoType;
    call {:si_unique_call 808} vslice_dummy_var_118 := corral_nondet();
    goto L63;

  anon42_Then:
    assume {:partition} 1 != PdoType;
    call {:si_unique_call 809} vslice_dummy_var_119 := corral_nondet();
    goto L63;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} RetryNumber == 0;
    maxDeviceNameLength := 40;
    call {:si_unique_call 810} sdv_226 := ExAllocatePoolWithTag(257, maxDeviceNameLength, -797810352);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    buffer_1 := sdv_226;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} buffer_1 != 0;
    call {:si_unique_call 811} sdv_RtlZeroMemory(0, maxDeviceNameLength);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} 1 == PdoType;
    call {:si_unique_call 812} vslice_dummy_var_120 := corral_nondet();
    goto L63;

  anon43_Then:
    assume {:partition} 1 != PdoType;
    call {:si_unique_call 813} vslice_dummy_var_121 := corral_nondet();
    goto L63;

  anon51_Then:
    assume {:partition} buffer_1 == 0;
    goto L63;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon38_Then:
    assume {:partition} sdv_222 == 0;
    lptNumber := 2;
    goto L41;

  anon37_Then:
    assume {:partition} sdv_218 == 0;
    lptNumber := 1;
    goto L41;

  anon44_Then:
    assume {:partition} PdoType != 8;
    Tmp_446 := 0;
    goto L1;

  anon45_Then:
    assume {:partition} PdoType == 4;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} DaisyChainId > maxDaisyChainSuffix;
    Tmp_446 := 0;
    goto L1;

  anon36_Then:
    assume {:partition} maxDaisyChainSuffix >= DaisyChainId;
    goto L27;

  anon46_Then:
    assume {:partition} PdoType == 2;
    goto L27;

  anon35_Then:
    assume {:partition} PdoType == 1;
    goto L27;

  anon47_Then:
    assume {:partition} LptName == 0;
    Tmp_446 := 0;
    goto L1;
}



procedure {:origName "PptWriteMfgMdlToDevNode"} PptWriteMfgMdlToDevNode(actual_Pdo_2: int, actual_Mfg: int, actual_Mdl: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptWriteMfgMdlToDevNode"} PptWriteMfgMdlToDevNode(actual_Pdo_2: int, actual_Mfg: int, actual_Mdl: int)
{
  var {:scalar} maxLen: int;
  var {:scalar} bufLen: int;
  var {:pointer} Tmp_456: int;
  var {:scalar} Tmp_457: int;
  var {:scalar} sdv_227: int;
  var {:scalar} uniValueName: int;
  var {:scalar} mfgLen: int;
  var {:scalar} mdlLen: int;
  var {:scalar} sdv_231: int;
  var {:pointer} Tmp_460: int;
  var {:pointer} buffer_2: int;
  var {:pointer} sdv_232: int;
  var {:scalar} Tmp_462: int;
  var {:scalar} Tmp_464: int;
  var {:scalar} status_14: int;
  var {:scalar} wcharCount: int;
  var {:pointer} Pdo_2: int;
  var {:pointer} Mfg: int;
  var {:pointer} Mdl: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;

  anon0:
    call {:si_unique_call 814} uniValueName := __HAVOC_malloc(12);
    call {:si_unique_call 815} vslice_dummy_var_122 := __HAVOC_malloc(4);
    Pdo_2 := actual_Pdo_2;
    Mfg := actual_Mfg;
    Mdl := actual_Mdl;
    call {:si_unique_call 816} Tmp_456 := __HAVOC_malloc(92);
    call {:si_unique_call 817} Tmp_460 := __HAVOC_malloc(64);
    call {:si_unique_call 818} vslice_dummy_var_124 := __HAVOC_malloc(12);
    call {:si_unique_call 819} vslice_dummy_var_125 := __HAVOC_malloc(12);
    assume {:nonnull} Pdo_2 != 0;
    assume Pdo_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mfg != 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mdl != 0;
    mfgLen := sdv_227;
    mdlLen := sdv_231;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} mfgLen > mdlLen;
    Tmp_457 := mfgLen;
    goto L24;

  L24:
    maxLen := Tmp_457;
    bufLen := (maxLen + 1) * 2;
    call {:si_unique_call 820} sdv_232 := ExAllocatePoolWithTag(257, bufLen, -797810352);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    buffer_2 := sdv_232;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} buffer_2 != 0;
    call {:si_unique_call 821} status_14 := IoOpenDeviceRegistryKey(0, 1, 983103, 0);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_14 == 0;
    Tmp_456 := strConst__li2bpl11;
    call {:si_unique_call 822} RtlInitUnicodeString(uniValueName, Tmp_456);
    call {:si_unique_call 823} wcharCount := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} wcharCount <= 0;
    goto L60;

  L60:
    Tmp_460 := strConst__li2bpl12;
    call {:si_unique_call 824} RtlInitUnicodeString(uniValueName, Tmp_460);
    call {:si_unique_call 825} wcharCount := corral_nondet();
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} wcharCount <= 0;
    goto L77;

  L77:
    call {:si_unique_call 826} vslice_dummy_var_123 := ZwClose(0);
    goto L39;

  L39:
    call {:si_unique_call 827} sdv_ExFreePool(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:partition} 0 < wcharCount;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} INTDIV(bufLen, 2) <= wcharCount;
    goto L77;

  anon26_Then:
    assume {:partition} wcharCount < INTDIV(bufLen, 2);
    Tmp_464 := (wcharCount + 1) * 2;
    call {:si_unique_call 828} status_14 := ZwSetValueKey(0, 0, 0, 1, 0, Tmp_464);
    goto L77;

  anon23_Then:
    assume {:partition} 0 < wcharCount;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} INTDIV(bufLen, 2) <= wcharCount;
    goto L60;

  anon24_Then:
    assume {:partition} wcharCount < INTDIV(bufLen, 2);
    Tmp_462 := (wcharCount + 1) * 2;
    call {:si_unique_call 829} status_14 := ZwSetValueKey(0, 0, 0, 1, 0, Tmp_462);
    goto L60;

  anon22_Then:
    assume {:partition} status_14 != 0;
    goto L39;

  anon30_Then:
    assume {:partition} buffer_2 == 0;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:partition} mdlLen >= mfgLen;
    Tmp_457 := mdlLen;
    goto L24;

  anon21_Then:
    assume {:partition} Mdl == 0;
    goto L1;

  anon27_Then:
    assume {:partition} Mfg == 0;
    goto L1;
}



procedure {:origName "P4SanitizeMultiSzId"} P4SanitizeMultiSzId(actual_WCharBuffer: int, actual_BufWCharCount: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4SanitizeMultiSzId"} P4SanitizeMultiSzId(actual_WCharBuffer: int, actual_BufWCharCount: int)
{
  var {:scalar} i_2: int;
  var {:pointer} p_7: int;
  var {:pointer} WCharBuffer: int;
  var {:scalar} BufWCharCount: int;
  var vslice_dummy_var_126: int;

  anon0:
    call {:si_unique_call 830} vslice_dummy_var_126 := __HAVOC_malloc(4);
    WCharBuffer := actual_WCharBuffer;
    BufWCharCount := actual_BufWCharCount;
    p_7 := WCharBuffer;
    i_2 := 0;
    goto L7;

  L7:
    call {:si_unique_call 831} i_2 := P4SanitizeMultiSzId_loop_L7(i_2, p_7, BufWCharCount);
    goto L7_last;

  L7_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BufWCharCount > i_2;
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[p_7] == 0;
    goto L13;

  L13:
    i_2 := i_2 + 1;
    goto L13_dummy;

  L13_dummy:
    assume false;
    return;

  anon12_Then:
    assume {:partition} Mem_T.INT4[p_7] != 0;
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 32 >= Mem_T.INT4[p_7];
    goto L12;

  L12:
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    Mem_T.INT4[p_7] := 95;
    goto L13;

  anon13_Then:
    assume {:partition} Mem_T.INT4[p_7] > 32;
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.INT4[p_7] <= 127;
    assume {:nonnull} p_7 != 0;
    assume p_7 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 44 != Mem_T.INT4[p_7];
    goto L13;

  anon15_Then:
    assume {:partition} 44 == Mem_T.INT4[p_7];
    goto L12;

  anon14_Then:
    assume {:partition} 127 < Mem_T.INT4[p_7];
    goto L12;

  anon11_Then:
    assume {:partition} i_2 >= BufWCharCount;
    return;
}



procedure {:origName "PptIsPci"} PptIsPci(actual_Fdx: int, actual_Irp_10: int) returns (Tmp_469: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_469 == 0 || Tmp_469 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptIsPci"} PptIsPci(actual_Fdx: int, actual_Irp_10: int) returns (Tmp_469: int)
{
  var {:scalar} i_3: int;
  var {:pointer} FullResourceDescriptor: int;
  var {:pointer} irpStack: int;
  var {:scalar} largePortRangeFound: int;
  var {:pointer} PartialResourceDescriptor: int;
  var {:scalar} rangeLength: int;
  var {:pointer} Tmp_470: int;
  var {:scalar} Tmp_471: int;
  var {:pointer} Tmp_472: int;
  var {:pointer} ResourceList: int;
  var {:scalar} portResourceDescriptorCount: int;
  var {:pointer} PartialResourceList: int;
  var {:pointer} Irp_10: int;

  anon0:
    Irp_10 := actual_Irp_10;
    call {:si_unique_call 832} Tmp_470 := __HAVOC_malloc(312);
    call {:si_unique_call 833} Tmp_472 := __HAVOC_malloc(292);
    call {:si_unique_call 834} irpStack := sdv_IoGetCurrentIrpStackLocation(Irp_10);
    portResourceDescriptorCount := 0;
    largePortRangeFound := 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    havoc ResourceList;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ResourceList != 0;
    assume {:nonnull} ResourceList != 0;
    assume ResourceList > 0;
    havoc Tmp_470;
    FullResourceDescriptor := Tmp_470;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} FullResourceDescriptor != 0;
    assume {:nonnull} FullResourceDescriptor != 0;
    assume FullResourceDescriptor > 0;
    PartialResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(FullResourceDescriptor);
    i_3 := 0;
    goto L26;

  L26:
    call {:si_unique_call 835} i_3, largePortRangeFound, PartialResourceDescriptor, rangeLength, Tmp_471, Tmp_472, portResourceDescriptorCount := PptIsPci_loop_L26(i_3, largePortRangeFound, PartialResourceDescriptor, rangeLength, Tmp_471, Tmp_472, portResourceDescriptorCount, PartialResourceList);
    goto L26_last;

  L26_last:
    assume {:nonnull} PartialResourceList != 0;
    assume PartialResourceList > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    Tmp_471 := i_3;
    assume {:nonnull} PartialResourceList != 0;
    assume PartialResourceList > 0;
    havoc Tmp_472;
    PartialResourceDescriptor := Tmp_472 + Tmp_471 * 292;
    assume {:nonnull} PartialResourceDescriptor != 0;
    assume PartialResourceDescriptor > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} PartialResourceDescriptor != 0;
    assume PartialResourceDescriptor > 0;
    havoc rangeLength;
    portResourceDescriptorCount := portResourceDescriptorCount + 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} rangeLength > 8;
    largePortRangeFound := 1;
    goto L29;

  L29:
    i_3 := i_3 + 1;
    goto L29_dummy;

  L29_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} 8 >= rangeLength;
    goto L29;

  anon20_Then:
    goto L29;

  anon16_Then:
    goto L23;

  L23:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} portResourceDescriptorCount > 2;
    goto L37;

  L37:
    Tmp_469 := 1;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} 2 >= portResourceDescriptorCount;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 1 != largePortRangeFound;
    Tmp_469 := 0;
    goto L1;

  anon17_Then:
    assume {:partition} 1 == largePortRangeFound;
    goto L37;

  anon19_Then:
    assume {:partition} FullResourceDescriptor == 0;
    goto L23;

  anon18_Then:
    assume {:partition} ResourceList == 0;
    Tmp_469 := 0;
    goto L1;
}



procedure {:origName "PptPnpBounceAndCatchPnpIrp"} PptPnpBounceAndCatchPnpIrp(actual_Fdx_1: int, actual_Irp_11: int) returns (Tmp_474: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpBounceAndCatchPnpIrp"} PptPnpBounceAndCatchPnpIrp(actual_Fdx_1: int, actual_Irp_11: int) returns (Tmp_474: int)
{
  var {:pointer} parentDevObj: int;
  var {:scalar} status_15: int;
  var {:scalar} event: int;
  var {:pointer} Fdx_1: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_127: int;

  anon0:
    call {:si_unique_call 836} event := __HAVOC_malloc(156);
    Fdx_1 := actual_Fdx_1;
    Irp_11 := actual_Irp_11;
    assume {:nonnull} Fdx_1 != 0;
    assume Fdx_1 > 0;
    havoc parentDevObj;
    call {:si_unique_call 837} KeInitializeEvent(event, 0, 0);
    call {:si_unique_call 838} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_11);
    call {:si_unique_call 839} sdv_IoSetCompletionRoutine(Irp_11, li2bplFunctionConstant187, event, 1, 1, 1);
    call {:si_unique_call 840} status_15 := sdv_IoCallDriver(parentDevObj, Irp_11);
    call {:si_unique_call 841} vslice_dummy_var_127 := KeWaitForSingleObject(0, 5, 0, 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_15 == 259;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc status_15;
    goto L24;

  L24:
    Tmp_474 := status_15;
    return;

  anon3_Then:
    assume {:partition} status_15 != 259;
    goto L24;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_128: int;

  anon0:
    call {:si_unique_call 842} vslice_dummy_var_128 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPnpListContainsIrqResourceDescriptor"} PptPnpListContainsIrqResourceDescriptor(actual_List: int) returns (Tmp_478: int);
  free ensures {:va_keep} Tmp_478 == 1 || Tmp_478 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpListContainsIrqResourceDescriptor"} PptPnpListContainsIrqResourceDescriptor(actual_List: int) returns (Tmp_478: int)
{
  var {:scalar} i_4: int;
  var {:pointer} curDesc: int;
  var {:pointer} List: int;

  anon0:
    List := actual_List;
    assume {:nonnull} List != 0;
    assume List > 0;
    havoc curDesc;
    i_4 := 0;
    goto L7;

  L7:
    call {:si_unique_call 843} i_4 := PptPnpListContainsIrqResourceDescriptor_loop_L7(i_4, curDesc, List);
    goto L7_last;

  L7_last:
    assume {:nonnull} List != 0;
    assume List > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} curDesc != 0;
    assume curDesc > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_478 := 1;
    goto L1;

  L1:
    return;

  anon6_Then:
    i_4 := i_4 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    Tmp_478 := 0;
    goto L1;
}



procedure {:origName "PptPnpPassThroughPnpIrpAndReleaseRemoveLock"} PptPnpPassThroughPnpIrpAndReleaseRemoveLock(actual_Fdx_2: int, actual_Irp_12: int) returns (Tmp_480: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_480 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpPassThroughPnpIrpAndReleaseRemoveLock"} PptPnpPassThroughPnpIrpAndReleaseRemoveLock(actual_Fdx_2: int, actual_Irp_12: int) returns (Tmp_480: int)
{
  var {:scalar} status_16: int;
  var {:pointer} Fdx_2: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_137: int;

  anon0:
    Fdx_2 := actual_Fdx_2;
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 844} sdv_IoSkipCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} Fdx_2 != 0;
    assume Fdx_2 > 0;
    havoc vslice_dummy_var_137;
    call {:si_unique_call 845} status_16 := sdv_IoCallDriver(vslice_dummy_var_137, Irp_12);
    assume {:nonnull} Fdx_2 != 0;
    assume Fdx_2 > 0;
    call {:si_unique_call 846} vslice_dummy_var_129 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(Fdx_2), Irp_12);
    Tmp_480 := status_16;
    return;
}



procedure {:origName "P5MarkPdoAsHardwareGone"} P5MarkPdoAsHardwareGone(actual_Fdo: int, actual_PdoType_1: int, actual_DaisyChainId_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5MarkPdoAsHardwareGone"} P5MarkPdoAsHardwareGone(actual_Fdo: int, actual_PdoType_1: int, actual_DaisyChainId_1: int)
{
  var {:scalar} Tmp_483: int;
  var {:pointer} pdx_2: int;
  var {:scalar} Tmp_485: int;
  var {:pointer} pdo: int;
  var {:pointer} fdx_4: int;
  var {:pointer} Tmp_486: int;
  var {:pointer} Tmp_487: int;
  var {:pointer} Fdo: int;
  var {:scalar} PdoType_1: int;
  var {:scalar} DaisyChainId_1: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;

  anon0:
    call {:si_unique_call 847} vslice_dummy_var_130 := __HAVOC_malloc(4);
    Fdo := actual_Fdo;
    PdoType_1 := actual_PdoType_1;
    DaisyChainId_1 := actual_DaisyChainId_1;
    call {:si_unique_call 848} Tmp_486 := __HAVOC_malloc(16);
    call {:si_unique_call 849} Tmp_487 := __HAVOC_malloc(16);
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    havoc fdx_4;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} PdoType_1 != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} PdoType_1 != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} PdoType_1 != 4;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} PdoType_1 == 8;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc pdo;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L15;

  L15:
    assume {:nonnull} pdo != 0;
    assume pdo > 0;
    havoc pdx_2;
    call {:si_unique_call 850} P5DeletePdoSymLink(pdo);
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    assume {:nonnull} pdx_2 != 0;
    assume pdx_2 > 0;
    call {:si_unique_call 851} vslice_dummy_var_131 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(fdx_4), DevDeletionList__PDO_EXTENSION(pdx_2));
    assume {:nonnull} pdx_2 != 0;
    assume pdx_2 > 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} PdoType_1 != 8;
    goto L1;

  anon10_Then:
    assume {:partition} PdoType_1 == 4;
    Tmp_485 := DaisyChainId_1;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_486;
    assume {:nonnull} Tmp_486 != 0;
    assume Tmp_486 > 0;
    havoc pdo;
    Tmp_483 := DaisyChainId_1;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc Tmp_487;
    assume {:nonnull} Tmp_487 != 0;
    assume Tmp_487 > 0;
    goto L15;

  anon11_Then:
    assume {:partition} PdoType_1 == 2;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc pdo;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L15;

  anon12_Then:
    assume {:partition} PdoType_1 == 1;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    havoc pdo;
    assume {:nonnull} fdx_4 != 0;
    assume fdx_4 > 0;
    goto L15;
}



procedure {:origName "P5DeletePdoSymLink"} P5DeletePdoSymLink(actual_Pdo_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5DeletePdoSymLink"} P5DeletePdoSymLink(actual_Pdo_3: int)
{
  var {:pointer} pdx_3: int;
  var {:scalar} uniSymLinkName: int;
  var {:pointer} Pdo_3: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_138: int;

  anon0:
    call {:si_unique_call 852} uniSymLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 853} vslice_dummy_var_132 := __HAVOC_malloc(4);
    Pdo_3 := actual_Pdo_3;
    assume {:nonnull} Pdo_3 != 0;
    assume Pdo_3 > 0;
    havoc pdx_3;
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    havoc vslice_dummy_var_138;
    call {:si_unique_call 854} RtlInitUnicodeString(uniSymLinkName, vslice_dummy_var_138);
    call {:si_unique_call 855} vslice_dummy_var_133 := IoDeleteSymbolicLink(0);
    call {:si_unique_call 856} sdv_ExFreePool(0);
    assume {:nonnull} pdx_3 != 0;
    assume pdx_3 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "PptPnpFilterExistsNonIrqResourceList"} PptPnpFilterExistsNonIrqResourceList(actual_ResourceRequirementsList: int) returns (Tmp_490: int);
  free ensures {:va_keep} Tmp_490 == 1 || Tmp_490 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpFilterExistsNonIrqResourceList"} PptPnpFilterExistsNonIrqResourceList(actual_ResourceRequirementsList: int) returns (Tmp_490: int)
{
  var {:scalar} i_5: int;
  var {:scalar} remain: int;
  var {:scalar} listCount: int;
  var {:pointer} curList: int;
  var {:scalar} foundIrq: int;
  var {:pointer} curDesc_1: int;
  var {:pointer} ResourceRequirementsList: int;

  anon0:
    ResourceRequirementsList := actual_ResourceRequirementsList;
    assume {:nonnull} ResourceRequirementsList != 0;
    assume ResourceRequirementsList > 0;
    havoc listCount;
    i_5 := 0;
    assume {:nonnull} ResourceRequirementsList != 0;
    assume ResourceRequirementsList > 0;
    havoc curList;
    goto L9;

  L9:
    call {:si_unique_call 857} i_5, remain, curList, foundIrq, curDesc_1 := PptPnpFilterExistsNonIrqResourceList_loop_L9(i_5, remain, listCount, curList, foundIrq, curDesc_1);
    goto L9_last;

  L9_last:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} listCount > i_5;
    assume {:nonnull} curList != 0;
    assume curList > 0;
    havoc remain;
    assume {:nonnull} curList != 0;
    assume curList > 0;
    havoc curDesc_1;
    foundIrq := 0;
    goto L17;

  L17:
    call {:si_unique_call 858} remain := PptPnpFilterExistsNonIrqResourceList_loop_L17(remain, curDesc_1);
    goto L17_last;

  L17_last:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} remain != 0;
    assume {:nonnull} curDesc_1 != 0;
    assume curDesc_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    foundIrq := 1;
    goto L18;

  L18:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} foundIrq != 0;
    assume {:nonnull} curList != 0;
    assume curList > 0;
    havoc curList;
    i_5 := i_5 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} foundIrq == 0;
    Tmp_490 := 1;
    goto L1;

  L1:
    return;

  anon12_Then:
    remain := remain - 1;
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    assume false;
    return;

  anon10_Then:
    assume {:partition} remain == 0;
    goto L18;

  anon9_Then:
    assume {:partition} i_5 >= listCount;
    Tmp_490 := 0;
    goto L1;
}



procedure {:origName "P5DeselectAllDaisyChainDevices"} P5DeselectAllDaisyChainDevices(actual_Controller_3: int) returns (Tmp_492: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_492 == 1 || Tmp_492 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5DeselectAllDaisyChainDevices"} P5DeselectAllDaisyChainDevices(actual_Controller_3: int) returns (Tmp_492: int)
{
  var {:scalar} maxRetries_1: int;
  var {:scalar} deselected: int;
  var {:scalar} retryCount_1: int;
  var {:pointer} Controller_3: int;

  anon0:
    Controller_3 := actual_Controller_3;
    maxRetries_1 := 4;
    retryCount_1 := 0;
    deselected := 0;
    goto L9;

  L9:
    call {:si_unique_call 859} deselected, retryCount_1 := P5DeselectAllDaisyChainDevices_loop_L9(maxRetries_1, deselected, retryCount_1, Controller_3);
    goto L9_last;

  L9_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} deselected != 0;
    goto L11;

  L11:
    Tmp_492 := deselected;
    return;

  anon5_Then:
    assume {:partition} deselected == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} maxRetries_1 > retryCount_1;
    call {:si_unique_call 860} deselected := PptSend1284_3Command(Controller_3, 48);
    retryCount_1 := retryCount_1 + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} retryCount_1 >= maxRetries_1;
    goto L11;
}



procedure {:origName "PptPnpFilterNukeIrqResourceDescriptorsFromAllLists"} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists(actual_ResourceRequirementsList_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpFilterNukeIrqResourceDescriptorsFromAllLists"} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists(actual_ResourceRequirementsList_1: int)
{
  var {:scalar} i_6: int;
  var {:scalar} listCount_1: int;
  var {:pointer} curList_1: int;
  var {:pointer} ResourceRequirementsList_1: int;
  var vslice_dummy_var_134: int;

  anon0:
    call {:si_unique_call 861} vslice_dummy_var_134 := __HAVOC_malloc(4);
    ResourceRequirementsList_1 := actual_ResourceRequirementsList_1;
    assume {:nonnull} ResourceRequirementsList_1 != 0;
    assume ResourceRequirementsList_1 > 0;
    havoc listCount_1;
    i_6 := 0;
    assume {:nonnull} ResourceRequirementsList_1 != 0;
    assume ResourceRequirementsList_1 > 0;
    havoc curList_1;
    goto L9;

  L9:
    call {:si_unique_call 862} i_6, curList_1 := PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(i_6, listCount_1, curList_1);
    goto L9_last;

  L9_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} listCount_1 > i_6;
    call {:si_unique_call 863} PptPnpFilterNukeIrqResourceDescriptors(curList_1);
    assume {:nonnull} curList_1 != 0;
    assume curList_1 > 0;
    havoc curList_1;
    i_6 := i_6 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_6 >= listCount_1;
    return;
}



procedure {:origName "PptPnpStartScanPciCardCmResourceList"} PptPnpStartScanPciCardCmResourceList(actual_Fdx_3: int, actual_Irp_13: int, actual_FoundPort_1: int, actual_FoundIrq_1: int, actual_FoundDma_1: int) returns (Tmp_496: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_496 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpStartScanPciCardCmResourceList"} PptPnpStartScanPciCardCmResourceList(actual_Fdx_3: int, actual_Irp_13: int, actual_FoundPort_1: int, actual_FoundIrq_1: int, actual_FoundDma_1: int) returns (Tmp_496: int)
{
  var {:scalar} i_7: int;
  var {:pointer} irpStack_1: int;
  var {:pointer} FullResourceDescriptor_1: int;
  var {:pointer} Tmp_497: int;
  var {:pointer} PartialResourceDescriptor_1: int;
  var {:scalar} length: int;
  var {:scalar} Tmp_498: int;
  var {:pointer} ResourceList_1: int;
  var {:scalar} status_18: int;
  var {:pointer} Tmp_500: int;
  var {:pointer} PartialResourceList_1: int;
  var {:pointer} Fdx_3: int;
  var {:pointer} Irp_13: int;
  var {:pointer} FoundPort_1: int;
  var {:pointer} FoundIrq_1: int;
  var {:pointer} FoundDma_1: int;

  anon0:
    Fdx_3 := actual_Fdx_3;
    Irp_13 := actual_Irp_13;
    FoundPort_1 := actual_FoundPort_1;
    FoundIrq_1 := actual_FoundIrq_1;
    FoundDma_1 := actual_FoundDma_1;
    call {:si_unique_call 864} Tmp_497 := __HAVOC_malloc(312);
    call {:si_unique_call 865} Tmp_500 := __HAVOC_malloc(292);
    status_18 := 0;
    call {:si_unique_call 866} irpStack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    assume {:nonnull} FoundPort_1 != 0;
    assume FoundPort_1 > 0;
    Mem_T.INT4[FoundPort_1] := 0;
    assume {:nonnull} FoundIrq_1 != 0;
    assume FoundIrq_1 > 0;
    Mem_T.INT4[FoundIrq_1] := 0;
    assume {:nonnull} FoundDma_1 != 0;
    assume FoundDma_1 > 0;
    Mem_T.INT4[FoundDma_1] := 0;
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    havoc ResourceList_1;
    assume {:nonnull} ResourceList_1 != 0;
    assume ResourceList_1 > 0;
    havoc Tmp_497;
    FullResourceDescriptor_1 := Tmp_497;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} FullResourceDescriptor_1 != 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} FullResourceDescriptor_1 != 0;
    assume FullResourceDescriptor_1 > 0;
    assume {:nonnull} FullResourceDescriptor_1 != 0;
    assume FullResourceDescriptor_1 > 0;
    PartialResourceList_1 := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(FullResourceDescriptor_1);
    i_7 := 0;
    goto L26;

  L26:
    call {:si_unique_call 867} i_7, PartialResourceDescriptor_1, length, Tmp_498, Tmp_500 := PptPnpStartScanPciCardCmResourceList_loop_L26(i_7, PartialResourceDescriptor_1, length, Tmp_498, Tmp_500, PartialResourceList_1, Fdx_3, FoundPort_1, FoundIrq_1);
    goto L26_last;

  L26_last:
    assume {:nonnull} PartialResourceList_1 != 0;
    assume PartialResourceList_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_498 := i_7;
    assume {:nonnull} PartialResourceList_1 != 0;
    assume PartialResourceList_1 > 0;
    havoc Tmp_500;
    PartialResourceDescriptor_1 := Tmp_500 + Tmp_498 * 292;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L34;

  L34:
    i_7 := i_7 + 1;
    goto L34_dummy;

  L34_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto L34;

  anon21_Then:
    goto L34;

  anon22_Then:
    assume {:nonnull} FoundIrq_1 != 0;
    assume FoundIrq_1 > 0;
    Mem_T.INT4[FoundIrq_1] := 1;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    goto L34;

  anon27_Then:
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    goto L34;

  anon25_Then:
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    havoc length;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} length != 4;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} length == 8;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} FoundPort_1 != 0;
    assume FoundPort_1 > 0;
    Mem_T.INT4[FoundPort_1] := 1;
    goto L34;

  anon23_Then:
    assume {:partition} length != 8;
    goto L34;

  anon26_Then:
    assume {:partition} length == 4;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} Fdx_3 != 0;
    assume Fdx_3 > 0;
    assume {:nonnull} PartialResourceDescriptor_1 != 0;
    assume PartialResourceDescriptor_1 > 0;
    goto L34;

  anon19_Then:
    goto L22;

  L22:
    Tmp_496 := status_18;
    return;

  anon24_Then:
    assume {:partition} FullResourceDescriptor_1 == 0;
    goto L22;
}



procedure {:origName "P4CreatePdo"} P4CreatePdo(actual_Fdo_1: int, actual_PdoType_2: int, actual_DaisyChainId_2: int, actual_Ieee1284Id: int) returns (Tmp_501: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4CreatePdo"} P4CreatePdo(actual_Fdo_1: int, actual_PdoType_2: int, actual_DaisyChainId_2: int, actual_Ieee1284Id: int) returns (Tmp_501: int)
{
  var {:dopa} {:scalar} DeviceIdSize_1: int;
  var {:scalar} retryNumber: int;
  var {:pointer} pdx_4: int;
  var {:scalar} bBuildStlDeviceId: int;
  var {:scalar} symLinkName: int;
  var {:scalar} deviceName: int;
  var {:pointer} PortInfo: int;
  var {:scalar} Tmp_503: int;
  var {:pointer} pdo_1: int;
  var {:pointer} fdx_5: int;
  var {:scalar} status_19: int;
  var {:scalar} createdSymLink: int;
  var {:pointer} wstrSymLinkName: int;
  var {:pointer} wstrDeviceName: int;
  var {:pointer} lptName: int;
  var {:pointer} Fdo_1: int;
  var {:scalar} PdoType_2: int;
  var {:scalar} DaisyChainId_2: int;
  var {:pointer} Ieee1284Id: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;

  anon0:
    call {:si_unique_call 868} DeviceIdSize_1 := __HAVOC_malloc(4);
    call {:si_unique_call 869} symLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 870} deviceName := __HAVOC_malloc(12);
    call {:si_unique_call 871} pdo_1 := __HAVOC_malloc(4);
    Fdo_1 := actual_Fdo_1;
    PdoType_2 := actual_PdoType_2;
    DaisyChainId_2 := actual_DaisyChainId_2;
    Ieee1284Id := actual_Ieee1284Id;
    assume {:nonnull} Fdo_1 != 0;
    assume Fdo_1 > 0;
    havoc fdx_5;
    assume {:nonnull} fdx_5 != 0;
    assume fdx_5 > 0;
    havoc lptName;
    status_19 := -1073741823;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    wstrDeviceName := 0;
    wstrSymLinkName := 0;
    createdSymLink := 0;
    retryNumber := 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} lptName == 0;
    goto L64;

  L64:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_19 != 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} createdSymLink != 0;
    call {:si_unique_call 872} vslice_dummy_var_135 := IoDeleteSymbolicLink(0);
    goto L67;

  L67:
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    call {:si_unique_call 873} IoDeleteDevice(0);
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    goto L71;

  L71:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} wstrDeviceName != 0;
    call {:si_unique_call 874} sdv_ExFreePool(0);
    goto L76;

  L76:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} wstrSymLinkName != 0;
    call {:si_unique_call 875} sdv_ExFreePool(0);
    goto L65;

  L65:
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc Tmp_501;
    goto LM2;

  LM2:
    return;

  anon49_Then:
    assume {:partition} wstrSymLinkName == 0;
    goto L65;

  anon48_Then:
    assume {:partition} wstrDeviceName == 0;
    goto L76;

  anon47_Then:
    goto L71;

  anon46_Then:
    assume {:partition} createdSymLink == 0;
    goto L67;

  anon45_Then:
    assume {:partition} status_19 == 0;
    goto L65;

  anon56_Then:
    assume {:partition} lptName != 0;
    goto L23;

  L23:
    call {:si_unique_call 876} retryNumber, status_19, wstrDeviceName := P4CreatePdo_loop_L23(retryNumber, deviceName, pdo_1, status_19, wstrDeviceName, lptName, PdoType_2, DaisyChainId_2);
    goto L23_last;

  L23_last:
    call {:si_unique_call 890} wstrDeviceName := P4MakePdoDeviceName(lptName, PdoType_2, DaisyChainId_2, retryNumber);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} wstrDeviceName == 0;
    goto L64;

  anon43_Then:
    assume {:partition} wstrDeviceName != 0;
    call {:si_unique_call 877} RtlInitUnicodeString(deviceName, wstrDeviceName);
    call {:si_unique_call 878} status_19 := IoCreateDevice(0, 1248, 0, 22, 256, 1, pdo_1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} status_19 != 0;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} -1073741771 != status_19;
    goto L64;

  anon58_Then:
    assume {:partition} -1073741771 == status_19;
    call {:si_unique_call 879} sdv_ExFreePool(0);
    retryNumber := retryNumber + 1;
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    assume false;
    return;

  anon44_Then:
    assume {:partition} status_19 == 0;
    retryNumber := 0;
    goto L83;

  L83:
    call {:si_unique_call 880} retryNumber, status_19, wstrSymLinkName := P4CreatePdo_loop_L83(retryNumber, symLinkName, status_19, wstrSymLinkName, lptName, PdoType_2, DaisyChainId_2);
    goto L83_last;

  L83_last:
    call {:si_unique_call 889} wstrSymLinkName := P4MakePdoSymLinkName(lptName, PdoType_2, DaisyChainId_2, retryNumber);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} wstrSymLinkName != 0;
    call {:si_unique_call 881} RtlInitUnicodeString(symLinkName, wstrSymLinkName);
    call {:si_unique_call 882} status_19 := IoCreateUnprotectedSymbolicLink(0, 0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} status_19 != 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} -1073741771 == status_19;
    call {:si_unique_call 883} sdv_ExFreePool(0);
    retryNumber := retryNumber + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    assume false;
    return;

  anon52_Then:
    assume {:partition} -1073741771 != status_19;
    goto L64;

  anon51_Then:
    assume {:partition} status_19 == 0;
    createdSymLink := 1;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Ieee1284Id != 0;
    goto L107;

  L107:
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc vslice_dummy_var_139;
    call {:si_unique_call 884} vslice_dummy_var_136 := P4InitializePdo(Fdo_1, vslice_dummy_var_139, PdoType_2, DaisyChainId_2, Ieee1284Id, wstrDeviceName, wstrSymLinkName);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} yogi_error != 1;
    goto L64;

  anon61_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    assume {:partition} Ieee1284Id == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} 4 == PdoType_2;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc pdx_4;
    assume {:nonnull} fdx_5 != 0;
    assume fdx_5 > 0;
    PortInfo := PortInfo__FDO_EXTENSION(fdx_5);
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    Tmp_503 := DaisyChainId_2;
    call {:si_unique_call 885} bBuildStlDeviceId := ParStlCheckIfStl(pdx_4, Tmp_503);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} 1 == bBuildStlDeviceId;
    call {:si_unique_call 886} Ieee1284Id := ParStlQueryStlDeviceId(pdx_4, 0, 0, DeviceIdSize_1, 0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    goto L123;

  L123:
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} PortInfo != 0;
    assume PortInfo > 0;
    assume {:nonnull} pdx_4 != 0;
    assume pdx_4 > 0;
    assume {:nonnull} pdo_1 != 0;
    assume pdo_1 > 0;
    havoc vslice_dummy_var_140;
    call {:si_unique_call 887} vslice_dummy_var_137 := P4InitializePdo(Fdo_1, vslice_dummy_var_140, PdoType_2, DaisyChainId_2, Ieee1284Id, wstrDeviceName, wstrSymLinkName);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} Ieee1284Id != 0;
    call {:si_unique_call 888} sdv_ExFreePool(0);
    Ieee1284Id := 0;
    goto L64;

  anon55_Then:
    assume {:partition} Ieee1284Id == 0;
    goto L64;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:partition} 1 != bBuildStlDeviceId;
    goto L123;

  anon53_Then:
    assume {:partition} 4 != PdoType_2;
    goto L107;

  anon50_Then:
    assume {:partition} wstrSymLinkName == 0;
    goto L64;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "P4InitializePdo"} P4InitializePdo(actual_Fdo_2: int, actual_Pdo_4: int, actual_PdoType_3: int, actual_DaisyChainId_3: int, actual_Ieee1284Id_1: int, actual_PdoName: int, actual_SymLinkName: int) returns (Tmp_504: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4InitializePdo"} P4InitializePdo(actual_Fdo_2: int, actual_Pdo_4: int, actual_PdoType_3: int, actual_DaisyChainId_3: int, actual_Ieee1284Id_1: int, actual_PdoName: int, actual_SymLinkName: int) returns (Tmp_504: int)
{
  var {:pointer} buffer_3: int;
  var {:pointer} copyOfIeee1284Id: int;
  var {:scalar} bufLen_1: int;
  var {:scalar} bufLen_2: int;
  var {:pointer} aid: int;
  var {:pointer} des: int;
  var {:pointer} cls: int;
  var {:scalar} tmpBufLen: int;
  var {:pointer} rawPortMdl: int;
  var {:pointer} sdv_257: int;
  var {:pointer} rawPortMfg: int;
  var {:pointer} legacyZipMfg: int;
  var {:pointer} buffer_4: int;
  var {:scalar} Tmp_507: int;
  var {:scalar} length_1: int;
  var {:scalar} sdv_260: int;
  var {:scalar} Tmp_509: int;
  var {:pointer} tmpBuffer: int;
  var {:pointer} pdx_5: int;
  var {:scalar} sdv_261: int;
  var {:pointer} legacyZipMdl: int;
  var {:scalar} mfgLen_1: int;
  var {:scalar} Tmp_510: int;
  var {:pointer} sdv_264: int;
  var {:scalar} mdlLen_1: int;
  var {:pointer} sdv_266: int;
  var {:pointer} mfg: int;
  var {:pointer} sdv_267: int;
  var {:pointer} sdv_268: int;
  var {:pointer} buffer_5: int;
  var {:pointer} sdv_271: int;
  var {:scalar} sdv_272: int;
  var {:scalar} bufLen_3: int;
  var {:pointer} sdv_274: int;
  var {:scalar} sdv_275: int;
  var {:pointer} buffer_6: int;
  var {:pointer} cid: int;
  var {:scalar} sdv_276: int;
  var {:pointer} buffer_7: int;
  var {:pointer} sdv_277: int;
  var {:pointer} sdv_278: int;
  var {:scalar} bufLen_4: int;
  var {:pointer} sdv_279: int;
  var {:pointer} mdl: int;
  var {:scalar} sdv_280: int;
  var {:pointer} sdv_281: int;
  var {:pointer} Fdo_2: int;
  var {:pointer} Pdo_4: int;
  var {:scalar} PdoType_3: int;
  var {:scalar} DaisyChainId_3: int;
  var {:pointer} Ieee1284Id_1: int;
  var {:pointer} PdoName: int;
  var {:pointer} SymLinkName: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;

  anon0:
    call {:si_unique_call 891} aid := __HAVOC_malloc(4);
    call {:si_unique_call 892} des := __HAVOC_malloc(4);
    call {:si_unique_call 893} cls := __HAVOC_malloc(4);
    call {:si_unique_call 894} mfg := __HAVOC_malloc(4);
    call {:si_unique_call 895} cid := __HAVOC_malloc(4);
    call {:si_unique_call 896} mdl := __HAVOC_malloc(4);
    Fdo_2 := actual_Fdo_2;
    Pdo_4 := actual_Pdo_4;
    PdoType_3 := actual_PdoType_3;
    DaisyChainId_3 := actual_DaisyChainId_3;
    Ieee1284Id_1 := actual_Ieee1284Id_1;
    PdoName := actual_PdoName;
    SymLinkName := actual_SymLinkName;
    call {:si_unique_call 897} vslice_dummy_var_138 := __HAVOC_malloc(12);
    call {:si_unique_call 898} rawPortMdl := __HAVOC_malloc(32);
    call {:si_unique_call 899} rawPortMfg := __HAVOC_malloc(40);
    call {:si_unique_call 900} legacyZipMfg := __HAVOC_malloc(16);
    call {:si_unique_call 901} vslice_dummy_var_139 := __HAVOC_malloc(20);
    call {:si_unique_call 902} vslice_dummy_var_140 := __HAVOC_malloc(60);
    call {:si_unique_call 903} legacyZipMdl := __HAVOC_malloc(16);
    call {:si_unique_call 904} vslice_dummy_var_141 := __HAVOC_malloc(28);
    call {:si_unique_call 905} vslice_dummy_var_142 := __HAVOC_malloc(20);
    assume {:nonnull} Fdo_2 != 0;
    assume Fdo_2 > 0;
    assume {:nonnull} Pdo_4 != 0;
    assume Pdo_4 > 0;
    havoc pdx_5;
    assume {:nonnull} Pdo_4 != 0;
    assume Pdo_4 > 0;
    assume {:nonnull} Fdo_2 != 0;
    assume Fdo_2 > 0;
    assume {:nonnull} Pdo_4 != 0;
    assume Pdo_4 > 0;
    assume {:nonnull} Fdo_2 != 0;
    assume Fdo_2 > 0;
    assume {:nonnull} Pdo_4 != 0;
    assume Pdo_4 > 0;
    call {:si_unique_call 906} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} Ieee1284Id_1 == 0;
    rawPortMfg := strConst__li2bpl17;
    rawPortMdl := strConst__li2bpl19;
    legacyZipMfg := strConst__li2bpl20;
    legacyZipMdl := strConst__li2bpl21;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} 1 == PdoType_3;
    mfgLen_1 := 10;
    mdlLen_1 := 8;
    goto L258;

  L258:
    call {:si_unique_call 907} sdv_274 := ExAllocatePoolWithTag(257, mfgLen_1, -797810352);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    buffer_6 := sdv_274;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} buffer_6 != 0;
    call {:si_unique_call 908} sdv_RtlZeroMemory(0, mfgLen_1);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L263;

  L263:
    call {:si_unique_call 909} sdv_278 := ExAllocatePoolWithTag(257, mdlLen_1, -797810352);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} yogi_error != 1;
    buffer_6 := sdv_278;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} buffer_6 != 0;
    call {:si_unique_call 910} sdv_RtlZeroMemory(0, mdlLen_1);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L275;

  L275:
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L107;

  L107:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} PdoType_3 != 1;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} PdoType_3 != 2;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} PdoType_3 != 4;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} PdoType_3 != 8;
    goto L126;

  L126:
    call {:si_unique_call 911} sdv_ExInitializeFastMutex(0);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    call {:si_unique_call 912} InitializeListHead(WorkQueue__PDO_EXTENSION(pdx_5));
    call {:si_unique_call 913} KeInitializeSemaphore(0, 0, -1);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    call {:si_unique_call 914} KeInitializeEvent(PauseEvent__PDO_EXTENSION(pdx_5), 0, 1);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} 2 == PdoType_3;
    Tmp_509 := 1;
    goto L143;

  L143:
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} 4 == PdoType_3;
    Tmp_507 := DaisyChainId_3;
    goto L147;

  L147:
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    call {:si_unique_call 915} ParInitializeExtension1284Info(pdx_5);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Ieee1284Id_1 == 0;
    goto L190;

  L190:
    Tmp_510 := sdv_261 * 2 + 2;
    call {:si_unique_call 916} vslice_dummy_var_144 := RtlWriteRegistryValue(4, 0, 0, 1, 0, Tmp_510);
    assume {:nonnull} Pdo_4 != 0;
    assume Pdo_4 > 0;
    Tmp_504 := 0;
    goto LM2;

  LM2:
    return;

  anon89_Then:
    assume {:partition} Ieee1284Id_1 != 0;
    length_1 := sdv_275 + 1;
    call {:si_unique_call 917} sdv_277 := ExAllocatePoolWithTag(257, length_1, -797810352);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    copyOfIeee1284Id := sdv_277;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} copyOfIeee1284Id == 0;
    goto L190;

  anon91_Then:
    assume {:partition} copyOfIeee1284Id != 0;
    call {:si_unique_call 918} sdv_RtlZeroMemory(0, length_1);
    call {:si_unique_call 919} ParDetectDot3DataLink(pdx_5, Ieee1284Id_1);
    call {:si_unique_call 920} sdv_ExFreePool(0);
    goto L190;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    assume {:partition} 4 != PdoType_3;
    Tmp_507 := 0;
    goto L147;

  anon87_Then:
    assume {:partition} 2 != PdoType_3;
    Tmp_509 := 0;
    goto L143;

  anon73_Then:
    assume {:partition} PdoType_3 == 8;
    bufLen_4 := 7;
    call {:si_unique_call 921} sdv_257 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    buffer_4 := sdv_257;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} buffer_4 == 0;
    goto L126;

  anon97_Then:
    assume {:partition} buffer_4 != 0;
    call {:si_unique_call 922} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 923} vslice_dummy_var_147 := corral_nondet();
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L126;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    assume {:partition} PdoType_3 == 4;
    bufLen_4 := 7;
    call {:si_unique_call 924} sdv_264 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    buffer_4 := sdv_264;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} buffer_4 != 0;
    call {:si_unique_call 925} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 926} vslice_dummy_var_146 := corral_nondet();
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L126;

  anon95_Then:
    assume {:partition} buffer_4 == 0;
    goto L126;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:partition} PdoType_3 == 2;
    bufLen_4 := 7;
    call {:si_unique_call 927} sdv_279 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    buffer_4 := sdv_279;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} buffer_4 != 0;
    call {:si_unique_call 928} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 929} vslice_dummy_var_145 := corral_nondet();
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L126;

  anon93_Then:
    assume {:partition} buffer_4 == 0;
    goto L126;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    assume {:partition} PdoType_3 == 1;
    bufLen_4 := 5;
    call {:si_unique_call 930} sdv_281 := ExAllocatePoolWithTag(512, bufLen_4, -797810352);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} yogi_error != 1;
    buffer_4 := sdv_281;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} buffer_4 != 0;
    call {:si_unique_call 931} sdv_RtlZeroMemory(0, bufLen_4);
    call {:si_unique_call 932} vslice_dummy_var_143 := corral_nondet();
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L126;

  anon86_Then:
    assume {:partition} buffer_4 == 0;
    goto L126;

  anon85_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon102_Then:
    assume {:partition} buffer_6 == 0;
    goto L275;

  anon101_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon100_Then:
    assume {:partition} buffer_6 == 0;
    goto L263;

  anon99_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon98_Then:
    assume {:partition} 1 != PdoType_3;
    mfgLen_1 := 4;
    mdlLen_1 := 4;
    goto L258;

  anon76_Then:
    assume {:partition} Ieee1284Id_1 != 0;
    tmpBufLen := sdv_260 + 1;
    call {:si_unique_call 933} sdv_267 := ExAllocatePoolWithTag(1, tmpBufLen, -797810352);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} yogi_error != 1;
    tmpBuffer := sdv_267;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} tmpBuffer == 0;
    goto L107;

  anon78_Then:
    assume {:partition} tmpBuffer != 0;
    call {:si_unique_call 934} sdv_RtlZeroMemory(0, tmpBufLen);
    call {:si_unique_call 935} ParPnpFindDeviceIdKeys(mfg, mdl, cls, des, aid, cid, tmpBuffer);
    assume {:nonnull} mfg != 0;
    assume mfg > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    bufLen_2 := sdv_272 + 1;
    call {:si_unique_call 936} sdv_271 := ExAllocatePoolWithTag(257, bufLen_2, -797810352);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    buffer_5 := sdv_271;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} buffer_5 != 0;
    call {:si_unique_call 937} sdv_RtlZeroMemory(0, bufLen_2);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L48;

  L48:
    assume {:nonnull} mdl != 0;
    assume mdl > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    bufLen_3 := sdv_276 + 1;
    call {:si_unique_call 938} sdv_266 := ExAllocatePoolWithTag(257, bufLen_3, -797810352);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    buffer_7 := sdv_266;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} buffer_7 != 0;
    call {:si_unique_call 939} sdv_RtlZeroMemory(0, bufLen_3);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L67;

  L67:
    assume {:nonnull} cid != 0;
    assume cid > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    bufLen_1 := sdv_280 + 1;
    call {:si_unique_call 940} sdv_268 := ExAllocatePoolWithTag(257, bufLen_1, -797810352);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    buffer_3 := sdv_268;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} buffer_3 != 0;
    call {:si_unique_call 941} sdv_RtlZeroMemory(0, bufLen_1);
    assume {:nonnull} pdx_5 != 0;
    assume pdx_5 > 0;
    goto L86;

  L86:
    call {:si_unique_call 942} sdv_ExFreePool(0);
    goto L107;

  anon84_Then:
    assume {:partition} buffer_3 == 0;
    goto L86;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    goto L86;

  anon82_Then:
    assume {:partition} buffer_7 == 0;
    goto L67;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    goto L67;

  anon80_Then:
    assume {:partition} buffer_5 == 0;
    goto L48;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    goto L48;

  anon77_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PptFdoHandleBusRelations"} PptFdoHandleBusRelations(actual_Fdo_3: int, actual_Irp_14: int) returns (Tmp_514: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoHandleBusRelations"} PptFdoHandleBusRelations(actual_Fdo_3: int, actual_Irp_14: int) returns (Tmp_514: int)
{
  var {:pointer} tmpBuffer_1: int;
  var {:pointer} sdv_283: int;
  var {:pointer} Tmp_515: int;
  var {:scalar} Tmp_516: int;
  var {:pointer} devRel: int;
  var {:pointer} des_1: int;
  var {:scalar} count: int;
  var {:pointer} cls_1: int;
  var {:pointer} sdv_287: int;
  var {:scalar} Tmp_517: int;
  var {:pointer} cid_1: int;
  var {:scalar} Tmp_518: int;
  var {:scalar} Tmp_519: int;
  var {:pointer} tmpBuffer_2: int;
  var {:pointer} pdx_6: int;
  var {:scalar} maxDaisyChainId: int;
  var {:scalar} bBuildStlDeviceId_1: int;
  var {:pointer} oldWorkItem: int;
  var {:pointer} legacyZipPdo: int;
  var {:scalar} sdv_291: int;
  var {:scalar} deviceCount: int;
  var {:pointer} sdv_293: int;
  var {:scalar} Tmp_521: int;
  var {:pointer} Tmp_522: int;
  var {:pointer} devId: int;
  var {:pointer} Tmp_523: int;
  var {:pointer} Tmp_524: int;
  var {:scalar} id: int;
  var {:scalar} sdv_297: int;
  var {:scalar} Tmp_525: int;
  var {:pointer} sdv_299: int;
  var {:pointer} Tmp_526: int;
  var {:scalar} Tmp_527: int;
  var {:scalar} sdv_300: int;
  var {:scalar} id_1: int;
  var {:pointer} Tmp_528: int;
  var {:scalar} daisyChainDevCount: int;
  var {:scalar} sdv_301: int;
  var {:scalar} maxId: int;
  var {:pointer} Tmp_529: int;
  var {:scalar} Tmp_530: int;
  var {:scalar} acquirePortTimeout: int;
  var {:pointer} Tmp_531: int;
  var {:scalar} maxId_1: int;
  var {:scalar} Tmp_532: int;
  var {:pointer} Tmp_533: int;
  var {:pointer} Tmp_534: int;
  var {:pointer} mdl_1: int;
  var {:scalar} acquiredPort: int;
  var {:scalar} Tmp_535: int;
  var {:pointer} Tmp_536: int;
  var {:scalar} i_8: int;
  var {:scalar} count_1: int;
  var {:pointer} Tmp_537: int;
  var {:scalar} changeDetected: int;
  var {:scalar} Tmp_538: int;
  var {:scalar} Tmp_539: int;
  var {:scalar} Tmp_540: int;
  var {:scalar} Tmp_541: int;
  var {:pointer} aid_1: int;
  var {:pointer} Tmp_542: int;
  var {:scalar} Tmp_543: int;
  var {:scalar} i_9: int;
  var {:scalar} maxId_2: int;
  var {:dopa} {:scalar} DeviceIdSize_2: int;
  var {:pointer} Tmp_544: int;
  var {:pointer} des_2: int;
  var {:pointer} Tmp_545: int;
  var {:pointer} cls_2: int;
  var {:scalar} sdv_306: int;
  var {:scalar} tmpBufLen_1: int;
  var {:pointer} devId_1: int;
  var {:pointer} workItem: int;
  var {:pointer} aid_2: int;
  var {:scalar} Tmp_547: int;
  var {:scalar} sdv_307: int;
  var {:pointer} Tmp_548: int;
  var {:pointer} Tmp_549: int;
  var {:pointer} Tmp_550: int;
  var {:scalar} Tmp_551: int;
  var {:pointer} sdv_312: int;
  var {:pointer} mfg_1: int;
  var {:scalar} sdv_313: int;
  var {:scalar} Tmp_552: int;
  var {:pointer} sdv_315: int;
  var {:scalar} delay: int;
  var {:scalar} devRelSize: int;
  var {:scalar} Tmp_553: int;
  var {:pointer} Tmp_554: int;
  var {:scalar} id_2: int;
  var {:scalar} Tmp_555: int;
  var {:pointer} Tmp_556: int;
  var {:scalar} id_3: int;
  var {:pointer} Tmp_557: int;
  var {:pointer} Tmp_558: int;
  var {:pointer} Tmp_559: int;
  var {:pointer} fdx_7: int;
  var {:scalar} idx: int;
  var {:pointer} mdl_2: int;
  var {:pointer} cid_2: int;
  var {:pointer} Tmp_560: int;
  var {:scalar} maxDaisyChainId_1: int;
  var {:pointer} Tmp_561: int;
  var {:scalar} status_21: int;
  var {:scalar} Tmp_562: int;
  var {:scalar} i_10: int;
  var {:pointer} controller: int;
  var {:pointer} Tmp_563: int;
  var {:pointer} sdv_320: int;
  var {:pointer} mfg_2: int;
  var {:pointer} EndOfChainPdo: int;
  var {:scalar} tmpBufLen_2: int;
  var {:pointer} Fdo_3: int;
  var {:pointer} Irp_14: int;
  var boogieTmp: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;

  anon0:
    call {:si_unique_call 943} des_1 := __HAVOC_malloc(4);
    call {:si_unique_call 944} cls_1 := __HAVOC_malloc(4);
    call {:si_unique_call 945} cid_1 := __HAVOC_malloc(4);
    call {:si_unique_call 946} acquirePortTimeout := __HAVOC_malloc(20);
    call {:si_unique_call 947} mdl_1 := __HAVOC_malloc(4);
    call {:si_unique_call 948} aid_1 := __HAVOC_malloc(4);
    call {:si_unique_call 949} DeviceIdSize_2 := __HAVOC_malloc(4);
    call {:si_unique_call 950} des_2 := __HAVOC_malloc(4);
    call {:si_unique_call 951} cls_2 := __HAVOC_malloc(4);
    call {:si_unique_call 952} aid_2 := __HAVOC_malloc(4);
    call {:si_unique_call 953} mfg_1 := __HAVOC_malloc(4);
    call {:si_unique_call 954} delay := __HAVOC_malloc(20);
    call {:si_unique_call 955} mdl_2 := __HAVOC_malloc(4);
    call {:si_unique_call 956} cid_2 := __HAVOC_malloc(4);
    call {:si_unique_call 957} mfg_2 := __HAVOC_malloc(4);
    Fdo_3 := actual_Fdo_3;
    Irp_14 := actual_Irp_14;
    call {:si_unique_call 958} Tmp_515 := __HAVOC_malloc(76);
    call {:si_unique_call 959} Tmp_522 := __HAVOC_malloc(4);
    call {:si_unique_call 960} Tmp_523 := __HAVOC_malloc(16);
    call {:si_unique_call 961} Tmp_524 := __HAVOC_malloc(16);
    call {:si_unique_call 962} Tmp_526 := __HAVOC_malloc(76);
    call {:si_unique_call 963} Tmp_529 := __HAVOC_malloc(4);
    call {:si_unique_call 964} Tmp_531 := __HAVOC_malloc(16);
    call {:si_unique_call 965} Tmp_533 := __HAVOC_malloc(16);
    call {:si_unique_call 966} Tmp_534 := __HAVOC_malloc(16);
    call {:si_unique_call 967} Tmp_536 := __HAVOC_malloc(16);
    call {:si_unique_call 968} Tmp_537 := __HAVOC_malloc(16);
    call {:si_unique_call 969} Tmp_542 := __HAVOC_malloc(16);
    call {:si_unique_call 970} Tmp_544 := __HAVOC_malloc(76);
    call {:si_unique_call 971} Tmp_545 := __HAVOC_malloc(76);
    call {:si_unique_call 972} Tmp_548 := __HAVOC_malloc(16);
    call {:si_unique_call 973} Tmp_549 := __HAVOC_malloc(4);
    call {:si_unique_call 974} Tmp_550 := __HAVOC_malloc(4);
    call {:si_unique_call 975} Tmp_556 := __HAVOC_malloc(76);
    call {:si_unique_call 976} Tmp_557 := __HAVOC_malloc(16);
    call {:si_unique_call 977} Tmp_560 := __HAVOC_malloc(80);
    call {:si_unique_call 978} Tmp_561 := __HAVOC_malloc(16);
    call {:si_unique_call 979} Tmp_563 := __HAVOC_malloc(16);
    assume {:nonnull} Fdo_3 != 0;
    assume Fdo_3 > 0;
    havoc fdx_7;
    deviceCount := 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc controller;
    assume {:nonnull} acquirePortTimeout != 0;
    assume acquirePortTimeout > 0;
    call {:si_unique_call 980} status_21 := PptAcquirePortViaIoctl(Fdo_3, acquirePortTimeout);
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} status_21 != 0;
    acquiredPort := 0;
    goto L25;

  L25:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    deviceCount := deviceCount + 1;
    goto L26;

  L26:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    deviceCount := deviceCount + 1;
    goto L28;

  L28:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    goto L32;

  L32:
    maxDaisyChainId_1 := 1;
    i_8 := 0;
    goto L35;

  L35:
    call {:si_unique_call 981} deviceCount, i_8, Tmp_553, Tmp_561 := PptFdoHandleBusRelations_loop_L35(deviceCount, i_8, Tmp_553, fdx_7, maxDaisyChainId_1, Tmp_561);
    goto L35_last;

  L35_last:
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} maxDaisyChainId_1 >= i_8;
    Tmp_553 := i_8;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_561;
    assume {:nonnull} Tmp_561 != 0;
    assume Tmp_561 > 0;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    deviceCount := deviceCount + 1;
    i_8 := i_8 + 1;
    goto anon195_Else_dummy;

  anon195_Else_dummy:
    assume false;
    return;

  anon195_Then:
    goto L36;

  L36:
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} deviceCount <= 0;
    goto L92;

  L92:
    call {:si_unique_call 982} status_21 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_7, Irp_14);
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} acquiredPort != 0;
    call {:si_unique_call 983} workItem := IoAllocateWorkItem(0);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} workItem != 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    call {:si_unique_call 984} sdv_293 := _InlineInterlockedCompareExchangePointer(FreePortWorkItem__FDO_EXTENSION(fdx_7), workItem, 0);
    oldWorkItem := sdv_293;
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:partition} oldWorkItem != 0;
    call {:si_unique_call 985} IoFreeWorkItem(0);
    call {:si_unique_call 986} PptFreePort#1(fdx_7);
    goto L97;

  L97:
    Tmp_514 := status_21;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon200_Then:
    assume {:partition} oldWorkItem == 0;
    call {:si_unique_call 987} IoQueueWorkItem(0, li2bplFunctionConstant433, 1, 0);
    goto L97;

  anon161_Then:
    assume {:partition} workItem == 0;
    call {:si_unique_call 988} PptFreePort#1(fdx_7);
    goto L97;

  anon160_Then:
    assume {:partition} acquiredPort == 0;
    goto L97;

  anon156_Then:
    assume {:partition} 0 < deviceCount;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    goto L92;

  anon157_Then:
    devRelSize := 8 + (deviceCount - 1) * 4;
    call {:si_unique_call 989} sdv_312 := ExAllocatePoolWithTag(257, devRelSize, -797810352);
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} yogi_error != 1;
    devRel := sdv_312;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} devRel != 0;
    idx := 0;
    call {:si_unique_call 990} sdv_RtlZeroMemory(0, devRelSize);
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    call {:si_unique_call 991} vslice_dummy_var_150 := sdv_ObReferenceObject(0);
    Tmp_518 := idx;
    idx := idx + 1;
    Tmp_538 := Tmp_518;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_549;
    assume {:nonnull} Tmp_549 != 0;
    assume Tmp_549 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    call {:si_unique_call 992} vslice_dummy_var_151 := sdv_ObReferenceObject(0);
    Tmp_547 := idx;
    idx := idx + 1;
    Tmp_525 := Tmp_547;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_550;
    assume {:nonnull} Tmp_550 != 0;
    assume Tmp_550 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto L63;

  L63:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    goto L75;

  L75:
    maxDaisyChainId := 3;
    i_9 := 0;
    goto L78;

  L78:
    call {:si_unique_call 993} Tmp_521, Tmp_522, Tmp_523, Tmp_524, Tmp_530, Tmp_533, Tmp_539, Tmp_540, i_9, Tmp_551, idx, vslice_dummy_var_153 := PptFdoHandleBusRelations_loop_L78(devRel, maxDaisyChainId, Tmp_521, Tmp_522, Tmp_523, Tmp_524, Tmp_530, Tmp_533, Tmp_539, Tmp_540, i_9, Tmp_551, fdx_7, idx, vslice_dummy_var_153);
    goto L78_last;

  L78_last:
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} maxDaisyChainId >= i_9;
    Tmp_539 := i_9;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_523;
    assume {:nonnull} Tmp_523 != 0;
    assume Tmp_523 > 0;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    Tmp_551 := i_9;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_533;
    assume {:nonnull} Tmp_533 != 0;
    assume Tmp_533 > 0;
    call {:si_unique_call 994} vslice_dummy_var_153 := sdv_ObReferenceObject(0);
    Tmp_521 := idx;
    idx := idx + 1;
    Tmp_540 := Tmp_521;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_522;
    Tmp_530 := i_9;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_524;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} Tmp_524 != 0;
    assume Tmp_524 > 0;
    i_9 := i_9 + 1;
    goto anon199_Else_dummy;

  anon199_Else_dummy:
    assume false;
    return;

  anon199_Then:
    goto L79;

  L79:
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    goto L92;

  anon159_Then:
    assume {:partition} i_9 > maxDaisyChainId;
    goto L79;

  anon158_Then:
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    call {:si_unique_call 995} vslice_dummy_var_152 := sdv_ObReferenceObject(0);
    Tmp_532 := idx;
    idx := idx + 1;
    Tmp_562 := Tmp_532;
    assume {:nonnull} devRel != 0;
    assume devRel > 0;
    havoc Tmp_529;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto L75;

  anon198_Then:
    goto L63;

  anon197_Then:
    assume {:partition} devRel == 0;
    call {:si_unique_call 996} P4ReleaseBus(Fdo_3);
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc vslice_dummy_var_141;
    call {:si_unique_call 997} Tmp_514 := P4CompleteRequestReleaseRemLock(Irp_14, -1073741670, vslice_dummy_var_141, RemoveLock__FDO_EXTENSION(fdx_7));
    goto L1;

  anon196_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon155_Then:
    assume {:partition} i_8 > maxDaisyChainId_1;
    goto L36;

  anon154_Then:
    deviceCount := deviceCount + 1;
    goto L32;

  anon153_Then:
    goto L28;

  anon152_Then:
    goto L26;

  anon151_Then:
    assume {:partition} status_21 == 0;
    acquiredPort := 1;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon201_Then, anon201_Else;

  anon201_Else:
    goto L131;

  L131:
    call {:si_unique_call 998} vslice_dummy_var_148 := P5DeselectAllDaisyChainDevices(controller);
    assume {:nonnull} delay != 0;
    assume delay > 0;
    call {:si_unique_call 999} vslice_dummy_var_154 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc vslice_dummy_var_142;
    call {:si_unique_call 1000} sdv_297 := P5IsDeviceStillThere(Fdo_3, vslice_dummy_var_142);
    goto anon224_Then, anon224_Else;

  anon224_Else:
    assume {:partition} yogi_error != 1;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} sdv_297 == 0;
    call {:si_unique_call 1001} P5MarkPdoAsHardwareGone(Fdo_3, 2, 0);
    goto L140;

  L140:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    call {:si_unique_call 1002} devId_1 := P4ReadRawIeee1284DeviceId(controller);
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} yogi_error != 1;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} devId_1 != 0;
    tmpBufLen_2 := sdv_307 + 1;
    call {:si_unique_call 1003} sdv_287 := ExAllocatePoolWithTag(1, tmpBufLen_2, -797810352);
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:partition} yogi_error != 1;
    tmpBuffer_1 := sdv_287;
    goto anon222_Then, anon222_Else;

  anon222_Else:
    assume {:partition} tmpBuffer_1 != 0;
    call {:si_unique_call 1004} sdv_RtlZeroMemory(0, tmpBufLen_2);
    call {:si_unique_call 1005} ParPnpFindDeviceIdKeys(mfg_2, mdl_2, cls_1, des_1, aid_2, cid_1, tmpBuffer_1);
    assume {:nonnull} mfg_2 != 0;
    assume mfg_2 > 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:nonnull} mdl_2 != 0;
    assume mdl_2 > 0;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    Tmp_528 := devId_1;
    call {:si_unique_call 1006} EndOfChainPdo := P4CreatePdo(Fdo_3, 2, 0, Tmp_528);
    goto anon223_Then, anon223_Else;

  anon223_Else:
    assume {:partition} yogi_error != 1;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:partition} EndOfChainPdo != 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto L391;

  L391:
    call {:si_unique_call 1007} sdv_ExFreePool(0);
    goto L371;

  L371:
    call {:si_unique_call 1008} sdv_ExFreePool(0);
    goto L150;

  L150:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc vslice_dummy_var_143;
    call {:si_unique_call 1009} sdv_300 := P5IsDeviceStillThere(Fdo_3, vslice_dummy_var_143);
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:partition} yogi_error != 1;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} sdv_300 == 0;
    call {:si_unique_call 1010} P5MarkPdoAsHardwareGone(Fdo_3, 8, 0);
    goto L151;

  L151:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    goto L160;

  L160:
    call {:si_unique_call 1011} daisyChainDevCount := PptInitiate1284_3(fdx_7);
    changeDetected := 0;
    maxId_2 := 1;
    count := 0;
    id_1 := 0;
    goto L171;

  L171:
    call {:si_unique_call 1012} count, Tmp_527, id_1, Tmp_531 := PptFdoHandleBusRelations_loop_L171(count, Tmp_527, id_1, Tmp_531, maxId_2, fdx_7);
    goto L171_last;

  L171_last:
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} maxId_2 >= id_1;
    Tmp_527 := id_1;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_531;
    assume {:nonnull} Tmp_531 != 0;
    assume Tmp_531 > 0;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    count := count + 1;
    goto L174;

  L174:
    id_1 := id_1 + 1;
    goto L174_dummy;

  L174_dummy:
    assume false;
    return;

  anon203_Then:
    goto L174;

  anon170_Then:
    assume {:partition} id_1 > maxId_2;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} count != daisyChainDevCount;
    changeDetected := 1;
    goto L176;

  L176:
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} changeDetected == 0;
    maxId := 1;
    id_2 := 0;
    goto L321;

  L321:
    call {:si_unique_call 1013} sdv_301, Tmp_536, Tmp_542, Tmp_543, Tmp_552, id_2, Tmp_559 := PptFdoHandleBusRelations_loop_L321(sdv_301, maxId, Tmp_536, Tmp_542, Tmp_543, Tmp_552, id_2, Tmp_559, fdx_7, Fdo_3);
    goto L321_last;

  L321_last:
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} maxId >= id_2;
    Tmp_552 := id_2;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_536;
    assume {:nonnull} Tmp_536 != 0;
    assume Tmp_536 > 0;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    Tmp_543 := id_2;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_542;
    assume {:nonnull} Tmp_542 != 0;
    assume Tmp_542 > 0;
    havoc Tmp_559;
    call {:si_unique_call 1014} sdv_301 := P5IsDeviceStillThere(Fdo_3, Tmp_559);
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} yogi_error != 1;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} sdv_301 == 0;
    changeDetected := 1;
    goto L179;

  L179:
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} changeDetected != 0;
    maxId_1 := 1;
    id := 0;
    goto L187;

  L187:
    call {:si_unique_call 1015} id, Tmp_541, Tmp_563 := PptFdoHandleBusRelations_loop_L187(id, maxId_1, Tmp_541, fdx_7, Tmp_563, Fdo_3);
    goto L187_last;

  L187_last:
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} maxId_1 >= id;
    Tmp_541 := id;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_563;
    assume {:nonnull} Tmp_563 != 0;
    assume Tmp_563 > 0;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    call {:si_unique_call 1016} P5MarkPdoAsHardwareGone(Fdo_3, 4, id);
    goto L190;

  L190:
    id := id + 1;
    goto L190_dummy;

  L190_dummy:
    assume false;
    return;

  anon204_Then:
    goto L190;

  anon174_Then:
    assume {:partition} id > maxId_1;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto L180;

  L180:
    call {:si_unique_call 1017} daisyChainDevCount := PptInitiate1284_3(fdx_7);
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} daisyChainDevCount > 2;
    daisyChainDevCount := 2;
    goto L197;

  L197:
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} changeDetected == 0;
    goto L308;

  L308:
    count_1 := 0;
    i_10 := 0;
    i_10 := 0;
    goto L311;

  L311:
    call {:si_unique_call 1018} Tmp_516, Tmp_534, count_1, i_10 := PptFdoHandleBusRelations_loop_L311(Tmp_516, Tmp_534, count_1, fdx_7, i_10);
    goto L311_last;

  L311_last:
    assume {:CounterLoop 2} {:Counter "i_10"} true;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} 2 > i_10;
    Tmp_516 := i_10;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_534;
    assume {:nonnull} Tmp_534 != 0;
    assume Tmp_534 > 0;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    count_1 := count_1 + 1;
    goto L314;

  L314:
    i_10 := i_10 + 1;
    goto L314_dummy;

  L314_dummy:
    assume false;
    return;

  anon216_Then:
    goto L314;

  anon183_Then:
    assume {:partition} i_10 >= 2;
    goto L25;

  anon176_Then:
    assume {:partition} changeDetected != 0;
    id_3 := 0;
    goto L203;

  L203:
    call {:si_unique_call 1019} sdv_283, Tmp_517, Tmp_519, tmpBuffer_2, pdx_6, bBuildStlDeviceId_1, sdv_291, devId, sdv_299, Tmp_535, Tmp_537, tmpBufLen_1, Tmp_548, sdv_315, Tmp_554, Tmp_555, id_3, Tmp_557, Tmp_558, sdv_320, vslice_dummy_var_149, vslice_dummy_var_155 := PptFdoHandleBusRelations_loop_L203(sdv_283, Tmp_517, Tmp_519, tmpBuffer_2, pdx_6, bBuildStlDeviceId_1, sdv_291, devId, sdv_299, daisyChainDevCount, mdl_1, Tmp_535, Tmp_537, aid_1, DeviceIdSize_2, des_2, cls_2, sdv_306, tmpBufLen_1, Tmp_548, mfg_1, sdv_315, Tmp_554, Tmp_555, id_3, Tmp_557, Tmp_558, fdx_7, cid_2, controller, sdv_320, Fdo_3, vslice_dummy_var_149, vslice_dummy_var_155);
    goto L203_last;

  L203_last:
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} daisyChainDevCount <= id_3;
    goto L308;

  anon177_Then:
    assume {:partition} id_3 < daisyChainDevCount;
    bBuildStlDeviceId_1 := 0;
    pdx_6 := 0;
    call {:si_unique_call 1020} sdv_291 := P5SelectDaisyChainDevice(controller, id_3);
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} sdv_291 != 0;
    devId := 0;
    call {:si_unique_call 1021} sdv_315 := ExAllocatePoolWithTag(257, 1248, -797810352);
    goto anon205_Then, anon205_Else;

  anon205_Else:
    assume {:partition} yogi_error != 1;
    pdx_6 := sdv_315;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} pdx_6 != 0;
    call {:si_unique_call 1022} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    Tmp_555 := id_3;
    call {:si_unique_call 1023} bBuildStlDeviceId_1 := ParStlCheckIfStl(pdx_6, Tmp_555);
    call {:si_unique_call 1024} sdv_ExFreePool(0);
    goto L220;

  L220:
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} bBuildStlDeviceId_1 != 0;
    call {:si_unique_call 1025} sdv_320 := ExAllocatePoolWithTag(257, 1248, -797810352);
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:partition} yogi_error != 1;
    pdx_6 := sdv_320;
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} pdx_6 != 0;
    call {:si_unique_call 1026} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    call {:si_unique_call 1027} devId := ParStlQueryStlDeviceId(pdx_6, 0, 0, DeviceIdSize_2, 1);
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1028} sdv_ExFreePool(0);
    goto L241;

  L241:
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} devId != 0;
    tmpBufLen_1 := sdv_306 + 1;
    call {:si_unique_call 1029} sdv_299 := ExAllocatePoolWithTag(1, tmpBufLen_1, -797810352);
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:partition} yogi_error != 1;
    tmpBuffer_2 := sdv_299;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} tmpBuffer_2 != 0;
    call {:si_unique_call 1030} sdv_RtlZeroMemory(0, tmpBufLen_1);
    call {:si_unique_call 1031} ParPnpFindDeviceIdKeys(mfg_1, mdl_1, cls_2, des_2, aid_1, cid_2, tmpBuffer_2);
    assume {:nonnull} mfg_1 != 0;
    assume mfg_1 > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:nonnull} mdl_1 != 0;
    assume mdl_1 > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    Tmp_554 := devId;
    call {:si_unique_call 1032} sdv_283 := P4CreatePdo(Fdo_3, 4, id_3, Tmp_554);
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:partition} yogi_error != 1;
    Tmp_535 := id_3;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_548;
    assume {:nonnull} Tmp_548 != 0;
    assume Tmp_548 > 0;
    Tmp_517 := id_3;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_557;
    assume {:nonnull} Tmp_557 != 0;
    assume Tmp_557 > 0;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:partition} bBuildStlDeviceId_1 != 0;
    Tmp_519 := id_3;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    havoc Tmp_537;
    assume {:nonnull} Tmp_537 != 0;
    assume Tmp_537 > 0;
    havoc Tmp_558;
    assume {:nonnull} Tmp_558 != 0;
    assume Tmp_558 > 0;
    havoc pdx_6;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    assume {:nonnull} pdx_6 != 0;
    assume pdx_6 > 0;
    call {:si_unique_call 1033} vslice_dummy_var_155 := ParStlCheckIfStl(pdx_6, 0);
    goto L289;

  L289:
    call {:si_unique_call 1034} sdv_ExFreePool(0);
    goto L269;

  L269:
    call {:si_unique_call 1035} sdv_ExFreePool(0);
    goto L254;

  L254:
    call {:si_unique_call 1036} vslice_dummy_var_149 := P5DeselectAllDaisyChainDevices(controller);
    goto L212;

  L212:
    id_3 := id_3 + 1;
    goto L212_dummy;

  L212_dummy:
    assume false;
    return;

  anon214_Then:
    assume {:partition} bBuildStlDeviceId_1 == 0;
    goto L289;

  anon213_Then:
    goto L289;

  anon212_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon182_Then:
    goto L289;

  anon181_Then:
    goto L289;

  anon211_Then:
    assume {:partition} tmpBuffer_2 == 0;
    goto L269;

  anon210_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon180_Then:
    assume {:partition} devId == 0;
    goto L254;

  anon209_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon208_Then:
    assume {:partition} pdx_6 == 0;
    goto L241;

  anon207_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon179_Then:
    assume {:partition} bBuildStlDeviceId_1 == 0;
    call {:si_unique_call 1037} devId := P4ReadRawIeee1284DeviceId(controller);
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:partition} yogi_error != 1;
    goto L241;

  anon215_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon206_Then:
    assume {:partition} pdx_6 == 0;
    goto L220;

  anon205_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon178_Then:
    assume {:partition} sdv_291 == 0;
    goto L212;

  anon175_Then:
    assume {:partition} 2 >= daisyChainDevCount;
    goto L197;

  anon173_Then:
    assume {:partition} changeDetected == 0;
    goto L180;

  anon185_Then:
    assume {:partition} sdv_301 != 0;
    goto L323;

  L323:
    id_2 := id_2 + 1;
    goto L323_dummy;

  L323_dummy:
    assume false;
    return;

  anon218_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon217_Then:
    goto L323;

  anon184_Then:
    assume {:partition} id_2 > maxId;
    goto L179;

  anon172_Then:
    assume {:partition} changeDetected != 0;
    goto L179;

  anon171_Then:
    assume {:partition} count == daisyChainDevCount;
    goto L176;

  anon167_Then:
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    goto L334;

  L334:
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    call {:si_unique_call 1038} sdv_313 := P5LegacyZipDetected(controller);
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} sdv_313 != 0;
    call {:si_unique_call 1039} legacyZipPdo := P4CreatePdo(Fdo_3, 8, 0, 0);
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} yogi_error != 1;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} legacyZipPdo != 0;
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    goto L160;

  anon188_Then:
    assume {:partition} legacyZipPdo == 0;
    goto L160;

  anon219_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon187_Then:
    assume {:partition} sdv_313 == 0;
    goto L160;

  anon186_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    goto L160;

  anon169_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    Tmp_515 := strConst__li2bpl22;
    Tmp_556 := strConst__li2bpl24;
    call {:si_unique_call 1040} vslice_dummy_var_156 := PptRegGetDword(1, Tmp_515, Tmp_556, ParEnableLegacyZip);
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    Tmp_560 := strConst__li2bpl23;
    Tmp_545 := strConst__li2bpl24;
    call {:si_unique_call 1041} vslice_dummy_var_157 := PptRegGetDword(1, Tmp_560, Tmp_545, ParEnableLegacyZip);
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    Tmp_526 := strConst__li2bpl22;
    Tmp_544 := strConst__li2bpl24;
    call {:si_unique_call 1042} vslice_dummy_var_158 := PptRegSetDword(1, Tmp_526, Tmp_544, ParEnableLegacyZip);
    goto L334;

  anon190_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] == 0;
    goto L334;

  anon189_Then:
    assume {:partition} Mem_T.INT4[ParEnableLegacyZip] != 0;
    goto L334;

  anon168_Then:
    assume {:partition} sdv_300 != 0;
    goto L151;

  anon202_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon166_Then:
    goto L151;

  anon194_Then:
    assume {:partition} EndOfChainPdo == 0;
    goto L391;

  anon223_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon193_Then:
    goto L391;

  anon192_Then:
    goto L391;

  anon222_Then:
    assume {:partition} tmpBuffer_1 == 0;
    goto L371;

  anon221_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon191_Then:
    assume {:partition} devId_1 == 0;
    goto L150;

  anon220_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon163_Then:
    goto L150;

  anon165_Then:
    assume {:partition} sdv_297 != 0;
    goto L140;

  anon224_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon164_Then:
    goto L140;

  anon162_Then:
    goto L140;

  anon201_Then:
    assume {:nonnull} fdx_7 != 0;
    assume fdx_7 > 0;
    call {:si_unique_call 1043} boogieTmp := P4CreatePdo(Fdo_3, 1, 0, 0);
    goto anon225_Then, anon225_Else;

  anon225_Else:
    assume {:partition} yogi_error != 1;
    goto L131;

  anon225_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "P5IsDeviceStillThere"} P5IsDeviceStillThere(actual_Fdo_4: int, actual_Pdo_5: int) returns (Tmp_564: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5IsDeviceStillThere"} P5IsDeviceStillThere(actual_Fdo_4: int, actual_Pdo_5: int) returns (Tmp_564: int)
{
  var {:pointer} devIdString: int;
  var {:pointer} aid_3: int;
  var {:pointer} des_3: int;
  var {:dopa} {:scalar} DeviceIdSize_3: int;
  var {:pointer} des_4: int;
  var {:pointer} cls_3: int;
  var {:scalar} sdv_322: int;
  var {:pointer} cls_4: int;
  var {:scalar} sdv_323: int;
  var {:pointer} cid_3: int;
  var {:scalar} daisyChainId: int;
  var {:pointer} aid_4: int;
  var {:scalar} tryNumber: int;
  var {:pointer} Tmp_566: int;
  var {:pointer} pdx_7: int;
  var {:scalar} bBuildStlDeviceId_2: int;
  var {:scalar} deviceStillThere: int;
  var {:scalar} maxTries_1: int;
  var {:scalar} sdv_327: int;
  var {:pointer} mfg_3: int;
  var {:scalar} sdv_328: int;
  var {:scalar} sdv_329: int;
  var {:scalar} delay_1: int;
  var {:scalar} Tmp_567: int;
  var {:pointer} sdv_330: int;
  var {:pointer} fdx_8: int;
  var {:pointer} mdl_3: int;
  var {:pointer} cid_4: int;
  var {:scalar} sdv_334: int;
  var {:pointer} dummyPdx: int;
  var {:pointer} Tmp_568: int;
  var {:pointer} controller_1: int;
  var {:pointer} mfg_4: int;
  var {:pointer} mdl_4: int;
  var {:pointer} Fdo_4: int;
  var {:pointer} Pdo_5: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_144: int;

  anon0:
    call {:si_unique_call 1044} aid_3 := __HAVOC_malloc(4);
    call {:si_unique_call 1045} des_3 := __HAVOC_malloc(4);
    call {:si_unique_call 1046} DeviceIdSize_3 := __HAVOC_malloc(4);
    call {:si_unique_call 1047} des_4 := __HAVOC_malloc(4);
    call {:si_unique_call 1048} cls_3 := __HAVOC_malloc(4);
    call {:si_unique_call 1049} cls_4 := __HAVOC_malloc(4);
    call {:si_unique_call 1050} cid_3 := __HAVOC_malloc(4);
    call {:si_unique_call 1051} aid_4 := __HAVOC_malloc(4);
    call {:si_unique_call 1052} mfg_3 := __HAVOC_malloc(4);
    call {:si_unique_call 1053} delay_1 := __HAVOC_malloc(20);
    call {:si_unique_call 1054} mdl_3 := __HAVOC_malloc(4);
    call {:si_unique_call 1055} cid_4 := __HAVOC_malloc(4);
    call {:si_unique_call 1056} mfg_4 := __HAVOC_malloc(4);
    call {:si_unique_call 1057} mdl_4 := __HAVOC_malloc(4);
    Fdo_4 := actual_Fdo_4;
    Pdo_5 := actual_Pdo_5;
    assume {:nonnull} Fdo_4 != 0;
    assume Fdo_4 > 0;
    havoc fdx_8;
    assume {:nonnull} Pdo_5 != 0;
    assume Pdo_5 > 0;
    havoc pdx_7;
    deviceStillThere := 0;
    devIdString := 0;
    assume {:nonnull} fdx_8 != 0;
    assume fdx_8 > 0;
    havoc controller_1;
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} fdx_8 != 0;
    assume fdx_8 > 0;
    havoc vslice_dummy_var_144;
    call {:si_unique_call 1058} deviceStillThere := P5LegacyZipDetected(vslice_dummy_var_144);
    goto L26;

  L26:
    Tmp_564 := deviceStillThere;
    goto LM2;

  LM2:
    return;

  anon73_Then:
    deviceStillThere := 1;
    goto L26;

  anon74_Then:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    havoc daisyChainId;
    call {:si_unique_call 1059} sdv_328 := P5SelectDaisyChainDevice(controller_1, daisyChainId);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_328 != 0;
    bBuildStlDeviceId_2 := 0;
    dummyPdx := 0;
    devIdString := 0;
    call {:si_unique_call 1060} sdv_330 := ExAllocatePoolWithTag(1, 1248, -797810352);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    dummyPdx := sdv_330;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} dummyPdx != 0;
    call {:si_unique_call 1061} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} dummyPdx != 0;
    assume dummyPdx > 0;
    assume {:nonnull} fdx_8 != 0;
    assume fdx_8 > 0;
    Tmp_567 := daisyChainId;
    call {:si_unique_call 1062} bBuildStlDeviceId_2 := ParStlCheckIfStl(dummyPdx, Tmp_567);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} bBuildStlDeviceId_2 != 0;
    call {:si_unique_call 1063} devIdString := ParStlQueryStlDeviceId(dummyPdx, 0, 0, DeviceIdSize_3, 1);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} yogi_error != 1;
    goto L62;

  L62:
    call {:si_unique_call 1064} sdv_ExFreePool(0);
    goto L43;

  L43:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} devIdString != 0;
    Tmp_568 := devIdString;
    call {:si_unique_call 1065} ParPnpFindDeviceIdKeys(mfg_3, mdl_4, cls_4, des_4, aid_3, cid_4, Tmp_568);
    assume {:nonnull} mfg_3 != 0;
    assume mfg_3 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} mdl_4 != 0;
    assume mdl_4 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_334 == 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_327 == 0;
    deviceStillThere := 1;
    goto L88;

  L88:
    call {:si_unique_call 1066} sdv_ExFreePool(0);
    goto L91;

  L91:
    call {:si_unique_call 1067} vslice_dummy_var_159 := P5DeselectAllDaisyChainDevices(controller_1);
    goto L26;

  anon61_Then:
    assume {:partition} sdv_327 != 0;
    goto L87;

  L87:
    deviceStillThere := 0;
    goto L88;

  anon60_Then:
    assume {:partition} sdv_334 != 0;
    goto L87;

  anon59_Then:
    goto L78;

  L78:
    deviceStillThere := 0;
    goto L88;

  anon58_Then:
    goto L78;

  anon56_Then:
    assume {:partition} devIdString == 0;
    deviceStillThere := 0;
    goto L91;

  anon80_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:partition} bBuildStlDeviceId_2 == 0;
    call {:si_unique_call 1068} devIdString := P4ReadRawIeee1284DeviceId(controller_1);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    goto L62;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon79_Then:
    assume {:partition} dummyPdx == 0;
    goto L43;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} sdv_328 == 0;
    deviceStillThere := 0;
    goto L26;

  anon75_Then:
    tryNumber := 0;
    maxTries_1 := 5;
    goto L100;

  L100:
    call {:si_unique_call 1069} devIdString, sdv_323, tryNumber, Tmp_566, deviceStillThere, vslice_dummy_var_160 := P5IsDeviceStillThere_loop_L100(devIdString, des_3, cls_3, sdv_322, sdv_323, cid_3, aid_4, tryNumber, Tmp_566, pdx_7, deviceStillThere, maxTries_1, sdv_329, delay_1, mdl_3, controller_1, mfg_4, vslice_dummy_var_160);
    goto L100_last;

  L100_last:
    tryNumber := tryNumber + 1;
    call {:si_unique_call 1074} devIdString := P4ReadRawIeee1284DeviceId(controller_1);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} yogi_error != 1;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} devIdString != 0;
    Tmp_566 := devIdString;
    call {:si_unique_call 1070} ParPnpFindDeviceIdKeys(mfg_4, mdl_3, cls_3, des_3, aid_4, cid_3, Tmp_566);
    assume {:nonnull} mfg_4 != 0;
    assume mfg_4 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} mdl_3 != 0;
    assume mdl_3 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} pdx_7 != 0;
    assume pdx_7 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} sdv_329 == 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} sdv_322 == 0;
    deviceStillThere := 1;
    goto L130;

  L130:
    call {:si_unique_call 1071} sdv_ExFreePool(0);
    goto L133;

  L133:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} deviceStillThere != 0;
    goto L137;

  L137:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} deviceStillThere == 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} maxTries_1 > tryNumber;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:partition} tryNumber >= maxTries_1;
    goto L26;

  anon69_Then:
    assume {:partition} deviceStillThere != 0;
    goto L26;

  anon68_Then:
    assume {:partition} deviceStillThere == 0;
    call {:si_unique_call 1072} sdv_323 := sdv_KeGetCurrentIrql();
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_323 == 0;
    assume {:nonnull} delay_1 != 0;
    assume delay_1 > 0;
    call {:si_unique_call 1073} vslice_dummy_var_160 := KeDelayExecutionThread(0, 0, 0);
    goto L137;

  anon71_Then:
    assume {:partition} sdv_323 != 0;
    goto L137;

  anon72_Then:
    assume {:partition} sdv_322 != 0;
    goto L129;

  L129:
    deviceStillThere := 0;
    goto L130;

  anon67_Then:
    assume {:partition} sdv_329 != 0;
    goto L129;

  anon66_Then:
    goto L118;

  L118:
    deviceStillThere := 0;
    goto L130;

  anon65_Then:
    goto L118;

  anon64_Then:
    goto L118;

  anon63_Then:
    goto L118;

  anon62_Then:
    assume {:partition} devIdString == 0;
    deviceStillThere := 0;
    goto L133;

  anon77_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    deviceStillThere := 1;
    goto L26;
}



procedure {:origName "PptAcquirePortViaIoctl"} PptAcquirePortViaIoctl(actual_PortDeviceObject: int, actual_Timeout_1: int) returns (Tmp_569: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptAcquirePortViaIoctl"} PptAcquirePortViaIoctl(actual_PortDeviceObject: int, actual_Timeout_1: int) returns (Tmp_569: int)
{
  var {:scalar} localTimeout: int;
  var {:pointer} PortDeviceObject: int;
  var {:pointer} Timeout_1: int;

  anon0:
    call {:si_unique_call 1075} localTimeout := __HAVOC_malloc(20);
    PortDeviceObject := actual_PortDeviceObject;
    Timeout_1 := actual_Timeout_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Timeout_1 != 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} Timeout_1 != 0;
    assume Timeout_1 > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    goto L7;

  L7:
    call {:si_unique_call 1076} Tmp_569 := ParBuildSendInternalIoctl(1441836, PortDeviceObject, 0, 0, 0, 0, localTimeout);
    return;

  anon3_Then:
    assume {:partition} Timeout_1 == 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    assume {:nonnull} localTimeout != 0;
    assume localTimeout > 0;
    goto L7;
}



procedure {:origName "P4DestroyPdo"} P4DestroyPdo(actual_Pdo_6: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4DestroyPdo"} P4DestroyPdo(actual_Pdo_6: int)
{
  var {:scalar} sdv_337: int;
  var {:pointer} pdx_8: int;
  var {:scalar} done: int;
  var {:pointer} sdv_341: int;
  var {:pointer} fdo_1: int;
  var {:pointer} current: int;
  var {:pointer} fdx_9: int;
  var {:pointer} Pdo_6: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 1077} vslice_dummy_var_161 := __HAVOC_malloc(4);
    Pdo_6 := actual_Pdo_6;
    call {:si_unique_call 1078} vslice_dummy_var_164 := __HAVOC_malloc(60);
    assume {:nonnull} Pdo_6 != 0;
    assume Pdo_6 > 0;
    havoc pdx_8;
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    havoc fdo_1;
    assume {:nonnull} fdo_1 != 0;
    assume fdo_1 > 0;
    havoc fdx_9;
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    call {:si_unique_call 1079} vslice_dummy_var_165 := RtlDeleteRegistryValue(4, 0, 0);
    goto L10;

  L10:
    call {:si_unique_call 1080} sdv_337 := sdv_IsListEmpty(0);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} sdv_337 == 0;
    done := 0;
    goto L77;

  L77:
    call {:si_unique_call 1081} done, sdv_341, current, vslice_dummy_var_163, vslice_dummy_var_166 := P4DestroyPdo_loop_L77(pdx_8, done, sdv_341, current, fdx_9, vslice_dummy_var_163, vslice_dummy_var_166);
    goto L77_last;

  L77_last:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} done == 0;
    assume {:nonnull} fdx_9 != 0;
    assume fdx_9 > 0;
    call {:si_unique_call 1082} current := RemoveHeadList(DevDeletionListHead__FDO_EXTENSION(fdx_9));
    call {:si_unique_call 1083} sdv_341 := sdv_containing_record(current, 100);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_341 != pdx_8;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} fdx_9 != 0;
    assume fdx_9 > 0;
    call {:si_unique_call 1084} InsertHeadList(DevDeletionListHead__FDO_EXTENSION(fdx_9), current);
    done := 1;
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} fdx_9 != 0;
    assume fdx_9 > 0;
    call {:si_unique_call 1085} vslice_dummy_var_163 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(fdx_9), current);
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:nonnull} fdx_9 != 0;
    assume fdx_9 > 0;
    call {:si_unique_call 1086} vslice_dummy_var_166 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(fdx_9), current);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    assume false;
    return;

  anon39_Then:
    assume {:partition} sdv_341 == pdx_8;
    done := 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    assume false;
    return;

  anon38_Then:
    assume {:partition} done != 0;
    goto L21;

  L21:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    call {:si_unique_call 1087} vslice_dummy_var_162 := Queue_Delete(ShadowBuffer__PDO_EXTENSION(pdx_8));
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto L22;

  L22:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    call {:si_unique_call 1088} P5DeletePdoSymLink(Pdo_6);
    goto L32;

  L32:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    call {:si_unique_call 1089} sdv_ExFreePool(0);
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto L36;

  L36:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 1090} sdv_ExFreePool(0);
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto L42;

  L42:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    call {:si_unique_call 1091} sdv_ExFreePool(0);
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto L48;

  L48:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    call {:si_unique_call 1092} RtlFreeUnicodeString(0);
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto L54;

  L54:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 1093} sdv_ExFreePool(0);
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto L60;

  L60:
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 1094} sdv_ExFreePool(0);
    assume {:nonnull} pdx_8 != 0;
    assume pdx_8 > 0;
    goto L66;

  L66:
    call {:si_unique_call 1095} IoDeleteDevice(0);
    return;

  anon37_Then:
    goto L66;

  anon36_Then:
    goto L60;

  anon35_Then:
    goto L54;

  anon34_Then:
    goto L48;

  anon33_Then:
    goto L42;

  anon32_Then:
    goto L36;

  anon31_Then:
    goto L32;

  anon30_Then:
    goto L22;

  anon29_Then:
    assume {:partition} sdv_337 != 0;
    goto L21;

  anon42_Then:
    goto L10;
}



procedure {:origName "P4MakePdoSymLinkName"} P4MakePdoSymLinkName(actual_LptName_1: int, actual_PdoType_4: int, actual_DaisyChainId_4: int, actual_RetryNumber_1: int) returns (Tmp_574: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4MakePdoSymLinkName"} P4MakePdoSymLinkName(actual_LptName_1: int, actual_PdoType_4: int, actual_DaisyChainId_4: int, actual_RetryNumber_1: int) returns (Tmp_574: int)
{
  var {:scalar} legacyZipSuffix_1: int;
  var {:scalar} maxDaisyChainSuffix_1: int;
  var {:scalar} endOfChainSuffix_1: int;
  var {:pointer} sdv_342: int;
  var {:scalar} maxSymLinkNameLength: int;
  var {:pointer} sdv_344: int;
  var {:pointer} buffer_8: int;
  var {:pointer} LptName_1: int;
  var {:scalar} PdoType_4: int;
  var {:scalar} DaisyChainId_4: int;
  var {:scalar} RetryNumber_1: int;
  var vslice_dummy_var_167: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;

  anon0:
    LptName_1 := actual_LptName_1;
    PdoType_4 := actual_PdoType_4;
    DaisyChainId_4 := actual_DaisyChainId_4;
    RetryNumber_1 := actual_RetryNumber_1;
    call {:si_unique_call 1096} vslice_dummy_var_167 := __HAVOC_malloc(92);
    call {:si_unique_call 1097} vslice_dummy_var_168 := __HAVOC_malloc(64);
    call {:si_unique_call 1098} vslice_dummy_var_169 := __HAVOC_malloc(76);
    call {:si_unique_call 1099} vslice_dummy_var_170 := __HAVOC_malloc(80);
    maxDaisyChainSuffix_1 := 3;
    endOfChainSuffix_1 := 4;
    legacyZipSuffix_1 := 5;
    maxSymLinkNameLength := 42;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} LptName_1 != 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} PdoType_4 != 1;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} PdoType_4 != 2;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} PdoType_4 != 4;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} PdoType_4 == 8;
    goto L23;

  L23:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} RetryNumber_1 != 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} 9 >= RetryNumber_1;
    call {:si_unique_call 1100} sdv_344 := ExAllocatePoolWithTag(257, maxSymLinkNameLength, -797810352);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    buffer_8 := sdv_344;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} buffer_8 != 0;
    call {:si_unique_call 1101} sdv_RtlZeroMemory(0, maxSymLinkNameLength);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 1 == PdoType_4;
    call {:si_unique_call 1102} vslice_dummy_var_171 := corral_nondet();
    goto L34;

  L34:
    Tmp_574 := buffer_8;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon33_Then:
    assume {:partition} 1 != PdoType_4;
    call {:si_unique_call 1103} vslice_dummy_var_172 := corral_nondet();
    goto L34;

  anon40_Then:
    assume {:partition} buffer_8 == 0;
    goto L34;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} RetryNumber_1 > 9;
    buffer_8 := 0;
    goto L34;

  anon31_Then:
    assume {:partition} RetryNumber_1 == 0;
    call {:si_unique_call 1104} sdv_342 := ExAllocatePoolWithTag(257, maxSymLinkNameLength, -797810352);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    buffer_8 := sdv_342;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} buffer_8 != 0;
    call {:si_unique_call 1105} sdv_RtlZeroMemory(0, maxSymLinkNameLength);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 1 == PdoType_4;
    call {:si_unique_call 1106} vslice_dummy_var_173 := corral_nondet();
    goto L34;

  anon34_Then:
    assume {:partition} 1 != PdoType_4;
    call {:si_unique_call 1107} vslice_dummy_var_174 := corral_nondet();
    goto L34;

  anon42_Then:
    assume {:partition} buffer_8 == 0;
    goto L34;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:partition} PdoType_4 != 8;
    Tmp_574 := 0;
    goto L1;

  anon36_Then:
    assume {:partition} PdoType_4 == 4;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} DaisyChainId_4 > maxDaisyChainSuffix_1;
    Tmp_574 := 0;
    goto L1;

  anon30_Then:
    assume {:partition} maxDaisyChainSuffix_1 >= DaisyChainId_4;
    goto L23;

  anon37_Then:
    assume {:partition} PdoType_4 == 2;
    goto L23;

  anon29_Then:
    assume {:partition} PdoType_4 == 1;
    goto L23;

  anon38_Then:
    assume {:partition} LptName_1 == 0;
    Tmp_574 := 0;
    goto L1;
}



procedure {:origName "PptPnpFilterNukeIrqResourceDescriptors"} PptPnpFilterNukeIrqResourceDescriptors(actual_IoResourceList: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpFilterNukeIrqResourceDescriptors"} PptPnpFilterNukeIrqResourceDescriptors(actual_IoResourceList: int)
{
  var {:scalar} i_11: int;
  var {:pointer} pIoResourceDescriptorIn: int;
  var {:pointer} IoResourceList: int;
  var vslice_dummy_var_175: int;

  anon0:
    call {:si_unique_call 1108} vslice_dummy_var_175 := __HAVOC_malloc(4);
    IoResourceList := actual_IoResourceList;
    assume {:nonnull} IoResourceList != 0;
    assume IoResourceList > 0;
    havoc pIoResourceDescriptorIn;
    i_11 := 0;
    goto L7;

  L7:
    call {:si_unique_call 1109} i_11 := PptPnpFilterNukeIrqResourceDescriptors_loop_L7(i_11, pIoResourceDescriptorIn, IoResourceList);
    goto L7_last;

  L7_last:
    assume {:nonnull} IoResourceList != 0;
    assume IoResourceList > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} pIoResourceDescriptorIn != 0;
    assume pIoResourceDescriptorIn > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} pIoResourceDescriptorIn != 0;
    assume pIoResourceDescriptorIn > 0;
    goto L9;

  L9:
    i_11 := i_11 + 1;
    goto L9_dummy;

  L9_dummy:
    assume false;
    return;

  anon6_Then:
    goto L9;

  anon5_Then:
    return;
}



procedure {:origName "PptPnpFilterRemoveIrqResourceLists"} PptPnpFilterRemoveIrqResourceLists(actual_ResourceRequirementsList_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpFilterRemoveIrqResourceLists"} PptPnpFilterRemoveIrqResourceLists(actual_ResourceRequirementsList_2: int)
{
  var {:scalar} i_12: int;
  var {:pointer} sdv_348: int;
  var {:scalar} listCount_2: int;
  var {:scalar} sdv_349: int;
  var {:pointer} curList_2: int;
  var {:scalar} bytesToMove: int;
  var {:pointer} currentEndOfResourceRequirementsList: int;
  var {:pointer} ResourceRequirementsList_2: int;
  var vslice_dummy_var_176: int;

  anon0:
    call {:si_unique_call 1110} vslice_dummy_var_176 := __HAVOC_malloc(4);
    ResourceRequirementsList_2 := actual_ResourceRequirementsList_2;
    assume {:nonnull} ResourceRequirementsList_2 != 0;
    assume ResourceRequirementsList_2 > 0;
    havoc listCount_2;
    call {:si_unique_call 1111} sdv_348 := PptPnpFilterGetEndOfResourceRequirementsList(ResourceRequirementsList_2);
    currentEndOfResourceRequirementsList := sdv_348;
    i_12 := 0;
    assume {:nonnull} ResourceRequirementsList_2 != 0;
    assume ResourceRequirementsList_2 > 0;
    havoc curList_2;
    goto L16;

  L16:
    call {:si_unique_call 1112} i_12, listCount_2, sdv_349, curList_2, bytesToMove := PptPnpFilterRemoveIrqResourceLists_loop_L16(i_12, listCount_2, sdv_349, curList_2, bytesToMove, currentEndOfResourceRequirementsList);
    goto L16_last;

  L16_last:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} listCount_2 > i_12;
    call {:si_unique_call 1113} sdv_349 := PptPnpListContainsIrqResourceDescriptor(curList_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_349 != 0;
    assume {:nonnull} curList_2 != 0;
    assume curList_2 > 0;
    bytesToMove := currentEndOfResourceRequirementsList;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} bytesToMove > 0;
    call {:si_unique_call 1114} sdv_RtlMoveMemory(0, 0, bytesToMove);
    goto L26;

  L26:
    listCount_2 := listCount_2 - 1;
    goto L26_dummy;

  L26_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} 0 >= bytesToMove;
    goto L26;

  anon8_Then:
    assume {:partition} sdv_349 == 0;
    assume {:nonnull} curList_2 != 0;
    assume curList_2 > 0;
    havoc curList_2;
    i_12 := i_12 + 1;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    assume false;
    return;

  anon7_Then:
    assume {:partition} i_12 >= listCount_2;
    assume {:nonnull} ResourceRequirementsList_2 != 0;
    assume ResourceRequirementsList_2 > 0;
    return;
}



procedure {:origName "P4SanitizeId"} P4SanitizeId(actual_DeviceId_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4SanitizeId"} P4SanitizeId(actual_DeviceId_1: int)
{
  var {:pointer} p_8: int;
  var {:pointer} DeviceId_1: int;
  var vslice_dummy_var_177: int;

  anon0:
    call {:si_unique_call 1115} vslice_dummy_var_177 := __HAVOC_malloc(4);
    DeviceId_1 := actual_DeviceId_1;
    p_8 := DeviceId_1;
    goto L5;

  L5:
    call {:si_unique_call 1116} P4SanitizeId_loop_L5(p_8);
    goto L5_last;

  L5_last:
    assume {:nonnull} p_8 != 0;
    assume p_8 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[p_8] != 0;
    assume {:nonnull} p_8 != 0;
    assume p_8 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 32 >= Mem_T.INT4[p_8];
    goto L8;

  L8:
    assume {:nonnull} p_8 != 0;
    assume p_8 > 0;
    Mem_T.INT4[p_8] := 95;
    goto L9;

  L9:
    goto L9_dummy;

  L9_dummy:
    assume false;
    return;

  anon10_Then:
    assume {:partition} Mem_T.INT4[p_8] > 32;
    assume {:nonnull} p_8 != 0;
    assume p_8 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[p_8] <= 127;
    assume {:nonnull} p_8 != 0;
    assume p_8 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[p_8] != 44;
    goto L9;

  anon12_Then:
    assume {:partition} Mem_T.INT4[p_8] == 44;
    goto L8;

  anon11_Then:
    assume {:partition} 127 < Mem_T.INT4[p_8];
    goto L8;

  anon9_Then:
    assume {:partition} Mem_T.INT4[p_8] == 0;
    return;
}



procedure {:origName "PptPnpStartScanCmResourceList"} PptPnpStartScanCmResourceList(actual_Fdx_4: int, actual_Irp_15: int, actual_FoundPort_2: int, actual_FoundIrq_2: int, actual_FoundDma_2: int) returns (Tmp_586: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_586 == 0 || Tmp_586 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpStartScanCmResourceList"} PptPnpStartScanCmResourceList(actual_Fdx_4: int, actual_Irp_15: int, actual_FoundPort_2: int, actual_FoundIrq_2: int, actual_FoundDma_2: int) returns (Tmp_586: int)
{
  var {:scalar} i_13: int;
  var {:pointer} FullResourceDescriptor_2: int;
  var {:pointer} irpStack_2: int;
  var {:pointer} PartialResourceDescriptor_2: int;
  var {:pointer} Tmp_588: int;
  var {:scalar} sdv_351: int;
  var {:pointer} Tmp_589: int;
  var {:scalar} start: int;
  var {:scalar} Tmp_590: int;
  var {:pointer} ResourceList_2: int;
  var {:scalar} status_23: int;
  var {:pointer} PartialResourceList_2: int;
  var {:pointer} Fdx_4: int;
  var {:pointer} Irp_15: int;
  var {:pointer} FoundPort_2: int;
  var {:pointer} FoundIrq_2: int;
  var {:pointer} FoundDma_2: int;

  anon0:
    call {:si_unique_call 1117} start := __HAVOC_malloc(20);
    Fdx_4 := actual_Fdx_4;
    Irp_15 := actual_Irp_15;
    FoundPort_2 := actual_FoundPort_2;
    FoundIrq_2 := actual_FoundIrq_2;
    FoundDma_2 := actual_FoundDma_2;
    call {:si_unique_call 1118} Tmp_588 := __HAVOC_malloc(312);
    call {:si_unique_call 1119} Tmp_589 := __HAVOC_malloc(292);
    status_23 := 0;
    call {:si_unique_call 1120} irpStack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_15);
    assume {:nonnull} FoundPort_2 != 0;
    assume FoundPort_2 > 0;
    Mem_T.INT4[FoundPort_2] := 0;
    assume {:nonnull} FoundIrq_2 != 0;
    assume FoundIrq_2 > 0;
    Mem_T.INT4[FoundIrq_2] := 0;
    assume {:nonnull} FoundDma_2 != 0;
    assume FoundDma_2 > 0;
    Mem_T.INT4[FoundDma_2] := 0;
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    havoc ResourceList_2;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} ResourceList_2 != 0;
    call {:si_unique_call 1121} sdv_351 := PptIsPci(Fdx_4, Irp_15);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 1 == sdv_351;
    call {:si_unique_call 1122} status_23 := PptPnpStartScanPciCardCmResourceList(Fdx_4, Irp_15, FoundPort_2, FoundIrq_2, FoundDma_2);
    goto L38;

  L38:
    Tmp_586 := status_23;
    return;

  anon33_Then:
    assume {:partition} 1 != sdv_351;
    assume {:nonnull} ResourceList_2 != 0;
    assume ResourceList_2 > 0;
    havoc Tmp_588;
    FullResourceDescriptor_2 := Tmp_588;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} FullResourceDescriptor_2 != 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} FullResourceDescriptor_2 != 0;
    assume FullResourceDescriptor_2 > 0;
    assume {:nonnull} FullResourceDescriptor_2 != 0;
    assume FullResourceDescriptor_2 > 0;
    PartialResourceList_2 := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(FullResourceDescriptor_2);
    i_13 := 0;
    goto L45;

  L45:
    call {:si_unique_call 1123} i_13, PartialResourceDescriptor_2, Tmp_589, Tmp_590 := PptPnpStartScanCmResourceList_loop_L45(i_13, PartialResourceDescriptor_2, Tmp_589, start, Tmp_590, PartialResourceList_2, Fdx_4, FoundPort_2, FoundIrq_2);
    goto L45_last;

  L45_last:
    assume {:nonnull} PartialResourceList_2 != 0;
    assume PartialResourceList_2 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    Tmp_590 := i_13;
    assume {:nonnull} PartialResourceList_2 != 0;
    assume PartialResourceList_2 > 0;
    havoc Tmp_589;
    PartialResourceDescriptor_2 := Tmp_589 + Tmp_590 * 292;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L53;

  L53:
    i_13 := i_13 + 1;
    goto L53_dummy;

  L53_dummy:
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon42_Then:
    goto L53;

  anon43_Then:
    assume {:nonnull} FoundIrq_2 != 0;
    assume FoundIrq_2 > 0;
    Mem_T.INT4[FoundIrq_2] := 1;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto L53;

  anon48_Then:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto L53;

  anon46_Then:
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} start != 0;
    assume start > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} FoundPort_2 != 0;
    assume FoundPort_2 > 0;
    Mem_T.INT4[FoundPort_2] := 1;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L66;

  L66:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 0 != 1;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon40_Then:
    goto L71;

  L71:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon39_Then:
    goto L71;

  anon38_Then:
    assume {:partition} 0 == 1;
    goto L53;

  anon37_Then:
    goto L53;

  anon36_Then:
    goto L53;

  anon47_Then:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} Fdx_4 != 0;
    assume Fdx_4 > 0;
    assume {:nonnull} PartialResourceDescriptor_2 != 0;
    assume PartialResourceDescriptor_2 > 0;
    goto L53;

  anon35_Then:
    goto L66;

  anon34_Then:
    goto L38;

  anon45_Then:
    assume {:partition} FullResourceDescriptor_2 == 0;
    goto L38;

  anon44_Then:
    assume {:partition} ResourceList_2 == 0;
    status_23 := -1073741670;
    goto L38;
}



procedure {:origName "PptPnpFilterGetEndOfResourceRequirementsList"} PptPnpFilterGetEndOfResourceRequirementsList(actual_ResourceRequirementsList_3: int) returns (Tmp_591: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPnpFilterGetEndOfResourceRequirementsList"} PptPnpFilterGetEndOfResourceRequirementsList(actual_ResourceRequirementsList_3: int) returns (Tmp_591: int)
{
  var {:scalar} i_14: int;
  var {:scalar} listCount_3: int;
  var {:pointer} curList_3: int;
  var {:pointer} ResourceRequirementsList_3: int;

  anon0:
    ResourceRequirementsList_3 := actual_ResourceRequirementsList_3;
    assume {:nonnull} ResourceRequirementsList_3 != 0;
    assume ResourceRequirementsList_3 > 0;
    havoc listCount_3;
    i_14 := 0;
    assume {:nonnull} ResourceRequirementsList_3 != 0;
    assume ResourceRequirementsList_3 > 0;
    havoc curList_3;
    goto L9;

  L9:
    call {:si_unique_call 1124} i_14, curList_3 := PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(i_14, listCount_3, curList_3);
    goto L9_last;

  L9_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} listCount_3 > i_14;
    assume {:nonnull} curList_3 != 0;
    assume curList_3 > 0;
    havoc curList_3;
    i_14 := i_14 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_14 >= listCount_3;
    Tmp_591 := curList_3;
    return;
}



procedure {:origName "_sdv_init46"} _sdv_init46();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init46"} _sdv_init46()
{
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1125} vslice_dummy_var_178 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "Queue_IsEmpty"} Queue_IsEmpty(actual_pQueue: int) returns (Tmp_595: int);
  free ensures {:va_keep} Tmp_595 == 0 || Tmp_595 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "Queue_IsEmpty"} Queue_IsEmpty(actual_pQueue: int) returns (Tmp_595: int)
{
  var {:pointer} pQueue: int;

  anon0:
    pQueue := actual_pQueue;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} pQueue != 0;
    assume {:nonnull} pQueue != 0;
    assume pQueue > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} pQueue != 0;
    assume pQueue > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_595 := 0;
    goto L11;

  L11:
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_595 := 1;
    goto L11;

  anon8_Then:
    Tmp_595 := 1;
    goto L1;

  anon7_Then:
    assume {:partition} pQueue == 0;
    Tmp_595 := 1;
    goto L1;
}



procedure {:origName "Queue_Delete"} Queue_Delete(actual_pQueue_1: int) returns (Tmp_597: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_597 == 1 || Tmp_597 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "Queue_Delete"} Queue_Delete(actual_pQueue_1: int) returns (Tmp_597: int)
{
  var {:pointer} pQueue_1: int;

  anon0:
    pQueue_1 := actual_pQueue_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pQueue_1 != 0;
    assume {:nonnull} pQueue_1 != 0;
    assume pQueue_1 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1126} sdv_ExFreePool(0);
    assume {:nonnull} pQueue_1 != 0;
    assume pQueue_1 > 0;
    goto L6;

  L6:
    assume {:nonnull} pQueue_1 != 0;
    assume pQueue_1 > 0;
    assume {:nonnull} pQueue_1 != 0;
    assume pQueue_1 > 0;
    assume {:nonnull} pQueue_1 != 0;
    assume pQueue_1 > 0;
    Tmp_597 := 1;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L6;

  anon5_Then:
    assume {:partition} pQueue_1 == 0;
    Tmp_597 := 0;
    goto L1;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 1127} vslice_dummy_var_179 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init31"} _sdv_init31();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init31"} _sdv_init31()
{
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 1128} vslice_dummy_var_180 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPowerComplete"} PptPowerComplete(actual_pDeviceObject: int, actual_pIrp: int, actual_FdxIn: int) returns (Tmp_603: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_603 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPowerComplete"} PptPowerComplete(actual_pDeviceObject: int, actual_pIrp: int, actual_FdxIn: int) returns (Tmp_603: int)
{
  var {:pointer} SD2: int;
  var {:scalar} powerState: int;
  var {:scalar} sdv_2: int;
  var {:pointer} pIrpStack: int;
  var {:pointer} Fdx_5: int;
  var {:scalar} powerType: int;
  var {:pointer} pIrp: int;
  var {:pointer} FdxIn: int;
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1129} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 1130} sdv_2 := __HAVOC_malloc(8);
    pIrp := actual_pIrp;
    FdxIn := actual_FdxIn;
    Fdx_5 := FdxIn;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1131} sdv_IoMarkIrpPending(0);
    goto L9;

  L9:
    call {:si_unique_call 1132} pIrpStack := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    havoc powerType;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} powerType != 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} powerType == 1;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 1133} SD2 := PoSetPowerState(0, powerType, powerState);
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto L19;

  L19:
    call {:si_unique_call 1134} PoStartNextPowerIrp(0);
    Tmp_603 := 0;
    return;

  anon22_Then:
    goto L19;

  anon21_Then:
    goto L19;

  anon25_Then:
    assume {:partition} powerType != 1;
    goto L19;

  anon19_Then:
    assume {:partition} powerType == 0;
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 1135} vslice_dummy_var_181 := PoRequestPowerIrp(0, 2, powerState, 0, 0, 0);
    goto L39;

  L39:
    assume {:nonnull} Fdx_5 != 0;
    assume Fdx_5 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    goto L19;

  anon24_Then:
    goto L39;

  anon23_Then:
    goto L19;

  anon20_Then:
    goto L19;

  anon27_Then:
    goto L19;

  anon26_Then:
    goto L9;
}



procedure {:origName "PptFdoPower"} PptFdoPower(actual_pDeviceObject_1: int, actual_pIrp_1: int) returns (Tmp_605: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_605 == 259 || Tmp_605 == 0 || Tmp_605 == -1073741637 || Tmp_605 == -1073741823 || Tmp_605 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoPower"} PptFdoPower(actual_pDeviceObject_1: int, actual_pIrp_1: int) returns (Tmp_605: int)
{
  var {:pointer} SD1_1: int;
  var {:scalar} hookit: int;
  var {:scalar} bogusIrp: int;
  var {:scalar} powerState_1: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} fdx_10: int;
  var {:scalar} sdv_1: int;
  var {:scalar} status_24: int;
  var {:scalar} powerType_1: int;
  var {:pointer} pDeviceObject_1: int;
  var {:pointer} pIrp_1: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_183: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_146: int;

  anon0:
    call {:si_unique_call 1136} powerState_1 := __HAVOC_malloc(8);
    call {:si_unique_call 1137} sdv_1 := __HAVOC_malloc(8);
    pDeviceObject_1 := actual_pDeviceObject_1;
    pIrp_1 := actual_pIrp_1;
    hookit := 0;
    bogusIrp := 0;
    assume {:nonnull} pDeviceObject_1 != 0;
    assume pDeviceObject_1 > 0;
    havoc fdx_10;
    call {:si_unique_call 1138} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(pIrp_1);
    call {:si_unique_call 1139} status_24 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_24 >= 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc powerType_1;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    status_24 := 0;
    goto L32;

  L32:
    call {:si_unique_call 1140} sdv_IoCopyCurrentIrpStackLocationToNext(pIrp_1);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_24 >= 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} hookit != 0;
    call {:si_unique_call 1141} sdv_IoSetCompletionRoutine(pIrp_1, li2bplFunctionConstant771, fdx_10, 1, 1, 1);
    call {:si_unique_call 1142} status_24 := PoCallDriver(0, pIrp_1);
    goto L50;

  L50:
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    call {:si_unique_call 1143} vslice_dummy_var_182 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_10), pIrp_1);
    Tmp_605 := status_24;
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} hookit == 0;
    call {:si_unique_call 1144} PoStartNextPowerIrp(0);
    call {:si_unique_call 1145} status_24 := PoCallDriver(0, pIrp_1);
    goto L50;

  anon26_Then:
    assume {:partition} 0 > status_24;
    call {:si_unique_call 1146} PoStartNextPowerIrp(0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} bogusIrp != 0;
    call {:si_unique_call 1147} status_24 := PoCallDriver(0, pIrp_1);
    goto L50;

  anon28_Then:
    assume {:partition} bogusIrp == 0;
    assume {:nonnull} pIrp_1 != 0;
    assume pIrp_1 > 0;
    havoc vslice_dummy_var_145;
    call {:si_unique_call 1148} vslice_dummy_var_183 := P4CompleteRequest(pIrp_1, status_24, vslice_dummy_var_145);
    goto L50;

  anon33_Then:
    bogusIrp := 1;
    status_24 := -1073741637;
    goto L32;

  anon35_Then:
    status_24 := 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} powerType_1 != 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} powerType_1 == 1;
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 1149} SD1_1 := PoSetPowerState(0, powerType_1, powerState_1);
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L32;

  anon30_Then:
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    hookit := 1;
    goto L32;

  anon31_Then:
    goto L32;

  anon34_Then:
    assume {:partition} powerType_1 != 1;
    goto L32;

  anon36_Then:
    assume {:partition} powerType_1 == 0;
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    call {:si_unique_call 1150} vslice_dummy_var_184 := PoRequestPowerIrp(0, 2, powerState_1, 0, 0, 0);
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L32;

  anon29_Then:
    assume {:nonnull} fdx_10 != 0;
    assume fdx_10 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    hookit := 1;
    goto L32;

  anon32_Then:
    goto L32;

  anon25_Then:
    assume {:partition} 0 > status_24;
    call {:si_unique_call 1151} PoStartNextPowerIrp(0);
    assume {:nonnull} pIrp_1 != 0;
    assume pIrp_1 > 0;
    havoc vslice_dummy_var_146;
    call {:si_unique_call 1152} Tmp_605 := P4CompleteRequest(pIrp_1, status_24, vslice_dummy_var_146);
    goto L1;
}



procedure {:origName "ParStlCheckIfStl1284_3"} ParStlCheckIfStl1284_3(actual_Extension_1: int, actual_ulDaisyIndex: int, actual_bNoStrobe: int) returns (Tmp_607: int);
  free ensures {:va_keep} Tmp_607 == 0 || Tmp_607 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfStl1284_3"} ParStlCheckIfStl1284_3(actual_Extension_1: int, actual_ulDaisyIndex: int, actual_bNoStrobe: int) returns (Tmp_607: int)
{
  var {:scalar} i_15: int;
  var {:scalar} bReturnValue: int;
  var {:scalar} Tmp_610: int;
  var {:scalar} Tmp_611: int;
  var {:scalar} Tmp_613: int;
  var {:scalar} Tmp_616: int;
  var {:scalar} Tmp_618: int;
  var {:pointer} CurrentPort: int;
  var {:scalar} ucReadPattern: int;
  var {:scalar} status_25: int;
  var {:scalar} ucReadValue: int;
  var {:scalar} newvalue: int;
  var {:scalar} value: int;
  var {:scalar} ucExpectedPattern: int;
  var {:pointer} Extension_1: int;
  var {:scalar} ulDaisyIndex: int;
  var {:scalar} bNoStrobe: int;

  anon0:
    Extension_1 := actual_Extension_1;
    ulDaisyIndex := actual_ulDaisyIndex;
    bNoStrobe := actual_bNoStrobe;
    bReturnValue := 0;
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    havoc CurrentPort;
    call {:si_unique_call 1153} value := corral_nondet();
    Tmp_616 := BAND(value, BNOT(8));
    newvalue := BOR(Tmp_616, 4);
    newvalue := BAND(newvalue, BNOT(32));
    i_15 := 0;
    goto L35;

  L35:
    call {:si_unique_call 1154} i_15, Tmp_613 := ParStlCheckIfStl1284_3_loop_L35(i_15, Tmp_613);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_15"} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4 > i_15;
    Tmp_613 := i_15;
    i_15 := i_15 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} i_15 >= 4;
    call {:si_unique_call 1155} status_25 := corral_nondet();
    Tmp_611 := BAND(status_25, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Tmp_611 == 184;
    call {:si_unique_call 1156} status_25 := corral_nondet();
    Tmp_610 := BAND(status_25, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_610 == 24;
    call {:si_unique_call 1157} status_25 := corral_nondet();
    Tmp_618 := BAND(status_25, BOR(16, 32));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_618 == 48;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ulDaisyIndex != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} bNoStrobe == 0;
    goto L90;

  L90:
    ucExpectedPattern := 240;
    bReturnValue := 1;
    goto L111;

  L111:
    call {:si_unique_call 1158} ucReadPattern, ucReadValue, ucExpectedPattern := ParStlCheckIfStl1284_3_loop_L111(ucReadPattern, ucReadValue, ucExpectedPattern, ulDaisyIndex);
    goto L111_last;

  L111_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} ucExpectedPattern != 0;
    call {:si_unique_call 1159} ucReadValue := corral_nondet();
    call {:si_unique_call 1160} ucReadPattern := corral_nondet();
    ucReadPattern := BOR(ucReadPattern, BAND(ucReadValue, 128));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ucReadPattern != ucExpectedPattern;
    bReturnValue := 0;
    goto L112;

  L112:
    goto L50;

  L50:
    Tmp_607 := bReturnValue;
    return;

  anon24_Then:
    assume {:partition} ucReadPattern == ucExpectedPattern;
    ucExpectedPattern := ucExpectedPattern - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} ucExpectedPattern == 0;
    goto L112;

  anon19_Then:
    assume {:partition} bNoStrobe != 0;
    goto L90;

  anon18_Then:
    assume {:partition} ulDaisyIndex == 0;
    goto L90;

  anon23_Then:
    assume {:partition} Tmp_618 != 48;
    goto L50;

  anon22_Then:
    assume {:partition} Tmp_610 != 24;
    goto L50;

  anon21_Then:
    assume {:partition} Tmp_611 != 184;
    goto L50;
}



procedure {:origName "ParStlCheckIfAtaDevice"} ParStlCheckIfAtaDevice(actual_Extension_2: int, actual_atapiParams: int) returns (Tmp_625: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_625 == 1 || Tmp_625 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfAtaDevice"} ParStlCheckIfAtaDevice(actual_Extension_2: int, actual_atapiParams: int) returns (Tmp_625: int)
{
  var {:scalar} bReturnValue_1: int;
  var {:pointer} Extension_2: int;
  var {:pointer} atapiParams: int;

  anon0:
    Extension_2 := actual_Extension_2;
    atapiParams := actual_atapiParams;
    bReturnValue_1 := 0;
    call {:si_unique_call 1161} bReturnValue_1 := ParStlAtaInitialize(Extension_2, atapiParams);
    Tmp_625 := bReturnValue_1;
    return;
}



procedure {:origName "ParStlCheckIfNon1284_3Present"} ParStlCheckIfNon1284_3Present(actual_Extension_3: int) returns (Tmp_627: int);
  free ensures {:va_keep} Tmp_627 == 1 || Tmp_627 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfNon1284_3Present"} ParStlCheckIfNon1284_3Present(actual_Extension_3: int) returns (Tmp_627: int)
{
  var {:scalar} i_16: int;
  var {:scalar} ucAckStatus: int;
  var {:scalar} Tmp_628: int;
  var {:scalar} Tmp_629: int;
  var {:scalar} bReturnValue_2: int;
  var {:scalar} Tmp_630: int;
  var {:scalar} Tmp_632: int;
  var {:pointer} CurrentPort_1: int;
  var {:scalar} Tmp_637: int;
  var {:scalar} status_26: int;
  var {:scalar} Tmp_639: int;
  var {:scalar} newvalue_1: int;
  var {:scalar} value_1: int;
  var {:pointer} Extension_3: int;

  anon0:
    Extension_3 := actual_Extension_3;
    bReturnValue_2 := 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc CurrentPort_1;
    call {:si_unique_call 1162} value_1 := corral_nondet();
    Tmp_630 := BAND(value_1, BNOT(8));
    newvalue_1 := BOR(Tmp_630, 4);
    newvalue_1 := BAND(newvalue_1, BNOT(32));
    i_16 := 0;
    goto L33;

  L33:
    call {:si_unique_call 1163} i_16, Tmp_629 := ParStlCheckIfNon1284_3Present_loop_L33(i_16, Tmp_629);
    goto L33_last;

  L33_last:
    assume {:CounterLoop 4} {:Counter "i_16"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 4 > i_16;
    Tmp_629 := i_16;
    i_16 := i_16 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} i_16 >= 4;
    call {:si_unique_call 1164} status_26 := corral_nondet();
    Tmp_639 := BAND(status_26, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_639 == 184;
    ucAckStatus := BAND(status_26, 64);
    call {:si_unique_call 1165} status_26 := corral_nondet();
    Tmp_637 := BAND(status_26, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_637 == 24;
    Tmp_632 := BAND(status_26, 64);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} ucAckStatus != Tmp_632;
    ucAckStatus := BAND(status_26, 64);
    call {:si_unique_call 1166} status_26 := corral_nondet();
    Tmp_628 := BAND(status_26, BOR(16, 32));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_628 == 48;
    bReturnValue_2 := 1;
    goto L67;

  L67:
    goto L48;

  L48:
    Tmp_627 := bReturnValue_2;
    return;

  anon15_Then:
    assume {:partition} Tmp_628 != 48;
    goto L67;

  anon14_Then:
    assume {:partition} ucAckStatus == Tmp_632;
    goto L67;

  anon13_Then:
    assume {:partition} Tmp_637 != 24;
    goto L48;

  anon12_Then:
    assume {:partition} Tmp_639 != 184;
    goto L48;
}



procedure {:origName "ParStlCheckDrivePresent"} ParStlCheckDrivePresent(actual_Extension_4: int, actual_atapiParams_1: int) returns (Tmp_640: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_640 == 1 || Tmp_640 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckDrivePresent"} ParStlCheckDrivePresent(actual_Extension_4: int, actual_atapiParams_1: int) returns (Tmp_640: int)
{
  var {:scalar} i_17: int;
  var {:scalar} byOrgCylHigh: int;
  var {:scalar} sdv_373: int;
  var {:scalar} Tmp_641: int;
  var {:scalar} bReturnValue_3: int;
  var {:scalar} sdv_374: int;
  var {:scalar} Tmp_642: int;
  var {:scalar} Tmp_643: int;
  var {:pointer} nDrvHdArray: int;
  var {:scalar} Tmp_644: int;
  var {:scalar} Tmp_645: int;
  var {:pointer} Tmp_646: int;
  var {:scalar} nCurrentDrive: int;
  var {:scalar} sdv_377: int;
  var {:scalar} Tmp_647: int;
  var {:scalar} sdv_378: int;
  var {:scalar} sdv_381: int;
  var {:scalar} sdv_382: int;
  var {:pointer} Tmp_648: int;
  var {:scalar} Tmp_649: int;
  var {:scalar} Tmp_650: int;
  var {:scalar} Tmp_651: int;
  var {:scalar} Tmp_652: int;
  var {:scalar} sdv_386: int;
  var {:scalar} byOrgCylLow: int;
  var {:pointer} Extension_4: int;
  var {:pointer} atapiParams_1: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;

  anon0:
    Extension_4 := actual_Extension_4;
    atapiParams_1 := actual_atapiParams_1;
    call {:si_unique_call 1167} nDrvHdArray := __HAVOC_malloc(8);
    call {:si_unique_call 1168} Tmp_646 := __HAVOC_malloc(8);
    call {:si_unique_call 1169} Tmp_648 := __HAVOC_malloc(8);
    bReturnValue_3 := 0;
    nCurrentDrive := 0;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    Mem_T.INT4[nDrvHdArray] := 160;
    goto L12;

  L12:
    call {:si_unique_call 1170} i_17, byOrgCylHigh, sdv_373, Tmp_641, bReturnValue_3, sdv_374, Tmp_642, Tmp_643, Tmp_644, Tmp_645, Tmp_646, nCurrentDrive, sdv_377, Tmp_647, sdv_378, sdv_381, sdv_382, Tmp_648, Tmp_649, Tmp_650, Tmp_651, Tmp_652, sdv_386, byOrgCylLow, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192 := ParStlCheckDrivePresent_loop_L12(i_17, byOrgCylHigh, sdv_373, Tmp_641, bReturnValue_3, sdv_374, Tmp_642, Tmp_643, nDrvHdArray, Tmp_644, Tmp_645, Tmp_646, nCurrentDrive, sdv_377, Tmp_647, sdv_378, sdv_381, sdv_382, Tmp_648, Tmp_649, Tmp_650, Tmp_651, Tmp_652, sdv_386, byOrgCylLow, Extension_4, atapiParams_1, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192);
    goto L12_last;

  L12_last:
    Tmp_649 := nCurrentDrive;
    assume {:nonnull} atapiParams_1 != 0;
    assume atapiParams_1 > 0;
    havoc Tmp_646;
    assume {:nonnull} Tmp_646 != 0;
    assume Tmp_646 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[Tmp_646 + Tmp_649 * 4] == 1;
    bReturnValue_3 := 1;
    goto L16;

  L16:
    call {:si_unique_call 1171} vslice_dummy_var_185 := ParStlWriteIoPort(Extension_4, 6, 160);
    Tmp_640 := bReturnValue_3;
    return;

  anon25_Then:
    assume {:partition} Mem_T.INT4[Tmp_646 + Tmp_649 * 4] != 1;
    Tmp_645 := nCurrentDrive;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    Tmp_641 := Mem_T.INT4[nDrvHdArray + Tmp_645 * 4];
    call {:si_unique_call 1172} vslice_dummy_var_188 := ParStlWriteIoPort(Extension_4, 6, Tmp_641);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} nCurrentDrive != 0;
    call {:si_unique_call 1173} ParStlWaitForMicroSeconds(1000000);
    goto L24;

  L24:
    i_17 := 0;
    goto L28;

  L28:
    call {:si_unique_call 1174} i_17, sdv_382, vslice_dummy_var_186 := ParStlCheckDrivePresent_loop_L28(i_17, sdv_382, Extension_4, vslice_dummy_var_186);
    goto L28_last;

  L28_last:
    assume {:CounterLoop 16} {:Counter "i_17"} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} 16 > i_17;
    call {:si_unique_call 1175} vslice_dummy_var_186 := ParStlWriteReg(Extension_4, 14, i_17);
    call {:si_unique_call 1176} sdv_382 := ParStlReadIoPort(Extension_4, 7);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(sdv_382, 128) != 0;
    i_17 := i_17 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} BAND(sdv_382, 128) == 0;
    goto L29;

  L29:
    call {:si_unique_call 1177} sdv_381 := ParStlWaitForBusyToClear(Extension_4, 7);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_381 == 0;
    goto L56;

  L56:
    nCurrentDrive := nCurrentDrive + 1;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 2 <= nCurrentDrive;
    goto L16;

  anon27_Then:
    assume {:partition} nCurrentDrive < 2;
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} sdv_381 != 0;
    Tmp_644 := nCurrentDrive;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    Tmp_647 := Mem_T.INT4[nDrvHdArray + Tmp_644 * 4];
    call {:si_unique_call 1178} vslice_dummy_var_189 := ParStlWriteIoPort(Extension_4, 6, Tmp_647);
    call {:si_unique_call 1179} sdv_386 := ParStlReadIoPort(Extension_4, 6);
    Tmp_651 := BAND(sdv_386, BOR(BOR(16, 32), 128));
    Tmp_642 := nCurrentDrive;
    assume {:nonnull} nDrvHdArray != 0;
    assume nDrvHdArray > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Tmp_651 != Mem_T.INT4[nDrvHdArray + Tmp_642 * 4];
    goto L56;

  anon26_Then:
    assume {:partition} Tmp_651 == Mem_T.INT4[nDrvHdArray + Tmp_642 * 4];
    call {:si_unique_call 1180} sdv_378 := ParStlReadIoPort(Extension_4, 4);
    byOrgCylLow := sdv_378;
    call {:si_unique_call 1181} sdv_377 := ParStlReadIoPort(Extension_4, 5);
    byOrgCylHigh := sdv_377;
    call {:si_unique_call 1182} vslice_dummy_var_190 := ParStlWriteIoPort(Extension_4, 4, 85);
    call {:si_unique_call 1183} vslice_dummy_var_187 := ParStlWriteIoPort(Extension_4, 5, 170);
    call {:si_unique_call 1184} sdv_373 := ParStlReadIoPort(Extension_4, 4);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} 85 == sdv_373;
    call {:si_unique_call 1185} sdv_374 := ParStlReadIoPort(Extension_4, 5);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 170 == sdv_374;
    Tmp_650 := byOrgCylLow;
    call {:si_unique_call 1186} vslice_dummy_var_191 := ParStlWriteIoPort(Extension_4, 4, Tmp_650);
    Tmp_652 := byOrgCylHigh;
    call {:si_unique_call 1187} vslice_dummy_var_192 := ParStlWriteIoPort(Extension_4, 5, Tmp_652);
    bReturnValue_3 := 1;
    Tmp_643 := nCurrentDrive;
    assume {:nonnull} atapiParams_1 != 0;
    assume atapiParams_1 > 0;
    havoc Tmp_648;
    assume {:nonnull} Tmp_648 != 0;
    assume Tmp_648 > 0;
    Mem_T.INT4[Tmp_648 + Tmp_643 * 4] := 1;
    goto L56;

  anon24_Then:
    assume {:partition} 170 != sdv_374;
    goto L56;

  anon23_Then:
    assume {:partition} 85 != sdv_373;
    goto L56;

  anon20_Then:
    assume {:partition} i_17 >= 16;
    goto L29;

  anon19_Then:
    assume {:partition} nCurrentDrive == 0;
    goto L24;
}



procedure {:origName "ParStlWriteIoPort"} ParStlWriteIoPort(actual_Extension_5: int, actual_reg: int, actual_databyte: int) returns (Tmp_654: int);
  free ensures {:va_keep} Tmp_654 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlWriteIoPort"} ParStlWriteIoPort(actual_Extension_5: int, actual_reg: int, actual_databyte: int) returns (Tmp_654: int)
{
  var {:pointer} Extension_5: int;
  var {:scalar} reg: int;
  var {:scalar} databyte: int;

  anon0:
    Extension_5 := actual_Extension_5;
    reg := actual_reg;
    databyte := actual_databyte;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} reg != 8;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} reg == 9;
    reg := 23;
    goto L8;

  L8:
    call {:si_unique_call 1188} Tmp_654 := ParStlWriteReg(Extension_5, reg, databyte);
    return;

  anon6_Then:
    assume {:partition} reg != 9;
    reg := BOR(reg, BOR(8, 16));
    goto L8;

  anon5_Then:
    assume {:partition} reg == 8;
    reg := 22;
    goto L8;
}



procedure {:origName "ParStlCheckUMAXScannerPresence"} ParStlCheckUMAXScannerPresence(actual_Extension_6: int) returns (Tmp_656: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_656 == 0 || Tmp_656 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckUMAXScannerPresence"} ParStlCheckUMAXScannerPresence(actual_Extension_6: int) returns (Tmp_656: int)
{
  var {:pointer} Tmp_657: int;
  var {:pointer} commandPacket: int;
  var {:pointer} commandPacket_1: int;
  var {:scalar} Tmp_658: int;
  var {:scalar} Tmp_659: int;
  var {:scalar} Tmp_660: int;
  var {:pointer} saveCommandPacket: int;
  var {:scalar} Tmp_661: int;
  var {:scalar} Tmp_662: int;
  var {:scalar} sdv_396: int;
  var {:scalar} dataLength: int;
  var {:scalar} idx_1: int;
  var {:scalar} status_27: int;
  var {:scalar} Tmp_664: int;
  var {:pointer} Extension_6: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;

  anon0:
    Extension_6 := actual_Extension_6;
    call {:si_unique_call 1189} commandPacket_1 := __HAVOC_malloc(24);
    assume {:nonnull} commandPacket_1 != 0;
    assume commandPacket_1 > 0;
    Mem_T.INT4[commandPacket_1] := 85;
    call {:si_unique_call 1190} vslice_dummy_var_194 := ParStlWriteReg(Extension_6, 26, 0);
    call {:si_unique_call 1191} vslice_dummy_var_193 := ParStlWriteReg(Extension_6, 26, 12);
    commandPacket := commandPacket_1;
    saveCommandPacket := commandPacket;
    call {:si_unique_call 1192} sdv_396 := ParStlSetEPPMode(Extension_6);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} 1 == sdv_396;
    Tmp_657 := commandPacket;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    dataLength := Mem_T.INT4[Tmp_657];
    dataLength := BAND(dataLength, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(16777216, 33554432), 67108864), 134217728), 268435456), 536870912), 1073741824), -2147483648)));
    commandPacket := saveCommandPacket;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_661 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 1193} status_27 := ParStlEPPWrite(Extension_6, Tmp_661);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  L1:
    return;

  anon32_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_658 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 1194} status_27 := ParStlEPPWrite(Extension_6, Tmp_658);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  anon33_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    idx_1 := 0;
    goto L45;

  L45:
    call {:si_unique_call 1195} idx_1, status_27 := ParStlCheckUMAXScannerPresence_loop_L45(idx_1, status_27, Extension_6);
    goto L45_last;

  L45_last:
    assume {:CounterLoop 6} {:Counter "idx_1"} true;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 6 >= idx_1;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} BAND(status_27, 2048) == 0;
    call {:si_unique_call 1196} status_27 := ParStlEPPRead(Extension_6);
    idx_1 := idx_1 + 1;
    goto anon36_Else_dummy;

  anon36_Else_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:partition} BAND(status_27, 2048) != 0;
    goto L46;

  L46:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} idx_1 == 7;
    Tmp_662 := BAND(status_27, BOR(BOR(BOR(BOR(2048, 4096), 8192), 16384), 32768));
    status_27 := BOR(Tmp_662, 256);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  anon44_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    goto L54;

  L54:
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_664 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 1197} status_27 := ParStlEPPWrite(Extension_6, Tmp_664);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  anon37_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_660 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 1198} status_27 := ParStlEPPWrite(Extension_6, Tmp_660);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  anon38_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    Tmp_659 := Mem_T.INT4[commandPacket];
    call {:si_unique_call 1199} status_27 := ParStlEPPWrite(Extension_6, Tmp_659);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  anon39_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    call {:si_unique_call 1200} status_27 := ParStlEPPWrite(Extension_6, Mem_T.INT4[commandPacket]);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  anon40_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    call {:si_unique_call 1201} status_27 := ParStlEPPRead(Extension_6);
    commandPacket := saveCommandPacket;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    goto L92;

  L92:
    Tmp_656 := 1;
    goto L1;

  anon45_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    assume {:nonnull} commandPacket != 0;
    assume commandPacket > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Mem_T.INT4[commandPacket + 5 * 4] == 194;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} dataLength == 0;
    call {:si_unique_call 1202} status_27 := ParStlEPPRead(Extension_6);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(status_27, 1792) != 0;
    Tmp_656 := 0;
    goto L1;

  anon43_Then:
    assume {:partition} BAND(status_27, 1792) == 0;
    goto L92;

  anon42_Then:
    assume {:partition} dataLength != 0;
    goto L92;

  anon41_Then:
    assume {:partition} Mem_T.INT4[commandPacket + 5 * 4] != 194;
    goto L92;

  anon35_Then:
    assume {:partition} idx_1 != 7;
    goto L54;

  anon34_Then:
    assume {:partition} idx_1 > 6;
    goto L46;

  anon31_Then:
    assume {:partition} 1 != sdv_396;
    Tmp_656 := 0;
    goto L1;
}



procedure {:origName "ParStlSet16BitOperation"} ParStlSet16BitOperation(actual_Extension_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlSet16BitOperation"} ParStlSet16BitOperation(actual_Extension_7: int)
{
  var {:scalar} nModeReg: int;
  var {:scalar} Tmp_667: int;
  var {:pointer} Extension_7: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_196: int;

  anon0:
    call {:si_unique_call 1203} vslice_dummy_var_195 := __HAVOC_malloc(4);
    Extension_7 := actual_Extension_7;
    call {:si_unique_call 1204} nModeReg := ParStlReadReg(Extension_7, 12);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} BAND(nModeReg, 16) == 0;
    Tmp_667 := BOR(nModeReg, 16);
    call {:si_unique_call 1205} vslice_dummy_var_196 := ParStlWriteReg(Extension_7, 12, Tmp_667);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} BAND(nModeReg, 16) != 0;
    goto L1;
}



procedure {:origName "ParStlCheckIfScsiDevice"} ParStlCheckIfScsiDevice(actual_Extension_8: int) returns (Tmp_668: int);
  free ensures {:va_keep} Tmp_668 == 0 || Tmp_668 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfScsiDevice"} ParStlCheckIfScsiDevice(actual_Extension_8: int) returns (Tmp_668: int)
{
  var {:scalar} bReturnValue_4: int;
  var {:scalar} sdv_403: int;
  var {:pointer} Extension_8: int;

  anon0:
    Extension_8 := actual_Extension_8;
    bReturnValue_4 := 0;
    call {:si_unique_call 1206} sdv_403 := ParStlReadReg(Extension_8, 11);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 178 != sdv_403;
    goto L11;

  L11:
    Tmp_668 := bReturnValue_4;
    return;

  anon3_Then:
    assume {:partition} 178 == sdv_403;
    bReturnValue_4 := 1;
    goto L11;
}



procedure {:origName "ParStlAtaInitialize"} ParStlAtaInitialize(actual_Extension_9: int, actual_atapiParams_2: int) returns (Tmp_670: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_670 == 1 || Tmp_670 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlAtaInitialize"} ParStlAtaInitialize(actual_Extension_9: int, actual_atapiParams_2: int) returns (Tmp_670: int)
{
  var {:scalar} bReturnValue_5: int;
  var {:scalar} Tmp_671: int;
  var {:scalar} sdv_405: int;
  var {:scalar} byTempValue: int;
  var {:scalar} nCurrentDrive_1: int;
  var {:scalar} sdv_406: int;
  var {:scalar} Tmp_673: int;
  var {:scalar} sdv_409: int;
  var {:scalar} sdv_411: int;
  var {:pointer} Tmp_674: int;
  var {:pointer} Extension_9: int;
  var {:pointer} atapiParams_2: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;

  anon0:
    Extension_9 := actual_Extension_9;
    atapiParams_2 := actual_atapiParams_2;
    call {:si_unique_call 1207} Tmp_674 := __HAVOC_malloc(8);
    bReturnValue_5 := 0;
    nCurrentDrive_1 := 0;
    goto L8;

  L8:
    call {:si_unique_call 1208} Tmp_671, sdv_405, byTempValue, nCurrentDrive_1, sdv_406, Tmp_673, sdv_409, sdv_411, Tmp_674, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200 := ParStlAtaInitialize_loop_L8(Tmp_671, sdv_405, byTempValue, nCurrentDrive_1, sdv_406, Tmp_673, sdv_409, sdv_411, Tmp_674, Extension_9, atapiParams_2, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200);
    goto L8_last;

  L8_last:
    Tmp_673 := nCurrentDrive_1;
    assume {:nonnull} atapiParams_2 != 0;
    assume atapiParams_2 > 0;
    havoc Tmp_674;
    assume {:nonnull} Tmp_674 != 0;
    assume Tmp_674 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} 1 != Mem_T.INT4[Tmp_674 + Tmp_673 * 4];
    goto L11;

  L11:
    nCurrentDrive_1 := nCurrentDrive_1 + 1;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} 2 <= nCurrentDrive_1;
    goto L12;

  L12:
    call {:si_unique_call 1209} vslice_dummy_var_197 := ParStlWriteIoPort(Extension_9, 6, 160);
    Tmp_670 := bReturnValue_5;
    return;

  anon22_Then:
    assume {:partition} nCurrentDrive_1 < 2;
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} 1 == Mem_T.INT4[Tmp_674 + Tmp_673 * 4];
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} nCurrentDrive_1 != 0;
    call {:si_unique_call 1210} vslice_dummy_var_199 := ParStlWriteIoPort(Extension_9, 6, 176);
    goto L22;

  L22:
    call {:si_unique_call 1211} sdv_409 := ParStlWaitForBusyToClear(Extension_9, 7);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_409 != 0;
    call {:si_unique_call 1212} vslice_dummy_var_200 := ParStlWriteIoPort(Extension_9, 7, 0);
    call {:si_unique_call 1213} sdv_405 := ParStlWaitForBusyToClear(Extension_9, 7);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_405 != 0;
    call {:si_unique_call 1214} sdv_411 := ParStlReadIoPort(Extension_9, 7);
    byTempValue := sdv_411;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} byTempValue != 255;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(byTempValue, 1) != 0;
    call {:si_unique_call 1215} sdv_406 := ParStlReadIoPort(Extension_9, 1);
    Tmp_671 := BAND(sdv_406, BOR(BOR(BOR(1, 2), 4), 8));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 4 == Tmp_671;
    bReturnValue_5 := 1;
    goto L12;

  anon24_Then:
    assume {:partition} 4 != Tmp_671;
    goto L11;

  anon20_Then:
    assume {:partition} BAND(byTempValue, 1) == 0;
    goto L11;

  anon23_Then:
    assume {:partition} byTempValue == 255;
    goto L11;

  anon19_Then:
    assume {:partition} sdv_405 == 0;
    goto L11;

  anon18_Then:
    assume {:partition} sdv_409 == 0;
    goto L11;

  anon17_Then:
    assume {:partition} nCurrentDrive_1 == 0;
    call {:si_unique_call 1216} vslice_dummy_var_198 := ParStlWriteIoPort(Extension_9, 6, 160);
    goto L22;
}



procedure {:origName "ParStlCheckIfMMC"} ParStlCheckIfMMC(actual_Extension_10: int, actual_atapiParams_3: int) returns (Tmp_675: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_675 == 0 || Tmp_675 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfMMC"} ParStlCheckIfMMC(actual_Extension_10: int, actual_atapiParams_3: int) returns (Tmp_675: int)
{
  var {:scalar} bReturnValue_6: int;
  var {:scalar} sdv_412: int;
  var {:scalar} sdv_413: int;
  var {:pointer} Extension_10: int;
  var {:pointer} atapiParams_3: int;

  anon0:
    Extension_10 := actual_Extension_10;
    atapiParams_3 := actual_atapiParams_3;
    bReturnValue_6 := 0;
    call {:si_unique_call 1217} sdv_412 := ParStlReadReg(Extension_10, 11);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 198 != sdv_412;
    goto L18;

  L18:
    Tmp_675 := bReturnValue_6;
    return;

  anon5_Then:
    assume {:partition} 198 == sdv_412;
    call {:si_unique_call 1218} sdv_413 := ParStlCheckIfAtaAtapiDevice(Extension_10, atapiParams_3);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 1 == sdv_413;
    goto L18;

  anon6_Then:
    assume {:partition} 1 != sdv_413;
    call {:si_unique_call 1219} bReturnValue_6 := ParStlIsMMCEnginePresent(Extension_10);
    goto L18;
}



procedure {:origName "ParStlAtapiInitialize"} ParStlAtapiInitialize(actual_Extension_11: int, actual_atapiParams_4: int) returns (Tmp_677: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_677 == 1 || Tmp_677 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlAtapiInitialize"} ParStlAtapiInitialize(actual_Extension_11: int, actual_atapiParams_4: int) returns (Tmp_677: int)
{
  var {:scalar} i_18: int;
  var {:scalar} sdv_415: int;
  var {:scalar} Tmp_678: int;
  var {:scalar} bReturnValue_7: int;
  var {:scalar} sdv_416: int;
  var {:pointer} chAtapiIdentifyBuffer: int;
  var {:scalar} Tmp_680: int;
  var {:pointer} Tmp_681: int;
  var {:scalar} byTempValue_1: int;
  var {:scalar} nCurrentDrive_2: int;
  var {:scalar} sdv_419: int;
  var {:scalar} sdv_420: int;
  var {:scalar} Tmp_682: int;
  var {:scalar} sdv_424: int;
  var {:scalar} sdv_425: int;
  var {:pointer} Tmp_683: int;
  var {:scalar} sdv_426: int;
  var {:scalar} sdv_427: int;
  var {:scalar} Tmp_684: int;
  var {:scalar} sdv_428: int;
  var {:scalar} Tmp_685: int;
  var {:pointer} Tmp_686: int;
  var {:pointer} Tmp_687: int;
  var {:scalar} sdv_430: int;
  var {:pointer} Extension_11: int;
  var {:pointer} atapiParams_4: int;
  var boogieTmp: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_147: int;

  anon0:
    call {:si_unique_call 1220} chAtapiIdentifyBuffer := __HAVOC_malloc(4);
    Extension_11 := actual_Extension_11;
    atapiParams_4 := actual_atapiParams_4;
    assume {:nonnull} chAtapiIdentifyBuffer != 0;
    assume chAtapiIdentifyBuffer > 0;
    call {:si_unique_call 1221} boogieTmp := __HAVOC_malloc(2048);
    call {:si_unique_call 1222} Tmp_681 := __HAVOC_malloc(8);
    call {:si_unique_call 1223} Tmp_683 := __HAVOC_malloc(8);
    call {:si_unique_call 1224} Tmp_686 := __HAVOC_malloc(8);
    call {:si_unique_call 1225} Tmp_687 := __HAVOC_malloc(40);
    bReturnValue_7 := 0;
    nCurrentDrive_2 := 0;
    goto L10;

  L10:
    call {:si_unique_call 1226} i_18, sdv_415, Tmp_678, bReturnValue_7, sdv_416, Tmp_680, Tmp_681, byTempValue_1, nCurrentDrive_2, sdv_419, sdv_420, Tmp_682, sdv_424, sdv_425, Tmp_683, sdv_426, sdv_427, Tmp_684, sdv_428, Tmp_685, Tmp_686, Tmp_687, sdv_430, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206 := ParStlAtapiInitialize_loop_L10(i_18, sdv_415, Tmp_678, bReturnValue_7, sdv_416, chAtapiIdentifyBuffer, Tmp_680, Tmp_681, byTempValue_1, nCurrentDrive_2, sdv_419, sdv_420, Tmp_682, sdv_424, sdv_425, Tmp_683, sdv_426, sdv_427, Tmp_684, sdv_428, Tmp_685, Tmp_686, Tmp_687, sdv_430, Extension_11, atapiParams_4, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206);
    goto L10_last;

  L10_last:
    Tmp_680 := nCurrentDrive_2;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_681;
    assume {:nonnull} Tmp_681 != 0;
    assume Tmp_681 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 1 != Mem_T.INT4[Tmp_681 + Tmp_680 * 4];
    goto L13;

  L13:
    nCurrentDrive_2 := nCurrentDrive_2 + 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} 2 <= nCurrentDrive_2;
    call {:si_unique_call 1227} vslice_dummy_var_201 := ParStlWriteIoPort(Extension_11, 6, 160);
    Tmp_677 := bReturnValue_7;
    return;

  anon41_Then:
    assume {:partition} nCurrentDrive_2 < 2;
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} 1 == Mem_T.INT4[Tmp_681 + Tmp_680 * 4];
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} nCurrentDrive_2 != 0;
    call {:si_unique_call 1228} vslice_dummy_var_203 := ParStlWriteIoPort(Extension_11, 6, 176);
    goto L24;

  L24:
    call {:si_unique_call 1229} sdv_425 := ParStlWaitForBusyToClear(Extension_11, 7);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} sdv_425 != 0;
    call {:si_unique_call 1230} sdv_424 := ParStlReadIoPort(Extension_11, 4);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_424 == 20;
    call {:si_unique_call 1231} sdv_428 := ParStlReadIoPort(Extension_11, 5);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_428 == 235;
    bReturnValue_7 := 1;
    Tmp_678 := nCurrentDrive_2;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_686;
    assume {:nonnull} Tmp_686 != 0;
    assume Tmp_686 > 0;
    Mem_T.INT4[Tmp_686 + Tmp_678 * 4] := 2;
    call {:si_unique_call 1232} sdv_420 := ParStlReadReg(Extension_11, 11);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 200 == sdv_420;
    goto L33;

  L33:
    call {:si_unique_call 1233} vslice_dummy_var_204 := ParStlWriteIoPort(Extension_11, 7, 0);
    call {:si_unique_call 1234} sdv_419 := ParStlWaitForIrq(Extension_11);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_419 != 0;
    call {:si_unique_call 1235} sdv_430 := ParStlWaitForBusyToClear(Extension_11, 7);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_430 != 0;
    call {:si_unique_call 1236} vslice_dummy_var_205 := ParStlWriteIoPort(Extension_11, 7, 161);
    call {:si_unique_call 1237} sdv_415 := ParStlWaitForIrq(Extension_11);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_415 != 0;
    call {:si_unique_call 1238} sdv_416 := ParStlWaitForBusyToClear(Extension_11, 7);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_416 != 0;
    call {:si_unique_call 1239} sdv_426 := ParStlReadIoPort(Extension_11, 7);
    byTempValue_1 := sdv_426;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(byTempValue_1, 1) == 0;
    call {:si_unique_call 1240} sdv_427 := ParStlWaitForDrq(Extension_11);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_427 != 0;
    bReturnValue_7 := 1;
    call {:si_unique_call 1241} vslice_dummy_var_206 := ParStlReceiveData(Extension_11, chAtapiIdentifyBuffer, -1, 512);
    i_18 := 0;
    goto L85;

  L85:
    call {:si_unique_call 1242} i_18, Tmp_682, Tmp_684, Tmp_687 := ParStlAtapiInitialize_loop_L85(i_18, chAtapiIdentifyBuffer, Tmp_682, Tmp_684, Tmp_687, atapiParams_4);
    goto L85_last;

  L85_last:
    assume {:CounterLoop 10} {:Counter "i_18"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 10 > i_18;
    Tmp_682 := i_18;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_687;
    Tmp_684 := 84 + i_18;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    assume {:nonnull} chAtapiIdentifyBuffer != 0;
    assume chAtapiIdentifyBuffer > 0;
    havoc vslice_dummy_var_147;
    Mem_T.INT4[Tmp_687 + Tmp_682 * 4] := vslice_dummy_var_147;
    i_18 := i_18 + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    assume false;
    return;

  anon39_Then:
    assume {:partition} i_18 >= 10;
    Tmp_685 := nCurrentDrive_2;
    assume {:nonnull} atapiParams_4 != 0;
    assume atapiParams_4 > 0;
    havoc Tmp_683;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    Mem_T.INT4[Tmp_683 + Tmp_685 * 4] := 2;
    goto L13;

  anon38_Then:
    assume {:partition} sdv_427 == 0;
    goto L13;

  anon42_Then:
    assume {:partition} BAND(byTempValue_1, 1) != 0;
    goto L13;

  anon37_Then:
    assume {:partition} sdv_416 == 0;
    goto L13;

  anon36_Then:
    assume {:partition} sdv_415 == 0;
    goto L13;

  anon35_Then:
    assume {:partition} sdv_430 == 0;
    goto L13;

  anon34_Then:
    assume {:partition} sdv_419 == 0;
    goto L13;

  anon33_Then:
    assume {:partition} 200 != sdv_420;
    goto L13;

  anon32_Then:
    assume {:partition} sdv_428 != 235;
    goto L33;

  anon31_Then:
    assume {:partition} sdv_424 != 20;
    goto L33;

  anon30_Then:
    assume {:partition} sdv_425 == 0;
    goto L13;

  anon29_Then:
    assume {:partition} nCurrentDrive_2 == 0;
    call {:si_unique_call 1243} vslice_dummy_var_202 := ParStlWriteIoPort(Extension_11, 6, 160);
    goto L24;
}



procedure {:origName "ParStlWaitForBusyToClear"} ParStlWaitForBusyToClear(actual_Extension_12: int, actual_nRegisterToWaitOn: int) returns (Tmp_688: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_688 == 1 || Tmp_688 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlWaitForBusyToClear"} ParStlWaitForBusyToClear(actual_Extension_12: int, actual_nRegisterToWaitOn: int) returns (Tmp_688: int)
{
  var {:scalar} nMaxRetrials: int;
  var {:scalar} sdv_431: int;
  var {:scalar} bRetVal: int;
  var {:scalar} Tmp_690: int;
  var {:pointer} Extension_12: int;
  var {:scalar} nRegisterToWaitOn: int;

  anon0:
    Extension_12 := actual_Extension_12;
    nRegisterToWaitOn := actual_nRegisterToWaitOn;
    nMaxRetrials := 10000;
    bRetVal := 0;
    goto L7;

  L7:
    call {:si_unique_call 1244} nMaxRetrials, sdv_431, Tmp_690 := ParStlWaitForBusyToClear_loop_L7(nMaxRetrials, sdv_431, Tmp_690, Extension_12, nRegisterToWaitOn);
    goto L7_last;

  L7_last:
    Tmp_690 := nMaxRetrials;
    nMaxRetrials := nMaxRetrials - 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_690 != 0;
    call {:si_unique_call 1245} ParStlWaitForMicroSeconds(1000);
    call {:si_unique_call 1246} sdv_431 := ParStlReadIoPort(Extension_12, nRegisterToWaitOn);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(sdv_431, 128) == 0;
    bRetVal := 1;
    goto L8;

  L8:
    Tmp_688 := bRetVal;
    return;

  anon5_Then:
    assume {:partition} BAND(sdv_431, 128) != 0;
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_690 == 0;
    goto L8;
}



procedure {:origName "ParStlCheckIfStlProductId"} ParStlCheckIfStlProductId(actual_Extension_13: int, actual_ulDaisyIndex_1: int) returns (Tmp_691: int);
  free ensures {:va_keep} Tmp_691 == 0 || Tmp_691 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfStlProductId"} ParStlCheckIfStlProductId(actual_Extension_13: int, actual_ulDaisyIndex_1: int) returns (Tmp_691: int)
{
  var {:scalar} i_19: int;
  var {:scalar} Tmp_693: int;
  var {:scalar} Tmp_696: int;
  var {:scalar} ucProdIdLoByteHiNibble: int;
  var {:scalar} bReturnValue_8: int;
  var {:scalar} ucProdIdHiByteLoNibble: int;
  var {:scalar} ucProdIdHiByteHiNibble: int;
  var {:pointer} CurrentPort_2: int;
  var {:scalar} ucProdIdLoByteLoNibble: int;
  var {:scalar} Tmp_708: int;
  var {:scalar} usProdId: int;
  var {:scalar} status_28: int;
  var {:scalar} value_2: int;
  var {:scalar} newvalue_2: int;
  var {:scalar} Tmp_713: int;
  var {:scalar} Tmp_714: int;
  var {:pointer} Extension_13: int;
  var {:scalar} ulDaisyIndex_1: int;

  anon0:
    Extension_13 := actual_Extension_13;
    ulDaisyIndex_1 := actual_ulDaisyIndex_1;
    bReturnValue_8 := 0;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    havoc CurrentPort_2;
    call {:si_unique_call 1247} value_2 := corral_nondet();
    Tmp_714 := BAND(value_2, BNOT(8));
    newvalue_2 := BOR(Tmp_714, 4);
    newvalue_2 := BAND(newvalue_2, BNOT(32));
    i_19 := 0;
    goto L39;

  L39:
    call {:si_unique_call 1248} i_19, Tmp_693 := ParStlCheckIfStlProductId_loop_L39(i_19, Tmp_693);
    goto L39_last;

  L39_last:
    assume {:CounterLoop 4} {:Counter "i_19"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 4 > i_19;
    Tmp_693 := i_19;
    i_19 := i_19 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} i_19 >= 4;
    call {:si_unique_call 1249} status_28 := corral_nondet();
    Tmp_708 := BAND(status_28, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_708 == 184;
    call {:si_unique_call 1250} status_28 := corral_nondet();
    Tmp_696 := BAND(status_28, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Tmp_696 == 24;
    call {:si_unique_call 1251} status_28 := corral_nondet();
    Tmp_713 := BAND(status_28, BOR(16, 32));
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_713 == 48;
    call {:si_unique_call 1252} ucProdIdLoByteHiNibble := corral_nondet();
    ucProdIdLoByteHiNibble := BAND(ucProdIdLoByteHiNibble, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 1253} ucProdIdLoByteLoNibble := corral_nondet();
    call {:si_unique_call 1254} ucProdIdLoByteLoNibble := corral_nondet();
    call {:si_unique_call 1255} ucProdIdHiByteHiNibble := corral_nondet();
    ucProdIdHiByteHiNibble := BAND(ucProdIdHiByteHiNibble, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 1256} ucProdIdHiByteLoNibble := corral_nondet();
    call {:si_unique_call 1257} ucProdIdHiByteLoNibble := corral_nondet();
    call {:si_unique_call 1258} usProdId := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 43775 == usProdId;
    goto L202;

  L202:
    bReturnValue_8 := 1;
    goto L203;

  L203:
    goto L54;

  L54:
    Tmp_691 := bReturnValue_8;
    return;

  anon18_Then:
    assume {:partition} 43775 != usProdId;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 43263 != usProdId;
    goto L203;

  anon14_Then:
    assume {:partition} 43263 == usProdId;
    goto L202;

  anon17_Then:
    assume {:partition} Tmp_713 != 48;
    goto L54;

  anon16_Then:
    assume {:partition} Tmp_696 != 24;
    goto L54;

  anon15_Then:
    assume {:partition} Tmp_708 != 184;
    goto L54;
}



procedure {:origName "ParStlGetMemorySize"} ParStlGetMemorySize(actual_Extension_14: int) returns (Tmp_716: int);
  free ensures {:va_keep} Tmp_716 == 1 || Tmp_716 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlGetMemorySize"} ParStlGetMemorySize(actual_Extension_14: int) returns (Tmp_716: int)
{
  var {:scalar} Tmp_717: int;
  var {:scalar} sdv_440: int;
  var {:scalar} sdv_441: int;
  var {:scalar} bReturnValue_9: int;
  var {:scalar} Tmp_718: int;
  var {:scalar} sdv_443: int;
  var {:scalar} sdv_444: int;
  var {:scalar} Tmp_719: int;
  var {:scalar} Tmp_720: int;
  var {:scalar} sdv_446: int;
  var {:scalar} byTempValue_2: int;
  var {:scalar} sdv_447: int;
  var {:scalar} Tmp_721: int;
  var {:scalar} Tmp_722: int;
  var {:scalar} sdv_448: int;
  var {:scalar} sdv_451: int;
  var {:scalar} Tmp_724: int;
  var {:scalar} sdv_460: int;
  var {:scalar} Tmp_725: int;
  var {:pointer} Extension_14: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;

  anon0:
    Extension_14 := actual_Extension_14;
    bReturnValue_9 := 0;
    call {:si_unique_call 1259} sdv_444 := ParStlReadReg(Extension_14, 19);
    byTempValue_2 := sdv_444;
    byTempValue_2 := BOR(byTempValue_2, BOR(BOR(1, 4), 128));
    Tmp_725 := byTempValue_2;
    call {:si_unique_call 1260} vslice_dummy_var_211 := ParStlWriteReg(Extension_14, 19, Tmp_725);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_718 := byTempValue_2;
    call {:si_unique_call 1261} vslice_dummy_var_212 := ParStlWriteReg(Extension_14, 19, Tmp_718);
    call {:si_unique_call 1262} vslice_dummy_var_207 := ParStlWriteReg(Extension_14, 16, 85);
    call {:si_unique_call 1263} vslice_dummy_var_208 := ParStlWriteReg(Extension_14, 16, 170);
    call {:si_unique_call 1264} sdv_446 := ParStlReadReg(Extension_14, 19);
    byTempValue_2 := sdv_446;
    byTempValue_2 := BOR(byTempValue_2, BOR(BOR(1, 4), 128));
    Tmp_724 := byTempValue_2;
    call {:si_unique_call 1265} vslice_dummy_var_213 := ParStlWriteReg(Extension_14, 19, Tmp_724);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_722 := byTempValue_2;
    call {:si_unique_call 1266} vslice_dummy_var_214 := ParStlWriteReg(Extension_14, 19, Tmp_722);
    call {:si_unique_call 1267} sdv_448 := ParStlReadReg(Extension_14, 16);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 85 == sdv_448;
    call {:si_unique_call 1268} sdv_451 := ParStlReadReg(Extension_14, 16);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 170 == sdv_451;
    bReturnValue_9 := 1;
    goto L53;

  L53:
    Tmp_716 := bReturnValue_9;
    return;

  anon12_Then:
    assume {:partition} 170 != sdv_451;
    goto L44;

  L44:
    call {:si_unique_call 1269} sdv_460 := ParStlReadReg(Extension_14, 11);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 200 == sdv_460;
    call {:si_unique_call 1270} sdv_440 := ParStlReadReg(Extension_14, 19);
    byTempValue_2 := sdv_440;
    byTempValue_2 := BOR(byTempValue_2, BOR(1, 4));
    byTempValue_2 := BAND(byTempValue_2, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_721 := byTempValue_2;
    call {:si_unique_call 1271} vslice_dummy_var_215 := ParStlWriteReg(Extension_14, 19, Tmp_721);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_717 := byTempValue_2;
    call {:si_unique_call 1272} vslice_dummy_var_216 := ParStlWriteReg(Extension_14, 19, Tmp_717);
    call {:si_unique_call 1273} vslice_dummy_var_209 := ParStlWriteReg(Extension_14, 16, 85);
    call {:si_unique_call 1274} vslice_dummy_var_210 := ParStlWriteReg(Extension_14, 16, 170);
    call {:si_unique_call 1275} sdv_441 := ParStlReadReg(Extension_14, 19);
    byTempValue_2 := sdv_441;
    byTempValue_2 := BOR(byTempValue_2, BOR(1, 4));
    Tmp_719 := byTempValue_2;
    call {:si_unique_call 1276} vslice_dummy_var_217 := ParStlWriteReg(Extension_14, 19, Tmp_719);
    byTempValue_2 := BAND(byTempValue_2, BNOT(1));
    Tmp_720 := byTempValue_2;
    call {:si_unique_call 1277} vslice_dummy_var_218 := ParStlWriteReg(Extension_14, 19, Tmp_720);
    call {:si_unique_call 1278} sdv_447 := ParStlReadReg(Extension_14, 16);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 85 == sdv_447;
    call {:si_unique_call 1279} sdv_443 := ParStlReadReg(Extension_14, 16);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 170 == sdv_443;
    bReturnValue_9 := 1;
    goto L53;

  anon15_Then:
    assume {:partition} 170 != sdv_443;
    goto L53;

  anon14_Then:
    assume {:partition} 85 != sdv_447;
    goto L53;

  anon13_Then:
    assume {:partition} 200 != sdv_460;
    goto L53;

  anon11_Then:
    assume {:partition} 85 != sdv_448;
    goto L44;
}



procedure {:origName "ParStlWaitForIrq"} ParStlWaitForIrq(actual_Extension_15: int) returns (Tmp_726: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_726 == 1 || Tmp_726 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlWaitForIrq"} ParStlWaitForIrq(actual_Extension_15: int) returns (Tmp_726: int)
{
  var {:scalar} nMaxRetrials_1: int;
  var {:scalar} bRetVal_1: int;
  var {:scalar} sdv_461: int;
  var {:scalar} Tmp_728: int;
  var {:pointer} Extension_15: int;

  anon0:
    Extension_15 := actual_Extension_15;
    nMaxRetrials_1 := 10000;
    bRetVal_1 := 0;
    goto L7;

  L7:
    call {:si_unique_call 1280} nMaxRetrials_1, sdv_461, Tmp_728 := ParStlWaitForIrq_loop_L7(nMaxRetrials_1, sdv_461, Tmp_728, Extension_15);
    goto L7_last;

  L7_last:
    Tmp_728 := nMaxRetrials_1;
    nMaxRetrials_1 := nMaxRetrials_1 - 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_728 != 0;
    call {:si_unique_call 1281} sdv_461 := ParStlReadReg(Extension_15, 18);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(sdv_461, 32) != 0;
    bRetVal_1 := 1;
    goto L8;

  L8:
    Tmp_726 := bRetVal_1;
    return;

  anon5_Then:
    assume {:partition} BAND(sdv_461, 32) == 0;
    call {:si_unique_call 1282} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_728 == 0;
    goto L8;
}



procedure {:origName "ParStlSetEPPMode"} ParStlSetEPPMode(actual_Extension_16: int) returns (Tmp_729: int);
  free ensures {:va_keep} Tmp_729 == 1 || Tmp_729 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlSetEPPMode"} ParStlSetEPPMode(actual_Extension_16: int) returns (Tmp_729: int)
{
  var {:scalar} timeout: int;
  var {:scalar} Tmp_731: int;
  var {:scalar} sdv_463: int;
  var {:scalar} sdv_465: int;
  var {:scalar} sdv_470: int;
  var {:scalar} idx_2: int;
  var {:scalar} Tmp_732: int;
  var {:scalar} Tmp_733: int;
  var {:scalar} sdv_472: int;
  var {:pointer} Extension_16: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;

  anon0:
    Extension_16 := actual_Extension_16;
    timeout := 1;
    call {:si_unique_call 1283} vslice_dummy_var_224 := ParStlWriteReg(Extension_16, 26, 12);
    call {:si_unique_call 1284} vslice_dummy_var_219 := ParStlWriteReg(Extension_16, 24, 64);
    call {:si_unique_call 1285} vslice_dummy_var_220 := ParStlWriteReg(Extension_16, 26, 6);
    idx_2 := 0;
    goto L16;

  L16:
    call {:si_unique_call 1286} Tmp_731, sdv_470, idx_2 := ParStlSetEPPMode_loop_L16(Tmp_731, sdv_470, idx_2, Extension_16);
    goto L16_last;

  L16_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 1287} sdv_470 := ParStlReadReg(Extension_16, 25);
    Tmp_731 := BAND(sdv_470, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Tmp_731 == 56;
    timeout := 0;
    goto L17;

  L17:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} timeout != 0;
    goto L29;

  L29:
    Tmp_729 := 0;
    goto L1;

  L1:
    return;

  anon26_Then:
    assume {:partition} timeout == 0;
    call {:si_unique_call 1288} vslice_dummy_var_221 := ParStlWriteReg(Extension_16, 26, 7);
    timeout := 1;
    idx_2 := 0;
    goto L32;

  L32:
    call {:si_unique_call 1289} sdv_463, idx_2, Tmp_733 := ParStlSetEPPMode_loop_L32(sdv_463, idx_2, Tmp_733, Extension_16);
    goto L32_last;

  L32_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 1290} sdv_463 := ParStlReadReg(Extension_16, 25);
    Tmp_733 := BAND(sdv_463, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Tmp_733 == 56;
    timeout := 0;
    goto L33;

  L33:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} timeout == 0;
    call {:si_unique_call 1291} vslice_dummy_var_222 := ParStlWriteReg(Extension_16, 26, 4);
    timeout := 1;
    idx_2 := 0;
    goto L47;

  L47:
    call {:si_unique_call 1292} sdv_465, idx_2, Tmp_732 := ParStlSetEPPMode_loop_L47(sdv_465, idx_2, Tmp_732, Extension_16);
    goto L47_last;

  L47_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 1293} sdv_465 := ParStlReadReg(Extension_16, 25);
    Tmp_732 := BAND(sdv_465, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_732 == 248;
    timeout := 0;
    goto L48;

  L48:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} timeout == 0;
    timeout := 1;
    call {:si_unique_call 1294} vslice_dummy_var_225 := ParStlWriteReg(Extension_16, 26, 5);
    idx_2 := 0;
    goto L62;

  L62:
    call {:si_unique_call 1295} idx_2, sdv_472 := ParStlSetEPPMode_loop_L62(idx_2, sdv_472, Extension_16);
    goto L62_last;

  L62_last:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} 10 > idx_2;
    call {:si_unique_call 1296} sdv_472 := ParStlReadReg(Extension_16, 26);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_472 == 5;
    timeout := 0;
    goto L63;

  L63:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} timeout == 0;
    call {:si_unique_call 1297} vslice_dummy_var_223 := ParStlWriteReg(Extension_16, 26, 132);
    Tmp_729 := 1;
    goto L1;

  anon32_Then:
    assume {:partition} timeout != 0;
    goto L29;

  anon33_Then:
    assume {:partition} sdv_472 != 5;
    idx_2 := idx_2 + 1;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    assume false;
    return;

  anon31_Then:
    assume {:partition} idx_2 >= 10;
    goto L63;

  anon30_Then:
    assume {:partition} timeout != 0;
    goto L29;

  anon36_Then:
    assume {:partition} Tmp_732 != 248;
    idx_2 := idx_2 + 1;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} idx_2 >= 10;
    goto L48;

  anon28_Then:
    assume {:partition} timeout != 0;
    goto L29;

  anon35_Then:
    assume {:partition} Tmp_733 != 56;
    idx_2 := idx_2 + 1;
    goto anon35_Then_dummy;

  anon35_Then_dummy:
    assume false;
    return;

  anon27_Then:
    assume {:partition} idx_2 >= 10;
    goto L33;

  anon34_Then:
    assume {:partition} Tmp_731 != 56;
    idx_2 := idx_2 + 1;
    goto anon34_Then_dummy;

  anon34_Then_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} idx_2 >= 10;
    goto L17;
}



procedure {:origName "ParStlCheckIfDazzle"} ParStlCheckIfDazzle(actual_Extension_17: int) returns (Tmp_734: int);
  free ensures {:va_keep} Tmp_734 == 0 || Tmp_734 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfDazzle"} ParStlCheckIfDazzle(actual_Extension_17: int) returns (Tmp_734: int)
{
  var {:scalar} bReturnValue_10: int;
  var {:scalar} sdv_473: int;
  var {:scalar} sdv_474: int;
  var {:scalar} sdv_476: int;
  var {:scalar} ucSignature: int;
  var {:pointer} Extension_17: int;
  var vslice_dummy_var_226: int;

  anon0:
    Extension_17 := actual_Extension_17;
    bReturnValue_10 := 0;
    call {:si_unique_call 1298} sdv_473 := ParStlReadReg(Extension_17, 11);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 199 != sdv_473;
    goto L19;

  L19:
    Tmp_734 := bReturnValue_10;
    return;

  anon9_Then:
    assume {:partition} 199 == sdv_473;
    call {:si_unique_call 1299} sdv_474 := ParStlCheckCardInsertionStatus(Extension_17);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 1 == sdv_474;
    goto L19;

  anon10_Then:
    assume {:partition} 1 != sdv_474;
    call {:si_unique_call 1300} vslice_dummy_var_226 := ParStlWriteReg(Extension_17, 24, 0);
    call {:si_unique_call 1301} sdv_476 := ParStlReadReg(Extension_17, 25);
    ucSignature := sdv_476;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} ucSignature == 90;
    goto L26;

  L26:
    bReturnValue_10 := 1;
    goto L19;

  anon12_Then:
    assume {:partition} ucSignature != 90;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} ucSignature == 188;
    goto L26;

  anon11_Then:
    assume {:partition} ucSignature != 188;
    goto L19;
}



procedure {:origName "ParStlWaitForMicroSeconds"} ParStlWaitForMicroSeconds(actual_nMicroSecondsToWait: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlWaitForMicroSeconds"} ParStlWaitForMicroSeconds(actual_nMicroSecondsToWait: int)
{
  var vslice_dummy_var_227: int;

  anon0:
    call {:si_unique_call 1302} vslice_dummy_var_227 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ParStlCheckIfLS120"} ParStlCheckIfLS120(actual_Extension_18: int) returns (Tmp_738: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_738 == 0 || Tmp_738 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfLS120"} ParStlCheckIfLS120(actual_Extension_18: int) returns (Tmp_738: int)
{
  var {:scalar} bReturnValue_11: int;
  var {:scalar} sdv_477: int;
  var {:scalar} sdv_478: int;
  var {:pointer} Extension_18: int;
  var vslice_dummy_var_228: int;

  anon0:
    Extension_18 := actual_Extension_18;
    bReturnValue_11 := 0;
    call {:si_unique_call 1303} sdv_477 := ParStlSelectAdapterSocket(Extension_18, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_477 == 0;
    goto L18;

  L18:
    Tmp_738 := bReturnValue_11;
    return;

  anon5_Then:
    assume {:partition} sdv_477 != 0;
    call {:si_unique_call 1304} sdv_478 := ParStlReadIoPort(Extension_18, 7);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 226 == sdv_478;
    bReturnValue_11 := 1;
    goto L14;

  L14:
    call {:si_unique_call 1305} vslice_dummy_var_228 := ParStlSelectAdapterSocket(Extension_18, 0);
    goto L18;

  anon6_Then:
    assume {:partition} 226 != sdv_478;
    goto L14;
}



procedure {:origName "ParStlEPPRead"} ParStlEPPRead(actual_Extension_19: int) returns (Tmp_740: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlEPPRead"} ParStlEPPRead(actual_Extension_19: int) returns (Tmp_740: int)
{
  var {:scalar} Tmp_741: int;
  var {:scalar} sdv_480: int;
  var {:scalar} timeout_1: int;
  var {:scalar} sdv_481: int;
  var {:scalar} statusData: int;
  var {:scalar} idx_3: int;
  var {:pointer} Extension_19: int;

  anon0:
    Extension_19 := actual_Extension_19;
    statusData := 0;
    timeout_1 := 1;
    idx_3 := 0;
    goto L10;

  L10:
    call {:si_unique_call 1306} sdv_480, statusData, idx_3 := ParStlEPPRead_loop_L10(sdv_480, statusData, idx_3, Extension_19);
    goto L10_last;

  L10_last:
    assume {:CounterLoop 10} {:Counter "idx_3"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 10 > idx_3;
    call {:si_unique_call 1307} sdv_480 := ParStlReadReg(Extension_19, 25);
    statusData := sdv_480;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(statusData, 8) != 0;
    idx_3 := idx_3 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} BAND(statusData, 8) == 0;
    timeout_1 := 0;
    goto L11;

  L11:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} timeout_1 == 1;
    call {:si_unique_call 1308} Tmp_741 := corral_nondet();
    Tmp_740 := BOR(Tmp_741, 256);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} timeout_1 != 1;
    call {:si_unique_call 1309} sdv_481 := ParStlReadReg(Extension_19, 28);
    call {:si_unique_call 1310} Tmp_740 := corral_nondet();
    goto L1;

  anon7_Then:
    assume {:partition} idx_3 >= 10;
    goto L11;
}



procedure {:origName "ParStlCheckIfSSFDC"} ParStlCheckIfSSFDC(actual_Extension_20: int) returns (Tmp_744: int);
  free ensures {:va_keep} Tmp_744 == 0 || Tmp_744 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfSSFDC"} ParStlCheckIfSSFDC(actual_Extension_20: int) returns (Tmp_744: int)
{
  var {:scalar} bReturnValue_12: int;
  var {:scalar} sdv_482: int;
  var {:scalar} sdv_486: int;
  var {:scalar} sdv_488: int;
  var {:pointer} Extension_20: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;

  anon0:
    Extension_20 := actual_Extension_20;
    bReturnValue_12 := 0;
    call {:si_unique_call 1311} sdv_482 := ParStlReadReg(Extension_20, 11);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 199 != sdv_482;
    goto L23;

  L23:
    Tmp_744 := bReturnValue_12;
    return;

  anon7_Then:
    assume {:partition} 199 == sdv_482;
    call {:si_unique_call 1312} vslice_dummy_var_229 := ParStlWriteReg(Extension_20, 14, 0);
    call {:si_unique_call 1313} vslice_dummy_var_230 := ParStlWriteReg(Extension_20, 15, 16);
    call {:si_unique_call 1314} vslice_dummy_var_231 := ParStlWriteReg(Extension_20, 15, 18);
    call {:si_unique_call 1315} sdv_486 := ParStlReadReg(Extension_20, 15);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 26 == sdv_486;
    call {:si_unique_call 1316} vslice_dummy_var_232 := ParStlWriteReg(Extension_20, 15, 16);
    call {:si_unique_call 1317} sdv_488 := ParStlReadReg(Extension_20, 15);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(sdv_488, 8) == 0;
    bReturnValue_12 := 1;
    goto L23;

  anon9_Then:
    assume {:partition} BAND(sdv_488, 8) != 0;
    goto L23;

  anon8_Then:
    assume {:partition} 26 != sdv_486;
    goto L23;
}



procedure {:origName "ParStlHIFDCheckIfControllerReady"} ParStlHIFDCheckIfControllerReady(actual_Extension_21: int) returns (Tmp_746: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_746 == 1 || Tmp_746 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlHIFDCheckIfControllerReady"} ParStlHIFDCheckIfControllerReady(actual_Extension_21: int) returns (Tmp_746: int)
{
  var {:scalar} bReturnValue_13: int;
  var {:scalar} Tmp_747: int;
  var {:scalar} bySCRControlReg: int;
  var {:scalar} sdv_490: int;
  var {:scalar} sdv_491: int;
  var {:scalar} Tmp_749: int;
  var {:pointer} Extension_21: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;

  anon0:
    Extension_21 := actual_Extension_21;
    bReturnValue_13 := 0;
    call {:si_unique_call 1318} vslice_dummy_var_235 := ParStlWriteReg(Extension_21, 14, 12);
    call {:si_unique_call 1319} sdv_491 := ParStlReadReg(Extension_21, 15);
    bySCRControlReg := sdv_491;
    bySCRControlReg := BOR(bySCRControlReg, 32);
    Tmp_747 := bySCRControlReg;
    call {:si_unique_call 1320} vslice_dummy_var_236 := ParStlWriteReg(Extension_21, 15, Tmp_747);
    call {:si_unique_call 1321} ParStlWaitForMicroSeconds(10000);
    call {:si_unique_call 1322} vslice_dummy_var_233 := ParStlWriteIoPort(Extension_21, 2, 0);
    call {:si_unique_call 1323} ParStlWaitForMicroSeconds(1000);
    call {:si_unique_call 1324} vslice_dummy_var_234 := ParStlWriteIoPort(Extension_21, 2, 12);
    call {:si_unique_call 1325} ParStlWaitForMicroSeconds(10000);
    call {:si_unique_call 1326} sdv_490 := ParStlReadIoPort(Extension_21, 4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 128 == sdv_490;
    bReturnValue_13 := 1;
    goto L37;

  L37:
    bySCRControlReg := BAND(bySCRControlReg, BNOT(32));
    Tmp_749 := bySCRControlReg;
    call {:si_unique_call 1327} vslice_dummy_var_237 := ParStlWriteReg(Extension_21, 15, Tmp_749);
    Tmp_746 := bReturnValue_13;
    return;

  anon3_Then:
    assume {:partition} 128 != sdv_490;
    goto L37;
}



procedure {:origName "ParStlReadReg"} ParStlReadReg(actual_Extension_22: int, actual_reg_1: int) returns (Tmp_750: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlReadReg"} ParStlReadReg(actual_Extension_22: int, actual_reg_1: int) returns (Tmp_750: int)
{
  var {:scalar} byReadNibble: int;
  var {:pointer} CurrentPort_3: int;
  var {:scalar} sdv_497: int;
  var {:pointer} Extension_22: int;
  var {:scalar} reg_1: int;

  anon0:
    Extension_22 := actual_Extension_22;
    reg_1 := actual_reg_1;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    havoc CurrentPort_3;
    call {:si_unique_call 1328} byReadNibble := corral_nondet();
    call {:si_unique_call 1329} byReadNibble := corral_nondet();
    call {:si_unique_call 1330} sdv_497 := corral_nondet();
    byReadNibble := BOR(byReadNibble, BAND(sdv_497, BOR(BOR(BOR(16, 32), 64), 128)));
    Tmp_750 := byReadNibble;
    return;
}



procedure {:origName "ParStlCheckIfHiFD"} ParStlCheckIfHiFD(actual_Extension_23: int) returns (Tmp_753: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_753 == 0 || Tmp_753 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfHiFD"} ParStlCheckIfHiFD(actual_Extension_23: int) returns (Tmp_753: int)
{
  var {:scalar} bReturnValue_14: int;
  var {:scalar} sdv_498: int;
  var {:scalar} sdv_499: int;
  var {:scalar} sdv_500: int;
  var {:pointer} Extension_23: int;
  var vslice_dummy_var_238: int;

  anon0:
    Extension_23 := actual_Extension_23;
    bReturnValue_14 := 0;
    call {:si_unique_call 1331} sdv_498 := ParStlSelectAdapterSocket(Extension_23, 1);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_498 == 0;
    goto L21;

  L21:
    call {:si_unique_call 1332} vslice_dummy_var_238 := ParStlSelectAdapterSocket(Extension_23, 0);
    Tmp_753 := bReturnValue_14;
    return;

  anon7_Then:
    assume {:partition} sdv_498 != 0;
    call {:si_unique_call 1333} sdv_499 := ParStlHIFDCheckIfControllerReady(Extension_23);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_499 == 0;
    goto L21;

  anon8_Then:
    assume {:partition} sdv_499 != 0;
    call {:si_unique_call 1334} sdv_500 := ParStlHIFDCheckSMCController(Extension_23);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_500 == 0;
    goto L21;

  anon9_Then:
    assume {:partition} sdv_500 != 0;
    bReturnValue_14 := 1;
    goto L21;
}



procedure {:origName "ParStlHIFDCheckSMCController"} ParStlHIFDCheckSMCController(actual_Extension_24: int) returns (Tmp_755: int);
  free ensures {:va_keep} Tmp_755 == 1 || Tmp_755 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlHIFDCheckSMCController"} ParStlHIFDCheckSMCController(actual_Extension_24: int) returns (Tmp_755: int)
{
  var {:scalar} bReturnValue_15: int;
  var {:scalar} sdv_507: int;
  var {:pointer} Extension_24: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;

  anon0:
    Extension_24 := actual_Extension_24;
    bReturnValue_15 := 0;
    call {:si_unique_call 1335} vslice_dummy_var_243 := ParStlWriteIoPort(Extension_24, 0, 85);
    call {:si_unique_call 1336} vslice_dummy_var_239 := ParStlWriteIoPort(Extension_24, 0, 85);
    call {:si_unique_call 1337} vslice_dummy_var_240 := ParStlWriteIoPort(Extension_24, 0, 13);
    call {:si_unique_call 1338} sdv_507 := ParStlReadIoPort(Extension_24, 1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 120 == sdv_507;
    bReturnValue_15 := 1;
    call {:si_unique_call 1339} vslice_dummy_var_244 := ParStlWriteIoPort(Extension_24, 0, 3);
    call {:si_unique_call 1340} vslice_dummy_var_242 := ParStlWriteIoPort(Extension_24, 1, 114);
    goto L18;

  L18:
    call {:si_unique_call 1341} vslice_dummy_var_241 := ParStlWriteReg(Extension_24, 0, 170);
    Tmp_755 := bReturnValue_15;
    return;

  anon3_Then:
    assume {:partition} 120 != sdv_507;
    goto L18;
}



procedure {:origName "ParStlReceiveData"} ParStlReceiveData(actual_Extension_25: int, actual_hostBufferPointer: int, actual_shuttleMemoryAddress: int, actual_count_2: int) returns (Tmp_757: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_757 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlReceiveData"} ParStlReceiveData(actual_Extension_25: int, actual_hostBufferPointer: int, actual_shuttleMemoryAddress: int, actual_count_2: int) returns (Tmp_757: int)
{
  var {:scalar} i_20: int;
  var {:scalar} Tmp_759: int;
  var {:scalar} Tmp_760: int;
  var {:scalar} Tmp_761: int;
  var {:pointer} pchDataBuffer: int;
  var {:scalar} Tmp_762: int;
  var {:scalar} Tmp_763: int;
  var {:scalar} Tmp_764: int;
  var {:scalar} Tmp_765: int;
  var {:pointer} CurrentPort_4: int;
  var {:scalar} sdv_511: int;
  var {:scalar} sdv_512: int;
  var {:scalar} Tmp_766: int;
  var {:scalar} Tmp_767: int;
  var {:scalar} Tmp_768: int;
  var {:pointer} Extension_25: int;
  var {:pointer} hostBufferPointer: int;
  var {:scalar} count_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;

  anon0:
    Extension_25 := actual_Extension_25;
    hostBufferPointer := actual_hostBufferPointer;
    count_2 := actual_count_2;
    pchDataBuffer := hostBufferPointer;
    i_20 := 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    havoc CurrentPort_4;
    call {:si_unique_call 1342} vslice_dummy_var_247 := ParStlWriteReg(Extension_25, 10, 24);
    goto L42;

  L42:
    call {:si_unique_call 1343} i_20, Tmp_759, Tmp_760, Tmp_761, Tmp_762, Tmp_763, Tmp_764, Tmp_765, sdv_511, sdv_512, Tmp_766, Tmp_767, Tmp_768, boogieTmp, vslice_dummy_var_245, vslice_dummy_var_246 := ParStlReceiveData_loop_L42(i_20, Tmp_759, Tmp_760, Tmp_761, pchDataBuffer, Tmp_762, Tmp_763, Tmp_764, Tmp_765, sdv_511, sdv_512, Tmp_766, Tmp_767, Tmp_768, count_2, boogieTmp, vslice_dummy_var_245, vslice_dummy_var_246);
    goto L42_last;

  L42_last:
    call {:si_unique_call 1347} vslice_dummy_var_245 := corral_nondet();
    Tmp_764 := i_20;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    call {:si_unique_call 1348} boogieTmp := corral_nondet();
    Mem_T.INT4[pchDataBuffer + Tmp_764 * 4] := boogieTmp;
    call {:si_unique_call 1349} sdv_511 := corral_nondet();
    Tmp_761 := i_20;
    i_20 := i_20 + 1;
    Tmp_765 := Tmp_761;
    Tmp_763 := i_20;
    i_20 := i_20 + 1;
    Tmp_760 := Tmp_763;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    Mem_T.INT4[pchDataBuffer + Tmp_765 * 4] := BOR(Mem_T.INT4[pchDataBuffer + Tmp_760 * 4], BAND(sdv_511, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} count_2 - 1 == i_20;
    goto L69;

  L69:
    call {:si_unique_call 1344} vslice_dummy_var_246 := corral_nondet();
    Tmp_762 := i_20;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    call {:si_unique_call 1345} boogieTmp := corral_nondet();
    Mem_T.INT4[pchDataBuffer + Tmp_762 * 4] := boogieTmp;
    call {:si_unique_call 1346} sdv_512 := corral_nondet();
    Tmp_759 := i_20;
    i_20 := i_20 + 1;
    Tmp_768 := Tmp_759;
    Tmp_767 := i_20;
    i_20 := i_20 + 1;
    Tmp_766 := Tmp_767;
    assume {:nonnull} pchDataBuffer != 0;
    assume pchDataBuffer > 0;
    Mem_T.INT4[pchDataBuffer + Tmp_768 * 4] := BOR(Mem_T.INT4[pchDataBuffer + Tmp_766 * 4], BAND(sdv_512, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} count_2 <= i_20;
    Tmp_757 := 0;
    return;

  anon6_Then:
    assume {:partition} i_20 < count_2;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} count_2 - 1 != i_20;
    goto L69;
}



procedure {:origName "ParBuildStlDeviceId"} ParBuildStlDeviceId(actual_Extension_26: int, actual_bReturnRawString_1: int) returns (Tmp_769: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParBuildStlDeviceId"} ParBuildStlDeviceId(actual_Extension_26: int, actual_bReturnRawString_1: int) returns (Tmp_769: int)
{
  var {:scalar} size: int;
  var {:pointer} szDeviceIdString: int;
  var {:scalar} dtDeviceType: int;
  var {:scalar} charsWritten: int;
  var {:pointer} sdv_516: int;
  var {:pointer} szVidPidStringScan: int;
  var {:pointer} id_4: int;
  var {:scalar} Tmp_774: int;
  var {:scalar} Tmp_775: int;
  var {:pointer} szVidPidString: int;
  var {:pointer} Extension_26: int;
  var {:scalar} bReturnRawString_1: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;

  anon0:
    Extension_26 := actual_Extension_26;
    bReturnRawString_1 := actual_bReturnRawString_1;
    call {:si_unique_call 1350} vslice_dummy_var_248 := __HAVOC_malloc(152);
    call {:si_unique_call 1351} vslice_dummy_var_249 := __HAVOC_malloc(32);
    call {:si_unique_call 1352} szDeviceIdString := __HAVOC_malloc(512);
    call {:si_unique_call 1353} szVidPidStringScan := __HAVOC_malloc(128);
    call {:si_unique_call 1354} szVidPidString := __HAVOC_malloc(152);
    call {:si_unique_call 1355} vslice_dummy_var_250 := __HAVOC_malloc(128);
    call {:si_unique_call 1356} vslice_dummy_var_251 := __HAVOC_malloc(32);
    size := 128;
    assume {:nonnull} szDeviceIdString != 0;
    assume szDeviceIdString > 0;
    Mem_T.INT4[szDeviceIdString] := 0;
    szVidPidString := strConst__li2bpl29;
    szVidPidStringScan := strConst__li2bpl30;
    call {:si_unique_call 1357} sdv_RtlZeroMemory(0, 128);
    call {:si_unique_call 1358} dtDeviceType := ParStlGetDeviceType(Extension_26, -1);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} dtDeviceType != 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} dtDeviceType == 7;
    dtDeviceType := BOR(dtDeviceType, 0);
    call {:si_unique_call 1359} charsWritten := corral_nondet();
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} charsWritten >= size;
    goto L32;

  L32:
    Tmp_769 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} size > charsWritten;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} 0 <= charsWritten;
    goto L34;

  L34:
    call {:si_unique_call 1360} sdv_516 := ExAllocatePoolWithTag(1, size, -797810352);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    id_4 := sdv_516;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} id_4 != 0;
    call {:si_unique_call 1361} sdv_RtlZeroMemory(0, size);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} bReturnRawString_1 != 0;
    assume {:nonnull} id_4 != 0;
    assume id_4 > 0;
    Mem_T.INT4[id_4] := 0;
    assume {:nonnull} id_4 != 0;
    assume id_4 > 0;
    Mem_T.INT4[id_4] := 126;
    Tmp_775 := size - 4 - 2;
    call {:si_unique_call 1362} sdv_RtlCopyMemory(0, 0, Tmp_775);
    goto L52;

  L52:
    Tmp_769 := id_4;
    goto L1;

  anon22_Then:
    assume {:partition} bReturnRawString_1 == 0;
    Tmp_774 := size - 4;
    call {:si_unique_call 1363} sdv_RtlCopyMemory(0, 0, Tmp_774);
    goto L52;

  anon27_Then:
    assume {:partition} id_4 == 0;
    Tmp_769 := 0;
    goto L1;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} charsWritten < 0;
    goto L32;

  anon25_Then:
    assume {:partition} dtDeviceType != 7;
    dtDeviceType := BOR(dtDeviceType, 0);
    call {:si_unique_call 1364} charsWritten := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} charsWritten >= size;
    goto L63;

  L63:
    Tmp_769 := 0;
    goto L1;

  anon23_Then:
    assume {:partition} size > charsWritten;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 0 > charsWritten;
    goto L63;

  anon24_Then:
    assume {:partition} charsWritten >= 0;
    goto L34;

  anon19_Then:
    assume {:partition} dtDeviceType == 0;
    Tmp_769 := 0;
    goto L1;
}



procedure {:origName "ParStlGetDeviceType"} ParStlGetDeviceType(actual_Extension_27: int, actual_nPreferredDeviceType: int) returns (Tmp_778: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlGetDeviceType"} ParStlGetDeviceType(actual_Extension_27: int, actual_nPreferredDeviceType: int) returns (Tmp_778: int)
{
  var {:scalar} i_21: int;
  var {:scalar} sdv_518: int;
  var {:scalar} sdv_519: int;
  var {:scalar} sdv_520: int;
  var {:scalar} sdv_521: int;
  var {:scalar} Tmp_780: int;
  var {:scalar} sdv_522: int;
  var {:scalar} dtDeviceType_1: int;
  var {:scalar} sdv_524: int;
  var {:scalar} sdv_525: int;
  var {:scalar} sdv_526: int;
  var {:scalar} sdv_528: int;
  var {:scalar} sdv_529: int;
  var {:scalar} sdv_533: int;
  var {:scalar} sdv_534: int;
  var {:scalar} atapiParams_5: int;
  var {:scalar} sdv_535: int;
  var {:scalar} sdv_536: int;
  var {:scalar} sdv_537: int;
  var {:pointer} Extension_27: int;
  var {:scalar} nPreferredDeviceType: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;

  anon0:
    call {:si_unique_call 1365} atapiParams_5 := __HAVOC_malloc(8);
    Extension_27 := actual_Extension_27;
    nPreferredDeviceType := actual_nPreferredDeviceType;
    dtDeviceType_1 := 0;
    i_21 := 0;
    goto L8;

  L8:
    call {:si_unique_call 1366} i_21, Tmp_780 := ParStlGetDeviceType_loop_L8(i_21, Tmp_780, atapiParams_5);
    goto L8_last;

  L8_last:
    assume {:CounterLoop 2} {:Counter "i_21"} true;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} 2 > i_21;
    Tmp_780 := i_21;
    assume {:nonnull} atapiParams_5 != 0;
    assume atapiParams_5 > 0;
    havoc Mem_T.INT4;
    i_21 := i_21 + 1;
    goto anon35_Else_dummy;

  anon35_Else_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} i_21 >= 2;
    call {:si_unique_call 1367} sdv_521 := ParStlCheckIfScsiDevice(Extension_27);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} 1 == sdv_521;
    dtDeviceType_1 := BOR(dtDeviceType_1, 4);
    goto L20;

  L20:
    Tmp_778 := BAND(dtDeviceType_1, nPreferredDeviceType);
    return;

  anon36_Then:
    assume {:partition} 1 != sdv_521;
    call {:si_unique_call 1368} vslice_dummy_var_252 := ParStlReadReg(Extension_27, 11);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 1369} vslice_dummy_var_254 := ParStlWriteReg(Extension_27, 14, 15);
    call {:si_unique_call 1370} vslice_dummy_var_255 := ParStlWriteReg(Extension_27, 15, 4);
    goto L22;

  L22:
    call {:si_unique_call 1371} vslice_dummy_var_253 := ParStlReadReg(Extension_27, 11);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    call {:si_unique_call 1372} sdv_535 := ParStlGetImpactSDeviceType(Extension_27, atapiParams_5, nPreferredDeviceType);
    dtDeviceType_1 := BOR(dtDeviceType_1, sdv_535);
    goto L20;

  anon38_Then:
    call {:si_unique_call 1373} vslice_dummy_var_256 := ParStlReadReg(Extension_27, 11);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    call {:si_unique_call 1374} sdv_525 := ParStlGetImpactDeviceType(Extension_27, atapiParams_5, nPreferredDeviceType);
    dtDeviceType_1 := BOR(dtDeviceType_1, sdv_525);
    goto L20;

  anon39_Then:
    call {:si_unique_call 1375} sdv_526 := ParStlCheckIfEppDevice(Extension_27);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 1 == sdv_526;
    call {:si_unique_call 1376} sdv_528 := ParStlCheckUMAXScannerPresence(Extension_27);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} 1 == sdv_528;
    dtDeviceType_1 := BOR(dtDeviceType_1, 8192);
    goto L20;

  anon41_Then:
    assume {:partition} 1 != sdv_528;
    call {:si_unique_call 1377} sdv_518 := ParStlCheckAvisionScannerPresence(Extension_27);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} 1 == sdv_518;
    dtDeviceType_1 := BOR(dtDeviceType_1, 16384);
    goto L20;

  anon42_Then:
    assume {:partition} 1 != sdv_518;
    dtDeviceType_1 := BOR(dtDeviceType_1, 64);
    goto L20;

  anon40_Then:
    assume {:partition} 1 != sdv_526;
    call {:si_unique_call 1378} sdv_537 := ParStlCheckIfSSFDC(Extension_27);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} 1 == sdv_537;
    dtDeviceType_1 := BOR(dtDeviceType_1, 8);
    goto L20;

  anon43_Then:
    assume {:partition} 1 != sdv_537;
    call {:si_unique_call 1379} sdv_520 := ParStlCheckIfMMC(Extension_27, atapiParams_5);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} 1 == sdv_520;
    dtDeviceType_1 := BOR(dtDeviceType_1, 16);
    goto L20;

  anon44_Then:
    assume {:partition} 1 != sdv_520;
    call {:si_unique_call 1380} ParStlSet16BitOperation(Extension_27);
    call {:si_unique_call 1381} sdv_533 := ParStlCheckIfAtaAtapiDevice(Extension_27, atapiParams_5);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 1 == sdv_533;
    call {:si_unique_call 1382} sdv_536 := ParStlCheckIfAtapiDevice(Extension_27, atapiParams_5);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} 1 == sdv_536;
    call {:si_unique_call 1383} sdv_522 := ParStlCheckIfLS120(Extension_27);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} 1 == sdv_522;
    dtDeviceType_1 := BOR(dtDeviceType_1, 512);
    goto L20;

  anon47_Then:
    assume {:partition} 1 != sdv_522;
    call {:si_unique_call 1384} sdv_529 := ParStlCheckIfHiFD(Extension_27);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} 1 == sdv_529;
    dtDeviceType_1 := BOR(dtDeviceType_1, 256);
    goto L20;

  anon48_Then:
    assume {:partition} 1 != sdv_529;
    dtDeviceType_1 := BOR(dtDeviceType_1, 2);
    goto L20;

  anon46_Then:
    assume {:partition} 1 != sdv_536;
    call {:si_unique_call 1385} sdv_519 := ParStlCheckIfAtaDevice(Extension_27, atapiParams_5);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} 1 == sdv_519;
    dtDeviceType_1 := BOR(dtDeviceType_1, 1);
    goto L20;

  anon49_Then:
    assume {:partition} 1 != sdv_519;
    goto L83;

  L83:
    call {:si_unique_call 1386} sdv_534 := ParStlCheckIfDazzle(Extension_27);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} 1 == sdv_534;
    dtDeviceType_1 := BOR(dtDeviceType_1, 32768);
    goto L20;

  anon50_Then:
    assume {:partition} 1 != sdv_534;
    call {:si_unique_call 1387} sdv_524 := ParStlCheckIfFlash(Extension_27);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} 1 == sdv_524;
    dtDeviceType_1 := BOR(dtDeviceType_1, 32);
    goto L20;

  anon51_Then:
    assume {:partition} 1 != sdv_524;
    goto L20;

  anon45_Then:
    assume {:partition} 1 != sdv_533;
    goto L83;

  anon37_Then:
    goto L22;
}



procedure {:origName "ParStlGetImpactDeviceType"} ParStlGetImpactDeviceType(actual_Extension_28: int, actual_atapiParams_6: int, actual_nPreferredDeviceType_1: int) returns (Tmp_781: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlGetImpactDeviceType"} ParStlGetImpactDeviceType(actual_Extension_28: int, actual_atapiParams_6: int, actual_nPreferredDeviceType_1: int) returns (Tmp_781: int)
{
  var {:scalar} idtImpactDeviceType: int;
  var {:scalar} sdv_539: int;
  var {:scalar} dtDeviceType_2: int;
  var {:scalar} sdv_541: int;
  var {:scalar} sdv_542: int;
  var {:scalar} sdv_543: int;
  var {:pointer} Extension_28: int;
  var {:pointer} atapiParams_6: int;
  var {:scalar} nPreferredDeviceType_1: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;

  anon0:
    Extension_28 := actual_Extension_28;
    atapiParams_6 := actual_atapiParams_6;
    nPreferredDeviceType_1 := actual_nPreferredDeviceType_1;
    dtDeviceType_2 := 0;
    call {:si_unique_call 1388} vslice_dummy_var_258 := ParStlWriteReg(Extension_28, 14, 1);
    call {:si_unique_call 1389} vslice_dummy_var_257 := ParStlReadReg(Extension_28, 15);
    call {:si_unique_call 1390} idtImpactDeviceType := corral_nondet();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} idtImpactDeviceType != 1;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} idtImpactDeviceType != 2;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} idtImpactDeviceType != 3;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} idtImpactDeviceType != 4;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} idtImpactDeviceType != 5;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} idtImpactDeviceType != 6;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} idtImpactDeviceType != 7;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} idtImpactDeviceType != 8;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} idtImpactDeviceType != 9;
    goto L27;

  L27:
    Tmp_781 := BAND(dtDeviceType_2, nPreferredDeviceType_1);
    return;

  anon31_Then:
    assume {:partition} idtImpactDeviceType == 9;
    dtDeviceType_2 := BOR(dtDeviceType_2, 4096);
    goto L27;

  anon32_Then:
    assume {:partition} idtImpactDeviceType == 8;
    dtDeviceType_2 := BOR(dtDeviceType_2, 32);
    goto L27;

  anon33_Then:
    assume {:partition} idtImpactDeviceType == 7;
    dtDeviceType_2 := BOR(dtDeviceType_2, 2048);
    goto L27;

  anon34_Then:
    assume {:partition} idtImpactDeviceType == 6;
    dtDeviceType_2 := BOR(dtDeviceType_2, 128);
    goto L27;

  anon35_Then:
    assume {:partition} idtImpactDeviceType == 5;
    dtDeviceType_2 := BOR(dtDeviceType_2, 256);
    goto L27;

  anon36_Then:
    assume {:partition} idtImpactDeviceType == 4;
    dtDeviceType_2 := BOR(dtDeviceType_2, 16);
    goto L27;

  anon37_Then:
    assume {:partition} idtImpactDeviceType == 3;
    dtDeviceType_2 := BOR(dtDeviceType_2, 8);
    goto L27;

  anon38_Then:
    assume {:partition} idtImpactDeviceType == 2;
    dtDeviceType_2 := BOR(dtDeviceType_2, 1024);
    goto L27;

  anon39_Then:
    assume {:partition} idtImpactDeviceType == 1;
    call {:si_unique_call 1391} ParStlSet16BitOperation(Extension_28);
    call {:si_unique_call 1392} sdv_541 := ParStlCheckIfAtaAtapiDevice(Extension_28, atapiParams_6);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 1 == sdv_541;
    call {:si_unique_call 1393} sdv_543 := ParStlCheckIfAtapiDevice(Extension_28, atapiParams_6);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 1 == sdv_543;
    call {:si_unique_call 1394} sdv_539 := ParStlCheckIfImpactLS120(Extension_28, atapiParams_6);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} 1 == sdv_539;
    dtDeviceType_2 := BOR(dtDeviceType_2, 512);
    goto L27;

  anon29_Then:
    assume {:partition} 1 != sdv_539;
    dtDeviceType_2 := BOR(dtDeviceType_2, 2);
    goto L27;

  anon28_Then:
    assume {:partition} 1 != sdv_543;
    call {:si_unique_call 1395} sdv_542 := ParStlCheckIfAtaDevice(Extension_28, atapiParams_6);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} 1 == sdv_542;
    dtDeviceType_2 := BOR(dtDeviceType_2, 1);
    goto L27;

  anon30_Then:
    assume {:partition} 1 != sdv_542;
    goto L27;

  anon27_Then:
    assume {:partition} 1 != sdv_541;
    goto L27;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_259: int;

  anon0:
    call {:si_unique_call 1396} vslice_dummy_var_259 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ParStlCheckPersonalityForEppDevice"} ParStlCheckPersonalityForEppDevice(actual_Extension_29: int) returns (Tmp_785: int);
  free ensures {:va_keep} Tmp_785 == 1 || Tmp_785 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckPersonalityForEppDevice"} ParStlCheckPersonalityForEppDevice(actual_Extension_29: int) returns (Tmp_785: int)
{
  var {:scalar} bReturnValue_16: int;
  var {:scalar} sdv_545: int;
  var {:scalar} Tmp_787: int;
  var {:pointer} Extension_29: int;
  var vslice_dummy_var_260: int;

  anon0:
    Extension_29 := actual_Extension_29;
    bReturnValue_16 := 0;
    call {:si_unique_call 1397} vslice_dummy_var_260 := ParStlWriteReg(Extension_29, 14, 1);
    call {:si_unique_call 1398} sdv_545 := ParStlReadReg(Extension_29, 15);
    Tmp_787 := BAND(sdv_545, BOR(1, 2));
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 3 == Tmp_787;
    bReturnValue_16 := 1;
    goto L13;

  L13:
    Tmp_785 := bReturnValue_16;
    return;

  anon3_Then:
    assume {:partition} 3 != Tmp_787;
    goto L13;
}



procedure {:origName "ParStlAssertIdleState"} ParStlAssertIdleState(actual_Extension_30: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlAssertIdleState"} ParStlAssertIdleState(actual_Extension_30: int)
{
  var {:pointer} CurrentPort_5: int;
  var {:pointer} Extension_30: int;
  var vslice_dummy_var_261: int;

  anon0:
    call {:si_unique_call 1399} vslice_dummy_var_261 := __HAVOC_malloc(4);
    Extension_30 := actual_Extension_30;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc CurrentPort_5;
    return;
}



procedure {:origName "ParStlCheckIfImpactLS120"} ParStlCheckIfImpactLS120(actual_Extension_31: int, actual_atapiParams_7: int) returns (Tmp_790: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_790 == 0 || Tmp_790 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfImpactLS120"} ParStlCheckIfImpactLS120(actual_Extension_31: int, actual_atapiParams_7: int) returns (Tmp_790: int)
{
  var {:scalar} i_22: int;
  var {:scalar} bLs120NameFound: int;
  var {:scalar} bReturnValue_17: int;
  var {:scalar} nMemoryOnBoard: int;
  var {:pointer} chLs120Name: int;
  var {:scalar} Tmp_792: int;
  var {:pointer} pszAtapiName: int;
  var {:scalar} Tmp_793: int;
  var {:pointer} Extension_31: int;
  var {:pointer} atapiParams_7: int;

  anon0:
    Extension_31 := actual_Extension_31;
    atapiParams_7 := actual_atapiParams_7;
    call {:si_unique_call 1400} chLs120Name := __HAVOC_malloc(44);
    bReturnValue_17 := 0;
    bLs120NameFound := 1;
    chLs120Name := strConst__li2bpl32;
    assume {:nonnull} atapiParams_7 != 0;
    assume atapiParams_7 > 0;
    havoc pszAtapiName;
    i_22 := 0;
    goto L14;

  L14:
    call {:si_unique_call 1401} i_22, Tmp_792, Tmp_793 := ParStlCheckIfImpactLS120_loop_L14(i_22, chLs120Name, Tmp_792, pszAtapiName, Tmp_793);
    goto L14_last;

  L14_last:
    assume {:CounterLoop 10} {:Counter "i_22"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 10 > i_22;
    Tmp_793 := i_22;
    Tmp_792 := i_22;
    assume {:nonnull} chLs120Name != 0;
    assume chLs120Name > 0;
    assume {:nonnull} pszAtapiName != 0;
    assume pszAtapiName > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.INT4[pszAtapiName + Tmp_793 * 4] != Mem_T.INT4[chLs120Name + Tmp_792 * 4];
    bLs120NameFound := 0;
    goto L15;

  L15:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 1 != bLs120NameFound;
    goto L24;

  L24:
    Tmp_790 := bReturnValue_17;
    return;

  anon12_Then:
    assume {:partition} 1 == bLs120NameFound;
    call {:si_unique_call 1402} nMemoryOnBoard := ParStlGetMemorySize(Extension_31);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} BAND(nMemoryOnBoard, 32768) == 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} nMemoryOnBoard != 0;
    bReturnValue_17 := 1;
    goto L24;

  anon14_Then:
    assume {:partition} nMemoryOnBoard == 0;
    goto L24;

  anon13_Then:
    assume {:partition} BAND(nMemoryOnBoard, 32768) != 0;
    goto L24;

  anon15_Then:
    assume {:partition} Mem_T.INT4[pszAtapiName + Tmp_793 * 4] == Mem_T.INT4[chLs120Name + Tmp_792 * 4];
    i_22 := i_22 + 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} i_22 >= 10;
    goto L15;
}



procedure {:origName "ParStlCheckFlashPersonality"} ParStlCheckFlashPersonality(actual_Extension_32: int) returns (Tmp_794: int);
  free ensures {:va_keep} Tmp_794 == 1 || Tmp_794 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckFlashPersonality"} ParStlCheckFlashPersonality(actual_Extension_32: int) returns (Tmp_794: int)
{
  var {:scalar} bReturnValue_18: int;
  var {:scalar} Tmp_796: int;
  var {:scalar} sdv_547: int;
  var {:scalar} sdv_549: int;
  var {:pointer} Extension_32: int;
  var vslice_dummy_var_262: int;

  anon0:
    Extension_32 := actual_Extension_32;
    bReturnValue_18 := 0;
    call {:si_unique_call 1403} sdv_547 := ParStlReadReg(Extension_32, 11);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 199 == sdv_547;
    call {:si_unique_call 1404} vslice_dummy_var_262 := ParStlWriteReg(Extension_32, 14, 1);
    call {:si_unique_call 1405} sdv_549 := ParStlReadReg(Extension_32, 15);
    Tmp_796 := BAND(sdv_549, BOR(1, 2));
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 1 == Tmp_796;
    bReturnValue_18 := 1;
    goto L18;

  L18:
    Tmp_794 := bReturnValue_18;
    return;

  anon6_Then:
    assume {:partition} 1 != Tmp_796;
    goto L18;

  anon5_Then:
    assume {:partition} 199 != sdv_547;
    bReturnValue_18 := 1;
    goto L18;
}



procedure {:origName "ParStlWriteReg"} ParStlWriteReg(actual_Extension_33: int, actual_reg_2: int, actual_databyte_1: int) returns (Tmp_797: int);
  free ensures {:va_keep} Tmp_797 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlWriteReg"} ParStlWriteReg(actual_Extension_33: int, actual_reg_2: int, actual_databyte_1: int) returns (Tmp_797: int)
{
  var {:pointer} CurrentPort_6: int;
  var {:pointer} Extension_33: int;
  var {:scalar} reg_2: int;
  var {:scalar} databyte_1: int;

  anon0:
    Extension_33 := actual_Extension_33;
    reg_2 := actual_reg_2;
    databyte_1 := actual_databyte_1;
    assume {:nonnull} Extension_33 != 0;
    assume Extension_33 > 0;
    havoc CurrentPort_6;
    Tmp_797 := 0;
    return;
}



procedure {:origName "ParStlCheckIfStl"} ParStlCheckIfStl(actual_Extension_34: int, actual_ulDaisyIndex_2: int) returns (Tmp_801: int);
  free ensures {:va_keep} Tmp_801 == 1 || Tmp_801 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfStl"} ParStlCheckIfStl(actual_Extension_34: int, actual_ulDaisyIndex_2: int) returns (Tmp_801: int)
{
  var {:scalar} bStlNon1284: int;
  var {:scalar} sdv_551: int;
  var {:scalar} sdv_552: int;
  var {:pointer} Extension_34: int;
  var {:scalar} ulDaisyIndex_2: int;
  var boogieTmp: int;

  anon0:
    Extension_34 := actual_Extension_34;
    ulDaisyIndex_2 := actual_ulDaisyIndex_2;
    bStlNon1284 := 0;
    assume {:nonnull} Extension_34 != 0;
    assume Extension_34 > 0;
    call {:si_unique_call 1406} boogieTmp := corral_nondet();
    call {:si_unique_call 1407} bStlNon1284 := ParStlCheckIfNon1284_3Present(Extension_34);
    call {:si_unique_call 1408} sdv_551 := ParStlCheckIfStl1284_3(Extension_34, ulDaisyIndex_2, bStlNon1284);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 1 == sdv_551;
    assume {:nonnull} Extension_34 != 0;
    assume Extension_34 > 0;
    call {:si_unique_call 1409} boogieTmp := corral_nondet();
    Tmp_801 := 1;
    goto L1;

  L1:
    return;

  anon7_Then:
    assume {:partition} 1 != sdv_551;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 1 == bStlNon1284;
    call {:si_unique_call 1410} sdv_552 := ParStlCheckIfStlProductId(Extension_34, ulDaisyIndex_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 1 == sdv_552;
    assume {:nonnull} Extension_34 != 0;
    assume Extension_34 > 0;
    call {:si_unique_call 1411} boogieTmp := corral_nondet();
    Tmp_801 := 1;
    goto L1;

  anon9_Then:
    assume {:partition} 1 != sdv_552;
    goto L17;

  L17:
    Tmp_801 := 0;
    goto L1;

  anon8_Then:
    assume {:partition} 1 != bStlNon1284;
    goto L17;
}



procedure {:origName "ParStlIsMMCEnginePresent"} ParStlIsMMCEnginePresent(actual_Extension_35: int) returns (Tmp_803: int);
  free ensures {:va_keep} Tmp_803 == 0 || Tmp_803 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlIsMMCEnginePresent"} ParStlIsMMCEnginePresent(actual_Extension_35: int) returns (Tmp_803: int)
{
  var {:scalar} sdv_554: int;
  var {:scalar} bReturnValue_19: int;
  var {:scalar} sdv_555: int;
  var {:scalar} sdv_560: int;
  var {:scalar} sdv_561: int;
  var {:scalar} sdv_562: int;
  var {:pointer} Extension_35: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;

  anon0:
    Extension_35 := actual_Extension_35;
    bReturnValue_19 := 0;
    call {:si_unique_call 1412} sdv_555 := ParStlReadIoPort(Extension_35, 4);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_555 == 20;
    call {:si_unique_call 1413} sdv_561 := ParStlReadIoPort(Extension_35, 5);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_561 == 235;
    goto L17;

  L17:
    Tmp_803 := bReturnValue_19;
    return;

  anon12_Then:
    assume {:partition} sdv_561 != 235;
    goto L9;

  L9:
    call {:si_unique_call 1414} vslice_dummy_var_263 := ParStlWriteReg(Extension_35, 30, 6);
    call {:si_unique_call 1415} vslice_dummy_var_264 := ParStlWriteReg(Extension_35, 31, 0);
    call {:si_unique_call 1416} sdv_562 := ParStlReadReg(Extension_35, 31);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_562 == 0;
    call {:si_unique_call 1417} vslice_dummy_var_265 := ParStlWriteReg(Extension_35, 30, 0);
    call {:si_unique_call 1418} vslice_dummy_var_266 := ParStlWriteReg(Extension_35, 31, 161);
    call {:si_unique_call 1419} vslice_dummy_var_267 := ParStlWriteReg(Extension_35, 30, 6);
    call {:si_unique_call 1420} vslice_dummy_var_268 := ParStlWriteReg(Extension_35, 31, 0);
    call {:si_unique_call 1421} vslice_dummy_var_269 := ParStlWriteReg(Extension_35, 30, 0);
    call {:si_unique_call 1422} sdv_560 := ParStlReadReg(Extension_35, 31);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 161 == sdv_560;
    call {:si_unique_call 1423} vslice_dummy_var_270 := ParStlWriteReg(Extension_35, 30, 6);
    call {:si_unique_call 1424} sdv_554 := ParStlReadReg(Extension_35, 31);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_554 == 0;
    bReturnValue_19 := 1;
    goto L17;

  anon15_Then:
    assume {:partition} sdv_554 != 0;
    goto L17;

  anon14_Then:
    assume {:partition} 161 != sdv_560;
    goto L17;

  anon13_Then:
    assume {:partition} sdv_562 != 0;
    goto L17;

  anon11_Then:
    assume {:partition} sdv_555 != 20;
    goto L9;
}



procedure {:origName "ParStlCheckIfFlash"} ParStlCheckIfFlash(actual_Extension_36: int) returns (Tmp_805: int);
  free ensures {:va_keep} Tmp_805 == 0 || Tmp_805 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfFlash"} ParStlCheckIfFlash(actual_Extension_36: int) returns (Tmp_805: int)
{
  var {:scalar} bReturnValue_20: int;
  var {:scalar} sdv_566: int;
  var {:scalar} sdv_567: int;
  var {:scalar} sdv_569: int;
  var {:pointer} Extension_36: int;

  anon0:
    Extension_36 := actual_Extension_36;
    bReturnValue_20 := 0;
    call {:si_unique_call 1425} sdv_566 := ParStlReadReg(Extension_36, 11);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 199 == sdv_566;
    goto L12;

  L12:
    call {:si_unique_call 1426} bReturnValue_20 := ParStlCheckFlashPersonality(Extension_36);
    goto L16;

  L16:
    Tmp_805 := bReturnValue_20;
    return;

  anon7_Then:
    assume {:partition} 199 != sdv_566;
    call {:si_unique_call 1427} sdv_567 := ParStlReadReg(Extension_36, 11);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 200 != sdv_567;
    call {:si_unique_call 1428} sdv_569 := ParStlReadReg(Extension_36, 11);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 198 != sdv_569;
    goto L16;

  anon9_Then:
    assume {:partition} 198 == sdv_569;
    goto L12;

  anon8_Then:
    assume {:partition} 200 == sdv_567;
    goto L12;
}



procedure {:origName "ParStlCheckIfEppDevice"} ParStlCheckIfEppDevice(actual_Extension_37: int) returns (Tmp_807: int);
  free ensures {:va_keep} Tmp_807 == 0 || Tmp_807 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfEppDevice"} ParStlCheckIfEppDevice(actual_Extension_37: int) returns (Tmp_807: int)
{
  var {:scalar} bReturnValue_21: int;
  var {:scalar} sdv_570: int;
  var {:pointer} Extension_37: int;

  anon0:
    Extension_37 := actual_Extension_37;
    bReturnValue_21 := 0;
    call {:si_unique_call 1429} sdv_570 := ParStlReadReg(Extension_37, 11);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 199 != sdv_570;
    goto L14;

  L14:
    Tmp_807 := bReturnValue_21;
    return;

  anon3_Then:
    assume {:partition} 199 == sdv_570;
    call {:si_unique_call 1430} bReturnValue_21 := ParStlCheckPersonalityForEppDevice(Extension_37);
    goto L14;
}



procedure {:origName "ParStlCheckCardInsertionStatus"} ParStlCheckCardInsertionStatus(actual_Extension_38: int) returns (Tmp_809: int);
  free ensures {:va_keep} Tmp_809 == 0 || Tmp_809 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckCardInsertionStatus"} ParStlCheckCardInsertionStatus(actual_Extension_38: int) returns (Tmp_809: int)
{
  var {:scalar} bReturnValue_22: int;
  var {:scalar} sdv_572: int;
  var {:scalar} byPowerRegData: int;
  var {:scalar} sdv_574: int;
  var {:pointer} Extension_38: int;
  var vslice_dummy_var_271: int;

  anon0:
    Extension_38 := actual_Extension_38;
    bReturnValue_22 := 0;
    call {:si_unique_call 1431} sdv_572 := ParStlReadReg(Extension_38, 11);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 199 != sdv_572;
    goto L21;

  L21:
    Tmp_809 := bReturnValue_22;
    return;

  anon5_Then:
    assume {:partition} 199 == sdv_572;
    call {:si_unique_call 1432} vslice_dummy_var_271 := ParStlWriteReg(Extension_38, 14, 15);
    call {:si_unique_call 1433} sdv_574 := ParStlReadReg(Extension_38, 15);
    byPowerRegData := sdv_574;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} BAND(byPowerRegData, 2) != 0;
    goto L21;

  anon6_Then:
    assume {:partition} BAND(byPowerRegData, 2) == 0;
    bReturnValue_22 := 1;
    goto L21;
}



procedure {:origName "ParStlCheckAvisionScannerPresence"} ParStlCheckAvisionScannerPresence(actual_Extension_39: int) returns (Tmp_811: int);
  free ensures {:va_keep} Tmp_811 == 0 || Tmp_811 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckAvisionScannerPresence"} ParStlCheckAvisionScannerPresence(actual_Extension_39: int) returns (Tmp_811: int)
{
  var {:scalar} bReturnValue_23: int;
  var {:scalar} sdv_576: int;
  var {:scalar} sdv_577: int;
  var {:scalar} sdv_585: int;
  var {:scalar} data: int;
  var {:scalar} sdv_586: int;
  var {:scalar} sdv_587: int;
  var {:pointer} Extension_39: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;

  anon0:
    Extension_39 := actual_Extension_39;
    bReturnValue_23 := 0;
    call {:si_unique_call 1434} sdv_577 := ParStlReadReg(Extension_39, 25);
    data := sdv_577;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BAND(data, 128) == 0;
    goto L27;

  L27:
    Tmp_811 := bReturnValue_23;
    return;

  anon11_Then:
    assume {:partition} BAND(data, 128) != 0;
    call {:si_unique_call 1435} vslice_dummy_var_272 := ParStlWriteReg(Extension_39, 26, 8);
    call {:si_unique_call 1436} vslice_dummy_var_273 := ParStlWriteReg(Extension_39, 26, 8);
    call {:si_unique_call 1437} sdv_585 := ParStlReadReg(Extension_39, 25);
    data := sdv_585;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(data, 128) != 0;
    goto L27;

  anon12_Then:
    assume {:partition} BAND(data, 128) == 0;
    call {:si_unique_call 1438} vslice_dummy_var_274 := ParStlWriteReg(Extension_39, 26, 0);
    call {:si_unique_call 1439} vslice_dummy_var_275 := ParStlWriteReg(Extension_39, 26, 0);
    call {:si_unique_call 1440} sdv_586 := ParStlReadReg(Extension_39, 25);
    data := sdv_586;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} BAND(data, 128) != 0;
    call {:si_unique_call 1441} vslice_dummy_var_276 := ParStlWriteReg(Extension_39, 26, 2);
    call {:si_unique_call 1442} vslice_dummy_var_277 := ParStlWriteReg(Extension_39, 26, 2);
    call {:si_unique_call 1443} sdv_587 := ParStlReadReg(Extension_39, 25);
    data := sdv_587;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} BAND(data, 128) == 0;
    call {:si_unique_call 1444} vslice_dummy_var_278 := ParStlWriteReg(Extension_39, 26, 0);
    call {:si_unique_call 1445} vslice_dummy_var_279 := ParStlWriteReg(Extension_39, 26, 0);
    call {:si_unique_call 1446} sdv_576 := ParStlReadReg(Extension_39, 25);
    data := sdv_576;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(data, 128) != 0;
    bReturnValue_23 := 1;
    goto L27;

  anon15_Then:
    assume {:partition} BAND(data, 128) == 0;
    goto L27;

  anon14_Then:
    assume {:partition} BAND(data, 128) != 0;
    goto L27;

  anon13_Then:
    assume {:partition} BAND(data, 128) == 0;
    goto L27;
}



procedure {:origName "ParStlWaitForDrq"} ParStlWaitForDrq(actual_Extension_40: int) returns (Tmp_813: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_813 == 1 || Tmp_813 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlWaitForDrq"} ParStlWaitForDrq(actual_Extension_40: int) returns (Tmp_813: int)
{
  var {:scalar} nMaxRetrials_2: int;
  var {:scalar} bRetVal_2: int;
  var {:scalar} sdv_588: int;
  var {:scalar} Tmp_815: int;
  var {:pointer} Extension_40: int;

  anon0:
    Extension_40 := actual_Extension_40;
    nMaxRetrials_2 := 5000;
    bRetVal_2 := 0;
    goto L7;

  L7:
    call {:si_unique_call 1447} nMaxRetrials_2, sdv_588, Tmp_815 := ParStlWaitForDrq_loop_L7(nMaxRetrials_2, sdv_588, Tmp_815, Extension_40);
    goto L7_last;

  L7_last:
    Tmp_815 := nMaxRetrials_2;
    nMaxRetrials_2 := nMaxRetrials_2 - 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_815 != 0;
    call {:si_unique_call 1448} sdv_588 := ParStlReadIoPort(Extension_40, 7);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(sdv_588, 8) != 0;
    bRetVal_2 := 1;
    goto L8;

  L8:
    Tmp_813 := bRetVal_2;
    return;

  anon5_Then:
    assume {:partition} BAND(sdv_588, 8) == 0;
    call {:si_unique_call 1449} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_815 == 0;
    goto L8;
}



procedure {:origName "ParStlQueryStlDeviceId"} ParStlQueryStlDeviceId(actual_Extension_41: int, actual_CallerDeviceIdBuffer: int, actual_CallerBufferSize: int, actual_DeviceIdSize_4: int, actual_bReturnRawString_2: int) returns (Tmp_816: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlQueryStlDeviceId"} ParStlQueryStlDeviceId(actual_Extension_41: int, actual_CallerDeviceIdBuffer: int, actual_CallerBufferSize: int, actual_DeviceIdSize_4: int, actual_bReturnRawString_2: int) returns (Tmp_816: int)
{
  var {:scalar} deviceIdBufferSize: int;
  var {:scalar} Tmp_818: int;
  var {:scalar} maxValidDevId: int;
  var {:scalar} Tmp_820: int;
  var {:scalar} Status_6: int;
  var {:scalar} minValidDevId: int;
  var {:scalar} Tmp_823: int;
  var {:scalar} bytesToRead_1: int;
  var {:scalar} Tmp_825: int;
  var {:scalar} deviceIdSize: int;
  var {:pointer} Controller_4: int;
  var {:scalar} sdv_591: int;
  var {:pointer} idSizeBuffer: int;
  var {:dopa} {:scalar} bytesRead: int;
  var {:scalar} Tmp_826: int;
  var {:pointer} readPtr: int;
  var {:scalar} sdv_594: int;
  var {:pointer} sdv_595: int;
  var {:scalar} Tmp_827: int;
  var {:pointer} sdv_596: int;
  var {:pointer} deviceIdBuffer: int;
  var {:pointer} Extension_41: int;
  var {:pointer} CallerDeviceIdBuffer: int;
  var {:scalar} CallerBufferSize: int;
  var {:pointer} DeviceIdSize_4: int;
  var {:scalar} bReturnRawString_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;

  anon0:
    call {:si_unique_call 1450} idSizeBuffer := __HAVOC_malloc(4);
    call {:si_unique_call 1451} bytesRead := __HAVOC_malloc(4);
    Extension_41 := actual_Extension_41;
    CallerDeviceIdBuffer := actual_CallerDeviceIdBuffer;
    CallerBufferSize := actual_CallerBufferSize;
    DeviceIdSize_4 := actual_DeviceIdSize_4;
    bReturnRawString_2 := actual_bReturnRawString_2;
    call {:si_unique_call 1452} vslice_dummy_var_280 := __HAVOC_malloc(20);
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    call {:si_unique_call 1453} boogieTmp := __HAVOC_malloc(8);
    assume {:nonnull} Extension_41 != 0;
    assume Extension_41 > 0;
    havoc Controller_4;
    assume {:nonnull} bytesRead != 0;
    assume bytesRead > 0;
    Mem_T.INT4[bytesRead] := 0;
    assume {:nonnull} DeviceIdSize_4 != 0;
    assume DeviceIdSize_4 > 0;
    Mem_T.INT4[DeviceIdSize_4] := 0;
    call {:si_unique_call 1454} ParStlAssertIdleState(Extension_41);
    assume {:nonnull} Extension_41 != 0;
    assume Extension_41 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} Extension_41 != 0;
    assume Extension_41 > 0;
    havoc Tmp_820;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} Extension_41 != 0;
    assume Extension_41 > 0;
    havoc Tmp_818;
    goto L19;

  L19:
    call {:si_unique_call 1455} Status_6 := ParEnterNibbleMode(Extension_41, 1);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Status_6 >= 0;
    bytesToRead_1 := 2;
    call {:si_unique_call 1456} Status_6 := ParNibbleModeRead(Extension_41, idSizeBuffer, bytesToRead_1, bytesRead);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Status_6 < 0;
    goto L47;

  L47:
    call {:si_unique_call 1457} ParStlAssertIdleState(Extension_41);
    call {:si_unique_call 1458} deviceIdBuffer := ParBuildStlDeviceId(Extension_41, bReturnRawString_2);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} deviceIdBuffer != 0;
    deviceIdSize := sdv_594;
    assume {:nonnull} DeviceIdSize_4 != 0;
    assume DeviceIdSize_4 > 0;
    Mem_T.INT4[DeviceIdSize_4] := deviceIdSize;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} CallerDeviceIdBuffer != 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} CallerBufferSize >= deviceIdSize + 1;
    call {:si_unique_call 1459} sdv_RtlZeroMemory(0, CallerBufferSize);
    Tmp_826 := deviceIdSize;
    call {:si_unique_call 1460} sdv_RtlCopyMemory(0, 0, Tmp_826);
    call {:si_unique_call 1461} sdv_ExFreePool(0);
    Tmp_816 := CallerDeviceIdBuffer;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon49_Then:
    assume {:partition} deviceIdSize + 1 > CallerBufferSize;
    goto L80;

  L80:
    Tmp_816 := deviceIdBuffer;
    goto L1;

  anon58_Then:
    assume {:partition} CallerDeviceIdBuffer == 0;
    goto L80;

  anon48_Then:
    assume {:partition} deviceIdBuffer == 0;
    Tmp_816 := 0;
    goto L1;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} 0 <= Status_6;
    assume {:nonnull} bytesRead != 0;
    assume bytesRead > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.INT4[bytesRead] != bytesToRead_1;
    goto L47;

  anon46_Then:
    assume {:partition} Mem_T.INT4[bytesRead] == bytesToRead_1;
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    havoc deviceIdSize;
    minValidDevId := 14;
    maxValidDevId := 2048;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} minValidDevId > deviceIdSize;
    goto L47;

  anon59_Then:
    assume {:partition} deviceIdSize >= minValidDevId;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} deviceIdSize <= maxValidDevId;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} bReturnRawString_2 != 0;
    assume {:nonnull} DeviceIdSize_4 != 0;
    assume DeviceIdSize_4 > 0;
    Mem_T.INT4[DeviceIdSize_4] := deviceIdSize;
    deviceIdBufferSize := deviceIdSize + 1;
    goto L97;

  L97:
    Tmp_827 := deviceIdBufferSize;
    call {:si_unique_call 1462} sdv_595 := ExAllocatePoolWithTag(1, Tmp_827, -797810352);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    deviceIdBuffer := sdv_595;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} deviceIdBuffer != 0;
    Tmp_825 := deviceIdBufferSize;
    call {:si_unique_call 1463} sdv_RtlZeroMemory(0, Tmp_825);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} bReturnRawString_2 != 0;
    assume {:nonnull} deviceIdBuffer != 0;
    assume deviceIdBuffer > 0;
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    havoc vslice_dummy_var_148;
    Mem_T.INT4[deviceIdBuffer] := vslice_dummy_var_148;
    assume {:nonnull} deviceIdBuffer != 0;
    assume deviceIdBuffer > 0;
    assume {:nonnull} idSizeBuffer != 0;
    assume idSizeBuffer > 0;
    havoc vslice_dummy_var_149;
    Mem_T.INT4[deviceIdBuffer] := vslice_dummy_var_149;
    readPtr := deviceIdBuffer;
    goto L113;

  L113:
    bytesToRead_1 := deviceIdSize - 2;
    call {:si_unique_call 1464} Status_6 := ParNibbleModeRead(Extension_41, readPtr, bytesToRead_1, bytesRead);
    call {:si_unique_call 1465} ParTerminateNibbleMode(Extension_41);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Status_6 >= 0;
    assume {:nonnull} bytesRead != 0;
    assume bytesRead > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} 1 <= Mem_T.INT4[bytesRead];
    goto anon62_Then, anon62_Else;

  anon62_Else:
    sdv_596 := 0;
    goto L129;

  L129:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_596 != 0;
    deviceIdSize := sdv_591;
    assume {:nonnull} DeviceIdSize_4 != 0;
    assume DeviceIdSize_4 > 0;
    Mem_T.INT4[DeviceIdSize_4] := deviceIdSize;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} CallerDeviceIdBuffer != 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} CallerBufferSize >= deviceIdSize + 1;
    call {:si_unique_call 1466} sdv_RtlZeroMemory(0, CallerBufferSize);
    Tmp_823 := deviceIdSize;
    call {:si_unique_call 1467} sdv_RtlCopyMemory(0, 0, Tmp_823);
    call {:si_unique_call 1468} sdv_ExFreePool(0);
    Tmp_816 := CallerDeviceIdBuffer;
    goto L1;

  anon55_Then:
    assume {:partition} deviceIdSize + 1 > CallerBufferSize;
    goto L139;

  L139:
    Tmp_816 := deviceIdBuffer;
    goto L1;

  anon63_Then:
    assume {:partition} CallerDeviceIdBuffer == 0;
    goto L139;

  anon54_Then:
    assume {:partition} sdv_596 == 0;
    call {:si_unique_call 1469} sdv_ExFreePool(0);
    goto L47;

  anon62_Then:
    call {:si_unique_call 1470} sdv_596 := __HAVOC_malloc(1);
    goto L129;

  anon53_Then:
    assume {:partition} Mem_T.INT4[bytesRead] < 1;
    goto L122;

  L122:
    call {:si_unique_call 1471} sdv_ExFreePool(0);
    goto L47;

  anon52_Then:
    assume {:partition} 0 > Status_6;
    goto L122;

  anon51_Then:
    assume {:partition} bReturnRawString_2 == 0;
    readPtr := deviceIdBuffer;
    goto L113;

  anon61_Then:
    assume {:partition} deviceIdBuffer == 0;
    goto L47;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:partition} bReturnRawString_2 == 0;
    assume {:nonnull} DeviceIdSize_4 != 0;
    assume DeviceIdSize_4 > 0;
    Mem_T.INT4[DeviceIdSize_4] := deviceIdSize - 2;
    deviceIdBufferSize := deviceIdSize - 2 + 1;
    goto L97;

  anon47_Then:
    assume {:partition} maxValidDevId < deviceIdSize;
    goto L47;

  anon44_Then:
    assume {:partition} 0 > Status_6;
    call {:si_unique_call 1472} ParTerminateNibbleMode(Extension_41);
    goto L47;

  anon56_Then:
    goto L19;

  anon43_Then:
    goto L19;
}



procedure {:origName "ParStlGetImpactSDeviceType"} ParStlGetImpactSDeviceType(actual_Extension_42: int, actual_atapiParams_8: int, actual_nPreferredDeviceType_2: int) returns (Tmp_828: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlGetImpactSDeviceType"} ParStlGetImpactSDeviceType(actual_Extension_42: int, actual_atapiParams_8: int, actual_nPreferredDeviceType_2: int) returns (Tmp_828: int)
{
  var {:scalar} idtImpactDeviceType_1: int;
  var {:scalar} sdv_598: int;
  var {:scalar} dtDeviceType_3: int;
  var {:scalar} sdv_601: int;
  var {:scalar} sdv_602: int;
  var {:scalar} idtImpactSDeviceType: int;
  var {:scalar} sdv_603: int;
  var {:pointer} Extension_42: int;
  var {:pointer} atapiParams_8: int;
  var {:scalar} nPreferredDeviceType_2: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;

  anon0:
    Extension_42 := actual_Extension_42;
    atapiParams_8 := actual_atapiParams_8;
    nPreferredDeviceType_2 := actual_nPreferredDeviceType_2;
    dtDeviceType_3 := 0;
    call {:si_unique_call 1473} vslice_dummy_var_283 := ParStlWriteReg(Extension_42, 14, 1);
    call {:si_unique_call 1474} vslice_dummy_var_281 := ParStlReadReg(Extension_42, 15);
    call {:si_unique_call 1475} idtImpactDeviceType_1 := corral_nondet();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} idtImpactDeviceType_1 != 1;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} idtImpactDeviceType_1 != 2;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} idtImpactDeviceType_1 != 3;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} idtImpactDeviceType_1 != 4;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} idtImpactDeviceType_1 != 5;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} idtImpactDeviceType_1 != 6;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} idtImpactDeviceType_1 != 7;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} idtImpactDeviceType_1 != 8;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} idtImpactDeviceType_1 != 9;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} idtImpactDeviceType_1 != 10;
    goto L37;

  L37:
    Tmp_828 := BAND(dtDeviceType_3, nPreferredDeviceType_2);
    return;

  anon30_Then:
    assume {:partition} idtImpactDeviceType_1 == 10;
    call {:si_unique_call 1476} vslice_dummy_var_282 := ParStlWriteReg(Extension_42, 14, 41);
    call {:si_unique_call 1477} sdv_601 := ParStlReadReg(Extension_42, 15);
    idtImpactSDeviceType := sdv_601;
    dtDeviceType_3 := -1073741824;
    dtDeviceType_3 := BOR(dtDeviceType_3, idtImpactSDeviceType);
    goto L37;

  anon31_Then:
    assume {:partition} idtImpactDeviceType_1 == 9;
    dtDeviceType_3 := BOR(dtDeviceType_3, 4096);
    goto L37;

  anon32_Then:
    assume {:partition} idtImpactDeviceType_1 == 8;
    dtDeviceType_3 := BOR(dtDeviceType_3, 32);
    goto L37;

  anon33_Then:
    assume {:partition} idtImpactDeviceType_1 == 7;
    dtDeviceType_3 := BOR(dtDeviceType_3, 2048);
    goto L37;

  anon34_Then:
    assume {:partition} idtImpactDeviceType_1 == 6;
    dtDeviceType_3 := BOR(dtDeviceType_3, 128);
    goto L37;

  anon35_Then:
    assume {:partition} idtImpactDeviceType_1 == 5;
    dtDeviceType_3 := BOR(dtDeviceType_3, 256);
    goto L37;

  anon36_Then:
    assume {:partition} idtImpactDeviceType_1 == 4;
    dtDeviceType_3 := BOR(dtDeviceType_3, 16);
    goto L37;

  anon37_Then:
    assume {:partition} idtImpactDeviceType_1 == 3;
    dtDeviceType_3 := BOR(dtDeviceType_3, 8);
    goto L37;

  anon38_Then:
    assume {:partition} idtImpactDeviceType_1 == 2;
    dtDeviceType_3 := BOR(dtDeviceType_3, 1024);
    goto L37;

  anon39_Then:
    assume {:partition} idtImpactDeviceType_1 == 1;
    call {:si_unique_call 1478} ParStlSet16BitOperation(Extension_42);
    call {:si_unique_call 1479} sdv_602 := ParStlCheckIfAtaAtapiDevice(Extension_42, atapiParams_8);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 1 == sdv_602;
    call {:si_unique_call 1480} sdv_598 := ParStlCheckIfAtapiDevice(Extension_42, atapiParams_8);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 1 == sdv_598;
    dtDeviceType_3 := BOR(dtDeviceType_3, 2);
    goto L37;

  anon28_Then:
    assume {:partition} 1 != sdv_598;
    call {:si_unique_call 1481} sdv_603 := ParStlCheckIfAtaDevice(Extension_42, atapiParams_8);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} 1 == sdv_603;
    dtDeviceType_3 := BOR(dtDeviceType_3, 1);
    goto L37;

  anon29_Then:
    assume {:partition} 1 != sdv_603;
    goto L37;

  anon27_Then:
    assume {:partition} 1 != sdv_602;
    goto L37;
}



procedure {:origName "ParStlReadIoPort"} ParStlReadIoPort(actual_Extension_43: int, actual_reg_3: int) returns (Tmp_830: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlReadIoPort"} ParStlReadIoPort(actual_Extension_43: int, actual_reg_3: int) returns (Tmp_830: int)
{
  var {:pointer} Extension_43: int;
  var {:scalar} reg_3: int;

  anon0:
    Extension_43 := actual_Extension_43;
    reg_3 := actual_reg_3;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} reg_3 != 8;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} reg_3 == 9;
    reg_3 := 23;
    goto L8;

  L8:
    call {:si_unique_call 1482} Tmp_830 := ParStlReadReg(Extension_43, reg_3);
    return;

  anon6_Then:
    assume {:partition} reg_3 != 9;
    reg_3 := BOR(reg_3, BOR(8, 16));
    goto L8;

  anon5_Then:
    assume {:partition} reg_3 == 8;
    reg_3 := 22;
    goto L8;
}



procedure {:origName "ParStlEPPWrite"} ParStlEPPWrite(actual_Extension_44: int, actual_value_3: int) returns (Tmp_832: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlEPPWrite"} ParStlEPPWrite(actual_Extension_44: int, actual_value_3: int) returns (Tmp_832: int)
{
  var {:scalar} sdv_605: int;
  var {:scalar} timeout_2: int;
  var {:scalar} Tmp_834: int;
  var {:scalar} statusData_1: int;
  var {:scalar} idx_4: int;
  var {:scalar} Tmp_836: int;
  var {:pointer} Extension_44: int;
  var {:scalar} value_3: int;
  var vslice_dummy_var_284: int;

  anon0:
    Extension_44 := actual_Extension_44;
    value_3 := actual_value_3;
    statusData_1 := 0;
    timeout_2 := 1;
    idx_4 := 0;
    goto L9;

  L9:
    call {:si_unique_call 1483} sdv_605, statusData_1, idx_4 := ParStlEPPWrite_loop_L9(sdv_605, statusData_1, idx_4, Extension_44);
    goto L9_last;

  L9_last:
    assume {:CounterLoop 10} {:Counter "idx_4"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 10 > idx_4;
    call {:si_unique_call 1484} sdv_605 := ParStlReadReg(Extension_44, 25);
    statusData_1 := sdv_605;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(statusData_1, 32) != 0;
    idx_4 := idx_4 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} BAND(statusData_1, 32) == 0;
    timeout_2 := 0;
    goto L10;

  L10:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} timeout_2 == 1;
    call {:si_unique_call 1485} Tmp_836 := corral_nondet();
    Tmp_832 := BOR(Tmp_836, 256);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} timeout_2 != 1;
    Tmp_834 := value_3;
    call {:si_unique_call 1486} vslice_dummy_var_284 := ParStlWriteReg(Extension_44, 28, Tmp_834);
    call {:si_unique_call 1487} Tmp_832 := corral_nondet();
    goto L1;

  anon7_Then:
    assume {:partition} idx_4 >= 10;
    goto L10;
}



procedure {:origName "ParStlSelectAdapterSocket"} ParStlSelectAdapterSocket(actual_Extension_45: int, actual_nSocketNumber: int) returns (Tmp_837: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_837 == 0 || Tmp_837 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlSelectAdapterSocket"} ParStlSelectAdapterSocket(actual_Extension_45: int, actual_nSocketNumber: int) returns (Tmp_837: int)
{
  var {:scalar} Tmp_838: int;
  var {:scalar} bReturnValue_24: int;
  var {:scalar} bySCRControlReg_1: int;
  var {:scalar} sdv_611: int;
  var {:scalar} Tmp_839: int;
  var {:scalar} Tmp_840: int;
  var {:scalar} sdv_613: int;
  var {:scalar} byISAControlReg: int;
  var {:pointer} Extension_45: int;
  var {:scalar} nSocketNumber: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;

  anon0:
    Extension_45 := actual_Extension_45;
    nSocketNumber := actual_nSocketNumber;
    bReturnValue_24 := 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} nSocketNumber != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} nSocketNumber != 1;
    goto L13;

  L13:
    Tmp_837 := bReturnValue_24;
    return;

  anon9_Then:
    assume {:partition} nSocketNumber == 1;
    goto L8;

  L8:
    call {:si_unique_call 1488} vslice_dummy_var_285 := ParStlWriteReg(Extension_45, 14, 12);
    call {:si_unique_call 1489} sdv_611 := ParStlReadReg(Extension_45, 15);
    bySCRControlReg_1 := sdv_611;
    call {:si_unique_call 1490} vslice_dummy_var_288 := ParStlWriteReg(Extension_45, 14, 13);
    call {:si_unique_call 1491} sdv_613 := ParStlReadReg(Extension_45, 15);
    byISAControlReg := sdv_613;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 1 == nSocketNumber;
    bySCRControlReg_1 := BOR(bySCRControlReg_1, 1);
    bySCRControlReg_1 := BOR(bySCRControlReg_1, 32);
    byISAControlReg := BAND(byISAControlReg, BNOT(32));
    goto L30;

  L30:
    call {:si_unique_call 1492} vslice_dummy_var_286 := ParStlWriteReg(Extension_45, 14, 13);
    Tmp_838 := byISAControlReg;
    call {:si_unique_call 1493} vslice_dummy_var_289 := ParStlWriteReg(Extension_45, 15, Tmp_838);
    call {:si_unique_call 1494} vslice_dummy_var_287 := ParStlWriteReg(Extension_45, 14, 12);
    Tmp_839 := bySCRControlReg_1;
    call {:si_unique_call 1495} vslice_dummy_var_290 := ParStlWriteReg(Extension_45, 15, Tmp_839);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 1 == nSocketNumber;
    call {:si_unique_call 1496} ParStlWaitForMicroSeconds(1000);
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(32));
    goto L50;

  L50:
    Tmp_840 := bySCRControlReg_1;
    call {:si_unique_call 1497} vslice_dummy_var_291 := ParStlWriteReg(Extension_45, 15, Tmp_840);
    bReturnValue_24 := 1;
    goto L13;

  anon10_Then:
    assume {:partition} 1 != nSocketNumber;
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(16));
    goto L50;

  anon12_Then:
    assume {:partition} 1 != nSocketNumber;
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(1));
    bySCRControlReg_1 := BAND(bySCRControlReg_1, BNOT(16));
    goto L30;

  anon11_Then:
    assume {:partition} nSocketNumber == 0;
    goto L8;
}



procedure {:origName "ParStlCheckIfAtapiDevice"} ParStlCheckIfAtapiDevice(actual_Extension_46: int, actual_atapiParams_9: int) returns (Tmp_842: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_842 == 1 || Tmp_842 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfAtapiDevice"} ParStlCheckIfAtapiDevice(actual_Extension_46: int, actual_atapiParams_9: int) returns (Tmp_842: int)
{
  var {:scalar} bReturnValue_25: int;
  var {:pointer} Extension_46: int;
  var {:pointer} atapiParams_9: int;

  anon0:
    Extension_46 := actual_Extension_46;
    atapiParams_9 := actual_atapiParams_9;
    bReturnValue_25 := 0;
    call {:si_unique_call 1498} bReturnValue_25 := ParStlAtapiInitialize(Extension_46, atapiParams_9);
    Tmp_842 := bReturnValue_25;
    return;
}



procedure {:origName "ParStlCheckIfAtaAtapiDevice"} ParStlCheckIfAtaAtapiDevice(actual_Extension_47: int, actual_atapiParams_10: int) returns (Tmp_844: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_844 == 0 || Tmp_844 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParStlCheckIfAtaAtapiDevice"} ParStlCheckIfAtaAtapiDevice(actual_Extension_47: int, actual_atapiParams_10: int) returns (Tmp_844: int)
{
  var {:scalar} bReturnValue_26: int;
  var {:scalar} sdv_617: int;
  var {:scalar} sdv_618: int;
  var {:pointer} Extension_47: int;
  var {:pointer} atapiParams_10: int;

  anon0:
    Extension_47 := actual_Extension_47;
    atapiParams_10 := actual_atapiParams_10;
    bReturnValue_26 := 0;
    call {:si_unique_call 1499} sdv_617 := ParStlCheckCardInsertionStatus(Extension_47);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 1 == sdv_617;
    goto L13;

  L13:
    Tmp_844 := bReturnValue_26;
    return;

  anon5_Then:
    assume {:partition} 1 != sdv_617;
    call {:si_unique_call 1500} sdv_618 := ParStlCheckDrivePresent(Extension_47, atapiParams_10);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_618 != 0;
    bReturnValue_26 := 1;
    goto L13;

  anon6_Then:
    assume {:partition} sdv_618 == 0;
    goto L13;
}



procedure {:origName "ParSetFwdAddress"} ParSetFwdAddress(actual_Pdx_14: int) returns (Tmp_846: int);
  free ensures {:va_keep} Tmp_846 == 0 || Tmp_846 == -1073741643 || Tmp_846 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParSetFwdAddress"} ParSetFwdAddress(actual_Pdx_14: int) returns (Tmp_846: int)
{
  var {:scalar} Tmp_847: int;
  var {:scalar} Status_7: int;
  var {:scalar} Tmp_848: int;
  var {:pointer} Pdx_14: int;

  anon0:
    Pdx_14 := actual_Pdx_14;
    Status_7 := 0;
    assume {:nonnull} Pdx_14 != 0;
    assume Pdx_14 > 0;
    havoc Tmp_847;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 1501} Status_7 := ParReverseToForward(Pdx_14);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_7 < 0;
    goto L21;

  L21:
    Tmp_846 := Status_7;
    return;

  anon7_Then:
    assume {:partition} 0 <= Status_7;
    assume {:nonnull} Pdx_14 != 0;
    assume Pdx_14 > 0;
    havoc Tmp_848;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Status_7 < 0;
    goto L21;

  anon8_Then:
    assume {:partition} 0 <= Status_7;
    assume {:nonnull} Pdx_14 != 0;
    assume Pdx_14 > 0;
    goto L21;

  anon9_Then:
    Status_7 := -1073741823;
    goto L21;
}



procedure {:origName "ParWriteIrp"} ParWriteIrp(actual_Pdx_15: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParWriteIrp"} ParWriteIrp(actual_Pdx_15: int)
{
  var {:pointer} Irp_16: int;
  var {:pointer} IrpSp: int;
  var {:dopa} {:scalar} NumBytesWritten_1: int;
  var {:pointer} Pdx_15: int;
  var boogieTmp: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;

  anon0:
    call {:si_unique_call 1502} vslice_dummy_var_292 := __HAVOC_malloc(4);
    call {:si_unique_call 1503} NumBytesWritten_1 := __HAVOC_malloc(4);
    Pdx_15 := actual_Pdx_15;
    assume {:nonnull} NumBytesWritten_1 != 0;
    assume NumBytesWritten_1 > 0;
    Mem_T.INT4[NumBytesWritten_1] := 0;
    assume {:nonnull} Pdx_15 != 0;
    assume Pdx_15 > 0;
    havoc Irp_16;
    call {:si_unique_call 1504} IrpSp := sdv_IoGetCurrentIrpStackLocation(Irp_16);
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    havoc vslice_dummy_var_150;
    havoc vslice_dummy_var_151;
    call {:si_unique_call 1505} boogieTmp := ParWrite(Pdx_15, vslice_dummy_var_150, vslice_dummy_var_151, NumBytesWritten_1);
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    assume {:nonnull} NumBytesWritten_1 != 0;
    assume NumBytesWritten_1 > 0;
    return;
}



procedure {:origName "ParTerminate"} ParTerminate(actual_Pdx_16: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParTerminate"} ParTerminate(actual_Pdx_16: int)
{
  var {:scalar} Tmp_852: int;
  var {:scalar} Tmp_853: int;
  var {:scalar} Tmp_856: int;
  var {:scalar} Tmp_857: int;
  var {:scalar} Tmp_858: int;
  var {:scalar} Tmp_859: int;
  var {:pointer} Pdx_16: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;

  anon0:
    call {:si_unique_call 1506} vslice_dummy_var_293 := __HAVOC_malloc(4);
    Pdx_16 := actual_Pdx_16;
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L7;

  L7:
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    havoc Tmp_857;
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    havoc Tmp_853;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    havoc Tmp_856;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    havoc Tmp_858;
    goto L1;

  L1:
    return;

  anon17_Then:
    goto L1;

  anon16_Then:
    call {:si_unique_call 1507} vslice_dummy_var_294 := ParReverseToForward(Pdx_16);
    goto L16;

  L16:
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    havoc Tmp_859;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    havoc Tmp_852;
    goto L1;

  anon18_Then:
    goto L1;

  anon14_Then:
    assume {:nonnull} Pdx_16 != 0;
    assume Pdx_16 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L16;

  anon15_Then:
    goto L7;

  anon13_Then:
    goto L1;
}



procedure {:origName "ParReverseToForward"} ParReverseToForward(actual_Pdx_17: int) returns (Tmp_860: int);
  free ensures {:va_keep} Tmp_860 == 0 || Tmp_860 == -1073741643;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParReverseToForward"} ParReverseToForward(actual_Pdx_17: int) returns (Tmp_860: int)
{
  var {:scalar} Tmp_861: int;
  var {:scalar} Tmp_862: int;
  var {:scalar} Tmp_863: int;
  var {:scalar} Status_8: int;
  var {:scalar} Tmp_864: int;
  var {:scalar} Tmp_865: int;
  var {:scalar} Tmp_866: int;
  var {:scalar} Tmp_867: int;
  var {:scalar} Tmp_868: int;
  var {:scalar} Tmp_869: int;
  var {:scalar} Tmp_871: int;
  var {:scalar} Tmp_872: int;
  var {:pointer} Pdx_17: int;

  anon0:
    Pdx_17 := actual_Pdx_17;
    Status_8 := 0;
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L9;

  L9:
    Tmp_860 := Status_8;
    goto L1;

  L1:
    return;

  anon38_Then:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_868;
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_871;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_863;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_865;
    goto L13;

  L13:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_866;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto L6;

  L6:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto L27;

  L27:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Status_8 >= 0;
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_861;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_864;
    goto L28;

  L28:
    Tmp_860 := Status_8;
    goto L1;

  anon52_Then:
    goto L28;

  anon45_Then:
    goto L28;

  anon44_Then:
    goto L28;

  anon43_Then:
    assume {:partition} 0 > Status_8;
    goto L28;

  anon37_Then:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_869;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_872;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Status_8 >= 0;
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto L27;

  anon47_Then:
    goto L27;

  anon46_Then:
    assume {:partition} 0 > Status_8;
    goto L27;

  anon53_Then:
    goto L27;

  anon51_Then:
    goto L6;

  anon41_Then:
    goto L6;

  anon50_Then:
    goto L13;

  anon49_Then:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L20;

  L20:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_862;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    havoc Tmp_867;
    goto L6;

  anon54_Then:
    goto L6;

  anon40_Then:
    assume {:nonnull} Pdx_17 != 0;
    assume Pdx_17 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    Status_8 := -1073741643;
    goto L6;

  anon42_Then:
    goto L20;

  anon39_Then:
    goto L9;

  anon48_Then:
    goto L6;
}



procedure {:origName "ParReadIrp"} ParReadIrp(actual_Pdx_18: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParReadIrp"} ParReadIrp(actual_Pdx_18: int)
{
  var {:pointer} Irp_17: int;
  var {:pointer} IrpSp_1: int;
  var {:dopa} {:scalar} bytesRead_1: int;
  var {:scalar} status_29: int;
  var {:pointer} Pdx_18: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;

  anon0:
    call {:si_unique_call 1508} bytesRead_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1509} vslice_dummy_var_295 := __HAVOC_malloc(4);
    Pdx_18 := actual_Pdx_18;
    assume {:nonnull} Pdx_18 != 0;
    assume Pdx_18 > 0;
    havoc Irp_17;
    call {:si_unique_call 1510} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_17);
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc vslice_dummy_var_152;
    havoc vslice_dummy_var_153;
    call {:si_unique_call 1511} status_29 := ParRead(Pdx_18, vslice_dummy_var_152, vslice_dummy_var_153, bytesRead_1);
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    assume {:nonnull} bytesRead_1 != 0;
    assume bytesRead_1 > 0;
    return;
}



procedure {:origName "ParPing"} ParPing(actual_Pdx_19: int) returns (Tmp_875: int);
  free ensures {:va_keep} Tmp_875 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParPing"} ParPing(actual_Pdx_19: int) returns (Tmp_875: int)
{
  var {:scalar} NtStatus: int;

  anon0:
    NtStatus := 0;
    Tmp_875 := NtStatus;
    return;
}



procedure {:origName "ParWrite"} ParWrite(actual_Pdx_20: int, actual_Buffer_3: int, actual_NumBytesToWrite_2: int, actual_NumBytesWritten_2: int) returns (Tmp_877: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParWrite"} ParWrite(actual_Pdx_20: int, actual_Buffer_3: int, actual_NumBytesToWrite_2: int, actual_NumBytesWritten_2: int) returns (Tmp_877: int)
{
  var {:scalar} Status_9: int;
  var {:scalar} Tmp_878: int;
  var {:scalar} Tmp_879: int;
  var {:scalar} Tmp_881: int;
  var {:scalar} Tmp_882: int;
  var {:pointer} Pdx_20: int;
  var {:pointer} Buffer_3: int;
  var {:scalar} NumBytesToWrite_2: int;
  var {:pointer} NumBytesWritten_2: int;

  anon0:
    Pdx_20 := actual_Pdx_20;
    Buffer_3 := actual_Buffer_3;
    NumBytesToWrite_2 := actual_NumBytesToWrite_2;
    NumBytesWritten_2 := actual_NumBytesWritten_2;
    Status_9 := 0;
    call {:si_unique_call 1512} Status_9 := ParReverseToForward(Pdx_20);
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L11;

  L11:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_9 >= 0;
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L15;

  L15:
    assume {:nonnull} NumBytesWritten_2 != 0;
    assume NumBytesWritten_2 > 0;
    Mem_T.INT4[NumBytesWritten_2] := 0;
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    call {:si_unique_call 1513} Status_9 := ParDot3Write(Pdx_20, Buffer_3, NumBytesToWrite_2, NumBytesWritten_2);
    goto L12;

  L12:
    Tmp_877 := Status_9;
    return;

  anon25_Then:
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    havoc Tmp_879;
    goto L12;

  anon22_Then:
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    havoc Tmp_878;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L15;

  anon26_Then:
    goto L12;

  anon21_Then:
    assume {:partition} 0 > Status_9;
    goto L12;

  anon19_Then:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Status_9 >= 0;
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    havoc Tmp_881;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    havoc Tmp_882;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Status_9 >= 0;
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    goto L11;

  anon24_Then:
    assume {:partition} 0 > Status_9;
    assume {:nonnull} Pdx_20 != 0;
    assume Pdx_20 > 0;
    goto L11;

  anon27_Then:
    goto L11;

  anon23_Then:
    goto L11;

  anon20_Then:
    assume {:partition} 0 > Status_9;
    goto L11;
}



procedure {:origName "PptPdoReadWrite"} PptPdoReadWrite(actual_DeviceObject_19: int, actual_Irp_18: int) returns (Tmp_883: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_883 == -1073741738 || Tmp_883 == -1073741130 || Tmp_883 == 259 || Tmp_883 == -1073741536 || Tmp_883 == 0 || Tmp_883 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoReadWrite"} PptPdoReadWrite(actual_DeviceObject_19: int, actual_Irp_18: int) returns (Tmp_883: int)
{
  var {:pointer} Pdx_21: int;
  var {:pointer} Tmp_884: int;
  var {:pointer} IrpSp_2: int;
  var {:scalar} sdv_636: int;
  var {:scalar} OldIrql_1: int;
  var {:scalar} Tmp_885: int;
  var {:scalar} needToSignalSemaphore: int;
  var {:scalar} sdv_641: int;
  var {:pointer} DeviceObject_19: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_158: int;

  anon0:
    DeviceObject_19 := actual_DeviceObject_19;
    Irp_18 := actual_Irp_18;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    call {:si_unique_call 1514} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_18);
    assume {:nonnull} DeviceObject_19 != 0;
    assume DeviceObject_19 > 0;
    havoc Pdx_21;
    assume {:nonnull} Pdx_21 != 0;
    assume Pdx_21 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc vslice_dummy_var_154;
    call {:si_unique_call 1515} Tmp_883 := P4CompleteRequest(Irp_18, -1073741738, vslice_dummy_var_154);
    goto L1;

  L1:
    return;

  anon30_Then:
    assume {:nonnull} Pdx_21 != 0;
    assume Pdx_21 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc vslice_dummy_var_155;
    call {:si_unique_call 1516} Tmp_883 := P4CompleteRequest(Irp_18, -1073741738, vslice_dummy_var_155);
    goto L1;

  anon21_Then:
    assume {:nonnull} Pdx_21 != 0;
    assume Pdx_21 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc vslice_dummy_var_156;
    call {:si_unique_call 1517} Tmp_883 := P4CompleteRequest(Irp_18, -1073741130, vslice_dummy_var_156);
    goto L1;

  anon22_Then:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L28;

  L28:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc vslice_dummy_var_157;
    call {:si_unique_call 1518} Tmp_883 := P4CompleteRequest(Irp_18, -1073741811, vslice_dummy_var_157);
    goto L1;

  anon23_Then:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 1519} Tmp_884 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    Mem_T.INT4[Tmp_884] := OldIrql_1;
    call {:si_unique_call 1520} IoAcquireCancelSpinLock(Tmp_884);
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    OldIrql_1 := Mem_T.INT4[Tmp_884];
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1521} sdv_641 := sdv_IsListEmpty(0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_641 != 0;
    call {:si_unique_call 1522} sdv_636 := KeReadStateSemaphore(0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} sdv_636 == 0;
    Tmp_885 := 1;
    goto L56;

  L56:
    needToSignalSemaphore := Tmp_885;
    call {:si_unique_call 1523} vslice_dummy_var_298 := sdv_IoSetCancelRoutine(Irp_18, li2bplFunctionConstant229);
    call {:si_unique_call 1524} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    assume {:nonnull} Pdx_21 != 0;
    assume Pdx_21 > 0;
    call {:si_unique_call 1525} vslice_dummy_var_296 := sdv_InsertTailList(WorkQueue__PDO_EXTENSION(Pdx_21), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_18))));
    call {:si_unique_call 1526} IoReleaseCancelSpinLock(OldIrql_1);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} needToSignalSemaphore != 0;
    call {:si_unique_call 1527} vslice_dummy_var_297 := KeReleaseSemaphore(0, 0, 1, 0);
    goto L70;

  L70:
    Tmp_883 := 259;
    goto L1;

  anon29_Then:
    assume {:partition} needToSignalSemaphore == 0;
    goto L70;

  anon28_Then:
    assume {:partition} sdv_636 != 0;
    goto L50;

  L50:
    Tmp_885 := 0;
    goto L56;

  anon27_Then:
    assume {:partition} sdv_641 == 0;
    goto L50;

  anon26_Then:
    call {:si_unique_call 1528} IoReleaseCancelSpinLock(OldIrql_1);
    Tmp_883 := -1073741536;
    goto L1;

  anon25_Then:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc vslice_dummy_var_158;
    call {:si_unique_call 1529} Tmp_883 := P4CompleteRequest(Irp_18, 0, vslice_dummy_var_158);
    goto L1;

  anon24_Then:
    goto L28;
}



procedure {:origName "ParRead"} ParRead(actual_Pdx_22: int, actual_Buffer_4: int, actual_NumBytesToRead: int, actual_NumBytesRead: int) returns (Tmp_886: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParRead"} ParRead(actual_Pdx_22: int, actual_Buffer_4: int, actual_NumBytesToRead: int, actual_NumBytesRead: int) returns (Tmp_886: int)
{
  var {:scalar} Tmp_888: int;
  var {:scalar} Status_10: int;
  var {:scalar} Tmp_889: int;
  var {:scalar} sdv_644: int;
  var {:dopa} {:scalar} Bytes: int;
  var {:scalar} Tmp_890: int;
  var {:scalar} Tmp_891: int;
  var {:scalar} Tmp_892: int;
  var {:scalar} sdv_647: int;
  var {:scalar} Tmp_893: int;
  var {:pointer} pQueue_2: int;
  var {:pointer} lpsBufPtr: int;
  var {:pointer} Pdx_22: int;
  var {:pointer} Buffer_4: int;
  var {:scalar} NumBytesToRead: int;
  var {:pointer} NumBytesRead: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_159: int;

  anon0:
    call {:si_unique_call 1530} Bytes := __HAVOC_malloc(4);
    Pdx_22 := actual_Pdx_22;
    Buffer_4 := actual_Buffer_4;
    NumBytesToRead := actual_NumBytesToRead;
    NumBytesRead := actual_NumBytesRead;
    Status_10 := 0;
    lpsBufPtr := Buffer_4;
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    Mem_T.INT4[Bytes] := 0;
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    assume {:nonnull} NumBytesRead != 0;
    assume NumBytesRead > 0;
    Mem_T.INT4[NumBytesRead] := Mem_T.INT4[Bytes];
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L12;

  L12:
    call {:si_unique_call 1531} Status_10 := ParForwardToReverse(Pdx_22);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Status_10 >= 0;
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L20;

  L20:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    call {:si_unique_call 1532} Status_10 := ParDot3Read(Pdx_22, lpsBufPtr, NumBytesToRead, Bytes);
    goto L28;

  L28:
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    assume {:nonnull} NumBytesRead != 0;
    assume NumBytesRead > 0;
    Mem_T.INT4[NumBytesRead] := Mem_T.INT4[NumBytesRead] + Mem_T.INT4[Bytes];
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    NumBytesToRead := NumBytesToRead - Mem_T.INT4[Bytes];
    goto L17;

  L17:
    Tmp_886 := Status_10;
    return;

  anon25_Then:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    havoc Tmp_893;
    goto L28;

  anon24_Then:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    havoc Tmp_889;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto L20;

  anon30_Then:
    goto L17;

  anon23_Then:
    assume {:partition} 0 > Status_10;
    goto L17;

  anon29_Then:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    havoc Tmp_888;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    pQueue_2 := ShadowBuffer__PDO_EXTENSION(Pdx_22);
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    havoc Tmp_891;
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    NumBytesToRead := NumBytesToRead - Mem_T.INT4[Bytes];
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    assume {:nonnull} NumBytesRead != 0;
    assume NumBytesRead > 0;
    Mem_T.INT4[NumBytesRead] := Mem_T.INT4[NumBytesRead] + Mem_T.INT4[Bytes];
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} NumBytesToRead == 0;
    Status_10 := 0;
    call {:si_unique_call 1533} sdv_647 := Queue_IsEmpty(pQueue_2);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_647 == 0;
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    havoc vslice_dummy_var_159;
    call {:si_unique_call 1534} vslice_dummy_var_299 := KeSetEvent(vslice_dummy_var_159, 0, 0);
    goto L17;

  anon27_Then:
    goto L17;

  anon26_Then:
    assume {:partition} sdv_647 != 0;
    goto L17;

  anon32_Then:
    assume {:partition} NumBytesToRead != 0;
    goto L32;

  L32:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    havoc Tmp_890;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} Pdx_22 != 0;
    assume Pdx_22 > 0;
    havoc Tmp_892;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} sdv_644 == 0;
    Status_10 := 0;
    goto L17;

  anon28_Then:
    assume {:partition} sdv_644 != 0;
    goto L12;

  anon33_Then:
    goto L12;

  anon31_Then:
    goto L32;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_300: int;

  anon0:
    call {:si_unique_call 1535} vslice_dummy_var_300 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ParForwardToReverse"} ParForwardToReverse(actual_Pdx_23: int) returns (Tmp_896: int);
  free ensures {:va_keep} Tmp_896 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParForwardToReverse"} ParForwardToReverse(actual_Pdx_23: int) returns (Tmp_896: int)
{
  var {:scalar} Tmp_897: int;
  var {:scalar} Tmp_898: int;
  var {:scalar} Status_11: int;
  var {:scalar} Tmp_899: int;
  var {:scalar} Tmp_900: int;
  var {:scalar} Tmp_901: int;
  var {:scalar} Tmp_902: int;
  var {:scalar} Tmp_903: int;
  var {:scalar} Tmp_904: int;
  var {:scalar} Tmp_905: int;
  var {:scalar} Tmp_906: int;
  var {:scalar} Tmp_907: int;
  var {:scalar} Tmp_909: int;
  var {:scalar} Tmp_910: int;
  var {:scalar} Tmp_911: int;
  var {:pointer} Pdx_23: int;

  anon0:
    Pdx_23 := actual_Pdx_23;
    Status_11 := 0;
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L9;

  L9:
    Tmp_896 := Status_11;
    goto L1;

  L1:
    return;

  anon50_Then:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L9;

  anon51_Then:
    goto L6;

  L6:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_903;
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_904;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_901;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_910;
    goto L10;

  L10:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L27;

  L27:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Status_11 >= 0;
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_899;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_902;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} Status_11 >= 0;
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto L28;

  L28:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} Status_11 >= 0;
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_898;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_907;
    goto L38;

  L38:
    Tmp_896 := Status_11;
    goto L1;

  anon68_Then:
    goto L38;

  anon61_Then:
    goto L38;

  anon60_Then:
    goto L38;

  anon57_Then:
    assume {:partition} 0 > Status_11;
    goto L38;

  anon59_Then:
    assume {:partition} 0 > Status_11;
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto L28;

  anon67_Then:
    goto L28;

  anon58_Then:
    goto L28;

  anon56_Then:
    assume {:partition} 0 > Status_11;
    goto L28;

  anon52_Then:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_897;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_900;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Status_11 >= 0;
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_909;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto L27;

  anon63_Then:
    goto L27;

  anon70_Then:
    goto L27;

  anon62_Then:
    assume {:partition} 0 > Status_11;
    goto L27;

  anon69_Then:
    goto L27;

  anon66_Then:
    goto L10;

  anon65_Then:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_906;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_905;
    goto L20;

  L20:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    havoc Tmp_911;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} Pdx_23 != 0;
    assume Pdx_23 > 0;
    goto L10;

  anon72_Then:
    goto L10;

  anon55_Then:
    goto L10;

  anon71_Then:
    goto L20;

  anon54_Then:
    goto L10;

  anon53_Then:
    goto L10;

  anon49_Then:
    goto L10;

  anon64_Then:
    goto L6;
}



procedure {:origName "ParHaveReadData"} ParHaveReadData(actual_Pdx_24: int) returns (Tmp_912: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_912 == 0 || Tmp_912 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParHaveReadData"} ParHaveReadData(actual_Pdx_24: int) returns (Tmp_912: int)
{
  var {:scalar} Tmp_913: int;
  var {:scalar} Tmp_915: int;
  var {:scalar} Tmp_916: int;
  var {:scalar} sdv_654: int;
  var {:scalar} Tmp_917: int;
  var {:scalar} Tmp_918: int;
  var {:scalar} sdv_657: int;
  var {:scalar} Tmp_919: int;
  var {:scalar} status_30: int;
  var {:scalar} justAcquiredPort: int;
  var {:scalar} Tmp_920: int;
  var {:scalar} Tmp_921: int;
  var {:pointer} Pdx_24: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_160: int;

  anon0:
    Pdx_24 := actual_Pdx_24;
    justAcquiredPort := 0;
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    Tmp_912 := 0;
    goto L1;

  L1:
    return;

  anon55_Then:
    goto L7;

  L7:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L21;

  L21:
    call {:si_unique_call 1536} status_30 := ParReverseToForward(Pdx_24);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_30 != 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} justAcquiredPort != 0;
    call {:si_unique_call 1537} ParFreePort(Pdx_24);
    goto L28;

  L28:
    Tmp_912 := 0;
    goto L1;

  anon60_Then:
    assume {:partition} justAcquiredPort == 0;
    goto L28;

  anon58_Then:
    assume {:partition} status_30 == 0;
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_915;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_920;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} status_30 != 0;
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    call {:si_unique_call 1538} ParTerminate(Pdx_24);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} justAcquiredPort != 0;
    call {:si_unique_call 1539} ParFreePort(Pdx_24);
    goto L44;

  L44:
    Tmp_912 := 0;
    goto L1;

  anon62_Then:
    assume {:partition} justAcquiredPort == 0;
    goto L44;

  anon61_Then:
    assume {:partition} status_30 == 0;
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto L15;

  L15:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L54;

  L54:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_918;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_921;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_657 != 0;
    Tmp_912 := 1;
    goto L1;

  anon65_Then:
    assume {:partition} sdv_657 == 0;
    goto L55;

  L55:
    call {:si_unique_call 1540} vslice_dummy_var_301 := ParReverseToForward(Pdx_24);
    goto L63;

  L63:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto L65;

  L65:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_916;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto L67;

  L67:
    call {:si_unique_call 1541} sdv_654 := PptEcpHwHaveReadData(Pdx_24);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} sdv_654 != 0;
    Tmp_912 := 1;
    goto L1;

  anon68_Then:
    assume {:partition} sdv_654 == 0;
    Tmp_912 := 0;
    goto L1;

  anon72_Then:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_913;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_917;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc Tmp_919;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    call {:si_unique_call 1542} Tmp_912 := ParEcpHaveReadData(Pdx_24);
    goto L1;

  anon75_Then:
    goto L75;

  L75:
    Tmp_912 := 1;
    goto L1;

  anon74_Then:
    goto L67;

  anon73_Then:
    goto L67;

  anon66_Then:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L75;

  anon67_Then:
    goto L65;

  anon71_Then:
    goto L55;

  anon56_Then:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L63;

  anon64_Then:
    goto L54;

  anon70_Then:
    goto L15;

  anon59_Then:
    goto L15;

  anon57_Then:
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    havoc vslice_dummy_var_160;
    call {:si_unique_call 1543} status_30 := PptAcquirePortViaIoctl(vslice_dummy_var_160, 0);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} status_30 != 0;
    Tmp_912 := 0;
    goto L1;

  anon63_Then:
    assume {:partition} status_30 == 0;
    justAcquiredPort := 1;
    assume {:nonnull} Pdx_24 != 0;
    assume Pdx_24 > 0;
    goto L21;

  anon51_Then:
    goto L15;

  anon54_Then:
    goto L7;

  anon53_Then:
    goto L7;

  anon52_Then:
    goto L7;

  anon69_Then:
    goto L7;
}



procedure {:origName "_sdv_init42"} _sdv_init42();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init42"} _sdv_init42()
{
  var vslice_dummy_var_302: int;

  anon0:
    call {:si_unique_call 1544} vslice_dummy_var_302 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    Mem_T.INT4[AllowAsserts] := 0;
    Mem_T.INT4[DbgMaskFdo] := 0;
    Mem_T.INT4[DbgMaskRawPort] := 0;
    Mem_T.INT4[DbgMaskDaisyChain0] := 0;
    Mem_T.INT4[DbgMaskDaisyChain1] := 0;
    Mem_T.INT4[DbgMaskEndOfChain] := 0;
    Mem_T.INT4[DbgMaskLegacyZip] := 0;
    Mem_T.INT4[DbgMaskNoDevice] := 0;
    return;
}



procedure {:origName "_sdv_init38"} _sdv_init38();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init38"} _sdv_init38()
{
  var vslice_dummy_var_303: int;

  anon0:
    call {:si_unique_call 1545} vslice_dummy_var_303 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "IeeeDetermineSupportedProtocols"} IeeeDetermineSupportedProtocols(actual_Pdx_25: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IeeeDetermineSupportedProtocols"} IeeeDetermineSupportedProtocols(actual_Pdx_25: int)
{
  var {:scalar} rm: int;
  var {:scalar} fm: int;
  var {:scalar} Tmp_927: int;
  var {:scalar} Tmp_928: int;
  var {:scalar} Tmp_929: int;
  var {:scalar} Tmp_931: int;
  var {:pointer} Pdx_25: int;
  var vslice_dummy_var_304: int;

  anon0:
    call {:si_unique_call 1546} vslice_dummy_var_304 := __HAVOC_malloc(4);
    Pdx_25 := actual_Pdx_25;
    assume {:nonnull} Pdx_25 != 0;
    assume Pdx_25 > 0;
    call {:si_unique_call 1547} ParTerminate(Pdx_25);
    fm := 0;
    goto L10;

  L10:
    call {:si_unique_call 1548} fm, Tmp_927, Tmp_931 := IeeeDetermineSupportedProtocols_loop_L10(fm, Tmp_927, Tmp_931);
    goto L10_last;

  L10_last:
    assume {:CounterLoop 7} {:Counter "fm"} true;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 7 > fm;
    Tmp_931 := fm;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_927 := fm;
    goto L13;

  L13:
    fm := fm + 1;
    goto L13_dummy;

  L13_dummy:
    assume false;
    return;

  anon11_Then:
    goto L13;

  anon9_Then:
    assume {:partition} fm >= 7;
    rm := 0;
    goto L17;

  L17:
    call {:si_unique_call 1549} rm, Tmp_928, Tmp_929 := IeeeDetermineSupportedProtocols_loop_L17(rm, Tmp_928, Tmp_929);
    goto L17_last;

  L17_last:
    assume {:CounterLoop 8} {:Counter "rm"} true;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 8 > rm;
    Tmp_929 := rm;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_928 := rm;
    goto L20;

  L20:
    rm := rm + 1;
    goto L20_dummy;

  L20_dummy:
    assume false;
    return;

  anon12_Then:
    goto L20;

  anon10_Then:
    assume {:partition} rm >= 8;
    return;
}



procedure {:origName "IeeeEnter1284Mode"} IeeeEnter1284Mode(actual_Pdx_26: int, actual_Extensibility: int) returns (Tmp_932: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_932 == -1073741808 || Tmp_932 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IeeeEnter1284Mode"} IeeeEnter1284Mode(actual_Pdx_26: int, actual_Extensibility: int) returns (Tmp_932: int)
{
  var {:scalar} Tmp_933: int;
  var {:scalar} Tmp_934: int;
  var {:scalar} dcr: int;
  var {:scalar} Tmp_935: int;
  var {:pointer} Tmp_938: int;
  var {:pointer} Controller_5: int;
  var {:scalar} sdv_663: int;
  var {:scalar} Tmp_939: int;
  var {:scalar} Tmp_940: int;
  var {:scalar} sdv_664: int;
  var {:scalar} sdv_665: int;
  var {:scalar} sdv_666: int;
  var {:scalar} Tmp_942: int;
  var {:pointer} Tmp_944: int;
  var {:scalar} Tmp_945: int;
  var {:scalar} Tmp_946: int;
  var {:scalar} sPeriphResponseTime: int;
  var {:scalar} Tmp_947: int;
  var {:scalar} Tmp_948: int;
  var {:scalar} Tmp_949: int;
  var {:pointer} Pdx_26: int;

  anon0:
    Pdx_26 := actual_Pdx_26;
    sPeriphResponseTime := 35;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    havoc Controller_5;
    call {:si_unique_call 1550} dcr := corral_nondet();
    Tmp_949 := BAND(dcr, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr := BOR(Tmp_949, BOR(4, 8));
    Tmp_934 := BAND(dcr, BOR(4, 8));
    dcr := BOR(Tmp_934, BOR(4, 8));
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    Tmp_948 := BAND(dcr, BOR(BOR(BOR(2, 4), 16), 32));
    dcr := BOR(Tmp_948, 2);
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    call {:si_unique_call 1551} sdv_663 := corral_nondet();
    Tmp_946 := BAND(sdv_663, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Tmp_946 == 56;
    Tmp_947 := 1;
    goto L53;

  L53:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Tmp_947 == 0;
    Tmp_940 := BAND(dcr, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr := BOR(Tmp_940, 8);
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    Tmp_932 := -1073741808;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Tmp_947 != 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    Tmp_945 := BAND(dcr, BOR(BOR(BOR(BOR(1, 2), 4), 16), 32));
    dcr := BOR(Tmp_945, BOR(1, 2));
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    Tmp_935 := BAND(dcr, BOR(BOR(4, 16), 32));
    dcr := BOR(Tmp_935, 0);
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    call {:si_unique_call 1552} sdv_664 := corral_nondet();
    Tmp_933 := BAND(sdv_664, 64);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_933 == 64;
    Tmp_939 := 1;
    goto L81;

  L81:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Tmp_939 != 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    Tmp_932 := 0;
    goto L1;

  anon10_Then:
    assume {:partition} Tmp_939 == 0;
    Tmp_942 := BAND(dcr, BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32));
    dcr := BOR(Tmp_942, 8);
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    assume {:nonnull} Pdx_26 != 0;
    assume Pdx_26 > 0;
    Tmp_932 := -1073741808;
    goto L1;

  anon12_Then:
    assume {:partition} Tmp_933 != 64;
    Tmp_944 := Controller_5;
    call {:si_unique_call 1553} sdv_666 := CheckPort(Tmp_944, 64, 64, sPeriphResponseTime);
    Tmp_939 := sdv_666;
    goto L81;

  anon11_Then:
    assume {:partition} Tmp_946 != 56;
    Tmp_938 := Controller_5;
    call {:si_unique_call 1554} sdv_665 := CheckPort(Tmp_938, 120, 56, sPeriphResponseTime);
    Tmp_947 := sdv_665;
    goto L53;
}



procedure {:origName "IeeeNegotiateMode"} IeeeNegotiateMode(actual_Pdx_27: int, actual_usReadMask: int, actual_usWriteMask: int) returns (Tmp_950: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_950 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IeeeNegotiateMode"} IeeeNegotiateMode(actual_Pdx_27: int, actual_usReadMask: int, actual_usWriteMask: int) returns (Tmp_950: int)
{
  var {:scalar} Tmp_951: int;
  var {:scalar} Tmp_952: int;
  var {:scalar} rm_1: int;
  var {:scalar} Tmp_953: int;
  var {:scalar} sdv_667: int;
  var {:scalar} Tmp_954: int;
  var {:scalar} Tmp_955: int;
  var {:scalar} fm_1: int;
  var {:scalar} Tmp_956: int;
  var {:scalar} sdv_668: int;
  var {:scalar} Tmp_957: int;
  var {:scalar} Tmp_958: int;
  var {:pointer} Pdx_27: int;
  var {:scalar} usReadMask: int;
  var {:scalar} usWriteMask: int;

  anon0:
    Pdx_27 := actual_Pdx_27;
    usReadMask := actual_usReadMask;
    usWriteMask := actual_usWriteMask;
    call {:si_unique_call 1555} ParTerminate(Pdx_27);
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    fm_1 := 0;
    goto L11;

  L11:
    call {:si_unique_call 1556} Tmp_953, Tmp_954, fm_1, Tmp_956 := IeeeNegotiateMode_loop_L11(Tmp_953, sdv_667, Tmp_954, fm_1, Tmp_956, usWriteMask);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 7} {:Counter "fm_1"} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 7 > fm_1;
    Tmp_956 := fm_1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_953 := fm_1;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_954 := fm_1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_667 != 0;
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    goto L12;

  L12:
    rm_1 := 0;
    goto L24;

  L24:
    call {:si_unique_call 1557} Tmp_951, Tmp_952, rm_1, Tmp_958 := IeeeNegotiateMode_loop_L24(Tmp_951, Tmp_952, rm_1, sdv_668, Tmp_958, usReadMask);
    goto L24_last;

  L24_last:
    assume {:CounterLoop 8} {:Counter "rm_1"} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} 8 > rm_1;
    Tmp_951 := rm_1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    Tmp_958 := rm_1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    Tmp_952 := rm_1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} sdv_668 != 0;
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    goto L25;

  L25:
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    havoc Tmp_955;
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    havoc Tmp_957;
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    Tmp_950 := 0;
    return;

  anon20_Then:
    assume {:partition} sdv_668 == 0;
    goto L27;

  L27:
    rm_1 := rm_1 + 1;
    goto L27_dummy;

  L27_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    goto L25;

  anon23_Then:
    goto L27;

  anon19_Then:
    assume {:partition} rm_1 >= 8;
    goto L25;

  anon18_Then:
    assume {:partition} sdv_667 == 0;
    goto L14;

  L14:
    fm_1 := fm_1 + 1;
    goto L14_dummy;

  L14_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:nonnull} Pdx_27 != 0;
    assume Pdx_27 > 0;
    goto L12;

  anon21_Then:
    goto L14;

  anon17_Then:
    assume {:partition} fm_1 >= 7;
    goto L12;
}



procedure {:origName "IeeeTerminate1284Mode"} IeeeTerminate1284Mode(actual_Pdx_28: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IeeeTerminate1284Mode"} IeeeTerminate1284Mode(actual_Pdx_28: int)
{
  var {:scalar} Tmp_960: int;
  var {:scalar} dsrValue: int;
  var {:scalar} Tmp_963: int;
  var {:scalar} bUseXFlag: int;
  var {:scalar} dcr_1: int;
  var {:scalar} Tmp_964: int;
  var {:scalar} bXFlag: int;
  var {:pointer} Tmp_965: int;
  var {:scalar} Tmp_966: int;
  var {:scalar} dsrMask: int;
  var {:scalar} Tmp_967: int;
  var {:scalar} Tmp_968: int;
  var {:scalar} Tmp_969: int;
  var {:pointer} Controller_6: int;
  var {:scalar} Tmp_971: int;
  var {:scalar} sdv_672: int;
  var {:pointer} Tmp_973: int;
  var {:scalar} sdv_674: int;
  var {:scalar} sdv_675: int;
  var {:scalar} Tmp_976: int;
  var {:scalar} Tmp_978: int;
  var {:scalar} Tmp_979: int;
  var {:scalar} sdv_676: int;
  var {:scalar} Tmp_980: int;
  var {:scalar} Tmp_981: int;
  var {:pointer} Pdx_28: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;

  anon0:
    call {:si_unique_call 1558} vslice_dummy_var_305 := __HAVOC_malloc(4);
    Pdx_28 := actual_Pdx_28;
    bUseXFlag := 0;
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    havoc Controller_6;
    call {:si_unique_call 1559} dcr_1 := corral_nondet();
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L20;

  L20:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    Tmp_979 := BAND(dcr_1, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_1 := BOR(Tmp_979, 8);
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    return;

  anon33_Then:
    call {:si_unique_call 1560} sdv_672 := corral_nondet();
    bXFlag := BAND(sdv_672, 16);
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    call {:si_unique_call 1561} dcr_1 := corral_nondet();
    Tmp_971 := BAND(dcr_1, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_1 := BOR(Tmp_971, 8);
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_28)] != 0;
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_28)] <= 1000;
    goto L127;

  L127:
    goto L42;

  L42:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L56;

  L56:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    havoc Tmp_964;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L58;

  L58:
    bUseXFlag := 1;
    goto L59;

  L59:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} bUseXFlag != 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} bXFlag != 0;
    Tmp_976 := 0;
    goto L64;

  L64:
    dsrMask := BOR(BOR(64, Tmp_976), 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} bXFlag == 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} bXFlag != 0;
    Tmp_966 := 0;
    goto L109;

  L109:
    Tmp_969 := Tmp_966;
    Tmp_968 := Tmp_969;
    goto L68;

  L68:
    dsrValue := BOR(BOR(0, Tmp_968), 0);
    goto L69;

  L69:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    Tmp_965 := Controller_6;
    call {:si_unique_call 1562} sdv_674 := CheckPort(Tmp_965, dsrMask, dsrValue, 35);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_674 != 0;
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    Tmp_967 := BAND(dcr_1, BOR(BOR(BOR(BOR(2, 4), 8), 16), 32));
    dcr_1 := BOR(Tmp_967, BOR(2, 8));
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    call {:si_unique_call 1563} sdv_675 := corral_nondet();
    Tmp_981 := BAND(sdv_675, BOR(64, 128));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Tmp_981 == 64;
    Tmp_980 := 1;
    goto L91;

  L91:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Tmp_980 == 0;
    call {:si_unique_call 1564} vslice_dummy_var_306 := corral_nondet();
    goto L20;

  anon40_Then:
    assume {:partition} Tmp_980 != 0;
    goto L20;

  anon45_Then:
    assume {:partition} Tmp_981 != 64;
    Tmp_973 := Controller_6;
    call {:si_unique_call 1565} sdv_676 := CheckPort(Tmp_973, 192, 64, 35);
    Tmp_980 := sdv_676;
    goto L91;

  anon39_Then:
    assume {:partition} sdv_674 == 0;
    call {:si_unique_call 1566} vslice_dummy_var_307 := corral_nondet();
    goto L20;

  anon41_Then:
    assume {:partition} bXFlag == 0;
    Tmp_966 := 16;
    goto L109;

  anon44_Then:
    assume {:partition} bXFlag != 0;
    Tmp_968 := 0;
    goto L68;

  anon38_Then:
    assume {:partition} bXFlag == 0;
    Tmp_976 := 16;
    goto L64;

  anon37_Then:
    assume {:partition} bUseXFlag == 0;
    dsrMask := 64;
    dsrValue := 0;
    goto L69;

  anon43_Then:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    havoc Tmp_978;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    bUseXFlag := 0;
    goto L59;

  anon46_Then:
    goto L58;

  anon35_Then:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    havoc Tmp_960;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L114;

  L114:
    bUseXFlag := 1;
    goto L59;

  anon47_Then:
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    havoc Tmp_963;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    bUseXFlag := 0;
    goto L59;

  anon48_Then:
    goto L114;

  anon36_Then:
    goto L56;

  anon34_Then:
    assume {:partition} 1000 < Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_28)];
    assume {:nonnull} Pdx_28 != 0;
    assume Pdx_28 > 0;
    Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_28)] := 1000;
    goto L127;

  anon42_Then:
    assume {:partition} Mem_T.INT4[Event22Delay__PDO_EXTENSION(Pdx_28)] == 0;
    goto L42;
}



procedure {:origName "_sdv_init26"} _sdv_init26();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init26"} _sdv_init26()
{
  var vslice_dummy_var_308: int;

  anon0:
    call {:si_unique_call 1567} vslice_dummy_var_308 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "IeeeNegotiateBestMode"} IeeeNegotiateBestMode(actual_Pdx_29: int, actual_usReadMask_1: int, actual_usWriteMask_1: int) returns (Tmp_984: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_984 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IeeeNegotiateBestMode"} IeeeNegotiateBestMode(actual_Pdx_29: int, actual_usReadMask_1: int, actual_usWriteMask_1: int) returns (Tmp_984: int)
{
  var {:scalar} Tmp_985: int;
  var {:scalar} rm_2: int;
  var {:scalar} Tmp_986: int;
  var {:scalar} Tmp_988: int;
  var {:scalar} sdv_677: int;
  var {:scalar} Tmp_989: int;
  var {:scalar} fm_2: int;
  var {:scalar} Tmp_990: int;
  var {:scalar} Tmp_991: int;
  var {:scalar} sdv_678: int;
  var {:scalar} Tmp_992: int;
  var {:scalar} Tmp_993: int;
  var {:pointer} Pdx_29: int;
  var {:scalar} usReadMask_1: int;
  var {:scalar} usWriteMask_1: int;

  anon0:
    Pdx_29 := actual_Pdx_29;
    usReadMask_1 := actual_usReadMask_1;
    usWriteMask_1 := actual_usWriteMask_1;
    call {:si_unique_call 1568} ParTerminate(Pdx_29);
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    fm_2 := 0;
    goto L11;

  L11:
    call {:si_unique_call 1569} Tmp_986, fm_2, Tmp_990, Tmp_991 := IeeeNegotiateBestMode_loop_L11(Tmp_986, sdv_677, fm_2, Tmp_990, Tmp_991, usWriteMask_1);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 7} {:Counter "fm_2"} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 7 > fm_2;
    Tmp_991 := fm_2;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L15;

  L15:
    fm_2 := fm_2 + 1;
    goto L15_dummy;

  L15_dummy:
    assume false;
    return;

  anon21_Then:
    Tmp_986 := fm_2;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_990 := fm_2;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_677 != 0;
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    goto L12;

  L12:
    rm_2 := 0;
    goto L22;

  L22:
    call {:si_unique_call 1570} Tmp_985, rm_2, Tmp_988, Tmp_993 := IeeeNegotiateBestMode_loop_L22(Tmp_985, rm_2, Tmp_988, sdv_678, Tmp_993, usReadMask_1);
    goto L22_last;

  L22_last:
    assume {:CounterLoop 8} {:Counter "rm_2"} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} 8 > rm_2;
    Tmp_993 := rm_2;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L26;

  L26:
    rm_2 := rm_2 + 1;
    goto L26_dummy;

  L26_dummy:
    assume false;
    return;

  anon23_Then:
    Tmp_985 := rm_2;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    Tmp_988 := rm_2;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} sdv_678 != 0;
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    goto L23;

  L23:
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    havoc Tmp_992;
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    havoc Tmp_989;
    assume {:nonnull} Pdx_29 != 0;
    assume Pdx_29 > 0;
    Tmp_984 := 0;
    return;

  anon20_Then:
    assume {:partition} sdv_678 == 0;
    goto L26;

  anon24_Then:
    goto L26;

  anon19_Then:
    assume {:partition} rm_2 >= 8;
    goto L23;

  anon18_Then:
    assume {:partition} sdv_677 == 0;
    goto L15;

  anon22_Then:
    goto L15;

  anon17_Then:
    assume {:partition} fm_2 >= 7;
    goto L12;
}



procedure {:origName "PptRegGetDword"} PptRegGetDword(actual_RelativeTo_3: int, actual_Path_3: int, actual_ParameterName: int, actual_ParameterValue: int) returns (Tmp_994: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_994 == 0 || Tmp_994 == -1073741823 || Tmp_994 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptRegGetDword"} PptRegGetDword(actual_RelativeTo_3: int, actual_Path_3: int, actual_ParameterName: int, actual_ParameterValue: int) returns (Tmp_994: int)
{
  var {:pointer} paramTable_1: int;
  var {:dopa} {:scalar} defaultValue: int;
  var {:scalar} Tmp_996: int;
  var {:scalar} status_31: int;
  var {:scalar} RelativeTo_3: int;
  var {:pointer} Path_3: int;
  var {:pointer} ParameterName: int;
  var {:pointer} ParameterValue: int;

  anon0:
    call {:si_unique_call 1571} defaultValue := __HAVOC_malloc(4);
    RelativeTo_3 := actual_RelativeTo_3;
    Path_3 := actual_Path_3;
    ParameterName := actual_ParameterName;
    ParameterValue := actual_ParameterValue;
    call {:si_unique_call 1572} paramTable_1 := __HAVOC_malloc(56);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Path_3 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} ParameterName != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ParameterValue != 0;
    call {:si_unique_call 1573} sdv_RtlZeroMemory(0, 56);
    assume {:nonnull} ParameterValue != 0;
    assume ParameterValue > 0;
    assume {:nonnull} defaultValue != 0;
    assume defaultValue > 0;
    Mem_T.INT4[defaultValue] := Mem_T.INT4[ParameterValue];
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    Tmp_996 := BOR(RelativeTo_3, 0);
    call {:si_unique_call 1574} status_31 := sdv_RtlQueryRegistryValues(Tmp_996, 0, 0, 0, 0);
    Tmp_994 := status_31;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} ParameterValue == 0;
    goto L7;

  L7:
    Tmp_994 := -1073741811;
    goto L1;

  anon8_Then:
    assume {:partition} ParameterName == 0;
    goto L7;

  anon7_Then:
    assume {:partition} Path_3 == 0;
    goto L7;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_309: int;

  anon0:
    call {:si_unique_call 1575} vslice_dummy_var_309 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptRegGetDeviceParameterDword"} PptRegGetDeviceParameterDword(actual_Pdo_7: int, actual_ParameterName_1: int, actual_ParameterValue_1: int) returns (Tmp_1000: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1000 == 0 || Tmp_1000 == -1073741823 || Tmp_1000 == -1073741811 || Tmp_1000 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptRegGetDeviceParameterDword"} PptRegGetDeviceParameterDword(actual_Pdo_7: int, actual_ParameterName_1: int, actual_ParameterValue_1: int) returns (Tmp_1000: int)
{
  var {:dopa} {:scalar} defaultValue_1: int;
  var {:pointer} queryTable: int;
  var {:scalar} status_32: int;
  var {:pointer} ParameterName_1: int;
  var {:pointer} ParameterValue_1: int;
  var vslice_dummy_var_310: int;

  anon0:
    call {:si_unique_call 1576} defaultValue_1 := __HAVOC_malloc(4);
    ParameterName_1 := actual_ParameterName_1;
    ParameterValue_1 := actual_ParameterValue_1;
    call {:si_unique_call 1577} queryTable := __HAVOC_malloc(56);
    call {:si_unique_call 1578} sdv_do_paged_code_check();
    call {:si_unique_call 1579} status_32 := IoOpenDeviceRegistryKey(0, 1, 131097, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_32 >= 0;
    assume {:nonnull} ParameterValue_1 != 0;
    assume ParameterValue_1 > 0;
    assume {:nonnull} defaultValue_1 != 0;
    assume defaultValue_1 > 0;
    Mem_T.INT4[defaultValue_1] := Mem_T.INT4[ParameterValue_1];
    call {:si_unique_call 1580} sdv_RtlZeroMemory(0, 56);
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    assume {:nonnull} queryTable != 0;
    assume queryTable > 0;
    call {:si_unique_call 1581} status_32 := sdv_RtlQueryRegistryValues(-1073741824, 0, 0, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_32 >= 0;
    goto L32;

  L32:
    call {:si_unique_call 1582} vslice_dummy_var_310 := ZwClose(0);
    Tmp_1000 := status_32;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} 0 > status_32;
    assume {:nonnull} ParameterValue_1 != 0;
    assume ParameterValue_1 > 0;
    assume {:nonnull} defaultValue_1 != 0;
    assume defaultValue_1 > 0;
    Mem_T.INT4[ParameterValue_1] := Mem_T.INT4[defaultValue_1];
    goto L32;

  anon5_Then:
    assume {:partition} 0 > status_32;
    Tmp_1000 := status_32;
    goto L1;
}



procedure {:origName "PptRegSetDeviceParameterDword"} PptRegSetDeviceParameterDword(actual_Pdo_8: int, actual_ParameterName_2: int, actual_ParameterValue_2: int) returns (Tmp_1002: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1002 == -1073741790 || Tmp_1002 == -1073741816 || Tmp_1002 == -1073741823 || Tmp_1002 == 0 || Tmp_1002 == -1073741811 || Tmp_1002 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptRegSetDeviceParameterDword"} PptRegSetDeviceParameterDword(actual_Pdo_8: int, actual_ParameterName_2: int, actual_ParameterValue_2: int) returns (Tmp_1002: int)
{
  var {:scalar} valueName: int;
  var {:scalar} status_33: int;
  var {:pointer} Pdo_8: int;
  var {:pointer} ParameterName_2: int;
  var vslice_dummy_var_311: int;

  anon0:
    call {:si_unique_call 1583} valueName := __HAVOC_malloc(12);
    Pdo_8 := actual_Pdo_8;
    ParameterName_2 := actual_ParameterName_2;
    assume {:nonnull} Pdo_8 != 0;
    assume Pdo_8 > 0;
    call {:si_unique_call 1584} sdv_do_paged_code_check();
    call {:si_unique_call 1585} status_33 := IoOpenDeviceRegistryKey(0, 1, 131078, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_33 >= 0;
    call {:si_unique_call 1586} RtlInitUnicodeString(valueName, ParameterName_2);
    call {:si_unique_call 1587} status_33 := ZwSetValueKey(0, 0, 0, 4, 0, 4);
    call {:si_unique_call 1588} vslice_dummy_var_311 := ZwClose(0);
    Tmp_1002 := status_33;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} 0 > status_33;
    Tmp_1002 := status_33;
    goto L1;
}



procedure {:origName "PptRegSetDword"} PptRegSetDword(actual_RelativeTo_4: int, actual_Path_4: int, actual_ParameterName_3: int, actual_ParameterValue_3: int) returns (Tmp_1004: int);
  free ensures {:va_keep} Tmp_1004 == 0 || Tmp_1004 == -1073741823 || Tmp_1004 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptRegSetDword"} PptRegSetDword(actual_RelativeTo_4: int, actual_Path_4: int, actual_ParameterName_3: int, actual_ParameterValue_3: int) returns (Tmp_1004: int)
{
  var {:scalar} status_34: int;
  var {:scalar} RelativeTo_4: int;
  var {:pointer} Path_4: int;
  var {:pointer} ParameterName_3: int;
  var {:pointer} ParameterValue_3: int;

  anon0:
    RelativeTo_4 := actual_RelativeTo_4;
    Path_4 := actual_Path_4;
    ParameterName_3 := actual_ParameterName_3;
    ParameterValue_3 := actual_ParameterValue_3;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Path_4 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} ParameterName_3 != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ParameterValue_3 != 0;
    call {:si_unique_call 1589} status_34 := RtlWriteRegistryValue(RelativeTo_4, 0, 0, 4, 0, 4);
    goto L12;

  L12:
    Tmp_1004 := status_34;
    return;

  anon9_Then:
    assume {:partition} ParameterValue_3 == 0;
    goto L5;

  L5:
    status_34 := -1073741811;
    goto L12;

  anon8_Then:
    assume {:partition} ParameterName_3 == 0;
    goto L5;

  anon7_Then:
    assume {:partition} Path_4 == 0;
    goto L5;
}



procedure {:origName "_sdv_init27"} _sdv_init27();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init27"} _sdv_init27()
{
  var vslice_dummy_var_312: int;

  anon0:
    call {:si_unique_call 1590} vslice_dummy_var_312 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoSetInformation"} PptFdoSetInformation(actual_Fdo_5: int, actual_Irp_19: int) returns (Tmp_1008: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1008 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoSetInformation"} PptFdoSetInformation(actual_Fdo_5: int, actual_Irp_19: int) returns (Tmp_1008: int)
{
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_161: int;

  anon0:
    Irp_19 := actual_Irp_19;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    havoc vslice_dummy_var_161;
    call {:si_unique_call 1591} Tmp_1008 := P4CompleteRequest(Irp_19, -1073741637, vslice_dummy_var_161);
    return;
}



procedure {:origName "PptDispatchDeviceControl"} PptDispatchDeviceControl(actual_DevObj: int, actual_Irp_20: int) returns (Tmp_1010: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1010 == -1073741637 || Tmp_1010 == -1073741738 || Tmp_1010 == -1073741130 || Tmp_1010 == -1073741789 || Tmp_1010 == 0 || Tmp_1010 == -1073741811 || Tmp_1010 == 259 || Tmp_1010 == -1073741536;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchDeviceControl"} PptDispatchDeviceControl(actual_DevObj: int, actual_Irp_20: int) returns (Tmp_1010: int)
{
  var {:pointer} fdx_11: int;
  var {:pointer} DevObj: int;
  var {:pointer} Irp_20: int;

  anon0:
    DevObj := actual_DevObj;
    Irp_20 := actual_Irp_20;
    assume {:nonnull} DevObj != 0;
    assume DevObj > 0;
    havoc fdx_11;
    assume {:nonnull} fdx_11 != 0;
    assume fdx_11 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1592} Tmp_1010 := PptFdoDeviceControl(DevObj, Irp_20);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1593} Tmp_1010 := ParDeviceControl(DevObj, Irp_20);
    goto L1;
}



procedure {:origName "PptPdoSystemControl"} PptPdoSystemControl(actual_Pdo_9: int, actual_Irp_21: int) returns (Tmp_1012: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoSystemControl"} PptPdoSystemControl(actual_Pdo_9: int, actual_Irp_21: int) returns (Tmp_1012: int)
{
  var {:pointer} Pdo_9: int;
  var {:pointer} Irp_21: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;

  anon0:
    Pdo_9 := actual_Pdo_9;
    Irp_21 := actual_Irp_21;
    assume {:nonnull} Pdo_9 != 0;
    assume Pdo_9 > 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    havoc vslice_dummy_var_162;
    havoc vslice_dummy_var_163;
    call {:si_unique_call 1594} Tmp_1012 := P4CompleteRequest(Irp_21, vslice_dummy_var_162, vslice_dummy_var_163);
    return;
}



procedure {:origName "PptDispatchWrite"} PptDispatchWrite(actual_DevObj_1: int, actual_Irp_22: int) returns (Tmp_1014: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1014 == -1073741637 || Tmp_1014 == -1073741738 || Tmp_1014 == -1073741130 || Tmp_1014 == 259 || Tmp_1014 == -1073741536 || Tmp_1014 == 0 || Tmp_1014 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchWrite"} PptDispatchWrite(actual_DevObj_1: int, actual_Irp_22: int) returns (Tmp_1014: int)
{
  var {:pointer} fdx_12: int;
  var {:pointer} DevObj_1: int;
  var {:pointer} Irp_22: int;

  anon0:
    DevObj_1 := actual_DevObj_1;
    Irp_22 := actual_Irp_22;
    assume {:nonnull} DevObj_1 != 0;
    assume DevObj_1 > 0;
    havoc fdx_12;
    assume {:nonnull} fdx_12 != 0;
    assume fdx_12 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1595} Tmp_1014 := PptFdoWrite(DevObj_1, Irp_22);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1596} Tmp_1014 := PptPdoReadWrite(DevObj_1, Irp_22);
    goto L1;
}



procedure {:origName "PptDispatchInternalDeviceControl"} PptDispatchInternalDeviceControl(actual_DevObj_2: int, actual_Irp_23: int) returns (Tmp_1016: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchInternalDeviceControl"} PptDispatchInternalDeviceControl(actual_DevObj_2: int, actual_Irp_23: int) returns (Tmp_1016: int)
{
  var {:pointer} fdx_13: int;
  var {:pointer} DevObj_2: int;
  var {:pointer} Irp_23: int;

  anon0:
    DevObj_2 := actual_DevObj_2;
    Irp_23 := actual_Irp_23;
    assume {:nonnull} DevObj_2 != 0;
    assume DevObj_2 > 0;
    havoc fdx_13;
    assume {:nonnull} fdx_13 != 0;
    assume fdx_13 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1597} Tmp_1016 := PptFdoInternalDeviceControl(DevObj_2, Irp_23);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    call {:si_unique_call 1598} Tmp_1016 := ParInternalDeviceControl(DevObj_2, Irp_23);
    goto L1;
}



procedure {:origName "PptDispatchClose"} PptDispatchClose(actual_DevObj_3: int, actual_Irp_24: int) returns (Tmp_1018: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1018 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchClose"} PptDispatchClose(actual_DevObj_3: int, actual_Irp_24: int) returns (Tmp_1018: int)
{
  var {:pointer} fdx_14: int;
  var {:pointer} DevObj_3: int;
  var {:pointer} Irp_24: int;

  anon0:
    DevObj_3 := actual_DevObj_3;
    Irp_24 := actual_Irp_24;
    assume {:nonnull} DevObj_3 != 0;
    assume DevObj_3 > 0;
    havoc fdx_14;
    assume {:nonnull} fdx_14 != 0;
    assume fdx_14 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1599} Tmp_1018 := PptFdoClose(DevObj_3, Irp_24);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1600} Tmp_1018 := PptPdoClose(DevObj_3, Irp_24);
    goto L1;
}



procedure {:origName "PptFdoDeviceControl"} PptFdoDeviceControl(actual_Fdo_6: int, actual_Irp_25: int) returns (Tmp_1020: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1020 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoDeviceControl"} PptFdoDeviceControl(actual_Fdo_6: int, actual_Irp_25: int) returns (Tmp_1020: int)
{
  var {:pointer} Irp_25: int;
  var vslice_dummy_var_164: int;

  anon0:
    Irp_25 := actual_Irp_25;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    havoc vslice_dummy_var_164;
    call {:si_unique_call 1601} Tmp_1020 := P4CompleteRequest(Irp_25, -1073741637, vslice_dummy_var_164);
    return;
}



procedure {:origName "PptDispatchCreateOpen"} PptDispatchCreateOpen(actual_DevObj_4: int, actual_Irp_26: int) returns (Tmp_1022: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1022 == -1073741738 || Tmp_1022 == -1073741823 || Tmp_1022 == 0 || Tmp_1022 == -1073741130 || Tmp_1022 == -1073741565 || Tmp_1022 == -1073741790;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchCreateOpen"} PptDispatchCreateOpen(actual_DevObj_4: int, actual_Irp_26: int) returns (Tmp_1022: int)
{
  var {:pointer} fdx_15: int;
  var {:pointer} DevObj_4: int;
  var {:pointer} Irp_26: int;

  anon0:
    DevObj_4 := actual_DevObj_4;
    Irp_26 := actual_Irp_26;
    assume {:nonnull} DevObj_4 != 0;
    assume DevObj_4 > 0;
    havoc fdx_15;
    assume {:nonnull} fdx_15 != 0;
    assume fdx_15 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1602} Tmp_1022 := PptFdoCreateOpen(DevObj_4, Irp_26);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1603} Tmp_1022 := PptPdoCreateOpen(DevObj_4, Irp_26);
    goto L1;
}



procedure {:origName "PptDispatchRead"} PptDispatchRead(actual_DevObj_5: int, actual_Irp_27: int) returns (Tmp_1024: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1024 == -1073741637 || Tmp_1024 == -1073741738 || Tmp_1024 == -1073741130 || Tmp_1024 == 259 || Tmp_1024 == -1073741536 || Tmp_1024 == 0 || Tmp_1024 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchRead"} PptDispatchRead(actual_DevObj_5: int, actual_Irp_27: int) returns (Tmp_1024: int)
{
  var {:pointer} fdx_16: int;
  var {:pointer} DevObj_5: int;
  var {:pointer} Irp_27: int;

  anon0:
    DevObj_5 := actual_DevObj_5;
    Irp_27 := actual_Irp_27;
    assume {:nonnull} DevObj_5 != 0;
    assume DevObj_5 > 0;
    havoc fdx_16;
    assume {:nonnull} fdx_16 != 0;
    assume fdx_16 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1604} Tmp_1024 := PptFdoRead(DevObj_5, Irp_27);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1605} Tmp_1024 := PptPdoReadWrite(DevObj_5, Irp_27);
    goto L1;
}



procedure {:origName "_sdv_init41"} _sdv_init41();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init41"} _sdv_init41()
{
  var vslice_dummy_var_313: int;

  anon0:
    call {:si_unique_call 1606} vslice_dummy_var_313 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptDispatchPnp"} PptDispatchPnp(actual_DevObj_6: int, actual_Irp_28: int) returns (Tmp_1028: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchPnp"} PptDispatchPnp(actual_DevObj_6: int, actual_Irp_28: int) returns (Tmp_1028: int)
{
  var {:pointer} fdx_17: int;
  var {:pointer} DevObj_6: int;
  var {:pointer} Irp_28: int;

  anon0:
    DevObj_6 := actual_DevObj_6;
    Irp_28 := actual_Irp_28;
    assume {:nonnull} DevObj_6 != 0;
    assume DevObj_6 > 0;
    havoc fdx_17;
    assume {:nonnull} fdx_17 != 0;
    assume fdx_17 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 1607} Tmp_1028 := PptFdoPnp(DevObj_6, Irp_28);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    call {:si_unique_call 1608} Tmp_1028 := PptPdoPnp(DevObj_6, Irp_28);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PptFdoRead"} PptFdoRead(actual_Fdo_7: int, actual_Irp_29: int) returns (Tmp_1030: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1030 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoRead"} PptFdoRead(actual_Fdo_7: int, actual_Irp_29: int) returns (Tmp_1030: int)
{
  var {:pointer} Irp_29: int;
  var vslice_dummy_var_165: int;

  anon0:
    Irp_29 := actual_Irp_29;
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    havoc vslice_dummy_var_165;
    call {:si_unique_call 1609} Tmp_1030 := P4CompleteRequest(Irp_29, -1073741637, vslice_dummy_var_165);
    return;
}



procedure {:origName "PptDispatchSetInformation"} PptDispatchSetInformation(actual_DevObj_7: int, actual_Irp_30: int) returns (Tmp_1032: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1032 == -1073741637 || Tmp_1032 == -1073741130 || Tmp_1032 == 0 || Tmp_1032 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchSetInformation"} PptDispatchSetInformation(actual_DevObj_7: int, actual_Irp_30: int) returns (Tmp_1032: int)
{
  var {:pointer} fdx_18: int;
  var {:pointer} DevObj_7: int;
  var {:pointer} Irp_30: int;

  anon0:
    DevObj_7 := actual_DevObj_7;
    Irp_30 := actual_Irp_30;
    assume {:nonnull} DevObj_7 != 0;
    assume DevObj_7 > 0;
    havoc fdx_18;
    assume {:nonnull} fdx_18 != 0;
    assume fdx_18 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1610} Tmp_1032 := PptFdoSetInformation(DevObj_7, Irp_30);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1611} Tmp_1032 := PptPdoSetInformation(DevObj_7, Irp_30);
    goto L1;
}



procedure {:origName "PptDispatchPower"} PptDispatchPower(actual_DevObj_8: int, actual_Irp_31: int) returns (Tmp_1034: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchPower"} PptDispatchPower(actual_DevObj_8: int, actual_Irp_31: int) returns (Tmp_1034: int)
{
  var {:pointer} fdx_19: int;
  var {:pointer} DevObj_8: int;
  var {:pointer} Irp_31: int;

  anon0:
    DevObj_8 := actual_DevObj_8;
    Irp_31 := actual_Irp_31;
    assume {:nonnull} DevObj_8 != 0;
    assume DevObj_8 > 0;
    havoc fdx_19;
    assume {:nonnull} fdx_19 != 0;
    assume fdx_19 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1612} Tmp_1034 := PptFdoPower(DevObj_8, Irp_31);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1613} Tmp_1034 := PptPdoPower(DevObj_8, Irp_31);
    goto L1;
}



procedure {:origName "PptFdoWrite"} PptFdoWrite(actual_Fdo_8: int, actual_Irp_32: int) returns (Tmp_1036: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1036 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoWrite"} PptFdoWrite(actual_Fdo_8: int, actual_Irp_32: int) returns (Tmp_1036: int)
{
  var {:pointer} Irp_32: int;
  var vslice_dummy_var_166: int;

  anon0:
    Irp_32 := actual_Irp_32;
    assume {:nonnull} Irp_32 != 0;
    assume Irp_32 > 0;
    havoc vslice_dummy_var_166;
    call {:si_unique_call 1614} Tmp_1036 := P4CompleteRequest(Irp_32, -1073741637, vslice_dummy_var_166);
    return;
}



procedure {:origName "PptDispatchSystemControl"} PptDispatchSystemControl(actual_DevObj_9: int, actual_Irp_33: int) returns (Tmp_1038: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchSystemControl"} PptDispatchSystemControl(actual_DevObj_9: int, actual_Irp_33: int) returns (Tmp_1038: int)
{
  var {:pointer} fdx_20: int;
  var {:pointer} DevObj_9: int;
  var {:pointer} Irp_33: int;

  anon0:
    DevObj_9 := actual_DevObj_9;
    Irp_33 := actual_Irp_33;
    assume {:nonnull} DevObj_9 != 0;
    assume DevObj_9 > 0;
    havoc fdx_20;
    assume {:nonnull} fdx_20 != 0;
    assume fdx_20 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1615} Tmp_1038 := PptFdoSystemControl(DevObj_9, Irp_33);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1616} Tmp_1038 := PptPdoSystemControl(DevObj_9, Irp_33);
    goto L1;
}



procedure {:origName "PptDispatchQueryInformation"} PptDispatchQueryInformation(actual_DevObj_10: int, actual_Irp_34: int) returns (Tmp_1040: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1040 == -1073741637 || Tmp_1040 == -1073741130 || Tmp_1040 == -1073741789 || Tmp_1040 == 0 || Tmp_1040 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchQueryInformation"} PptDispatchQueryInformation(actual_DevObj_10: int, actual_Irp_34: int) returns (Tmp_1040: int)
{
  var {:pointer} fdx_21: int;
  var {:pointer} DevObj_10: int;
  var {:pointer} Irp_34: int;

  anon0:
    DevObj_10 := actual_DevObj_10;
    Irp_34 := actual_Irp_34;
    assume {:nonnull} DevObj_10 != 0;
    assume DevObj_10 > 0;
    havoc fdx_21;
    assume {:nonnull} fdx_21 != 0;
    assume fdx_21 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1617} Tmp_1040 := PptFdoQueryInformation(DevObj_10, Irp_34);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1618} Tmp_1040 := PptPdoQueryInformation(DevObj_10, Irp_34);
    goto L1;
}



procedure {:origName "PptDispatchCleanup"} PptDispatchCleanup(actual_DevObj_11: int, actual_Irp_35: int) returns (Tmp_1042: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1042 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDispatchCleanup"} PptDispatchCleanup(actual_DevObj_11: int, actual_Irp_35: int) returns (Tmp_1042: int)
{
  var {:pointer} fdx_22: int;
  var {:pointer} DevObj_11: int;
  var {:pointer} Irp_35: int;

  anon0:
    DevObj_11 := actual_DevObj_11;
    Irp_35 := actual_Irp_35;
    assume {:nonnull} DevObj_11 != 0;
    assume DevObj_11 > 0;
    havoc fdx_22;
    assume {:nonnull} fdx_22 != 0;
    assume fdx_22 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1619} Tmp_1042 := PptFdoCleanup(DevObj_11, Irp_35);
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1620} Tmp_1042 := PptPdoCleanup(DevObj_11, Irp_35);
    goto L1;
}



procedure {:origName "PptFdoQueryInformation"} PptFdoQueryInformation(actual_Fdo_9: int, actual_Irp_36: int) returns (Tmp_1044: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1044 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoQueryInformation"} PptFdoQueryInformation(actual_Fdo_9: int, actual_Irp_36: int) returns (Tmp_1044: int)
{
  var {:pointer} Irp_36: int;
  var vslice_dummy_var_167: int;

  anon0:
    Irp_36 := actual_Irp_36;
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    havoc vslice_dummy_var_167;
    call {:si_unique_call 1621} Tmp_1044 := P4CompleteRequest(Irp_36, -1073741637, vslice_dummy_var_167);
    return;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_314: int;

  anon0:
    call {:si_unique_call 1622} vslice_dummy_var_314 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoPower"} PptPdoPower(actual_Pdo_10: int, actual_Irp_37: int) returns (Tmp_1048: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoPower"} PptPdoPower(actual_Pdo_10: int, actual_Irp_37: int) returns (Tmp_1048: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:pointer} irpSp_2: int;
  var {:pointer} pdx_11: int;
  var {:scalar} powerState_2: int;
  var {:scalar} sdv: int;
  var {:scalar} status_35: int;
  var {:scalar} info: int;
  var {:scalar} minorFunction: int;
  var {:scalar} powerType_2: int;
  var {:pointer} Pdo_10: int;
  var {:pointer} Irp_37: int;
  var vslice_dummy_var_315: int;

  anon0:
    call {:si_unique_call 1623} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1624} sdv := __HAVOC_malloc(8);
    Pdo_10 := actual_Pdo_10;
    Irp_37 := actual_Irp_37;
    assume {:nonnull} Pdo_10 != 0;
    assume Pdo_10 > 0;
    havoc pdx_11;
    call {:si_unique_call 1625} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_37);
    assume {:nonnull} Irp_37 != 0;
    assume Irp_37 > 0;
    havoc info;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    havoc powerType_2;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    havoc minorFunction;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} minorFunction != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} minorFunction == 3;
    status_35 := 0;
    goto L24;

  L24:
    call {:si_unique_call 1626} PoStartNextPowerIrp(0);
    call {:si_unique_call 1627} vslice_dummy_var_315 := P4CompleteRequest(Irp_37, status_35, info);
    Tmp_1048 := status_35;
    return;

  anon10_Then:
    assume {:partition} minorFunction != 3;
    assume {:nonnull} Irp_37 != 0;
    assume Irp_37 > 0;
    havoc status_35;
    goto L24;

  anon12_Then:
    assume {:partition} minorFunction == 2;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} powerType_2 != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} powerType_2 == 1;
    call {:si_unique_call 1628} structPtr888sdv := PoSetPowerState(0, powerType_2, powerState_2);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} pdx_11 != 0;
    assume pdx_11 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    status_35 := 0;
    goto L24;

  anon11_Then:
    assume {:partition} powerType_2 != 1;
    assume {:nonnull} Irp_37 != 0;
    assume Irp_37 > 0;
    havoc status_35;
    goto L24;

  anon9_Then:
    assume {:partition} powerType_2 == 0;
    status_35 := 0;
    goto L24;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_316: int;

  anon0:
    call {:si_unique_call 1629} vslice_dummy_var_316 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoCleanup"} PptFdoCleanup(actual_DeviceObject_20: int, actual_Irp_38: int) returns (Tmp_1052: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1052 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoCleanup"} PptFdoCleanup(actual_DeviceObject_20: int, actual_Irp_38: int) returns (Tmp_1052: int)
{
  var {:pointer} Tmp_1053: int;
  var {:scalar} cancelIrql: int;
  var {:scalar} sdv_720: int;
  var {:pointer} sdv_721: int;
  var {:pointer} fdx_23: int;
  var {:pointer} nextIrp: int;
  var {:pointer} DeviceObject_20: int;
  var {:pointer} Irp_38: int;
  var vslice_dummy_var_168: int;

  anon0:
    DeviceObject_20 := actual_DeviceObject_20;
    Irp_38 := actual_Irp_38;
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    havoc fdx_23;
    assume {:nonnull} fdx_23 != 0;
    assume fdx_23 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L12;

  L12:
    call {:si_unique_call 1630} Tmp_1052 := P4CompleteRequest(Irp_38, 0, 0);
    return;

  anon6_Then:
    call {:si_unique_call 1631} Tmp_1053 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1053 != 0;
    assume Tmp_1053 > 0;
    Mem_T.INT4[Tmp_1053] := cancelIrql;
    call {:si_unique_call 1632} IoAcquireCancelSpinLock(Tmp_1053);
    assume {:nonnull} Tmp_1053 != 0;
    assume Tmp_1053 > 0;
    cancelIrql := Mem_T.INT4[Tmp_1053];
    goto L16;

  L16:
    call {:si_unique_call 1633} Tmp_1053, cancelIrql, sdv_720, sdv_721, nextIrp := PptFdoCleanup_loop_L16(Tmp_1053, cancelIrql, sdv_720, sdv_721, fdx_23, nextIrp, DeviceObject_20);
    goto L16_last;

  L16_last:
    call {:si_unique_call 1639} sdv_720 := sdv_IsListEmpty(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_720 != 0;
    call {:si_unique_call 1634} IoReleaseCancelSpinLock(cancelIrql);
    goto L12;

  anon5_Then:
    assume {:partition} sdv_720 == 0;
    assume {:nonnull} fdx_23 != 0;
    assume fdx_23 > 0;
    havoc vslice_dummy_var_168;
    call {:si_unique_call 1635} sdv_721 := sdv_containing_record(vslice_dummy_var_168, 88);
    nextIrp := sdv_721;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(nextIrp)] := cancelIrql;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 1636} PptCancelRoutine(DeviceObject_20, nextIrp);
    call {:si_unique_call 1637} Tmp_1053 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1053 != 0;
    assume Tmp_1053 > 0;
    Mem_T.INT4[Tmp_1053] := cancelIrql;
    call {:si_unique_call 1638} IoAcquireCancelSpinLock(Tmp_1053);
    assume {:nonnull} Tmp_1053 != 0;
    assume Tmp_1053 > 0;
    cancelIrql := Mem_T.INT4[Tmp_1053];
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    assume false;
    return;
}



procedure {:origName "_sdv_init36"} _sdv_init36();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init36"} _sdv_init36()
{
  var vslice_dummy_var_317: int;

  anon0:
    call {:si_unique_call 1640} vslice_dummy_var_317 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptLogError"} PptLogError(actual_DriverObject_4: int, actual_DeviceObject_21: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptLogError"} PptLogError(actual_DriverObject_4: int, actual_DeviceObject_21: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int)
{
  var {:scalar} P1: int;
  var {:scalar} P2: int;
  var {:pointer} sdv_722: int;
  var {:scalar} Tmp_1058: int;
  var {:scalar} DumpToAllocate: int;
  var {:pointer} ErrorLogEntry: int;
  var {:pointer} DriverObject_4: int;
  var {:pointer} DeviceObject_21: int;
  var {:pointer} structPtr888P1: int;
  var {:pointer} structPtr888P2: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var vslice_dummy_var_318: int;

  anon0:
    call {:si_unique_call 1641} P1 := __HAVOC_malloc(20);
    call {:si_unique_call 1642} P2 := __HAVOC_malloc(20);
    call {:si_unique_call 1643} vslice_dummy_var_318 := __HAVOC_malloc(4);
    DriverObject_4 := actual_DriverObject_4;
    DeviceObject_21 := actual_DeviceObject_21;
    structPtr888P1 := actual_structPtr888P1;
    structPtr888P2 := actual_structPtr888P2;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} DeviceObject_21 != 0;
    goto L9;

  L9:
    DumpToAllocate := 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L12;

  L12:
    DumpToAllocate := 8;
    goto L13;

  L13:
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L15;

  L15:
    DumpToAllocate := DumpToAllocate + 8;
    goto L16;

  L16:
    Tmp_1058 := 48 + DumpToAllocate;
    call {:si_unique_call 1644} sdv_722 := IoAllocateErrorLogEntry(0, Tmp_1058);
    ErrorLogEntry := sdv_722;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} ErrorLogEntry != 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} DumpToAllocate != 0;
    call {:si_unique_call 1645} sdv_RtlCopyMemory(0, 0, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} DumpToAllocate > 8;
    assume {:nonnull} ErrorLogEntry != 0;
    assume ErrorLogEntry > 0;
    call {:si_unique_call 1646} sdv_RtlCopyMemory(0, 0, 8);
    goto L31;

  L31:
    call {:si_unique_call 1647} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:partition} 8 >= DumpToAllocate;
    goto L31;

  anon24_Then:
    assume {:partition} DumpToAllocate == 0;
    goto L31;

  anon23_Then:
    assume {:partition} ErrorLogEntry == 0;
    goto L1;

  anon19_Then:
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L16;

  anon20_Then:
    goto L15;

  anon22_Then:
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L13;

  anon18_Then:
    goto L12;

  anon17_Then:
    assume {:partition} DeviceObject_21 == 0;
    goto L9;
}



procedure {:origName "_sdv_init37"} _sdv_init37();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init37"} _sdv_init37()
{
  var vslice_dummy_var_319: int;

  anon0:
    call {:si_unique_call 1648} vslice_dummy_var_319 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init33"} _sdv_init33();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init33"} _sdv_init33()
{
  var vslice_dummy_var_320: int;

  anon0:
    call {:si_unique_call 1649} vslice_dummy_var_320 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoInternalDeviceControl"} PptFdoInternalDeviceControl(actual_DeviceObject_22: int, actual_Irp_39: int) returns (Tmp_1064: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoInternalDeviceControl"} PptFdoInternalDeviceControl(actual_DeviceObject_22: int, actual_Irp_39: int) returns (Tmp_1064: int)
{
  var {:pointer} PnpInfo: int;
  var {:scalar} DisconnectContext: int;
  var {:scalar} sdv_724: int;
  var {:scalar} ListContext: int;
  var {:pointer} Tmp_1065: int;
  var {:scalar} Status_12: int;
  var {:pointer} MorePortInfo: int;
  var {:scalar} DisconnectInterrupt: int;
  var {:pointer} Tmp_1066: int;
  var {:pointer} IrpSp_3: int;
  var {:pointer} InterruptInfo: int;
  var {:pointer} PortInfo_1: int;
  var {:pointer} Tmp_1067: int;
  var {:pointer} Extension_48: int;
  var {:pointer} IsrInfo: int;
  var {:pointer} sdv_737: int;
  var {:scalar} Tmp_1068: int;
  var {:scalar} Tmp_1069: int;
  var {:scalar} CancelIrql: int;
  var {:pointer} Tmp_1070: int;
  var {:scalar} SyncContext: int;
  var {:dopa} {:scalar} EnableConnectInterruptIoctl: int;
  var {:pointer} IsrListEntry: int;
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Irp_39: int;
  var boogieTmp: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;

  anon0:
    call {:si_unique_call 1650} DisconnectContext := __HAVOC_malloc(8);
    call {:si_unique_call 1651} ListContext := __HAVOC_malloc(8);
    call {:si_unique_call 1652} SyncContext := __HAVOC_malloc(8);
    call {:si_unique_call 1653} EnableConnectInterruptIoctl := __HAVOC_malloc(4);
    DeviceObject_22 := actual_DeviceObject_22;
    Irp_39 := actual_Irp_39;
    call {:si_unique_call 1654} Tmp_1070 := __HAVOC_malloc(112);
    assume {:nonnull} DeviceObject_22 != 0;
    assume DeviceObject_22 > 0;
    havoc Extension_48;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc vslice_dummy_var_169;
    call {:si_unique_call 1655} Tmp_1064 := P4CompleteRequest(Irp_39, -1073741738, vslice_dummy_var_169);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon124_Then:
    call {:si_unique_call 1656} Status_12 := PptAcquireRemoveLockOrFailIrp(DeviceObject_22, Irp_39);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} Status_12 >= 0;
    call {:si_unique_call 1657} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_39);
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    Status_12 := 0;
    goto L59;

  L59:
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} Status_12 != 259;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    call {:si_unique_call 1658} vslice_dummy_var_321 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(Extension_48), Irp_39);
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc vslice_dummy_var_170;
    call {:si_unique_call 1659} vslice_dummy_var_322 := P4CompleteRequest(Irp_39, Status_12, vslice_dummy_var_170);
    goto L60;

  L60:
    Tmp_1064 := Status_12;
    goto L1;

  anon96_Then:
    assume {:partition} Status_12 == 259;
    goto L60;

  anon110_Then:
    Status_12 := -1073741811;
    goto L59;

  anon111_Then:
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    Status_12 := 0;
    goto L59;

  anon112_Then:
    call {:si_unique_call 1660} PptFreePort#1(Extension_48);
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    call {:si_unique_call 1661} vslice_dummy_var_323 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(Extension_48), Irp_39);
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc vslice_dummy_var_171;
    call {:si_unique_call 1662} Tmp_1064 := P4CompleteRequest(Irp_39, 0, vslice_dummy_var_171);
    goto L1;

  anon113_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    Status_12 := -1073741789;
    goto L59;

  anon95_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc vslice_dummy_var_172;
    call {:si_unique_call 1663} Status_12 := PptDeselectDevice(Extension_48, vslice_dummy_var_172);
    goto L59;

  anon114_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    Status_12 := -1073741789;
    goto L59;

  anon94_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    Status_12 := -1073741536;
    goto L59;

  anon97_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc vslice_dummy_var_173;
    call {:si_unique_call 1664} Status_12 := PptTrySelectDevice#1(Extension_48, vslice_dummy_var_173);
    call {:si_unique_call 1665} Tmp_1066 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    Mem_T.INT4[Tmp_1066] := CancelIrql;
    call {:si_unique_call 1666} IoAcquireCancelSpinLock(Tmp_1066);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    CancelIrql := Mem_T.INT4[Tmp_1066];
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} Status_12 == 259;
    call {:si_unique_call 1667} vslice_dummy_var_324 := PptSetCancelRoutine(Irp_39, li2bplFunctionConstant197);
    call {:si_unique_call 1668} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    call {:si_unique_call 1669} vslice_dummy_var_325 := sdv_InsertTailList(WorkQueue__FDO_EXTENSION(Extension_48), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_39))));
    goto L94;

  L94:
    call {:si_unique_call 1670} IoReleaseCancelSpinLock(CancelIrql);
    goto L59;

  anon98_Then:
    assume {:partition} Status_12 != 259;
    goto L94;

  anon115_Then:
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    call {:si_unique_call 1671} boogieTmp := PptInitiate1284_3(Extension_48);
    Status_12 := 0;
    goto L59;

  anon116_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    Status_12 := -1073741789;
    goto L59;

  anon93_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc PnpInfo;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PnpInfo != 0;
    assume PnpInfo > 0;
    Status_12 := 0;
    goto L59;

  anon117_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    Status_12 := -1073741789;
    goto L59;

  anon92_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc Tmp_1065;
    assume {:nonnull} Tmp_1065 != 0;
    assume Tmp_1065 > 0;
    havoc Tmp_1069;
    call {:si_unique_call 1672} Status_12 := PptClearChipMode(Extension_48, Tmp_1069);
    goto L59;

  anon118_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    Status_12 := -1073741789;
    goto L59;

  anon91_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc Tmp_1067;
    assume {:nonnull} Tmp_1067 != 0;
    assume Tmp_1067 > 0;
    havoc Tmp_1068;
    call {:si_unique_call 1673} Status_12 := PptSetChipMode(Extension_48, Tmp_1068);
    goto L59;

  anon119_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    Status_12 := -1073741789;
    goto L59;

  anon90_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc MorePortInfo;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} MorePortInfo != 0;
    assume MorePortInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} MorePortInfo != 0;
    assume MorePortInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} MorePortInfo != 0;
    assume MorePortInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} MorePortInfo != 0;
    assume MorePortInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} MorePortInfo != 0;
    assume MorePortInfo > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} MorePortInfo != 0;
    assume MorePortInfo > 0;
    Status_12 := 0;
    goto L59;

  anon120_Then:
    Status_12 := 0;
    goto L59;

  anon121_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    Status_12 := -1073741789;
    goto L59;

  anon89_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc IsrInfo;
    call {:si_unique_call 1674} Tmp_1066 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    Mem_T.INT4[Tmp_1066] := CancelIrql;
    call {:si_unique_call 1675} IoAcquireCancelSpinLock(Tmp_1066);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    CancelIrql := Mem_T.INT4[Tmp_1066];
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    call {:si_unique_call 1676} IoReleaseCancelSpinLock(CancelIrql);
    assume {:nonnull} DisconnectContext != 0;
    assume DisconnectContext > 0;
    assume {:nonnull} DisconnectContext != 0;
    assume DisconnectContext > 0;
    call {:si_unique_call 1677} sdv_724 := KeSynchronizeExecution(0, li2bplFunctionConstant196, 0);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_724 != 0;
    Status_12 := 0;
    call {:si_unique_call 1678} Tmp_1066 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    Mem_T.INT4[Tmp_1066] := CancelIrql;
    call {:si_unique_call 1679} IoAcquireCancelSpinLock(Tmp_1066);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    CancelIrql := Mem_T.INT4[Tmp_1066];
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    DisconnectInterrupt := 0;
    goto L168;

  L168:
    call {:si_unique_call 1680} IoReleaseCancelSpinLock(CancelIrql);
    goto L171;

  L171:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} DisconnectInterrupt != 0;
    call {:si_unique_call 1681} PptDisconnectInterrupt(Extension_48);
    goto L59;

  anon101_Then:
    assume {:partition} DisconnectInterrupt == 0;
    goto L59;

  anon129_Then:
    DisconnectInterrupt := 1;
    goto L168;

  anon100_Then:
    assume {:partition} sdv_724 == 0;
    Status_12 := -1073741811;
    DisconnectInterrupt := 0;
    goto L171;

  anon99_Then:
    call {:si_unique_call 1682} IoReleaseCancelSpinLock(CancelIrql);
    DisconnectInterrupt := 0;
    Status_12 := -1073741811;
    goto L171;

  anon122_Then:
    assume {:nonnull} EnableConnectInterruptIoctl != 0;
    assume EnableConnectInterruptIoctl > 0;
    Mem_T.INT4[EnableConnectInterruptIoctl] := 0;
    Tmp_1070 := strConst__li2bpl36;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    havoc vslice_dummy_var_174;
    call {:si_unique_call 1683} vslice_dummy_var_330 := PptRegGetDeviceParameterDword(vslice_dummy_var_174, Tmp_1070, EnableConnectInterruptIoctl);
    assume {:nonnull} EnableConnectInterruptIoctl != 0;
    assume EnableConnectInterruptIoctl > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} Mem_T.INT4[EnableConnectInterruptIoctl] != 0;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    goto L186;

  L186:
    Status_12 := -1073741789;
    goto L59;

  anon103_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc IsrInfo;
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc InterruptInfo;
    call {:si_unique_call 1684} Tmp_1066 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    Mem_T.INT4[Tmp_1066] := CancelIrql;
    call {:si_unique_call 1685} IoAcquireCancelSpinLock(Tmp_1066);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    CancelIrql := Mem_T.INT4[Tmp_1066];
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    call {:si_unique_call 1686} IoReleaseCancelSpinLock(CancelIrql);
    Status_12 := 0;
    goto L202;

  L202:
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} Status_12 >= 0;
    call {:si_unique_call 1687} sdv_737 := ExAllocatePoolWithTag(512, 24, -797810352);
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} yogi_error != 1;
    IsrListEntry := sdv_737;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} IsrInfo != 0;
    assume IsrInfo > 0;
    assume {:nonnull} IsrListEntry != 0;
    assume IsrListEntry > 0;
    assume {:nonnull} IsrInfo != 0;
    assume IsrInfo > 0;
    assume {:nonnull} IsrListEntry != 0;
    assume IsrListEntry > 0;
    assume {:nonnull} IsrInfo != 0;
    assume IsrInfo > 0;
    assume {:nonnull} IsrListEntry != 0;
    assume IsrListEntry > 0;
    assume {:nonnull} IsrInfo != 0;
    assume IsrInfo > 0;
    assume {:nonnull} IsrListEntry != 0;
    assume IsrListEntry > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} ListContext != 0;
    assume ListContext > 0;
    assume {:nonnull} IsrListEntry != 0;
    assume IsrListEntry > 0;
    assume {:nonnull} ListContext != 0;
    assume ListContext > 0;
    call {:si_unique_call 1688} vslice_dummy_var_331 := KeSynchronizeExecution(0, li2bplFunctionConstant195, 0);
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} InterruptInfo != 0;
    assume InterruptInfo > 0;
    assume {:nonnull} InterruptInfo != 0;
    assume InterruptInfo > 0;
    assume {:nonnull} InterruptInfo != 0;
    assume InterruptInfo > 0;
    assume {:nonnull} InterruptInfo != 0;
    assume InterruptInfo > 0;
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    Status_12 := 0;
    goto L59;

  anon128_Then:
    Status_12 := -1073741670;
    goto L59;

  anon127_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon106_Then:
    assume {:partition} 0 > Status_12;
    goto L59;

  anon105_Then:
    call {:si_unique_call 1689} IoReleaseCancelSpinLock(CancelIrql);
    call {:si_unique_call 1690} Status_12 := PptConnectInterrupt(Extension_48);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} Status_12 >= 0;
    call {:si_unique_call 1691} Tmp_1066 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    Mem_T.INT4[Tmp_1066] := CancelIrql;
    call {:si_unique_call 1692} IoAcquireCancelSpinLock(Tmp_1066);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    CancelIrql := Mem_T.INT4[Tmp_1066];
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    call {:si_unique_call 1693} IoReleaseCancelSpinLock(CancelIrql);
    goto L202;

  anon107_Then:
    assume {:partition} 0 > Status_12;
    goto L202;

  anon104_Then:
    goto L186;

  anon102_Then:
    assume {:partition} Mem_T.INT4[EnableConnectInterruptIoctl] == 0;
    Status_12 := -1073741823;
    goto L59;

  anon123_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    Status_12 := -1073741789;
    goto L59;

  anon88_Then:
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    havoc PortInfo_1;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} PortInfo_1 != 0;
    assume PortInfo_1 > 0;
    Status_12 := 0;
    goto L59;

  anon125_Then:
    call {:si_unique_call 1694} Tmp_1066 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    Mem_T.INT4[Tmp_1066] := CancelIrql;
    call {:si_unique_call 1695} IoAcquireCancelSpinLock(Tmp_1066);
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    CancelIrql := Mem_T.INT4[Tmp_1066];
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    Status_12 := -1073741536;
    goto L246;

  L246:
    call {:si_unique_call 1696} IoReleaseCancelSpinLock(CancelIrql);
    goto L59;

  anon108_Then:
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} SyncContext != 0;
    assume SyncContext > 0;
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    call {:si_unique_call 1697} vslice_dummy_var_327 := KeSynchronizeExecution(0, li2bplFunctionConstant192, 0);
    goto L257;

  L257:
    assume {:nonnull} SyncContext != 0;
    assume SyncContext > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    call {:si_unique_call 1698} vslice_dummy_var_328 := PptSetCancelRoutine(Irp_39, li2bplFunctionConstant197);
    call {:si_unique_call 1699} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    assume {:nonnull} Irp_39 != 0;
    assume Irp_39 > 0;
    call {:si_unique_call 1700} vslice_dummy_var_329 := sdv_InsertTailList(WorkQueue__FDO_EXTENSION(Extension_48), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_39))));
    Status_12 := 259;
    goto L246;

  anon109_Then:
    assume {:nonnull} Extension_48 != 0;
    assume Extension_48 > 0;
    Status_12 := 0;
    goto L246;

  anon126_Then:
    call {:si_unique_call 1701} vslice_dummy_var_326 := PptSynchronizedIncrement(SyncContext);
    goto L257;

  anon87_Then:
    assume {:partition} 0 > Status_12;
    Tmp_1064 := Status_12;
    goto L1;
}



procedure {:origName "_sdv_init21"} _sdv_init21();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init21"} _sdv_init21()
{
  var vslice_dummy_var_332: int;

  anon0:
    call {:si_unique_call 1702} vslice_dummy_var_332 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoCleanup"} PptPdoCleanup(actual_DeviceObject_23: int, actual_Irp_40: int) returns (Tmp_1073: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1073 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoCleanup"} PptPdoCleanup(actual_DeviceObject_23: int, actual_Irp_40: int) returns (Tmp_1073: int)
{
  var {:pointer} Tmp_1074: int;
  var {:scalar} sdv_742: int;
  var {:pointer} pdx_12: int;
  var {:pointer} sdv_743: int;
  var {:pointer} CurrentLastIrp: int;
  var {:pointer} Tmp_1075: int;
  var {:scalar} CancelRoutine_1: int;
  var {:scalar} CancelIrql_1: int;
  var {:pointer} DeviceObject_23: int;
  var {:pointer} Irp_40: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_175: int;

  anon0:
    DeviceObject_23 := actual_DeviceObject_23;
    Irp_40 := actual_Irp_40;
    assume {:nonnull} DeviceObject_23 != 0;
    assume DeviceObject_23 > 0;
    havoc pdx_12;
    call {:si_unique_call 1703} Tmp_1075 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1075 != 0;
    assume Tmp_1075 > 0;
    Mem_T.INT4[Tmp_1075] := CancelIrql_1;
    call {:si_unique_call 1704} IoAcquireCancelSpinLock(Tmp_1075);
    assume {:nonnull} Tmp_1075 != 0;
    assume Tmp_1075 > 0;
    CancelIrql_1 := Mem_T.INT4[Tmp_1075];
    goto L11;

  L11:
    call {:si_unique_call 1705} sdv_742, sdv_743, CurrentLastIrp, Tmp_1075, CancelRoutine_1, CancelIrql_1, vslice_dummy_var_334 := PptPdoCleanup_loop_L11(sdv_742, pdx_12, sdv_743, CurrentLastIrp, Tmp_1075, CancelRoutine_1, CancelIrql_1, DeviceObject_23, vslice_dummy_var_334);
    goto L11_last;

  L11_last:
    call {:si_unique_call 1714} sdv_742 := sdv_IsListEmpty(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_742 != 0;
    assume {:nonnull} pdx_12 != 0;
    assume pdx_12 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} pdx_12 != 0;
    assume pdx_12 > 0;
    havoc Tmp_1074;
    assume {:nonnull} Tmp_1074 != 0;
    assume Tmp_1074 > 0;
    goto L19;

  L19:
    call {:si_unique_call 1706} IoReleaseCancelSpinLock(CancelIrql_1);
    call {:si_unique_call 1707} vslice_dummy_var_333 := P4CompleteRequest(Irp_40, 0, 0);
    Tmp_1073 := 0;
    return;

  anon8_Then:
    goto L19;

  anon7_Then:
    assume {:partition} sdv_742 == 0;
    assume {:nonnull} pdx_12 != 0;
    assume pdx_12 > 0;
    havoc vslice_dummy_var_175;
    call {:si_unique_call 1708} sdv_743 := sdv_containing_record(vslice_dummy_var_175, 88);
    CurrentLastIrp := sdv_743;
    call {:si_unique_call 1709} vslice_dummy_var_334 := sdv_RemoveEntryList(0);
    assume {:nonnull} CurrentLastIrp != 0;
    assume CurrentLastIrp > 0;
    havoc CancelRoutine_1;
    assume {:nonnull} CurrentLastIrp != 0;
    assume CurrentLastIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(CurrentLastIrp)] := CancelIrql_1;
    assume {:nonnull} CurrentLastIrp != 0;
    assume CurrentLastIrp > 0;
    assume {:nonnull} CurrentLastIrp != 0;
    assume CurrentLastIrp > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:IndirectCall} true;
    assume CancelRoutine_1 == li2bplFunctionConstant229;
    call {:si_unique_call 1710} ParCancelRequest(DeviceObject_23, CurrentLastIrp);
    goto L38;

  L38:
    call {:si_unique_call 1711} Tmp_1075 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1075 != 0;
    assume Tmp_1075 > 0;
    Mem_T.INT4[Tmp_1075] := CancelIrql_1;
    call {:si_unique_call 1712} IoAcquireCancelSpinLock(Tmp_1075);
    assume {:nonnull} Tmp_1075 != 0;
    assume Tmp_1075 > 0;
    CancelIrql_1 := Mem_T.INT4[Tmp_1075];
    goto L38_dummy;

  L38_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:IndirectCall} true;
    assume CancelRoutine_1 == li2bplFunctionConstant197;
    call {:si_unique_call 1713} PptCancelRoutine(DeviceObject_23, CurrentLastIrp);
    goto L38;
}



procedure {:origName "PptPdoSetInformation"} PptPdoSetInformation(actual_DeviceObject_24: int, actual_Irp_41: int) returns (Tmp_1076: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1076 == -1073741130 || Tmp_1076 == 0 || Tmp_1076 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoSetInformation"} PptPdoSetInformation(actual_DeviceObject_24: int, actual_Irp_41: int) returns (Tmp_1076: int)
{
  var {:scalar} fileInfoClass: int;
  var {:scalar} Status_13: int;
  var {:pointer} sdv_747: int;
  var {:pointer} Extension_49: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} Irp_41: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;

  anon0:
    DeviceObject_24 := actual_DeviceObject_24;
    Irp_41 := actual_Irp_41;
    assume {:nonnull} DeviceObject_24 != 0;
    assume DeviceObject_24 > 0;
    havoc Extension_49;
    assume {:nonnull} Extension_49 != 0;
    assume Extension_49 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} Irp_41 != 0;
    assume Irp_41 > 0;
    havoc vslice_dummy_var_176;
    call {:si_unique_call 1715} Tmp_1076 := P4CompleteRequest(Irp_41, -1073741130, vslice_dummy_var_176);
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:nonnull} Irp_41 != 0;
    assume Irp_41 > 0;
    call {:si_unique_call 1716} sdv_747 := sdv_IoGetCurrentIrpStackLocation(Irp_41);
    assume {:nonnull} sdv_747 != 0;
    assume sdv_747 > 0;
    havoc fileInfoClass;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} fileInfoClass == 20;
    Status_13 := 0;
    goto L20;

  L20:
    assume {:nonnull} Irp_41 != 0;
    assume Irp_41 > 0;
    havoc vslice_dummy_var_177;
    call {:si_unique_call 1717} Tmp_1076 := P4CompleteRequest(Irp_41, Status_13, vslice_dummy_var_177);
    goto L1;

  anon6_Then:
    assume {:partition} fileInfoClass != 20;
    Status_13 := -1073741811;
    goto L20;
}



procedure {:origName "PptPdoQueryInformation"} PptPdoQueryInformation(actual_DeviceObject_25: int, actual_Irp_42: int) returns (Tmp_1078: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1078 == -1073741130 || Tmp_1078 == -1073741789 || Tmp_1078 == 0 || Tmp_1078 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryInformation"} PptPdoQueryInformation(actual_DeviceObject_25: int, actual_Irp_42: int) returns (Tmp_1078: int)
{
  var {:scalar} Status_14: int;
  var {:pointer} IrpSp_4: int;
  var {:pointer} Extension_50: int;
  var {:pointer} PosInfo: int;
  var {:pointer} StdInfo: int;
  var {:pointer} DeviceObject_25: int;
  var {:pointer} Irp_42: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_179: int;

  anon0:
    DeviceObject_25 := actual_DeviceObject_25;
    Irp_42 := actual_Irp_42;
    assume {:nonnull} DeviceObject_25 != 0;
    assume DeviceObject_25 > 0;
    havoc Extension_50;
    assume {:nonnull} Extension_50 != 0;
    assume Extension_50 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    havoc vslice_dummy_var_178;
    call {:si_unique_call 1718} vslice_dummy_var_335 := P4CompleteRequest(Irp_42, -1073741130, vslice_dummy_var_178);
    Tmp_1078 := -1073741130;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    call {:si_unique_call 1719} IrpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_42);
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    Status_14 := -1073741789;
    goto L26;

  L26:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    havoc vslice_dummy_var_179;
    call {:si_unique_call 1720} vslice_dummy_var_336 := P4CompleteRequest(Irp_42, Status_14, vslice_dummy_var_179);
    Tmp_1078 := Status_14;
    goto L1;

  anon13_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    havoc PosInfo;
    assume {:nonnull} PosInfo != 0;
    assume PosInfo > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    Status_14 := 0;
    goto L26;

  anon14_Then:
    Status_14 := -1073741811;
    goto L26;

  anon11_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Status_14 := -1073741789;
    goto L26;

  anon12_Then:
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    havoc StdInfo;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} StdInfo != 0;
    assume StdInfo > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    Status_14 := 0;
    goto L26;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_337: int;

  anon0:
    call {:si_unique_call 1721} vslice_dummy_var_337 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFindNatChip"} PptFindNatChip(actual_Fdx_6: int) returns (Tmp_1082: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFindNatChip"} PptFindNatChip(actual_Fdx_6: int) returns (Tmp_1082: int)
{
  var {:scalar} Tmp_1083: int;
  var {:scalar} Port: int;
  var {:scalar} sdv_754: int;
  var {:scalar} found: int;
  var {:pointer} ChipAddr: int;
  var {:scalar} OkToLook: int;
  var {:dopa} {:scalar} NationalChecked: int;
  var {:pointer} Tmp_1086: int;
  var {:scalar} ii: int;
  var {:pointer} PortAddr: int;
  var {:scalar} ResourcesSize: int;
  var {:scalar} Status_15: int;
  var {:scalar} sdv_756: int;
  var {:pointer} Tmp_1089: int;
  var {:scalar} sdv_758: int;
  var {:scalar} sdv_759: int;
  var {:scalar} ResourceDescriptorCount: int;
  var {:scalar} sdv_762: int;
  var {:pointer} Resources: int;
  var {:scalar} Conflict: int;
  var {:pointer} Tmp_1090: int;
  var {:dopa} {:scalar} NationalChipFound: int;
  var {:pointer} sdv_764: int;
  var {:pointer} Tmp_1091: int;
  var {:pointer} pdo_2: int;
  var {:scalar} sdv_767: int;
  var {:scalar} cr: int;
  var {:scalar} sdv_770: int;
  var {:pointer} AddrList: int;
  var {:scalar} Tmp_1094: int;
  var {:scalar} Tmp_1096: int;
  var {:pointer} Tmp_1097: int;
  var {:pointer} Fdx_6: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1722} NationalChecked := __HAVOC_malloc(4);
    call {:si_unique_call 1723} NationalChipFound := __HAVOC_malloc(4);
    Fdx_6 := actual_Fdx_6;
    call {:si_unique_call 1724} ChipAddr := __HAVOC_malloc(16);
    call {:si_unique_call 1725} Tmp_1089 := __HAVOC_malloc(72);
    call {:si_unique_call 1726} Tmp_1090 := __HAVOC_malloc(64);
    call {:si_unique_call 1727} Tmp_1091 := __HAVOC_malloc(72);
    call {:si_unique_call 1728} AddrList := __HAVOC_malloc(16);
    call {:si_unique_call 1729} Tmp_1097 := __HAVOC_malloc(64);
    found := 0;
    OkToLook := 0;
    assume {:nonnull} ChipAddr != 0;
    assume ChipAddr > 0;
    assume {:nonnull} AddrList != 0;
    assume AddrList > 0;
    assume {:nonnull} NationalChecked != 0;
    assume NationalChecked > 0;
    Mem_T.INT4[NationalChecked] := 0;
    assume {:nonnull} NationalChipFound != 0;
    assume NationalChipFound > 0;
    Mem_T.INT4[NationalChipFound] := 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    Tmp_1082 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon83_Then:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    Tmp_1090 := strConst__li2bpl38;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    havoc vslice_dummy_var_180;
    call {:si_unique_call 1730} vslice_dummy_var_340 := PptRegGetDeviceParameterDword(vslice_dummy_var_180, Tmp_1090, NationalChecked);
    assume {:nonnull} NationalChecked != 0;
    assume NationalChecked > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.INT4[NationalChecked] != 0;
    Tmp_1089 := strConst__li2bpl37;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    havoc vslice_dummy_var_181;
    call {:si_unique_call 1731} vslice_dummy_var_341 := PptRegGetDeviceParameterDword(vslice_dummy_var_181, Tmp_1089, NationalChipFound);
    assume {:nonnull} NationalChipFound != 0;
    assume NationalChipFound > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Mem_T.INT4[NationalChipFound] != 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L39;

  L39:
    Tmp_1082 := 0;
    goto L1;

  anon62_Then:
    assume {:partition} Mem_T.INT4[NationalChipFound] == 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L39;

  anon61_Then:
    assume {:partition} Mem_T.INT4[NationalChecked] == 0;
    ResourceDescriptorCount := 4;
    ResourcesSize := 36 + (ResourceDescriptorCount - 1) * 16;
    call {:si_unique_call 1732} sdv_764 := ExAllocatePoolWithTag(512, ResourcesSize, -797810352);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    Resources := sdv_764;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} Resources != 0;
    call {:si_unique_call 1733} sdv_RtlZeroMemory(0, ResourcesSize);
    Tmp_1086 := ChipAddr;
    call {:si_unique_call 1734} Status_15 := PptBuildResourceList(Fdx_6, 4, Tmp_1086, Resources);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Status_15 >= 0;
    call {:si_unique_call 1735} Status_15 := IoReportResourceUsage(0, 0, 0, 4, 0, 0, 0, 0, 0);
    call {:si_unique_call 1736} sdv_ExFreePool(0);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Status_15 >= 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Conflict != 0;
    Tmp_1082 := -1073741823;
    goto L1;

  anon65_Then:
    assume {:partition} Conflict == 0;
    ii := 0;
    goto L71;

  L71:
    call {:si_unique_call 1737} Tmp_1083, Port, sdv_754, found, OkToLook, ii, PortAddr, sdv_756, sdv_758, sdv_759, sdv_762, sdv_767, cr, sdv_770, Tmp_1094, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_344 := PptFindNatChip_loop_L71(Tmp_1083, Port, sdv_754, found, ChipAddr, OkToLook, ii, PortAddr, sdv_756, sdv_758, sdv_759, sdv_762, sdv_767, cr, sdv_770, AddrList, Tmp_1094, Fdx_6, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_344);
    goto L71_last;

  L71_last:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} found != 0;
    goto L74;

  L74:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    havoc pdo_2;
    assume {:nonnull} NationalChecked != 0;
    assume NationalChecked > 0;
    Mem_T.INT4[NationalChecked] := 1;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_1096 := 1;
    goto L79;

  L79:
    assume {:nonnull} NationalChipFound != 0;
    assume NationalChipFound > 0;
    Mem_T.INT4[NationalChipFound] := Tmp_1096;
    Tmp_1097 := strConst__li2bpl38;
    call {:si_unique_call 1738} vslice_dummy_var_342 := PptRegSetDeviceParameterDword(pdo_2, Tmp_1097, NationalChecked);
    Tmp_1091 := strConst__li2bpl37;
    call {:si_unique_call 1739} vslice_dummy_var_343 := PptRegSetDeviceParameterDword(pdo_2, Tmp_1091, NationalChipFound);
    call {:si_unique_call 1740} Status_15 := IoReportResourceUsage(0, 0, 0, 0, 0, 0, 0, 0, 0);
    Tmp_1082 := Status_15;
    goto L1;

  anon86_Then:
    Tmp_1096 := 0;
    goto L79;

  anon66_Then:
    assume {:partition} found == 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} 4 > ii;
    Tmp_1094 := ii;
    assume {:nonnull} ChipAddr != 0;
    assume ChipAddr > 0;
    havoc PortAddr;
    call {:si_unique_call 1741} sdv_759 := corral_nondet();
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} sdv_759 == 136;
    call {:si_unique_call 1742} sdv_762 := corral_nondet();
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} 32 > sdv_762;
    OkToLook := 1;
    goto L105;

  L105:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} OkToLook != 0;
    OkToLook := 0;
    call {:si_unique_call 1743} cr := corral_nondet();
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} cr == 8;
    call {:si_unique_call 1744} sdv_754 := corral_nondet();
    cr := BAND(sdv_754, BOR(BOR(BOR(16, 32), 64), 128));
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} cr == 16;
    goto L123;

  L123:
    found := 1;
    call {:si_unique_call 1745} sdv_767 := corral_nondet();
    Port := BAND(sdv_767, BOR(1, 2));
    Tmp_1083 := Port;
    assume {:nonnull} AddrList != 0;
    assume AddrList > 0;
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L106;

  L106:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} found != 0;
    goto L143;

  L143:
    ii := ii + 1;
    goto L143_dummy;

  L143_dummy:
    assume false;
    return;

  anon71_Then:
    assume {:partition} found == 0;
    call {:si_unique_call 1746} vslice_dummy_var_339 := corral_nondet();
    call {:si_unique_call 1747} sdv_770 := corral_nondet();
    cr := BAND(sdv_770, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} cr == 192;
    goto L159;

  L159:
    found := 1;
    call {:si_unique_call 1748} vslice_dummy_var_344 := corral_nondet();
    call {:si_unique_call 1749} Port := corral_nondet();
    call {:si_unique_call 1750} sdv_756 := corral_nondet();
    Port := BOR(Port, sdv_756);
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:nonnull} Fdx_6 != 0;
    assume Fdx_6 > 0;
    goto L143;

  anon90_Then:
    goto L143;

  anon89_Then:
    assume {:partition} cr != 192;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} cr != 160;
    goto L143;

  anon80_Then:
    assume {:partition} cr == 160;
    goto L159;

  anon88_Then:
    goto L106;

  anon87_Then:
    assume {:partition} cr != 16;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} cr != 80;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} cr != 112;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} cr != 48;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} cr != 32;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} cr != 144;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} cr != 176;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} cr == 96;
    goto L123;

  anon79_Then:
    assume {:partition} cr != 96;
    goto L106;

  anon78_Then:
    assume {:partition} cr == 176;
    goto L123;

  anon77_Then:
    assume {:partition} cr == 144;
    goto L123;

  anon76_Then:
    assume {:partition} cr == 32;
    goto L123;

  anon75_Then:
    assume {:partition} cr == 48;
    goto L123;

  anon74_Then:
    assume {:partition} cr == 112;
    goto L123;

  anon73_Then:
    assume {:partition} cr == 80;
    goto L123;

  anon72_Then:
    assume {:partition} cr != 8;
    goto L106;

  anon70_Then:
    assume {:partition} OkToLook == 0;
    goto L106;

  anon69_Then:
    assume {:partition} sdv_762 >= 32;
    goto L97;

  L97:
    call {:si_unique_call 1751} vslice_dummy_var_338 := corral_nondet();
    call {:si_unique_call 1752} cr := corral_nondet();
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} cr != 255;
    call {:si_unique_call 1753} sdv_758 := corral_nondet();
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} sdv_758 == cr;
    OkToLook := 1;
    goto L105;

  anon82_Then:
    assume {:partition} sdv_758 != cr;
    goto L105;

  anon81_Then:
    assume {:partition} cr == 255;
    goto L105;

  anon68_Then:
    assume {:partition} sdv_759 != 136;
    goto L97;

  anon67_Then:
    assume {:partition} ii >= 4;
    goto L74;

  anon64_Then:
    assume {:partition} 0 > Status_15;
    Tmp_1082 := Status_15;
    goto L1;

  anon63_Then:
    assume {:partition} 0 > Status_15;
    call {:si_unique_call 1754} sdv_ExFreePool(0);
    Tmp_1082 := Status_15;
    goto L1;

  anon85_Then:
    assume {:partition} Resources == 0;
    Tmp_1082 := -1073741823;
    goto L1;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init24"} _sdv_init24();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init24"} _sdv_init24()
{
  var vslice_dummy_var_345: int;

  anon0:
    call {:si_unique_call 1755} vslice_dummy_var_345 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoStartDevice"} PptPdoStartDevice(actual_Pdo_11: int, actual_Irp_43: int) returns (Tmp_1101: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1101 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoStartDevice"} PptPdoStartDevice(actual_Pdo_11: int, actual_Irp_43: int) returns (Tmp_1101: int)
{
  var {:pointer} pdx_13: int;
  var {:scalar} setActive: int;
  var {:pointer} Tmp_1102: int;
  var {:scalar} status_36: int;
  var {:pointer} Pdo_11: int;
  var {:pointer} Irp_43: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_182: int;

  anon0:
    Pdo_11 := actual_Pdo_11;
    Irp_43 := actual_Irp_43;
    call {:si_unique_call 1756} Tmp_1102 := __HAVOC_malloc(52);
    assume {:nonnull} Pdo_11 != 0;
    assume Pdo_11 > 0;
    havoc pdx_13;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    call {:si_unique_call 1757} vslice_dummy_var_346 := KeSetEvent(PauseEvent__PDO_EXTENSION(pdx_13), 0, 0);
    Tmp_1102 := strConst__li2bpl39;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    call {:si_unique_call 1758} vslice_dummy_var_347 := PptRegGetDeviceParameterDword(Pdo_11, Tmp_1102, Event22Delay__PDO_EXTENSION(pdx_13));
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    setActive := 0;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L23;

  L23:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 1 == setActive;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1759} status_36 := IoSetDeviceInterfaceState(0, 1);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status_36 == 0;
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    goto L13;

  L13:
    assume {:nonnull} Irp_43 != 0;
    assume Irp_43 > 0;
    havoc vslice_dummy_var_182;
    call {:si_unique_call 1760} Tmp_1101 := P4CompleteRequest(Irp_43, 0, vslice_dummy_var_182);
    return;

  anon16_Then:
    assume {:partition} status_36 != 0;
    goto L13;

  anon15_Then:
    goto L13;

  anon14_Then:
    assume {:partition} 1 != setActive;
    goto L13;

  anon18_Then:
    assume {:nonnull} pdx_13 != 0;
    assume pdx_13 > 0;
    call {:si_unique_call 1761} status_36 := IoRegisterDeviceInterface(0, 0, 0, DeviceInterface__PDO_EXTENSION(pdx_13));
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_36 == 0;
    setActive := 1;
    goto L23;

  anon17_Then:
    assume {:partition} status_36 != 0;
    goto L23;

  anon13_Then:
    goto L13;
}



procedure {:origName "PptPdoCancelRemove"} PptPdoCancelRemove(actual_Pdo_12: int, actual_Irp_44: int) returns (Tmp_1104: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1104 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoCancelRemove"} PptPdoCancelRemove(actual_Pdo_12: int, actual_Irp_44: int) returns (Tmp_1104: int)
{
  var {:pointer} pdx_14: int;
  var {:pointer} Pdo_12: int;
  var {:pointer} Irp_44: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_183: int;

  anon0:
    Pdo_12 := actual_Pdo_12;
    Irp_44 := actual_Irp_44;
    assume {:nonnull} Pdo_12 != 0;
    assume Pdo_12 > 0;
    havoc pdx_14;
    assume {:nonnull} pdx_14 != 0;
    assume pdx_14 > 0;
    assume {:nonnull} pdx_14 != 0;
    assume pdx_14 > 0;
    call {:si_unique_call 1762} vslice_dummy_var_348 := KeSetEvent(PauseEvent__PDO_EXTENSION(pdx_14), 0, 0);
    assume {:nonnull} Irp_44 != 0;
    assume Irp_44 > 0;
    havoc vslice_dummy_var_183;
    call {:si_unique_call 1763} Tmp_1104 := P4CompleteRequest(Irp_44, 0, vslice_dummy_var_183);
    return;
}



procedure {:origName "PptPdoQueryDeviceRelations"} PptPdoQueryDeviceRelations(actual_Pdo_13: int, actual_Irp_45: int) returns (Tmp_1106: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryDeviceRelations"} PptPdoQueryDeviceRelations(actual_Pdo_13: int, actual_Irp_45: int) returns (Tmp_1106: int)
{
  var {:pointer} Tmp_1107: int;
  var {:pointer} devRel_1: int;
  var {:pointer} irpSp_3: int;
  var {:scalar} requestType: int;
  var {:pointer} sdv_781: int;
  var {:scalar} status_37: int;
  var {:scalar} info_1: int;
  var {:pointer} Pdo_13: int;
  var {:pointer} Irp_45: int;
  var vslice_dummy_var_349: int;

  anon0:
    Pdo_13 := actual_Pdo_13;
    Irp_45 := actual_Irp_45;
    call {:si_unique_call 1764} Tmp_1107 := __HAVOC_malloc(4);
    assume {:nonnull} Pdo_13 != 0;
    assume Pdo_13 > 0;
    call {:si_unique_call 1765} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_45);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    havoc requestType;
    assume {:nonnull} Irp_45 != 0;
    assume Irp_45 > 0;
    havoc status_37;
    assume {:nonnull} Irp_45 != 0;
    assume Irp_45 > 0;
    havoc info_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 4 == requestType;
    call {:si_unique_call 1766} sdv_781 := ExAllocatePoolWithTag(1, 8, -797810352);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    devRel_1 := sdv_781;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} devRel_1 != 0;
    assume {:nonnull} devRel_1 != 0;
    assume devRel_1 > 0;
    call {:si_unique_call 1767} vslice_dummy_var_349 := sdv_ObReferenceObject(0);
    assume {:nonnull} devRel_1 != 0;
    assume devRel_1 > 0;
    havoc Tmp_1107;
    assume {:nonnull} Tmp_1107 != 0;
    assume Tmp_1107 > 0;
    status_37 := 0;
    info_1 := devRel_1;
    goto L17;

  L17:
    call {:si_unique_call 1768} Tmp_1106 := P4CompleteRequest(Irp_45, status_37, info_1);
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} devRel_1 == 0;
    status_37 := -1073741801;
    goto L17;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} 4 != requestType;
    goto L17;
}



procedure {:origName "PptPdoQueryRemove"} PptPdoQueryRemove(actual_Pdo_14: int, actual_Irp_46: int) returns (Tmp_1109: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1109 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryRemove"} PptPdoQueryRemove(actual_Pdo_14: int, actual_Irp_46: int) returns (Tmp_1109: int)
{
  var {:pointer} pdx_16: int;
  var {:pointer} Pdo_14: int;
  var {:pointer} Irp_46: int;
  var vslice_dummy_var_184: int;

  anon0:
    Pdo_14 := actual_Pdo_14;
    Irp_46 := actual_Irp_46;
    assume {:nonnull} Pdo_14 != 0;
    assume Pdo_14 > 0;
    havoc pdx_16;
    assume {:nonnull} pdx_16 != 0;
    assume pdx_16 > 0;
    assume {:nonnull} pdx_16 != 0;
    assume pdx_16 > 0;
    call {:si_unique_call 1769} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_16));
    assume {:nonnull} Irp_46 != 0;
    assume Irp_46 > 0;
    havoc vslice_dummy_var_184;
    call {:si_unique_call 1770} Tmp_1109 := P4CompleteRequest(Irp_46, 0, vslice_dummy_var_184);
    return;
}



procedure {:origName "PptPdoStopDevice"} PptPdoStopDevice(actual_Pdo_15: int, actual_Irp_47: int) returns (Tmp_1111: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1111 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoStopDevice"} PptPdoStopDevice(actual_Pdo_15: int, actual_Irp_47: int) returns (Tmp_1111: int)
{
  var {:pointer} pdx_17: int;
  var {:pointer} Pdo_15: int;
  var {:pointer} Irp_47: int;
  var vslice_dummy_var_185: int;

  anon0:
    Pdo_15 := actual_Pdo_15;
    Irp_47 := actual_Irp_47;
    assume {:nonnull} Pdo_15 != 0;
    assume Pdo_15 > 0;
    havoc pdx_17;
    assume {:nonnull} pdx_17 != 0;
    assume pdx_17 > 0;
    assume {:nonnull} pdx_17 != 0;
    assume pdx_17 > 0;
    assume {:nonnull} pdx_17 != 0;
    assume pdx_17 > 0;
    call {:si_unique_call 1771} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_17));
    assume {:nonnull} Irp_47 != 0;
    assume Irp_47 > 0;
    havoc vslice_dummy_var_185;
    call {:si_unique_call 1772} Tmp_1111 := P4CompleteRequest(Irp_47, 0, vslice_dummy_var_185);
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_350: int;

  anon0:
    call {:si_unique_call 1773} vslice_dummy_var_350 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptPdoSurpriseRemoval"} PptPdoSurpriseRemoval(actual_Pdo_16: int, actual_Irp_48: int) returns (Tmp_1115: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1115 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoSurpriseRemoval"} PptPdoSurpriseRemoval(actual_Pdo_16: int, actual_Irp_48: int) returns (Tmp_1115: int)
{
  var {:pointer} pdx_18: int;
  var {:pointer} Pdo_16: int;
  var {:pointer} Irp_48: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_186: int;

  anon0:
    Pdo_16 := actual_Pdo_16;
    Irp_48 := actual_Irp_48;
    assume {:nonnull} Pdo_16 != 0;
    assume Pdo_16 > 0;
    havoc pdx_18;
    assume {:nonnull} pdx_18 != 0;
    assume pdx_18 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} pdx_18 != 0;
    assume pdx_18 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} pdx_18 != 0;
    assume pdx_18 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 1774} vslice_dummy_var_351 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} pdx_18 != 0;
    assume pdx_18 > 0;
    goto L6;

  L6:
    assume {:nonnull} pdx_18 != 0;
    assume pdx_18 > 0;
    assume {:nonnull} pdx_18 != 0;
    assume pdx_18 > 0;
    call {:si_unique_call 1775} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_18));
    assume {:nonnull} Irp_48 != 0;
    assume Irp_48 > 0;
    havoc vslice_dummy_var_186;
    call {:si_unique_call 1776} Tmp_1115 := P4CompleteRequest(Irp_48, 0, vslice_dummy_var_186);
    return;

  anon8_Then:
    goto L6;

  anon7_Then:
    goto L6;

  anon9_Then:
    goto L6;
}



procedure {:origName "PptPdoCancelStop"} PptPdoCancelStop(actual_Pdo_17: int, actual_Irp_49: int) returns (Tmp_1117: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1117 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoCancelStop"} PptPdoCancelStop(actual_Pdo_17: int, actual_Irp_49: int) returns (Tmp_1117: int)
{
  var {:pointer} pdx_19: int;
  var {:pointer} Pdo_17: int;
  var {:pointer} Irp_49: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_187: int;

  anon0:
    Pdo_17 := actual_Pdo_17;
    Irp_49 := actual_Irp_49;
    assume {:nonnull} Pdo_17 != 0;
    assume Pdo_17 > 0;
    havoc pdx_19;
    assume {:nonnull} pdx_19 != 0;
    assume pdx_19 > 0;
    assume {:nonnull} pdx_19 != 0;
    assume pdx_19 > 0;
    call {:si_unique_call 1777} vslice_dummy_var_352 := KeSetEvent(PauseEvent__PDO_EXTENSION(pdx_19), 0, 0);
    assume {:nonnull} Irp_49 != 0;
    assume Irp_49 > 0;
    havoc vslice_dummy_var_187;
    call {:si_unique_call 1778} Tmp_1117 := P4CompleteRequest(Irp_49, 0, vslice_dummy_var_187);
    return;
}



procedure {:origName "PptPdoQueryDeviceText"} PptPdoQueryDeviceText(actual_Pdo_18: int, actual_Irp_50: int) returns (Tmp_1119: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryDeviceText"} PptPdoQueryDeviceText(actual_Pdo_18: int, actual_Irp_50: int) returns (Tmp_1119: int)
{
  var {:scalar} bufLen_5: int;
  var {:pointer} irpSp_4: int;
  var {:pointer} pdx_20: int;
  var {:scalar} sdv_790: int;
  var {:pointer} sdv_792: int;
  var {:scalar} sdv_793: int;
  var {:pointer} buffer_9: int;
  var {:pointer} sdv_794: int;
  var {:scalar} sdv_797: int;
  var {:scalar} status_38: int;
  var {:scalar} info_2: int;
  var {:pointer} Pdo_18: int;
  var {:pointer} Irp_50: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;

  anon0:
    Pdo_18 := actual_Pdo_18;
    Irp_50 := actual_Irp_50;
    call {:si_unique_call 1779} vslice_dummy_var_353 := __HAVOC_malloc(24);
    call {:si_unique_call 1780} vslice_dummy_var_354 := __HAVOC_malloc(12);
    assume {:nonnull} Pdo_18 != 0;
    assume Pdo_18 > 0;
    havoc pdx_20;
    call {:si_unique_call 1781} irpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_50);
    buffer_9 := 0;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    bufLen_5 := sdv_793 + 1;
    bufLen_5 := bufLen_5 * 2;
    call {:si_unique_call 1782} sdv_794 := ExAllocatePoolWithTag(257, bufLen_5, -797810352);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    buffer_9 := sdv_794;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} buffer_9 != 0;
    call {:si_unique_call 1783} sdv_RtlZeroMemory(0, bufLen_5);
    call {:si_unique_call 1784} vslice_dummy_var_355 := corral_nondet();
    status_38 := 0;
    goto L40;

  L40:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_38 != 0;
    goto L42;

  L42:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} buffer_9 != 0;
    call {:si_unique_call 1785} sdv_ExFreePool(0);
    goto L43;

  L43:
    assume {:nonnull} Irp_50 != 0;
    assume Irp_50 > 0;
    havoc info_2;
    goto L47;

  L47:
    call {:si_unique_call 1786} Tmp_1119 := P4CompleteRequest(Irp_50, status_38, info_2);
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:partition} buffer_9 == 0;
    goto L43;

  anon28_Then:
    assume {:partition} status_38 == 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} buffer_9 != 0;
    info_2 := buffer_9;
    goto L47;

  anon29_Then:
    assume {:partition} buffer_9 == 0;
    goto L42;

  anon34_Then:
    assume {:partition} buffer_9 == 0;
    status_38 := -1073741801;
    goto L40;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    status_38 := -1073741823;
    goto L40;

  anon26_Then:
    buffer_9 := 0;
    assume {:nonnull} Irp_50 != 0;
    assume Irp_50 > 0;
    havoc status_38;
    goto L40;

  anon32_Then:
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} pdx_20 != 0;
    assume pdx_20 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    bufLen_5 := sdv_790 + sdv_797 + 2;
    bufLen_5 := bufLen_5 * 2;
    call {:si_unique_call 1787} sdv_792 := ExAllocatePoolWithTag(257, bufLen_5, -797810352);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    buffer_9 := sdv_792;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} buffer_9 != 0;
    call {:si_unique_call 1788} sdv_RtlZeroMemory(0, bufLen_5);
    call {:si_unique_call 1789} vslice_dummy_var_356 := corral_nondet();
    status_38 := 0;
    goto L40;

  anon36_Then:
    assume {:partition} buffer_9 == 0;
    status_38 := -1073741801;
    goto L40;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    goto L53;

  L53:
    status_38 := -1073741823;
    goto L40;

  anon25_Then:
    goto L53;
}



procedure {:origName "PptPdoQueryPnpDeviceState"} PptPdoQueryPnpDeviceState(actual_Pdo_19: int, actual_Irp_51: int) returns (Tmp_1125: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryPnpDeviceState"} PptPdoQueryPnpDeviceState(actual_Pdo_19: int, actual_Irp_51: int) returns (Tmp_1125: int)
{
  var {:pointer} pdx_21: int;
  var {:scalar} status_39: int;
  var {:scalar} info_3: int;
  var {:pointer} Pdo_19: int;
  var {:pointer} Irp_51: int;

  anon0:
    Pdo_19 := actual_Pdo_19;
    Irp_51 := actual_Irp_51;
    assume {:nonnull} Pdo_19 != 0;
    assume Pdo_19 > 0;
    havoc pdx_21;
    assume {:nonnull} Irp_51 != 0;
    assume Irp_51 > 0;
    havoc status_39;
    assume {:nonnull} Irp_51 != 0;
    assume Irp_51 > 0;
    havoc info_3;
    assume {:nonnull} pdx_21 != 0;
    assume pdx_21 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    info_3 := BOR(info_3, 2);
    status_39 := 0;
    goto L10;

  L10:
    call {:si_unique_call 1790} Tmp_1125 := P4CompleteRequest(Irp_51, status_39, info_3);
    return;

  anon3_Then:
    goto L10;
}



procedure {:origName "PptPdoQueryBusInformation"} PptPdoQueryBusInformation(actual_Pdo_20: int, actual_Irp_52: int) returns (Tmp_1127: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryBusInformation"} PptPdoQueryBusInformation(actual_Pdo_20: int, actual_Irp_52: int) returns (Tmp_1127: int)
{
  var {:pointer} sdv_799: int;
  var {:pointer} pdx_22: int;
  var {:pointer} pBusInfo: int;
  var {:scalar} status_40: int;
  var {:scalar} info_4: int;
  var {:pointer} Pdo_20: int;
  var {:pointer} Irp_52: int;

  anon0:
    Pdo_20 := actual_Pdo_20;
    Irp_52 := actual_Irp_52;
    assume {:nonnull} Pdo_20 != 0;
    assume Pdo_20 > 0;
    havoc pdx_22;
    assume {:nonnull} pdx_22 != 0;
    assume pdx_22 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 1791} sdv_799 := ExAllocatePoolWithTag(1, 24, -797810352);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    pBusInfo := sdv_799;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} pBusInfo != 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    assume {:nonnull} pBusInfo != 0;
    assume pBusInfo > 0;
    status_40 := 0;
    info_4 := pBusInfo;
    goto L21;

  L21:
    call {:si_unique_call 1792} Tmp_1127 := P4CompleteRequest(Irp_52, status_40, info_4);
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} pBusInfo == 0;
    status_40 := -1073741801;
    assume {:nonnull} Irp_52 != 0;
    assume Irp_52 > 0;
    havoc info_4;
    goto L21;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:nonnull} Irp_52 != 0;
    assume Irp_52 > 0;
    havoc status_40;
    assume {:nonnull} Irp_52 != 0;
    assume Irp_52 > 0;
    havoc info_4;
    goto L21;
}



procedure {:origName "PptPdoDefaultPnpHandler"} PptPdoDefaultPnpHandler(actual_Pdo_21: int, actual_Irp_53: int) returns (Tmp_1129: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoDefaultPnpHandler"} PptPdoDefaultPnpHandler(actual_Pdo_21: int, actual_Irp_53: int) returns (Tmp_1129: int)
{
  var {:pointer} Irp_53: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;

  anon0:
    Irp_53 := actual_Irp_53;
    assume {:nonnull} Irp_53 != 0;
    assume Irp_53 > 0;
    havoc vslice_dummy_var_188;
    havoc vslice_dummy_var_189;
    call {:si_unique_call 1793} Tmp_1129 := P4CompleteRequest(Irp_53, vslice_dummy_var_188, vslice_dummy_var_189);
    return;
}



procedure {:origName "PptPdoRemoveDevice"} PptPdoRemoveDevice(actual_Pdo_22: int, actual_Irp_54: int) returns (Tmp_1131: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1131 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoRemoveDevice"} PptPdoRemoveDevice(actual_Pdo_22: int, actual_Irp_54: int) returns (Tmp_1131: int)
{
  var {:pointer} pdx_23: int;
  var {:scalar} status_41: int;
  var {:pointer} Pdo_22: int;
  var {:pointer} Irp_54: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;

  anon0:
    Pdo_22 := actual_Pdo_22;
    Irp_54 := actual_Irp_54;
    assume {:nonnull} Pdo_22 != 0;
    assume Pdo_22 > 0;
    havoc pdx_23;
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    call {:si_unique_call 1794} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_23));
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 1795} vslice_dummy_var_357 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    goto L11;

  L11:
    assume {:nonnull} pdx_23 != 0;
    assume pdx_23 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 1796} P4DestroyPdo(Pdo_22);
    assume {:nonnull} Irp_54 != 0;
    assume Irp_54 > 0;
    havoc vslice_dummy_var_190;
    call {:si_unique_call 1797} status_41 := P4CompleteRequest(Irp_54, 0, vslice_dummy_var_190);
    Tmp_1131 := status_41;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:nonnull} Irp_54 != 0;
    assume Irp_54 > 0;
    havoc vslice_dummy_var_191;
    call {:si_unique_call 1798} Tmp_1131 := P4CompleteRequest(Irp_54, 0, vslice_dummy_var_191);
    goto L1;

  anon12_Then:
    goto L11;

  anon11_Then:
    goto L11;

  anon9_Then:
    goto L11;
}



procedure {:origName "PptPdoPnp"} PptPdoPnp(actual_Pdo_23: int, actual_Irp_55: int) returns (Tmp_1133: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoPnp"} PptPdoPnp(actual_Pdo_23: int, actual_Irp_55: int) returns (Tmp_1133: int)
{
  var {:pointer} irpSp_5: int;
  var {:scalar} Tmp_1134: int;
  var {:pointer} pdx_24: int;
  var {:pointer} Pdo_23: int;
  var {:pointer} Irp_55: int;
  var vslice_dummy_var_192: int;

  anon0:
    Pdo_23 := actual_Pdo_23;
    Irp_55 := actual_Irp_55;
    assume {:nonnull} Pdo_23 != 0;
    assume Pdo_23 > 0;
    havoc pdx_24;
    call {:si_unique_call 1799} irpSp_5 := sdv_IoGetCurrentIrpStackLocation(Irp_55);
    assume {:nonnull} pdx_24 != 0;
    assume pdx_24 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} Irp_55 != 0;
    assume Irp_55 > 0;
    havoc vslice_dummy_var_192;
    call {:si_unique_call 1800} Tmp_1133 := P4CompleteRequest(Irp_55, -1073741738, vslice_dummy_var_192);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon63_Then:
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    call {:si_unique_call 1801} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon64_Then:
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    havoc Tmp_1134;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_1134 != 24;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_1134 != 23;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_1134 != 22;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_1134 != 21;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_1134 != 20;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_1134 != 19;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_1134 != 18;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_1134 != 17;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_1134 != 16;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_1134 != 15;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_1134 != 14;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_1134 != 13;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_1134 != 12;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Tmp_1134 != 11;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Tmp_1134 != 10;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Tmp_1134 != 9;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume Tmp_1134 != 8;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume Tmp_1134 != 7;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume Tmp_1134 != 6;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume Tmp_1134 != 5;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume Tmp_1134 != 4;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume Tmp_1134 != 3;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume Tmp_1134 != 2;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume Tmp_1134 != 1;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume false;
    return;

  anon93_Then:
    assume Tmp_1134 == 0;
    assume {:IndirectCall} true;
    call {:si_unique_call 1802} Tmp_1133 := PptPdoStartDevice(Pdo_23, Irp_55);
    goto L1;

  anon92_Then:
    assume Tmp_1134 == 1;
    assume {:IndirectCall} true;
    call {:si_unique_call 1803} Tmp_1133 := PptPdoQueryRemove(Pdo_23, Irp_55);
    goto L1;

  anon91_Then:
    assume Tmp_1134 == 2;
    assume {:IndirectCall} true;
    call {:si_unique_call 1804} Tmp_1133 := PptPdoRemoveDevice(Pdo_23, Irp_55);
    goto L1;

  anon90_Then:
    assume Tmp_1134 == 3;
    assume {:IndirectCall} true;
    call {:si_unique_call 1805} Tmp_1133 := PptPdoCancelRemove(Pdo_23, Irp_55);
    goto L1;

  anon89_Then:
    assume Tmp_1134 == 4;
    assume {:IndirectCall} true;
    call {:si_unique_call 1806} Tmp_1133 := PptPdoStopDevice(Pdo_23, Irp_55);
    goto L1;

  anon88_Then:
    assume Tmp_1134 == 5;
    assume {:IndirectCall} true;
    call {:si_unique_call 1807} Tmp_1133 := PptPdoQueryStop(Pdo_23, Irp_55);
    goto L1;

  anon87_Then:
    assume Tmp_1134 == 6;
    assume {:IndirectCall} true;
    call {:si_unique_call 1808} Tmp_1133 := PptPdoCancelStop(Pdo_23, Irp_55);
    goto L1;

  anon85_Then:
    assume Tmp_1134 == 7;
    assume {:IndirectCall} true;
    call {:si_unique_call 1809} Tmp_1133 := PptPdoQueryDeviceRelations(Pdo_23, Irp_55);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon86_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon84_Then:
    assume Tmp_1134 == 8;
    assume {:IndirectCall} true;
    call {:si_unique_call 1810} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon83_Then:
    assume Tmp_1134 == 9;
    assume {:IndirectCall} true;
    call {:si_unique_call 1811} Tmp_1133 := PptPdoQueryCapabilities(Pdo_23, Irp_55);
    goto L1;

  anon82_Then:
    assume Tmp_1134 == 10;
    assume {:IndirectCall} true;
    call {:si_unique_call 1812} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon81_Then:
    assume Tmp_1134 == 11;
    assume {:IndirectCall} true;
    call {:si_unique_call 1813} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon79_Then:
    assume Tmp_1134 == 12;
    assume {:IndirectCall} true;
    call {:si_unique_call 1814} Tmp_1133 := PptPdoQueryDeviceText(Pdo_23, Irp_55);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon80_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume Tmp_1134 == 13;
    assume {:IndirectCall} true;
    call {:si_unique_call 1815} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon77_Then:
    assume Tmp_1134 == 14;
    assume {:IndirectCall} true;
    call {:si_unique_call 1816} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon76_Then:
    assume Tmp_1134 == 15;
    assume {:IndirectCall} true;
    call {:si_unique_call 1817} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon75_Then:
    assume Tmp_1134 == 16;
    assume {:IndirectCall} true;
    call {:si_unique_call 1818} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon74_Then:
    assume Tmp_1134 == 17;
    assume {:IndirectCall} true;
    call {:si_unique_call 1819} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon73_Then:
    assume Tmp_1134 == 18;
    assume {:IndirectCall} true;
    call {:si_unique_call 1820} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon71_Then:
    assume Tmp_1134 == 19;
    assume {:IndirectCall} true;
    call {:si_unique_call 1821} Tmp_1133 := PptPdoQueryId(Pdo_23, Irp_55);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    assume Tmp_1134 == 20;
    assume {:IndirectCall} true;
    call {:si_unique_call 1822} Tmp_1133 := PptPdoQueryPnpDeviceState(Pdo_23, Irp_55);
    goto L1;

  anon68_Then:
    assume Tmp_1134 == 21;
    assume {:IndirectCall} true;
    call {:si_unique_call 1823} Tmp_1133 := PptPdoQueryBusInformation(Pdo_23, Irp_55);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon69_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    assume Tmp_1134 == 22;
    assume {:IndirectCall} true;
    call {:si_unique_call 1824} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;

  anon66_Then:
    assume Tmp_1134 == 23;
    assume {:IndirectCall} true;
    call {:si_unique_call 1825} Tmp_1133 := PptPdoSurpriseRemoval(Pdo_23, Irp_55);
    goto L1;

  anon65_Then:
    assume Tmp_1134 == 24;
    assume {:IndirectCall} true;
    call {:si_unique_call 1826} Tmp_1133 := PptPdoDefaultPnpHandler(Pdo_23, Irp_55);
    goto L1;
}



procedure {:origName "PptPdoQueryId"} PptPdoQueryId(actual_Pdo_24: int, actual_Irp_56: int) returns (Tmp_1136: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryId"} PptPdoQueryId(actual_Pdo_24: int, actual_Irp_56: int) returns (Tmp_1136: int)
{
  var {:scalar} bufLen_6: int;
  var {:scalar} sdv_809: int;
  var {:pointer} sdv_810: int;
  var {:scalar} sdv_811: int;
  var {:pointer} mfgMdlBuffer: int;
  var {:pointer} irpSp_6: int;
  var {:pointer} pdx_25: int;
  var {:pointer} sdv_813: int;
  var {:scalar} sdv_814: int;
  var {:scalar} wcharsWritten: int;
  var {:scalar} checksumLength: int;
  var {:scalar} Tmp_1143: int;
  var {:pointer} sdv_816: int;
  var {:scalar} sdv_817: int;
  var {:scalar} sdv_818: int;
  var {:scalar} Tmp_1145: int;
  var {:pointer} buffer_10: int;
  var {:scalar} lengthOfMfgMdlBuffer: int;
  var {:dopa} {:scalar} checksum: int;
  var {:pointer} sdv_820: int;
  var {:pointer} prefix: int;
  var {:scalar} mfgMdlTruncationLimit: int;
  var {:pointer} prefix_1: int;
  var {:scalar} sdv_825: int;
  var {:scalar} sdv_826: int;
  var {:scalar} status_42: int;
  var {:scalar} info_5: int;
  var {:scalar} sdv_827: int;
  var {:pointer} Pdo_24: int;
  var {:pointer} Irp_56: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 1827} checksum := __HAVOC_malloc(4);
    Pdo_24 := actual_Pdo_24;
    Irp_56 := actual_Irp_56;
    call {:si_unique_call 1828} vslice_dummy_var_358 := __HAVOC_malloc(36);
    call {:si_unique_call 1829} vslice_dummy_var_359 := __HAVOC_malloc(48);
    call {:si_unique_call 1830} vslice_dummy_var_360 := __HAVOC_malloc(12);
    call {:si_unique_call 1831} vslice_dummy_var_361 := __HAVOC_malloc(20);
    call {:si_unique_call 1832} vslice_dummy_var_362 := __HAVOC_malloc(36);
    call {:si_unique_call 1833} prefix := __HAVOC_malloc(36);
    call {:si_unique_call 1834} prefix_1 := __HAVOC_malloc(36);
    call {:si_unique_call 1835} vslice_dummy_var_363 := __HAVOC_malloc(40);
    call {:si_unique_call 1836} vslice_dummy_var_364 := __HAVOC_malloc(28);
    assume {:nonnull} Pdo_24 != 0;
    assume Pdo_24 > 0;
    havoc pdx_25;
    call {:si_unique_call 1837} irpSp_6 := sdv_IoGetCurrentIrpStackLocation(Irp_56);
    buffer_10 := 0;
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    bufLen_6 := sdv_817 + 1;
    bufLen_6 := bufLen_6 * 2;
    call {:si_unique_call 1838} sdv_820 := ExAllocatePoolWithTag(257, bufLen_6, -797810352);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    buffer_10 := sdv_820;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} buffer_10 != 0;
    call {:si_unique_call 1839} sdv_RtlZeroMemory(0, bufLen_6);
    call {:si_unique_call 1840} vslice_dummy_var_368 := corral_nondet();
    call {:si_unique_call 1841} P4SanitizeId(buffer_10);
    status_42 := 0;
    goto L45;

  L45:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} status_42 != 0;
    goto L47;

  L47:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} buffer_10 != 0;
    call {:si_unique_call 1842} sdv_ExFreePool(0);
    goto L48;

  L48:
    assume {:nonnull} Irp_56 != 0;
    assume Irp_56 > 0;
    havoc info_5;
    goto L52;

  L52:
    call {:si_unique_call 1843} Tmp_1136 := P4CompleteRequest(Irp_56, status_42, info_5);
    goto LM2;

  LM2:
    return;

  anon48_Then:
    assume {:partition} buffer_10 == 0;
    goto L48;

  anon46_Then:
    assume {:partition} status_42 == 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} buffer_10 != 0;
    info_5 := buffer_10;
    goto L52;

  anon47_Then:
    assume {:partition} buffer_10 == 0;
    goto L47;

  anon63_Then:
    assume {:partition} buffer_10 == 0;
    status_42 := -1073741801;
    goto L45;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    status_42 := -1073741823;
    goto L45;

  anon51_Then:
    assume {:nonnull} Irp_56 != 0;
    assume Irp_56 > 0;
    havoc status_42;
    goto L45;

  anon52_Then:
    assume {:nonnull} Irp_56 != 0;
    assume Irp_56 > 0;
    havoc status_42;
    goto L45;

  anon53_Then:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    lengthOfMfgMdlBuffer := sdv_814 + sdv_825 + 1;
    call {:si_unique_call 1844} sdv_816 := ExAllocatePoolWithTag(257, lengthOfMfgMdlBuffer, -797810352);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    mfgMdlBuffer := sdv_816;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} mfgMdlBuffer != 0;
    prefix_1 := strConst__li2bpl41;
    mfgMdlTruncationLimit := 20;
    checksumLength := 4;
    call {:si_unique_call 1845} sdv_RtlZeroMemory(0, lengthOfMfgMdlBuffer);
    call {:si_unique_call 1846} vslice_dummy_var_366 := corral_nondet();
    Tmp_1145 := sdv_827;
    call {:si_unique_call 1847} GetCheckSum(mfgMdlBuffer, Tmp_1145, checksum);
    bufLen_6 := sdv_818 + 2 * mfgMdlTruncationLimit + 2 * checksumLength + 3;
    bufLen_6 := bufLen_6 * 2;
    call {:si_unique_call 1848} sdv_810 := ExAllocatePoolWithTag(257, bufLen_6, -797810352);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    buffer_10 := sdv_810;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} buffer_10 != 0;
    call {:si_unique_call 1849} sdv_RtlZeroMemory(0, bufLen_6);
    call {:si_unique_call 1850} sdv_811 := corral_nondet();
    wcharsWritten := sdv_811;
    call {:si_unique_call 1851} vslice_dummy_var_367 := corral_nondet();
    call {:si_unique_call 1852} sdv_ExFreePool(0);
    Tmp_1143 := INTDIV(bufLen_6, 2);
    call {:si_unique_call 1853} P4SanitizeMultiSzId(buffer_10, Tmp_1143);
    status_42 := 0;
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    havoc vslice_dummy_var_193;
    call {:si_unique_call 1854} P4WritePortNameToDevNode(Pdo_24, vslice_dummy_var_193);
    goto L138;

  L138:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    havoc vslice_dummy_var_194;
    havoc vslice_dummy_var_195;
    call {:si_unique_call 1855} PptWriteMfgMdlToDevNode(Pdo_24, vslice_dummy_var_194, vslice_dummy_var_195);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} yogi_error != 1;
    goto L45;

  anon61_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    assume {:partition} buffer_10 == 0;
    call {:si_unique_call 1856} sdv_ExFreePool(0);
    status_42 := -1073741670;
    goto L138;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:partition} mfgMdlBuffer == 0;
    status_42 := -1073741670;
    goto L138;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    goto L58;

  L58:
    status_42 := -1073741823;
    goto L138;

  anon44_Then:
    goto L58;

  anon54_Then:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} pdx_25 != 0;
    assume pdx_25 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    prefix := strConst__li2bpl41;
    bufLen_6 := 9 + sdv_826 + sdv_809;
    bufLen_6 := bufLen_6 * 2;
    call {:si_unique_call 1857} sdv_813 := ExAllocatePoolWithTag(257, bufLen_6, -797810352);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    buffer_10 := sdv_813;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} buffer_10 != 0;
    call {:si_unique_call 1858} sdv_RtlZeroMemory(0, bufLen_6);
    call {:si_unique_call 1859} vslice_dummy_var_365 := corral_nondet();
    call {:si_unique_call 1860} P4SanitizeId(buffer_10);
    status_42 := 0;
    goto L45;

  anon56_Then:
    assume {:partition} buffer_10 == 0;
    status_42 := -1073741801;
    goto L45;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    goto L143;

  L143:
    status_42 := -1073741823;
    goto L45;

  anon43_Then:
    goto L143;
}



procedure {:origName "PptPdoQueryCapabilities"} PptPdoQueryCapabilities(actual_Pdo_25: int, actual_Irp_57: int) returns (Tmp_1152: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1152 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryCapabilities"} PptPdoQueryCapabilities(actual_Pdo_25: int, actual_Irp_57: int) returns (Tmp_1152: int)
{
  var {:pointer} Tmp_1153: int;
  var {:pointer} irpSp_7: int;
  var {:pointer} pdx_26: int;
  var {:pointer} Tmp_1154: int;
  var {:pointer} Pdo_25: int;
  var {:pointer} Irp_57: int;
  var vslice_dummy_var_196: int;

  anon0:
    Pdo_25 := actual_Pdo_25;
    Irp_57 := actual_Irp_57;
    assume {:nonnull} Pdo_25 != 0;
    assume Pdo_25 > 0;
    havoc pdx_26;
    call {:si_unique_call 1861} irpSp_7 := sdv_IoGetCurrentIrpStackLocation(Irp_57);
    assume {:nonnull} irpSp_7 != 0;
    assume irpSp_7 > 0;
    havoc Tmp_1154;
    assume {:nonnull} Tmp_1154 != 0;
    assume Tmp_1154 > 0;
    assume {:nonnull} pdx_26 != 0;
    assume pdx_26 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} irpSp_7 != 0;
    assume irpSp_7 > 0;
    havoc Tmp_1153;
    assume {:nonnull} Tmp_1153 != 0;
    assume Tmp_1153 > 0;
    goto L12;

  L12:
    assume {:nonnull} Irp_57 != 0;
    assume Irp_57 > 0;
    havoc vslice_dummy_var_196;
    call {:si_unique_call 1862} Tmp_1152 := P4CompleteRequest(Irp_57, 0, vslice_dummy_var_196);
    return;

  anon3_Then:
    goto L12;
}



procedure {:origName "PptPdoQueryStop"} PptPdoQueryStop(actual_Pdo_26: int, actual_Irp_58: int) returns (Tmp_1156: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1156 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoQueryStop"} PptPdoQueryStop(actual_Pdo_26: int, actual_Irp_58: int) returns (Tmp_1156: int)
{
  var {:pointer} pdx_27: int;
  var {:pointer} Pdo_26: int;
  var {:pointer} Irp_58: int;
  var vslice_dummy_var_197: int;

  anon0:
    Pdo_26 := actual_Pdo_26;
    Irp_58 := actual_Irp_58;
    assume {:nonnull} Pdo_26 != 0;
    assume Pdo_26 > 0;
    havoc pdx_27;
    assume {:nonnull} pdx_27 != 0;
    assume pdx_27 > 0;
    assume {:nonnull} pdx_27 != 0;
    assume pdx_27 > 0;
    call {:si_unique_call 1863} KeClearEvent(PauseEvent__PDO_EXTENSION(pdx_27));
    assume {:nonnull} Irp_58 != 0;
    assume Irp_58 > 0;
    havoc vslice_dummy_var_197;
    call {:si_unique_call 1864} Tmp_1156 := P4CompleteRequest(Irp_58, 0, vslice_dummy_var_197);
    return;
}



procedure {:origName "P5FdoCreateThread"} P5FdoCreateThread(actual_Fdx_7: int) returns (Tmp_1158: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1158 == 0 || Tmp_1158 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5FdoCreateThread"} P5FdoCreateThread(actual_Fdx_7: int) returns (Tmp_1158: int)
{
  var {:scalar} status_43: int;
  var {:pointer} Fdx_7: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;

  anon0:
    call {:si_unique_call 1865} vslice_dummy_var_369 := __HAVOC_malloc(24);
    Fdx_7 := actual_Fdx_7;
    call {:si_unique_call 1866} sdv_InitializeObjectAttributes(0, 0, 512, 0, 0);
    call {:si_unique_call 1867} status_43 := PsCreateSystemThread(0, 2097151, 0, 0, 0, li2bplFunctionConstant761, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_43 != 0;
    goto L19;

  L19:
    Tmp_1158 := status_43;
    return;

  anon5_Then:
    assume {:partition} status_43 == 0;
    call {:si_unique_call 1868} status_43 := ObReferenceObjectByHandle(0, 2097151, 0, 0, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_43 != 0;
    assume {:nonnull} Fdx_7 != 0;
    assume Fdx_7 > 0;
    call {:si_unique_call 1869} vslice_dummy_var_371 := ZwClose(0);
    goto L19;

  anon6_Then:
    assume {:partition} status_43 == 0;
    call {:si_unique_call 1870} vslice_dummy_var_370 := ZwClose(0);
    goto L19;
}



procedure {:origName "_sdv_init30"} _sdv_init30();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init30"} _sdv_init30()
{
  var vslice_dummy_var_372: int;

  anon0:
    call {:si_unique_call 1871} vslice_dummy_var_372 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "P5FdoThread"} P5FdoThread(actual_FdxIn_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5FdoThread"} P5FdoThread(actual_FdxIn_1: int)
{
  var {:scalar} requestRescan: int;
  var {:pointer} aid_5: int;
  var {:pointer} des_5: int;
  var {:pointer} cls_5: int;
  var {:scalar} Tmp_1163: int;
  var {:scalar} Tmp_1164: int;
  var {:scalar} timeOut1: int;
  var {:scalar} Tmp_1168: int;
  var {:scalar} pollingFailureThreshold: int;
  var {:scalar} Tmp_1169: int;
  var {:pointer} mfg_5: int;
  var {:pointer} devId_2: int;
  var {:scalar} Tmp_1171: int;
  var {:scalar} sdv_838: int;
  var {:scalar} Tmp_1173: int;
  var {:pointer} Tmp_1175: int;
  var {:pointer} cid_5: int;
  var {:pointer} Fdx_8: int;
  var {:scalar} status_44: int;
  var {:pointer} mdl_5: int;
  var {:scalar} deviceStatus: int;
  var {:pointer} FdxIn_1: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_198: int;

  anon0:
    call {:si_unique_call 1872} aid_5 := __HAVOC_malloc(4);
    call {:si_unique_call 1873} des_5 := __HAVOC_malloc(4);
    call {:si_unique_call 1874} cls_5 := __HAVOC_malloc(4);
    call {:si_unique_call 1875} timeOut1 := __HAVOC_malloc(20);
    call {:si_unique_call 1876} vslice_dummy_var_373 := __HAVOC_malloc(4);
    call {:si_unique_call 1877} mfg_5 := __HAVOC_malloc(4);
    call {:si_unique_call 1878} cid_5 := __HAVOC_malloc(4);
    call {:si_unique_call 1879} mdl_5 := __HAVOC_malloc(4);
    FdxIn_1 := actual_FdxIn_1;
    Fdx_8 := FdxIn_1;
    pollingFailureThreshold := 10;
    goto L12;

  L12:
    call {:si_unique_call 1880} requestRescan, Tmp_1163, Tmp_1164, Tmp_1168, Tmp_1169, devId_2, Tmp_1171, sdv_838, Tmp_1173, Tmp_1175, status_44, deviceStatus, vslice_dummy_var_374, vslice_dummy_var_375 := P5FdoThread_loop_L12(requestRescan, aid_5, des_5, cls_5, Tmp_1163, Tmp_1164, timeOut1, Tmp_1168, pollingFailureThreshold, Tmp_1169, mfg_5, devId_2, Tmp_1171, sdv_838, Tmp_1173, Tmp_1175, cid_5, Fdx_8, status_44, mdl_5, deviceStatus, vslice_dummy_var_374, vslice_dummy_var_375);
    goto L12_last;

  L12_last:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} PowerStateIsAC != 0;
    assume {:nonnull} timeOut1 != 0;
    assume timeOut1 > 0;
    goto L15;

  L15:
    call {:si_unique_call 1881} status_44 := KeWaitForSingleObject(0, 0, 0, 0, timeOut1);
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    call {:si_unique_call 1882} vslice_dummy_var_374 := PsTerminateSystemThread(0);
    goto L20;

  L20:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} PowerStateIsAC != 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} 258 == status_44;
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    call {:si_unique_call 1883} sdv_838 := PptTryAllocatePort(Fdx_8);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} sdv_838 != 0;
    requestRescan := 0;
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    call {:si_unique_call 1884} deviceStatus := corral_nondet();
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} 0 != 1;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} BAND(deviceStatus, 128) != 0;
    Tmp_1163 := 1;
    goto L47;

  L47:
    Tmp_1171 := Tmp_1163;
    goto L48;

  L48:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} Tmp_1171 != 0;
    goto L50;

  L50:
    call {:si_unique_call 1885} PptFreePort#1(Fdx_8);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} requestRescan != 0;
    call {:si_unique_call 1886} IoInvalidateDeviceRelations(0, 0);
    goto anon83_Else_dummy;

  anon83_Else_dummy:
    assume false;
    return;

  anon83_Then:
    assume {:partition} requestRescan == 0;
    goto anon83_Then_dummy;

  anon83_Then_dummy:
    assume false;
    return;

  anon81_Then:
    assume {:partition} Tmp_1171 == 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} BAND(deviceStatus, 8) != 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} BAND(deviceStatus, 128) != 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} BAND(deviceStatus, 16) != 0;
    goto L57;

  L57:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} 0 != 1;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} BAND(deviceStatus, 64) != 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} BAND(deviceStatus, 32) != 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} BAND(deviceStatus, 16) != 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} BAND(deviceStatus, 8) != 0;
    Tmp_1169 := 1;
    goto L69;

  L69:
    Tmp_1164 := Tmp_1169;
    goto L70;

  L70:
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} Tmp_1164 == 0;
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    havoc vslice_dummy_var_198;
    call {:si_unique_call 1887} devId_2 := P4ReadRawIeee1284DeviceId(vslice_dummy_var_198);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} yogi_error != 1;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} devId_2 != 0;
    Tmp_1175 := devId_2;
    call {:si_unique_call 1888} ParPnpFindDeviceIdKeys(mfg_5, mdl_5, cls_5, des_5, aid_5, cid_5, Tmp_1175);
    assume {:nonnull} mfg_5 != 0;
    assume mfg_5 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} mdl_5 != 0;
    assume mdl_5 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    requestRescan := 1;
    goto L89;

  L89:
    call {:si_unique_call 1889} sdv_ExFreePool(0);
    goto L76;

  L76:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} requestRescan != 0;
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    goto L50;

  anon94_Then:
    assume {:partition} requestRescan == 0;
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    assume {:nonnull} Fdx_8 != 0;
    assume Fdx_8 > 0;
    call {:si_unique_call 1890} vslice_dummy_var_375 := KeSetEvent(FdoThreadEvent__FDO_EXTENSION(Fdx_8), 0, 0);
    goto L50;

  anon107_Then:
    goto L50;

  anon96_Then:
    goto L89;

  anon95_Then:
    goto L89;

  anon93_Then:
    assume {:partition} devId_2 == 0;
    goto L76;

  anon106_Then:
    assume {:partition} yogi_error == 1;
    return;

  anon92_Then:
    assume {:partition} Tmp_1164 != 0;
    goto L50;

  anon91_Then:
    assume {:partition} BAND(deviceStatus, 8) == 0;
    goto L63;

  L63:
    Tmp_1169 := 0;
    goto L69;

  anon90_Then:
    assume {:partition} BAND(deviceStatus, 16) == 0;
    goto L63;

  anon89_Then:
    assume {:partition} BAND(deviceStatus, 32) == 0;
    goto L63;

  anon88_Then:
    assume {:partition} BAND(deviceStatus, 64) == 0;
    goto L63;

  anon105_Then:
    goto L63;

  anon84_Then:
    assume {:partition} 0 == 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} BAND(deviceStatus, 128) != 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} BAND(deviceStatus, 64) != 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} BAND(deviceStatus, 32) != 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} BAND(deviceStatus, 16) != 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} BAND(deviceStatus, 8) != 0;
    Tmp_1168 := 1;
    goto L106;

  L106:
    Tmp_1164 := Tmp_1168;
    goto L70;

  anon100_Then:
    assume {:partition} BAND(deviceStatus, 8) == 0;
    goto L100;

  L100:
    Tmp_1168 := 0;
    goto L106;

  anon99_Then:
    assume {:partition} BAND(deviceStatus, 16) == 0;
    goto L100;

  anon98_Then:
    assume {:partition} BAND(deviceStatus, 32) == 0;
    goto L100;

  anon97_Then:
    assume {:partition} BAND(deviceStatus, 64) == 0;
    goto L100;

  anon87_Then:
    assume {:partition} BAND(deviceStatus, 128) == 0;
    goto L100;

  anon86_Then:
    assume {:partition} BAND(deviceStatus, 16) == 0;
    goto L50;

  anon85_Then:
    assume {:partition} BAND(deviceStatus, 128) == 0;
    goto L57;

  anon82_Then:
    assume {:partition} BAND(deviceStatus, 8) == 0;
    goto L57;

  anon80_Then:
    assume {:partition} BAND(deviceStatus, 128) == 0;
    goto L42;

  L42:
    Tmp_1163 := 0;
    goto L47;

  anon104_Then:
    goto L42;

  anon103_Then:
    goto L42;

  anon79_Then:
    assume {:partition} 0 == 1;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} BAND(deviceStatus, 64) != 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} BAND(deviceStatus, 128) != 0;
    Tmp_1173 := 1;
    goto L112;

  L112:
    Tmp_1171 := Tmp_1173;
    goto L48;

  anon102_Then:
    assume {:partition} BAND(deviceStatus, 128) == 0;
    goto L108;

  L108:
    Tmp_1173 := 0;
    goto L112;

  anon101_Then:
    assume {:partition} BAND(deviceStatus, 64) == 0;
    goto L108;

  anon108_Then:
    goto L108;

  anon78_Then:
    assume {:partition} sdv_838 == 0;
    goto anon78_Then_dummy;

  anon78_Then_dummy:
    assume false;
    return;

  anon77_Then:
    goto anon77_Then_dummy;

  anon77_Then_dummy:
    assume false;
    return;

  anon76_Then:
    assume {:partition} 258 != status_44;
    goto anon76_Then_dummy;

  anon76_Then_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} PowerStateIsAC == 0;
    goto anon75_Then_dummy;

  anon75_Then_dummy:
    assume false;
    return;

  anon74_Then:
    goto L20;

  anon73_Then:
    assume {:partition} PowerStateIsAC == 0;
    assume {:nonnull} timeOut1 != 0;
    assume timeOut1 > 0;
    goto L15;
}



procedure {:origName "PptPdoStartIo"} PptPdoStartIo(actual_Pdx_30: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoStartIo"} PptPdoStartIo(actual_Pdx_30: int)
{
  var {:pointer} Tmp_1176: int;
  var {:pointer} Irp_59: int;
  var {:pointer} IrpSp_5: int;
  var {:scalar} sdv_842: int;
  var {:scalar} CancelIrql_2: int;
  var {:pointer} Pdx_30: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 1891} vslice_dummy_var_376 := __HAVOC_malloc(4);
    Pdx_30 := actual_Pdx_30;
    assume {:nonnull} Pdx_30 != 0;
    assume Pdx_30 > 0;
    havoc Irp_59;
    call {:si_unique_call 1892} IrpSp_5 := sdv_IoGetCurrentIrpStackLocation(Irp_59);
    assume {:nonnull} Irp_59 != 0;
    assume Irp_59 > 0;
    assume {:nonnull} Pdx_30 != 0;
    assume Pdx_30 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L16;

  L16:
    assume {:nonnull} IrpSp_5 != 0;
    assume IrpSp_5 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} IrpSp_5 != 0;
    assume IrpSp_5 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 1893} ParWriteIrp(Pdx_30);
    goto L27;

  L27:
    assume {:nonnull} Pdx_30 != 0;
    assume Pdx_30 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L29;

  L29:
    call {:si_unique_call 1894} Tmp_1176 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1176 != 0;
    assume Tmp_1176 > 0;
    Mem_T.INT4[Tmp_1176] := CancelIrql_2;
    call {:si_unique_call 1895} IoAcquireCancelSpinLock(Tmp_1176);
    assume {:nonnull} Tmp_1176 != 0;
    assume Tmp_1176 > 0;
    CancelIrql_2 := Mem_T.INT4[Tmp_1176];
    assume {:nonnull} Pdx_30 != 0;
    assume Pdx_30 > 0;
    call {:si_unique_call 1896} IoReleaseCancelSpinLock(CancelIrql_2);
    assume {:nonnull} Irp_59 != 0;
    assume Irp_59 > 0;
    havoc vslice_dummy_var_199;
    havoc vslice_dummy_var_200;
    call {:si_unique_call 1897} vslice_dummy_var_377 := P4CompleteRequest(Irp_59, vslice_dummy_var_199, vslice_dummy_var_200);
    goto LM2;

  LM2:
    return;

  anon16_Then:
    assume {:nonnull} Pdx_30 != 0;
    assume Pdx_30 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 1898} ParFreePort(Pdx_30);
    goto L29;

  anon17_Then:
    goto L29;

  anon19_Then:
    call {:si_unique_call 1899} ParDeviceIo(Pdx_30);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    call {:si_unique_call 1900} ParReadIrp(Pdx_30);
    goto L27;

  anon20_Then:
    call {:si_unique_call 1901} sdv_842 := ParAllocPort(Pdx_30);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_842 == 0;
    goto L29;

  anon18_Then:
    assume {:partition} sdv_842 != 0;
    goto L16;
}



procedure {:origName "PptPdoThread"} PptPdoThread(actual_Context_4: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoThread"} PptPdoThread(actual_Context_4: int)
{
  var {:scalar} sdv_844: int;
  var {:pointer} Tmp_1179: int;
  var {:scalar} Timeout_2: int;
  var {:pointer} pdx_28: int;
  var {:pointer} CurrentIrp: int;
  var {:scalar} Status_16: int;
  var {:pointer} HeadOfList: int;
  var {:pointer} sdv_848: int;
  var {:scalar} OldIrql_2: int;
  var {:scalar} sdv_852: int;
  var {:scalar} sdv_854: int;
  var {:scalar} sdv_855: int;
  var {:pointer} Context_4: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;

  anon0:
    call {:si_unique_call 1902} vslice_dummy_var_378 := __HAVOC_malloc(4);
    call {:si_unique_call 1903} Timeout_2 := __HAVOC_malloc(20);
    Context_4 := actual_Context_4;
    pdx_28 := Context_4;
    goto L10;

  L10:
    call {:si_unique_call 1904} sdv_844, Tmp_1179, CurrentIrp, Status_16, HeadOfList, sdv_848, OldIrql_2, sdv_852, sdv_854, sdv_855, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381, vslice_dummy_var_382, vslice_dummy_var_383, vslice_dummy_var_384 := PptPdoThread_loop_L10(sdv_844, Tmp_1179, Timeout_2, pdx_28, CurrentIrp, Status_16, HeadOfList, sdv_848, OldIrql_2, sdv_852, sdv_854, sdv_855, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381, vslice_dummy_var_382, vslice_dummy_var_383, vslice_dummy_var_384);
    goto L10_last;

  L10_last:
    assume {:nonnull} Timeout_2 != 0;
    assume Timeout_2 > 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    assume {:nonnull} Timeout_2 != 0;
    assume Timeout_2 > 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    assume {:nonnull} Timeout_2 != 0;
    assume Timeout_2 > 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    assume {:nonnull} Timeout_2 != 0;
    assume Timeout_2 > 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    assume {:nonnull} Timeout_2 != 0;
    assume Timeout_2 > 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    call {:si_unique_call 1929} Status_16 := KeWaitForSingleObject(0, 6, 0, 0, Timeout_2);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_16 == 258;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L104;

  L104:
    assume {:IndirectCall} true;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    havoc vslice_dummy_var_201;
    call {:si_unique_call 1905} sdv_852 := PptQueryNumWaiters(vslice_dummy_var_201);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_852 != 0;
    call {:si_unique_call 1906} ParTerminate(pdx_28);
    call {:si_unique_call 1907} ParFreePort(pdx_28);
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} sdv_852 == 0;
    goto L16;

  L16:
    call {:si_unique_call 1908} vslice_dummy_var_379 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1909} ParTerminate(pdx_28);
    call {:si_unique_call 1910} ParFreePort(pdx_28);
    goto L45;

  L45:
    call {:si_unique_call 1911} vslice_dummy_var_381 := PsTerminateSystemThread(0);
    goto L41;

  L41:
    call {:si_unique_call 1912} Tmp_1179 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1179 != 0;
    assume Tmp_1179 > 0;
    Mem_T.INT4[Tmp_1179] := OldIrql_2;
    call {:si_unique_call 1913} IoAcquireCancelSpinLock(Tmp_1179);
    assume {:nonnull} Tmp_1179 != 0;
    assume Tmp_1179 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_1179];
    goto L54;

  L54:
    call {:si_unique_call 1914} sdv_844, Tmp_1179, CurrentIrp, HeadOfList, sdv_848, OldIrql_2, sdv_855, vslice_dummy_var_382, vslice_dummy_var_383, vslice_dummy_var_384 := PptPdoThread_loop_L54(sdv_844, Tmp_1179, pdx_28, CurrentIrp, HeadOfList, sdv_848, OldIrql_2, sdv_855, vslice_dummy_var_382, vslice_dummy_var_383, vslice_dummy_var_384);
    goto L54_last;

  L54_last:
    call {:si_unique_call 1928} sdv_855 := sdv_IsListEmpty(0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_855 == 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    call {:si_unique_call 1915} HeadOfList := RemoveHeadList(WorkQueue__PDO_EXTENSION(pdx_28));
    call {:si_unique_call 1916} sdv_848 := sdv_containing_record(HeadOfList, 88);
    CurrentIrp := sdv_848;
    call {:si_unique_call 1917} vslice_dummy_var_384 := sdv_IoSetCancelRoutine(CurrentIrp, 0);
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    call {:si_unique_call 1918} IoReleaseCancelSpinLock(OldIrql_2);
    call {:si_unique_call 1919} PptPdoStartIo(pdx_28);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 1920} sdv_844 := ParHaveReadData(pdx_28);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} sdv_844 != 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    havoc vslice_dummy_var_202;
    call {:si_unique_call 1921} vslice_dummy_var_383 := KeSetEvent(vslice_dummy_var_202, 0, 0);
    goto L81;

  L81:
    call {:si_unique_call 1922} vslice_dummy_var_382 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 1923} Tmp_1179 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1179 != 0;
    assume Tmp_1179 > 0;
    Mem_T.INT4[Tmp_1179] := OldIrql_2;
    call {:si_unique_call 1924} IoAcquireCancelSpinLock(Tmp_1179);
    assume {:nonnull} Tmp_1179 != 0;
    assume Tmp_1179 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_1179];
    goto L81_dummy;

  L81_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} sdv_844 == 0;
    goto L81;

  anon28_Then:
    goto L81;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    return;

  anon27_Then:
    assume {:partition} sdv_855 != 0;
    call {:si_unique_call 1925} IoReleaseCancelSpinLock(OldIrql_2);
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    assume false;
    return;

  anon26_Then:
    goto L45;

  anon25_Then:
    goto L41;

  anon22_Then:
    call {:si_unique_call 1926} sdv_854 := ParHaveReadData(pdx_28);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} sdv_854 == 0;
    goto L104;

  anon23_Then:
    assume {:partition} sdv_854 != 0;
    assume {:nonnull} pdx_28 != 0;
    assume pdx_28 > 0;
    havoc vslice_dummy_var_203;
    call {:si_unique_call 1927} vslice_dummy_var_380 := KeSetEvent(vslice_dummy_var_203, 0, 0);
    goto L104;

  anon21_Then:
    assume {:partition} Status_16 != 258;
    goto L16;
}



procedure {:origName "ParCreateSystemThread"} ParCreateSystemThread(actual_Pdx_31: int) returns (Tmp_1180: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1180 == 0 || Tmp_1180 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParCreateSystemThread"} ParCreateSystemThread(actual_Pdx_31: int) returns (Tmp_1180: int)
{
  var {:scalar} Status_17: int;
  var {:scalar} sdv_859: int;
  var {:scalar} sdv_861: int;
  var {:pointer} Pdx_31: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_388: int;

  anon0:
    call {:si_unique_call 1930} vslice_dummy_var_385 := __HAVOC_malloc(24);
    Pdx_31 := actual_Pdx_31;
    call {:si_unique_call 1931} sdv_InitializeObjectAttributes(0, 0, 512, 0, 0);
    call {:si_unique_call 1932} Status_17 := PsCreateSystemThread(0, 2097151, 0, 0, 0, li2bplFunctionConstant262, 0);
    call {:si_unique_call 1933} sdv_859 := sdv_NT_ERROR(Status_17);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_859 != 0;
    goto L22;

  L22:
    Tmp_1180 := Status_17;
    return;

  anon7_Then:
    assume {:partition} sdv_859 == 0;
    call {:si_unique_call 1934} Status_17 := ObReferenceObjectByHandle(0, 2097151, 0, 0, 0, 0);
    call {:si_unique_call 1935} sdv_861 := sdv_NT_ERROR(Status_17);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_861 != 0;
    assume {:nonnull} Pdx_31 != 0;
    assume Pdx_31 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto L33;

  L33:
    call {:si_unique_call 1936} vslice_dummy_var_387 := ZwClose(0);
    goto L22;

  anon9_Then:
    assume {:nonnull} Pdx_31 != 0;
    assume Pdx_31 > 0;
    call {:si_unique_call 1937} vslice_dummy_var_388 := KeReleaseSemaphore(0, 0, 1, 0);
    goto L33;

  anon8_Then:
    assume {:partition} sdv_861 == 0;
    call {:si_unique_call 1938} vslice_dummy_var_386 := ZwClose(0);
    goto L22;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_389: int;

  anon0:
    call {:si_unique_call 1939} vslice_dummy_var_389 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_390: int;

  anon0:
    call {:si_unique_call 1940} vslice_dummy_var_390 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "P4IeeeEnter1284Mode"} P4IeeeEnter1284Mode(actual_Controller_7: int, actual_Extensibility_1: int, actual_IeeeState: int) returns (Tmp_1186: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1186 == -1073741808 || Tmp_1186 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4IeeeEnter1284Mode"} P4IeeeEnter1284Mode(actual_Controller_7: int, actual_Extensibility_1: int, actual_IeeeState: int) returns (Tmp_1186: int)
{
  var {:scalar} Tmp_1187: int;
  var {:scalar} Tmp_1188: int;
  var {:scalar} dcr_2: int;
  var {:scalar} Tmp_1189: int;
  var {:pointer} Tmp_1192: int;
  var {:scalar} sdv_865: int;
  var {:scalar} Tmp_1194: int;
  var {:scalar} Tmp_1195: int;
  var {:pointer} Tmp_1196: int;
  var {:scalar} Tmp_1197: int;
  var {:scalar} Tmp_1199: int;
  var {:scalar} sdv_866: int;
  var {:scalar} sdv_867: int;
  var {:scalar} sdv_868: int;
  var {:scalar} Tmp_1200: int;
  var {:scalar} Tmp_1201: int;
  var {:scalar} sPeriphResponseTime_1: int;
  var {:scalar} Tmp_1202: int;
  var {:scalar} Tmp_1203: int;
  var {:pointer} Controller_7: int;
  var {:pointer} IeeeState: int;

  anon0:
    Controller_7 := actual_Controller_7;
    IeeeState := actual_IeeeState;
    sPeriphResponseTime_1 := 35;
    call {:si_unique_call 1941} dcr_2 := corral_nondet();
    Tmp_1203 := BAND(dcr_2, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr_2 := BOR(Tmp_1203, BOR(4, 8));
    Tmp_1188 := BAND(dcr_2, BOR(4, 8));
    dcr_2 := BOR(Tmp_1188, BOR(4, 8));
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_1200 := BAND(dcr_2, BOR(BOR(BOR(2, 4), 16), 32));
    dcr_2 := BOR(Tmp_1200, 2);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    call {:si_unique_call 1942} sdv_865 := corral_nondet();
    Tmp_1189 := BAND(sdv_865, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Tmp_1189 == 56;
    Tmp_1195 := 1;
    goto L51;

  L51:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Tmp_1195 == 0;
    Tmp_1199 := BAND(dcr_2, BOR(BOR(BOR(BOR(1, 4), 8), 16), 32));
    dcr_2 := BOR(Tmp_1199, 8);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_1186 := -1073741808;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Tmp_1195 != 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_1202 := BAND(dcr_2, BOR(BOR(BOR(BOR(1, 2), 4), 16), 32));
    dcr_2 := BOR(Tmp_1202, BOR(1, 2));
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_1201 := BAND(dcr_2, BOR(BOR(4, 16), 32));
    dcr_2 := BOR(Tmp_1201, 0);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    call {:si_unique_call 1943} sdv_866 := corral_nondet();
    Tmp_1197 := BAND(sdv_866, 64);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_1197 == 64;
    Tmp_1187 := 1;
    goto L79;

  L79:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Tmp_1187 != 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_1186 := 0;
    goto L1;

  anon10_Then:
    assume {:partition} Tmp_1187 == 0;
    Tmp_1194 := BAND(dcr_2, BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32));
    dcr_2 := BOR(Tmp_1194, 8);
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    assume {:nonnull} IeeeState != 0;
    assume IeeeState > 0;
    Tmp_1186 := -1073741808;
    goto L1;

  anon12_Then:
    assume {:partition} Tmp_1197 != 64;
    Tmp_1196 := Controller_7;
    call {:si_unique_call 1944} sdv_867 := CheckPort(Tmp_1196, 64, 64, sPeriphResponseTime_1);
    Tmp_1187 := sdv_867;
    goto L79;

  anon11_Then:
    assume {:partition} Tmp_1189 != 56;
    Tmp_1192 := Controller_7;
    call {:si_unique_call 1945} sdv_868 := CheckPort(Tmp_1192, 120, 56, sPeriphResponseTime_1);
    Tmp_1195 := sdv_868;
    goto L51;
}



procedure {:origName "P4IeeeTerminate1284Mode"} P4IeeeTerminate1284Mode(actual_Controller_8: int, actual_IeeeState_1: int, actual_XFlagOnEvent24: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4IeeeTerminate1284Mode"} P4IeeeTerminate1284Mode(actual_Controller_8: int, actual_IeeeState_1: int, actual_XFlagOnEvent24: int)
{
  var {:pointer} Tmp_1206: int;
  var {:scalar} dsrValue_1: int;
  var {:pointer} Tmp_1208: int;
  var {:scalar} bUseXFlag_1: int;
  var {:scalar} dcr_3: int;
  var {:scalar} bXFlag_1: int;
  var {:scalar} dsrMask_1: int;
  var {:scalar} Tmp_1209: int;
  var {:scalar} Tmp_1212: int;
  var {:scalar} Tmp_1213: int;
  var {:scalar} Tmp_1214: int;
  var {:scalar} sdv_872: int;
  var {:scalar} Tmp_1216: int;
  var {:scalar} sdv_874: int;
  var {:scalar} sdv_875: int;
  var {:scalar} Tmp_1217: int;
  var {:scalar} Tmp_1218: int;
  var {:scalar} sdv_876: int;
  var {:scalar} Tmp_1219: int;
  var {:scalar} Tmp_1220: int;
  var {:pointer} Controller_8: int;
  var {:pointer} IeeeState_1: int;
  var {:scalar} XFlagOnEvent24: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;

  anon0:
    call {:si_unique_call 1946} vslice_dummy_var_391 := __HAVOC_malloc(4);
    Controller_8 := actual_Controller_8;
    IeeeState_1 := actual_IeeeState_1;
    XFlagOnEvent24 := actual_XFlagOnEvent24;
    bUseXFlag_1 := 0;
    call {:si_unique_call 1947} dcr_3 := corral_nondet();
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto L18;

  L18:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    Tmp_1212 := BAND(dcr_3, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_3 := BOR(Tmp_1212, 8);
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    return;

  anon31_Then:
    call {:si_unique_call 1948} sdv_872 := corral_nondet();
    bXFlag_1 := BAND(sdv_872, 16);
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    call {:si_unique_call 1949} dcr_3 := corral_nondet();
    Tmp_1218 := BAND(dcr_3, BOR(BOR(BOR(4, 8), 16), 32));
    dcr_3 := BOR(Tmp_1218, 8);
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L48;

  L48:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto L50;

  L50:
    bUseXFlag_1 := 1;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} XFlagOnEvent24 != 0;
    goto L53;

  L53:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} bUseXFlag_1 != 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} bXFlag_1 != 0;
    Tmp_1217 := 0;
    goto L58;

  L58:
    dsrMask_1 := BOR(BOR(64, Tmp_1217), 0);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} bXFlag_1 == 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} bXFlag_1 != 0;
    Tmp_1219 := 0;
    goto L103;

  L103:
    Tmp_1209 := Tmp_1219;
    Tmp_1220 := Tmp_1209;
    goto L62;

  L62:
    dsrValue_1 := BOR(BOR(0, Tmp_1220), 0);
    goto L63;

  L63:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    Tmp_1206 := Controller_8;
    call {:si_unique_call 1950} sdv_874 := CheckPort(Tmp_1206, dsrMask_1, dsrValue_1, 35);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_874 != 0;
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    Tmp_1216 := BAND(dcr_3, BOR(BOR(BOR(BOR(2, 4), 8), 16), 32));
    dcr_3 := BOR(Tmp_1216, BOR(2, 8));
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    call {:si_unique_call 1951} sdv_875 := corral_nondet();
    Tmp_1213 := BAND(sdv_875, BOR(64, 128));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Tmp_1213 == 64;
    Tmp_1214 := 1;
    goto L85;

  L85:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Tmp_1214 == 0;
    call {:si_unique_call 1952} vslice_dummy_var_392 := corral_nondet();
    goto L18;

  anon39_Then:
    assume {:partition} Tmp_1214 != 0;
    goto L18;

  anon45_Then:
    assume {:partition} Tmp_1213 != 64;
    Tmp_1208 := Controller_8;
    call {:si_unique_call 1953} sdv_876 := CheckPort(Tmp_1208, 192, 64, 35);
    Tmp_1214 := sdv_876;
    goto L85;

  anon38_Then:
    assume {:partition} sdv_874 == 0;
    call {:si_unique_call 1954} vslice_dummy_var_393 := corral_nondet();
    goto L18;

  anon40_Then:
    assume {:partition} bXFlag_1 == 0;
    Tmp_1219 := 16;
    goto L103;

  anon44_Then:
    assume {:partition} bXFlag_1 != 0;
    Tmp_1220 := 0;
    goto L62;

  anon37_Then:
    assume {:partition} bXFlag_1 == 0;
    Tmp_1217 := 16;
    goto L58;

  anon36_Then:
    assume {:partition} bUseXFlag_1 == 0;
    dsrMask_1 := 64;
    dsrValue_1 := 0;
    goto L63;

  anon43_Then:
    assume {:partition} XFlagOnEvent24 == 0;
    bUseXFlag_1 := 0;
    goto L53;

  anon34_Then:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    bUseXFlag_1 := 0;
    goto L53;

  anon35_Then:
    goto L50;

  anon32_Then:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L108;

  L108:
    bUseXFlag_1 := 1;
    goto L53;

  anon41_Then:
    assume {:nonnull} IeeeState_1 != 0;
    assume IeeeState_1 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    bUseXFlag_1 := 0;
    goto L53;

  anon42_Then:
    goto L108;

  anon33_Then:
    goto L48;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_394: int;

  anon0:
    call {:si_unique_call 1955} vslice_dummy_var_394 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "P4NibbleModeRead"} P4NibbleModeRead(actual_Controller_9: int, actual_Buffer_5: int, actual_BufferSize_3: int, actual_BytesTransferred_3: int, actual_IeeeState_2: int) returns (Tmp_1224: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1224 == -1073741435 || Tmp_1224 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4NibbleModeRead"} P4NibbleModeRead(actual_Controller_9: int, actual_Buffer_5: int, actual_BufferSize_3: int, actual_BytesTransferred_3: int, actual_IeeeState_2: int) returns (Tmp_1224: int)
{
  var {:scalar} i_23: int;
  var {:scalar} Tmp_1225: int;
  var {:scalar} sdv_877: int;
  var {:scalar} sdv_878: int;
  var {:scalar} dcr_4: int;
  var {:scalar} Tmp_1229: int;
  var {:scalar} Tmp_1230: int;
  var {:scalar} Tmp_1231: int;
  var {:scalar} Tmp_1232: int;
  var {:scalar} Status_18: int;
  var {:scalar} j: int;
  var {:scalar} Tmp_1234: int;
  var {:scalar} Tmp_1236: int;
  var {:scalar} sdv_880: int;
  var {:scalar} Tmp_1237: int;
  var {:scalar} Tmp_1238: int;
  var {:scalar} Tmp_1240: int;
  var {:scalar} Tmp_1241: int;
  var {:pointer} Tmp_1242: int;
  var {:scalar} Tmp_1243: int;
  var {:pointer} Tmp_1244: int;
  var {:scalar} Tmp_1245: int;
  var {:pointer} nibble: int;
  var {:scalar} sdv_885: int;
  var {:scalar} Tmp_1246: int;
  var {:pointer} Tmp_1247: int;
  var {:scalar} sdv_886: int;
  var {:scalar} sdv_887: int;
  var {:scalar} Tmp_1248: int;
  var {:scalar} sdv_888: int;
  var {:scalar} Tmp_1249: int;
  var {:scalar} dsr: int;
  var {:pointer} p_9: int;
  var {:pointer} Controller_9: int;
  var {:pointer} Buffer_5: int;
  var {:scalar} BufferSize_3: int;
  var {:pointer} BytesTransferred_3: int;
  var {:pointer} IeeeState_2: int;

  anon0:
    Controller_9 := actual_Controller_9;
    Buffer_5 := actual_Buffer_5;
    BufferSize_3 := actual_BufferSize_3;
    BytesTransferred_3 := actual_BytesTransferred_3;
    IeeeState_2 := actual_IeeeState_2;
    call {:si_unique_call 1956} nibble := __HAVOC_malloc(8);
    Status_18 := 0;
    p_9 := Buffer_5;
    call {:si_unique_call 1957} dcr_4 := corral_nondet();
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L26;

  L26:
    i_23 := 0;
    goto L27;

  L27:
    call {:si_unique_call 1958} i_23, dcr_4, Tmp_1229, Tmp_1231, j, Tmp_1234, sdv_880, Tmp_1237, Tmp_1238, Tmp_1240, Tmp_1241, Tmp_1242, Tmp_1244, Tmp_1245, sdv_885, Tmp_1246, sdv_886, sdv_887, Tmp_1248, sdv_888, Tmp_1249, dsr := P4NibbleModeRead_loop_L27(i_23, dcr_4, Tmp_1229, Tmp_1231, j, Tmp_1234, sdv_880, Tmp_1237, Tmp_1238, Tmp_1240, Tmp_1241, Tmp_1242, Tmp_1244, Tmp_1245, nibble, sdv_885, Tmp_1246, sdv_886, sdv_887, Tmp_1248, sdv_888, Tmp_1249, dsr, p_9, Controller_9, BufferSize_3, IeeeState_2);
    goto L27_last;

  L27_last:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BufferSize_3 > i_23;
    j := 0;
    goto L30;

  L30:
    call {:si_unique_call 1959} dcr_4, Tmp_1229, j, sdv_880, Tmp_1241, Tmp_1242, Tmp_1244, sdv_885, Tmp_1246, sdv_886, sdv_887, sdv_888, Tmp_1249 := P4NibbleModeRead_loop_L30(dcr_4, Tmp_1229, j, sdv_880, Tmp_1241, Tmp_1242, Tmp_1244, nibble, sdv_885, Tmp_1246, sdv_886, sdv_887, sdv_888, Tmp_1249, Controller_9, IeeeState_2);
    goto L30_last;

  L30_last:
    assume {:CounterLoop 2} {:Counter "j"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > j;
    dcr_4 := BOR(dcr_4, 2);
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1960} sdv_885 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(sdv_885, 64) != 0;
    Tmp_1244 := Controller_9;
    call {:si_unique_call 1961} sdv_887 := CheckPort(Tmp_1244, 64, 0, 35);
    Tmp_1246 := sdv_887;
    goto L48;

  L48:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Tmp_1246 != 0;
    call {:si_unique_call 1962} sdv_886 := corral_nondet();
    Tmp_1229 := j;
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    Mem_T.INT4[nibble + Tmp_1229 * 4] := sdv_886;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    dcr_4 := BAND(dcr_4, BNOT(2));
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1963} sdv_880 := corral_nondet();
    Tmp_1241 := BAND(sdv_880, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Tmp_1241 == 64;
    Tmp_1249 := 1;
    goto L68;

  L68:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Tmp_1249 != 0;
    j := j + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} Tmp_1249 == 0;
    Status_18 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  L74:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    dcr_4 := BOR(dcr_4, 2);
    goto L75;

  L75:
    Tmp_1224 := Status_18;
    return;

  anon43_Then:
    goto L75;

  anon52_Then:
    assume {:partition} Tmp_1241 != 64;
    Tmp_1242 := Controller_9;
    call {:si_unique_call 1964} sdv_888 := CheckPort(Tmp_1242, 64, 64, 35);
    Tmp_1249 := sdv_888;
    goto L68;

  anon41_Then:
    assume {:partition} Tmp_1246 == 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_18 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon40_Then:
    assume {:partition} BAND(sdv_885, 64) == 0;
    Tmp_1246 := 1;
    goto L48;

  anon39_Then:
    assume {:partition} j >= 2;
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    call {:si_unique_call 1965} Tmp_1231 := corral_nondet();
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble], 128) != 0;
    Tmp_1245 := 0;
    goto L92;

  L92:
    Tmp_1238 := i_23;
    assume {:nonnull} p_9 != 0;
    assume p_9 > 0;
    Mem_T.INT4[p_9 + Tmp_1238 * 4] := BOR(Tmp_1231, Tmp_1245);
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    call {:si_unique_call 1966} Tmp_1237 := corral_nondet();
    assume {:nonnull} nibble != 0;
    assume nibble > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble + 1 * 4], 128) != 0;
    Tmp_1248 := 0;
    goto L98;

  L98:
    Tmp_1234 := i_23;
    Tmp_1240 := i_23;
    assume {:nonnull} p_9 != 0;
    assume p_9 > 0;
    Mem_T.INT4[p_9 + Tmp_1234 * 4] := BOR(Mem_T.INT4[p_9 + Tmp_1240 * 4], BOR(Tmp_1237, Tmp_1248));
    call {:si_unique_call 1967} dsr := corral_nondet();
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(dsr, 8) != 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    i_23 := i_23 + 1;
    goto L28;

  L28:
    assume {:nonnull} BytesTransferred_3 != 0;
    assume BytesTransferred_3 > 0;
    Mem_T.INT4[BytesTransferred_3] := i_23;
    goto L74;

  anon44_Then:
    assume {:partition} BAND(dsr, 8) == 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    i_23 := i_23 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble + 1 * 4], 128) == 0;
    Tmp_1248 := 128;
    goto L98;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble], 128) == 0;
    Tmp_1245 := 8;
    goto L92;

  anon38_Then:
    assume {:partition} i_23 >= BufferSize_3;
    goto L28;

  anon48_Then:
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_18 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon49_Then:
    goto L25;

  L25:
    call {:si_unique_call 1968} dsr := corral_nondet();
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(dsr, 8) != 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1969} dsr := corral_nondet();
    Tmp_1232 := BAND(dsr, BOR(16, 32));
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Tmp_1232 == 32;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon51_Then:
    assume {:partition} Tmp_1232 != 32;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_18 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon45_Then:
    assume {:partition} BAND(dsr, 8) == 0;
    call {:si_unique_call 1970} dcr_4 := corral_nondet();
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Tmp_1243 := BAND(dcr_4, BOR(BOR(4, 16), 32));
    dcr_4 := BOR(Tmp_1243, 0);
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    call {:si_unique_call 1971} sdv_877 := corral_nondet();
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(sdv_877, 32) != 0;
    Tmp_1247 := Controller_9;
    call {:si_unique_call 1972} sdv_878 := CheckPort(Tmp_1247, 32, 0, 35);
    Tmp_1236 := sdv_878;
    goto L150;

  L150:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Tmp_1236 != 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L26;

  anon47_Then:
    assume {:partition} Tmp_1236 == 0;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Status_18 := -1073741435;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L74;

  anon46_Then:
    assume {:partition} BAND(sdv_877, 32) == 0;
    Tmp_1236 := 1;
    goto L150;

  anon37_Then:
    call {:si_unique_call 1973} dsr := corral_nondet();
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Tmp_1230 := BAND(dsr, 8);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Tmp_1230 == 8;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    Tmp_1225 := BAND(dcr_4, BOR(BOR(BOR(2, 4), 16), 32));
    dcr_4 := BOR(Tmp_1225, 2);
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L25;

  anon50_Then:
    assume {:partition} Tmp_1230 != 8;
    assume {:nonnull} IeeeState_2 != 0;
    assume IeeeState_2 > 0;
    goto L26;
}



procedure {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_896: int, actual_sdv_897: int) returns (Tmp_1256: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_896: int, actual_sdv_897: int) returns (Tmp_1256: int)
{
  var {:scalar} sdv_898: int;

  anon0:
    call {:si_unique_call 1974} Tmp_1256 := __HAVOC_malloc(4);
    call {:si_unique_call 1975} sdv_898 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1256 != 0;
    assume Tmp_1256 > 0;
    assume {:nonnull} sdv_898 != 0;
    assume sdv_898 > 0;
    Mem_T.INT4[Tmp_1256] := Mem_T.INT4[sdv_898];
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_921: int, actual_sdv_922: int) returns (Tmp_1271: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_921: int, actual_sdv_922: int) returns (Tmp_1271: int)
{
  var {:scalar} sdv_923: int;

  anon0:
    call {:si_unique_call 1976} Tmp_1271 := __HAVOC_malloc(4);
    call {:si_unique_call 1977} sdv_923 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1271 != 0;
    assume Tmp_1271 > 0;
    assume {:nonnull} sdv_923 != 0;
    assume sdv_923 > 0;
    Mem_T.INT4[Tmp_1271] := Mem_T.INT4[sdv_923];
    return;
}



procedure {:origName "_sdv_init49"} _sdv_init49();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init49"} _sdv_init49()
{
  var vslice_dummy_var_395: int;

  anon0:
    call {:si_unique_call 1978} vslice_dummy_var_395 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptCheckIfStlProductId"} PptCheckIfStlProductId(actual_DeviceExtension: int, actual_ulDaisyIndex_3: int) returns (Tmp_1289: int);
  free ensures {:va_keep} Tmp_1289 == 0 || Tmp_1289 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptCheckIfStlProductId"} PptCheckIfStlProductId(actual_DeviceExtension: int, actual_ulDaisyIndex_3: int) returns (Tmp_1289: int)
{
  var {:scalar} i_25: int;
  var {:scalar} ucProdIdLoByteHiNibble_1: int;
  var {:scalar} bReturnValue_27: int;
  var {:scalar} ucProdIdHiByteLoNibble_1: int;
  var {:scalar} Tmp_1292: int;
  var {:scalar} Tmp_1293: int;
  var {:scalar} Tmp_1297: int;
  var {:scalar} Tmp_1298: int;
  var {:scalar} ucProdIdHiByteHiNibble_1: int;
  var {:pointer} CurrentPort_7: int;
  var {:scalar} Tmp_1303: int;
  var {:scalar} ucProdIdLoByteLoNibble_1: int;
  var {:scalar} usProdId_1: int;
  var {:scalar} status_45: int;
  var {:scalar} value_4: int;
  var {:scalar} newvalue_3: int;
  var {:pointer} DeviceExtension: int;
  var {:scalar} ulDaisyIndex_3: int;

  anon0:
    DeviceExtension := actual_DeviceExtension;
    ulDaisyIndex_3 := actual_ulDaisyIndex_3;
    bReturnValue_27 := 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc CurrentPort_7;
    call {:si_unique_call 1979} value_4 := corral_nondet();
    Tmp_1298 := BAND(value_4, BNOT(8));
    newvalue_3 := BOR(Tmp_1298, 4);
    newvalue_3 := BAND(newvalue_3, BNOT(32));
    i_25 := 0;
    goto L39;

  L39:
    call {:si_unique_call 1980} i_25, Tmp_1292 := PptCheckIfStlProductId_loop_L39(i_25, Tmp_1292);
    goto L39_last;

  L39_last:
    assume {:CounterLoop 4} {:Counter "i_25"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 4 > i_25;
    Tmp_1292 := i_25;
    i_25 := i_25 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} i_25 >= 4;
    call {:si_unique_call 1981} status_45 := corral_nondet();
    Tmp_1293 := BAND(status_45, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_1293 == 184;
    call {:si_unique_call 1982} status_45 := corral_nondet();
    Tmp_1303 := BAND(status_45, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Tmp_1303 == 24;
    call {:si_unique_call 1983} status_45 := corral_nondet();
    Tmp_1297 := BAND(status_45, BOR(16, 32));
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_1297 == 48;
    call {:si_unique_call 1984} ucProdIdLoByteHiNibble_1 := corral_nondet();
    ucProdIdLoByteHiNibble_1 := BAND(ucProdIdLoByteHiNibble_1, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 1985} ucProdIdLoByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1986} ucProdIdLoByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1987} ucProdIdHiByteHiNibble_1 := corral_nondet();
    ucProdIdHiByteHiNibble_1 := BAND(ucProdIdHiByteHiNibble_1, BOR(BOR(BOR(16, 32), 64), 128));
    call {:si_unique_call 1988} ucProdIdHiByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1989} ucProdIdHiByteLoNibble_1 := corral_nondet();
    call {:si_unique_call 1990} usProdId_1 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 43775 == usProdId_1;
    goto L202;

  L202:
    bReturnValue_27 := 1;
    goto L203;

  L203:
    goto L54;

  L54:
    Tmp_1289 := bReturnValue_27;
    return;

  anon18_Then:
    assume {:partition} 43775 != usProdId_1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 43263 != usProdId_1;
    goto L203;

  anon14_Then:
    assume {:partition} 43263 == usProdId_1;
    goto L202;

  anon17_Then:
    assume {:partition} Tmp_1297 != 48;
    goto L54;

  anon16_Then:
    assume {:partition} Tmp_1303 != 24;
    goto L54;

  anon15_Then:
    assume {:partition} Tmp_1293 != 184;
    goto L54;
}



procedure {:origName "ParDeselectDevice"} ParDeselectDevice(actual_Pdx_32: int, actual_KeepPort: int) returns (Tmp_1314: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1314 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDeselectDevice"} ParDeselectDevice(actual_Pdx_32: int, actual_KeepPort: int) returns (Tmp_1314: int)
{
  var {:scalar} par1284Command: int;
  var {:scalar} pdoType: int;
  var {:pointer} fdo_2: int;
  var {:pointer} fdx_24: int;
  var {:pointer} Pdx_32: int;
  var {:scalar} KeepPort: int;
  var vslice_dummy_var_396: int;

  anon0:
    call {:si_unique_call 1991} par1284Command := __HAVOC_malloc(12);
    Pdx_32 := actual_Pdx_32;
    KeepPort := actual_KeepPort;
    assume {:nonnull} Pdx_32 != 0;
    assume Pdx_32 > 0;
    havoc fdo_2;
    assume {:nonnull} fdo_2 != 0;
    assume fdo_2 > 0;
    havoc fdx_24;
    assume {:nonnull} Pdx_32 != 0;
    assume Pdx_32 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} KeepPort != 0;
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    goto L16;

  L16:
    assume {:nonnull} Pdx_32 != 0;
    assume Pdx_32 > 0;
    havoc pdoType;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} pdoType != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} pdoType != 2;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} pdoType != 4;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} pdoType == 8;
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    goto L23;

  L23:
    call {:si_unique_call 1992} vslice_dummy_var_396 := PptDeselectDevice(fdx_24, par1284Command);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} KeepPort != 0;
    goto L30;

  L30:
    Tmp_1314 := 1;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} KeepPort == 0;
    assume {:nonnull} Pdx_32 != 0;
    assume Pdx_32 > 0;
    goto L30;

  anon16_Then:
    assume {:partition} pdoType != 8;
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    goto L23;

  anon17_Then:
    assume {:partition} pdoType == 4;
    assume {:nonnull} Pdx_32 != 0;
    assume Pdx_32 > 0;
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    goto L23;

  anon18_Then:
    assume {:partition} pdoType == 2;
    goto L19;

  L19:
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    goto L23;

  anon21_Then:
    assume {:partition} pdoType == 1;
    goto L19;

  anon20_Then:
    assume {:partition} KeepPort == 0;
    assume {:nonnull} par1284Command != 0;
    assume par1284Command > 0;
    goto L16;

  anon19_Then:
    Tmp_1314 := 1;
    goto L1;
}



procedure {:origName "ParSelectDevice"} ParSelectDevice(actual_Pdx_33: int, actual_HavePort: int) returns (Tmp_1316: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1316 == 1 || Tmp_1316 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParSelectDevice"} ParSelectDevice(actual_Pdx_33: int, actual_HavePort: int) returns (Tmp_1316: int)
{
  var {:scalar} par1284Command_1: int;
  var {:scalar} pdoType_1: int;
  var {:scalar} timeOut: int;
  var {:pointer} pPortDeviceObject: int;
  var {:scalar} status_47: int;
  var {:pointer} Pdx_33: int;
  var {:scalar} HavePort: int;

  anon0:
    call {:si_unique_call 1993} par1284Command_1 := __HAVOC_malloc(12);
    call {:si_unique_call 1994} timeOut := __HAVOC_malloc(20);
    Pdx_33 := actual_Pdx_33;
    HavePort := actual_HavePort;
    assume {:nonnull} par1284Command_1 != 0;
    assume par1284Command_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} HavePort != 0;
    assume {:nonnull} par1284Command_1 != 0;
    assume par1284Command_1 > 0;
    goto L12;

  L12:
    assume {:nonnull} Pdx_33 != 0;
    assume Pdx_33 > 0;
    havoc pdoType_1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} pdoType_1 != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} pdoType_1 != 2;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} pdoType_1 != 4;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} pdoType_1 != 8;
    goto L19;

  L19:
    assume {:nonnull} Pdx_33 != 0;
    assume Pdx_33 > 0;
    havoc pPortDeviceObject;
    assume {:nonnull} timeOut != 0;
    assume timeOut > 0;
    call {:si_unique_call 1995} status_47 := ParBuildSendInternalIoctl(1441884, pPortDeviceObject, par1284Command_1, 8, 0, 0, timeOut);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_47 >= 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} HavePort != 0;
    goto L29;

  L29:
    Tmp_1316 := 1;
    goto L1;

  L1:
    return;

  anon16_Then:
    assume {:partition} HavePort == 0;
    assume {:nonnull} Pdx_33 != 0;
    assume Pdx_33 > 0;
    goto L29;

  anon15_Then:
    assume {:partition} 0 > status_47;
    Tmp_1316 := 0;
    goto L1;

  anon17_Then:
    assume {:partition} pdoType_1 == 8;
    assume {:nonnull} par1284Command_1 != 0;
    assume par1284Command_1 > 0;
    goto L19;

  anon18_Then:
    assume {:partition} pdoType_1 == 4;
    assume {:nonnull} Pdx_33 != 0;
    assume Pdx_33 > 0;
    assume {:nonnull} par1284Command_1 != 0;
    assume par1284Command_1 > 0;
    goto L19;

  anon19_Then:
    assume {:partition} pdoType_1 == 2;
    goto L15;

  L15:
    assume {:nonnull} par1284Command_1 != 0;
    assume par1284Command_1 > 0;
    assume {:nonnull} par1284Command_1 != 0;
    assume par1284Command_1 > 0;
    goto L19;

  anon21_Then:
    assume {:partition} pdoType_1 == 1;
    goto L15;

  anon20_Then:
    assume {:partition} HavePort == 0;
    assume {:nonnull} par1284Command_1 != 0;
    assume par1284Command_1 > 0;
    goto L12;
}



procedure {:origName "_sdv_init44"} _sdv_init44();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init44"} _sdv_init44()
{
  var vslice_dummy_var_397: int;

  anon0:
    call {:si_unique_call 1996} vslice_dummy_var_397 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptInitiate1284_3"} PptInitiate1284_3(actual_Extension_52: int) returns (Tmp_1320: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptInitiate1284_3"} PptInitiate1284_3(actual_Extension_52: int) returns (Tmp_1320: int)
{
  var {:scalar} loopCount: int;
  var {:scalar} maxTries_2: int;
  var {:scalar} deviceCount2: int;
  var {:scalar} deviceCount1: int;
  var {:pointer} Extension_52: int;

  anon0:
    Extension_52 := actual_Extension_52;
    deviceCount1 := 0;
    deviceCount2 := 0;
    loopCount := 0;
    maxTries_2 := 3;
    goto L35;

  L35:
    call {:si_unique_call 1997} loopCount, deviceCount2, deviceCount1 := PptInitiate1284_3_loop_L35(loopCount, maxTries_2, deviceCount2, deviceCount1, Extension_52);
    goto L35_last;

  L35_last:
    call {:si_unique_call 1998} deviceCount1 := Ppt1284_3AssignAddress(Extension_52);
    call {:si_unique_call 1999} deviceCount2 := Ppt1284_3AssignAddress(Extension_52);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} deviceCount1 != deviceCount2;
    loopCount := loopCount + 1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} maxTries_2 > loopCount;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} loopCount >= maxTries_2;
    goto L28;

  L28:
    Tmp_1320 := deviceCount2;
    return;

  anon5_Then:
    assume {:partition} deviceCount1 == deviceCount2;
    goto L28;
}



procedure {:origName "PptDeselectDevice"} PptDeselectDevice(actual_Context_6: int, actual_DeselectCommand: int) returns (Tmp_1322: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1322 == -1073741811 || Tmp_1322 == 0 || Tmp_1322 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDeselectDevice"} PptDeselectDevice(actual_Context_6: int, actual_DeselectCommand: int) returns (Tmp_1322: int)
{
  var {:scalar} i_26: int;
  var {:scalar} success_1: int;
  var {:scalar} Status_20: int;
  var {:pointer} Command_1: int;
  var {:pointer} fdx_25: int;
  var {:scalar} DeviceID_1: int;
  var {:pointer} Context_6: int;
  var {:pointer} DeselectCommand: int;
  var vslice_dummy_var_204: int;

  anon0:
    Context_6 := actual_Context_6;
    DeselectCommand := actual_DeselectCommand;
    Status_20 := 0;
    fdx_25 := Context_6;
    Command_1 := DeselectCommand;
    success_1 := 0;
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L15;

  L15:
    call {:si_unique_call 2000} Tmp_1322 := PptDeselectLegacyZip#1(Context_6, DeselectCommand);
    goto L1;

  L1:
    return;

  anon32_Then:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    havoc DeviceID_1;
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L22;

  L22:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L24;

  L24:
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L28;

  L28:
    Status_20 := 0;
    goto L29;

  L29:
    Tmp_1322 := Status_20;
    goto L1;

  anon27_Then:
    call {:si_unique_call 2001} PptFreePort#1(fdx_25);
    goto L28;

  anon25_Then:
    assume {:nonnull} fdx_25 != 0;
    assume fdx_25 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    i_26 := 0;
    goto L31;

  L31:
    call {:si_unique_call 2002} i_26, success_1 := PptDeselectDevice_loop_L31(i_26, success_1, fdx_25);
    goto L31_last;

  L31_last:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} PptDot3Retries > i_26;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} success_1 == 0;
    assume {:nonnull} fdx_25 != 0;
    assume fdx_25 > 0;
    havoc vslice_dummy_var_204;
    call {:si_unique_call 2003} success_1 := PptSend1284_3Command(vslice_dummy_var_204, 48);
    i_26 := i_26 + 1;
    goto anon30_Else_dummy;

  anon30_Else_dummy:
    assume false;
    return;

  anon30_Then:
    assume {:partition} success_1 != 0;
    goto L32;

  L32:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} success_1 != 0;
    assume {:nonnull} Command_1 != 0;
    assume Command_1 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto L47;

  L47:
    Status_20 := 0;
    goto L29;

  anon31_Then:
    call {:si_unique_call 2004} PptFreePort#1(fdx_25);
    goto L47;

  anon29_Then:
    assume {:partition} success_1 == 0;
    Status_20 := -1073741823;
    goto L29;

  anon28_Then:
    assume {:partition} i_26 >= PptDot3Retries;
    goto L32;

  anon26_Then:
    goto L24;

  anon33_Then:
    assume {:nonnull} fdx_25 != 0;
    assume fdx_25 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    Status_20 := -1073741811;
    goto L29;

  anon24_Then:
    goto L22;

  anon23_Then:
    goto L15;
}



procedure {:origName "PptSend1284_3Command"} PptSend1284_3Command(actual_CurrentPort_8: int, actual_Command_2: int) returns (Tmp_1324: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1324 == 1 || Tmp_1324 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSend1284_3Command"} PptSend1284_3Command(actual_CurrentPort_8: int, actual_Command_2: int) returns (Tmp_1324: int)
{
  var {:scalar} i_27: int;
  var {:scalar} Tmp_1325: int;
  var {:scalar} Tmp_1327: int;
  var {:scalar} success_2: int;
  var {:pointer} Tmp_1328: int;
  var {:scalar} Tmp_1329: int;
  var {:scalar} ii_1: int;
  var {:scalar} Tmp_1330: int;
  var {:scalar} Tmp_1332: int;
  var {:scalar} Tmp_1333: int;
  var {:scalar} sdv_956: int;
  var {:scalar} sdv_957: int;
  var {:scalar} sdv_958: int;
  var {:scalar} sdv_959: int;
  var {:scalar} Tmp_1337: int;
  var {:scalar} Tmp_1338: int;
  var {:scalar} sdv_960: int;
  var {:scalar} sdv_961: int;
  var {:scalar} sdv_962: int;
  var {:scalar} test: int;
  var {:pointer} Tmp_1343: int;
  var {:scalar} sdv_963: int;
  var {:scalar} Tmp_1345: int;
  var {:scalar} value_5: int;
  var {:scalar} newvalue_4: int;
  var {:scalar} Tmp_1348: int;
  var {:pointer} Tmp_1349: int;
  var {:pointer} CurrentPort_8: int;
  var {:scalar} Command_2: int;

  anon0:
    CurrentPort_8 := actual_CurrentPort_8;
    Command_2 := actual_Command_2;
    success_2 := 0;
    test := BAND(Command_2, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    call {:si_unique_call 2005} value_5 := corral_nondet();
    Tmp_1325 := BAND(value_5, BNOT(8));
    newvalue_4 := BOR(Tmp_1325, 4);
    newvalue_4 := BAND(newvalue_4, BNOT(32));
    i_27 := 0;
    goto L35;

  L35:
    call {:si_unique_call 2006} i_27, Tmp_1333 := PptSend1284_3Command_loop_L35(i_27, Tmp_1333);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_27"} true;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 4 > i_27;
    Tmp_1333 := i_27;
    i_27 := i_27 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    assume {:partition} i_27 >= 4;
    call {:si_unique_call 2007} sdv_959 := corral_nondet();
    Tmp_1330 := BAND(sdv_959, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Tmp_1330 == 184;
    Tmp_1345 := 1;
    goto L52;

  L52:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Tmp_1345 != 0;
    call {:si_unique_call 2008} sdv_960 := corral_nondet();
    Tmp_1329 := BAND(sdv_960, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_1329 == 24;
    Tmp_1332 := 1;
    goto L71;

  L71:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Tmp_1332 != 0;
    call {:si_unique_call 2009} sdv_962 := corral_nondet();
    Tmp_1337 := BAND(sdv_962, BOR(16, 32));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Tmp_1337 == 48;
    Tmp_1338 := 1;
    goto L87;

  L87:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Tmp_1338 != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} test != 48;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} test != 224;
    success_2 := 1;
    goto L124;

  L124:
    goto L53;

  L53:
    Tmp_1324 := success_2;
    return;

  anon34_Then:
    assume {:partition} test == 224;
    ii_1 := 25000;
    goto L114;

  L114:
    call {:si_unique_call 2010} Tmp_1327, ii_1, sdv_961 := PptSend1284_3Command_loop_L114(Tmp_1327, ii_1, sdv_961);
    goto L114_last;

  L114_last:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} ii_1 <= 0;
    goto L124;

  anon32_Then:
    assume {:partition} 0 < ii_1;
    call {:si_unique_call 2011} sdv_961 := corral_nondet();
    Tmp_1327 := BAND(sdv_961, 8);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Tmp_1327 == 8;
    success_2 := 1;
    goto L124;

  anon39_Then:
    assume {:partition} Tmp_1327 != 8;
    ii_1 := ii_1 - 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    assume false;
    return;

  anon31_Then:
    assume {:partition} test == 48;
    ii_1 := 25000;
    goto L135;

  L135:
    call {:si_unique_call 2012} ii_1, sdv_956, Tmp_1348 := PptSend1284_3Command_loop_L135(ii_1, sdv_956, Tmp_1348);
    goto L135_last;

  L135_last:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} ii_1 > 0;
    call {:si_unique_call 2013} sdv_956 := corral_nondet();
    Tmp_1348 := BAND(sdv_956, 8);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Tmp_1348 != 8;
    success_2 := 1;
    goto L124;

  anon38_Then:
    assume {:partition} Tmp_1348 == 8;
    ii_1 := ii_1 - 1;
    goto anon38_Then_dummy;

  anon38_Then_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} 0 >= ii_1;
    goto L124;

  anon30_Then:
    assume {:partition} Tmp_1338 == 0;
    goto L53;

  anon37_Then:
    assume {:partition} Tmp_1337 != 48;
    Tmp_1349 := CurrentPort_8;
    call {:si_unique_call 2014} sdv_963 := CheckPort(Tmp_1349, 48, 48, 5);
    Tmp_1338 := sdv_963;
    goto L87;

  anon29_Then:
    assume {:partition} Tmp_1332 == 0;
    goto L53;

  anon36_Then:
    assume {:partition} Tmp_1329 != 24;
    Tmp_1328 := CurrentPort_8;
    call {:si_unique_call 2015} sdv_958 := CheckPort(Tmp_1328, 184, 24, 5);
    Tmp_1332 := sdv_958;
    goto L71;

  anon28_Then:
    assume {:partition} Tmp_1345 == 0;
    goto L53;

  anon35_Then:
    assume {:partition} Tmp_1330 != 184;
    Tmp_1343 := CurrentPort_8;
    call {:si_unique_call 2016} sdv_957 := CheckPort(Tmp_1343, 184, 184, 5);
    Tmp_1345 := sdv_957;
    goto L52;
}



procedure {:origName "Ppt1284_3AssignAddress"} Ppt1284_3AssignAddress(actual_DeviceExtension_1: int) returns (Tmp_1350: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "Ppt1284_3AssignAddress"} Ppt1284_3AssignAddress(actual_DeviceExtension_1: int) returns (Tmp_1350: int)
{
  var {:scalar} i_28: int;
  var {:scalar} Tmp_1351: int;
  var {:scalar} number: int;
  var {:scalar} bStlNon1284_1: int;
  var {:scalar} bStlNon1284_2: int;
  var {:scalar} Tmp_1354: int;
  var {:scalar} Tmp_1356: int;
  var {:scalar} Tmp_1358: int;
  var {:scalar} Tmp_1359: int;
  var {:scalar} Tmp_1360: int;
  var {:pointer} CurrentPort_9: int;
  var {:scalar} sdv_966: int;
  var {:scalar} sdv_969: int;
  var {:scalar} Tmp_1362: int;
  var {:scalar} idx_5: int;
  var {:scalar} sdv_971: int;
  var {:scalar} status_48: int;
  var {:scalar} lastdevice: int;
  var {:scalar} newvalue_5: int;
  var {:scalar} value_6: int;
  var {:pointer} DeviceExtension_1: int;

  anon0:
    DeviceExtension_1 := actual_DeviceExtension_1;
    number := 0;
    lastdevice := 0;
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    havoc CurrentPort_9;
    call {:si_unique_call 2017} value_6 := corral_nondet();
    Tmp_1354 := BAND(value_6, BNOT(8));
    newvalue_5 := BOR(Tmp_1354, 4);
    newvalue_5 := BAND(newvalue_5, BNOT(32));
    i_28 := 0;
    goto L35;

  L35:
    call {:si_unique_call 2018} i_28, Tmp_1359 := Ppt1284_3AssignAddress_loop_L35(i_28, Tmp_1359);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_28"} true;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 4 > i_28;
    Tmp_1359 := i_28;
    i_28 := i_28 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    assume {:partition} i_28 >= 4;
    call {:si_unique_call 2019} status_48 := corral_nondet();
    Tmp_1358 := BAND(status_48, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Tmp_1358 == 184;
    call {:si_unique_call 2020} status_48 := corral_nondet();
    Tmp_1362 := BAND(status_48, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Tmp_1362 == 24;
    call {:si_unique_call 2021} status_48 := corral_nondet();
    Tmp_1351 := BAND(status_48, BOR(16, 32));
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Tmp_1351 == 48;
    goto L82;

  L82:
    call {:si_unique_call 2022} number, sdv_969, lastdevice := Ppt1284_3AssignAddress_loop_L82(number, sdv_969, lastdevice, newvalue_5);
    goto L82_last;

  L82_last:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 4 > number;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} lastdevice == 0;
    number := number + 1;
    call {:si_unique_call 2023} sdv_969 := corral_nondet();
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(sdv_969, 128) != 0;
    goto L97;

  L97:
    goto L97_dummy;

  L97_dummy:
    assume false;
    return;

  anon30_Then:
    assume {:partition} BAND(sdv_969, 128) == 0;
    lastdevice := 1;
    goto L97;

  anon29_Then:
    assume {:partition} lastdevice != 0;
    goto L83;

  L83:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} number != 0;
    call {:si_unique_call 2024} bStlNon1284_2 := PptCheckIfNon1284_3Present(DeviceExtension_1);
    bStlNon1284_1 := 0;
    idx_5 := 0;
    goto L127;

  L127:
    call {:si_unique_call 2025} bStlNon1284_1, Tmp_1356, Tmp_1360, sdv_966, idx_5, sdv_971 := Ppt1284_3AssignAddress_loop_L127(number, bStlNon1284_1, bStlNon1284_2, Tmp_1356, Tmp_1360, sdv_966, idx_5, sdv_971, DeviceExtension_1);
    goto L127_last;

  L127_last:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} number > idx_5;
    Tmp_1360 := idx_5;
    call {:si_unique_call 2026} sdv_971 := PptCheckIfStl1284_3(DeviceExtension_1, Tmp_1360, bStlNon1284_2);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 1 == sdv_971;
    goto L136;

  L136:
    idx_5 := idx_5 + 1;
    goto L136_dummy;

  L136_dummy:
    assume false;
    return;

  anon34_Then:
    assume {:partition} 1 != sdv_971;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} 1 == bStlNon1284_2;
    Tmp_1356 := idx_5;
    call {:si_unique_call 2027} sdv_966 := PptCheckIfStlProductId(DeviceExtension_1, Tmp_1356);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} 1 == sdv_966;
    bStlNon1284_1 := 1;
    goto L136;

  anon36_Then:
    assume {:partition} 1 != sdv_966;
    goto L128;

  L128:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 1 == bStlNon1284_1;
    number := idx_5;
    goto L50;

  L50:
    Tmp_1350 := number;
    return;

  anon33_Then:
    assume {:partition} 1 != bStlNon1284_1;
    goto L50;

  anon35_Then:
    assume {:partition} 1 != bStlNon1284_2;
    goto L128;

  anon32_Then:
    assume {:partition} idx_5 >= number;
    goto L128;

  anon31_Then:
    assume {:partition} number == 0;
    goto L50;

  anon28_Then:
    assume {:partition} number >= 4;
    goto L83;

  anon39_Then:
    assume {:partition} Tmp_1351 != 48;
    goto L50;

  anon38_Then:
    assume {:partition} Tmp_1362 != 24;
    goto L50;

  anon37_Then:
    assume {:partition} Tmp_1358 != 184;
    goto L50;
}



procedure {:origName "PptCheckIfNon1284_3Present"} PptCheckIfNon1284_3Present(actual_Extension_53: int) returns (Tmp_1367: int);
  free ensures {:va_keep} Tmp_1367 == 1 || Tmp_1367 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptCheckIfNon1284_3Present"} PptCheckIfNon1284_3Present(actual_Extension_53: int) returns (Tmp_1367: int)
{
  var {:scalar} i_29: int;
  var {:scalar} ucAckStatus_1: int;
  var {:scalar} Tmp_1370: int;
  var {:scalar} bReturnValue_28: int;
  var {:scalar} Tmp_1371: int;
  var {:pointer} CurrentPort_10: int;
  var {:scalar} Tmp_1373: int;
  var {:scalar} Tmp_1374: int;
  var {:scalar} Tmp_1375: int;
  var {:scalar} Tmp_1376: int;
  var {:scalar} status_49: int;
  var {:scalar} value_7: int;
  var {:scalar} newvalue_6: int;
  var {:pointer} Extension_53: int;

  anon0:
    Extension_53 := actual_Extension_53;
    bReturnValue_28 := 0;
    assume {:nonnull} Extension_53 != 0;
    assume Extension_53 > 0;
    havoc CurrentPort_10;
    call {:si_unique_call 2028} value_7 := corral_nondet();
    Tmp_1374 := BAND(value_7, BNOT(8));
    newvalue_6 := BOR(Tmp_1374, 4);
    newvalue_6 := BAND(newvalue_6, BNOT(32));
    i_29 := 0;
    goto L33;

  L33:
    call {:si_unique_call 2029} i_29, Tmp_1375 := PptCheckIfNon1284_3Present_loop_L33(i_29, Tmp_1375);
    goto L33_last;

  L33_last:
    assume {:CounterLoop 4} {:Counter "i_29"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 4 > i_29;
    Tmp_1375 := i_29;
    i_29 := i_29 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} i_29 >= 4;
    call {:si_unique_call 2030} status_49 := corral_nondet();
    Tmp_1371 := BAND(status_49, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Tmp_1371 == 184;
    ucAckStatus_1 := BAND(status_49, 64);
    call {:si_unique_call 2031} status_49 := corral_nondet();
    Tmp_1370 := BAND(status_49, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_1370 == 24;
    Tmp_1373 := BAND(status_49, 64);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} ucAckStatus_1 != Tmp_1373;
    ucAckStatus_1 := BAND(status_49, 64);
    call {:si_unique_call 2032} status_49 := corral_nondet();
    Tmp_1376 := BAND(status_49, BOR(16, 32));
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_1376 == 48;
    bReturnValue_28 := 1;
    goto L67;

  L67:
    goto L48;

  L48:
    Tmp_1367 := bReturnValue_28;
    return;

  anon15_Then:
    assume {:partition} Tmp_1376 != 48;
    goto L67;

  anon14_Then:
    assume {:partition} ucAckStatus_1 == Tmp_1373;
    goto L67;

  anon13_Then:
    assume {:partition} Tmp_1370 != 24;
    goto L48;

  anon12_Then:
    assume {:partition} Tmp_1371 != 184;
    goto L48;
}



procedure {:origName "PptCheckIfStl1284_3"} PptCheckIfStl1284_3(actual_DeviceExtension_2: int, actual_ulDaisyIndex_4: int, actual_bNoStrobe_1: int) returns (Tmp_1380: int);
  free ensures {:va_keep} Tmp_1380 == 0 || Tmp_1380 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptCheckIfStl1284_3"} PptCheckIfStl1284_3(actual_DeviceExtension_2: int, actual_ulDaisyIndex_4: int, actual_bNoStrobe_1: int) returns (Tmp_1380: int)
{
  var {:scalar} i_30: int;
  var {:scalar} Tmp_1381: int;
  var {:scalar} bReturnValue_29: int;
  var {:scalar} Tmp_1389: int;
  var {:scalar} Tmp_1390: int;
  var {:scalar} Tmp_1391: int;
  var {:pointer} CurrentPort_11: int;
  var {:scalar} Tmp_1392: int;
  var {:scalar} ucReadPattern_1: int;
  var {:scalar} status_50: int;
  var {:scalar} ucReadValue_1: int;
  var {:scalar} newvalue_7: int;
  var {:scalar} value_8: int;
  var {:scalar} ucExpectedPattern_1: int;
  var {:pointer} DeviceExtension_2: int;
  var {:scalar} ulDaisyIndex_4: int;
  var {:scalar} bNoStrobe_1: int;

  anon0:
    DeviceExtension_2 := actual_DeviceExtension_2;
    ulDaisyIndex_4 := actual_ulDaisyIndex_4;
    bNoStrobe_1 := actual_bNoStrobe_1;
    bReturnValue_29 := 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc CurrentPort_11;
    call {:si_unique_call 2033} value_8 := corral_nondet();
    Tmp_1381 := BAND(value_8, BNOT(8));
    newvalue_7 := BOR(Tmp_1381, 4);
    newvalue_7 := BAND(newvalue_7, BNOT(32));
    i_30 := 0;
    goto L35;

  L35:
    call {:si_unique_call 2034} i_30, Tmp_1392 := PptCheckIfStl1284_3_loop_L35(i_30, Tmp_1392);
    goto L35_last;

  L35_last:
    assume {:CounterLoop 4} {:Counter "i_30"} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4 > i_30;
    Tmp_1392 := i_30;
    i_30 := i_30 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} i_30 >= 4;
    call {:si_unique_call 2035} status_50 := corral_nondet();
    Tmp_1390 := BAND(status_50, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Tmp_1390 == 184;
    call {:si_unique_call 2036} status_50 := corral_nondet();
    Tmp_1389 := BAND(status_50, BOR(BOR(BOR(8, 16), 32), 128));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_1389 == 24;
    call {:si_unique_call 2037} status_50 := corral_nondet();
    Tmp_1391 := BAND(status_50, BOR(16, 32));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_1391 == 48;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ulDaisyIndex_4 != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} bNoStrobe_1 == 0;
    goto L90;

  L90:
    ucExpectedPattern_1 := 240;
    bReturnValue_29 := 1;
    goto L111;

  L111:
    call {:si_unique_call 2038} ucReadPattern_1, ucReadValue_1, ucExpectedPattern_1 := PptCheckIfStl1284_3_loop_L111(ucReadPattern_1, ucReadValue_1, ucExpectedPattern_1, ulDaisyIndex_4);
    goto L111_last;

  L111_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} ucExpectedPattern_1 != 0;
    call {:si_unique_call 2039} ucReadValue_1 := corral_nondet();
    call {:si_unique_call 2040} ucReadPattern_1 := corral_nondet();
    ucReadPattern_1 := BOR(ucReadPattern_1, BAND(ucReadValue_1, 128));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ucReadPattern_1 != ucExpectedPattern_1;
    bReturnValue_29 := 0;
    goto L112;

  L112:
    goto L50;

  L50:
    Tmp_1380 := bReturnValue_29;
    return;

  anon24_Then:
    assume {:partition} ucReadPattern_1 == ucExpectedPattern_1;
    ucExpectedPattern_1 := ucExpectedPattern_1 - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} ucExpectedPattern_1 == 0;
    goto L112;

  anon19_Then:
    assume {:partition} bNoStrobe_1 != 0;
    goto L90;

  anon18_Then:
    assume {:partition} ulDaisyIndex_4 == 0;
    goto L90;

  anon23_Then:
    assume {:partition} Tmp_1391 != 48;
    goto L50;

  anon22_Then:
    assume {:partition} Tmp_1389 != 24;
    goto L50;

  anon21_Then:
    assume {:partition} Tmp_1390 != 184;
    goto L50;
}



procedure {:origName "_sdv_init47"} _sdv_init47();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init47"} _sdv_init47()
{
  var vslice_dummy_var_398: int;

  anon0:
    call {:si_unique_call 2041} vslice_dummy_var_398 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "DriverEntry"} DriverEntry(actual_DriverObject_5: int, actual_RegPath: int) returns (Tmp_1400: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DriverEntry"} DriverEntry(actual_DriverObject_5: int, actual_RegPath: int) returns (Tmp_1400: int)
{
  var {:scalar} fiveSeconds: int;
  var {:pointer} Tmp_1401: int;
  var {:pointer} Tmp_1402: int;
  var {:pointer} Tmp_1403: int;
  var {:pointer} Tmp_1404: int;
  var {:scalar} halfSecond: int;
  var {:scalar} localStatus: int;
  var {:scalar} size_1: int;
  var {:pointer} Tmp_1405: int;
  var {:pointer} sdv_981: int;
  var {:dopa} {:scalar} requestedTimeout: int;
  var {:pointer} Tmp_1406: int;
  var {:pointer} Tmp_1407: int;
  var {:pointer} Tmp_1409: int;
  var {:pointer} Tmp_1410: int;
  var {:pointer} Tmp_1411: int;
  var {:pointer} sdv_984: int;
  var {:pointer} Tmp_1413: int;
  var {:pointer} Tmp_1414: int;
  var {:pointer} Tmp_1415: int;
  var {:pointer} Tmp_1416: int;
  var {:pointer} Tmp_1417: int;
  var {:pointer} Tmp_1418: int;
  var {:scalar} callbackName: int;
  var {:pointer} Tmp_1419: int;
  var {:pointer} Tmp_1420: int;
  var {:pointer} Tmp_1421: int;
  var {:pointer} Tmp_1422: int;
  var {:pointer} Tmp_1423: int;
  var {:pointer} Tmp_1424: int;
  var {:pointer} Tmp_1425: int;
  var {:pointer} Tmp_1426: int;
  var {:pointer} Tmp_1427: int;
  var {:pointer} Tmp_1428: int;
  var {:pointer} Tmp_1429: int;
  var {:pointer} Tmp_1430: int;
  var {:pointer} Tmp_1431: int;
  var {:pointer} Tmp_1432: int;
  var {:pointer} Tmp_1433: int;
  var {:pointer} Tmp_1434: int;
  var {:pointer} Tmp_1435: int;
  var {:pointer} Tmp_1436: int;
  var {:pointer} Tmp_1437: int;
  var {:pointer} Tmp_1438: int;
  var {:pointer} Tmp_1439: int;
  var {:pointer} Tmp_1440: int;
  var {:pointer} Tmp_1441: int;
  var {:pointer} Tmp_1442: int;
  var {:pointer} Tmp_1443: int;
  var {:pointer} Tmp_1444: int;
  var {:scalar} Tmp_1445: int;
  var {:scalar} Tmp_1446: int;
  var {:pointer} DriverObject_5: int;
  var {:pointer} RegPath: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;

  anon0:
    call {:si_unique_call 2042} requestedTimeout := __HAVOC_malloc(4);
    call {:si_unique_call 2043} callbackName := __HAVOC_malloc(12);
    call {:si_unique_call 2044} vslice_dummy_var_399 := __HAVOC_malloc(24);
    DriverObject_5 := actual_DriverObject_5;
    RegPath := actual_RegPath;
    call {:si_unique_call 2045} Tmp_1401 := __HAVOC_malloc(76);
    call {:si_unique_call 2046} Tmp_1402 := __HAVOC_malloc(112);
    call {:si_unique_call 2047} Tmp_1403 := __HAVOC_malloc(76);
    call {:si_unique_call 2048} Tmp_1404 := __HAVOC_malloc(68);
    call {:si_unique_call 2049} Tmp_1405 := __HAVOC_malloc(44);
    call {:si_unique_call 2050} Tmp_1406 := __HAVOC_malloc(76);
    call {:si_unique_call 2051} Tmp_1407 := __HAVOC_malloc(52);
    call {:si_unique_call 2052} Tmp_1410 := __HAVOC_malloc(112);
    call {:si_unique_call 2053} Tmp_1411 := __HAVOC_malloc(76);
    call {:si_unique_call 2054} vslice_dummy_var_400 := __HAVOC_malloc(196);
    call {:si_unique_call 2055} Tmp_1413 := __HAVOC_malloc(64);
    call {:si_unique_call 2056} Tmp_1414 := __HAVOC_malloc(76);
    call {:si_unique_call 2057} Tmp_1415 := __HAVOC_malloc(60);
    call {:si_unique_call 2058} Tmp_1416 := __HAVOC_malloc(24);
    call {:si_unique_call 2059} Tmp_1417 := __HAVOC_malloc(112);
    call {:si_unique_call 2060} Tmp_1418 := __HAVOC_malloc(72);
    call {:si_unique_call 2061} Tmp_1419 := __HAVOC_malloc(52);
    call {:si_unique_call 2062} Tmp_1420 := __HAVOC_malloc(76);
    call {:si_unique_call 2063} Tmp_1421 := __HAVOC_malloc(76);
    call {:si_unique_call 2064} Tmp_1422 := __HAVOC_malloc(112);
    call {:si_unique_call 2065} Tmp_1423 := __HAVOC_malloc(76);
    call {:si_unique_call 2066} Tmp_1424 := __HAVOC_malloc(76);
    call {:si_unique_call 2067} Tmp_1425 := __HAVOC_malloc(76);
    call {:si_unique_call 2068} Tmp_1426 := __HAVOC_malloc(112);
    call {:si_unique_call 2069} Tmp_1427 := __HAVOC_malloc(76);
    call {:si_unique_call 2070} Tmp_1428 := __HAVOC_malloc(76);
    call {:si_unique_call 2071} Tmp_1429 := __HAVOC_malloc(112);
    call {:si_unique_call 2072} Tmp_1430 := __HAVOC_malloc(112);
    call {:si_unique_call 2073} Tmp_1431 := __HAVOC_malloc(112);
    call {:si_unique_call 2074} Tmp_1432 := __HAVOC_malloc(76);
    call {:si_unique_call 2075} Tmp_1433 := __HAVOC_malloc(112);
    call {:si_unique_call 2076} Tmp_1434 := __HAVOC_malloc(60);
    call {:si_unique_call 2077} Tmp_1435 := __HAVOC_malloc(24);
    call {:si_unique_call 2078} Tmp_1436 := __HAVOC_malloc(76);
    call {:si_unique_call 2079} Tmp_1437 := __HAVOC_malloc(76);
    call {:si_unique_call 2080} Tmp_1438 := __HAVOC_malloc(84);
    call {:si_unique_call 2081} Tmp_1439 := __HAVOC_malloc(76);
    call {:si_unique_call 2082} Tmp_1440 := __HAVOC_malloc(76);
    call {:si_unique_call 2083} Tmp_1441 := __HAVOC_malloc(76);
    call {:si_unique_call 2084} Tmp_1442 := __HAVOC_malloc(112);
    call {:si_unique_call 2085} Tmp_1443 := __HAVOC_malloc(112);
    call {:si_unique_call 2086} Tmp_1444 := __HAVOC_malloc(112);
    assume {:nonnull} RegPath != 0;
    assume RegPath > 0;
    havoc size_1;
    Tmp_1445 := size_1;
    call {:si_unique_call 2087} sdv_984 := ExAllocatePoolWithTag(257, Tmp_1445, -797810352);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_1446 := INTDIV(size_1, 2) - 1;
    havoc Mem_T.INT4;
    Mem_T.INT4[SppNoRaiseIrql] := 0;
    Tmp_1423 := strConst__li2bpl22;
    Tmp_1415 := strConst__li2bpl47;
    call {:si_unique_call 2088} vslice_dummy_var_401 := PptRegGetDword(1, Tmp_1423, Tmp_1415, SppNoRaiseIrql);
    Mem_T.INT4[DefaultModes] := 0;
    Tmp_1440 := strConst__li2bpl22;
    Tmp_1407 := strConst__li2bpl48;
    call {:si_unique_call 2089} vslice_dummy_var_402 := PptRegGetDword(1, Tmp_1440, Tmp_1407, DefaultModes);
    Mem_T.INT4[Trace] := 0;
    Tmp_1427 := strConst__li2bpl22;
    Tmp_1435 := strConst__li2bpl49;
    call {:si_unique_call 2090} vslice_dummy_var_403 := PptRegGetDword(1, Tmp_1427, Tmp_1435, Trace);
    Mem_T.INT4[Break] := 0;
    Tmp_1420 := strConst__li2bpl22;
    Tmp_1416 := strConst__li2bpl50;
    call {:si_unique_call 2091} vslice_dummy_var_404 := PptRegGetDword(1, Tmp_1420, Tmp_1416, Break);
    Mem_T.INT4[DbgMaskFdo] := 0;
    Tmp_1425 := strConst__li2bpl22;
    Tmp_1405 := strConst__li2bpl51;
    call {:si_unique_call 2092} vslice_dummy_var_405 := PptRegGetDword(1, Tmp_1425, Tmp_1405, DbgMaskFdo);
    Mem_T.INT4[DbgMaskRawPort] := 0;
    Tmp_1428 := strConst__li2bpl22;
    Tmp_1434 := strConst__li2bpl52;
    call {:si_unique_call 2093} vslice_dummy_var_406 := PptRegGetDword(1, Tmp_1428, Tmp_1434, DbgMaskRawPort);
    Mem_T.INT4[DbgMaskDaisyChain0] := 0;
    Tmp_1421 := strConst__li2bpl22;
    Tmp_1437 := strConst__li2bpl53;
    call {:si_unique_call 2094} vslice_dummy_var_407 := PptRegGetDword(1, Tmp_1421, Tmp_1437, DbgMaskDaisyChain0);
    Mem_T.INT4[DbgMaskDaisyChain1] := 0;
    Tmp_1411 := strConst__li2bpl22;
    Tmp_1406 := strConst__li2bpl54;
    call {:si_unique_call 2095} vslice_dummy_var_408 := PptRegGetDword(1, Tmp_1411, Tmp_1406, DbgMaskDaisyChain1);
    Mem_T.INT4[DbgMaskEndOfChain] := 0;
    Tmp_1401 := strConst__li2bpl22;
    Tmp_1418 := strConst__li2bpl55;
    call {:si_unique_call 2096} vslice_dummy_var_409 := PptRegGetDword(1, Tmp_1401, Tmp_1418, DbgMaskEndOfChain);
    Mem_T.INT4[DbgMaskLegacyZip] := 0;
    Tmp_1436 := strConst__li2bpl22;
    Tmp_1404 := strConst__li2bpl56;
    call {:si_unique_call 2097} vslice_dummy_var_410 := PptRegGetDword(1, Tmp_1436, Tmp_1404, DbgMaskLegacyZip);
    Mem_T.INT4[DbgMaskNoDevice] := 0;
    Tmp_1414 := strConst__li2bpl22;
    Tmp_1413 := strConst__li2bpl57;
    call {:si_unique_call 2098} vslice_dummy_var_411 := PptRegGetDword(1, Tmp_1414, Tmp_1413, DbgMaskNoDevice);
    Mem_T.INT4[AllowAsserts] := 0;
    Tmp_1441 := strConst__li2bpl22;
    Tmp_1419 := strConst__li2bpl58;
    call {:si_unique_call 2099} vslice_dummy_var_412 := PptRegGetDword(1, Tmp_1441, Tmp_1419, AllowAsserts);
    Mem_T.INT4[ParEnableLegacyZip] := 0;
    Tmp_1403 := strConst__li2bpl22;
    Tmp_1432 := strConst__li2bpl24;
    call {:si_unique_call 2100} vslice_dummy_var_413 := PptRegGetDword(1, Tmp_1403, Tmp_1432, ParEnableLegacyZip);
    halfSecond := 500;
    fiveSeconds := 5000;
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Mem_T.INT4[requestedTimeout] := halfSecond;
    Tmp_1439 := strConst__li2bpl22;
    Tmp_1424 := strConst__li2bpl59;
    call {:si_unique_call 2101} vslice_dummy_var_414 := PptRegGetDword(1, Tmp_1439, Tmp_1424, requestedTimeout);
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} halfSecond > Mem_T.INT4[requestedTimeout];
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Mem_T.INT4[requestedTimeout] := halfSecond;
    goto L82;

  L82:
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Tmp_1438 := strConst__li2bpl60;
    call {:si_unique_call 2102} RtlInitUnicodeString(callbackName, Tmp_1438);
    call {:si_unique_call 2103} sdv_InitializeObjectAttributes(0, 0, 64, 0, 0);
    call {:si_unique_call 2104} localStatus := ExCreateCallback(0, 0, 0, 1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} localStatus != 0;
    goto L100;

  L100:
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1426;
    assume {:nonnull} Tmp_1426 != 0;
    assume Tmp_1426 > 0;
    Mem_T.INT4[Tmp_1426] := li2bplFunctionConstant859;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1422;
    assume {:nonnull} Tmp_1422 != 0;
    assume Tmp_1422 > 0;
    Mem_T.INT4[Tmp_1422 + 2 * 4] := li2bplFunctionConstant860;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1430;
    assume {:nonnull} Tmp_1430 != 0;
    assume Tmp_1430 > 0;
    Mem_T.INT4[Tmp_1430 + 18 * 4] := li2bplFunctionConstant861;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1431;
    assume {:nonnull} Tmp_1431 != 0;
    assume Tmp_1431 > 0;
    Mem_T.INT4[Tmp_1431 + 3 * 4] := li2bplFunctionConstant862;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1442;
    assume {:nonnull} Tmp_1442 != 0;
    assume Tmp_1442 > 0;
    Mem_T.INT4[Tmp_1442 + 4 * 4] := li2bplFunctionConstant863;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1402;
    assume {:nonnull} Tmp_1402 != 0;
    assume Tmp_1402 > 0;
    Mem_T.INT4[Tmp_1402 + 14 * 4] := li2bplFunctionConstant864;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1410;
    assume {:nonnull} Tmp_1410 != 0;
    assume Tmp_1410 > 0;
    Mem_T.INT4[Tmp_1410 + 15 * 4] := li2bplFunctionConstant865;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1429;
    assume {:nonnull} Tmp_1429 != 0;
    assume Tmp_1429 > 0;
    Mem_T.INT4[Tmp_1429 + 5 * 4] := li2bplFunctionConstant866;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1433;
    assume {:nonnull} Tmp_1433 != 0;
    assume Tmp_1433 > 0;
    Mem_T.INT4[Tmp_1433 + 6 * 4] := li2bplFunctionConstant867;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1444;
    assume {:nonnull} Tmp_1444 != 0;
    assume Tmp_1444 > 0;
    Mem_T.INT4[Tmp_1444 + 27 * 4] := li2bplFunctionConstant868;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1417;
    assume {:nonnull} Tmp_1417 != 0;
    assume Tmp_1417 > 0;
    Mem_T.INT4[Tmp_1417 + 22 * 4] := li2bplFunctionConstant869;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1443;
    assume {:nonnull} Tmp_1443 != 0;
    assume Tmp_1443 > 0;
    Mem_T.INT4[Tmp_1443 + 23 * 4] := li2bplFunctionConstant870;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    havoc Tmp_1409;
    assume {:nonnull} Tmp_1409 != 0;
    assume Tmp_1409 > 0;
    assume {:nonnull} DriverObject_5 != 0;
    assume DriverObject_5 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(Mem_T.INT4[Break], 1) != 0;
    call {:si_unique_call 2105} vslice_dummy_var_415 := corral_nondet();
    call {:si_unique_call 2106} sdv_DbgBreakPoint();
    goto L115;

  L115:
    Tmp_1400 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} BAND(Mem_T.INT4[Break], 1) == 0;
    goto L115;

  anon15_Then:
    assume {:partition} localStatus == 0;
    call {:si_unique_call 2107} sdv_981 := ExRegisterCallback(0, li2bplFunctionConstant770, 0);
    goto L100;

  anon13_Then:
    assume {:partition} Mem_T.INT4[requestedTimeout] >= halfSecond;
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.INT4[requestedTimeout] > fiveSeconds;
    assume {:nonnull} requestedTimeout != 0;
    assume requestedTimeout > 0;
    Mem_T.INT4[requestedTimeout] := fiveSeconds;
    goto L82;

  anon14_Then:
    assume {:partition} fiveSeconds >= Mem_T.INT4[requestedTimeout];
    goto L82;

  anon17_Then:
    Tmp_1400 := -1073741801;
    goto L1;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init40"} _sdv_init40();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init40"} _sdv_init40()
{
  var vslice_dummy_var_416: int;

  anon0:
    call {:si_unique_call 2108} vslice_dummy_var_416 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptLegacyZipSetDiskMode"} PptLegacyZipSetDiskMode(actual_Controller_10: int, actual_Mode: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptLegacyZipSetDiskMode"} PptLegacyZipSetDiskMode(actual_Controller_10: int, actual_Mode: int)
{
  var {:scalar} i_31: int;
  var {:scalar} Tmp_1450: int;
  var {:scalar} Tmp_1451: int;
  var {:pointer} Controller_10: int;
  var {:scalar} Mode: int;
  var vslice_dummy_var_417: int;

  anon0:
    call {:si_unique_call 2109} vslice_dummy_var_417 := __HAVOC_malloc(4);
    Controller_10 := actual_Controller_10;
    Mode := actual_Mode;
    i_31 := 0;
    goto L5;

  L5:
    call {:si_unique_call 2110} i_31, Tmp_1450, Tmp_1451 := PptLegacyZipSetDiskMode_loop_L5(i_31, Tmp_1450, Tmp_1451, Controller_10);
    goto L5_last;

  L5_last:
    assume {:CounterLoop 3} {:Counter "i_31"} true;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 3 > i_31;
    Tmp_1451 := i_31;
    havoc Tmp_1450;
    call {:si_unique_call 2111} PptLegacyZipClockDiskModeByte(Controller_10, Tmp_1450);
    i_31 := i_31 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_31 >= 3;
    call {:si_unique_call 2112} PptLegacyZipClockDiskModeByte(Controller_10, Mode);
    return;
}



procedure {:origName "P5DeselectLegacyZip"} P5DeselectLegacyZip(actual_Controller_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5DeselectLegacyZip"} P5DeselectLegacyZip(actual_Controller_12: int)
{
  var {:scalar} i_33: int;
  var {:scalar} Tmp_1457: int;
  var {:scalar} Tmp_1459: int;
  var {:pointer} Controller_12: int;
  var vslice_dummy_var_418: int;

  anon0:
    call {:si_unique_call 2113} vslice_dummy_var_418 := __HAVOC_malloc(4);
    Controller_12 := actual_Controller_12;
    i_33 := 0;
    goto L5;

  L5:
    call {:si_unique_call 2114} i_33, Tmp_1457, Tmp_1459 := P5DeselectLegacyZip_loop_L5(i_33, Tmp_1457, Tmp_1459, Controller_12);
    goto L5_last;

  L5_last:
    assume {:CounterLoop 3} {:Counter "i_33"} true;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 3 > i_33;
    Tmp_1459 := i_33;
    havoc Tmp_1457;
    call {:si_unique_call 2115} PptLegacyZipClockPrtModeByte(Controller_12, Tmp_1457);
    i_33 := i_33 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_33 >= 3;
    call {:si_unique_call 2116} PptLegacyZipClockPrtModeByte(Controller_12, 15);
    return;
}



procedure {:origName "Par3QueryLegacyZipDeviceId"} Par3QueryLegacyZipDeviceId(actual_Extension_54: int, actual_CallerDeviceIdBuffer_1: int, actual_CallerBufferSize_1: int, actual_DeviceIdSize_5: int, actual_bReturnRawString_3: int) returns (Tmp_1461: int);
  modifies Mem_T.INT4, alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "Par3QueryLegacyZipDeviceId"} Par3QueryLegacyZipDeviceId(actual_Extension_54: int, actual_CallerDeviceIdBuffer_1: int, actual_CallerBufferSize_1: int, actual_DeviceIdSize_5: int, actual_bReturnRawString_3: int) returns (Tmp_1461: int)
{
  var {:scalar} deviceIdSize_1: int;
  var {:scalar} sdv_1000: int;
  var {:scalar} Tmp_1462: int;
  var {:pointer} deviceIdBuffer_1: int;
  var {:pointer} CallerDeviceIdBuffer_1: int;
  var {:scalar} CallerBufferSize_1: int;
  var {:pointer} DeviceIdSize_5: int;

  anon0:
    CallerDeviceIdBuffer_1 := actual_CallerDeviceIdBuffer_1;
    CallerBufferSize_1 := actual_CallerBufferSize_1;
    DeviceIdSize_5 := actual_DeviceIdSize_5;
    assume {:nonnull} DeviceIdSize_5 != 0;
    assume DeviceIdSize_5 > 0;
    Mem_T.INT4[DeviceIdSize_5] := 0;
    call {:si_unique_call 2117} deviceIdBuffer_1 := ParBuildLegacyZipDeviceId();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} deviceIdBuffer_1 != 0;
    deviceIdSize_1 := sdv_1000;
    assume {:nonnull} DeviceIdSize_5 != 0;
    assume DeviceIdSize_5 > 0;
    Mem_T.INT4[DeviceIdSize_5] := deviceIdSize_1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} CallerDeviceIdBuffer_1 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} CallerBufferSize_1 >= deviceIdSize_1 + 1;
    call {:si_unique_call 2118} sdv_RtlZeroMemory(0, CallerBufferSize_1);
    Tmp_1462 := deviceIdSize_1;
    call {:si_unique_call 2119} sdv_RtlCopyMemory(0, 0, Tmp_1462);
    call {:si_unique_call 2120} sdv_ExFreePool(0);
    Tmp_1461 := CallerDeviceIdBuffer_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} deviceIdSize_1 + 1 > CallerBufferSize_1;
    goto L18;

  L18:
    Tmp_1461 := deviceIdBuffer_1;
    goto L1;

  anon12_Then:
    assume {:partition} CallerDeviceIdBuffer_1 == 0;
    goto L18;

  anon9_Then:
    assume {:partition} deviceIdBuffer_1 == 0;
    Tmp_1461 := 0;
    goto L1;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "P5LegacyZipDetected"} P5LegacyZipDetected(actual_Controller_13: int) returns (Tmp_1464: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1464 == 1 || Tmp_1464 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5LegacyZipDetected"} P5LegacyZipDetected(actual_Controller_13: int) returns (Tmp_1464: int)
{
  var {:scalar} sdv_1001: int;
  var {:scalar} foundZip: int;
  var {:pointer} Controller_13: int;

  anon0:
    Controller_13 := actual_Controller_13;
    call {:si_unique_call 2121} P5SelectLegacyZip(Controller_13);
    call {:si_unique_call 2122} sdv_1001 := PptLegacyZipCheckDevice(Controller_13);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_1001 != 0;
    foundZip := 1;
    goto L13;

  L13:
    call {:si_unique_call 2123} P5DeselectLegacyZip(Controller_13);
    Tmp_1464 := foundZip;
    return;

  anon3_Then:
    assume {:partition} sdv_1001 == 0;
    foundZip := 0;
    goto L13;
}



procedure {:origName "PptLegacyZipClockDiskModeByte"} PptLegacyZipClockDiskModeByte(actual_Controller_14: int, actual_ModeByte: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptLegacyZipClockDiskModeByte"} PptLegacyZipClockDiskModeByte(actual_Controller_14: int, actual_ModeByte: int)
{
  var {:pointer} Controller_14: int;
  var vslice_dummy_var_419: int;

  anon0:
    call {:si_unique_call 2124} vslice_dummy_var_419 := __HAVOC_malloc(4);
    Controller_14 := actual_Controller_14;
    return;
}



procedure {:origName "P5SelectLegacyZip"} P5SelectLegacyZip(actual_Controller_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P5SelectLegacyZip"} P5SelectLegacyZip(actual_Controller_15: int)
{
  var {:pointer} Controller_15: int;
  var vslice_dummy_var_420: int;

  anon0:
    call {:si_unique_call 2125} vslice_dummy_var_420 := __HAVOC_malloc(4);
    Controller_15 := actual_Controller_15;
    call {:si_unique_call 2126} PptLegacyZipSetDiskMode(Controller_15, 143);
    return;
}



procedure {:origName "PptLegacyZipCheckDevice"} PptLegacyZipCheckDevice(actual_Controller_17: int) returns (Tmp_1476: int);
  free ensures {:va_keep} Tmp_1476 == 1 || Tmp_1476 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptLegacyZipCheckDevice"} PptLegacyZipCheckDevice(actual_Controller_17: int) returns (Tmp_1476: int)
{
  var {:scalar} Tmp_1477: int;
  var {:scalar} sdv_1006: int;
  var {:scalar} Tmp_1480: int;
  var {:scalar} sdv_1007: int;
  var {:pointer} Controller_17: int;

  anon0:
    Controller_17 := actual_Controller_17;
    call {:si_unique_call 2127} sdv_1006 := corral_nondet();
    Tmp_1477 := BAND(sdv_1006, 8);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Tmp_1477 == 8;
    call {:si_unique_call 2128} sdv_1007 := corral_nondet();
    Tmp_1480 := BAND(sdv_1007, 8);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_1480 != 8;
    Tmp_1476 := 1;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} Tmp_1480 == 8;
    goto L13;

  L13:
    Tmp_1476 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Tmp_1477 != 8;
    goto L13;
}



procedure {:origName "ParBuildLegacyZipDeviceId"} ParBuildLegacyZipDeviceId() returns (Tmp_1484: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParBuildLegacyZipDeviceId"} ParBuildLegacyZipDeviceId() returns (Tmp_1484: int)
{
  var {:scalar} size_2: int;
  var {:pointer} sdv_1008: int;
  var {:scalar} Tmp_1485: int;
  var {:pointer} id_5: int;

  anon0:
    size_2 := 63;
    call {:si_unique_call 2129} sdv_1008 := ExAllocatePoolWithTag(1, size_2, -797810352);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    id_5 := sdv_1008;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} id_5 != 0;
    call {:si_unique_call 2130} sdv_RtlZeroMemory(0, size_2);
    Tmp_1485 := size_2 - 1;
    call {:si_unique_call 2131} sdv_RtlCopyMemory(0, 0, Tmp_1485);
    Tmp_1484 := id_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} id_5 == 0;
    Tmp_1484 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init25"} _sdv_init25();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init25"} _sdv_init25()
{
  var vslice_dummy_var_421: int;

  anon0:
    call {:si_unique_call 2132} vslice_dummy_var_421 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptLegacyZipClockPrtModeByte"} PptLegacyZipClockPrtModeByte(actual_Controller_18: int, actual_ModeByte_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptLegacyZipClockPrtModeByte"} PptLegacyZipClockPrtModeByte(actual_Controller_18: int, actual_ModeByte_1: int)
{
  var {:pointer} Controller_18: int;
  var vslice_dummy_var_422: int;

  anon0:
    call {:si_unique_call 2133} vslice_dummy_var_422 := __HAVOC_malloc(4);
    Controller_18 := actual_Controller_18;
    return;
}



procedure {:origName "ParNibbleModeRead"} ParNibbleModeRead(actual_Pdx_34: int, actual_Buffer_6: int, actual_BufferSize_4: int, actual_BytesTransferred_4: int) returns (Tmp_1496: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1496 == -1073741435 || Tmp_1496 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParNibbleModeRead"} ParNibbleModeRead(actual_Pdx_34: int, actual_Buffer_6: int, actual_BufferSize_4: int, actual_BytesTransferred_4: int) returns (Tmp_1496: int)
{
  var {:scalar} i_34: int;
  var {:scalar} Tmp_1497: int;
  var {:scalar} Tmp_1498: int;
  var {:scalar} Tmp_1499: int;
  var {:scalar} Tmp_1500: int;
  var {:scalar} Tmp_1501: int;
  var {:scalar} sdv_1009: int;
  var {:scalar} Tmp_1502: int;
  var {:scalar} sdv_1010: int;
  var {:scalar} Tmp_1503: int;
  var {:scalar} dcr_5: int;
  var {:scalar} Tmp_1504: int;
  var {:scalar} Tmp_1505: int;
  var {:scalar} Tmp_1506: int;
  var {:scalar} j_1: int;
  var {:scalar} Status_22: int;
  var {:scalar} Tmp_1507: int;
  var {:scalar} sdv_1012: int;
  var {:pointer} Tmp_1509: int;
  var {:pointer} Tmp_1511: int;
  var {:scalar} Tmp_1512: int;
  var {:pointer} Controller_19: int;
  var {:scalar} Tmp_1515: int;
  var {:pointer} nibble_1: int;
  var {:scalar} sdv_1017: int;
  var {:scalar} sdv_1018: int;
  var {:scalar} sdv_1019: int;
  var {:pointer} Tmp_1518: int;
  var {:scalar} Tmp_1519: int;
  var {:scalar} sdv_1020: int;
  var {:scalar} dsr_1: int;
  var {:scalar} Tmp_1522: int;
  var {:pointer} p_10: int;
  var {:scalar} Tmp_1523: int;
  var {:pointer} Pdx_34: int;
  var {:pointer} Buffer_6: int;
  var {:scalar} BufferSize_4: int;
  var {:pointer} BytesTransferred_4: int;

  anon0:
    Pdx_34 := actual_Pdx_34;
    Buffer_6 := actual_Buffer_6;
    BufferSize_4 := actual_BufferSize_4;
    BytesTransferred_4 := actual_BytesTransferred_4;
    call {:si_unique_call 2134} nibble_1 := __HAVOC_malloc(8);
    Status_22 := 0;
    p_10 := Buffer_6;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    havoc Controller_19;
    call {:si_unique_call 2135} dcr_5 := corral_nondet();
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L28;

  L28:
    i_34 := 0;
    goto L29;

  L29:
    call {:si_unique_call 2136} i_34, Tmp_1497, Tmp_1498, Tmp_1499, Tmp_1500, Tmp_1501, Tmp_1502, Tmp_1503, dcr_5, Tmp_1505, Tmp_1506, j_1, sdv_1012, Tmp_1509, sdv_1017, sdv_1018, sdv_1019, Tmp_1518, sdv_1020, dsr_1, Tmp_1522, Tmp_1523 := ParNibbleModeRead_loop_L29(i_34, Tmp_1497, Tmp_1498, Tmp_1499, Tmp_1500, Tmp_1501, Tmp_1502, Tmp_1503, dcr_5, Tmp_1505, Tmp_1506, j_1, sdv_1012, Tmp_1509, Controller_19, nibble_1, sdv_1017, sdv_1018, sdv_1019, Tmp_1518, sdv_1020, dsr_1, Tmp_1522, p_10, Tmp_1523, Pdx_34, BufferSize_4);
    goto L29_last;

  L29_last:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BufferSize_4 > i_34;
    j_1 := 0;
    goto L32;

  L32:
    call {:si_unique_call 2137} Tmp_1497, dcr_5, Tmp_1505, j_1, sdv_1012, Tmp_1509, sdv_1017, sdv_1018, sdv_1019, Tmp_1518, sdv_1020, Tmp_1522, Tmp_1523 := ParNibbleModeRead_loop_L32(Tmp_1497, dcr_5, Tmp_1505, j_1, sdv_1012, Tmp_1509, Controller_19, nibble_1, sdv_1017, sdv_1018, sdv_1019, Tmp_1518, sdv_1020, Tmp_1522, Tmp_1523, Pdx_34);
    goto L32_last;

  L32_last:
    assume {:CounterLoop 2} {:Counter "j_1"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > j_1;
    dcr_5 := BOR(dcr_5, 2);
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    call {:si_unique_call 2138} sdv_1017 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(sdv_1017, 64) != 0;
    Tmp_1518 := Controller_19;
    call {:si_unique_call 2139} sdv_1018 := CheckPort(Tmp_1518, 64, 0, 35);
    Tmp_1505 := sdv_1018;
    goto L50;

  L50:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Tmp_1505 != 0;
    call {:si_unique_call 2140} sdv_1019 := corral_nondet();
    Tmp_1497 := j_1;
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    Mem_T.INT4[nibble_1 + Tmp_1497 * 4] := sdv_1019;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    dcr_5 := BAND(dcr_5, BNOT(2));
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    call {:si_unique_call 2141} sdv_1012 := corral_nondet();
    Tmp_1523 := BAND(sdv_1012, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Tmp_1523 == 64;
    Tmp_1522 := 1;
    goto L70;

  L70:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Tmp_1522 != 0;
    j_1 := j_1 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} Tmp_1522 == 0;
    Status_22 := -1073741435;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L76;

  L76:
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L82;

  L82:
    assume {:nonnull} BytesTransferred_4 != 0;
    assume BytesTransferred_4 > 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Tmp_1496 := Status_22;
    return;

  anon43_Then:
    dcr_5 := BOR(dcr_5, 2);
    goto L82;

  anon52_Then:
    assume {:partition} Tmp_1523 != 64;
    Tmp_1509 := Controller_19;
    call {:si_unique_call 2142} sdv_1020 := CheckPort(Tmp_1509, 64, 64, 35);
    Tmp_1522 := sdv_1020;
    goto L70;

  anon41_Then:
    assume {:partition} Tmp_1505 == 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Status_22 := -1073741435;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L76;

  anon40_Then:
    assume {:partition} BAND(sdv_1017, 64) == 0;
    Tmp_1505 := 1;
    goto L50;

  anon39_Then:
    assume {:partition} j_1 >= 2;
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    call {:si_unique_call 2143} Tmp_1500 := corral_nondet();
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble_1], 128) != 0;
    Tmp_1501 := 0;
    goto L95;

  L95:
    Tmp_1498 := i_34;
    assume {:nonnull} p_10 != 0;
    assume p_10 > 0;
    Mem_T.INT4[p_10 + Tmp_1498 * 4] := BOR(Tmp_1500, Tmp_1501);
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    call {:si_unique_call 2144} Tmp_1499 := corral_nondet();
    assume {:nonnull} nibble_1 != 0;
    assume nibble_1 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[nibble_1 + 1 * 4], 128) != 0;
    Tmp_1506 := 0;
    goto L101;

  L101:
    Tmp_1503 := i_34;
    Tmp_1502 := i_34;
    assume {:nonnull} p_10 != 0;
    assume p_10 > 0;
    Mem_T.INT4[p_10 + Tmp_1503 * 4] := BOR(Mem_T.INT4[p_10 + Tmp_1502 * 4], BOR(Tmp_1499, Tmp_1506));
    call {:si_unique_call 2145} dsr_1 := corral_nondet();
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(dsr_1, 8) != 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    i_34 := i_34 + 1;
    goto L30;

  L30:
    assume {:nonnull} BytesTransferred_4 != 0;
    assume BytesTransferred_4 > 0;
    Mem_T.INT4[BytesTransferred_4] := i_34;
    goto L76;

  anon44_Then:
    assume {:partition} BAND(dsr_1, 8) == 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    i_34 := i_34 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble_1 + 1 * 4], 128) == 0;
    Tmp_1506 := 128;
    goto L101;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[nibble_1], 128) == 0;
    Tmp_1501 := 8;
    goto L95;

  anon38_Then:
    assume {:partition} i_34 >= BufferSize_4;
    goto L30;

  anon48_Then:
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Status_22 := -1073741435;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L76;

  anon49_Then:
    goto L27;

  L27:
    call {:si_unique_call 2146} dsr_1 := corral_nondet();
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(dsr_1, 8) != 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    call {:si_unique_call 2147} dsr_1 := corral_nondet();
    Tmp_1519 := BAND(dsr_1, BOR(16, 32));
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Tmp_1519 == 32;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L76;

  anon51_Then:
    assume {:partition} Tmp_1519 != 32;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Status_22 := -1073741435;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L76;

  anon45_Then:
    assume {:partition} BAND(dsr_1, 8) == 0;
    call {:si_unique_call 2148} dcr_5 := corral_nondet();
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Tmp_1515 := BAND(dcr_5, BOR(BOR(4, 16), 32));
    dcr_5 := BOR(Tmp_1515, 0);
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    call {:si_unique_call 2149} sdv_1009 := corral_nondet();
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(sdv_1009, 32) != 0;
    Tmp_1511 := Controller_19;
    call {:si_unique_call 2150} sdv_1010 := CheckPort(Tmp_1511, 32, 0, 35);
    Tmp_1504 := sdv_1010;
    goto L153;

  L153:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Tmp_1504 != 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L28;

  anon47_Then:
    assume {:partition} Tmp_1504 == 0;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Status_22 := -1073741435;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L76;

  anon46_Then:
    assume {:partition} BAND(sdv_1009, 32) == 0;
    Tmp_1504 := 1;
    goto L153;

  anon37_Then:
    call {:si_unique_call 2151} dsr_1 := corral_nondet();
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Tmp_1512 := BAND(dsr_1, 8);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Tmp_1512 == 8;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    Tmp_1507 := BAND(dcr_5, BOR(BOR(BOR(2, 4), 16), 32));
    dcr_5 := BOR(Tmp_1507, 2);
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L27;

  anon50_Then:
    assume {:partition} Tmp_1512 != 8;
    assume {:nonnull} Pdx_34 != 0;
    assume Pdx_34 > 0;
    goto L28;
}



procedure {:origName "ParTerminateNibbleMode"} ParTerminateNibbleMode(actual_Pdx_35: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParTerminateNibbleMode"} ParTerminateNibbleMode(actual_Pdx_35: int)
{
  var {:pointer} Pdx_35: int;
  var vslice_dummy_var_423: int;

  anon0:
    call {:si_unique_call 2152} vslice_dummy_var_423 := __HAVOC_malloc(4);
    Pdx_35 := actual_Pdx_35;
    assume {:nonnull} Pdx_35 != 0;
    assume Pdx_35 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} Pdx_35 != 0;
    assume Pdx_35 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 2153} IeeeTerminate1284Mode(Pdx_35);
    goto L1;
}



procedure {:origName "ParEnterNibbleMode"} ParEnterNibbleMode(actual_Pdx_36: int, actual_DeviceIdRequest: int) returns (Tmp_1526: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1526 == 0 || Tmp_1526 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParEnterNibbleMode"} ParEnterNibbleMode(actual_Pdx_36: int, actual_DeviceIdRequest: int) returns (Tmp_1526: int)
{
  var {:scalar} Status_23: int;
  var {:pointer} Pdx_36: int;
  var {:scalar} DeviceIdRequest: int;

  anon0:
    Pdx_36 := actual_Pdx_36;
    DeviceIdRequest := actual_DeviceIdRequest;
    Status_23 := 0;
    assume {:nonnull} Pdx_36 != 0;
    assume Pdx_36 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} Pdx_36 != 0;
    assume Pdx_36 > 0;
    goto L8;

  L8:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Status_23 >= 0;
    assume {:nonnull} Pdx_36 != 0;
    assume Pdx_36 > 0;
    assume {:nonnull} Pdx_36 != 0;
    assume Pdx_36 > 0;
    assume {:nonnull} Pdx_36 != 0;
    assume Pdx_36 > 0;
    goto L15;

  L15:
    Tmp_1526 := Status_23;
    return;

  anon8_Then:
    assume {:partition} 0 > Status_23;
    call {:si_unique_call 2154} ParTerminateNibbleMode(Pdx_36);
    assume {:nonnull} Pdx_36 != 0;
    assume Pdx_36 > 0;
    assume {:nonnull} Pdx_36 != 0;
    assume Pdx_36 > 0;
    goto L15;

  anon9_Then:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} DeviceIdRequest != 0;
    call {:si_unique_call 2155} Status_23 := IeeeEnter1284Mode(Pdx_36, 4);
    goto L8;

  anon7_Then:
    assume {:partition} DeviceIdRequest == 0;
    call {:si_unique_call 2156} Status_23 := IeeeEnter1284Mode(Pdx_36, 0);
    goto L8;
}



procedure {:origName "_sdv_init23"} _sdv_init23();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init23"} _sdv_init23()
{
  var vslice_dummy_var_424: int;

  anon0:
    call {:si_unique_call 2157} vslice_dummy_var_424 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init53"} _sdv_init53();
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init53"} _sdv_init53()
{

  anon0:
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ABORT_20_3"} SLIC_ABORT_20_3(actual_caller_1: int, actual_ExAllocatePoolWithTag_1: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_3"} SLIC_ABORT_20_3(actual_caller_1: int, actual_ExAllocatePoolWithTag_1: int)
{
  var {:pointer} caller_1: int;
  var {:scalar} ExAllocatePoolWithTag_1: int;

  anon0:
    caller_1 := actual_caller_1;
    ExAllocatePoolWithTag_1 := actual_ExAllocatePoolWithTag_1;
    call {:si_unique_call 2158} SLIC_ERROR_ROUTINE(strConst__li2bpl62);
    return;
}



procedure {:origName "SLIC_ExAllocatePoolWithTag_entry"} {:osmodel} SLIC_ExAllocatePoolWithTag_entry(actual_caller_4: int, actual_ExAllocatePoolWithTag_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ExAllocatePoolWithTag_entry"} {:osmodel} SLIC_ExAllocatePoolWithTag_entry(actual_caller_4: int, actual_ExAllocatePoolWithTag_2: int)
{
  var {:pointer} caller_4: int;
  var {:scalar} ExAllocatePoolWithTag_2: int;

  anon0:
    caller_4 := actual_caller_4;
    ExAllocatePoolWithTag_2 := actual_ExAllocatePoolWithTag_2;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_irql_current == 2;
    goto L22;

  L22:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_irql_current == 2;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 3;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 5;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 7;
    call {:si_unique_call 2159} SLIC_ABORT_20_4(caller_4, ExAllocatePoolWithTag_2);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 7;
    goto L2;

  anon28_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 5;
    call {:si_unique_call 2160} SLIC_ABORT_20_3(caller_4, ExAllocatePoolWithTag_2);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 3;
    call {:si_unique_call 2161} SLIC_ABORT_20_2(caller_4, ExAllocatePoolWithTag_2);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon37_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 1;
    call {:si_unique_call 2162} SLIC_ABORT_20_1(caller_4, ExAllocatePoolWithTag_2);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} sdv_irql_current != 2;
    goto L2;

  anon33_Then:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2163} SLIC_ABORT_20_0(caller_4, ExAllocatePoolWithTag_2);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L22;

  anon32_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L22;
}



procedure {:origName "SLIC_ABORT_20_4"} SLIC_ABORT_20_4(actual_caller_8: int, actual_ExAllocatePoolWithTag_3: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_4"} SLIC_ABORT_20_4(actual_caller_8: int, actual_ExAllocatePoolWithTag_3: int)
{
  var {:pointer} caller_8: int;
  var {:scalar} ExAllocatePoolWithTag_3: int;

  anon0:
    caller_8 := actual_caller_8;
    ExAllocatePoolWithTag_3 := actual_ExAllocatePoolWithTag_3;
    call {:si_unique_call 2164} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_ABORT_20_2"} SLIC_ABORT_20_2(actual_caller_10: int, actual_ExAllocatePoolWithTag_4: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_2"} SLIC_ABORT_20_2(actual_caller_10: int, actual_ExAllocatePoolWithTag_4: int)
{
  var {:pointer} caller_10: int;
  var {:scalar} ExAllocatePoolWithTag_4: int;

  anon0:
    caller_10 := actual_caller_10;
    ExAllocatePoolWithTag_4 := actual_ExAllocatePoolWithTag_4;
    call {:si_unique_call 2165} SLIC_ERROR_ROUTINE(strConst__li2bpl69);
    return;
}



procedure {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_11: int, actual_ExAllocatePoolWithTag_5: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_11: int, actual_ExAllocatePoolWithTag_5: int)
{
  var {:pointer} caller_11: int;
  var {:scalar} ExAllocatePoolWithTag_5: int;

  anon0:
    caller_11 := actual_caller_11;
    ExAllocatePoolWithTag_5 := actual_ExAllocatePoolWithTag_5;
    call {:si_unique_call 2166} SLIC_ERROR_ROUTINE(strConst__li2bpl70);
    return;
}



procedure {:origName "SLIC_ABORT_20_1"} SLIC_ABORT_20_1(actual_caller_14: int, actual_ExAllocatePoolWithTag_6: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_1"} SLIC_ABORT_20_1(actual_caller_14: int, actual_ExAllocatePoolWithTag_6: int)
{
  var {:pointer} caller_14: int;
  var {:scalar} ExAllocatePoolWithTag_6: int;

  anon0:
    caller_14 := actual_caller_14;
    ExAllocatePoolWithTag_6 := actual_ExAllocatePoolWithTag_6;
    call {:si_unique_call 2167} SLIC_ERROR_ROUTINE(strConst__li2bpl73);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "_sdv_init28"} _sdv_init28();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init28"} _sdv_init28()
{
  var vslice_dummy_var_425: int;

  anon0:
    call {:si_unique_call 2168} vslice_dummy_var_425 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptEcpHwHaveReadData"} PptEcpHwHaveReadData(actual_Pdx_37: int) returns (Tmp_1532: int);
  free ensures {:va_keep} Tmp_1532 == 1 || Tmp_1532 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptEcpHwHaveReadData"} PptEcpHwHaveReadData(actual_Pdx_37: int) returns (Tmp_1532: int)
{
  var {:scalar} sdv_1036: int;
  var {:scalar} sdv_1037: int;
  var {:scalar} sdv_1038: int;
  var {:pointer} pQueue_3: int;
  var {:scalar} Tmp_1535: int;
  var {:pointer} Pdx_37: int;

  anon0:
    Pdx_37 := actual_Pdx_37;
    assume {:nonnull} Pdx_37 != 0;
    assume Pdx_37 > 0;
    pQueue_3 := ShadowBuffer__PDO_EXTENSION(Pdx_37);
    call {:si_unique_call 2169} sdv_1036 := Queue_IsEmpty(pQueue_3);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_1036 != 0;
    call {:si_unique_call 2170} sdv_1037 := ParEcpHaveReadData(Pdx_37);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_1037 != 0;
    Tmp_1532 := 1;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} sdv_1037 == 0;
    assume {:nonnull} Pdx_37 != 0;
    assume Pdx_37 > 0;
    call {:si_unique_call 2171} sdv_1038 := corral_nondet();
    Tmp_1535 := BAND(sdv_1038, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 0 != Tmp_1535;
    Tmp_1532 := 0;
    goto L28;

  L28:
    goto L1;

  anon9_Then:
    assume {:partition} 0 == Tmp_1535;
    Tmp_1532 := 1;
    goto L28;

  anon7_Then:
    assume {:partition} sdv_1036 == 0;
    Tmp_1532 := 1;
    goto L1;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int)
{
  var vslice_dummy_var_426: int;

  anon0:
    call {:si_unique_call 2172} vslice_dummy_var_426 := __HAVOC_malloc(4);
    call {:si_unique_call 2173} RtlFailFast(3);
    return;
}



procedure {:origName "ParInitializeExtension1284Info"} ParInitializeExtension1284Info(actual_Pdx_38: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParInitializeExtension1284Info"} ParInitializeExtension1284Info(actual_Pdx_38: int)
{
  var {:scalar} i_35: int;
  var {:scalar} Tmp_1538: int;
  var {:scalar} rev_1: int;
  var {:scalar} fwd_1: int;
  var {:pointer} Tmp_1541: int;
  var {:pointer} Pdx_38: int;
  var vslice_dummy_var_427: int;

  anon0:
    call {:si_unique_call 2174} vslice_dummy_var_427 := __HAVOC_malloc(4);
    Pdx_38 := actual_Pdx_38;
    call {:si_unique_call 2175} Tmp_1541 := __HAVOC_malloc(20);
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[DefaultModes] != 0;
    rev_1 := BAND(Mem_T.INT4[DefaultModes], BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), 4096), 8192), 16384), 32768));
    call {:si_unique_call 2176} fwd_1 := corral_nondet();
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} fwd_1 != 1;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} fwd_1 != 2;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} fwd_1 != 32;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} fwd_1 != 64;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} fwd_1 != 128;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} fwd_1 != 256;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} fwd_1 != 512;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} fwd_1 == 1024;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L21;

  L21:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} rev_1 != 4;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} rev_1 != 8;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} rev_1 != 16;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} rev_1 != 32;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} rev_1 != 64;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} rev_1 != 128;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} rev_1 != 256;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} rev_1 != 512;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} rev_1 == 1024;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;

  L30:
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    i_35 := 0;
    goto L42;

  L42:
    call {:si_unique_call 2177} i_35, Tmp_1538, Tmp_1541 := ParInitializeExtension1284Info_loop_L42(i_35, Tmp_1538, Tmp_1541, Pdx_38);
    goto L42_last;

  L42_last:
    assume {:CounterLoop 5} {:Counter "i_35"} true;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 5 > i_35;
    Tmp_1538 := i_35;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    havoc Tmp_1541;
    assume {:nonnull} Tmp_1541 != 0;
    assume Tmp_1541 > 0;
    Mem_T.INT4[Tmp_1541 + Tmp_1538 * 4] := 0;
    i_35 := i_35 + 1;
    goto anon40_Else_dummy;

  anon40_Else_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} i_35 >= 5;
    return;

  anon48_Then:
    assume {:partition} rev_1 != 1024;
    goto L22;

  L22:
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;

  anon49_Then:
    assume {:partition} rev_1 == 512;
    goto L27;

  L27:
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;

  anon50_Then:
    assume {:partition} rev_1 == 256;
    goto L27;

  anon51_Then:
    assume {:partition} rev_1 == 128;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;

  anon52_Then:
    assume {:partition} rev_1 == 64;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;

  anon53_Then:
    assume {:partition} rev_1 == 32;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;

  anon54_Then:
    assume {:partition} rev_1 == 16;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;

  anon55_Then:
    assume {:partition} rev_1 == 8;
    goto L22;

  anon39_Then:
    assume {:partition} rev_1 == 4;
    goto L22;

  anon41_Then:
    assume {:partition} fwd_1 != 1024;
    goto L13;

  L13:
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L21;

  anon42_Then:
    assume {:partition} fwd_1 == 512;
    goto L18;

  L18:
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L21;

  anon43_Then:
    assume {:partition} fwd_1 == 256;
    goto L18;

  anon44_Then:
    assume {:partition} fwd_1 == 128;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L21;

  anon45_Then:
    assume {:partition} fwd_1 == 64;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L21;

  anon46_Then:
    assume {:partition} fwd_1 == 32;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L21;

  anon47_Then:
    assume {:partition} fwd_1 == 2;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L21;

  anon57_Then:
    assume {:partition} fwd_1 == 1;
    goto L13;

  anon56_Then:
    assume {:partition} Mem_T.INT4[DefaultModes] == 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    assume {:nonnull} Pdx_38 != 0;
    assume Pdx_38 > 0;
    goto L30;
}



procedure {:origName "StringCountValues"} StringCountValues(actual_string: int, actual_delimeter: int) returns (Tmp_1543: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "StringCountValues"} StringCountValues(actual_string: int, actual_delimeter: int) returns (Tmp_1543: int)
{
  var {:scalar} cnt: int;
  var {:pointer} lpKey: int;
  var {:pointer} string: int;
  var {:scalar} delimeter: int;

  anon0:
    string := actual_string;
    delimeter := actual_delimeter;
    lpKey := string;
    cnt := 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} string != 0;
    goto L9;

  L9:
    call {:si_unique_call 2178} cnt := StringCountValues_loop_L9(cnt, lpKey, delimeter);
    goto L9_last;

  L9_last:
    assume {:nonnull} lpKey != 0;
    assume lpKey > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.INT4[lpKey] != 0;
    assume {:nonnull} lpKey != 0;
    assume lpKey > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[lpKey] == delimeter;
    cnt := cnt + 1;
    goto L12;

  L12:
    goto L12_dummy;

  L12_dummy:
    assume false;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[lpKey] != delimeter;
    goto L12;

  anon7_Then:
    assume {:partition} Mem_T.INT4[lpKey] == 0;
    Tmp_1543 := cnt;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} string == 0;
    Tmp_1543 := 0;
    goto L1;
}



procedure {:origName "StringSubst"} StringSubst(actual_lpS: int, actual_chTargetChar: int, actual_chReplacementChar: int, actual_cbS: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "StringSubst"} StringSubst(actual_lpS: int, actual_chTargetChar: int, actual_chReplacementChar: int, actual_cbS: int)
{
  var {:scalar} Tmp_1546: int;
  var {:scalar} iCnt: int;
  var {:pointer} lpS: int;
  var {:scalar} chTargetChar: int;
  var {:scalar} chReplacementChar: int;
  var {:scalar} cbS: int;
  var vslice_dummy_var_428: int;

  anon0:
    call {:si_unique_call 2179} vslice_dummy_var_428 := __HAVOC_malloc(4);
    lpS := actual_lpS;
    chTargetChar := actual_chTargetChar;
    chReplacementChar := actual_chReplacementChar;
    cbS := actual_cbS;
    iCnt := 0;
    goto L5;

  L5:
    call {:si_unique_call 2180} Tmp_1546, iCnt := StringSubst_loop_L5(Tmp_1546, iCnt, lpS, chTargetChar, chReplacementChar, cbS);
    goto L5_last;

  L5_last:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} lpS != 0;
    Tmp_1546 := iCnt;
    iCnt := iCnt + 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} cbS > Tmp_1546;
    assume {:nonnull} lpS != 0;
    assume lpS > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[lpS] == chTargetChar;
    assume {:nonnull} lpS != 0;
    assume lpS > 0;
    Mem_T.INT4[lpS] := chReplacementChar;
    goto anon8_Else_dummy;

  anon8_Else_dummy:
    assume false;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[lpS] != chTargetChar;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} Tmp_1546 >= cbS;
    goto L1;

  L1:
    return;

  anon7_Then:
    assume {:partition} lpS == 0;
    goto L1;
}



procedure {:origName "ParAllocPort"} ParAllocPort(actual_Pdx_39: int) returns (Tmp_1548: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1548 == 1 || Tmp_1548 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParAllocPort"} ParAllocPort(actual_Pdx_39: int) returns (Tmp_1548: int)
{
  var {:scalar} bAllocated: int;
  var {:pointer} Irp_60: int;
  var {:scalar} Timeout_3: int;
  var {:scalar} Status_24: int;
  var {:scalar} Event_4: int;
  var {:pointer} NextSp: int;
  var {:pointer} Pdx_39: int;
  var vslice_dummy_var_429: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_205: int;

  anon0:
    call {:si_unique_call 2181} Timeout_3 := __HAVOC_malloc(20);
    call {:si_unique_call 2182} Event_4 := __HAVOC_malloc(156);
    Pdx_39 := actual_Pdx_39;
    assume {:nonnull} Pdx_39 != 0;
    assume Pdx_39 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_1548 := 1;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} Pdx_39 != 0;
    assume Pdx_39 > 0;
    havoc Irp_60;
    call {:si_unique_call 2183} KeInitializeEvent(Event_4, 0, 0);
    call {:si_unique_call 2184} NextSp := sdv_IoGetNextIrpStackLocation(Irp_60);
    assume {:nonnull} NextSp != 0;
    assume NextSp > 0;
    assume {:nonnull} NextSp != 0;
    assume NextSp > 0;
    call {:si_unique_call 2185} sdv_IoSetCompletionRoutine(Irp_60, li2bplFunctionConstant245, Event_4, 1, 1, 1);
    assume {:nonnull} Pdx_39 != 0;
    assume Pdx_39 > 0;
    havoc vslice_dummy_var_205;
    call {:si_unique_call 2186} vslice_dummy_var_429 := ParCallDriver(vslice_dummy_var_205, Irp_60);
    assume {:nonnull} Pdx_39 != 0;
    assume Pdx_39 > 0;
    assume {:nonnull} Timeout_3 != 0;
    assume Timeout_3 > 0;
    call {:si_unique_call 2187} Status_24 := KeWaitForSingleObject(0, 0, 0, 0, Timeout_3);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Status_24 == 258;
    call {:si_unique_call 2188} vslice_dummy_var_430 := IoCancelIrp(0);
    call {:si_unique_call 2189} vslice_dummy_var_431 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L34;

  L34:
    assume {:nonnull} Irp_60 != 0;
    assume Irp_60 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    bAllocated := 0;
    goto L56;

  L56:
    assume {:nonnull} Pdx_39 != 0;
    assume Pdx_39 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} bAllocated != 0;
    goto L44;

  L44:
    Tmp_1548 := bAllocated;
    goto L1;

  anon12_Then:
    assume {:partition} bAllocated == 0;
    assume {:nonnull} Irp_60 != 0;
    assume Irp_60 > 0;
    goto L44;

  anon11_Then:
    bAllocated := 1;
    goto L56;

  anon10_Then:
    assume {:partition} Status_24 != 258;
    goto L34;
}



procedure {:origName "PptQueryNumWaiters"} PptQueryNumWaiters(actual_Fdx_9: int) returns (Tmp_1550: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptQueryNumWaiters"} PptQueryNumWaiters(actual_Fdx_9: int) returns (Tmp_1550: int)
{
  var {:pointer} Tmp_1551: int;
  var {:scalar} count_3: int;
  var {:scalar} Tmp_1552: int;
  var {:pointer} fdx_28: int;
  var {:scalar} CancelIrql_5: int;
  var {:scalar} SyncContext_3: int;
  var {:pointer} Fdx_9: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;

  anon0:
    call {:si_unique_call 2190} SyncContext_3 := __HAVOC_malloc(8);
    Fdx_9 := actual_Fdx_9;
    fdx_28 := Fdx_9;
    assume {:nonnull} SyncContext_3 != 0;
    assume SyncContext_3 > 0;
    assume {:nonnull} fdx_28 != 0;
    assume fdx_28 > 0;
    assume {:nonnull} fdx_28 != 0;
    assume fdx_28 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 2191} vslice_dummy_var_432 := KeSynchronizeExecution(0, li2bplFunctionConstant194, 0);
    goto L16;

  L16:
    assume {:nonnull} SyncContext_3 != 0;
    assume SyncContext_3 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} SyncContext_3 != 0;
    assume SyncContext_3 > 0;
    havoc Tmp_1552;
    goto L19;

  L19:
    count_3 := Tmp_1552;
    assume {:nonnull} fdx_28 != 0;
    assume fdx_28 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    count_3 := count_3 + 1;
    goto L21;

  L21:
    Tmp_1550 := count_3;
    return;

  anon9_Then:
    goto L21;

  anon7_Then:
    Tmp_1552 := 0;
    goto L19;

  anon8_Then:
    call {:si_unique_call 2192} Tmp_1551 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1551 != 0;
    assume Tmp_1551 > 0;
    Mem_T.INT4[Tmp_1551] := CancelIrql_5;
    call {:si_unique_call 2193} IoAcquireCancelSpinLock(Tmp_1551);
    assume {:nonnull} Tmp_1551 != 0;
    assume Tmp_1551 > 0;
    CancelIrql_5 := Mem_T.INT4[Tmp_1551];
    call {:si_unique_call 2194} vslice_dummy_var_433 := PptSynchronizedRead(SyncContext_3);
    call {:si_unique_call 2195} IoReleaseCancelSpinLock(CancelIrql_5);
    goto L16;
}



procedure {:origName "P4CompleteRequestReleaseRemLock"} P4CompleteRequestReleaseRemLock(actual_Irp_61: int, actual_Status_25: int, actual_Information: int, actual_RemLock: int) returns (Tmp_1553: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1553 == actual_Status_25;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4CompleteRequestReleaseRemLock"} P4CompleteRequestReleaseRemLock(actual_Irp_61: int, actual_Status_25: int, actual_Information: int, actual_RemLock: int) returns (Tmp_1553: int)
{
  var {:pointer} Irp_61: int;
  var {:scalar} Status_25: int;
  var {:scalar} Information: int;
  var {:pointer} RemLock: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;

  anon0:
    Irp_61 := actual_Irp_61;
    Status_25 := actual_Status_25;
    Information := actual_Information;
    RemLock := actual_RemLock;
    call {:si_unique_call 2196} vslice_dummy_var_434 := P4CompleteRequest(Irp_61, Status_25, Information);
    call {:si_unique_call 2197} vslice_dummy_var_435 := sdv_IoReleaseRemoveLock(RemLock, Irp_61);
    Tmp_1553 := Status_25;
    return;
}



procedure {:origName "PptBuildParallelPortDeviceName"} PptBuildParallelPortDeviceName(actual_Number: int, actual_DeviceName_2: int) returns (Tmp_1555: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptBuildParallelPortDeviceName"} PptBuildParallelPortDeviceName(actual_Number: int, actual_DeviceName_2: int) returns (Tmp_1555: int)
{
  var {:pointer} wcPortNum: int;
  var {:pointer} Tmp_1556: int;
  var {:scalar} Tmp_1558: int;
  var {:scalar} uniBaseNameString: int;
  var {:scalar} uniDeviceString: int;
  var {:pointer} sdv_1048: int;
  var {:pointer} Tmp_1559: int;
  var {:scalar} uniPortNumberString: int;
  var {:scalar} status_51: int;
  var {:scalar} Tmp_1560: int;
  var {:scalar} Number: int;
  var {:pointer} DeviceName_2: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;

  anon0:
    call {:si_unique_call 2198} uniBaseNameString := __HAVOC_malloc(12);
    call {:si_unique_call 2199} uniDeviceString := __HAVOC_malloc(12);
    call {:si_unique_call 2200} uniPortNumberString := __HAVOC_malloc(12);
    Number := actual_Number;
    DeviceName_2 := actual_DeviceName_2;
    call {:si_unique_call 2201} wcPortNum := __HAVOC_malloc(40);
    call {:si_unique_call 2202} Tmp_1556 := __HAVOC_malloc(52);
    call {:si_unique_call 2203} Tmp_1559 := __HAVOC_malloc(36);
    call {:si_unique_call 2204} RtlInitUnicodeString(DeviceName_2, 0);
    Tmp_1559 := strConst__li2bpl81;
    call {:si_unique_call 2205} RtlInitUnicodeString(uniDeviceString, Tmp_1559);
    Tmp_1556 := strConst__li2bpl82;
    call {:si_unique_call 2206} RtlInitUnicodeString(uniBaseNameString, Tmp_1556);
    assume {:nonnull} uniPortNumberString != 0;
    assume uniPortNumberString > 0;
    assume {:nonnull} uniPortNumberString != 0;
    assume uniPortNumberString > 0;
    assume {:nonnull} uniPortNumberString != 0;
    assume uniPortNumberString > 0;
    call {:si_unique_call 2207} status_51 := RtlIntegerToUnicodeString(Number, 10, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_51 >= 0;
    assume {:nonnull} DeviceName_2 != 0;
    assume DeviceName_2 > 0;
    assume {:nonnull} uniBaseNameString != 0;
    assume uniBaseNameString > 0;
    assume {:nonnull} uniDeviceString != 0;
    assume uniDeviceString > 0;
    assume {:nonnull} uniPortNumberString != 0;
    assume uniPortNumberString > 0;
    assume {:nonnull} DeviceName_2 != 0;
    assume DeviceName_2 > 0;
    havoc Tmp_1560;
    call {:si_unique_call 2208} sdv_1048 := ExAllocatePoolWithTag(257, Tmp_1560, -797810352);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} DeviceName_2 != 0;
    assume DeviceName_2 > 0;
    assume {:nonnull} DeviceName_2 != 0;
    assume DeviceName_2 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} DeviceName_2 != 0;
    assume DeviceName_2 > 0;
    havoc Tmp_1558;
    call {:si_unique_call 2209} sdv_RtlZeroMemory(0, Tmp_1558);
    call {:si_unique_call 2210} vslice_dummy_var_436 := corral_nondet();
    call {:si_unique_call 2211} vslice_dummy_var_437 := corral_nondet();
    call {:si_unique_call 2212} vslice_dummy_var_438 := corral_nondet();
    Tmp_1555 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    Tmp_1555 := -1073741670;
    goto L1;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} 0 > status_51;
    Tmp_1555 := status_51;
    goto L1;
}



procedure {:origName "GetCheckSum"} GetCheckSum(actual_Block: int, actual_Len: int, actual_CheckSum: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetCheckSum"} GetCheckSum(actual_Block: int, actual_Len: int, actual_CheckSum: int)
{
  var {:scalar} i_36: int;
  var {:scalar} crc: int;
  var {:scalar} Tmp_1566: int;
  var {:pointer} crc16a: int;
  var {:scalar} tmp: int;
  var {:pointer} crc16b: int;
  var {:scalar} Len: int;
  var {:pointer} CheckSum: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;

  anon0:
    call {:si_unique_call 2213} vslice_dummy_var_439 := __HAVOC_malloc(4);
    Len := actual_Len;
    CheckSum := actual_CheckSum;
    call {:si_unique_call 2214} crc16a := __HAVOC_malloc(64);
    call {:si_unique_call 2215} crc16b := __HAVOC_malloc(64);
    crc := 0;
    assume {:nonnull} crc16a != 0;
    assume crc16a > 0;
    Mem_T.INT4[crc16a] := 0;
    assume {:nonnull} crc16b != 0;
    assume crc16b > 0;
    Mem_T.INT4[crc16b] := 0;
    i_36 := 0;
    goto L12;

  L12:
    call {:si_unique_call 2216} i_36, crc, Tmp_1566, tmp, vslice_dummy_var_440 := GetCheckSum_loop_L12(i_36, crc, Tmp_1566, tmp, Len, vslice_dummy_var_440);
    goto L12_last;

  L12_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Len > i_36;
    call {:si_unique_call 2217} tmp := corral_nondet();
    Tmp_1566 := BAND(tmp, BOR(BOR(BOR(1, 2), 4), 8));
    call {:si_unique_call 2218} vslice_dummy_var_440 := corral_nondet();
    call {:si_unique_call 2219} crc := corral_nondet();
    i_36 := i_36 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_36 >= Len;
    assume {:nonnull} CheckSum != 0;
    assume CheckSum > 0;
    Mem_T.INT4[CheckSum] := crc;
    return;
}



procedure {:origName "ParFreePort"} ParFreePort(actual_Pdx_40: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParFreePort"} ParFreePort(actual_Pdx_40: int)
{
  var {:pointer} Pdx_40: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_206: int;

  anon0:
    call {:si_unique_call 2220} vslice_dummy_var_441 := __HAVOC_malloc(4);
    Pdx_40 := actual_Pdx_40;
    assume {:nonnull} Pdx_40 != 0;
    assume Pdx_40 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_40 != 0;
    assume Pdx_40 > 0;
    assume {:nonnull} Pdx_40 != 0;
    assume Pdx_40 > 0;
    havoc vslice_dummy_var_206;
    call {:si_unique_call 2221} PptFreePort#1(vslice_dummy_var_206);
    goto L4;

  L4:
    assume {:nonnull} Pdx_40 != 0;
    assume Pdx_40 > 0;
    return;

  anon3_Then:
    goto L4;
}



procedure {:origName "ParPnpFindDeviceIdKeys"} ParPnpFindDeviceIdKeys(actual_lppMFG: int, actual_lppMDL: int, actual_lppCLS: int, actual_lppDES: int, actual_lppAID: int, actual_lppCID: int, actual_lpDeviceID: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParPnpFindDeviceIdKeys"} ParPnpFindDeviceIdKeys(actual_lppMFG: int, actual_lppMDL: int, actual_lppCLS: int, actual_lppDES: int, actual_lppAID: int, actual_lppCID: int, actual_lpDeviceID: int)
{
  var {:scalar} Tmp_1570: int;
  var {:scalar} Tmp_1571: int;
  var {:scalar} sdv_1052: int;
  var {:scalar} sdv_1053: int;
  var {:scalar} Tmp_1572: int;
  var {:scalar} sdv_1055: int;
  var {:scalar} sdv_1056: int;
  var {:scalar} Tmp_1574: int;
  var {:scalar} Tmp_1575: int;
  var {:scalar} Tmp_1576: int;
  var {:pointer} lpKey_1: int;
  var {:scalar} Tmp_1577: int;
  var {:scalar} sdv_1059: int;
  var {:scalar} Tmp_1579: int;
  var {:scalar} Tmp_1580: int;
  var {:scalar} sdv_1062: int;
  var {:scalar} Tmp_1582: int;
  var {:scalar} sdv_1065: int;
  var {:scalar} sdv_1066: int;
  var {:scalar} Tmp_1583: int;
  var {:scalar} sdv_1067: int;
  var {:scalar} Tmp_1585: int;
  var {:scalar} sdv_1069: int;
  var {:pointer} lpValue: int;
  var {:scalar} sdv_1072: int;
  var {:scalar} sdv_1074: int;
  var {:scalar} wKeyLength: int;
  var {:pointer} lppMFG: int;
  var {:pointer} lppMDL: int;
  var {:pointer} lppCLS: int;
  var {:pointer} lppDES: int;
  var {:pointer} lppAID: int;
  var {:pointer} lppCID: int;
  var {:pointer} lpDeviceID: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_454: int;

  anon0:
    call {:si_unique_call 2222} vslice_dummy_var_442 := __HAVOC_malloc(4);
    lppMFG := actual_lppMFG;
    lppMDL := actual_lppMDL;
    lppCLS := actual_lppCLS;
    lppDES := actual_lppDES;
    lppAID := actual_lppAID;
    lppCID := actual_lppCID;
    lpDeviceID := actual_lpDeviceID;
    call {:si_unique_call 2223} vslice_dummy_var_443 := __HAVOC_malloc(16);
    call {:si_unique_call 2224} vslice_dummy_var_444 := __HAVOC_malloc(24);
    call {:si_unique_call 2225} vslice_dummy_var_445 := __HAVOC_malloc(16);
    call {:si_unique_call 2226} vslice_dummy_var_446 := __HAVOC_malloc(16);
    call {:si_unique_call 2227} vslice_dummy_var_447 := __HAVOC_malloc(52);
    call {:si_unique_call 2228} vslice_dummy_var_448 := __HAVOC_malloc(16);
    call {:si_unique_call 2229} vslice_dummy_var_449 := __HAVOC_malloc(16);
    call {:si_unique_call 2230} vslice_dummy_var_450 := __HAVOC_malloc(24);
    call {:si_unique_call 2231} vslice_dummy_var_451 := __HAVOC_malloc(48);
    call {:si_unique_call 2232} vslice_dummy_var_452 := __HAVOC_malloc(48);
    call {:si_unique_call 2233} vslice_dummy_var_453 := __HAVOC_malloc(16);
    call {:si_unique_call 2234} vslice_dummy_var_454 := __HAVOC_malloc(52);
    lpKey_1 := lpDeviceID;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} lppMFG != 0;
    assume {:nonnull} lppMFG != 0;
    assume lppMFG > 0;
    goto L8;

  L8:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} lppMDL != 0;
    assume {:nonnull} lppMDL != 0;
    assume lppMDL > 0;
    goto L10;

  L10:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} lppCLS != 0;
    assume {:nonnull} lppCLS != 0;
    assume lppCLS > 0;
    goto L12;

  L12:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} lppDES != 0;
    assume {:nonnull} lppDES != 0;
    assume lppDES > 0;
    goto L14;

  L14:
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} lppAID != 0;
    assume {:nonnull} lppAID != 0;
    assume lppAID > 0;
    goto L16;

  L16:
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} lppCID != 0;
    assume {:nonnull} lppCID != 0;
    assume lppCID > 0;
    goto L18;

  L18:
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} lpDeviceID != 0;
    goto L21;

  L21:
    call {:si_unique_call 2235} Tmp_1570, Tmp_1571, sdv_1052, sdv_1053, Tmp_1572, sdv_1055, sdv_1056, Tmp_1574, Tmp_1575, Tmp_1576, lpKey_1, Tmp_1577, sdv_1059, Tmp_1579, Tmp_1580, sdv_1062, Tmp_1582, sdv_1065, sdv_1066, Tmp_1583, sdv_1067, Tmp_1585, sdv_1069, lpValue, sdv_1072, sdv_1074, wKeyLength := ParPnpFindDeviceIdKeys_loop_L21(Tmp_1570, Tmp_1571, sdv_1052, sdv_1053, Tmp_1572, sdv_1055, sdv_1056, Tmp_1574, Tmp_1575, Tmp_1576, lpKey_1, Tmp_1577, sdv_1059, Tmp_1579, Tmp_1580, sdv_1062, Tmp_1582, sdv_1065, sdv_1066, Tmp_1583, sdv_1067, Tmp_1585, sdv_1069, lpValue, sdv_1072, sdv_1074, wKeyLength, lppMFG, lppMDL, lppCLS, lppDES, lppAID, lppCID);
    goto L21_last;

  L21_last:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} lpKey_1 != 0;
    goto L22;

  L22:
    call {:si_unique_call 2236} ParPnpFindDeviceIdKeys_loop_L22(lpKey_1);
    goto L22_last;

  L22_last:
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] == 32;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    assume false;
    return;

  anon94_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] != 32;
    call {:si_unique_call 2237} lpValue := StringChr(lpKey_1, 58);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} lpValue != 0;
    wKeyLength := lpValue;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] != 65;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] != 67;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] != 68;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} Mem_T.INT4[lpKey_1] == 77;
    Tmp_1575 := wKeyLength;
    call {:si_unique_call 2238} sdv_1066 := RtlCompareMemory(0, 0, Tmp_1575);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_1066 > 5;
    goto L45;

  L45:
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} lppMFG != 0;
    assume {:nonnull} lppMFG != 0;
    assume lppMFG > 0;
    call {:si_unique_call 2239} lpKey_1 := StringChr(lpValue, 59);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon98_Else_dummy;

  anon98_Else_dummy:
    assume false;
    return;

  anon98_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon98_Then_dummy;

  anon98_Then_dummy:
    assume false;
    return;

  anon97_Then:
    assume {:partition} lppMFG == 0;
    goto L1;

  L1:
    return;

  anon96_Then:
    assume {:partition} 5 >= sdv_1066;
    Tmp_1579 := wKeyLength;
    call {:si_unique_call 2240} sdv_1067 := RtlCompareMemory(0, 0, Tmp_1579);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_1067 != 3;
    Tmp_1583 := wKeyLength;
    call {:si_unique_call 2241} sdv_1059 := RtlCompareMemory(0, 0, Tmp_1583);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_1059 == 5;
    goto L66;

  L66:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} lppMDL != 0;
    assume {:nonnull} lppMDL != 0;
    assume lppMDL > 0;
    call {:si_unique_call 2242} lpKey_1 := StringChr(lpValue, 59);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon102_Else_dummy;

  anon102_Else_dummy:
    assume false;
    return;

  anon102_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon102_Then_dummy;

  anon102_Then_dummy:
    assume false;
    return;

  anon101_Then:
    assume {:partition} lppMDL == 0;
    goto L1;

  anon100_Then:
    assume {:partition} sdv_1059 != 5;
    Tmp_1580 := wKeyLength;
    call {:si_unique_call 2243} sdv_1062 := RtlCompareMemory(0, 0, Tmp_1580);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_1062 != 3;
    call {:si_unique_call 2244} lpKey_1 := StringChr(lpValue, 59);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon104_Else_dummy;

  anon104_Else_dummy:
    assume false;
    return;

  anon104_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon104_Then_dummy;

  anon104_Then_dummy:
    assume false;
    return;

  anon103_Then:
    assume {:partition} sdv_1062 == 3;
    goto L66;

  anon99_Then:
    assume {:partition} sdv_1067 == 3;
    goto L45;

  anon125_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] != 77;
    call {:si_unique_call 2245} lpKey_1 := StringChr(lpValue, 59);
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon124_Else_dummy;

  anon124_Else_dummy:
    assume false;
    return;

  anon124_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon124_Then_dummy;

  anon124_Then_dummy:
    assume false;
    return;

  anon126_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] == 68;
    Tmp_1582 := wKeyLength;
    call {:si_unique_call 2246} sdv_1074 := RtlCompareMemory(0, 0, Tmp_1582);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_1074 != 0;
    goto L92;

  L92:
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} lppDES != 0;
    assume {:nonnull} lppDES != 0;
    assume lppDES > 0;
    call {:si_unique_call 2247} lpKey_1 := StringChr(lpValue, 59);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon107_Else_dummy;

  anon107_Else_dummy:
    assume false;
    return;

  anon107_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    assume false;
    return;

  anon106_Then:
    assume {:partition} lppDES == 0;
    goto L1;

  anon105_Then:
    assume {:partition} sdv_1074 == 0;
    Tmp_1574 := wKeyLength;
    call {:si_unique_call 2248} sdv_1053 := RtlCompareMemory(0, 0, Tmp_1574);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} sdv_1053 == 0;
    call {:si_unique_call 2249} lpKey_1 := StringChr(lpValue, 59);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon109_Else_dummy;

  anon109_Else_dummy:
    assume false;
    return;

  anon109_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon109_Then_dummy;

  anon109_Then_dummy:
    assume false;
    return;

  anon108_Then:
    assume {:partition} sdv_1053 != 0;
    goto L92;

  anon127_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] == 67;
    Tmp_1571 := wKeyLength;
    call {:si_unique_call 2250} sdv_1069 := RtlCompareMemory(0, 0, Tmp_1571);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} sdv_1069 == 5;
    goto L119;

  L119:
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} lppCLS != 0;
    assume {:nonnull} lppCLS != 0;
    assume lppCLS > 0;
    call {:si_unique_call 2251} lpKey_1 := StringChr(lpValue, 59);
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    assume false;
    return;

  anon112_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon112_Then_dummy;

  anon112_Then_dummy:
    assume false;
    return;

  anon111_Then:
    assume {:partition} lppCLS == 0;
    goto L1;

  anon110_Then:
    assume {:partition} sdv_1069 != 5;
    Tmp_1576 := wKeyLength;
    call {:si_unique_call 2252} sdv_1072 := RtlCompareMemory(0, 0, Tmp_1576);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} sdv_1072 != 3;
    Tmp_1577 := wKeyLength;
    call {:si_unique_call 2253} sdv_1052 := RtlCompareMemory(0, 0, Tmp_1577);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} sdv_1052 > 5;
    goto L140;

  L140:
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} lppCID != 0;
    assume {:nonnull} lppCID != 0;
    assume lppCID > 0;
    call {:si_unique_call 2254} lpKey_1 := StringChr(lpValue, 59);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    assume false;
    return;

  anon116_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon116_Then_dummy;

  anon116_Then_dummy:
    assume false;
    return;

  anon115_Then:
    assume {:partition} lppCID == 0;
    goto L1;

  anon114_Then:
    assume {:partition} 5 >= sdv_1052;
    Tmp_1572 := wKeyLength;
    call {:si_unique_call 2255} sdv_1065 := RtlCompareMemory(0, 0, Tmp_1572);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} sdv_1065 != 3;
    call {:si_unique_call 2256} lpKey_1 := StringChr(lpValue, 59);
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon118_Else_dummy;

  anon118_Else_dummy:
    assume false;
    return;

  anon118_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon118_Then_dummy;

  anon118_Then_dummy:
    assume false;
    return;

  anon117_Then:
    assume {:partition} sdv_1065 == 3;
    goto L140;

  anon113_Then:
    assume {:partition} sdv_1072 == 3;
    goto L119;

  anon129_Then:
    assume {:partition} Mem_T.INT4[lpKey_1] == 65;
    Tmp_1585 := wKeyLength;
    call {:si_unique_call 2257} sdv_1055 := RtlCompareMemory(0, 0, Tmp_1585);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} sdv_1055 != 0;
    goto L166;

  L166:
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} lppAID != 0;
    assume {:nonnull} lppAID != 0;
    assume lppAID > 0;
    call {:si_unique_call 2258} lpKey_1 := StringChr(lpValue, 59);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon121_Else_dummy;

  anon121_Else_dummy:
    assume false;
    return;

  anon121_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon121_Then_dummy;

  anon121_Then_dummy:
    assume false;
    return;

  anon120_Then:
    assume {:partition} lppAID == 0;
    goto L1;

  anon119_Then:
    assume {:partition} sdv_1055 == 0;
    Tmp_1570 := wKeyLength;
    call {:si_unique_call 2259} sdv_1056 := RtlCompareMemory(0, 0, Tmp_1570);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} sdv_1056 == 0;
    call {:si_unique_call 2260} lpKey_1 := StringChr(lpValue, 59);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} lpKey_1 != 0;
    assume {:nonnull} lpKey_1 != 0;
    assume lpKey_1 > 0;
    Mem_T.INT4[lpKey_1] := 0;
    goto anon123_Else_dummy;

  anon123_Else_dummy:
    assume false;
    return;

  anon123_Then:
    assume {:partition} lpKey_1 == 0;
    goto anon123_Then_dummy;

  anon123_Then_dummy:
    assume false;
    return;

  anon122_Then:
    assume {:partition} sdv_1056 != 0;
    goto L166;

  anon95_Then:
    assume {:partition} lpValue == 0;
    goto L1;

  anon93_Then:
    assume {:partition} lpKey_1 == 0;
    goto L1;

  anon92_Then:
    assume {:partition} lpDeviceID == 0;
    goto L1;

  anon91_Then:
    assume {:partition} lppCID == 0;
    goto L18;

  anon90_Then:
    assume {:partition} lppAID == 0;
    goto L16;

  anon89_Then:
    assume {:partition} lppDES == 0;
    goto L14;

  anon88_Then:
    assume {:partition} lppCLS == 0;
    goto L12;

  anon87_Then:
    assume {:partition} lppMDL == 0;
    goto L10;

  anon128_Then:
    assume {:partition} lppMFG == 0;
    goto L8;
}



procedure {:origName "PptPdoGetPortInfoFromFdo"} PptPdoGetPortInfoFromFdo(actual_Pdo_27: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoGetPortInfoFromFdo"} PptPdoGetPortInfoFromFdo(actual_Pdo_27: int)
{
  var {:pointer} pdx_29: int;
  var {:pointer} fdo_3: int;
  var {:pointer} fdx_29: int;
  var {:pointer} Pdo_27: int;
  var vslice_dummy_var_455: int;

  anon0:
    call {:si_unique_call 2261} vslice_dummy_var_455 := __HAVOC_malloc(4);
    Pdo_27 := actual_Pdo_27;
    assume {:nonnull} Pdo_27 != 0;
    assume Pdo_27 > 0;
    havoc pdx_29;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    havoc fdo_3;
    assume {:nonnull} fdo_3 != 0;
    assume fdo_3 > 0;
    havoc fdx_29;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    assume {:nonnull} fdx_29 != 0;
    assume fdx_29 > 0;
    assume {:nonnull} pdx_29 != 0;
    assume pdx_29 > 0;
    return;
}



procedure {:origName "PptSynchronizedDecrement"} PptSynchronizedDecrement(actual_SyncContext_5: int) returns (Tmp_1599: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1599 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSynchronizedDecrement"} PptSynchronizedDecrement(actual_SyncContext_5: int) returns (Tmp_1599: int)
{
  var {:pointer} Tmp_1600: int;
  var {:pointer} Tmp_1602: int;
  var {:pointer} Tmp_1603: int;
  var {:pointer} Tmp_1604: int;
  var {:pointer} Tmp_1605: int;
  var {:pointer} SyncContext_5: int;

  anon0:
    SyncContext_5 := actual_SyncContext_5;
    Tmp_1604 := SyncContext_5;
    Tmp_1602 := SyncContext_5;
    assume {:nonnull} Tmp_1602 != 0;
    assume Tmp_1602 > 0;
    havoc Tmp_1605;
    Tmp_1603 := SyncContext_5;
    assume {:nonnull} Tmp_1603 != 0;
    assume Tmp_1603 > 0;
    havoc Tmp_1600;
    assume {:nonnull} Tmp_1600 != 0;
    assume Tmp_1600 > 0;
    assume {:nonnull} Tmp_1605 != 0;
    assume Tmp_1605 > 0;
    Mem_T.INT4[Tmp_1605] := Mem_T.INT4[Tmp_1600] - 1;
    assume {:nonnull} Tmp_1600 != 0;
    assume Tmp_1600 > 0;
    assume {:nonnull} Tmp_1604 != 0;
    assume Tmp_1604 > 0;
    Tmp_1599 := 1;
    return;
}



procedure {:origName "CheckPort"} CheckPort(actual_wPortAddr: int, actual_bMask: int, actual_bValue: int, actual_msTimeDelay: int) returns (Tmp_1606: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1606 == 1 || Tmp_1606 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "CheckPort"} CheckPort(actual_wPortAddr: int, actual_bMask: int, actual_bValue: int, actual_msTimeDelay: int) returns (Tmp_1606: int)
{
  var {:pointer} Tmp_1608: int;
  var {:pointer} s_p_e_c_i_a_l_3: int;
  var {:scalar} Tmp_1609: int;
  var {:scalar} Wait_2: int;
  var {:scalar} sdv_1088: int;
  var {:pointer} s_p_e_c_i_a_l_4: int;
  var {:scalar} sdv_1091: int;
  var {:scalar} End_1: int;
  var {:scalar} Start_1: int;
  var {:scalar} Tmp_1610: int;
  var {:scalar} dsr_2: int;
  var {:scalar} Tmp_1611: int;
  var {:pointer} Tmp_1612: int;
  var {:scalar} bMask: int;
  var {:scalar} bValue: int;
  var {:scalar} msTimeDelay: int;

  anon0:
    call {:si_unique_call 2262} Wait_2 := __HAVOC_malloc(20);
    call {:si_unique_call 2263} End_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2264} Start_1 := __HAVOC_malloc(20);
    bMask := actual_bMask;
    bValue := actual_bValue;
    msTimeDelay := actual_msTimeDelay;
    call {:si_unique_call 2265} dsr_2 := corral_nondet();
    Tmp_1610 := BAND(dsr_2, bMask);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Tmp_1610 == bValue;
    Tmp_1606 := 1;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} Tmp_1610 != bValue;
    call {:si_unique_call 2266} sdv_1088 := corral_nondet();
    assume {:nonnull} Wait_2 != 0;
    assume Wait_2 > 0;
    Tmp_1608 := KeTickCount;
    assume {:nonnull} Tmp_1608 != 0;
    assume Tmp_1608 > 0;
    havoc s_p_e_c_i_a_l_3;
    goto L21;

  L21:
    call {:si_unique_call 2267} CheckPort_loop_L21(s_p_e_c_i_a_l_3, Start_1);
    goto L21_last;

  L21_last:
    assume {:nonnull} Start_1 != 0;
    assume Start_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} Start_1 != 0;
    assume Start_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} Start_1 != 0;
    assume Start_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L29;

  L29:
    call {:si_unique_call 2268} Tmp_1609, s_p_e_c_i_a_l_4, sdv_1091, dsr_2, Tmp_1612 := CheckPort_loop_L29(Tmp_1609, Wait_2, s_p_e_c_i_a_l_4, sdv_1091, End_1, Start_1, dsr_2, Tmp_1612, bMask, bValue);
    goto L29_last;

  L29_last:
    Tmp_1612 := KeTickCount;
    assume {:nonnull} Tmp_1612 != 0;
    assume Tmp_1612 > 0;
    havoc s_p_e_c_i_a_l_4;
    goto L31;

  L31:
    call {:si_unique_call 2269} CheckPort_loop_L31(s_p_e_c_i_a_l_4, End_1);
    goto L31_last;

  L31_last:
    assume {:nonnull} End_1 != 0;
    assume End_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_4 != 0;
    assume s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} End_1 != 0;
    assume End_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_4 != 0;
    assume s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} End_1 != 0;
    assume End_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_4 != 0;
    assume s_p_e_c_i_a_l_4 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 2270} dsr_2 := corral_nondet();
    Tmp_1609 := BAND(dsr_2, bMask);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_1609 == bValue;
    Tmp_1606 := 1;
    goto L1;

  anon17_Then:
    assume {:partition} Tmp_1609 != bValue;
    call {:si_unique_call 2271} sdv_1091 := corral_nondet();
    assume {:nonnull} End_1 != 0;
    assume End_1 > 0;
    assume {:nonnull} Start_1 != 0;
    assume Start_1 > 0;
    assume {:nonnull} Wait_2 != 0;
    assume Wait_2 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 2272} dsr_2 := corral_nondet();
    Tmp_1611 := BAND(dsr_2, bMask);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1611 != bValue;
    Tmp_1606 := 0;
    goto L1;

  anon18_Then:
    assume {:partition} Tmp_1611 == bValue;
    Tmp_1606 := 1;
    goto L1;

  anon13_Then:
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    assume false;
    return;

  anon16_Then:
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    assume false;
    return;

  anon15_Then:
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PptAcquireRemoveLockOrFailIrp"} PptAcquireRemoveLockOrFailIrp(actual_DevObj_12: int, actual_Irp_63: int) returns (Tmp_1613: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1613 == -1073741823 || Tmp_1613 == -1073741738 || Tmp_1613 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptAcquireRemoveLockOrFailIrp"} PptAcquireRemoveLockOrFailIrp(actual_DevObj_12: int, actual_Irp_63: int) returns (Tmp_1613: int)
{
  var {:scalar} status_52: int;
  var {:pointer} DevObj_12: int;
  var {:pointer} Irp_63: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_207: int;

  anon0:
    DevObj_12 := actual_DevObj_12;
    Irp_63 := actual_Irp_63;
    assume {:nonnull} DevObj_12 != 0;
    assume DevObj_12 > 0;
    call {:si_unique_call 2273} status_52 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_52 != 0;
    assume {:nonnull} Irp_63 != 0;
    assume Irp_63 > 0;
    havoc vslice_dummy_var_207;
    call {:si_unique_call 2274} vslice_dummy_var_456 := P4CompleteRequest(Irp_63, status_52, vslice_dummy_var_207);
    goto L11;

  L11:
    Tmp_1613 := status_52;
    return;

  anon3_Then:
    assume {:partition} status_52 == 0;
    goto L11;
}



procedure {:origName "PptSynchronizedRead"} PptSynchronizedRead(actual_SyncContext_6: int) returns (Tmp_1615: int);
  free ensures {:va_keep} Tmp_1615 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSynchronizedRead"} PptSynchronizedRead(actual_SyncContext_6: int) returns (Tmp_1615: int)
{
  var {:pointer} Tmp_1616: int;
  var {:pointer} Tmp_1618: int;
  var {:pointer} Tmp_1619: int;
  var {:pointer} SyncContext_6: int;

  anon0:
    SyncContext_6 := actual_SyncContext_6;
    Tmp_1616 := SyncContext_6;
    Tmp_1619 := SyncContext_6;
    assume {:nonnull} Tmp_1619 != 0;
    assume Tmp_1619 > 0;
    havoc Tmp_1618;
    assume {:nonnull} Tmp_1616 != 0;
    assume Tmp_1616 > 0;
    assume {:nonnull} Tmp_1618 != 0;
    assume Tmp_1618 > 0;
    Tmp_1615 := 1;
    return;
}



procedure {:origName "P4ReleaseBus"} P4ReleaseBus(actual_Fdo_10: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4ReleaseBus"} P4ReleaseBus(actual_Fdo_10: int)
{
  var {:pointer} fdx_32: int;
  var {:pointer} Fdo_10: int;
  var vslice_dummy_var_457: int;

  anon0:
    call {:si_unique_call 2275} vslice_dummy_var_457 := __HAVOC_malloc(4);
    Fdo_10 := actual_Fdo_10;
    assume {:nonnull} Fdo_10 != 0;
    assume Fdo_10 > 0;
    havoc fdx_32;
    assume {:nonnull} fdx_32 != 0;
    assume fdx_32 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2276} PptFreePort#1(fdx_32);
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "PptGetPortNumberFromLptName"} PptGetPortNumberFromLptName(actual_PortName: int, actual_PortNumber: int) returns (Tmp_1622: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1622 == 0 || Tmp_1622 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptGetPortNumberFromLptName"} PptGetPortNumberFromLptName(actual_PortName: int, actual_PortNumber: int) returns (Tmp_1622: int)
{
  var {:pointer} Tmp_1623: int;
  var {:scalar} str: int;
  var {:scalar} status_53: int;
  var {:pointer} PortName: int;
  var {:pointer} PortNumber: int;

  anon0:
    call {:si_unique_call 2277} str := __HAVOC_malloc(12);
    PortName := actual_PortName;
    PortNumber := actual_PortNumber;
    assume {:nonnull} PortName != 0;
    assume PortName > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[PortName] != 76;
    goto L7;

  L7:
    Tmp_1622 := -1073741823;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} Mem_T.INT4[PortName] == 76;
    assume {:nonnull} PortName != 0;
    assume PortName > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[PortName + 1 * 4] == 80;
    assume {:nonnull} PortName != 0;
    assume PortName > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.INT4[PortName + 2 * 4] == 84;
    Tmp_1623 := PortName + 3 * 4;
    call {:si_unique_call 2278} RtlInitUnicodeString(str, Tmp_1623);
    call {:si_unique_call 2279} status_53 := corral_nondet();
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_53 >= 0;
    assume {:nonnull} PortNumber != 0;
    assume PortNumber > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.INT4[PortNumber] != 0;
    Tmp_1622 := 0;
    goto L1;

  anon15_Then:
    assume {:partition} Mem_T.INT4[PortNumber] == 0;
    Tmp_1622 := -1073741823;
    goto L1;

  anon14_Then:
    assume {:partition} 0 > status_53;
    Tmp_1622 := -1073741823;
    goto L1;

  anon13_Then:
    assume {:partition} Mem_T.INT4[PortName + 2 * 4] != 84;
    goto L7;

  anon12_Then:
    assume {:partition} Mem_T.INT4[PortName + 1 * 4] != 80;
    goto L7;
}



procedure {:origName "P4CompleteRequest"} P4CompleteRequest(actual_Irp_64: int, actual_Status_26: int, actual_Information_1: int) returns (Tmp_1625: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1625 == actual_Status_26;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4CompleteRequest"} P4CompleteRequest(actual_Irp_64: int, actual_Status_26: int, actual_Information_1: int) returns (Tmp_1625: int)
{
  var {:pointer} Irp_64: int;
  var {:scalar} Status_26: int;
  var {:scalar} Information_1: int;

  anon0:
    Irp_64 := actual_Irp_64;
    Status_26 := actual_Status_26;
    Information_1 := actual_Information_1;
    assume {:nonnull} Irp_64 != 0;
    assume Irp_64 > 0;
    assume {:nonnull} Irp_64 != 0;
    assume Irp_64 > 0;
    call {:si_unique_call 2280} sdv_IoCompleteRequest(0, 0);
    Tmp_1625 := Status_26;
    return;
}



procedure {:origName "ParDetectDot3DataLink"} ParDetectDot3DataLink(actual_Pdx_41: int, actual_DeviceId_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDetectDot3DataLink"} ParDetectDot3DataLink(actual_Pdx_41: int, actual_DeviceId_2: int)
{
  var {:pointer} DOT4DL_1: int;
  var {:pointer} DOT3DL_1: int;
  var {:pointer} DOT3M_1: int;
  var {:pointer} CMDField_1: int;
  var {:pointer} DOT3C_1: int;
  var {:pointer} Pdx_41: int;
  var {:pointer} DeviceId_2: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;

  anon0:
    call {:si_unique_call 2281} DOT4DL_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2282} DOT3DL_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2283} vslice_dummy_var_458 := __HAVOC_malloc(4);
    call {:si_unique_call 2284} DOT3M_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2285} CMDField_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2286} DOT3C_1 := __HAVOC_malloc(4);
    Pdx_41 := actual_Pdx_41;
    DeviceId_2 := actual_DeviceId_2;
    assume {:nonnull} DOT3DL_1 != 0;
    assume DOT3DL_1 > 0;
    assume {:nonnull} DOT3C_1 != 0;
    assume DOT3C_1 > 0;
    assume {:nonnull} DOT4DL_1 != 0;
    assume DOT4DL_1 > 0;
    assume {:nonnull} CMDField_1 != 0;
    assume CMDField_1 > 0;
    assume {:nonnull} DOT3M_1 != 0;
    assume DOT3M_1 > 0;
    call {:si_unique_call 2287} ParDot3ParseDevId(DOT3DL_1, DOT3C_1, CMDField_1, DOT4DL_1, DOT3M_1, DeviceId_2);
    assume {:nonnull} DOT3M_1 != 0;
    assume DOT3M_1 > 0;
    havoc vslice_dummy_var_208;
    call {:si_unique_call 2288} ParDot3ParseModes(Pdx_41, vslice_dummy_var_208);
    assume {:nonnull} DOT4DL_1 != 0;
    assume DOT4DL_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} DOT4DL_1 != 0;
    assume DOT4DL_1 > 0;
    havoc vslice_dummy_var_209;
    call {:si_unique_call 2289} ParDot4CreateObject(Pdx_41, vslice_dummy_var_209);
    goto L1;

  L1:
    return;

  anon7_Then:
    assume {:nonnull} DOT3DL_1 != 0;
    assume DOT3DL_1 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} DOT3C_1 != 0;
    assume DOT3C_1 > 0;
    assume {:nonnull} DOT3DL_1 != 0;
    assume DOT3DL_1 > 0;
    havoc vslice_dummy_var_210;
    havoc vslice_dummy_var_211;
    call {:si_unique_call 2290} ParDot3CreateObject(Pdx_41, vslice_dummy_var_210, vslice_dummy_var_211);
    goto L1;

  anon8_Then:
    assume {:nonnull} CMDField_1 != 0;
    assume CMDField_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} CMDField_1 != 0;
    assume CMDField_1 > 0;
    havoc vslice_dummy_var_212;
    call {:si_unique_call 2291} ParMLCCreateObject(Pdx_41, vslice_dummy_var_212);
    goto L1;

  anon9_Then:
    goto L1;
}



procedure {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_3: int, actual_Value_1: int) returns (Tmp_1629: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_3: int, actual_Value_1: int) returns (Tmp_1629: int)
{
  var {:scalar} sdv_1095: int;

  anon0:
    Tmp_1629 := sdv_1095;
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var {:scalar} Tmp_1631: int;
  var {:scalar} Tmp_1632: int;
  var {:scalar} Tmp_1633: int;
  var {:scalar} Tmp_1634: int;
  var {:scalar} Tmp_1635: int;
  var {:scalar} Tmp_1636: int;
  var {:scalar} Tmp_1637: int;
  var {:scalar} Tmp_1638: int;
  var {:scalar} Tmp_1639: int;
  var {:scalar} Tmp_1641: int;
  var {:scalar} Tmp_1643: int;
  var {:scalar} Tmp_1644: int;
  var {:scalar} Tmp_1645: int;
  var {:scalar} Tmp_1646: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;

  anon0:
    call {:si_unique_call 2292} Tmp_1631 := __HAVOC_malloc(4);
    call {:si_unique_call 2293} Tmp_1632 := __HAVOC_malloc(4);
    call {:si_unique_call 2294} Tmp_1633 := __HAVOC_malloc(4);
    call {:si_unique_call 2295} Tmp_1634 := __HAVOC_malloc(4);
    call {:si_unique_call 2296} Tmp_1635 := __HAVOC_malloc(4);
    call {:si_unique_call 2297} Tmp_1636 := __HAVOC_malloc(4);
    call {:si_unique_call 2298} Tmp_1637 := __HAVOC_malloc(4);
    call {:si_unique_call 2299} Tmp_1638 := __HAVOC_malloc(4);
    call {:si_unique_call 2300} Tmp_1639 := __HAVOC_malloc(4);
    call {:si_unique_call 2301} Tmp_1641 := __HAVOC_malloc(4);
    call {:si_unique_call 2302} vslice_dummy_var_459 := __HAVOC_malloc(4);
    call {:si_unique_call 2303} Tmp_1643 := __HAVOC_malloc(4);
    call {:si_unique_call 2304} Tmp_1644 := __HAVOC_malloc(4);
    call {:si_unique_call 2305} Tmp_1645 := __HAVOC_malloc(4);
    call {:si_unique_call 2306} Tmp_1646 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    assume {:nonnull} Tmp_1635 != 0;
    assume Tmp_1635 > 0;
    havoc vslice_dummy_var_213;
    Mem_T.INT4[Tmp_1635] := vslice_dummy_var_213;
    assume {:nonnull} Tmp_1634 != 0;
    assume Tmp_1634 > 0;
    havoc vslice_dummy_var_214;
    Mem_T.INT4[Tmp_1634] := vslice_dummy_var_214;
    assume {:nonnull} Tmp_1638 != 0;
    assume Tmp_1638 > 0;
    havoc vslice_dummy_var_215;
    Mem_T.INT4[Tmp_1638] := vslice_dummy_var_215;
    assume {:nonnull} Tmp_1632 != 0;
    assume Tmp_1632 > 0;
    havoc vslice_dummy_var_216;
    Mem_T.INT4[Tmp_1632] := vslice_dummy_var_216;
    assume {:nonnull} Tmp_1646 != 0;
    assume Tmp_1646 > 0;
    havoc vslice_dummy_var_217;
    Mem_T.INT4[Tmp_1646] := vslice_dummy_var_217;
    assume {:nonnull} Tmp_1633 != 0;
    assume Tmp_1633 > 0;
    havoc vslice_dummy_var_218;
    Mem_T.INT4[Tmp_1633] := vslice_dummy_var_218;
    assume {:nonnull} Tmp_1643 != 0;
    assume Tmp_1643 > 0;
    havoc vslice_dummy_var_219;
    Mem_T.INT4[Tmp_1643] := vslice_dummy_var_219;
    assume {:nonnull} Tmp_1641 != 0;
    assume Tmp_1641 > 0;
    havoc vslice_dummy_var_220;
    Mem_T.INT4[Tmp_1641] := vslice_dummy_var_220;
    assume {:nonnull} Tmp_1636 != 0;
    assume Tmp_1636 > 0;
    havoc vslice_dummy_var_221;
    Mem_T.INT4[Tmp_1636] := vslice_dummy_var_221;
    assume {:nonnull} Tmp_1644 != 0;
    assume Tmp_1644 > 0;
    havoc vslice_dummy_var_222;
    Mem_T.INT4[Tmp_1644] := vslice_dummy_var_222;
    assume {:nonnull} Tmp_1637 != 0;
    assume Tmp_1637 > 0;
    havoc vslice_dummy_var_223;
    Mem_T.INT4[Tmp_1637] := vslice_dummy_var_223;
    assume {:nonnull} Tmp_1631 != 0;
    assume Tmp_1631 > 0;
    havoc vslice_dummy_var_224;
    Mem_T.INT4[Tmp_1631] := vslice_dummy_var_224;
    assume {:nonnull} Tmp_1645 != 0;
    assume Tmp_1645 > 0;
    havoc vslice_dummy_var_225;
    Mem_T.INT4[Tmp_1645] := vslice_dummy_var_225;
    assume {:nonnull} Tmp_1639 != 0;
    assume Tmp_1639 > 0;
    havoc vslice_dummy_var_226;
    Mem_T.INT4[Tmp_1639] := vslice_dummy_var_226;
    return;
}



procedure {:origName "ParCallDriver"} ParCallDriver(actual_DeviceObject_26: int, actual_Irp_65: int) returns (Tmp_1647: int);
  free ensures {:va_keep} Tmp_1647 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParCallDriver"} ParCallDriver(actual_DeviceObject_26: int, actual_Irp_65: int) returns (Tmp_1647: int)
{
  var {:pointer} DeviceObject_26: int;
  var {:pointer} Irp_65: int;

  anon0:
    DeviceObject_26 := actual_DeviceObject_26;
    Irp_65 := actual_Irp_65;
    call {:si_unique_call 2307} Tmp_1647 := sdv_IoCallDriver(DeviceObject_26, Irp_65);
    return;
}



procedure {:origName "Par3QueryDeviceId"} Par3QueryDeviceId(actual_Pdx_42: int, actual_CallerDeviceIdBuffer_2: int, actual_CallerBufferSize_2: int, actual_DeviceIdSize_6: int, actual_bReturnRawString_4: int, actual_bBuildStlDeviceId_3: int) returns (Tmp_1649: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "Par3QueryDeviceId"} Par3QueryDeviceId(actual_Pdx_42: int, actual_CallerDeviceIdBuffer_2: int, actual_CallerBufferSize_2: int, actual_DeviceIdSize_6: int, actual_bReturnRawString_4: int, actual_bBuildStlDeviceId_3: int) returns (Tmp_1649: int)
{
  var {:scalar} deviceIdBufferSize_1: int;
  var {:scalar} Status_27: int;
  var {:scalar} bytesToRead_2: int;
  var {:scalar} deviceIdSize_2: int;
  var {:pointer} Controller_20: int;
  var {:scalar} sdv_1100: int;
  var {:scalar} allocatedBuffer: int;
  var {:pointer} idSizeBuffer_1: int;
  var {:dopa} {:scalar} bytesRead_2: int;
  var {:scalar} delay_2: int;
  var {:pointer} readPtr_1: int;
  var {:scalar} Tmp_1651: int;
  var {:pointer} sdv_1104: int;
  var {:pointer} deviceIdBuffer_2: int;
  var {:scalar} Tmp_1653: int;
  var {:pointer} Pdx_42: int;
  var {:pointer} CallerDeviceIdBuffer_2: int;
  var {:scalar} CallerBufferSize_2: int;
  var {:pointer} DeviceIdSize_6: int;
  var {:scalar} bReturnRawString_4: int;
  var {:scalar} bBuildStlDeviceId_3: int;
  var boogieTmp: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;

  anon0:
    call {:si_unique_call 2308} idSizeBuffer_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2309} bytesRead_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2310} delay_2 := __HAVOC_malloc(20);
    Pdx_42 := actual_Pdx_42;
    CallerDeviceIdBuffer_2 := actual_CallerDeviceIdBuffer_2;
    CallerBufferSize_2 := actual_CallerBufferSize_2;
    DeviceIdSize_6 := actual_DeviceIdSize_6;
    bReturnRawString_4 := actual_bReturnRawString_4;
    bBuildStlDeviceId_3 := actual_bBuildStlDeviceId_3;
    assume {:nonnull} idSizeBuffer_1 != 0;
    assume idSizeBuffer_1 > 0;
    call {:si_unique_call 2311} boogieTmp := __HAVOC_malloc(8);
    assume {:nonnull} Pdx_42 != 0;
    assume Pdx_42 > 0;
    havoc Controller_20;
    assume {:nonnull} bytesRead_2 != 0;
    assume bytesRead_2 > 0;
    Mem_T.INT4[bytesRead_2] := 0;
    allocatedBuffer := 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} 1 == bBuildStlDeviceId_3;
    call {:si_unique_call 2312} Tmp_1649 := ParStlQueryStlDeviceId(Pdx_42, CallerDeviceIdBuffer_2, CallerBufferSize_2, DeviceIdSize_6, bReturnRawString_4);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} 1 != bBuildStlDeviceId_3;
    assume {:nonnull} Pdx_42 != 0;
    assume Pdx_42 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    call {:si_unique_call 2313} Tmp_1649 := Par3QueryLegacyZipDeviceId(Pdx_42, CallerDeviceIdBuffer_2, CallerBufferSize_2, DeviceIdSize_6, bReturnRawString_4);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    call {:si_unique_call 2314} sdv_1100 := sdv_KeGetCurrentIrql();
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_1100 == 0;
    assume {:nonnull} delay_2 != 0;
    assume delay_2 > 0;
    call {:si_unique_call 2315} vslice_dummy_var_460 := KeDelayExecutionThread(0, 0, 0);
    goto L31;

  L31:
    assume {:nonnull} DeviceIdSize_6 != 0;
    assume DeviceIdSize_6 > 0;
    Mem_T.INT4[DeviceIdSize_6] := 0;
    call {:si_unique_call 2316} ParTerminate(Pdx_42);
    call {:si_unique_call 2317} Status_27 := ParEnterNibbleMode(Pdx_42, 1);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Status_27 >= 0;
    bytesToRead_2 := 2;
    call {:si_unique_call 2318} Status_27 := ParNibbleModeRead(Pdx_42, idSizeBuffer_1, bytesToRead_2, bytesRead_2);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Status_27 >= 0;
    assume {:nonnull} bytesRead_2 != 0;
    assume bytesRead_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Mem_T.INT4[bytesRead_2] == bytesToRead_2;
    assume {:nonnull} idSizeBuffer_1 != 0;
    assume idSizeBuffer_1 > 0;
    havoc deviceIdSize_2;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} bReturnRawString_4 != 0;
    assume {:nonnull} DeviceIdSize_6 != 0;
    assume DeviceIdSize_6 > 0;
    Mem_T.INT4[DeviceIdSize_6] := deviceIdSize_2;
    deviceIdBufferSize_1 := deviceIdSize_2 + 1;
    goto L56;

  L56:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} CallerDeviceIdBuffer_2 != 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} CallerBufferSize_2 >= deviceIdBufferSize_1 + 1;
    deviceIdBuffer_2 := CallerDeviceIdBuffer_2;
    goto L60;

  L60:
    Tmp_1653 := deviceIdBufferSize_1 + 1;
    call {:si_unique_call 2319} sdv_RtlZeroMemory(0, Tmp_1653);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} bReturnRawString_4 != 0;
    assume {:nonnull} deviceIdBuffer_2 != 0;
    assume deviceIdBuffer_2 > 0;
    assume {:nonnull} idSizeBuffer_1 != 0;
    assume idSizeBuffer_1 > 0;
    havoc vslice_dummy_var_227;
    Mem_T.INT4[deviceIdBuffer_2] := vslice_dummy_var_227;
    assume {:nonnull} deviceIdBuffer_2 != 0;
    assume deviceIdBuffer_2 > 0;
    assume {:nonnull} idSizeBuffer_1 != 0;
    assume idSizeBuffer_1 > 0;
    havoc vslice_dummy_var_228;
    Mem_T.INT4[deviceIdBuffer_2] := vslice_dummy_var_228;
    readPtr_1 := deviceIdBuffer_2;
    goto L69;

  L69:
    bytesToRead_2 := deviceIdSize_2 - 2;
    call {:si_unique_call 2320} Status_27 := ParNibbleModeRead(Pdx_42, readPtr_1, bytesToRead_2, bytesRead_2);
    call {:si_unique_call 2321} ParTerminateNibbleMode(Pdx_42);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Status_27 >= 0;
    assume {:nonnull} bytesRead_2 != 0;
    assume bytesRead_2 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} 1 <= Mem_T.INT4[bytesRead_2];
    Tmp_1649 := deviceIdBuffer_2;
    goto L1;

  anon45_Then:
    assume {:partition} Mem_T.INT4[bytesRead_2] < 1;
    goto L82;

  L82:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} allocatedBuffer != 0;
    call {:si_unique_call 2322} sdv_ExFreePool(0);
    goto L86;

  L86:
    Tmp_1649 := 0;
    goto L1;

  anon44_Then:
    assume {:partition} allocatedBuffer == 0;
    goto L86;

  anon43_Then:
    assume {:partition} 0 > Status_27;
    goto L82;

  anon42_Then:
    assume {:partition} bReturnRawString_4 == 0;
    readPtr_1 := deviceIdBuffer_2;
    goto L69;

  anon41_Then:
    assume {:partition} deviceIdBufferSize_1 + 1 > CallerBufferSize_2;
    goto L57;

  L57:
    Tmp_1651 := deviceIdBufferSize_1 + 1;
    call {:si_unique_call 2323} sdv_1104 := ExAllocatePoolWithTag(1, Tmp_1651, -797810352);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    deviceIdBuffer_2 := sdv_1104;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} deviceIdBuffer_2 != 0;
    allocatedBuffer := 1;
    goto L60;

  anon51_Then:
    assume {:partition} deviceIdBuffer_2 == 0;
    Tmp_1649 := 0;
    goto L1;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} CallerDeviceIdBuffer_2 == 0;
    goto L57;

  anon49_Then:
    assume {:partition} bReturnRawString_4 == 0;
    assume {:nonnull} DeviceIdSize_6 != 0;
    assume DeviceIdSize_6 > 0;
    Mem_T.INT4[DeviceIdSize_6] := deviceIdSize_2 - 2;
    deviceIdBufferSize_1 := deviceIdSize_2 - 2 + 1;
    goto L56;

  anon39_Then:
    assume {:partition} Mem_T.INT4[bytesRead_2] != bytesToRead_2;
    goto L49;

  L49:
    Tmp_1649 := 0;
    goto L1;

  anon38_Then:
    assume {:partition} 0 > Status_27;
    goto L49;

  anon37_Then:
    assume {:partition} 0 > Status_27;
    call {:si_unique_call 2324} ParTerminateNibbleMode(Pdx_42);
    Tmp_1649 := 0;
    goto L1;

  anon36_Then:
    assume {:partition} sdv_1100 != 0;
    goto L31;
}



procedure {:origName "ParInitializeDevice"} ParInitializeDevice(actual_Pdx_43: int) returns (Tmp_1654: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParInitializeDevice"} ParInitializeDevice(actual_Pdx_43: int) returns (Tmp_1654: int)
{
  var {:scalar} DeviceStatus_3: int;
  var {:pointer} Tmp_1656: int;
  var {:pointer} s_p_e_c_i_a_l_5: int;
  var {:pointer} Tmp_1657: int;
  var {:scalar} sdv_1105: int;
  var {:scalar} StartOfSpin_1: int;
  var {:scalar} Difference_1: int;
  var {:pointer} s_p_e_c_i_a_l_6: int;
  var {:scalar} sdv_1107: int;
  var {:scalar} Delay_12: int;
  var {:scalar} NextQuery_1: int;
  var {:pointer} Pdx_43: int;
  var vslice_dummy_var_461: int;

  anon0:
    call {:si_unique_call 2325} StartOfSpin_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2326} Difference_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2327} Delay_12 := __HAVOC_malloc(20);
    call {:si_unique_call 2328} NextQuery_1 := __HAVOC_malloc(20);
    Pdx_43 := actual_Pdx_43;
    DeviceStatus_3 := 0;
    assume {:nonnull} Pdx_43 != 0;
    assume Pdx_43 > 0;
    call {:si_unique_call 2329} sdv_1105 := corral_nondet();
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(sdv_1105, 4) != 0;
    assume {:nonnull} Pdx_43 != 0;
    assume Pdx_43 > 0;
    assume {:nonnull} Delay_12 != 0;
    assume Delay_12 > 0;
    call {:si_unique_call 2330} vslice_dummy_var_461 := KeDelayExecutionThread(0, 0, 0);
    goto L17;

  L17:
    assume {:nonnull} Pdx_43 != 0;
    assume Pdx_43 > 0;
    Tmp_1656 := KeTickCount;
    assume {:nonnull} Tmp_1656 != 0;
    assume Tmp_1656 > 0;
    havoc s_p_e_c_i_a_l_5;
    goto L32;

  L32:
    call {:si_unique_call 2331} ParInitializeDevice_loop_L32(s_p_e_c_i_a_l_5, StartOfSpin_1);
    goto L32_last;

  L32_last:
    assume {:nonnull} StartOfSpin_1 != 0;
    assume StartOfSpin_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} StartOfSpin_1 != 0;
    assume StartOfSpin_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} StartOfSpin_1 != 0;
    assume StartOfSpin_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L40;

  L40:
    call {:si_unique_call 2332} DeviceStatus_3, Tmp_1657, s_p_e_c_i_a_l_6, sdv_1107 := ParInitializeDevice_loop_L40(DeviceStatus_3, Tmp_1657, StartOfSpin_1, Difference_1, s_p_e_c_i_a_l_6, sdv_1107, NextQuery_1, Pdx_43);
    goto L40_last;

  L40_last:
    Tmp_1657 := KeTickCount;
    assume {:nonnull} Tmp_1657 != 0;
    assume Tmp_1657 > 0;
    havoc s_p_e_c_i_a_l_6;
    goto L42;

  L42:
    call {:si_unique_call 2333} ParInitializeDevice_loop_L42(s_p_e_c_i_a_l_6, NextQuery_1);
    goto L42_last;

  L42_last:
    assume {:nonnull} NextQuery_1 != 0;
    assume NextQuery_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_6 != 0;
    assume s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} NextQuery_1 != 0;
    assume NextQuery_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_6 != 0;
    assume s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} NextQuery_1 != 0;
    assume NextQuery_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_6 != 0;
    assume s_p_e_c_i_a_l_6 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Difference_1 != 0;
    assume Difference_1 > 0;
    assume {:nonnull} NextQuery_1 != 0;
    assume NextQuery_1 > 0;
    assume {:nonnull} StartOfSpin_1 != 0;
    assume StartOfSpin_1 > 0;
    call {:si_unique_call 2334} sdv_1107 := corral_nondet();
    assume {:nonnull} Difference_1 != 0;
    assume Difference_1 > 0;
    assume {:nonnull} Pdx_43 != 0;
    assume Pdx_43 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L58;

  L58:
    Tmp_1654 := DeviceStatus_3;
    return;

  anon16_Then:
    assume {:nonnull} Pdx_43 != 0;
    assume Pdx_43 > 0;
    call {:si_unique_call 2335} DeviceStatus_3 := corral_nondet();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(DeviceStatus_3, 8) != 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(DeviceStatus_3, 128) != 0;
    goto L58;

  anon18_Then:
    assume {:partition} BAND(DeviceStatus_3, 128) == 0;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    assume false;
    return;

  anon21_Then:
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} BAND(DeviceStatus_3, 8) == 0;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon20_Then:
    goto anon20_Then_dummy;

  anon20_Then_dummy:
    assume false;
    return;

  anon19_Then:
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} BAND(sdv_1105, 4) == 0;
    goto L17;
}



procedure {:origName "InsertHeadList"} InsertHeadList(actual_ListHead_1: int, actual_Entry_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InsertHeadList"} InsertHeadList(actual_ListHead_1: int, actual_Entry_2: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} ListHead_1: int;
  var {:pointer} Entry_2: int;
  var vslice_dummy_var_462: int;
  var vslice_dummy_var_229: int;

  anon0:
    call {:si_unique_call 2336} vslice_dummy_var_462 := __HAVOC_malloc(4);
    ListHead_1 := actual_ListHead_1;
    Entry_2 := actual_Entry_2;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    havoc NextEntry;
    assume {:nonnull} Entry_2 != 0;
    assume Entry_2 > 0;
    assume {:nonnull} Entry_2 != 0;
    assume Entry_2 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    havoc vslice_dummy_var_229;
    call {:si_unique_call 2337} FatalListEntryError(ListHead_1, NextEntry, vslice_dummy_var_229);
    goto L8;

  L8:
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    return;

  anon3_Then:
    goto L8;
}



procedure {:origName "PptInitializeDeviceExtension"} PptInitializeDeviceExtension(actual_DriverObject_6: int, actual_PhysicalDeviceObject_1: int, actual_DeviceObject_27: int, actual_UniNameString: int, actual_PortName_1: int, actual_PortNumber_1: int) returns (Tmp_1665: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptInitializeDeviceExtension"} PptInitializeDeviceExtension(actual_DriverObject_6: int, actual_PhysicalDeviceObject_1: int, actual_DeviceObject_27: int, actual_UniNameString: int, actual_PortName_1: int, actual_PortNumber_1: int) returns (Tmp_1665: int)
{
  var {:scalar} bufLen_7: int;
  var {:pointer} sdv_1109: int;
  var {:pointer} buffer_11: int;
  var {:pointer} sdv_1111: int;
  var {:pointer} Fdx_11: int;
  var {:scalar} bufferLength_1: int;
  var {:pointer} DriverObject_6: int;
  var {:pointer} PhysicalDeviceObject_1: int;
  var {:pointer} DeviceObject_27: int;
  var {:pointer} UniNameString: int;
  var {:pointer} PortName_1: int;
  var {:scalar} PortNumber_1: int;
  var vslice_dummy_var_463: int;
  var vslice_dummy_var_464: int;

  anon0:
    DriverObject_6 := actual_DriverObject_6;
    PhysicalDeviceObject_1 := actual_PhysicalDeviceObject_1;
    DeviceObject_27 := actual_DeviceObject_27;
    UniNameString := actual_UniNameString;
    PortName_1 := actual_PortName_1;
    PortNumber_1 := actual_PortNumber_1;
    call {:si_unique_call 2338} vslice_dummy_var_463 := __HAVOC_malloc(24);
    assume {:nonnull} DeviceObject_27 != 0;
    assume DeviceObject_27 > 0;
    havoc Fdx_11;
    call {:si_unique_call 2339} sdv_RtlZeroMemory(0, 536);
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    call {:si_unique_call 2340} sdv_IoInitializeRemoveLock(0, -797810352, 1, 10);
    call {:si_unique_call 2341} sdv_ExInitializeFastMutex(0);
    call {:si_unique_call 2342} sdv_ExInitializeFastMutex(0);
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    call {:si_unique_call 2343} InitializeListHead(DevDeletionListHead__FDO_EXTENSION(Fdx_11));
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    call {:si_unique_call 2344} InitializeListHead(WorkQueue__FDO_EXTENSION(Fdx_11));
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    Mem_T.INT4[WorkQueueCount__FDO_EXTENSION(Fdx_11)] := -1;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    bufLen_7 := 6;
    call {:si_unique_call 2345} sdv_1109 := ExAllocatePoolWithTag(512, bufLen_7, -797810352);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    buffer_11 := sdv_1109;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} buffer_11 != 0;
    call {:si_unique_call 2346} sdv_RtlZeroMemory(0, bufLen_7);
    call {:si_unique_call 2347} vslice_dummy_var_464 := corral_nondet();
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    goto L52;

  L52:
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    call {:si_unique_call 2348} InitializeListHead(IsrList__FDO_EXTENSION(Fdx_11));
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    call {:si_unique_call 2349} KeInitializeDpc(FreePortDpc__FDO_EXTENSION(Fdx_11), li2bplFunctionConstant198, 0);
    assume {:nonnull} UniNameString != 0;
    assume UniNameString > 0;
    havoc bufferLength_1;
    call {:si_unique_call 2350} sdv_1111 := ExAllocatePoolWithTag(512, bufferLength_1, -797810352);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 2351} sdv_RtlZeroMemory(0, bufferLength_1);
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} UniNameString != 0;
    assume UniNameString > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    assume {:nonnull} Fdx_11 != 0;
    assume Fdx_11 > 0;
    Tmp_1665 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    Tmp_1665 := -1073741670;
    goto L1;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} buffer_11 == 0;
    goto L52;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ParDot3ParseDevId"} ParDot3ParseDevId(actual_lpp: int, actual_lpp_1: int, actual_lpp_2: int, actual_lpp_3: int, actual_lpp_4: int, actual_lpDeviceID_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDot3ParseDevId"} ParDot3ParseDevId(actual_lpp: int, actual_lpp_1: int, actual_lpp_2: int, actual_lpp_3: int, actual_lpp_4: int, actual_lpDeviceID_1: int)
{
  var {:scalar} Tmp_1669: int;
  var {:scalar} sdv_1114: int;
  var {:scalar} Tmp_1673: int;
  var {:scalar} Tmp_1674: int;
  var {:scalar} Tmp_1675: int;
  var {:pointer} lpKey_2: int;
  var {:scalar} sdv_1116: int;
  var {:scalar} Tmp_1676: int;
  var {:scalar} sdv_1119: int;
  var {:scalar} Tmp_1680: int;
  var {:scalar} sdv_1122: int;
  var {:scalar} sdv_1124: int;
  var {:scalar} sdv_1125: int;
  var {:scalar} Tmp_1683: int;
  var {:scalar} sdv_1129: int;
  var {:pointer} lpValue_1: int;
  var {:scalar} Tmp_1685: int;
  var {:scalar} sdv_1130: int;
  var {:scalar} wKeyLength_1: int;
  var {:pointer} lpp: int;
  var {:pointer} lpp_1: int;
  var {:pointer} lpp_2: int;
  var {:pointer} lpp_3: int;
  var {:pointer} lpp_4: int;
  var {:pointer} lpDeviceID_1: int;
  var vslice_dummy_var_465: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_467: int;
  var vslice_dummy_var_468: int;
  var vslice_dummy_var_469: int;
  var vslice_dummy_var_470: int;
  var vslice_dummy_var_471: int;
  var vslice_dummy_var_472: int;
  var vslice_dummy_var_473: int;

  anon0:
    call {:si_unique_call 2352} vslice_dummy_var_465 := __HAVOC_malloc(4);
    lpp := actual_lpp;
    lpp_1 := actual_lpp_1;
    lpp_2 := actual_lpp_2;
    lpp_3 := actual_lpp_3;
    lpp_4 := actual_lpp_4;
    lpDeviceID_1 := actual_lpDeviceID_1;
    call {:si_unique_call 2353} vslice_dummy_var_466 := __HAVOC_malloc(36);
    call {:si_unique_call 2354} vslice_dummy_var_467 := __HAVOC_malloc(20);
    call {:si_unique_call 2355} vslice_dummy_var_468 := __HAVOC_malloc(20);
    call {:si_unique_call 2356} vslice_dummy_var_469 := __HAVOC_malloc(20);
    call {:si_unique_call 2357} vslice_dummy_var_470 := __HAVOC_malloc(40);
    call {:si_unique_call 2358} vslice_dummy_var_471 := __HAVOC_malloc(36);
    call {:si_unique_call 2359} vslice_dummy_var_472 := __HAVOC_malloc(40);
    call {:si_unique_call 2360} vslice_dummy_var_473 := __HAVOC_malloc(52);
    lpKey_2 := lpDeviceID_1;
    goto L7;

  L7:
    call {:si_unique_call 2361} Tmp_1669, sdv_1114, Tmp_1673, Tmp_1674, Tmp_1675, lpKey_2, sdv_1116, Tmp_1676, sdv_1119, Tmp_1680, sdv_1122, sdv_1124, sdv_1125, Tmp_1683, sdv_1129, lpValue_1, Tmp_1685, sdv_1130, wKeyLength_1 := ParDot3ParseDevId_loop_L7(Tmp_1669, sdv_1114, Tmp_1673, Tmp_1674, Tmp_1675, lpKey_2, sdv_1116, Tmp_1676, sdv_1119, Tmp_1680, sdv_1122, sdv_1124, sdv_1125, Tmp_1683, sdv_1129, lpValue_1, Tmp_1685, sdv_1130, wKeyLength_1, lpp, lpp_1, lpp_2, lpp_3, lpp_4);
    goto L7_last;

  L7_last:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} lpKey_2 != 0;
    goto L8;

  L8:
    call {:si_unique_call 2362} ParDot3ParseDevId_loop_L8(lpKey_2);
    goto L8_last;

  L8_last:
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] == 32;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    assume false;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] != 32;
    call {:si_unique_call 2363} lpValue_1 := StringChr(lpKey_2, 58);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} lpValue_1 != 0;
    wKeyLength_1 := lpValue_1;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] != 46;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] != 49;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.INT4[lpKey_2] == 67;
    Tmp_1680 := wKeyLength_1;
    call {:si_unique_call 2364} sdv_1124 := RtlCompareMemory(0, 0, Tmp_1680);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_1124 == 4;
    goto L30;

  L30:
    assume {:nonnull} lpp_2 != 0;
    assume lpp_2 > 0;
    call {:si_unique_call 2365} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon55_Else_dummy;

  anon55_Else_dummy:
    assume false;
    return;

  anon55_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} sdv_1124 != 4;
    Tmp_1683 := wKeyLength_1;
    call {:si_unique_call 2366} sdv_1125 := RtlCompareMemory(0, 0, Tmp_1683);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_1125 != 12;
    call {:si_unique_call 2367} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon57_Else_dummy;

  anon57_Else_dummy:
    assume false;
    return;

  anon57_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon57_Then_dummy;

  anon57_Then_dummy:
    assume false;
    return;

  anon56_Then:
    assume {:partition} sdv_1125 == 12;
    goto L30;

  anon73_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] != 67;
    call {:si_unique_call 2368} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon72_Else_dummy;

  anon72_Else_dummy:
    assume false;
    return;

  anon72_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon72_Then_dummy;

  anon72_Then_dummy:
    assume false;
    return;

  anon74_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] == 49;
    Tmp_1676 := wKeyLength_1;
    call {:si_unique_call 2369} sdv_1129 := RtlCompareMemory(0, 0, Tmp_1676);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_1129 == 9;
    assume {:nonnull} lpp_3 != 0;
    assume lpp_3 > 0;
    call {:si_unique_call 2370} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon59_Else_dummy;

  anon59_Else_dummy:
    assume false;
    return;

  anon59_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    assume false;
    return;

  anon58_Then:
    assume {:partition} sdv_1129 != 9;
    Tmp_1669 := wKeyLength_1;
    call {:si_unique_call 2371} sdv_1119 := RtlCompareMemory(0, 0, Tmp_1669);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_1119 == 9;
    assume {:nonnull} lpp != 0;
    assume lpp > 0;
    call {:si_unique_call 2372} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    assume false;
    return;

  anon61_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon60_Then:
    assume {:partition} sdv_1119 != 9;
    Tmp_1685 := wKeyLength_1;
    call {:si_unique_call 2373} sdv_1122 := RtlCompareMemory(0, 0, Tmp_1685);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_1122 == 8;
    assume {:nonnull} lpp_1 != 0;
    assume lpp_1 > 0;
    call {:si_unique_call 2374} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    assume false;
    return;

  anon63_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} sdv_1122 != 8;
    Tmp_1675 := wKeyLength_1;
    call {:si_unique_call 2375} sdv_1114 := RtlCompareMemory(0, 0, Tmp_1675);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_1114 == 8;
    assume {:nonnull} lpp_4 != 0;
    assume lpp_4 > 0;
    call {:si_unique_call 2376} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    assume false;
    return;

  anon65_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    assume false;
    return;

  anon64_Then:
    assume {:partition} sdv_1114 != 8;
    call {:si_unique_call 2377} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    assume false;
    return;

  anon66_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} Mem_T.INT4[lpKey_2] == 46;
    Tmp_1673 := wKeyLength_1;
    call {:si_unique_call 2378} sdv_1130 := RtlCompareMemory(0, 0, Tmp_1673);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} sdv_1130 == 4;
    assume {:nonnull} lpp_1 != 0;
    assume lpp_1 > 0;
    call {:si_unique_call 2379} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon68_Else_dummy;

  anon68_Else_dummy:
    assume false;
    return;

  anon68_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon68_Then_dummy;

  anon68_Then_dummy:
    assume false;
    return;

  anon67_Then:
    assume {:partition} sdv_1130 != 4;
    Tmp_1674 := wKeyLength_1;
    call {:si_unique_call 2380} sdv_1116 := RtlCompareMemory(0, 0, Tmp_1674);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} sdv_1116 == 4;
    assume {:nonnull} lpp_4 != 0;
    assume lpp_4 > 0;
    call {:si_unique_call 2381} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon70_Then_dummy;

  anon70_Then_dummy:
    assume false;
    return;

  anon69_Then:
    assume {:partition} sdv_1116 != 4;
    call {:si_unique_call 2382} lpKey_2 := StringChr(lpValue_1, 59);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} lpKey_2 != 0;
    assume {:nonnull} lpKey_2 != 0;
    assume lpKey_2 > 0;
    Mem_T.INT4[lpKey_2] := 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    assume false;
    return;

  anon71_Then:
    assume {:partition} lpKey_2 == 0;
    goto anon71_Then_dummy;

  anon71_Then_dummy:
    assume false;
    return;

  anon53_Then:
    assume {:partition} lpValue_1 == 0;
    goto L1;

  L1:
    return;

  anon51_Then:
    assume {:partition} lpKey_2 == 0;
    goto L1;
}



procedure {:origName "PptCancelRoutine"} PptCancelRoutine(actual_DeviceObject_28: int, actual_Irp_66: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptCancelRoutine"} PptCancelRoutine(actual_DeviceObject_28: int, actual_Irp_66: int)
{
  var {:pointer} Fdx_12: int;
  var {:scalar} SyncContext_7: int;
  var {:pointer} DeviceObject_28: int;
  var {:pointer} Irp_66: int;
  var vslice_dummy_var_474: int;
  var vslice_dummy_var_475: int;
  var vslice_dummy_var_476: int;
  var vslice_dummy_var_477: int;
  var vslice_dummy_var_478: int;
  var vslice_dummy_var_479: int;

  anon0:
    call {:si_unique_call 2383} vslice_dummy_var_474 := __HAVOC_malloc(4);
    call {:si_unique_call 2384} SyncContext_7 := __HAVOC_malloc(8);
    DeviceObject_28 := actual_DeviceObject_28;
    Irp_66 := actual_Irp_66;
    assume {:nonnull} DeviceObject_28 != 0;
    assume DeviceObject_28 > 0;
    havoc Fdx_12;
    assume {:nonnull} Fdx_12 != 0;
    assume Fdx_12 > 0;
    assume {:nonnull} SyncContext_7 != 0;
    assume SyncContext_7 > 0;
    assume {:nonnull} Fdx_12 != 0;
    assume Fdx_12 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2385} vslice_dummy_var_476 := KeSynchronizeExecution(0, li2bplFunctionConstant193, 0);
    goto L14;

  L14:
    call {:si_unique_call 2386} vslice_dummy_var_477 := sdv_RemoveEntryList(0);
    assume {:nonnull} Irp_66 != 0;
    assume Irp_66 > 0;
    call {:si_unique_call 2387} IoReleaseCancelSpinLock(Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_66)]);
    assume {:nonnull} Fdx_12 != 0;
    assume Fdx_12 > 0;
    call {:si_unique_call 2388} vslice_dummy_var_478 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(Fdx_12), Irp_66);
    call {:si_unique_call 2389} vslice_dummy_var_479 := P4CompleteRequest(Irp_66, -1073741536, 0);
    return;

  anon3_Then:
    call {:si_unique_call 2390} vslice_dummy_var_475 := PptSynchronizedDecrement(SyncContext_7);
    goto L14;
}



procedure {:origName "PptBuildFdo"} PptBuildFdo(actual_DriverObject_7: int, actual_PhysicalDeviceObject_2: int) returns (Tmp_1688: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptBuildFdo"} PptBuildFdo(actual_DriverObject_7: int, actual_PhysicalDeviceObject_2: int) returns (Tmp_1688: int)
{
  var {:dopa} {:scalar} portNumber: int;
  var {:pointer} deviceObject: int;
  var {:pointer} portName: int;
  var {:scalar} uniNameString: int;
  var {:scalar} status_54: int;
  var {:pointer} DriverObject_7: int;
  var {:pointer} PhysicalDeviceObject_2: int;
  var vslice_dummy_var_230: int;

  anon0:
    call {:si_unique_call 2391} portNumber := __HAVOC_malloc(4);
    call {:si_unique_call 2392} deviceObject := __HAVOC_malloc(4);
    call {:si_unique_call 2393} uniNameString := __HAVOC_malloc(12);
    DriverObject_7 := actual_DriverObject_7;
    PhysicalDeviceObject_2 := actual_PhysicalDeviceObject_2;
    assume {:nonnull} uniNameString != 0;
    assume uniNameString > 0;
    assume {:nonnull} uniNameString != 0;
    assume uniNameString > 0;
    assume {:nonnull} uniNameString != 0;
    assume uniNameString > 0;
    assume {:nonnull} portNumber != 0;
    assume portNumber > 0;
    Mem_T.INT4[portNumber] := 0;
    portName := 0;
    status_54 := 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    call {:si_unique_call 2394} portName := PptGetPortNameFromPhysicalDeviceObject(PhysicalDeviceObject_2);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} portName == 0;
    goto L63;

  L63:
    call {:si_unique_call 2395} RtlFreeUnicodeString(0);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    havoc Tmp_1688;
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} portName != 0;
    call {:si_unique_call 2396} status_54 := PptGetPortNumberFromLptName(portName, portNumber);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_54 >= 0;
    assume {:nonnull} portNumber != 0;
    assume portNumber > 0;
    Mem_T.INT4[portNumber] := Mem_T.INT4[portNumber] - 1;
    assume {:nonnull} portNumber != 0;
    assume portNumber > 0;
    call {:si_unique_call 2397} status_54 := PptBuildParallelPortDeviceName(Mem_T.INT4[portNumber], uniNameString);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} yogi_error != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_54 >= 0;
    call {:si_unique_call 2398} status_54 := IoCreateDevice(0, 536, 0, 22, 256, 0, deviceObject);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} -1073741771 == status_54;
    assume {:nonnull} portNumber != 0;
    assume portNumber > 0;
    Mem_T.INT4[portNumber] := 7;
    goto L45;

  L45:
    call {:si_unique_call 2399} status_54 := PptBuildFdo_loop_L45(portNumber, deviceObject, uniNameString, status_54);
    goto L45_last;

  L45_last:
    call {:si_unique_call 2408} RtlFreeUnicodeString(0);
    assume {:nonnull} portNumber != 0;
    assume portNumber > 0;
    Mem_T.INT4[portNumber] := Mem_T.INT4[portNumber] + 1;
    assume {:nonnull} portNumber != 0;
    assume portNumber > 0;
    call {:si_unique_call 2409} status_54 := PptBuildParallelPortDeviceName(Mem_T.INT4[portNumber], uniNameString);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} status_54 >= 0;
    call {:si_unique_call 2400} status_54 := IoCreateDevice(0, 536, 0, 22, 256, 0, deviceObject);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} -1073741771 == status_54;
    goto anon33_Else_dummy;

  anon33_Else_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} -1073741771 != status_54;
    goto L43;

  L43:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} status_54 >= 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} portNumber != 0;
    assume portNumber > 0;
    havoc vslice_dummy_var_230;
    call {:si_unique_call 2401} status_54 := PptInitializeDeviceExtension(DriverObject_7, PhysicalDeviceObject_2, vslice_dummy_var_230, uniNameString, portName, Mem_T.INT4[portNumber]);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} status_54 >= 0;
    assume {:nonnull} PhysicalDeviceObject_2 != 0;
    assume PhysicalDeviceObject_2 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto L63;

  anon35_Then:
    goto L63;

  anon34_Then:
    assume {:partition} 0 > status_54;
    call {:si_unique_call 2402} IoDeleteDevice(0);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    call {:si_unique_call 2403} sdv_ExFreePool(0);
    goto L63;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} 0 > status_54;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    call {:si_unique_call 2404} sdv_ExFreePool(0);
    goto L63;

  anon32_Then:
    assume {:partition} 0 > status_54;
    call {:si_unique_call 2405} sdv_ExFreePool(0);
    goto L63;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} -1073741771 != status_54;
    goto L43;

  anon29_Then:
    assume {:partition} 0 > status_54;
    call {:si_unique_call 2406} sdv_ExFreePool(0);
    goto L63;

  anon37_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:partition} 0 > status_54;
    call {:si_unique_call 2407} sdv_ExFreePool(0);
    goto L63;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PptConnectInterrupt"} PptConnectInterrupt(actual_Fdx_13: int) returns (Tmp_1690: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1690 == -1073741811 || Tmp_1690 == -1073741670 || Tmp_1690 == 0 || Tmp_1690 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptConnectInterrupt"} PptConnectInterrupt(actual_Fdx_13: int) returns (Tmp_1690: int)
{
  var {:scalar} Status_28: int;
  var {:scalar} Tmp_1692: int;
  var {:pointer} Tmp_1693: int;
  var {:pointer} Fdx_13: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;

  anon0:
    call {:si_unique_call 2410} Tmp_1692 := __HAVOC_malloc(20);
    Fdx_13 := actual_Fdx_13;
    Status_28 := 0;
    assume {:nonnull} Fdx_13 != 0;
    assume Fdx_13 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Fdx_13 != 0;
    assume Fdx_13 > 0;
    havoc vslice_dummy_var_231;
    havoc vslice_dummy_var_232;
    havoc vslice_dummy_var_233;
    havoc vslice_dummy_var_234;
    havoc vslice_dummy_var_235;
    call {:si_unique_call 2411} Status_28 := IoConnectInterrupt(0, li2bplFunctionConstant190, Fdx_13, 0, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, 1, vslice_dummy_var_235, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Status_28 >= 0;
    goto L13;

  L13:
    Tmp_1690 := Status_28;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} 0 > Status_28;
    assume {:nonnull} Tmp_1692 != 0;
    assume Tmp_1692 > 0;
    assume {:nonnull} Tmp_1692 != 0;
    assume Tmp_1692 > 0;
    assume {:nonnull} Tmp_1692 != 0;
    assume Tmp_1692 > 0;
    assume {:nonnull} Tmp_1692 != 0;
    assume Tmp_1692 > 0;
    assume {:nonnull} Tmp_1692 != 0;
    assume Tmp_1692 > 0;
    assume {:nonnull} Fdx_13 != 0;
    assume Fdx_13 > 0;
    havoc Tmp_1693;
    assume {:nonnull} Fdx_13 != 0;
    assume Fdx_13 > 0;
    assume {:nonnull} Tmp_1693 != 0;
    assume Tmp_1693 > 0;
    havoc vslice_dummy_var_236;
    havoc vslice_dummy_var_237;
    havoc vslice_dummy_var_238;
    call {:si_unique_call 2412} PptLogError(vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, Tmp_1692, 0, 0, 0, 14, Status_28, 458772);
    goto L13;

  anon6_Then:
    Tmp_1690 := -1073741637;
    goto L1;
}



procedure {:origName "ParSynchCompletionRoutine"} ParSynchCompletionRoutine(actual_DeviceObject_29: int, actual_Irp_67: int, actual_Event_5: int) returns (Tmp_1694: int);
  free ensures {:va_keep} Tmp_1694 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParSynchCompletionRoutine"} ParSynchCompletionRoutine(actual_DeviceObject_29: int, actual_Irp_67: int, actual_Event_5: int) returns (Tmp_1694: int)
{
  var {:pointer} Event_5: int;
  var vslice_dummy_var_480: int;

  anon0:
    Event_5 := actual_Event_5;
    call {:si_unique_call 2413} vslice_dummy_var_480 := KeSetEvent(Event_5, 0, 0);
    Tmp_1694 := -1073741802;
    return;
}



procedure {:origName "String2Num"} String2Num(actual_lpp_5: int, actual_c: int, actual_num: int) returns (Tmp_1696: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1696 == 0 || Tmp_1696 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "String2Num"} String2Num(actual_lpp_5: int, actual_c: int, actual_num: int) returns (Tmp_1696: int)
{
  var {:scalar} cnt_1: int;
  var {:pointer} Tmp_1697: int;
  var {:scalar} Tmp_1699: int;
  var {:scalar} cc: int;
  var {:pointer} lpp_5: int;
  var {:scalar} c: int;
  var {:pointer} num: int;

  anon0:
    lpp_5 := actual_lpp_5;
    c := actual_c;
    num := actual_num;
    cnt_1 := 0;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto L9;

  L9:
    call {:si_unique_call 2414} cnt_1, Tmp_1697, Tmp_1699, cc := String2Num_loop_L9(cnt_1, Tmp_1697, Tmp_1699, cc, lpp_5, num);
    goto L9_last;

  L9_last:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    havoc Tmp_1697;
    assume {:nonnull} Tmp_1697 != 0;
    assume Tmp_1697 > 0;
    cc := Mem_T.INT4[Tmp_1697];
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} cc >= 48;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 57 >= cc;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 16 * Mem_T.INT4[num] + cc - 48;
    goto L14;

  L14:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    Tmp_1699 := cnt_1;
    cnt_1 := cnt_1 + 1;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_1699 > 100;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    Tmp_1696 := 0;
    goto L1;

  L1:
    return;

  anon36_Then:
    assume {:partition} 100 >= Tmp_1699;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    assume false;
    return;

  anon26_Then:
    assume {:partition} cc > 57;
    goto L11;

  L11:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} cc >= 65;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 70 >= cc;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 16 * Mem_T.INT4[num] + cc - 55;
    goto L14;

  anon28_Then:
    assume {:partition} cc > 70;
    goto L20;

  L20:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} cc >= 97;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} 102 >= cc;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 16 * Mem_T.INT4[num] + cc - 87;
    goto L14;

  anon30_Then:
    assume {:partition} cc > 102;
    goto L23;

  L23:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} cc == c;
    goto L27;

  L27:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    Tmp_1696 := 1;
    goto L1;

  anon29_Then:
    assume {:partition} cc != c;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} cc != 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} cc == 121;
    goto L31;

  L31:
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := -1;
    Tmp_1696 := 0;
    goto L1;

  anon32_Then:
    assume {:partition} cc != 121;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} cc != 89;
    assume {:nonnull} lpp_5 != 0;
    assume lpp_5 > 0;
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    Tmp_1696 := 0;
    goto L1;

  anon33_Then:
    assume {:partition} cc == 89;
    goto L31;

  anon31_Then:
    assume {:partition} cc == 0;
    goto L27;

  anon27_Then:
    assume {:partition} 97 > cc;
    goto L23;

  anon25_Then:
    assume {:partition} 65 > cc;
    goto L20;

  anon35_Then:
    assume {:partition} 48 > cc;
    goto L11;

  anon34_Then:
    assume {:nonnull} num != 0;
    assume num > 0;
    Mem_T.INT4[num] := 0;
    Tmp_1696 := 0;
    goto L1;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_2: int)
{
  var {:pointer} ListHead_2: int;
  var vslice_dummy_var_481: int;

  anon0:
    call {:si_unique_call 2415} vslice_dummy_var_481 := __HAVOC_malloc(4);
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    return;
}



procedure {:origName "P4ReadRawIeee1284DeviceId"} P4ReadRawIeee1284DeviceId(actual_Controller_21: int) returns (Tmp_1702: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4ReadRawIeee1284DeviceId"} P4ReadRawIeee1284DeviceId(actual_Controller_21: int) returns (Tmp_1702: int)
{
  var {:scalar} Tmp_1703: int;
  var {:pointer} Tmp_1704: int;
  var {:scalar} deviceIndex: int;
  var {:scalar} tmpBufLen_3: int;
  var {:scalar} Tmp_1706: int;
  var {:scalar} length_3: int;
  var {:scalar} tryCount: int;
  var {:scalar} minValidDevId_1: int;
  var {:scalar} ignoreXflag: int;
  var {:scalar} truncationIndex: int;
  var {:scalar} ieeeState: int;
  var {:scalar} Tmp_1710: int;
  var {:scalar} Tmp_1712: int;
  var {:pointer} sdv_1146: int;
  var {:scalar} Tmp_1713: int;
  var {:scalar} maxTries_3: int;
  var {:scalar} Tmp_1717: int;
  var {:pointer} sdv_1147: int;
  var {:pointer} sdv_1148: int;
  var {:pointer} sdv_1149: int;
  var {:pointer} sdv_1150: int;
  var {:scalar} Tmp_1721: int;
  var {:scalar} lowLengthByte: int;
  var {:dopa} {:scalar} bytesTransferred_1: int;
  var {:pointer} sdv_1152: int;
  var {:pointer} sdv_1153: int;
  var {:pointer} Tmp_1722: int;
  var {:pointer} tmpBuf: int;
  var {:pointer} Tmp_1723: int;
  var {:scalar} highLengthByte: int;
  var {:pointer} sdv_1154: int;
  var {:scalar} status_55: int;
  var {:pointer} devIdBuffer: int;
  var {:pointer} sdv_1155: int;
  var {:pointer} Controller_21: int;
  var vslice_dummy_var_482: int;
  var vslice_dummy_var_483: int;
  var vslice_dummy_var_484: int;
  var vslice_dummy_var_485: int;
  var vslice_dummy_var_486: int;

  anon0:
    call {:si_unique_call 2416} ieeeState := __HAVOC_malloc(20);
    call {:si_unique_call 2417} bytesTransferred_1 := __HAVOC_malloc(4);
    Controller_21 := actual_Controller_21;
    call {:si_unique_call 2418} Tmp_1704 := __HAVOC_malloc(8);
    call {:si_unique_call 2419} vslice_dummy_var_482 := __HAVOC_malloc(48);
    call {:si_unique_call 2420} vslice_dummy_var_483 := __HAVOC_malloc(28);
    call {:si_unique_call 2421} vslice_dummy_var_484 := __HAVOC_malloc(28);
    call {:si_unique_call 2422} Tmp_1722 := __HAVOC_malloc(8);
    call {:si_unique_call 2423} Tmp_1723 := __HAVOC_malloc(8);
    call {:si_unique_call 2424} vslice_dummy_var_485 := __HAVOC_malloc(32);
    call {:si_unique_call 2425} vslice_dummy_var_486 := __HAVOC_malloc(16);
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    devIdBuffer := 0;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    Mem_T.INT4[bytesTransferred_1] := 0;
    tryCount := 1;
    maxTries_3 := 3;
    minValidDevId_1 := 14;
    ignoreXflag := 0;
    goto L23;

  L23:
    call {:si_unique_call 2426} Tmp_1703, Tmp_1704, deviceIndex, tmpBufLen_3, Tmp_1706, length_3, tryCount, ignoreXflag, truncationIndex, Tmp_1710, Tmp_1712, sdv_1146, Tmp_1713, Tmp_1717, sdv_1147, sdv_1148, sdv_1149, sdv_1150, Tmp_1721, lowLengthByte, sdv_1152, sdv_1153, Tmp_1722, tmpBuf, Tmp_1723, highLengthByte, sdv_1154, status_55, devIdBuffer, sdv_1155 := P4ReadRawIeee1284DeviceId_loop_L23(Tmp_1703, Tmp_1704, deviceIndex, tmpBufLen_3, Tmp_1706, length_3, tryCount, minValidDevId_1, ignoreXflag, truncationIndex, ieeeState, Tmp_1710, Tmp_1712, sdv_1146, Tmp_1713, maxTries_3, Tmp_1717, sdv_1147, sdv_1148, sdv_1149, sdv_1150, Tmp_1721, lowLengthByte, bytesTransferred_1, sdv_1152, sdv_1153, Tmp_1722, tmpBuf, Tmp_1723, highLengthByte, sdv_1154, status_55, devIdBuffer, sdv_1155, Controller_21);
    goto L23_last;

  L23_last:
    call {:si_unique_call 2443} status_55 := P4IeeeEnter1284Mode(Controller_21, 4, ieeeState);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status_55 == 0;
    tmpBufLen_3 := 1024;
    call {:si_unique_call 2427} sdv_1149 := ExAllocatePoolWithTag(1, tmpBufLen_3, -797810352);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    tmpBuf := sdv_1149;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} tmpBuf != 0;
    call {:si_unique_call 2428} sdv_RtlZeroMemory(0, tmpBufLen_3);
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    Tmp_1721 := tmpBufLen_3 - 1;
    call {:si_unique_call 2429} status_55 := P4NibbleModeRead(Controller_21, tmpBuf, Tmp_1721, bytesTransferred_1, ieeeState);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} status_55 >= 0;
    assume {:nonnull} tmpBuf != 0;
    assume tmpBuf > 0;
    highLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[tmpBuf]);
    assume {:nonnull} tmpBuf != 0;
    assume tmpBuf > 0;
    lowLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[tmpBuf + 1 * 4]);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} highLengthByte > 2;
    devIdBuffer := 0;
    goto L55;

  L55:
    call {:si_unique_call 2430} sdv_ExFreePool(0);
    goto L44;

  L44:
    assume {:nonnull} ieeeState != 0;
    assume ieeeState > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} devIdBuffer != 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    sdv_1152 := 0;
    goto L91;

  L91:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} sdv_1152 != 0;
    goto L93;

  L93:
    deviceIndex := 0;
    goto L94;

  L94:
    call {:si_unique_call 2431} Tmp_1704, deviceIndex, Tmp_1710, Tmp_1712, sdv_1146, Tmp_1717, Tmp_1722, Tmp_1723, sdv_1154 := P4ReadRawIeee1284DeviceId_loop_L94(Tmp_1704, deviceIndex, Tmp_1710, Tmp_1712, sdv_1146, Tmp_1717, Tmp_1722, Tmp_1723, sdv_1154, devIdBuffer);
    goto L94_last;

  L94_last:
    assume {:CounterLoop 14} {:Counter "deviceIndex"} true;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} 14 > deviceIndex;
    Tmp_1710 := deviceIndex;
    havoc Tmp_1723;
    assume {:nonnull} Tmp_1723 != 0;
    assume Tmp_1723 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    Tmp_1717 := deviceIndex;
    havoc Tmp_1704;
    assume {:nonnull} Tmp_1704 != 0;
    assume Tmp_1704 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    sdv_1146 := 0;
    goto L102;

  L102:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} sdv_1146 != 0;
    Tmp_1712 := deviceIndex;
    havoc Tmp_1722;
    assume {:nonnull} Tmp_1722 != 0;
    assume Tmp_1722 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    sdv_1154 := 0;
    goto L109;

  L109:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_1154 != 0;
    ignoreXflag := 1;
    goto L86;

  L86:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} ignoreXflag != 0;
    call {:si_unique_call 2432} P4IeeeTerminate1284Mode(Controller_21, ieeeState, 0);
    goto L29;

  L29:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} devIdBuffer != 0;
    goto L31;

  L31:
    Tmp_1702 := devIdBuffer;
    goto LM2;

  LM2:
    return;

  anon66_Then:
    assume {:partition} devIdBuffer == 0;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Mem_T.INT4[bytesTransferred_1] > 0;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} minValidDevId_1 > Mem_T.INT4[bytesTransferred_1];
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} maxTries_3 > tryCount;
    tryCount := tryCount + 1;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    Mem_T.INT4[bytesTransferred_1] := 0;
    goto anon69_Else_dummy;

  anon69_Else_dummy:
    assume false;
    return;

  anon69_Then:
    assume {:partition} tryCount >= maxTries_3;
    goto L31;

  anon68_Then:
    assume {:partition} Mem_T.INT4[bytesTransferred_1] >= minValidDevId_1;
    goto L31;

  anon67_Then:
    assume {:partition} 0 >= Mem_T.INT4[bytesTransferred_1];
    goto L31;

  anon73_Then:
    assume {:partition} ignoreXflag == 0;
    call {:si_unique_call 2433} P4IeeeTerminate1284Mode(Controller_21, ieeeState, 1);
    goto L29;

  anon77_Then:
    assume {:partition} sdv_1154 == 0;
    goto L103;

  L103:
    deviceIndex := deviceIndex + 1;
    goto L103_dummy;

  L103_dummy:
    assume false;
    return;

  anon89_Then:
    call {:si_unique_call 2434} sdv_1154 := __HAVOC_malloc(1);
    goto L109;

  anon76_Then:
    assume {:partition} sdv_1146 == 0;
    goto L103;

  anon88_Then:
    call {:si_unique_call 2435} sdv_1146 := __HAVOC_malloc(1);
    goto L102;

  anon87_Then:
    goto L86;

  anon75_Then:
    assume {:partition} deviceIndex >= 14;
    goto L86;

  anon74_Then:
    assume {:partition} sdv_1152 == 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    sdv_1148 := 0;
    goto L115;

  L115:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} sdv_1148 == 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    sdv_1147 := 0;
    goto L120;

  L120:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} sdv_1147 == 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    sdv_1155 := 0;
    goto L125;

  L125:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} sdv_1155 == 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    sdv_1150 := 0;
    goto L130;

  L130:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} sdv_1150 != 0;
    goto L93;

  anon81_Then:
    assume {:partition} sdv_1150 == 0;
    goto L86;

  anon93_Then:
    call {:si_unique_call 2436} sdv_1150 := __HAVOC_malloc(1);
    goto L130;

  anon80_Then:
    assume {:partition} sdv_1155 != 0;
    goto L93;

  anon92_Then:
    call {:si_unique_call 2437} sdv_1155 := __HAVOC_malloc(1);
    goto L125;

  anon79_Then:
    assume {:partition} sdv_1147 != 0;
    goto L93;

  anon91_Then:
    call {:si_unique_call 2438} sdv_1147 := __HAVOC_malloc(1);
    goto L120;

  anon78_Then:
    assume {:partition} sdv_1148 != 0;
    goto L93;

  anon90_Then:
    call {:si_unique_call 2439} sdv_1148 := __HAVOC_malloc(1);
    goto L115;

  anon86_Then:
    call {:si_unique_call 2440} sdv_1152 := __HAVOC_malloc(1);
    goto L91;

  anon85_Then:
    assume {:partition} devIdBuffer == 0;
    goto L86;

  anon84_Then:
    assume {:partition} 2 >= highLengthByte;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Mem_T.INT4[bytesTransferred_1] >= minValidDevId_1;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    Tmp_1703 := Mem_T.INT4[bytesTransferred_1] + 1;
    call {:si_unique_call 2441} sdv_1153 := ExAllocatePoolWithTag(1, Tmp_1703, -797810352);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    devIdBuffer := sdv_1153;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} devIdBuffer != 0;
    length_3 := highLengthByte * 256 + lowLengthByte;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} length_3 >= minValidDevId_1;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Mem_T.INT4[bytesTransferred_1] > length_3;
    Tmp_1713 := length_3;
    goto L80;

  L80:
    truncationIndex := Tmp_1713;
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    call {:si_unique_call 2442} sdv_RtlCopyMemory(0, 0, Mem_T.INT4[bytesTransferred_1]);
    Tmp_1706 := truncationIndex;
    assume {:nonnull} devIdBuffer != 0;
    assume devIdBuffer > 0;
    Mem_T.INT4[devIdBuffer + Tmp_1706 * 4] := 0;
    goto L55;

  anon72_Then:
    assume {:partition} length_3 >= Mem_T.INT4[bytesTransferred_1];
    goto L77;

  L77:
    assume {:nonnull} bytesTransferred_1 != 0;
    assume bytesTransferred_1 > 0;
    Tmp_1713 := Mem_T.INT4[bytesTransferred_1];
    goto L80;

  anon96_Then:
    assume {:partition} minValidDevId_1 > length_3;
    goto L77;

  anon95_Then:
    assume {:partition} devIdBuffer == 0;
    goto L55;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    assume {:partition} minValidDevId_1 > Mem_T.INT4[bytesTransferred_1];
    goto L55;

  anon70_Then:
    assume {:partition} 0 > status_55;
    goto L55;

  anon83_Then:
    assume {:partition} tmpBuf == 0;
    goto L44;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    assume {:partition} status_55 != 0;
    goto L29;
}



procedure {:origName "ParCancelRequest"} ParCancelRequest(actual_DevObj_13: int, actual_Irp_68: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParCancelRequest"} ParCancelRequest(actual_DevObj_13: int, actual_Irp_68: int)
{
  var {:pointer} Irp_68: int;
  var vslice_dummy_var_487: int;
  var vslice_dummy_var_488: int;
  var vslice_dummy_var_489: int;

  anon0:
    call {:si_unique_call 2444} vslice_dummy_var_487 := __HAVOC_malloc(4);
    Irp_68 := actual_Irp_68;
    call {:si_unique_call 2445} vslice_dummy_var_488 := sdv_RemoveEntryList(0);
    assume {:nonnull} Irp_68 != 0;
    assume Irp_68 > 0;
    call {:si_unique_call 2446} IoReleaseCancelSpinLock(Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_68)]);
    call {:si_unique_call 2447} vslice_dummy_var_489 := P4CompleteRequest(Irp_68, -1073741536, 0);
    return;
}



procedure {:origName "P4WritePortNameToDevNode"} P4WritePortNameToDevNode(actual_Pdo_28: int, actual_Location: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "P4WritePortNameToDevNode"} P4WritePortNameToDevNode(actual_Pdo_28: int, actual_Location: int)
{
  var {:scalar} name: int;
  var {:scalar} Tmp_1730: int;
  var {:pointer} pdx_30: int;
  var {:scalar} sdv_1163: int;
  var {:scalar} status_56: int;
  var {:pointer} Tmp_1735: int;
  var {:pointer} Pdo_28: int;
  var vslice_dummy_var_490: int;
  var vslice_dummy_var_491: int;
  var vslice_dummy_var_492: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_495: int;
  var vslice_dummy_var_496: int;
  var vslice_dummy_var_497: int;

  anon0:
    call {:si_unique_call 2448} name := __HAVOC_malloc(12);
    call {:si_unique_call 2449} vslice_dummy_var_490 := __HAVOC_malloc(4);
    Pdo_28 := actual_Pdo_28;
    call {:si_unique_call 2450} vslice_dummy_var_492 := __HAVOC_malloc(40);
    call {:si_unique_call 2451} vslice_dummy_var_493 := __HAVOC_malloc(28);
    call {:si_unique_call 2452} vslice_dummy_var_494 := __HAVOC_malloc(28);
    call {:si_unique_call 2453} Tmp_1735 := __HAVOC_malloc(36);
    assume {:nonnull} Pdo_28 != 0;
    assume Pdo_28 > 0;
    havoc pdx_30;
    call {:si_unique_call 2454} sdv_RtlZeroMemory(0, 20);
    assume {:nonnull} pdx_30 != 0;
    assume pdx_30 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} pdx_30 != 0;
    assume pdx_30 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pdx_30 != 0;
    assume pdx_30 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} pdx_30 != 0;
    assume pdx_30 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L24;

  L24:
    call {:si_unique_call 2455} status_56 := IoOpenDeviceRegistryKey(0, 1, 983103, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_56 == 0;
    Tmp_1735 := strConst__li2bpl111;
    call {:si_unique_call 2456} RtlInitUnicodeString(name, Tmp_1735);
    Tmp_1730 := (sdv_1163 + 1) * 2;
    call {:si_unique_call 2457} vslice_dummy_var_496 := ZwSetValueKey(0, 0, 0, 1, 0, Tmp_1730);
    call {:si_unique_call 2458} vslice_dummy_var_491 := ZwClose(0);
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} status_56 != 0;
    goto L1;

  anon13_Then:
    goto L17;

  L17:
    call {:si_unique_call 2459} vslice_dummy_var_497 := corral_nondet();
    goto L24;

  anon14_Then:
    goto L17;

  anon15_Then:
    goto L14;

  L14:
    call {:si_unique_call 2460} vslice_dummy_var_495 := corral_nondet();
    goto L24;

  anon11_Then:
    goto L14;
}



procedure {:origName "PptFreePortDpc"} PptFreePortDpc(actual_Dpc_1: int, actual_Fdx_14: int, actual_SystemArgument1: int, actual_SystemArgument2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFreePortDpc"} PptFreePortDpc(actual_Dpc_1: int, actual_Fdx_14: int, actual_SystemArgument1: int, actual_SystemArgument2: int)
{
  var {:pointer} Fdx_14: int;
  var vslice_dummy_var_498: int;

  anon0:
    call {:si_unique_call 2461} vslice_dummy_var_498 := __HAVOC_malloc(4);
    Fdx_14 := actual_Fdx_14;
    call {:si_unique_call 2462} PptFreePort#1(Fdx_14);
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_3: int) returns (Tmp_1738: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_3: int) returns (Tmp_1738: int)
{
  var {:pointer} NextEntry_1: int;
  var {:pointer} Entry_3: int;
  var {:pointer} ListHead_3: int;

  anon0:
    ListHead_3 := actual_ListHead_3;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    havoc Entry_3;
    assume {:nonnull} Entry_3 != 0;
    assume Entry_3 > 0;
    havoc NextEntry_1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 2463} FatalListEntryError(ListHead_3, Entry_3, NextEntry_1);
    goto L12;

  L12:
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    assume {:nonnull} NextEntry_1 != 0;
    assume NextEntry_1 > 0;
    Tmp_1738 := Entry_3;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_499: int;

  anon0:
    call {:si_unique_call 2464} vslice_dummy_var_499 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "StringChr"} StringChr(actual_string_1: int, actual_c_1: int) returns (Tmp_1742: int);
  free ensures {:va_keep} Tmp_1742 == 0 || Tmp_1742 == actual_string_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "StringChr"} StringChr(actual_string_1: int, actual_c_1: int) returns (Tmp_1742: int)
{
  var {:pointer} string_1: int;
  var {:scalar} c_1: int;

  anon0:
    string_1 := actual_string_1;
    c_1 := actual_c_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} string_1 != 0;
    goto L5;

  L5:
    call {:si_unique_call 2465} StringChr_loop_L5(string_1, c_1);
    goto L5_last;

  L5_last:
    assume {:nonnull} string_1 != 0;
    assume string_1 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[string_1] != 0;
    assume {:nonnull} string_1 != 0;
    assume string_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[string_1] == c_1;
    Tmp_1742 := string_1;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Mem_T.INT4[string_1] != c_1;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    assume false;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[string_1] == 0;
    Tmp_1742 := 0;
    goto L1;

  anon7_Then:
    assume {:partition} string_1 == 0;
    Tmp_1742 := 0;
    goto L1;
}



procedure {:origName "ParAllocPortCompletionRoutine"} ParAllocPortCompletionRoutine(actual_DeviceObject_30: int, actual_Irp_69: int, actual_Event_6: int) returns (Tmp_1744: int);
  free ensures {:va_keep} Tmp_1744 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParAllocPortCompletionRoutine"} ParAllocPortCompletionRoutine(actual_DeviceObject_30: int, actual_Irp_69: int, actual_Event_6: int) returns (Tmp_1744: int)
{
  var {:pointer} Event_6: int;
  var vslice_dummy_var_500: int;

  anon0:
    Event_6 := actual_Event_6;
    call {:si_unique_call 2466} vslice_dummy_var_500 := KeSetEvent(Event_6, 0, 0);
    Tmp_1744 := -1073741802;
    return;
}



procedure {:origName "PptDisconnectInterrupt"} PptDisconnectInterrupt(actual_Fdx_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDisconnectInterrupt"} PptDisconnectInterrupt(actual_Fdx_15: int)
{
  var vslice_dummy_var_501: int;

  anon0:
    call {:si_unique_call 2467} vslice_dummy_var_501 := __HAVOC_malloc(4);
    call {:si_unique_call 2468} IoDisconnectInterrupt(0);
    return;
}



procedure {:origName "PptSetCancelRoutine"} PptSetCancelRoutine(actual_Irp_70: int, actual_CancelRoutine_2: int) returns (Tmp_1748: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSetCancelRoutine"} PptSetCancelRoutine(actual_Irp_70: int, actual_CancelRoutine_2: int) returns (Tmp_1748: int)
{
  var {:scalar} sdv_1165: int;
  var {:pointer} Irp_70: int;
  var {:scalar} CancelRoutine_2: int;

  anon0:
    Irp_70 := actual_Irp_70;
    CancelRoutine_2 := actual_CancelRoutine_2;
    call {:si_unique_call 2469} sdv_1165 := sdv_IoSetCancelRoutine(Irp_70, CancelRoutine_2);
    Tmp_1748 := sdv_1165;
    return;
}



procedure {:origName "PptTryAllocatePortAtInterruptLevel"} PptTryAllocatePortAtInterruptLevel(actual_Context_9: int) returns (Tmp_1750: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1750 == 1 || Tmp_1750 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptTryAllocatePortAtInterruptLevel"} PptTryAllocatePortAtInterruptLevel(actual_Context_9: int) returns (Tmp_1750: int)
{
  var {:pointer} Tmp_1751: int;
  var {:pointer} Tmp_1752: int;
  var {:pointer} Tmp_1753: int;
  var {:pointer} Tmp_1755: int;
  var {:pointer} Context_9: int;

  anon0:
    Context_9 := actual_Context_9;
    Tmp_1753 := Context_9;
    assume {:nonnull} Tmp_1753 != 0;
    assume Tmp_1753 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[WorkQueueCount__FDO_EXTENSION(Tmp_1753)] == -1;
    Tmp_1751 := Context_9;
    assume {:nonnull} Tmp_1751 != 0;
    assume Tmp_1751 > 0;
    Mem_T.INT4[WorkQueueCount__FDO_EXTENSION(Tmp_1751)] := 0;
    Tmp_1752 := Context_9;
    Tmp_1755 := Context_9;
    assume {:nonnull} Tmp_1752 != 0;
    assume Tmp_1752 > 0;
    assume {:nonnull} Tmp_1755 != 0;
    assume Tmp_1755 > 0;
    Tmp_1750 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[WorkQueueCount__FDO_EXTENSION(Tmp_1753)] != -1;
    Tmp_1750 := 0;
    goto L1;
}



procedure {:origName "ParNotInitError"} ParNotInitError(actual_Pdx_44: int, actual_DeviceStatus_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParNotInitError"} ParNotInitError(actual_Pdx_44: int, actual_DeviceStatus_4: int)
{
  var {:scalar} Tmp_1757: int;
  var {:pointer} Irp_71: int;
  var {:scalar} Tmp_1759: int;
  var {:scalar} Tmp_1761: int;
  var {:scalar} Tmp_1762: int;
  var {:scalar} Tmp_1764: int;
  var {:scalar} Tmp_1768: int;
  var {:scalar} Tmp_1769: int;
  var {:scalar} Tmp_1771: int;
  var {:scalar} Tmp_1772: int;
  var {:pointer} Pdx_44: int;
  var {:scalar} DeviceStatus_4: int;
  var vslice_dummy_var_502: int;

  anon0:
    call {:si_unique_call 2470} vslice_dummy_var_502 := __HAVOC_malloc(4);
    Pdx_44 := actual_Pdx_44;
    DeviceStatus_4 := actual_DeviceStatus_4;
    assume {:nonnull} Pdx_44 != 0;
    assume Pdx_44 > 0;
    havoc Irp_71;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} 0 != 1;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} BAND(DeviceStatus_4, 8) != 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} BAND(DeviceStatus_4, 16) == 0;
    Tmp_1759 := 1;
    goto L13;

  L13:
    Tmp_1771 := Tmp_1759;
    goto L14;

  L14:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Tmp_1771 != 0;
    assume {:nonnull} Irp_71 != 0;
    assume Irp_71 > 0;
    goto L1;

  L1:
    return;

  anon63_Then:
    assume {:partition} Tmp_1771 == 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} 0 != 1;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} BAND(DeviceStatus_4, 64) != 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} BAND(DeviceStatus_4, 32) != 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} BAND(DeviceStatus_4, 16) != 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} BAND(DeviceStatus_4, 8) != 0;
    Tmp_1764 := 1;
    goto L28;

  L28:
    Tmp_1768 := Tmp_1764;
    goto L29;

  L29:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Tmp_1768 != 0;
    assume {:nonnull} Irp_71 != 0;
    assume Irp_71 > 0;
    goto L1;

  anon70_Then:
    assume {:partition} Tmp_1768 == 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} BAND(DeviceStatus_4, 32) != 0;
    assume {:nonnull} Irp_71 != 0;
    assume Irp_71 > 0;
    goto L1;

  anon71_Then:
    assume {:partition} BAND(DeviceStatus_4, 32) == 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} 0 != 1;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} BAND(DeviceStatus_4, 128) != 0;
    Tmp_1757 := 1;
    goto L46;

  L46:
    Tmp_1769 := Tmp_1757;
    goto L47;

  L47:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Tmp_1769 != 0;
    assume {:nonnull} Irp_71 != 0;
    assume Irp_71 > 0;
    goto L1;

  anon74_Then:
    assume {:partition} Tmp_1769 == 0;
    assume {:nonnull} Irp_71 != 0;
    assume Irp_71 > 0;
    goto L1;

  anon73_Then:
    assume {:partition} BAND(DeviceStatus_4, 128) == 0;
    goto L41;

  L41:
    Tmp_1757 := 0;
    goto L46;

  anon86_Then:
    goto L41;

  anon85_Then:
    goto L41;

  anon72_Then:
    assume {:partition} 0 == 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} BAND(DeviceStatus_4, 64) != 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} BAND(DeviceStatus_4, 128) != 0;
    Tmp_1761 := 1;
    goto L59;

  L59:
    Tmp_1769 := Tmp_1761;
    goto L47;

  anon76_Then:
    assume {:partition} BAND(DeviceStatus_4, 128) == 0;
    goto L55;

  L55:
    Tmp_1761 := 0;
    goto L59;

  anon75_Then:
    assume {:partition} BAND(DeviceStatus_4, 64) == 0;
    goto L55;

  anon87_Then:
    goto L55;

  anon69_Then:
    assume {:partition} BAND(DeviceStatus_4, 8) == 0;
    goto L22;

  L22:
    Tmp_1764 := 0;
    goto L28;

  anon68_Then:
    assume {:partition} BAND(DeviceStatus_4, 16) == 0;
    goto L22;

  anon67_Then:
    assume {:partition} BAND(DeviceStatus_4, 32) == 0;
    goto L22;

  anon66_Then:
    assume {:partition} BAND(DeviceStatus_4, 64) == 0;
    goto L22;

  anon84_Then:
    goto L22;

  anon64_Then:
    assume {:partition} 0 == 1;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} BAND(DeviceStatus_4, 128) != 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} BAND(DeviceStatus_4, 64) != 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} BAND(DeviceStatus_4, 32) != 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} BAND(DeviceStatus_4, 16) != 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} BAND(DeviceStatus_4, 8) != 0;
    Tmp_1772 := 1;
    goto L66;

  L66:
    Tmp_1768 := Tmp_1772;
    goto L29;

  anon80_Then:
    assume {:partition} BAND(DeviceStatus_4, 8) == 0;
    goto L60;

  L60:
    Tmp_1772 := 0;
    goto L66;

  anon79_Then:
    assume {:partition} BAND(DeviceStatus_4, 16) == 0;
    goto L60;

  anon78_Then:
    assume {:partition} BAND(DeviceStatus_4, 32) == 0;
    goto L60;

  anon77_Then:
    assume {:partition} BAND(DeviceStatus_4, 64) == 0;
    goto L60;

  anon65_Then:
    assume {:partition} BAND(DeviceStatus_4, 128) == 0;
    goto L60;

  anon62_Then:
    assume {:partition} BAND(DeviceStatus_4, 16) != 0;
    goto L8;

  L8:
    Tmp_1759 := 0;
    goto L13;

  anon83_Then:
    goto L8;

  anon61_Then:
    assume {:partition} BAND(DeviceStatus_4, 8) == 0;
    goto L8;

  anon82_Then:
    assume {:partition} 0 == 1;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} BAND(DeviceStatus_4, 16) == 0;
    Tmp_1762 := 1;
    goto L75;

  L75:
    Tmp_1771 := Tmp_1762;
    goto L14;

  anon81_Then:
    assume {:partition} BAND(DeviceStatus_4, 16) != 0;
    goto L68;

  L68:
    Tmp_1762 := 0;
    goto L75;

  anon90_Then:
    goto L68;

  anon89_Then:
    goto L68;

  anon88_Then:
    goto L68;
}



procedure {:origName "ParBuildSendInternalIoctl"} ParBuildSendInternalIoctl(actual_IoControlCode_1: int, actual_TargetDeviceObject: int, actual_InputBuffer_1: int, actual_InputBufferLength_1: int, actual_OutputBuffer_1: int, actual_OutputBufferLength_1: int, actual_RequestedTimeout: int) returns (Tmp_1776: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParBuildSendInternalIoctl"} ParBuildSendInternalIoctl(actual_IoControlCode_1: int, actual_TargetDeviceObject: int, actual_InputBuffer_1: int, actual_InputBufferLength_1: int, actual_OutputBuffer_1: int, actual_OutputBufferLength_1: int, actual_RequestedTimeout: int) returns (Tmp_1776: int)
{
  var {:pointer} irpSp_8: int;
  var {:scalar} Tmp_1777: int;
  var {:scalar} timeout_3: int;
  var {:scalar} Tmp_1778: int;
  var {:pointer} irp: int;
  var {:scalar} status_57: int;
  var {:scalar} event_1: int;
  var {:scalar} IoControlCode_1: int;
  var {:pointer} TargetDeviceObject: int;
  var {:pointer} InputBuffer_1: int;
  var {:scalar} InputBufferLength_1: int;
  var {:pointer} OutputBuffer_1: int;
  var {:scalar} OutputBufferLength_1: int;
  var {:pointer} RequestedTimeout: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;

  anon0:
    call {:si_unique_call 2471} timeout_3 := __HAVOC_malloc(20);
    call {:si_unique_call 2472} Tmp_1778 := __HAVOC_malloc(20);
    call {:si_unique_call 2473} event_1 := __HAVOC_malloc(156);
    IoControlCode_1 := actual_IoControlCode_1;
    TargetDeviceObject := actual_TargetDeviceObject;
    InputBuffer_1 := actual_InputBuffer_1;
    InputBufferLength_1 := actual_InputBufferLength_1;
    OutputBuffer_1 := actual_OutputBuffer_1;
    OutputBufferLength_1 := actual_OutputBufferLength_1;
    RequestedTimeout := actual_RequestedTimeout;
    call {:si_unique_call 2474} sdv_do_paged_code_check();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} InputBufferLength_1 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} OutputBufferLength_1 != 0;
    Tmp_1776 := -1073741823;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} OutputBufferLength_1 == 0;
    goto L12;

  L12:
    assume {:nonnull} TargetDeviceObject != 0;
    assume TargetDeviceObject > 0;
    havoc Tmp_1777;
    call {:si_unique_call 2475} irp := IoAllocateIrp(Tmp_1777, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} irp != 0;
    call {:si_unique_call 2476} irpSp_8 := sdv_IoGetNextIrpStackLocation(irp);
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} InputBufferLength_1 != 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    goto L32;

  L32:
    call {:si_unique_call 2477} KeInitializeEvent(event_1, 0, 0);
    call {:si_unique_call 2478} sdv_IoSetCompletionRoutine(irp, li2bplFunctionConstant226, event_1, 1, 1, 1);
    call {:si_unique_call 2479} status_57 := ParCallDriver(TargetDeviceObject, irp);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_57 >= 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} RequestedTimeout != 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} RequestedTimeout != 0;
    assume RequestedTimeout > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    goto L49;

  L49:
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} timeout_3 != 0;
    assume timeout_3 > 0;
    call {:si_unique_call 2480} status_57 := KeWaitForSingleObject(0, 0, 0, 0, timeout_3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} status_57 == 258;
    call {:si_unique_call 2481} vslice_dummy_var_503 := IoCancelIrp(0);
    call {:si_unique_call 2482} vslice_dummy_var_504 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L55;

  L55:
    assume {:nonnull} irp != 0;
    assume irp > 0;
    havoc status_57;
    call {:si_unique_call 2483} IoFreeIrp(0);
    Tmp_1776 := status_57;
    goto L1;

  anon23_Then:
    assume {:partition} status_57 != 258;
    goto L55;

  anon22_Then:
    assume {:partition} RequestedTimeout == 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    assume {:nonnull} Tmp_1778 != 0;
    assume Tmp_1778 > 0;
    goto L49;

  anon21_Then:
    assume {:partition} 0 > status_57;
    call {:si_unique_call 2484} IoFreeIrp(0);
    Tmp_1776 := status_57;
    goto L1;

  anon24_Then:
    assume {:partition} InputBufferLength_1 == 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} OutputBufferLength_1 != 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    goto L32;

  anon20_Then:
    assume {:partition} OutputBufferLength_1 == 0;
    goto L32;

  anon19_Then:
    assume {:partition} irp == 0;
    Tmp_1776 := -1073741670;
    goto L1;

  anon17_Then:
    assume {:partition} InputBufferLength_1 == 0;
    goto L12;
}



procedure {:origName "ParPnpGetId"} ParPnpGetId(actual_DeviceIdString: int, actual_Type_4: int, actual_resultString_1: int, actual_descriptionString: int) returns (Tmp_1780: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1780 == 0 || Tmp_1780 == -1073741275;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParPnpGetId"} ParPnpGetId(actual_DeviceIdString: int, actual_Type_4: int, actual_resultString_1: int, actual_descriptionString: int) returns (Tmp_1780: int)
{
  var {:scalar} Tmp_1782: int;
  var {:pointer} CLS: int;
  var {:scalar} sdv_1172: int;
  var {:dopa} {:scalar} checkSum_2: int;
  var {:pointer} CID: int;
  var {:scalar} sdv_1174: int;
  var {:pointer} nodeName: int;
  var {:scalar} Tmp_1787: int;
  var {:pointer} DES: int;
  var {:pointer} MDL: int;
  var {:scalar} sdv_1178: int;
  var {:pointer} MFG: int;
  var {:scalar} status_58: int;
  var {:scalar} Tmp_1789: int;
  var {:pointer} AID: int;
  var {:pointer} DeviceIdString: int;
  var {:scalar} Type_4: int;
  var {:pointer} resultString_1: int;
  var {:pointer} descriptionString: int;
  var vslice_dummy_var_505: int;
  var vslice_dummy_var_506: int;
  var vslice_dummy_var_507: int;
  var vslice_dummy_var_508: int;
  var vslice_dummy_var_509: int;
  var vslice_dummy_var_510: int;
  var vslice_dummy_var_511: int;
  var vslice_dummy_var_512: int;
  var vslice_dummy_var_513: int;

  anon0:
    call {:si_unique_call 2485} CLS := __HAVOC_malloc(4);
    call {:si_unique_call 2486} checkSum_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2487} CID := __HAVOC_malloc(4);
    call {:si_unique_call 2488} DES := __HAVOC_malloc(4);
    call {:si_unique_call 2489} MDL := __HAVOC_malloc(4);
    call {:si_unique_call 2490} MFG := __HAVOC_malloc(4);
    call {:si_unique_call 2491} AID := __HAVOC_malloc(4);
    DeviceIdString := actual_DeviceIdString;
    Type_4 := actual_Type_4;
    resultString_1 := actual_resultString_1;
    descriptionString := actual_descriptionString;
    call {:si_unique_call 2492} vslice_dummy_var_505 := __HAVOC_malloc(40);
    call {:si_unique_call 2493} vslice_dummy_var_506 := __HAVOC_malloc(48);
    call {:si_unique_call 2494} vslice_dummy_var_507 := __HAVOC_malloc(24);
    call {:si_unique_call 2495} nodeName := __HAVOC_malloc(64);
    call {:si_unique_call 2496} vslice_dummy_var_508 := __HAVOC_malloc(64);
    call {:si_unique_call 2497} vslice_dummy_var_509 := __HAVOC_malloc(28);
    status_58 := 0;
    assume {:nonnull} checkSum_2 != 0;
    assume checkSum_2 > 0;
    Mem_T.INT4[checkSum_2] := 0;
    nodeName := strConst__li2bpl41;
    assume {:nonnull} MFG != 0;
    assume MFG > 0;
    assume {:nonnull} MDL != 0;
    assume MDL > 0;
    assume {:nonnull} CLS != 0;
    assume CLS > 0;
    assume {:nonnull} AID != 0;
    assume AID > 0;
    assume {:nonnull} CID != 0;
    assume CID > 0;
    assume {:nonnull} DES != 0;
    assume DES > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Type_4 != 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Type_4 != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Type_4 == 2;
    Tmp_1789 := sdv_1174;
    call {:si_unique_call 2498} GetCheckSum(DeviceIdString, Tmp_1789, checkSum_2);
    call {:si_unique_call 2499} vslice_dummy_var_513 := corral_nondet();
    goto L22;

  L22:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Type_4 != 0;
    Tmp_1782 := sdv_1178;
    call {:si_unique_call 2500} StringSubst(resultString_1, 32, 95, Tmp_1782);
    goto L61;

  L61:
    Tmp_1780 := status_58;
    return;

  anon15_Then:
    assume {:partition} Type_4 == 0;
    goto L61;

  anon19_Then:
    assume {:partition} Type_4 != 2;
    goto L22;

  anon20_Then:
    assume {:partition} Type_4 == 1;
    Tmp_1787 := sdv_1172;
    call {:si_unique_call 2501} GetCheckSum(DeviceIdString, Tmp_1787, checkSum_2);
    call {:si_unique_call 2502} vslice_dummy_var_512 := corral_nondet();
    goto L22;

  anon21_Then:
    assume {:partition} Type_4 == 0;
    call {:si_unique_call 2503} ParPnpFindDeviceIdKeys(MFG, MDL, CLS, DES, AID, CID, DeviceIdString);
    assume {:nonnull} MFG != 0;
    assume MFG > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} MDL != 0;
    assume MDL > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 2504} vslice_dummy_var_510 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} descriptionString != 0;
    call {:si_unique_call 2505} vslice_dummy_var_511 := corral_nondet();
    goto L22;

  anon18_Then:
    assume {:partition} descriptionString == 0;
    goto L22;

  anon17_Then:
    goto L50;

  L50:
    status_58 := -1073741275;
    goto L61;

  anon16_Then:
    goto L50;
}



procedure {:origName "PptGetPortNameFromPhysicalDeviceObject"} PptGetPortNameFromPhysicalDeviceObject(actual_PhysicalDeviceObject_3: int) returns (Tmp_1790: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptGetPortNameFromPhysicalDeviceObject"} PptGetPortNameFromPhysicalDeviceObject(actual_PhysicalDeviceObject_3: int) returns (Tmp_1790: int)
{
  var {:scalar} valueName_1: int;
  var {:pointer} valueNameWstr: int;
  var {:pointer} portName_2: int;
  var {:pointer} portName_3: int;
  var {:pointer} sdv_1180: int;
  var {:pointer} buffer_12: int;
  var {:pointer} Tmp_1791: int;
  var {:pointer} sdv_1183: int;
  var {:scalar} status_59: int;
  var {:scalar} resultLength: int;
  var {:scalar} bufferLength_2: int;
  var vslice_dummy_var_514: int;
  var vslice_dummy_var_515: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;

  anon0:
    call {:si_unique_call 2506} valueName_1 := __HAVOC_malloc(12);
    portName_2 := 0;
    call {:si_unique_call 2507} sdv_do_paged_code_check();
    call {:si_unique_call 2508} status_59 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_59 >= 0;
    bufferLength_2 := 0;
    buffer_12 := 0;
    valueNameWstr := strConst__li2bpl111;
    call {:si_unique_call 2509} RtlInitUnicodeString(valueName_1, valueNameWstr);
    status_59 := -1073741789;
    goto L28;

  L28:
    call {:si_unique_call 2510} buffer_12, Tmp_1791, sdv_1183, status_59, resultLength, bufferLength_2 := PptGetPortNameFromPhysicalDeviceObject_loop_L28(buffer_12, Tmp_1791, sdv_1183, status_59, resultLength, bufferLength_2);
    goto L28_last;

  L28_last:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} status_59 == -1073741789;
    call {:si_unique_call 2511} Tmp_1791 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1791 != 0;
    assume Tmp_1791 > 0;
    Mem_T.INT4[Tmp_1791] := resultLength;
    call {:si_unique_call 2512} status_59 := ZwQueryValueKey(0, 0, 1, 0, bufferLength_2, Tmp_1791);
    assume {:nonnull} Tmp_1791 != 0;
    assume Tmp_1791 > 0;
    resultLength := Mem_T.INT4[Tmp_1791];
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_59 == -1073741789;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} buffer_12 != 0;
    call {:si_unique_call 2513} sdv_ExFreePool(0);
    goto L38;

  L38:
    call {:si_unique_call 2514} sdv_1183 := ExAllocatePoolWithTag(257, resultLength, -797810352);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    buffer_12 := sdv_1183;
    bufferLength_2 := resultLength;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} buffer_12 == 0;
    call {:si_unique_call 2515} vslice_dummy_var_515 := ZwClose(0);
    Tmp_1790 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon54_Then:
    assume {:partition} buffer_12 != 0;
    goto anon54_Then_dummy;

  anon54_Then_dummy:
    assume false;
    return;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:partition} buffer_12 == 0;
    goto L38;

  anon41_Then:
    assume {:partition} status_59 != -1073741789;
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} status_59 != -1073741789;
    call {:si_unique_call 2516} vslice_dummy_var_514 := ZwClose(0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_59 >= 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} buffer_12 != 0;
    assume {:nonnull} buffer_12 != 0;
    assume buffer_12 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto L57;

  L57:
    call {:si_unique_call 2517} sdv_ExFreePool(0);
    Tmp_1790 := 0;
    goto L1;

  anon46_Then:
    assume {:nonnull} buffer_12 != 0;
    assume buffer_12 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    portName_3 := buffer_12;
    assume {:nonnull} portName_3 != 0;
    assume portName_3 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} Mem_T.INT4[portName_3] != 76;
    goto L65;

  L65:
    call {:si_unique_call 2518} sdv_ExFreePool(0);
    Tmp_1790 := 0;
    goto L1;

  anon55_Then:
    assume {:partition} Mem_T.INT4[portName_3] == 76;
    assume {:nonnull} portName_3 != 0;
    assume portName_3 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.INT4[portName_3 + 1 * 4] == 80;
    assume {:nonnull} portName_3 != 0;
    assume portName_3 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Mem_T.INT4[portName_3 + 2 * 4] == 84;
    assume {:nonnull} portName_3 != 0;
    assume portName_3 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} 48 <= Mem_T.INT4[portName_3 + 3 * 4];
    assume {:nonnull} portName_3 != 0;
    assume portName_3 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Mem_T.INT4[portName_3 + 3 * 4] <= 57;
    assume {:nonnull} portName_3 != 0;
    assume portName_3 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[portName_3 + 4 * 4] == 0;
    assume {:nonnull} buffer_12 != 0;
    assume buffer_12 > 0;
    havoc vslice_dummy_var_239;
    call {:si_unique_call 2519} sdv_1180 := ExAllocatePoolWithTag(257, vslice_dummy_var_239, -797810352);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    portName_2 := sdv_1180;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} portName_2 != 0;
    assume {:nonnull} buffer_12 != 0;
    assume buffer_12 > 0;
    havoc vslice_dummy_var_240;
    call {:si_unique_call 2520} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_240);
    call {:si_unique_call 2521} sdv_ExFreePool(0);
    goto L54;

  L54:
    Tmp_1790 := portName_2;
    goto L1;

  anon57_Then:
    assume {:partition} portName_2 == 0;
    call {:si_unique_call 2522} sdv_ExFreePool(0);
    Tmp_1790 := 0;
    goto L1;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    assume {:partition} Mem_T.INT4[portName_3 + 4 * 4] != 0;
    goto L65;

  anon51_Then:
    assume {:partition} 57 < Mem_T.INT4[portName_3 + 3 * 4];
    goto L65;

  anon50_Then:
    assume {:partition} Mem_T.INT4[portName_3 + 3 * 4] < 48;
    goto L65;

  anon49_Then:
    assume {:partition} Mem_T.INT4[portName_3 + 2 * 4] != 84;
    goto L65;

  anon48_Then:
    assume {:partition} Mem_T.INT4[portName_3 + 1 * 4] != 80;
    goto L65;

  anon47_Then:
    goto L57;

  anon45_Then:
    assume {:partition} buffer_12 == 0;
    goto L54;

  anon43_Then:
    assume {:partition} 0 > status_59;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} buffer_12 != 0;
    call {:si_unique_call 2523} sdv_ExFreePool(0);
    goto L89;

  L89:
    Tmp_1790 := 0;
    goto L1;

  anon44_Then:
    assume {:partition} buffer_12 == 0;
    goto L89;

  anon39_Then:
    assume {:partition} 0 > status_59;
    Tmp_1790 := 0;
    goto L1;
}



procedure {:origName "PptSynchCompletionRoutine"} PptSynchCompletionRoutine(actual_DevObj_14: int, actual_Irp_72: int, actual_EventIn: int) returns (Tmp_1793: int);
  free ensures {:va_keep} Tmp_1793 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSynchCompletionRoutine"} PptSynchCompletionRoutine(actual_DevObj_14: int, actual_Irp_72: int, actual_EventIn: int) returns (Tmp_1793: int)
{
  var {:pointer} Event_7: int;
  var {:pointer} EventIn: int;
  var vslice_dummy_var_516: int;

  anon0:
    EventIn := actual_EventIn;
    Event_7 := EventIn;
    call {:si_unique_call 2524} vslice_dummy_var_516 := KeSetEvent(Event_7, 0, 0);
    Tmp_1793 := -1073741802;
    return;
}



procedure {:origName "PptTryAllocatePort"} PptTryAllocatePort(actual_Fdx_16: int) returns (Tmp_1795: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1795 == 1 || Tmp_1795 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptTryAllocatePort"} PptTryAllocatePort(actual_Fdx_16: int) returns (Tmp_1795: int)
{
  var {:pointer} Tmp_1796: int;
  var {:scalar} b_1: int;
  var {:pointer} fdx_33: int;
  var {:scalar} CancelIrql_7: int;
  var {:pointer} Fdx_16: int;

  anon0:
    Fdx_16 := actual_Fdx_16;
    fdx_33 := Fdx_16;
    assume {:nonnull} fdx_33 != 0;
    assume fdx_33 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2525} b_1 := KeSynchronizeExecution(0, li2bplFunctionConstant199, 0);
    goto L16;

  L16:
    Tmp_1795 := b_1;
    return;

  anon3_Then:
    call {:si_unique_call 2526} Tmp_1796 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1796 != 0;
    assume Tmp_1796 > 0;
    Mem_T.INT4[Tmp_1796] := CancelIrql_7;
    call {:si_unique_call 2527} IoAcquireCancelSpinLock(Tmp_1796);
    assume {:nonnull} Tmp_1796 != 0;
    assume Tmp_1796 > 0;
    CancelIrql_7 := Mem_T.INT4[Tmp_1796];
    call {:si_unique_call 2528} b_1 := PptTryAllocatePortAtInterruptLevel(fdx_33);
    call {:si_unique_call 2529} IoReleaseCancelSpinLock(CancelIrql_7);
    goto L16;
}



procedure {:origName "PptInterruptService"} PptInterruptService(actual_Interrupt_1: int, actual_Fdx_17: int) returns (Tmp_1797: int);
  free ensures {:va_keep} Tmp_1797 == 1 || Tmp_1797 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptInterruptService"} PptInterruptService(actual_Interrupt_1: int, actual_Fdx_17: int) returns (Tmp_1797: int)
{
  var {:pointer} sdv_1188: int;
  var {:pointer} Current: int;
  var {:scalar} sdv_1189: int;
  var {:pointer} fdx_34: int;
  var {:pointer} IsrListEntry_1: int;
  var {:pointer} Fdx_17: int;

  anon0:
    Fdx_17 := actual_Fdx_17;
    fdx_34 := Fdx_17;
    assume {:nonnull} fdx_34 != 0;
    assume fdx_34 > 0;
    havoc Current;
    goto L8;

  L8:
    call {:si_unique_call 2530} sdv_1188, Current, IsrListEntry_1 := PptInterruptService_loop_L8(sdv_1188, Current, sdv_1189, IsrListEntry_1);
    goto L8_last;

  L8_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 2531} sdv_1188 := sdv_containing_record(Current, 0);
    IsrListEntry_1 := sdv_1188;
    assume {:nonnull} IsrListEntry_1 != 0;
    assume IsrListEntry_1 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_1189 != 0;
    Tmp_1797 := 1;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_1189 == 0;
    assume {:nonnull} Current != 0;
    assume Current > 0;
    havoc Current;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    Tmp_1797 := 0;
    goto L1;
}



procedure {:origName "_InlineInterlockedCompareExchangePointer"} _InlineInterlockedCompareExchangePointer(actual_Destination_4: int, actual_ExChange: int, actual_Comperand: int) returns (Tmp_1799: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_InlineInterlockedCompareExchangePointer"} _InlineInterlockedCompareExchangePointer(actual_Destination_4: int, actual_ExChange: int, actual_Comperand: int) returns (Tmp_1799: int)
{
  var {:scalar} sdv_1190: int;

  anon0:
    Tmp_1799 := sdv_1190;
    return;
}



procedure {:origName "PptSynchronizedIncrement"} PptSynchronizedIncrement(actual_SyncContext_8: int) returns (Tmp_1801: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1801 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSynchronizedIncrement"} PptSynchronizedIncrement(actual_SyncContext_8: int) returns (Tmp_1801: int)
{
  var {:pointer} Tmp_1803: int;
  var {:pointer} Tmp_1804: int;
  var {:pointer} Tmp_1805: int;
  var {:pointer} Tmp_1806: int;
  var {:pointer} Tmp_1807: int;
  var {:pointer} SyncContext_8: int;

  anon0:
    SyncContext_8 := actual_SyncContext_8;
    Tmp_1805 := SyncContext_8;
    Tmp_1807 := SyncContext_8;
    assume {:nonnull} Tmp_1807 != 0;
    assume Tmp_1807 > 0;
    havoc Tmp_1806;
    Tmp_1804 := SyncContext_8;
    assume {:nonnull} Tmp_1804 != 0;
    assume Tmp_1804 > 0;
    havoc Tmp_1803;
    assume {:nonnull} Tmp_1803 != 0;
    assume Tmp_1803 > 0;
    assume {:nonnull} Tmp_1806 != 0;
    assume Tmp_1806 > 0;
    Mem_T.INT4[Tmp_1806] := Mem_T.INT4[Tmp_1803] + 1;
    assume {:nonnull} Tmp_1803 != 0;
    assume Tmp_1803 > 0;
    assume {:nonnull} Tmp_1805 != 0;
    assume Tmp_1805 > 0;
    Tmp_1801 := 1;
    return;
}



procedure {:origName "_sdv_init50"} _sdv_init50();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init50"} _sdv_init50()
{
  var vslice_dummy_var_517: int;

  anon0:
    call {:si_unique_call 2532} vslice_dummy_var_517 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_518: int;

  anon0:
    call {:si_unique_call 2533} vslice_dummy_var_518 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "ParDeviceIo"} ParDeviceIo(actual_Pdx_45: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDeviceIo"} ParDeviceIo(actual_Pdx_45: int)
{
  var {:scalar} Tmp_1812: int;
  var {:pointer} ppnmMask: int;
  var {:scalar} Tmp_1815: int;
  var {:scalar} Tmp_1816: int;
  var {:pointer} Irp_73: int;
  var {:pointer} pAddress: int;
  var {:scalar} Tmp_1819: int;
  var {:scalar} Tmp_1820: int;
  var {:scalar} Tmp_1823: int;
  var {:scalar} Status_29: int;
  var {:scalar} NtStatus_1: int;
  var {:dopa} {:scalar} IdLength: int;
  var {:pointer} IrpBuffer_1: int;
  var {:scalar} Tmp_1825: int;
  var {:pointer} Event_8: int;
  var {:pointer} IrpSp_7: int;
  var {:pointer} Tmp_1826: int;
  var {:pointer} ptoNew: int;
  var {:pointer} Tmp_1827: int;
  var {:pointer} Tmp_1830: int;
  var {:scalar} Tmp_1831: int;
  var {:pointer} pAddress_1: int;
  var {:scalar} ioControlCode: int;
  var {:scalar} Tmp_1832: int;
  var {:scalar} Tmp_1833: int;
  var {:scalar} Tmp_1836: int;
  var {:scalar} Tmp_1837: int;
  var {:scalar} Tmp_1838: int;
  var {:scalar} Tmp_1839: int;
  var {:scalar} Tmp_1842: int;
  var {:pointer} Pdx_45: int;
  var boogieTmp: int;
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;

  anon0:
    call {:si_unique_call 2534} IdLength := __HAVOC_malloc(4);
    call {:si_unique_call 2535} vslice_dummy_var_519 := __HAVOC_malloc(4);
    Pdx_45 := actual_Pdx_45;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    havoc Irp_73;
    call {:si_unique_call 2536} IrpSp_7 := sdv_IoGetCurrentIrpStackLocation(Irp_73);
    assume {:nonnull} IrpSp_7 != 0;
    assume IrpSp_7 > 0;
    havoc ioControlCode;
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:partition} ioControlCode != 1441796;
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} ioControlCode != 1441800;
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} ioControlCode != 1441804;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} ioControlCode != 1441808;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} ioControlCode != 1441816;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} ioControlCode != 1441820;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:partition} ioControlCode != 1441824;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:partition} ioControlCode != 1441828;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:partition} ioControlCode != 1441836;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:partition} ioControlCode != 1441840;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} ioControlCode != 1441920;
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:partition} ioControlCode != 1441940;
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} ioControlCode != 1441944;
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} ioControlCode != 1441956;
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:partition} ioControlCode != 1441960;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} ioControlCode != 1441964;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    assume {:partition} ioControlCode != 1441968;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:partition} ioControlCode != 1442000;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    assume {:partition} ioControlCode != 1442004;
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:partition} ioControlCode == 1769500;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc ptoNew;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} ptoNew != 0;
    assume ptoNew > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon202_Then:
    assume {:partition} ioControlCode != 1769500;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon203_Then:
    assume {:partition} ioControlCode == 1442004;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon204_Then:
    assume {:partition} ioControlCode == 1442000;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon205_Then:
    assume {:partition} ioControlCode == 1441968;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    call {:si_unique_call 2537} sdv_RtlCopyMemory(0, 0, 4);
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L76;

  L76:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon165_Then:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L76;

  anon206_Then:
    assume {:partition} ioControlCode == 1441964;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    call {:si_unique_call 2538} boogieTmp := ParMLCCompatReset(Pdx_45);
    goto L83;

  L83:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon166_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    call {:si_unique_call 2539} boogieTmp := ParMLCECPReset(Pdx_45);
    goto L83;

  anon164_Then:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L83;

  anon207_Then:
    assume {:partition} ioControlCode == 1441960;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    call {:si_unique_call 2540} boogieTmp := ParDot3Disconnect(Pdx_45);
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon208_Then:
    assume {:partition} ioControlCode == 1441956;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    call {:si_unique_call 2541} boogieTmp := ParDot3Connect(Pdx_45);
    goto anon243_Then, anon243_Else;

  anon243_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon243_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon209_Then:
    assume {:partition} ioControlCode == 1441944;
    call {:si_unique_call 2542} ParpIoctlThreadUnlockPort(Pdx_45);
    goto L1;

  anon210_Then:
    assume {:partition} ioControlCode == 1441940;
    call {:si_unique_call 2543} ParpIoctlThreadLockPort(Pdx_45);
    goto L1;

  anon211_Then:
    assume {:partition} ioControlCode == 1441920;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    havoc Tmp_1815;
    goto anon242_Then, anon242_Else;

  anon242_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    havoc Tmp_1825;
    goto L93;

  L93:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon242_Then:
    goto L93;

  anon163_Then:
    goto L93;

  anon212_Then:
    assume {:partition} ioControlCode == 1441840;
    assume {:nonnull} IrpSp_7 != 0;
    assume IrpSp_7 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc vslice_dummy_var_241;
    havoc vslice_dummy_var_242;
    call {:si_unique_call 2544} NtStatus_1 := SppQueryDeviceId(Pdx_45, vslice_dummy_var_241, vslice_dummy_var_242, IdLength, 1);
    goto anon240_Then, anon240_Else;

  anon240_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto anon241_Then, anon241_Else;

  anon241_Else:
    assume {:partition} NtStatus_1 >= 0;
    assume {:nonnull} IdLength != 0;
    assume IdLength > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon241_Then:
    assume {:partition} 0 > NtStatus_1;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon240_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon213_Then:
    assume {:partition} ioControlCode == 1441836;
    call {:si_unique_call 2545} NtStatus_1 := ParPing(Pdx_45);
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon214_Then:
    assume {:partition} ioControlCode == 1441828;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc Tmp_1826;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Tmp_1826 != 0;
    assume Tmp_1826 > 0;
    call {:si_unique_call 2546} IeeeDetermineSupportedProtocols(Pdx_45);
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc Tmp_1827;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Tmp_1827 != 0;
    assume Tmp_1827 > 0;
    havoc vslice_dummy_var_243;
    Mem_T.INT4[Tmp_1827] := vslice_dummy_var_243;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon215_Then:
    assume {:partition} ioControlCode == 1441824;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc pAddress_1;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} pAddress_1 != 0;
    assume pAddress_1 > 0;
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} pAddress_1 != 0;
    assume pAddress_1 > 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto L119;

  L119:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon239_Then:
    goto L119;

  anon216_Then:
    assume {:partition} ioControlCode == 1441820;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc pAddress;
    NtStatus_1 := 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} pAddress != 0;
    assume pAddress > 0;
    goto anon236_Then, anon236_Else;

  anon236_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} pAddress != 0;
    assume pAddress > 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto anon237_Then, anon237_Else;

  anon237_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    havoc Tmp_1838;
    goto anon238_Then, anon238_Else;

  anon238_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    call {:si_unique_call 2547} NtStatus_1 := ParReverseToForward(Pdx_45);
    goto L134;

  L134:
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} NtStatus_1 >= 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    havoc Tmp_1833;
    goto L140;

  L140:
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} NtStatus_1 >= 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    assume {:nonnull} pAddress != 0;
    assume pAddress > 0;
    goto L127;

  L127:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon170_Then:
    assume {:partition} 0 > NtStatus_1;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto L127;

  anon168_Then:
    assume {:partition} 0 > NtStatus_1;
    goto L140;

  anon169_Then:
    goto L134;

  anon167_Then:
    goto L134;

  anon238_Then:
    NtStatus_1 := -1073741823;
    goto L127;

  anon237_Then:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    goto L127;

  anon236_Then:
    goto L127;

  anon217_Then:
    assume {:partition} ioControlCode == 1441816;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc ppnmMask;
    call {:si_unique_call 2548} ParTerminate(Pdx_45);
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} ppnmMask != 0;
    assume ppnmMask > 0;
    havoc vslice_dummy_var_244;
    havoc vslice_dummy_var_245;
    call {:si_unique_call 2549} boogieTmp := IeeeNegotiateMode(Pdx_45, vslice_dummy_var_244, vslice_dummy_var_245);
    assume {:nonnull} IrpSp_7 != 0;
    assume IrpSp_7 > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    havoc Tmp_1836;
    assume {:nonnull} ppnmMask != 0;
    assume ppnmMask > 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    havoc Tmp_1832;
    assume {:nonnull} ppnmMask != 0;
    assume ppnmMask > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon171_Then:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon218_Then:
    assume {:partition} ioControlCode == 1441808;
    call {:si_unique_call 2550} NtStatus_1 := SppQueryDeviceId(Pdx_45, 0, 0, IdLength, 0);
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} yogi_error != 1;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} NtStatus_1 == -1073741789;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc Tmp_1830;
    assume {:nonnull} IdLength != 0;
    assume IdLength > 0;
    assume {:nonnull} Tmp_1830 != 0;
    assume Tmp_1830 > 0;
    goto L1;

  anon172_Then:
    assume {:partition} NtStatus_1 != -1073741789;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon235_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon219_Then:
    assume {:partition} ioControlCode == 1441804;
    assume {:nonnull} IrpSp_7 != 0;
    assume IrpSp_7 > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc vslice_dummy_var_246;
    havoc vslice_dummy_var_247;
    call {:si_unique_call 2551} NtStatus_1 := SppQueryDeviceId(Pdx_45, vslice_dummy_var_246, vslice_dummy_var_247, IdLength, 0);
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} NtStatus_1 >= 0;
    assume {:nonnull} IdLength != 0;
    assume IdLength > 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon234_Then:
    assume {:partition} 0 > NtStatus_1;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} NtStatus_1 == -1073741789;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon173_Then:
    assume {:partition} NtStatus_1 != -1073741789;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon233_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon220_Then:
    assume {:partition} ioControlCode == 1441800;
    call {:si_unique_call 2552} Status_29 := ParInitializeDevice(Pdx_45);
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} BAND(Status_29, 8) != 0;
    goto anon232_Then, anon232_Else;

  anon232_Else:
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} BAND(Status_29, 128) != 0;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon175_Then:
    assume {:partition} BAND(Status_29, 128) == 0;
    goto L184;

  L184:
    call {:si_unique_call 2553} ParNotInitError(Pdx_45, Status_29);
    goto L1;

  anon232_Then:
    goto L184;

  anon174_Then:
    assume {:partition} BAND(Status_29, 8) == 0;
    goto L184;

  anon221_Then:
    assume {:partition} ioControlCode == 1441796;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    havoc IrpBuffer_1;
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    call {:si_unique_call 2554} Status_29 := corral_nondet();
    assume {:nonnull} Pdx_45 != 0;
    assume Pdx_45 > 0;
    call {:si_unique_call 2555} vslice_dummy_var_520 := corral_nondet();
    assume {:nonnull} IrpBuffer_1 != 0;
    assume IrpBuffer_1 > 0;
    goto anon222_Then, anon222_Else;

  anon222_Else:
    assume {:partition} 0 != 1;
    goto anon223_Then, anon223_Else;

  anon223_Else:
    goto anon224_Then, anon224_Else;

  anon224_Else:
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} BAND(Status_29, 128) != 0;
    Tmp_1820 := 1;
    goto L214;

  L214:
    Tmp_1812 := Tmp_1820;
    goto L215;

  L215:
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} Tmp_1812 != 0;
    goto L217;

  L217:
    assume {:nonnull} IrpBuffer_1 != 0;
    assume IrpBuffer_1 > 0;
    goto L218;

  L218:
    goto anon225_Then, anon225_Else;

  anon225_Else:
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} BAND(Status_29, 8) != 0;
    assume {:nonnull} IrpBuffer_1 != 0;
    assume IrpBuffer_1 > 0;
    goto L220;

  L220:
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} BAND(Status_29, 16) != 0;
    assume {:nonnull} IrpBuffer_1 != 0;
    assume IrpBuffer_1 > 0;
    goto L223;

  L223:
    assume {:nonnull} Irp_73 != 0;
    assume Irp_73 > 0;
    goto L1;

  anon179_Then:
    assume {:partition} BAND(Status_29, 16) == 0;
    goto L223;

  anon180_Then:
    assume {:partition} BAND(Status_29, 8) == 0;
    goto L220;

  anon225_Then:
    goto L220;

  anon177_Then:
    assume {:partition} Tmp_1812 == 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} 0 != 1;
    goto anon226_Then, anon226_Else;

  anon226_Else:
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} BAND(Status_29, 64) != 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} BAND(Status_29, 32) != 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} BAND(Status_29, 16) != 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} BAND(Status_29, 8) != 0;
    Tmp_1842 := 1;
    goto L235;

  L235:
    Tmp_1819 := Tmp_1842;
    goto L236;

  L236:
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} Tmp_1819 == 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} BAND(Status_29, 32) != 0;
    assume {:nonnull} IrpBuffer_1 != 0;
    assume IrpBuffer_1 > 0;
    goto L218;

  anon187_Then:
    assume {:partition} BAND(Status_29, 32) == 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} 0 != 1;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} BAND(Status_29, 8) != 0;
    goto anon227_Then, anon227_Else;

  anon227_Else:
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} BAND(Status_29, 16) == 0;
    Tmp_1839 := 1;
    goto L247;

  L247:
    Tmp_1816 := Tmp_1839;
    goto L248;

  L248:
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} Tmp_1816 != 0;
    assume {:nonnull} IrpBuffer_1 != 0;
    assume IrpBuffer_1 > 0;
    goto L218;

  anon191_Then:
    assume {:partition} Tmp_1816 == 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} BAND(Status_29, 8) != 0;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:partition} BAND(Status_29, 128) != 0;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:partition} BAND(Status_29, 16) == 0;
    assume {:nonnull} IrpBuffer_1 != 0;
    assume IrpBuffer_1 > 0;
    goto L218;

  anon194_Then:
    assume {:partition} BAND(Status_29, 16) != 0;
    goto L218;

  anon193_Then:
    assume {:partition} BAND(Status_29, 128) == 0;
    goto L218;

  anon192_Then:
    assume {:partition} BAND(Status_29, 8) == 0;
    goto L218;

  anon190_Then:
    assume {:partition} BAND(Status_29, 16) != 0;
    goto L242;

  L242:
    Tmp_1839 := 0;
    goto L247;

  anon227_Then:
    goto L242;

  anon189_Then:
    assume {:partition} BAND(Status_29, 8) == 0;
    goto L242;

  anon188_Then:
    assume {:partition} 0 == 1;
    goto anon228_Then, anon228_Else;

  anon228_Else:
    goto anon229_Then, anon229_Else;

  anon229_Else:
    goto anon230_Then, anon230_Else;

  anon230_Else:
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:partition} BAND(Status_29, 16) == 0;
    Tmp_1837 := 1;
    goto L262;

  L262:
    Tmp_1816 := Tmp_1837;
    goto L248;

  anon195_Then:
    assume {:partition} BAND(Status_29, 16) != 0;
    goto L255;

  L255:
    Tmp_1837 := 0;
    goto L262;

  anon230_Then:
    goto L255;

  anon229_Then:
    goto L255;

  anon228_Then:
    goto L255;

  anon186_Then:
    assume {:partition} Tmp_1819 != 0;
    goto L217;

  anon185_Then:
    assume {:partition} BAND(Status_29, 8) == 0;
    goto L229;

  L229:
    Tmp_1842 := 0;
    goto L235;

  anon184_Then:
    assume {:partition} BAND(Status_29, 16) == 0;
    goto L229;

  anon183_Then:
    assume {:partition} BAND(Status_29, 32) == 0;
    goto L229;

  anon182_Then:
    assume {:partition} BAND(Status_29, 64) == 0;
    goto L229;

  anon226_Then:
    goto L229;

  anon178_Then:
    assume {:partition} 0 == 1;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} BAND(Status_29, 128) != 0;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} BAND(Status_29, 64) != 0;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} BAND(Status_29, 32) != 0;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:partition} BAND(Status_29, 16) != 0;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    assume {:partition} BAND(Status_29, 8) != 0;
    Tmp_1823 := 1;
    goto L269;

  L269:
    Tmp_1819 := Tmp_1823;
    goto L236;

  anon199_Then:
    assume {:partition} BAND(Status_29, 8) == 0;
    goto L263;

  L263:
    Tmp_1823 := 0;
    goto L269;

  anon198_Then:
    assume {:partition} BAND(Status_29, 16) == 0;
    goto L263;

  anon197_Then:
    assume {:partition} BAND(Status_29, 32) == 0;
    goto L263;

  anon196_Then:
    assume {:partition} BAND(Status_29, 64) == 0;
    goto L263;

  anon181_Then:
    assume {:partition} BAND(Status_29, 128) == 0;
    goto L263;

  anon176_Then:
    assume {:partition} BAND(Status_29, 128) == 0;
    goto L209;

  L209:
    Tmp_1820 := 0;
    goto L214;

  anon224_Then:
    goto L209;

  anon223_Then:
    goto L209;

  anon222_Then:
    assume {:partition} 0 == 1;
    goto anon231_Then, anon231_Else;

  anon231_Else:
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:partition} BAND(Status_29, 64) != 0;
    goto anon201_Then, anon201_Else;

  anon201_Else:
    assume {:partition} BAND(Status_29, 128) != 0;
    Tmp_1831 := 1;
    goto L275;

  L275:
    Tmp_1812 := Tmp_1831;
    goto L215;

  anon201_Then:
    assume {:partition} BAND(Status_29, 128) == 0;
    goto L271;

  L271:
    Tmp_1831 := 0;
    goto L275;

  anon200_Then:
    assume {:partition} BAND(Status_29, 64) == 0;
    goto L271;

  anon231_Then:
    goto L271;
}



procedure {:origName "ParDeviceControl"} ParDeviceControl(actual_DeviceObject_31: int, actual_Irp_74: int) returns (Tmp_1844: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1844 == -1073741738 || Tmp_1844 == -1073741130 || Tmp_1844 == -1073741789 || Tmp_1844 == 0 || Tmp_1844 == -1073741811 || Tmp_1844 == 259 || Tmp_1844 == -1073741536;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParDeviceControl"} ParDeviceControl(actual_DeviceObject_31: int, actual_Irp_74: int) returns (Tmp_1844: int)
{
  var {:scalar} tryAllocSuccess: int;
  var {:scalar} locationLen: int;
  var {:pointer} ppnmMask_1: int;
  var {:pointer} ppnmMask_2: int;
  var {:pointer} Tmp_1845: int;
  var {:pointer} ppnmMask_3: int;
  var {:pointer} SerialTimeouts: int;
  var {:pointer} Tmp_1846: int;
  var {:pointer} Pdx_46: int;
  var {:scalar} Tmp_1847: int;
  var {:pointer} Tmp_1848: int;
  var {:scalar} Tmp_1849: int;
  var {:scalar} outBufLen: int;
  var {:scalar} Status_30: int;
  var {:pointer} SetInfo: int;
  var {:pointer} Tmp_1850: int;
  var {:scalar} sdv_1206: int;
  var {:pointer} IrpSp_8: int;
  var {:scalar} OldIrql_3: int;
  var {:scalar} Tmp_1851: int;
  var {:pointer} Tmp_1852: int;
  var {:scalar} sdv_1213: int;
  var {:scalar} needToSignalSemaphore_1: int;
  var {:scalar} Tmp_1853: int;
  var {:pointer} isSupported: int;
  var {:pointer} Tmp_1854: int;
  var {:scalar} sdv_1215: int;
  var {:scalar} Tmp_1855: int;
  var {:scalar} Tmp_1856: int;
  var {:pointer} DeviceObject_31: int;
  var {:pointer} Irp_74: int;
  var vslice_dummy_var_521: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;
  var vslice_dummy_var_524: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;

  anon0:
    DeviceObject_31 := actual_DeviceObject_31;
    Irp_74 := actual_Irp_74;
    assume {:nonnull} DeviceObject_31 != 0;
    assume DeviceObject_31 > 0;
    havoc Pdx_46;
    call {:si_unique_call 2556} IrpSp_8 := sdv_IoGetCurrentIrpStackLocation(Irp_74);
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    call {:si_unique_call 2557} Tmp_1844 := P4CompleteRequest(Irp_74, -1073741738, 0);
    goto L1;

  L1:
    return;

  anon153_Then:
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    call {:si_unique_call 2558} Tmp_1844 := P4CompleteRequest(Irp_74, -1073741738, 0);
    goto L1;

  anon107_Then:
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    call {:si_unique_call 2559} Tmp_1844 := P4CompleteRequest(Irp_74, -1073741130, 0);
    goto L1;

  anon108_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc SerialTimeouts;
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    Status_30 := -1073741789;
    goto L56;

  L56:
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} Status_30 == 259;
    call {:si_unique_call 2560} Tmp_1848 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1848 != 0;
    assume Tmp_1848 > 0;
    Mem_T.INT4[Tmp_1848] := OldIrql_3;
    call {:si_unique_call 2561} IoAcquireCancelSpinLock(Tmp_1848);
    assume {:nonnull} Tmp_1848 != 0;
    assume Tmp_1848 > 0;
    OldIrql_3 := Mem_T.INT4[Tmp_1848];
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    call {:si_unique_call 2562} sdv_1213 := sdv_IsListEmpty(0);
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} sdv_1213 != 0;
    call {:si_unique_call 2563} sdv_1206 := KeReadStateSemaphore(0);
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} sdv_1206 == 0;
    Tmp_1851 := 1;
    goto L77;

  L77:
    needToSignalSemaphore_1 := Tmp_1851;
    call {:si_unique_call 2564} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 2565} vslice_dummy_var_521 := sdv_IoSetCancelRoutine(Irp_74, li2bplFunctionConstant229);
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    call {:si_unique_call 2566} vslice_dummy_var_522 := sdv_InsertTailList(WorkQueue__PDO_EXTENSION(Pdx_46), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_74))));
    call {:si_unique_call 2567} IoReleaseCancelSpinLock(OldIrql_3);
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} needToSignalSemaphore_1 != 0;
    call {:si_unique_call 2568} vslice_dummy_var_523 := KeReleaseSemaphore(0, 0, 1, 0);
    goto L57;

  L57:
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} Status_30 != 259;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc vslice_dummy_var_248;
    call {:si_unique_call 2569} vslice_dummy_var_524 := P4CompleteRequest(Irp_74, Status_30, vslice_dummy_var_248);
    goto L94;

  L94:
    Tmp_1844 := Status_30;
    goto L1;

  anon123_Then:
    assume {:partition} Status_30 == 259;
    goto L94;

  anon127_Then:
    assume {:partition} needToSignalSemaphore_1 == 0;
    goto L57;

  anon126_Then:
    assume {:partition} sdv_1206 != 0;
    goto L71;

  L71:
    Tmp_1851 := 0;
    goto L77;

  anon125_Then:
    assume {:partition} sdv_1213 == 0;
    goto L71;

  anon124_Then:
    call {:si_unique_call 2570} IoReleaseCancelSpinLock(OldIrql_3);
    Status_30 := -1073741536;
    goto L57;

  anon122_Then:
    assume {:partition} Status_30 != 259;
    goto L57;

  anon159_Then:
    call {:si_unique_call 2571} sdv_RtlZeroMemory(0, 20);
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    assume {:nonnull} SerialTimeouts != 0;
    assume SerialTimeouts > 0;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon135_Then:
    Status_30 := -1073741811;
    goto L56;

  anon136_Then:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc SerialTimeouts;
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    Status_30 := -1073741789;
    goto L56;

  anon158_Then:
    assume {:nonnull} SerialTimeouts != 0;
    assume SerialTimeouts > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    Status_30 := -1073741811;
    goto L56;

  anon128_Then:
    Status_30 := 259;
    goto L56;

  anon137_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    havoc outBufLen;
    locationLen := sdv_1215;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} locationLen + 1 <= outBufLen;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Tmp_1849 := locationLen + 1;
    call {:si_unique_call 2572} sdv_RtlCopyMemory(0, 0, Tmp_1849);
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon157_Then:
    assume {:partition} outBufLen < locationLen + 1;
    Status_30 := -1073741789;
    goto L56;

  anon138_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    Status_30 := -1073741789;
    goto L56;

  anon121_Then:
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    havoc vslice_dummy_var_249;
    call {:si_unique_call 2573} tryAllocSuccess := PptTryAllocatePort(vslice_dummy_var_249);
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} tryAllocSuccess != 0;
    assume {:IndirectCall} true;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    havoc vslice_dummy_var_250;
    call {:si_unique_call 2574} PptFreePort#1(vslice_dummy_var_250);
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc Tmp_1852;
    assume {:nonnull} Tmp_1852 != 0;
    assume Tmp_1852 > 0;
    Mem_T.INT4[Tmp_1852] := 1;
    goto L129;

  L129:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon130_Then:
    assume {:partition} tryAllocSuccess == 0;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc Tmp_1845;
    assume {:nonnull} Tmp_1845 != 0;
    assume Tmp_1845 > 0;
    Mem_T.INT4[Tmp_1845] := 0;
    goto L129;

  anon129_Then:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc Tmp_1854;
    assume {:nonnull} Tmp_1854 != 0;
    assume Tmp_1854 > 0;
    Mem_T.INT4[Tmp_1854] := 0;
    goto L129;

  anon139_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    Status_30 := -1073741789;
    goto L56;

  anon120_Then:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc Tmp_1850;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    assume {:nonnull} Tmp_1850 != 0;
    assume Tmp_1850 > 0;
    havoc vslice_dummy_var_251;
    Mem_T.INT4[Tmp_1850] := vslice_dummy_var_251;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon140_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    Status_30 := -1073741789;
    goto L56;

  anon119_Then:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc Tmp_1846;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    assume {:nonnull} Tmp_1846 != 0;
    assume Tmp_1846 > 0;
    havoc vslice_dummy_var_252;
    Mem_T.INT4[Tmp_1846] := vslice_dummy_var_252;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon141_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    Status_30 := -1073741811;
    goto L56;

  anon131_Then:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc isSupported;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    assume {:nonnull} isSupported != 0;
    assume isSupported > 0;
    Status_30 := 0;
    goto L56;

  anon142_Then:
    goto L34;

  L34:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    Status_30 := 259;
    goto L56;

  anon111_Then:
    Status_30 := -1073741789;
    goto L56;

  anon143_Then:
    Status_30 := 259;
    goto L56;

  anon144_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc ppnmMask_1;
    assume {:nonnull} ppnmMask_1 != 0;
    assume ppnmMask_1 > 0;
    assume {:nonnull} ppnmMask_1 != 0;
    assume ppnmMask_1 > 0;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon118_Then:
    Status_30 := -1073741789;
    goto L56;

  anon145_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    Status_30 := -1073741789;
    goto L56;

  anon117_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    Status_30 := -1073741789;
    goto L56;

  anon132_Then:
    Status_30 := 259;
    goto L56;

  anon146_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    Status_30 := -1073741811;
    goto L56;

  anon116_Then:
    Status_30 := 259;
    goto L56;

  anon147_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    Status_30 := -1073741811;
    goto L56;

  anon115_Then:
    Status_30 := 259;
    goto L56;

  anon148_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    goto L178;

  L178:
    Status_30 := -1073741811;
    goto L56;

  anon114_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc ppnmMask_2;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    havoc Tmp_1847;
    assume {:nonnull} ppnmMask_2 != 0;
    assume ppnmMask_2 > 0;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    havoc Tmp_1853;
    assume {:nonnull} ppnmMask_2 != 0;
    assume ppnmMask_2 > 0;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon156_Then:
    goto L183;

  L183:
    Status_30 := 259;
    goto L56;

  anon155_Then:
    goto L183;

  anon133_Then:
    goto L178;

  anon149_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc ppnmMask_3;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    havoc Tmp_1856;
    assume {:nonnull} ppnmMask_3 != 0;
    assume ppnmMask_3 > 0;
    assume {:nonnull} Pdx_46 != 0;
    assume Pdx_46 > 0;
    havoc Tmp_1855;
    assume {:nonnull} ppnmMask_3 != 0;
    assume ppnmMask_3 > 0;
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    Status_30 := 0;
    goto L56;

  anon113_Then:
    Status_30 := -1073741789;
    goto L56;

  anon150_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    Status_30 := -1073741789;
    goto L56;

  anon112_Then:
    Status_30 := 259;
    goto L56;

  anon151_Then:
    goto L34;

  anon152_Then:
    assume {:nonnull} Irp_74 != 0;
    assume Irp_74 > 0;
    havoc SetInfo;
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    Status_30 := -1073741789;
    goto L56;

  anon154_Then:
    assume {:nonnull} SetInfo != 0;
    assume SetInfo > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    Status_30 := -1073741811;
    goto L56;

  anon134_Then:
    Status_30 := 259;
    goto L56;

  anon109_Then:
    assume {:nonnull} IrpSp_8 != 0;
    assume IrpSp_8 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    Status_30 := -1073741789;
    goto L56;

  anon110_Then:
    Status_30 := 259;
    goto L56;
}



procedure {:origName "ParInternalDeviceControl"} ParInternalDeviceControl(actual_DeviceObject_32: int, actual_Irp_75: int) returns (Tmp_1857: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1857 == -1073741738 || Tmp_1857 == -1073741130 || Tmp_1857 == -1073741811 || Tmp_1857 == 259 || Tmp_1857 == 0 || Tmp_1857 == -1073741789 || Tmp_1857 == -1073741536;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParInternalDeviceControl"} ParInternalDeviceControl(actual_DeviceObject_32: int, actual_Irp_75: int) returns (Tmp_1857: int)
{
  var {:pointer} pFdo: int;
  var {:pointer} portInfo: int;
  var {:pointer} pnpInfo: int;
  var {:scalar} Tmp_1858: int;
  var {:pointer} pParclassInfo: int;
  var {:pointer} Pdx_47: int;
  var {:scalar} Status_31: int;
  var {:scalar} sdv_1217: int;
  var {:pointer} IrpSp_9: int;
  var {:scalar} OldIrql_4: int;
  var {:pointer} Tmp_1859: int;
  var {:scalar} sdv_1222: int;
  var {:pointer} Tmp_1860: int;
  var {:scalar} needToSignalSemaphore_2: int;
  var {:pointer} fdx_35: int;
  var {:pointer} DeviceObject_32: int;
  var {:pointer} Irp_75: int;
  var vslice_dummy_var_525: int;
  var vslice_dummy_var_526: int;
  var vslice_dummy_var_527: int;
  var vslice_dummy_var_528: int;
  var vslice_dummy_var_529: int;
  var vslice_dummy_var_530: int;
  var vslice_dummy_var_531: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;

  anon0:
    DeviceObject_32 := actual_DeviceObject_32;
    Irp_75 := actual_Irp_75;
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    call {:si_unique_call 2575} IrpSp_9 := sdv_IoGetCurrentIrpStackLocation(Irp_75);
    assume {:nonnull} DeviceObject_32 != 0;
    assume DeviceObject_32 > 0;
    havoc Pdx_47;
    assume {:nonnull} Pdx_47 != 0;
    assume Pdx_47 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    havoc vslice_dummy_var_253;
    call {:si_unique_call 2576} vslice_dummy_var_525 := P4CompleteRequest(Irp_75, -1073741738, vslice_dummy_var_253);
    Tmp_1857 := -1073741738;
    goto L1;

  L1:
    return;

  anon72_Then:
    assume {:nonnull} Pdx_47 != 0;
    assume Pdx_47 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    havoc vslice_dummy_var_254;
    call {:si_unique_call 2577} vslice_dummy_var_526 := P4CompleteRequest(Irp_75, -1073741738, vslice_dummy_var_254);
    Tmp_1857 := -1073741738;
    goto L1;

  anon49_Then:
    assume {:nonnull} Pdx_47 != 0;
    assume Pdx_47 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    havoc vslice_dummy_var_255;
    call {:si_unique_call 2578} vslice_dummy_var_527 := P4CompleteRequest(Irp_75, -1073741130, vslice_dummy_var_255);
    Tmp_1857 := -1073741130;
    goto L1;

  anon50_Then:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto L34;

  L34:
    Status_31 := 259;
    goto L40;

  L40:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} Status_31 == 259;
    call {:si_unique_call 2579} Tmp_1860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1860 != 0;
    assume Tmp_1860 > 0;
    Mem_T.INT4[Tmp_1860] := OldIrql_4;
    call {:si_unique_call 2580} IoAcquireCancelSpinLock(Tmp_1860);
    assume {:nonnull} Tmp_1860 != 0;
    assume Tmp_1860 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_1860];
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 2581} sdv_1222 := sdv_IsListEmpty(0);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_1222 != 0;
    call {:si_unique_call 2582} sdv_1217 := KeReadStateSemaphore(0);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_1217 == 0;
    Tmp_1858 := 1;
    goto L61;

  L61:
    needToSignalSemaphore_2 := Tmp_1858;
    call {:si_unique_call 2583} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 2584} vslice_dummy_var_528 := sdv_IoSetCancelRoutine(Irp_75, li2bplFunctionConstant229);
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    assume {:nonnull} Pdx_47 != 0;
    assume Pdx_47 > 0;
    call {:si_unique_call 2585} vslice_dummy_var_529 := sdv_InsertTailList(WorkQueue__PDO_EXTENSION(Pdx_47), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_75))));
    call {:si_unique_call 2586} IoReleaseCancelSpinLock(OldIrql_4);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} needToSignalSemaphore_2 != 0;
    call {:si_unique_call 2587} vslice_dummy_var_530 := KeReleaseSemaphore(0, 0, 1, 0);
    goto L41;

  L41:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Status_31 != 259;
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    havoc vslice_dummy_var_256;
    call {:si_unique_call 2588} vslice_dummy_var_531 := P4CompleteRequest(Irp_75, Status_31, vslice_dummy_var_256);
    goto L78;

  L78:
    Tmp_1857 := Status_31;
    goto L1;

  anon56_Then:
    assume {:partition} Status_31 == 259;
    goto L78;

  anon60_Then:
    assume {:partition} needToSignalSemaphore_2 == 0;
    goto L41;

  anon59_Then:
    assume {:partition} sdv_1217 != 0;
    goto L55;

  L55:
    Tmp_1858 := 0;
    goto L61;

  anon58_Then:
    assume {:partition} sdv_1222 == 0;
    goto L55;

  anon57_Then:
    call {:si_unique_call 2589} IoReleaseCancelSpinLock(OldIrql_4);
    Status_31 := -1073741536;
    goto L41;

  anon55_Then:
    assume {:partition} Status_31 != 259;
    goto L41;

  anon61_Then:
    Status_31 := -1073741811;
    goto L40;

  anon62_Then:
    goto L34;

  anon63_Then:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    Status_31 := -1073741811;
    goto L40;

  anon54_Then:
    Status_31 := 259;
    goto L40;

  anon64_Then:
    goto L34;

  anon65_Then:
    assume {:nonnull} Pdx_47 != 0;
    assume Pdx_47 > 0;
    Status_31 := 259;
    goto L40;

  anon66_Then:
    goto L34;

  anon67_Then:
    goto L34;

  anon68_Then:
    goto L34;

  anon69_Then:
    goto L34;

  anon70_Then:
    Status_31 := 0;
    goto L40;

  anon71_Then:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} Pdx_47 != 0;
    assume Pdx_47 > 0;
    havoc Tmp_1859;
    assume {:nonnull} Tmp_1859 != 0;
    assume Tmp_1859 > 0;
    havoc fdx_35;
    assume {:nonnull} fdx_35 != 0;
    assume fdx_35 > 0;
    portInfo := PortInfo__FDO_EXTENSION(fdx_35);
    assume {:nonnull} fdx_35 != 0;
    assume fdx_35 > 0;
    pnpInfo := PnpInfo__FDO_EXTENSION(fdx_35);
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    havoc pParclassInfo;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} portInfo != 0;
    assume portInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} portInfo != 0;
    assume portInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pnpInfo != 0;
    assume pnpInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pnpInfo != 0;
    assume pnpInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pnpInfo != 0;
    assume pnpInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pnpInfo != 0;
    assume pnpInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} pParclassInfo != 0;
    assume pParclassInfo > 0;
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    Status_31 := 0;
    goto L40;

  anon53_Then:
    Status_31 := -1073741789;
    goto L40;

  anon51_Then:
    assume {:nonnull} IrpSp_9 != 0;
    assume IrpSp_9 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    havoc pFdo;
    assume {:nonnull} Pdx_47 != 0;
    assume Pdx_47 > 0;
    assume {:nonnull} pFdo != 0;
    assume pFdo > 0;
    assume {:nonnull} Irp_75 != 0;
    assume Irp_75 > 0;
    Status_31 := 0;
    goto L40;

  anon52_Then:
    Status_31 := -1073741789;
    goto L40;
}



procedure {:origName "ParpIoctlThreadUnlockPort"} ParpIoctlThreadUnlockPort(actual_Pdx_48: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParpIoctlThreadUnlockPort"} ParpIoctlThreadUnlockPort(actual_Pdx_48: int)
{
  var {:pointer} irp_1: int;
  var {:pointer} Pdx_48: int;
  var vslice_dummy_var_532: int;
  var vslice_dummy_var_533: int;

  anon0:
    call {:si_unique_call 2590} vslice_dummy_var_532 := __HAVOC_malloc(4);
    Pdx_48 := actual_Pdx_48;
    assume {:nonnull} Pdx_48 != 0;
    assume Pdx_48 > 0;
    havoc irp_1;
    assume {:nonnull} Pdx_48 != 0;
    assume Pdx_48 > 0;
    call {:si_unique_call 2591} vslice_dummy_var_533 := ParDeselectDevice(Pdx_48, 0);
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    return;
}



procedure {:origName "ParpIoctlThreadLockPort"} ParpIoctlThreadLockPort(actual_Pdx_49: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ParpIoctlThreadLockPort"} ParpIoctlThreadLockPort(actual_Pdx_49: int)
{
  var {:scalar} sdv_1226: int;
  var {:pointer} irp_2: int;
  var {:scalar} status_60: int;
  var {:pointer} Pdx_49: int;
  var vslice_dummy_var_534: int;

  anon0:
    call {:si_unique_call 2592} vslice_dummy_var_534 := __HAVOC_malloc(4);
    Pdx_49 := actual_Pdx_49;
    assume {:nonnull} Pdx_49 != 0;
    assume Pdx_49 > 0;
    havoc irp_2;
    call {:si_unique_call 2593} sdv_1226 := ParSelectDevice(Pdx_49, 1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_1226 != 0;
    assume {:nonnull} Pdx_49 != 0;
    assume Pdx_49 > 0;
    status_60 := 0;
    goto L13;

  L13:
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    return;

  anon3_Then:
    assume {:partition} sdv_1226 == 0;
    assume {:nonnull} Pdx_49 != 0;
    assume Pdx_49 > 0;
    status_60 := -1073741823;
    goto L13;
}



procedure {:origName "PptFdoCancelRemove"} PptFdoCancelRemove(actual_DeviceObject_33: int, actual_Irp_76: int) returns (Tmp_1865: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1865 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoCancelRemove"} PptFdoCancelRemove(actual_DeviceObject_33: int, actual_Irp_76: int) returns (Tmp_1865: int)
{
  var {:pointer} fdx_36: int;
  var {:pointer} DeviceObject_33: int;
  var {:pointer} Irp_76: int;

  anon0:
    DeviceObject_33 := actual_DeviceObject_33;
    Irp_76 := actual_Irp_76;
    assume {:nonnull} DeviceObject_33 != 0;
    assume DeviceObject_33 > 0;
    havoc fdx_36;
    call {:si_unique_call 2594} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_36 != 0;
    assume fdx_36 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} fdx_36 != 0;
    assume fdx_36 > 0;
    goto L9;

  L9:
    call {:si_unique_call 2595} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_76 != 0;
    assume Irp_76 > 0;
    call {:si_unique_call 2596} Tmp_1865 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_36, Irp_76);
    return;

  anon3_Then:
    goto L9;
}



procedure {:origName "PptFdoPnp"} PptFdoPnp(actual_Fdo_11: int, actual_Irp_77: int) returns (Tmp_1867: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoPnp"} PptFdoPnp(actual_Fdo_11: int, actual_Irp_77: int) returns (Tmp_1867: int)
{
  var {:pointer} irpSp_9: int;
  var {:scalar} Tmp_1869: int;
  var {:scalar} status_61: int;
  var {:pointer} Fdo_11: int;
  var {:pointer} Irp_77: int;
  var vslice_dummy_var_257: int;

  anon0:
    Fdo_11 := actual_Fdo_11;
    Irp_77 := actual_Irp_77;
    assume {:nonnull} Fdo_11 != 0;
    assume Fdo_11 > 0;
    call {:si_unique_call 2597} irpSp_9 := sdv_IoGetCurrentIrpStackLocation(Irp_77);
    call {:si_unique_call 2598} status_61 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_61 != 0;
    assume {:nonnull} Irp_77 != 0;
    assume Irp_77 > 0;
    havoc vslice_dummy_var_257;
    call {:si_unique_call 2599} Tmp_1867 := P4CompleteRequest(Irp_77, -1073741738, vslice_dummy_var_257);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon59_Then:
    assume {:partition} status_61 == 0;
    assume {:nonnull} irpSp_9 != 0;
    assume irpSp_9 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} irpSp_9 != 0;
    assume irpSp_9 > 0;
    havoc Tmp_1869;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_1869 != 24;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_1869 != 23;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_1869 != 22;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_1869 != 21;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_1869 != 20;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_1869 != 19;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_1869 != 18;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_1869 != 17;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_1869 != 16;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_1869 != 15;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_1869 != 14;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_1869 != 13;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_1869 != 12;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_1869 != 11;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_1869 != 10;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_1869 != 9;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_1869 != 8;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_1869 != 7;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_1869 != 6;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Tmp_1869 != 5;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Tmp_1869 != 4;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Tmp_1869 != 3;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume Tmp_1869 != 2;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume Tmp_1869 != 1;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume false;
    return;

  anon86_Then:
    assume Tmp_1869 == 0;
    assume {:IndirectCall} true;
    call {:si_unique_call 2600} Tmp_1867 := PptFdoStartDevice(Fdo_11, Irp_77);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon85_Then:
    assume Tmp_1869 == 1;
    assume {:IndirectCall} true;
    call {:si_unique_call 2601} Tmp_1867 := PptFdoQueryRemove(Fdo_11, Irp_77);
    goto L1;

  anon84_Then:
    assume Tmp_1869 == 2;
    assume {:IndirectCall} true;
    call {:si_unique_call 2602} Tmp_1867 := PptFdoRemoveDevice(Fdo_11, Irp_77);
    goto L1;

  anon83_Then:
    assume Tmp_1869 == 3;
    assume {:IndirectCall} true;
    call {:si_unique_call 2603} Tmp_1867 := PptFdoCancelRemove(Fdo_11, Irp_77);
    goto L1;

  anon82_Then:
    assume Tmp_1869 == 4;
    assume {:IndirectCall} true;
    call {:si_unique_call 2604} Tmp_1867 := PptFdoStopDevice(Fdo_11, Irp_77);
    goto L1;

  anon81_Then:
    assume Tmp_1869 == 5;
    assume {:IndirectCall} true;
    call {:si_unique_call 2605} Tmp_1867 := PptFdoQueryStop(Fdo_11, Irp_77);
    goto L1;

  anon80_Then:
    assume Tmp_1869 == 6;
    assume {:IndirectCall} true;
    call {:si_unique_call 2606} Tmp_1867 := PptFdoCancelStop(Fdo_11, Irp_77);
    goto L1;

  anon78_Then:
    assume Tmp_1869 == 7;
    assume {:IndirectCall} true;
    call {:si_unique_call 2607} Tmp_1867 := PptFdoQueryDeviceRelations(Fdo_11, Irp_77);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    assume Tmp_1869 == 8;
    assume {:IndirectCall} true;
    call {:si_unique_call 2608} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon76_Then:
    assume Tmp_1869 == 9;
    assume {:IndirectCall} true;
    call {:si_unique_call 2609} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon75_Then:
    assume Tmp_1869 == 10;
    assume {:IndirectCall} true;
    call {:si_unique_call 2610} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon74_Then:
    assume Tmp_1869 == 11;
    assume {:IndirectCall} true;
    call {:si_unique_call 2611} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon73_Then:
    assume Tmp_1869 == 12;
    assume {:IndirectCall} true;
    call {:si_unique_call 2612} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon72_Then:
    assume Tmp_1869 == 13;
    assume {:IndirectCall} true;
    call {:si_unique_call 2613} Tmp_1867 := PptFdoFilterResourceRequirements(Fdo_11, Irp_77);
    goto L1;

  anon71_Then:
    assume Tmp_1869 == 14;
    assume {:IndirectCall} true;
    call {:si_unique_call 2614} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon70_Then:
    assume Tmp_1869 == 15;
    assume {:IndirectCall} true;
    call {:si_unique_call 2615} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon69_Then:
    assume Tmp_1869 == 16;
    assume {:IndirectCall} true;
    call {:si_unique_call 2616} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon68_Then:
    assume Tmp_1869 == 17;
    assume {:IndirectCall} true;
    call {:si_unique_call 2617} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon67_Then:
    assume Tmp_1869 == 18;
    assume {:IndirectCall} true;
    call {:si_unique_call 2618} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon66_Then:
    assume Tmp_1869 == 19;
    assume {:IndirectCall} true;
    call {:si_unique_call 2619} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon65_Then:
    assume Tmp_1869 == 20;
    assume {:IndirectCall} true;
    call {:si_unique_call 2620} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon64_Then:
    assume Tmp_1869 == 21;
    assume {:IndirectCall} true;
    call {:si_unique_call 2621} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon63_Then:
    assume Tmp_1869 == 22;
    assume {:IndirectCall} true;
    call {:si_unique_call 2622} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon62_Then:
    assume Tmp_1869 == 23;
    assume {:IndirectCall} true;
    call {:si_unique_call 2623} Tmp_1867 := PptFdoSurpriseRemoval(Fdo_11, Irp_77);
    goto L1;

  anon61_Then:
    assume Tmp_1869 == 24;
    assume {:IndirectCall} true;
    call {:si_unique_call 2624} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;

  anon60_Then:
    call {:si_unique_call 2625} Tmp_1867 := PptFdoDefaultPnpHandler(Fdo_11, Irp_77);
    goto L1;
}



procedure {:origName "PptFdoQueryStop"} PptFdoQueryStop(actual_DeviceObject_34: int, actual_Irp_78: int) returns (Tmp_1870: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1870 == 17 || Tmp_1870 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoQueryStop"} PptFdoQueryStop(actual_DeviceObject_34: int, actual_Irp_78: int) returns (Tmp_1870: int)
{
  var {:scalar} handlesOpen: int;
  var {:pointer} fdx_38: int;
  var {:scalar} status_62: int;
  var {:pointer} DeviceObject_34: int;
  var {:pointer} Irp_78: int;
  var vslice_dummy_var_535: int;
  var vslice_dummy_var_536: int;
  var vslice_dummy_var_258: int;

  anon0:
    DeviceObject_34 := actual_DeviceObject_34;
    Irp_78 := actual_Irp_78;
    status_62 := 0;
    assume {:nonnull} DeviceObject_34 != 0;
    assume DeviceObject_34 > 0;
    havoc fdx_38;
    call {:si_unique_call 2626} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_38 != 0;
    assume fdx_38 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    handlesOpen := 0;
    goto L41;

  L41:
    call {:si_unique_call 2627} ExReleaseFastMutex(0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} handlesOpen != 0;
    status_62 := 17;
    assume {:nonnull} Irp_78 != 0;
    assume Irp_78 > 0;
    havoc vslice_dummy_var_258;
    call {:si_unique_call 2628} vslice_dummy_var_536 := P4CompleteRequest(Irp_78, status_62, vslice_dummy_var_258);
    assume {:nonnull} fdx_38 != 0;
    assume fdx_38 > 0;
    call {:si_unique_call 2629} vslice_dummy_var_535 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_38), Irp_78);
    goto L24;

  L24:
    Tmp_1870 := status_62;
    return;

  anon6_Then:
    assume {:partition} handlesOpen == 0;
    assume {:nonnull} Irp_78 != 0;
    assume Irp_78 > 0;
    call {:si_unique_call 2630} status_62 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_38, Irp_78);
    call {:si_unique_call 2631} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_38 != 0;
    assume fdx_38 > 0;
    call {:si_unique_call 2632} ExReleaseFastMutex(0);
    goto L24;

  anon5_Then:
    handlesOpen := 1;
    goto L41;
}



procedure {:origName "PptFdoQueryRemove"} PptFdoQueryRemove(actual_DeviceObject_35: int, actual_Irp_79: int) returns (Tmp_1872: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1872 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoQueryRemove"} PptFdoQueryRemove(actual_DeviceObject_35: int, actual_Irp_79: int) returns (Tmp_1872: int)
{
  var {:pointer} fdx_39: int;
  var {:pointer} DeviceObject_35: int;
  var {:pointer} Irp_79: int;

  anon0:
    DeviceObject_35 := actual_DeviceObject_35;
    Irp_79 := actual_Irp_79;
    assume {:nonnull} DeviceObject_35 != 0;
    assume DeviceObject_35 > 0;
    havoc fdx_39;
    call {:si_unique_call 2633} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_39 != 0;
    assume fdx_39 > 0;
    call {:si_unique_call 2634} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_79 != 0;
    assume Irp_79 > 0;
    call {:si_unique_call 2635} Tmp_1872 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_39, Irp_79);
    return;
}



procedure {:origName "PptFdoStartDevice"} PptFdoStartDevice(actual_DeviceObject_36: int, actual_Irp_80: int) returns (Tmp_1874: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoStartDevice"} PptFdoStartDevice(actual_DeviceObject_36: int, actual_Irp_80: int) returns (Tmp_1874: int)
{
  var {:dopa} {:scalar} foundDma: int;
  var {:pointer} Tmp_1875: int;
  var {:pointer} Tmp_1876: int;
  var {:pointer} Tmp_1877: int;
  var {:pointer} Tmp_1878: int;
  var {:pointer} Tmp_1879: int;
  var {:dopa} {:scalar} foundPort: int;
  var {:dopa} {:scalar} foundIrq_1: int;
  var {:dopa} {:scalar} DellNationalPC87364: int;
  var {:pointer} fdx_40: int;
  var {:pointer} Tmp_1881: int;
  var {:scalar} status_63: int;
  var {:dopa} {:scalar} DisableWarmPoll: int;
  var {:pointer} DeviceObject_36: int;
  var {:pointer} Irp_80: int;
  var boogieTmp: int;
  var vslice_dummy_var_537: int;
  var vslice_dummy_var_538: int;
  var vslice_dummy_var_539: int;
  var vslice_dummy_var_540: int;
  var vslice_dummy_var_541: int;
  var vslice_dummy_var_542: int;
  var vslice_dummy_var_543: int;
  var vslice_dummy_var_259: int;

  anon0:
    call {:si_unique_call 2636} foundDma := __HAVOC_malloc(4);
    call {:si_unique_call 2637} foundPort := __HAVOC_malloc(4);
    call {:si_unique_call 2638} foundIrq_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2639} DellNationalPC87364 := __HAVOC_malloc(4);
    call {:si_unique_call 2640} DisableWarmPoll := __HAVOC_malloc(4);
    DeviceObject_36 := actual_DeviceObject_36;
    Irp_80 := actual_Irp_80;
    call {:si_unique_call 2641} Tmp_1875 := __HAVOC_malloc(76);
    call {:si_unique_call 2642} Tmp_1876 := __HAVOC_malloc(80);
    call {:si_unique_call 2643} Tmp_1877 := __HAVOC_malloc(76);
    call {:si_unique_call 2644} Tmp_1878 := __HAVOC_malloc(60);
    call {:si_unique_call 2645} Tmp_1879 := __HAVOC_malloc(76);
    call {:si_unique_call 2646} Tmp_1881 := __HAVOC_malloc(64);
    assume {:nonnull} DeviceObject_36 != 0;
    assume DeviceObject_36 > 0;
    havoc fdx_40;
    assume {:nonnull} foundPort != 0;
    assume foundPort > 0;
    Mem_T.INT4[foundPort] := 0;
    assume {:nonnull} foundIrq_1 != 0;
    assume foundIrq_1 > 0;
    Mem_T.INT4[foundIrq_1] := 0;
    assume {:nonnull} foundDma != 0;
    assume foundDma > 0;
    Mem_T.INT4[foundDma] := 0;
    call {:si_unique_call 2647} status_63 := PptPnpBounceAndCatchPnpIrp(fdx_40, Irp_80);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_63 >= 0;
    goto L18;

  L18:
    call {:si_unique_call 2648} status_63 := PptPnpStartScanCmResourceList(fdx_40, Irp_80, foundPort, foundIrq_1, foundDma);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_63 < 0;
    goto L67;

  L67:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} status_63 >= 0;
    call {:si_unique_call 2649} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    call {:si_unique_call 2650} ExReleaseFastMutex(0);
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    assume {:nonnull} DisableWarmPoll != 0;
    assume DisableWarmPoll > 0;
    Mem_T.INT4[DisableWarmPoll] := 0;
    Tmp_1877 := strConst__li2bpl22;
    Tmp_1881 := strConst__li2bpl116;
    call {:si_unique_call 2651} vslice_dummy_var_542 := PptRegGetDword(1, Tmp_1877, Tmp_1881, DisableWarmPoll);
    assume {:nonnull} DisableWarmPoll != 0;
    assume DisableWarmPoll > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.INT4[DisableWarmPoll] == 0;
    Tmp_1875 := strConst__li2bpl22;
    Tmp_1878 := strConst__li2bpl117;
    call {:si_unique_call 2652} vslice_dummy_var_543 := PptRegGetDword(1, Tmp_1875, Tmp_1878, WarmPollPeriod);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} 5 > Mem_T.INT4[WarmPollPeriod];
    Mem_T.INT4[WarmPollPeriod] := 5;
    goto L92;

  L92:
    call {:si_unique_call 2653} vslice_dummy_var_539 := P5FdoCreateThread(fdx_40);
    goto L68;

  L68:
    call {:si_unique_call 2654} vslice_dummy_var_538 := P4CompleteRequest(Irp_80, status_63, 0);
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    call {:si_unique_call 2655} vslice_dummy_var_540 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_40), Irp_80);
    Tmp_1874 := status_63;
    goto LM2;

  LM2:
    return;

  anon49_Then:
    assume {:partition} Mem_T.INT4[WarmPollPeriod] >= 5;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Mem_T.INT4[WarmPollPeriod] > 20;
    Mem_T.INT4[WarmPollPeriod] := 20;
    goto L92;

  anon50_Then:
    assume {:partition} 20 >= Mem_T.INT4[WarmPollPeriod];
    goto L92;

  anon48_Then:
    assume {:partition} Mem_T.INT4[DisableWarmPoll] != 0;
    goto L68;

  anon47_Then:
    goto L68;

  anon46_Then:
    assume {:partition} 0 > status_63;
    goto L68;

  anon37_Then:
    assume {:partition} 0 <= status_63;
    assume {:nonnull} foundDma != 0;
    assume foundDma > 0;
    assume {:nonnull} foundIrq_1 != 0;
    assume foundIrq_1 > 0;
    assume {:nonnull} foundPort != 0;
    assume foundPort > 0;
    call {:si_unique_call 2656} status_63 := PptPnpStartValidateResources(DeviceObject_36, Mem_T.INT4[foundPort], Mem_T.INT4[foundIrq_1], Mem_T.INT4[foundDma]);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_63 < 0;
    goto L67;

  anon38_Then:
    assume {:partition} 0 <= status_63;
    assume {:nonnull} DellNationalPC87364 != 0;
    assume DellNationalPC87364 > 0;
    Mem_T.INT4[DellNationalPC87364] := 0;
    Tmp_1879 := strConst__li2bpl22;
    Tmp_1876 := strConst__li2bpl115;
    call {:si_unique_call 2657} vslice_dummy_var_541 := PptRegGetDword(1, Tmp_1879, Tmp_1876, DellNationalPC87364);
    assume {:nonnull} DellNationalPC87364 != 0;
    assume DellNationalPC87364 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Mem_T.INT4[DellNationalPC87364] != 0;
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L42;

  L42:
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    havoc vslice_dummy_var_259;
    call {:si_unique_call 2658} PptDellNationalPC87364WorkAround(vslice_dummy_var_259);
    goto L36;

  L36:
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    call {:si_unique_call 2659} boogieTmp := PptInitiate1284_3(fdx_40);
    call {:si_unique_call 2660} status_63 := PptDetectChipFilter(fdx_40);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_63 >= 0;
    goto L54;

  L54:
    call {:si_unique_call 2661} status_63 := PptWmiInitWmi(DeviceObject_36);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} status_63 < 0;
    goto L67;

  anon44_Then:
    assume {:partition} 0 <= status_63;
    call {:si_unique_call 2662} status_63 := IoSetDeviceInterfaceState(0, 1);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_63 >= 0;
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    goto L67;

  anon45_Then:
    assume {:partition} 0 > status_63;
    status_63 := -1073741637;
    goto L67;

  anon43_Then:
    assume {:partition} 0 > status_63;
    call {:si_unique_call 2663} vslice_dummy_var_537 := PptDetectPortType(fdx_40);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L54;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:nonnull} fdx_40 != 0;
    assume fdx_40 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto L42;

  anon42_Then:
    goto L36;

  anon40_Then:
    goto L36;

  anon39_Then:
    assume {:partition} Mem_T.INT4[DellNationalPC87364] == 0;
    goto L36;

  anon35_Then:
    assume {:partition} 0 > status_63;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} status_63 != -1073741637;
    goto L67;

  anon36_Then:
    assume {:partition} status_63 == -1073741637;
    goto L18;
}



procedure {:origName "PptFdoStopDevice"} PptFdoStopDevice(actual_DeviceObject_37: int, actual_Irp_81: int) returns (Tmp_1882: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1882 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoStopDevice"} PptFdoStopDevice(actual_DeviceObject_37: int, actual_Irp_81: int) returns (Tmp_1882: int)
{
  var {:pointer} fdx_41: int;
  var {:pointer} DeviceObject_37: int;
  var {:pointer} Irp_81: int;

  anon0:
    DeviceObject_37 := actual_DeviceObject_37;
    Irp_81 := actual_Irp_81;
    assume {:nonnull} DeviceObject_37 != 0;
    assume DeviceObject_37 > 0;
    havoc fdx_41;
    call {:si_unique_call 2664} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_41 != 0;
    assume fdx_41 > 0;
    assume {:nonnull} fdx_41 != 0;
    assume fdx_41 > 0;
    call {:si_unique_call 2665} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_81 != 0;
    assume Irp_81 > 0;
    call {:si_unique_call 2666} Tmp_1882 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_41, Irp_81);
    return;
}



procedure {:origName "PptDellNationalPC87364WorkAround"} PptDellNationalPC87364WorkAround(actual_EcpController: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDellNationalPC87364WorkAround"} PptDellNationalPC87364WorkAround(actual_EcpController: int)
{
  var {:pointer} Tmp_1884: int;
  var {:scalar} oldIrql: int;
  var {:pointer} EcpController: int;
  var vslice_dummy_var_544: int;

  anon0:
    call {:si_unique_call 2667} vslice_dummy_var_544 := __HAVOC_malloc(4);
    EcpController := actual_EcpController;
    call {:si_unique_call 2668} Tmp_1884 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1884 != 0;
    assume Tmp_1884 > 0;
    Mem_T.INT4[Tmp_1884] := oldIrql;
    call {:si_unique_call 2669} sdv_KeRaiseIrql(31, Tmp_1884);
    assume {:nonnull} Tmp_1884 != 0;
    assume Tmp_1884 > 0;
    oldIrql := Mem_T.INT4[Tmp_1884];
    call {:si_unique_call 2670} sdv_KeLowerIrql(oldIrql);
    return;
}



procedure {:origName "PptFdoFilterResourceRequirements"} PptFdoFilterResourceRequirements(actual_DeviceObject_38: int, actual_Irp_82: int) returns (Tmp_1886: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoFilterResourceRequirements"} PptFdoFilterResourceRequirements(actual_DeviceObject_38: int, actual_Irp_82: int) returns (Tmp_1886: int)
{
  var {:pointer} IrpStack: int;
  var {:pointer} pResourceRequirementsIn: int;
  var {:dopa} {:scalar} filterResourceMethod: int;
  var {:scalar} sdv_1254: int;
  var {:scalar} sdv_1255: int;
  var {:pointer} fdx_42: int;
  var {:scalar} status_64: int;
  var {:pointer} Tmp_1888: int;
  var {:pointer} DeviceObject_38: int;
  var {:pointer} Irp_82: int;
  var vslice_dummy_var_545: int;
  var vslice_dummy_var_546: int;
  var vslice_dummy_var_547: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;

  anon0:
    call {:si_unique_call 2671} filterResourceMethod := __HAVOC_malloc(4);
    DeviceObject_38 := actual_DeviceObject_38;
    Irp_82 := actual_Irp_82;
    call {:si_unique_call 2672} Tmp_1888 := __HAVOC_malloc(84);
    assume {:nonnull} DeviceObject_38 != 0;
    assume DeviceObject_38 > 0;
    havoc fdx_42;
    assume {:nonnull} filterResourceMethod != 0;
    assume filterResourceMethod > 0;
    Mem_T.INT4[filterResourceMethod] := 1;
    call {:si_unique_call 2673} status_64 := PptPnpBounceAndCatchPnpIrp(fdx_42, Irp_82);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_64 >= 0;
    goto L15;

  L15:
    assume {:nonnull} Irp_82 != 0;
    assume Irp_82 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2674} IrpStack := sdv_IoGetCurrentIrpStackLocation(Irp_82);
    assume {:nonnull} IrpStack != 0;
    assume IrpStack > 0;
    havoc pResourceRequirementsIn;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} pResourceRequirementsIn == 0;
    goto L22;

  L22:
    assume {:nonnull} Irp_82 != 0;
    assume Irp_82 > 0;
    havoc vslice_dummy_var_260;
    call {:si_unique_call 2675} vslice_dummy_var_545 := P4CompleteRequest(Irp_82, status_64, vslice_dummy_var_260);
    assume {:nonnull} fdx_42 != 0;
    assume fdx_42 > 0;
    call {:si_unique_call 2676} vslice_dummy_var_546 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_42), Irp_82);
    Tmp_1886 := status_64;
    return;

  anon24_Then:
    assume {:partition} pResourceRequirementsIn != 0;
    goto L18;

  L18:
    Tmp_1888 := strConst__li2bpl118;
    assume {:nonnull} fdx_42 != 0;
    assume fdx_42 > 0;
    havoc vslice_dummy_var_261;
    call {:si_unique_call 2677} vslice_dummy_var_547 := PptRegGetDeviceParameterDword(vslice_dummy_var_261, Tmp_1888, filterResourceMethod);
    assume {:nonnull} filterResourceMethod != 0;
    assume filterResourceMethod > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.INT4[filterResourceMethod] != 0;
    assume {:nonnull} filterResourceMethod != 0;
    assume filterResourceMethod > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[filterResourceMethod] == 1;
    call {:si_unique_call 2678} sdv_1255 := PptPnpFilterExistsNonIrqResourceList(pResourceRequirementsIn);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_1255 != 0;
    call {:si_unique_call 2679} PptPnpFilterRemoveIrqResourceLists(pResourceRequirementsIn);
    goto L22;

  anon21_Then:
    assume {:partition} sdv_1255 == 0;
    call {:si_unique_call 2680} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists(pResourceRequirementsIn);
    goto L22;

  anon23_Then:
    assume {:partition} Mem_T.INT4[filterResourceMethod] != 1;
    goto L22;

  anon20_Then:
    assume {:partition} Mem_T.INT4[filterResourceMethod] == 0;
    call {:si_unique_call 2681} sdv_1254 := PptPnpFilterExistsNonIrqResourceList(pResourceRequirementsIn);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_1254 != 0;
    call {:si_unique_call 2682} PptPnpFilterRemoveIrqResourceLists(pResourceRequirementsIn);
    goto L22;

  anon22_Then:
    assume {:partition} sdv_1254 == 0;
    goto L22;

  anon19_Then:
    assume {:nonnull} Irp_82 != 0;
    assume Irp_82 > 0;
    havoc pResourceRequirementsIn;
    goto L18;

  anon17_Then:
    assume {:partition} 0 > status_64;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_64 != -1073741637;
    goto L22;

  anon18_Then:
    assume {:partition} status_64 == -1073741637;
    goto L15;
}



procedure {:origName "PptFdoSurpriseRemoval"} PptFdoSurpriseRemoval(actual_DeviceObject_39: int, actual_Irp_83: int) returns (Tmp_1889: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1889 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoSurpriseRemoval"} PptFdoSurpriseRemoval(actual_DeviceObject_39: int, actual_Irp_83: int) returns (Tmp_1889: int)
{
  var {:pointer} Tmp_1890: int;
  var {:scalar} cancelIrql_1: int;
  var {:scalar} sdv_1256: int;
  var {:pointer} sdv_1257: int;
  var {:pointer} fdx_43: int;
  var {:pointer} nextIrp_1: int;
  var {:pointer} DeviceObject_39: int;
  var {:pointer} Irp_83: int;
  var vslice_dummy_var_548: int;
  var vslice_dummy_var_262: int;

  anon0:
    DeviceObject_39 := actual_DeviceObject_39;
    Irp_83 := actual_Irp_83;
    assume {:nonnull} DeviceObject_39 != 0;
    assume DeviceObject_39 > 0;
    havoc fdx_43;
    call {:si_unique_call 2683} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_43 != 0;
    assume fdx_43 > 0;
    call {:si_unique_call 2684} ExReleaseFastMutex(0);
    call {:si_unique_call 2685} Tmp_1890 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1890 != 0;
    assume Tmp_1890 > 0;
    Mem_T.INT4[Tmp_1890] := cancelIrql_1;
    call {:si_unique_call 2686} IoAcquireCancelSpinLock(Tmp_1890);
    assume {:nonnull} Tmp_1890 != 0;
    assume Tmp_1890 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_1890];
    goto L17;

  L17:
    call {:si_unique_call 2687} Tmp_1890, cancelIrql_1, sdv_1256, sdv_1257, nextIrp_1 := PptFdoSurpriseRemoval_loop_L17(Tmp_1890, cancelIrql_1, sdv_1256, sdv_1257, fdx_43, nextIrp_1, DeviceObject_39);
    goto L17_last;

  L17_last:
    call {:si_unique_call 2695} sdv_1256 := sdv_IsListEmpty(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_1256 != 0;
    call {:si_unique_call 2688} IoReleaseCancelSpinLock(cancelIrql_1);
    call {:si_unique_call 2689} vslice_dummy_var_548 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} fdx_43 != 0;
    assume fdx_43 > 0;
    assume {:nonnull} Irp_83 != 0;
    assume Irp_83 > 0;
    call {:si_unique_call 2690} Tmp_1889 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_43, Irp_83);
    return;

  anon3_Then:
    assume {:partition} sdv_1256 == 0;
    assume {:nonnull} fdx_43 != 0;
    assume fdx_43 > 0;
    havoc vslice_dummy_var_262;
    call {:si_unique_call 2691} sdv_1257 := sdv_containing_record(vslice_dummy_var_262, 88);
    nextIrp_1 := sdv_1257;
    assume {:nonnull} nextIrp_1 != 0;
    assume nextIrp_1 > 0;
    assume {:nonnull} nextIrp_1 != 0;
    assume nextIrp_1 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(nextIrp_1)] := cancelIrql_1;
    assume {:nonnull} nextIrp_1 != 0;
    assume nextIrp_1 > 0;
    call {:si_unique_call 2692} PptCancelRoutine(DeviceObject_39, nextIrp_1);
    call {:si_unique_call 2693} Tmp_1890 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1890 != 0;
    assume Tmp_1890 > 0;
    Mem_T.INT4[Tmp_1890] := cancelIrql_1;
    call {:si_unique_call 2694} IoAcquireCancelSpinLock(Tmp_1890);
    assume {:nonnull} Tmp_1890 != 0;
    assume Tmp_1890 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_1890];
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PptFdoCancelStop"} PptFdoCancelStop(actual_DeviceObject_40: int, actual_Irp_84: int) returns (Tmp_1891: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1891 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoCancelStop"} PptFdoCancelStop(actual_DeviceObject_40: int, actual_Irp_84: int) returns (Tmp_1891: int)
{
  var {:pointer} fdx_44: int;
  var {:pointer} DeviceObject_40: int;
  var {:pointer} Irp_84: int;

  anon0:
    DeviceObject_40 := actual_DeviceObject_40;
    Irp_84 := actual_Irp_84;
    assume {:nonnull} DeviceObject_40 != 0;
    assume DeviceObject_40 > 0;
    havoc fdx_44;
    call {:si_unique_call 2696} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_44 != 0;
    assume fdx_44 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} fdx_44 != 0;
    assume fdx_44 > 0;
    goto L9;

  L9:
    call {:si_unique_call 2697} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_84 != 0;
    assume Irp_84 > 0;
    call {:si_unique_call 2698} Tmp_1891 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(fdx_44, Irp_84);
    return;

  anon3_Then:
    goto L9;
}



procedure {:origName "_sdv_init32"} _sdv_init32();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init32"} _sdv_init32()
{
  var vslice_dummy_var_549: int;

  anon0:
    call {:si_unique_call 2699} vslice_dummy_var_549 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptFdoDefaultPnpHandler"} PptFdoDefaultPnpHandler(actual_DeviceObject_41: int, actual_Irp_85: int) returns (Tmp_1895: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1895 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoDefaultPnpHandler"} PptFdoDefaultPnpHandler(actual_DeviceObject_41: int, actual_Irp_85: int) returns (Tmp_1895: int)
{
  var {:pointer} DeviceObject_41: int;
  var {:pointer} Irp_85: int;
  var vslice_dummy_var_263: int;

  anon0:
    DeviceObject_41 := actual_DeviceObject_41;
    Irp_85 := actual_Irp_85;
    assume {:nonnull} DeviceObject_41 != 0;
    assume DeviceObject_41 > 0;
    havoc vslice_dummy_var_263;
    call {:si_unique_call 2700} Tmp_1895 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(vslice_dummy_var_263, Irp_85);
    return;
}



procedure {:origName "PptFdoRemoveDevice"} PptFdoRemoveDevice(actual_Fdo_12: int, actual_Irp_86: int) returns (Tmp_1897: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1897 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoRemoveDevice"} PptFdoRemoveDevice(actual_Fdo_12: int, actual_Irp_86: int) returns (Tmp_1897: int)
{
  var {:scalar} Tmp_1898: int;
  var {:scalar} daisyChainId_1: int;
  var {:pointer} pdo_3: int;
  var {:pointer} Tmp_1900: int;
  var {:scalar} daisyChainMaxId: int;
  var {:scalar} Tmp_1901: int;
  var {:pointer} pdo_4: int;
  var {:pointer} fdx_45: int;
  var {:pointer} threadObjPointer: int;
  var {:pointer} Tmp_1903: int;
  var {:pointer} pdo_5: int;
  var {:scalar} status_65: int;
  var {:scalar} Tmp_1904: int;
  var {:pointer} Tmp_1905: int;
  var {:pointer} Fdo_12: int;
  var {:pointer} Irp_86: int;
  var vslice_dummy_var_550: int;
  var vslice_dummy_var_551: int;
  var vslice_dummy_var_552: int;
  var vslice_dummy_var_553: int;
  var vslice_dummy_var_554: int;
  var vslice_dummy_var_264: int;

  anon0:
    Fdo_12 := actual_Fdo_12;
    Irp_86 := actual_Irp_86;
    call {:si_unique_call 2701} Tmp_1900 := __HAVOC_malloc(16);
    call {:si_unique_call 2702} Tmp_1903 := __HAVOC_malloc(16);
    call {:si_unique_call 2703} Tmp_1905 := __HAVOC_malloc(16);
    assume {:nonnull} Fdo_12 != 0;
    assume Fdo_12 > 0;
    havoc fdx_45;
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    havoc pdo_4;
    call {:si_unique_call 2704} P4DestroyPdo(pdo_4);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto L7;

  L7:
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L22;

  L22:
    daisyChainMaxId := 1;
    daisyChainId_1 := 0;
    goto L24;

  L24:
    call {:si_unique_call 2705} Tmp_1898, daisyChainId_1, Tmp_1900, Tmp_1901, Tmp_1903, pdo_5, Tmp_1904, Tmp_1905 := PptFdoRemoveDevice_loop_L24(Tmp_1898, daisyChainId_1, Tmp_1900, daisyChainMaxId, Tmp_1901, fdx_45, Tmp_1903, pdo_5, Tmp_1904, Tmp_1905);
    goto L24_last;

  L24_last:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} daisyChainMaxId >= daisyChainId_1;
    Tmp_1898 := daisyChainId_1;
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    havoc Tmp_1903;
    assume {:nonnull} Tmp_1903 != 0;
    assume Tmp_1903 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_1901 := daisyChainId_1;
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    havoc Tmp_1900;
    assume {:nonnull} Tmp_1900 != 0;
    assume Tmp_1900 > 0;
    havoc pdo_5;
    call {:si_unique_call 2706} P4DestroyPdo(pdo_5);
    Tmp_1904 := daisyChainId_1;
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    havoc Tmp_1905;
    assume {:nonnull} Tmp_1905 != 0;
    assume Tmp_1905 > 0;
    goto L27;

  L27:
    daisyChainId_1 := daisyChainId_1 + 1;
    goto L27_dummy;

  L27_dummy:
    assume false;
    return;

  anon21_Then:
    goto L27;

  anon16_Then:
    assume {:partition} daisyChainId_1 > daisyChainMaxId;
    call {:si_unique_call 2707} ExAcquireFastMutex(0);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    call {:si_unique_call 2708} ExReleaseFastMutex(0);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    call {:si_unique_call 2709} threadObjPointer := _InlineInterlockedExchangePointer(ThreadObjectPointer__FDO_EXTENSION(fdx_45), 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} threadObjPointer != 0;
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    call {:si_unique_call 2710} vslice_dummy_var_554 := KeSetEvent(FdoThreadEvent__FDO_EXTENSION(fdx_45), 0, 1);
    call {:si_unique_call 2711} vslice_dummy_var_551 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 2712} vslice_dummy_var_552 := sdv_ObDereferenceObject(0);
    goto L47;

  L47:
    call {:si_unique_call 2713} vslice_dummy_var_550 := IoWMIRegistrationControl(0, 2);
    call {:si_unique_call 2714} vslice_dummy_var_553 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    assume {:nonnull} Irp_86 != 0;
    assume Irp_86 > 0;
    call {:si_unique_call 2715} sdv_IoSkipCurrentIrpStackLocation(Irp_86);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    havoc vslice_dummy_var_264;
    call {:si_unique_call 2716} status_65 := sdv_IoCallDriver(vslice_dummy_var_264, Irp_86);
    call {:si_unique_call 2717} sdv_IoReleaseRemoveLockAndWait(0, 0);
    call {:si_unique_call 2718} RtlFreeUnicodeString(0);
    call {:si_unique_call 2719} RtlFreeUnicodeString(0);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    call {:si_unique_call 2720} sdv_ExFreePool(0);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto L82;

  L82:
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2721} sdv_ExFreePool(0);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto L87;

  L87:
    call {:si_unique_call 2722} IoDetachDevice(0);
    call {:si_unique_call 2723} IoDeleteDevice(0);
    Tmp_1897 := status_65;
    return;

  anon19_Then:
    goto L87;

  anon18_Then:
    goto L82;

  anon17_Then:
    assume {:partition} threadObjPointer == 0;
    goto L47;

  anon15_Then:
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    havoc pdo_3;
    call {:si_unique_call 2724} P4DestroyPdo(pdo_3);
    assume {:nonnull} fdx_45 != 0;
    assume fdx_45 > 0;
    goto L22;

  anon20_Then:
    goto L7;
}



procedure {:origName "PptFdoQueryDeviceRelations"} PptFdoQueryDeviceRelations(actual_DeviceObject_42: int, actual_Irp_87: int) returns (Tmp_1906: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFdoQueryDeviceRelations"} PptFdoQueryDeviceRelations(actual_DeviceObject_42: int, actual_Irp_87: int) returns (Tmp_1906: int)
{
  var {:pointer} irpSp_10: int;
  var {:scalar} type_1: int;
  var {:pointer} DeviceObject_42: int;
  var {:pointer} Irp_87: int;
  var vslice_dummy_var_265: int;

  anon0:
    DeviceObject_42 := actual_DeviceObject_42;
    Irp_87 := actual_Irp_87;
    call {:si_unique_call 2725} irpSp_10 := sdv_IoGetCurrentIrpStackLocation(Irp_87);
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    havoc type_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} type_1 != 0;
    assume {:nonnull} DeviceObject_42 != 0;
    assume DeviceObject_42 > 0;
    havoc vslice_dummy_var_265;
    call {:si_unique_call 2726} Tmp_1906 := PptPnpPassThroughPnpIrpAndReleaseRemoveLock(vslice_dummy_var_265, Irp_87);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} type_1 == 0;
    call {:si_unique_call 2727} Tmp_1906 := PptFdoHandleBusRelations(DeviceObject_42, Irp_87);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "PptPdoCreateOpen"} PptPdoCreateOpen(actual_Pdo_29: int, actual_Irp_88: int) returns (Tmp_1908: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1908 == -1073741738 || Tmp_1908 == -1073741130 || Tmp_1908 == -1073741565 || Tmp_1908 == -1073741790 || Tmp_1908 == 0 || Tmp_1908 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptPdoCreateOpen"} PptPdoCreateOpen(actual_Pdo_29: int, actual_Irp_88: int) returns (Tmp_1908: int)
{
  var {:pointer} pdx_31: int;
  var {:pointer} sdv_1276: int;
  var {:scalar} sdv_1279: int;
  var {:pointer} Tmp_1909: int;
  var {:scalar} status_66: int;
  var {:pointer} Pdo_29: int;
  var {:pointer} Irp_88: int;
  var vslice_dummy_var_555: int;
  var vslice_dummy_var_556: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;

  anon0:
    Pdo_29 := actual_Pdo_29;
    Irp_88 := actual_Irp_88;
    assume {:nonnull} Pdo_29 != 0;
    assume Pdo_29 > 0;
    havoc pdx_31;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 2728} Tmp_1908 := P4CompleteRequest(Irp_88, -1073741738, 0);
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 2729} Tmp_1908 := P4CompleteRequest(Irp_88, -1073741130, 0);
    goto L1;

  anon13_Then:
    call {:si_unique_call 2730} sdv_1276 := sdv_IoGetCurrentIrpStackLocation(Irp_88);
    assume {:nonnull} sdv_1276 != 0;
    assume sdv_1276 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 2731} Tmp_1908 := P4CompleteRequest(Irp_88, -1073741565, 0);
    goto L1;

  anon14_Then:
    call {:si_unique_call 2732} ExAcquireFastMutex(0);
    call {:si_unique_call 2733} Tmp_1909 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1909 != 0;
    assume Tmp_1909 > 0;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    havoc vslice_dummy_var_266;
    Mem_T.INT4[Tmp_1909] := vslice_dummy_var_266;
    call {:si_unique_call 2734} sdv_1279 := sdv_InterlockedIncrement(Tmp_1909);
    assume {:nonnull} Tmp_1909 != 0;
    assume Tmp_1909 > 0;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_1279 != 1;
    call {:si_unique_call 2735} Tmp_1909 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1909 != 0;
    assume Tmp_1909 > 0;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    havoc vslice_dummy_var_267;
    Mem_T.INT4[Tmp_1909] := vslice_dummy_var_267;
    call {:si_unique_call 2736} vslice_dummy_var_555 := sdv_InterlockedDecrement(Tmp_1909);
    assume {:nonnull} Tmp_1909 != 0;
    assume Tmp_1909 > 0;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    call {:si_unique_call 2737} ExReleaseFastMutex(0);
    call {:si_unique_call 2738} Tmp_1908 := P4CompleteRequest(Irp_88, -1073741790, 0);
    goto L1;

  anon15_Then:
    assume {:partition} sdv_1279 == 1;
    call {:si_unique_call 2739} ExReleaseFastMutex(0);
    call {:si_unique_call 2740} PptPdoGetPortInfoFromFdo(Pdo_29);
    call {:si_unique_call 2741} ParInitializeExtension1284Info(pdx_31);
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    call {:si_unique_call 2742} KeInitializeEvent(PauseEvent__PDO_EXTENSION(pdx_31), 0, 1);
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    call {:si_unique_call 2743} KeInitializeSemaphore(0, 0, -1);
    call {:si_unique_call 2744} status_66 := ParCreateSystemThread(pdx_31);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status_66 != 0;
    call {:si_unique_call 2745} ExAcquireFastMutex(0);
    call {:si_unique_call 2746} Tmp_1909 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1909 != 0;
    assume Tmp_1909 > 0;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    havoc vslice_dummy_var_268;
    Mem_T.INT4[Tmp_1909] := vslice_dummy_var_268;
    call {:si_unique_call 2747} vslice_dummy_var_556 := sdv_InterlockedDecrement(Tmp_1909);
    assume {:nonnull} Tmp_1909 != 0;
    assume Tmp_1909 > 0;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} pdx_31 != 0;
    assume pdx_31 > 0;
    goto L73;

  L73:
    call {:si_unique_call 2748} ExReleaseFastMutex(0);
    goto L63;

  L63:
    call {:si_unique_call 2749} Tmp_1908 := P4CompleteRequest(Irp_88, status_66, 0);
    goto L1;

  anon17_Then:
    goto L73;

  anon16_Then:
    assume {:partition} status_66 == 0;
    goto L63;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_557: int;

  anon0:
    call {:si_unique_call 2750} vslice_dummy_var_557 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_558: int;

  anon0:
    call {:si_unique_call 2751} vslice_dummy_var_558 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptDetermineFifoWidth"} PptDetermineFifoWidth(actual_Fdx_18: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetermineFifoWidth"} PptDetermineFifoWidth(actual_Fdx_18: int)
{
  var {:scalar} bConfigA: int;
  var {:pointer} Fdx_18: int;
  var boogieTmp: int;
  var vslice_dummy_var_559: int;

  anon0:
    call {:si_unique_call 2752} vslice_dummy_var_559 := __HAVOC_malloc(4);
    Fdx_18 := actual_Fdx_18;
    assume {:nonnull} Fdx_18 != 0;
    assume Fdx_18 > 0;
    assume {:nonnull} Fdx_18 != 0;
    assume Fdx_18 > 0;
    call {:si_unique_call 2753} bConfigA := corral_nondet();
    assume {:nonnull} Fdx_18 != 0;
    assume Fdx_18 > 0;
    call {:si_unique_call 2754} boogieTmp := corral_nondet();
    return;
}



procedure {:origName "PptEcrSetMode"} PptEcrSetMode(actual_Fdx_19: int, actual_ChipMode: int) returns (Tmp_1917: int);
  free ensures {:va_keep} Tmp_1917 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptEcrSetMode"} PptEcrSetMode(actual_Fdx_19: int, actual_ChipMode: int) returns (Tmp_1917: int)
{
  var {:scalar} ecr_1: int;
  var {:pointer} Fdx_19: int;

  anon0:
    Fdx_19 := actual_Fdx_19;
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    call {:si_unique_call 2755} ecr_1 := corral_nondet();
    assume {:nonnull} Fdx_19 != 0;
    assume Fdx_19 > 0;
    ecr_1 := BAND(ecr_1, BOR(BOR(BOR(BOR(1, 2), 4), 8), 16));
    Tmp_1917 := 0;
    return;
}



procedure {:origName "PptDetectEppPort"} PptDetectEppPort(actual_Fdx_20: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectEppPort"} PptDetectEppPort(actual_Fdx_20: int)
{
  var {:scalar} i_37: int;
  var {:pointer} Controller_24: int;
  var {:scalar} sdv_1287: int;
  var {:pointer} Fdx_20: int;
  var vslice_dummy_var_560: int;
  var vslice_dummy_var_561: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;

  anon0:
    call {:si_unique_call 2756} vslice_dummy_var_560 := __HAVOC_malloc(4);
    Fdx_20 := actual_Fdx_20;
    assume {:nonnull} Fdx_20 != 0;
    assume Fdx_20 > 0;
    havoc Controller_24;
    call {:si_unique_call 2757} vslice_dummy_var_562 := corral_nondet();
    assume {:nonnull} Fdx_20 != 0;
    assume Fdx_20 > 0;
    call {:si_unique_call 2758} vslice_dummy_var_563 := PptEcrSetMode(Fdx_20, 148);
    i_37 := 1;
    goto L21;

  L21:
    call {:si_unique_call 2759} i_37, sdv_1287 := PptDetectEppPort_loop_L21(i_37, Controller_24, sdv_1287);
    goto L21_last;

  L21_last:
    assume {:CounterLoop 1} {:Counter "i_37"} true;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 2 >= i_37;
    call {:si_unique_call 2760} sdv_1287 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_1287 != i_37;
    assume {:nonnull} Fdx_20 != 0;
    assume Fdx_20 > 0;
    goto L22;

  L22:
    call {:si_unique_call 2761} vslice_dummy_var_561 := PptEcrClearMode(Fdx_20);
    assume {:nonnull} Fdx_20 != 0;
    assume Fdx_20 > 0;
    return;

  anon6_Then:
    assume {:partition} sdv_1287 == i_37;
    i_37 := i_37 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} i_37 > 2;
    goto L22;
}



procedure {:origName "PptSetByteMode"} PptSetByteMode(actual_Fdx_21: int, actual_ChipMode_1: int) returns (Tmp_1927: int);
  free ensures {:va_keep} Tmp_1927 == -1073741823 || Tmp_1927 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSetByteMode"} PptSetByteMode(actual_Fdx_21: int, actual_ChipMode_1: int) returns (Tmp_1927: int)
{
  var {:scalar} Status_32: int;
  var {:pointer} Fdx_21: int;
  var {:scalar} ChipMode_1: int;

  anon0:
    Fdx_21 := actual_Fdx_21;
    ChipMode_1 := actual_ChipMode_1;
    assume {:nonnull} Fdx_21 != 0;
    assume Fdx_21 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2762} Status_32 := PptEcrSetMode(Fdx_21, ChipMode_1);
    goto L5;

  L5:
    call {:si_unique_call 2763} Status_32 := PptCheckByteMode(Fdx_21);
    Tmp_1927 := Status_32;
    return;

  anon3_Then:
    goto L5;
}



procedure {:origName "PptDetectEppPortIfDot3DevicePresent"} PptDetectEppPortIfDot3DevicePresent(actual_Fdx_22: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectEppPortIfDot3DevicePresent"} PptDetectEppPortIfDot3DevicePresent(actual_Fdx_22: int)
{
  var {:scalar} Command_6: int;
  var {:scalar} status_67: int;
  var {:pointer} Fdx_22: int;
  var vslice_dummy_var_564: int;

  anon0:
    call {:si_unique_call 2764} vslice_dummy_var_564 := __HAVOC_malloc(4);
    call {:si_unique_call 2765} Command_6 := __HAVOC_malloc(12);
    Fdx_22 := actual_Fdx_22;
    assume {:nonnull} Fdx_22 != 0;
    assume Fdx_22 > 0;
    assume {:nonnull} Fdx_22 != 0;
    assume Fdx_22 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    call {:si_unique_call 2766} status_67 := PptTrySelectDevice#1(Fdx_22, Command_6);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_67 >= 0;
    call {:si_unique_call 2767} PptDetectEppPort(Fdx_22);
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    assume {:nonnull} Command_6 != 0;
    assume Command_6 > 0;
    call {:si_unique_call 2768} status_67 := PptDeselectDevice(Fdx_22, Command_6);
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} 0 > status_67;
    goto L1;

  anon6_Then:
    goto L1;
}



procedure {:origName "PptSetChipMode"} PptSetChipMode(actual_Fdx_23: int, actual_ChipMode_2: int) returns (Tmp_1931: int);
  free ensures {:va_keep} Tmp_1931 == -1073741810 || Tmp_1931 == -1073741436 || Tmp_1931 == 0 || Tmp_1931 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptSetChipMode"} PptSetChipMode(actual_Fdx_23: int, actual_ChipMode_2: int) returns (Tmp_1931: int)
{
  var {:scalar} EcrMode: int;
  var {:scalar} Status_33: int;
  var {:pointer} Fdx_23: int;
  var {:scalar} ChipMode_2: int;

  anon0:
    Fdx_23 := actual_Fdx_23;
    ChipMode_2 := actual_ChipMode_2;
    Status_33 := 0;
    EcrMode := BAND(ChipMode_2, BNOT(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16)));
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Status_33 := -1073741436;
    goto L12;

  L12:
    Tmp_1931 := Status_33;
    goto L1;

  L1:
    return;

  anon22_Then:
    goto L8;

  L8:
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto L18;

  L18:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Status_33 >= 0;
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto L12;

  anon24_Then:
    assume {:partition} 0 > Status_33;
    goto L12;

  anon21_Then:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} EcrMode == 96;
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    Tmp_1931 := -1073741810;
    goto L1;

  anon28_Then:
    call {:si_unique_call 2769} Status_33 := PptEcrSetMode(Fdx_23, ChipMode_2);
    goto L18;

  anon23_Then:
    assume {:partition} EcrMode != 96;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} EcrMode == 128;
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_1931 := -1073741810;
    goto L1;

  anon29_Then:
    call {:si_unique_call 2770} Status_33 := PptEcrSetMode(Fdx_23, ChipMode_2);
    goto L18;

  anon25_Then:
    assume {:partition} EcrMode != 128;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} EcrMode == 32;
    assume {:nonnull} Fdx_23 != 0;
    assume Fdx_23 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    Tmp_1931 := -1073741810;
    goto L1;

  anon30_Then:
    call {:si_unique_call 2771} Status_33 := PptSetByteMode(Fdx_23, ChipMode_2);
    goto L18;

  anon26_Then:
    assume {:partition} EcrMode != 32;
    goto L18;

  anon27_Then:
    goto L8;
}



procedure {:origName "PptDetectEppPortIfUserRequested"} PptDetectEppPortIfUserRequested(actual_Fdx_24: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectEppPortIfUserRequested"} PptDetectEppPortIfUserRequested(actual_Fdx_24: int)
{
  var {:dopa} {:scalar} RequestEppTest: int;
  var {:pointer} Tmp_1938: int;
  var {:pointer} Fdx_24: int;
  var vslice_dummy_var_565: int;
  var vslice_dummy_var_566: int;
  var vslice_dummy_var_269: int;

  anon0:
    call {:si_unique_call 2772} RequestEppTest := __HAVOC_malloc(4);
    call {:si_unique_call 2773} vslice_dummy_var_565 := __HAVOC_malloc(4);
    Fdx_24 := actual_Fdx_24;
    call {:si_unique_call 2774} Tmp_1938 := __HAVOC_malloc(60);
    assume {:nonnull} RequestEppTest != 0;
    assume RequestEppTest > 0;
    Mem_T.INT4[RequestEppTest] := 0;
    Tmp_1938 := strConst__li2bpl119;
    assume {:nonnull} Fdx_24 != 0;
    assume Fdx_24 > 0;
    havoc vslice_dummy_var_269;
    call {:si_unique_call 2775} vslice_dummy_var_566 := PptRegGetDeviceParameterDword(vslice_dummy_var_269, Tmp_1938, RequestEppTest);
    assume {:nonnull} RequestEppTest != 0;
    assume RequestEppTest > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[RequestEppTest] != 0;
    call {:si_unique_call 2776} PptDetectEppPort(Fdx_24);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[RequestEppTest] == 0;
    goto L1;
}



procedure {:origName "PptBuildResourceList"} PptBuildResourceList(actual_Fdx_25: int, actual_Partial: int, actual_Addresses: int, actual_Resources_1: int) returns (Tmp_1939: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1939 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptBuildResourceList"} PptBuildResourceList(actual_Fdx_25: int, actual_Partial: int, actual_Addresses: int, actual_Resources_1: int) returns (Tmp_1939: int)
{
  var {:scalar} i_38: int;
  var {:pointer} Tmp_1940: int;
  var {:pointer} Tmp_1941: int;
  var {:pointer} Tmp_1943: int;
  var {:pointer} Tmp_1944: int;
  var {:scalar} Tmp_1945: int;
  var {:pointer} Tmp_1946: int;
  var {:scalar} Tmp_1947: int;
  var {:pointer} Tmp_1948: int;
  var {:pointer} Tmp_1949: int;
  var {:pointer} Tmp_1950: int;
  var {:scalar} Tmp_1951: int;
  var {:pointer} Tmp_1952: int;
  var {:pointer} Tmp_1953: int;
  var {:pointer} Tmp_1954: int;
  var {:pointer} Tmp_1955: int;
  var {:scalar} Tmp_1956: int;
  var {:scalar} Tmp_1957: int;
  var {:scalar} Tmp_1958: int;
  var {:pointer} Tmp_1959: int;
  var {:pointer} Tmp_1960: int;
  var {:pointer} Tmp_1961: int;
  var {:pointer} Fdx_25: int;
  var {:scalar} Partial: int;
  var {:pointer} Addresses: int;
  var {:pointer} Resources_1: int;

  anon0:
    Fdx_25 := actual_Fdx_25;
    Partial := actual_Partial;
    Addresses := actual_Addresses;
    Resources_1 := actual_Resources_1;
    call {:si_unique_call 2777} Tmp_1940 := __HAVOC_malloc(312);
    call {:si_unique_call 2778} Tmp_1941 := __HAVOC_malloc(292);
    call {:si_unique_call 2779} Tmp_1943 := __HAVOC_malloc(312);
    call {:si_unique_call 2780} Tmp_1944 := __HAVOC_malloc(312);
    call {:si_unique_call 2781} Tmp_1946 := __HAVOC_malloc(312);
    call {:si_unique_call 2782} Tmp_1948 := __HAVOC_malloc(292);
    call {:si_unique_call 2783} Tmp_1949 := __HAVOC_malloc(292);
    call {:si_unique_call 2784} Tmp_1950 := __HAVOC_malloc(292);
    call {:si_unique_call 2785} Tmp_1952 := __HAVOC_malloc(312);
    call {:si_unique_call 2786} Tmp_1953 := __HAVOC_malloc(312);
    call {:si_unique_call 2787} Tmp_1954 := __HAVOC_malloc(312);
    call {:si_unique_call 2788} Tmp_1955 := __HAVOC_malloc(312);
    call {:si_unique_call 2789} Tmp_1959 := __HAVOC_malloc(292);
    call {:si_unique_call 2790} Tmp_1960 := __HAVOC_malloc(312);
    call {:si_unique_call 2791} Tmp_1961 := __HAVOC_malloc(312);
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1940;
    assume {:nonnull} Fdx_25 != 0;
    assume Fdx_25 > 0;
    assume {:nonnull} Tmp_1940 != 0;
    assume Tmp_1940 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1952;
    assume {:nonnull} Fdx_25 != 0;
    assume Fdx_25 > 0;
    assume {:nonnull} Tmp_1952 != 0;
    assume Tmp_1952 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1953;
    assume {:nonnull} Tmp_1953 != 0;
    assume Tmp_1953 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1955;
    assume {:nonnull} Tmp_1955 != 0;
    assume Tmp_1955 > 0;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1944;
    assume {:nonnull} Tmp_1944 != 0;
    assume Tmp_1944 > 0;
    i_38 := 0;
    goto L11;

  L11:
    call {:si_unique_call 2792} i_38, Tmp_1941, Tmp_1943, Tmp_1945, Tmp_1946, Tmp_1947, Tmp_1948, Tmp_1949, Tmp_1950, Tmp_1951, Tmp_1954, Tmp_1956, Tmp_1957, Tmp_1958, Tmp_1959, Tmp_1960, Tmp_1961 := PptBuildResourceList_loop_L11(i_38, Tmp_1941, Tmp_1943, Tmp_1945, Tmp_1946, Tmp_1947, Tmp_1948, Tmp_1949, Tmp_1950, Tmp_1951, Tmp_1954, Tmp_1956, Tmp_1957, Tmp_1958, Tmp_1959, Tmp_1960, Tmp_1961, Partial, Addresses, Resources_1);
    goto L11_last;

  L11_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Partial > i_38;
    Tmp_1947 := i_38;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1960;
    assume {:nonnull} Tmp_1960 != 0;
    assume Tmp_1960 > 0;
    havoc Tmp_1941;
    assume {:nonnull} Tmp_1941 != 0;
    assume Tmp_1941 > 0;
    Tmp_1951 := i_38;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1954;
    assume {:nonnull} Tmp_1954 != 0;
    assume Tmp_1954 > 0;
    havoc Tmp_1950;
    assume {:nonnull} Tmp_1950 != 0;
    assume Tmp_1950 > 0;
    Tmp_1956 := i_38;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1961;
    assume {:nonnull} Tmp_1961 != 0;
    assume Tmp_1961 > 0;
    havoc Tmp_1949;
    assume {:nonnull} Tmp_1949 != 0;
    assume Tmp_1949 > 0;
    Tmp_1945 := i_38;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1946;
    assume {:nonnull} Tmp_1946 != 0;
    assume Tmp_1946 > 0;
    havoc Tmp_1959;
    Tmp_1957 := i_38;
    assume {:nonnull} Addresses != 0;
    assume Addresses > 0;
    assume {:nonnull} Tmp_1959 != 0;
    assume Tmp_1959 > 0;
    Tmp_1958 := i_38;
    assume {:nonnull} Resources_1 != 0;
    assume Resources_1 > 0;
    havoc Tmp_1943;
    assume {:nonnull} Tmp_1943 != 0;
    assume Tmp_1943 > 0;
    havoc Tmp_1948;
    assume {:nonnull} Tmp_1948 != 0;
    assume Tmp_1948 > 0;
    i_38 := i_38 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_38 >= Partial;
    Tmp_1939 := 0;
    return;
}



procedure {:origName "PptDetermineFifoDepth"} PptDetermineFifoDepth(actual_Fdx_26: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetermineFifoDepth"} PptDetermineFifoDepth(actual_Fdx_26: int)
{
  var {:scalar} Tmp_1962: int;
  var {:scalar} Tmp_1964: int;
  var {:scalar} limitCount: int;
  var {:scalar} writeFifoDepth: int;
  var {:scalar} sdv_1299: int;
  var {:scalar} testData: int;
  var {:scalar} sdv_1300: int;
  var {:scalar} wFifoDepth: int;
  var {:scalar} Tmp_1966: int;
  var {:scalar} ecr_2: int;
  var {:scalar} readFifoDepth: int;
  var {:scalar} Tmp_1968: int;
  var {:pointer} Fdx_26: int;
  var vslice_dummy_var_567: int;
  var vslice_dummy_var_568: int;

  anon0:
    call {:si_unique_call 2793} vslice_dummy_var_567 := __HAVOC_malloc(4);
    Fdx_26 := actual_Fdx_26;
    assume {:nonnull} Fdx_26 != 0;
    assume Fdx_26 > 0;
    assume {:nonnull} Fdx_26 != 0;
    assume Fdx_26 > 0;
    assume {:nonnull} Fdx_26 != 0;
    assume Fdx_26 > 0;
    wFifoDepth := 0;
    call {:si_unique_call 2794} vslice_dummy_var_568 := corral_nondet();
    call {:si_unique_call 2795} ecr_2 := corral_nondet();
    Tmp_1964 := BAND(ecr_2, BOR(1, 2));
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1964 == 1;
    writeFifoDepth := 0;
    limitCount := 0;
    goto L35;

  L35:
    call {:si_unique_call 2796} limitCount, writeFifoDepth, sdv_1299, Tmp_1966 := PptDetermineFifoDepth_loop_L35(limitCount, writeFifoDepth, sdv_1299, Tmp_1966);
    goto L35_last;

  L35_last:
    call {:si_unique_call 2800} sdv_1299 := corral_nondet();
    Tmp_1966 := BAND(sdv_1299, BOR(1, 2));
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Tmp_1966 != 2;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 4098 >= limitCount;
    writeFifoDepth := writeFifoDepth + 1;
    limitCount := limitCount + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} limitCount > 4098;
    goto L40;

  L40:
    readFifoDepth := 0;
    limitCount := 0;
    goto L49;

  L49:
    call {:si_unique_call 2797} Tmp_1962, limitCount, testData, sdv_1300, readFifoDepth, Tmp_1968 := PptDetermineFifoDepth_loop_L49(Tmp_1962, limitCount, testData, sdv_1300, readFifoDepth, Tmp_1968);
    goto L49_last;

  L49_last:
    call {:si_unique_call 2799} sdv_1300 := corral_nondet();
    Tmp_1968 := BAND(sdv_1300, BOR(1, 2));
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Tmp_1968 != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4098 >= limitCount;
    call {:si_unique_call 2798} testData := corral_nondet();
    Tmp_1962 := BAND(readFifoDepth, BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} testData != Tmp_1962;
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:partition} testData == Tmp_1962;
    readFifoDepth := readFifoDepth + 1;
    limitCount := limitCount + 1;
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} limitCount > 4098;
    goto L54;

  L54:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} writeFifoDepth == readFifoDepth;
    wFifoDepth := readFifoDepth;
    assume {:nonnull} Fdx_26 != 0;
    assume Fdx_26 > 0;
    goto L1;

  anon16_Then:
    assume {:partition} writeFifoDepth != readFifoDepth;
    goto L1;

  anon20_Then:
    assume {:partition} Tmp_1968 == 1;
    goto L54;

  anon19_Then:
    assume {:partition} Tmp_1966 == 2;
    goto L40;

  anon18_Then:
    assume {:partition} Tmp_1964 != 1;
    goto L1;
}



procedure {:origName "PptDetectBytePort"} PptDetectBytePort(actual_Fdx_27: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectBytePort"} PptDetectBytePort(actual_Fdx_27: int)
{
  var {:scalar} Status_34: int;
  var {:pointer} Fdx_27: int;
  var vslice_dummy_var_569: int;
  var vslice_dummy_var_570: int;

  anon0:
    call {:si_unique_call 2801} vslice_dummy_var_569 := __HAVOC_malloc(4);
    Fdx_27 := actual_Fdx_27;
    Status_34 := 0;
    call {:si_unique_call 2802} Status_34 := PptSetByteMode(Fdx_27, 52);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Status_34 >= 0;
    assume {:nonnull} Fdx_27 != 0;
    assume Fdx_27 > 0;
    goto L10;

  L10:
    call {:si_unique_call 2803} vslice_dummy_var_570 := PptClearByteMode(Fdx_27);
    return;

  anon3_Then:
    assume {:partition} 0 > Status_34;
    goto L10;
}



procedure {:origName "_sdv_init45"} _sdv_init45();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init45"} _sdv_init45()
{
  var vslice_dummy_var_571: int;

  anon0:
    call {:si_unique_call 2804} vslice_dummy_var_571 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PptDetectPortCapabilities"} PptDetectPortCapabilities(actual_Fdx_28: int) returns (Tmp_1973: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectPortCapabilities"} PptDetectPortCapabilities(actual_Fdx_28: int) returns (Tmp_1973: int)
{
  var {:scalar} Tmp_1975: int;
  var {:scalar} Status_35: int;
  var {:pointer} Fdx_28: int;

  anon0:
    Fdx_28 := actual_Fdx_28;
    call {:si_unique_call 2805} PptDetectEcpPort(Fdx_28);
    assume {:nonnull} Fdx_28 != 0;
    assume Fdx_28 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} Fdx_28 != 0;
    assume Fdx_28 > 0;
    havoc Tmp_1975;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Tmp_1975 != 12;
    call {:si_unique_call 2806} Status_35 := PptFindNatChip(Fdx_28);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Status_35 >= 0;
    assume {:nonnull} Fdx_28 != 0;
    assume Fdx_28 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Fdx_28 != 0;
    assume Fdx_28 > 0;
    goto L16;

  L16:
    call {:si_unique_call 2807} PptDetectBytePort(Fdx_28);
    assume {:nonnull} Fdx_28 != 0;
    assume Fdx_28 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_1973 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    Tmp_1973 := -1073741810;
    goto L1;

  anon17_Then:
    call {:si_unique_call 2808} PptDetectEppPortIfDot3DevicePresent(Fdx_28);
    assume {:nonnull} Fdx_28 != 0;
    assume Fdx_28 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 2809} PptDetectEppPortIfUserRequested(Fdx_28);
    goto L16;

  anon18_Then:
    goto L16;

  anon16_Then:
    assume {:partition} 0 > Status_35;
    goto L16;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} Tmp_1975 == 12;
    goto L8;

  L8:
    assume {:nonnull} Fdx_28 != 0;
    assume Fdx_28 > 0;
    goto L16;

  anon15_Then:
    goto L8;
}



procedure {:origName "PptCheckByteMode"} PptCheckByteMode(actual_Fdx_29: int) returns (Tmp_1976: int);
  free ensures {:va_keep} Tmp_1976 == -1073741823 || Tmp_1976 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptCheckByteMode"} PptCheckByteMode(actual_Fdx_29: int) returns (Tmp_1976: int)
{
  var {:scalar} dcr_7: int;
  var {:pointer} Controller_27: int;
  var {:scalar} sdv_1306: int;
  var {:scalar} sdv_1307: int;
  var {:pointer} Fdx_29: int;

  anon0:
    Fdx_29 := actual_Fdx_29;
    assume {:nonnull} Fdx_29 != 0;
    assume Fdx_29 > 0;
    havoc Controller_27;
    call {:si_unique_call 2810} dcr_7 := corral_nondet();
    call {:si_unique_call 2811} sdv_1306 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_1306 == 85;
    call {:si_unique_call 2812} sdv_1307 := corral_nondet();
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_1307 == 170;
    Tmp_1976 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_1307 != 170;
    goto L23;

  L23:
    Tmp_1976 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} sdv_1306 != 85;
    goto L23;
}



procedure {:origName "PptEcrClearMode"} PptEcrClearMode(actual_Fdx_30: int) returns (Tmp_1982: int);
  free ensures {:va_keep} Tmp_1982 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptEcrClearMode"} PptEcrClearMode(actual_Fdx_30: int) returns (Tmp_1982: int)
{
  var {:scalar} ecr_3: int;
  var {:pointer} Fdx_30: int;

  anon0:
    Fdx_30 := actual_Fdx_30;
    assume {:nonnull} Fdx_30 != 0;
    assume Fdx_30 > 0;
    assume {:nonnull} Fdx_30 != 0;
    assume Fdx_30 > 0;
    havoc ecr_3;
    assume {:nonnull} Fdx_30 != 0;
    assume Fdx_30 > 0;
    assume {:nonnull} Fdx_30 != 0;
    assume Fdx_30 > 0;
    Tmp_1982 := 0;
    return;
}



procedure {:origName "PptClearByteMode"} PptClearByteMode(actual_Fdx_31: int) returns (Tmp_1985: int);
  free ensures {:va_keep} Tmp_1985 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptClearByteMode"} PptClearByteMode(actual_Fdx_31: int) returns (Tmp_1985: int)
{
  var {:scalar} Status_36: int;
  var {:pointer} Fdx_31: int;

  anon0:
    Fdx_31 := actual_Fdx_31;
    Status_36 := 0;
    assume {:nonnull} Fdx_31 != 0;
    assume Fdx_31 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2813} Status_36 := PptEcrClearMode(Fdx_31);
    goto L6;

  L6:
    Tmp_1985 := Status_36;
    return;

  anon3_Then:
    goto L6;
}



procedure {:origName "PptDetectEcpPort"} PptDetectEcpPort(actual_Fdx_32: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectEcpPort"} PptDetectEcpPort(actual_Fdx_32: int)
{
  var {:scalar} ecrLast_1: int;
  var {:pointer} Controller_29: int;
  var {:scalar} Tmp_1988: int;
  var {:scalar} Tmp_1989: int;
  var {:scalar} Tmp_1990: int;
  var {:scalar} ecr_4: int;
  var {:pointer} Fdx_32: int;
  var vslice_dummy_var_572: int;

  anon0:
    call {:si_unique_call 2814} vslice_dummy_var_572 := __HAVOC_malloc(4);
    Fdx_32 := actual_Fdx_32;
    assume {:nonnull} Fdx_32 != 0;
    assume Fdx_32 > 0;
    havoc Controller_29;
    assume {:nonnull} Fdx_32 != 0;
    assume Fdx_32 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Fdx_32 != 0;
    assume Fdx_32 > 0;
    call {:si_unique_call 2815} ecr_4 := corral_nondet();
    ecrLast_1 := ecr_4;
    call {:si_unique_call 2816} ecr_4 := corral_nondet();
    ecrLast_1 := ecr_4;
    Tmp_1988 := BAND(ecr_4, BOR(1, 2));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_1988 == 3;
    goto L31;

  L31:
    goto L1;

  L1:
    return;

  anon22_Then:
    assume {:partition} Tmp_1988 != 3;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} ecrLast_1 != 255;
    Tmp_1989 := BAND(ecr_4, BOR(1, 2));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_1989 == 2;
    call {:si_unique_call 2817} ecr_4 := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(ecr_4, 3) == 0;
    goto L1;

  anon18_Then:
    assume {:partition} BAND(ecr_4, 3) != 0;
    goto L38;

  L38:
    call {:si_unique_call 2818} ecr_4 := corral_nondet();
    Tmp_1990 := BAND(ecr_4, BOR(1, 2));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Tmp_1990 == 1;
    call {:si_unique_call 2819} ecrLast_1 := corral_nondet();
    ecr_4 := BAND(ecrLast_1, BOR(BOR(BOR(BOR(1, 2), 4), 8), 16));
    call {:si_unique_call 2820} PptDetermineFifoWidth(Fdx_32);
    assume {:nonnull} Fdx_32 != 0;
    assume Fdx_32 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Fdx_32 != 0;
    assume Fdx_32 > 0;
    call {:si_unique_call 2821} PptDetermineFifoDepth(Fdx_32);
    assume {:nonnull} Fdx_32 != 0;
    assume Fdx_32 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Fdx_32 != 0;
    assume Fdx_32 > 0;
    goto L78;

  L78:
    goto L1;

  anon20_Then:
    goto L78;

  anon19_Then:
    goto L78;

  anon24_Then:
    assume {:partition} Tmp_1990 != 1;
    goto L1;

  anon23_Then:
    assume {:partition} Tmp_1989 != 2;
    goto L38;

  anon17_Then:
    assume {:partition} ecrLast_1 == 255;
    goto L31;

  anon21_Then:
    goto L1;
}



procedure {:origName "PptClearChipMode"} PptClearChipMode(actual_Fdx_33: int, actual_ChipMode_3: int) returns (Tmp_1993: int);
  free ensures {:va_keep} Tmp_1993 == -1073741436 || Tmp_1993 == -1073741823 || Tmp_1993 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptClearChipMode"} PptClearChipMode(actual_Fdx_33: int, actual_ChipMode_3: int) returns (Tmp_1993: int)
{
  var {:scalar} EcrMode_1: int;
  var {:scalar} Status_37: int;
  var {:pointer} Fdx_33: int;
  var {:scalar} ChipMode_3: int;

  anon0:
    Fdx_33 := actual_Fdx_33;
    ChipMode_3 := actual_ChipMode_3;
    Status_37 := -1073741823;
    EcrMode_1 := BAND(ChipMode_3, BNOT(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16)));
    assume {:nonnull} Fdx_33 != 0;
    assume Fdx_33 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    Status_37 := -1073741436;
    goto L11;

  L11:
    Tmp_1993 := Status_37;
    return;

  anon18_Then:
    assume {:nonnull} Fdx_33 != 0;
    assume Fdx_33 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Fdx_33 != 0;
    assume Fdx_33 > 0;
    goto L17;

  L17:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Status_37 >= 0;
    assume {:nonnull} Fdx_33 != 0;
    assume Fdx_33 > 0;
    goto L11;

  anon15_Then:
    assume {:partition} 0 > Status_37;
    goto L11;

  anon13_Then:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} EcrMode_1 == 96;
    call {:si_unique_call 2822} Status_37 := PptEcrClearMode(Fdx_33);
    goto L17;

  anon14_Then:
    assume {:partition} EcrMode_1 != 96;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} EcrMode_1 == 128;
    call {:si_unique_call 2823} Status_37 := PptEcrClearMode(Fdx_33);
    goto L17;

  anon16_Then:
    assume {:partition} EcrMode_1 != 128;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} EcrMode_1 == 32;
    call {:si_unique_call 2824} Status_37 := PptClearByteMode(Fdx_33);
    goto L17;

  anon17_Then:
    assume {:partition} EcrMode_1 != 32;
    goto L17;
}



procedure {:origName "PptDetectChipFilter"} PptDetectChipFilter(actual_Fdx_34: int) returns (Tmp_1995: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectChipFilter"} PptDetectChipFilter(actual_Fdx_34: int) returns (Tmp_1995: int)
{
  var {:pointer} Irp_89: int;
  var {:pointer} EcpController_1: int;
  var {:scalar} Status_38: int;
  var {:scalar} Event_9: int;
  var {:pointer} Controller_30: int;
  var {:scalar} IoStatus: int;
  var {:pointer} Fdx_34: int;
  var vslice_dummy_var_573: int;
  var vslice_dummy_var_574: int;
  var vslice_dummy_var_270: int;

  anon0:
    call {:si_unique_call 2825} Event_9 := __HAVOC_malloc(156);
    call {:si_unique_call 2826} IoStatus := __HAVOC_malloc(12);
    Fdx_34 := actual_Fdx_34;
    Status_38 := -1073741810;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    havoc Controller_30;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    havoc EcpController_1;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    call {:si_unique_call 2827} KeInitializeEvent(Event_9, 0, 0);
    call {:si_unique_call 2828} Irp_89 := IoBuildDeviceIoControlRequest(1441864, 0, 0, 28, 0, 28, 1, 0, IoStatus);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Irp_89 != 0;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    havoc vslice_dummy_var_270;
    call {:si_unique_call 2829} Status_38 := sdv_IoCallDriver(vslice_dummy_var_270, Irp_89);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Status_38 == 259;
    call {:si_unique_call 2830} vslice_dummy_var_573 := KeWaitForSingleObject(0, 5, 0, 0, 0);
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    havoc Status_38;
    goto L30;

  L30:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Status_38 >= 0;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    havoc EcpController_1;
    goto L39;

  L39:
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    goto L35;

  L35:
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Status_38 >= 0;
    call {:si_unique_call 2831} vslice_dummy_var_574 := corral_nondet();
    call {:si_unique_call 2832} PptDetermineFifoWidth(Fdx_34);
    call {:si_unique_call 2833} PptDetermineFifoDepth(Fdx_34);
    assume {:nonnull} Fdx_34 != 0;
    assume Fdx_34 > 0;
    goto L42;

  L42:
    Tmp_1995 := Status_38;
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} 0 > Status_38;
    goto L42;

  anon22_Then:
    goto L42;

  anon20_Then:
    goto L42;

  anon24_Then:
    goto L39;

  anon21_Then:
    goto L35;

  anon19_Then:
    assume {:partition} 0 > Status_38;
    goto L35;

  anon18_Then:
    assume {:partition} Status_38 != 259;
    goto L30;

  anon17_Then:
    assume {:partition} Irp_89 == 0;
    Tmp_1995 := -1073741670;
    goto L1;
}



procedure {:origName "PptDetectPortType"} PptDetectPortType(actual_Fdx_35: int) returns (Tmp_1997: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDetectPortType"} PptDetectPortType(actual_Fdx_35: int) returns (Tmp_1997: int)
{
  var {:scalar} Status_39: int;
  var {:scalar} ParportPath: int;
  var {:pointer} Tmp_2001: int;
  var {:dopa} {:scalar} IdentifierHex: int;
  var {:pointer} RegTable: int;
  var {:dopa} {:scalar} zero: int;
  var {:pointer} Fdx_35: int;
  var vslice_dummy_var_575: int;
  var vslice_dummy_var_576: int;

  anon0:
    call {:si_unique_call 2834} ParportPath := __HAVOC_malloc(12);
    call {:si_unique_call 2835} IdentifierHex := __HAVOC_malloc(4);
    call {:si_unique_call 2836} zero := __HAVOC_malloc(4);
    Fdx_35 := actual_Fdx_35;
    call {:si_unique_call 2837} vslice_dummy_var_575 := __HAVOC_malloc(76);
    call {:si_unique_call 2838} vslice_dummy_var_576 := __HAVOC_malloc(76);
    call {:si_unique_call 2839} Tmp_2001 := __HAVOC_malloc(32);
    call {:si_unique_call 2840} RegTable := __HAVOC_malloc(56);
    assume {:nonnull} IdentifierHex != 0;
    assume IdentifierHex > 0;
    Mem_T.INT4[IdentifierHex] := 12169;
    assume {:nonnull} zero != 0;
    assume zero > 0;
    Mem_T.INT4[zero] := 0;
    Tmp_2001 := strConst__li2bpl121;
    call {:si_unique_call 2841} RtlInitUnicodeString(ParportPath, Tmp_2001);
    call {:si_unique_call 2842} sdv_RtlZeroMemory(0, 56);
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    assume {:nonnull} RegTable != 0;
    assume RegTable > 0;
    call {:si_unique_call 2843} Status_39 := sdv_RtlQueryRegistryValues(1, 0, 0, 0, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Status_39 >= 0;
    assume {:nonnull} IdentifierHex != 0;
    assume IdentifierHex > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.INT4[IdentifierHex] == 0;
    goto L29;

  L29:
    assume {:nonnull} IdentifierHex != 0;
    assume IdentifierHex > 0;
    Mem_T.INT4[IdentifierHex] := 12169;
    call {:si_unique_call 2844} Status_39 := RtlWriteRegistryValue(1, 0, 0, 4, 0, 4);
    call {:si_unique_call 2845} Status_39 := PptDetectPortCapabilities(Fdx_35);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2846} Status_39 := RtlDeleteRegistryValue(1, 0, 0);
    Tmp_1997 := Status_39;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} Mem_T.INT4[IdentifierHex] != 0;
    goto L27;

  L27:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Status_39 != -1073741772;
    call {:si_unique_call 2847} PptDetectEcpPort(Fdx_35);
    call {:si_unique_call 2848} PptDetectBytePort(Fdx_35);
    assume {:nonnull} Fdx_35 != 0;
    assume Fdx_35 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    Tmp_1997 := 0;
    goto L1;

  anon14_Then:
    Tmp_1997 := -1073741810;
    goto L1;

  anon12_Then:
    assume {:partition} Status_39 == -1073741772;
    goto L29;

  anon11_Then:
    assume {:partition} 0 > Status_39;
    goto L27;
}



procedure {:origName "_sdv_init22"} _sdv_init22();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init22"} _sdv_init22()
{
  var vslice_dummy_var_577: int;

  anon0:
    call {:si_unique_call 2849} vslice_dummy_var_577 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    Mem_T.INT4[ParEnableLegacyZip] := 0;
    assume ParLegacyZipPseudoId == strConst__li2bpl122;
    Mem_T.INT4[SppNoRaiseIrql] := 0;
    Mem_T.INT4[DefaultModes] := 0;
    assume PortInfoReferenceCount == -1;
    assume PptDot3Retries == 5;
    Mem_T.INT4[WarmPollPeriod] := 5;
    assume PowerStateIsAC == 1;
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AbsoluteOneSecond__PDO_EXTENSION"} {:fieldname "AbsoluteOneSecond"} AbsoluteOneSecond__PDO_EXTENSION(x: int) : int
{
  x + 996
}

function {:inline true} {:fieldmap "Mem_T.AddDevice__DRIVER_EXTENSION"} {:fieldname "AddDevice"} AddDevice__DRIVER_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__FDO_EXTENSION"} {:fieldname "AddressSpace"} AddressSpace__FDO_EXTENSION(x: int) : int
{
  x + 468
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_45"} {:fieldname "Affinity"} Affinity_unnamed_tag_45(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.AllocatedByLockPort__PDO_EXTENSION"} {:fieldname "AllocatedByLockPort"} AllocatedByLockPort__PDO_EXTENSION(x: int) : int
{
  x + 1048
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_40"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__FILE_STANDARD_INFORMATION"} {:fieldname "AllocationSize"} AllocationSize__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BadProtocolModes__PDO_EXTENSION"} {:fieldname "BadProtocolModes"} BadProtocolModes__PDO_EXTENSION(x: int) : int
{
  x + 1496
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer__STRING"} {:fieldname "Buffer"} Buffer__STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__FDO_EXTENSION"} {:fieldname "BusNumber"} BusNumber__FDO_EXTENSION(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__MORE_PARALLEL_PORT_INFORMATION"} {:fieldname "BusNumber"} BusNumber__MORE_PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__PNP_BUS_INFORMATION"} {:fieldname "BusNumber"} BusNumber__PNP_BUS_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.BusNumber_unnamed_tag_43"} {:fieldname "BusNumber"} BusNumber_unnamed_tag_43(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.BusTypeGuid__PNP_BUS_INFORMATION"} {:fieldname "BusTypeGuid"} BusTypeGuid__PNP_BUS_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BusyDelayDetermined__PDO_EXTENSION"} {:fieldname "BusyDelayDetermined"} BusyDelayDetermined__PDO_EXTENSION(x: int) : int
{
  x + 980
}

function {:inline true} {:fieldmap "Mem_T.BusyDelay__PDO_EXTENSION"} {:fieldname "BusyDelay"} BusyDelay__PDO_EXTENSION(x: int) : int
{
  x + 976
}

function {:inline true} {:fieldmap "Mem_T.ByteOffset_unnamed_tag_12"} {:fieldname "ByteOffset"} ByteOffset_unnamed_tag_12(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CheckContext__ISR_LIST_ENTRY"} {:fieldname "CheckContext"} CheckContext__ISR_LIST_ENTRY(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.CheckedForGenericEpp__FDO_EXTENSION"} {:fieldname "CheckedForGenericEpp"} CheckedForGenericEpp__FDO_EXTENSION(x: int) : int
{
  x + 1176
}

function {:inline true} {:fieldmap "Mem_T.ChipInfo__FDO_EXTENSION"} {:fieldname "ChipInfo"} ChipInfo__FDO_EXTENSION(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.Cid__PDO_EXTENSION"} {:fieldname "Cid"} Cid__PDO_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.ClearChipMode__PARALLEL_PNP_INFORMATION"} {:fieldname "ClearChipMode"} ClearChipMode__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ClearChipMode__PDO_EXTENSION"} {:fieldname "ClearChipMode"} ClearChipMode__PDO_EXTENSION(x: int) : int
{
  x + 952
}

function {:inline true} {:fieldmap "Mem_T.CommandFlags__PARALLEL_1284_COMMAND"} {:fieldname "CommandFlags"} CommandFlags__PARALLEL_1284_COMMAND(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.Connected__IEEE_STATE"} {:fieldname "Connected"} Connected__IEEE_STATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Connected__PDO_EXTENSION"} {:fieldname "Connected"} Connected__PDO_EXTENSION(x: int) : int
{
  x + 1044
}

function {:inline true} {:fieldmap "Mem_T.Context__PARALLEL_INTERRUPT_INFORMATION"} {:fieldname "Context"} Context__PARALLEL_INTERRUPT_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Context__PARALLEL_PNP_INFORMATION"} {:fieldname "Context"} Context__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.Context__PARALLEL_PORT_INFORMATION"} {:fieldname "Context"} Context__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Controller__PARALLEL_PARCHIP_INFO"} {:fieldname "Controller"} Controller__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__PARALLEL_PORT_INFORMATION"} {:fieldname "Controller"} Controller__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Controller__PARCLASS_INFORMATION"} {:fieldname "Controller"} Controller__PARCLASS_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__PDO_EXTENSION"} {:fieldname "Controller"} Controller__PDO_EXTENSION(x: int) : int
{
  x + 916
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__DEVICE_RELATIONS"} {:fieldname "Count"} Count__DEVICE_RELATIONS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__SYNCHRONIZED_COUNT_CONTEXT"} {:fieldname "Count"} Count__SYNCHRONIZED_COUNT_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentByteOffset__FILE_POSITION_INFORMATION"} {:fieldname "CurrentByteOffset"} CurrentByteOffset__FILE_POSITION_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentEvent__IEEE_STATE"} {:fieldname "CurrentEvent"} CurrentEvent__IEEE_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentEvent__PDO_EXTENSION"} {:fieldname "CurrentEvent"} CurrentEvent__PDO_EXTENSION(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.CurrentMode__PARALLEL_PNP_INFORMATION"} {:fieldname "CurrentMode"} CurrentMode__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.CurrentOpIrp__PDO_EXTENSION"} {:fieldname "CurrentOpIrp"} CurrentOpIrp__PDO_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.CurrentPID__DOT3DL_PCTL"} {:fieldname "CurrentPID"} CurrentPID__DOT3DL_PCTL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.CurrentPhase__IEEE_STATE"} {:fieldname "CurrentPhase"} CurrentPhase__IEEE_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CurrentPhase__PDO_EXTENSION"} {:fieldname "CurrentPhase"} CurrentPhase__PDO_EXTENSION(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_6"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_6(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.DaisyChainPdo__FDO_EXTENSION"} {:fieldname "DaisyChainPdo"} DaisyChainPdo__FDO_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataChannel__DOT3DL_PCTL"} {:fieldname "DataChannel"} DataChannel__DOT3DL_PCTL(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLinkMode__DOT3DL_PCTL"} {:fieldname "DataLinkMode"} DataLinkMode__DOT3DL_PCTL(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DefaultData__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultData"} DefaultData__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DefaultLength__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultLength"} DefaultLength__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DefaultType__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultType"} DefaultType__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeferredPortCheckContext__PARALLEL_INTERRUPT_SERVICE_ROUTINE"} {:fieldname "DeferredPortCheckContext"} DeferredPortCheckContext__PARALLEL_INTERRUPT_SERVICE_ROUTINE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeferredPortCheckRoutine__ISR_LIST_ENTRY"} {:fieldname "DeferredPortCheckRoutine"} DeferredPortCheckRoutine__ISR_LIST_ENTRY(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeferredPortCheckRoutine__PARALLEL_INTERRUPT_SERVICE_ROUTINE"} {:fieldname "DeferredPortCheckRoutine"} DeferredPortCheckRoutine__PARALLEL_INTERRUPT_SERVICE_ROUTINE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DeleteOnRemoveOk__PDO_EXTENSION"} {:fieldname "DeleteOnRemoveOk"} DeleteOnRemoveOk__PDO_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.DeletePending__FILE_STANDARD_INFORMATION"} {:fieldname "DeletePending"} DeletePending__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeselectDevice__PARALLEL_PNP_INFORMATION"} {:fieldname "DeselectDevice"} DeselectDevice__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.DeselectDevice__PDO_EXTENSION"} {:fieldname "DeselectDevice"} DeselectDevice__PDO_EXTENSION(x: int) : int
{
  x + 960
}

function {:inline true} {:fieldmap "Mem_T.DetermineIeeeModes__PARCLASS_INFORMATION"} {:fieldname "DetermineIeeeModes"} DetermineIeeeModes__PARCLASS_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "DevDeletionListHead"} DevDeletionListHead__FDO_EXTENSION(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "DevDeletionList"} DevDeletionList__PDO_EXTENSION(x: int) : int
{
  x + 260
}

function {:inline true} {:fieldmap "Mem_T.DevType__FDO_EXTENSION"} {:fieldname "DevType"} DevType__FDO_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DevType__PDO_EXTENSION"} {:fieldname "DevType"} DevType__PDO_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIdSize__PAR_DEVICE_ID_SIZE_INFORMATION"} {:fieldname "DeviceIdSize"} DeviceIdSize__PAR_DEVICE_ID_SIZE_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceInterfaceState__FDO_EXTENSION"} {:fieldname "DeviceInterfaceState"} DeviceInterfaceState__FDO_EXTENSION(x: int) : int
{
  x + 212
}

function {:inline true} {:fieldmap "Mem_T.DeviceInterfaceState__PDO_EXTENSION"} {:fieldname "DeviceInterfaceState"} DeviceInterfaceState__PDO_EXTENSION(x: int) : int
{
  x + 212
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceInterface"} DeviceInterface__FDO_EXTENSION(x: int) : int
{
  x + 200
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceInterface"} DeviceInterface__PDO_EXTENSION(x: int) : int
{
  x + 200
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceName"} DeviceName__FDO_EXTENSION(x: int) : int
{
  x + 616
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__DRIVER_OBJECT"} {:fieldname "DeviceObject"} DeviceObject__DRIVER_OBJECT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__FDO_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__FDO_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__PDO_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__PDO_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceStateFlags__PDO_EXTENSION"} {:fieldname "DeviceStateFlags"} DeviceStateFlags__PDO_EXTENSION(x: int) : int
{
  x + 224
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__FDO_EXTENSION"} {:fieldname "DeviceState"} DeviceState__FDO_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__PDO_EXTENSION"} {:fieldname "DeviceState"} DeviceState__PDO_EXTENSION(x: int) : int
{
  x + 1288
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceTextType_unnamed_tag_35"} {:fieldname "DeviceTextType"} DeviceTextType_unnamed_tag_35(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceType__PDO_EXTENSION"} {:fieldname "DeviceType"} DeviceType__PDO_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.Directory__FILE_STANDARD_INFORMATION"} {:fieldname "Directory"} Directory__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.DisableEndOfChainBusRescan__FDO_EXTENSION"} {:fieldname "DisableEndOfChainBusRescan"} DisableEndOfChainBusRescan__FDO_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.DriverExtension__DRIVER_OBJECT"} {:fieldname "DriverExtension"} DriverExtension__DRIVER_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__DEVICE_OBJECT"} {:fieldname "DriverObject"} DriverObject__DEVICE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__FDO_EXTENSION"} {:fieldname "DriverObject"} DriverObject__FDO_EXTENSION(x: int) : int
{
  x + 276
}

function {:inline true} {:fieldmap "Mem_T.DriverUnload__DRIVER_OBJECT"} {:fieldname "DriverUnload"} DriverUnload__DRIVER_OBJECT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EcpAddressSpace__FDO_EXTENSION"} {:fieldname "EcpAddressSpace"} EcpAddressSpace__FDO_EXTENSION(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.EcpController__PARALLEL_PNP_INFORMATION"} {:fieldname "EcpController"} EcpController__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EcrController__PARALLEL_PARCHIP_INFO"} {:fieldname "EcrController"} EcrController__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.EcrController__PARCLASS_INFORMATION"} {:fieldname "EcrController"} EcrController__PARCLASS_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.EcrController__PDO_EXTENSION"} {:fieldname "EcrController"} EcrController__PDO_EXTENSION(x: int) : int
{
  x + 920
}

function {:inline true} {:fieldmap "Mem_T.EcrPortData__FDO_EXTENSION"} {:fieldname "EcrPortData"} EcrPortData__FDO_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.EndOfChainPdo__FDO_EXTENSION"} {:fieldname "EndOfChainPdo"} EndOfChainPdo__FDO_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.EndOfChain__PDO_EXTENSION"} {:fieldname "EndOfChain"} EndOfChain__PDO_EXTENSION(x: int) : int
{
  x + 276
}

function {:inline true} {:fieldmap "Mem_T.EndOfFile__FILE_STANDARD_INFORMATION"} {:fieldname "EndOfFile"} EndOfFile__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EntryContext__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "EntryContext"} EntryContext__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.EppControllerPhysicalAddress__PARALLEL_PNP_INFORMATION"} {:fieldname "EppControllerPhysicalAddress"} EppControllerPhysicalAddress__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Event22Delay"} Event22Delay__PDO_EXTENSION(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.Event__DOT3DL_PCTL"} {:fieldname "Event"} Event__DOT3DL_PCTL(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Extension__SYNCHRONIZED_DISCONNECT_CONTEXT"} {:fieldname "Extension"} Extension__SYNCHRONIZED_DISCONNECT_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "FdoThreadEvent"} FdoThreadEvent__FDO_EXTENSION(x: int) : int
{
  x + 980
}

function {:inline true} {:fieldmap "Mem_T.FdoWaitingOnPort__FDO_EXTENSION"} {:fieldname "FdoWaitingOnPort"} FdoWaitingOnPort__FDO_EXTENSION(x: int) : int
{
  x + 1180
}

function {:inline true} {:fieldmap "Mem_T.Fdo__PDO_EXTENSION"} {:fieldname "Fdo"} Fdo__PDO_EXTENSION(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.FifoDepth__PARALLEL_PNP_INFORMATION"} {:fieldname "FifoDepth"} FifoDepth__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.FifoDepth__PARCLASS_INFORMATION"} {:fieldname "FifoDepth"} FifoDepth__PARCLASS_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.FifoDepth__PDO_EXTENSION"} {:fieldname "FifoDepth"} FifoDepth__PDO_EXTENSION(x: int) : int
{
  x + 964
}

function {:inline true} {:fieldmap "Mem_T.FifoWidth__PARALLEL_PNP_INFORMATION"} {:fieldname "FifoWidth"} FifoWidth__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.FifoWidth__PARCLASS_INFORMATION"} {:fieldname "FifoWidth"} FifoWidth__PARCLASS_INFORMATION(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.FifoWidth__PDO_EXTENSION"} {:fieldname "FifoWidth"} FifoWidth__PDO_EXTENSION(x: int) : int
{
  x + 968
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_15"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_15(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FilterMode__FDO_EXTENSION"} {:fieldname "FilterMode"} FilterMode__FDO_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Flags"} Flags__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ForwardInterfaceAddress__PDO_EXTENSION"} {:fieldname "ForwardInterfaceAddress"} ForwardInterfaceAddress__PDO_EXTENSION(x: int) : int
{
  x + 1100
}

function {:inline true} {:fieldmap "Mem_T.FoundInterrupt__FDO_EXTENSION"} {:fieldname "FoundInterrupt"} FoundInterrupt__FDO_EXTENSION(x: int) : int
{
  x + 484
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "FreePortDpc"} FreePortDpc__FDO_EXTENSION(x: int) : int
{
  x + 520
}

function {:inline true} {:fieldmap "Mem_T.FreePortFromInterruptLevel__PARALLEL_INTERRUPT_INFORMATION"} {:fieldname "FreePortFromInterruptLevel"} FreePortFromInterruptLevel__PARALLEL_INTERRUPT_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.P_IO_WORKITEM"} {:fieldname "FreePortWorkItem"} FreePortWorkItem__FDO_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.FreePort__PARALLEL_PORT_INFORMATION"} {:fieldname "FreePort"} FreePort__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FreePort__PDO_EXTENSION"} {:fieldname "FreePort"} FreePort__PDO_EXTENSION(x: int) : int
{
  x + 932
}

function {:inline true} {:fieldmap "Mem_T.FwdSkipMask__DOT3DL_PCTL"} {:fieldname "FwdSkipMask"} FwdSkipMask__DOT3DL_PCTL(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HardwareCapabilities__PARALLEL_PNP_INFORMATION"} {:fieldname "HardwareCapabilities"} HardwareCapabilities__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.HardwareCapabilities__PARCLASS_INFORMATION"} {:fieldname "HardwareCapabilities"} HardwareCapabilities__PARCLASS_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.HardwareCapabilities__PDO_EXTENSION"} {:fieldname "HardwareCapabilities"} HardwareCapabilities__PDO_EXTENSION(x: int) : int
{
  x + 944
}

function {:inline true} {:fieldmap "Mem_T.HardwareModes__PARALLEL_PARCHIP_INFO"} {:fieldname "HardwareModes"} HardwareModes__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.High1Time__KSYSTEM_TIME"} {:fieldname "High1Time"} High1Time__KSYSTEM_TIME(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.High2Time__KSYSTEM_TIME"} {:fieldname "High2Time"} High2Time__KSYSTEM_TIME(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ID__PARALLEL_1284_COMMAND"} {:fieldname "ID"} ID__PARALLEL_1284_COMMAND(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_34"} {:fieldname "IdType"} IdType_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IdleTimeout__PDO_EXTENSION"} {:fieldname "IdleTimeout"} IdleTimeout__PDO_EXTENSION(x: int) : int
{
  x + 1060
}

function {:inline true} {:fieldmap "Mem_T.IdxForwardProtocol__PDO_EXTENSION"} {:fieldname "IdxForwardProtocol"} IdxForwardProtocol__PDO_EXTENSION(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.IdxReverseProtocol__PDO_EXTENSION"} {:fieldname "IdxReverseProtocol"} IdxReverseProtocol__PDO_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.Ieee1284Flags__PDO_EXTENSION"} {:fieldname "Ieee1284Flags"} Ieee1284Flags__PDO_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.Ieee1284_3DeviceCount__PARALLEL_PNP_INFORMATION"} {:fieldname "Ieee1284_3DeviceCount"} Ieee1284_3DeviceCount__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.Ieee1284_3DeviceId__PDO_EXTENSION"} {:fieldname "Ieee1284_3DeviceId"} Ieee1284_3DeviceId__PDO_EXTENSION(x: int) : int
{
  x + 268
}

function {:inline true} {:fieldmap "Mem_T.IeeeFwdToRevMode__PARCLASS_INFORMATION"} {:fieldname "IeeeFwdToRevMode"} IeeeFwdToRevMode__PARCLASS_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.IeeeRevToFwdMode__PARCLASS_INFORMATION"} {:fieldname "IeeeRevToFwdMode"} IeeeRevToFwdMode__PARCLASS_INFORMATION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Init__PAR_SET_INFORMATION"} {:fieldname "Init"} Init__PAR_SET_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__FDO_EXTENSION"} {:fieldname "InterfaceType"} InterfaceType__FDO_EXTENSION(x: int) : int
{
  x + 476
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__MORE_PARALLEL_PORT_INFORMATION"} {:fieldname "InterfaceType"} InterfaceType__MORE_PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterruptAffinity__FDO_EXTENSION"} {:fieldname "InterruptAffinity"} InterruptAffinity__FDO_EXTENSION(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.InterruptAffinity__MORE_PARALLEL_PORT_INFORMATION"} {:fieldname "InterruptAffinity"} InterruptAffinity__MORE_PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InterruptLevel__FDO_EXTENSION"} {:fieldname "InterruptLevel"} InterruptLevel__FDO_EXTENSION(x: int) : int
{
  x + 488
}

function {:inline true} {:fieldmap "Mem_T.InterruptLevel__MORE_PARALLEL_PORT_INFORMATION"} {:fieldname "InterruptLevel"} InterruptLevel__MORE_PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__FDO_EXTENSION"} {:fieldname "InterruptMode"} InterruptMode__FDO_EXTENSION(x: int) : int
{
  x + 500
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__MORE_PARALLEL_PORT_INFORMATION"} {:fieldname "InterruptMode"} InterruptMode__MORE_PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.InterruptObject__FDO_EXTENSION"} {:fieldname "InterruptObject"} InterruptObject__FDO_EXTENSION(x: int) : int
{
  x + 512
}

function {:inline true} {:fieldmap "Mem_T.InterruptObject__PARALLEL_INTERRUPT_INFORMATION"} {:fieldname "InterruptObject"} InterruptObject__PARALLEL_INTERRUPT_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterruptRefCount__FDO_EXTENSION"} {:fieldname "InterruptRefCount"} InterruptRefCount__FDO_EXTENSION(x: int) : int
{
  x + 516
}

function {:inline true} {:fieldmap "Mem_T.InterruptServiceContext__PARALLEL_INTERRUPT_SERVICE_ROUTINE"} {:fieldname "InterruptServiceContext"} InterruptServiceContext__PARALLEL_INTERRUPT_SERVICE_ROUTINE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterruptServiceRoutine__PARALLEL_INTERRUPT_SERVICE_ROUTINE"} {:fieldname "InterruptServiceRoutine"} InterruptServiceRoutine__PARALLEL_INTERRUPT_SERVICE_ROUTINE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterruptVector__FDO_EXTENSION"} {:fieldname "InterruptVector"} InterruptVector__FDO_EXTENSION(x: int) : int
{
  x + 492
}

function {:inline true} {:fieldmap "Mem_T.InterruptVector__MORE_PARALLEL_PORT_INFORMATION"} {:fieldname "InterruptVector"} InterruptVector__MORE_PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_43"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_43(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_31"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_31(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IsIeeeTerminateOk__IEEE_STATE"} {:fieldname "IsIeeeTerminateOk"} IsIeeeTerminateOk__IEEE_STATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IsIeeeTerminateOk__PDO_EXTENSION"} {:fieldname "IsIeeeTerminateOk"} IsIeeeTerminateOk__PDO_EXTENSION(x: int) : int
{
  x + 1504
}

function {:inline true} {:fieldmap "Mem_T.IsPdo__PDO_EXTENSION"} {:fieldname "IsPdo"} IsPdo__PDO_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.IsrInfo__SYNCHRONIZED_DISCONNECT_CONTEXT"} {:fieldname "IsrInfo"} IsrInfo__SYNCHRONIZED_DISCONNECT_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "IsrList"} IsrList__FDO_EXTENSION(x: int) : int
{
  x + 504
}

function {:inline true} {:fieldmap "Mem_T.LegacyBusType__PNP_BUS_INFORMATION"} {:fieldname "LegacyBusType"} LegacyBusType__PNP_BUS_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.LegacyZipPdo__FDO_EXTENSION"} {:fieldname "LegacyZipPdo"} LegacyZipPdo__FDO_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_44"} {:fieldname "Length"} Length_unnamed_tag_44(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_45"} {:fieldname "Level"} Level_unnamed_tag_45(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry__ISR_LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_6(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.List__SYNCHRONIZED_LIST_CONTEXT"} {:fieldname "List"} List__SYNCHRONIZED_LIST_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__WORK_QUEUE_ITEM"} {:fieldname "List"} List__WORK_QUEUE_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Location__FDO_EXTENSION"} {:fieldname "Location"} Location__FDO_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Location__PDO_EXTENSION"} {:fieldname "Location"} Location__PDO_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.LowPart__KSYSTEM_TIME"} {:fieldname "LowPart"} LowPart__KSYSTEM_TIME(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__STRING"} {:fieldname "MaximumLength"} MaximumLength__STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Mdl__PDO_EXTENSION"} {:fieldname "Mdl"} Mdl__PDO_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.Mfg__PDO_EXTENSION"} {:fieldname "Mfg"} Mfg__PDO_EXTENSION(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ModeFlags__PARALLEL_CHIP_MODE"} {:fieldname "ModeFlags"} ModeFlags__PARALLEL_CHIP_MODE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ModeSafety__PDO_EXTENSION"} {:fieldname "ModeSafety"} ModeSafety__PDO_EXTENSION(x: int) : int
{
  x + 1500
}

function {:inline true} {:fieldmap "Mem_T.Name__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Name"} Name__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NationalChecked__FDO_EXTENSION"} {:fieldname "NationalChecked"} NationalChecked__FDO_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.NationalChipFound__FDO_EXTENSION"} {:fieldname "NationalChipFound"} NationalChipFound__FDO_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.NegotiateIeeeMode__PARCLASS_INFORMATION"} {:fieldname "NegotiateIeeeMode"} NegotiateIeeeMode__PARCLASS_INFORMATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NewCount__SYNCHRONIZED_COUNT_CONTEXT"} {:fieldname "NewCount"} NewCount__SYNCHRONIZED_COUNT_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NewEntry__SYNCHRONIZED_LIST_CONTEXT"} {:fieldname "NewEntry"} NewEntry__SYNCHRONIZED_LIST_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NibbleReadCount__PARALLEL_WMI_LOG_INFO"} {:fieldname "NibbleReadCount"} NibbleReadCount__PARALLEL_WMI_LOG_INFO(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.NumberOfLinks__FILE_STANDARD_INFORMATION"} {:fieldname "NumberOfLinks"} NumberOfLinks__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Objects__DEVICE_RELATIONS"} {:fieldname "Objects"} Objects__DEVICE_RELATIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OneSecond__PDO_EXTENSION"} {:fieldname "OneSecond"} OneSecond__PDO_EXTENSION(x: int) : int
{
  x + 1016
}

function {:inline true} {:fieldmap "Mem_T.OpenCloseRefCount__FDO_EXTENSION"} {:fieldname "OpenCloseRefCount"} OpenCloseRefCount__FDO_EXTENSION(x: int) : int
{
  x + 196
}

function {:inline true} {:fieldmap "Mem_T.OpenCloseRefCount__PDO_EXTENSION"} {:fieldname "OpenCloseRefCount"} OpenCloseRefCount__PDO_EXTENSION(x: int) : int
{
  x + 196
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__PARALLEL_PORT_INFORMATION"} {:fieldname "OriginalController"} OriginalController__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__PDO_EXTENSION"} {:fieldname "OriginalController"} OriginalController__PDO_EXTENSION(x: int) : int
{
  x + 896
}

function {:inline true} {:fieldmap "Mem_T.OriginalEcpController__PARALLEL_PNP_INFORMATION"} {:fieldname "OriginalEcpController"} OriginalEcpController__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_5"} {:fieldname "Overlay"} Overlay_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.P12843DL__PDO_EXTENSION"} {:fieldname "P12843DL"} P12843DL__PDO_EXTENSION(x: int) : int
{
  x + 1508
}

function {:inline true} {:fieldmap "Mem_T.ParChipClearMode__PARALLEL_PARCHIP_INFO"} {:fieldname "ParChipClearMode"} ParChipClearMode__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParChipSetMode__PARALLEL_PARCHIP_INFO"} {:fieldname "ParChipSetMode"} ParChipSetMode__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ParClassFdo__PDO_EXTENSION"} {:fieldname "ParClassFdo"} ParClassFdo__PDO_EXTENSION(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.ParallelCount__CONFIGURATION_INFORMATION"} {:fieldname "ParallelCount"} ParallelCount__CONFIGURATION_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ParallelRead__PARCLASS_INFORMATION"} {:fieldname "ParallelRead"} ParallelRead__PARCLASS_INFORMATION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ParallelWrite__PARCLASS_INFORMATION"} {:fieldname "ParallelWrite"} ParallelWrite__PARCLASS_INFORMATION(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParclassContext__PARCLASS_INFORMATION"} {:fieldname "ParclassContext"} ParclassContext__PARCLASS_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ParentDeviceObject__FDO_EXTENSION"} {:fieldname "ParentDeviceObject"} ParentDeviceObject__FDO_EXTENSION(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PauseEvent"} PauseEvent__PDO_EXTENSION(x: int) : int
{
  x + 1336
}

function {:inline true} {:fieldmap "Mem_T.PdoName__PDO_EXTENSION"} {:fieldname "PdoName"} PdoName__PDO_EXTENSION(x: int) : int
{
  x + 252
}

function {:inline true} {:fieldmap "Mem_T.PdoType__PDO_EXTENSION"} {:fieldname "PdoType"} PdoType__PDO_EXTENSION(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PhysicalDeviceObject__FDO_EXTENSION"} {:fieldname "PhysicalDeviceObject"} PhysicalDeviceObject__FDO_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T._PARALLEL_PNP_INFORMATION"} {:fieldname "PnpInfo"} PnpInfo__FDO_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.PnpState__FDO_EXTENSION"} {:fieldname "PnpState"} PnpState__FDO_EXTENSION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PollingFailureCounter__FDO_EXTENSION"} {:fieldname "PollingFailureCounter"} PollingFailureCounter__FDO_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.PortAllocates__PARPORT_WMI_ALLOC_FREE_COUNTS"} {:fieldname "PortAllocates"} PortAllocates__PARPORT_WMI_ALLOC_FREE_COUNTS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PortContext__PDO_EXTENSION"} {:fieldname "PortContext"} PortContext__PDO_EXTENSION(x: int) : int
{
  x + 940
}

function {:inline true} {:fieldmap "Mem_T.PortDeviceObject__PDO_EXTENSION"} {:fieldname "PortDeviceObject"} PortDeviceObject__PDO_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.PortFrees__PARPORT_WMI_ALLOC_FREE_COUNTS"} {:fieldname "PortFrees"} PortFrees__PARPORT_WMI_ALLOC_FREE_COUNTS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._PARALLEL_PORT_INFORMATION"} {:fieldname "PortInfo"} PortInfo__FDO_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.PortName__PARALLEL_PNP_INFORMATION"} {:fieldname "PortName"} PortName__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.PortNumber__PARALLEL_PNP_INFORMATION"} {:fieldname "PortNumber"} PortNumber__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Port__PARALLEL_1284_COMMAND"} {:fieldname "Port"} Port__PARALLEL_1284_COMMAND(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_43"} {:fieldname "Port"} Port_unnamed_tag_43(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.ProtocolData__PDO_EXTENSION"} {:fieldname "ProtocolData"} ProtocolData__PDO_EXTENSION(x: int) : int
{
  x + 1080
}

function {:inline true} {:fieldmap "Mem_T.ProtocolFamily__FORWARD_PTCL"} {:fieldname "ProtocolFamily"} ProtocolFamily__FORWARD_PTCL(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProtocolFamily__IEEE_STATE"} {:fieldname "ProtocolFamily"} ProtocolFamily__IEEE_STATE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ProtocolFamily__REVERSE_PTCL"} {:fieldname "ProtocolFamily"} ProtocolFamily__REVERSE_PTCL(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ProtocolModesSupported__PDO_EXTENSION"} {:fieldname "ProtocolModesSupported"} ProtocolModesSupported__PDO_EXTENSION(x: int) : int
{
  x + 1492
}

function {:inline true} {:fieldmap "Mem_T.Protocol__FORWARD_PTCL"} {:fieldname "Protocol"} Protocol__FORWARD_PTCL(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Protocol__REVERSE_PTCL"} {:fieldname "Protocol"} Protocol__REVERSE_PTCL(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceText_unnamed_tag_8"} {:fieldname "QueryDeviceText"} QueryDeviceText_unnamed_tag_8(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.QueryNumWaiters__PARALLEL_PORT_INFORMATION"} {:fieldname "QueryNumWaiters"} QueryNumWaiters__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.QueryNumWaiters__PDO_EXTENSION"} {:fieldname "QueryNumWaiters"} QueryNumWaiters__PDO_EXTENSION(x: int) : int
{
  x + 936
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RawDeviceOK__DEVICE_CAPABILITIES"} {:fieldname "RawDeviceOK"} RawDeviceOK__DEVICE_CAPABILITIES(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.RawPortPdo__FDO_EXTENSION"} {:fieldname "RawPortPdo"} RawPortPdo__FDO_EXTENSION(x: int) : int
{
  x + 224
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T._IO_REMOVE_LOCK"} {:fieldname "RemoveLock"} RemoveLock__FDO_EXTENSION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ResetByteCount__DOT3DL_PCTL"} {:fieldname "ResetByteCount"} ResetByteCount__DOT3DL_PCTL(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.ResetByte__DOT3DL_PCTL"} {:fieldname "ResetByte"} ResetByte__DOT3DL_PCTL(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ResetChannel__DOT3DL_PCTL"} {:fieldname "ResetChannel"} ResetChannel__DOT3DL_PCTL(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RevSkipMask__DOT3DL_PCTL"} {:fieldname "RevSkipMask"} RevSkipMask__DOT3DL_PCTL(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ReverseInterfaceAddress__PDO_EXTENSION"} {:fieldname "ReverseInterfaceAddress"} ReverseInterfaceAddress__PDO_EXTENSION(x: int) : int
{
  x + 1104
}

function {:inline true} {:fieldmap "Mem_T.Revision__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Revision"} Revision__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.ServiceContext__ISR_LIST_ENTRY"} {:fieldname "ServiceContext"} ServiceContext__ISR_LIST_ENTRY(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ServiceRoutine__ISR_LIST_ENTRY"} {:fieldname "ServiceRoutine"} ServiceRoutine__ISR_LIST_ENTRY(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.SetForwardAddress__PDO_EXTENSION"} {:fieldname "SetForwardAddress"} SetForwardAddress__PDO_EXTENSION(x: int) : int
{
  x + 1108
}

function {:inline true} {:fieldmap "Mem_T.SetReverseAddress__PDO_EXTENSION"} {:fieldname "SetReverseAddress"} SetReverseAddress__PDO_EXTENSION(x: int) : int
{
  x + 1112
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._Queue"} {:fieldname "ShadowBuffer"} ShadowBuffer__PDO_EXTENSION(x: int) : int
{
  x + 1304
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Signature1__FDO_EXTENSION"} {:fieldname "Signature1"} Signature1__FDO_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Signature1__PDO_EXTENSION"} {:fieldname "Signature1"} Signature1__PDO_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Signature2__FDO_EXTENSION"} {:fieldname "Signature2"} Signature2__FDO_EXTENSION(x: int) : int
{
  x + 1192
}

function {:inline true} {:fieldmap "Mem_T.Signature2__PDO_EXTENSION"} {:fieldname "Signature2"} Signature2__PDO_EXTENSION(x: int) : int
{
  x + 3724
}

function {:inline true} {:fieldmap "Mem_T.SilentInstall__DEVICE_CAPABILITIES"} {:fieldname "SilentInstall"} SilentInstall__DEVICE_CAPABILITIES(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__PARALLEL_PORT_INFORMATION"} {:fieldname "SpanOfController"} SpanOfController__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__PARCLASS_INFORMATION"} {:fieldname "SpanOfController"} SpanOfController__PARCLASS_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__PDO_EXTENSION"} {:fieldname "SpanOfController"} SpanOfController__PDO_EXTENSION(x: int) : int
{
  x + 924
}

function {:inline true} {:fieldmap "Mem_T.SpanOfEcpController__PARALLEL_PNP_INFORMATION"} {:fieldname "SpanOfEcpController"} SpanOfEcpController__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.SpanOfEppController__PARALLEL_PNP_INFORMATION"} {:fieldname "SpanOfEppController"} SpanOfEppController__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.SppWriteCount__PARALLEL_WMI_LOG_INFO"} {:fieldname "SppWriteCount"} SppWriteCount__PARALLEL_WMI_LOG_INFO(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.StackSize__DEVICE_OBJECT"} {:fieldname "StackSize"} StackSize__DEVICE_OBJECT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_44"} {:fieldname "Start"} Start_unnamed_tag_44(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_51"} {:fieldname "Start"} Start_unnamed_tag_51(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Status__PAR_QUERY_INFORMATION"} {:fieldname "Status"} Status__PAR_QUERY_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SymLinkName__PDO_EXTENSION"} {:fieldname "SymLinkName"} SymLinkName__PDO_EXTENSION(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_1"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_1(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__FDO_EXTENSION"} {:fieldname "SystemState"} SystemState__FDO_EXTENSION(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.TerminateIeeeMode__PARCLASS_INFORMATION"} {:fieldname "TerminateIeeeMode"} TerminateIeeeMode__PARCLASS_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "ThreadObjectPointer"} ThreadObjectPointer__FDO_EXTENSION(x: int) : int
{
  x + 220
}

function {:inline true} {:fieldmap "Mem_T.ThreadObjectPointer__PDO_EXTENSION"} {:fieldname "ThreadObjectPointer"} ThreadObjectPointer__PDO_EXTENSION(x: int) : int
{
  x + 220
}

function {:inline true} {:fieldmap "Mem_T.TimeToTerminateThread__FDO_EXTENSION"} {:fieldname "TimeToTerminateThread"} TimeToTerminateThread__FDO_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.TimeToTerminateThread__PDO_EXTENSION"} {:fieldname "TimeToTerminateThread"} TimeToTerminateThread__PDO_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.TimerStart__PDO_EXTENSION"} {:fieldname "TimerStart"} TimerStart__PDO_EXTENSION(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.TryAllocatePortAtInterruptLevel__PARALLEL_INTERRUPT_INFORMATION"} {:fieldname "TryAllocatePortAtInterruptLevel"} TryAllocatePortAtInterruptLevel__PARALLEL_INTERRUPT_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TryAllocatePort__PARALLEL_PORT_INFORMATION"} {:fieldname "TryAllocatePort"} TryAllocatePort__PARALLEL_PORT_INFORMATION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.TryAllocatePort__PDO_EXTENSION"} {:fieldname "TryAllocatePort"} TryAllocatePort__PDO_EXTENSION(x: int) : int
{
  x + 928
}

function {:inline true} {:fieldmap "Mem_T.TrySelectDevice__PARALLEL_PNP_INFORMATION"} {:fieldname "TrySelectDevice"} TrySelectDevice__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.TrySelectDevice__PDO_EXTENSION"} {:fieldname "TrySelectDevice"} TrySelectDevice__PDO_EXTENSION(x: int) : int
{
  x + 956
}

function {:inline true} {:fieldmap "Mem_T.TrySetChipMode__PARALLEL_PNP_INFORMATION"} {:fieldname "TrySetChipMode"} TrySetChipMode__PARALLEL_PNP_INFORMATION(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.TrySetChipMode__PDO_EXTENSION"} {:fieldname "TrySetChipMode"} TrySetChipMode__PDO_EXTENSION(x: int) : int
{
  x + 948
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type__KEY_VALUE_FULL_INFORMATION"} {:fieldname "Type"} Type__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UsePIWriteLoop__PDO_EXTENSION"} {:fieldname "UsePIWriteLoop"} UsePIWriteLoop__PDO_EXTENSION(x: int) : int
{
  x + 344
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_45"} {:fieldname "Vector"} Vector_unnamed_tag_45(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Version"} Version__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._WMILIB_CONTEXT"} {:fieldname "WmiLibContext"} WmiLibContext__FDO_EXTENSION(x: int) : int
{
  x + 1136
}

function {:inline true} {:fieldmap "Mem_T.WmiPortAllocFreeCounts__FDO_EXTENSION"} {:fieldname "WmiPortAllocFreeCounts"} WmiPortAllocFreeCounts__FDO_EXTENSION(x: int) : int
{
  x + 1168
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__IO_WORKITEM"} {:fieldname "WorkItem"} WorkItem__IO_WORKITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "WorkQueueCount"} WorkQueueCount__FDO_EXTENSION(x: int) : int
{
  x + 320
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WorkQueue"} WorkQueue__FDO_EXTENSION(x: int) : int
{
  x + 300
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WorkQueue"} WorkQueue__PDO_EXTENSION(x: int) : int
{
  x + 728
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutConstant"} WriteTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.bAllocated__PDO_EXTENSION"} {:fieldname "bAllocated"} bAllocated__PDO_EXTENSION(x: int) : int
{
  x + 972
}

function {:inline true} {:fieldmap "Mem_T.bEventActive__DOT3DL_PCTL"} {:fieldname "bEventActive"} bEventActive__DOT3DL_PCTL(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.bIsHostRecoverSupported__PDO_EXTENSION"} {:fieldname "bIsHostRecoverSupported"} bIsHostRecoverSupported__PDO_EXTENSION(x: int) : int
{
  x + 1332
}

function {:inline true} {:fieldmap "Mem_T.bShadowBuffer__PDO_EXTENSION"} {:fieldname "bShadowBuffer"} bShadowBuffer__PDO_EXTENSION(x: int) : int
{
  x + 1300
}

function {:inline true} {:fieldmap "Mem_T.dsDeviceState__ATAPI_PARAMS"} {:fieldname "dsDeviceState"} dsDeviceState__ATAPI_PARAMS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fnConnect__FORWARD_PTCL"} {:fieldname "fnConnect"} fnConnect__FORWARD_PTCL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.fnConnect__REVERSE_PTCL"} {:fieldname "fnConnect"} fnConnect__REVERSE_PTCL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.fnDisconnect__FORWARD_PTCL"} {:fieldname "fnDisconnect"} fnDisconnect__FORWARD_PTCL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.fnDisconnect__REVERSE_PTCL"} {:fieldname "fnDisconnect"} fnDisconnect__REVERSE_PTCL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.fnEnterForward__FORWARD_PTCL"} {:fieldname "fnEnterForward"} fnEnterForward__FORWARD_PTCL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.fnEnterReverse__REVERSE_PTCL"} {:fieldname "fnEnterReverse"} fnEnterReverse__REVERSE_PTCL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.fnExitForward__FORWARD_PTCL"} {:fieldname "fnExitForward"} fnExitForward__FORWARD_PTCL(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.fnExitReverse__REVERSE_PTCL"} {:fieldname "fnExitReverse"} fnExitReverse__REVERSE_PTCL(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.fnHaveReadData__REVERSE_PTCL"} {:fieldname "fnHaveReadData"} fnHaveReadData__REVERSE_PTCL(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.fnIsModeSupported__FORWARD_PTCL"} {:fieldname "fnIsModeSupported"} fnIsModeSupported__FORWARD_PTCL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fnIsModeSupported__REVERSE_PTCL"} {:fieldname "fnIsModeSupported"} fnIsModeSupported__REVERSE_PTCL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fnReadShadow__REVERSE_PTCL"} {:fieldname "fnReadShadow"} fnReadShadow__REVERSE_PTCL(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.fnRead__DOT3DL_PCTL"} {:fieldname "fnRead"} fnRead__DOT3DL_PCTL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.fnRead__PDO_EXTENSION"} {:fieldname "fnRead"} fnRead__PDO_EXTENSION(x: int) : int
{
  x + 1036
}

function {:inline true} {:fieldmap "Mem_T.fnRead__REVERSE_PTCL"} {:fieldname "fnRead"} fnRead__REVERSE_PTCL(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.fnReset__DOT3DL_PCTL"} {:fieldname "fnReset"} fnReset__DOT3DL_PCTL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.fnSetInterfaceAddress__FORWARD_PTCL"} {:fieldname "fnSetInterfaceAddress"} fnSetInterfaceAddress__FORWARD_PTCL(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.fnSetInterfaceAddress__REVERSE_PTCL"} {:fieldname "fnSetInterfaceAddress"} fnSetInterfaceAddress__REVERSE_PTCL(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.fnWrite__DOT3DL_PCTL"} {:fieldname "fnWrite"} fnWrite__DOT3DL_PCTL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.fnWrite__FORWARD_PTCL"} {:fieldname "fnWrite"} fnWrite__FORWARD_PTCL(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.fnWrite__PDO_EXTENSION"} {:fieldname "fnWrite"} fnWrite__PDO_EXTENSION(x: int) : int
{
  x + 1040
}

function {:inline true} {:fieldmap "Mem_T.head__Queue"} {:fieldname "head"} head__Queue(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.log__PDO_EXTENSION"} {:fieldname "log"} log__PDO_EXTENSION(x: int) : int
{
  x + 1560
}

function {:inline true} {:fieldmap "Mem_T.max__Queue"} {:fieldname "max"} max__Queue(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.success__PARALLEL_PARCHIP_INFO"} {:fieldname "success"} success__PARALLEL_PARCHIP_INFO(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.szAtapiNameString__ATAPI_PARAMS"} {:fieldname "szAtapiNameString"} szAtapiNameString__ATAPI_PARAMS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.tail__Queue"} {:fieldname "tail"} tail__Queue(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.theArray__Queue"} {:fieldname "theArray"} theArray__Queue(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.usReadMask__PARCLASS_NEGOTIATION_MASK"} {:fieldname "usReadMask"} usReadMask__PARCLASS_NEGOTIATION_MASK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.usWriteMask__PARCLASS_NEGOTIATION_MASK"} {:fieldname "usWriteMask"} usWriteMask__PARCLASS_NEGOTIATION_MASK(x: int) : int
{
  x + 4
}

const {:string "%.20S%04X"} unique strConst__li2bpl45: int;

const {:string "%.20s%04X"} unique strConst__li2bpl112: int;

const {:string "%.4S:"} unique strConst__li2bpl109: int;

const {:string "%.4SF"} unique strConst__li2bpl95: int;

const {:string "%.6S:"} unique strConst__li2bpl110: int;

const {:string "%S"} unique strConst__li2bpl13: int;

const {:string "%S %S"} unique strConst__li2bpl40: int;

const {:string "%S%.20S%04X"} unique strConst__li2bpl44: int;

const {:string "%S%S%S"} unique strConst__li2bpl43: int;

const {:string "%S.%1d"} unique strConst__li2bpl15: int;

const {:string "%S.4"} unique strConst__li2bpl16: int;

const {:string "%S.5"} unique strConst__li2bpl14: int;

const {:string "%s %s"} unique strConst__li2bpl113: int;

const {:string "%s%.20s%04X"} unique strConst__li2bpl114: int;

const {:string "%s%08X;"} unique strConst__li2bpl31: int;

const {:string "%s%s"} unique strConst__li2bpl42: int;

const {:string ".3C:"} unique strConst__li2bpl96: int;

const {:string ".3M:"} unique strConst__li2bpl97: int;

const {:string "0x00 - IRP_MN_START_DEVICE"} unique strConst__li2bpl34: int;

const {:string "1284.3C:"} unique strConst__li2bpl100: int;

const {:string "1284.3DL:"} unique strConst__li2bpl99: int;

const {:string "1284.3M:"} unique strConst__li2bpl101: int;

const {:string "1284.4DL:"} unique strConst__li2bpl98: int;

const {:string "AID"} unique strConst__li2bpl84: int;

const {:string "AUTOMATICID"} unique strConst__li2bpl83: int;

const {:string "AcquirePortTimeout"} unique strConst__li2bpl59: int;

const {:string "AllowAsserts"} unique strConst__li2bpl58: int;

const {:string "Break"} unique strConst__li2bpl50: int;

const {:string "Brother"} unique strConst__li2bpl104: int;

const {:string "CID"} unique strConst__li2bpl88: int;

const {:string "CLASS"} unique strConst__li2bpl85: int;

const {:string "CLS"} unique strConst__li2bpl86: int;

const {:string "CMD:"} unique strConst__li2bpl102: int;

const {:string "COMMAND SET:"} unique strConst__li2bpl103: int;

const {:string "COMPATIBLEID"} unique strConst__li2bpl87: int;

const {:string "DES"} unique strConst__li2bpl90: int;

const {:string "DESCRIPTION"} unique strConst__li2bpl89: int;

const {:string "DbgMaskDaisyChain0"} unique strConst__li2bpl53: int;

const {:string "DbgMaskDaisyChain1"} unique strConst__li2bpl54: int;

const {:string "DbgMaskEndOfChain"} unique strConst__li2bpl55: int;

const {:string "DbgMaskFdo"} unique strConst__li2bpl51: int;

const {:string "DbgMaskLegacyZip"} unique strConst__li2bpl56: int;

const {:string "DbgMaskNoDevice"} unique strConst__li2bpl57: int;

const {:string "DbgMaskRawPort"} unique strConst__li2bpl52: int;

const {:string "DefaultModes"} unique strConst__li2bpl48: int;

const {:string "DellNationalPC87364"} unique strConst__li2bpl115: int;

const {:string "DisableWarmPoll"} unique strConst__li2bpl116: int;

const {:string "Dot3\\"} unique strConst__li2bpl0: int;

const {:string "EnableConnectInterruptIoctl"} unique strConst__li2bpl36: int;

const {:string "Event22Delay"} unique strConst__li2bpl39: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl69: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl67: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl73: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl62: int;

const {:string "ExAllocatePoolWithTag should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl70: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl66: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl78: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl71: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl68: int;

const {:string "ExAllocatePoolWithTagPriority should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl65: int;

const {:string "FilterResourceMethod"} unique strConst__li2bpl118: int;

const {:string "HBP"} unique strConst__li2bpl108: int;

const {:string "HU DlFpoyp"} unique strConst__li2bpl32: int;

const {:string "IEEE_1284_Manufacturer"} unique strConst__li2bpl11: int;

const {:string "IEEE_1284_Model"} unique strConst__li2bpl12: int;

const {:string "IMG"} unique strConst__li2bpl20: int;

const {:string "LEGEND"} unique strConst__li2bpl106: int;

const {:string "LPTENUM\\"} unique strConst__li2bpl41: int;

const {:string "Legend"} unique strConst__li2bpl107: int;

const {:string "MANUFACTURER"} unique strConst__li2bpl91: int;

const {:string "MDL"} unique strConst__li2bpl94: int;

const {:string "MFG"} unique strConst__li2bpl92: int;

const {:string "MFG:"} unique strConst__li2bpl33: int;

const {:string "MFG:IMG;CMD:;MDL:VP0;CLS:SCSIADAPTER;DES:IOMEGA PARALLEL PORT"} unique strConst__li2bpl122: int;

const {:string "MFG:VID_04E6;CLS:IMAGE;MDL:PID_"} unique strConst__li2bpl30: int;

const {:string "MFG:VID_04E6;CLS:SCSIADAPTER;MDL:PID_"} unique strConst__li2bpl29: int;

const {:string "MODEL"} unique strConst__li2bpl93: int;

const {:string "Microsoft"} unique strConst__li2bpl17: int;

const {:string "ModeCheckedStalled"} unique strConst__li2bpl120: int;

const {:string "NationalChecked"} unique strConst__li2bpl38: int;

const {:string "NationalChipFound"} unique strConst__li2bpl37: int;

const {:string "PARALLEL PORTS"} unique strConst__li2bpl18: int;

const {:string "PHASE_UNKNOWN"} unique strConst__li2bpl35: int;

const {:string "PPT_BREAK_ON_DRIVER_ENTRY - BreakPoint requested"} unique strConst__li2bpl46: int;

const {:string "ParEnableLegacyZip"} unique strConst__li2bpl24: int;

const {:string "ParFwdSkip"} unique strConst__li2bpl1: int;

const {:string "ParRBC"} unique strConst__li2bpl4: int;

const {:string "ParRBD"} unique strConst__li2bpl5: int;

const {:string "ParRC"} unique strConst__li2bpl3: int;

const {:string "ParRevSkip"} unique strConst__li2bpl2: int;

const {:string "ParallelPort"} unique strConst__li2bpl82: int;

const {:string "Parallel\\Parameters"} unique strConst__li2bpl23: int;

const {:string "Parport"} unique strConst__li2bpl121: int;

const {:string "Parport\\Parameters"} unique strConst__li2bpl22: int;

const {:string "PitneyBowes"} unique strConst__li2bpl105: int;

const {:string "PortName"} unique strConst__li2bpl111: int;

const {:string "RawPort"} unique strConst__li2bpl19: int;

const {:string "RequestEppTest"} unique strConst__li2bpl119: int;

const {:string "SppNoRaiseIrql"} unique strConst__li2bpl47: int;

const {:string "Trace"} unique strConst__li2bpl49: int;

const {:string "VP0"} unique strConst__li2bpl21: int;

const {:string "WarmPollPeriod"} unique strConst__li2bpl117: int;

const {:string "\\Callback\\PowerState"} unique strConst__li2bpl60: int;

const {:string "\\Device\\"} unique strConst__li2bpl81: int;

const {:string "\\Device\\Parallel%d"} unique strConst__li2bpl9: int;

const {:string "\\Device\\Parallel%d-%1d"} unique strConst__li2bpl7: int;

const {:string "\\Device\\Parallel%d.%d"} unique strConst__li2bpl10: int;

const {:string "\\Device\\Parallel%d.%d-%1d"} unique strConst__li2bpl8: int;

const {:string "\\DosDevices\\%s"} unique strConst__li2bpl28: int;

const {:string "\\DosDevices\\%s-%1d"} unique strConst__li2bpl26: int;

const {:string "\\DosDevices\\%s.%d"} unique strConst__li2bpl27: int;

const {:string "\\DosDevices\\%s.%d-%1d"} unique strConst__li2bpl25: int;

const {:string "callee"} unique strConst__li2bpl6: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl77: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl64: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl74: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl75: int;

const {:string "sdv_ExAllocatePoolWithQuota should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl76: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl72: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl63: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl61: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl79: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl80: int;

const {:allocated} li2bplFunctionConstant1051: int;

axiom li2bplFunctionConstant1051 == 1051;

const {:allocated} li2bplFunctionConstant1053: int;

axiom li2bplFunctionConstant1053 == 1053;

const {:allocated} li2bplFunctionConstant1056: int;

axiom li2bplFunctionConstant1056 == 1056;

const {:allocated} li2bplFunctionConstant187: int;

axiom li2bplFunctionConstant187 == 187;

const {:allocated} li2bplFunctionConstant190: int;

axiom li2bplFunctionConstant190 == 190;

const {:allocated} li2bplFunctionConstant192: int;

axiom li2bplFunctionConstant192 == 192;

const {:allocated} li2bplFunctionConstant193: int;

axiom li2bplFunctionConstant193 == 193;

const {:allocated} li2bplFunctionConstant194: int;

axiom li2bplFunctionConstant194 == 194;

const {:allocated} li2bplFunctionConstant195: int;

axiom li2bplFunctionConstant195 == 195;

const {:allocated} li2bplFunctionConstant196: int;

axiom li2bplFunctionConstant196 == 196;

const {:allocated} li2bplFunctionConstant197: int;

axiom li2bplFunctionConstant197 == 197;

const {:allocated} li2bplFunctionConstant198: int;

axiom li2bplFunctionConstant198 == 198;

const {:allocated} li2bplFunctionConstant199: int;

axiom li2bplFunctionConstant199 == 199;

const {:allocated} li2bplFunctionConstant200: int;

axiom li2bplFunctionConstant200 == 200;

const {:allocated} li2bplFunctionConstant201: int;

axiom li2bplFunctionConstant201 == 201;

const {:allocated} li2bplFunctionConstant202: int;

axiom li2bplFunctionConstant202 == 202;

const {:allocated} li2bplFunctionConstant203: int;

axiom li2bplFunctionConstant203 == 203;

const {:allocated} li2bplFunctionConstant204: int;

axiom li2bplFunctionConstant204 == 204;

const {:allocated} li2bplFunctionConstant209: int;

axiom li2bplFunctionConstant209 == 209;

const {:allocated} li2bplFunctionConstant210: int;

axiom li2bplFunctionConstant210 == 210;

const {:allocated} li2bplFunctionConstant211: int;

axiom li2bplFunctionConstant211 == 211;

const {:allocated} li2bplFunctionConstant212: int;

axiom li2bplFunctionConstant212 == 212;

const {:allocated} li2bplFunctionConstant226: int;

axiom li2bplFunctionConstant226 == 226;

const {:allocated} li2bplFunctionConstant229: int;

axiom li2bplFunctionConstant229 == 229;

const {:allocated} li2bplFunctionConstant245: int;

axiom li2bplFunctionConstant245 == 245;

const {:allocated} li2bplFunctionConstant254: int;

axiom li2bplFunctionConstant254 == 254;

const {:allocated} li2bplFunctionConstant262: int;

axiom li2bplFunctionConstant262 == 262;

const {:allocated} li2bplFunctionConstant282: int;

axiom li2bplFunctionConstant282 == 282;

const {:allocated} li2bplFunctionConstant283: int;

axiom li2bplFunctionConstant283 == 283;

const {:allocated} li2bplFunctionConstant284: int;

axiom li2bplFunctionConstant284 == 284;

const {:allocated} li2bplFunctionConstant285: int;

axiom li2bplFunctionConstant285 == 285;

const {:allocated} li2bplFunctionConstant286: int;

axiom li2bplFunctionConstant286 == 286;

const {:allocated} li2bplFunctionConstant287: int;

axiom li2bplFunctionConstant287 == 287;

const {:allocated} li2bplFunctionConstant295: int;

axiom li2bplFunctionConstant295 == 295;

const {:allocated} li2bplFunctionConstant296: int;

axiom li2bplFunctionConstant296 == 296;

const {:allocated} li2bplFunctionConstant297: int;

axiom li2bplFunctionConstant297 == 297;

const {:allocated} li2bplFunctionConstant299: int;

axiom li2bplFunctionConstant299 == 299;

const {:allocated} li2bplFunctionConstant300: int;

axiom li2bplFunctionConstant300 == 300;

const {:allocated} li2bplFunctionConstant301: int;

axiom li2bplFunctionConstant301 == 301;

const {:allocated} li2bplFunctionConstant302: int;

axiom li2bplFunctionConstant302 == 302;

const {:allocated} li2bplFunctionConstant303: int;

axiom li2bplFunctionConstant303 == 303;

const {:allocated} li2bplFunctionConstant304: int;

axiom li2bplFunctionConstant304 == 304;

const {:allocated} li2bplFunctionConstant312: int;

axiom li2bplFunctionConstant312 == 312;

const {:allocated} li2bplFunctionConstant320: int;

axiom li2bplFunctionConstant320 == 320;

const {:allocated} li2bplFunctionConstant323: int;

axiom li2bplFunctionConstant323 == 323;

const {:allocated} li2bplFunctionConstant325: int;

axiom li2bplFunctionConstant325 == 325;

const {:allocated} li2bplFunctionConstant433: int;

axiom li2bplFunctionConstant433 == 433;

const {:allocated} li2bplFunctionConstant487: int;

axiom li2bplFunctionConstant487 == 487;

const {:allocated} li2bplFunctionConstant488: int;

axiom li2bplFunctionConstant488 == 488;

const {:allocated} li2bplFunctionConstant489: int;

axiom li2bplFunctionConstant489 == 489;

const {:allocated} li2bplFunctionConstant490: int;

axiom li2bplFunctionConstant490 == 490;

const {:allocated} li2bplFunctionConstant491: int;

axiom li2bplFunctionConstant491 == 491;

const {:allocated} li2bplFunctionConstant492: int;

axiom li2bplFunctionConstant492 == 492;

const {:allocated} li2bplFunctionConstant493: int;

axiom li2bplFunctionConstant493 == 493;

const {:allocated} li2bplFunctionConstant494: int;

axiom li2bplFunctionConstant494 == 494;

const {:allocated} li2bplFunctionConstant495: int;

axiom li2bplFunctionConstant495 == 495;

const {:allocated} li2bplFunctionConstant496: int;

axiom li2bplFunctionConstant496 == 496;

const {:allocated} li2bplFunctionConstant497: int;

axiom li2bplFunctionConstant497 == 497;

const {:allocated} li2bplFunctionConstant498: int;

axiom li2bplFunctionConstant498 == 498;

const {:allocated} li2bplFunctionConstant499: int;

axiom li2bplFunctionConstant499 == 499;

const {:allocated} li2bplFunctionConstant500: int;

axiom li2bplFunctionConstant500 == 500;

const {:allocated} li2bplFunctionConstant501: int;

axiom li2bplFunctionConstant501 == 501;

const {:allocated} li2bplFunctionConstant514: int;

axiom li2bplFunctionConstant514 == 514;

const {:allocated} li2bplFunctionConstant515: int;

axiom li2bplFunctionConstant515 == 515;

const {:allocated} li2bplFunctionConstant516: int;

axiom li2bplFunctionConstant516 == 516;

const {:allocated} li2bplFunctionConstant517: int;

axiom li2bplFunctionConstant517 == 517;

const {:allocated} li2bplFunctionConstant518: int;

axiom li2bplFunctionConstant518 == 518;

const {:allocated} li2bplFunctionConstant519: int;

axiom li2bplFunctionConstant519 == 519;

const {:allocated} li2bplFunctionConstant520: int;

axiom li2bplFunctionConstant520 == 520;

const {:allocated} li2bplFunctionConstant647: int;

axiom li2bplFunctionConstant647 == 647;

const {:allocated} li2bplFunctionConstant648: int;

axiom li2bplFunctionConstant648 == 648;

const {:allocated} li2bplFunctionConstant649: int;

axiom li2bplFunctionConstant649 == 649;

const {:allocated} li2bplFunctionConstant650: int;

axiom li2bplFunctionConstant650 == 650;

const {:allocated} li2bplFunctionConstant651: int;

axiom li2bplFunctionConstant651 == 651;

const {:allocated} li2bplFunctionConstant652: int;

axiom li2bplFunctionConstant652 == 652;

const {:allocated} li2bplFunctionConstant687: int;

axiom li2bplFunctionConstant687 == 687;

const {:allocated} li2bplFunctionConstant688: int;

axiom li2bplFunctionConstant688 == 688;

const {:allocated} li2bplFunctionConstant689: int;

axiom li2bplFunctionConstant689 == 689;

const {:allocated} li2bplFunctionConstant690: int;

axiom li2bplFunctionConstant690 == 690;

const {:allocated} li2bplFunctionConstant691: int;

axiom li2bplFunctionConstant691 == 691;

const {:allocated} li2bplFunctionConstant692: int;

axiom li2bplFunctionConstant692 == 692;

const {:allocated} li2bplFunctionConstant693: int;

axiom li2bplFunctionConstant693 == 693;

const {:allocated} li2bplFunctionConstant694: int;

axiom li2bplFunctionConstant694 == 694;

const {:allocated} li2bplFunctionConstant695: int;

axiom li2bplFunctionConstant695 == 695;

const {:allocated} li2bplFunctionConstant696: int;

axiom li2bplFunctionConstant696 == 696;

const {:allocated} li2bplFunctionConstant697: int;

axiom li2bplFunctionConstant697 == 697;

const {:allocated} li2bplFunctionConstant698: int;

axiom li2bplFunctionConstant698 == 698;

const {:allocated} li2bplFunctionConstant699: int;

axiom li2bplFunctionConstant699 == 699;

const {:allocated} li2bplFunctionConstant700: int;

axiom li2bplFunctionConstant700 == 700;

const {:allocated} li2bplFunctionConstant701: int;

axiom li2bplFunctionConstant701 == 701;

const {:allocated} li2bplFunctionConstant703: int;

axiom li2bplFunctionConstant703 == 703;

const {:allocated} li2bplFunctionConstant704: int;

axiom li2bplFunctionConstant704 == 704;

const {:allocated} li2bplFunctionConstant705: int;

axiom li2bplFunctionConstant705 == 705;

const {:allocated} li2bplFunctionConstant706: int;

axiom li2bplFunctionConstant706 == 706;

const {:allocated} li2bplFunctionConstant707: int;

axiom li2bplFunctionConstant707 == 707;

const {:allocated} li2bplFunctionConstant708: int;

axiom li2bplFunctionConstant708 == 708;

const {:allocated} li2bplFunctionConstant709: int;

axiom li2bplFunctionConstant709 == 709;

const {:allocated} li2bplFunctionConstant710: int;

axiom li2bplFunctionConstant710 == 710;

const {:allocated} li2bplFunctionConstant711: int;

axiom li2bplFunctionConstant711 == 711;

const {:allocated} li2bplFunctionConstant712: int;

axiom li2bplFunctionConstant712 == 712;

const {:allocated} li2bplFunctionConstant713: int;

axiom li2bplFunctionConstant713 == 713;

const {:allocated} li2bplFunctionConstant714: int;

axiom li2bplFunctionConstant714 == 714;

const {:allocated} li2bplFunctionConstant715: int;

axiom li2bplFunctionConstant715 == 715;

const {:allocated} li2bplFunctionConstant751: int;

axiom li2bplFunctionConstant751 == 751;

const {:allocated} li2bplFunctionConstant752: int;

axiom li2bplFunctionConstant752 == 752;

const {:allocated} li2bplFunctionConstant761: int;

axiom li2bplFunctionConstant761 == 761;

const {:allocated} li2bplFunctionConstant770: int;

axiom li2bplFunctionConstant770 == 770;

const {:allocated} li2bplFunctionConstant771: int;

axiom li2bplFunctionConstant771 == 771;

const {:allocated} li2bplFunctionConstant781: int;

axiom li2bplFunctionConstant781 == 781;

const {:allocated} li2bplFunctionConstant782: int;

axiom li2bplFunctionConstant782 == 782;

const {:allocated} li2bplFunctionConstant783: int;

axiom li2bplFunctionConstant783 == 783;

const {:allocated} li2bplFunctionConstant784: int;

axiom li2bplFunctionConstant784 == 784;

const {:allocated} li2bplFunctionConstant785: int;

axiom li2bplFunctionConstant785 == 785;

const {:allocated} li2bplFunctionConstant786: int;

axiom li2bplFunctionConstant786 == 786;

const {:allocated} li2bplFunctionConstant787: int;

axiom li2bplFunctionConstant787 == 787;

const {:allocated} li2bplFunctionConstant788: int;

axiom li2bplFunctionConstant788 == 788;

const {:allocated} li2bplFunctionConstant789: int;

axiom li2bplFunctionConstant789 == 789;

const {:allocated} li2bplFunctionConstant790: int;

axiom li2bplFunctionConstant790 == 790;

const {:allocated} li2bplFunctionConstant791: int;

axiom li2bplFunctionConstant791 == 791;

const {:allocated} li2bplFunctionConstant859: int;

axiom li2bplFunctionConstant859 == 859;

const {:allocated} li2bplFunctionConstant860: int;

axiom li2bplFunctionConstant860 == 860;

const {:allocated} li2bplFunctionConstant861: int;

axiom li2bplFunctionConstant861 == 861;

const {:allocated} li2bplFunctionConstant862: int;

axiom li2bplFunctionConstant862 == 862;

const {:allocated} li2bplFunctionConstant863: int;

axiom li2bplFunctionConstant863 == 863;

const {:allocated} li2bplFunctionConstant864: int;

axiom li2bplFunctionConstant864 == 864;

const {:allocated} li2bplFunctionConstant865: int;

axiom li2bplFunctionConstant865 == 865;

const {:allocated} li2bplFunctionConstant866: int;

axiom li2bplFunctionConstant866 == 866;

const {:allocated} li2bplFunctionConstant867: int;

axiom li2bplFunctionConstant867 == 867;

const {:allocated} li2bplFunctionConstant868: int;

axiom li2bplFunctionConstant868 == 868;

const {:allocated} li2bplFunctionConstant869: int;

axiom li2bplFunctionConstant869 == 869;

const {:allocated} li2bplFunctionConstant870: int;

axiom li2bplFunctionConstant870 == 870;

const {:allocated} li2bplFunctionConstant871: int;

axiom li2bplFunctionConstant871 == 871;

const {:allocated} li2bplFunctionConstant916: int;

axiom li2bplFunctionConstant916 == 916;

const {:allocated} li2bplFunctionConstant917: int;

axiom li2bplFunctionConstant917 == 917;

const {:allocated} li2bplFunctionConstant918: int;

axiom li2bplFunctionConstant918 == 918;

const {:allocated} li2bplFunctionConstant919: int;

axiom li2bplFunctionConstant919 == 919;

implementation {:origName "PptTrySelectDevice"} PptTrySelectDevice#0(actual_Context_5: int, actual_TrySelectCommand: int) returns (Tmp_1285: int)
{
  var {:scalar} i_24: int;
  var {:scalar} Tmp_1286: int;
  var {:scalar} success: int;
  var {:pointer} Tmp_1287: int;
  var {:scalar} Status_19: int;
  var {:pointer} Extension_51: int;
  var {:pointer} Command: int;
  var {:scalar} DeviceID: int;
  var {:scalar} CancelIrql_3: int;
  var {:scalar} SyncContext_1: int;
  var {:scalar} Tmp_1288: int;
  var {:pointer} Context_5: int;
  var {:pointer} TrySelectCommand: int;
  var vslice_dummy_var_578: int;
  var vslice_dummy_var_579: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;

  anon0:
    call {:si_unique_call 2850} SyncContext_1 := __HAVOC_malloc(8);
    Context_5 := actual_Context_5;
    TrySelectCommand := actual_TrySelectCommand;
    Status_19 := 0;
    Extension_51 := Context_5;
    Command := TrySelectCommand;
    success := 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L17;

  L17:
    call {:si_unique_call 2851} Status_19 := PptTrySelectLegacyZip#0(Context_5, TrySelectCommand);
    Tmp_1285 := Status_19;
    goto L1;

  L1:
    return;

  anon48_Then:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    havoc DeviceID;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto L25;

  L25:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L31;

  L31:
    Status_19 := 0;
    goto L32;

  L32:
    Tmp_1285 := Status_19;
    goto L1;

  anon38_Then:
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    i_24 := 0;
    goto L34;

  L34:
    call {:si_unique_call 2852} i_24, Tmp_1286, success := PptTrySelectDevice#0_loop_L34(i_24, Tmp_1286, success, Extension_51, DeviceID);
    goto L34_last;

  L34_last:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > i_24;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} success == 0;
    Tmp_1286 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    havoc vslice_dummy_var_271;
    call {:si_unique_call 2853} success := PptSend1284_3Command(vslice_dummy_var_271, Tmp_1286);
    i_24 := i_24 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} success != 0;
    goto L35;

  L35:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} success != 0;
    Status_19 := 0;
    goto L32;

  anon41_Then:
    assume {:partition} success == 0;
    Status_19 := -1073741823;
    goto L32;

  anon40_Then:
    assume {:partition} i_24 >= PptDot3Retries;
    goto L35;

  anon39_Then:
    goto L31;

  anon37_Then:
    call {:si_unique_call 2854} Tmp_1287 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1287 != 0;
    assume Tmp_1287 > 0;
    Mem_T.INT4[Tmp_1287] := CancelIrql_3;
    call {:si_unique_call 2855} IoAcquireCancelSpinLock(Tmp_1287);
    assume {:nonnull} Tmp_1287 != 0;
    assume Tmp_1287 > 0;
    CancelIrql_3 := Mem_T.INT4[Tmp_1287];
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 2856} vslice_dummy_var_579 := KeSynchronizeExecution(0, li2bplFunctionConstant192, 0);
    goto L56;

  L56:
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 2857} IoReleaseCancelSpinLock(CancelIrql_3);
    Status_19 := 259;
    goto L32;

  anon43_Then:
    call {:si_unique_call 2858} IoReleaseCancelSpinLock(CancelIrql_3);
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L67;

  L67:
    Status_19 := 0;
    goto L32;

  anon51_Then:
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    i_24 := 0;
    goto L69;

  L69:
    call {:si_unique_call 2859} i_24, success, Tmp_1288 := PptTrySelectDevice#0_loop_L69(i_24, success, Extension_51, DeviceID, Tmp_1288);
    goto L69_last;

  L69_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > i_24;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} success == 0;
    Tmp_1288 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    havoc vslice_dummy_var_272;
    call {:si_unique_call 2860} success := PptSend1284_3Command(vslice_dummy_var_272, Tmp_1288);
    i_24 := i_24 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    assume false;
    return;

  anon47_Then:
    assume {:partition} success != 0;
    goto L70;

  L70:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} success != 0;
    Status_19 := 0;
    goto L32;

  anon46_Then:
    assume {:partition} success == 0;
    Status_19 := -1073741823;
    goto L32;

  anon45_Then:
    assume {:partition} i_24 >= PptDot3Retries;
    goto L70;

  anon44_Then:
    goto L67;

  anon50_Then:
    call {:si_unique_call 2861} vslice_dummy_var_578 := PptSynchronizedIncrement(SyncContext_1);
    goto L56;

  anon49_Then:
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Status_19 := -1073741811;
    goto L32;

  anon36_Then:
    goto L25;

  anon35_Then:
    goto L17;
}



procedure {:origName "PptTrySelectDevice"} PptTrySelectDevice#0(actual_Context_5: int, actual_TrySelectCommand: int) returns (Tmp_1285: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1285 == -1073741811 || Tmp_1285 == 0 || Tmp_1285 == -1073741823 || Tmp_1285 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptTrySelectDevice"} PptTrySelectDevice#1(actual_Context_5: int, actual_TrySelectCommand: int) returns (Tmp_1285: int)
{
  var {:scalar} i_24: int;
  var {:scalar} Tmp_1286: int;
  var {:scalar} success: int;
  var {:pointer} Tmp_1287: int;
  var {:scalar} Status_19: int;
  var {:pointer} Extension_51: int;
  var {:pointer} Command: int;
  var {:scalar} DeviceID: int;
  var {:scalar} CancelIrql_3: int;
  var {:scalar} SyncContext_1: int;
  var {:scalar} Tmp_1288: int;
  var {:pointer} Context_5: int;
  var {:pointer} TrySelectCommand: int;
  var vslice_dummy_var_580: int;
  var vslice_dummy_var_581: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;

  anon0:
    call {:si_unique_call 2862} SyncContext_1 := __HAVOC_malloc(8);
    Context_5 := actual_Context_5;
    TrySelectCommand := actual_TrySelectCommand;
    Status_19 := 0;
    Extension_51 := Context_5;
    Command := TrySelectCommand;
    success := 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L17;

  L17:
    call {:si_unique_call 2863} Status_19 := PptTrySelectLegacyZip#1(Context_5, TrySelectCommand);
    Tmp_1285 := Status_19;
    goto L1;

  L1:
    return;

  anon48_Then:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    havoc DeviceID;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto L25;

  L25:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L31;

  L31:
    Status_19 := 0;
    goto L32;

  L32:
    Tmp_1285 := Status_19;
    goto L1;

  anon38_Then:
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    i_24 := 0;
    goto L34;

  L34:
    call {:si_unique_call 2864} i_24, Tmp_1286, success := PptTrySelectDevice#1_loop_L34(i_24, Tmp_1286, success, Extension_51, DeviceID);
    goto L34_last;

  L34_last:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > i_24;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} success == 0;
    Tmp_1286 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    havoc vslice_dummy_var_273;
    call {:si_unique_call 2865} success := PptSend1284_3Command(vslice_dummy_var_273, Tmp_1286);
    i_24 := i_24 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} success != 0;
    goto L35;

  L35:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} success != 0;
    Status_19 := 0;
    goto L32;

  anon41_Then:
    assume {:partition} success == 0;
    Status_19 := -1073741823;
    goto L32;

  anon40_Then:
    assume {:partition} i_24 >= PptDot3Retries;
    goto L35;

  anon39_Then:
    goto L31;

  anon37_Then:
    call {:si_unique_call 2866} Tmp_1287 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1287 != 0;
    assume Tmp_1287 > 0;
    Mem_T.INT4[Tmp_1287] := CancelIrql_3;
    call {:si_unique_call 2867} IoAcquireCancelSpinLock(Tmp_1287);
    assume {:nonnull} Tmp_1287 != 0;
    assume Tmp_1287 > 0;
    CancelIrql_3 := Mem_T.INT4[Tmp_1287];
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 2868} vslice_dummy_var_581 := KeSynchronizeExecution(0, li2bplFunctionConstant192, 0);
    goto L56;

  L56:
    assume {:nonnull} SyncContext_1 != 0;
    assume SyncContext_1 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 2869} IoReleaseCancelSpinLock(CancelIrql_3);
    Status_19 := 259;
    goto L32;

  anon43_Then:
    call {:si_unique_call 2870} IoReleaseCancelSpinLock(CancelIrql_3);
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    assume {:nonnull} Command != 0;
    assume Command > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L67;

  L67:
    Status_19 := 0;
    goto L32;

  anon51_Then:
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    i_24 := 0;
    goto L69;

  L69:
    call {:si_unique_call 2871} i_24, success, Tmp_1288 := PptTrySelectDevice#1_loop_L69(i_24, success, Extension_51, DeviceID, Tmp_1288);
    goto L69_last;

  L69_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > i_24;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} success == 0;
    Tmp_1288 := BOR(BOR(BOR(32, 64), 128), DeviceID);
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    havoc vslice_dummy_var_274;
    call {:si_unique_call 2872} success := PptSend1284_3Command(vslice_dummy_var_274, Tmp_1288);
    i_24 := i_24 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    assume false;
    return;

  anon47_Then:
    assume {:partition} success != 0;
    goto L70;

  L70:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} success != 0;
    Status_19 := 0;
    goto L32;

  anon46_Then:
    assume {:partition} success == 0;
    Status_19 := -1073741823;
    goto L32;

  anon45_Then:
    assume {:partition} i_24 >= PptDot3Retries;
    goto L70;

  anon44_Then:
    goto L67;

  anon50_Then:
    call {:si_unique_call 2873} vslice_dummy_var_580 := PptSynchronizedIncrement(SyncContext_1);
    goto L56;

  anon49_Then:
    assume {:nonnull} Extension_51 != 0;
    assume Extension_51 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Status_19 := -1073741811;
    goto L32;

  anon36_Then:
    goto L25;

  anon35_Then:
    goto L17;
}



procedure {:origName "PptTrySelectDevice"} PptTrySelectDevice#1(actual_Context_5: int, actual_TrySelectCommand: int) returns (Tmp_1285: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1285 == -1073741811 || Tmp_1285 == 0 || Tmp_1285 == -1073741823 || Tmp_1285 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#0(actual_Context_8: int, actual_TrySelectCommand_1: int) returns (Tmp_1474: int)
{
  var {:pointer} Tmp_1475: int;
  var {:scalar} sdv_1002: int;
  var {:scalar} Status_21: int;
  var {:pointer} Controller_16: int;
  var {:pointer} Command_4: int;
  var {:pointer} fdx_27: int;
  var {:scalar} CancelIrql_4: int;
  var {:scalar} SyncContext_2: int;
  var {:pointer} Context_8: int;
  var {:pointer} TrySelectCommand_1: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_584: int;

  anon0:
    call {:si_unique_call 2874} SyncContext_2 := __HAVOC_malloc(8);
    Context_8 := actual_Context_8;
    TrySelectCommand_1 := actual_TrySelectCommand_1;
    fdx_27 := Context_8;
    Command_4 := TrySelectCommand_1;
    Status_21 := 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    havoc Controller_16;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L17;

  L17:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_21 >= 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Status_21 != 259;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 2875} PptLegacyZipSetDiskMode(Controller_16, 207);
    goto L27;

  L27:
    call {:si_unique_call 2876} sdv_1002 := PptLegacyZipCheckDevice(Controller_16);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_1002 != 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2877} PptDetectEppPort(fdx_27);
    goto L36;

  L36:
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto L18;

  L18:
    Tmp_1474 := Status_21;
    return;

  anon27_Then:
    goto L36;

  anon26_Then:
    goto L36;

  anon25_Then:
    goto L18;

  anon24_Then:
    assume {:partition} sdv_1002 == 0;
    call {:si_unique_call 2878} vslice_dummy_var_582 := PptDeselectLegacyZip#0(Context_8, TrySelectCommand_1);
    Status_21 := -1073741823;
    goto L18;

  anon23_Then:
    call {:si_unique_call 2879} PptLegacyZipSetDiskMode(Controller_16, 143);
    goto L27;

  anon22_Then:
    assume {:partition} Status_21 == 259;
    goto L18;

  anon21_Then:
    assume {:partition} 0 > Status_21;
    goto L18;

  anon29_Then:
    call {:si_unique_call 2880} Tmp_1475 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    Mem_T.INT4[Tmp_1475] := CancelIrql_4;
    call {:si_unique_call 2881} IoAcquireCancelSpinLock(Tmp_1475);
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    CancelIrql_4 := Mem_T.INT4[Tmp_1475];
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2882} vslice_dummy_var_584 := KeSynchronizeExecution(0, li2bplFunctionConstant192, 0);
    goto L50;

  L50:
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    Status_21 := 259;
    goto L51;

  L51:
    call {:si_unique_call 2883} IoReleaseCancelSpinLock(CancelIrql_4);
    goto L17;

  anon28_Then:
    goto L51;

  anon30_Then:
    call {:si_unique_call 2884} vslice_dummy_var_583 := PptSynchronizedIncrement(SyncContext_2);
    goto L50;
}



procedure {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#0(actual_Context_8: int, actual_TrySelectCommand_1: int) returns (Tmp_1474: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1474 == 0 || Tmp_1474 == 259 || Tmp_1474 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#1(actual_Context_8: int, actual_TrySelectCommand_1: int) returns (Tmp_1474: int)
{
  var {:pointer} Tmp_1475: int;
  var {:scalar} sdv_1002: int;
  var {:scalar} Status_21: int;
  var {:pointer} Controller_16: int;
  var {:pointer} Command_4: int;
  var {:pointer} fdx_27: int;
  var {:scalar} CancelIrql_4: int;
  var {:scalar} SyncContext_2: int;
  var {:pointer} Context_8: int;
  var {:pointer} TrySelectCommand_1: int;
  var vslice_dummy_var_585: int;
  var vslice_dummy_var_586: int;
  var vslice_dummy_var_587: int;

  anon0:
    call {:si_unique_call 2885} SyncContext_2 := __HAVOC_malloc(8);
    Context_8 := actual_Context_8;
    TrySelectCommand_1 := actual_TrySelectCommand_1;
    fdx_27 := Context_8;
    Command_4 := TrySelectCommand_1;
    Status_21 := 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    havoc Controller_16;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L17;

  L17:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_21 >= 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Status_21 != 259;
    assume {:nonnull} Command_4 != 0;
    assume Command_4 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 2886} PptLegacyZipSetDiskMode(Controller_16, 207);
    goto L27;

  L27:
    call {:si_unique_call 2887} sdv_1002 := PptLegacyZipCheckDevice(Controller_16);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_1002 != 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2888} PptDetectEppPort(fdx_27);
    goto L36;

  L36:
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto L18;

  L18:
    Tmp_1474 := Status_21;
    return;

  anon27_Then:
    goto L36;

  anon26_Then:
    goto L36;

  anon25_Then:
    goto L18;

  anon24_Then:
    assume {:partition} sdv_1002 == 0;
    call {:si_unique_call 2889} vslice_dummy_var_585 := PptDeselectLegacyZip#1(Context_8, TrySelectCommand_1);
    Status_21 := -1073741823;
    goto L18;

  anon23_Then:
    call {:si_unique_call 2890} PptLegacyZipSetDiskMode(Controller_16, 143);
    goto L27;

  anon22_Then:
    assume {:partition} Status_21 == 259;
    goto L18;

  anon21_Then:
    assume {:partition} 0 > Status_21;
    goto L18;

  anon29_Then:
    call {:si_unique_call 2891} Tmp_1475 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    Mem_T.INT4[Tmp_1475] := CancelIrql_4;
    call {:si_unique_call 2892} IoAcquireCancelSpinLock(Tmp_1475);
    assume {:nonnull} Tmp_1475 != 0;
    assume Tmp_1475 > 0;
    CancelIrql_4 := Mem_T.INT4[Tmp_1475];
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    assume {:nonnull} fdx_27 != 0;
    assume fdx_27 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2893} vslice_dummy_var_587 := KeSynchronizeExecution(0, li2bplFunctionConstant192, 0);
    goto L50;

  L50:
    assume {:nonnull} SyncContext_2 != 0;
    assume SyncContext_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    Status_21 := 259;
    goto L51;

  L51:
    call {:si_unique_call 2894} IoReleaseCancelSpinLock(CancelIrql_4);
    goto L17;

  anon28_Then:
    goto L51;

  anon30_Then:
    call {:si_unique_call 2895} vslice_dummy_var_586 := PptSynchronizedIncrement(SyncContext_2);
    goto L50;
}



procedure {:origName "PptTrySelectLegacyZip"} PptTrySelectLegacyZip#1(actual_Context_8: int, actual_TrySelectCommand_1: int) returns (Tmp_1474: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1474 == 0 || Tmp_1474 == 259 || Tmp_1474 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#0(actual_Context_7: int, actual_DeselectCommand_1: int) returns (Tmp_1453: int)
{
  var {:scalar} i_32: int;
  var {:scalar} Tmp_1455: int;
  var {:pointer} Controller_11: int;
  var {:scalar} Tmp_1456: int;
  var {:pointer} Command_3: int;
  var {:pointer} fdx_26: int;
  var {:pointer} Context_7: int;
  var {:pointer} DeselectCommand_1: int;

  anon0:
    Context_7 := actual_Context_7;
    DeselectCommand_1 := actual_DeselectCommand_1;
    fdx_26 := Context_7;
    assume {:nonnull} fdx_26 != 0;
    assume fdx_26 > 0;
    havoc Controller_11;
    Command_3 := DeselectCommand_1;
    i_32 := 0;
    goto L11;

  L11:
    call {:si_unique_call 2896} i_32, Tmp_1455, Tmp_1456 := PptDeselectLegacyZip#0_loop_L11(i_32, Tmp_1455, Controller_11, Tmp_1456);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 3} {:Counter "i_32"} true;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 3 > i_32;
    Tmp_1456 := i_32;
    havoc Tmp_1455;
    call {:si_unique_call 2897} PptLegacyZipClockPrtModeByte(Controller_11, Tmp_1455);
    i_32 := i_32 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} i_32 >= 3;
    call {:si_unique_call 2898} PptLegacyZipClockPrtModeByte(Controller_11, 15);
    assume {:nonnull} Command_3 != 0;
    assume Command_3 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L24;

  L24:
    Tmp_1453 := 0;
    return;

  anon6_Then:
    call {:si_unique_call 2899} PptFreePort#0(fdx_26);
    goto L24;
}



procedure {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#0(actual_Context_7: int, actual_DeselectCommand_1: int) returns (Tmp_1453: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1453 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#1(actual_Context_7: int, actual_DeselectCommand_1: int) returns (Tmp_1453: int)
{
  var {:scalar} i_32: int;
  var {:scalar} Tmp_1455: int;
  var {:pointer} Controller_11: int;
  var {:scalar} Tmp_1456: int;
  var {:pointer} Command_3: int;
  var {:pointer} fdx_26: int;
  var {:pointer} Context_7: int;
  var {:pointer} DeselectCommand_1: int;

  anon0:
    Context_7 := actual_Context_7;
    DeselectCommand_1 := actual_DeselectCommand_1;
    fdx_26 := Context_7;
    assume {:nonnull} fdx_26 != 0;
    assume fdx_26 > 0;
    havoc Controller_11;
    Command_3 := DeselectCommand_1;
    i_32 := 0;
    goto L11;

  L11:
    call {:si_unique_call 2900} i_32, Tmp_1455, Tmp_1456 := PptDeselectLegacyZip#1_loop_L11(i_32, Tmp_1455, Controller_11, Tmp_1456);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 3} {:Counter "i_32"} true;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 3 > i_32;
    Tmp_1456 := i_32;
    havoc Tmp_1455;
    call {:si_unique_call 2901} PptLegacyZipClockPrtModeByte(Controller_11, Tmp_1455);
    i_32 := i_32 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} i_32 >= 3;
    call {:si_unique_call 2902} PptLegacyZipClockPrtModeByte(Controller_11, 15);
    assume {:nonnull} Command_3 != 0;
    assume Command_3 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L24;

  L24:
    Tmp_1453 := 0;
    return;

  anon6_Then:
    call {:si_unique_call 2903} PptFreePort#1(fdx_26);
    goto L24;
}



procedure {:origName "PptDeselectLegacyZip"} PptDeselectLegacyZip#1(actual_Context_7: int, actual_DeselectCommand_1: int) returns (Tmp_1453: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1453 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFreePort"} PptFreePort#0(actual_Fdx_10: int)
{
  var {:pointer} Irp_62: int;
  var {:scalar} Allocated: int;
  var {:pointer} IrpSp_6: int;
  var {:scalar} InterruptRefCount: int;
  var {:pointer} sdv_1083: int;
  var {:pointer} Tmp_1598: int;
  var {:pointer} Command_5: int;
  var {:pointer} Head_1: int;
  var {:pointer} fdx_30: int;
  var {:scalar} CancelIrql_6: int;
  var {:scalar} SyncContext_4: int;
  var {:pointer} Fdx_10: int;
  var boogieTmp: int;
  var vslice_dummy_var_588: int;
  var vslice_dummy_var_589: int;
  var vslice_dummy_var_590: int;
  var vslice_dummy_var_591: int;
  var vslice_dummy_var_592: int;
  var vslice_dummy_var_593: int;
  var vslice_dummy_var_594: int;
  var vslice_dummy_var_595: int;
  var vslice_dummy_var_596: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;

  anon0:
    call {:si_unique_call 2904} vslice_dummy_var_588 := __HAVOC_malloc(4);
    call {:si_unique_call 2905} SyncContext_4 := __HAVOC_malloc(8);
    Fdx_10 := actual_Fdx_10;
    fdx_30 := Fdx_10;
    assume {:nonnull} SyncContext_4 != 0;
    assume SyncContext_4 > 0;
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    call {:si_unique_call 2906} Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    Mem_T.INT4[Tmp_1598] := CancelIrql_6;
    call {:si_unique_call 2907} IoAcquireCancelSpinLock(Tmp_1598);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    CancelIrql_6 := Mem_T.INT4[Tmp_1598];
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2908} vslice_dummy_var_590 := KeSynchronizeExecution(0, li2bplFunctionConstant193, 0);
    goto L24;

  L24:
    call {:si_unique_call 2909} IoReleaseCancelSpinLock(CancelIrql_6);
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    Allocated := 0;
    goto L29;

  L29:
    call {:si_unique_call 2910} Irp_62, Allocated, IrpSp_6, sdv_1083, Tmp_1598, Head_1, CancelIrql_6, vslice_dummy_var_592, vslice_dummy_var_593, vslice_dummy_var_594, vslice_dummy_var_595, vslice_dummy_var_596 := PptFreePort#0_loop_L29(Irp_62, Allocated, IrpSp_6, sdv_1083, Tmp_1598, Head_1, fdx_30, CancelIrql_6, SyncContext_4, vslice_dummy_var_592, vslice_dummy_var_593, vslice_dummy_var_594, vslice_dummy_var_595, vslice_dummy_var_596);
    goto L29_last;

  L29_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Allocated != 0;
    goto L31;

  L31:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Allocated == 0;
    call {:si_unique_call 2911} Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    Mem_T.INT4[Tmp_1598] := CancelIrql_6;
    call {:si_unique_call 2912} IoAcquireCancelSpinLock(Tmp_1598);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    CancelIrql_6 := Mem_T.INT4[Tmp_1598];
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    havoc InterruptRefCount;
    call {:si_unique_call 2913} IoReleaseCancelSpinLock(CancelIrql_6);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} InterruptRefCount != 0;
    call {:si_unique_call 2914} vslice_dummy_var_591 := KeSynchronizeExecution(0, li2bplFunctionConstant202, 0);
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} InterruptRefCount == 0;
    goto L1;

  anon22_Then:
    assume {:partition} Allocated != 0;
    goto L1;

  anon20_Then:
    assume {:partition} Allocated == 0;
    assume {:nonnull} SyncContext_4 != 0;
    assume SyncContext_4 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2915} Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    Mem_T.INT4[Tmp_1598] := CancelIrql_6;
    call {:si_unique_call 2916} IoAcquireCancelSpinLock(Tmp_1598);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    CancelIrql_6 := Mem_T.INT4[Tmp_1598];
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    call {:si_unique_call 2917} Head_1 := RemoveHeadList(WorkQueue__FDO_EXTENSION(fdx_30));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 2918} IoReleaseCancelSpinLock(CancelIrql_6);
    goto L31;

  anon24_Then:
    call {:si_unique_call 2919} sdv_1083 := sdv_containing_record(Head_1, 88);
    Irp_62 := sdv_1083;
    call {:si_unique_call 2920} vslice_dummy_var_596 := PptSetCancelRoutine(Irp_62, 0);
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    assume {:nonnull} SyncContext_4 != 0;
    assume SyncContext_4 > 0;
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2921} vslice_dummy_var_593 := KeSynchronizeExecution(0, li2bplFunctionConstant193, 0);
    goto L74;

  L74:
    call {:si_unique_call 2922} IoReleaseCancelSpinLock(CancelIrql_6);
    goto L77;

  L77:
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    call {:si_unique_call 2923} vslice_dummy_var_594 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_30), Irp_62);
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    havoc vslice_dummy_var_275;
    havoc vslice_dummy_var_276;
    call {:si_unique_call 2924} vslice_dummy_var_595 := P4CompleteRequest(Irp_62, vslice_dummy_var_275, vslice_dummy_var_276);
    goto L77_dummy;

  L77_dummy:
    assume false;
    return;

  anon27_Then:
    call {:si_unique_call 2925} vslice_dummy_var_592 := PptSynchronizedDecrement(SyncContext_4);
    goto L74;

  anon25_Then:
    Allocated := 1;
    call {:si_unique_call 2926} IoReleaseCancelSpinLock(CancelIrql_6);
    call {:si_unique_call 2927} IrpSp_6 := sdv_IoGetCurrentIrpStackLocation(Irp_62);
    assume {:nonnull} IrpSp_6 != 0;
    assume IrpSp_6 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    havoc Command_5;
    assume {:nonnull} Command_5 != 0;
    assume Command_5 > 0;
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    assume false;
    return;

  anon26_Then:
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    goto L98;

  L98:
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    goto L77;

  anon21_Then:
    goto L31;

  anon19_Then:
    call {:si_unique_call 2928} vslice_dummy_var_589 := PptSynchronizedDecrement(SyncContext_4);
    goto L24;
}



procedure {:origName "PptFreePort"} PptFreePort#0(actual_Fdx_10: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PptFreePort"} PptFreePort#1(actual_Fdx_10: int)
{
  var {:pointer} Irp_62: int;
  var {:scalar} Allocated: int;
  var {:pointer} IrpSp_6: int;
  var {:scalar} InterruptRefCount: int;
  var {:pointer} sdv_1083: int;
  var {:pointer} Tmp_1598: int;
  var {:pointer} Command_5: int;
  var {:pointer} Head_1: int;
  var {:pointer} fdx_30: int;
  var {:scalar} CancelIrql_6: int;
  var {:scalar} SyncContext_4: int;
  var {:pointer} Fdx_10: int;
  var boogieTmp: int;
  var vslice_dummy_var_597: int;
  var vslice_dummy_var_598: int;
  var vslice_dummy_var_599: int;
  var vslice_dummy_var_600: int;
  var vslice_dummy_var_601: int;
  var vslice_dummy_var_602: int;
  var vslice_dummy_var_603: int;
  var vslice_dummy_var_604: int;
  var vslice_dummy_var_605: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;

  anon0:
    call {:si_unique_call 2929} vslice_dummy_var_597 := __HAVOC_malloc(4);
    call {:si_unique_call 2930} SyncContext_4 := __HAVOC_malloc(8);
    Fdx_10 := actual_Fdx_10;
    fdx_30 := Fdx_10;
    assume {:nonnull} SyncContext_4 != 0;
    assume SyncContext_4 > 0;
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    call {:si_unique_call 2931} Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    Mem_T.INT4[Tmp_1598] := CancelIrql_6;
    call {:si_unique_call 2932} IoAcquireCancelSpinLock(Tmp_1598);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    CancelIrql_6 := Mem_T.INT4[Tmp_1598];
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2933} vslice_dummy_var_599 := KeSynchronizeExecution(0, li2bplFunctionConstant193, 0);
    goto L24;

  L24:
    call {:si_unique_call 2934} IoReleaseCancelSpinLock(CancelIrql_6);
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    Allocated := 0;
    goto L29;

  L29:
    call {:si_unique_call 2935} Irp_62, Allocated, IrpSp_6, sdv_1083, Tmp_1598, Command_5, Head_1, CancelIrql_6, boogieTmp, vslice_dummy_var_601, vslice_dummy_var_602, vslice_dummy_var_603, vslice_dummy_var_604, vslice_dummy_var_605 := PptFreePort#1_loop_L29(Irp_62, Allocated, IrpSp_6, sdv_1083, Tmp_1598, Command_5, Head_1, fdx_30, CancelIrql_6, SyncContext_4, Fdx_10, boogieTmp, vslice_dummy_var_601, vslice_dummy_var_602, vslice_dummy_var_603, vslice_dummy_var_604, vslice_dummy_var_605);
    goto L29_last;

  L29_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Allocated != 0;
    goto L31;

  L31:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Allocated == 0;
    call {:si_unique_call 2936} Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    Mem_T.INT4[Tmp_1598] := CancelIrql_6;
    call {:si_unique_call 2937} IoAcquireCancelSpinLock(Tmp_1598);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    CancelIrql_6 := Mem_T.INT4[Tmp_1598];
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    havoc InterruptRefCount;
    call {:si_unique_call 2938} IoReleaseCancelSpinLock(CancelIrql_6);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} InterruptRefCount != 0;
    call {:si_unique_call 2939} vslice_dummy_var_600 := KeSynchronizeExecution(0, li2bplFunctionConstant202, 0);
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} InterruptRefCount == 0;
    goto L1;

  anon22_Then:
    assume {:partition} Allocated != 0;
    goto L1;

  anon20_Then:
    assume {:partition} Allocated == 0;
    assume {:nonnull} SyncContext_4 != 0;
    assume SyncContext_4 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2940} Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    Mem_T.INT4[Tmp_1598] := CancelIrql_6;
    call {:si_unique_call 2941} IoAcquireCancelSpinLock(Tmp_1598);
    assume {:nonnull} Tmp_1598 != 0;
    assume Tmp_1598 > 0;
    CancelIrql_6 := Mem_T.INT4[Tmp_1598];
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    call {:si_unique_call 2942} Head_1 := RemoveHeadList(WorkQueue__FDO_EXTENSION(fdx_30));
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 2943} IoReleaseCancelSpinLock(CancelIrql_6);
    goto L31;

  anon24_Then:
    call {:si_unique_call 2944} sdv_1083 := sdv_containing_record(Head_1, 88);
    Irp_62 := sdv_1083;
    call {:si_unique_call 2945} vslice_dummy_var_605 := PptSetCancelRoutine(Irp_62, 0);
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    assume {:nonnull} SyncContext_4 != 0;
    assume SyncContext_4 > 0;
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2946} vslice_dummy_var_602 := KeSynchronizeExecution(0, li2bplFunctionConstant193, 0);
    goto L74;

  L74:
    call {:si_unique_call 2947} IoReleaseCancelSpinLock(CancelIrql_6);
    goto L77;

  L77:
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    call {:si_unique_call 2948} vslice_dummy_var_603 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(fdx_30), Irp_62);
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    havoc vslice_dummy_var_277;
    havoc vslice_dummy_var_278;
    call {:si_unique_call 2949} vslice_dummy_var_604 := P4CompleteRequest(Irp_62, vslice_dummy_var_277, vslice_dummy_var_278);
    goto L77_dummy;

  L77_dummy:
    assume false;
    return;

  anon27_Then:
    call {:si_unique_call 2950} vslice_dummy_var_601 := PptSynchronizedDecrement(SyncContext_4);
    goto L74;

  anon25_Then:
    Allocated := 1;
    call {:si_unique_call 2951} IoReleaseCancelSpinLock(CancelIrql_6);
    call {:si_unique_call 2952} IrpSp_6 := sdv_IoGetCurrentIrpStackLocation(Irp_62);
    assume {:nonnull} IrpSp_6 != 0;
    assume IrpSp_6 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    havoc Command_5;
    assume {:nonnull} Command_5 != 0;
    assume Command_5 > 0;
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    call {:si_unique_call 2953} boogieTmp := PptTrySelectDevice#0(Fdx_10, Command_5);
    goto L98;

  L98:
    assume {:nonnull} fdx_30 != 0;
    assume fdx_30 > 0;
    goto L77;

  anon26_Then:
    assume {:nonnull} Irp_62 != 0;
    assume Irp_62 > 0;
    goto L98;

  anon21_Then:
    goto L31;

  anon19_Then:
    call {:si_unique_call 2954} vslice_dummy_var_598 := PptSynchronizedDecrement(SyncContext_4);
    goto L24;
}



procedure {:origName "PptFreePort"} PptFreePort#1(actual_Fdx_10: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation PptUnload_loop_L12(in_sdv_10: int, in_Extension: int, in_sdv_13: int, in_Head: int) returns (out_sdv_10: int, out_sdv_13: int, out_Head: int)
{

  entry:
    out_sdv_10, out_sdv_13, out_Head := in_sdv_10, in_sdv_13, in_Head;
    goto L12, exit;

  exit:
    return;

  L12:
    call {:si_unique_call 2955} out_sdv_10 := sdv_IsListEmpty(0);
    goto anon15_Then;

  anon15_Then:
    assume {:partition} out_sdv_10 == 0;
    assume {:nonnull} in_Extension != 0;
    assume in_Extension > 0;
    call {:si_unique_call 2956} out_Head := RemoveHeadList(IsrList__FDO_EXTENSION(in_Extension));
    call {:si_unique_call 2957} out_sdv_13 := sdv_containing_record(out_Head, 0);
    call {:si_unique_call 2958} sdv_ExFreePool(0);
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    call {:si_unique_call 2959} {:si_old_unique_call 1} out_sdv_10, out_sdv_13, out_Head := PptUnload_loop_L12(out_sdv_10, in_Extension, out_sdv_13, out_Head);
    return;
}



procedure {:LoopProcedure} PptUnload_loop_L12(in_sdv_10: int, in_Extension: int, in_sdv_13: int, in_Head: int) returns (out_sdv_10: int, out_sdv_13: int, out_Head: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_10 == 1 || out_sdv_10 == 0 || out_sdv_10 == in_sdv_10;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptUnload_loop_L8(in_sdv_10: int, in_CurrentDevice: int, in_sdv_12: int, in_Extension: int, in_sdv_13: int, in_Head: int, in_DriverObject: int) returns (out_sdv_10: int, out_CurrentDevice: int, out_sdv_12: int, out_Extension: int, out_sdv_13: int, out_Head: int)
{

  entry:
    out_sdv_10, out_CurrentDevice, out_sdv_12, out_Extension, out_sdv_13, out_Head := in_sdv_10, in_CurrentDevice, in_sdv_12, in_Extension, in_sdv_13, in_Head;
    goto L8, exit;

  exit:
    return;

  L8:
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_CurrentDevice != 0;
    assume {:nonnull} out_CurrentDevice != 0;
    assume out_CurrentDevice > 0;
    havoc out_Extension;
    assume {:nonnull} out_Extension != 0;
    assume out_Extension > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 2965} PptDisconnectInterrupt(out_Extension);
    goto L12;

  L12:
    call {:si_unique_call 2963} out_sdv_10, out_sdv_13, out_Head := PptUnload_loop_L12(out_sdv_10, out_Extension, out_sdv_13, out_Head);
    goto L12_last;

  L12_last:
    call {:si_unique_call 2964} out_sdv_10 := sdv_IsListEmpty(0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} out_sdv_10 != 0;
    assume {:nonnull} out_Extension != 0;
    assume out_Extension > 0;
    call {:si_unique_call 2960} sdv_ExFreePool(0);
    call {:si_unique_call 2961} IoDeleteDevice(0);
    call {:si_unique_call 2962} out_sdv_12 := IoGetConfigurationInformation();
    assume {:nonnull} out_sdv_12 != 0;
    assume out_sdv_12 > 0;
    assume {:nonnull} in_DriverObject != 0;
    assume in_DriverObject > 0;
    havoc out_CurrentDevice;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    call {:si_unique_call 2969} {:si_old_unique_call 1} out_sdv_10, out_CurrentDevice, out_sdv_12, out_Extension, out_sdv_13, out_Head := PptUnload_loop_L8(out_sdv_10, out_CurrentDevice, out_sdv_12, out_Extension, out_sdv_13, out_Head, in_DriverObject);
    return;

  anon15_Then:
    assume {:partition} out_sdv_10 == 0;
    assume {:nonnull} out_Extension != 0;
    assume out_Extension > 0;
    call {:si_unique_call 2966} out_Head := RemoveHeadList(IsrList__FDO_EXTENSION(out_Extension));
    call {:si_unique_call 2967} out_sdv_13 := sdv_containing_record(out_Head, 0);
    call {:si_unique_call 2968} sdv_ExFreePool(0);
    assume false;
    return;

  anon18_Then:
    goto L12;
}



procedure {:LoopProcedure} PptUnload_loop_L8(in_sdv_10: int, in_CurrentDevice: int, in_sdv_12: int, in_Extension: int, in_sdv_13: int, in_Head: int, in_DriverObject: int) returns (out_sdv_10: int, out_CurrentDevice: int, out_sdv_12: int, out_Extension: int, out_sdv_13: int, out_Head: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_10 == 1 || out_sdv_10 == 0 || out_sdv_10 == in_sdv_10;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L105(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int)
{

  entry:
    goto L105, exit;

  exit:
    return;

  L105:
    assume {:nonnull} in_Pdx_3 != 0;
    assume in_Pdx_3 > 0;
    goto anon73_Else;

  anon73_Else:
    assume {:partition} in_Status_2 >= 0;
    goto anon75_Then;

  anon75_Then:
    assume {:partition} in_frameBytesTransferred != in_bytesToWrite;
    goto anon75_Then_dummy;

  anon75_Then_dummy:
    call {:si_unique_call 2970} {:si_old_unique_call 1} ParDot3Write_loop_L105(in_Status_2, in_bytesToWrite, in_frameBytesTransferred, in_Pdx_3);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L105(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L95(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int)
{

  entry:
    goto L95, exit;

  exit:
    return;

  L95:
    assume {:nonnull} in_Pdx_3 != 0;
    assume in_Pdx_3 > 0;
    goto anon70_Else;

  anon70_Else:
    assume {:partition} in_Status_2 >= 0;
    goto anon72_Then;

  anon72_Then:
    assume {:partition} in_frameBytesTransferred != in_bytesToWrite;
    goto anon72_Then_dummy;

  anon72_Then_dummy:
    call {:si_unique_call 2971} {:si_old_unique_call 1} ParDot3Write_loop_L95(in_Status_2, in_bytesToWrite, in_frameBytesTransferred, in_Pdx_3);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L95(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L79(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int)
{

  entry:
    goto L79, exit;

  exit:
    return;

  L79:
    assume {:nonnull} in_Pdx_3 != 0;
    assume in_Pdx_3 > 0;
    goto anon66_Else;

  anon66_Else:
    assume {:partition} in_Status_2 >= 0;
    goto anon68_Then;

  anon68_Then:
    assume {:partition} in_frameBytesTransferred != in_bytesToWrite;
    goto anon68_Then_dummy;

  anon68_Then_dummy:
    call {:si_unique_call 2972} {:si_old_unique_call 1} ParDot3Write_loop_L79(in_Status_2, in_bytesToWrite, in_frameBytesTransferred, in_Pdx_3);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L79(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L69(in_sum: int) returns (out_sum: int)
{

  entry:
    out_sum := in_sum;
    goto L69, exit;

  exit:
    return;

  L69:
    goto anon65_Else;

  anon65_Else:
    call {:si_unique_call 2973} out_sum := corral_nondet();
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    call {:si_unique_call 2974} {:si_old_unique_call 1} out_sum := ParDot3Write_loop_L69(out_sum);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L69(in_sum: int) returns (out_sum: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L52(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int)
{

  entry:
    goto L52, exit;

  exit:
    return;

  L52:
    assume {:nonnull} in_Pdx_3 != 0;
    assume in_Pdx_3 > 0;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} in_Status_2 >= 0;
    goto anon64_Then;

  anon64_Then:
    assume {:partition} in_frameBytesTransferred != in_bytesToWrite;
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    call {:si_unique_call 2975} {:si_old_unique_call 1} ParDot3Write_loop_L52(in_Status_2, in_bytesToWrite, in_frameBytesTransferred, in_Pdx_3);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L52(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L36(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int)
{

  entry:
    goto L36, exit;

  exit:
    return;

  L36:
    assume {:nonnull} in_Pdx_3 != 0;
    assume in_Pdx_3 > 0;
    goto anon59_Else;

  anon59_Else:
    assume {:partition} in_Status_2 >= 0;
    goto anon61_Then;

  anon61_Then:
    assume {:partition} in_frameBytesTransferred != in_bytesToWrite;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    call {:si_unique_call 2976} {:si_old_unique_call 1} ParDot3Write_loop_L36(in_Status_2, in_bytesToWrite, in_frameBytesTransferred, in_Pdx_3);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L36(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L26(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int)
{

  entry:
    goto L26, exit;

  exit:
    return;

  L26:
    assume {:nonnull} in_Pdx_3 != 0;
    assume in_Pdx_3 > 0;
    goto anon56_Else;

  anon56_Else:
    assume {:partition} in_Status_2 >= 0;
    goto anon58_Then;

  anon58_Then:
    assume {:partition} in_frameBytesTransferred != in_bytesToWrite;
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    call {:si_unique_call 2977} {:si_old_unique_call 1} ParDot3Write_loop_L26(in_Status_2, in_bytesToWrite, in_frameBytesTransferred, in_Pdx_3);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L26(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Write_loop_L16(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int)
{

  entry:
    goto L16, exit;

  exit:
    return;

  L16:
    assume {:nonnull} in_Pdx_3 != 0;
    assume in_Pdx_3 > 0;
    goto anon53_Else;

  anon53_Else:
    assume {:partition} in_Status_2 >= 0;
    goto anon55_Then;

  anon55_Then:
    assume {:partition} in_frameBytesTransferred != in_bytesToWrite;
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    call {:si_unique_call 2978} {:si_old_unique_call 1} ParDot3Write_loop_L16(in_Status_2, in_bytesToWrite, in_frameBytesTransferred, in_Pdx_3);
    return;
}



procedure {:LoopProcedure} ParDot3Write_loop_L16(in_Status_2: int, in_bytesToWrite: int, in_frameBytesTransferred: int, in_Pdx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L100(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int)
{

  entry:
    goto L100, exit;

  exit:
    return;

  L100:
    assume {:nonnull} in_Pdx_7 != 0;
    assume in_Pdx_7 > 0;
    goto anon84_Else;

  anon84_Else:
    assume {:partition} in_Status_4 >= 0;
    goto anon86_Then;

  anon86_Then:
    assume {:partition} in_bytesTransferred != in_bytesToRead;
    goto anon86_Then_dummy;

  anon86_Then_dummy:
    call {:si_unique_call 2979} {:si_old_unique_call 1} ParDot3Read_loop_L100(in_Status_4, in_bytesToRead, in_bytesTransferred, in_Pdx_7);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L100(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L89(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int)
{

  entry:
    goto L89, exit;

  exit:
    return;

  L89:
    assume {:nonnull} in_Pdx_7 != 0;
    assume in_Pdx_7 > 0;
    goto anon80_Else;

  anon80_Else:
    assume {:partition} in_Status_4 >= 0;
    goto anon82_Then;

  anon82_Then:
    assume {:partition} in_bytesTransferred != in_bytesToRead;
    goto anon82_Then_dummy;

  anon82_Then_dummy:
    call {:si_unique_call 2980} {:si_old_unique_call 1} ParDot3Read_loop_L89(in_Status_4, in_bytesToRead, in_bytesTransferred, in_Pdx_7);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L89(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L81(in_sum_1: int) returns (out_sum_1: int)
{

  entry:
    out_sum_1 := in_sum_1;
    goto L81, exit;

  exit:
    return;

  L81:
    goto anon79_Else;

  anon79_Else:
    call {:si_unique_call 2981} out_sum_1 := corral_nondet();
    goto anon79_Else_dummy;

  anon79_Else_dummy:
    call {:si_unique_call 2982} {:si_old_unique_call 1} out_sum_1 := ParDot3Read_loop_L81(out_sum_1);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L81(in_sum_1: int) returns (out_sum_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L58(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_ucScrap2: int, in_Pdx_7: int)
{

  entry:
    goto L58, exit;

  exit:
    return;

  L58:
    assume {:nonnull} in_Pdx_7 != 0;
    assume in_Pdx_7 > 0;
    goto anon75_Else;

  anon75_Else:
    assume {:partition} in_Status_4 >= 0;
    goto anon76_Then;

  anon76_Then:
    assume {:partition} in_bytesTransferred != in_bytesToRead;
    goto anon76_Then_dummy;

  anon76_Then_dummy:
    call {:si_unique_call 2983} {:si_old_unique_call 1} ParDot3Read_loop_L58(in_Status_4, in_bytesToRead, in_bytesTransferred, in_ucScrap2, in_Pdx_7);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L58(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_ucScrap2: int, in_Pdx_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L46(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_ucScrap2: int, in_Pdx_7: int)
{

  entry:
    goto L46, exit;

  exit:
    return;

  L46:
    assume {:nonnull} in_Pdx_7 != 0;
    assume in_Pdx_7 > 0;
    goto anon73_Else;

  anon73_Else:
    assume {:partition} in_Status_4 >= 0;
    goto anon74_Then;

  anon74_Then:
    assume {:partition} in_bytesTransferred != in_bytesToRead;
    goto anon74_Then_dummy;

  anon74_Then_dummy:
    call {:si_unique_call 2984} {:si_old_unique_call 1} ParDot3Read_loop_L46(in_Status_4, in_bytesToRead, in_bytesTransferred, in_ucScrap2, in_Pdx_7);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L46(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_ucScrap2: int, in_Pdx_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L35(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int)
{

  entry:
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:nonnull} in_Pdx_7 != 0;
    assume in_Pdx_7 > 0;
    goto anon69_Else;

  anon69_Else:
    assume {:partition} in_Status_4 >= 0;
    goto anon71_Then;

  anon71_Then:
    assume {:partition} in_bytesTransferred != in_bytesToRead;
    goto anon71_Then_dummy;

  anon71_Then_dummy:
    call {:si_unique_call 2985} {:si_old_unique_call 1} ParDot3Read_loop_L35(in_Status_4, in_bytesToRead, in_bytesTransferred, in_Pdx_7);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L35(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L24(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int)
{

  entry:
    goto L24, exit;

  exit:
    return;

  L24:
    assume {:nonnull} in_Pdx_7 != 0;
    assume in_Pdx_7 > 0;
    goto anon65_Else;

  anon65_Else:
    assume {:partition} in_Status_4 >= 0;
    goto anon67_Then;

  anon67_Then:
    assume {:partition} in_bytesTransferred != in_bytesToRead;
    goto anon67_Then_dummy;

  anon67_Then_dummy:
    call {:si_unique_call 2986} {:si_old_unique_call 1} ParDot3Read_loop_L24(in_Status_4, in_bytesToRead, in_bytesTransferred, in_Pdx_7);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L24(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3Read_loop_L13(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int)
{

  entry:
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:nonnull} in_Pdx_7 != 0;
    assume in_Pdx_7 > 0;
    goto anon61_Else;

  anon61_Else:
    assume {:partition} in_Status_4 >= 0;
    goto anon63_Then;

  anon63_Then:
    assume {:partition} in_bytesTransferred != in_bytesToRead;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    call {:si_unique_call 2987} {:si_old_unique_call 1} ParDot3Read_loop_L13(in_Status_4, in_bytesToRead, in_bytesTransferred, in_Pdx_7);
    return;
}



procedure {:LoopProcedure} ParDot3Read_loop_L13(in_Status_4: int, in_bytesToRead: int, in_bytesTransferred: int, in_Pdx_7: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppCheckBusyDelay_loop_L109(in_i: int, in_DeviceStatus: int, in_NumberOfCalls: int, in_Controller: int) returns (out_i: int, out_DeviceStatus: int)
{

  entry:
    out_i, out_DeviceStatus := in_i, in_DeviceStatus;
    goto L109, exit;

  exit:
    return;

  L109:
    goto anon63_Else;

  anon63_Else:
    assume {:partition} in_NumberOfCalls > out_i;
    call {:si_unique_call 2988} out_DeviceStatus := corral_nondet();
    goto anon65_Else;

  anon65_Else:
    assume {:partition} BAND(out_DeviceStatus, 128) != 0;
    out_i := out_i + 1;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    havoc out_i;
    return;
}



procedure {:LoopProcedure} SppCheckBusyDelay_loop_L109(in_i: int, in_DeviceStatus: int, in_NumberOfCalls: int, in_Controller: int) returns (out_i: int, out_DeviceStatus: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppCheckBusyDelay_loop_L153(in_i: int, in_DeviceStatus: int, in_NumberOfCalls: int, in_Controller: int) returns (out_i: int, out_DeviceStatus: int)
{

  entry:
    out_i, out_DeviceStatus := in_i, in_DeviceStatus;
    goto L153, exit;

  exit:
    return;

  L153:
    goto anon68_Else;

  anon68_Else:
    assume {:partition} in_NumberOfCalls > out_i;
    call {:si_unique_call 2989} out_DeviceStatus := corral_nondet();
    goto anon70_Else;

  anon70_Else:
    assume {:partition} BAND(out_DeviceStatus, 128) != 0;
    out_i := out_i + 1;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    havoc out_i;
    return;
}



procedure {:LoopProcedure} SppCheckBusyDelay_loop_L153(in_i: int, in_DeviceStatus: int, in_NumberOfCalls: int, in_Controller: int) returns (out_i: int, out_DeviceStatus: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppCheckBusyDelay_loop_L61(in_i: int, in_DeviceStatus: int, in_maxTries: int, in_Controller: int) returns (out_i: int, out_DeviceStatus: int)
{

  entry:
    out_i, out_DeviceStatus := in_i, in_DeviceStatus;
    goto L61, exit;

  exit:
    return;

  L61:
    goto anon53_Else;

  anon53_Else:
    assume {:partition} in_maxTries > out_i;
    call {:si_unique_call 2990} out_DeviceStatus := corral_nondet();
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} BAND(out_DeviceStatus, 8) != 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(out_DeviceStatus, 128) != 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon57_Else;

  anon57_Else:
    assume {:partition} BAND(out_DeviceStatus, 16) == 0;
    goto L69;

  L69:
    out_i := out_i + 1;
    goto L69_dummy;

  L69_dummy:
    havoc out_i;
    return;

  anon74_Then:
    goto L69;

  anon56_Then:
    assume {:partition} BAND(out_DeviceStatus, 128) == 0;
    goto L69;

  anon55_Then:
    assume {:partition} BAND(out_DeviceStatus, 8) == 0;
    goto L69;
}



procedure {:LoopProcedure} SppCheckBusyDelay_loop_L61(in_i: int, in_DeviceStatus: int, in_maxTries: int, in_Controller: int) returns (out_i: int, out_DeviceStatus: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppWrite_loop_L287(in_s_p_e_c_i_a_l_2: int, in_NextQuery: int)
{

  entry:
    goto L287, exit;

  exit:
    return;

  L287:
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    goto anon381_Then;

  anon381_Then:
    goto anon381_Then_dummy;

  anon381_Then_dummy:
    call {:si_unique_call 2991} {:si_old_unique_call 1} SppWrite_loop_L287(in_s_p_e_c_i_a_l_2, in_NextQuery);
    return;
}



procedure {:LoopProcedure} SppWrite_loop_L287(in_s_p_e_c_i_a_l_2: int, in_NextQuery: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppWrite_loop_L193(in_DoDelays: int, in_Tmp_358: int, in_DeviceStatus_1: int, in_CountDown: int, in_sdv_198: int, in_Tmp_369: int, in_Tmp_376: int, in_PortFree: int, in_Tmp_383: int, in_StartOfSpin: int, in_Difference: int, in_sdv_204: int, in_s_p_e_c_i_a_l_2: int, in_Tmp_395: int, in_Tmp_399: int, in_sdv_208: int, in_Tmp_406: int, in_Tmp_408: int, in_NextQuery: int, in_Pdx_12: int, in_vslice_dummy_var_104: int, in_vslice_dummy_var_105: int, in_vslice_dummy_var_106: int) returns (out_DoDelays: int, out_Tmp_358: int, out_DeviceStatus_1: int, out_CountDown: int, out_sdv_198: int, out_Tmp_369: int, out_Tmp_376: int, out_PortFree: int, out_Tmp_383: int, out_sdv_204: int, out_s_p_e_c_i_a_l_2: int, out_Tmp_395: int, out_Tmp_399: int, out_sdv_208: int, out_Tmp_406: int, out_Tmp_408: int, out_vslice_dummy_var_104: int, out_vslice_dummy_var_105: int, out_vslice_dummy_var_106: int)
{
  var vslice_dummy_var_279: int;

  entry:
    out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_CountDown, out_sdv_198, out_Tmp_369, out_Tmp_376, out_PortFree, out_Tmp_383, out_sdv_204, out_s_p_e_c_i_a_l_2, out_Tmp_395, out_Tmp_399, out_sdv_208, out_Tmp_406, out_Tmp_408, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := in_DoDelays, in_Tmp_358, in_DeviceStatus_1, in_CountDown, in_sdv_198, in_Tmp_369, in_Tmp_376, in_PortFree, in_Tmp_383, in_sdv_204, in_s_p_e_c_i_a_l_2, in_Tmp_395, in_Tmp_399, in_sdv_208, in_Tmp_406, in_Tmp_408, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106;
    goto L193, exit;

  exit:
    return;

  L193:
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume {:partition} out_DoDelays == 0;
    assume {:IndirectCall} true;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc vslice_dummy_var_279;
    call {:si_unique_call 3000} out_sdv_208 := PptQueryNumWaiters(vslice_dummy_var_279);
    goto anon331_Then, anon331_Else;

  anon331_Else:
    assume {:partition} out_sdv_208 != 0;
    call {:si_unique_call 2999} ParFreePort(in_Pdx_12);
    out_PortFree := 1;
    goto L285;

  L285:
    out_Tmp_395 := KeTickCount;
    assume {:nonnull} out_Tmp_395 != 0;
    assume out_Tmp_395 > 0;
    havoc out_s_p_e_c_i_a_l_2;
    goto L287;

  L287:
    call {:si_unique_call 2998} SppWrite_loop_L287(out_s_p_e_c_i_a_l_2, in_NextQuery);
    goto L287_last;

  L287_last:
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    assume {:nonnull} in_Difference != 0;
    assume in_Difference > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    call {:si_unique_call 2997} out_sdv_198 := corral_nondet();
    assume {:nonnull} in_Difference != 0;
    assume in_Difference > 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    out_CountDown := out_CountDown - 1;
    out_DoDelays := 1;
    goto L213;

  L213:
    goto anon305_Then;

  anon305_Then:
    assume {:partition} out_CountDown > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:partition} out_PortFree != 0;
    call {:si_unique_call 3001} out_sdv_204 := ParAllocPort(in_Pdx_12);
    goto anon307_Then;

  anon307_Then:
    assume {:partition} out_sdv_204 != 0;
    goto L218;

  L218:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    call {:si_unique_call 2992} out_DeviceStatus_1 := corral_nondet();
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon375_Then, anon375_Else;

  anon375_Else:
    goto anon311_Else;

  anon311_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L231;

  L231:
    goto anon309_Else;

  anon309_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume {:partition} 0 != 1;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    goto anon377_Then, anon377_Else;

  anon377_Else:
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_383 := 1;
    goto L247;

  L247:
    out_Tmp_406 := out_Tmp_383;
    goto L248;

  L248:
    goto anon314_Else;

  anon314_Else:
    assume {:partition} out_Tmp_406 == 0;
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon318_Else;

  anon318_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto L250;

  L250:
    goto anon316_Then, anon316_Else;

  anon316_Else:
    assume {:partition} 0 != 1;
    goto anon378_Then, anon378_Else;

  anon378_Else:
    goto anon320_Then, anon320_Else;

  anon320_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_376 := 1;
    goto L262;

  L262:
    out_Tmp_408 := out_Tmp_376;
    goto L263;

  L263:
    goto anon324_Else;

  anon324_Else:
    assume {:partition} out_Tmp_408 == 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc out_Tmp_369;
    assume {:nonnull} out_Tmp_369 != 0;
    assume out_Tmp_369 > 0;
    goto anon379_Else;

  anon379_Else:
    goto anon379_Else_dummy;

  anon379_Else_dummy:
    call {:si_unique_call 3002} {:si_old_unique_call 1} out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_CountDown, out_sdv_198, out_Tmp_369, out_Tmp_376, out_PortFree, out_Tmp_383, out_sdv_204, out_s_p_e_c_i_a_l_2, out_Tmp_395, out_Tmp_399, out_sdv_208, out_Tmp_406, out_Tmp_408, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := SppWrite_loop_L193(out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_CountDown, out_sdv_198, out_Tmp_369, out_Tmp_376, out_PortFree, out_Tmp_383, in_StartOfSpin, in_Difference, out_sdv_204, out_s_p_e_c_i_a_l_2, out_Tmp_395, out_Tmp_399, out_sdv_208, out_Tmp_406, out_Tmp_408, in_NextQuery, in_Pdx_12, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106);
    return;

  anon323_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L256;

  L256:
    out_Tmp_376 := 0;
    goto L262;

  anon322_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L256;

  anon321_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L256;

  anon320_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L256;

  anon378_Then:
    goto L256;

  anon316_Then:
    assume {:partition} 0 == 1;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_399 := 1;
    goto L271;

  L271:
    out_Tmp_408 := out_Tmp_399;
    goto L263;

  anon328_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L265;

  L265:
    out_Tmp_399 := 0;
    goto L271;

  anon327_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L265;

  anon326_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L265;

  anon325_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L265;

  anon319_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L265;

  anon317_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L250;

  anon315_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L250;

  anon313_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L242;

  L242:
    out_Tmp_383 := 0;
    goto L247;

  anon377_Then:
    goto L242;

  anon376_Then:
    goto L242;

  anon312_Then:
    assume {:partition} 0 == 1;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    goto anon329_Then, anon329_Else;

  anon329_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_358 := 1;
    goto L277;

  L277:
    out_Tmp_406 := out_Tmp_358;
    goto L248;

  anon330_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L273;

  L273:
    out_Tmp_358 := 0;
    goto L277;

  anon329_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L273;

  anon380_Then:
    goto L273;

  anon375_Then:
    goto L231;

  anon310_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L231;

  anon308_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L231;

  anon306_Then:
    assume {:partition} out_PortFree == 0;
    goto L218;

  anon332_Then:
    goto L213;

  anon381_Then:
    assume false;
    return;

  anon331_Then:
    assume {:partition} out_sdv_208 == 0;
    out_PortFree := 0;
    goto L285;

  anon304_Then:
    assume {:partition} out_DoDelays != 0;
    call {:si_unique_call 2993} ParFreePort(in_Pdx_12);
    out_PortFree := 1;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    call {:si_unique_call 2994} out_vslice_dummy_var_105 := corral_nondet();
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    call {:si_unique_call 2995} out_vslice_dummy_var_106 := corral_nondet();
    call {:si_unique_call 2996} out_vslice_dummy_var_104 := KeDelayExecutionThread(0, 0, 0);
    out_CountDown := out_CountDown - 1;
    goto L213;
}



procedure {:LoopProcedure} SppWrite_loop_L193(in_DoDelays: int, in_Tmp_358: int, in_DeviceStatus_1: int, in_CountDown: int, in_sdv_198: int, in_Tmp_369: int, in_Tmp_376: int, in_PortFree: int, in_Tmp_383: int, in_StartOfSpin: int, in_Difference: int, in_sdv_204: int, in_s_p_e_c_i_a_l_2: int, in_Tmp_395: int, in_Tmp_399: int, in_sdv_208: int, in_Tmp_406: int, in_Tmp_408: int, in_NextQuery: int, in_Pdx_12: int, in_vslice_dummy_var_104: int, in_vslice_dummy_var_105: int, in_vslice_dummy_var_106: int) returns (out_DoDelays: int, out_Tmp_358: int, out_DeviceStatus_1: int, out_CountDown: int, out_sdv_198: int, out_Tmp_369: int, out_Tmp_376: int, out_PortFree: int, out_Tmp_383: int, out_sdv_204: int, out_s_p_e_c_i_a_l_2: int, out_Tmp_395: int, out_Tmp_399: int, out_sdv_208: int, out_Tmp_406: int, out_Tmp_408: int, out_vslice_dummy_var_104: int, out_vslice_dummy_var_105: int, out_vslice_dummy_var_106: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_DoDelays == 1 || out_DoDelays == in_DoDelays;
  free ensures {:va_keep} out_Tmp_358 == 1 || out_Tmp_358 == 0 || out_Tmp_358 == in_Tmp_358;
  free ensures {:va_keep} out_Tmp_376 == 1 || out_Tmp_376 == 0 || out_Tmp_376 == in_Tmp_376;
  free ensures {:va_keep} out_PortFree == 1 || out_PortFree == 0 || out_PortFree == in_PortFree;
  free ensures {:va_keep} out_Tmp_383 == 1 || out_Tmp_383 == 0 || out_Tmp_383 == in_Tmp_383;
  free ensures {:va_keep} out_sdv_204 == 1 || out_sdv_204 == 0 || out_sdv_204 == in_sdv_204;
  free ensures {:va_keep} out_Tmp_399 == 1 || out_Tmp_399 == 0 || out_Tmp_399 == in_Tmp_399;
  free ensures {:va_keep} out_Tmp_406 == 1 || out_Tmp_406 == 0 || out_Tmp_406 == in_Tmp_406;
  free ensures {:va_keep} out_Tmp_408 == 1 || out_Tmp_408 == 0 || out_Tmp_408 == in_Tmp_408;
  free ensures {:va_keep} out_vslice_dummy_var_104 == 0 || out_vslice_dummy_var_104 == -1073741823 || out_vslice_dummy_var_104 == in_vslice_dummy_var_104;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppWrite_loop_L185(in_s_p_e_c_i_a_l_1: int, in_StartOfSpin: int)
{

  entry:
    goto L185, exit;

  exit:
    return;

  L185:
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    goto anon374_Then;

  anon374_Then:
    goto anon374_Then_dummy;

  anon374_Then_dummy:
    call {:si_unique_call 3003} {:si_old_unique_call 1} SppWrite_loop_L185(in_s_p_e_c_i_a_l_1, in_StartOfSpin);
    return;
}



procedure {:LoopProcedure} SppWrite_loop_L185(in_s_p_e_c_i_a_l_1: int, in_StartOfSpin: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppWrite_loop_L29(in_DoDelays: int, in_Tmp_358: int, in_DeviceStatus_1: int, in_Tmp_360: int, in_CountDown: int, in_s_p_e_c_i_a_l_1: int, in_sdv_198: int, in_Tmp_369: int, in_MaxBytes: int, in_Tmp_372: int, in_Tmp_373: int, in_Tmp_374: int, in_Tmp_376: int, in_Tmp_377: int, in_PortFree: int, in_Tmp_382: int, in_IrpBuffer: int, in_sdv_200: int, in_TimerStart: int, in_Tmp_383: int, in_StartOfSpin: int, in_MaxBusyDelay: int, in_Difference: int, in_sdv_204: int, in_NumBytesWritten: int, in_Tmp_387: int, in_s_p_e_c_i_a_l_2: int, in_Tmp_389: int, in_Tmp_392: int, in_Tmp_394: int, in_Tmp_395: int, in_Tmp_398: int, in_LoopNumber: int, in_Tmp_399: int, in_sdv_208: int, in_NumberOfBusyChecks: int, in_Tmp_402: int, in_Tmp_404: int, in_Tmp_405: int, in_Tmp_406: int, in_Tmp_407: int, in_Tmp_408: int, in_Tmp_411: int, in_NextQuery: int, in_Tmp_415: int, in_Pdx_12: int, in_BytesToWrite: int, in_BytesTransferred_2: int, in_vslice_dummy_var_103: int, in_vslice_dummy_var_104: int, in_vslice_dummy_var_105: int, in_vslice_dummy_var_106: int) returns (out_DoDelays: int, out_Tmp_358: int, out_DeviceStatus_1: int, out_Tmp_360: int, out_CountDown: int, out_s_p_e_c_i_a_l_1: int, out_sdv_198: int, out_Tmp_369: int, out_Tmp_372: int, out_Tmp_373: int, out_Tmp_374: int, out_Tmp_376: int, out_Tmp_377: int, out_PortFree: int, out_Tmp_382: int, out_sdv_200: int, out_Tmp_383: int, out_MaxBusyDelay: int, out_sdv_204: int, out_NumBytesWritten: int, out_Tmp_387: int, out_s_p_e_c_i_a_l_2: int, out_Tmp_389: int, out_Tmp_392: int, out_Tmp_394: int, out_Tmp_395: int, out_Tmp_398: int, out_LoopNumber: int, out_Tmp_399: int, out_sdv_208: int, out_NumberOfBusyChecks: int, out_Tmp_402: int, out_Tmp_404: int, out_Tmp_405: int, out_Tmp_406: int, out_Tmp_407: int, out_Tmp_408: int, out_Tmp_411: int, out_Tmp_415: int, out_BytesToWrite: int, out_vslice_dummy_var_103: int, out_vslice_dummy_var_104: int, out_vslice_dummy_var_105: int, out_vslice_dummy_var_106: int)
{
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;

  entry:
    out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_Tmp_360, out_CountDown, out_s_p_e_c_i_a_l_1, out_sdv_198, out_Tmp_369, out_Tmp_372, out_Tmp_373, out_Tmp_374, out_Tmp_376, out_Tmp_377, out_PortFree, out_Tmp_382, out_sdv_200, out_Tmp_383, out_MaxBusyDelay, out_sdv_204, out_NumBytesWritten, out_Tmp_387, out_s_p_e_c_i_a_l_2, out_Tmp_389, out_Tmp_392, out_Tmp_394, out_Tmp_395, out_Tmp_398, out_LoopNumber, out_Tmp_399, out_sdv_208, out_NumberOfBusyChecks, out_Tmp_402, out_Tmp_404, out_Tmp_405, out_Tmp_406, out_Tmp_407, out_Tmp_408, out_Tmp_411, out_Tmp_415, out_BytesToWrite, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := in_DoDelays, in_Tmp_358, in_DeviceStatus_1, in_Tmp_360, in_CountDown, in_s_p_e_c_i_a_l_1, in_sdv_198, in_Tmp_369, in_Tmp_372, in_Tmp_373, in_Tmp_374, in_Tmp_376, in_Tmp_377, in_PortFree, in_Tmp_382, in_sdv_200, in_Tmp_383, in_MaxBusyDelay, in_sdv_204, in_NumBytesWritten, in_Tmp_387, in_s_p_e_c_i_a_l_2, in_Tmp_389, in_Tmp_392, in_Tmp_394, in_Tmp_395, in_Tmp_398, in_LoopNumber, in_Tmp_399, in_sdv_208, in_NumberOfBusyChecks, in_Tmp_402, in_Tmp_404, in_Tmp_405, in_Tmp_406, in_Tmp_407, in_Tmp_408, in_Tmp_411, in_Tmp_415, in_BytesToWrite, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106;
    goto L29, exit;

  exit:
    return;

  L29:
    out_LoopNumber := 512;
    goto anon358_Then, anon358_Else;

  anon358_Else:
    assume {:partition} out_LoopNumber > out_BytesToWrite;
    out_LoopNumber := out_BytesToWrite;
    goto L31;

  L31:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc vslice_dummy_var_280;
    havoc vslice_dummy_var_281;
    call {:si_unique_call 3008} out_NumBytesWritten := SppWriteLoopPI(vslice_dummy_var_280, in_IrpBuffer, out_LoopNumber, vslice_dummy_var_281);
    goto L44;

  L44:
    goto anon261_Then, anon261_Else;

  anon261_Else:
    assume {:partition} out_NumBytesWritten != 0;
    out_CountDown := in_TimerStart;
    out_BytesToWrite := out_BytesToWrite - out_NumBytesWritten;
    goto L45;

  L45:
    goto anon262_Else;

  anon262_Else:
    assume {:partition} out_BytesToWrite != 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc out_Tmp_394;
    assume {:nonnull} out_Tmp_394 != 0;
    assume out_Tmp_394 > 0;
    goto anon359_Then;

  anon359_Then:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    call {:si_unique_call 3007} out_DeviceStatus_1 := corral_nondet();
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon360_Then, anon360_Else;

  anon360_Else:
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L62;

  L62:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto L69;

  L69:
    goto anon268_Else;

  anon268_Else:
    assume {:partition} out_CountDown > 0;
    out_CountDown := out_CountDown - 1;
    call {:si_unique_call 3004} ParFreePort(in_Pdx_12);
    call {:si_unique_call 3005} out_vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    call {:si_unique_call 3006} out_sdv_200 := ParAllocPort(in_Pdx_12);
    goto anon269_Then;

  anon269_Then:
    assume {:partition} out_sdv_200 != 0;
    goto anon269_Then_dummy;

  anon269_Then_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 3023} {:si_old_unique_call 1} out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_Tmp_360, out_CountDown, out_s_p_e_c_i_a_l_1, out_sdv_198, out_Tmp_369, out_Tmp_372, out_Tmp_373, out_Tmp_374, out_Tmp_376, out_Tmp_377, out_PortFree, out_Tmp_382, out_sdv_200, out_Tmp_383, out_MaxBusyDelay, out_sdv_204, out_NumBytesWritten, out_Tmp_387, out_s_p_e_c_i_a_l_2, out_Tmp_389, out_Tmp_392, out_Tmp_394, out_Tmp_395, out_Tmp_398, out_LoopNumber, out_Tmp_399, out_sdv_208, out_NumberOfBusyChecks, out_Tmp_402, out_Tmp_404, out_Tmp_405, out_Tmp_406, out_Tmp_407, out_Tmp_408, out_Tmp_411, out_Tmp_415, out_BytesToWrite, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := SppWrite_loop_L29(out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_Tmp_360, out_CountDown, out_s_p_e_c_i_a_l_1, out_sdv_198, out_Tmp_369, in_MaxBytes, out_Tmp_372, out_Tmp_373, out_Tmp_374, out_Tmp_376, out_Tmp_377, out_PortFree, out_Tmp_382, in_IrpBuffer, out_sdv_200, in_TimerStart, out_Tmp_383, in_StartOfSpin, out_MaxBusyDelay, in_Difference, out_sdv_204, out_NumBytesWritten, out_Tmp_387, out_s_p_e_c_i_a_l_2, out_Tmp_389, out_Tmp_392, out_Tmp_394, out_Tmp_395, out_Tmp_398, out_LoopNumber, out_Tmp_399, out_sdv_208, out_NumberOfBusyChecks, out_Tmp_402, out_Tmp_404, out_Tmp_405, out_Tmp_406, out_Tmp_407, out_Tmp_408, out_Tmp_411, in_NextQuery, out_Tmp_415, in_Pdx_12, out_BytesToWrite, in_BytesTransferred_2, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106);
    return;

  anon264_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume {:partition} 0 != 1;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon367_Then, anon367_Else;

  anon367_Else:
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    out_Tmp_382 := 1;
    goto L137;

  L137:
    out_Tmp_402 := out_Tmp_382;
    goto L138;

  L138:
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume {:partition} out_Tmp_402 == 0;
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume {:partition} 0 != 1;
    goto anon368_Then, anon368_Else;

  anon368_Else:
    goto anon369_Then, anon369_Else;

  anon369_Else:
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_373 := 1;
    goto L148;

  L148:
    out_Tmp_398 := out_Tmp_373;
    goto L149;

  L149:
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume {:partition} out_Tmp_398 != 0;
    goto L151;

  L151:
    assume {:nonnull} in_BytesTransferred_2 != 0;
    assume in_BytesTransferred_2 > 0;
    Mem_T.INT4[in_BytesTransferred_2] := in_MaxBytes - out_BytesToWrite;
    goto anon370_Then, anon370_Else;

  anon370_Else:
    assume {:partition} 0 != 1;
    goto anon371_Then, anon371_Else;

  anon371_Else:
    goto anon372_Then, anon372_Else;

  anon372_Else:
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_407 := 1;
    goto L161;

  L161:
    out_Tmp_360 := out_Tmp_407;
    goto L162;

  L162:
    goto anon293_Then;

  anon293_Then:
    assume {:partition} out_Tmp_360 == 0;
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon297_Then;

  anon297_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto L166;

  L166:
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume {:partition} 0 != 1;
    goto anon373_Then, anon373_Else;

  anon373_Else:
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_415 := 1;
    goto L180;

  L180:
    out_Tmp_404 := out_Tmp_415;
    goto L181;

  L181:
    goto anon303_Else;

  anon303_Else:
    assume {:partition} out_Tmp_404 == 0;
    goto L183;

  L183:
    out_Tmp_374 := KeTickCount;
    assume {:nonnull} out_Tmp_374 != 0;
    assume out_Tmp_374 > 0;
    havoc out_s_p_e_c_i_a_l_1;
    goto L185;

  L185:
    call {:si_unique_call 3017} SppWrite_loop_L185(out_s_p_e_c_i_a_l_1, in_StartOfSpin);
    goto L185_last;

  L185_last:
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_1 != 0;
    assume out_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_1 != 0;
    assume out_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_1 != 0;
    assume out_s_p_e_c_i_a_l_1 > 0;
    goto anon374_Then, anon374_Else;

  anon374_Else:
    out_DoDelays := 0;
    goto L193;

  L193:
    call {:si_unique_call 3016} out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_CountDown, out_sdv_198, out_Tmp_369, out_Tmp_376, out_PortFree, out_Tmp_383, out_sdv_204, out_s_p_e_c_i_a_l_2, out_Tmp_395, out_Tmp_399, out_sdv_208, out_Tmp_406, out_Tmp_408, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := SppWrite_loop_L193(out_DoDelays, out_Tmp_358, out_DeviceStatus_1, out_CountDown, out_sdv_198, out_Tmp_369, out_Tmp_376, out_PortFree, out_Tmp_383, in_StartOfSpin, in_Difference, out_sdv_204, out_s_p_e_c_i_a_l_2, out_Tmp_395, out_Tmp_399, out_sdv_208, out_Tmp_406, out_Tmp_408, in_NextQuery, in_Pdx_12, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106);
    goto L193_last;

  L193_last:
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume {:partition} out_DoDelays == 0;
    assume {:IndirectCall} true;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc vslice_dummy_var_283;
    call {:si_unique_call 3021} out_sdv_208 := PptQueryNumWaiters(vslice_dummy_var_283);
    goto anon331_Then, anon331_Else;

  anon331_Else:
    assume {:partition} out_sdv_208 != 0;
    call {:si_unique_call 3020} ParFreePort(in_Pdx_12);
    out_PortFree := 1;
    goto L285;

  L285:
    out_Tmp_395 := KeTickCount;
    assume {:nonnull} out_Tmp_395 != 0;
    assume out_Tmp_395 > 0;
    havoc out_s_p_e_c_i_a_l_2;
    goto L287;

  L287:
    call {:si_unique_call 3019} SppWrite_loop_L287(out_s_p_e_c_i_a_l_2, in_NextQuery);
    goto L287_last;

  L287_last:
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    assume {:nonnull} in_Difference != 0;
    assume in_Difference > 0;
    assume {:nonnull} in_NextQuery != 0;
    assume in_NextQuery > 0;
    assume {:nonnull} in_StartOfSpin != 0;
    assume in_StartOfSpin > 0;
    call {:si_unique_call 3018} out_sdv_198 := corral_nondet();
    assume {:nonnull} in_Difference != 0;
    assume in_Difference > 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    out_CountDown := out_CountDown - 1;
    out_DoDelays := 1;
    goto L213;

  L213:
    goto anon305_Then;

  anon305_Then:
    assume {:partition} out_CountDown > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:partition} out_PortFree != 0;
    call {:si_unique_call 3022} out_sdv_204 := ParAllocPort(in_Pdx_12);
    goto anon307_Then;

  anon307_Then:
    assume {:partition} out_sdv_204 != 0;
    goto L218;

  L218:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    call {:si_unique_call 3011} out_DeviceStatus_1 := corral_nondet();
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon375_Then, anon375_Else;

  anon375_Else:
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L231;

  L231:
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume {:partition} 0 != 1;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    goto anon377_Then, anon377_Else;

  anon377_Else:
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_383 := 1;
    goto L247;

  L247:
    out_Tmp_406 := out_Tmp_383;
    goto L248;

  L248:
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:partition} out_Tmp_406 == 0;
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon318_Then, anon318_Else;

  anon318_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto L250;

  L250:
    goto anon316_Then, anon316_Else;

  anon316_Else:
    assume {:partition} 0 != 1;
    goto anon378_Then, anon378_Else;

  anon378_Else:
    goto anon320_Then, anon320_Else;

  anon320_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_376 := 1;
    goto L262;

  L262:
    out_Tmp_408 := out_Tmp_376;
    goto L263;

  L263:
    goto anon324_Then, anon324_Else;

  anon324_Else:
    assume {:partition} out_Tmp_408 == 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc out_Tmp_369;
    assume {:nonnull} out_Tmp_369 != 0;
    assume out_Tmp_369 > 0;
    goto anon379_Then, anon379_Else;

  anon379_Else:
    assume false;
    return;

  anon379_Then:
    goto anon379_Then_dummy;

  anon379_Then_dummy:
    goto L_BAF_0;

  anon324_Then:
    assume {:partition} out_Tmp_408 != 0;
    goto anon324_Then_dummy;

  anon324_Then_dummy:
    goto L_BAF_0;

  anon323_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L256;

  L256:
    out_Tmp_376 := 0;
    goto L262;

  anon322_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L256;

  anon321_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L256;

  anon320_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L256;

  anon378_Then:
    goto L256;

  anon316_Then:
    assume {:partition} 0 == 1;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_399 := 1;
    goto L271;

  L271:
    out_Tmp_408 := out_Tmp_399;
    goto L263;

  anon328_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L265;

  L265:
    out_Tmp_399 := 0;
    goto L271;

  anon327_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L265;

  anon326_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L265;

  anon325_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L265;

  anon319_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L265;

  anon318_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto anon318_Then_dummy;

  anon318_Then_dummy:
    goto L_BAF_0;

  anon317_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L250;

  anon315_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L250;

  anon314_Then:
    assume {:partition} out_Tmp_406 != 0;
    goto anon314_Then_dummy;

  anon314_Then_dummy:
    goto L_BAF_0;

  anon313_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L242;

  L242:
    out_Tmp_383 := 0;
    goto L247;

  anon377_Then:
    goto L242;

  anon376_Then:
    goto L242;

  anon312_Then:
    assume {:partition} 0 == 1;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    goto anon329_Then, anon329_Else;

  anon329_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_358 := 1;
    goto L277;

  L277:
    out_Tmp_406 := out_Tmp_358;
    goto L248;

  anon330_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L273;

  L273:
    out_Tmp_358 := 0;
    goto L277;

  anon329_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L273;

  anon380_Then:
    goto L273;

  anon309_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon309_Then_dummy;

  anon309_Then_dummy:
    goto L_BAF_0;

  anon311_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon311_Then_dummy;

  anon311_Then_dummy:
    goto L_BAF_0;

  anon375_Then:
    goto L231;

  anon310_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L231;

  anon308_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L231;

  anon306_Then:
    assume {:partition} out_PortFree == 0;
    goto L218;

  anon332_Then:
    goto L213;

  anon381_Then:
    assume false;
    return;

  anon331_Then:
    assume {:partition} out_sdv_208 == 0;
    out_PortFree := 0;
    goto L285;

  anon304_Then:
    assume {:partition} out_DoDelays != 0;
    call {:si_unique_call 3012} ParFreePort(in_Pdx_12);
    out_PortFree := 1;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    call {:si_unique_call 3013} out_vslice_dummy_var_105 := corral_nondet();
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    call {:si_unique_call 3014} out_vslice_dummy_var_106 := corral_nondet();
    call {:si_unique_call 3015} out_vslice_dummy_var_104 := KeDelayExecutionThread(0, 0, 0);
    out_CountDown := out_CountDown - 1;
    goto L213;

  anon374_Then:
    assume false;
    return;

  anon302_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L174;

  L174:
    out_Tmp_415 := 0;
    goto L180;

  anon301_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L174;

  anon300_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L174;

  anon299_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L174;

  anon373_Then:
    goto L174;

  anon295_Then:
    assume {:partition} 0 == 1;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon333_Then, anon333_Else;

  anon333_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon334_Then, anon334_Else;

  anon334_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon335_Then, anon335_Else;

  anon335_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon336_Then, anon336_Else;

  anon336_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_377 := 1;
    goto L309;

  L309:
    out_Tmp_404 := out_Tmp_377;
    goto L181;

  anon336_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L303;

  L303:
    out_Tmp_377 := 0;
    goto L309;

  anon335_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L303;

  anon334_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L303;

  anon333_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L303;

  anon298_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L303;

  anon296_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L166;

  anon294_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L166;

  anon292_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L156;

  L156:
    out_Tmp_407 := 0;
    goto L161;

  anon372_Then:
    goto L156;

  anon371_Then:
    goto L156;

  anon370_Then:
    assume {:partition} 0 == 1;
    goto anon382_Then, anon382_Else;

  anon382_Else:
    goto anon337_Then, anon337_Else;

  anon337_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon338_Then, anon338_Else;

  anon338_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_372 := 1;
    goto L315;

  L315:
    out_Tmp_360 := out_Tmp_372;
    goto L162;

  anon338_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L311;

  L311:
    out_Tmp_372 := 0;
    goto L315;

  anon337_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L311;

  anon382_Then:
    goto L311;

  anon290_Then:
    assume {:partition} out_Tmp_398 == 0;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    goto anon340_Then, anon340_Else;

  anon340_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto L316;

  L316:
    goto anon339_Then, anon339_Else;

  anon339_Else:
    assume {:partition} 0 != 1;
    goto anon383_Then, anon383_Else;

  anon383_Else:
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon345_Then, anon345_Else;

  anon345_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_389 := 1;
    goto L328;

  L328:
    out_Tmp_405 := out_Tmp_389;
    goto L329;

  L329:
    goto anon347_Then, anon347_Else;

  anon347_Else:
    assume {:partition} out_Tmp_405 == 0;
    goto L183;

  anon347_Then:
    assume {:partition} out_Tmp_405 != 0;
    goto L151;

  anon346_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L322;

  L322:
    out_Tmp_389 := 0;
    goto L328;

  anon345_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L322;

  anon344_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L322;

  anon343_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L322;

  anon383_Then:
    goto L322;

  anon339_Then:
    assume {:partition} 0 == 1;
    goto anon342_Then, anon342_Else;

  anon342_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon349_Then, anon349_Else;

  anon349_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 32) != 0;
    goto anon350_Then, anon350_Else;

  anon350_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 8) != 0;
    out_Tmp_411 := 1;
    goto L336;

  L336:
    out_Tmp_405 := out_Tmp_411;
    goto L329;

  anon351_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L330;

  L330:
    out_Tmp_411 := 0;
    goto L336;

  anon350_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L330;

  anon349_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 32) == 0;
    goto L330;

  anon348_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L330;

  anon342_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L330;

  anon341_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    goto L151;

  anon340_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L316;

  anon291_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L316;

  anon289_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L143;

  L143:
    out_Tmp_373 := 0;
    goto L148;

  anon369_Then:
    goto L143;

  anon368_Then:
    goto L143;

  anon288_Then:
    assume {:partition} 0 == 1;
    goto anon384_Then, anon384_Else;

  anon384_Else:
    goto anon352_Then, anon352_Else;

  anon352_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 64) != 0;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 128) != 0;
    out_Tmp_392 := 1;
    goto L342;

  L342:
    out_Tmp_398 := out_Tmp_392;
    goto L149;

  anon353_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L338;

  L338:
    out_Tmp_392 := 0;
    goto L342;

  anon352_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 64) == 0;
    goto L338;

  anon384_Then:
    goto L338;

  anon287_Then:
    assume {:partition} out_Tmp_402 != 0;
    goto L69;

  anon286_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto L132;

  L132:
    out_Tmp_382 := 0;
    goto L137;

  anon367_Then:
    goto L132;

  anon285_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L132;

  anon267_Then:
    assume {:partition} 0 == 1;
    goto anon385_Then, anon385_Else;

  anon385_Else:
    goto anon386_Then, anon386_Else;

  anon386_Else:
    goto anon387_Then, anon387_Else;

  anon387_Else:
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:partition} BAND(out_DeviceStatus_1, 16) == 0;
    out_Tmp_387 := 1;
    goto L351;

  L351:
    out_Tmp_402 := out_Tmp_387;
    goto L138;

  anon354_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto L344;

  L344:
    out_Tmp_387 := 0;
    goto L351;

  anon387_Then:
    goto L344;

  anon386_Then:
    goto L344;

  anon385_Then:
    goto L344;

  anon266_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 16) != 0;
    goto anon266_Then_dummy;

  anon266_Then_dummy:
    goto L_BAF_0;

  anon360_Then:
    goto L62;

  anon265_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 128) == 0;
    goto L62;

  anon263_Then:
    assume {:partition} BAND(out_DeviceStatus_1, 8) == 0;
    goto L62;

  anon261_Then:
    assume {:partition} out_NumBytesWritten == 0;
    goto L45;

  anon260_Then:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc vslice_dummy_var_282;
    call {:si_unique_call 3009} out_NumBytesWritten := SppWriteLoopPI(vslice_dummy_var_282, in_IrpBuffer, out_LoopNumber, 1);
    goto L44;

  anon259_Then:
    call {:si_unique_call 3010} out_NumBytesWritten := SppCheckBusyDelay(in_Pdx_12, in_IrpBuffer, out_LoopNumber);
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    havoc out_MaxBusyDelay;
    out_NumberOfBusyChecks := 10;
    goto L358;

  L358:
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:partition} out_NumberOfBusyChecks != 0;
    out_NumberOfBusyChecks := out_NumberOfBusyChecks - 1;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto L44;

  anon357_Then:
    assume {:partition} out_NumberOfBusyChecks == 0;
    assume {:nonnull} in_Pdx_12 != 0;
    assume in_Pdx_12 > 0;
    goto L44;

  anon356_Then:
    goto L358;

  anon355_Then:
    goto L44;

  anon358_Then:
    assume {:partition} out_BytesToWrite >= out_LoopNumber;
    goto L31;
}



procedure {:LoopProcedure} SppWrite_loop_L29(in_DoDelays: int, in_Tmp_358: int, in_DeviceStatus_1: int, in_Tmp_360: int, in_CountDown: int, in_s_p_e_c_i_a_l_1: int, in_sdv_198: int, in_Tmp_369: int, in_MaxBytes: int, in_Tmp_372: int, in_Tmp_373: int, in_Tmp_374: int, in_Tmp_376: int, in_Tmp_377: int, in_PortFree: int, in_Tmp_382: int, in_IrpBuffer: int, in_sdv_200: int, in_TimerStart: int, in_Tmp_383: int, in_StartOfSpin: int, in_MaxBusyDelay: int, in_Difference: int, in_sdv_204: int, in_NumBytesWritten: int, in_Tmp_387: int, in_s_p_e_c_i_a_l_2: int, in_Tmp_389: int, in_Tmp_392: int, in_Tmp_394: int, in_Tmp_395: int, in_Tmp_398: int, in_LoopNumber: int, in_Tmp_399: int, in_sdv_208: int, in_NumberOfBusyChecks: int, in_Tmp_402: int, in_Tmp_404: int, in_Tmp_405: int, in_Tmp_406: int, in_Tmp_407: int, in_Tmp_408: int, in_Tmp_411: int, in_NextQuery: int, in_Tmp_415: int, in_Pdx_12: int, in_BytesToWrite: int, in_BytesTransferred_2: int, in_vslice_dummy_var_103: int, in_vslice_dummy_var_104: int, in_vslice_dummy_var_105: int, in_vslice_dummy_var_106: int) returns (out_DoDelays: int, out_Tmp_358: int, out_DeviceStatus_1: int, out_Tmp_360: int, out_CountDown: int, out_s_p_e_c_i_a_l_1: int, out_sdv_198: int, out_Tmp_369: int, out_Tmp_372: int, out_Tmp_373: int, out_Tmp_374: int, out_Tmp_376: int, out_Tmp_377: int, out_PortFree: int, out_Tmp_382: int, out_sdv_200: int, out_Tmp_383: int, out_MaxBusyDelay: int, out_sdv_204: int, out_NumBytesWritten: int, out_Tmp_387: int, out_s_p_e_c_i_a_l_2: int, out_Tmp_389: int, out_Tmp_392: int, out_Tmp_394: int, out_Tmp_395: int, out_Tmp_398: int, out_LoopNumber: int, out_Tmp_399: int, out_sdv_208: int, out_NumberOfBusyChecks: int, out_Tmp_402: int, out_Tmp_404: int, out_Tmp_405: int, out_Tmp_406: int, out_Tmp_407: int, out_Tmp_408: int, out_Tmp_411: int, out_Tmp_415: int, out_BytesToWrite: int, out_vslice_dummy_var_103: int, out_vslice_dummy_var_104: int, out_vslice_dummy_var_105: int, out_vslice_dummy_var_106: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} out_DoDelays == 1 || out_DoDelays == 0 || out_DoDelays == in_DoDelays;
  free ensures {:va_keep} out_Tmp_358 == 1 || out_Tmp_358 == 0 || out_Tmp_358 == in_Tmp_358;
  free ensures {:va_keep} out_Tmp_360 == 1 || out_Tmp_360 == 0 || out_Tmp_360 == in_Tmp_360;
  free ensures {:va_keep} out_Tmp_372 == 1 || out_Tmp_372 == 0 || out_Tmp_372 == in_Tmp_372;
  free ensures {:va_keep} out_Tmp_373 == 1 || out_Tmp_373 == 0 || out_Tmp_373 == in_Tmp_373;
  free ensures {:va_keep} out_Tmp_376 == 1 || out_Tmp_376 == 0 || out_Tmp_376 == in_Tmp_376;
  free ensures {:va_keep} out_Tmp_377 == 1 || out_Tmp_377 == 0 || out_Tmp_377 == in_Tmp_377;
  free ensures {:va_keep} out_PortFree == 1 || out_PortFree == 0 || out_PortFree == in_PortFree;
  free ensures {:va_keep} out_Tmp_382 == 1 || out_Tmp_382 == 0 || out_Tmp_382 == in_Tmp_382;
  free ensures {:va_keep} out_sdv_200 == 1 || out_sdv_200 == 0 || out_sdv_200 == in_sdv_200;
  free ensures {:va_keep} out_Tmp_383 == 1 || out_Tmp_383 == 0 || out_Tmp_383 == in_Tmp_383;
  free ensures {:va_keep} out_sdv_204 == 1 || out_sdv_204 == 0 || out_sdv_204 == in_sdv_204;
  free ensures {:va_keep} out_Tmp_387 == 1 || out_Tmp_387 == 0 || out_Tmp_387 == in_Tmp_387;
  free ensures {:va_keep} out_Tmp_389 == 1 || out_Tmp_389 == 0 || out_Tmp_389 == in_Tmp_389;
  free ensures {:va_keep} out_Tmp_392 == 1 || out_Tmp_392 == 0 || out_Tmp_392 == in_Tmp_392;
  free ensures {:va_keep} out_Tmp_398 == 1 || out_Tmp_398 == 0 || out_Tmp_398 == in_Tmp_398;
  free ensures {:va_keep} out_Tmp_399 == 1 || out_Tmp_399 == 0 || out_Tmp_399 == in_Tmp_399;
  free ensures {:va_keep} out_Tmp_402 == 1 || out_Tmp_402 == 0 || out_Tmp_402 == in_Tmp_402;
  free ensures {:va_keep} out_Tmp_404 == 1 || out_Tmp_404 == 0 || out_Tmp_404 == in_Tmp_404;
  free ensures {:va_keep} out_Tmp_405 == 1 || out_Tmp_405 == 0 || out_Tmp_405 == in_Tmp_405;
  free ensures {:va_keep} out_Tmp_406 == 1 || out_Tmp_406 == 0 || out_Tmp_406 == in_Tmp_406;
  free ensures {:va_keep} out_Tmp_407 == 1 || out_Tmp_407 == 0 || out_Tmp_407 == in_Tmp_407;
  free ensures {:va_keep} out_Tmp_408 == 1 || out_Tmp_408 == 0 || out_Tmp_408 == in_Tmp_408;
  free ensures {:va_keep} out_Tmp_411 == 1 || out_Tmp_411 == 0 || out_Tmp_411 == in_Tmp_411;
  free ensures {:va_keep} out_Tmp_415 == 1 || out_Tmp_415 == 0 || out_Tmp_415 == in_Tmp_415;
  free ensures {:va_keep} out_vslice_dummy_var_103 == 0 || out_vslice_dummy_var_103 == -1073741823 || out_vslice_dummy_var_103 == in_vslice_dummy_var_103;
  free ensures {:va_keep} out_vslice_dummy_var_104 == 0 || out_vslice_dummy_var_104 == -1073741823 || out_vslice_dummy_var_104 == in_vslice_dummy_var_104;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SppWriteLoopPI_loop_L15(in_i_1: int, in_DeviceStatus_2: int, in_Controller_1: int, in_WriteBuffer_1: int, in_NumBytesToWrite_1: int) returns (out_i_1: int, out_DeviceStatus_2: int)
{

  entry:
    out_i_1, out_DeviceStatus_2 := in_i_1, in_DeviceStatus_2;
    goto L15, exit;

  exit:
    return;

  L15:
    goto anon17_Else;

  anon17_Else:
    assume {:partition} in_NumBytesToWrite_1 > out_i_1;
    call {:si_unique_call 3024} out_DeviceStatus_2 := corral_nondet();
    goto anon18_Else;

  anon18_Else:
    assume {:partition} BAND(out_DeviceStatus_2, 8) != 0;
    goto anon19_Else;

  anon19_Else:
    assume {:partition} BAND(out_DeviceStatus_2, 128) != 0;
    goto anon21_Else;

  anon21_Else:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} BAND(out_DeviceStatus_2, 16) != 0;
    assume {:nonnull} in_WriteBuffer_1 != 0;
    assume in_WriteBuffer_1 > 0;
    out_i_1 := out_i_1 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    havoc out_i_1;
    return;
}



procedure {:LoopProcedure} SppWriteLoopPI_loop_L15(in_i_1: int, in_DeviceStatus_2: int, in_Controller_1: int, in_WriteBuffer_1: int, in_NumBytesToWrite_1: int) returns (out_i_1: int, out_DeviceStatus_2: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} P5SelectDaisyChainDevice_loop_L9(in_Tmp_441: int, in_maxRetries: int, in_selected: int, in_retryCount: int, in_Controller_2: int, in_DeviceId: int) returns (out_Tmp_441: int, out_selected: int, out_retryCount: int)
{

  entry:
    out_Tmp_441, out_selected, out_retryCount := in_Tmp_441, in_selected, in_retryCount;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_selected == 0;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} in_maxRetries > out_retryCount;
    out_Tmp_441 := BOR(BOR(BOR(32, 64), 128), in_DeviceId);
    call {:si_unique_call 3025} out_selected := PptSend1284_3Command(in_Controller_2, out_Tmp_441);
    out_retryCount := out_retryCount + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 3026} {:si_old_unique_call 1} out_Tmp_441, out_selected, out_retryCount := P5SelectDaisyChainDevice_loop_L9(out_Tmp_441, in_maxRetries, out_selected, out_retryCount, in_Controller_2, in_DeviceId);
    return;
}



procedure {:LoopProcedure} P5SelectDaisyChainDevice_loop_L9(in_Tmp_441: int, in_maxRetries: int, in_selected: int, in_retryCount: int, in_Controller_2: int, in_DeviceId: int) returns (out_Tmp_441: int, out_selected: int, out_retryCount: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_441 == in_Tmp_441 || out_Tmp_441 == BOR(BOR(BOR(32, 64), 128), in_DeviceId);
  free ensures {:va_keep} out_selected == 1 || out_selected == 0 || out_selected == in_selected;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4SanitizeMultiSzId_loop_L7(in_i_2: int, in_p_7: int, in_BufWCharCount: int) returns (out_i_2: int)
{

  entry:
    out_i_2 := in_i_2;
    goto L7, exit;

  exit:
    return;

  L7:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} in_BufWCharCount > out_i_2;
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[in_p_7] == 0;
    goto L13;

  L13:
    out_i_2 := out_i_2 + 1;
    goto L13_dummy;

  L13_dummy:
    havoc out_i_2;
    return;

  anon12_Then:
    assume {:partition} Mem_T.INT4[in_p_7] != 0;
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 32 >= Mem_T.INT4[in_p_7];
    goto L12;

  L12:
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    Mem_T.INT4[in_p_7] := 95;
    goto L13;

  anon13_Then:
    assume {:partition} Mem_T.INT4[in_p_7] > 32;
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.INT4[in_p_7] <= 127;
    assume {:nonnull} in_p_7 != 0;
    assume in_p_7 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 44 != Mem_T.INT4[in_p_7];
    goto L13;

  anon15_Then:
    assume {:partition} 44 == Mem_T.INT4[in_p_7];
    goto L12;

  anon14_Then:
    assume {:partition} 127 < Mem_T.INT4[in_p_7];
    goto L12;
}



procedure {:LoopProcedure} P4SanitizeMultiSzId_loop_L7(in_i_2: int, in_p_7: int, in_BufWCharCount: int) returns (out_i_2: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptIsPci_loop_L26(in_i_3: int, in_largePortRangeFound: int, in_PartialResourceDescriptor: int, in_rangeLength: int, in_Tmp_471: int, in_Tmp_472: int, in_portResourceDescriptorCount: int, in_PartialResourceList: int) returns (out_i_3: int, out_largePortRangeFound: int, out_PartialResourceDescriptor: int, out_rangeLength: int, out_Tmp_471: int, out_Tmp_472: int, out_portResourceDescriptorCount: int)
{

  entry:
    out_i_3, out_largePortRangeFound, out_PartialResourceDescriptor, out_rangeLength, out_Tmp_471, out_Tmp_472, out_portResourceDescriptorCount := in_i_3, in_largePortRangeFound, in_PartialResourceDescriptor, in_rangeLength, in_Tmp_471, in_Tmp_472, in_portResourceDescriptorCount;
    goto L26, exit;

  exit:
    return;

  L26:
    assume {:nonnull} in_PartialResourceList != 0;
    assume in_PartialResourceList > 0;
    goto anon16_Else;

  anon16_Else:
    out_Tmp_471 := out_i_3;
    assume {:nonnull} in_PartialResourceList != 0;
    assume in_PartialResourceList > 0;
    havoc out_Tmp_472;
    out_PartialResourceDescriptor := out_Tmp_472 + out_Tmp_471 * 292;
    assume {:nonnull} out_PartialResourceDescriptor != 0;
    assume out_PartialResourceDescriptor > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} out_PartialResourceDescriptor != 0;
    assume out_PartialResourceDescriptor > 0;
    havoc out_rangeLength;
    out_portResourceDescriptorCount := out_portResourceDescriptorCount + 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_rangeLength > 8;
    out_largePortRangeFound := 1;
    goto L29;

  L29:
    out_i_3 := out_i_3 + 1;
    goto L29_dummy;

  L29_dummy:
    call {:si_unique_call 3027} {:si_old_unique_call 1} out_i_3, out_largePortRangeFound, out_PartialResourceDescriptor, out_rangeLength, out_Tmp_471, out_Tmp_472, out_portResourceDescriptorCount := PptIsPci_loop_L26(out_i_3, out_largePortRangeFound, out_PartialResourceDescriptor, out_rangeLength, out_Tmp_471, out_Tmp_472, out_portResourceDescriptorCount, in_PartialResourceList);
    return;

  anon21_Then:
    assume {:partition} 8 >= out_rangeLength;
    goto L29;

  anon20_Then:
    goto L29;
}



procedure {:LoopProcedure} PptIsPci_loop_L26(in_i_3: int, in_largePortRangeFound: int, in_PartialResourceDescriptor: int, in_rangeLength: int, in_Tmp_471: int, in_Tmp_472: int, in_portResourceDescriptorCount: int, in_PartialResourceList: int) returns (out_i_3: int, out_largePortRangeFound: int, out_PartialResourceDescriptor: int, out_rangeLength: int, out_Tmp_471: int, out_Tmp_472: int, out_portResourceDescriptorCount: int);
  free ensures {:va_keep} out_largePortRangeFound == 1 || out_largePortRangeFound == in_largePortRangeFound;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpListContainsIrqResourceDescriptor_loop_L7(in_i_4: int, in_curDesc: int, in_List: int) returns (out_i_4: int)
{

  entry:
    out_i_4 := in_i_4;
    goto L7, exit;

  exit:
    return;

  L7:
    assume {:nonnull} in_List != 0;
    assume in_List > 0;
    goto anon5_Else;

  anon5_Else:
    assume {:nonnull} in_curDesc != 0;
    assume in_curDesc > 0;
    goto anon6_Then;

  anon6_Then:
    out_i_4 := out_i_4 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    havoc out_i_4;
    return;
}



procedure {:LoopProcedure} PptPnpListContainsIrqResourceDescriptor_loop_L7(in_i_4: int, in_curDesc: int, in_List: int) returns (out_i_4: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpFilterExistsNonIrqResourceList_loop_L17(in_remain: int, in_curDesc_1: int) returns (out_remain: int)
{

  entry:
    out_remain := in_remain;
    goto L17, exit;

  exit:
    return;

  L17:
    goto anon10_Else;

  anon10_Else:
    assume {:partition} out_remain != 0;
    assume {:nonnull} in_curDesc_1 != 0;
    assume in_curDesc_1 > 0;
    goto anon12_Then;

  anon12_Then:
    out_remain := out_remain - 1;
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    havoc out_remain;
    return;
}



procedure {:LoopProcedure} PptPnpFilterExistsNonIrqResourceList_loop_L17(in_remain: int, in_curDesc_1: int) returns (out_remain: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpFilterExistsNonIrqResourceList_loop_L9(in_i_5: int, in_remain: int, in_listCount: int, in_curList: int, in_foundIrq: int, in_curDesc_1: int) returns (out_i_5: int, out_remain: int, out_curList: int, out_foundIrq: int, out_curDesc_1: int)
{

  entry:
    out_i_5, out_remain, out_curList, out_foundIrq, out_curDesc_1 := in_i_5, in_remain, in_curList, in_foundIrq, in_curDesc_1;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon9_Else;

  anon9_Else:
    assume {:partition} in_listCount > out_i_5;
    assume {:nonnull} out_curList != 0;
    assume out_curList > 0;
    havoc out_remain;
    assume {:nonnull} out_curList != 0;
    assume out_curList > 0;
    havoc out_curDesc_1;
    out_foundIrq := 0;
    goto L17;

  L17:
    call {:si_unique_call 3028} out_remain := PptPnpFilterExistsNonIrqResourceList_loop_L17(out_remain, out_curDesc_1);
    goto L17_last;

  L17_last:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} out_remain != 0;
    assume {:nonnull} out_curDesc_1 != 0;
    assume out_curDesc_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    out_foundIrq := 1;
    goto L18;

  L18:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} out_foundIrq != 0;
    assume {:nonnull} out_curList != 0;
    assume out_curList > 0;
    havoc out_curList;
    out_i_5 := out_i_5 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    call {:si_unique_call 3029} {:si_old_unique_call 1} out_i_5, out_remain, out_curList, out_foundIrq, out_curDesc_1 := PptPnpFilterExistsNonIrqResourceList_loop_L9(out_i_5, out_remain, in_listCount, out_curList, out_foundIrq, out_curDesc_1);
    return;

  anon12_Then:
    out_remain := out_remain - 1;
    assume false;
    return;

  anon10_Then:
    assume {:partition} out_remain == 0;
    goto L18;
}



procedure {:LoopProcedure} PptPnpFilterExistsNonIrqResourceList_loop_L9(in_i_5: int, in_remain: int, in_listCount: int, in_curList: int, in_foundIrq: int, in_curDesc_1: int) returns (out_i_5: int, out_remain: int, out_curList: int, out_foundIrq: int, out_curDesc_1: int);
  free ensures {:va_keep} out_foundIrq == 1 || out_foundIrq == 0 || out_foundIrq == in_foundIrq;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} P5DeselectAllDaisyChainDevices_loop_L9(in_maxRetries_1: int, in_deselected: int, in_retryCount_1: int, in_Controller_3: int) returns (out_deselected: int, out_retryCount_1: int)
{

  entry:
    out_deselected, out_retryCount_1 := in_deselected, in_retryCount_1;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_deselected == 0;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} in_maxRetries_1 > out_retryCount_1;
    call {:si_unique_call 3030} out_deselected := PptSend1284_3Command(in_Controller_3, 48);
    out_retryCount_1 := out_retryCount_1 + 1;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 3031} {:si_old_unique_call 1} out_deselected, out_retryCount_1 := P5DeselectAllDaisyChainDevices_loop_L9(in_maxRetries_1, out_deselected, out_retryCount_1, in_Controller_3);
    return;
}



procedure {:LoopProcedure} P5DeselectAllDaisyChainDevices_loop_L9(in_maxRetries_1: int, in_deselected: int, in_retryCount_1: int, in_Controller_3: int) returns (out_deselected: int, out_retryCount_1: int);
  modifies alloc;
  free ensures {:va_keep} out_deselected == 1 || out_deselected == 0 || out_deselected == in_deselected;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(in_i_6: int, in_listCount_1: int, in_curList_1: int) returns (out_i_6: int, out_curList_1: int)
{

  entry:
    out_i_6, out_curList_1 := in_i_6, in_curList_1;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_listCount_1 > out_i_6;
    call {:si_unique_call 3032} PptPnpFilterNukeIrqResourceDescriptors(out_curList_1);
    assume {:nonnull} out_curList_1 != 0;
    assume out_curList_1 > 0;
    havoc out_curList_1;
    out_i_6 := out_i_6 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3033} {:si_old_unique_call 1} out_i_6, out_curList_1 := PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(out_i_6, in_listCount_1, out_curList_1);
    return;
}



procedure {:LoopProcedure} PptPnpFilterNukeIrqResourceDescriptorsFromAllLists_loop_L9(in_i_6: int, in_listCount_1: int, in_curList_1: int) returns (out_i_6: int, out_curList_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpStartScanPciCardCmResourceList_loop_L26(in_i_7: int, in_PartialResourceDescriptor_1: int, in_length: int, in_Tmp_498: int, in_Tmp_500: int, in_PartialResourceList_1: int, in_Fdx_3: int, in_FoundPort_1: int, in_FoundIrq_1: int) returns (out_i_7: int, out_PartialResourceDescriptor_1: int, out_length: int, out_Tmp_498: int, out_Tmp_500: int)
{

  entry:
    out_i_7, out_PartialResourceDescriptor_1, out_length, out_Tmp_498, out_Tmp_500 := in_i_7, in_PartialResourceDescriptor_1, in_length, in_Tmp_498, in_Tmp_500;
    goto L26, exit;

  exit:
    return;

  L26:
    assume {:nonnull} in_PartialResourceList_1 != 0;
    assume in_PartialResourceList_1 > 0;
    goto anon19_Else;

  anon19_Else:
    out_Tmp_498 := out_i_7;
    assume {:nonnull} in_PartialResourceList_1 != 0;
    assume in_PartialResourceList_1 > 0;
    havoc out_Tmp_500;
    out_PartialResourceDescriptor_1 := out_Tmp_500 + out_Tmp_498 * 292;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L34;

  L34:
    out_i_7 := out_i_7 + 1;
    goto L34_dummy;

  L34_dummy:
    call {:si_unique_call 3034} {:si_old_unique_call 1} out_i_7, out_PartialResourceDescriptor_1, out_length, out_Tmp_498, out_Tmp_500 := PptPnpStartScanPciCardCmResourceList_loop_L26(out_i_7, out_PartialResourceDescriptor_1, out_length, out_Tmp_498, out_Tmp_500, in_PartialResourceList_1, in_Fdx_3, in_FoundPort_1, in_FoundIrq_1);
    return;

  anon20_Then:
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto L34;

  anon21_Then:
    goto L34;

  anon22_Then:
    assume {:nonnull} in_FoundIrq_1 != 0;
    assume in_FoundIrq_1 > 0;
    Mem_T.INT4[in_FoundIrq_1] := 1;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    goto L34;

  anon27_Then:
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    goto L34;

  anon25_Then:
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    havoc out_length;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} out_length != 4;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_length == 8;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_FoundPort_1 != 0;
    assume in_FoundPort_1 > 0;
    Mem_T.INT4[in_FoundPort_1] := 1;
    goto L34;

  anon23_Then:
    assume {:partition} out_length != 8;
    goto L34;

  anon26_Then:
    assume {:partition} out_length == 4;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} in_Fdx_3 != 0;
    assume in_Fdx_3 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_1 != 0;
    assume out_PartialResourceDescriptor_1 > 0;
    goto L34;
}



procedure {:LoopProcedure} PptPnpStartScanPciCardCmResourceList_loop_L26(in_i_7: int, in_PartialResourceDescriptor_1: int, in_length: int, in_Tmp_498: int, in_Tmp_500: int, in_PartialResourceList_1: int, in_Fdx_3: int, in_FoundPort_1: int, in_FoundIrq_1: int) returns (out_i_7: int, out_PartialResourceDescriptor_1: int, out_length: int, out_Tmp_498: int, out_Tmp_500: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4CreatePdo_loop_L83(in_retryNumber: int, in_symLinkName: int, in_status_19: int, in_wstrSymLinkName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_19: int, out_wstrSymLinkName: int)
{

  entry:
    out_retryNumber, out_status_19, out_wstrSymLinkName := in_retryNumber, in_status_19, in_wstrSymLinkName;
    goto L83, exit;

  exit:
    return;

  L83:
    call {:si_unique_call 3035} out_wstrSymLinkName := P4MakePdoSymLinkName(in_lptName, in_PdoType_2, in_DaisyChainId_2, out_retryNumber);
    goto anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    goto anon50_Else;

  anon50_Else:
    assume {:partition} out_wstrSymLinkName != 0;
    call {:si_unique_call 3037} RtlInitUnicodeString(in_symLinkName, out_wstrSymLinkName);
    call {:si_unique_call 3038} out_status_19 := IoCreateUnprotectedSymbolicLink(0, 0);
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_status_19 != 0;
    goto anon52_Else;

  anon52_Else:
    assume {:partition} -1073741771 == out_status_19;
    call {:si_unique_call 3036} sdv_ExFreePool(0);
    out_retryNumber := out_retryNumber + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    havoc out_retryNumber;
    return;
}



procedure {:LoopProcedure} P4CreatePdo_loop_L83(in_retryNumber: int, in_symLinkName: int, in_status_19: int, in_wstrSymLinkName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_19: int, out_wstrSymLinkName: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_status_19 == 0 || out_status_19 == -1073741823 || out_status_19 == in_status_19;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4CreatePdo_loop_L23(in_retryNumber: int, in_deviceName: int, in_pdo_1: int, in_status_19: int, in_wstrDeviceName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_19: int, out_wstrDeviceName: int)
{

  entry:
    out_retryNumber, out_status_19, out_wstrDeviceName := in_retryNumber, in_status_19, in_wstrDeviceName;
    goto L23, exit;

  exit:
    return;

  L23:
    call {:si_unique_call 3039} out_wstrDeviceName := P4MakePdoDeviceName(in_lptName, in_PdoType_2, in_DaisyChainId_2, out_retryNumber);
    goto anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto anon43_Then;

  anon43_Then:
    assume {:partition} out_wstrDeviceName != 0;
    call {:si_unique_call 3041} RtlInitUnicodeString(in_deviceName, out_wstrDeviceName);
    call {:si_unique_call 3042} out_status_19 := IoCreateDevice(0, 1248, 0, 22, 256, 1, in_pdo_1);
    goto anon44_Else;

  anon44_Else:
    assume {:partition} out_status_19 != 0;
    assume {:nonnull} in_pdo_1 != 0;
    assume in_pdo_1 > 0;
    goto anon58_Then;

  anon58_Then:
    assume {:partition} -1073741771 == out_status_19;
    call {:si_unique_call 3040} sdv_ExFreePool(0);
    out_retryNumber := out_retryNumber + 1;
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    call {:si_unique_call 3043} {:si_old_unique_call 1} out_retryNumber, out_status_19, out_wstrDeviceName := P4CreatePdo_loop_L23(out_retryNumber, in_deviceName, in_pdo_1, out_status_19, out_wstrDeviceName, in_lptName, in_PdoType_2, in_DaisyChainId_2);
    return;
}



procedure {:LoopProcedure} P4CreatePdo_loop_L23(in_retryNumber: int, in_deviceName: int, in_pdo_1: int, in_status_19: int, in_wstrDeviceName: int, in_lptName: int, in_PdoType_2: int, in_DaisyChainId_2: int) returns (out_retryNumber: int, out_status_19: int, out_wstrDeviceName: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_status_19 == -1073741824 || out_status_19 == -1073741771 || out_status_19 == -1073741670 || out_status_19 == -1073741823 || out_status_19 == 0 || out_status_19 == in_status_19;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFdoHandleBusRelations_loop_L78(in_devRel: int, in_maxDaisyChainId: int, in_Tmp_521: int, in_Tmp_522: int, in_Tmp_523: int, in_Tmp_524: int, in_Tmp_530: int, in_Tmp_533: int, in_Tmp_539: int, in_Tmp_540: int, in_i_9: int, in_Tmp_551: int, in_fdx_7: int, in_idx: int, in_vslice_dummy_var_153: int) returns (out_Tmp_521: int, out_Tmp_522: int, out_Tmp_523: int, out_Tmp_524: int, out_Tmp_530: int, out_Tmp_533: int, out_Tmp_539: int, out_Tmp_540: int, out_i_9: int, out_Tmp_551: int, out_idx: int, out_vslice_dummy_var_153: int)
{

  entry:
    out_Tmp_521, out_Tmp_522, out_Tmp_523, out_Tmp_524, out_Tmp_530, out_Tmp_533, out_Tmp_539, out_Tmp_540, out_i_9, out_Tmp_551, out_idx, out_vslice_dummy_var_153 := in_Tmp_521, in_Tmp_522, in_Tmp_523, in_Tmp_524, in_Tmp_530, in_Tmp_533, in_Tmp_539, in_Tmp_540, in_i_9, in_Tmp_551, in_idx, in_vslice_dummy_var_153;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon159_Else;

  anon159_Else:
    assume {:partition} in_maxDaisyChainId >= out_i_9;
    out_Tmp_539 := out_i_9;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_523;
    assume {:nonnull} out_Tmp_523 != 0;
    assume out_Tmp_523 > 0;
    goto anon199_Else;

  anon199_Else:
    assume {:nonnull} in_devRel != 0;
    assume in_devRel > 0;
    out_Tmp_551 := out_i_9;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_533;
    assume {:nonnull} out_Tmp_533 != 0;
    assume out_Tmp_533 > 0;
    call {:si_unique_call 3044} out_vslice_dummy_var_153 := sdv_ObReferenceObject(0);
    out_Tmp_521 := out_idx;
    out_idx := out_idx + 1;
    out_Tmp_540 := out_Tmp_521;
    assume {:nonnull} in_devRel != 0;
    assume in_devRel > 0;
    havoc out_Tmp_522;
    out_Tmp_530 := out_i_9;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_524;
    assume {:nonnull} out_Tmp_522 != 0;
    assume out_Tmp_522 > 0;
    assume {:nonnull} out_Tmp_524 != 0;
    assume out_Tmp_524 > 0;
    out_i_9 := out_i_9 + 1;
    goto anon199_Else_dummy;

  anon199_Else_dummy:
    call {:si_unique_call 3045} {:si_old_unique_call 1} out_Tmp_521, out_Tmp_522, out_Tmp_523, out_Tmp_524, out_Tmp_530, out_Tmp_533, out_Tmp_539, out_Tmp_540, out_i_9, out_Tmp_551, out_idx, out_vslice_dummy_var_153 := PptFdoHandleBusRelations_loop_L78(in_devRel, in_maxDaisyChainId, out_Tmp_521, out_Tmp_522, out_Tmp_523, out_Tmp_524, out_Tmp_530, out_Tmp_533, out_Tmp_539, out_Tmp_540, out_i_9, out_Tmp_551, in_fdx_7, out_idx, out_vslice_dummy_var_153);
    return;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L78(in_devRel: int, in_maxDaisyChainId: int, in_Tmp_521: int, in_Tmp_522: int, in_Tmp_523: int, in_Tmp_524: int, in_Tmp_530: int, in_Tmp_533: int, in_Tmp_539: int, in_Tmp_540: int, in_i_9: int, in_Tmp_551: int, in_fdx_7: int, in_idx: int, in_vslice_dummy_var_153: int) returns (out_Tmp_521: int, out_Tmp_522: int, out_Tmp_523: int, out_Tmp_524: int, out_Tmp_530: int, out_Tmp_533: int, out_Tmp_539: int, out_Tmp_540: int, out_i_9: int, out_Tmp_551: int, out_idx: int, out_vslice_dummy_var_153: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFdoHandleBusRelations_loop_L35(in_deviceCount: int, in_i_8: int, in_Tmp_553: int, in_fdx_7: int, in_maxDaisyChainId_1: int, in_Tmp_561: int) returns (out_deviceCount: int, out_i_8: int, out_Tmp_553: int, out_Tmp_561: int)
{

  entry:
    out_deviceCount, out_i_8, out_Tmp_553, out_Tmp_561 := in_deviceCount, in_i_8, in_Tmp_553, in_Tmp_561;
    goto L35, exit;

  exit:
    return;

  L35:
    goto anon155_Else;

  anon155_Else:
    assume {:partition} in_maxDaisyChainId_1 >= out_i_8;
    out_Tmp_553 := out_i_8;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_561;
    assume {:nonnull} out_Tmp_561 != 0;
    assume out_Tmp_561 > 0;
    goto anon195_Else;

  anon195_Else:
    out_deviceCount := out_deviceCount + 1;
    out_i_8 := out_i_8 + 1;
    goto anon195_Else_dummy;

  anon195_Else_dummy:
    call {:si_unique_call 3046} {:si_old_unique_call 1} out_deviceCount, out_i_8, out_Tmp_553, out_Tmp_561 := PptFdoHandleBusRelations_loop_L35(out_deviceCount, out_i_8, out_Tmp_553, in_fdx_7, in_maxDaisyChainId_1, out_Tmp_561);
    return;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L35(in_deviceCount: int, in_i_8: int, in_Tmp_553: int, in_fdx_7: int, in_maxDaisyChainId_1: int, in_Tmp_561: int) returns (out_deviceCount: int, out_i_8: int, out_Tmp_553: int, out_Tmp_561: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 3} PptFdoHandleBusRelations_loop_L187(in_id: int, in_maxId_1: int, in_Tmp_541: int, in_fdx_7: int, in_Tmp_563: int, in_Fdo_3: int) returns (out_id: int, out_Tmp_541: int, out_Tmp_563: int)
{

  entry:
    out_id, out_Tmp_541, out_Tmp_563 := in_id, in_Tmp_541, in_Tmp_563;
    goto L187, exit;

  exit:
    return;

  L187:
    goto anon174_Else;

  anon174_Else:
    assume {:partition} in_maxId_1 >= out_id;
    out_Tmp_541 := out_id;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_563;
    assume {:nonnull} out_Tmp_563 != 0;
    assume out_Tmp_563 > 0;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    call {:si_unique_call 3047} P5MarkPdoAsHardwareGone(in_Fdo_3, 4, out_id);
    goto L190;

  L190:
    out_id := out_id + 1;
    goto L190_dummy;

  L190_dummy:
    call {:si_unique_call 3048} {:si_old_unique_call 1} out_id, out_Tmp_541, out_Tmp_563 := PptFdoHandleBusRelations_loop_L187(out_id, in_maxId_1, out_Tmp_541, in_fdx_7, out_Tmp_563, in_Fdo_3);
    return;

  anon204_Then:
    goto L190;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L187(in_id: int, in_maxId_1: int, in_Tmp_541: int, in_fdx_7: int, in_Tmp_563: int, in_Fdo_3: int) returns (out_id: int, out_Tmp_541: int, out_Tmp_563: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} PptFdoHandleBusRelations_loop_L311(in_Tmp_516: int, in_Tmp_534: int, in_count_1: int, in_fdx_7: int, in_i_10: int) returns (out_Tmp_516: int, out_Tmp_534: int, out_count_1: int, out_i_10: int)
{

  entry:
    out_Tmp_516, out_Tmp_534, out_count_1, out_i_10 := in_Tmp_516, in_Tmp_534, in_count_1, in_i_10;
    goto L311, exit;

  exit:
    return;

  L311:
    assume {:CounterLoop 2} {:Counter "i_10"} true;
    goto anon183_Else;

  anon183_Else:
    assume {:partition} 2 > out_i_10;
    out_Tmp_516 := out_i_10;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_534;
    assume {:nonnull} out_Tmp_534 != 0;
    assume out_Tmp_534 > 0;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    out_count_1 := out_count_1 + 1;
    goto L314;

  L314:
    out_i_10 := out_i_10 + 1;
    goto L314_dummy;

  L314_dummy:
    call {:si_unique_call 3049} {:si_old_unique_call 1} out_Tmp_516, out_Tmp_534, out_count_1, out_i_10 := PptFdoHandleBusRelations_loop_L311(out_Tmp_516, out_Tmp_534, out_count_1, in_fdx_7, out_i_10);
    return;

  anon216_Then:
    goto L314;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L311(in_Tmp_516: int, in_Tmp_534: int, in_count_1: int, in_fdx_7: int, in_i_10: int) returns (out_Tmp_516: int, out_Tmp_534: int, out_count_1: int, out_i_10: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFdoHandleBusRelations_loop_L203(in_sdv_283: int, in_Tmp_517: int, in_Tmp_519: int, in_tmpBuffer_2: int, in_pdx_6: int, in_bBuildStlDeviceId_1: int, in_sdv_291: int, in_devId: int, in_sdv_299: int, in_daisyChainDevCount: int, in_mdl_1: int, in_Tmp_535: int, in_Tmp_537: int, in_aid_1: int, in_DeviceIdSize_2: int, in_des_2: int, in_cls_2: int, in_sdv_306: int, in_tmpBufLen_1: int, in_Tmp_548: int, in_mfg_1: int, in_sdv_315: int, in_Tmp_554: int, in_Tmp_555: int, in_id_3: int, in_Tmp_557: int, in_Tmp_558: int, in_fdx_7: int, in_cid_2: int, in_controller: int, in_sdv_320: int, in_Fdo_3: int, in_vslice_dummy_var_149: int, in_vslice_dummy_var_155: int) returns (out_sdv_283: int, out_Tmp_517: int, out_Tmp_519: int, out_tmpBuffer_2: int, out_pdx_6: int, out_bBuildStlDeviceId_1: int, out_sdv_291: int, out_devId: int, out_sdv_299: int, out_Tmp_535: int, out_Tmp_537: int, out_tmpBufLen_1: int, out_Tmp_548: int, out_sdv_315: int, out_Tmp_554: int, out_Tmp_555: int, out_id_3: int, out_Tmp_557: int, out_Tmp_558: int, out_sdv_320: int, out_vslice_dummy_var_149: int, out_vslice_dummy_var_155: int)
{

  entry:
    out_sdv_283, out_Tmp_517, out_Tmp_519, out_tmpBuffer_2, out_pdx_6, out_bBuildStlDeviceId_1, out_sdv_291, out_devId, out_sdv_299, out_Tmp_535, out_Tmp_537, out_tmpBufLen_1, out_Tmp_548, out_sdv_315, out_Tmp_554, out_Tmp_555, out_id_3, out_Tmp_557, out_Tmp_558, out_sdv_320, out_vslice_dummy_var_149, out_vslice_dummy_var_155 := in_sdv_283, in_Tmp_517, in_Tmp_519, in_tmpBuffer_2, in_pdx_6, in_bBuildStlDeviceId_1, in_sdv_291, in_devId, in_sdv_299, in_Tmp_535, in_Tmp_537, in_tmpBufLen_1, in_Tmp_548, in_sdv_315, in_Tmp_554, in_Tmp_555, in_id_3, in_Tmp_557, in_Tmp_558, in_sdv_320, in_vslice_dummy_var_149, in_vslice_dummy_var_155;
    goto L203, exit;

  exit:
    return;

  L203:
    goto anon177_Then;

  anon177_Then:
    assume {:partition} out_id_3 < in_daisyChainDevCount;
    out_bBuildStlDeviceId_1 := 0;
    out_pdx_6 := 0;
    call {:si_unique_call 3051} out_sdv_291 := P5SelectDaisyChainDevice(in_controller, out_id_3);
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} out_sdv_291 != 0;
    out_devId := 0;
    call {:si_unique_call 3058} out_sdv_315 := ExAllocatePoolWithTag(257, 1248, -797810352);
    goto anon205_Else;

  anon205_Else:
    assume {:partition} yogi_error != 1;
    out_pdx_6 := out_sdv_315;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} out_pdx_6 != 0;
    call {:si_unique_call 3055} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    assume {:nonnull} out_pdx_6 != 0;
    assume out_pdx_6 > 0;
    out_Tmp_555 := out_id_3;
    call {:si_unique_call 3056} out_bBuildStlDeviceId_1 := ParStlCheckIfStl(out_pdx_6, out_Tmp_555);
    call {:si_unique_call 3057} sdv_ExFreePool(0);
    goto L220;

  L220:
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} out_bBuildStlDeviceId_1 != 0;
    call {:si_unique_call 3059} out_sdv_320 := ExAllocatePoolWithTag(257, 1248, -797810352);
    goto anon207_Else;

  anon207_Else:
    assume {:partition} yogi_error != 1;
    out_pdx_6 := out_sdv_320;
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} out_pdx_6 != 0;
    call {:si_unique_call 3060} sdv_RtlZeroMemory(0, 1248);
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    assume {:nonnull} out_pdx_6 != 0;
    assume out_pdx_6 > 0;
    call {:si_unique_call 3061} out_devId := ParStlQueryStlDeviceId(out_pdx_6, 0, 0, in_DeviceIdSize_2, 1);
    goto anon209_Else;

  anon209_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3053} sdv_ExFreePool(0);
    goto L241;

  L241:
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} out_devId != 0;
    out_tmpBufLen_1 := in_sdv_306 + 1;
    call {:si_unique_call 3063} out_sdv_299 := ExAllocatePoolWithTag(1, out_tmpBufLen_1, -797810352);
    goto anon210_Else;

  anon210_Else:
    assume {:partition} yogi_error != 1;
    out_tmpBuffer_2 := out_sdv_299;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} out_tmpBuffer_2 != 0;
    call {:si_unique_call 3065} sdv_RtlZeroMemory(0, out_tmpBufLen_1);
    call {:si_unique_call 3066} ParPnpFindDeviceIdKeys(in_mfg_1, in_mdl_1, in_cls_2, in_des_2, in_aid_1, in_cid_2, out_tmpBuffer_2);
    assume {:nonnull} in_mfg_1 != 0;
    assume in_mfg_1 > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:nonnull} in_mdl_1 != 0;
    assume in_mdl_1 > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    out_Tmp_554 := out_devId;
    call {:si_unique_call 3067} out_sdv_283 := P4CreatePdo(in_Fdo_3, 4, out_id_3, out_Tmp_554);
    goto anon212_Else;

  anon212_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_535 := out_id_3;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_548;
    assume {:nonnull} out_Tmp_548 != 0;
    assume out_Tmp_548 > 0;
    out_Tmp_517 := out_id_3;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_557;
    assume {:nonnull} out_Tmp_557 != 0;
    assume out_Tmp_557 > 0;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:partition} out_bBuildStlDeviceId_1 != 0;
    out_Tmp_519 := out_id_3;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_537;
    assume {:nonnull} out_Tmp_537 != 0;
    assume out_Tmp_537 > 0;
    havoc out_Tmp_558;
    assume {:nonnull} out_Tmp_558 != 0;
    assume out_Tmp_558 > 0;
    havoc out_pdx_6;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    assume {:nonnull} out_pdx_6 != 0;
    assume out_pdx_6 > 0;
    call {:si_unique_call 3064} out_vslice_dummy_var_155 := ParStlCheckIfStl(out_pdx_6, 0);
    goto L289;

  L289:
    call {:si_unique_call 3062} sdv_ExFreePool(0);
    goto L269;

  L269:
    call {:si_unique_call 3052} sdv_ExFreePool(0);
    goto L254;

  L254:
    call {:si_unique_call 3050} out_vslice_dummy_var_149 := P5DeselectAllDaisyChainDevices(in_controller);
    goto L212;

  L212:
    out_id_3 := out_id_3 + 1;
    goto L212_dummy;

  L212_dummy:
    call {:si_unique_call 3068} {:si_old_unique_call 1} out_sdv_283, out_Tmp_517, out_Tmp_519, out_tmpBuffer_2, out_pdx_6, out_bBuildStlDeviceId_1, out_sdv_291, out_devId, out_sdv_299, out_Tmp_535, out_Tmp_537, out_tmpBufLen_1, out_Tmp_548, out_sdv_315, out_Tmp_554, out_Tmp_555, out_id_3, out_Tmp_557, out_Tmp_558, out_sdv_320, out_vslice_dummy_var_149, out_vslice_dummy_var_155 := PptFdoHandleBusRelations_loop_L203(out_sdv_283, out_Tmp_517, out_Tmp_519, out_tmpBuffer_2, out_pdx_6, out_bBuildStlDeviceId_1, out_sdv_291, out_devId, out_sdv_299, in_daisyChainDevCount, in_mdl_1, out_Tmp_535, out_Tmp_537, in_aid_1, in_DeviceIdSize_2, in_des_2, in_cls_2, in_sdv_306, out_tmpBufLen_1, out_Tmp_548, in_mfg_1, out_sdv_315, out_Tmp_554, out_Tmp_555, out_id_3, out_Tmp_557, out_Tmp_558, in_fdx_7, in_cid_2, in_controller, out_sdv_320, in_Fdo_3, out_vslice_dummy_var_149, out_vslice_dummy_var_155);
    return;

  anon214_Then:
    assume {:partition} out_bBuildStlDeviceId_1 == 0;
    goto L289;

  anon213_Then:
    goto L289;

  anon182_Then:
    goto L289;

  anon181_Then:
    goto L289;

  anon211_Then:
    assume {:partition} out_tmpBuffer_2 == 0;
    goto L269;

  anon180_Then:
    assume {:partition} out_devId == 0;
    goto L254;

  anon208_Then:
    assume {:partition} out_pdx_6 == 0;
    goto L241;

  anon179_Then:
    assume {:partition} out_bBuildStlDeviceId_1 == 0;
    call {:si_unique_call 3054} out_devId := P4ReadRawIeee1284DeviceId(in_controller);
    goto anon215_Else;

  anon215_Else:
    assume {:partition} yogi_error != 1;
    goto L241;

  anon206_Then:
    assume {:partition} out_pdx_6 == 0;
    goto L220;

  anon178_Then:
    assume {:partition} out_sdv_291 == 0;
    goto L212;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L203(in_sdv_283: int, in_Tmp_517: int, in_Tmp_519: int, in_tmpBuffer_2: int, in_pdx_6: int, in_bBuildStlDeviceId_1: int, in_sdv_291: int, in_devId: int, in_sdv_299: int, in_daisyChainDevCount: int, in_mdl_1: int, in_Tmp_535: int, in_Tmp_537: int, in_aid_1: int, in_DeviceIdSize_2: int, in_des_2: int, in_cls_2: int, in_sdv_306: int, in_tmpBufLen_1: int, in_Tmp_548: int, in_mfg_1: int, in_sdv_315: int, in_Tmp_554: int, in_Tmp_555: int, in_id_3: int, in_Tmp_557: int, in_Tmp_558: int, in_fdx_7: int, in_cid_2: int, in_controller: int, in_sdv_320: int, in_Fdo_3: int, in_vslice_dummy_var_149: int, in_vslice_dummy_var_155: int) returns (out_sdv_283: int, out_Tmp_517: int, out_Tmp_519: int, out_tmpBuffer_2: int, out_pdx_6: int, out_bBuildStlDeviceId_1: int, out_sdv_291: int, out_devId: int, out_sdv_299: int, out_Tmp_535: int, out_Tmp_537: int, out_tmpBufLen_1: int, out_Tmp_548: int, out_sdv_315: int, out_Tmp_554: int, out_Tmp_555: int, out_id_3: int, out_Tmp_557: int, out_Tmp_558: int, out_sdv_320: int, out_vslice_dummy_var_149: int, out_vslice_dummy_var_155: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_bBuildStlDeviceId_1 == 1 || out_bBuildStlDeviceId_1 == 0 || out_bBuildStlDeviceId_1 == in_bBuildStlDeviceId_1;
  free ensures {:va_keep} out_sdv_291 == 1 || out_sdv_291 == 0 || out_sdv_291 == in_sdv_291;
  free ensures {:va_keep} out_tmpBufLen_1 == in_tmpBufLen_1 || out_tmpBufLen_1 == in_sdv_306 + 1;
  free ensures {:va_keep} out_vslice_dummy_var_149 == 1 || out_vslice_dummy_var_149 == 0 || out_vslice_dummy_var_149 == in_vslice_dummy_var_149;
  free ensures {:va_keep} out_vslice_dummy_var_155 == 1 || out_vslice_dummy_var_155 == 0 || out_vslice_dummy_var_155 == in_vslice_dummy_var_155;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFdoHandleBusRelations_loop_L321(in_sdv_301: int, in_maxId: int, in_Tmp_536: int, in_Tmp_542: int, in_Tmp_543: int, in_Tmp_552: int, in_id_2: int, in_Tmp_559: int, in_fdx_7: int, in_Fdo_3: int) returns (out_sdv_301: int, out_Tmp_536: int, out_Tmp_542: int, out_Tmp_543: int, out_Tmp_552: int, out_id_2: int, out_Tmp_559: int)
{

  entry:
    out_sdv_301, out_Tmp_536, out_Tmp_542, out_Tmp_543, out_Tmp_552, out_id_2, out_Tmp_559 := in_sdv_301, in_Tmp_536, in_Tmp_542, in_Tmp_543, in_Tmp_552, in_id_2, in_Tmp_559;
    goto L321, exit;

  exit:
    return;

  L321:
    goto anon184_Else;

  anon184_Else:
    assume {:partition} in_maxId >= out_id_2;
    out_Tmp_552 := out_id_2;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_536;
    assume {:nonnull} out_Tmp_536 != 0;
    assume out_Tmp_536 > 0;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    out_Tmp_543 := out_id_2;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_542;
    assume {:nonnull} out_Tmp_542 != 0;
    assume out_Tmp_542 > 0;
    havoc out_Tmp_559;
    call {:si_unique_call 3069} out_sdv_301 := P5IsDeviceStillThere(in_Fdo_3, out_Tmp_559);
    goto anon218_Else;

  anon218_Else:
    assume {:partition} yogi_error != 1;
    goto anon185_Then;

  anon185_Then:
    assume {:partition} out_sdv_301 != 0;
    goto L323;

  L323:
    out_id_2 := out_id_2 + 1;
    goto L323_dummy;

  L323_dummy:
    call {:si_unique_call 3070} {:si_old_unique_call 1} out_sdv_301, out_Tmp_536, out_Tmp_542, out_Tmp_543, out_Tmp_552, out_id_2, out_Tmp_559 := PptFdoHandleBusRelations_loop_L321(out_sdv_301, in_maxId, out_Tmp_536, out_Tmp_542, out_Tmp_543, out_Tmp_552, out_id_2, out_Tmp_559, in_fdx_7, in_Fdo_3);
    return;

  anon217_Then:
    goto L323;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L321(in_sdv_301: int, in_maxId: int, in_Tmp_536: int, in_Tmp_542: int, in_Tmp_543: int, in_Tmp_552: int, in_id_2: int, in_Tmp_559: int, in_fdx_7: int, in_Fdo_3: int) returns (out_sdv_301: int, out_Tmp_536: int, out_Tmp_542: int, out_Tmp_543: int, out_Tmp_552: int, out_id_2: int, out_Tmp_559: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 3} PptFdoHandleBusRelations_loop_L171(in_count: int, in_Tmp_527: int, in_id_1: int, in_Tmp_531: int, in_maxId_2: int, in_fdx_7: int) returns (out_count: int, out_Tmp_527: int, out_id_1: int, out_Tmp_531: int)
{

  entry:
    out_count, out_Tmp_527, out_id_1, out_Tmp_531 := in_count, in_Tmp_527, in_id_1, in_Tmp_531;
    goto L171, exit;

  exit:
    return;

  L171:
    goto anon170_Else;

  anon170_Else:
    assume {:partition} in_maxId_2 >= out_id_1;
    out_Tmp_527 := out_id_1;
    assume {:nonnull} in_fdx_7 != 0;
    assume in_fdx_7 > 0;
    havoc out_Tmp_531;
    assume {:nonnull} out_Tmp_531 != 0;
    assume out_Tmp_531 > 0;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    out_count := out_count + 1;
    goto L174;

  L174:
    out_id_1 := out_id_1 + 1;
    goto L174_dummy;

  L174_dummy:
    call {:si_unique_call 3071} {:si_old_unique_call 1} out_count, out_Tmp_527, out_id_1, out_Tmp_531 := PptFdoHandleBusRelations_loop_L171(out_count, out_Tmp_527, out_id_1, out_Tmp_531, in_maxId_2, in_fdx_7);
    return;

  anon203_Then:
    goto L174;
}



procedure {:LoopProcedure} PptFdoHandleBusRelations_loop_L171(in_count: int, in_Tmp_527: int, in_id_1: int, in_Tmp_531: int, in_maxId_2: int, in_fdx_7: int) returns (out_count: int, out_Tmp_527: int, out_id_1: int, out_Tmp_531: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P5IsDeviceStillThere_loop_L100(in_devIdString: int, in_des_3: int, in_cls_3: int, in_sdv_322: int, in_sdv_323: int, in_cid_3: int, in_aid_4: int, in_tryNumber: int, in_Tmp_566: int, in_pdx_7: int, in_deviceStillThere: int, in_maxTries_1: int, in_sdv_329: int, in_delay_1: int, in_mdl_3: int, in_controller_1: int, in_mfg_4: int, in_vslice_dummy_var_160: int) returns (out_devIdString: int, out_sdv_323: int, out_tryNumber: int, out_Tmp_566: int, out_deviceStillThere: int, out_vslice_dummy_var_160: int)
{

  entry:
    out_devIdString, out_sdv_323, out_tryNumber, out_Tmp_566, out_deviceStillThere, out_vslice_dummy_var_160 := in_devIdString, in_sdv_323, in_tryNumber, in_Tmp_566, in_deviceStillThere, in_vslice_dummy_var_160;
    goto L100, exit;

  exit:
    return;

  L100:
    out_tryNumber := out_tryNumber + 1;
    call {:si_unique_call 3072} out_devIdString := P4ReadRawIeee1284DeviceId(in_controller_1);
    goto anon77_Else;

  anon77_Else:
    assume {:partition} yogi_error != 1;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_devIdString != 0;
    out_Tmp_566 := out_devIdString;
    call {:si_unique_call 3076} ParPnpFindDeviceIdKeys(in_mfg_4, in_mdl_3, in_cls_3, in_des_3, in_aid_4, in_cid_3, out_Tmp_566);
    assume {:nonnull} in_mfg_4 != 0;
    assume in_mfg_4 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} in_mdl_3 != 0;
    assume in_mdl_3 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} in_pdx_7 != 0;
    assume in_pdx_7 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} in_pdx_7 != 0;
    assume in_pdx_7 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} in_sdv_329 == 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} in_sdv_322 == 0;
    out_deviceStillThere := 1;
    goto L130;

  L130:
    call {:si_unique_call 3075} sdv_ExFreePool(0);
    goto L133;

  L133:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_deviceStillThere != 0;
    goto L137;

  L137:
    goto anon69_Else;

  anon69_Else:
    assume {:partition} out_deviceStillThere == 0;
    goto anon70_Else;

  anon70_Else:
    assume {:partition} in_maxTries_1 > out_tryNumber;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    call {:si_unique_call 3077} {:si_old_unique_call 1} out_devIdString, out_sdv_323, out_tryNumber, out_Tmp_566, out_deviceStillThere, out_vslice_dummy_var_160 := P5IsDeviceStillThere_loop_L100(out_devIdString, in_des_3, in_cls_3, in_sdv_322, out_sdv_323, in_cid_3, in_aid_4, out_tryNumber, out_Tmp_566, in_pdx_7, out_deviceStillThere, in_maxTries_1, in_sdv_329, in_delay_1, in_mdl_3, in_controller_1, in_mfg_4, out_vslice_dummy_var_160);
    return;

  anon68_Then:
    assume {:partition} out_deviceStillThere == 0;
    call {:si_unique_call 3074} out_sdv_323 := sdv_KeGetCurrentIrql();
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_sdv_323 == 0;
    assume {:nonnull} in_delay_1 != 0;
    assume in_delay_1 > 0;
    call {:si_unique_call 3073} out_vslice_dummy_var_160 := KeDelayExecutionThread(0, 0, 0);
    goto L137;

  anon71_Then:
    assume {:partition} out_sdv_323 != 0;
    goto L137;

  anon72_Then:
    assume {:partition} in_sdv_322 != 0;
    goto L129;

  L129:
    out_deviceStillThere := 0;
    goto L130;

  anon67_Then:
    assume {:partition} in_sdv_329 != 0;
    goto L129;

  anon66_Then:
    goto L118;

  L118:
    out_deviceStillThere := 0;
    goto L130;

  anon65_Then:
    goto L118;

  anon64_Then:
    goto L118;

  anon63_Then:
    goto L118;

  anon62_Then:
    assume {:partition} out_devIdString == 0;
    out_deviceStillThere := 0;
    goto L133;
}



procedure {:LoopProcedure} P5IsDeviceStillThere_loop_L100(in_devIdString: int, in_des_3: int, in_cls_3: int, in_sdv_322: int, in_sdv_323: int, in_cid_3: int, in_aid_4: int, in_tryNumber: int, in_Tmp_566: int, in_pdx_7: int, in_deviceStillThere: int, in_maxTries_1: int, in_sdv_329: int, in_delay_1: int, in_mdl_3: int, in_controller_1: int, in_mfg_4: int, in_vslice_dummy_var_160: int) returns (out_devIdString: int, out_sdv_323: int, out_tryNumber: int, out_Tmp_566: int, out_deviceStillThere: int, out_vslice_dummy_var_160: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_323 == in_sdv_323 || out_sdv_323 == old(sdv_irql_current);
  free ensures {:va_keep} out_deviceStillThere == 1 || out_deviceStillThere == 0 || out_deviceStillThere == in_deviceStillThere;
  free ensures {:va_keep} out_vslice_dummy_var_160 == 0 || out_vslice_dummy_var_160 == -1073741823 || out_vslice_dummy_var_160 == in_vslice_dummy_var_160;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} P4DestroyPdo_loop_L77(in_pdx_8: int, in_done: int, in_sdv_341: int, in_current: int, in_fdx_9: int, in_vslice_dummy_var_163: int, in_vslice_dummy_var_166: int) returns (out_done: int, out_sdv_341: int, out_current: int, out_vslice_dummy_var_163: int, out_vslice_dummy_var_166: int)
{

  entry:
    out_done, out_sdv_341, out_current, out_vslice_dummy_var_163, out_vslice_dummy_var_166 := in_done, in_sdv_341, in_current, in_vslice_dummy_var_163, in_vslice_dummy_var_166;
    goto L77, exit;

  exit:
    return;

  L77:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} out_done == 0;
    assume {:nonnull} in_fdx_9 != 0;
    assume in_fdx_9 > 0;
    call {:si_unique_call 3079} out_current := RemoveHeadList(DevDeletionListHead__FDO_EXTENSION(in_fdx_9));
    call {:si_unique_call 3080} out_sdv_341 := sdv_containing_record(out_current, 100);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} out_sdv_341 != in_pdx_8;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} in_fdx_9 != 0;
    assume in_fdx_9 > 0;
    call {:si_unique_call 3078} InsertHeadList(DevDeletionListHead__FDO_EXTENSION(in_fdx_9), out_current);
    out_done := 1;
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 3083} {:si_old_unique_call 1} out_done, out_sdv_341, out_current, out_vslice_dummy_var_163, out_vslice_dummy_var_166 := P4DestroyPdo_loop_L77(in_pdx_8, out_done, out_sdv_341, out_current, in_fdx_9, out_vslice_dummy_var_163, out_vslice_dummy_var_166);
    return;

  anon41_Then:
    assume {:nonnull} in_fdx_9 != 0;
    assume in_fdx_9 > 0;
    call {:si_unique_call 3081} out_vslice_dummy_var_163 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(in_fdx_9), out_current);
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    goto L_BAF_1;

  anon40_Then:
    assume {:nonnull} in_fdx_9 != 0;
    assume in_fdx_9 > 0;
    call {:si_unique_call 3082} out_vslice_dummy_var_166 := sdv_InsertTailList(DevDeletionListHead__FDO_EXTENSION(in_fdx_9), out_current);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    goto L_BAF_1;

  anon39_Then:
    assume {:partition} out_sdv_341 == in_pdx_8;
    out_done := 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    goto L_BAF_1;
}



procedure {:LoopProcedure} P4DestroyPdo_loop_L77(in_pdx_8: int, in_done: int, in_sdv_341: int, in_current: int, in_fdx_9: int, in_vslice_dummy_var_163: int, in_vslice_dummy_var_166: int) returns (out_done: int, out_sdv_341: int, out_current: int, out_vslice_dummy_var_163: int, out_vslice_dummy_var_166: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_done == 1 || out_done == in_done;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpFilterNukeIrqResourceDescriptors_loop_L7(in_i_11: int, in_pIoResourceDescriptorIn: int, in_IoResourceList: int) returns (out_i_11: int)
{

  entry:
    out_i_11 := in_i_11;
    goto L7, exit;

  exit:
    return;

  L7:
    assume {:nonnull} in_IoResourceList != 0;
    assume in_IoResourceList > 0;
    goto anon5_Else;

  anon5_Else:
    assume {:nonnull} in_pIoResourceDescriptorIn != 0;
    assume in_pIoResourceDescriptorIn > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} in_pIoResourceDescriptorIn != 0;
    assume in_pIoResourceDescriptorIn > 0;
    goto L9;

  L9:
    out_i_11 := out_i_11 + 1;
    goto L9_dummy;

  L9_dummy:
    havoc out_i_11;
    return;

  anon6_Then:
    goto L9;
}



procedure {:LoopProcedure} PptPnpFilterNukeIrqResourceDescriptors_loop_L7(in_i_11: int, in_pIoResourceDescriptorIn: int, in_IoResourceList: int) returns (out_i_11: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpFilterRemoveIrqResourceLists_loop_L16(in_i_12: int, in_listCount_2: int, in_sdv_349: int, in_curList_2: int, in_bytesToMove: int, in_currentEndOfResourceRequirementsList: int) returns (out_i_12: int, out_listCount_2: int, out_sdv_349: int, out_curList_2: int, out_bytesToMove: int)
{

  entry:
    out_i_12, out_listCount_2, out_sdv_349, out_curList_2, out_bytesToMove := in_i_12, in_listCount_2, in_sdv_349, in_curList_2, in_bytesToMove;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_listCount_2 > out_i_12;
    call {:si_unique_call 3085} out_sdv_349 := PptPnpListContainsIrqResourceDescriptor(out_curList_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} out_sdv_349 != 0;
    assume {:nonnull} out_curList_2 != 0;
    assume out_curList_2 > 0;
    out_bytesToMove := in_currentEndOfResourceRequirementsList;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} out_bytesToMove > 0;
    call {:si_unique_call 3084} sdv_RtlMoveMemory(0, 0, out_bytesToMove);
    goto L26;

  L26:
    out_listCount_2 := out_listCount_2 - 1;
    goto L26_dummy;

  L26_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 3086} {:si_old_unique_call 1} out_i_12, out_listCount_2, out_sdv_349, out_curList_2, out_bytesToMove := PptPnpFilterRemoveIrqResourceLists_loop_L16(out_i_12, out_listCount_2, out_sdv_349, out_curList_2, out_bytesToMove, in_currentEndOfResourceRequirementsList);
    return;

  anon9_Then:
    assume {:partition} 0 >= out_bytesToMove;
    goto L26;

  anon8_Then:
    assume {:partition} out_sdv_349 == 0;
    assume {:nonnull} out_curList_2 != 0;
    assume out_curList_2 > 0;
    havoc out_curList_2;
    out_i_12 := out_i_12 + 1;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    goto L_BAF_2;
}



procedure {:LoopProcedure} PptPnpFilterRemoveIrqResourceLists_loop_L16(in_i_12: int, in_listCount_2: int, in_sdv_349: int, in_curList_2: int, in_bytesToMove: int, in_currentEndOfResourceRequirementsList: int) returns (out_i_12: int, out_listCount_2: int, out_sdv_349: int, out_curList_2: int, out_bytesToMove: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_349 == 1 || out_sdv_349 == 0 || out_sdv_349 == in_sdv_349;
  free ensures {:va_keep} out_bytesToMove == in_bytesToMove || out_bytesToMove == in_currentEndOfResourceRequirementsList;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4SanitizeId_loop_L5(in_p_8: int)
{

  entry:
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_p_8 != 0;
    assume in_p_8 > 0;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[in_p_8] != 0;
    assume {:nonnull} in_p_8 != 0;
    assume in_p_8 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} 32 >= Mem_T.INT4[in_p_8];
    goto L8;

  L8:
    assume {:nonnull} in_p_8 != 0;
    assume in_p_8 > 0;
    Mem_T.INT4[in_p_8] := 95;
    goto L9;

  L9:
    goto L9_dummy;

  L9_dummy:
    call {:si_unique_call 3087} {:si_old_unique_call 1} P4SanitizeId_loop_L5(in_p_8);
    return;

  anon10_Then:
    assume {:partition} Mem_T.INT4[in_p_8] > 32;
    assume {:nonnull} in_p_8 != 0;
    assume in_p_8 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[in_p_8] <= 127;
    assume {:nonnull} in_p_8 != 0;
    assume in_p_8 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[in_p_8] != 44;
    goto L9;

  anon12_Then:
    assume {:partition} Mem_T.INT4[in_p_8] == 44;
    goto L8;

  anon11_Then:
    assume {:partition} 127 < Mem_T.INT4[in_p_8];
    goto L8;
}



procedure {:LoopProcedure} P4SanitizeId_loop_L5(in_p_8: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpStartScanCmResourceList_loop_L45(in_i_13: int, in_PartialResourceDescriptor_2: int, in_Tmp_589: int, in_start: int, in_Tmp_590: int, in_PartialResourceList_2: int, in_Fdx_4: int, in_FoundPort_2: int, in_FoundIrq_2: int) returns (out_i_13: int, out_PartialResourceDescriptor_2: int, out_Tmp_589: int, out_Tmp_590: int)
{

  entry:
    out_i_13, out_PartialResourceDescriptor_2, out_Tmp_589, out_Tmp_590 := in_i_13, in_PartialResourceDescriptor_2, in_Tmp_589, in_Tmp_590;
    goto L45, exit;

  exit:
    return;

  L45:
    assume {:nonnull} in_PartialResourceList_2 != 0;
    assume in_PartialResourceList_2 > 0;
    goto anon34_Else;

  anon34_Else:
    out_Tmp_590 := out_i_13;
    assume {:nonnull} in_PartialResourceList_2 != 0;
    assume in_PartialResourceList_2 > 0;
    havoc out_Tmp_589;
    out_PartialResourceDescriptor_2 := out_Tmp_589 + out_Tmp_590 * 292;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L53;

  L53:
    out_i_13 := out_i_13 + 1;
    goto L53_dummy;

  L53_dummy:
    call {:si_unique_call 3088} {:si_old_unique_call 1} out_i_13, out_PartialResourceDescriptor_2, out_Tmp_589, out_Tmp_590 := PptPnpStartScanCmResourceList_loop_L45(out_i_13, out_PartialResourceDescriptor_2, out_Tmp_589, in_start, out_Tmp_590, in_PartialResourceList_2, in_Fdx_4, in_FoundPort_2, in_FoundIrq_2);
    return;

  anon41_Then:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon42_Then:
    goto L53;

  anon43_Then:
    assume {:nonnull} in_FoundIrq_2 != 0;
    assume in_FoundIrq_2 > 0;
    Mem_T.INT4[in_FoundIrq_2] := 1;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto L53;

  anon48_Then:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto L53;

  anon46_Then:
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_start != 0;
    assume in_start > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_FoundPort_2 != 0;
    assume in_FoundPort_2 > 0;
    Mem_T.INT4[in_FoundPort_2] := 1;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L66;

  L66:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 0 != 1;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon40_Then:
    goto L71;

  L71:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon39_Then:
    goto L71;

  anon38_Then:
    assume {:partition} 0 == 1;
    goto L53;

  anon37_Then:
    goto L53;

  anon36_Then:
    goto L53;

  anon47_Then:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} in_Fdx_4 != 0;
    assume in_Fdx_4 > 0;
    assume {:nonnull} out_PartialResourceDescriptor_2 != 0;
    assume out_PartialResourceDescriptor_2 > 0;
    goto L53;

  anon35_Then:
    goto L66;
}



procedure {:LoopProcedure} PptPnpStartScanCmResourceList_loop_L45(in_i_13: int, in_PartialResourceDescriptor_2: int, in_Tmp_589: int, in_start: int, in_Tmp_590: int, in_PartialResourceList_2: int, in_Fdx_4: int, in_FoundPort_2: int, in_FoundIrq_2: int) returns (out_i_13: int, out_PartialResourceDescriptor_2: int, out_Tmp_589: int, out_Tmp_590: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(in_i_14: int, in_listCount_3: int, in_curList_3: int) returns (out_i_14: int, out_curList_3: int)
{

  entry:
    out_i_14, out_curList_3 := in_i_14, in_curList_3;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_listCount_3 > out_i_14;
    assume {:nonnull} out_curList_3 != 0;
    assume out_curList_3 > 0;
    havoc out_curList_3;
    out_i_14 := out_i_14 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3089} {:si_old_unique_call 1} out_i_14, out_curList_3 := PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(out_i_14, in_listCount_3, out_curList_3);
    return;
}



procedure {:LoopProcedure} PptPnpFilterGetEndOfResourceRequirementsList_loop_L9(in_i_14: int, in_listCount_3: int, in_curList_3: int) returns (out_i_14: int, out_curList_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckIfStl1284_3_loop_L111(in_ucReadPattern: int, in_ucReadValue: int, in_ucExpectedPattern: int, in_ulDaisyIndex: int) returns (out_ucReadPattern: int, out_ucReadValue: int, out_ucExpectedPattern: int)
{

  entry:
    out_ucReadPattern, out_ucReadValue, out_ucExpectedPattern := in_ucReadPattern, in_ucReadValue, in_ucExpectedPattern;
    goto L111, exit;

  exit:
    return;

  L111:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_ucExpectedPattern != 0;
    call {:si_unique_call 3090} out_ucReadValue := corral_nondet();
    call {:si_unique_call 3091} out_ucReadPattern := corral_nondet();
    out_ucReadPattern := BOR(out_ucReadPattern, BAND(out_ucReadValue, 128));
    goto anon24_Then;

  anon24_Then:
    assume {:partition} out_ucReadPattern == out_ucExpectedPattern;
    out_ucExpectedPattern := out_ucExpectedPattern - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    call {:si_unique_call 3092} {:si_old_unique_call 1} out_ucReadPattern, out_ucReadValue, out_ucExpectedPattern := ParStlCheckIfStl1284_3_loop_L111(out_ucReadPattern, out_ucReadValue, out_ucExpectedPattern, in_ulDaisyIndex);
    return;
}



procedure {:LoopProcedure} ParStlCheckIfStl1284_3_loop_L111(in_ucReadPattern: int, in_ucReadValue: int, in_ucExpectedPattern: int, in_ulDaisyIndex: int) returns (out_ucReadPattern: int, out_ucReadValue: int, out_ucExpectedPattern: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckIfStl1284_3_loop_L35(in_i_15: int, in_Tmp_613: int) returns (out_i_15: int, out_Tmp_613: int)
{

  entry:
    out_i_15, out_Tmp_613 := in_i_15, in_Tmp_613;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_15"} true;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 4 > out_i_15;
    out_Tmp_613 := out_i_15;
    out_i_15 := out_i_15 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    havoc out_i_15;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfStl1284_3_loop_L35(in_i_15: int, in_Tmp_613: int) returns (out_i_15: int, out_Tmp_613: int);
  free ensures {:va_keep} out_Tmp_613 == in_i_15 || out_Tmp_613 == in_Tmp_613;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckIfNon1284_3Present_loop_L33(in_i_16: int, in_Tmp_629: int) returns (out_i_16: int, out_Tmp_629: int)
{

  entry:
    out_i_16, out_Tmp_629 := in_i_16, in_Tmp_629;
    goto L33, exit;

  exit:
    return;

  L33:
    assume {:CounterLoop 4} {:Counter "i_16"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 4 > out_i_16;
    out_Tmp_629 := out_i_16;
    out_i_16 := out_i_16 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    havoc out_i_16;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfNon1284_3Present_loop_L33(in_i_16: int, in_Tmp_629: int) returns (out_i_16: int, out_Tmp_629: int);
  free ensures {:va_keep} out_Tmp_629 == in_i_16 || out_Tmp_629 == in_Tmp_629;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckDrivePresent_loop_L28(in_i_17: int, in_sdv_382: int, in_Extension_4: int, in_vslice_dummy_var_186: int) returns (out_i_17: int, out_sdv_382: int, out_vslice_dummy_var_186: int)
{

  entry:
    out_i_17, out_sdv_382, out_vslice_dummy_var_186 := in_i_17, in_sdv_382, in_vslice_dummy_var_186;
    goto L28, exit;

  exit:
    return;

  L28:
    assume {:CounterLoop 16} {:Counter "i_17"} true;
    goto anon20_Else;

  anon20_Else:
    assume {:partition} 16 > out_i_17;
    call {:si_unique_call 3093} out_vslice_dummy_var_186 := ParStlWriteReg(in_Extension_4, 14, out_i_17);
    call {:si_unique_call 3094} out_sdv_382 := ParStlReadIoPort(in_Extension_4, 7);
    goto anon21_Else;

  anon21_Else:
    assume {:partition} BAND(out_sdv_382, 128) != 0;
    out_i_17 := out_i_17 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    havoc out_i_17;
    return;
}



procedure {:LoopProcedure} ParStlCheckDrivePresent_loop_L28(in_i_17: int, in_sdv_382: int, in_Extension_4: int, in_vslice_dummy_var_186: int) returns (out_i_17: int, out_sdv_382: int, out_vslice_dummy_var_186: int);
  free ensures {:va_keep} out_vslice_dummy_var_186 == 0 || out_vslice_dummy_var_186 == in_vslice_dummy_var_186;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckDrivePresent_loop_L12(in_i_17: int, in_byOrgCylHigh: int, in_sdv_373: int, in_Tmp_641: int, in_bReturnValue_3: int, in_sdv_374: int, in_Tmp_642: int, in_Tmp_643: int, in_nDrvHdArray: int, in_Tmp_644: int, in_Tmp_645: int, in_Tmp_646: int, in_nCurrentDrive: int, in_sdv_377: int, in_Tmp_647: int, in_sdv_378: int, in_sdv_381: int, in_sdv_382: int, in_Tmp_648: int, in_Tmp_649: int, in_Tmp_650: int, in_Tmp_651: int, in_Tmp_652: int, in_sdv_386: int, in_byOrgCylLow: int, in_Extension_4: int, in_atapiParams_1: int, in_vslice_dummy_var_186: int, in_vslice_dummy_var_187: int, in_vslice_dummy_var_188: int, in_vslice_dummy_var_189: int, in_vslice_dummy_var_190: int, in_vslice_dummy_var_191: int, in_vslice_dummy_var_192: int) returns (out_i_17: int, out_byOrgCylHigh: int, out_sdv_373: int, out_Tmp_641: int, out_bReturnValue_3: int, out_sdv_374: int, out_Tmp_642: int, out_Tmp_643: int, out_Tmp_644: int, out_Tmp_645: int, out_Tmp_646: int, out_nCurrentDrive: int, out_sdv_377: int, out_Tmp_647: int, out_sdv_378: int, out_sdv_381: int, out_sdv_382: int, out_Tmp_648: int, out_Tmp_649: int, out_Tmp_650: int, out_Tmp_651: int, out_Tmp_652: int, out_sdv_386: int, out_byOrgCylLow: int, out_vslice_dummy_var_186: int, out_vslice_dummy_var_187: int, out_vslice_dummy_var_188: int, out_vslice_dummy_var_189: int, out_vslice_dummy_var_190: int, out_vslice_dummy_var_191: int, out_vslice_dummy_var_192: int)
{

  entry:
    out_i_17, out_byOrgCylHigh, out_sdv_373, out_Tmp_641, out_bReturnValue_3, out_sdv_374, out_Tmp_642, out_Tmp_643, out_Tmp_644, out_Tmp_645, out_Tmp_646, out_nCurrentDrive, out_sdv_377, out_Tmp_647, out_sdv_378, out_sdv_381, out_sdv_382, out_Tmp_648, out_Tmp_649, out_Tmp_650, out_Tmp_651, out_Tmp_652, out_sdv_386, out_byOrgCylLow, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192 := in_i_17, in_byOrgCylHigh, in_sdv_373, in_Tmp_641, in_bReturnValue_3, in_sdv_374, in_Tmp_642, in_Tmp_643, in_Tmp_644, in_Tmp_645, in_Tmp_646, in_nCurrentDrive, in_sdv_377, in_Tmp_647, in_sdv_378, in_sdv_381, in_sdv_382, in_Tmp_648, in_Tmp_649, in_Tmp_650, in_Tmp_651, in_Tmp_652, in_sdv_386, in_byOrgCylLow, in_vslice_dummy_var_186, in_vslice_dummy_var_187, in_vslice_dummy_var_188, in_vslice_dummy_var_189, in_vslice_dummy_var_190, in_vslice_dummy_var_191, in_vslice_dummy_var_192;
    goto L12, exit;

  exit:
    return;

  L12:
    out_Tmp_649 := out_nCurrentDrive;
    assume {:nonnull} in_atapiParams_1 != 0;
    assume in_atapiParams_1 > 0;
    havoc out_Tmp_646;
    assume {:nonnull} out_Tmp_646 != 0;
    assume out_Tmp_646 > 0;
    goto anon25_Then;

  anon25_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_646 + out_Tmp_649 * 4] != 1;
    out_Tmp_645 := out_nCurrentDrive;
    assume {:nonnull} in_nDrvHdArray != 0;
    assume in_nDrvHdArray > 0;
    out_Tmp_641 := Mem_T.INT4[in_nDrvHdArray + out_Tmp_645 * 4];
    call {:si_unique_call 3109} out_vslice_dummy_var_188 := ParStlWriteIoPort(in_Extension_4, 6, out_Tmp_641);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_nCurrentDrive != 0;
    call {:si_unique_call 3108} ParStlWaitForMicroSeconds(1000000);
    goto L24;

  L24:
    out_i_17 := 0;
    goto L28;

  L28:
    call {:si_unique_call 3105} out_i_17, out_sdv_382, out_vslice_dummy_var_186 := ParStlCheckDrivePresent_loop_L28(out_i_17, out_sdv_382, in_Extension_4, out_vslice_dummy_var_186);
    goto L28_last;

  L28_last:
    assume {:CounterLoop 16} {:Counter "i_17"} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} 16 > out_i_17;
    call {:si_unique_call 3106} out_vslice_dummy_var_186 := ParStlWriteReg(in_Extension_4, 14, out_i_17);
    call {:si_unique_call 3107} out_sdv_382 := ParStlReadIoPort(in_Extension_4, 7);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(out_sdv_382, 128) != 0;
    out_i_17 := out_i_17 + 1;
    assume false;
    return;

  anon21_Then:
    assume {:partition} BAND(out_sdv_382, 128) == 0;
    goto L29;

  L29:
    call {:si_unique_call 3104} out_sdv_381 := ParStlWaitForBusyToClear(in_Extension_4, 7);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} out_sdv_381 == 0;
    goto L56;

  L56:
    out_nCurrentDrive := out_nCurrentDrive + 1;
    goto anon27_Then;

  anon27_Then:
    assume {:partition} out_nCurrentDrive < 2;
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    call {:si_unique_call 3111} {:si_old_unique_call 1} out_i_17, out_byOrgCylHigh, out_sdv_373, out_Tmp_641, out_bReturnValue_3, out_sdv_374, out_Tmp_642, out_Tmp_643, out_Tmp_644, out_Tmp_645, out_Tmp_646, out_nCurrentDrive, out_sdv_377, out_Tmp_647, out_sdv_378, out_sdv_381, out_sdv_382, out_Tmp_648, out_Tmp_649, out_Tmp_650, out_Tmp_651, out_Tmp_652, out_sdv_386, out_byOrgCylLow, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192 := ParStlCheckDrivePresent_loop_L12(out_i_17, out_byOrgCylHigh, out_sdv_373, out_Tmp_641, out_bReturnValue_3, out_sdv_374, out_Tmp_642, out_Tmp_643, in_nDrvHdArray, out_Tmp_644, out_Tmp_645, out_Tmp_646, out_nCurrentDrive, out_sdv_377, out_Tmp_647, out_sdv_378, out_sdv_381, out_sdv_382, out_Tmp_648, out_Tmp_649, out_Tmp_650, out_Tmp_651, out_Tmp_652, out_sdv_386, out_byOrgCylLow, in_Extension_4, in_atapiParams_1, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192);
    return;

  anon22_Then:
    assume {:partition} out_sdv_381 != 0;
    out_Tmp_644 := out_nCurrentDrive;
    assume {:nonnull} in_nDrvHdArray != 0;
    assume in_nDrvHdArray > 0;
    out_Tmp_647 := Mem_T.INT4[in_nDrvHdArray + out_Tmp_644 * 4];
    call {:si_unique_call 3102} out_vslice_dummy_var_189 := ParStlWriteIoPort(in_Extension_4, 6, out_Tmp_647);
    call {:si_unique_call 3103} out_sdv_386 := ParStlReadIoPort(in_Extension_4, 6);
    out_Tmp_651 := BAND(out_sdv_386, BOR(BOR(16, 32), 128));
    out_Tmp_642 := out_nCurrentDrive;
    assume {:nonnull} in_nDrvHdArray != 0;
    assume in_nDrvHdArray > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} out_Tmp_651 != Mem_T.INT4[in_nDrvHdArray + out_Tmp_642 * 4];
    goto L56;

  anon26_Then:
    assume {:partition} out_Tmp_651 == Mem_T.INT4[in_nDrvHdArray + out_Tmp_642 * 4];
    call {:si_unique_call 3097} out_sdv_378 := ParStlReadIoPort(in_Extension_4, 4);
    out_byOrgCylLow := out_sdv_378;
    call {:si_unique_call 3098} out_sdv_377 := ParStlReadIoPort(in_Extension_4, 5);
    out_byOrgCylHigh := out_sdv_377;
    call {:si_unique_call 3099} out_vslice_dummy_var_190 := ParStlWriteIoPort(in_Extension_4, 4, 85);
    call {:si_unique_call 3100} out_vslice_dummy_var_187 := ParStlWriteIoPort(in_Extension_4, 5, 170);
    call {:si_unique_call 3101} out_sdv_373 := ParStlReadIoPort(in_Extension_4, 4);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} 85 == out_sdv_373;
    call {:si_unique_call 3110} out_sdv_374 := ParStlReadIoPort(in_Extension_4, 5);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 170 == out_sdv_374;
    out_Tmp_650 := out_byOrgCylLow;
    call {:si_unique_call 3095} out_vslice_dummy_var_191 := ParStlWriteIoPort(in_Extension_4, 4, out_Tmp_650);
    out_Tmp_652 := out_byOrgCylHigh;
    call {:si_unique_call 3096} out_vslice_dummy_var_192 := ParStlWriteIoPort(in_Extension_4, 5, out_Tmp_652);
    out_bReturnValue_3 := 1;
    out_Tmp_643 := out_nCurrentDrive;
    assume {:nonnull} in_atapiParams_1 != 0;
    assume in_atapiParams_1 > 0;
    havoc out_Tmp_648;
    assume {:nonnull} out_Tmp_648 != 0;
    assume out_Tmp_648 > 0;
    Mem_T.INT4[out_Tmp_648 + out_Tmp_643 * 4] := 1;
    goto L56;

  anon24_Then:
    assume {:partition} 170 != out_sdv_374;
    goto L56;

  anon23_Then:
    assume {:partition} 85 != out_sdv_373;
    goto L56;

  anon20_Then:
    assume {:partition} out_i_17 >= 16;
    goto L29;

  anon19_Then:
    assume {:partition} out_nCurrentDrive == 0;
    goto L24;
}



procedure {:LoopProcedure} ParStlCheckDrivePresent_loop_L12(in_i_17: int, in_byOrgCylHigh: int, in_sdv_373: int, in_Tmp_641: int, in_bReturnValue_3: int, in_sdv_374: int, in_Tmp_642: int, in_Tmp_643: int, in_nDrvHdArray: int, in_Tmp_644: int, in_Tmp_645: int, in_Tmp_646: int, in_nCurrentDrive: int, in_sdv_377: int, in_Tmp_647: int, in_sdv_378: int, in_sdv_381: int, in_sdv_382: int, in_Tmp_648: int, in_Tmp_649: int, in_Tmp_650: int, in_Tmp_651: int, in_Tmp_652: int, in_sdv_386: int, in_byOrgCylLow: int, in_Extension_4: int, in_atapiParams_1: int, in_vslice_dummy_var_186: int, in_vslice_dummy_var_187: int, in_vslice_dummy_var_188: int, in_vslice_dummy_var_189: int, in_vslice_dummy_var_190: int, in_vslice_dummy_var_191: int, in_vslice_dummy_var_192: int) returns (out_i_17: int, out_byOrgCylHigh: int, out_sdv_373: int, out_Tmp_641: int, out_bReturnValue_3: int, out_sdv_374: int, out_Tmp_642: int, out_Tmp_643: int, out_Tmp_644: int, out_Tmp_645: int, out_Tmp_646: int, out_nCurrentDrive: int, out_sdv_377: int, out_Tmp_647: int, out_sdv_378: int, out_sdv_381: int, out_sdv_382: int, out_Tmp_648: int, out_Tmp_649: int, out_Tmp_650: int, out_Tmp_651: int, out_Tmp_652: int, out_sdv_386: int, out_byOrgCylLow: int, out_vslice_dummy_var_186: int, out_vslice_dummy_var_187: int, out_vslice_dummy_var_188: int, out_vslice_dummy_var_189: int, out_vslice_dummy_var_190: int, out_vslice_dummy_var_191: int, out_vslice_dummy_var_192: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_bReturnValue_3 == 1 || out_bReturnValue_3 == in_bReturnValue_3;
  free ensures {:va_keep} out_sdv_381 == 1 || out_sdv_381 == 0 || out_sdv_381 == in_sdv_381;
  free ensures {:va_keep} out_vslice_dummy_var_186 == 0 || out_vslice_dummy_var_186 == in_vslice_dummy_var_186;
  free ensures {:va_keep} out_vslice_dummy_var_187 == 0 || out_vslice_dummy_var_187 == in_vslice_dummy_var_187;
  free ensures {:va_keep} out_vslice_dummy_var_188 == 0 || out_vslice_dummy_var_188 == in_vslice_dummy_var_188;
  free ensures {:va_keep} out_vslice_dummy_var_189 == 0 || out_vslice_dummy_var_189 == in_vslice_dummy_var_189;
  free ensures {:va_keep} out_vslice_dummy_var_190 == 0 || out_vslice_dummy_var_190 == in_vslice_dummy_var_190;
  free ensures {:va_keep} out_vslice_dummy_var_191 == 0 || out_vslice_dummy_var_191 == in_vslice_dummy_var_191;
  free ensures {:va_keep} out_vslice_dummy_var_192 == 0 || out_vslice_dummy_var_192 == in_vslice_dummy_var_192;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckUMAXScannerPresence_loop_L45(in_idx_1: int, in_status_27: int, in_Extension_6: int) returns (out_idx_1: int, out_status_27: int)
{

  entry:
    out_idx_1, out_status_27 := in_idx_1, in_status_27;
    goto L45, exit;

  exit:
    return;

  L45:
    assume {:CounterLoop 6} {:Counter "idx_1"} true;
    goto anon34_Else;

  anon34_Else:
    assume {:partition} 6 >= out_idx_1;
    goto anon36_Else;

  anon36_Else:
    assume {:partition} BAND(out_status_27, 2048) == 0;
    call {:si_unique_call 3112} out_status_27 := ParStlEPPRead(in_Extension_6);
    out_idx_1 := out_idx_1 + 1;
    goto anon36_Else_dummy;

  anon36_Else_dummy:
    call {:si_unique_call 3113} {:si_old_unique_call 1} out_idx_1, out_status_27 := ParStlCheckUMAXScannerPresence_loop_L45(out_idx_1, out_status_27, in_Extension_6);
    return;
}



procedure {:LoopProcedure} ParStlCheckUMAXScannerPresence_loop_L45(in_idx_1: int, in_status_27: int, in_Extension_6: int) returns (out_idx_1: int, out_status_27: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlAtaInitialize_loop_L8(in_Tmp_671: int, in_sdv_405: int, in_byTempValue: int, in_nCurrentDrive_1: int, in_sdv_406: int, in_Tmp_673: int, in_sdv_409: int, in_sdv_411: int, in_Tmp_674: int, in_Extension_9: int, in_atapiParams_2: int, in_vslice_dummy_var_198: int, in_vslice_dummy_var_199: int, in_vslice_dummy_var_200: int) returns (out_Tmp_671: int, out_sdv_405: int, out_byTempValue: int, out_nCurrentDrive_1: int, out_sdv_406: int, out_Tmp_673: int, out_sdv_409: int, out_sdv_411: int, out_Tmp_674: int, out_vslice_dummy_var_198: int, out_vslice_dummy_var_199: int, out_vslice_dummy_var_200: int)
{

  entry:
    out_Tmp_671, out_sdv_405, out_byTempValue, out_nCurrentDrive_1, out_sdv_406, out_Tmp_673, out_sdv_409, out_sdv_411, out_Tmp_674, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200 := in_Tmp_671, in_sdv_405, in_byTempValue, in_nCurrentDrive_1, in_sdv_406, in_Tmp_673, in_sdv_409, in_sdv_411, in_Tmp_674, in_vslice_dummy_var_198, in_vslice_dummy_var_199, in_vslice_dummy_var_200;
    goto L8, exit;

  exit:
    return;

  L8:
    out_Tmp_673 := out_nCurrentDrive_1;
    assume {:nonnull} in_atapiParams_2 != 0;
    assume in_atapiParams_2 > 0;
    havoc out_Tmp_674;
    assume {:nonnull} out_Tmp_674 != 0;
    assume out_Tmp_674 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} 1 != Mem_T.INT4[out_Tmp_674 + out_Tmp_673 * 4];
    goto L11;

  L11:
    out_nCurrentDrive_1 := out_nCurrentDrive_1 + 1;
    goto anon22_Then;

  anon22_Then:
    assume {:partition} out_nCurrentDrive_1 < 2;
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    call {:si_unique_call 3121} {:si_old_unique_call 1} out_Tmp_671, out_sdv_405, out_byTempValue, out_nCurrentDrive_1, out_sdv_406, out_Tmp_673, out_sdv_409, out_sdv_411, out_Tmp_674, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200 := ParStlAtaInitialize_loop_L8(out_Tmp_671, out_sdv_405, out_byTempValue, out_nCurrentDrive_1, out_sdv_406, out_Tmp_673, out_sdv_409, out_sdv_411, out_Tmp_674, in_Extension_9, in_atapiParams_2, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200);
    return;

  anon21_Then:
    assume {:partition} 1 == Mem_T.INT4[out_Tmp_674 + out_Tmp_673 * 4];
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_nCurrentDrive_1 != 0;
    call {:si_unique_call 3115} out_vslice_dummy_var_199 := ParStlWriteIoPort(in_Extension_9, 6, 176);
    goto L22;

  L22:
    call {:si_unique_call 3114} out_sdv_409 := ParStlWaitForBusyToClear(in_Extension_9, 7);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_sdv_409 != 0;
    call {:si_unique_call 3117} out_vslice_dummy_var_200 := ParStlWriteIoPort(in_Extension_9, 7, 0);
    call {:si_unique_call 3118} out_sdv_405 := ParStlWaitForBusyToClear(in_Extension_9, 7);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_sdv_405 != 0;
    call {:si_unique_call 3119} out_sdv_411 := ParStlReadIoPort(in_Extension_9, 7);
    out_byTempValue := out_sdv_411;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_byTempValue != 255;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(out_byTempValue, 1) != 0;
    call {:si_unique_call 3120} out_sdv_406 := ParStlReadIoPort(in_Extension_9, 1);
    out_Tmp_671 := BAND(out_sdv_406, BOR(BOR(BOR(1, 2), 4), 8));
    goto anon24_Then;

  anon24_Then:
    assume {:partition} 4 != out_Tmp_671;
    goto L11;

  anon20_Then:
    assume {:partition} BAND(out_byTempValue, 1) == 0;
    goto L11;

  anon23_Then:
    assume {:partition} out_byTempValue == 255;
    goto L11;

  anon19_Then:
    assume {:partition} out_sdv_405 == 0;
    goto L11;

  anon18_Then:
    assume {:partition} out_sdv_409 == 0;
    goto L11;

  anon17_Then:
    assume {:partition} out_nCurrentDrive_1 == 0;
    call {:si_unique_call 3116} out_vslice_dummy_var_198 := ParStlWriteIoPort(in_Extension_9, 6, 160);
    goto L22;
}



procedure {:LoopProcedure} ParStlAtaInitialize_loop_L8(in_Tmp_671: int, in_sdv_405: int, in_byTempValue: int, in_nCurrentDrive_1: int, in_sdv_406: int, in_Tmp_673: int, in_sdv_409: int, in_sdv_411: int, in_Tmp_674: int, in_Extension_9: int, in_atapiParams_2: int, in_vslice_dummy_var_198: int, in_vslice_dummy_var_199: int, in_vslice_dummy_var_200: int) returns (out_Tmp_671: int, out_sdv_405: int, out_byTempValue: int, out_nCurrentDrive_1: int, out_sdv_406: int, out_Tmp_673: int, out_sdv_409: int, out_sdv_411: int, out_Tmp_674: int, out_vslice_dummy_var_198: int, out_vslice_dummy_var_199: int, out_vslice_dummy_var_200: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_405 == 1 || out_sdv_405 == 0 || out_sdv_405 == in_sdv_405;
  free ensures {:va_keep} out_sdv_409 == 1 || out_sdv_409 == 0 || out_sdv_409 == in_sdv_409;
  free ensures {:va_keep} out_vslice_dummy_var_198 == 0 || out_vslice_dummy_var_198 == in_vslice_dummy_var_198;
  free ensures {:va_keep} out_vslice_dummy_var_199 == 0 || out_vslice_dummy_var_199 == in_vslice_dummy_var_199;
  free ensures {:va_keep} out_vslice_dummy_var_200 == 0 || out_vslice_dummy_var_200 == in_vslice_dummy_var_200;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlAtapiInitialize_loop_L85(in_i_18: int, in_chAtapiIdentifyBuffer: int, in_Tmp_682: int, in_Tmp_684: int, in_Tmp_687: int, in_atapiParams_4: int) returns (out_i_18: int, out_Tmp_682: int, out_Tmp_684: int, out_Tmp_687: int)
{
  var vslice_dummy_var_284: int;

  entry:
    out_i_18, out_Tmp_682, out_Tmp_684, out_Tmp_687 := in_i_18, in_Tmp_682, in_Tmp_684, in_Tmp_687;
    goto L85, exit;

  exit:
    return;

  L85:
    assume {:CounterLoop 10} {:Counter "i_18"} true;
    goto anon39_Else;

  anon39_Else:
    assume {:partition} 10 > out_i_18;
    out_Tmp_682 := out_i_18;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_687;
    out_Tmp_684 := 84 + out_i_18;
    assume {:nonnull} out_Tmp_687 != 0;
    assume out_Tmp_687 > 0;
    assume {:nonnull} in_chAtapiIdentifyBuffer != 0;
    assume in_chAtapiIdentifyBuffer > 0;
    havoc vslice_dummy_var_284;
    Mem_T.INT4[out_Tmp_687 + out_Tmp_682 * 4] := vslice_dummy_var_284;
    out_i_18 := out_i_18 + 1;
    goto anon39_Else_dummy;

  anon39_Else_dummy:
    call {:si_unique_call 3122} {:si_old_unique_call 1} out_i_18, out_Tmp_682, out_Tmp_684, out_Tmp_687 := ParStlAtapiInitialize_loop_L85(out_i_18, in_chAtapiIdentifyBuffer, out_Tmp_682, out_Tmp_684, out_Tmp_687, in_atapiParams_4);
    return;
}



procedure {:LoopProcedure} ParStlAtapiInitialize_loop_L85(in_i_18: int, in_chAtapiIdentifyBuffer: int, in_Tmp_682: int, in_Tmp_684: int, in_Tmp_687: int, in_atapiParams_4: int) returns (out_i_18: int, out_Tmp_682: int, out_Tmp_684: int, out_Tmp_687: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} ParStlAtapiInitialize_loop_L10(in_i_18: int, in_sdv_415: int, in_Tmp_678: int, in_bReturnValue_7: int, in_sdv_416: int, in_chAtapiIdentifyBuffer: int, in_Tmp_680: int, in_Tmp_681: int, in_byTempValue_1: int, in_nCurrentDrive_2: int, in_sdv_419: int, in_sdv_420: int, in_Tmp_682: int, in_sdv_424: int, in_sdv_425: int, in_Tmp_683: int, in_sdv_426: int, in_sdv_427: int, in_Tmp_684: int, in_sdv_428: int, in_Tmp_685: int, in_Tmp_686: int, in_Tmp_687: int, in_sdv_430: int, in_Extension_11: int, in_atapiParams_4: int, in_vslice_dummy_var_202: int, in_vslice_dummy_var_203: int, in_vslice_dummy_var_204: int, in_vslice_dummy_var_205: int, in_vslice_dummy_var_206: int) returns (out_i_18: int, out_sdv_415: int, out_Tmp_678: int, out_bReturnValue_7: int, out_sdv_416: int, out_Tmp_680: int, out_Tmp_681: int, out_byTempValue_1: int, out_nCurrentDrive_2: int, out_sdv_419: int, out_sdv_420: int, out_Tmp_682: int, out_sdv_424: int, out_sdv_425: int, out_Tmp_683: int, out_sdv_426: int, out_sdv_427: int, out_Tmp_684: int, out_sdv_428: int, out_Tmp_685: int, out_Tmp_686: int, out_Tmp_687: int, out_sdv_430: int, out_vslice_dummy_var_202: int, out_vslice_dummy_var_203: int, out_vslice_dummy_var_204: int, out_vslice_dummy_var_205: int, out_vslice_dummy_var_206: int)
{
  var vslice_dummy_var_285: int;

  entry:
    out_i_18, out_sdv_415, out_Tmp_678, out_bReturnValue_7, out_sdv_416, out_Tmp_680, out_Tmp_681, out_byTempValue_1, out_nCurrentDrive_2, out_sdv_419, out_sdv_420, out_Tmp_682, out_sdv_424, out_sdv_425, out_Tmp_683, out_sdv_426, out_sdv_427, out_Tmp_684, out_sdv_428, out_Tmp_685, out_Tmp_686, out_Tmp_687, out_sdv_430, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206 := in_i_18, in_sdv_415, in_Tmp_678, in_bReturnValue_7, in_sdv_416, in_Tmp_680, in_Tmp_681, in_byTempValue_1, in_nCurrentDrive_2, in_sdv_419, in_sdv_420, in_Tmp_682, in_sdv_424, in_sdv_425, in_Tmp_683, in_sdv_426, in_sdv_427, in_Tmp_684, in_sdv_428, in_Tmp_685, in_Tmp_686, in_Tmp_687, in_sdv_430, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206;
    goto L10, exit;

  exit:
    return;

  L10:
    out_Tmp_680 := out_nCurrentDrive_2;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_681;
    assume {:nonnull} out_Tmp_681 != 0;
    assume out_Tmp_681 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 1 != Mem_T.INT4[out_Tmp_681 + out_Tmp_680 * 4];
    goto L13;

  L13:
    out_nCurrentDrive_2 := out_nCurrentDrive_2 + 1;
    goto anon41_Then;

  anon41_Then:
    assume {:partition} out_nCurrentDrive_2 < 2;
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    call {:si_unique_call 3139} {:si_old_unique_call 1} out_i_18, out_sdv_415, out_Tmp_678, out_bReturnValue_7, out_sdv_416, out_Tmp_680, out_Tmp_681, out_byTempValue_1, out_nCurrentDrive_2, out_sdv_419, out_sdv_420, out_Tmp_682, out_sdv_424, out_sdv_425, out_Tmp_683, out_sdv_426, out_sdv_427, out_Tmp_684, out_sdv_428, out_Tmp_685, out_Tmp_686, out_Tmp_687, out_sdv_430, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206 := ParStlAtapiInitialize_loop_L10(out_i_18, out_sdv_415, out_Tmp_678, out_bReturnValue_7, out_sdv_416, in_chAtapiIdentifyBuffer, out_Tmp_680, out_Tmp_681, out_byTempValue_1, out_nCurrentDrive_2, out_sdv_419, out_sdv_420, out_Tmp_682, out_sdv_424, out_sdv_425, out_Tmp_683, out_sdv_426, out_sdv_427, out_Tmp_684, out_sdv_428, out_Tmp_685, out_Tmp_686, out_Tmp_687, out_sdv_430, in_Extension_11, in_atapiParams_4, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206);
    return;

  anon40_Then:
    assume {:partition} 1 == Mem_T.INT4[out_Tmp_681 + out_Tmp_680 * 4];
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_nCurrentDrive_2 != 0;
    call {:si_unique_call 3124} out_vslice_dummy_var_203 := ParStlWriteIoPort(in_Extension_11, 6, 176);
    goto L24;

  L24:
    call {:si_unique_call 3123} out_sdv_425 := ParStlWaitForBusyToClear(in_Extension_11, 7);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} out_sdv_425 != 0;
    call {:si_unique_call 3128} out_sdv_424 := ParStlReadIoPort(in_Extension_11, 4);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_sdv_424 == 20;
    call {:si_unique_call 3127} out_sdv_428 := ParStlReadIoPort(in_Extension_11, 5);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} out_sdv_428 == 235;
    out_bReturnValue_7 := 1;
    out_Tmp_678 := out_nCurrentDrive_2;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_686;
    assume {:nonnull} out_Tmp_686 != 0;
    assume out_Tmp_686 > 0;
    Mem_T.INT4[out_Tmp_686 + out_Tmp_678 * 4] := 2;
    call {:si_unique_call 3126} out_sdv_420 := ParStlReadReg(in_Extension_11, 11);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} 200 == out_sdv_420;
    goto L33;

  L33:
    call {:si_unique_call 3129} out_vslice_dummy_var_204 := ParStlWriteIoPort(in_Extension_11, 7, 0);
    call {:si_unique_call 3130} out_sdv_419 := ParStlWaitForIrq(in_Extension_11);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_sdv_419 != 0;
    call {:si_unique_call 3131} out_sdv_430 := ParStlWaitForBusyToClear(in_Extension_11, 7);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} out_sdv_430 != 0;
    call {:si_unique_call 3132} out_vslice_dummy_var_205 := ParStlWriteIoPort(in_Extension_11, 7, 161);
    call {:si_unique_call 3133} out_sdv_415 := ParStlWaitForIrq(in_Extension_11);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} out_sdv_415 != 0;
    call {:si_unique_call 3134} out_sdv_416 := ParStlWaitForBusyToClear(in_Extension_11, 7);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} out_sdv_416 != 0;
    call {:si_unique_call 3135} out_sdv_426 := ParStlReadIoPort(in_Extension_11, 7);
    out_byTempValue_1 := out_sdv_426;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(out_byTempValue_1, 1) == 0;
    call {:si_unique_call 3136} out_sdv_427 := ParStlWaitForDrq(in_Extension_11);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} out_sdv_427 != 0;
    out_bReturnValue_7 := 1;
    call {:si_unique_call 3138} out_vslice_dummy_var_206 := ParStlReceiveData(in_Extension_11, in_chAtapiIdentifyBuffer, -1, 512);
    out_i_18 := 0;
    goto L85;

  L85:
    call {:si_unique_call 3137} out_i_18, out_Tmp_682, out_Tmp_684, out_Tmp_687 := ParStlAtapiInitialize_loop_L85(out_i_18, in_chAtapiIdentifyBuffer, out_Tmp_682, out_Tmp_684, out_Tmp_687, in_atapiParams_4);
    goto L85_last;

  L85_last:
    assume {:CounterLoop 10} {:Counter "i_18"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 10 > out_i_18;
    out_Tmp_682 := out_i_18;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_687;
    out_Tmp_684 := 84 + out_i_18;
    assume {:nonnull} out_Tmp_687 != 0;
    assume out_Tmp_687 > 0;
    assume {:nonnull} in_chAtapiIdentifyBuffer != 0;
    assume in_chAtapiIdentifyBuffer > 0;
    havoc vslice_dummy_var_285;
    Mem_T.INT4[out_Tmp_687 + out_Tmp_682 * 4] := vslice_dummy_var_285;
    out_i_18 := out_i_18 + 1;
    assume false;
    return;

  anon39_Then:
    assume {:partition} out_i_18 >= 10;
    out_Tmp_685 := out_nCurrentDrive_2;
    assume {:nonnull} in_atapiParams_4 != 0;
    assume in_atapiParams_4 > 0;
    havoc out_Tmp_683;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    Mem_T.INT4[out_Tmp_683 + out_Tmp_685 * 4] := 2;
    goto L13;

  anon38_Then:
    assume {:partition} out_sdv_427 == 0;
    goto L13;

  anon42_Then:
    assume {:partition} BAND(out_byTempValue_1, 1) != 0;
    goto L13;

  anon37_Then:
    assume {:partition} out_sdv_416 == 0;
    goto L13;

  anon36_Then:
    assume {:partition} out_sdv_415 == 0;
    goto L13;

  anon35_Then:
    assume {:partition} out_sdv_430 == 0;
    goto L13;

  anon34_Then:
    assume {:partition} out_sdv_419 == 0;
    goto L13;

  anon33_Then:
    assume {:partition} 200 != out_sdv_420;
    goto L13;

  anon32_Then:
    assume {:partition} out_sdv_428 != 235;
    goto L33;

  anon31_Then:
    assume {:partition} out_sdv_424 != 20;
    goto L33;

  anon30_Then:
    assume {:partition} out_sdv_425 == 0;
    goto L13;

  anon29_Then:
    assume {:partition} out_nCurrentDrive_2 == 0;
    call {:si_unique_call 3125} out_vslice_dummy_var_202 := ParStlWriteIoPort(in_Extension_11, 6, 160);
    goto L24;
}



procedure {:LoopProcedure} ParStlAtapiInitialize_loop_L10(in_i_18: int, in_sdv_415: int, in_Tmp_678: int, in_bReturnValue_7: int, in_sdv_416: int, in_chAtapiIdentifyBuffer: int, in_Tmp_680: int, in_Tmp_681: int, in_byTempValue_1: int, in_nCurrentDrive_2: int, in_sdv_419: int, in_sdv_420: int, in_Tmp_682: int, in_sdv_424: int, in_sdv_425: int, in_Tmp_683: int, in_sdv_426: int, in_sdv_427: int, in_Tmp_684: int, in_sdv_428: int, in_Tmp_685: int, in_Tmp_686: int, in_Tmp_687: int, in_sdv_430: int, in_Extension_11: int, in_atapiParams_4: int, in_vslice_dummy_var_202: int, in_vslice_dummy_var_203: int, in_vslice_dummy_var_204: int, in_vslice_dummy_var_205: int, in_vslice_dummy_var_206: int) returns (out_i_18: int, out_sdv_415: int, out_Tmp_678: int, out_bReturnValue_7: int, out_sdv_416: int, out_Tmp_680: int, out_Tmp_681: int, out_byTempValue_1: int, out_nCurrentDrive_2: int, out_sdv_419: int, out_sdv_420: int, out_Tmp_682: int, out_sdv_424: int, out_sdv_425: int, out_Tmp_683: int, out_sdv_426: int, out_sdv_427: int, out_Tmp_684: int, out_sdv_428: int, out_Tmp_685: int, out_Tmp_686: int, out_Tmp_687: int, out_sdv_430: int, out_vslice_dummy_var_202: int, out_vslice_dummy_var_203: int, out_vslice_dummy_var_204: int, out_vslice_dummy_var_205: int, out_vslice_dummy_var_206: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_sdv_415 == 1 || out_sdv_415 == 0 || out_sdv_415 == in_sdv_415;
  free ensures {:va_keep} out_bReturnValue_7 == 1 || out_bReturnValue_7 == in_bReturnValue_7;
  free ensures {:va_keep} out_sdv_416 == 1 || out_sdv_416 == 0 || out_sdv_416 == in_sdv_416;
  free ensures {:va_keep} out_sdv_419 == 1 || out_sdv_419 == 0 || out_sdv_419 == in_sdv_419;
  free ensures {:va_keep} out_sdv_425 == 1 || out_sdv_425 == 0 || out_sdv_425 == in_sdv_425;
  free ensures {:va_keep} out_sdv_427 == 1 || out_sdv_427 == 0 || out_sdv_427 == in_sdv_427;
  free ensures {:va_keep} out_sdv_430 == 1 || out_sdv_430 == 0 || out_sdv_430 == in_sdv_430;
  free ensures {:va_keep} out_vslice_dummy_var_202 == 0 || out_vslice_dummy_var_202 == in_vslice_dummy_var_202;
  free ensures {:va_keep} out_vslice_dummy_var_203 == 0 || out_vslice_dummy_var_203 == in_vslice_dummy_var_203;
  free ensures {:va_keep} out_vslice_dummy_var_204 == 0 || out_vslice_dummy_var_204 == in_vslice_dummy_var_204;
  free ensures {:va_keep} out_vslice_dummy_var_205 == 0 || out_vslice_dummy_var_205 == in_vslice_dummy_var_205;
  free ensures {:va_keep} out_vslice_dummy_var_206 == 0 || out_vslice_dummy_var_206 == in_vslice_dummy_var_206;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlWaitForBusyToClear_loop_L7(in_nMaxRetrials: int, in_sdv_431: int, in_Tmp_690: int, in_Extension_12: int, in_nRegisterToWaitOn: int) returns (out_nMaxRetrials: int, out_sdv_431: int, out_Tmp_690: int)
{

  entry:
    out_nMaxRetrials, out_sdv_431, out_Tmp_690 := in_nMaxRetrials, in_sdv_431, in_Tmp_690;
    goto L7, exit;

  exit:
    return;

  L7:
    out_Tmp_690 := out_nMaxRetrials;
    out_nMaxRetrials := out_nMaxRetrials - 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_690 != 0;
    call {:si_unique_call 3140} ParStlWaitForMicroSeconds(1000);
    call {:si_unique_call 3141} out_sdv_431 := ParStlReadIoPort(in_Extension_12, in_nRegisterToWaitOn);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} BAND(out_sdv_431, 128) != 0;
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    havoc out_nMaxRetrials;
    return;
}



procedure {:LoopProcedure} ParStlWaitForBusyToClear_loop_L7(in_nMaxRetrials: int, in_sdv_431: int, in_Tmp_690: int, in_Extension_12: int, in_nRegisterToWaitOn: int) returns (out_nMaxRetrials: int, out_sdv_431: int, out_Tmp_690: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_690 == in_nMaxRetrials || out_Tmp_690 == in_Tmp_690;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckIfStlProductId_loop_L39(in_i_19: int, in_Tmp_693: int) returns (out_i_19: int, out_Tmp_693: int)
{

  entry:
    out_i_19, out_Tmp_693 := in_i_19, in_Tmp_693;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:CounterLoop 4} {:Counter "i_19"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} 4 > out_i_19;
    out_Tmp_693 := out_i_19;
    out_i_19 := out_i_19 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    havoc out_i_19;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfStlProductId_loop_L39(in_i_19: int, in_Tmp_693: int) returns (out_i_19: int, out_Tmp_693: int);
  free ensures {:va_keep} out_Tmp_693 == in_i_19 || out_Tmp_693 == in_Tmp_693;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlWaitForIrq_loop_L7(in_nMaxRetrials_1: int, in_sdv_461: int, in_Tmp_728: int, in_Extension_15: int) returns (out_nMaxRetrials_1: int, out_sdv_461: int, out_Tmp_728: int)
{

  entry:
    out_nMaxRetrials_1, out_sdv_461, out_Tmp_728 := in_nMaxRetrials_1, in_sdv_461, in_Tmp_728;
    goto L7, exit;

  exit:
    return;

  L7:
    out_Tmp_728 := out_nMaxRetrials_1;
    out_nMaxRetrials_1 := out_nMaxRetrials_1 - 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_728 != 0;
    call {:si_unique_call 3143} out_sdv_461 := ParStlReadReg(in_Extension_15, 18);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} BAND(out_sdv_461, 32) == 0;
    call {:si_unique_call 3142} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    havoc out_nMaxRetrials_1;
    return;
}



procedure {:LoopProcedure} ParStlWaitForIrq_loop_L7(in_nMaxRetrials_1: int, in_sdv_461: int, in_Tmp_728: int, in_Extension_15: int) returns (out_nMaxRetrials_1: int, out_sdv_461: int, out_Tmp_728: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_728 == in_nMaxRetrials_1 || out_Tmp_728 == in_Tmp_728;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlSetEPPMode_loop_L62(in_idx_2: int, in_sdv_472: int, in_Extension_16: int) returns (out_idx_2: int, out_sdv_472: int)
{

  entry:
    out_idx_2, out_sdv_472 := in_idx_2, in_sdv_472;
    goto L62, exit;

  exit:
    return;

  L62:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon31_Else;

  anon31_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 3144} out_sdv_472 := ParStlReadReg(in_Extension_16, 26);
    goto anon33_Then;

  anon33_Then:
    assume {:partition} out_sdv_472 != 5;
    out_idx_2 := out_idx_2 + 1;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L62(in_idx_2: int, in_sdv_472: int, in_Extension_16: int) returns (out_idx_2: int, out_sdv_472: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlSetEPPMode_loop_L47(in_sdv_465: int, in_idx_2: int, in_Tmp_732: int, in_Extension_16: int) returns (out_sdv_465: int, out_idx_2: int, out_Tmp_732: int)
{

  entry:
    out_sdv_465, out_idx_2, out_Tmp_732 := in_sdv_465, in_idx_2, in_Tmp_732;
    goto L47, exit;

  exit:
    return;

  L47:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon29_Else;

  anon29_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 3145} out_sdv_465 := ParStlReadReg(in_Extension_16, 25);
    out_Tmp_732 := BAND(out_sdv_465, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon36_Then;

  anon36_Then:
    assume {:partition} out_Tmp_732 != 248;
    out_idx_2 := out_idx_2 + 1;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L47(in_sdv_465: int, in_idx_2: int, in_Tmp_732: int, in_Extension_16: int) returns (out_sdv_465: int, out_idx_2: int, out_Tmp_732: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlSetEPPMode_loop_L32(in_sdv_463: int, in_idx_2: int, in_Tmp_733: int, in_Extension_16: int) returns (out_sdv_463: int, out_idx_2: int, out_Tmp_733: int)
{

  entry:
    out_sdv_463, out_idx_2, out_Tmp_733 := in_sdv_463, in_idx_2, in_Tmp_733;
    goto L32, exit;

  exit:
    return;

  L32:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon27_Else;

  anon27_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 3146} out_sdv_463 := ParStlReadReg(in_Extension_16, 25);
    out_Tmp_733 := BAND(out_sdv_463, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon35_Then;

  anon35_Then:
    assume {:partition} out_Tmp_733 != 56;
    out_idx_2 := out_idx_2 + 1;
    goto anon35_Then_dummy;

  anon35_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L32(in_sdv_463: int, in_idx_2: int, in_Tmp_733: int, in_Extension_16: int) returns (out_sdv_463: int, out_idx_2: int, out_Tmp_733: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlSetEPPMode_loop_L16(in_Tmp_731: int, in_sdv_470: int, in_idx_2: int, in_Extension_16: int) returns (out_Tmp_731: int, out_sdv_470: int, out_idx_2: int)
{

  entry:
    out_Tmp_731, out_sdv_470, out_idx_2 := in_Tmp_731, in_sdv_470, in_idx_2;
    goto L16, exit;

  exit:
    return;

  L16:
    assume {:CounterLoop 10} {:Counter "idx_2"} true;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} 10 > out_idx_2;
    call {:si_unique_call 3147} out_sdv_470 := ParStlReadReg(in_Extension_16, 25);
    out_Tmp_731 := BAND(out_sdv_470, BOR(BOR(BOR(8, 16), 32), 64));
    goto anon34_Then;

  anon34_Then:
    assume {:partition} out_Tmp_731 != 56;
    out_idx_2 := out_idx_2 + 1;
    goto anon34_Then_dummy;

  anon34_Then_dummy:
    havoc out_idx_2;
    return;
}



procedure {:LoopProcedure} ParStlSetEPPMode_loop_L16(in_Tmp_731: int, in_sdv_470: int, in_idx_2: int, in_Extension_16: int) returns (out_Tmp_731: int, out_sdv_470: int, out_idx_2: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlEPPRead_loop_L10(in_sdv_480: int, in_statusData: int, in_idx_3: int, in_Extension_19: int) returns (out_sdv_480: int, out_statusData: int, out_idx_3: int)
{

  entry:
    out_sdv_480, out_statusData, out_idx_3 := in_sdv_480, in_statusData, in_idx_3;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:CounterLoop 10} {:Counter "idx_3"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} 10 > out_idx_3;
    call {:si_unique_call 3148} out_sdv_480 := ParStlReadReg(in_Extension_19, 25);
    out_statusData := out_sdv_480;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} BAND(out_statusData, 8) != 0;
    out_idx_3 := out_idx_3 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_idx_3;
    return;
}



procedure {:LoopProcedure} ParStlEPPRead_loop_L10(in_sdv_480: int, in_statusData: int, in_idx_3: int, in_Extension_19: int) returns (out_sdv_480: int, out_statusData: int, out_idx_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlReceiveData_loop_L42(in_i_20: int, in_Tmp_759: int, in_Tmp_760: int, in_Tmp_761: int, in_pchDataBuffer: int, in_Tmp_762: int, in_Tmp_763: int, in_Tmp_764: int, in_Tmp_765: int, in_sdv_511: int, in_sdv_512: int, in_Tmp_766: int, in_Tmp_767: int, in_Tmp_768: int, in_count_2: int, in_boogieTmp: int, in_vslice_dummy_var_245: int, in_vslice_dummy_var_246: int) returns (out_i_20: int, out_Tmp_759: int, out_Tmp_760: int, out_Tmp_761: int, out_Tmp_762: int, out_Tmp_763: int, out_Tmp_764: int, out_Tmp_765: int, out_sdv_511: int, out_sdv_512: int, out_Tmp_766: int, out_Tmp_767: int, out_Tmp_768: int, out_boogieTmp: int, out_vslice_dummy_var_245: int, out_vslice_dummy_var_246: int)
{

  entry:
    out_i_20, out_Tmp_759, out_Tmp_760, out_Tmp_761, out_Tmp_762, out_Tmp_763, out_Tmp_764, out_Tmp_765, out_sdv_511, out_sdv_512, out_Tmp_766, out_Tmp_767, out_Tmp_768, out_boogieTmp, out_vslice_dummy_var_245, out_vslice_dummy_var_246 := in_i_20, in_Tmp_759, in_Tmp_760, in_Tmp_761, in_Tmp_762, in_Tmp_763, in_Tmp_764, in_Tmp_765, in_sdv_511, in_sdv_512, in_Tmp_766, in_Tmp_767, in_Tmp_768, in_boogieTmp, in_vslice_dummy_var_245, in_vslice_dummy_var_246;
    goto L42, exit;

  exit:
    return;

  L42:
    call {:si_unique_call 3149} out_vslice_dummy_var_245 := corral_nondet();
    out_Tmp_764 := out_i_20;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    call {:si_unique_call 3150} out_boogieTmp := corral_nondet();
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_764 * 4] := out_boogieTmp;
    call {:si_unique_call 3151} out_sdv_511 := corral_nondet();
    out_Tmp_761 := out_i_20;
    out_i_20 := out_i_20 + 1;
    out_Tmp_765 := out_Tmp_761;
    out_Tmp_763 := out_i_20;
    out_i_20 := out_i_20 + 1;
    out_Tmp_760 := out_Tmp_763;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_765 * 4] := BOR(Mem_T.INT4[in_pchDataBuffer + out_Tmp_760 * 4], BAND(out_sdv_511, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} in_count_2 - 1 == out_i_20;
    goto L69;

  L69:
    call {:si_unique_call 3152} out_vslice_dummy_var_246 := corral_nondet();
    out_Tmp_762 := out_i_20;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    call {:si_unique_call 3153} out_boogieTmp := corral_nondet();
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_762 * 4] := out_boogieTmp;
    call {:si_unique_call 3154} out_sdv_512 := corral_nondet();
    out_Tmp_759 := out_i_20;
    out_i_20 := out_i_20 + 1;
    out_Tmp_768 := out_Tmp_759;
    out_Tmp_767 := out_i_20;
    out_i_20 := out_i_20 + 1;
    out_Tmp_766 := out_Tmp_767;
    assume {:nonnull} in_pchDataBuffer != 0;
    assume in_pchDataBuffer > 0;
    Mem_T.INT4[in_pchDataBuffer + out_Tmp_768 * 4] := BOR(Mem_T.INT4[in_pchDataBuffer + out_Tmp_766 * 4], BAND(out_sdv_512, BOR(BOR(BOR(16, 32), 64), 128)));
    goto anon6_Then;

  anon6_Then:
    assume {:partition} out_i_20 < in_count_2;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    call {:si_unique_call 3155} {:si_old_unique_call 1} out_i_20, out_Tmp_759, out_Tmp_760, out_Tmp_761, out_Tmp_762, out_Tmp_763, out_Tmp_764, out_Tmp_765, out_sdv_511, out_sdv_512, out_Tmp_766, out_Tmp_767, out_Tmp_768, out_boogieTmp, out_vslice_dummy_var_245, out_vslice_dummy_var_246 := ParStlReceiveData_loop_L42(out_i_20, out_Tmp_759, out_Tmp_760, out_Tmp_761, in_pchDataBuffer, out_Tmp_762, out_Tmp_763, out_Tmp_764, out_Tmp_765, out_sdv_511, out_sdv_512, out_Tmp_766, out_Tmp_767, out_Tmp_768, in_count_2, out_boogieTmp, out_vslice_dummy_var_245, out_vslice_dummy_var_246);
    return;

  anon5_Then:
    assume {:partition} in_count_2 - 1 != out_i_20;
    goto L69;
}



procedure {:LoopProcedure} ParStlReceiveData_loop_L42(in_i_20: int, in_Tmp_759: int, in_Tmp_760: int, in_Tmp_761: int, in_pchDataBuffer: int, in_Tmp_762: int, in_Tmp_763: int, in_Tmp_764: int, in_Tmp_765: int, in_sdv_511: int, in_sdv_512: int, in_Tmp_766: int, in_Tmp_767: int, in_Tmp_768: int, in_count_2: int, in_boogieTmp: int, in_vslice_dummy_var_245: int, in_vslice_dummy_var_246: int) returns (out_i_20: int, out_Tmp_759: int, out_Tmp_760: int, out_Tmp_761: int, out_Tmp_762: int, out_Tmp_763: int, out_Tmp_764: int, out_Tmp_765: int, out_sdv_511: int, out_sdv_512: int, out_Tmp_766: int, out_Tmp_767: int, out_Tmp_768: int, out_boogieTmp: int, out_vslice_dummy_var_245: int, out_vslice_dummy_var_246: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} ParStlGetDeviceType_loop_L8(in_i_21: int, in_Tmp_780: int, in_atapiParams_5: int) returns (out_i_21: int, out_Tmp_780: int)
{

  entry:
    out_i_21, out_Tmp_780 := in_i_21, in_Tmp_780;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:CounterLoop 2} {:Counter "i_21"} true;
    goto anon35_Else;

  anon35_Else:
    assume {:partition} 2 > out_i_21;
    out_Tmp_780 := out_i_21;
    assume {:nonnull} in_atapiParams_5 != 0;
    assume in_atapiParams_5 > 0;
    havoc Mem_T.INT4;
    out_i_21 := out_i_21 + 1;
    goto anon35_Else_dummy;

  anon35_Else_dummy:
    call {:si_unique_call 3156} {:si_old_unique_call 1} out_i_21, out_Tmp_780 := ParStlGetDeviceType_loop_L8(out_i_21, out_Tmp_780, in_atapiParams_5);
    return;
}



procedure {:LoopProcedure} ParStlGetDeviceType_loop_L8(in_i_21: int, in_Tmp_780: int, in_atapiParams_5: int) returns (out_i_21: int, out_Tmp_780: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlCheckIfImpactLS120_loop_L14(in_i_22: int, in_chLs120Name: int, in_Tmp_792: int, in_pszAtapiName: int, in_Tmp_793: int) returns (out_i_22: int, out_Tmp_792: int, out_Tmp_793: int)
{

  entry:
    out_i_22, out_Tmp_792, out_Tmp_793 := in_i_22, in_Tmp_792, in_Tmp_793;
    goto L14, exit;

  exit:
    return;

  L14:
    assume {:CounterLoop 10} {:Counter "i_22"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 10 > out_i_22;
    out_Tmp_793 := out_i_22;
    out_Tmp_792 := out_i_22;
    assume {:nonnull} in_chLs120Name != 0;
    assume in_chLs120Name > 0;
    assume {:nonnull} in_pszAtapiName != 0;
    assume in_pszAtapiName > 0;
    goto anon15_Then;

  anon15_Then:
    assume {:partition} Mem_T.INT4[in_pszAtapiName + out_Tmp_793 * 4] == Mem_T.INT4[in_chLs120Name + out_Tmp_792 * 4];
    out_i_22 := out_i_22 + 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    havoc out_i_22;
    return;
}



procedure {:LoopProcedure} ParStlCheckIfImpactLS120_loop_L14(in_i_22: int, in_chLs120Name: int, in_Tmp_792: int, in_pszAtapiName: int, in_Tmp_793: int) returns (out_i_22: int, out_Tmp_792: int, out_Tmp_793: int);
  free ensures {:va_keep} out_Tmp_792 == in_i_22 || out_Tmp_792 == in_Tmp_792;
  free ensures {:va_keep} out_Tmp_793 == in_i_22 || out_Tmp_793 == in_Tmp_793;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlWaitForDrq_loop_L7(in_nMaxRetrials_2: int, in_sdv_588: int, in_Tmp_815: int, in_Extension_40: int) returns (out_nMaxRetrials_2: int, out_sdv_588: int, out_Tmp_815: int)
{

  entry:
    out_nMaxRetrials_2, out_sdv_588, out_Tmp_815 := in_nMaxRetrials_2, in_sdv_588, in_Tmp_815;
    goto L7, exit;

  exit:
    return;

  L7:
    out_Tmp_815 := out_nMaxRetrials_2;
    out_nMaxRetrials_2 := out_nMaxRetrials_2 - 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_815 != 0;
    call {:si_unique_call 3158} out_sdv_588 := ParStlReadIoPort(in_Extension_40, 7);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} BAND(out_sdv_588, 8) == 0;
    call {:si_unique_call 3157} ParStlWaitForMicroSeconds(1000);
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    havoc out_nMaxRetrials_2;
    return;
}



procedure {:LoopProcedure} ParStlWaitForDrq_loop_L7(in_nMaxRetrials_2: int, in_sdv_588: int, in_Tmp_815: int, in_Extension_40: int) returns (out_nMaxRetrials_2: int, out_sdv_588: int, out_Tmp_815: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_815 == in_nMaxRetrials_2 || out_Tmp_815 == in_Tmp_815;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParStlEPPWrite_loop_L9(in_sdv_605: int, in_statusData_1: int, in_idx_4: int, in_Extension_44: int) returns (out_sdv_605: int, out_statusData_1: int, out_idx_4: int)
{

  entry:
    out_sdv_605, out_statusData_1, out_idx_4 := in_sdv_605, in_statusData_1, in_idx_4;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:CounterLoop 10} {:Counter "idx_4"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} 10 > out_idx_4;
    call {:si_unique_call 3159} out_sdv_605 := ParStlReadReg(in_Extension_44, 25);
    out_statusData_1 := out_sdv_605;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} BAND(out_statusData_1, 32) != 0;
    out_idx_4 := out_idx_4 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_idx_4;
    return;
}



procedure {:LoopProcedure} ParStlEPPWrite_loop_L9(in_sdv_605: int, in_statusData_1: int, in_idx_4: int, in_Extension_44: int) returns (out_sdv_605: int, out_statusData_1: int, out_idx_4: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation IeeeDetermineSupportedProtocols_loop_L17(in_rm: int, in_Tmp_928: int, in_Tmp_929: int) returns (out_rm: int, out_Tmp_928: int, out_Tmp_929: int)
{

  entry:
    out_rm, out_Tmp_928, out_Tmp_929 := in_rm, in_Tmp_928, in_Tmp_929;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:CounterLoop 8} {:Counter "rm"} true;
    goto anon10_Else;

  anon10_Else:
    assume {:partition} 8 > out_rm;
    out_Tmp_929 := out_rm;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    out_Tmp_928 := out_rm;
    goto L20;

  L20:
    out_rm := out_rm + 1;
    goto L20_dummy;

  L20_dummy:
    havoc out_rm;
    return;

  anon12_Then:
    goto L20;
}



procedure {:LoopProcedure} IeeeDetermineSupportedProtocols_loop_L17(in_rm: int, in_Tmp_928: int, in_Tmp_929: int) returns (out_rm: int, out_Tmp_928: int, out_Tmp_929: int);
  free ensures {:va_keep} out_Tmp_928 == in_rm || out_Tmp_928 == in_Tmp_928;
  free ensures {:va_keep} out_Tmp_929 == in_rm || out_Tmp_929 == in_Tmp_929;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation IeeeDetermineSupportedProtocols_loop_L10(in_fm: int, in_Tmp_927: int, in_Tmp_931: int) returns (out_fm: int, out_Tmp_927: int, out_Tmp_931: int)
{

  entry:
    out_fm, out_Tmp_927, out_Tmp_931 := in_fm, in_Tmp_927, in_Tmp_931;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:CounterLoop 7} {:Counter "fm"} true;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} 7 > out_fm;
    out_Tmp_931 := out_fm;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    out_Tmp_927 := out_fm;
    goto L13;

  L13:
    out_fm := out_fm + 1;
    goto L13_dummy;

  L13_dummy:
    havoc out_fm;
    return;

  anon11_Then:
    goto L13;
}



procedure {:LoopProcedure} IeeeDetermineSupportedProtocols_loop_L10(in_fm: int, in_Tmp_927: int, in_Tmp_931: int) returns (out_fm: int, out_Tmp_927: int, out_Tmp_931: int);
  free ensures {:va_keep} out_Tmp_927 == in_fm || out_Tmp_927 == in_Tmp_927;
  free ensures {:va_keep} out_Tmp_931 == in_fm || out_Tmp_931 == in_Tmp_931;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation IeeeNegotiateMode_loop_L24(in_Tmp_951: int, in_Tmp_952: int, in_rm_1: int, in_sdv_668: int, in_Tmp_958: int, in_usReadMask: int) returns (out_Tmp_951: int, out_Tmp_952: int, out_rm_1: int, out_Tmp_958: int)
{

  entry:
    out_Tmp_951, out_Tmp_952, out_rm_1, out_Tmp_958 := in_Tmp_951, in_Tmp_952, in_rm_1, in_Tmp_958;
    goto L24, exit;

  exit:
    return;

  L24:
    assume {:CounterLoop 8} {:Counter "rm_1"} true;
    goto anon19_Else;

  anon19_Else:
    assume {:partition} 8 > out_rm_1;
    out_Tmp_951 := out_rm_1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    out_Tmp_958 := out_rm_1;
    goto anon24_Else;

  anon24_Else:
    out_Tmp_952 := out_rm_1;
    goto anon20_Then;

  anon20_Then:
    assume {:partition} in_sdv_668 == 0;
    goto L27;

  L27:
    out_rm_1 := out_rm_1 + 1;
    goto L27_dummy;

  L27_dummy:
    havoc out_rm_1;
    return;

  anon23_Then:
    goto L27;
}



procedure {:LoopProcedure} IeeeNegotiateMode_loop_L24(in_Tmp_951: int, in_Tmp_952: int, in_rm_1: int, in_sdv_668: int, in_Tmp_958: int, in_usReadMask: int) returns (out_Tmp_951: int, out_Tmp_952: int, out_rm_1: int, out_Tmp_958: int);
  free ensures {:va_keep} out_Tmp_951 == in_rm_1 || out_Tmp_951 == in_Tmp_951;
  free ensures {:va_keep} out_Tmp_952 == in_rm_1 || out_Tmp_952 == in_Tmp_952;
  free ensures {:va_keep} out_Tmp_958 == in_rm_1 || out_Tmp_958 == in_Tmp_958;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation IeeeNegotiateMode_loop_L11(in_Tmp_953: int, in_sdv_667: int, in_Tmp_954: int, in_fm_1: int, in_Tmp_956: int, in_usWriteMask: int) returns (out_Tmp_953: int, out_Tmp_954: int, out_fm_1: int, out_Tmp_956: int)
{

  entry:
    out_Tmp_953, out_Tmp_954, out_fm_1, out_Tmp_956 := in_Tmp_953, in_Tmp_954, in_fm_1, in_Tmp_956;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 7} {:Counter "fm_1"} true;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 7 > out_fm_1;
    out_Tmp_956 := out_fm_1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    out_Tmp_953 := out_fm_1;
    goto anon22_Else;

  anon22_Else:
    out_Tmp_954 := out_fm_1;
    goto anon18_Then;

  anon18_Then:
    assume {:partition} in_sdv_667 == 0;
    goto L14;

  L14:
    out_fm_1 := out_fm_1 + 1;
    goto L14_dummy;

  L14_dummy:
    havoc out_fm_1;
    return;

  anon21_Then:
    goto L14;
}



procedure {:LoopProcedure} IeeeNegotiateMode_loop_L11(in_Tmp_953: int, in_sdv_667: int, in_Tmp_954: int, in_fm_1: int, in_Tmp_956: int, in_usWriteMask: int) returns (out_Tmp_953: int, out_Tmp_954: int, out_fm_1: int, out_Tmp_956: int);
  free ensures {:va_keep} out_Tmp_953 == in_fm_1 || out_Tmp_953 == in_Tmp_953;
  free ensures {:va_keep} out_Tmp_954 == in_fm_1 || out_Tmp_954 == in_Tmp_954;
  free ensures {:va_keep} out_Tmp_956 == in_fm_1 || out_Tmp_956 == in_Tmp_956;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation IeeeNegotiateBestMode_loop_L22(in_Tmp_985: int, in_rm_2: int, in_Tmp_988: int, in_sdv_678: int, in_Tmp_993: int, in_usReadMask_1: int) returns (out_Tmp_985: int, out_rm_2: int, out_Tmp_988: int, out_Tmp_993: int)
{

  entry:
    out_Tmp_985, out_rm_2, out_Tmp_988, out_Tmp_993 := in_Tmp_985, in_rm_2, in_Tmp_988, in_Tmp_993;
    goto L22, exit;

  exit:
    return;

  L22:
    assume {:CounterLoop 8} {:Counter "rm_2"} true;
    goto anon19_Else;

  anon19_Else:
    assume {:partition} 8 > out_rm_2;
    out_Tmp_993 := out_rm_2;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L26;

  L26:
    out_rm_2 := out_rm_2 + 1;
    goto L26_dummy;

  L26_dummy:
    havoc out_rm_2;
    return;

  anon23_Then:
    out_Tmp_985 := out_rm_2;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    out_Tmp_988 := out_rm_2;
    goto anon20_Then;

  anon20_Then:
    assume {:partition} in_sdv_678 == 0;
    goto L26;

  anon24_Then:
    goto L26;
}



procedure {:LoopProcedure} IeeeNegotiateBestMode_loop_L22(in_Tmp_985: int, in_rm_2: int, in_Tmp_988: int, in_sdv_678: int, in_Tmp_993: int, in_usReadMask_1: int) returns (out_Tmp_985: int, out_rm_2: int, out_Tmp_988: int, out_Tmp_993: int);
  free ensures {:va_keep} out_Tmp_985 == in_Tmp_985 || out_Tmp_985 == in_rm_2;
  free ensures {:va_keep} out_Tmp_988 == in_Tmp_988 || out_Tmp_988 == in_rm_2;
  free ensures {:va_keep} out_Tmp_993 == in_rm_2 || out_Tmp_993 == in_Tmp_993;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation IeeeNegotiateBestMode_loop_L11(in_Tmp_986: int, in_sdv_677: int, in_fm_2: int, in_Tmp_990: int, in_Tmp_991: int, in_usWriteMask_1: int) returns (out_Tmp_986: int, out_fm_2: int, out_Tmp_990: int, out_Tmp_991: int)
{

  entry:
    out_Tmp_986, out_fm_2, out_Tmp_990, out_Tmp_991 := in_Tmp_986, in_fm_2, in_Tmp_990, in_Tmp_991;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 7} {:Counter "fm_2"} true;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 7 > out_fm_2;
    out_Tmp_991 := out_fm_2;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L15;

  L15:
    out_fm_2 := out_fm_2 + 1;
    goto L15_dummy;

  L15_dummy:
    havoc out_fm_2;
    return;

  anon21_Then:
    out_Tmp_986 := out_fm_2;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    out_Tmp_990 := out_fm_2;
    goto anon18_Then;

  anon18_Then:
    assume {:partition} in_sdv_677 == 0;
    goto L15;

  anon22_Then:
    goto L15;
}



procedure {:LoopProcedure} IeeeNegotiateBestMode_loop_L11(in_Tmp_986: int, in_sdv_677: int, in_fm_2: int, in_Tmp_990: int, in_Tmp_991: int, in_usWriteMask_1: int) returns (out_Tmp_986: int, out_fm_2: int, out_Tmp_990: int, out_Tmp_991: int);
  free ensures {:va_keep} out_Tmp_986 == in_Tmp_986 || out_Tmp_986 == in_fm_2;
  free ensures {:va_keep} out_Tmp_990 == in_Tmp_990 || out_Tmp_990 == in_fm_2;
  free ensures {:va_keep} out_Tmp_991 == in_fm_2 || out_Tmp_991 == in_Tmp_991;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFdoCleanup_loop_L16(in_Tmp_1053: int, in_cancelIrql: int, in_sdv_720: int, in_sdv_721: int, in_fdx_23: int, in_nextIrp: int, in_DeviceObject_20: int) returns (out_Tmp_1053: int, out_cancelIrql: int, out_sdv_720: int, out_sdv_721: int, out_nextIrp: int)
{
  var vslice_dummy_var_286: int;

  entry:
    out_Tmp_1053, out_cancelIrql, out_sdv_720, out_sdv_721, out_nextIrp := in_Tmp_1053, in_cancelIrql, in_sdv_720, in_sdv_721, in_nextIrp;
    goto L16, exit;

  exit:
    return;

  L16:
    call {:si_unique_call 3160} out_sdv_720 := sdv_IsListEmpty(0);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_sdv_720 == 0;
    assume {:nonnull} in_fdx_23 != 0;
    assume in_fdx_23 > 0;
    havoc vslice_dummy_var_286;
    call {:si_unique_call 3161} out_sdv_721 := sdv_containing_record(vslice_dummy_var_286, 88);
    out_nextIrp := out_sdv_721;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(out_nextIrp)] := out_cancelIrql;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 3162} PptCancelRoutine(in_DeviceObject_20, out_nextIrp);
    call {:si_unique_call 3163} out_Tmp_1053 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1053 != 0;
    assume out_Tmp_1053 > 0;
    Mem_T.INT4[out_Tmp_1053] := out_cancelIrql;
    call {:si_unique_call 3164} IoAcquireCancelSpinLock(out_Tmp_1053);
    assume {:nonnull} out_Tmp_1053 != 0;
    assume out_Tmp_1053 > 0;
    out_cancelIrql := Mem_T.INT4[out_Tmp_1053];
    goto anon5_Then_dummy;

  anon5_Then_dummy:
    call {:si_unique_call 3165} {:si_old_unique_call 1} out_Tmp_1053, out_cancelIrql, out_sdv_720, out_sdv_721, out_nextIrp := PptFdoCleanup_loop_L16(out_Tmp_1053, out_cancelIrql, out_sdv_720, out_sdv_721, in_fdx_23, out_nextIrp, in_DeviceObject_20);
    return;
}



procedure {:LoopProcedure} PptFdoCleanup_loop_L16(in_Tmp_1053: int, in_cancelIrql: int, in_sdv_720: int, in_sdv_721: int, in_fdx_23: int, in_nextIrp: int, in_DeviceObject_20: int) returns (out_Tmp_1053: int, out_cancelIrql: int, out_sdv_720: int, out_sdv_721: int, out_nextIrp: int);
  modifies Mem_T.CancelIrql__IRP, alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_720 == 1 || out_sdv_720 == 0 || out_sdv_720 == in_sdv_720;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPdoCleanup_loop_L11(in_sdv_742: int, in_pdx_12: int, in_sdv_743: int, in_CurrentLastIrp: int, in_Tmp_1075: int, in_CancelRoutine_1: int, in_CancelIrql_1: int, in_DeviceObject_23: int, in_vslice_dummy_var_334: int) returns (out_sdv_742: int, out_sdv_743: int, out_CurrentLastIrp: int, out_Tmp_1075: int, out_CancelRoutine_1: int, out_CancelIrql_1: int, out_vslice_dummy_var_334: int)
{
  var vslice_dummy_var_287: int;

  entry:
    out_sdv_742, out_sdv_743, out_CurrentLastIrp, out_Tmp_1075, out_CancelRoutine_1, out_CancelIrql_1, out_vslice_dummy_var_334 := in_sdv_742, in_sdv_743, in_CurrentLastIrp, in_Tmp_1075, in_CancelRoutine_1, in_CancelIrql_1, in_vslice_dummy_var_334;
    goto L11, exit;

  exit:
    return;

  L11:
    call {:si_unique_call 3166} out_sdv_742 := sdv_IsListEmpty(0);
    goto anon7_Then;

  anon7_Then:
    assume {:partition} out_sdv_742 == 0;
    assume {:nonnull} in_pdx_12 != 0;
    assume in_pdx_12 > 0;
    havoc vslice_dummy_var_287;
    call {:si_unique_call 3171} out_sdv_743 := sdv_containing_record(vslice_dummy_var_287, 88);
    out_CurrentLastIrp := out_sdv_743;
    call {:si_unique_call 3172} out_vslice_dummy_var_334 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_CurrentLastIrp != 0;
    assume out_CurrentLastIrp > 0;
    havoc out_CancelRoutine_1;
    assume {:nonnull} out_CurrentLastIrp != 0;
    assume out_CurrentLastIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(out_CurrentLastIrp)] := out_CancelIrql_1;
    assume {:nonnull} out_CurrentLastIrp != 0;
    assume out_CurrentLastIrp > 0;
    assume {:nonnull} out_CurrentLastIrp != 0;
    assume out_CurrentLastIrp > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:IndirectCall} true;
    assume out_CancelRoutine_1 == li2bplFunctionConstant229;
    call {:si_unique_call 3169} ParCancelRequest(in_DeviceObject_23, out_CurrentLastIrp);
    goto L38;

  L38:
    call {:si_unique_call 3167} out_Tmp_1075 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1075 != 0;
    assume out_Tmp_1075 > 0;
    Mem_T.INT4[out_Tmp_1075] := out_CancelIrql_1;
    call {:si_unique_call 3168} IoAcquireCancelSpinLock(out_Tmp_1075);
    assume {:nonnull} out_Tmp_1075 != 0;
    assume out_Tmp_1075 > 0;
    out_CancelIrql_1 := Mem_T.INT4[out_Tmp_1075];
    goto L38_dummy;

  L38_dummy:
    call {:si_unique_call 3173} {:si_old_unique_call 1} out_sdv_742, out_sdv_743, out_CurrentLastIrp, out_Tmp_1075, out_CancelRoutine_1, out_CancelIrql_1, out_vslice_dummy_var_334 := PptPdoCleanup_loop_L11(out_sdv_742, in_pdx_12, out_sdv_743, out_CurrentLastIrp, out_Tmp_1075, out_CancelRoutine_1, out_CancelIrql_1, in_DeviceObject_23, out_vslice_dummy_var_334);
    return;

  anon9_Then:
    assume {:IndirectCall} true;
    assume out_CancelRoutine_1 == li2bplFunctionConstant197;
    call {:si_unique_call 3170} PptCancelRoutine(in_DeviceObject_23, out_CurrentLastIrp);
    goto L38;
}



procedure {:LoopProcedure} PptPdoCleanup_loop_L11(in_sdv_742: int, in_pdx_12: int, in_sdv_743: int, in_CurrentLastIrp: int, in_Tmp_1075: int, in_CancelRoutine_1: int, in_CancelIrql_1: int, in_DeviceObject_23: int, in_vslice_dummy_var_334: int) returns (out_sdv_742: int, out_sdv_743: int, out_CurrentLastIrp: int, out_Tmp_1075: int, out_CancelRoutine_1: int, out_CancelIrql_1: int, out_vslice_dummy_var_334: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_742 == 1 || out_sdv_742 == 0 || out_sdv_742 == in_sdv_742;
  free ensures {:va_keep} out_vslice_dummy_var_334 == 1 || out_vslice_dummy_var_334 == 0 || out_vslice_dummy_var_334 == in_vslice_dummy_var_334;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} PptFindNatChip_loop_L71(in_Tmp_1083: int, in_Port: int, in_sdv_754: int, in_found: int, in_ChipAddr: int, in_OkToLook: int, in_ii: int, in_PortAddr: int, in_sdv_756: int, in_sdv_758: int, in_sdv_759: int, in_sdv_762: int, in_sdv_767: int, in_cr: int, in_sdv_770: int, in_AddrList: int, in_Tmp_1094: int, in_Fdx_6: int, in_vslice_dummy_var_338: int, in_vslice_dummy_var_339: int, in_vslice_dummy_var_344: int) returns (out_Tmp_1083: int, out_Port: int, out_sdv_754: int, out_found: int, out_OkToLook: int, out_ii: int, out_PortAddr: int, out_sdv_756: int, out_sdv_758: int, out_sdv_759: int, out_sdv_762: int, out_sdv_767: int, out_cr: int, out_sdv_770: int, out_Tmp_1094: int, out_vslice_dummy_var_338: int, out_vslice_dummy_var_339: int, out_vslice_dummy_var_344: int)
{

  entry:
    out_Tmp_1083, out_Port, out_sdv_754, out_found, out_OkToLook, out_ii, out_PortAddr, out_sdv_756, out_sdv_758, out_sdv_759, out_sdv_762, out_sdv_767, out_cr, out_sdv_770, out_Tmp_1094, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_344 := in_Tmp_1083, in_Port, in_sdv_754, in_found, in_OkToLook, in_ii, in_PortAddr, in_sdv_756, in_sdv_758, in_sdv_759, in_sdv_762, in_sdv_767, in_cr, in_sdv_770, in_Tmp_1094, in_vslice_dummy_var_338, in_vslice_dummy_var_339, in_vslice_dummy_var_344;
    goto L71, exit;

  exit:
    return;

  L71:
    goto anon66_Then;

  anon66_Then:
    assume {:partition} out_found == 0;
    goto anon67_Else;

  anon67_Else:
    assume {:partition} 4 > out_ii;
    out_Tmp_1094 := out_ii;
    assume {:nonnull} in_ChipAddr != 0;
    assume in_ChipAddr > 0;
    havoc out_PortAddr;
    call {:si_unique_call 3178} out_sdv_759 := corral_nondet();
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_sdv_759 == 136;
    call {:si_unique_call 3179} out_sdv_762 := corral_nondet();
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} 32 > out_sdv_762;
    out_OkToLook := 1;
    goto L105;

  L105:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_OkToLook != 0;
    out_OkToLook := 0;
    call {:si_unique_call 3181} out_cr := corral_nondet();
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_cr == 8;
    call {:si_unique_call 3182} out_sdv_754 := corral_nondet();
    out_cr := BAND(out_sdv_754, BOR(BOR(BOR(16, 32), 64), 128));
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} out_cr == 16;
    goto L123;

  L123:
    out_found := 1;
    call {:si_unique_call 3183} out_sdv_767 := corral_nondet();
    out_Port := BAND(out_sdv_767, BOR(1, 2));
    out_Tmp_1083 := out_Port;
    assume {:nonnull} in_AddrList != 0;
    assume in_AddrList > 0;
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto L106;

  L106:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_found != 0;
    goto L143;

  L143:
    out_ii := out_ii + 1;
    goto L143_dummy;

  L143_dummy:
    call {:si_unique_call 3187} {:si_old_unique_call 1} out_Tmp_1083, out_Port, out_sdv_754, out_found, out_OkToLook, out_ii, out_PortAddr, out_sdv_756, out_sdv_758, out_sdv_759, out_sdv_762, out_sdv_767, out_cr, out_sdv_770, out_Tmp_1094, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_344 := PptFindNatChip_loop_L71(out_Tmp_1083, out_Port, out_sdv_754, out_found, in_ChipAddr, out_OkToLook, out_ii, out_PortAddr, out_sdv_756, out_sdv_758, out_sdv_759, out_sdv_762, out_sdv_767, out_cr, out_sdv_770, in_AddrList, out_Tmp_1094, in_Fdx_6, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_344);
    return;

  anon71_Then:
    assume {:partition} out_found == 0;
    call {:si_unique_call 3174} out_vslice_dummy_var_339 := corral_nondet();
    call {:si_unique_call 3175} out_sdv_770 := corral_nondet();
    out_cr := BAND(out_sdv_770, BOR(BOR(BOR(BOR(8, 16), 32), 64), 128));
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} out_cr == 192;
    goto L159;

  L159:
    out_found := 1;
    call {:si_unique_call 3184} out_vslice_dummy_var_344 := corral_nondet();
    call {:si_unique_call 3185} out_Port := corral_nondet();
    call {:si_unique_call 3186} out_sdv_756 := corral_nondet();
    out_Port := BOR(out_Port, out_sdv_756);
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:nonnull} in_Fdx_6 != 0;
    assume in_Fdx_6 > 0;
    goto L143;

  anon90_Then:
    goto L143;

  anon89_Then:
    assume {:partition} out_cr != 192;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} out_cr != 160;
    goto L143;

  anon80_Then:
    assume {:partition} out_cr == 160;
    goto L159;

  anon88_Then:
    goto L106;

  anon87_Then:
    assume {:partition} out_cr != 16;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_cr != 80;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_cr != 112;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} out_cr != 48;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} out_cr != 32;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_cr != 144;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_cr != 176;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} out_cr == 96;
    goto L123;

  anon79_Then:
    assume {:partition} out_cr != 96;
    goto L106;

  anon78_Then:
    assume {:partition} out_cr == 176;
    goto L123;

  anon77_Then:
    assume {:partition} out_cr == 144;
    goto L123;

  anon76_Then:
    assume {:partition} out_cr == 32;
    goto L123;

  anon75_Then:
    assume {:partition} out_cr == 48;
    goto L123;

  anon74_Then:
    assume {:partition} out_cr == 112;
    goto L123;

  anon73_Then:
    assume {:partition} out_cr == 80;
    goto L123;

  anon72_Then:
    assume {:partition} out_cr != 8;
    goto L106;

  anon70_Then:
    assume {:partition} out_OkToLook == 0;
    goto L106;

  anon69_Then:
    assume {:partition} out_sdv_762 >= 32;
    goto L97;

  L97:
    call {:si_unique_call 3176} out_vslice_dummy_var_338 := corral_nondet();
    call {:si_unique_call 3177} out_cr := corral_nondet();
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} out_cr != 255;
    call {:si_unique_call 3180} out_sdv_758 := corral_nondet();
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} out_sdv_758 == out_cr;
    out_OkToLook := 1;
    goto L105;

  anon82_Then:
    assume {:partition} out_sdv_758 != out_cr;
    goto L105;

  anon81_Then:
    assume {:partition} out_cr == 255;
    goto L105;

  anon68_Then:
    assume {:partition} out_sdv_759 != 136;
    goto L97;
}



procedure {:LoopProcedure} PptFindNatChip_loop_L71(in_Tmp_1083: int, in_Port: int, in_sdv_754: int, in_found: int, in_ChipAddr: int, in_OkToLook: int, in_ii: int, in_PortAddr: int, in_sdv_756: int, in_sdv_758: int, in_sdv_759: int, in_sdv_762: int, in_sdv_767: int, in_cr: int, in_sdv_770: int, in_AddrList: int, in_Tmp_1094: int, in_Fdx_6: int, in_vslice_dummy_var_338: int, in_vslice_dummy_var_339: int, in_vslice_dummy_var_344: int) returns (out_Tmp_1083: int, out_Port: int, out_sdv_754: int, out_found: int, out_OkToLook: int, out_ii: int, out_PortAddr: int, out_sdv_756: int, out_sdv_758: int, out_sdv_759: int, out_sdv_762: int, out_sdv_767: int, out_cr: int, out_sdv_770: int, out_Tmp_1094: int, out_vslice_dummy_var_338: int, out_vslice_dummy_var_339: int, out_vslice_dummy_var_344: int);
  free ensures {:va_keep} out_found == 1 || out_found == in_found;
  free ensures {:va_keep} out_OkToLook == 0 || out_OkToLook == 1 || out_OkToLook == in_OkToLook;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P5FdoThread_loop_L12(in_requestRescan: int, in_aid_5: int, in_des_5: int, in_cls_5: int, in_Tmp_1163: int, in_Tmp_1164: int, in_timeOut1: int, in_Tmp_1168: int, in_pollingFailureThreshold: int, in_Tmp_1169: int, in_mfg_5: int, in_devId_2: int, in_Tmp_1171: int, in_sdv_838: int, in_Tmp_1173: int, in_Tmp_1175: int, in_cid_5: int, in_Fdx_8: int, in_status_44: int, in_mdl_5: int, in_deviceStatus: int, in_vslice_dummy_var_374: int, in_vslice_dummy_var_375: int) returns (out_requestRescan: int, out_Tmp_1163: int, out_Tmp_1164: int, out_Tmp_1168: int, out_Tmp_1169: int, out_devId_2: int, out_Tmp_1171: int, out_sdv_838: int, out_Tmp_1173: int, out_Tmp_1175: int, out_status_44: int, out_deviceStatus: int, out_vslice_dummy_var_374: int, out_vslice_dummy_var_375: int)
{
  var vslice_dummy_var_288: int;

  entry:
    out_requestRescan, out_Tmp_1163, out_Tmp_1164, out_Tmp_1168, out_Tmp_1169, out_devId_2, out_Tmp_1171, out_sdv_838, out_Tmp_1173, out_Tmp_1175, out_status_44, out_deviceStatus, out_vslice_dummy_var_374, out_vslice_dummy_var_375 := in_requestRescan, in_Tmp_1163, in_Tmp_1164, in_Tmp_1168, in_Tmp_1169, in_devId_2, in_Tmp_1171, in_sdv_838, in_Tmp_1173, in_Tmp_1175, in_status_44, in_deviceStatus, in_vslice_dummy_var_374, in_vslice_dummy_var_375;
    goto L12, exit;

  exit:
    return;

  L12:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} PowerStateIsAC != 0;
    assume {:nonnull} in_timeOut1 != 0;
    assume in_timeOut1 > 0;
    goto L15;

  L15:
    call {:si_unique_call 3194} out_status_44 := KeWaitForSingleObject(0, 0, 0, 0, in_timeOut1);
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    call {:si_unique_call 3193} out_vslice_dummy_var_374 := PsTerminateSystemThread(0);
    goto L20;

  L20:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} PowerStateIsAC != 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} 258 == out_status_44;
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    call {:si_unique_call 3192} out_sdv_838 := PptTryAllocatePort(in_Fdx_8);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_sdv_838 != 0;
    out_requestRescan := 0;
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    call {:si_unique_call 3191} out_deviceStatus := corral_nondet();
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} 0 != 1;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} BAND(out_deviceStatus, 128) != 0;
    out_Tmp_1163 := 1;
    goto L47;

  L47:
    out_Tmp_1171 := out_Tmp_1163;
    goto L48;

  L48:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} out_Tmp_1171 != 0;
    goto L50;

  L50:
    call {:si_unique_call 3189} PptFreePort#1(in_Fdx_8);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} out_requestRescan != 0;
    call {:si_unique_call 3188} IoInvalidateDeviceRelations(0, 0);
    goto anon83_Else_dummy;

  anon83_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 3198} {:si_old_unique_call 1} out_requestRescan, out_Tmp_1163, out_Tmp_1164, out_Tmp_1168, out_Tmp_1169, out_devId_2, out_Tmp_1171, out_sdv_838, out_Tmp_1173, out_Tmp_1175, out_status_44, out_deviceStatus, out_vslice_dummy_var_374, out_vslice_dummy_var_375 := P5FdoThread_loop_L12(out_requestRescan, in_aid_5, in_des_5, in_cls_5, out_Tmp_1163, out_Tmp_1164, in_timeOut1, out_Tmp_1168, in_pollingFailureThreshold, out_Tmp_1169, in_mfg_5, out_devId_2, out_Tmp_1171, out_sdv_838, out_Tmp_1173, out_Tmp_1175, in_cid_5, in_Fdx_8, out_status_44, in_mdl_5, out_deviceStatus, out_vslice_dummy_var_374, out_vslice_dummy_var_375);
    return;

  anon83_Then:
    assume {:partition} out_requestRescan == 0;
    goto anon83_Then_dummy;

  anon83_Then_dummy:
    goto L_BAF_3;

  anon81_Then:
    assume {:partition} out_Tmp_1171 == 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} BAND(out_deviceStatus, 8) != 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} BAND(out_deviceStatus, 128) != 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} BAND(out_deviceStatus, 16) != 0;
    goto L57;

  L57:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} 0 != 1;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} BAND(out_deviceStatus, 64) != 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} BAND(out_deviceStatus, 32) != 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} BAND(out_deviceStatus, 16) != 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} BAND(out_deviceStatus, 8) != 0;
    out_Tmp_1169 := 1;
    goto L69;

  L69:
    out_Tmp_1164 := out_Tmp_1169;
    goto L70;

  L70:
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} out_Tmp_1164 == 0;
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    havoc vslice_dummy_var_288;
    call {:si_unique_call 3196} out_devId_2 := P4ReadRawIeee1284DeviceId(vslice_dummy_var_288);
    goto anon106_Else;

  anon106_Else:
    assume {:partition} yogi_error != 1;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} out_devId_2 != 0;
    out_Tmp_1175 := out_devId_2;
    call {:si_unique_call 3197} ParPnpFindDeviceIdKeys(in_mfg_5, in_mdl_5, in_cls_5, in_des_5, in_aid_5, in_cid_5, out_Tmp_1175);
    assume {:nonnull} in_mfg_5 != 0;
    assume in_mfg_5 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} in_mdl_5 != 0;
    assume in_mdl_5 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    out_requestRescan := 1;
    goto L89;

  L89:
    call {:si_unique_call 3195} sdv_ExFreePool(0);
    goto L76;

  L76:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} out_requestRescan != 0;
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    goto L50;

  anon94_Then:
    assume {:partition} out_requestRescan == 0;
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    assume {:nonnull} in_Fdx_8 != 0;
    assume in_Fdx_8 > 0;
    call {:si_unique_call 3190} out_vslice_dummy_var_375 := KeSetEvent(FdoThreadEvent__FDO_EXTENSION(in_Fdx_8), 0, 0);
    goto L50;

  anon107_Then:
    goto L50;

  anon96_Then:
    goto L89;

  anon95_Then:
    goto L89;

  anon93_Then:
    assume {:partition} out_devId_2 == 0;
    goto L76;

  anon92_Then:
    assume {:partition} out_Tmp_1164 != 0;
    goto L50;

  anon91_Then:
    assume {:partition} BAND(out_deviceStatus, 8) == 0;
    goto L63;

  L63:
    out_Tmp_1169 := 0;
    goto L69;

  anon90_Then:
    assume {:partition} BAND(out_deviceStatus, 16) == 0;
    goto L63;

  anon89_Then:
    assume {:partition} BAND(out_deviceStatus, 32) == 0;
    goto L63;

  anon88_Then:
    assume {:partition} BAND(out_deviceStatus, 64) == 0;
    goto L63;

  anon105_Then:
    goto L63;

  anon84_Then:
    assume {:partition} 0 == 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} BAND(out_deviceStatus, 128) != 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} BAND(out_deviceStatus, 64) != 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} BAND(out_deviceStatus, 32) != 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} BAND(out_deviceStatus, 16) != 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} BAND(out_deviceStatus, 8) != 0;
    out_Tmp_1168 := 1;
    goto L106;

  L106:
    out_Tmp_1164 := out_Tmp_1168;
    goto L70;

  anon100_Then:
    assume {:partition} BAND(out_deviceStatus, 8) == 0;
    goto L100;

  L100:
    out_Tmp_1168 := 0;
    goto L106;

  anon99_Then:
    assume {:partition} BAND(out_deviceStatus, 16) == 0;
    goto L100;

  anon98_Then:
    assume {:partition} BAND(out_deviceStatus, 32) == 0;
    goto L100;

  anon97_Then:
    assume {:partition} BAND(out_deviceStatus, 64) == 0;
    goto L100;

  anon87_Then:
    assume {:partition} BAND(out_deviceStatus, 128) == 0;
    goto L100;

  anon86_Then:
    assume {:partition} BAND(out_deviceStatus, 16) == 0;
    goto L50;

  anon85_Then:
    assume {:partition} BAND(out_deviceStatus, 128) == 0;
    goto L57;

  anon82_Then:
    assume {:partition} BAND(out_deviceStatus, 8) == 0;
    goto L57;

  anon80_Then:
    assume {:partition} BAND(out_deviceStatus, 128) == 0;
    goto L42;

  L42:
    out_Tmp_1163 := 0;
    goto L47;

  anon104_Then:
    goto L42;

  anon103_Then:
    goto L42;

  anon79_Then:
    assume {:partition} 0 == 1;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} BAND(out_deviceStatus, 64) != 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} BAND(out_deviceStatus, 128) != 0;
    out_Tmp_1173 := 1;
    goto L112;

  L112:
    out_Tmp_1171 := out_Tmp_1173;
    goto L48;

  anon102_Then:
    assume {:partition} BAND(out_deviceStatus, 128) == 0;
    goto L108;

  L108:
    out_Tmp_1173 := 0;
    goto L112;

  anon101_Then:
    assume {:partition} BAND(out_deviceStatus, 64) == 0;
    goto L108;

  anon108_Then:
    goto L108;

  anon78_Then:
    assume {:partition} out_sdv_838 == 0;
    goto anon78_Then_dummy;

  anon78_Then_dummy:
    goto L_BAF_3;

  anon77_Then:
    goto anon77_Then_dummy;

  anon77_Then_dummy:
    goto L_BAF_3;

  anon76_Then:
    assume {:partition} 258 != out_status_44;
    goto anon76_Then_dummy;

  anon76_Then_dummy:
    goto L_BAF_3;

  anon75_Then:
    assume {:partition} PowerStateIsAC == 0;
    goto anon75_Then_dummy;

  anon75_Then_dummy:
    goto L_BAF_3;

  anon74_Then:
    goto L20;

  anon73_Then:
    assume {:partition} PowerStateIsAC == 0;
    assume {:nonnull} in_timeOut1 != 0;
    assume in_timeOut1 > 0;
    goto L15;
}



procedure {:LoopProcedure} P5FdoThread_loop_L12(in_requestRescan: int, in_aid_5: int, in_des_5: int, in_cls_5: int, in_Tmp_1163: int, in_Tmp_1164: int, in_timeOut1: int, in_Tmp_1168: int, in_pollingFailureThreshold: int, in_Tmp_1169: int, in_mfg_5: int, in_devId_2: int, in_Tmp_1171: int, in_sdv_838: int, in_Tmp_1173: int, in_Tmp_1175: int, in_cid_5: int, in_Fdx_8: int, in_status_44: int, in_mdl_5: int, in_deviceStatus: int, in_vslice_dummy_var_374: int, in_vslice_dummy_var_375: int) returns (out_requestRescan: int, out_Tmp_1163: int, out_Tmp_1164: int, out_Tmp_1168: int, out_Tmp_1169: int, out_devId_2: int, out_Tmp_1171: int, out_sdv_838: int, out_Tmp_1173: int, out_Tmp_1175: int, out_status_44: int, out_deviceStatus: int, out_vslice_dummy_var_374: int, out_vslice_dummy_var_375: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_requestRescan == 0 || out_requestRescan == 1 || out_requestRescan == in_requestRescan;
  free ensures {:va_keep} out_Tmp_1163 == 1 || out_Tmp_1163 == 0 || out_Tmp_1163 == in_Tmp_1163;
  free ensures {:va_keep} out_Tmp_1164 == 1 || out_Tmp_1164 == 0 || out_Tmp_1164 == in_Tmp_1164;
  free ensures {:va_keep} out_Tmp_1168 == 1 || out_Tmp_1168 == 0 || out_Tmp_1168 == in_Tmp_1168;
  free ensures {:va_keep} out_Tmp_1169 == 1 || out_Tmp_1169 == 0 || out_Tmp_1169 == in_Tmp_1169;
  free ensures {:va_keep} out_Tmp_1171 == 1 || out_Tmp_1171 == 0 || out_Tmp_1171 == in_Tmp_1171;
  free ensures {:va_keep} out_sdv_838 == 1 || out_sdv_838 == 0 || out_sdv_838 == in_sdv_838;
  free ensures {:va_keep} out_Tmp_1173 == 1 || out_Tmp_1173 == 0 || out_Tmp_1173 == in_Tmp_1173;
  free ensures {:va_keep} out_status_44 == 258 || out_status_44 == 0 || out_status_44 == in_status_44;
  free ensures {:va_keep} out_vslice_dummy_var_374 == -1073741823 || out_vslice_dummy_var_374 == in_vslice_dummy_var_374;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPdoThread_loop_L54(in_sdv_844: int, in_Tmp_1179: int, in_pdx_28: int, in_CurrentIrp: int, in_HeadOfList: int, in_sdv_848: int, in_OldIrql_2: int, in_sdv_855: int, in_vslice_dummy_var_382: int, in_vslice_dummy_var_383: int, in_vslice_dummy_var_384: int) returns (out_sdv_844: int, out_Tmp_1179: int, out_CurrentIrp: int, out_HeadOfList: int, out_sdv_848: int, out_OldIrql_2: int, out_sdv_855: int, out_vslice_dummy_var_382: int, out_vslice_dummy_var_383: int, out_vslice_dummy_var_384: int)
{
  var vslice_dummy_var_289: int;

  entry:
    out_sdv_844, out_Tmp_1179, out_CurrentIrp, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_855, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384 := in_sdv_844, in_Tmp_1179, in_CurrentIrp, in_HeadOfList, in_sdv_848, in_OldIrql_2, in_sdv_855, in_vslice_dummy_var_382, in_vslice_dummy_var_383, in_vslice_dummy_var_384;
    goto L54, exit;

  exit:
    return;

  L54:
    call {:si_unique_call 3199} out_sdv_855 := sdv_IsListEmpty(0);
    goto anon27_Else;

  anon27_Else:
    assume {:partition} out_sdv_855 == 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    call {:si_unique_call 3204} out_HeadOfList := RemoveHeadList(WorkQueue__PDO_EXTENSION(in_pdx_28));
    call {:si_unique_call 3205} out_sdv_848 := sdv_containing_record(out_HeadOfList, 88);
    out_CurrentIrp := out_sdv_848;
    call {:si_unique_call 3206} out_vslice_dummy_var_384 := sdv_IoSetCancelRoutine(out_CurrentIrp, 0);
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    call {:si_unique_call 3207} IoReleaseCancelSpinLock(out_OldIrql_2);
    call {:si_unique_call 3208} PptPdoStartIo(in_pdx_28);
    goto anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 3209} out_sdv_844 := ParHaveReadData(in_pdx_28);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_sdv_844 != 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    havoc vslice_dummy_var_289;
    call {:si_unique_call 3203} out_vslice_dummy_var_383 := KeSetEvent(vslice_dummy_var_289, 0, 0);
    goto L81;

  L81:
    call {:si_unique_call 3200} out_vslice_dummy_var_382 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 3201} out_Tmp_1179 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1179 != 0;
    assume out_Tmp_1179 > 0;
    Mem_T.INT4[out_Tmp_1179] := out_OldIrql_2;
    call {:si_unique_call 3202} IoAcquireCancelSpinLock(out_Tmp_1179);
    assume {:nonnull} out_Tmp_1179 != 0;
    assume out_Tmp_1179 > 0;
    out_OldIrql_2 := Mem_T.INT4[out_Tmp_1179];
    goto L81_dummy;

  L81_dummy:
    call {:si_unique_call 3210} {:si_old_unique_call 1} out_sdv_844, out_Tmp_1179, out_CurrentIrp, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_855, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384 := PptPdoThread_loop_L54(out_sdv_844, out_Tmp_1179, in_pdx_28, out_CurrentIrp, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_855, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384);
    return;

  anon29_Then:
    assume {:partition} out_sdv_844 == 0;
    goto L81;

  anon28_Then:
    goto L81;
}



procedure {:LoopProcedure} PptPdoThread_loop_L54(in_sdv_844: int, in_Tmp_1179: int, in_pdx_28: int, in_CurrentIrp: int, in_HeadOfList: int, in_sdv_848: int, in_OldIrql_2: int, in_sdv_855: int, in_vslice_dummy_var_382: int, in_vslice_dummy_var_383: int, in_vslice_dummy_var_384: int) returns (out_sdv_844: int, out_Tmp_1179: int, out_CurrentIrp: int, out_HeadOfList: int, out_sdv_848: int, out_OldIrql_2: int, out_sdv_855: int, out_vslice_dummy_var_382: int, out_vslice_dummy_var_383: int, out_vslice_dummy_var_384: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_844 == 0 || out_sdv_844 == 1 || out_sdv_844 == in_sdv_844;
  free ensures {:va_keep} out_sdv_855 == 1 || out_sdv_855 == 0 || out_sdv_855 == in_sdv_855;
  free ensures {:va_keep} out_vslice_dummy_var_382 == 258 || out_vslice_dummy_var_382 == 0 || out_vslice_dummy_var_382 == in_vslice_dummy_var_382;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptPdoThread_loop_L10(in_sdv_844: int, in_Tmp_1179: int, in_Timeout_2: int, in_pdx_28: int, in_CurrentIrp: int, in_Status_16: int, in_HeadOfList: int, in_sdv_848: int, in_OldIrql_2: int, in_sdv_852: int, in_sdv_854: int, in_sdv_855: int, in_vslice_dummy_var_379: int, in_vslice_dummy_var_380: int, in_vslice_dummy_var_381: int, in_vslice_dummy_var_382: int, in_vslice_dummy_var_383: int, in_vslice_dummy_var_384: int) returns (out_sdv_844: int, out_Tmp_1179: int, out_CurrentIrp: int, out_Status_16: int, out_HeadOfList: int, out_sdv_848: int, out_OldIrql_2: int, out_sdv_852: int, out_sdv_854: int, out_sdv_855: int, out_vslice_dummy_var_379: int, out_vslice_dummy_var_380: int, out_vslice_dummy_var_381: int, out_vslice_dummy_var_382: int, out_vslice_dummy_var_383: int, out_vslice_dummy_var_384: int)
{
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;

  entry:
    out_sdv_844, out_Tmp_1179, out_CurrentIrp, out_Status_16, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_852, out_sdv_854, out_sdv_855, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384 := in_sdv_844, in_Tmp_1179, in_CurrentIrp, in_Status_16, in_HeadOfList, in_sdv_848, in_OldIrql_2, in_sdv_852, in_sdv_854, in_sdv_855, in_vslice_dummy_var_379, in_vslice_dummy_var_380, in_vslice_dummy_var_381, in_vslice_dummy_var_382, in_vslice_dummy_var_383, in_vslice_dummy_var_384;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:nonnull} in_Timeout_2 != 0;
    assume in_Timeout_2 > 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    assume {:nonnull} in_Timeout_2 != 0;
    assume in_Timeout_2 > 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    assume {:nonnull} in_Timeout_2 != 0;
    assume in_Timeout_2 > 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    assume {:nonnull} in_Timeout_2 != 0;
    assume in_Timeout_2 > 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    assume {:nonnull} in_Timeout_2 != 0;
    assume in_Timeout_2 > 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    call {:si_unique_call 3211} out_Status_16 := KeWaitForSingleObject(0, 6, 0, 0, in_Timeout_2);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_Status_16 == 258;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L104;

  L104:
    assume {:IndirectCall} true;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    havoc vslice_dummy_var_290;
    call {:si_unique_call 3214} out_sdv_852 := PptQueryNumWaiters(vslice_dummy_var_290);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} out_sdv_852 != 0;
    call {:si_unique_call 3212} ParTerminate(in_pdx_28);
    call {:si_unique_call 3213} ParFreePort(in_pdx_28);
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    goto L_BAF_4;

  L_BAF_4:
    call {:si_unique_call 3236} {:si_old_unique_call 1} out_sdv_844, out_Tmp_1179, out_CurrentIrp, out_Status_16, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_852, out_sdv_854, out_sdv_855, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384 := PptPdoThread_loop_L10(out_sdv_844, out_Tmp_1179, in_Timeout_2, in_pdx_28, out_CurrentIrp, out_Status_16, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_852, out_sdv_854, out_sdv_855, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384);
    return;

  anon24_Then:
    assume {:partition} out_sdv_852 == 0;
    goto L16;

  L16:
    call {:si_unique_call 3233} out_vslice_dummy_var_379 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 3234} ParTerminate(in_pdx_28);
    call {:si_unique_call 3235} ParFreePort(in_pdx_28);
    goto L45;

  L45:
    call {:si_unique_call 3232} out_vslice_dummy_var_381 := PsTerminateSystemThread(0);
    goto L41;

  L41:
    call {:si_unique_call 3220} out_Tmp_1179 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1179 != 0;
    assume out_Tmp_1179 > 0;
    Mem_T.INT4[out_Tmp_1179] := out_OldIrql_2;
    call {:si_unique_call 3221} IoAcquireCancelSpinLock(out_Tmp_1179);
    assume {:nonnull} out_Tmp_1179 != 0;
    assume out_Tmp_1179 > 0;
    out_OldIrql_2 := Mem_T.INT4[out_Tmp_1179];
    goto L54;

  L54:
    call {:si_unique_call 3218} out_sdv_844, out_Tmp_1179, out_CurrentIrp, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_855, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384 := PptPdoThread_loop_L54(out_sdv_844, out_Tmp_1179, in_pdx_28, out_CurrentIrp, out_HeadOfList, out_sdv_848, out_OldIrql_2, out_sdv_855, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384);
    goto L54_last;

  L54_last:
    call {:si_unique_call 3219} out_sdv_855 := sdv_IsListEmpty(0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} out_sdv_855 == 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    call {:si_unique_call 3226} out_HeadOfList := RemoveHeadList(WorkQueue__PDO_EXTENSION(in_pdx_28));
    call {:si_unique_call 3227} out_sdv_848 := sdv_containing_record(out_HeadOfList, 88);
    out_CurrentIrp := out_sdv_848;
    call {:si_unique_call 3228} out_vslice_dummy_var_384 := sdv_IoSetCancelRoutine(out_CurrentIrp, 0);
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    call {:si_unique_call 3229} IoReleaseCancelSpinLock(out_OldIrql_2);
    call {:si_unique_call 3230} PptPdoStartIo(in_pdx_28);
    goto anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 3231} out_sdv_844 := ParHaveReadData(in_pdx_28);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_sdv_844 != 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    havoc vslice_dummy_var_292;
    call {:si_unique_call 3225} out_vslice_dummy_var_383 := KeSetEvent(vslice_dummy_var_292, 0, 0);
    goto L81;

  L81:
    call {:si_unique_call 3222} out_vslice_dummy_var_382 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 3223} out_Tmp_1179 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1179 != 0;
    assume out_Tmp_1179 > 0;
    Mem_T.INT4[out_Tmp_1179] := out_OldIrql_2;
    call {:si_unique_call 3224} IoAcquireCancelSpinLock(out_Tmp_1179);
    assume {:nonnull} out_Tmp_1179 != 0;
    assume out_Tmp_1179 > 0;
    out_OldIrql_2 := Mem_T.INT4[out_Tmp_1179];
    assume false;
    return;

  anon29_Then:
    assume {:partition} out_sdv_844 == 0;
    goto L81;

  anon28_Then:
    goto L81;

  anon27_Then:
    assume {:partition} out_sdv_855 != 0;
    call {:si_unique_call 3217} IoReleaseCancelSpinLock(out_OldIrql_2);
    goto anon27_Then_dummy;

  anon27_Then_dummy:
    goto L_BAF_4;

  anon26_Then:
    goto L45;

  anon25_Then:
    goto L41;

  anon22_Then:
    call {:si_unique_call 3216} out_sdv_854 := ParHaveReadData(in_pdx_28);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_sdv_854 == 0;
    goto L104;

  anon23_Then:
    assume {:partition} out_sdv_854 != 0;
    assume {:nonnull} in_pdx_28 != 0;
    assume in_pdx_28 > 0;
    havoc vslice_dummy_var_291;
    call {:si_unique_call 3215} out_vslice_dummy_var_380 := KeSetEvent(vslice_dummy_var_291, 0, 0);
    goto L104;

  anon21_Then:
    assume {:partition} out_Status_16 != 258;
    goto L16;
}



procedure {:LoopProcedure} PptPdoThread_loop_L10(in_sdv_844: int, in_Tmp_1179: int, in_Timeout_2: int, in_pdx_28: int, in_CurrentIrp: int, in_Status_16: int, in_HeadOfList: int, in_sdv_848: int, in_OldIrql_2: int, in_sdv_852: int, in_sdv_854: int, in_sdv_855: int, in_vslice_dummy_var_379: int, in_vslice_dummy_var_380: int, in_vslice_dummy_var_381: int, in_vslice_dummy_var_382: int, in_vslice_dummy_var_383: int, in_vslice_dummy_var_384: int) returns (out_sdv_844: int, out_Tmp_1179: int, out_CurrentIrp: int, out_Status_16: int, out_HeadOfList: int, out_sdv_848: int, out_OldIrql_2: int, out_sdv_852: int, out_sdv_854: int, out_sdv_855: int, out_vslice_dummy_var_379: int, out_vslice_dummy_var_380: int, out_vslice_dummy_var_381: int, out_vslice_dummy_var_382: int, out_vslice_dummy_var_383: int, out_vslice_dummy_var_384: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_sdv_844 == 0 || out_sdv_844 == 1 || out_sdv_844 == in_sdv_844;
  free ensures {:va_keep} out_Status_16 == 258 || out_Status_16 == 0 || out_Status_16 == in_Status_16;
  free ensures {:va_keep} out_sdv_854 == 0 || out_sdv_854 == 1 || out_sdv_854 == in_sdv_854;
  free ensures {:va_keep} out_sdv_855 == 1 || out_sdv_855 == 0 || out_sdv_855 == in_sdv_855;
  free ensures {:va_keep} out_vslice_dummy_var_379 == 258 || out_vslice_dummy_var_379 == 0 || out_vslice_dummy_var_379 == in_vslice_dummy_var_379;
  free ensures {:va_keep} out_vslice_dummy_var_381 == -1073741823 || out_vslice_dummy_var_381 == in_vslice_dummy_var_381;
  free ensures {:va_keep} out_vslice_dummy_var_382 == 258 || out_vslice_dummy_var_382 == 0 || out_vslice_dummy_var_382 == in_vslice_dummy_var_382;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4NibbleModeRead_loop_L30(in_dcr_4: int, in_Tmp_1229: int, in_j: int, in_sdv_880: int, in_Tmp_1241: int, in_Tmp_1242: int, in_Tmp_1244: int, in_nibble: int, in_sdv_885: int, in_Tmp_1246: int, in_sdv_886: int, in_sdv_887: int, in_sdv_888: int, in_Tmp_1249: int, in_Controller_9: int, in_IeeeState_2: int) returns (out_dcr_4: int, out_Tmp_1229: int, out_j: int, out_sdv_880: int, out_Tmp_1241: int, out_Tmp_1242: int, out_Tmp_1244: int, out_sdv_885: int, out_Tmp_1246: int, out_sdv_886: int, out_sdv_887: int, out_sdv_888: int, out_Tmp_1249: int)
{

  entry:
    out_dcr_4, out_Tmp_1229, out_j, out_sdv_880, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_sdv_888, out_Tmp_1249 := in_dcr_4, in_Tmp_1229, in_j, in_sdv_880, in_Tmp_1241, in_Tmp_1242, in_Tmp_1244, in_sdv_885, in_Tmp_1246, in_sdv_886, in_sdv_887, in_sdv_888, in_Tmp_1249;
    goto L30, exit;

  exit:
    return;

  L30:
    assume {:CounterLoop 2} {:Counter "j"} true;
    goto anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j;
    out_dcr_4 := BOR(out_dcr_4, 2);
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 3241} out_sdv_885 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_885, 64) != 0;
    out_Tmp_1244 := in_Controller_9;
    call {:si_unique_call 3240} out_sdv_887 := CheckPort(out_Tmp_1244, 64, 0, 35);
    out_Tmp_1246 := out_sdv_887;
    goto L48;

  L48:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_1246 != 0;
    call {:si_unique_call 3238} out_sdv_886 := corral_nondet();
    out_Tmp_1229 := out_j;
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    Mem_T.INT4[in_nibble + out_Tmp_1229 * 4] := out_sdv_886;
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    out_dcr_4 := BAND(out_dcr_4, BNOT(2));
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 3239} out_sdv_880 := corral_nondet();
    out_Tmp_1241 := BAND(out_sdv_880, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_1241 == 64;
    out_Tmp_1249 := 1;
    goto L68;

  L68:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_1249 != 0;
    out_j := out_j + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 3242} {:si_old_unique_call 1} out_dcr_4, out_Tmp_1229, out_j, out_sdv_880, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_sdv_888, out_Tmp_1249 := P4NibbleModeRead_loop_L30(out_dcr_4, out_Tmp_1229, out_j, out_sdv_880, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, in_nibble, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_sdv_888, out_Tmp_1249, in_Controller_9, in_IeeeState_2);
    return;

  anon52_Then:
    assume {:partition} out_Tmp_1241 != 64;
    out_Tmp_1242 := in_Controller_9;
    call {:si_unique_call 3237} out_sdv_888 := CheckPort(out_Tmp_1242, 64, 64, 35);
    out_Tmp_1249 := out_sdv_888;
    goto L68;

  anon40_Then:
    assume {:partition} BAND(out_sdv_885, 64) == 0;
    out_Tmp_1246 := 1;
    goto L48;
}



procedure {:LoopProcedure} P4NibbleModeRead_loop_L30(in_dcr_4: int, in_Tmp_1229: int, in_j: int, in_sdv_880: int, in_Tmp_1241: int, in_Tmp_1242: int, in_Tmp_1244: int, in_nibble: int, in_sdv_885: int, in_Tmp_1246: int, in_sdv_886: int, in_sdv_887: int, in_sdv_888: int, in_Tmp_1249: int, in_Controller_9: int, in_IeeeState_2: int) returns (out_dcr_4: int, out_Tmp_1229: int, out_j: int, out_sdv_880: int, out_Tmp_1241: int, out_Tmp_1242: int, out_Tmp_1244: int, out_sdv_885: int, out_Tmp_1246: int, out_sdv_886: int, out_sdv_887: int, out_sdv_888: int, out_Tmp_1249: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1242 == in_Tmp_1242 || out_Tmp_1242 == in_Controller_9;
  free ensures {:va_keep} out_Tmp_1244 == in_Tmp_1244 || out_Tmp_1244 == in_Controller_9;
  free ensures {:va_keep} out_Tmp_1246 == 1 || out_Tmp_1246 == 0 || out_Tmp_1246 == in_Tmp_1246;
  free ensures {:va_keep} out_sdv_887 == 1 || out_sdv_887 == 0 || out_sdv_887 == in_sdv_887;
  free ensures {:va_keep} out_sdv_888 == 1 || out_sdv_888 == 0 || out_sdv_888 == in_sdv_888;
  free ensures {:va_keep} out_Tmp_1249 == 1 || out_Tmp_1249 == 0 || out_Tmp_1249 == in_Tmp_1249;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4NibbleModeRead_loop_L27(in_i_23: int, in_dcr_4: int, in_Tmp_1229: int, in_Tmp_1231: int, in_j: int, in_Tmp_1234: int, in_sdv_880: int, in_Tmp_1237: int, in_Tmp_1238: int, in_Tmp_1240: int, in_Tmp_1241: int, in_Tmp_1242: int, in_Tmp_1244: int, in_Tmp_1245: int, in_nibble: int, in_sdv_885: int, in_Tmp_1246: int, in_sdv_886: int, in_sdv_887: int, in_Tmp_1248: int, in_sdv_888: int, in_Tmp_1249: int, in_dsr: int, in_p_9: int, in_Controller_9: int, in_BufferSize_3: int, in_IeeeState_2: int) returns (out_i_23: int, out_dcr_4: int, out_Tmp_1229: int, out_Tmp_1231: int, out_j: int, out_Tmp_1234: int, out_sdv_880: int, out_Tmp_1237: int, out_Tmp_1238: int, out_Tmp_1240: int, out_Tmp_1241: int, out_Tmp_1242: int, out_Tmp_1244: int, out_Tmp_1245: int, out_sdv_885: int, out_Tmp_1246: int, out_sdv_886: int, out_sdv_887: int, out_Tmp_1248: int, out_sdv_888: int, out_Tmp_1249: int, out_dsr: int)
{

  entry:
    out_i_23, out_dcr_4, out_Tmp_1229, out_Tmp_1231, out_j, out_Tmp_1234, out_sdv_880, out_Tmp_1237, out_Tmp_1238, out_Tmp_1240, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, out_Tmp_1245, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_Tmp_1248, out_sdv_888, out_Tmp_1249, out_dsr := in_i_23, in_dcr_4, in_Tmp_1229, in_Tmp_1231, in_j, in_Tmp_1234, in_sdv_880, in_Tmp_1237, in_Tmp_1238, in_Tmp_1240, in_Tmp_1241, in_Tmp_1242, in_Tmp_1244, in_Tmp_1245, in_sdv_885, in_Tmp_1246, in_sdv_886, in_sdv_887, in_Tmp_1248, in_sdv_888, in_Tmp_1249, in_dsr;
    goto L27, exit;

  exit:
    return;

  L27:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} in_BufferSize_3 > out_i_23;
    out_j := 0;
    goto L30;

  L30:
    call {:si_unique_call 3246} out_dcr_4, out_Tmp_1229, out_j, out_sdv_880, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_sdv_888, out_Tmp_1249 := P4NibbleModeRead_loop_L30(out_dcr_4, out_Tmp_1229, out_j, out_sdv_880, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, in_nibble, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_sdv_888, out_Tmp_1249, in_Controller_9, in_IeeeState_2);
    goto L30_last;

  L30_last:
    assume {:CounterLoop 2} {:Counter "j"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j;
    out_dcr_4 := BOR(out_dcr_4, 2);
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 3251} out_sdv_885 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_885, 64) != 0;
    out_Tmp_1244 := in_Controller_9;
    call {:si_unique_call 3250} out_sdv_887 := CheckPort(out_Tmp_1244, 64, 0, 35);
    out_Tmp_1246 := out_sdv_887;
    goto L48;

  L48:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_1246 != 0;
    call {:si_unique_call 3248} out_sdv_886 := corral_nondet();
    out_Tmp_1229 := out_j;
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    Mem_T.INT4[in_nibble + out_Tmp_1229 * 4] := out_sdv_886;
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    out_dcr_4 := BAND(out_dcr_4, BNOT(2));
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    call {:si_unique_call 3249} out_sdv_880 := corral_nondet();
    out_Tmp_1241 := BAND(out_sdv_880, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_1241 == 64;
    out_Tmp_1249 := 1;
    goto L68;

  L68:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_1249 != 0;
    out_j := out_j + 1;
    assume false;
    return;

  anon52_Then:
    assume {:partition} out_Tmp_1241 != 64;
    out_Tmp_1242 := in_Controller_9;
    call {:si_unique_call 3247} out_sdv_888 := CheckPort(out_Tmp_1242, 64, 64, 35);
    out_Tmp_1249 := out_sdv_888;
    goto L68;

  anon40_Then:
    assume {:partition} BAND(out_sdv_885, 64) == 0;
    out_Tmp_1246 := 1;
    goto L48;

  anon39_Then:
    assume {:partition} out_j >= 2;
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    call {:si_unique_call 3245} out_Tmp_1231 := corral_nondet();
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble], 128) != 0;
    out_Tmp_1245 := 0;
    goto L92;

  L92:
    out_Tmp_1238 := out_i_23;
    assume {:nonnull} in_p_9 != 0;
    assume in_p_9 > 0;
    Mem_T.INT4[in_p_9 + out_Tmp_1238 * 4] := BOR(out_Tmp_1231, out_Tmp_1245);
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    call {:si_unique_call 3244} out_Tmp_1237 := corral_nondet();
    assume {:nonnull} in_nibble != 0;
    assume in_nibble > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble + 1 * 4], 128) != 0;
    out_Tmp_1248 := 0;
    goto L98;

  L98:
    out_Tmp_1234 := out_i_23;
    out_Tmp_1240 := out_i_23;
    assume {:nonnull} in_p_9 != 0;
    assume in_p_9 > 0;
    Mem_T.INT4[in_p_9 + out_Tmp_1234 * 4] := BOR(Mem_T.INT4[in_p_9 + out_Tmp_1240 * 4], BOR(out_Tmp_1237, out_Tmp_1248));
    call {:si_unique_call 3243} out_dsr := corral_nondet();
    goto anon44_Then;

  anon44_Then:
    assume {:partition} BAND(out_dsr, 8) == 0;
    assume {:nonnull} in_IeeeState_2 != 0;
    assume in_IeeeState_2 > 0;
    out_i_23 := out_i_23 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    call {:si_unique_call 3252} {:si_old_unique_call 1} out_i_23, out_dcr_4, out_Tmp_1229, out_Tmp_1231, out_j, out_Tmp_1234, out_sdv_880, out_Tmp_1237, out_Tmp_1238, out_Tmp_1240, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, out_Tmp_1245, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_Tmp_1248, out_sdv_888, out_Tmp_1249, out_dsr := P4NibbleModeRead_loop_L27(out_i_23, out_dcr_4, out_Tmp_1229, out_Tmp_1231, out_j, out_Tmp_1234, out_sdv_880, out_Tmp_1237, out_Tmp_1238, out_Tmp_1240, out_Tmp_1241, out_Tmp_1242, out_Tmp_1244, out_Tmp_1245, in_nibble, out_sdv_885, out_Tmp_1246, out_sdv_886, out_sdv_887, out_Tmp_1248, out_sdv_888, out_Tmp_1249, out_dsr, in_p_9, in_Controller_9, in_BufferSize_3, in_IeeeState_2);
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble + 1 * 4], 128) == 0;
    out_Tmp_1248 := 128;
    goto L98;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble], 128) == 0;
    out_Tmp_1245 := 8;
    goto L92;
}



procedure {:LoopProcedure} P4NibbleModeRead_loop_L27(in_i_23: int, in_dcr_4: int, in_Tmp_1229: int, in_Tmp_1231: int, in_j: int, in_Tmp_1234: int, in_sdv_880: int, in_Tmp_1237: int, in_Tmp_1238: int, in_Tmp_1240: int, in_Tmp_1241: int, in_Tmp_1242: int, in_Tmp_1244: int, in_Tmp_1245: int, in_nibble: int, in_sdv_885: int, in_Tmp_1246: int, in_sdv_886: int, in_sdv_887: int, in_Tmp_1248: int, in_sdv_888: int, in_Tmp_1249: int, in_dsr: int, in_p_9: int, in_Controller_9: int, in_BufferSize_3: int, in_IeeeState_2: int) returns (out_i_23: int, out_dcr_4: int, out_Tmp_1229: int, out_Tmp_1231: int, out_j: int, out_Tmp_1234: int, out_sdv_880: int, out_Tmp_1237: int, out_Tmp_1238: int, out_Tmp_1240: int, out_Tmp_1241: int, out_Tmp_1242: int, out_Tmp_1244: int, out_Tmp_1245: int, out_sdv_885: int, out_Tmp_1246: int, out_sdv_886: int, out_sdv_887: int, out_Tmp_1248: int, out_sdv_888: int, out_Tmp_1249: int, out_dsr: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_Tmp_1242 == in_Tmp_1242 || out_Tmp_1242 == in_Controller_9;
  free ensures {:va_keep} out_Tmp_1244 == in_Tmp_1244 || out_Tmp_1244 == in_Controller_9;
  free ensures {:va_keep} out_Tmp_1245 == 0 || out_Tmp_1245 == 8 || out_Tmp_1245 == in_Tmp_1245;
  free ensures {:va_keep} out_Tmp_1246 == 1 || out_Tmp_1246 == 0 || out_Tmp_1246 == in_Tmp_1246;
  free ensures {:va_keep} out_sdv_887 == 1 || out_sdv_887 == 0 || out_sdv_887 == in_sdv_887;
  free ensures {:va_keep} out_Tmp_1248 == 0 || out_Tmp_1248 == 128 || out_Tmp_1248 == in_Tmp_1248;
  free ensures {:va_keep} out_sdv_888 == 1 || out_sdv_888 == 0 || out_sdv_888 == in_sdv_888;
  free ensures {:va_keep} out_Tmp_1249 == 1 || out_Tmp_1249 == 0 || out_Tmp_1249 == in_Tmp_1249;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptCheckIfStlProductId_loop_L39(in_i_25: int, in_Tmp_1292: int) returns (out_i_25: int, out_Tmp_1292: int)
{

  entry:
    out_i_25, out_Tmp_1292 := in_i_25, in_Tmp_1292;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:CounterLoop 4} {:Counter "i_25"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} 4 > out_i_25;
    out_Tmp_1292 := out_i_25;
    out_i_25 := out_i_25 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    havoc out_i_25;
    return;
}



procedure {:LoopProcedure} PptCheckIfStlProductId_loop_L39(in_i_25: int, in_Tmp_1292: int) returns (out_i_25: int, out_Tmp_1292: int);
  free ensures {:va_keep} out_Tmp_1292 == in_i_25 || out_Tmp_1292 == in_Tmp_1292;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptInitiate1284_3_loop_L35(in_loopCount: int, in_maxTries_2: int, in_deviceCount2: int, in_deviceCount1: int, in_Extension_52: int) returns (out_loopCount: int, out_deviceCount2: int, out_deviceCount1: int)
{

  entry:
    out_loopCount, out_deviceCount2, out_deviceCount1 := in_loopCount, in_deviceCount2, in_deviceCount1;
    goto L35, exit;

  exit:
    return;

  L35:
    call {:si_unique_call 3253} out_deviceCount1 := Ppt1284_3AssignAddress(in_Extension_52);
    call {:si_unique_call 3254} out_deviceCount2 := Ppt1284_3AssignAddress(in_Extension_52);
    goto anon5_Else;

  anon5_Else:
    assume {:partition} out_deviceCount1 != out_deviceCount2;
    out_loopCount := out_loopCount + 1;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} in_maxTries_2 > out_loopCount;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 3255} {:si_old_unique_call 1} out_loopCount, out_deviceCount2, out_deviceCount1 := PptInitiate1284_3_loop_L35(out_loopCount, in_maxTries_2, out_deviceCount2, out_deviceCount1, in_Extension_52);
    return;
}



procedure {:LoopProcedure} PptInitiate1284_3_loop_L35(in_loopCount: int, in_maxTries_2: int, in_deviceCount2: int, in_deviceCount1: int, in_Extension_52: int) returns (out_loopCount: int, out_deviceCount2: int, out_deviceCount1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptDeselectDevice_loop_L31(in_i_26: int, in_success_1: int, in_fdx_25: int) returns (out_i_26: int, out_success_1: int)
{
  var vslice_dummy_var_293: int;

  entry:
    out_i_26, out_success_1 := in_i_26, in_success_1;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon28_Else;

  anon28_Else:
    assume {:partition} PptDot3Retries > out_i_26;
    goto anon30_Else;

  anon30_Else:
    assume {:partition} out_success_1 == 0;
    assume {:nonnull} in_fdx_25 != 0;
    assume in_fdx_25 > 0;
    havoc vslice_dummy_var_293;
    call {:si_unique_call 3256} out_success_1 := PptSend1284_3Command(vslice_dummy_var_293, 48);
    out_i_26 := out_i_26 + 1;
    goto anon30_Else_dummy;

  anon30_Else_dummy:
    call {:si_unique_call 3257} {:si_old_unique_call 1} out_i_26, out_success_1 := PptDeselectDevice_loop_L31(out_i_26, out_success_1, in_fdx_25);
    return;
}



procedure {:LoopProcedure} PptDeselectDevice_loop_L31(in_i_26: int, in_success_1: int, in_fdx_25: int) returns (out_i_26: int, out_success_1: int);
  modifies alloc;
  free ensures {:va_keep} out_success_1 == 1 || out_success_1 == 0 || out_success_1 == in_success_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptSend1284_3Command_loop_L114(in_Tmp_1327: int, in_ii_1: int, in_sdv_961: int) returns (out_Tmp_1327: int, out_ii_1: int, out_sdv_961: int)
{

  entry:
    out_Tmp_1327, out_ii_1, out_sdv_961 := in_Tmp_1327, in_ii_1, in_sdv_961;
    goto L114, exit;

  exit:
    return;

  L114:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon32_Then;

  anon32_Then:
    assume {:partition} 0 < out_ii_1;
    call {:si_unique_call 3258} out_sdv_961 := corral_nondet();
    out_Tmp_1327 := BAND(out_sdv_961, 8);
    goto anon39_Then;

  anon39_Then:
    assume {:partition} out_Tmp_1327 != 8;
    out_ii_1 := out_ii_1 - 1;
    goto anon39_Then_dummy;

  anon39_Then_dummy:
    havoc out_ii_1;
    return;
}



procedure {:LoopProcedure} PptSend1284_3Command_loop_L114(in_Tmp_1327: int, in_ii_1: int, in_sdv_961: int) returns (out_Tmp_1327: int, out_ii_1: int, out_sdv_961: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptSend1284_3Command_loop_L135(in_ii_1: int, in_sdv_956: int, in_Tmp_1348: int) returns (out_ii_1: int, out_sdv_956: int, out_Tmp_1348: int)
{

  entry:
    out_ii_1, out_sdv_956, out_Tmp_1348 := in_ii_1, in_sdv_956, in_Tmp_1348;
    goto L135, exit;

  exit:
    return;

  L135:
    assume {:CounterLoop 25000} {:Counter "ii_1"} true;
    goto anon33_Else;

  anon33_Else:
    assume {:partition} out_ii_1 > 0;
    call {:si_unique_call 3259} out_sdv_956 := corral_nondet();
    out_Tmp_1348 := BAND(out_sdv_956, 8);
    goto anon38_Then;

  anon38_Then:
    assume {:partition} out_Tmp_1348 == 8;
    out_ii_1 := out_ii_1 - 1;
    goto anon38_Then_dummy;

  anon38_Then_dummy:
    havoc out_ii_1;
    return;
}



procedure {:LoopProcedure} PptSend1284_3Command_loop_L135(in_ii_1: int, in_sdv_956: int, in_Tmp_1348: int) returns (out_ii_1: int, out_sdv_956: int, out_Tmp_1348: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptSend1284_3Command_loop_L35(in_i_27: int, in_Tmp_1333: int) returns (out_i_27: int, out_Tmp_1333: int)
{

  entry:
    out_i_27, out_Tmp_1333 := in_i_27, in_Tmp_1333;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_27"} true;
    goto anon27_Else;

  anon27_Else:
    assume {:partition} 4 > out_i_27;
    out_Tmp_1333 := out_i_27;
    out_i_27 := out_i_27 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    havoc out_i_27;
    return;
}



procedure {:LoopProcedure} PptSend1284_3Command_loop_L35(in_i_27: int, in_Tmp_1333: int) returns (out_i_27: int, out_Tmp_1333: int);
  free ensures {:va_keep} out_Tmp_1333 == in_i_27 || out_Tmp_1333 == in_Tmp_1333;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation Ppt1284_3AssignAddress_loop_L127(in_number: int, in_bStlNon1284_1: int, in_bStlNon1284_2: int, in_Tmp_1356: int, in_Tmp_1360: int, in_sdv_966: int, in_idx_5: int, in_sdv_971: int, in_DeviceExtension_1: int) returns (out_bStlNon1284_1: int, out_Tmp_1356: int, out_Tmp_1360: int, out_sdv_966: int, out_idx_5: int, out_sdv_971: int)
{

  entry:
    out_bStlNon1284_1, out_Tmp_1356, out_Tmp_1360, out_sdv_966, out_idx_5, out_sdv_971 := in_bStlNon1284_1, in_Tmp_1356, in_Tmp_1360, in_sdv_966, in_idx_5, in_sdv_971;
    goto L127, exit;

  exit:
    return;

  L127:
    goto anon32_Else;

  anon32_Else:
    assume {:partition} in_number > out_idx_5;
    out_Tmp_1360 := out_idx_5;
    call {:si_unique_call 3261} out_sdv_971 := PptCheckIfStl1284_3(in_DeviceExtension_1, out_Tmp_1360, in_bStlNon1284_2);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} 1 == out_sdv_971;
    goto L136;

  L136:
    out_idx_5 := out_idx_5 + 1;
    goto L136_dummy;

  L136_dummy:
    call {:si_unique_call 3262} {:si_old_unique_call 1} out_bStlNon1284_1, out_Tmp_1356, out_Tmp_1360, out_sdv_966, out_idx_5, out_sdv_971 := Ppt1284_3AssignAddress_loop_L127(in_number, out_bStlNon1284_1, in_bStlNon1284_2, out_Tmp_1356, out_Tmp_1360, out_sdv_966, out_idx_5, out_sdv_971, in_DeviceExtension_1);
    return;

  anon34_Then:
    assume {:partition} 1 != out_sdv_971;
    goto anon35_Else;

  anon35_Else:
    assume {:partition} 1 == in_bStlNon1284_2;
    out_Tmp_1356 := out_idx_5;
    call {:si_unique_call 3260} out_sdv_966 := PptCheckIfStlProductId(in_DeviceExtension_1, out_Tmp_1356);
    goto anon36_Else;

  anon36_Else:
    assume {:partition} 1 == out_sdv_966;
    out_bStlNon1284_1 := 1;
    goto L136;
}



procedure {:LoopProcedure} Ppt1284_3AssignAddress_loop_L127(in_number: int, in_bStlNon1284_1: int, in_bStlNon1284_2: int, in_Tmp_1356: int, in_Tmp_1360: int, in_sdv_966: int, in_idx_5: int, in_sdv_971: int, in_DeviceExtension_1: int) returns (out_bStlNon1284_1: int, out_Tmp_1356: int, out_Tmp_1360: int, out_sdv_966: int, out_idx_5: int, out_sdv_971: int);
  free ensures {:va_keep} out_bStlNon1284_1 == 1 || out_bStlNon1284_1 == in_bStlNon1284_1;
  free ensures {:va_keep} out_sdv_966 == 0 || out_sdv_966 == 1 || out_sdv_966 == in_sdv_966;
  free ensures {:va_keep} out_sdv_971 == 0 || out_sdv_971 == 1 || out_sdv_971 == in_sdv_971;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation Ppt1284_3AssignAddress_loop_L82(in_number: int, in_sdv_969: int, in_lastdevice: int, in_newvalue_5: int) returns (out_number: int, out_sdv_969: int, out_lastdevice: int)
{

  entry:
    out_number, out_sdv_969, out_lastdevice := in_number, in_sdv_969, in_lastdevice;
    goto L82, exit;

  exit:
    return;

  L82:
    goto anon28_Else;

  anon28_Else:
    assume {:partition} 4 > out_number;
    goto anon29_Else;

  anon29_Else:
    assume {:partition} out_lastdevice == 0;
    out_number := out_number + 1;
    call {:si_unique_call 3263} out_sdv_969 := corral_nondet();
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(out_sdv_969, 128) != 0;
    goto L97;

  L97:
    goto L97_dummy;

  L97_dummy:
    havoc out_number;
    return;

  anon30_Then:
    assume {:partition} BAND(out_sdv_969, 128) == 0;
    out_lastdevice := 1;
    goto L97;
}



procedure {:LoopProcedure} Ppt1284_3AssignAddress_loop_L82(in_number: int, in_sdv_969: int, in_lastdevice: int, in_newvalue_5: int) returns (out_number: int, out_sdv_969: int, out_lastdevice: int);
  free ensures {:va_keep} out_lastdevice == 1 || out_lastdevice == in_lastdevice;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation Ppt1284_3AssignAddress_loop_L35(in_i_28: int, in_Tmp_1359: int) returns (out_i_28: int, out_Tmp_1359: int)
{

  entry:
    out_i_28, out_Tmp_1359 := in_i_28, in_Tmp_1359;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_28"} true;
    goto anon27_Else;

  anon27_Else:
    assume {:partition} 4 > out_i_28;
    out_Tmp_1359 := out_i_28;
    out_i_28 := out_i_28 + 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    havoc out_i_28;
    return;
}



procedure {:LoopProcedure} Ppt1284_3AssignAddress_loop_L35(in_i_28: int, in_Tmp_1359: int) returns (out_i_28: int, out_Tmp_1359: int);
  free ensures {:va_keep} out_Tmp_1359 == in_i_28 || out_Tmp_1359 == in_Tmp_1359;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptCheckIfNon1284_3Present_loop_L33(in_i_29: int, in_Tmp_1375: int) returns (out_i_29: int, out_Tmp_1375: int)
{

  entry:
    out_i_29, out_Tmp_1375 := in_i_29, in_Tmp_1375;
    goto L33, exit;

  exit:
    return;

  L33:
    assume {:CounterLoop 4} {:Counter "i_29"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 4 > out_i_29;
    out_Tmp_1375 := out_i_29;
    out_i_29 := out_i_29 + 1;
    goto anon11_Else_dummy;

  anon11_Else_dummy:
    havoc out_i_29;
    return;
}



procedure {:LoopProcedure} PptCheckIfNon1284_3Present_loop_L33(in_i_29: int, in_Tmp_1375: int) returns (out_i_29: int, out_Tmp_1375: int);
  free ensures {:va_keep} out_Tmp_1375 == in_i_29 || out_Tmp_1375 == in_Tmp_1375;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptCheckIfStl1284_3_loop_L111(in_ucReadPattern_1: int, in_ucReadValue_1: int, in_ucExpectedPattern_1: int, in_ulDaisyIndex_4: int) returns (out_ucReadPattern_1: int, out_ucReadValue_1: int, out_ucExpectedPattern_1: int)
{

  entry:
    out_ucReadPattern_1, out_ucReadValue_1, out_ucExpectedPattern_1 := in_ucReadPattern_1, in_ucReadValue_1, in_ucExpectedPattern_1;
    goto L111, exit;

  exit:
    return;

  L111:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_ucExpectedPattern_1 != 0;
    call {:si_unique_call 3264} out_ucReadValue_1 := corral_nondet();
    call {:si_unique_call 3265} out_ucReadPattern_1 := corral_nondet();
    out_ucReadPattern_1 := BOR(out_ucReadPattern_1, BAND(out_ucReadValue_1, 128));
    goto anon24_Then;

  anon24_Then:
    assume {:partition} out_ucReadPattern_1 == out_ucExpectedPattern_1;
    out_ucExpectedPattern_1 := out_ucExpectedPattern_1 - 16;
    goto anon24_Then_dummy;

  anon24_Then_dummy:
    call {:si_unique_call 3266} {:si_old_unique_call 1} out_ucReadPattern_1, out_ucReadValue_1, out_ucExpectedPattern_1 := PptCheckIfStl1284_3_loop_L111(out_ucReadPattern_1, out_ucReadValue_1, out_ucExpectedPattern_1, in_ulDaisyIndex_4);
    return;
}



procedure {:LoopProcedure} PptCheckIfStl1284_3_loop_L111(in_ucReadPattern_1: int, in_ucReadValue_1: int, in_ucExpectedPattern_1: int, in_ulDaisyIndex_4: int) returns (out_ucReadPattern_1: int, out_ucReadValue_1: int, out_ucExpectedPattern_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptCheckIfStl1284_3_loop_L35(in_i_30: int, in_Tmp_1392: int) returns (out_i_30: int, out_Tmp_1392: int)
{

  entry:
    out_i_30, out_Tmp_1392 := in_i_30, in_Tmp_1392;
    goto L35, exit;

  exit:
    return;

  L35:
    assume {:CounterLoop 4} {:Counter "i_30"} true;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 4 > out_i_30;
    out_Tmp_1392 := out_i_30;
    out_i_30 := out_i_30 + 1;
    goto anon17_Else_dummy;

  anon17_Else_dummy:
    havoc out_i_30;
    return;
}



procedure {:LoopProcedure} PptCheckIfStl1284_3_loop_L35(in_i_30: int, in_Tmp_1392: int) returns (out_i_30: int, out_Tmp_1392: int);
  free ensures {:va_keep} out_Tmp_1392 == in_i_30 || out_Tmp_1392 == in_Tmp_1392;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptLegacyZipSetDiskMode_loop_L5(in_i_31: int, in_Tmp_1450: int, in_Tmp_1451: int, in_Controller_10: int) returns (out_i_31: int, out_Tmp_1450: int, out_Tmp_1451: int)
{

  entry:
    out_i_31, out_Tmp_1450, out_Tmp_1451 := in_i_31, in_Tmp_1450, in_Tmp_1451;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:CounterLoop 3} {:Counter "i_31"} true;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} 3 > out_i_31;
    out_Tmp_1451 := out_i_31;
    havoc out_Tmp_1450;
    call {:si_unique_call 3267} PptLegacyZipClockDiskModeByte(in_Controller_10, out_Tmp_1450);
    out_i_31 := out_i_31 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_i_31;
    return;
}



procedure {:LoopProcedure} PptLegacyZipSetDiskMode_loop_L5(in_i_31: int, in_Tmp_1450: int, in_Tmp_1451: int, in_Controller_10: int) returns (out_i_31: int, out_Tmp_1450: int, out_Tmp_1451: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1451 == in_i_31 || out_Tmp_1451 == in_Tmp_1451;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P5DeselectLegacyZip_loop_L5(in_i_33: int, in_Tmp_1457: int, in_Tmp_1459: int, in_Controller_12: int) returns (out_i_33: int, out_Tmp_1457: int, out_Tmp_1459: int)
{

  entry:
    out_i_33, out_Tmp_1457, out_Tmp_1459 := in_i_33, in_Tmp_1457, in_Tmp_1459;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:CounterLoop 3} {:Counter "i_33"} true;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} 3 > out_i_33;
    out_Tmp_1459 := out_i_33;
    havoc out_Tmp_1457;
    call {:si_unique_call 3268} PptLegacyZipClockPrtModeByte(in_Controller_12, out_Tmp_1457);
    out_i_33 := out_i_33 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_i_33;
    return;
}



procedure {:LoopProcedure} P5DeselectLegacyZip_loop_L5(in_i_33: int, in_Tmp_1457: int, in_Tmp_1459: int, in_Controller_12: int) returns (out_i_33: int, out_Tmp_1457: int, out_Tmp_1459: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1459 == in_i_33 || out_Tmp_1459 == in_Tmp_1459;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParNibbleModeRead_loop_L32(in_Tmp_1497: int, in_dcr_5: int, in_Tmp_1505: int, in_j_1: int, in_sdv_1012: int, in_Tmp_1509: int, in_Controller_19: int, in_nibble_1: int, in_sdv_1017: int, in_sdv_1018: int, in_sdv_1019: int, in_Tmp_1518: int, in_sdv_1020: int, in_Tmp_1522: int, in_Tmp_1523: int, in_Pdx_34: int) returns (out_Tmp_1497: int, out_dcr_5: int, out_Tmp_1505: int, out_j_1: int, out_sdv_1012: int, out_Tmp_1509: int, out_sdv_1017: int, out_sdv_1018: int, out_sdv_1019: int, out_Tmp_1518: int, out_sdv_1020: int, out_Tmp_1522: int, out_Tmp_1523: int)
{

  entry:
    out_Tmp_1497, out_dcr_5, out_Tmp_1505, out_j_1, out_sdv_1012, out_Tmp_1509, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_Tmp_1522, out_Tmp_1523 := in_Tmp_1497, in_dcr_5, in_Tmp_1505, in_j_1, in_sdv_1012, in_Tmp_1509, in_sdv_1017, in_sdv_1018, in_sdv_1019, in_Tmp_1518, in_sdv_1020, in_Tmp_1522, in_Tmp_1523;
    goto L32, exit;

  exit:
    return;

  L32:
    assume {:CounterLoop 2} {:Counter "j_1"} true;
    goto anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j_1;
    out_dcr_5 := BOR(out_dcr_5, 2);
    assume {:nonnull} in_Pdx_34 != 0;
    assume in_Pdx_34 > 0;
    call {:si_unique_call 3273} out_sdv_1017 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_1017, 64) != 0;
    out_Tmp_1518 := in_Controller_19;
    call {:si_unique_call 3272} out_sdv_1018 := CheckPort(out_Tmp_1518, 64, 0, 35);
    out_Tmp_1505 := out_sdv_1018;
    goto L50;

  L50:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_1505 != 0;
    call {:si_unique_call 3270} out_sdv_1019 := corral_nondet();
    out_Tmp_1497 := out_j_1;
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    Mem_T.INT4[in_nibble_1 + out_Tmp_1497 * 4] := out_sdv_1019;
    assume {:nonnull} in_Pdx_34 != 0;
    assume in_Pdx_34 > 0;
    out_dcr_5 := BAND(out_dcr_5, BNOT(2));
    assume {:nonnull} in_Pdx_34 != 0;
    assume in_Pdx_34 > 0;
    call {:si_unique_call 3271} out_sdv_1012 := corral_nondet();
    out_Tmp_1523 := BAND(out_sdv_1012, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_1523 == 64;
    out_Tmp_1522 := 1;
    goto L70;

  L70:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_1522 != 0;
    out_j_1 := out_j_1 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 3274} {:si_old_unique_call 1} out_Tmp_1497, out_dcr_5, out_Tmp_1505, out_j_1, out_sdv_1012, out_Tmp_1509, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_Tmp_1522, out_Tmp_1523 := ParNibbleModeRead_loop_L32(out_Tmp_1497, out_dcr_5, out_Tmp_1505, out_j_1, out_sdv_1012, out_Tmp_1509, in_Controller_19, in_nibble_1, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_Tmp_1522, out_Tmp_1523, in_Pdx_34);
    return;

  anon52_Then:
    assume {:partition} out_Tmp_1523 != 64;
    out_Tmp_1509 := in_Controller_19;
    call {:si_unique_call 3269} out_sdv_1020 := CheckPort(out_Tmp_1509, 64, 64, 35);
    out_Tmp_1522 := out_sdv_1020;
    goto L70;

  anon40_Then:
    assume {:partition} BAND(out_sdv_1017, 64) == 0;
    out_Tmp_1505 := 1;
    goto L50;
}



procedure {:LoopProcedure} ParNibbleModeRead_loop_L32(in_Tmp_1497: int, in_dcr_5: int, in_Tmp_1505: int, in_j_1: int, in_sdv_1012: int, in_Tmp_1509: int, in_Controller_19: int, in_nibble_1: int, in_sdv_1017: int, in_sdv_1018: int, in_sdv_1019: int, in_Tmp_1518: int, in_sdv_1020: int, in_Tmp_1522: int, in_Tmp_1523: int, in_Pdx_34: int) returns (out_Tmp_1497: int, out_dcr_5: int, out_Tmp_1505: int, out_j_1: int, out_sdv_1012: int, out_Tmp_1509: int, out_sdv_1017: int, out_sdv_1018: int, out_sdv_1019: int, out_Tmp_1518: int, out_sdv_1020: int, out_Tmp_1522: int, out_Tmp_1523: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1505 == 1 || out_Tmp_1505 == 0 || out_Tmp_1505 == in_Tmp_1505;
  free ensures {:va_keep} out_Tmp_1509 == in_Tmp_1509 || out_Tmp_1509 == in_Controller_19;
  free ensures {:va_keep} out_sdv_1018 == 1 || out_sdv_1018 == 0 || out_sdv_1018 == in_sdv_1018;
  free ensures {:va_keep} out_Tmp_1518 == in_Tmp_1518 || out_Tmp_1518 == in_Controller_19;
  free ensures {:va_keep} out_sdv_1020 == 1 || out_sdv_1020 == 0 || out_sdv_1020 == in_sdv_1020;
  free ensures {:va_keep} out_Tmp_1522 == 1 || out_Tmp_1522 == 0 || out_Tmp_1522 == in_Tmp_1522;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParNibbleModeRead_loop_L29(in_i_34: int, in_Tmp_1497: int, in_Tmp_1498: int, in_Tmp_1499: int, in_Tmp_1500: int, in_Tmp_1501: int, in_Tmp_1502: int, in_Tmp_1503: int, in_dcr_5: int, in_Tmp_1505: int, in_Tmp_1506: int, in_j_1: int, in_sdv_1012: int, in_Tmp_1509: int, in_Controller_19: int, in_nibble_1: int, in_sdv_1017: int, in_sdv_1018: int, in_sdv_1019: int, in_Tmp_1518: int, in_sdv_1020: int, in_dsr_1: int, in_Tmp_1522: int, in_p_10: int, in_Tmp_1523: int, in_Pdx_34: int, in_BufferSize_4: int) returns (out_i_34: int, out_Tmp_1497: int, out_Tmp_1498: int, out_Tmp_1499: int, out_Tmp_1500: int, out_Tmp_1501: int, out_Tmp_1502: int, out_Tmp_1503: int, out_dcr_5: int, out_Tmp_1505: int, out_Tmp_1506: int, out_j_1: int, out_sdv_1012: int, out_Tmp_1509: int, out_sdv_1017: int, out_sdv_1018: int, out_sdv_1019: int, out_Tmp_1518: int, out_sdv_1020: int, out_dsr_1: int, out_Tmp_1522: int, out_Tmp_1523: int)
{

  entry:
    out_i_34, out_Tmp_1497, out_Tmp_1498, out_Tmp_1499, out_Tmp_1500, out_Tmp_1501, out_Tmp_1502, out_Tmp_1503, out_dcr_5, out_Tmp_1505, out_Tmp_1506, out_j_1, out_sdv_1012, out_Tmp_1509, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_dsr_1, out_Tmp_1522, out_Tmp_1523 := in_i_34, in_Tmp_1497, in_Tmp_1498, in_Tmp_1499, in_Tmp_1500, in_Tmp_1501, in_Tmp_1502, in_Tmp_1503, in_dcr_5, in_Tmp_1505, in_Tmp_1506, in_j_1, in_sdv_1012, in_Tmp_1509, in_sdv_1017, in_sdv_1018, in_sdv_1019, in_Tmp_1518, in_sdv_1020, in_dsr_1, in_Tmp_1522, in_Tmp_1523;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} in_BufferSize_4 > out_i_34;
    out_j_1 := 0;
    goto L32;

  L32:
    call {:si_unique_call 3278} out_Tmp_1497, out_dcr_5, out_Tmp_1505, out_j_1, out_sdv_1012, out_Tmp_1509, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_Tmp_1522, out_Tmp_1523 := ParNibbleModeRead_loop_L32(out_Tmp_1497, out_dcr_5, out_Tmp_1505, out_j_1, out_sdv_1012, out_Tmp_1509, in_Controller_19, in_nibble_1, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_Tmp_1522, out_Tmp_1523, in_Pdx_34);
    goto L32_last;

  L32_last:
    assume {:CounterLoop 2} {:Counter "j_1"} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} 2 > out_j_1;
    out_dcr_5 := BOR(out_dcr_5, 2);
    assume {:nonnull} in_Pdx_34 != 0;
    assume in_Pdx_34 > 0;
    call {:si_unique_call 3283} out_sdv_1017 := corral_nondet();
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(out_sdv_1017, 64) != 0;
    out_Tmp_1518 := in_Controller_19;
    call {:si_unique_call 3282} out_sdv_1018 := CheckPort(out_Tmp_1518, 64, 0, 35);
    out_Tmp_1505 := out_sdv_1018;
    goto L50;

  L50:
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_Tmp_1505 != 0;
    call {:si_unique_call 3280} out_sdv_1019 := corral_nondet();
    out_Tmp_1497 := out_j_1;
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    Mem_T.INT4[in_nibble_1 + out_Tmp_1497 * 4] := out_sdv_1019;
    assume {:nonnull} in_Pdx_34 != 0;
    assume in_Pdx_34 > 0;
    out_dcr_5 := BAND(out_dcr_5, BNOT(2));
    assume {:nonnull} in_Pdx_34 != 0;
    assume in_Pdx_34 > 0;
    call {:si_unique_call 3281} out_sdv_1012 := corral_nondet();
    out_Tmp_1523 := BAND(out_sdv_1012, 64);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} out_Tmp_1523 == 64;
    out_Tmp_1522 := 1;
    goto L70;

  L70:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_Tmp_1522 != 0;
    out_j_1 := out_j_1 + 1;
    assume false;
    return;

  anon52_Then:
    assume {:partition} out_Tmp_1523 != 64;
    out_Tmp_1509 := in_Controller_19;
    call {:si_unique_call 3279} out_sdv_1020 := CheckPort(out_Tmp_1509, 64, 64, 35);
    out_Tmp_1522 := out_sdv_1020;
    goto L70;

  anon40_Then:
    assume {:partition} BAND(out_sdv_1017, 64) == 0;
    out_Tmp_1505 := 1;
    goto L50;

  anon39_Then:
    assume {:partition} out_j_1 >= 2;
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    call {:si_unique_call 3277} out_Tmp_1500 := corral_nondet();
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1], 128) != 0;
    out_Tmp_1501 := 0;
    goto L95;

  L95:
    out_Tmp_1498 := out_i_34;
    assume {:nonnull} in_p_10 != 0;
    assume in_p_10 > 0;
    Mem_T.INT4[in_p_10 + out_Tmp_1498 * 4] := BOR(out_Tmp_1500, out_Tmp_1501);
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    call {:si_unique_call 3276} out_Tmp_1499 := corral_nondet();
    assume {:nonnull} in_nibble_1 != 0;
    assume in_nibble_1 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1 + 1 * 4], 128) != 0;
    out_Tmp_1506 := 0;
    goto L101;

  L101:
    out_Tmp_1503 := out_i_34;
    out_Tmp_1502 := out_i_34;
    assume {:nonnull} in_p_10 != 0;
    assume in_p_10 > 0;
    Mem_T.INT4[in_p_10 + out_Tmp_1503 * 4] := BOR(Mem_T.INT4[in_p_10 + out_Tmp_1502 * 4], BOR(out_Tmp_1499, out_Tmp_1506));
    call {:si_unique_call 3275} out_dsr_1 := corral_nondet();
    goto anon44_Then;

  anon44_Then:
    assume {:partition} BAND(out_dsr_1, 8) == 0;
    assume {:nonnull} in_Pdx_34 != 0;
    assume in_Pdx_34 > 0;
    out_i_34 := out_i_34 + 1;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    call {:si_unique_call 3284} {:si_old_unique_call 1} out_i_34, out_Tmp_1497, out_Tmp_1498, out_Tmp_1499, out_Tmp_1500, out_Tmp_1501, out_Tmp_1502, out_Tmp_1503, out_dcr_5, out_Tmp_1505, out_Tmp_1506, out_j_1, out_sdv_1012, out_Tmp_1509, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_dsr_1, out_Tmp_1522, out_Tmp_1523 := ParNibbleModeRead_loop_L29(out_i_34, out_Tmp_1497, out_Tmp_1498, out_Tmp_1499, out_Tmp_1500, out_Tmp_1501, out_Tmp_1502, out_Tmp_1503, out_dcr_5, out_Tmp_1505, out_Tmp_1506, out_j_1, out_sdv_1012, out_Tmp_1509, in_Controller_19, in_nibble_1, out_sdv_1017, out_sdv_1018, out_sdv_1019, out_Tmp_1518, out_sdv_1020, out_dsr_1, out_Tmp_1522, in_p_10, out_Tmp_1523, in_Pdx_34, in_BufferSize_4);
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1 + 1 * 4], 128) == 0;
    out_Tmp_1506 := 128;
    goto L101;

  anon53_Then:
    assume {:partition} BAND(Mem_T.INT4[in_nibble_1], 128) == 0;
    out_Tmp_1501 := 8;
    goto L95;
}



procedure {:LoopProcedure} ParNibbleModeRead_loop_L29(in_i_34: int, in_Tmp_1497: int, in_Tmp_1498: int, in_Tmp_1499: int, in_Tmp_1500: int, in_Tmp_1501: int, in_Tmp_1502: int, in_Tmp_1503: int, in_dcr_5: int, in_Tmp_1505: int, in_Tmp_1506: int, in_j_1: int, in_sdv_1012: int, in_Tmp_1509: int, in_Controller_19: int, in_nibble_1: int, in_sdv_1017: int, in_sdv_1018: int, in_sdv_1019: int, in_Tmp_1518: int, in_sdv_1020: int, in_dsr_1: int, in_Tmp_1522: int, in_p_10: int, in_Tmp_1523: int, in_Pdx_34: int, in_BufferSize_4: int) returns (out_i_34: int, out_Tmp_1497: int, out_Tmp_1498: int, out_Tmp_1499: int, out_Tmp_1500: int, out_Tmp_1501: int, out_Tmp_1502: int, out_Tmp_1503: int, out_dcr_5: int, out_Tmp_1505: int, out_Tmp_1506: int, out_j_1: int, out_sdv_1012: int, out_Tmp_1509: int, out_sdv_1017: int, out_sdv_1018: int, out_sdv_1019: int, out_Tmp_1518: int, out_sdv_1020: int, out_dsr_1: int, out_Tmp_1522: int, out_Tmp_1523: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_Tmp_1501 == 0 || out_Tmp_1501 == 8 || out_Tmp_1501 == in_Tmp_1501;
  free ensures {:va_keep} out_Tmp_1505 == 1 || out_Tmp_1505 == 0 || out_Tmp_1505 == in_Tmp_1505;
  free ensures {:va_keep} out_Tmp_1506 == 0 || out_Tmp_1506 == 128 || out_Tmp_1506 == in_Tmp_1506;
  free ensures {:va_keep} out_Tmp_1509 == in_Tmp_1509 || out_Tmp_1509 == in_Controller_19;
  free ensures {:va_keep} out_sdv_1018 == 1 || out_sdv_1018 == 0 || out_sdv_1018 == in_sdv_1018;
  free ensures {:va_keep} out_Tmp_1518 == in_Tmp_1518 || out_Tmp_1518 == in_Controller_19;
  free ensures {:va_keep} out_sdv_1020 == 1 || out_sdv_1020 == 0 || out_sdv_1020 == in_sdv_1020;
  free ensures {:va_keep} out_Tmp_1522 == 1 || out_Tmp_1522 == 0 || out_Tmp_1522 == in_Tmp_1522;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 5} ParInitializeExtension1284Info_loop_L42(in_i_35: int, in_Tmp_1538: int, in_Tmp_1541: int, in_Pdx_38: int) returns (out_i_35: int, out_Tmp_1538: int, out_Tmp_1541: int)
{

  entry:
    out_i_35, out_Tmp_1538, out_Tmp_1541 := in_i_35, in_Tmp_1538, in_Tmp_1541;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:CounterLoop 5} {:Counter "i_35"} true;
    goto anon40_Else;

  anon40_Else:
    assume {:partition} 5 > out_i_35;
    out_Tmp_1538 := out_i_35;
    assume {:nonnull} in_Pdx_38 != 0;
    assume in_Pdx_38 > 0;
    havoc out_Tmp_1541;
    assume {:nonnull} out_Tmp_1541 != 0;
    assume out_Tmp_1541 > 0;
    Mem_T.INT4[out_Tmp_1541 + out_Tmp_1538 * 4] := 0;
    out_i_35 := out_i_35 + 1;
    goto anon40_Else_dummy;

  anon40_Else_dummy:
    call {:si_unique_call 3285} {:si_old_unique_call 1} out_i_35, out_Tmp_1538, out_Tmp_1541 := ParInitializeExtension1284Info_loop_L42(out_i_35, out_Tmp_1538, out_Tmp_1541, in_Pdx_38);
    return;
}



procedure {:LoopProcedure} ParInitializeExtension1284Info_loop_L42(in_i_35: int, in_Tmp_1538: int, in_Tmp_1541: int, in_Pdx_38: int) returns (out_i_35: int, out_Tmp_1538: int, out_Tmp_1541: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation StringCountValues_loop_L9(in_cnt: int, in_lpKey: int, in_delimeter: int) returns (out_cnt: int)
{

  entry:
    out_cnt := in_cnt;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:nonnull} in_lpKey != 0;
    assume in_lpKey > 0;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.INT4[in_lpKey] != 0;
    assume {:nonnull} in_lpKey != 0;
    assume in_lpKey > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[in_lpKey] == in_delimeter;
    out_cnt := out_cnt + 1;
    goto L12;

  L12:
    goto L12_dummy;

  L12_dummy:
    havoc out_cnt;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[in_lpKey] != in_delimeter;
    goto L12;
}



procedure {:LoopProcedure} StringCountValues_loop_L9(in_cnt: int, in_lpKey: int, in_delimeter: int) returns (out_cnt: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation StringSubst_loop_L5(in_Tmp_1546: int, in_iCnt: int, in_lpS: int, in_chTargetChar: int, in_chReplacementChar: int, in_cbS: int) returns (out_Tmp_1546: int, out_iCnt: int)
{

  entry:
    out_Tmp_1546, out_iCnt := in_Tmp_1546, in_iCnt;
    goto L5, exit;

  exit:
    return;

  L5:
    goto anon7_Else;

  anon7_Else:
    assume {:partition} in_lpS != 0;
    out_Tmp_1546 := out_iCnt;
    out_iCnt := out_iCnt + 1;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} in_cbS > out_Tmp_1546;
    assume {:nonnull} in_lpS != 0;
    assume in_lpS > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[in_lpS] == in_chTargetChar;
    assume {:nonnull} in_lpS != 0;
    assume in_lpS > 0;
    Mem_T.INT4[in_lpS] := in_chReplacementChar;
    goto anon8_Else_dummy;

  anon8_Else_dummy:
    goto L_BAF_5;

  L_BAF_5:
    havoc out_iCnt;
    return;

  anon8_Then:
    assume {:partition} Mem_T.INT4[in_lpS] != in_chTargetChar;
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    goto L_BAF_5;
}



procedure {:LoopProcedure} StringSubst_loop_L5(in_Tmp_1546: int, in_iCnt: int, in_lpS: int, in_chTargetChar: int, in_chReplacementChar: int, in_cbS: int) returns (out_Tmp_1546: int, out_iCnt: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1546 == in_Tmp_1546 || out_Tmp_1546 == in_iCnt;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation GetCheckSum_loop_L12(in_i_36: int, in_crc: int, in_Tmp_1566: int, in_tmp: int, in_Len: int, in_vslice_dummy_var_440: int) returns (out_i_36: int, out_crc: int, out_Tmp_1566: int, out_tmp: int, out_vslice_dummy_var_440: int)
{

  entry:
    out_i_36, out_crc, out_Tmp_1566, out_tmp, out_vslice_dummy_var_440 := in_i_36, in_crc, in_Tmp_1566, in_tmp, in_vslice_dummy_var_440;
    goto L12, exit;

  exit:
    return;

  L12:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_Len > out_i_36;
    call {:si_unique_call 3286} out_tmp := corral_nondet();
    out_Tmp_1566 := BAND(out_tmp, BOR(BOR(BOR(1, 2), 4), 8));
    call {:si_unique_call 3287} out_vslice_dummy_var_440 := corral_nondet();
    call {:si_unique_call 3288} out_crc := corral_nondet();
    out_i_36 := out_i_36 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_i_36;
    return;
}



procedure {:LoopProcedure} GetCheckSum_loop_L12(in_i_36: int, in_crc: int, in_Tmp_1566: int, in_tmp: int, in_Len: int, in_vslice_dummy_var_440: int) returns (out_i_36: int, out_crc: int, out_Tmp_1566: int, out_tmp: int, out_vslice_dummy_var_440: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParPnpFindDeviceIdKeys_loop_L22(in_lpKey_1: int)
{

  entry:
    goto L22, exit;

  exit:
    return;

  L22:
    assume {:nonnull} in_lpKey_1 != 0;
    assume in_lpKey_1 > 0;
    goto anon94_Else;

  anon94_Else:
    assume {:partition} Mem_T.INT4[in_lpKey_1] == 32;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    call {:si_unique_call 3289} {:si_old_unique_call 1} ParPnpFindDeviceIdKeys_loop_L22(in_lpKey_1);
    return;
}



procedure {:LoopProcedure} ParPnpFindDeviceIdKeys_loop_L22(in_lpKey_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParPnpFindDeviceIdKeys_loop_L21(in_Tmp_1570: int, in_Tmp_1571: int, in_sdv_1052: int, in_sdv_1053: int, in_Tmp_1572: int, in_sdv_1055: int, in_sdv_1056: int, in_Tmp_1574: int, in_Tmp_1575: int, in_Tmp_1576: int, in_lpKey_1: int, in_Tmp_1577: int, in_sdv_1059: int, in_Tmp_1579: int, in_Tmp_1580: int, in_sdv_1062: int, in_Tmp_1582: int, in_sdv_1065: int, in_sdv_1066: int, in_Tmp_1583: int, in_sdv_1067: int, in_Tmp_1585: int, in_sdv_1069: int, in_lpValue: int, in_sdv_1072: int, in_sdv_1074: int, in_wKeyLength: int, in_lppMFG: int, in_lppMDL: int, in_lppCLS: int, in_lppDES: int, in_lppAID: int, in_lppCID: int) returns (out_Tmp_1570: int, out_Tmp_1571: int, out_sdv_1052: int, out_sdv_1053: int, out_Tmp_1572: int, out_sdv_1055: int, out_sdv_1056: int, out_Tmp_1574: int, out_Tmp_1575: int, out_Tmp_1576: int, out_lpKey_1: int, out_Tmp_1577: int, out_sdv_1059: int, out_Tmp_1579: int, out_Tmp_1580: int, out_sdv_1062: int, out_Tmp_1582: int, out_sdv_1065: int, out_sdv_1066: int, out_Tmp_1583: int, out_sdv_1067: int, out_Tmp_1585: int, out_sdv_1069: int, out_lpValue: int, out_sdv_1072: int, out_sdv_1074: int, out_wKeyLength: int)
{

  entry:
    out_Tmp_1570, out_Tmp_1571, out_sdv_1052, out_sdv_1053, out_Tmp_1572, out_sdv_1055, out_sdv_1056, out_Tmp_1574, out_Tmp_1575, out_Tmp_1576, out_lpKey_1, out_Tmp_1577, out_sdv_1059, out_Tmp_1579, out_Tmp_1580, out_sdv_1062, out_Tmp_1582, out_sdv_1065, out_sdv_1066, out_Tmp_1583, out_sdv_1067, out_Tmp_1585, out_sdv_1069, out_lpValue, out_sdv_1072, out_sdv_1074, out_wKeyLength := in_Tmp_1570, in_Tmp_1571, in_sdv_1052, in_sdv_1053, in_Tmp_1572, in_sdv_1055, in_sdv_1056, in_Tmp_1574, in_Tmp_1575, in_Tmp_1576, in_lpKey_1, in_Tmp_1577, in_sdv_1059, in_Tmp_1579, in_Tmp_1580, in_sdv_1062, in_Tmp_1582, in_sdv_1065, in_sdv_1066, in_Tmp_1583, in_sdv_1067, in_Tmp_1585, in_sdv_1069, in_lpValue, in_sdv_1072, in_sdv_1074, in_wKeyLength;
    goto L21, exit;

  exit:
    return;

  L21:
    goto anon93_Else;

  anon93_Else:
    assume {:partition} out_lpKey_1 != 0;
    goto L22;

  L22:
    call {:si_unique_call 3294} ParPnpFindDeviceIdKeys_loop_L22(out_lpKey_1);
    goto L22_last;

  L22_last:
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 32;
    assume false;
    return;

  anon94_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 32;
    call {:si_unique_call 3293} out_lpValue := StringChr(out_lpKey_1, 58);
    goto anon95_Else;

  anon95_Else:
    assume {:partition} out_lpValue != 0;
    out_wKeyLength := out_lpValue;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 65;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 67;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 68;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 77;
    out_Tmp_1575 := out_wKeyLength;
    call {:si_unique_call 3292} out_sdv_1066 := RtlCompareMemory(0, 0, out_Tmp_1575);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} out_sdv_1066 > 5;
    goto L45;

  L45:
    goto anon97_Else;

  anon97_Else:
    assume {:partition} in_lppMFG != 0;
    assume {:nonnull} in_lppMFG != 0;
    assume in_lppMFG > 0;
    call {:si_unique_call 3290} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon98_Else_dummy;

  anon98_Else_dummy:
    goto L_BAF_6;

  L_BAF_6:
    call {:si_unique_call 3315} {:si_old_unique_call 1} out_Tmp_1570, out_Tmp_1571, out_sdv_1052, out_sdv_1053, out_Tmp_1572, out_sdv_1055, out_sdv_1056, out_Tmp_1574, out_Tmp_1575, out_Tmp_1576, out_lpKey_1, out_Tmp_1577, out_sdv_1059, out_Tmp_1579, out_Tmp_1580, out_sdv_1062, out_Tmp_1582, out_sdv_1065, out_sdv_1066, out_Tmp_1583, out_sdv_1067, out_Tmp_1585, out_sdv_1069, out_lpValue, out_sdv_1072, out_sdv_1074, out_wKeyLength := ParPnpFindDeviceIdKeys_loop_L21(out_Tmp_1570, out_Tmp_1571, out_sdv_1052, out_sdv_1053, out_Tmp_1572, out_sdv_1055, out_sdv_1056, out_Tmp_1574, out_Tmp_1575, out_Tmp_1576, out_lpKey_1, out_Tmp_1577, out_sdv_1059, out_Tmp_1579, out_Tmp_1580, out_sdv_1062, out_Tmp_1582, out_sdv_1065, out_sdv_1066, out_Tmp_1583, out_sdv_1067, out_Tmp_1585, out_sdv_1069, out_lpValue, out_sdv_1072, out_sdv_1074, out_wKeyLength, in_lppMFG, in_lppMDL, in_lppCLS, in_lppDES, in_lppAID, in_lppCID);
    return;

  anon98_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon98_Then_dummy;

  anon98_Then_dummy:
    goto L_BAF_6;

  anon96_Then:
    assume {:partition} 5 >= out_sdv_1066;
    out_Tmp_1579 := out_wKeyLength;
    call {:si_unique_call 3291} out_sdv_1067 := RtlCompareMemory(0, 0, out_Tmp_1579);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} out_sdv_1067 != 3;
    out_Tmp_1583 := out_wKeyLength;
    call {:si_unique_call 3297} out_sdv_1059 := RtlCompareMemory(0, 0, out_Tmp_1583);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} out_sdv_1059 == 5;
    goto L66;

  L66:
    goto anon101_Else;

  anon101_Else:
    assume {:partition} in_lppMDL != 0;
    assume {:nonnull} in_lppMDL != 0;
    assume in_lppMDL > 0;
    call {:si_unique_call 3295} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon102_Else_dummy;

  anon102_Else_dummy:
    goto L_BAF_6;

  anon102_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon102_Then_dummy;

  anon102_Then_dummy:
    goto L_BAF_6;

  anon100_Then:
    assume {:partition} out_sdv_1059 != 5;
    out_Tmp_1580 := out_wKeyLength;
    call {:si_unique_call 3296} out_sdv_1062 := RtlCompareMemory(0, 0, out_Tmp_1580);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} out_sdv_1062 != 3;
    call {:si_unique_call 3298} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon104_Else_dummy;

  anon104_Else_dummy:
    goto L_BAF_6;

  anon104_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon104_Then_dummy;

  anon104_Then_dummy:
    goto L_BAF_6;

  anon103_Then:
    assume {:partition} out_sdv_1062 == 3;
    goto L66;

  anon99_Then:
    assume {:partition} out_sdv_1067 == 3;
    goto L45;

  anon125_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] != 77;
    call {:si_unique_call 3299} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon124_Else_dummy;

  anon124_Else_dummy:
    goto L_BAF_6;

  anon124_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon124_Then_dummy;

  anon124_Then_dummy:
    goto L_BAF_6;

  anon126_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 68;
    out_Tmp_1582 := out_wKeyLength;
    call {:si_unique_call 3302} out_sdv_1074 := RtlCompareMemory(0, 0, out_Tmp_1582);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} out_sdv_1074 != 0;
    goto L92;

  L92:
    goto anon106_Else;

  anon106_Else:
    assume {:partition} in_lppDES != 0;
    assume {:nonnull} in_lppDES != 0;
    assume in_lppDES > 0;
    call {:si_unique_call 3300} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon107_Else_dummy;

  anon107_Else_dummy:
    goto L_BAF_6;

  anon107_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon107_Then_dummy;

  anon107_Then_dummy:
    goto L_BAF_6;

  anon105_Then:
    assume {:partition} out_sdv_1074 == 0;
    out_Tmp_1574 := out_wKeyLength;
    call {:si_unique_call 3301} out_sdv_1053 := RtlCompareMemory(0, 0, out_Tmp_1574);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} out_sdv_1053 == 0;
    call {:si_unique_call 3303} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon109_Else_dummy;

  anon109_Else_dummy:
    goto L_BAF_6;

  anon109_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon109_Then_dummy;

  anon109_Then_dummy:
    goto L_BAF_6;

  anon108_Then:
    assume {:partition} out_sdv_1053 != 0;
    goto L92;

  anon127_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 67;
    out_Tmp_1571 := out_wKeyLength;
    call {:si_unique_call 3306} out_sdv_1069 := RtlCompareMemory(0, 0, out_Tmp_1571);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} out_sdv_1069 == 5;
    goto L119;

  L119:
    goto anon111_Else;

  anon111_Else:
    assume {:partition} in_lppCLS != 0;
    assume {:nonnull} in_lppCLS != 0;
    assume in_lppCLS > 0;
    call {:si_unique_call 3304} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    goto L_BAF_6;

  anon112_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon112_Then_dummy;

  anon112_Then_dummy:
    goto L_BAF_6;

  anon110_Then:
    assume {:partition} out_sdv_1069 != 5;
    out_Tmp_1576 := out_wKeyLength;
    call {:si_unique_call 3305} out_sdv_1072 := RtlCompareMemory(0, 0, out_Tmp_1576);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} out_sdv_1072 != 3;
    out_Tmp_1577 := out_wKeyLength;
    call {:si_unique_call 3309} out_sdv_1052 := RtlCompareMemory(0, 0, out_Tmp_1577);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} out_sdv_1052 > 5;
    goto L140;

  L140:
    goto anon115_Else;

  anon115_Else:
    assume {:partition} in_lppCID != 0;
    assume {:nonnull} in_lppCID != 0;
    assume in_lppCID > 0;
    call {:si_unique_call 3307} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    goto L_BAF_6;

  anon116_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon116_Then_dummy;

  anon116_Then_dummy:
    goto L_BAF_6;

  anon114_Then:
    assume {:partition} 5 >= out_sdv_1052;
    out_Tmp_1572 := out_wKeyLength;
    call {:si_unique_call 3308} out_sdv_1065 := RtlCompareMemory(0, 0, out_Tmp_1572);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} out_sdv_1065 != 3;
    call {:si_unique_call 3310} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon118_Else_dummy;

  anon118_Else_dummy:
    goto L_BAF_6;

  anon118_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon118_Then_dummy;

  anon118_Then_dummy:
    goto L_BAF_6;

  anon117_Then:
    assume {:partition} out_sdv_1065 == 3;
    goto L140;

  anon113_Then:
    assume {:partition} out_sdv_1072 == 3;
    goto L119;

  anon129_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_1] == 65;
    out_Tmp_1585 := out_wKeyLength;
    call {:si_unique_call 3313} out_sdv_1055 := RtlCompareMemory(0, 0, out_Tmp_1585);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} out_sdv_1055 != 0;
    goto L166;

  L166:
    goto anon120_Else;

  anon120_Else:
    assume {:partition} in_lppAID != 0;
    assume {:nonnull} in_lppAID != 0;
    assume in_lppAID > 0;
    call {:si_unique_call 3311} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon121_Else_dummy;

  anon121_Else_dummy:
    goto L_BAF_6;

  anon121_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon121_Then_dummy;

  anon121_Then_dummy:
    goto L_BAF_6;

  anon119_Then:
    assume {:partition} out_sdv_1055 == 0;
    out_Tmp_1570 := out_wKeyLength;
    call {:si_unique_call 3312} out_sdv_1056 := RtlCompareMemory(0, 0, out_Tmp_1570);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} out_sdv_1056 == 0;
    call {:si_unique_call 3314} out_lpKey_1 := StringChr(out_lpValue, 59);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} out_lpKey_1 != 0;
    assume {:nonnull} out_lpKey_1 != 0;
    assume out_lpKey_1 > 0;
    Mem_T.INT4[out_lpKey_1] := 0;
    goto anon123_Else_dummy;

  anon123_Else_dummy:
    goto L_BAF_6;

  anon123_Then:
    assume {:partition} out_lpKey_1 == 0;
    goto anon123_Then_dummy;

  anon123_Then_dummy:
    goto L_BAF_6;

  anon122_Then:
    assume {:partition} out_sdv_1056 != 0;
    goto L166;
}



procedure {:LoopProcedure} ParPnpFindDeviceIdKeys_loop_L21(in_Tmp_1570: int, in_Tmp_1571: int, in_sdv_1052: int, in_sdv_1053: int, in_Tmp_1572: int, in_sdv_1055: int, in_sdv_1056: int, in_Tmp_1574: int, in_Tmp_1575: int, in_Tmp_1576: int, in_lpKey_1: int, in_Tmp_1577: int, in_sdv_1059: int, in_Tmp_1579: int, in_Tmp_1580: int, in_sdv_1062: int, in_Tmp_1582: int, in_sdv_1065: int, in_sdv_1066: int, in_Tmp_1583: int, in_sdv_1067: int, in_Tmp_1585: int, in_sdv_1069: int, in_lpValue: int, in_sdv_1072: int, in_sdv_1074: int, in_wKeyLength: int, in_lppMFG: int, in_lppMDL: int, in_lppCLS: int, in_lppDES: int, in_lppAID: int, in_lppCID: int) returns (out_Tmp_1570: int, out_Tmp_1571: int, out_sdv_1052: int, out_sdv_1053: int, out_Tmp_1572: int, out_sdv_1055: int, out_sdv_1056: int, out_Tmp_1574: int, out_Tmp_1575: int, out_Tmp_1576: int, out_lpKey_1: int, out_Tmp_1577: int, out_sdv_1059: int, out_Tmp_1579: int, out_Tmp_1580: int, out_sdv_1062: int, out_Tmp_1582: int, out_sdv_1065: int, out_sdv_1066: int, out_Tmp_1583: int, out_sdv_1067: int, out_Tmp_1585: int, out_sdv_1069: int, out_lpValue: int, out_sdv_1072: int, out_sdv_1074: int, out_wKeyLength: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1570 == 0 || out_Tmp_1570 == in_Tmp_1570 || out_Tmp_1570 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1571 == 0 || out_Tmp_1571 == in_Tmp_1571 || out_Tmp_1571 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1572 == 0 || out_Tmp_1572 == in_Tmp_1572 || out_Tmp_1572 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1574 == 0 || out_Tmp_1574 == in_Tmp_1574 || out_Tmp_1574 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1575 == 0 || out_Tmp_1575 == in_Tmp_1575 || out_Tmp_1575 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1576 == 0 || out_Tmp_1576 == in_Tmp_1576 || out_Tmp_1576 == in_lpKey_1;
  free ensures {:va_keep} out_lpKey_1 == 0 || out_lpKey_1 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1577 == 0 || out_Tmp_1577 == in_Tmp_1577 || out_Tmp_1577 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1579 == 0 || out_Tmp_1579 == in_Tmp_1579 || out_Tmp_1579 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1580 == 0 || out_Tmp_1580 == in_Tmp_1580 || out_Tmp_1580 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1582 == 0 || out_Tmp_1582 == in_Tmp_1582 || out_Tmp_1582 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1583 == 0 || out_Tmp_1583 == in_Tmp_1583 || out_Tmp_1583 == in_lpKey_1;
  free ensures {:va_keep} out_Tmp_1585 == 0 || out_Tmp_1585 == in_Tmp_1585 || out_Tmp_1585 == in_lpKey_1;
  free ensures {:va_keep} out_lpValue == 0 || out_lpValue == in_lpValue || out_lpValue == in_lpKey_1;
  free ensures {:va_keep} out_wKeyLength == 0 || out_wKeyLength == in_wKeyLength || out_wKeyLength == in_lpKey_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CheckPort_loop_L31(in_s_p_e_c_i_a_l_4: int, in_End_1: int)
{

  entry:
    goto L31, exit;

  exit:
    return;

  L31:
    assume {:nonnull} in_End_1 != 0;
    assume in_End_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_4 != 0;
    assume in_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_End_1 != 0;
    assume in_End_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_4 != 0;
    assume in_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_End_1 != 0;
    assume in_End_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_4 != 0;
    assume in_s_p_e_c_i_a_l_4 > 0;
    goto anon16_Then;

  anon16_Then:
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    call {:si_unique_call 3316} {:si_old_unique_call 1} CheckPort_loop_L31(in_s_p_e_c_i_a_l_4, in_End_1);
    return;
}



procedure {:LoopProcedure} CheckPort_loop_L31(in_s_p_e_c_i_a_l_4: int, in_End_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CheckPort_loop_L29(in_Tmp_1609: int, in_Wait_2: int, in_s_p_e_c_i_a_l_4: int, in_sdv_1091: int, in_End_1: int, in_Start_1: int, in_dsr_2: int, in_Tmp_1612: int, in_bMask: int, in_bValue: int) returns (out_Tmp_1609: int, out_s_p_e_c_i_a_l_4: int, out_sdv_1091: int, out_dsr_2: int, out_Tmp_1612: int)
{

  entry:
    out_Tmp_1609, out_s_p_e_c_i_a_l_4, out_sdv_1091, out_dsr_2, out_Tmp_1612 := in_Tmp_1609, in_s_p_e_c_i_a_l_4, in_sdv_1091, in_dsr_2, in_Tmp_1612;
    goto L29, exit;

  exit:
    return;

  L29:
    out_Tmp_1612 := KeTickCount;
    assume {:nonnull} out_Tmp_1612 != 0;
    assume out_Tmp_1612 > 0;
    havoc out_s_p_e_c_i_a_l_4;
    goto L31;

  L31:
    call {:si_unique_call 3319} CheckPort_loop_L31(out_s_p_e_c_i_a_l_4, in_End_1);
    goto L31_last;

  L31_last:
    assume {:nonnull} in_End_1 != 0;
    assume in_End_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_End_1 != 0;
    assume in_End_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_End_1 != 0;
    assume in_End_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 3318} out_dsr_2 := corral_nondet();
    out_Tmp_1609 := BAND(out_dsr_2, in_bMask);
    goto anon17_Then;

  anon17_Then:
    assume {:partition} out_Tmp_1609 != in_bValue;
    call {:si_unique_call 3317} out_sdv_1091 := corral_nondet();
    assume {:nonnull} in_End_1 != 0;
    assume in_End_1 > 0;
    assume {:nonnull} in_Start_1 != 0;
    assume in_Start_1 > 0;
    assume {:nonnull} in_Wait_2 != 0;
    assume in_Wait_2 > 0;
    goto anon13_Then;

  anon13_Then:
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    call {:si_unique_call 3320} {:si_old_unique_call 1} out_Tmp_1609, out_s_p_e_c_i_a_l_4, out_sdv_1091, out_dsr_2, out_Tmp_1612 := CheckPort_loop_L29(out_Tmp_1609, in_Wait_2, out_s_p_e_c_i_a_l_4, out_sdv_1091, in_End_1, in_Start_1, out_dsr_2, out_Tmp_1612, in_bMask, in_bValue);
    return;

  anon16_Then:
    assume false;
    return;
}



procedure {:LoopProcedure} CheckPort_loop_L29(in_Tmp_1609: int, in_Wait_2: int, in_s_p_e_c_i_a_l_4: int, in_sdv_1091: int, in_End_1: int, in_Start_1: int, in_dsr_2: int, in_Tmp_1612: int, in_bMask: int, in_bValue: int) returns (out_Tmp_1609: int, out_s_p_e_c_i_a_l_4: int, out_sdv_1091: int, out_dsr_2: int, out_Tmp_1612: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation CheckPort_loop_L21(in_s_p_e_c_i_a_l_3: int, in_Start_1: int)
{

  entry:
    goto L21, exit;

  exit:
    return;

  L21:
    assume {:nonnull} in_Start_1 != 0;
    assume in_Start_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_3 != 0;
    assume in_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_Start_1 != 0;
    assume in_Start_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_3 != 0;
    assume in_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_Start_1 != 0;
    assume in_Start_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_3 != 0;
    assume in_s_p_e_c_i_a_l_3 > 0;
    goto anon15_Then;

  anon15_Then:
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    call {:si_unique_call 3321} {:si_old_unique_call 1} CheckPort_loop_L21(in_s_p_e_c_i_a_l_3, in_Start_1);
    return;
}



procedure {:LoopProcedure} CheckPort_loop_L21(in_s_p_e_c_i_a_l_3: int, in_Start_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParInitializeDevice_loop_L42(in_s_p_e_c_i_a_l_6: int, in_NextQuery_1: int)
{

  entry:
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:nonnull} in_NextQuery_1 != 0;
    assume in_NextQuery_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_6 != 0;
    assume in_s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} in_NextQuery_1 != 0;
    assume in_NextQuery_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_6 != 0;
    assume in_s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} in_NextQuery_1 != 0;
    assume in_NextQuery_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_6 != 0;
    assume in_s_p_e_c_i_a_l_6 > 0;
    goto anon20_Then;

  anon20_Then:
    goto anon20_Then_dummy;

  anon20_Then_dummy:
    call {:si_unique_call 3322} {:si_old_unique_call 1} ParInitializeDevice_loop_L42(in_s_p_e_c_i_a_l_6, in_NextQuery_1);
    return;
}



procedure {:LoopProcedure} ParInitializeDevice_loop_L42(in_s_p_e_c_i_a_l_6: int, in_NextQuery_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParInitializeDevice_loop_L40(in_DeviceStatus_3: int, in_Tmp_1657: int, in_StartOfSpin_1: int, in_Difference_1: int, in_s_p_e_c_i_a_l_6: int, in_sdv_1107: int, in_NextQuery_1: int, in_Pdx_43: int) returns (out_DeviceStatus_3: int, out_Tmp_1657: int, out_s_p_e_c_i_a_l_6: int, out_sdv_1107: int)
{

  entry:
    out_DeviceStatus_3, out_Tmp_1657, out_s_p_e_c_i_a_l_6, out_sdv_1107 := in_DeviceStatus_3, in_Tmp_1657, in_s_p_e_c_i_a_l_6, in_sdv_1107;
    goto L40, exit;

  exit:
    return;

  L40:
    out_Tmp_1657 := KeTickCount;
    assume {:nonnull} out_Tmp_1657 != 0;
    assume out_Tmp_1657 > 0;
    havoc out_s_p_e_c_i_a_l_6;
    goto L42;

  L42:
    call {:si_unique_call 3325} ParInitializeDevice_loop_L42(out_s_p_e_c_i_a_l_6, in_NextQuery_1);
    goto L42_last;

  L42_last:
    assume {:nonnull} in_NextQuery_1 != 0;
    assume in_NextQuery_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_6 != 0;
    assume out_s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} in_NextQuery_1 != 0;
    assume in_NextQuery_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_6 != 0;
    assume out_s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} in_NextQuery_1 != 0;
    assume in_NextQuery_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_6 != 0;
    assume out_s_p_e_c_i_a_l_6 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} in_Difference_1 != 0;
    assume in_Difference_1 > 0;
    assume {:nonnull} in_NextQuery_1 != 0;
    assume in_NextQuery_1 > 0;
    assume {:nonnull} in_StartOfSpin_1 != 0;
    assume in_StartOfSpin_1 > 0;
    call {:si_unique_call 3324} out_sdv_1107 := corral_nondet();
    assume {:nonnull} in_Difference_1 != 0;
    assume in_Difference_1 > 0;
    assume {:nonnull} in_Pdx_43 != 0;
    assume in_Pdx_43 > 0;
    goto anon16_Then;

  anon16_Then:
    assume {:nonnull} in_Pdx_43 != 0;
    assume in_Pdx_43 > 0;
    call {:si_unique_call 3323} out_DeviceStatus_3 := corral_nondet();
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(out_DeviceStatus_3, 8) != 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto anon18_Then;

  anon18_Then:
    assume {:partition} BAND(out_DeviceStatus_3, 128) == 0;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    goto L_BAF_7;

  L_BAF_7:
    call {:si_unique_call 3326} {:si_old_unique_call 1} out_DeviceStatus_3, out_Tmp_1657, out_s_p_e_c_i_a_l_6, out_sdv_1107 := ParInitializeDevice_loop_L40(out_DeviceStatus_3, out_Tmp_1657, in_StartOfSpin_1, in_Difference_1, out_s_p_e_c_i_a_l_6, out_sdv_1107, in_NextQuery_1, in_Pdx_43);
    return;

  anon21_Then:
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    goto L_BAF_7;

  anon17_Then:
    assume {:partition} BAND(out_DeviceStatus_3, 8) == 0;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    goto L_BAF_7;

  anon20_Then:
    assume false;
    return;
}



procedure {:LoopProcedure} ParInitializeDevice_loop_L40(in_DeviceStatus_3: int, in_Tmp_1657: int, in_StartOfSpin_1: int, in_Difference_1: int, in_s_p_e_c_i_a_l_6: int, in_sdv_1107: int, in_NextQuery_1: int, in_Pdx_43: int) returns (out_DeviceStatus_3: int, out_Tmp_1657: int, out_s_p_e_c_i_a_l_6: int, out_sdv_1107: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParInitializeDevice_loop_L32(in_s_p_e_c_i_a_l_5: int, in_StartOfSpin_1: int)
{

  entry:
    goto L32, exit;

  exit:
    return;

  L32:
    assume {:nonnull} in_StartOfSpin_1 != 0;
    assume in_StartOfSpin_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_5 != 0;
    assume in_s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} in_StartOfSpin_1 != 0;
    assume in_StartOfSpin_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_5 != 0;
    assume in_s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} in_StartOfSpin_1 != 0;
    assume in_StartOfSpin_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_5 != 0;
    assume in_s_p_e_c_i_a_l_5 > 0;
    goto anon19_Then;

  anon19_Then:
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 3327} {:si_old_unique_call 1} ParInitializeDevice_loop_L32(in_s_p_e_c_i_a_l_5, in_StartOfSpin_1);
    return;
}



procedure {:LoopProcedure} ParInitializeDevice_loop_L32(in_s_p_e_c_i_a_l_5: int, in_StartOfSpin_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3ParseDevId_loop_L8(in_lpKey_2: int)
{

  entry:
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:nonnull} in_lpKey_2 != 0;
    assume in_lpKey_2 > 0;
    goto anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[in_lpKey_2] == 32;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    call {:si_unique_call 3328} {:si_old_unique_call 1} ParDot3ParseDevId_loop_L8(in_lpKey_2);
    return;
}



procedure {:LoopProcedure} ParDot3ParseDevId_loop_L8(in_lpKey_2: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation ParDot3ParseDevId_loop_L7(in_Tmp_1669: int, in_sdv_1114: int, in_Tmp_1673: int, in_Tmp_1674: int, in_Tmp_1675: int, in_lpKey_2: int, in_sdv_1116: int, in_Tmp_1676: int, in_sdv_1119: int, in_Tmp_1680: int, in_sdv_1122: int, in_sdv_1124: int, in_sdv_1125: int, in_Tmp_1683: int, in_sdv_1129: int, in_lpValue_1: int, in_Tmp_1685: int, in_sdv_1130: int, in_wKeyLength_1: int, in_lpp: int, in_lpp_1: int, in_lpp_2: int, in_lpp_3: int, in_lpp_4: int) returns (out_Tmp_1669: int, out_sdv_1114: int, out_Tmp_1673: int, out_Tmp_1674: int, out_Tmp_1675: int, out_lpKey_2: int, out_sdv_1116: int, out_Tmp_1676: int, out_sdv_1119: int, out_Tmp_1680: int, out_sdv_1122: int, out_sdv_1124: int, out_sdv_1125: int, out_Tmp_1683: int, out_sdv_1129: int, out_lpValue_1: int, out_Tmp_1685: int, out_sdv_1130: int, out_wKeyLength_1: int)
{

  entry:
    out_Tmp_1669, out_sdv_1114, out_Tmp_1673, out_Tmp_1674, out_Tmp_1675, out_lpKey_2, out_sdv_1116, out_Tmp_1676, out_sdv_1119, out_Tmp_1680, out_sdv_1122, out_sdv_1124, out_sdv_1125, out_Tmp_1683, out_sdv_1129, out_lpValue_1, out_Tmp_1685, out_sdv_1130, out_wKeyLength_1 := in_Tmp_1669, in_sdv_1114, in_Tmp_1673, in_Tmp_1674, in_Tmp_1675, in_lpKey_2, in_sdv_1116, in_Tmp_1676, in_sdv_1119, in_Tmp_1680, in_sdv_1122, in_sdv_1124, in_sdv_1125, in_Tmp_1683, in_sdv_1129, in_lpValue_1, in_Tmp_1685, in_sdv_1130, in_wKeyLength_1;
    goto L7, exit;

  exit:
    return;

  L7:
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_lpKey_2 != 0;
    goto L8;

  L8:
    call {:si_unique_call 3333} ParDot3ParseDevId_loop_L8(out_lpKey_2);
    goto L8_last;

  L8_last:
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 32;
    assume false;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 32;
    call {:si_unique_call 3332} out_lpValue_1 := StringChr(out_lpKey_2, 58);
    goto anon53_Else;

  anon53_Else:
    assume {:partition} out_lpValue_1 != 0;
    out_wKeyLength_1 := out_lpValue_1;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 46;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 49;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 67;
    out_Tmp_1680 := out_wKeyLength_1;
    call {:si_unique_call 3331} out_sdv_1124 := RtlCompareMemory(0, 0, out_Tmp_1680);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} out_sdv_1124 == 4;
    goto L30;

  L30:
    assume {:nonnull} in_lpp_2 != 0;
    assume in_lpp_2 > 0;
    call {:si_unique_call 3329} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon55_Else_dummy;

  anon55_Else_dummy:
    goto L_BAF_8;

  L_BAF_8:
    call {:si_unique_call 3350} {:si_old_unique_call 1} out_Tmp_1669, out_sdv_1114, out_Tmp_1673, out_Tmp_1674, out_Tmp_1675, out_lpKey_2, out_sdv_1116, out_Tmp_1676, out_sdv_1119, out_Tmp_1680, out_sdv_1122, out_sdv_1124, out_sdv_1125, out_Tmp_1683, out_sdv_1129, out_lpValue_1, out_Tmp_1685, out_sdv_1130, out_wKeyLength_1 := ParDot3ParseDevId_loop_L7(out_Tmp_1669, out_sdv_1114, out_Tmp_1673, out_Tmp_1674, out_Tmp_1675, out_lpKey_2, out_sdv_1116, out_Tmp_1676, out_sdv_1119, out_Tmp_1680, out_sdv_1122, out_sdv_1124, out_sdv_1125, out_Tmp_1683, out_sdv_1129, out_lpValue_1, out_Tmp_1685, out_sdv_1130, out_wKeyLength_1, in_lpp, in_lpp_1, in_lpp_2, in_lpp_3, in_lpp_4);
    return;

  anon55_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon55_Then_dummy;

  anon55_Then_dummy:
    goto L_BAF_8;

  anon54_Then:
    assume {:partition} out_sdv_1124 != 4;
    out_Tmp_1683 := out_wKeyLength_1;
    call {:si_unique_call 3330} out_sdv_1125 := RtlCompareMemory(0, 0, out_Tmp_1683);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} out_sdv_1125 != 12;
    call {:si_unique_call 3334} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon57_Else_dummy;

  anon57_Else_dummy:
    goto L_BAF_8;

  anon57_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon57_Then_dummy;

  anon57_Then_dummy:
    goto L_BAF_8;

  anon56_Then:
    assume {:partition} out_sdv_1125 == 12;
    goto L30;

  anon73_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] != 67;
    call {:si_unique_call 3335} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon72_Else_dummy;

  anon72_Else_dummy:
    goto L_BAF_8;

  anon72_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon72_Then_dummy;

  anon72_Then_dummy:
    goto L_BAF_8;

  anon74_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 49;
    out_Tmp_1676 := out_wKeyLength_1;
    call {:si_unique_call 3337} out_sdv_1129 := RtlCompareMemory(0, 0, out_Tmp_1676);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} out_sdv_1129 == 9;
    assume {:nonnull} in_lpp_3 != 0;
    assume in_lpp_3 > 0;
    call {:si_unique_call 3336} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon59_Else_dummy;

  anon59_Else_dummy:
    goto L_BAF_8;

  anon59_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    goto L_BAF_8;

  anon58_Then:
    assume {:partition} out_sdv_1129 != 9;
    out_Tmp_1669 := out_wKeyLength_1;
    call {:si_unique_call 3339} out_sdv_1119 := RtlCompareMemory(0, 0, out_Tmp_1669);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_sdv_1119 == 9;
    assume {:nonnull} in_lpp != 0;
    assume in_lpp > 0;
    call {:si_unique_call 3338} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    goto L_BAF_8;

  anon61_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    goto L_BAF_8;

  anon60_Then:
    assume {:partition} out_sdv_1119 != 9;
    out_Tmp_1685 := out_wKeyLength_1;
    call {:si_unique_call 3341} out_sdv_1122 := RtlCompareMemory(0, 0, out_Tmp_1685);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_sdv_1122 == 8;
    assume {:nonnull} in_lpp_1 != 0;
    assume in_lpp_1 > 0;
    call {:si_unique_call 3340} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    goto L_BAF_8;

  anon63_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    goto L_BAF_8;

  anon62_Then:
    assume {:partition} out_sdv_1122 != 8;
    out_Tmp_1675 := out_wKeyLength_1;
    call {:si_unique_call 3343} out_sdv_1114 := RtlCompareMemory(0, 0, out_Tmp_1675);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} out_sdv_1114 == 8;
    assume {:nonnull} in_lpp_4 != 0;
    assume in_lpp_4 > 0;
    call {:si_unique_call 3342} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    goto L_BAF_8;

  anon65_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    goto L_BAF_8;

  anon64_Then:
    assume {:partition} out_sdv_1114 != 8;
    call {:si_unique_call 3344} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    goto L_BAF_8;

  anon66_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    goto L_BAF_8;

  anon75_Then:
    assume {:partition} Mem_T.INT4[out_lpKey_2] == 46;
    out_Tmp_1673 := out_wKeyLength_1;
    call {:si_unique_call 3346} out_sdv_1130 := RtlCompareMemory(0, 0, out_Tmp_1673);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} out_sdv_1130 == 4;
    assume {:nonnull} in_lpp_1 != 0;
    assume in_lpp_1 > 0;
    call {:si_unique_call 3345} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon68_Else_dummy;

  anon68_Else_dummy:
    goto L_BAF_8;

  anon68_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon68_Then_dummy;

  anon68_Then_dummy:
    goto L_BAF_8;

  anon67_Then:
    assume {:partition} out_sdv_1130 != 4;
    out_Tmp_1674 := out_wKeyLength_1;
    call {:si_unique_call 3348} out_sdv_1116 := RtlCompareMemory(0, 0, out_Tmp_1674);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} out_sdv_1116 == 4;
    assume {:nonnull} in_lpp_4 != 0;
    assume in_lpp_4 > 0;
    call {:si_unique_call 3347} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    goto L_BAF_8;

  anon70_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon70_Then_dummy;

  anon70_Then_dummy:
    goto L_BAF_8;

  anon69_Then:
    assume {:partition} out_sdv_1116 != 4;
    call {:si_unique_call 3349} out_lpKey_2 := StringChr(out_lpValue_1, 59);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_lpKey_2 != 0;
    assume {:nonnull} out_lpKey_2 != 0;
    assume out_lpKey_2 > 0;
    Mem_T.INT4[out_lpKey_2] := 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    goto L_BAF_8;

  anon71_Then:
    assume {:partition} out_lpKey_2 == 0;
    goto anon71_Then_dummy;

  anon71_Then_dummy:
    goto L_BAF_8;
}



procedure {:LoopProcedure} ParDot3ParseDevId_loop_L7(in_Tmp_1669: int, in_sdv_1114: int, in_Tmp_1673: int, in_Tmp_1674: int, in_Tmp_1675: int, in_lpKey_2: int, in_sdv_1116: int, in_Tmp_1676: int, in_sdv_1119: int, in_Tmp_1680: int, in_sdv_1122: int, in_sdv_1124: int, in_sdv_1125: int, in_Tmp_1683: int, in_sdv_1129: int, in_lpValue_1: int, in_Tmp_1685: int, in_sdv_1130: int, in_wKeyLength_1: int, in_lpp: int, in_lpp_1: int, in_lpp_2: int, in_lpp_3: int, in_lpp_4: int) returns (out_Tmp_1669: int, out_sdv_1114: int, out_Tmp_1673: int, out_Tmp_1674: int, out_Tmp_1675: int, out_lpKey_2: int, out_sdv_1116: int, out_Tmp_1676: int, out_sdv_1119: int, out_Tmp_1680: int, out_sdv_1122: int, out_sdv_1124: int, out_sdv_1125: int, out_Tmp_1683: int, out_sdv_1129: int, out_lpValue_1: int, out_Tmp_1685: int, out_sdv_1130: int, out_wKeyLength_1: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_1669 == 0 || out_Tmp_1669 == in_Tmp_1669 || out_Tmp_1669 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1673 == 0 || out_Tmp_1673 == in_Tmp_1673 || out_Tmp_1673 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1674 == 0 || out_Tmp_1674 == in_Tmp_1674 || out_Tmp_1674 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1675 == 0 || out_Tmp_1675 == in_Tmp_1675 || out_Tmp_1675 == in_lpKey_2;
  free ensures {:va_keep} out_lpKey_2 == 0 || out_lpKey_2 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1676 == 0 || out_Tmp_1676 == in_Tmp_1676 || out_Tmp_1676 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1680 == 0 || out_Tmp_1680 == in_Tmp_1680 || out_Tmp_1680 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1683 == 0 || out_Tmp_1683 == in_Tmp_1683 || out_Tmp_1683 == in_lpKey_2;
  free ensures {:va_keep} out_lpValue_1 == 0 || out_lpValue_1 == in_lpValue_1 || out_lpValue_1 == in_lpKey_2;
  free ensures {:va_keep} out_Tmp_1685 == 0 || out_Tmp_1685 == in_Tmp_1685 || out_Tmp_1685 == in_lpKey_2;
  free ensures {:va_keep} out_wKeyLength_1 == 0 || out_wKeyLength_1 == in_wKeyLength_1 || out_wKeyLength_1 == in_lpKey_2;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptBuildFdo_loop_L45(in_portNumber: int, in_deviceObject: int, in_uniNameString: int, in_status_54: int) returns (out_status_54: int)
{

  entry:
    out_status_54 := in_status_54;
    goto L45, exit;

  exit:
    return;

  L45:
    call {:si_unique_call 3351} RtlFreeUnicodeString(0);
    assume {:nonnull} in_portNumber != 0;
    assume in_portNumber > 0;
    Mem_T.INT4[in_portNumber] := Mem_T.INT4[in_portNumber] + 1;
    assume {:nonnull} in_portNumber != 0;
    assume in_portNumber > 0;
    call {:si_unique_call 3352} out_status_54 := PptBuildParallelPortDeviceName(Mem_T.INT4[in_portNumber], in_uniNameString);
    goto anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto anon32_Else;

  anon32_Else:
    assume {:partition} out_status_54 >= 0;
    call {:si_unique_call 3353} out_status_54 := IoCreateDevice(0, 536, 0, 22, 256, 0, in_deviceObject);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} -1073741771 == out_status_54;
    goto anon33_Else_dummy;

  anon33_Else_dummy:
    call {:si_unique_call 3354} {:si_old_unique_call 1} out_status_54 := PptBuildFdo_loop_L45(in_portNumber, in_deviceObject, in_uniNameString, out_status_54);
    return;
}



procedure {:LoopProcedure} PptBuildFdo_loop_L45(in_portNumber: int, in_deviceObject: int, in_uniNameString: int, in_status_54: int) returns (out_status_54: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_status_54 == -1073741824 || out_status_54 == -1073741771 || out_status_54 == -1073741670 || out_status_54 == -1073741823 || out_status_54 == 0 || out_status_54 == in_status_54;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation String2Num_loop_L9(in_cnt_1: int, in_Tmp_1697: int, in_Tmp_1699: int, in_cc: int, in_lpp_5: int, in_num: int) returns (out_cnt_1: int, out_Tmp_1697: int, out_Tmp_1699: int, out_cc: int)
{

  entry:
    out_cnt_1, out_Tmp_1697, out_Tmp_1699, out_cc := in_cnt_1, in_Tmp_1697, in_Tmp_1699, in_cc;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:nonnull} in_lpp_5 != 0;
    assume in_lpp_5 > 0;
    havoc out_Tmp_1697;
    assume {:nonnull} out_Tmp_1697 != 0;
    assume out_Tmp_1697 > 0;
    out_cc := Mem_T.INT4[out_Tmp_1697];
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} out_cc >= 48;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 57 >= out_cc;
    assume {:nonnull} in_num != 0;
    assume in_num > 0;
    Mem_T.INT4[in_num] := 16 * Mem_T.INT4[in_num] + out_cc - 48;
    goto L14;

  L14:
    assume {:nonnull} in_lpp_5 != 0;
    assume in_lpp_5 > 0;
    out_Tmp_1699 := out_cnt_1;
    out_cnt_1 := out_cnt_1 + 1;
    goto anon36_Then;

  anon36_Then:
    assume {:partition} 100 >= out_Tmp_1699;
    goto anon36_Then_dummy;

  anon36_Then_dummy:
    call {:si_unique_call 3355} {:si_old_unique_call 1} out_cnt_1, out_Tmp_1697, out_Tmp_1699, out_cc := String2Num_loop_L9(out_cnt_1, out_Tmp_1697, out_Tmp_1699, out_cc, in_lpp_5, in_num);
    return;

  anon26_Then:
    assume {:partition} out_cc > 57;
    goto L11;

  L11:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_cc >= 65;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} 70 >= out_cc;
    assume {:nonnull} in_num != 0;
    assume in_num > 0;
    Mem_T.INT4[in_num] := 16 * Mem_T.INT4[in_num] + out_cc - 55;
    goto L14;

  anon28_Then:
    assume {:partition} out_cc > 70;
    goto L20;

  L20:
    goto anon27_Else;

  anon27_Else:
    assume {:partition} out_cc >= 97;
    goto anon30_Else;

  anon30_Else:
    assume {:partition} 102 >= out_cc;
    assume {:nonnull} in_num != 0;
    assume in_num > 0;
    Mem_T.INT4[in_num] := 16 * Mem_T.INT4[in_num] + out_cc - 87;
    goto L14;

  anon25_Then:
    assume {:partition} 65 > out_cc;
    goto L20;

  anon35_Then:
    assume {:partition} 48 > out_cc;
    goto L11;
}



procedure {:LoopProcedure} String2Num_loop_L9(in_cnt_1: int, in_Tmp_1697: int, in_Tmp_1699: int, in_cc: int, in_lpp_5: int, in_num: int) returns (out_cnt_1: int, out_Tmp_1697: int, out_Tmp_1699: int, out_cc: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4ReadRawIeee1284DeviceId_loop_L94(in_Tmp_1704: int, in_deviceIndex: int, in_Tmp_1710: int, in_Tmp_1712: int, in_sdv_1146: int, in_Tmp_1717: int, in_Tmp_1722: int, in_Tmp_1723: int, in_sdv_1154: int, in_devIdBuffer: int) returns (out_Tmp_1704: int, out_deviceIndex: int, out_Tmp_1710: int, out_Tmp_1712: int, out_sdv_1146: int, out_Tmp_1717: int, out_Tmp_1722: int, out_Tmp_1723: int, out_sdv_1154: int)
{

  entry:
    out_Tmp_1704, out_deviceIndex, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1717, out_Tmp_1722, out_Tmp_1723, out_sdv_1154 := in_Tmp_1704, in_deviceIndex, in_Tmp_1710, in_Tmp_1712, in_sdv_1146, in_Tmp_1717, in_Tmp_1722, in_Tmp_1723, in_sdv_1154;
    goto L94, exit;

  exit:
    return;

  L94:
    assume {:CounterLoop 14} {:Counter "deviceIndex"} true;
    goto anon75_Else;

  anon75_Else:
    assume {:partition} 14 > out_deviceIndex;
    out_Tmp_1710 := out_deviceIndex;
    havoc out_Tmp_1723;
    assume {:nonnull} out_Tmp_1723 != 0;
    assume out_Tmp_1723 > 0;
    goto anon87_Else;

  anon87_Else:
    out_Tmp_1717 := out_deviceIndex;
    havoc out_Tmp_1704;
    assume {:nonnull} out_Tmp_1704 != 0;
    assume out_Tmp_1704 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    out_sdv_1146 := 0;
    goto L102;

  L102:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} out_sdv_1146 != 0;
    out_Tmp_1712 := out_deviceIndex;
    havoc out_Tmp_1722;
    assume {:nonnull} out_Tmp_1722 != 0;
    assume out_Tmp_1722 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    out_sdv_1154 := 0;
    goto L109;

  L109:
    goto anon77_Then;

  anon77_Then:
    assume {:partition} out_sdv_1154 == 0;
    goto L103;

  L103:
    out_deviceIndex := out_deviceIndex + 1;
    goto L103_dummy;

  L103_dummy:
    call {:si_unique_call 3358} {:si_old_unique_call 1} out_Tmp_1704, out_deviceIndex, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1717, out_Tmp_1722, out_Tmp_1723, out_sdv_1154 := P4ReadRawIeee1284DeviceId_loop_L94(out_Tmp_1704, out_deviceIndex, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1717, out_Tmp_1722, out_Tmp_1723, out_sdv_1154, in_devIdBuffer);
    return;

  anon89_Then:
    call {:si_unique_call 3357} out_sdv_1154 := __HAVOC_malloc(1);
    goto L109;

  anon76_Then:
    assume {:partition} out_sdv_1146 == 0;
    goto L103;

  anon88_Then:
    call {:si_unique_call 3356} out_sdv_1146 := __HAVOC_malloc(1);
    goto L102;
}



procedure {:LoopProcedure} P4ReadRawIeee1284DeviceId_loop_L94(in_Tmp_1704: int, in_deviceIndex: int, in_Tmp_1710: int, in_Tmp_1712: int, in_sdv_1146: int, in_Tmp_1717: int, in_Tmp_1722: int, in_Tmp_1723: int, in_sdv_1154: int, in_devIdBuffer: int) returns (out_Tmp_1704: int, out_deviceIndex: int, out_Tmp_1710: int, out_Tmp_1712: int, out_sdv_1146: int, out_Tmp_1717: int, out_Tmp_1722: int, out_Tmp_1723: int, out_sdv_1154: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation P4ReadRawIeee1284DeviceId_loop_L23(in_Tmp_1703: int, in_Tmp_1704: int, in_deviceIndex: int, in_tmpBufLen_3: int, in_Tmp_1706: int, in_length_3: int, in_tryCount: int, in_minValidDevId_1: int, in_ignoreXflag: int, in_truncationIndex: int, in_ieeeState: int, in_Tmp_1710: int, in_Tmp_1712: int, in_sdv_1146: int, in_Tmp_1713: int, in_maxTries_3: int, in_Tmp_1717: int, in_sdv_1147: int, in_sdv_1148: int, in_sdv_1149: int, in_sdv_1150: int, in_Tmp_1721: int, in_lowLengthByte: int, in_bytesTransferred_1: int, in_sdv_1152: int, in_sdv_1153: int, in_Tmp_1722: int, in_tmpBuf: int, in_Tmp_1723: int, in_highLengthByte: int, in_sdv_1154: int, in_status_55: int, in_devIdBuffer: int, in_sdv_1155: int, in_Controller_21: int) returns (out_Tmp_1703: int, out_Tmp_1704: int, out_deviceIndex: int, out_tmpBufLen_3: int, out_Tmp_1706: int, out_length_3: int, out_tryCount: int, out_ignoreXflag: int, out_truncationIndex: int, out_Tmp_1710: int, out_Tmp_1712: int, out_sdv_1146: int, out_Tmp_1713: int, out_Tmp_1717: int, out_sdv_1147: int, out_sdv_1148: int, out_sdv_1149: int, out_sdv_1150: int, out_Tmp_1721: int, out_lowLengthByte: int, out_sdv_1152: int, out_sdv_1153: int, out_Tmp_1722: int, out_tmpBuf: int, out_Tmp_1723: int, out_highLengthByte: int, out_sdv_1154: int, out_status_55: int, out_devIdBuffer: int, out_sdv_1155: int)
{

  entry:
    out_Tmp_1703, out_Tmp_1704, out_deviceIndex, out_tmpBufLen_3, out_Tmp_1706, out_length_3, out_tryCount, out_ignoreXflag, out_truncationIndex, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1713, out_Tmp_1717, out_sdv_1147, out_sdv_1148, out_sdv_1149, out_sdv_1150, out_Tmp_1721, out_lowLengthByte, out_sdv_1152, out_sdv_1153, out_Tmp_1722, out_tmpBuf, out_Tmp_1723, out_highLengthByte, out_sdv_1154, out_status_55, out_devIdBuffer, out_sdv_1155 := in_Tmp_1703, in_Tmp_1704, in_deviceIndex, in_tmpBufLen_3, in_Tmp_1706, in_length_3, in_tryCount, in_ignoreXflag, in_truncationIndex, in_Tmp_1710, in_Tmp_1712, in_sdv_1146, in_Tmp_1713, in_Tmp_1717, in_sdv_1147, in_sdv_1148, in_sdv_1149, in_sdv_1150, in_Tmp_1721, in_lowLengthByte, in_sdv_1152, in_sdv_1153, in_Tmp_1722, in_tmpBuf, in_Tmp_1723, in_highLengthByte, in_sdv_1154, in_status_55, in_devIdBuffer, in_sdv_1155;
    goto L23, exit;

  exit:
    return;

  L23:
    call {:si_unique_call 3359} out_status_55 := P4IeeeEnter1284Mode(in_Controller_21, 4, in_ieeeState);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} out_status_55 == 0;
    out_tmpBufLen_3 := 1024;
    call {:si_unique_call 3363} out_sdv_1149 := ExAllocatePoolWithTag(1, out_tmpBufLen_3, -797810352);
    goto anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    out_tmpBuf := out_sdv_1149;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} out_tmpBuf != 0;
    call {:si_unique_call 3365} sdv_RtlZeroMemory(0, out_tmpBufLen_3);
    assume {:nonnull} in_ieeeState != 0;
    assume in_ieeeState > 0;
    out_Tmp_1721 := out_tmpBufLen_3 - 1;
    call {:si_unique_call 3366} out_status_55 := P4NibbleModeRead(in_Controller_21, out_tmpBuf, out_Tmp_1721, in_bytesTransferred_1, in_ieeeState);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_status_55 >= 0;
    assume {:nonnull} out_tmpBuf != 0;
    assume out_tmpBuf > 0;
    out_highLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[out_tmpBuf]);
    assume {:nonnull} out_tmpBuf != 0;
    assume out_tmpBuf > 0;
    out_lowLengthByte := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), Mem_T.INT4[out_tmpBuf + 1 * 4]);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} out_highLengthByte > 2;
    out_devIdBuffer := 0;
    goto L55;

  L55:
    call {:si_unique_call 3362} sdv_ExFreePool(0);
    goto L44;

  L44:
    assume {:nonnull} in_ieeeState != 0;
    assume in_ieeeState > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} out_devIdBuffer != 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    out_sdv_1152 := 0;
    goto L91;

  L91:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_sdv_1152 != 0;
    goto L93;

  L93:
    out_deviceIndex := 0;
    goto L94;

  L94:
    call {:si_unique_call 3373} out_Tmp_1704, out_deviceIndex, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1717, out_Tmp_1722, out_Tmp_1723, out_sdv_1154 := P4ReadRawIeee1284DeviceId_loop_L94(out_Tmp_1704, out_deviceIndex, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1717, out_Tmp_1722, out_Tmp_1723, out_sdv_1154, out_devIdBuffer);
    goto L94_last;

  L94_last:
    assume {:CounterLoop 14} {:Counter "deviceIndex"} true;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} 14 > out_deviceIndex;
    out_Tmp_1710 := out_deviceIndex;
    havoc out_Tmp_1723;
    assume {:nonnull} out_Tmp_1723 != 0;
    assume out_Tmp_1723 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    out_Tmp_1717 := out_deviceIndex;
    havoc out_Tmp_1704;
    assume {:nonnull} out_Tmp_1704 != 0;
    assume out_Tmp_1704 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    out_sdv_1146 := 0;
    goto L102;

  L102:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} out_sdv_1146 != 0;
    out_Tmp_1712 := out_deviceIndex;
    havoc out_Tmp_1722;
    assume {:nonnull} out_Tmp_1722 != 0;
    assume out_Tmp_1722 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    out_sdv_1154 := 0;
    goto L109;

  L109:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_sdv_1154 != 0;
    out_ignoreXflag := 1;
    goto L86;

  L86:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_ignoreXflag != 0;
    call {:si_unique_call 3360} P4IeeeTerminate1284Mode(in_Controller_21, in_ieeeState, 0);
    goto L29;

  L29:
    goto anon66_Then;

  anon66_Then:
    assume {:partition} out_devIdBuffer == 0;
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    goto anon67_Else;

  anon67_Else:
    assume {:partition} Mem_T.INT4[in_bytesTransferred_1] > 0;
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    goto anon68_Else;

  anon68_Else:
    assume {:partition} in_minValidDevId_1 > Mem_T.INT4[in_bytesTransferred_1];
    goto anon69_Else;

  anon69_Else:
    assume {:partition} in_maxTries_3 > out_tryCount;
    out_tryCount := out_tryCount + 1;
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    Mem_T.INT4[in_bytesTransferred_1] := 0;
    goto anon69_Else_dummy;

  anon69_Else_dummy:
    call {:si_unique_call 3376} {:si_old_unique_call 1} out_Tmp_1703, out_Tmp_1704, out_deviceIndex, out_tmpBufLen_3, out_Tmp_1706, out_length_3, out_tryCount, out_ignoreXflag, out_truncationIndex, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1713, out_Tmp_1717, out_sdv_1147, out_sdv_1148, out_sdv_1149, out_sdv_1150, out_Tmp_1721, out_lowLengthByte, out_sdv_1152, out_sdv_1153, out_Tmp_1722, out_tmpBuf, out_Tmp_1723, out_highLengthByte, out_sdv_1154, out_status_55, out_devIdBuffer, out_sdv_1155 := P4ReadRawIeee1284DeviceId_loop_L23(out_Tmp_1703, out_Tmp_1704, out_deviceIndex, out_tmpBufLen_3, out_Tmp_1706, out_length_3, out_tryCount, in_minValidDevId_1, out_ignoreXflag, out_truncationIndex, in_ieeeState, out_Tmp_1710, out_Tmp_1712, out_sdv_1146, out_Tmp_1713, in_maxTries_3, out_Tmp_1717, out_sdv_1147, out_sdv_1148, out_sdv_1149, out_sdv_1150, out_Tmp_1721, out_lowLengthByte, in_bytesTransferred_1, out_sdv_1152, out_sdv_1153, out_Tmp_1722, out_tmpBuf, out_Tmp_1723, out_highLengthByte, out_sdv_1154, out_status_55, out_devIdBuffer, out_sdv_1155, in_Controller_21);
    return;

  anon73_Then:
    assume {:partition} out_ignoreXflag == 0;
    call {:si_unique_call 3361} P4IeeeTerminate1284Mode(in_Controller_21, in_ieeeState, 1);
    goto L29;

  anon77_Then:
    assume {:partition} out_sdv_1154 == 0;
    goto L103;

  L103:
    out_deviceIndex := out_deviceIndex + 1;
    assume false;
    return;

  anon89_Then:
    call {:si_unique_call 3375} out_sdv_1154 := __HAVOC_malloc(1);
    goto L109;

  anon76_Then:
    assume {:partition} out_sdv_1146 == 0;
    goto L103;

  anon88_Then:
    call {:si_unique_call 3374} out_sdv_1146 := __HAVOC_malloc(1);
    goto L102;

  anon87_Then:
    goto L86;

  anon75_Then:
    assume {:partition} out_deviceIndex >= 14;
    goto L86;

  anon74_Then:
    assume {:partition} out_sdv_1152 == 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    out_sdv_1148 := 0;
    goto L115;

  L115:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_sdv_1148 == 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    out_sdv_1147 := 0;
    goto L120;

  L120:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} out_sdv_1147 == 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    out_sdv_1155 := 0;
    goto L125;

  L125:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} out_sdv_1155 == 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    out_sdv_1150 := 0;
    goto L130;

  L130:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} out_sdv_1150 != 0;
    goto L93;

  anon81_Then:
    assume {:partition} out_sdv_1150 == 0;
    goto L86;

  anon93_Then:
    call {:si_unique_call 3368} out_sdv_1150 := __HAVOC_malloc(1);
    goto L130;

  anon80_Then:
    assume {:partition} out_sdv_1155 != 0;
    goto L93;

  anon92_Then:
    call {:si_unique_call 3369} out_sdv_1155 := __HAVOC_malloc(1);
    goto L125;

  anon79_Then:
    assume {:partition} out_sdv_1147 != 0;
    goto L93;

  anon91_Then:
    call {:si_unique_call 3370} out_sdv_1147 := __HAVOC_malloc(1);
    goto L120;

  anon78_Then:
    assume {:partition} out_sdv_1148 != 0;
    goto L93;

  anon90_Then:
    call {:si_unique_call 3371} out_sdv_1148 := __HAVOC_malloc(1);
    goto L115;

  anon86_Then:
    call {:si_unique_call 3372} out_sdv_1152 := __HAVOC_malloc(1);
    goto L91;

  anon85_Then:
    assume {:partition} out_devIdBuffer == 0;
    goto L86;

  anon84_Then:
    assume {:partition} 2 >= out_highLengthByte;
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Mem_T.INT4[in_bytesTransferred_1] >= in_minValidDevId_1;
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    out_Tmp_1703 := Mem_T.INT4[in_bytesTransferred_1] + 1;
    call {:si_unique_call 3367} out_sdv_1153 := ExAllocatePoolWithTag(1, out_Tmp_1703, -797810352);
    goto anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    out_devIdBuffer := out_sdv_1153;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} out_devIdBuffer != 0;
    out_length_3 := out_highLengthByte * 256 + out_lowLengthByte;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} out_length_3 >= in_minValidDevId_1;
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Mem_T.INT4[in_bytesTransferred_1] > out_length_3;
    out_Tmp_1713 := out_length_3;
    goto L80;

  L80:
    out_truncationIndex := out_Tmp_1713;
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    call {:si_unique_call 3364} sdv_RtlCopyMemory(0, 0, Mem_T.INT4[in_bytesTransferred_1]);
    out_Tmp_1706 := out_truncationIndex;
    assume {:nonnull} out_devIdBuffer != 0;
    assume out_devIdBuffer > 0;
    Mem_T.INT4[out_devIdBuffer + out_Tmp_1706 * 4] := 0;
    goto L55;

  anon72_Then:
    assume {:partition} out_length_3 >= Mem_T.INT4[in_bytesTransferred_1];
    goto L77;

  L77:
    assume {:nonnull} in_bytesTransferred_1 != 0;
    assume in_bytesTransferred_1 > 0;
    out_Tmp_1713 := Mem_T.INT4[in_bytesTransferred_1];
    goto L80;

  anon96_Then:
    assume {:partition} in_minValidDevId_1 > out_length_3;
    goto L77;

  anon95_Then:
    assume {:partition} out_devIdBuffer == 0;
    goto L55;

  anon71_Then:
    assume {:partition} in_minValidDevId_1 > Mem_T.INT4[in_bytesTransferred_1];
    goto L55;

  anon70_Then:
    assume {:partition} 0 > out_status_55;
    goto L55;

  anon83_Then:
    assume {:partition} out_tmpBuf == 0;
    goto L44;

  anon65_Then:
    assume {:partition} out_status_55 != 0;
    goto L29;
}



procedure {:LoopProcedure} P4ReadRawIeee1284DeviceId_loop_L23(in_Tmp_1703: int, in_Tmp_1704: int, in_deviceIndex: int, in_tmpBufLen_3: int, in_Tmp_1706: int, in_length_3: int, in_tryCount: int, in_minValidDevId_1: int, in_ignoreXflag: int, in_truncationIndex: int, in_ieeeState: int, in_Tmp_1710: int, in_Tmp_1712: int, in_sdv_1146: int, in_Tmp_1713: int, in_maxTries_3: int, in_Tmp_1717: int, in_sdv_1147: int, in_sdv_1148: int, in_sdv_1149: int, in_sdv_1150: int, in_Tmp_1721: int, in_lowLengthByte: int, in_bytesTransferred_1: int, in_sdv_1152: int, in_sdv_1153: int, in_Tmp_1722: int, in_tmpBuf: int, in_Tmp_1723: int, in_highLengthByte: int, in_sdv_1154: int, in_status_55: int, in_devIdBuffer: int, in_sdv_1155: int, in_Controller_21: int) returns (out_Tmp_1703: int, out_Tmp_1704: int, out_deviceIndex: int, out_tmpBufLen_3: int, out_Tmp_1706: int, out_length_3: int, out_tryCount: int, out_ignoreXflag: int, out_truncationIndex: int, out_Tmp_1710: int, out_Tmp_1712: int, out_sdv_1146: int, out_Tmp_1713: int, out_Tmp_1717: int, out_sdv_1147: int, out_sdv_1148: int, out_sdv_1149: int, out_sdv_1150: int, out_Tmp_1721: int, out_lowLengthByte: int, out_sdv_1152: int, out_sdv_1153: int, out_Tmp_1722: int, out_tmpBuf: int, out_Tmp_1723: int, out_highLengthByte: int, out_sdv_1154: int, out_status_55: int, out_devIdBuffer: int, out_sdv_1155: int);
  modifies Mem_T.INT4, alloc, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_tmpBufLen_3 == 1024 || out_tmpBufLen_3 == in_tmpBufLen_3;
  free ensures {:va_keep} out_ignoreXflag == 1 || out_ignoreXflag == in_ignoreXflag;
  free ensures {:va_keep} out_status_55 == -1073741435 || out_status_55 == 0 || out_status_55 == -1073741808 || out_status_55 == in_status_55;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation StringChr_loop_L5(in_string_1: int, in_c_1: int)
{

  entry:
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_string_1 != 0;
    assume in_string_1 > 0;
    goto anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.INT4[in_string_1] != 0;
    assume {:nonnull} in_string_1 != 0;
    assume in_string_1 > 0;
    goto anon9_Then;

  anon9_Then:
    assume {:partition} Mem_T.INT4[in_string_1] != in_c_1;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    call {:si_unique_call 3377} {:si_old_unique_call 1} StringChr_loop_L5(in_string_1, in_c_1);
    return;
}



procedure {:LoopProcedure} StringChr_loop_L5(in_string_1: int, in_c_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptGetPortNameFromPhysicalDeviceObject_loop_L28(in_buffer_12: int, in_Tmp_1791: int, in_sdv_1183: int, in_status_59: int, in_resultLength: int, in_bufferLength_2: int) returns (out_buffer_12: int, out_Tmp_1791: int, out_sdv_1183: int, out_status_59: int, out_resultLength: int, out_bufferLength_2: int)
{

  entry:
    out_buffer_12, out_Tmp_1791, out_sdv_1183, out_status_59, out_resultLength, out_bufferLength_2 := in_buffer_12, in_Tmp_1791, in_sdv_1183, in_status_59, in_resultLength, in_bufferLength_2;
    goto L28, exit;

  exit:
    return;

  L28:
    goto anon40_Else;

  anon40_Else:
    assume {:partition} out_status_59 == -1073741789;
    call {:si_unique_call 3380} out_Tmp_1791 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1791 != 0;
    assume out_Tmp_1791 > 0;
    Mem_T.INT4[out_Tmp_1791] := out_resultLength;
    call {:si_unique_call 3381} out_status_59 := ZwQueryValueKey(0, 0, 1, 0, out_bufferLength_2, out_Tmp_1791);
    assume {:nonnull} out_Tmp_1791 != 0;
    assume out_Tmp_1791 > 0;
    out_resultLength := Mem_T.INT4[out_Tmp_1791];
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} out_status_59 == -1073741789;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} out_buffer_12 != 0;
    call {:si_unique_call 3379} sdv_ExFreePool(0);
    goto L38;

  L38:
    call {:si_unique_call 3378} out_sdv_1183 := ExAllocatePoolWithTag(257, out_resultLength, -797810352);
    goto anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    out_buffer_12 := out_sdv_1183;
    out_bufferLength_2 := out_resultLength;
    goto anon54_Then;

  anon54_Then:
    assume {:partition} out_buffer_12 != 0;
    goto anon54_Then_dummy;

  anon54_Then_dummy:
    goto L_BAF_9;

  L_BAF_9:
    call {:si_unique_call 3382} {:si_old_unique_call 1} out_buffer_12, out_Tmp_1791, out_sdv_1183, out_status_59, out_resultLength, out_bufferLength_2 := PptGetPortNameFromPhysicalDeviceObject_loop_L28(out_buffer_12, out_Tmp_1791, out_sdv_1183, out_status_59, out_resultLength, out_bufferLength_2);
    return;

  anon42_Then:
    assume {:partition} out_buffer_12 == 0;
    goto L38;

  anon41_Then:
    assume {:partition} out_status_59 != -1073741789;
    goto anon41_Then_dummy;

  anon41_Then_dummy:
    goto L_BAF_9;
}



procedure {:LoopProcedure} PptGetPortNameFromPhysicalDeviceObject_loop_L28(in_buffer_12: int, in_Tmp_1791: int, in_sdv_1183: int, in_status_59: int, in_resultLength: int, in_bufferLength_2: int) returns (out_buffer_12: int, out_Tmp_1791: int, out_sdv_1183: int, out_status_59: int, out_resultLength: int, out_bufferLength_2: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_status_59 == -1073741811 || out_status_59 == -1073741823 || out_status_59 == 0 || out_status_59 == 5 || out_status_59 == -1073741789 || out_status_59 == in_status_59;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptInterruptService_loop_L8(in_sdv_1188: int, in_Current: int, in_sdv_1189: int, in_IsrListEntry_1: int) returns (out_sdv_1188: int, out_Current: int, out_IsrListEntry_1: int)
{

  entry:
    out_sdv_1188, out_Current, out_IsrListEntry_1 := in_sdv_1188, in_Current, in_IsrListEntry_1;
    goto L8, exit;

  exit:
    return;

  L8:
    goto anon5_Else;

  anon5_Else:
    call {:si_unique_call 3383} out_sdv_1188 := sdv_containing_record(out_Current, 0);
    out_IsrListEntry_1 := out_sdv_1188;
    assume {:nonnull} out_IsrListEntry_1 != 0;
    assume out_IsrListEntry_1 > 0;
    goto anon6_Then;

  anon6_Then:
    assume {:partition} in_sdv_1189 == 0;
    assume {:nonnull} out_Current != 0;
    assume out_Current > 0;
    havoc out_Current;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    havoc out_Current;
    return;
}



procedure {:LoopProcedure} PptInterruptService_loop_L8(in_sdv_1188: int, in_Current: int, in_sdv_1189: int, in_IsrListEntry_1: int) returns (out_sdv_1188: int, out_Current: int, out_IsrListEntry_1: int);
  free ensures {:va_keep} out_sdv_1188 == in_Current || out_sdv_1188 == in_sdv_1188;
  free ensures {:va_keep} out_IsrListEntry_1 == in_Current || out_IsrListEntry_1 == in_IsrListEntry_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFdoSurpriseRemoval_loop_L17(in_Tmp_1890: int, in_cancelIrql_1: int, in_sdv_1256: int, in_sdv_1257: int, in_fdx_43: int, in_nextIrp_1: int, in_DeviceObject_39: int) returns (out_Tmp_1890: int, out_cancelIrql_1: int, out_sdv_1256: int, out_sdv_1257: int, out_nextIrp_1: int)
{
  var vslice_dummy_var_294: int;

  entry:
    out_Tmp_1890, out_cancelIrql_1, out_sdv_1256, out_sdv_1257, out_nextIrp_1 := in_Tmp_1890, in_cancelIrql_1, in_sdv_1256, in_sdv_1257, in_nextIrp_1;
    goto L17, exit;

  exit:
    return;

  L17:
    call {:si_unique_call 3384} out_sdv_1256 := sdv_IsListEmpty(0);
    goto anon3_Then;

  anon3_Then:
    assume {:partition} out_sdv_1256 == 0;
    assume {:nonnull} in_fdx_43 != 0;
    assume in_fdx_43 > 0;
    havoc vslice_dummy_var_294;
    call {:si_unique_call 3385} out_sdv_1257 := sdv_containing_record(vslice_dummy_var_294, 88);
    out_nextIrp_1 := out_sdv_1257;
    assume {:nonnull} out_nextIrp_1 != 0;
    assume out_nextIrp_1 > 0;
    assume {:nonnull} out_nextIrp_1 != 0;
    assume out_nextIrp_1 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(out_nextIrp_1)] := out_cancelIrql_1;
    assume {:nonnull} out_nextIrp_1 != 0;
    assume out_nextIrp_1 > 0;
    call {:si_unique_call 3386} PptCancelRoutine(in_DeviceObject_39, out_nextIrp_1);
    call {:si_unique_call 3387} out_Tmp_1890 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1890 != 0;
    assume out_Tmp_1890 > 0;
    Mem_T.INT4[out_Tmp_1890] := out_cancelIrql_1;
    call {:si_unique_call 3388} IoAcquireCancelSpinLock(out_Tmp_1890);
    assume {:nonnull} out_Tmp_1890 != 0;
    assume out_Tmp_1890 > 0;
    out_cancelIrql_1 := Mem_T.INT4[out_Tmp_1890];
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    call {:si_unique_call 3389} {:si_old_unique_call 1} out_Tmp_1890, out_cancelIrql_1, out_sdv_1256, out_sdv_1257, out_nextIrp_1 := PptFdoSurpriseRemoval_loop_L17(out_Tmp_1890, out_cancelIrql_1, out_sdv_1256, out_sdv_1257, in_fdx_43, out_nextIrp_1, in_DeviceObject_39);
    return;
}



procedure {:LoopProcedure} PptFdoSurpriseRemoval_loop_L17(in_Tmp_1890: int, in_cancelIrql_1: int, in_sdv_1256: int, in_sdv_1257: int, in_fdx_43: int, in_nextIrp_1: int, in_DeviceObject_39: int) returns (out_Tmp_1890: int, out_cancelIrql_1: int, out_sdv_1256: int, out_sdv_1257: int, out_nextIrp_1: int);
  modifies Mem_T.CancelIrql__IRP, alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_1256 == 1 || out_sdv_1256 == 0 || out_sdv_1256 == in_sdv_1256;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 3} PptFdoRemoveDevice_loop_L24(in_Tmp_1898: int, in_daisyChainId_1: int, in_Tmp_1900: int, in_daisyChainMaxId: int, in_Tmp_1901: int, in_fdx_45: int, in_Tmp_1903: int, in_pdo_5: int, in_Tmp_1904: int, in_Tmp_1905: int) returns (out_Tmp_1898: int, out_daisyChainId_1: int, out_Tmp_1900: int, out_Tmp_1901: int, out_Tmp_1903: int, out_pdo_5: int, out_Tmp_1904: int, out_Tmp_1905: int)
{

  entry:
    out_Tmp_1898, out_daisyChainId_1, out_Tmp_1900, out_Tmp_1901, out_Tmp_1903, out_pdo_5, out_Tmp_1904, out_Tmp_1905 := in_Tmp_1898, in_daisyChainId_1, in_Tmp_1900, in_Tmp_1901, in_Tmp_1903, in_pdo_5, in_Tmp_1904, in_Tmp_1905;
    goto L24, exit;

  exit:
    return;

  L24:
    goto anon16_Else;

  anon16_Else:
    assume {:partition} in_daisyChainMaxId >= out_daisyChainId_1;
    out_Tmp_1898 := out_daisyChainId_1;
    assume {:nonnull} in_fdx_45 != 0;
    assume in_fdx_45 > 0;
    havoc out_Tmp_1903;
    assume {:nonnull} out_Tmp_1903 != 0;
    assume out_Tmp_1903 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    out_Tmp_1901 := out_daisyChainId_1;
    assume {:nonnull} in_fdx_45 != 0;
    assume in_fdx_45 > 0;
    havoc out_Tmp_1900;
    assume {:nonnull} out_Tmp_1900 != 0;
    assume out_Tmp_1900 > 0;
    havoc out_pdo_5;
    call {:si_unique_call 3390} P4DestroyPdo(out_pdo_5);
    out_Tmp_1904 := out_daisyChainId_1;
    assume {:nonnull} in_fdx_45 != 0;
    assume in_fdx_45 > 0;
    havoc out_Tmp_1905;
    assume {:nonnull} out_Tmp_1905 != 0;
    assume out_Tmp_1905 > 0;
    goto L27;

  L27:
    out_daisyChainId_1 := out_daisyChainId_1 + 1;
    goto L27_dummy;

  L27_dummy:
    call {:si_unique_call 3391} {:si_old_unique_call 1} out_Tmp_1898, out_daisyChainId_1, out_Tmp_1900, out_Tmp_1901, out_Tmp_1903, out_pdo_5, out_Tmp_1904, out_Tmp_1905 := PptFdoRemoveDevice_loop_L24(out_Tmp_1898, out_daisyChainId_1, out_Tmp_1900, in_daisyChainMaxId, out_Tmp_1901, in_fdx_45, out_Tmp_1903, out_pdo_5, out_Tmp_1904, out_Tmp_1905);
    return;

  anon21_Then:
    goto L27;
}



procedure {:LoopProcedure} PptFdoRemoveDevice_loop_L24(in_Tmp_1898: int, in_daisyChainId_1: int, in_Tmp_1900: int, in_daisyChainMaxId: int, in_Tmp_1901: int, in_fdx_45: int, in_Tmp_1903: int, in_pdo_5: int, in_Tmp_1904: int, in_Tmp_1905: int) returns (out_Tmp_1898: int, out_daisyChainId_1: int, out_Tmp_1900: int, out_Tmp_1901: int, out_Tmp_1903: int, out_pdo_5: int, out_Tmp_1904: int, out_Tmp_1905: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptDetectEppPort_loop_L21(in_i_37: int, in_Controller_24: int, in_sdv_1287: int) returns (out_i_37: int, out_sdv_1287: int)
{

  entry:
    out_i_37, out_sdv_1287 := in_i_37, in_sdv_1287;
    goto L21, exit;

  exit:
    return;

  L21:
    assume {:CounterLoop 1} {:Counter "i_37"} true;
    goto anon5_Else;

  anon5_Else:
    assume {:partition} 2 >= out_i_37;
    call {:si_unique_call 3392} out_sdv_1287 := corral_nondet();
    goto anon6_Then;

  anon6_Then:
    assume {:partition} out_sdv_1287 == out_i_37;
    out_i_37 := out_i_37 + 1;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    havoc out_i_37;
    return;
}



procedure {:LoopProcedure} PptDetectEppPort_loop_L21(in_i_37: int, in_Controller_24: int, in_sdv_1287: int) returns (out_i_37: int, out_sdv_1287: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptBuildResourceList_loop_L11(in_i_38: int, in_Tmp_1941: int, in_Tmp_1943: int, in_Tmp_1945: int, in_Tmp_1946: int, in_Tmp_1947: int, in_Tmp_1948: int, in_Tmp_1949: int, in_Tmp_1950: int, in_Tmp_1951: int, in_Tmp_1954: int, in_Tmp_1956: int, in_Tmp_1957: int, in_Tmp_1958: int, in_Tmp_1959: int, in_Tmp_1960: int, in_Tmp_1961: int, in_Partial: int, in_Addresses: int, in_Resources_1: int) returns (out_i_38: int, out_Tmp_1941: int, out_Tmp_1943: int, out_Tmp_1945: int, out_Tmp_1946: int, out_Tmp_1947: int, out_Tmp_1948: int, out_Tmp_1949: int, out_Tmp_1950: int, out_Tmp_1951: int, out_Tmp_1954: int, out_Tmp_1956: int, out_Tmp_1957: int, out_Tmp_1958: int, out_Tmp_1959: int, out_Tmp_1960: int, out_Tmp_1961: int)
{

  entry:
    out_i_38, out_Tmp_1941, out_Tmp_1943, out_Tmp_1945, out_Tmp_1946, out_Tmp_1947, out_Tmp_1948, out_Tmp_1949, out_Tmp_1950, out_Tmp_1951, out_Tmp_1954, out_Tmp_1956, out_Tmp_1957, out_Tmp_1958, out_Tmp_1959, out_Tmp_1960, out_Tmp_1961 := in_i_38, in_Tmp_1941, in_Tmp_1943, in_Tmp_1945, in_Tmp_1946, in_Tmp_1947, in_Tmp_1948, in_Tmp_1949, in_Tmp_1950, in_Tmp_1951, in_Tmp_1954, in_Tmp_1956, in_Tmp_1957, in_Tmp_1958, in_Tmp_1959, in_Tmp_1960, in_Tmp_1961;
    goto L11, exit;

  exit:
    return;

  L11:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} in_Partial > out_i_38;
    out_Tmp_1947 := out_i_38;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1960;
    assume {:nonnull} out_Tmp_1960 != 0;
    assume out_Tmp_1960 > 0;
    havoc out_Tmp_1941;
    assume {:nonnull} out_Tmp_1941 != 0;
    assume out_Tmp_1941 > 0;
    out_Tmp_1951 := out_i_38;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1954;
    assume {:nonnull} out_Tmp_1954 != 0;
    assume out_Tmp_1954 > 0;
    havoc out_Tmp_1950;
    assume {:nonnull} out_Tmp_1950 != 0;
    assume out_Tmp_1950 > 0;
    out_Tmp_1956 := out_i_38;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1961;
    assume {:nonnull} out_Tmp_1961 != 0;
    assume out_Tmp_1961 > 0;
    havoc out_Tmp_1949;
    assume {:nonnull} out_Tmp_1949 != 0;
    assume out_Tmp_1949 > 0;
    out_Tmp_1945 := out_i_38;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1946;
    assume {:nonnull} out_Tmp_1946 != 0;
    assume out_Tmp_1946 > 0;
    havoc out_Tmp_1959;
    out_Tmp_1957 := out_i_38;
    assume {:nonnull} in_Addresses != 0;
    assume in_Addresses > 0;
    assume {:nonnull} out_Tmp_1959 != 0;
    assume out_Tmp_1959 > 0;
    out_Tmp_1958 := out_i_38;
    assume {:nonnull} in_Resources_1 != 0;
    assume in_Resources_1 > 0;
    havoc out_Tmp_1943;
    assume {:nonnull} out_Tmp_1943 != 0;
    assume out_Tmp_1943 > 0;
    havoc out_Tmp_1948;
    assume {:nonnull} out_Tmp_1948 != 0;
    assume out_Tmp_1948 > 0;
    out_i_38 := out_i_38 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3393} {:si_old_unique_call 1} out_i_38, out_Tmp_1941, out_Tmp_1943, out_Tmp_1945, out_Tmp_1946, out_Tmp_1947, out_Tmp_1948, out_Tmp_1949, out_Tmp_1950, out_Tmp_1951, out_Tmp_1954, out_Tmp_1956, out_Tmp_1957, out_Tmp_1958, out_Tmp_1959, out_Tmp_1960, out_Tmp_1961 := PptBuildResourceList_loop_L11(out_i_38, out_Tmp_1941, out_Tmp_1943, out_Tmp_1945, out_Tmp_1946, out_Tmp_1947, out_Tmp_1948, out_Tmp_1949, out_Tmp_1950, out_Tmp_1951, out_Tmp_1954, out_Tmp_1956, out_Tmp_1957, out_Tmp_1958, out_Tmp_1959, out_Tmp_1960, out_Tmp_1961, in_Partial, in_Addresses, in_Resources_1);
    return;
}



procedure {:LoopProcedure} PptBuildResourceList_loop_L11(in_i_38: int, in_Tmp_1941: int, in_Tmp_1943: int, in_Tmp_1945: int, in_Tmp_1946: int, in_Tmp_1947: int, in_Tmp_1948: int, in_Tmp_1949: int, in_Tmp_1950: int, in_Tmp_1951: int, in_Tmp_1954: int, in_Tmp_1956: int, in_Tmp_1957: int, in_Tmp_1958: int, in_Tmp_1959: int, in_Tmp_1960: int, in_Tmp_1961: int, in_Partial: int, in_Addresses: int, in_Resources_1: int) returns (out_i_38: int, out_Tmp_1941: int, out_Tmp_1943: int, out_Tmp_1945: int, out_Tmp_1946: int, out_Tmp_1947: int, out_Tmp_1948: int, out_Tmp_1949: int, out_Tmp_1950: int, out_Tmp_1951: int, out_Tmp_1954: int, out_Tmp_1956: int, out_Tmp_1957: int, out_Tmp_1958: int, out_Tmp_1959: int, out_Tmp_1960: int, out_Tmp_1961: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptDetermineFifoDepth_loop_L49(in_Tmp_1962: int, in_limitCount: int, in_testData: int, in_sdv_1300: int, in_readFifoDepth: int, in_Tmp_1968: int) returns (out_Tmp_1962: int, out_limitCount: int, out_testData: int, out_sdv_1300: int, out_readFifoDepth: int, out_Tmp_1968: int)
{

  entry:
    out_Tmp_1962, out_limitCount, out_testData, out_sdv_1300, out_readFifoDepth, out_Tmp_1968 := in_Tmp_1962, in_limitCount, in_testData, in_sdv_1300, in_readFifoDepth, in_Tmp_1968;
    goto L49, exit;

  exit:
    return;

  L49:
    call {:si_unique_call 3394} out_sdv_1300 := corral_nondet();
    out_Tmp_1968 := BAND(out_sdv_1300, BOR(1, 2));
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_Tmp_1968 != 1;
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 4098 >= out_limitCount;
    call {:si_unique_call 3395} out_testData := corral_nondet();
    out_Tmp_1962 := BAND(out_readFifoDepth, BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128));
    goto anon21_Then;

  anon21_Then:
    assume {:partition} out_testData == out_Tmp_1962;
    out_readFifoDepth := out_readFifoDepth + 1;
    out_limitCount := out_limitCount + 1;
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    call {:si_unique_call 3396} {:si_old_unique_call 1} out_Tmp_1962, out_limitCount, out_testData, out_sdv_1300, out_readFifoDepth, out_Tmp_1968 := PptDetermineFifoDepth_loop_L49(out_Tmp_1962, out_limitCount, out_testData, out_sdv_1300, out_readFifoDepth, out_Tmp_1968);
    return;
}



procedure {:LoopProcedure} PptDetermineFifoDepth_loop_L49(in_Tmp_1962: int, in_limitCount: int, in_testData: int, in_sdv_1300: int, in_readFifoDepth: int, in_Tmp_1968: int) returns (out_Tmp_1962: int, out_limitCount: int, out_testData: int, out_sdv_1300: int, out_readFifoDepth: int, out_Tmp_1968: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptDetermineFifoDepth_loop_L35(in_limitCount: int, in_writeFifoDepth: int, in_sdv_1299: int, in_Tmp_1966: int) returns (out_limitCount: int, out_writeFifoDepth: int, out_sdv_1299: int, out_Tmp_1966: int)
{

  entry:
    out_limitCount, out_writeFifoDepth, out_sdv_1299, out_Tmp_1966 := in_limitCount, in_writeFifoDepth, in_sdv_1299, in_Tmp_1966;
    goto L35, exit;

  exit:
    return;

  L35:
    call {:si_unique_call 3397} out_sdv_1299 := corral_nondet();
    out_Tmp_1966 := BAND(out_sdv_1299, BOR(1, 2));
    goto anon19_Else;

  anon19_Else:
    assume {:partition} out_Tmp_1966 != 2;
    goto anon15_Else;

  anon15_Else:
    assume {:partition} 4098 >= out_limitCount;
    out_writeFifoDepth := out_writeFifoDepth + 1;
    out_limitCount := out_limitCount + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    call {:si_unique_call 3398} {:si_old_unique_call 1} out_limitCount, out_writeFifoDepth, out_sdv_1299, out_Tmp_1966 := PptDetermineFifoDepth_loop_L35(out_limitCount, out_writeFifoDepth, out_sdv_1299, out_Tmp_1966);
    return;
}



procedure {:LoopProcedure} PptDetermineFifoDepth_loop_L35(in_limitCount: int, in_writeFifoDepth: int, in_sdv_1299: int, in_Tmp_1966: int) returns (out_limitCount: int, out_writeFifoDepth: int, out_sdv_1299: int, out_Tmp_1966: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptTrySelectDevice#0_loop_L34(in_i_24: int, in_Tmp_1286: int, in_success: int, in_Extension_51: int, in_DeviceID: int) returns (out_i_24: int, out_Tmp_1286: int, out_success: int)
{
  var vslice_dummy_var_295: int;

  entry:
    out_i_24, out_Tmp_1286, out_success := in_i_24, in_Tmp_1286, in_success;
    goto L34, exit;

  exit:
    return;

  L34:
    goto anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > out_i_24;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_success == 0;
    out_Tmp_1286 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_51 != 0;
    assume in_Extension_51 > 0;
    havoc vslice_dummy_var_295;
    call {:si_unique_call 3399} out_success := PptSend1284_3Command(vslice_dummy_var_295, out_Tmp_1286);
    out_i_24 := out_i_24 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 3400} {:si_old_unique_call 1} out_i_24, out_Tmp_1286, out_success := PptTrySelectDevice#0_loop_L34(out_i_24, out_Tmp_1286, out_success, in_Extension_51, in_DeviceID);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#0_loop_L34(in_i_24: int, in_Tmp_1286: int, in_success: int, in_Extension_51: int, in_DeviceID: int) returns (out_i_24: int, out_Tmp_1286: int, out_success: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1286 == in_Tmp_1286 || out_Tmp_1286 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptTrySelectDevice#0_loop_L69(in_i_24: int, in_success: int, in_Extension_51: int, in_DeviceID: int, in_Tmp_1288: int) returns (out_i_24: int, out_success: int, out_Tmp_1288: int)
{
  var vslice_dummy_var_296: int;

  entry:
    out_i_24, out_success, out_Tmp_1288 := in_i_24, in_success, in_Tmp_1288;
    goto L69, exit;

  exit:
    return;

  L69:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > out_i_24;
    goto anon47_Else;

  anon47_Else:
    assume {:partition} out_success == 0;
    out_Tmp_1288 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_51 != 0;
    assume in_Extension_51 > 0;
    havoc vslice_dummy_var_296;
    call {:si_unique_call 3401} out_success := PptSend1284_3Command(vslice_dummy_var_296, out_Tmp_1288);
    out_i_24 := out_i_24 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    call {:si_unique_call 3402} {:si_old_unique_call 1} out_i_24, out_success, out_Tmp_1288 := PptTrySelectDevice#0_loop_L69(out_i_24, out_success, in_Extension_51, in_DeviceID, out_Tmp_1288);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#0_loop_L69(in_i_24: int, in_success: int, in_Extension_51: int, in_DeviceID: int, in_Tmp_1288: int) returns (out_i_24: int, out_success: int, out_Tmp_1288: int);
  modifies alloc;
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} out_Tmp_1288 == in_Tmp_1288 || out_Tmp_1288 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptTrySelectDevice#1_loop_L34(in_i_24: int, in_Tmp_1286: int, in_success: int, in_Extension_51: int, in_DeviceID: int) returns (out_i_24: int, out_Tmp_1286: int, out_success: int)
{
  var vslice_dummy_var_297: int;

  entry:
    out_i_24, out_Tmp_1286, out_success := in_i_24, in_Tmp_1286, in_success;
    goto L34, exit;

  exit:
    return;

  L34:
    goto anon40_Else;

  anon40_Else:
    assume {:partition} PptDot3Retries > out_i_24;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} out_success == 0;
    out_Tmp_1286 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_51 != 0;
    assume in_Extension_51 > 0;
    havoc vslice_dummy_var_297;
    call {:si_unique_call 3403} out_success := PptSend1284_3Command(vslice_dummy_var_297, out_Tmp_1286);
    out_i_24 := out_i_24 + 1;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 3404} {:si_old_unique_call 1} out_i_24, out_Tmp_1286, out_success := PptTrySelectDevice#1_loop_L34(out_i_24, out_Tmp_1286, out_success, in_Extension_51, in_DeviceID);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#1_loop_L34(in_i_24: int, in_Tmp_1286: int, in_success: int, in_Extension_51: int, in_DeviceID: int) returns (out_i_24: int, out_Tmp_1286: int, out_success: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1286 == in_Tmp_1286 || out_Tmp_1286 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptTrySelectDevice#1_loop_L69(in_i_24: int, in_success: int, in_Extension_51: int, in_DeviceID: int, in_Tmp_1288: int) returns (out_i_24: int, out_success: int, out_Tmp_1288: int)
{
  var vslice_dummy_var_298: int;

  entry:
    out_i_24, out_success, out_Tmp_1288 := in_i_24, in_success, in_Tmp_1288;
    goto L69, exit;

  exit:
    return;

  L69:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} PptDot3Retries > out_i_24;
    goto anon47_Else;

  anon47_Else:
    assume {:partition} out_success == 0;
    out_Tmp_1288 := BOR(BOR(BOR(32, 64), 128), in_DeviceID);
    assume {:nonnull} in_Extension_51 != 0;
    assume in_Extension_51 > 0;
    havoc vslice_dummy_var_298;
    call {:si_unique_call 3405} out_success := PptSend1284_3Command(vslice_dummy_var_298, out_Tmp_1288);
    out_i_24 := out_i_24 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    call {:si_unique_call 3406} {:si_old_unique_call 1} out_i_24, out_success, out_Tmp_1288 := PptTrySelectDevice#1_loop_L69(out_i_24, out_success, in_Extension_51, in_DeviceID, out_Tmp_1288);
    return;
}



procedure {:LoopProcedure} PptTrySelectDevice#1_loop_L69(in_i_24: int, in_success: int, in_Extension_51: int, in_DeviceID: int, in_Tmp_1288: int) returns (out_i_24: int, out_success: int, out_Tmp_1288: int);
  modifies alloc;
  free ensures {:va_keep} out_success == 1 || out_success == 0 || out_success == in_success;
  free ensures {:va_keep} out_Tmp_1288 == in_Tmp_1288 || out_Tmp_1288 == BOR(BOR(BOR(32, 64), 128), in_DeviceID);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptDeselectLegacyZip#0_loop_L11(in_i_32: int, in_Tmp_1455: int, in_Controller_11: int, in_Tmp_1456: int) returns (out_i_32: int, out_Tmp_1455: int, out_Tmp_1456: int)
{

  entry:
    out_i_32, out_Tmp_1455, out_Tmp_1456 := in_i_32, in_Tmp_1455, in_Tmp_1456;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 3} {:Counter "i_32"} true;
    goto anon5_Else;

  anon5_Else:
    assume {:partition} 3 > out_i_32;
    out_Tmp_1456 := out_i_32;
    havoc out_Tmp_1455;
    call {:si_unique_call 3407} PptLegacyZipClockPrtModeByte(in_Controller_11, out_Tmp_1455);
    out_i_32 := out_i_32 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    havoc out_i_32;
    return;
}



procedure {:LoopProcedure} PptDeselectLegacyZip#0_loop_L11(in_i_32: int, in_Tmp_1455: int, in_Controller_11: int, in_Tmp_1456: int) returns (out_i_32: int, out_Tmp_1455: int, out_Tmp_1456: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1456 == in_i_32 || out_Tmp_1456 == in_Tmp_1456;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptDeselectLegacyZip#1_loop_L11(in_i_32: int, in_Tmp_1455: int, in_Controller_11: int, in_Tmp_1456: int) returns (out_i_32: int, out_Tmp_1455: int, out_Tmp_1456: int)
{

  entry:
    out_i_32, out_Tmp_1455, out_Tmp_1456 := in_i_32, in_Tmp_1455, in_Tmp_1456;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 3} {:Counter "i_32"} true;
    goto anon5_Else;

  anon5_Else:
    assume {:partition} 3 > out_i_32;
    out_Tmp_1456 := out_i_32;
    havoc out_Tmp_1455;
    call {:si_unique_call 3408} PptLegacyZipClockPrtModeByte(in_Controller_11, out_Tmp_1455);
    out_i_32 := out_i_32 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    havoc out_i_32;
    return;
}



procedure {:LoopProcedure} PptDeselectLegacyZip#1_loop_L11(in_i_32: int, in_Tmp_1455: int, in_Controller_11: int, in_Tmp_1456: int) returns (out_i_32: int, out_Tmp_1455: int, out_Tmp_1456: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_1456 == in_i_32 || out_Tmp_1456 == in_Tmp_1456;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFreePort#0_loop_L29(in_Irp_62: int, in_Allocated: int, in_IrpSp_6: int, in_sdv_1083: int, in_Tmp_1598: int, in_Head_1: int, in_fdx_30: int, in_CancelIrql_6: int, in_SyncContext_4: int, in_vslice_dummy_var_592: int, in_vslice_dummy_var_593: int, in_vslice_dummy_var_594: int, in_vslice_dummy_var_595: int, in_vslice_dummy_var_596: int) returns (out_Irp_62: int, out_Allocated: int, out_IrpSp_6: int, out_sdv_1083: int, out_Tmp_1598: int, out_Head_1: int, out_CancelIrql_6: int, out_vslice_dummy_var_592: int, out_vslice_dummy_var_593: int, out_vslice_dummy_var_594: int, out_vslice_dummy_var_595: int, out_vslice_dummy_var_596: int)
{
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;

  entry:
    out_Irp_62, out_Allocated, out_IrpSp_6, out_sdv_1083, out_Tmp_1598, out_Head_1, out_CancelIrql_6, out_vslice_dummy_var_592, out_vslice_dummy_var_593, out_vslice_dummy_var_594, out_vslice_dummy_var_595, out_vslice_dummy_var_596 := in_Irp_62, in_Allocated, in_IrpSp_6, in_sdv_1083, in_Tmp_1598, in_Head_1, in_CancelIrql_6, in_vslice_dummy_var_592, in_vslice_dummy_var_593, in_vslice_dummy_var_594, in_vslice_dummy_var_595, in_vslice_dummy_var_596;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon20_Then;

  anon20_Then:
    assume {:partition} out_Allocated == 0;
    assume {:nonnull} in_SyncContext_4 != 0;
    assume in_SyncContext_4 > 0;
    goto anon21_Else;

  anon21_Else:
    call {:si_unique_call 3416} out_Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1598 != 0;
    assume out_Tmp_1598 > 0;
    Mem_T.INT4[out_Tmp_1598] := out_CancelIrql_6;
    call {:si_unique_call 3417} IoAcquireCancelSpinLock(out_Tmp_1598);
    assume {:nonnull} out_Tmp_1598 != 0;
    assume out_Tmp_1598 > 0;
    out_CancelIrql_6 := Mem_T.INT4[out_Tmp_1598];
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    call {:si_unique_call 3418} out_Head_1 := RemoveHeadList(WorkQueue__FDO_EXTENSION(in_fdx_30));
    goto anon24_Then;

  anon24_Then:
    call {:si_unique_call 3414} out_sdv_1083 := sdv_containing_record(out_Head_1, 88);
    out_Irp_62 := out_sdv_1083;
    call {:si_unique_call 3415} out_vslice_dummy_var_596 := PptSetCancelRoutine(out_Irp_62, 0);
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    assume {:nonnull} in_SyncContext_4 != 0;
    assume in_SyncContext_4 > 0;
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 3419} out_vslice_dummy_var_593 := KeSynchronizeExecution(0, li2bplFunctionConstant193, 0);
    goto L74;

  L74:
    call {:si_unique_call 3411} IoReleaseCancelSpinLock(out_CancelIrql_6);
    goto L77;

  L77:
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    call {:si_unique_call 3409} out_vslice_dummy_var_594 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(in_fdx_30), out_Irp_62);
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    havoc vslice_dummy_var_299;
    havoc vslice_dummy_var_300;
    call {:si_unique_call 3410} out_vslice_dummy_var_595 := P4CompleteRequest(out_Irp_62, vslice_dummy_var_299, vslice_dummy_var_300);
    goto L77_dummy;

  L77_dummy:
    call {:si_unique_call 3421} {:si_old_unique_call 1} out_Irp_62, out_Allocated, out_IrpSp_6, out_sdv_1083, out_Tmp_1598, out_Head_1, out_CancelIrql_6, out_vslice_dummy_var_592, out_vslice_dummy_var_593, out_vslice_dummy_var_594, out_vslice_dummy_var_595, out_vslice_dummy_var_596 := PptFreePort#0_loop_L29(out_Irp_62, out_Allocated, out_IrpSp_6, out_sdv_1083, out_Tmp_1598, out_Head_1, in_fdx_30, out_CancelIrql_6, in_SyncContext_4, out_vslice_dummy_var_592, out_vslice_dummy_var_593, out_vslice_dummy_var_594, out_vslice_dummy_var_595, out_vslice_dummy_var_596);
    return;

  anon27_Then:
    call {:si_unique_call 3420} out_vslice_dummy_var_592 := PptSynchronizedDecrement(in_SyncContext_4);
    goto L74;

  anon25_Then:
    out_Allocated := 1;
    call {:si_unique_call 3412} IoReleaseCancelSpinLock(out_CancelIrql_6);
    call {:si_unique_call 3413} out_IrpSp_6 := sdv_IoGetCurrentIrpStackLocation(out_Irp_62);
    assume {:nonnull} out_IrpSp_6 != 0;
    assume out_IrpSp_6 > 0;
    goto anon26_Then;

  anon26_Then:
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    goto L98;

  L98:
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    goto L77;
}



procedure {:LoopProcedure} PptFreePort#0_loop_L29(in_Irp_62: int, in_Allocated: int, in_IrpSp_6: int, in_sdv_1083: int, in_Tmp_1598: int, in_Head_1: int, in_fdx_30: int, in_CancelIrql_6: int, in_SyncContext_4: int, in_vslice_dummy_var_592: int, in_vslice_dummy_var_593: int, in_vslice_dummy_var_594: int, in_vslice_dummy_var_595: int, in_vslice_dummy_var_596: int) returns (out_Irp_62: int, out_Allocated: int, out_IrpSp_6: int, out_sdv_1083: int, out_Tmp_1598: int, out_Head_1: int, out_CancelIrql_6: int, out_vslice_dummy_var_592: int, out_vslice_dummy_var_593: int, out_vslice_dummy_var_594: int, out_vslice_dummy_var_595: int, out_vslice_dummy_var_596: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_Allocated == 1 || out_Allocated == in_Allocated;
  free ensures {:va_keep} out_vslice_dummy_var_592 == 1 || out_vslice_dummy_var_592 == in_vslice_dummy_var_592;
  free ensures {:va_keep} out_vslice_dummy_var_593 == 1 || out_vslice_dummy_var_593 == 0 || out_vslice_dummy_var_593 == in_vslice_dummy_var_593;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PptFreePort#1_loop_L29(in_Irp_62: int, in_Allocated: int, in_IrpSp_6: int, in_sdv_1083: int, in_Tmp_1598: int, in_Command_5: int, in_Head_1: int, in_fdx_30: int, in_CancelIrql_6: int, in_SyncContext_4: int, in_Fdx_10: int, in_boogieTmp: int, in_vslice_dummy_var_601: int, in_vslice_dummy_var_602: int, in_vslice_dummy_var_603: int, in_vslice_dummy_var_604: int, in_vslice_dummy_var_605: int) returns (out_Irp_62: int, out_Allocated: int, out_IrpSp_6: int, out_sdv_1083: int, out_Tmp_1598: int, out_Command_5: int, out_Head_1: int, out_CancelIrql_6: int, out_boogieTmp: int, out_vslice_dummy_var_601: int, out_vslice_dummy_var_602: int, out_vslice_dummy_var_603: int, out_vslice_dummy_var_604: int, out_vslice_dummy_var_605: int)
{
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;

  entry:
    out_Irp_62, out_Allocated, out_IrpSp_6, out_sdv_1083, out_Tmp_1598, out_Command_5, out_Head_1, out_CancelIrql_6, out_boogieTmp, out_vslice_dummy_var_601, out_vslice_dummy_var_602, out_vslice_dummy_var_603, out_vslice_dummy_var_604, out_vslice_dummy_var_605 := in_Irp_62, in_Allocated, in_IrpSp_6, in_sdv_1083, in_Tmp_1598, in_Command_5, in_Head_1, in_CancelIrql_6, in_boogieTmp, in_vslice_dummy_var_601, in_vslice_dummy_var_602, in_vslice_dummy_var_603, in_vslice_dummy_var_604, in_vslice_dummy_var_605;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon20_Then;

  anon20_Then:
    assume {:partition} out_Allocated == 0;
    assume {:nonnull} in_SyncContext_4 != 0;
    assume in_SyncContext_4 > 0;
    goto anon21_Else;

  anon21_Else:
    call {:si_unique_call 3430} out_Tmp_1598 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1598 != 0;
    assume out_Tmp_1598 > 0;
    Mem_T.INT4[out_Tmp_1598] := out_CancelIrql_6;
    call {:si_unique_call 3431} IoAcquireCancelSpinLock(out_Tmp_1598);
    assume {:nonnull} out_Tmp_1598 != 0;
    assume out_Tmp_1598 > 0;
    out_CancelIrql_6 := Mem_T.INT4[out_Tmp_1598];
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    call {:si_unique_call 3432} out_Head_1 := RemoveHeadList(WorkQueue__FDO_EXTENSION(in_fdx_30));
    goto anon24_Then;

  anon24_Then:
    call {:si_unique_call 3428} out_sdv_1083 := sdv_containing_record(out_Head_1, 88);
    out_Irp_62 := out_sdv_1083;
    call {:si_unique_call 3429} out_vslice_dummy_var_605 := PptSetCancelRoutine(out_Irp_62, 0);
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    assume {:nonnull} in_SyncContext_4 != 0;
    assume in_SyncContext_4 > 0;
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 3433} out_vslice_dummy_var_602 := KeSynchronizeExecution(0, li2bplFunctionConstant193, 0);
    goto L74;

  L74:
    call {:si_unique_call 3424} IoReleaseCancelSpinLock(out_CancelIrql_6);
    goto L77;

  L77:
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    call {:si_unique_call 3422} out_vslice_dummy_var_603 := sdv_IoReleaseRemoveLock(RemoveLock__FDO_EXTENSION(in_fdx_30), out_Irp_62);
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    havoc vslice_dummy_var_301;
    havoc vslice_dummy_var_302;
    call {:si_unique_call 3423} out_vslice_dummy_var_604 := P4CompleteRequest(out_Irp_62, vslice_dummy_var_301, vslice_dummy_var_302);
    goto L77_dummy;

  L77_dummy:
    call {:si_unique_call 3435} {:si_old_unique_call 1} out_Irp_62, out_Allocated, out_IrpSp_6, out_sdv_1083, out_Tmp_1598, out_Command_5, out_Head_1, out_CancelIrql_6, out_boogieTmp, out_vslice_dummy_var_601, out_vslice_dummy_var_602, out_vslice_dummy_var_603, out_vslice_dummy_var_604, out_vslice_dummy_var_605 := PptFreePort#1_loop_L29(out_Irp_62, out_Allocated, out_IrpSp_6, out_sdv_1083, out_Tmp_1598, out_Command_5, out_Head_1, in_fdx_30, out_CancelIrql_6, in_SyncContext_4, in_Fdx_10, out_boogieTmp, out_vslice_dummy_var_601, out_vslice_dummy_var_602, out_vslice_dummy_var_603, out_vslice_dummy_var_604, out_vslice_dummy_var_605);
    return;

  anon27_Then:
    call {:si_unique_call 3434} out_vslice_dummy_var_601 := PptSynchronizedDecrement(in_SyncContext_4);
    goto L74;

  anon25_Then:
    out_Allocated := 1;
    call {:si_unique_call 3426} IoReleaseCancelSpinLock(out_CancelIrql_6);
    call {:si_unique_call 3427} out_IrpSp_6 := sdv_IoGetCurrentIrpStackLocation(out_Irp_62);
    assume {:nonnull} out_IrpSp_6 != 0;
    assume out_IrpSp_6 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    havoc out_Command_5;
    assume {:nonnull} out_Command_5 != 0;
    assume out_Command_5 > 0;
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    call {:si_unique_call 3425} out_boogieTmp := PptTrySelectDevice#0(in_Fdx_10, out_Command_5);
    goto L98;

  L98:
    assume {:nonnull} in_fdx_30 != 0;
    assume in_fdx_30 > 0;
    goto L77;

  anon26_Then:
    assume {:nonnull} out_Irp_62 != 0;
    assume out_Irp_62 > 0;
    goto L98;
}



procedure {:LoopProcedure} PptFreePort#1_loop_L29(in_Irp_62: int, in_Allocated: int, in_IrpSp_6: int, in_sdv_1083: int, in_Tmp_1598: int, in_Command_5: int, in_Head_1: int, in_fdx_30: int, in_CancelIrql_6: int, in_SyncContext_4: int, in_Fdx_10: int, in_boogieTmp: int, in_vslice_dummy_var_601: int, in_vslice_dummy_var_602: int, in_vslice_dummy_var_603: int, in_vslice_dummy_var_604: int, in_vslice_dummy_var_605: int) returns (out_Irp_62: int, out_Allocated: int, out_IrpSp_6: int, out_sdv_1083: int, out_Tmp_1598: int, out_Command_5: int, out_Head_1: int, out_CancelIrql_6: int, out_boogieTmp: int, out_vslice_dummy_var_601: int, out_vslice_dummy_var_602: int, out_vslice_dummy_var_603: int, out_vslice_dummy_var_604: int, out_vslice_dummy_var_605: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_Allocated == 1 || out_Allocated == in_Allocated;
  free ensures {:va_keep} out_boogieTmp == -1073741811 || out_boogieTmp == 0 || out_boogieTmp == -1073741823 || out_boogieTmp == 259 || out_boogieTmp == in_boogieTmp;
  free ensures {:va_keep} out_vslice_dummy_var_601 == 1 || out_vslice_dummy_var_601 == in_vslice_dummy_var_601;
  free ensures {:va_keep} out_vslice_dummy_var_602 == 1 || out_vslice_dummy_var_602 == 0 || out_vslice_dummy_var_602 == in_vslice_dummy_var_602;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



procedure fakeMain() returns (Tmp_181: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:entrypoint} fakeMain() returns (Tmp_181: int, dup_assertVar: bool)
{

  start:
    call Tmp_181, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


