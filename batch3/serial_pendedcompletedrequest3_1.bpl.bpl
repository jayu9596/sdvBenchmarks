var {:scalar} alloc: int;

var {:scalar} io_complete_request_called: int;

var {:scalar} yogi_error: int;

var {:pointer} SLAM_guard_S_0: int;

var {:scalar} Mem_T.CurrentStackLocation_unnamed_tag_7: [int]int;

var {:scalar} Mem_T.INT4: [int]int;

var {:scalar} Mem_T.MajorFunction__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.PVOID: [int]int;

var {:scalar} Mem_T.P_IRP: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const SerialGlobals: int;

const SerialPhysicalZero: int;

const currentInstance_sdv_static_local_variable_304: int;

const SerialPhysicalZero_1: int;

const GUID_DEVINTERFACE_COMPORT: int;

const driverDefaults: int;

const sdv_cancelFptr: int;

const SLAM_guard_S_0_init: int;

const SerialPortNameGuid: int;

const SerailPortPerfGuid: int;

const SerialPortPropertiesGuid: int;

const SerialPortHWGuid: int;

const SerialPortCommGuid: int;

const SerialPhysicalZero_2: int;

const KdComPortInUse: int;

const SerialPhysicalZero_3: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_io_create_device_called: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_inside_init_entrypoint: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt: int, actual_DeviceIsOpened: int, actual_Reopen: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt: int, actual_DeviceIsOpened: int, actual_Reopen: int)
{
  var {:pointer} Tmp_5: int;
  var {:scalar} oldIrql: int;
  var {:pointer} PDevExt: int;
  var {:scalar} DeviceIsOpened: int;
  var {:scalar} Reopen: int;
  var vslice_dummy_var_1: int;

  anon0:
    call {:si_unique_call 1} vslice_dummy_var_1 := __HAVOC_malloc(4);
    PDevExt := actual_PDevExt;
    DeviceIsOpened := actual_DeviceIsOpened;
    Reopen := actual_Reopen;
    call {:si_unique_call 2} Tmp_5 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_5 != 0;
    assume Tmp_5 > 0;
    Mem_T.INT4[Tmp_5] := oldIrql;
    call {:si_unique_call 3} sdv_KeAcquireSpinLock(0, Tmp_5);
    assume {:nonnull} Tmp_5 != 0;
    assume Tmp_5 > 0;
    oldIrql := Mem_T.INT4[Tmp_5];
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 4} sdv_KeReleaseSpinLock(0, oldIrql);
    return;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_2: int;

  anon0:
    call {:si_unique_call 5} vslice_dummy_var_2 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialFinishSystemPower"} SerialFinishSystemPower(actual_PDevObj: int, actual_PIrp: int, actual_PContext: int) returns (Tmp_8: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialFinishSystemPower"} SerialFinishSystemPower(actual_PDevObj: int, actual_PIrp: int, actual_PContext: int) returns (Tmp_8: int)
{
  var {:pointer} sdv_4: int;
  var {:pointer} pDevExt: int;
  var {:pointer} pContext: int;
  var {:scalar} status: int;
  var {:pointer} pIrpSp: int;
  var {:pointer} Tmp_10: int;
  var {:pointer} PDevObj: int;
  var {:pointer} PIrp: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_1246: int;
  var vslice_dummy_var_1247: int;
  var vslice_dummy_var_1248: int;

  anon0:
    PDevObj := actual_PDevObj;
    PIrp := actual_PIrp;
    call {:si_unique_call 6} Tmp_10 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj != 0;
    assume PDevObj > 0;
    havoc pDevExt;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    status := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))];
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status >= 0;
    call {:si_unique_call 7} sdv_4 := ExAllocatePoolWithTag(512, 8, -666022077);
    pContext := sdv_4;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} pContext != 0;
    call {:si_unique_call 8} pIrpSp := sdv_IoGetCurrentIrpStackLocation(PIrp);
    assume {:nonnull} pContext != 0;
    assume pContext > 0;
    assume {:nonnull} pContext != 0;
    assume pContext > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    havoc vslice_dummy_var_1246;
    havoc vslice_dummy_var_1247;
    havoc vslice_dummy_var_1248;
    call {:si_unique_call 9} status := PoRequestPowerIrp#1(vslice_dummy_var_1246, vslice_dummy_var_1247, vslice_dummy_var_1248, li2bplFunctionConstant339, pContext, 0);
    goto L29;

  L29:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status >= 0;
    goto L31;

  L31:
    Tmp_8 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} 0 > status;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} pContext != 0;
    call {:si_unique_call 10} sdv_ExFreePool(0);
    goto L32;

  L32:
    call {:si_unique_call 11} PoStartNextPowerIrp(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status;
    Tmp_10 := strConst__li2bpl1;
    call {:si_unique_call 12} vslice_dummy_var_3 := SerialDbgPrintEx(9, Tmp_10);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 13} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L53;

  L53:
    call {:si_unique_call 14} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 15} SerialIRPEpilogue(pDevExt);
    goto L31;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L53;

  anon14_Then:
    assume {:partition} pContext == 0;
    goto L32;

  anon17_Then:
    assume {:partition} pContext == 0;
    status := -1073741670;
    goto L29;

  anon16_Then:
    assume {:partition} 0 > status;
    call {:si_unique_call 16} PoStartNextPowerIrp(0);
    Tmp_8 := status;
    goto L1;
}



procedure {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_1: int, actual_PDevExt_1: int, actual_DevPowerState: int) returns (Tmp_11: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_11 == 0 || Tmp_11 == -1073741584 || Tmp_11 == 259 || Tmp_11 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_1: int, actual_PDevExt_1: int, actual_DevPowerState: int) returns (Tmp_11: int)
{
  var {:scalar} powerState: int;
  var {:pointer} Tmp_13: int;
  var {:scalar} gotoPowEvent: int;
  var {:scalar} status_1: int;
  var {:pointer} Tmp_14: int;
  var {:pointer} PDevObj_1: int;
  var {:scalar} DevPowerState: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_6: int;

  anon0:
    call {:si_unique_call 17} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 18} gotoPowEvent := __HAVOC_malloc(156);
    PDevObj_1 := actual_PDevObj_1;
    DevPowerState := actual_DevPowerState;
    call {:si_unique_call 19} Tmp_13 := __HAVOC_malloc(100);
    call {:si_unique_call 20} Tmp_14 := __HAVOC_malloc(120);
    call {:si_unique_call 21} sdv_do_paged_code_check();
    Tmp_13 := strConst__li2bpl2;
    call {:si_unique_call 22} vslice_dummy_var_5 := SerialDbgPrintEx(11, Tmp_13);
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 23} KeInitializeEvent(gotoPowEvent, 1, 0);
    call {:si_unique_call 24} status_1 := PoRequestPowerIrp#1(PDevObj_1, 2, powerState, li2bplFunctionConstant336, gotoPowEvent, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_1 == 259;
    call {:si_unique_call 25} vslice_dummy_var_4 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    status_1 := 0;
    goto L21;

  L21:
    Tmp_14 := strConst__li2bpl3;
    call {:si_unique_call 26} vslice_dummy_var_6 := SerialDbgPrintEx(11, Tmp_14);
    Tmp_11 := status_1;
    return;

  anon3_Then:
    assume {:partition} status_1 != 259;
    goto L21;
}



procedure {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_17: int);
  modifies alloc, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_17: int)
{
  var {:pointer} pDevExt_2: int;
  var {:pointer} Tmp_18: int;
  var {:pointer} Tmp_20: int;
  var {:pointer} Tmp_21: int;
  var {:scalar} status_3: int;
  var {:pointer} PDevObj_3: int;
  var {:pointer} PIrp_1: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;

  anon0:
    PDevObj_3 := actual_PDevObj_3;
    PIrp_1 := actual_PIrp_1;
    call {:si_unique_call 27} Tmp_18 := __HAVOC_malloc(92);
    call {:si_unique_call 28} Tmp_20 := __HAVOC_malloc(84);
    call {:si_unique_call 29} Tmp_21 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_3 != 0;
    assume PDevObj_3 > 0;
    havoc pDevExt_2;
    call {:si_unique_call 30} vslice_dummy_var_7 := sdv_IoGetCurrentIrpStackLocation(PIrp_1);
    call {:si_unique_call 31} sdv_do_paged_code_check();
    Tmp_21 := strConst__li2bpl4;
    call {:si_unique_call 32} vslice_dummy_var_8 := SerialDbgPrintEx(11, Tmp_21);
    Tmp_18 := strConst__li2bpl5;
    call {:si_unique_call 33} vslice_dummy_var_9 := SerialDbgPrintEx(12, Tmp_18);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 34} KeClearEvent(PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_2));
    call {:si_unique_call 35} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_1);
    call {:si_unique_call 36} sdv_IoSetCompletionRoutine(PIrp_1, li2bplFunctionConstant343, 0, 1, 1, 1);
    Tmp_20 := strConst__li2bpl6;
    call {:si_unique_call 37} vslice_dummy_var_10 := SerialDbgPrintEx(12, Tmp_20);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume PIrp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 38} SLIC_PoCallDriver_entry(strConst__li2bpl0);
    goto L38;

  L38:
    call {:si_unique_call 39} status_3 := PoCallDriver(0, PIrp_1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_17 := status_3;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume !(PIrp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L38;
}



procedure {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_4: int, actual_PIrp_2: int) returns (Tmp_22: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.MajorFunction__IO_STACK_LOCATION, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_4: int, actual_PIrp_2: int) returns (Tmp_22: int)
{
  var {:pointer} Tmp_23: int;
  var {:pointer} Tmp_24: int;
  var {:pointer} Tmp_25: int;
  var {:pointer} pDevExt_3: int;
  var {:pointer} Tmp_26: int;
  var {:scalar} powerState_2: int;
  var {:pointer} Tmp_27: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} pLowerDevObj: int;
  var {:pointer} Tmp_28: int;
  var {:pointer} Tmp_29: int;
  var {:pointer} Tmp_30: int;
  var {:pointer} Tmp_32: int;
  var {:scalar} status_4: int;
  var {:pointer} Tmp_33: int;
  var {:pointer} Tmp_34: int;
  var {:scalar} Tmp_35: int;
  var {:pointer} Tmp_36: int;
  var {:pointer} Tmp_37: int;
  var {:pointer} Tmp_38: int;
  var {:pointer} PDevObj_4: int;
  var {:pointer} PIrp_2: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;

  anon0:
    call {:si_unique_call 40} powerState_2 := __HAVOC_malloc(8);
    PDevObj_4 := actual_PDevObj_4;
    PIrp_2 := actual_PIrp_2;
    call {:si_unique_call 41} Tmp_23 := __HAVOC_malloc(100);
    call {:si_unique_call 42} Tmp_24 := __HAVOC_malloc(72);
    call {:si_unique_call 43} Tmp_25 := __HAVOC_malloc(80);
    call {:si_unique_call 44} Tmp_26 := __HAVOC_malloc(72);
    call {:si_unique_call 45} Tmp_27 := __HAVOC_malloc(124);
    call {:si_unique_call 46} Tmp_28 := __HAVOC_malloc(72);
    call {:si_unique_call 47} Tmp_29 := __HAVOC_malloc(72);
    call {:si_unique_call 48} Tmp_30 := __HAVOC_malloc(28);
    call {:si_unique_call 49} Tmp_32 := __HAVOC_malloc(112);
    call {:si_unique_call 50} Tmp_33 := __HAVOC_malloc(136);
    call {:si_unique_call 51} Tmp_34 := __HAVOC_malloc(104);
    call {:si_unique_call 52} Tmp_36 := __HAVOC_malloc(72);
    call {:si_unique_call 53} Tmp_37 := __HAVOC_malloc(104);
    call {:si_unique_call 54} Tmp_38 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_4 != 0;
    assume PDevObj_4 > 0;
    havoc pDevExt_3;
    call {:si_unique_call 55} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(PIrp_2);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc pLowerDevObj;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 56} sdv_do_paged_code_check();
    call {:si_unique_call 57} status_4 := SerialIRPPrologue(PIrp_2, pDevExt_3);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} status_4 != 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} status_4 != 259;
    call {:si_unique_call 58} PoStartNextPowerIrp(0);
    Tmp_24 := strConst__li2bpl1;
    call {:si_unique_call 59} vslice_dummy_var_14 := SerialDbgPrintEx(9, Tmp_24);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 60} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_2);
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} yogi_error != 1;
    goto L249;

  L249:
    call {:si_unique_call 61} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 62} SerialIRPEpilogue(pDevExt_3);
    goto L26;

  L26:
    Tmp_22 := status_4;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon137_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon103_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L249;

  anon102_Then:
    assume {:partition} status_4 == 259;
    goto L26;

  anon101_Then:
    assume {:partition} status_4 == 0;
    status_4 := 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    Tmp_32 := strConst__li2bpl10;
    call {:si_unique_call 63} vslice_dummy_var_25 := SerialDbgPrintEx(12, Tmp_32);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto L57;

  L57:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := -1073741436;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    status_4 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    call {:si_unique_call 64} PoStartNextPowerIrp(0);
    Tmp_36 := strConst__li2bpl1;
    call {:si_unique_call 65} vslice_dummy_var_26 := SerialDbgPrintEx(9, Tmp_36);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 66} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_2);
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} yogi_error != 1;
    goto L273;

  L273:
    call {:si_unique_call 67} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 68} SerialIRPEpilogue(pDevExt_3);
    Tmp_22 := status_4;
    goto L1;

  anon149_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon108_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L273;

  anon107_Then:
    goto L58;

  L58:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := 0;
    status_4 := 0;
    call {:si_unique_call 69} PoStartNextPowerIrp(0);
    call {:si_unique_call 70} sdv_IoSkipCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 71} Tmp_22 := SerialPoCallDriver(pDevExt_3, pLowerDevObj, PIrp_2);
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon150_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon106_Then:
    goto L58;

  anon104_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto L58;

  anon105_Then:
    goto L57;

  anon124_Then:
    goto L40;

  L40:
    call {:si_unique_call 72} PoStartNextPowerIrp(0);
    call {:si_unique_call 73} sdv_IoSkipCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 74} status_4 := SerialPoCallDriver(pDevExt_3, pLowerDevObj, PIrp_2);
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} yogi_error != 1;
    Tmp_22 := status_4;
    goto L1;

  anon141_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon125_Then:
    Tmp_34 := strConst__li2bpl9;
    call {:si_unique_call 75} vslice_dummy_var_17 := SerialDbgPrintEx(12, Tmp_34);
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    Tmp_28 := strConst__li2bpl12;
    call {:si_unique_call 76} vslice_dummy_var_20 := SerialDbgPrintEx(12, Tmp_28);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    Tmp_33 := strConst__li2bpl13;
    call {:si_unique_call 77} vslice_dummy_var_21 := SerialDbgPrintEx(12, Tmp_33);
    status_4 := 0;
    goto L40;

  anon110_Then:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto L106;

  L106:
    Tmp_38 := strConst__li2bpl15;
    call {:si_unique_call 78} vslice_dummy_var_23 := SerialDbgPrintEx(12, Tmp_38);
    call {:si_unique_call 79} Tmp_22 := SerialSetPowerD3(PDevObj_4, PIrp_2);
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon148_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon134_Then:
    goto L40;

  anon135_Then:
    goto L106;

  anon136_Then:
    goto L106;

  anon111_Then:
    Tmp_23 := strConst__li2bpl14;
    call {:si_unique_call 80} vslice_dummy_var_22 := SerialDbgPrintEx(12, Tmp_23);
    call {:si_unique_call 81} Tmp_22 := SerialSetPowerD0(PDevObj_4, PIrp_2);
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon147_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon127_Then:
    Tmp_25 := strConst__li2bpl11;
    call {:si_unique_call 82} vslice_dummy_var_24 := SerialDbgPrintEx(12, Tmp_25);
    status_4 := 0;
    goto L40;

  anon109_Then:
    Tmp_29 := strConst__li2bpl16;
    call {:si_unique_call 83} vslice_dummy_var_18 := SerialDbgPrintEx(12, Tmp_29);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    status_4 := 0;
    goto L40;

  anon112_Then:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    goto L128;

  L128:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc Tmp_35;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_30;
    assume {:nonnull} Tmp_30 != 0;
    assume Tmp_30 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  L130:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_3)] != 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 84} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl0);
    goto L258;

  L258:
    call {:si_unique_call 85} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 86} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 87} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant340, 0, 1, 1, 1);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 88} SLIC_PoCallDriver_entry(strConst__li2bpl0);
    goto L261;

  L261:
    call {:si_unique_call 89} vslice_dummy_var_12 := PoCallDriver(0, PIrp_2);
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} yogi_error != 1;
    Tmp_22 := 259;
    goto L1;

  anon143_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon117_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L261;

  anon142_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L258;

  anon116_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_3)] == 0;
    goto L131;

  L131:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    goto L150;

  L150:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto L152;

  L152:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 90} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl0);
    goto L264;

  L264:
    call {:si_unique_call 91} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 92} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 93} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant340, 0, 1, 1, 1);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 94} SLIC_PoCallDriver_entry(strConst__li2bpl0);
    goto L267;

  L267:
    call {:si_unique_call 95} vslice_dummy_var_13 := PoCallDriver(0, PIrp_2);
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:partition} yogi_error != 1;
    Tmp_22 := 259;
    goto L1;

  anon145_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon121_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L267;

  anon144_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L264;

  anon120_Then:
    status_4 := -1073741436;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := status_4;
    call {:si_unique_call 96} PoStartNextPowerIrp(0);
    Tmp_26 := strConst__li2bpl1;
    call {:si_unique_call 97} vslice_dummy_var_19 := SerialDbgPrintEx(9, Tmp_26);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 98} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_2);
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} yogi_error != 1;
    goto L270;

  L270:
    call {:si_unique_call 99} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 100} SerialIRPEpilogue(pDevExt_3);
    Tmp_22 := status_4;
    goto L1;

  anon146_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon122_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L270;

  anon118_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    goto L152;

  anon119_Then:
    goto L150;

  anon115_Then:
    goto L40;

  anon114_Then:
    goto L131;

  anon128_Then:
    status_4 := 0;
    goto L40;

  anon129_Then:
    goto L128;

  anon130_Then:
    goto L128;

  anon131_Then:
    goto L128;

  anon132_Then:
    goto L128;

  anon133_Then:
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  anon113_Then:
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  anon126_Then:
    Tmp_27 := strConst__li2bpl8;
    call {:si_unique_call 101} vslice_dummy_var_16 := SerialDbgPrintEx(12, Tmp_27);
    goto L40;

  anon138_Then:
    Tmp_37 := strConst__li2bpl7;
    call {:si_unique_call 102} vslice_dummy_var_15 := SerialDbgPrintEx(12, Tmp_37);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 103} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl0);
    goto L252;

  L252:
    call {:si_unique_call 104} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 105} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 106} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant342, 0, 1, 1, 1);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 107} SLIC_PoCallDriver_entry(strConst__li2bpl0);
    goto L255;

  L255:
    call {:si_unique_call 108} vslice_dummy_var_11 := PoCallDriver(0, PIrp_2);
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} yogi_error != 1;
    Tmp_22 := 259;
    goto L1;

  anon140_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon139_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L255;

  anon123_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L252;
}



procedure {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_2: int) returns (Tmp_39: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_39 == -1073741436 || Tmp_39 == 0 || Tmp_39 == -1073741584 || Tmp_39 == 259 || Tmp_39 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_2: int) returns (Tmp_39: int)
{
  var {:scalar} powerState_3: int;
  var {:pointer} Tmp_40: int;
  var {:scalar} status_5: int;
  var {:pointer} PDevExt_2: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_1249: int;
  var vslice_dummy_var_1250: int;

  anon0:
    call {:si_unique_call 109} powerState_3 := __HAVOC_malloc(8);
    PDevExt_2 := actual_PDevExt_2;
    call {:si_unique_call 110} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_39 := -1073741436;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_39 := -1073741436;
    goto L1;

  anon12_Then:
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 111} Tmp_40 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} Tmp_40 != 0;
    assume Tmp_40 > 0;
    havoc vslice_dummy_var_1249;
    Mem_T.INT4[Tmp_40] := vslice_dummy_var_1249;
    call {:si_unique_call 112} vslice_dummy_var_27 := sdv_InterlockedIncrement(Tmp_40);
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} Tmp_40 != 0;
    assume Tmp_40 > 0;
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    havoc vslice_dummy_var_1250;
    call {:si_unique_call 113} status_5 := PoRequestPowerIrp#1(vslice_dummy_var_1250, 0, powerState_3, li2bplFunctionConstant348, PDevExt_2, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_5 == 259;
    status_5 := 0;
    goto L25;

  L25:
    Tmp_39 := status_5;
    goto L1;

  anon14_Then:
    assume {:partition} status_5 != 259;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_5 < 0;
    call {:si_unique_call 114} SerialIRPEpilogue(PDevExt_2);
    goto L25;

  anon15_Then:
    assume {:partition} 0 <= status_5;
    goto L25;

  anon13_Then:
    Tmp_39 := -1073741436;
    goto L1;
}



procedure {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_3: int)
{
  var {:pointer} pDevState: int;
  var {:pointer} Tmp_44: int;
  var {:pointer} Tmp_46: int;
  var {:pointer} PDevExt_3: int;
  var boogieTmp: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 115} vslice_dummy_var_28 := __HAVOC_malloc(4);
    PDevExt_3 := actual_PDevExt_3;
    call {:si_unique_call 116} Tmp_44 := __HAVOC_malloc(124);
    call {:si_unique_call 117} Tmp_46 := __HAVOC_malloc(128);
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    pDevState := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_3);
    call {:si_unique_call 118} sdv_do_paged_code_check();
    Tmp_46 := strConst__li2bpl17;
    call {:si_unique_call 119} vslice_dummy_var_29 := SerialDbgPrintEx(11, Tmp_46);
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 120} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 121} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 122} boogieTmp := corral_nondet();
    Tmp_44 := strConst__li2bpl18;
    call {:si_unique_call 123} vslice_dummy_var_30 := SerialDbgPrintEx(11, Tmp_44);
    return;
}



procedure {:origName "SerialSystemPowerCompletion"} SerialSystemPowerCompletion(actual_PDevObj_5: int, actual_MinorFunction_1: int, actual_SD2: int, actual_Context_1: int, actual_IoStatus_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSystemPowerCompletion"} SerialSystemPowerCompletion(actual_PDevObj_5: int, actual_MinorFunction_1: int, actual_SD2: int, actual_Context_1: int, actual_IoStatus_1: int)
{
  var {:scalar} PowerState_2: int;
  var {:pointer} SD2: int;
  var {:pointer} Context_1: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;

  anon0:
    call {:si_unique_call 124} PowerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 125} vslice_dummy_var_31 := __HAVOC_malloc(4);
    SD2 := actual_SD2;
    Context_1 := actual_Context_1;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Context_1 != 0;
    call {:si_unique_call 126} vslice_dummy_var_32 := KeSetEvent(Context_1, 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Context_1 == 0;
    goto L1;
}



procedure {:origName "SerialSetPowerD0Completion"} SerialSetPowerD0Completion(actual_PDevObj_6: int, actual_PIrp_3: int, actual_Context_2: int) returns (Tmp_50: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSetPowerD0Completion"} SerialSetPowerD0Completion(actual_PDevObj_6: int, actual_PIrp_3: int, actual_Context_2: int) returns (Tmp_50: int)
{
  var {:pointer} SD3_1: int;
  var {:pointer} pDevExt_4: int;
  var {:scalar} sdv_3: int;
  var {:pointer} pIrpStack_2: int;
  var {:pointer} Tmp_52: int;
  var {:pointer} PDevObj_6: int;
  var {:pointer} PIrp_3: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_1251: int;
  var vslice_dummy_var_1252: int;

  anon0:
    call {:si_unique_call 127} sdv_3 := __HAVOC_malloc(8);
    PDevObj_6 := actual_PDevObj_6;
    PIrp_3 := actual_PIrp_3;
    call {:si_unique_call 128} Tmp_52 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_6 != 0;
    assume PDevObj_6 > 0;
    havoc pDevExt_4;
    call {:si_unique_call 129} pIrpStack_2 := sdv_IoGetCurrentIrpStackLocation(PIrp_3);
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 130} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl0);
    goto L38;

  L38:
    call {:si_unique_call 131} sdv_IoMarkIrpPending(0);
    goto L11;

  L11:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 132} SerialRestoreDeviceState(pDevExt_4);
    goto L16;

  L16:
    assume {:nonnull} pIrpStack_2 != 0;
    assume pIrpStack_2 > 0;
    havoc vslice_dummy_var_1251;
    havoc vslice_dummy_var_1252;
    call {:si_unique_call 133} SD3_1 := PoSetPowerState(0, vslice_dummy_var_1251, vslice_dummy_var_1252);
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    call {:si_unique_call 134} PoStartNextPowerIrp(0);
    Tmp_52 := strConst__li2bpl1;
    call {:si_unique_call 135} vslice_dummy_var_33 := SerialDbgPrintEx(9, Tmp_52);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 136} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_3);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L41;

  L41:
    call {:si_unique_call 137} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 138} SerialIRPEpilogue(pDevExt_4);
    Tmp_50 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L41;

  anon14_Then:
    goto L16;

  anon12_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L38;

  anon11_Then:
    goto L11;
}



procedure {:origName "SerialWaitWakeCompletion"} SerialWaitWakeCompletion(actual_PDevObj_7: int, actual_PIrp_4: int, actual_Context_3: int) returns (Tmp_53: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_53 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialWaitWakeCompletion"} SerialWaitWakeCompletion(actual_PDevObj_7: int, actual_PIrp_4: int, actual_Context_3: int) returns (Tmp_53: int)
{
  var {:pointer} pDevExt_5: int;
  var {:pointer} PDevObj_7: int;

  anon0:
    PDevObj_7 := actual_PDevObj_7;
    assume {:nonnull} PDevObj_7 != 0;
    assume PDevObj_7 > 0;
    havoc pDevExt_5;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    call {:si_unique_call 139} PoStartNextPowerIrp(0);
    call {:si_unique_call 140} SerialIRPEpilogue(pDevExt_5);
    Tmp_53 := 0;
    return;
}



procedure {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_55: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_55: int)
{
  var {:pointer} SD2_1: int;
  var {:pointer} SD1: int;
  var {:scalar} charTime: int;
  var {:pointer} pDevExt_6: int;
  var {:pointer} Tmp_57: int;
  var {:scalar} sdv_1: int;
  var {:pointer} pIrpStack_3: int;
  var {:scalar} sdv_2: int;
  var {:pointer} PDevObj_8: int;
  var {:pointer} PIrp_5: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_1253: int;
  var vslice_dummy_var_1254: int;
  var vslice_dummy_var_1255: int;

  anon0:
    call {:si_unique_call 141} charTime := __HAVOC_malloc(20);
    call {:si_unique_call 142} sdv_1 := __HAVOC_malloc(8);
    call {:si_unique_call 143} sdv_2 := __HAVOC_malloc(20);
    PDevObj_8 := actual_PDevObj_8;
    PIrp_5 := actual_PIrp_5;
    call {:si_unique_call 144} Tmp_57 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_8 != 0;
    assume PDevObj_8 > 0;
    havoc pDevExt_6;
    call {:si_unique_call 145} pIrpStack_3 := sdv_IoGetCurrentIrpStackLocation(PIrp_5);
    call {:si_unique_call 146} sdv_do_paged_code_check();
    Tmp_57 := strConst__li2bpl19;
    call {:si_unique_call 147} vslice_dummy_var_35 := SerialDbgPrintEx(6, Tmp_57);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 148} vslice_dummy_var_34 := SerialSendWaitWake(pDevExt_6);
    goto L20;

  L20:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    havoc vslice_dummy_var_1253;
    havoc vslice_dummy_var_1254;
    call {:si_unique_call 149} SD1 := PoSetPowerState(0, vslice_dummy_var_1253, vslice_dummy_var_1254);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 150} SetDeviceIsOpened(pDevExt_6, 0, 1);
    call {:si_unique_call 151} SD2_1 := SerialGetCharTime(pDevExt_6);
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} charTime != 0;
    assume charTime > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    call {:si_unique_call 152} SerialDisableUART(pDevExt_6);
    call {:si_unique_call 153} SerialDrainUART(pDevExt_6, charTime);
    call {:si_unique_call 154} SerialSaveDeviceState(pDevExt_6);
    goto L47;

  L47:
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_5))] := 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_5))] := 0;
    call {:si_unique_call 155} PoStartNextPowerIrp(0);
    call {:si_unique_call 156} sdv_IoSkipCurrentIrpStackLocation(PIrp_5);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    havoc vslice_dummy_var_1255;
    call {:si_unique_call 157} Tmp_55 := SerialPoCallDriver(pDevExt_6, vslice_dummy_var_1255, PIrp_5);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    call {:si_unique_call 158} SetDeviceIsOpened(pDevExt_6, 0, 0);
    goto L47;

  anon7_Then:
    goto L20;
}



procedure {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_4: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_4: int)
{
  var {:pointer} pDevState_1: int;
  var {:pointer} Tmp_59: int;
  var {:pointer} Tmp_60: int;
  var {:scalar} S: int;
  var {:pointer} Tmp_72: int;
  var {:dopa} {:scalar} divisor: int;
  var {:pointer} Tmp_78: int;
  var {:pointer} PDevExt_4: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_1256: int;
  var vslice_dummy_var_1257: int;

  anon0:
    call {:si_unique_call 159} S := __HAVOC_malloc(8);
    call {:si_unique_call 160} divisor := __HAVOC_malloc(4);
    call {:si_unique_call 161} vslice_dummy_var_36 := __HAVOC_malloc(4);
    PDevExt_4 := actual_PDevExt_4;
    call {:si_unique_call 162} Tmp_59 := __HAVOC_malloc(128);
    call {:si_unique_call 163} Tmp_72 := __HAVOC_malloc(72);
    call {:si_unique_call 164} Tmp_78 := __HAVOC_malloc(52);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    pDevState_1 := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_4);
    Tmp_59 := strConst__li2bpl22;
    call {:si_unique_call 165} vslice_dummy_var_39 := SerialDbgPrintEx(11, Tmp_59);
    Tmp_78 := strConst__li2bpl20;
    call {:si_unique_call 166} vslice_dummy_var_40 := SerialDbgPrintEx(11, Tmp_78);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    havoc vslice_dummy_var_1256;
    havoc vslice_dummy_var_1257;
    call {:si_unique_call 167} vslice_dummy_var_37 := SerialGetDivisorFromBaud(vslice_dummy_var_1256, vslice_dummy_var_1257, divisor);
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} divisor != 0;
    assume divisor > 0;
    call {:si_unique_call 168} vslice_dummy_var_41 := SerialSetBaud(S);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 169} vslice_dummy_var_42 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L45;

  L45:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L46;

  L46:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 170} vslice_dummy_var_43 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 171} vslice_dummy_var_44 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 172} vslice_dummy_var_45 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_72 := strConst__li2bpl21;
    call {:si_unique_call 173} vslice_dummy_var_46 := SerialDbgPrintEx(12, Tmp_72);
    call {:si_unique_call 174} SetDeviceIsOpened(PDevExt_4, 1, 0);
    assume {:nonnull} pDevState_1 != 0;
    assume pDevState_1 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L1;

  anon13_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 175} vslice_dummy_var_38 := corral_nondet();
    goto L46;

  anon14_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    havoc Tmp_60;
    assume {:nonnull} Tmp_60 != 0;
    assume Tmp_60 > 0;
    goto L46;

  anon12_Then:
    goto L46;

  anon11_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L45;
}



procedure {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject: int, actual_Irp: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject: int, actual_Irp: int)
{
  var {:pointer} Tmp_82: int;
  var {:pointer} Extension: int;
  var {:pointer} Tmp_85: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_1258: int;

  anon0:
    call {:si_unique_call 176} vslice_dummy_var_47 := __HAVOC_malloc(4);
    DeviceObject := actual_DeviceObject;
    Irp := actual_Irp;
    call {:si_unique_call 177} Tmp_82 := __HAVOC_malloc(108);
    call {:si_unique_call 178} Tmp_85 := __HAVOC_malloc(84);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc Extension;
    Tmp_85 := strConst__li2bpl24;
    call {:si_unique_call 179} vslice_dummy_var_48 := SerialDbgPrintEx(6, Tmp_85);
    Tmp_82 := strConst__li2bpl23;
    call {:si_unique_call 180} vslice_dummy_var_49 := SerialDbgPrintEx(7, Tmp_82);
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    havoc vslice_dummy_var_1258;
    call {:si_unique_call 181} SerialTryToCompleteCurrent#1(Extension, li2bplFunctionConstant621, vslice_dummy_var_1258, -1073741536, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension), 0, 0, 0, 0, 0, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartMask"} SerialStartMask(actual_Extension_1: int) returns (Tmp_86: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartMask"} SerialStartMask(actual_Extension_1: int) returns (Tmp_86: int)
{
  var {:pointer} Tmp_87: int;
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:pointer} Tmp_88: int;
  var {:pointer} Tmp_89: int;
  var {:scalar} FirstStatus: int;
  var {:pointer} Tmp_90: int;
  var {:pointer} Tmp_91: int;
  var {:scalar} SetFirstStatus: int;
  var {:pointer} Tmp_92: int;
  var {:pointer} Tmp_93: int;
  var {:pointer} Tmp_94: int;
  var {:pointer} Tmp_95: int;
  var {:pointer} Tmp_96: int;
  var {:pointer} Tmp_97: int;
  var {:pointer} Tmp_98: int;
  var {:pointer} Tmp_99: int;
  var {:pointer} Tmp_100: int;
  var {:pointer} Tmp_101: int;
  var {:pointer} IrpSp: int;
  var {:scalar} OldIrql: int;
  var {:pointer} Tmp_102: int;
  var {:pointer} NewIrp: int;
  var {:scalar} s_p_e_c_i_a_l_2: int;
  var {:pointer} sdv_80: int;
  var {:pointer} Tmp_103: int;
  var {:pointer} sdv_83: int;
  var {:pointer} Tmp_104: int;
  var {:pointer} Tmp_105: int;
  var {:pointer} Extension_1: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;

  anon0:
    call {:si_unique_call 182} NewIrp := __HAVOC_malloc(4);
    Extension_1 := actual_Extension_1;
    call {:si_unique_call 183} Tmp_87 := __HAVOC_malloc(368);
    call {:si_unique_call 184} Tmp_88 := __HAVOC_malloc(148);
    call {:si_unique_call 185} Tmp_89 := __HAVOC_malloc(288);
    call {:si_unique_call 186} Tmp_90 := __HAVOC_malloc(80);
    call {:si_unique_call 187} Tmp_91 := __HAVOC_malloc(120);
    call {:si_unique_call 188} Tmp_92 := __HAVOC_malloc(368);
    call {:si_unique_call 189} Tmp_93 := __HAVOC_malloc(288);
    call {:si_unique_call 190} Tmp_94 := __HAVOC_malloc(368);
    call {:si_unique_call 191} Tmp_96 := __HAVOC_malloc(128);
    call {:si_unique_call 192} Tmp_98 := __HAVOC_malloc(288);
    call {:si_unique_call 193} Tmp_99 := __HAVOC_malloc(288);
    call {:si_unique_call 194} Tmp_100 := __HAVOC_malloc(160);
    call {:si_unique_call 195} Tmp_101 := __HAVOC_malloc(368);
    call {:si_unique_call 196} Tmp_104 := __HAVOC_malloc(284);
    SetFirstStatus := 0;
    Tmp_90 := strConst__li2bpl32;
    call {:si_unique_call 197} vslice_dummy_var_51 := SerialDbgPrintEx(6, Tmp_90);
    goto L11;

  L11:
    call {:si_unique_call 198} Tmp_87, s_p_e_c_i_a_l_1, Tmp_88, Tmp_89, FirstStatus, Tmp_91, SetFirstStatus, Tmp_92, Tmp_93, Tmp_94, Tmp_95, Tmp_96, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, IrpSp, OldIrql, Tmp_102, s_p_e_c_i_a_l_2, sdv_80, Tmp_103, sdv_83, Tmp_104, Tmp_105, vslice_dummy_var_50, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66 := SerialStartMask_loop_L11(Tmp_87, s_p_e_c_i_a_l_1, Tmp_88, Tmp_89, FirstStatus, Tmp_91, SetFirstStatus, Tmp_92, Tmp_93, Tmp_94, Tmp_95, Tmp_96, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, IrpSp, OldIrql, Tmp_102, NewIrp, s_p_e_c_i_a_l_2, sdv_80, Tmp_103, sdv_83, Tmp_104, Tmp_105, Extension_1, vslice_dummy_var_50, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66);
    goto L11_last;

  L11_last:
    Tmp_96 := strConst__li2bpl25;
    call {:si_unique_call 224} vslice_dummy_var_52 := SerialDbgPrintEx(7, Tmp_96);
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 225} IrpSp := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1)]);
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Tmp_91 := strConst__li2bpl26;
    call {:si_unique_call 199} vslice_dummy_var_53 := SerialDbgPrintEx(7, Tmp_91);
    call {:si_unique_call 200} vslice_dummy_var_50 := KeSynchronizeExecution(0, li2bplFunctionConstant618, 0);
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    Tmp_102 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1)];
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_102))] := 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L31;

  L31:
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 201} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_1), NewIrp, 1, Extension_1);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    Tmp_87 := strConst__li2bpl28;
    call {:si_unique_call 202} vslice_dummy_var_54 := SerialDbgPrintEx(7, Tmp_87);
    goto L37;

  L37:
    assume {:nonnull} NewIrp != 0;
    assume NewIrp > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp] == 0;
    Tmp_86 := FirstStatus;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp] != 0;
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_99 := strConst__li2bpl27;
    call {:si_unique_call 203} vslice_dummy_var_55 := SerialDbgPrintEx(7, Tmp_99);
    FirstStatus := 0;
    SetFirstStatus := 1;
    goto L31;

  anon27_Then:
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1)] == 0;
    call {:si_unique_call 204} Tmp_97 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_97 != 0;
    assume Tmp_97 > 0;
    Mem_T.INT4[Tmp_97] := OldIrql;
    call {:si_unique_call 205} IoAcquireCancelSpinLock(Tmp_97);
    assume {:nonnull} Tmp_97 != 0;
    assume Tmp_97 > 0;
    OldIrql := Mem_T.INT4[Tmp_97];
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    Tmp_95 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1)];
    assume {:nonnull} Tmp_95 != 0;
    assume Tmp_95 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Tmp_100 := strConst__li2bpl31;
    call {:si_unique_call 206} vslice_dummy_var_59 := SerialDbgPrintEx(7, Tmp_100);
    call {:si_unique_call 207} IoReleaseCancelSpinLock(OldIrql);
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    Tmp_103 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1)];
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_103))] := -1073741536;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L64;

  L64:
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 208} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_1), NewIrp, 1, Extension_1);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    Tmp_101 := strConst__li2bpl28;
    call {:si_unique_call 209} vslice_dummy_var_60 := SerialDbgPrintEx(7, Tmp_101);
    goto L37;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_98 := strConst__li2bpl27;
    call {:si_unique_call 210} vslice_dummy_var_61 := SerialDbgPrintEx(7, Tmp_98);
    FirstStatus := -1073741536;
    SetFirstStatus := 1;
    goto L64;

  anon36_Then:
    Tmp_88 := strConst__li2bpl30;
    call {:si_unique_call 211} vslice_dummy_var_62 := SerialDbgPrintEx(7, Tmp_88);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L76;

  L76:
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1)] := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1)];
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 212} sdv_80 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1)]);
    assume {:nonnull} sdv_80 != 0;
    assume sdv_80 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_80)))] := 0;
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 213} vslice_dummy_var_63 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1)], li2bplFunctionConstant619);
    s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 214} sdv_83 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1)]);
    assume {:nonnull} sdv_83 != 0;
    assume sdv_83 > 0;
    s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_83)));
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_1] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_1], s_p_e_c_i_a_l_2);
    call {:si_unique_call 215} vslice_dummy_var_64 := KeSynchronizeExecution(0, li2bplFunctionConstant620, 0);
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1)] := 0;
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 216} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_1), NewIrp, 0, Extension_1, OldIrql);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    Tmp_92 := strConst__li2bpl28;
    call {:si_unique_call 217} vslice_dummy_var_65 := SerialDbgPrintEx(7, Tmp_92);
    goto L37;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_93 := strConst__li2bpl27;
    call {:si_unique_call 218} vslice_dummy_var_66 := SerialDbgPrintEx(7, Tmp_93);
    FirstStatus := 259;
    SetFirstStatus := 1;
    call {:si_unique_call 219} sdv_IoMarkIrpPending(0);
    goto L76;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1)] != 0;
    goto L41;

  L41:
    Tmp_104 := strConst__li2bpl29;
    call {:si_unique_call 220} vslice_dummy_var_56 := SerialDbgPrintEx(7, Tmp_104);
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    Tmp_105 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1)];
    assume {:nonnull} Tmp_105 != 0;
    assume Tmp_105 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_105))] := -1073741811;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L112;

  L112:
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 221} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_1), NewIrp, 1, Extension_1);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    Tmp_94 := strConst__li2bpl28;
    call {:si_unique_call 222} vslice_dummy_var_57 := SerialDbgPrintEx(7, Tmp_94);
    goto L37;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_89 := strConst__li2bpl27;
    call {:si_unique_call 223} vslice_dummy_var_58 := SerialDbgPrintEx(7, Tmp_89);
    FirstStatus := -1073741811;
    SetFirstStatus := 1;
    goto L112;

  anon28_Then:
    goto L41;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_67: int;

  anon0:
    call {:si_unique_call 226} vslice_dummy_var_67 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 227} vslice_dummy_var_68 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_110: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_110: int)
{
  var {:pointer} Tmp_112: int;
  var {:pointer} Tmp_113: int;
  var {:scalar} sdv_87: int;
  var {:pointer} Tmp_114: int;
  var {:pointer} sdv_89: int;
  var {:pointer} Tmp_115: int;
  var {:pointer} Tmp_116: int;
  var {:pointer} Extension_2: int;
  var {:pointer} Tmp_117: int;
  var {:pointer} Tmp_118: int;
  var {:scalar} status_7: int;
  var {:pointer} Tmp_119: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;

  anon0:
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_1 := actual_Irp_1;
    call {:si_unique_call 228} Tmp_112 := __HAVOC_malloc(72);
    call {:si_unique_call 229} Tmp_113 := __HAVOC_malloc(84);
    call {:si_unique_call 230} Tmp_114 := __HAVOC_malloc(72);
    call {:si_unique_call 231} Tmp_115 := __HAVOC_malloc(84);
    call {:si_unique_call 232} Tmp_116 := __HAVOC_malloc(96);
    call {:si_unique_call 233} Tmp_117 := __HAVOC_malloc(84);
    call {:si_unique_call 234} Tmp_118 := __HAVOC_malloc(84);
    call {:si_unique_call 235} Tmp_119 := __HAVOC_malloc(88);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc Extension_2;
    Tmp_119 := strConst__li2bpl38;
    call {:si_unique_call 236} vslice_dummy_var_69 := SerialDbgPrintEx(2, Tmp_119);
    call {:si_unique_call 237} status_7 := SerialIRPPrologue(Irp_1, Extension_2);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_7 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_7 != 259;
    Tmp_112 := strConst__li2bpl1;
    call {:si_unique_call 238} vslice_dummy_var_70 := SerialDbgPrintEx(9, Tmp_112);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 239} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L68;

  L68:
    call {:si_unique_call 240} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 241} SerialIRPEpilogue(Extension_2);
    goto L18;

  L18:
    Tmp_117 := strConst__li2bpl34;
    call {:si_unique_call 242} vslice_dummy_var_71 := SerialDbgPrintEx(2, Tmp_117);
    Tmp_110 := status_7;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume !(Irp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L68;

  anon22_Then:
    assume {:partition} status_7 == 259;
    goto L18;

  anon21_Then:
    assume {:partition} status_7 == 0;
    Tmp_116 := strConst__li2bpl33;
    call {:si_unique_call 243} vslice_dummy_var_72 := SerialDbgPrintEx(9, Tmp_116);
    call {:si_unique_call 244} sdv_87 := SerialCompleteIfError(DeviceObject_1, Irp_1);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_87 != 0;
    Tmp_118 := strConst__li2bpl35;
    call {:si_unique_call 245} vslice_dummy_var_73 := SerialDbgPrintEx(2, Tmp_118);
    Tmp_110 := -1073741536;
    goto L1;

  anon24_Then:
    assume {:partition} sdv_87 == 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 246} sdv_89 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} sdv_89 != 0;
    assume sdv_89 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 247} status_7 := SerialStartOrQueue(Extension_2, Irp_1, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_2), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_2), li2bplFunctionConstant569);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    Tmp_115 := strConst__li2bpl36;
    call {:si_unique_call 248} vslice_dummy_var_74 := SerialDbgPrintEx(2, Tmp_115);
    Tmp_110 := status_7;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_1))] := 0;
    Tmp_114 := strConst__li2bpl1;
    call {:si_unique_call 249} vslice_dummy_var_75 := SerialDbgPrintEx(9, Tmp_114);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 250} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_1);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L71;

  L71:
    call {:si_unique_call 251} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 252} SerialIRPEpilogue(Extension_2);
    Tmp_113 := strConst__li2bpl37;
    call {:si_unique_call 253} vslice_dummy_var_76 := SerialDbgPrintEx(2, Tmp_113);
    Tmp_110 := 0;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L71;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_2: int, actual_Irp_2: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_2: int, actual_Irp_2: int)
{
  var {:pointer} Extension_3: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_1259: int;

  anon0:
    call {:si_unique_call 254} vslice_dummy_var_77 := __HAVOC_malloc(4);
    DeviceObject_2 := actual_DeviceObject_2;
    Irp_2 := actual_Irp_2;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    havoc Extension_3;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    havoc vslice_dummy_var_1259;
    call {:si_unique_call 255} SerialTryToCompleteCurrent#1(Extension_3, li2bplFunctionConstant570, vslice_dummy_var_1259, -1073741536, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_3), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_3), 0, 0, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_4: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_4: int)
{
  var {:pointer} s_p_e_c_i_a_l_3: int;
  var {:pointer} Tmp_122: int;
  var {:pointer} sdv_97: int;
  var {:scalar} OldIrql_1: int;
  var {:pointer} Irp_3: int;
  var {:scalar} OldIrql_2: int;
  var {:pointer} sdv_100: int;
  var {:scalar} OldIrql_3: int;
  var {:scalar} CompleteCurrent_1: int;
  var {:pointer} sdv_102: int;
  var {:pointer} Tmp_123: int;
  var {:scalar} s_p_e_c_i_a_l_4: int;
  var {:pointer} sdv_104: int;
  var {:pointer} sdv_105: int;
  var {:pointer} sdv_106: int;
  var {:pointer} s_p_e_c_i_a_l_5: int;
  var {:pointer} Tmp_125: int;
  var {:scalar} delta: int;
  var {:pointer} Xc: int;
  var {:scalar} s_p_e_c_i_a_l_6: int;
  var {:pointer} Tmp_126: int;
  var {:pointer} CurrentOpIrp: int;
  var {:pointer} QueueToProcess: int;
  var {:pointer} NewIrp_1: int;
  var {:scalar} CompleteCurrent: int;
  var {:pointer} Extension_4: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;

  anon0:
    call {:si_unique_call 256} vslice_dummy_var_78 := __HAVOC_malloc(4);
    call {:si_unique_call 257} delta := __HAVOC_malloc(20);
    CurrentOpIrp := actual_CurrentOpIrp;
    QueueToProcess := actual_QueueToProcess;
    NewIrp_1 := actual_NewIrp_1;
    CompleteCurrent := actual_CompleteCurrent;
    Extension_4 := actual_Extension_4;
    call {:si_unique_call 258} Tmp_122 := __HAVOC_malloc(104);
    call {:si_unique_call 259} Tmp_123 := __HAVOC_malloc(84);
    CompleteCurrent_1 := CompleteCurrent;
    Tmp_122 := strConst__li2bpl40;
    call {:si_unique_call 260} vslice_dummy_var_81 := SerialDbgPrintEx(2, Tmp_122);
    goto L8;

  L8:
    call {:si_unique_call 261} s_p_e_c_i_a_l_3, sdv_97, Irp_3, OldIrql_2, sdv_100, OldIrql_3, sdv_102, s_p_e_c_i_a_l_4, sdv_104, sdv_105, sdv_106, s_p_e_c_i_a_l_5, Tmp_125, Xc, s_p_e_c_i_a_l_6, Tmp_126, CompleteCurrent, vslice_dummy_var_80, vslice_dummy_var_83, vslice_dummy_var_84 := SerialGetNextWrite_loop_L8(s_p_e_c_i_a_l_3, sdv_97, Irp_3, OldIrql_2, sdv_100, OldIrql_3, CompleteCurrent_1, sdv_102, s_p_e_c_i_a_l_4, sdv_104, sdv_105, sdv_106, s_p_e_c_i_a_l_5, Tmp_125, delta, Xc, s_p_e_c_i_a_l_6, Tmp_126, CurrentOpIrp, QueueToProcess, NewIrp_1, CompleteCurrent, Extension_4, vslice_dummy_var_80, vslice_dummy_var_83, vslice_dummy_var_84);
    goto L8_last;

  L8_last:
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    call {:si_unique_call 282} sdv_102 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp]);
    assume {:nonnull} sdv_102 != 0;
    assume sdv_102 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_102)] == 4;
    call {:si_unique_call 262} Tmp_126 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_126 != 0;
    assume Tmp_126 > 0;
    Mem_T.INT4[Tmp_126] := OldIrql_3;
    call {:si_unique_call 263} IoAcquireCancelSpinLock(Tmp_126);
    assume {:nonnull} Tmp_126 != 0;
    assume Tmp_126 > 0;
    OldIrql_3 := Mem_T.INT4[Tmp_126];
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    call {:si_unique_call 264} sdv_106 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp]);
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} sdv_106 != 0;
    assume sdv_106 > 0;
    call {:si_unique_call 265} IoReleaseCancelSpinLock(OldIrql_3);
    goto L26;

  L26:
    call {:si_unique_call 266} SerialGetNextIrp(CurrentOpIrp, QueueToProcess, NewIrp_1, CompleteCurrent, Extension_4);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_1] == 0;
    call {:si_unique_call 267} Tmp_126 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_126 != 0;
    assume Tmp_126 > 0;
    Mem_T.INT4[Tmp_126] := OldIrql_1;
    call {:si_unique_call 268} IoAcquireCancelSpinLock(Tmp_126);
    assume {:nonnull} Tmp_126 != 0;
    assume Tmp_126 > 0;
    OldIrql_1 := Mem_T.INT4[Tmp_126];
    call {:si_unique_call 269} vslice_dummy_var_79 := KeSynchronizeExecution(0, li2bplFunctionConstant574, 0);
    call {:si_unique_call 270} IoReleaseCancelSpinLock(OldIrql_1);
    goto L39;

  L39:
    Tmp_123 := strConst__li2bpl39;
    call {:si_unique_call 271} vslice_dummy_var_82 := SerialDbgPrintEx(2, Tmp_123);
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_1] != 0;
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    call {:si_unique_call 272} sdv_105 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[NewIrp_1]);
    assume {:nonnull} sdv_105 != 0;
    assume sdv_105 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_105)] != 9;
    goto L39;

  anon19_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_105)] == 9;
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    Tmp_125 := Mem_T.P_IRP[NewIrp_1];
    assume {:nonnull} Tmp_125 != 0;
    assume Tmp_125 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_125))] := 0;
    CompleteCurrent := CompleteCurrent_1;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_102)] != 4;
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    call {:si_unique_call 273} sdv_104 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp]);
    assume {:nonnull} sdv_104 != 0;
    assume sdv_104 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_104)] == 14;
    call {:si_unique_call 274} Tmp_126 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_126 != 0;
    assume Tmp_126 > 0;
    Mem_T.INT4[Tmp_126] := OldIrql_2;
    call {:si_unique_call 275} IoAcquireCancelSpinLock(Tmp_126);
    assume {:nonnull} Tmp_126 != 0;
    assume Tmp_126 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_126];
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    Irp_3 := Mem_T.P_IRP[CurrentOpIrp];
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    havoc Xc;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_3))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 276} IoReleaseCancelSpinLock(OldIrql_2);
    goto L26;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_3))] == 0;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_3))] := -1073741536;
    goto L64;

  anon21_Then:
    call {:si_unique_call 277} vslice_dummy_var_80 := sdv_IoSetCancelRoutine(Irp_3, li2bplFunctionConstant575);
    s_p_e_c_i_a_l_4 := 2;
    call {:si_unique_call 278} sdv_100 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} sdv_100 != 0;
    assume sdv_100 > 0;
    s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_100)));
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_3] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_3], s_p_e_c_i_a_l_4);
    CompleteCurrent := 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_4)] := Irp_3;
    call {:si_unique_call 279} vslice_dummy_var_83 := KeSynchronizeExecution(0, li2bplFunctionConstant576, 0);
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    assume {:nonnull} delta != 0;
    assume delta > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 280} vslice_dummy_var_84 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_4), delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_4), Extension_4);
    s_p_e_c_i_a_l_6 := 4;
    call {:si_unique_call 281} sdv_97 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} sdv_97 != 0;
    assume sdv_97 > 0;
    s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_97)));
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_5], s_p_e_c_i_a_l_6);
    goto L64;

  anon22_Then:
    goto L64;

  anon20_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_104)] != 14;
    goto L26;
}



procedure {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_3: int, actual_Irp_4: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_3: int, actual_Irp_4: int)
{
  var {:pointer} Extension_6: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_1260: int;

  anon0:
    call {:si_unique_call 283} vslice_dummy_var_85 := __HAVOC_malloc(4);
    DeviceObject_3 := actual_DeviceObject_3;
    Irp_4 := actual_Irp_4;
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc Extension_6;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc vslice_dummy_var_1260;
    call {:si_unique_call 284} SerialTryToCompleteCurrent#1(Extension_6, li2bplFunctionConstant578, vslice_dummy_var_1260, -1073741536, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_6), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_6), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_6), li2bplFunctionConstant569, li2bplFunctionConstant573, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialClose"} SerialClose(actual_DeviceObject_4: int, actual_Irp_5: int) returns (Tmp_137: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialClose"} SerialClose(actual_DeviceObject_4: int, actual_Irp_5: int) returns (Tmp_137: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:scalar} flushCount: int;
  var {:pointer} Tmp_138: int;
  var {:pointer} Tmp_139: int;
  var {:scalar} sdv_122: int;
  var {:scalar} sdv_123: int;
  var {:scalar} charTime_1: int;
  var {:scalar} pendingDPCs: int;
  var {:pointer} Tmp_140: int;
  var {:pointer} Tmp_141: int;
  var {:pointer} Tmp_142: int;
  var {:scalar} tenCharDelay: int;
  var {:pointer} Tmp_145: int;
  var {:pointer} Tmp_146: int;
  var {:pointer} Tmp_147: int;
  var {:pointer} Tmp_148: int;
  var {:scalar} sdv_144: int;
  var {:scalar} Tmp_149: int;
  var {:pointer} Tmp_150: int;
  var {:scalar} sdv_147: int;
  var {:scalar} status_8: int;
  var {:pointer} Tmp_152: int;
  var {:scalar} Tmp_153: int;
  var {:pointer} extension: int;
  var {:scalar} sdv: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_5: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_1261: int;
  var vslice_dummy_var_1262: int;

  anon0:
    call {:si_unique_call 285} charTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 286} tenCharDelay := __HAVOC_malloc(20);
    call {:si_unique_call 287} sdv := __HAVOC_malloc(20);
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_5 := actual_Irp_5;
    call {:si_unique_call 288} Tmp_138 := __HAVOC_malloc(80);
    call {:si_unique_call 289} Tmp_139 := __HAVOC_malloc(72);
    call {:si_unique_call 290} Tmp_140 := __HAVOC_malloc(72);
    call {:si_unique_call 291} Tmp_141 := __HAVOC_malloc(124);
    call {:si_unique_call 292} Tmp_142 := __HAVOC_malloc(128);
    call {:si_unique_call 293} Tmp_145 := __HAVOC_malloc(96);
    call {:si_unique_call 294} Tmp_146 := __HAVOC_malloc(64);
    call {:si_unique_call 295} Tmp_148 := __HAVOC_malloc(72);
    call {:si_unique_call 296} Tmp_150 := __HAVOC_malloc(76);
    call {:si_unique_call 297} Tmp_152 := __HAVOC_malloc(92);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc extension;
    call {:si_unique_call 298} ExAcquireFastMutex(0);
    call {:si_unique_call 299} status_8 := SerialIRPPrologue(Irp_5, extension);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} status_8 != 0;
    Tmp_141 := strConst__li2bpl43;
    call {:si_unique_call 300} vslice_dummy_var_98 := SerialDbgPrintEx(3, Tmp_141);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} status_8 == -1073741738;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    call {:si_unique_call 301} sdv_ExFreePool(0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L28;

  L28:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))] := 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    status_8 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))];
    goto L25;

  L25:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_8 != 259;
    Tmp_148 := strConst__li2bpl1;
    call {:si_unique_call 302} vslice_dummy_var_99 := SerialDbgPrintEx(9, Tmp_148);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume Irp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 303} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_5);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} yogi_error != 1;
    goto L239;

  L239:
    call {:si_unique_call 304} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 305} SerialIRPEpilogue(extension);
    call {:si_unique_call 306} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[Tmp_147] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)];
    call {:si_unique_call 307} vslice_dummy_var_100 := sdv_InterlockedDecrement(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)] := Mem_T.INT4[Tmp_147];
    goto L34;

  L34:
    call {:si_unique_call 308} ExReleaseFastMutex(0);
    Tmp_137 := status_8;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon68_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume !(Irp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L239;

  anon54_Then:
    assume {:partition} status_8 == 259;
    goto L34;

  anon67_Then:
    goto L28;

  anon53_Then:
    assume {:partition} status_8 != -1073741738;
    goto L25;

  anon51_Then:
    assume {:partition} status_8 == 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} 1 > Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)];
    Tmp_142 := strConst__li2bpl44;
    call {:si_unique_call 309} vslice_dummy_var_101 := SerialDbgPrintEx(0, Tmp_142);
    Tmp_152 := strConst__li2bpl45;
    call {:si_unique_call 310} vslice_dummy_var_102 := SerialDbgPrintEx(0, Tmp_152);
    call {:si_unique_call 311} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))] := -1073741808;
    Tmp_139 := strConst__li2bpl1;
    call {:si_unique_call 312} vslice_dummy_var_103 := SerialDbgPrintEx(9, Tmp_139);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume Irp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 313} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_5);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} yogi_error != 1;
    goto L242;

  L242:
    call {:si_unique_call 314} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 315} SerialIRPEpilogue(extension);
    Tmp_137 := -1073741808;
    goto L1;

  anon69_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon56_Then:
    assume !(Irp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L242;

  anon52_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)] >= 1;
    Tmp_145 := strConst__li2bpl33;
    call {:si_unique_call 316} vslice_dummy_var_104 := SerialDbgPrintEx(9, Tmp_145);
    Tmp_146 := strConst__li2bpl46;
    call {:si_unique_call 317} vslice_dummy_var_105 := SerialDbgPrintEx(6, Tmp_146);
    call {:si_unique_call 318} structPtr888sdv := SerialGetCharTime(extension);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    call {:si_unique_call 319} SetDeviceIsOpened(extension, 0, 0);
    call {:si_unique_call 320} vslice_dummy_var_86 := KeSynchronizeExecution(0, li2bplFunctionConstant849, 0);
    flushCount := 320;
    goto L88;

  L88:
    call {:si_unique_call 321} flushCount, sdv_122, Tmp_149, vslice_dummy_var_87 := SerialClose_loop_L88(flushCount, sdv_122, Tmp_149, extension, vslice_dummy_var_87);
    goto L88_last;

  L88_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 322} sdv_122 := corral_nondet();
    Tmp_149 := BAND(sdv_122, BOR(32, 64));
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Tmp_149 != 96;
    call {:si_unique_call 323} vslice_dummy_var_87 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:partition} Tmp_149 == 96;
    goto L89;

  L89:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} flushCount != 0;
    goto L104;

  L104:
    call {:si_unique_call 324} vslice_dummy_var_88 := KeSynchronizeExecution(0, li2bplFunctionConstant523, 0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto L109;

  L109:
    call {:si_unique_call 325} sdv_144, vslice_dummy_var_89 := SerialClose_loop_L109(sdv_144, extension, vslice_dummy_var_89);
    goto L109_last;

  L109_last:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 355} sdv_144 := corral_nondet();
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} BAND(sdv_144, 32) != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    flushCount := 320;
    goto L122;

  L122:
    call {:si_unique_call 326} flushCount, sdv_123, Tmp_153, vslice_dummy_var_90 := SerialClose_loop_L122(flushCount, sdv_123, Tmp_153, extension, vslice_dummy_var_90);
    goto L122_last;

  L122_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 327} sdv_123 := corral_nondet();
    Tmp_153 := BAND(sdv_123, BOR(32, 64));
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Tmp_153 != 96;
    call {:si_unique_call 328} vslice_dummy_var_90 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    assume false;
    return;

  anon71_Then:
    assume {:partition} Tmp_153 == 96;
    goto L123;

  L123:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 329} SerialMarkHardwareBroken(extension);
    goto L108;

  L108:
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} tenCharDelay != 0;
    assume tenCharDelay > 0;
    call {:si_unique_call 330} vslice_dummy_var_106 := KeDelayExecutionThread(0, 1, 0);
    call {:si_unique_call 331} vslice_dummy_var_91 := SerialClrDTR(extension);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L148;

  L148:
    call {:si_unique_call 332} vslice_dummy_var_93 := SerialClose_loop_L148(extension, vslice_dummy_var_93);
    goto L148_last;

  L148_last:
    call {:si_unique_call 356} vslice_dummy_var_93 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    call {:si_unique_call 333} vslice_dummy_var_94 := KeSynchronizeExecution(0, li2bplFunctionConstant842, 0);
    goto L145;

  L145:
    call {:si_unique_call 334} vslice_dummy_var_92 := SerialClrRTS(extension);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    call {:si_unique_call 335} sdv_ExFreePool(0);
    goto L160;

  L160:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    call {:si_unique_call 336} vslice_dummy_var_95 := IoCancelIrp(0);
    goto L166;

  L166:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto L173;

  L173:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))] := 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Tmp_140 := strConst__li2bpl1;
    call {:si_unique_call 337} vslice_dummy_var_107 := SerialDbgPrintEx(9, Tmp_140);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Irp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 338} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_5);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L245;

  L245:
    call {:si_unique_call 339} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 340} SerialIRPEpilogue(extension);
    call {:si_unique_call 341} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc vslice_dummy_var_1261;
    Mem_T.INT4[Tmp_147] := vslice_dummy_var_1261;
    call {:si_unique_call 342} sdv_147 := sdv_InterlockedDecrement(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    pendingDPCs := sdv_147;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} pendingDPCs != 0;
    Tmp_138 := strConst__li2bpl48;
    call {:si_unique_call 343} vslice_dummy_var_108 := SerialDbgPrintEx(4, Tmp_138);
    call {:si_unique_call 344} vslice_dummy_var_97 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L189;

  L189:
    Tmp_150 := strConst__li2bpl47;
    call {:si_unique_call 345} vslice_dummy_var_109 := SerialDbgPrintEx(4, Tmp_150);
    call {:si_unique_call 346} ExReleaseFastMutex(0);
    call {:si_unique_call 347} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc vslice_dummy_var_1262;
    Mem_T.INT4[Tmp_147] := vslice_dummy_var_1262;
    call {:si_unique_call 348} vslice_dummy_var_110 := sdv_InterlockedIncrement(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 349} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[Tmp_147] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)];
    call {:si_unique_call 350} vslice_dummy_var_111 := sdv_InterlockedDecrement(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)] := Mem_T.INT4[Tmp_147];
    call {:si_unique_call 351} MmUnlockPagableImageSection(0);
    Tmp_137 := 0;
    goto L1;

  anon75_Then:
    assume {:partition} pendingDPCs == 0;
    goto L189;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon66_Then:
    assume !(Irp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L245;

  anon65_Then:
    call {:si_unique_call 352} vslice_dummy_var_96 := SerialGotoPowerState(DeviceObject_4, extension, 4);
    goto L173;

  anon73_Then:
    goto L166;

  anon72_Then:
    goto L160;

  anon64_Then:
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    assume false;
    return;

  anon63_Then:
    goto L145;

  anon62_Then:
    assume {:partition} flushCount != 0;
    goto L108;

  anon61_Then:
    assume {:partition} flushCount == 0;
    goto L123;

  anon60_Then:
    assume {:partition} BAND(sdv_144, 32) == 0;
    call {:si_unique_call 353} vslice_dummy_var_89 := KeDelayExecutionThread(0, 0, 0);
    goto anon60_Then_dummy;

  anon60_Then_dummy:
    assume false;
    return;

  anon59_Then:
    goto L108;

  anon58_Then:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 354} SerialMarkHardwareBroken(extension);
    goto L104;

  anon57_Then:
    assume {:partition} flushCount == 0;
    goto L89;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_112: int;

  anon0:
    call {:si_unique_call 357} vslice_dummy_var_112 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_5: int, actual_Irp_6: int) returns (Tmp_157: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_5: int, actual_Irp_6: int) returns (Tmp_157: int)
{
  var {:pointer} Tmp_159: int;
  var {:pointer} Tmp_160: int;
  var {:pointer} Tmp_161: int;
  var {:scalar} status_9: int;
  var {:pointer} extension_1: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_6: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;

  anon0:
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_6 := actual_Irp_6;
    call {:si_unique_call 358} Tmp_159 := __HAVOC_malloc(72);
    call {:si_unique_call 359} Tmp_160 := __HAVOC_malloc(72);
    call {:si_unique_call 360} Tmp_161 := __HAVOC_malloc(96);
    assume {:nonnull} DeviceObject_5 != 0;
    assume DeviceObject_5 > 0;
    havoc extension_1;
    call {:si_unique_call 361} sdv_do_paged_code_check();
    call {:si_unique_call 362} status_9 := SerialIRPPrologue(Irp_6, extension_1);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_9 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_9 == -1073741738;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    status_9 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))];
    goto L18;

  L18:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_9 != 259;
    Tmp_159 := strConst__li2bpl1;
    call {:si_unique_call 363} vslice_dummy_var_113 := SerialDbgPrintEx(9, Tmp_159);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 364} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_6);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L49;

  L49:
    call {:si_unique_call 365} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 366} SerialIRPEpilogue(extension_1);
    goto L21;

  L21:
    Tmp_157 := status_9;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L49;

  anon19_Then:
    assume {:partition} status_9 == 259;
    goto L21;

  anon18_Then:
    assume {:partition} status_9 != -1073741738;
    goto L18;

  anon17_Then:
    assume {:partition} status_9 == 0;
    Tmp_161 := strConst__li2bpl33;
    call {:si_unique_call 367} vslice_dummy_var_114 := SerialDbgPrintEx(9, Tmp_161);
    call {:si_unique_call 368} SerialKillPendingIrps(DeviceObject_5);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Tmp_160 := strConst__li2bpl1;
    call {:si_unique_call 369} vslice_dummy_var_115 := SerialDbgPrintEx(9, Tmp_160);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 370} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_6);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L52;

  L52:
    call {:si_unique_call 371} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 372} SerialIRPEpilogue(extension_1);
    Tmp_157 := 0;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L52;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_6: int, actual_Irp_7: int) returns (Tmp_162: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_6: int, actual_Irp_7: int) returns (Tmp_162: int)
{
  var {:scalar} localStatus: int;
  var {:pointer} sdv_156: int;
  var {:pointer} sdv_157: int;
  var {:pointer} Tmp_163: int;
  var {:pointer} Tmp_164: int;
  var {:pointer} sdv_165: int;
  var {:scalar} sdv_166: int;
  var {:scalar} sdv_167: int;
  var {:pointer} Tmp_165: int;
  var {:pointer} Tmp_166: int;
  var {:pointer} sdv_172: int;
  var {:pointer} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:pointer} Tmp_169: int;
  var {:pointer} extension_2: int;
  var {:pointer} Tmp_170: int;
  var {:scalar} checkOpen: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_7: int;
  var boogieTmp: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_1263: int;
  var vslice_dummy_var_1264: int;
  var vslice_dummy_var_1265: int;

  anon0:
    call {:si_unique_call 373} checkOpen := __HAVOC_malloc(8);
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 374} Tmp_163 := __HAVOC_malloc(72);
    call {:si_unique_call 375} Tmp_165 := __HAVOC_malloc(72);
    call {:si_unique_call 376} Tmp_166 := __HAVOC_malloc(96);
    call {:si_unique_call 377} Tmp_167 := __HAVOC_malloc(72);
    call {:si_unique_call 378} Tmp_168 := __HAVOC_malloc(72);
    call {:si_unique_call 379} Tmp_169 := __HAVOC_malloc(84);
    call {:si_unique_call 380} Tmp_170 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc extension_2;
    call {:si_unique_call 381} sdv_do_paged_code_check();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741670;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 382} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_7);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L224;

  L224:
    call {:si_unique_call 383} sdv_IoCompleteRequest(0, 0);
    Tmp_162 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L224;

  anon55_Then:
    call {:si_unique_call 384} ExAcquireFastMutex(0);
    call {:si_unique_call 385} localStatus := SerialIRPPrologue(Irp_7, extension_2);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} localStatus != 0;
    call {:si_unique_call 386} ExReleaseFastMutex(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} localStatus != 259;
    Tmp_167 := strConst__li2bpl1;
    call {:si_unique_call 387} vslice_dummy_var_119 := SerialDbgPrintEx(9, Tmp_167);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 388} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_7);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L227;

  L227:
    call {:si_unique_call 389} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 390} SerialIRPEpilogue(extension_2);
    goto L32;

  L32:
    Tmp_162 := localStatus;
    goto L1;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L227;

  anon57_Then:
    assume {:partition} localStatus == 259;
    goto L32;

  anon56_Then:
    assume {:partition} localStatus == 0;
    call {:si_unique_call 391} Tmp_164 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_164] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 392} sdv_166 := sdv_InterlockedIncrement(Tmp_164);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_164];
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_166 != 1;
    call {:si_unique_call 393} ExReleaseFastMutex(0);
    call {:si_unique_call 394} Tmp_164 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_164] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 395} vslice_dummy_var_120 := sdv_InterlockedDecrement(Tmp_164);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_164];
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741790;
    Tmp_165 := strConst__li2bpl1;
    call {:si_unique_call 396} vslice_dummy_var_121 := SerialDbgPrintEx(9, Tmp_165);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 397} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_7);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L230;

  L230:
    call {:si_unique_call 398} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 399} SerialIRPEpilogue(extension_2);
    Tmp_162 := -1073741790;
    goto L1;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L230;

  anon59_Then:
    assume {:partition} sdv_166 == 1;
    Tmp_166 := strConst__li2bpl33;
    call {:si_unique_call 400} vslice_dummy_var_122 := SerialDbgPrintEx(9, Tmp_166);
    Tmp_169 := strConst__li2bpl49;
    call {:si_unique_call 401} vslice_dummy_var_123 := SerialDbgPrintEx(6, Tmp_169);
    call {:si_unique_call 402} sdv_165 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} sdv_165 != 0;
    assume sdv_165 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    call {:si_unique_call 403} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741565;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 404} Tmp_164 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_164] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 405} vslice_dummy_var_124 := sdv_InterlockedDecrement(Tmp_164);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_164];
    Tmp_170 := strConst__li2bpl1;
    call {:si_unique_call 406} vslice_dummy_var_125 := SerialDbgPrintEx(9, Tmp_170);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 407} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_7);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L233;

  L233:
    call {:si_unique_call 408} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 409} SerialIRPEpilogue(extension_2);
    Tmp_162 := -1073741565;
    goto L1;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L233;

  anon61_Then:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 410} sdv_167 := corral_nondet();
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_167 != 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} sdv_167 != 1;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} sdv_167 == 2;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_1263;
    call {:si_unique_call 411} sdv_156 := ExAllocatePoolWithTag(512, vslice_dummy_var_1263, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto L96;

  L96:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_1264;
    call {:si_unique_call 412} sdv_157 := ExAllocatePoolWithTag(512, vslice_dummy_var_1264, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto L95;

  L95:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_1265;
    call {:si_unique_call 413} sdv_172 := ExAllocatePoolWithTag(512, vslice_dummy_var_1265, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto L94;

  L94:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    call {:si_unique_call 414} MmLockPagableSectionByHandle(0);
    call {:si_unique_call 415} vslice_dummy_var_116 := SerialGotoPowerState(DeviceObject_6, extension_2, 1);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 416} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 417} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 418} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 419} vslice_dummy_var_126 := KeSynchronizeExecution(0, li2bplFunctionConstant844, 0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    call {:si_unique_call 420} vslice_dummy_var_117 := KeSynchronizeExecution(0, li2bplFunctionConstant845, 0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := 0;
    goto L151;

  L151:
    call {:si_unique_call 421} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    localStatus := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))];
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} localStatus >= 0;
    goto L158;

  L158:
    Tmp_163 := strConst__li2bpl1;
    call {:si_unique_call 422} vslice_dummy_var_127 := SerialDbgPrintEx(9, Tmp_163);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 423} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_7);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L236;

  L236:
    call {:si_unique_call 424} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 425} SerialIRPEpilogue(extension_2);
    Tmp_162 := localStatus;
    goto L1;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L236;

  anon77_Then:
    assume {:partition} 0 > localStatus;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    call {:si_unique_call 426} sdv_ExFreePool(0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto L168;

  L168:
    call {:si_unique_call 427} Tmp_164 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_164] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 428} vslice_dummy_var_128 := sdv_InterlockedDecrement(Tmp_164);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_164];
    goto L158;

  anon66_Then:
    goto L168;

  anon76_Then:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 429} vslice_dummy_var_118 := KeSynchronizeExecution(0, li2bplFunctionConstant845, 0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := 0;
    goto L151;

  anon65_Then:
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    call {:si_unique_call 430} vslice_dummy_var_129 := KeSynchronizeExecution(0, li2bplFunctionConstant846, 0);
    goto L151;

  anon64_Then:
    call {:si_unique_call 431} ExReleaseFastMutex(0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741670;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 432} Tmp_164 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_164] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 433} vslice_dummy_var_130 := sdv_InterlockedDecrement(Tmp_164);
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_164];
    Tmp_168 := strConst__li2bpl1;
    call {:si_unique_call 434} vslice_dummy_var_131 := SerialDbgPrintEx(9, Tmp_168);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 435} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_7);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    goto L239;

  L239:
    call {:si_unique_call 436} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 437} SerialIRPEpilogue(extension_2);
    Tmp_162 := -1073741670;
    goto L1;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L239;

  anon80_Then:
    goto L94;

  anon81_Then:
    goto L94;

  anon69_Then:
    assume {:partition} sdv_167 != 2;
    goto L94;

  anon70_Then:
    assume {:partition} sdv_167 == 1;
    goto L96;

  anon63_Then:
    assume {:partition} sdv_167 == 0;
    goto L95;
}



procedure {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_7: int) returns (SD1_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_7: int) returns (SD1_1: int)
{
  var {:scalar} Tmp_171: int;
  var {:scalar} dataSize: int;
  var {:scalar} charTime_2: int;
  var {:scalar} Tmp_172: int;
  var {:scalar} Tmp_1: int;
  var {:scalar} bitTime: int;
  var {:scalar} paritySize: int;
  var {:scalar} Tmp_173: int;
  var {:scalar} tmp: int;
  var {:scalar} stopSize: int;
  var {:pointer} Extension_7: int;

  anon0:
    call {:si_unique_call 438} Tmp_1 := __HAVOC_malloc(20);
    call {:si_unique_call 439} tmp := __HAVOC_malloc(20);
    Extension_7 := actual_Extension_7;
    dataSize := 8;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_173;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_173 == 1;
    dataSize := 6;
    goto L16;

  L16:
    paritySize := 1;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L19;

  L19:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    stopSize := 2;
    goto L22;

  L22:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc bitTime;
    charTime_2 := bitTime + (dataSize + paritySize + stopSize) * bitTime;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    SD1_1 := Tmp_1;
    return;

  anon13_Then:
    stopSize := 1;
    goto L22;

  anon16_Then:
    paritySize := 0;
    goto L19;

  anon15_Then:
    assume {:partition} Tmp_173 != 1;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_172;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_172 == 2;
    dataSize := 7;
    goto L16;

  anon17_Then:
    assume {:partition} Tmp_172 != 2;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_171;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_171 == 3;
    dataSize := 8;
    goto L16;

  anon18_Then:
    assume {:partition} Tmp_171 != 3;
    goto L16;

  anon14_Then:
    dataSize := 5;
    goto L16;
}



procedure {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_4: int)
{
  var {:scalar} sdv_178: int;
  var {:pointer} extension_3: int;
  var {:pointer} Context_4: int;
  var vslice_dummy_var_132: int;

  anon0:
    call {:si_unique_call 440} vslice_dummy_var_132 := __HAVOC_malloc(4);
    Context_4 := actual_Context_4;
    extension_3 := Context_4;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    call {:si_unique_call 441} sdv_178 := corral_nondet();
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_5: int, actual_PDrainTime: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_5: int, actual_PDrainTime: int)
{
  var {:scalar} Tmp_181: int;
  var {:scalar} sdv_179: int;
  var {:pointer} PDevExt_5: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;

  anon0:
    call {:si_unique_call 442} vslice_dummy_var_133 := __HAVOC_malloc(4);
    PDevExt_5 := actual_PDevExt_5;
    call {:si_unique_call 443} sdv_do_paged_code_check();
    goto L6;

  L6:
    call {:si_unique_call 444} Tmp_181, sdv_179, vslice_dummy_var_134 := SerialDrainUART_loop_L6(Tmp_181, sdv_179, PDevExt_5, vslice_dummy_var_134);
    goto L6_last;

  L6_last:
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    call {:si_unique_call 446} sdv_179 := corral_nondet();
    Tmp_181 := BAND(sdv_179, BOR(32, 64));
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Tmp_181 != 96;
    call {:si_unique_call 445} vslice_dummy_var_134 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} Tmp_181 == 96;
    return;
}



procedure {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_8: int) returns (Tmp_185: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_8: int) returns (Tmp_185: int)
{
  var {:pointer} Tmp_186: int;
  var {:pointer} Tmp_187: int;
  var {:scalar} Mask: int;
  var {:pointer} Tmp_188: int;
  var {:scalar} OldIrql_5: int;
  var {:pointer} NewIrp_3: int;
  var {:pointer} Tmp_189: int;
  var {:pointer} Tmp_190: int;
  var {:pointer} Extension_8: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_1266: int;
  var vslice_dummy_var_1267: int;
  var vslice_dummy_var_1268: int;

  anon0:
    call {:si_unique_call 447} NewIrp_3 := __HAVOC_malloc(4);
    Extension_8 := actual_Extension_8;
    goto L5;

  L5:
    call {:si_unique_call 448} Tmp_186, Tmp_187, Mask, Tmp_188, OldIrql_5, Tmp_189, Tmp_190, vslice_dummy_var_135 := SerialStartPurge_loop_L5(Tmp_186, Tmp_187, Mask, Tmp_188, OldIrql_5, NewIrp_3, Tmp_189, Tmp_190, Extension_8, vslice_dummy_var_135);
    goto L5_last;

  L5_last:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    Tmp_188 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_8)];
    assume {:nonnull} Tmp_188 != 0;
    assume Tmp_188 > 0;
    havoc Tmp_190;
    assume {:nonnull} Tmp_190 != 0;
    assume Tmp_190 > 0;
    Mask := Mem_T.INT4[Tmp_190];
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(Mask, 1) != 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_1266;
    call {:si_unique_call 449} SerialKillAllReadsOrWrites(vslice_dummy_var_1266, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_8), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_8));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_1267;
    call {:si_unique_call 450} SerialKillAllReadsOrWrites(vslice_dummy_var_1267, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_8), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_8));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(Mask, 2) != 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_1268;
    call {:si_unique_call 451} SerialKillAllReadsOrWrites(vslice_dummy_var_1268, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_8), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_8));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(Mask, 8) != 0;
    call {:si_unique_call 452} Tmp_187 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    Mem_T.INT4[Tmp_187] := OldIrql_5;
    call {:si_unique_call 453} sdv_KeAcquireSpinLock(0, Tmp_187);
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    OldIrql_5 := Mem_T.INT4[Tmp_187];
    call {:si_unique_call 454} vslice_dummy_var_135 := KeSynchronizeExecution(0, li2bplFunctionConstant806, 0);
    call {:si_unique_call 455} sdv_KeReleaseSpinLock(0, OldIrql_5);
    goto L18;

  L18:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    Tmp_186 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_8)];
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_186))] := 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    Tmp_189 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_8)];
    assume {:nonnull} Tmp_189 != 0;
    assume Tmp_189 > 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    call {:si_unique_call 456} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_8), PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_8), NewIrp_3, 1, Extension_8);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_3 != 0;
    assume NewIrp_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_3] == 0;
    Tmp_185 := 0;
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_3] != 0;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} BAND(Mask, 8) == 0;
    goto L18;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} BAND(Mask, 2) == 0;
    goto L14;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} BAND(Mask, 1) == 0;
    goto L7;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_136: int;

  anon0:
    call {:si_unique_call 457} vslice_dummy_var_136 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_7: int, actual_Irp_8: int) returns (Tmp_193: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_7: int, actual_Irp_8: int) returns (Tmp_193: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} Tmp_194: int;
  var {:scalar} status_10: int;
  var {:pointer} extension_4: int;
  var {:pointer} DeviceObject_7: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_137: int;

  anon0:
    DeviceObject_7 := actual_DeviceObject_7;
    Irp_8 := actual_Irp_8;
    call {:si_unique_call 458} Tmp_194 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_7 != 0;
    assume DeviceObject_7 > 0;
    havoc extension_4;
    status_10 := 0;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 459} irpSp := sdv_IoGetCurrentIrpStackLocation(Irp_8);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp)] != 14;
    goto L17;

  L17:
    status_10 := -1073741536;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_8))] := -1073741536;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Tmp_194 := strConst__li2bpl1;
    call {:si_unique_call 460} vslice_dummy_var_137 := SerialDbgPrintEx(9, Tmp_194);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_8 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 461} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_8);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L35;

  L35:
    call {:si_unique_call 462} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 463} SerialIRPEpilogue(extension_4);
    goto L8;

  L8:
    Tmp_193 := status_10;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume !(Irp_8 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L35;

  anon14_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp)] == 14;
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L17;

  anon15_Then:
    goto L8;

  anon13_Then:
    goto L8;

  anon17_Then:
    goto L8;
}



procedure {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_9: int, actual_PIrp_6: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_9: int, actual_PIrp_6: int)
{
  var {:pointer} Tmp_196: int;
  var {:pointer} pDevExt_7: int;
  var {:pointer} PDevObj_9: int;
  var {:pointer} PIrp_6: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_1269: int;

  anon0:
    call {:si_unique_call 464} vslice_dummy_var_138 := __HAVOC_malloc(4);
    PDevObj_9 := actual_PDevObj_9;
    PIrp_6 := actual_PIrp_6;
    call {:si_unique_call 465} Tmp_196 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_9 != 0;
    assume PDevObj_9 > 0;
    havoc pDevExt_7;
    call {:si_unique_call 466} vslice_dummy_var_139 := sdv_IoGetCurrentIrpStackLocation(PIrp_6);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_6))] := -1073741536;
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    call {:si_unique_call 467} vslice_dummy_var_140 := sdv_RemoveEntryList(0);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    havoc vslice_dummy_var_1269;
    call {:si_unique_call 468} IoReleaseCancelSpinLock(vslice_dummy_var_1269);
    Tmp_196 := strConst__li2bpl1;
    call {:si_unique_call 469} vslice_dummy_var_141 := SerialDbgPrintEx(9, Tmp_196);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume PIrp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 470} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_6);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  L28:
    call {:si_unique_call 471} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 472} SerialIRPEpilogue(pDevExt_7);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume !(PIrp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L28;
}



procedure {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_9: int, actual_Irp_9: int, actual_QueueToExamine: int, actual_CurrentOpIrp_1: int, actual_Starter: int) returns (Tmp_199: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_9: int, actual_Irp_9: int, actual_QueueToExamine: int, actual_CurrentOpIrp_1: int, actual_Starter: int) returns (Tmp_199: int)
{
  var {:pointer} irpSp_1: int;
  var {:pointer} Tmp_200: int;
  var {:pointer} sdv_187: int;
  var {:pointer} Tmp_201: int;
  var {:pointer} sdv_189: int;
  var {:pointer} sdv_191: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} sdv_192: int;
  var {:scalar} sdv_194: int;
  var {:pointer} sdv_196: int;
  var {:pointer} Extension_9: int;
  var {:pointer} Irp_9: int;
  var {:pointer} QueueToExamine: int;
  var {:pointer} CurrentOpIrp_1: int;
  var {:scalar} Starter: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;

  anon0:
    Extension_9 := actual_Extension_9;
    Irp_9 := actual_Irp_9;
    QueueToExamine := actual_QueueToExamine;
    CurrentOpIrp_1 := actual_CurrentOpIrp_1;
    Starter := actual_Starter;
    call {:si_unique_call 473} Tmp_201 := __HAVOC_malloc(72);
    call {:si_unique_call 474} Tmp_200 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_200 != 0;
    assume Tmp_200 > 0;
    Mem_T.INT4[Tmp_200] := oldIrql_1;
    call {:si_unique_call 475} IoAcquireCancelSpinLock(Tmp_200);
    assume {:nonnull} Tmp_200 != 0;
    assume Tmp_200 > 0;
    oldIrql_1 := Mem_T.INT4[Tmp_200];
    call {:si_unique_call 476} sdv_187 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_187 != 0;
    assume sdv_187 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_187)] == 4;
    call {:si_unique_call 477} sdv_192 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} sdv_192 != 0;
    assume sdv_192 > 0;
    goto L18;

  L18:
    call {:si_unique_call 478} sdv_194 := sdv_IsListEmpty(0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_194 != 0;
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_1] == 0;
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    Mem_T.P_IRP[CurrentOpIrp_1] := Irp_9;
    call {:si_unique_call 479} IoReleaseCancelSpinLock(oldIrql_1);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant1125;
    call {:si_unique_call 480} Tmp_199 := SerialStartFlush(Extension_9);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant617;
    call {:si_unique_call 481} Tmp_199 := SerialStartMask(Extension_9);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant805;
    call {:si_unique_call 482} Tmp_199 := SerialStartPurge(Extension_9);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant720;
    call {:si_unique_call 483} Tmp_199 := SerialStartRead(Extension_9);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant569;
    call {:si_unique_call 484} Tmp_199 := SerialStartWrite#1(Extension_9);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_1] != 0;
    goto L22;

  L22:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 485} irpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    call {:si_unique_call 486} IoReleaseCancelSpinLock(oldIrql_1);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    call {:si_unique_call 487} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    goto L42;

  L42:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] := -1073741536;
    Tmp_201 := strConst__li2bpl1;
    call {:si_unique_call 488} vslice_dummy_var_144 := SerialDbgPrintEx(9, Tmp_201);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume Irp_9 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 489} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_9);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L98;

  L98:
    call {:si_unique_call 490} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 491} SerialIRPEpilogue(Extension_9);
    Tmp_199 := -1073741536;
    goto L1;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume !(Irp_9 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L98;

  anon46_Then:
    goto L42;

  anon43_Then:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] := 259;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume Irp_9 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 492} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl0);
    goto L101;

  L101:
    call {:si_unique_call 493} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 494} vslice_dummy_var_142 := sdv_InsertTailList(QueueToExamine, ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(Irp_9))));
    call {:si_unique_call 495} vslice_dummy_var_143 := sdv_IoSetCancelRoutine(Irp_9, li2bplFunctionConstant665);
    call {:si_unique_call 496} IoReleaseCancelSpinLock(oldIrql_1);
    Tmp_199 := 259;
    goto L1;

  anon55_Then:
    assume !(Irp_9 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L101;

  anon42_Then:
    assume {:partition} sdv_194 == 0;
    goto L22;

  anon41_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_187)] != 4;
    call {:si_unique_call 497} sdv_191 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_191 != 0;
    assume sdv_191 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_191)] == 14;
    call {:si_unique_call 498} sdv_189 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_189 != 0;
    assume sdv_189 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto L78;

  L78:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    goto L18;

  anon49_Then:
    call {:si_unique_call 499} sdv_196 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_196 != 0;
    assume sdv_196 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L78;

  anon50_Then:
    goto L18;

  anon48_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_191)] != 14;
    goto L18;
}



procedure {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_6: int, actual_PFlags: int, actual_Value: int, actual_Set: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_6: int, actual_PFlags: int, actual_Value: int, actual_Set: int)
{
  var {:pointer} Tmp_203: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} PFlags: int;
  var {:scalar} Value: int;
  var {:scalar} Set: int;
  var vslice_dummy_var_145: int;

  anon0:
    call {:si_unique_call 500} vslice_dummy_var_145 := __HAVOC_malloc(4);
    PFlags := actual_PFlags;
    Value := actual_Value;
    Set := actual_Set;
    call {:si_unique_call 501} Tmp_203 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_203 != 0;
    assume Tmp_203 > 0;
    Mem_T.INT4[Tmp_203] := oldIrql_2;
    call {:si_unique_call 502} sdv_KeAcquireSpinLock(0, Tmp_203);
    assume {:nonnull} Tmp_203 != 0;
    assume Tmp_203 > 0;
    oldIrql_2 := Mem_T.INT4[Tmp_203];
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Set != 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BOR(Mem_T.INT4[PFlags], Value);
    goto L10;

  L10:
    call {:si_unique_call 503} sdv_KeReleaseSpinLock(0, oldIrql_2);
    return;

  anon3_Then:
    assume {:partition} Set == 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BAND(Mem_T.INT4[PFlags], BNOT(Value));
    goto L10;
}



procedure {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_7: int, actual_PDevObj_10: int, actual_PIrp_7: int) returns (Tmp_204: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_7: int, actual_PDevObj_10: int, actual_PIrp_7: int) returns (Tmp_204: int)
{
  var {:scalar} status_11: int;
  var {:pointer} PDevExt_7: int;
  var {:pointer} PIrp_7: int;

  anon0:
    PDevExt_7 := actual_PDevExt_7;
    PIrp_7 := actual_PIrp_7;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume PIrp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 504} SLIC_PoCallDriver_entry(strConst__li2bpl0);
    goto L13;

  L13:
    call {:si_unique_call 505} status_11 := PoCallDriver(0, PIrp_7);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 506} SerialIRPEpilogue(PDevExt_7);
    Tmp_204 := status_11;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume !(PIrp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L13;
}



procedure {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_8: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_8: int)
{
  var {:pointer} Tmp_207: int;
  var {:scalar} pendingCnt: int;
  var {:pointer} PDevExt_8: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_1270: int;

  anon0:
    call {:si_unique_call 507} vslice_dummy_var_146 := __HAVOC_malloc(4);
    PDevExt_8 := actual_PDevExt_8;
    call {:si_unique_call 508} Tmp_207 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_207 != 0;
    assume Tmp_207 > 0;
    havoc vslice_dummy_var_1270;
    Mem_T.INT4[Tmp_207] := vslice_dummy_var_1270;
    call {:si_unique_call 509} pendingCnt := sdv_InterlockedDecrement(Tmp_207);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_207 != 0;
    assume Tmp_207 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt == 0;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 510} vslice_dummy_var_147 := KeSetEvent(PendingIRPEvent__SERIAL_DEVICE_EXTENSION(PDevExt_8), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt != 0;
    goto L1;
}



procedure {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_9: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_9: int)
{
  var {:scalar} Tmp_208: int;
  var {:scalar} Tmp_211: int;
  var {:scalar} Tmp_212: int;
  var {:pointer} PDevExt_9: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_1271: int;
  var vslice_dummy_var_1272: int;

  anon0:
    call {:si_unique_call 511} Tmp_208 := __HAVOC_malloc(20);
    call {:si_unique_call 512} vslice_dummy_var_148 := __HAVOC_malloc(4);
    call {:si_unique_call 513} Tmp_211 := __HAVOC_malloc(20);
    PDevExt_9 := actual_PDevExt_9;
    call {:si_unique_call 514} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    call {:si_unique_call 515} SerialSetDeviceFlags(PDevExt_9, Flags__SERIAL_DEVICE_EXTENSION(PDevExt_9), 4, 1);
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    havoc Tmp_212;
    assume {:nonnull} Tmp_211 != 0;
    assume Tmp_211 > 0;
    assume {:nonnull} Tmp_211 != 0;
    assume Tmp_211 > 0;
    assume {:nonnull} Tmp_211 != 0;
    assume Tmp_211 > 0;
    assume {:nonnull} Tmp_211 != 0;
    assume Tmp_211 > 0;
    assume {:nonnull} Tmp_211 != 0;
    assume Tmp_211 > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    havoc vslice_dummy_var_1271;
    havoc vslice_dummy_var_1272;
    call {:si_unique_call 516} SerialLogError(vslice_dummy_var_1271, 0, Tmp_208, Tmp_211, 0, 0, 0, 88, 0, -1073348563, Tmp_212, vslice_dummy_var_1272, 0, 0);
    call {:si_unique_call 517} IoInvalidateDeviceState(0);
    return;
}



procedure {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_11: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_11: int)
{
  var {:pointer} currentLastIrp: int;
  var {:scalar} cancelIrql: int;
  var {:pointer} Tmp_218: int;
  var {:scalar} sdv_205: int;
  var {:pointer} pDevExt_8: int;
  var {:pointer} sdv_206: int;
  var {:scalar} cancelRoutine: int;
  var {:pointer} PDevObj_11: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_1273: int;

  anon0:
    call {:si_unique_call 518} vslice_dummy_var_149 := __HAVOC_malloc(4);
    PDevObj_11 := actual_PDevObj_11;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc pDevExt_8;
    call {:si_unique_call 519} Tmp_218 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_218 != 0;
    assume Tmp_218 > 0;
    Mem_T.INT4[Tmp_218] := cancelIrql;
    call {:si_unique_call 520} IoAcquireCancelSpinLock(Tmp_218);
    assume {:nonnull} Tmp_218 != 0;
    assume Tmp_218 > 0;
    cancelIrql := Mem_T.INT4[Tmp_218];
    goto L10;

  L10:
    call {:si_unique_call 521} currentLastIrp, cancelIrql, Tmp_218, sdv_205, sdv_206, cancelRoutine := SerialKillAllStalled_loop_L10(currentLastIrp, cancelIrql, Tmp_218, sdv_205, pDevExt_8, sdv_206, cancelRoutine, PDevObj_11);
    goto L10_last;

  L10_last:
    call {:si_unique_call 532} sdv_205 := sdv_IsListEmpty(0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_205 == 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    havoc vslice_dummy_var_1273;
    call {:si_unique_call 522} sdv_206 := sdv_containing_record(vslice_dummy_var_1273, 88);
    currentLastIrp := sdv_206;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    havoc cancelRoutine;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant571;
    call {:si_unique_call 523} SerialCancelCurrentWrite(PDevObj_11, currentLastIrp);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  L29:
    call {:si_unique_call 524} Tmp_218 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_218 != 0;
    assume Tmp_218 > 0;
    Mem_T.INT4[Tmp_218] := cancelIrql;
    call {:si_unique_call 525} IoAcquireCancelSpinLock(Tmp_218);
    assume {:nonnull} Tmp_218 != 0;
    assume Tmp_218 > 0;
    cancelIrql := Mem_T.INT4[Tmp_218];
    goto L29_dummy;

  L29_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant575;
    call {:si_unique_call 526} SerialCancelCurrentXoff(PDevObj_11, currentLastIrp);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant1086;
    call {:si_unique_call 527} SerialCancelImmediate(PDevObj_11, currentLastIrp);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant665;
    call {:si_unique_call 528} SerialCancelQueued(PDevObj_11, currentLastIrp);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant619;
    call {:si_unique_call 529} SerialCancelWait(PDevObj_11, currentLastIrp);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant667;
    call {:si_unique_call 530} SerialFilterCancelQueued(PDevObj_11, currentLastIrp);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} sdv_205 != 0;
    call {:si_unique_call 531} IoReleaseCancelSpinLock(cancelIrql);
    goto LM2;
}



procedure {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer: int, actual_PDevExt_10: int) returns (Tmp_220: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_220 == 1 || Tmp_220 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer: int, actual_PDevExt_10: int) returns (Tmp_220: int)
{
  var {:scalar} cancelled: int;
  var {:pointer} Timer: int;
  var {:pointer} PDevExt_10: int;
  var vslice_dummy_var_1274: int;

  anon0:
    Timer := actual_Timer;
    PDevExt_10 := actual_PDevExt_10;
    call {:si_unique_call 533} cancelled := KeCancelTimer(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} cancelled != 0;
    assume {:nonnull} Timer != 0;
    assume Timer > 0;
    havoc vslice_dummy_var_1274;
    call {:si_unique_call 534} SerialDpcEpilogue(PDevExt_10, vslice_dummy_var_1274);
    goto L9;

  L9:
    Tmp_220 := cancelled;
    return;

  anon3_Then:
    assume {:partition} cancelled == 0;
    goto L9;
}



procedure {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_11: int) returns (Tmp_222: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_222 == 0 || Tmp_222 == -1073741536 || Tmp_222 == 259 || Tmp_222 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_11: int) returns (Tmp_222: int)
{
  var {:pointer} Tmp_223: int;
  var {:pointer} PIrp_8: int;
  var {:pointer} PDevExt_11: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_1275: int;

  anon0:
    PIrp_8 := actual_PIrp_8;
    PDevExt_11 := actual_PDevExt_11;
    call {:si_unique_call 535} Tmp_223 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    havoc vslice_dummy_var_1275;
    Mem_T.INT4[Tmp_223] := vslice_dummy_var_1275;
    call {:si_unique_call 536} vslice_dummy_var_150 := sdv_InterlockedIncrement(Tmp_223);
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    call {:si_unique_call 537} Tmp_222 := SerialFilterIrps(PIrp_8, PDevExt_11);
    return;
}



procedure {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_NextIrp: int, actual_CompleteCurrent_2: int, actual_extension_5: int, actual_OldIrql_6: int);
  modifies alloc, Mem_T.P_IRP, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_NextIrp: int, actual_CompleteCurrent_2: int, actual_extension_5: int, actual_OldIrql_6: int)
{
  var {:scalar} sdv_210: int;
  var {:pointer} sdv_213: int;
  var {:pointer} oldIrp_1: int;
  var {:pointer} headOfList: int;
  var {:pointer} Tmp_226: int;
  var {:pointer} CurrentOpIrp_3: int;
  var {:pointer} QueueToProcess_2: int;
  var {:pointer} NextIrp: int;
  var {:scalar} CompleteCurrent_2: int;
  var {:pointer} extension_5: int;
  var {:scalar} OldIrql_6: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;

  anon0:
    call {:si_unique_call 538} vslice_dummy_var_151 := __HAVOC_malloc(4);
    CurrentOpIrp_3 := actual_CurrentOpIrp_3;
    QueueToProcess_2 := actual_QueueToProcess_2;
    NextIrp := actual_NextIrp;
    CompleteCurrent_2 := actual_CompleteCurrent_2;
    extension_5 := actual_extension_5;
    OldIrql_6 := actual_OldIrql_6;
    call {:si_unique_call 539} Tmp_226 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    oldIrp_1 := Mem_T.P_IRP[CurrentOpIrp_3];
    call {:si_unique_call 540} sdv_210 := sdv_IsListEmpty(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_210 == 0;
    call {:si_unique_call 541} headOfList := RemoveHeadList(QueueToProcess_2);
    call {:si_unique_call 542} sdv_213 := sdv_containing_record(headOfList, 88);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Mem_T.P_IRP[CurrentOpIrp_3] := sdv_213;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    call {:si_unique_call 543} vslice_dummy_var_153 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentOpIrp_3], 0);
    goto L11;

  L11:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    assume {:nonnull} NextIrp != 0;
    assume NextIrp > 0;
    Mem_T.P_IRP[NextIrp] := Mem_T.P_IRP[CurrentOpIrp_3];
    call {:si_unique_call 544} IoReleaseCancelSpinLock(OldIrql_6);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} CompleteCurrent_2 != 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} oldIrp_1 != 0;
    Tmp_226 := strConst__li2bpl1;
    call {:si_unique_call 545} vslice_dummy_var_152 := SerialDbgPrintEx(9, Tmp_226);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume oldIrp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 546} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, oldIrp_1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    call {:si_unique_call 547} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 548} SerialIRPEpilogue(extension_5);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume !(oldIrp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L40;

  anon13_Then:
    assume {:partition} oldIrp_1 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} CompleteCurrent_2 == 0;
    goto L1;

  anon11_Then:
    assume {:partition} sdv_210 != 0;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Mem_T.P_IRP[CurrentOpIrp_3] := 0;
    goto L11;
}



procedure {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_12: int, actual_PDevObj_12: int, actual_PIrp_9: int) returns (Tmp_227: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_12: int, actual_PDevObj_12: int, actual_PIrp_9: int) returns (Tmp_227: int)
{
  var {:scalar} status_12: int;
  var {:pointer} PDevExt_12: int;
  var {:pointer} PDevObj_12: int;
  var {:pointer} PIrp_9: int;

  anon0:
    PDevExt_12 := actual_PDevExt_12;
    PDevObj_12 := actual_PDevObj_12;
    PIrp_9 := actual_PIrp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume PIrp_9 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 549} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L13;

  L13:
    call {:si_unique_call 550} status_12 := sdv_IoCallDriver(PDevObj_12, PIrp_9);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 551} SerialIRPEpilogue(PDevExt_12);
    Tmp_227 := status_12;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume !(PIrp_9 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L13;
}



procedure {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_13: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_13: int)
{
  var {:pointer} Tmp_229: int;
  var {:pointer} Tmp_230: int;
  var {:pointer} sdv_219: int;
  var {:pointer} Tmp_231: int;
  var {:scalar} Tmp_232: int;
  var {:scalar} oldIrql_3: int;
  var {:pointer} pIrpStack_4: int;
  var {:pointer} Tmp_233: int;
  var {:pointer} pIrp: int;
  var {:pointer} pDevObj: int;
  var {:pointer} pDrvObj: int;
  var {:pointer} pIrpLink: int;
  var {:pointer} Tmp_235: int;
  var {:pointer} PDevExt_13: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;

  anon0:
    call {:si_unique_call 552} vslice_dummy_var_154 := __HAVOC_malloc(4);
    PDevExt_13 := actual_PDevExt_13;
    call {:si_unique_call 553} Tmp_229 := __HAVOC_malloc(96);
    call {:si_unique_call 554} Tmp_231 := __HAVOC_malloc(124);
    call {:si_unique_call 555} Tmp_233 := __HAVOC_malloc(80);
    call {:si_unique_call 556} Tmp_235 := __HAVOC_malloc(112);
    Tmp_229 := strConst__li2bpl50;
    call {:si_unique_call 557} vslice_dummy_var_155 := SerialDbgPrintEx(2, Tmp_229);
    call {:si_unique_call 558} Tmp_230 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    Mem_T.INT4[Tmp_230] := oldIrql_3;
    call {:si_unique_call 559} IoAcquireCancelSpinLock(Tmp_230);
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_230];
    assume {:nonnull} PDevExt_13 != 0;
    assume PDevExt_13 > 0;
    havoc pIrpLink;
    goto L16;

  L16:
    call {:si_unique_call 560} Tmp_230, sdv_219, Tmp_231, Tmp_232, oldIrql_3, pIrpStack_4, pIrp, pDevObj, pDrvObj, pIrpLink, Tmp_235, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158 := SerialUnstallIrps_loop_L16(Tmp_230, sdv_219, Tmp_231, Tmp_232, oldIrql_3, pIrpStack_4, pIrp, pDevObj, pDrvObj, pIrpLink, Tmp_235, PDevExt_13, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158);
    goto L16_last;

  L16_last:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 561} sdv_219 := sdv_containing_record(pIrpLink, 88);
    pIrp := sdv_219;
    call {:si_unique_call 562} vslice_dummy_var_156 := sdv_RemoveEntryList(0);
    call {:si_unique_call 563} pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    havoc pDevObj;
    assume {:nonnull} pDevObj != 0;
    assume pDevObj > 0;
    havoc pDrvObj;
    call {:si_unique_call 564} vslice_dummy_var_157 := sdv_IoSetCancelRoutine(pIrp, 0);
    call {:si_unique_call 565} IoReleaseCancelSpinLock(oldIrql_3);
    Tmp_231 := strConst__li2bpl51;
    call {:si_unique_call 566} vslice_dummy_var_158 := SerialDbgPrintEx(12, Tmp_231);
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    Tmp_232 := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_4)];
    assume {:nonnull} pDrvObj != 0;
    assume pDrvObj > 0;
    havoc Tmp_235;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Tmp_232 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_232 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_232 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_232 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_232 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_232 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_232 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_232 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_232 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_232 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_232 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_232 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_232 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_232 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_232 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_232 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_232 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_232 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_232 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_232 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_232 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Tmp_232 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Tmp_232 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Tmp_232 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume Tmp_232 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume Tmp_232 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume Tmp_232 != 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume false;
    return;

  anon87_Then:
    assume Tmp_232 == 0;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235] == 0;
    goto L45;

  L45:
    call {:si_unique_call 567} Tmp_230 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    Mem_T.INT4[Tmp_230] := oldIrql_3;
    call {:si_unique_call 568} IoAcquireCancelSpinLock(Tmp_230);
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_230];
    assume {:nonnull} PDevExt_13 != 0;
    assume PDevExt_13 > 0;
    havoc pIrpLink;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon86_Then:
    assume Tmp_232 == 1;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume Tmp_232 == 2;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume Tmp_232 == 3;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume Tmp_232 == 4;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume Tmp_232 == 5;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume Tmp_232 == 6;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume Tmp_232 == 7;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume Tmp_232 == 8;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume Tmp_232 == 9;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume Tmp_232 == 10;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume Tmp_232 == 11;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume Tmp_232 == 12;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume Tmp_232 == 13;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume Tmp_232 == 14;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume Tmp_232 == 15;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume Tmp_232 == 16;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume Tmp_232 == 17;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume Tmp_232 == 18;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume Tmp_232 == 19;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume Tmp_232 == 20;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume Tmp_232 == 21;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume Tmp_232 == 22;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume Tmp_232 == 23;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume Tmp_232 == 24;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume Tmp_232 == 25;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume Tmp_232 == 26;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume Tmp_232 == 27;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume Mem_T.INT4[Tmp_235 + 27 * 4] == 0;
    goto L45;

  anon59_Then:
    call {:si_unique_call 569} IoReleaseCancelSpinLock(oldIrql_3);
    Tmp_233 := strConst__li2bpl52;
    call {:si_unique_call 570} vslice_dummy_var_159 := SerialDbgPrintEx(2, Tmp_233);
    return;
}



procedure {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_8: int, actual_QueueToClean: int, actual_CurrentOpIrp_4: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_8: int, actual_QueueToClean: int, actual_CurrentOpIrp_4: int)
{
  var {:pointer} currentLastIrp_1: int;
  var {:pointer} Tmp_236: int;
  var {:pointer} Tmp_237: int;
  var {:scalar} cancelIrql_1: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Tmp_240: int;
  var {:scalar} sdv_224: int;
  var {:pointer} Tmp_241: int;
  var {:pointer} sdv_225: int;
  var {:scalar} cancelRoutine_1: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} QueueToClean: int;
  var {:pointer} CurrentOpIrp_4: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_1276: int;

  anon0:
    call {:si_unique_call 571} vslice_dummy_var_160 := __HAVOC_malloc(4);
    DeviceObject_8 := actual_DeviceObject_8;
    QueueToClean := actual_QueueToClean;
    CurrentOpIrp_4 := actual_CurrentOpIrp_4;
    call {:si_unique_call 572} Tmp_239 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    Mem_T.INT4[Tmp_239] := cancelIrql_1;
    call {:si_unique_call 573} IoAcquireCancelSpinLock(Tmp_239);
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_239];
    goto L8;

  L8:
    call {:si_unique_call 574} currentLastIrp_1, cancelIrql_1, Tmp_239, sdv_224, sdv_225, cancelRoutine_1 := SerialKillAllReadsOrWrites_loop_L8(currentLastIrp_1, cancelIrql_1, Tmp_239, sdv_224, sdv_225, cancelRoutine_1, DeviceObject_8, QueueToClean);
    goto L8_last;

  L8_last:
    call {:si_unique_call 592} sdv_224 := sdv_IsListEmpty(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_224 == 0;
    assume {:nonnull} QueueToClean != 0;
    assume QueueToClean > 0;
    havoc vslice_dummy_var_1276;
    call {:si_unique_call 575} sdv_225 := sdv_containing_record(vslice_dummy_var_1276, 88);
    currentLastIrp_1 := sdv_225;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    havoc cancelRoutine_1;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant571;
    call {:si_unique_call 576} SerialCancelCurrentWrite(DeviceObject_8, currentLastIrp_1);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  L39:
    call {:si_unique_call 577} Tmp_239 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    Mem_T.INT4[Tmp_239] := cancelIrql_1;
    call {:si_unique_call 578} IoAcquireCancelSpinLock(Tmp_239);
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_239];
    goto L39_dummy;

  L39_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant575;
    call {:si_unique_call 579} SerialCancelCurrentXoff(DeviceObject_8, currentLastIrp_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant1086;
    call {:si_unique_call 580} SerialCancelImmediate(DeviceObject_8, currentLastIrp_1);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant665;
    call {:si_unique_call 581} SerialCancelQueued(DeviceObject_8, currentLastIrp_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant619;
    call {:si_unique_call 582} SerialCancelWait(DeviceObject_8, currentLastIrp_1);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon71_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant667;
    call {:si_unique_call 583} SerialFilterCancelQueued(DeviceObject_8, currentLastIrp_1);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon70_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:partition} sdv_224 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_4] != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    Tmp_237 := Mem_T.P_IRP[CurrentOpIrp_4];
    assume {:nonnull} Tmp_237 != 0;
    assume Tmp_237 > 0;
    havoc cancelRoutine_1;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    Tmp_236 := Mem_T.P_IRP[CurrentOpIrp_4];
    assume {:nonnull} Tmp_236 != 0;
    assume Tmp_236 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} cancelRoutine_1 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    Tmp_241 := Mem_T.P_IRP[CurrentOpIrp_4];
    assume {:nonnull} Tmp_241 != 0;
    assume Tmp_241 > 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    Tmp_240 := Mem_T.P_IRP[CurrentOpIrp_4];
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant571;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    call {:si_unique_call 584} SerialCancelCurrentWrite(DeviceObject_8, Mem_T.P_IRP[CurrentOpIrp_4]);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  anon68_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon56_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant575;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    call {:si_unique_call 585} SerialCancelCurrentXoff(DeviceObject_8, Mem_T.P_IRP[CurrentOpIrp_4]);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon67_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant1086;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    call {:si_unique_call 586} SerialCancelImmediate(DeviceObject_8, Mem_T.P_IRP[CurrentOpIrp_4]);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant665;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    call {:si_unique_call 587} SerialCancelQueued(DeviceObject_8, Mem_T.P_IRP[CurrentOpIrp_4]);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon65_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant619;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    call {:si_unique_call 588} SerialCancelWait(DeviceObject_8, Mem_T.P_IRP[CurrentOpIrp_4]);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon64_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant667;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    call {:si_unique_call 589} SerialFilterCancelQueued(DeviceObject_8, Mem_T.P_IRP[CurrentOpIrp_4]);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} cancelRoutine_1 == 0;
    call {:si_unique_call 590} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;

  anon52_Then:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_4] == 0;
    call {:si_unique_call 591} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_161: int;

  anon0:
    call {:si_unique_call 593} vslice_dummy_var_161 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_1: int, actual_SD1_2: int, actual_Dpc: int, actual_PDevExt_14: int) returns (Tmp_244: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_244 == 1 || Tmp_244 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_1: int, actual_SD1_2: int, actual_Dpc: int, actual_PDevExt_14: int) returns (Tmp_244: int)
{
  var {:scalar} DueTime_1: int;
  var {:scalar} set: int;
  var {:pointer} Tmp_245: int;
  var {:pointer} SD1_2: int;
  var {:pointer} PDevExt_14: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_1277: int;
  var vslice_dummy_var_1278: int;

  anon0:
    call {:si_unique_call 594} DueTime_1 := __HAVOC_malloc(20);
    SD1_2 := actual_SD1_2;
    PDevExt_14 := actual_PDevExt_14;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    call {:si_unique_call 595} Tmp_245 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    havoc vslice_dummy_var_1277;
    Mem_T.INT4[Tmp_245] := vslice_dummy_var_1277;
    call {:si_unique_call 596} vslice_dummy_var_162 := sdv_InterlockedIncrement(Tmp_245);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    call {:si_unique_call 597} set := KeSetTimer(0, DueTime_1, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} set != 0;
    call {:si_unique_call 598} Tmp_245 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    havoc vslice_dummy_var_1278;
    Mem_T.INT4[Tmp_245] := vslice_dummy_var_1278;
    call {:si_unique_call 599} vslice_dummy_var_163 := sdv_InterlockedDecrement(Tmp_245);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    goto L12;

  L12:
    Tmp_244 := set;
    return;

  anon3_Then:
    assume {:partition} set == 0;
    goto L12;
}



procedure {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_15: int, actual_PDpc: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_15: int, actual_PDpc: int)
{
  var {:scalar} pendingCnt_1: int;
  var {:pointer} Tmp_247: int;
  var {:pointer} PDevExt_15: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_1279: int;

  anon0:
    call {:si_unique_call 600} vslice_dummy_var_164 := __HAVOC_malloc(4);
    PDevExt_15 := actual_PDevExt_15;
    call {:si_unique_call 601} Tmp_247 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_247 != 0;
    assume Tmp_247 > 0;
    havoc vslice_dummy_var_1279;
    Mem_T.INT4[Tmp_247] := vslice_dummy_var_1279;
    call {:si_unique_call 602} pendingCnt_1 := sdv_InterlockedDecrement(Tmp_247);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_247 != 0;
    assume Tmp_247 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt_1 == 0;
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    call {:si_unique_call 603} vslice_dummy_var_165 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_15), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt_1 != 0;
    goto L1;
}



procedure {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_5: int, actual_QueueToProcess_3: int, actual_NextIrp_1: int, actual_CompleteCurrent_3: int, actual_extension_6: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_5: int, actual_QueueToProcess_3: int, actual_NextIrp_1: int, actual_CompleteCurrent_3: int, actual_extension_6: int)
{
  var {:scalar} oldIrql_4: int;
  var {:pointer} Tmp_249: int;
  var {:pointer} CurrentOpIrp_5: int;
  var {:pointer} QueueToProcess_3: int;
  var {:pointer} NextIrp_1: int;
  var {:scalar} CompleteCurrent_3: int;
  var {:pointer} extension_6: int;
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 604} vslice_dummy_var_166 := __HAVOC_malloc(4);
    CurrentOpIrp_5 := actual_CurrentOpIrp_5;
    QueueToProcess_3 := actual_QueueToProcess_3;
    NextIrp_1 := actual_NextIrp_1;
    CompleteCurrent_3 := actual_CompleteCurrent_3;
    extension_6 := actual_extension_6;
    call {:si_unique_call 605} Tmp_249 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_249 != 0;
    assume Tmp_249 > 0;
    Mem_T.INT4[Tmp_249] := oldIrql_4;
    call {:si_unique_call 606} IoAcquireCancelSpinLock(Tmp_249);
    assume {:nonnull} Tmp_249 != 0;
    assume Tmp_249 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_249];
    call {:si_unique_call 607} SerialGetNextIrpLocked(CurrentOpIrp_5, QueueToProcess_3, NextIrp_1, CompleteCurrent_3, extension_6, oldIrql_4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_9: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_9: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int)
{
  var {:scalar} P1: int;
  var {:scalar} P2: int;
  var {:pointer} Tmp_252: int;
  var {:pointer} Tmp_253: int;
  var {:scalar} Tmp_254: int;
  var {:scalar} sdv_231: int;
  var {:pointer} errorLogEntry: int;
  var {:pointer} Tmp_255: int;
  var {:scalar} Tmp_257: int;
  var {:scalar} sdv_232: int;
  var {:scalar} dumpToAllocate: int;
  var {:pointer} sdv_233: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} ptrToFirstInsert: int;
  var {:scalar} Tmp_260: int;
  var {:pointer} Tmp_261: int;
  var {:pointer} DriverObject: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} structPtr888P1: int;
  var {:pointer} structPtr888P2: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var {:scalar} LengthOfInsert1: int;
  var {:pointer} Insert1: int;
  var {:scalar} LengthOfInsert2: int;
  var {:pointer} Insert2: int;
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 608} P1 := __HAVOC_malloc(20);
    call {:si_unique_call 609} P2 := __HAVOC_malloc(20);
    call {:si_unique_call 610} vslice_dummy_var_167 := __HAVOC_malloc(4);
    call {:si_unique_call 611} Tmp_257 := __HAVOC_malloc(20);
    call {:si_unique_call 612} Tmp_260 := __HAVOC_malloc(20);
    DriverObject := actual_DriverObject;
    DeviceObject_9 := actual_DeviceObject_9;
    structPtr888P1 := actual_structPtr888P1;
    structPtr888P2 := actual_structPtr888P2;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    LengthOfInsert1 := actual_LengthOfInsert1;
    Insert1 := actual_Insert1;
    LengthOfInsert2 := actual_LengthOfInsert2;
    Insert2 := actual_Insert2;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    call {:si_unique_call 613} Tmp_252 := __HAVOC_malloc(4);
    call {:si_unique_call 614} Tmp_253 := __HAVOC_malloc(4);
    call {:si_unique_call 615} Tmp_255 := __HAVOC_malloc(4);
    call {:si_unique_call 616} Tmp_258 := __HAVOC_malloc(4);
    call {:si_unique_call 617} Tmp_261 := __HAVOC_malloc(4);
    dumpToAllocate := 0;
    call {:si_unique_call 618} sdv_do_paged_code_check();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Insert1 != 0;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Insert2 != 0;
    goto L16;

  L16:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} DeviceObject_9 != 0;
    goto L19;

  L19:
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    call {:si_unique_call 619} sdv_231 := SerialMemCompare(P1, 1, Tmp_260, 1);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_231 != 0;
    dumpToAllocate := 8;
    goto L24;

  L24:
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    call {:si_unique_call 620} sdv_232 := SerialMemCompare(P2, 1, Tmp_257, 1);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_232 != 0;
    dumpToAllocate := dumpToAllocate + 8;
    goto L30;

  L30:
    Tmp_254 := 48 + dumpToAllocate + LengthOfInsert1 + LengthOfInsert2;
    call {:si_unique_call 621} sdv_233 := IoAllocateErrorLogEntry(0, Tmp_254);
    errorLogEntry := sdv_233;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} errorLogEntry != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} dumpToAllocate != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_255;
    call {:si_unique_call 622} sdv_RtlCopyMemory(0, 0, 8);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} dumpToAllocate > 8;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_253;
    call {:si_unique_call 623} sdv_RtlCopyMemory(0, 0, 8);
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_261;
    ptrToFirstInsert := Tmp_261;
    goto L57;

  L57:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} LengthOfInsert1 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 624} sdv_RtlCopyMemory(0, 0, LengthOfInsert1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} LengthOfInsert2 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 625} sdv_RtlCopyMemory(0, 0, LengthOfInsert2);
    goto L59;

  L59:
    call {:si_unique_call 626} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} LengthOfInsert2 == 0;
    goto L59;

  anon30_Then:
    assume {:partition} LengthOfInsert1 == 0;
    goto L59;

  anon26_Then:
    assume {:partition} 8 >= dumpToAllocate;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_258;
    ptrToFirstInsert := Tmp_258;
    goto L57;

  anon29_Then:
    assume {:partition} dumpToAllocate == 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_252;
    ptrToFirstInsert := Tmp_252;
    goto L57;

  anon28_Then:
    assume {:partition} errorLogEntry == 0;
    goto L1;

  anon25_Then:
    assume {:partition} sdv_232 == 0;
    goto L30;

  anon24_Then:
    assume {:partition} sdv_231 == 0;
    goto L24;

  anon23_Then:
    assume {:partition} DeviceObject_9 == 0;
    goto L19;

  anon22_Then:
    assume {:partition} Insert2 == 0;
    LengthOfInsert2 := 0;
    goto L16;

  anon21_Then:
    assume {:partition} Insert1 == 0;
    LengthOfInsert1 := 0;
    goto L14;
}



procedure {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_10: int, actual_Irp_10: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_10: int, actual_Irp_10: int)
{
  var {:pointer} Tmp_262: int;
  var {:pointer} irpSp_2: int;
  var {:pointer} extension_7: int;
  var {:pointer} DeviceObject_10: int;
  var {:pointer} Irp_10: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_1280: int;

  anon0:
    call {:si_unique_call 627} vslice_dummy_var_168 := __HAVOC_malloc(4);
    DeviceObject_10 := actual_DeviceObject_10;
    Irp_10 := actual_Irp_10;
    call {:si_unique_call 628} Tmp_262 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    havoc extension_7;
    call {:si_unique_call 629} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_10);
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_10))] := -1073741536;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    call {:si_unique_call 630} vslice_dummy_var_169 := sdv_RemoveEntryList(0);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_2)] == 4;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto L18;

  L18:
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    havoc vslice_dummy_var_1280;
    call {:si_unique_call 631} IoReleaseCancelSpinLock(vslice_dummy_var_1280);
    Tmp_262 := strConst__li2bpl1;
    call {:si_unique_call 632} vslice_dummy_var_170 := SerialDbgPrintEx(9, Tmp_262);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume Irp_10 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 633} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_10);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L43;

  L43:
    call {:si_unique_call 634} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 635} SerialIRPEpilogue(extension_7);
    goto LM2;

  LM2:
    return;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume !(Irp_10 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L43;

  anon15_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_2)] != 4;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_2)] == 14;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L32;

  L32:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto L18;

  anon18_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 636} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto L18;

  anon20_Then:
    goto L18;

  anon19_Then:
    goto L32;

  anon16_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_2)] != 14;
    goto L18;
}



procedure {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_6: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_16: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_6: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_16: int)
{
  var {:pointer} s_p_e_c_i_a_l_15: int;
  var {:pointer} Tmp_266: int;
  var {:pointer} sdv_237: int;
  var {:pointer} sdv_238: int;
  var {:pointer} s_p_e_c_i_a_l_16: int;
  var {:scalar} s_p_e_c_i_a_l_17: int;
  var {:scalar} sdv_240: int;
  var {:pointer} sdv_241: int;
  var {:scalar} sdv_242: int;
  var {:pointer} s_p_e_c_i_a_l_18: int;
  var {:scalar} s_p_e_c_i_a_l_19: int;
  var {:scalar} s_p_e_c_i_a_l_20: int;
  var {:pointer} CurrentOpIrp_6: int;
  var {:pointer} IntervalTimer_1: int;
  var {:pointer} TotalTimer_1: int;
  var {:pointer} PDevExt_16: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;

  anon0:
    call {:si_unique_call 637} vslice_dummy_var_171 := __HAVOC_malloc(4);
    CurrentOpIrp_6 := actual_CurrentOpIrp_6;
    IntervalTimer_1 := actual_IntervalTimer_1;
    TotalTimer_1 := actual_TotalTimer_1;
    PDevExt_16 := actual_PDevExt_16;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    Tmp_266 := Mem_T.P_IRP[CurrentOpIrp_6];
    assume {:nonnull} Tmp_266 != 0;
    assume Tmp_266 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    s_p_e_c_i_a_l_17 := 2;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    call {:si_unique_call 638} sdv_237 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_6]);
    assume {:nonnull} sdv_237 != 0;
    assume sdv_237 > 0;
    s_p_e_c_i_a_l_15 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_237)));
    assume {:nonnull} s_p_e_c_i_a_l_15 != 0;
    assume s_p_e_c_i_a_l_15 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_15] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_15], BNOT(s_p_e_c_i_a_l_17));
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    call {:si_unique_call 639} vslice_dummy_var_172 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentOpIrp_6], 0);
    goto L4;

  L4:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IntervalTimer_1 != 0;
    call {:si_unique_call 640} sdv_240 := SerialCancelTimer(IntervalTimer_1, PDevExt_16);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_240 != 0;
    s_p_e_c_i_a_l_19 := 8;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    call {:si_unique_call 641} sdv_241 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_6]);
    assume {:nonnull} sdv_241 != 0;
    assume sdv_241 > 0;
    s_p_e_c_i_a_l_18 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_241)));
    assume {:nonnull} s_p_e_c_i_a_l_18 != 0;
    assume s_p_e_c_i_a_l_18 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_18] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_18], BNOT(s_p_e_c_i_a_l_19));
    goto L16;

  L16:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} TotalTimer_1 != 0;
    call {:si_unique_call 642} sdv_242 := SerialCancelTimer(TotalTimer_1, PDevExt_16);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_242 != 0;
    s_p_e_c_i_a_l_20 := 4;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    call {:si_unique_call 643} sdv_238 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_6]);
    assume {:nonnull} sdv_238 != 0;
    assume sdv_238 > 0;
    s_p_e_c_i_a_l_16 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_238)));
    assume {:nonnull} s_p_e_c_i_a_l_16 != 0;
    assume s_p_e_c_i_a_l_16 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_16] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_16], BNOT(s_p_e_c_i_a_l_20));
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} sdv_242 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} TotalTimer_1 == 0;
    goto L1;

  anon13_Then:
    assume {:partition} sdv_240 == 0;
    goto L16;

  anon11_Then:
    assume {:partition} IntervalTimer_1 == 0;
    goto L16;

  anon15_Then:
    goto L4;
}



procedure {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_17: int) returns (Tmp_268: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_268 == 0 || Tmp_268 == -1073741536 || Tmp_268 == 259 || Tmp_268 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_17: int) returns (Tmp_268: int)
{
  var {:scalar} oldIrqlFlags: int;
  var {:scalar} oldIrql_5: int;
  var {:pointer} pIrpStack_5: int;
  var {:pointer} Tmp_269: int;
  var {:pointer} PIrp_10: int;
  var {:pointer} PDevExt_17: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;

  anon0:
    PIrp_10 := actual_PIrp_10;
    PDevExt_17 := actual_PDevExt_17;
    call {:si_unique_call 644} pIrpStack_5 := sdv_IoGetCurrentIrpStackLocation(PIrp_10);
    call {:si_unique_call 645} Tmp_269 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    Mem_T.INT4[Tmp_269] := oldIrqlFlags;
    call {:si_unique_call 646} sdv_KeAcquireSpinLock(0, Tmp_269);
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    oldIrqlFlags := Mem_T.INT4[Tmp_269];
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)] != 0;
    goto L14;

  L14:
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 1) != 0;
    goto L16;

  L16:
    call {:si_unique_call 647} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_5)] == 27;
    Tmp_268 := 0;
    goto L1;

  L1:
    return;

  anon31_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_5)] != 27;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741738;
    Tmp_268 := -1073741738;
    goto L1;

  anon29_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 1) == 0;
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 4) == 0;
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 8) == 0;
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 2) != 0;
    goto L27;

  L27:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_5)] == 27;
    call {:si_unique_call 648} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_268 := 0;
    goto L1;

  anon35_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_5)] != 27;
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_5)] == 22;
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 16) != 0;
    call {:si_unique_call 649} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_268 := 0;
    goto L1;

  anon37_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 16) == 0;
    goto L33;

  L33:
    call {:si_unique_call 650} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    call {:si_unique_call 651} Tmp_269 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    Mem_T.INT4[Tmp_269] := oldIrql_5;
    call {:si_unique_call 652} IoAcquireCancelSpinLock(Tmp_269);
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_269];
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    call {:si_unique_call 653} IoReleaseCancelSpinLock(oldIrql_5);
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741536;
    Tmp_268 := -1073741536;
    goto L1;

  anon38_Then:
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := 259;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume PIrp_10 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 654} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl0);
    goto L86;

  L86:
    call {:si_unique_call 655} sdv_IoMarkIrpPending(0);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    call {:si_unique_call 656} vslice_dummy_var_173 := sdv_InsertTailList(StalledIrpQueue__SERIAL_DEVICE_EXTENSION(PDevExt_17), ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(PIrp_10))));
    call {:si_unique_call 657} vslice_dummy_var_174 := sdv_IoSetCancelRoutine(PIrp_10, li2bplFunctionConstant667);
    call {:si_unique_call 658} IoReleaseCancelSpinLock(oldIrql_5);
    Tmp_268 := 259;
    goto L1;

  anon39_Then:
    assume !(PIrp_10 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L86;

  anon36_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_5)] != 22;
    goto L33;

  anon33_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 2) == 0;
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 16) == 0;
    call {:si_unique_call 659} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_268 := 0;
    goto L1;

  anon34_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 16) != 0;
    goto L27;

  anon32_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 8) != 0;
    goto L16;

  anon30_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 4) != 0;
    goto L16;

  anon27_Then:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_17)] == 0;
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 4) == 0;
    call {:si_unique_call 660} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_268 := 0;
    goto L1;

  anon28_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_17)], 4) != 0;
    goto L14;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_175: int;

  anon0:
    call {:si_unique_call 661} vslice_dummy_var_175 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_272: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_272: int)
{
  var {:pointer} Tmp_273: int;
  var {:pointer} Tmp_274: int;
  var {:scalar} Status: int;
  var {:pointer} IrpSp_2: int;
  var {:scalar} sdv_250: int;
  var {:pointer} Tmp_276: int;
  var {:scalar} status_13: int;
  var {:pointer} Buf: int;
  var {:pointer} Tmp_277: int;
  var {:pointer} DeviceObject_11: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_1281: int;
  var vslice_dummy_var_1282: int;
  var vslice_dummy_var_1283: int;

  anon0:
    DeviceObject_11 := actual_DeviceObject_11;
    Irp_11 := actual_Irp_11;
    call {:si_unique_call 662} Tmp_273 := __HAVOC_malloc(72);
    call {:si_unique_call 663} Tmp_274 := __HAVOC_malloc(96);
    call {:si_unique_call 664} Tmp_277 := __HAVOC_malloc(72);
    call {:si_unique_call 665} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_1281;
    call {:si_unique_call 666} status_13 := SerialIRPPrologue(Irp_11, vslice_dummy_var_1281);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_13 != 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_13 != 259;
    Tmp_277 := strConst__li2bpl1;
    call {:si_unique_call 667} vslice_dummy_var_176 := SerialDbgPrintEx(9, Tmp_277);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume Irp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 668} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_11);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L69;

  L69:
    call {:si_unique_call 669} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_1282;
    call {:si_unique_call 670} SerialIRPEpilogue(vslice_dummy_var_1282);
    goto L18;

  L18:
    Tmp_272 := status_13;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume !(Irp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L69;

  anon26_Then:
    assume {:partition} status_13 == 259;
    goto L18;

  anon25_Then:
    assume {:partition} status_13 == 0;
    Tmp_274 := strConst__li2bpl33;
    call {:si_unique_call 671} vslice_dummy_var_177 := SerialDbgPrintEx(9, Tmp_274);
    call {:si_unique_call 672} sdv_250 := SerialCompleteIfError(DeviceObject_11, Irp_11);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} sdv_250 != 0;
    Tmp_272 := -1073741536;
    goto L1;

  anon28_Then:
    assume {:partition} sdv_250 == 0;
    call {:si_unique_call 673} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_11);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Status := 0;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Buf;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto L44;

  L44:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := Status;
    Tmp_273 := strConst__li2bpl1;
    call {:si_unique_call 674} vslice_dummy_var_178 := SerialDbgPrintEx(9, Tmp_273);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume Irp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 675} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_11);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 676} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_1283;
    call {:si_unique_call 677} SerialIRPEpilogue(vslice_dummy_var_1283);
    Tmp_272 := Status;
    goto L1;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume !(Irp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon30_Then:
    Status := -1073741789;
    goto L44;

  anon35_Then:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    Status := -1073741789;
    goto L44;

  anon32_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Tmp_276;
    assume {:nonnull} Tmp_276 != 0;
    assume Tmp_276 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto L44;

  anon29_Then:
    Status := -1073741811;
    goto L44;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_12: int, actual_Irp_12: int) returns (Tmp_278: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_12: int, actual_Irp_12: int) returns (Tmp_278: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} sdv_252: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} sdv_255: int;
  var {:scalar} sdv_256: int;
  var {:pointer} Tmp_281: int;
  var {:pointer} Tmp_282: int;
  var {:pointer} DeviceObject_12: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_179: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;
  var vslice_dummy_var_1284: int;
  var vslice_dummy_var_1285: int;
  var vslice_dummy_var_1286: int;

  anon0:
    DeviceObject_12 := actual_DeviceObject_12;
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 678} Tmp_280 := __HAVOC_malloc(72);
    call {:si_unique_call 679} Tmp_281 := __HAVOC_malloc(96);
    call {:si_unique_call 680} Tmp_282 := __HAVOC_malloc(72);
    call {:si_unique_call 681} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_1284;
    call {:si_unique_call 682} Status_1 := SerialIRPPrologue(Irp_12, vslice_dummy_var_1284);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_1 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Status_1 != 259;
    Tmp_280 := strConst__li2bpl1;
    call {:si_unique_call 683} vslice_dummy_var_179 := SerialDbgPrintEx(9, Tmp_280);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 684} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_12);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  L57:
    call {:si_unique_call 685} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_1285;
    call {:si_unique_call 686} SerialIRPEpilogue(vslice_dummy_var_1285);
    goto L16;

  L16:
    Tmp_278 := Status_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume !(Irp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L57;

  anon22_Then:
    assume {:partition} Status_1 == 259;
    goto L16;

  anon21_Then:
    assume {:partition} Status_1 == 0;
    Tmp_281 := strConst__li2bpl33;
    call {:si_unique_call 687} vslice_dummy_var_180 := SerialDbgPrintEx(9, Tmp_281);
    call {:si_unique_call 688} sdv_256 := SerialCompleteIfError(DeviceObject_12, Irp_12);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_256 != 0;
    Tmp_278 := -1073741536;
    goto L1;

  anon24_Then:
    assume {:partition} sdv_256 == 0;
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    call {:si_unique_call 689} sdv_255 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} sdv_255 != 0;
    assume sdv_255 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L39;

  L39:
    Status_1 := 0;
    goto L40;

  L40:
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_12))] := Status_1;
    Tmp_282 := strConst__li2bpl1;
    call {:si_unique_call 690} vslice_dummy_var_181 := SerialDbgPrintEx(9, Tmp_282);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 691} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_12);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L60;

  L60:
    call {:si_unique_call 692} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_1286;
    call {:si_unique_call 693} SerialIRPEpilogue(vslice_dummy_var_1286);
    Tmp_278 := Status_1;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L60;

  anon25_Then:
    call {:si_unique_call 694} sdv_252 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} sdv_252 != 0;
    assume sdv_252 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Status_1 := -1073741811;
    goto L40;

  anon27_Then:
    goto L39;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartRead"} SerialStartRead(actual_Extension_11: int) returns (Tmp_283: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartRead"} SerialStartRead(actual_Extension_11: int) returns (Tmp_283: int)
{
  var {:scalar} localStatus_1: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} Tmp_284: int;
  var {:pointer} Tmp_285: int;
  var {:pointer} Tmp_286: int;
  var {:pointer} sdv_258: int;
  var {:pointer} Tmp_287: int;
  var {:pointer} Tmp_288: int;
  var {:pointer} Tmp_289: int;
  var {:pointer} sdv_259: int;
  var {:pointer} Tmp_290: int;
  var {:pointer} Tmp_291: int;
  var {:scalar} totalTime: int;
  var {:scalar} os2ssreturn: int;
  var {:scalar} updateChar: int;
  var {:scalar} timeoutsForIrp: int;
  var {:scalar} setFirstStatus: int;
  var {:scalar} useTotalTimer: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} multiplierVal: int;
  var {:scalar} crunchDownToOne: int;
  var {:pointer} sdv_264: int;
  var {:scalar} s_p_e_c_i_a_l_22: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_266: int;
  var {:scalar} constantVal: int;
  var {:pointer} s_p_e_c_i_a_l_23: int;
  var {:pointer} sdv_270: int;
  var {:scalar} controlIrql: int;
  var {:pointer} Tmp_292: int;
  var {:scalar} s_p_e_c_i_a_l_24: int;
  var {:scalar} returnWithWhatsPresent: int;
  var {:scalar} useIntervalTimer: int;
  var {:pointer} Tmp_293: int;
  var {:pointer} sdv_273: int;
  var {:scalar} firstStatus: int;
  var {:pointer} Extension_11: int;
  var boogieTmp: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_183: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_1287: int;

  anon0:
    call {:si_unique_call 695} totalTime := __HAVOC_malloc(20);
    call {:si_unique_call 696} updateChar := __HAVOC_malloc(12);
    call {:si_unique_call 697} timeoutsForIrp := __HAVOC_malloc(20);
    call {:si_unique_call 698} newIrp_1 := __HAVOC_malloc(4);
    Extension_11 := actual_Extension_11;
    call {:si_unique_call 699} Tmp_287 := __HAVOC_malloc(84);
    call {:si_unique_call 700} Tmp_292 := __HAVOC_malloc(88);
    setFirstStatus := 0;
    Tmp_292 := strConst__li2bpl54;
    call {:si_unique_call 701} vslice_dummy_var_185 := SerialDbgPrintEx(2, Tmp_292);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto L23;

  L23:
    call {:si_unique_call 702} localStatus_1, Tmp_285, Tmp_286, sdv_258, Tmp_288, Tmp_289, Tmp_290, Tmp_291, os2ssreturn, setFirstStatus, useTotalTimer, multiplierVal, crunchDownToOne, sdv_264, oldIrql_6, sdv_266, constantVal, controlIrql, returnWithWhatsPresent, useIntervalTimer, Tmp_293, sdv_273, firstStatus, boogieTmp, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_187 := SerialStartRead_loop_L23(localStatus_1, Tmp_285, Tmp_286, sdv_258, Tmp_288, Tmp_289, Tmp_290, Tmp_291, totalTime, os2ssreturn, updateChar, timeoutsForIrp, setFirstStatus, useTotalTimer, newIrp_1, multiplierVal, crunchDownToOne, sdv_264, oldIrql_6, sdv_266, constantVal, controlIrql, returnWithWhatsPresent, useIntervalTimer, Tmp_293, sdv_273, firstStatus, Extension_11, boogieTmp, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_187);
    goto L23_last;

  L23_last:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 733} sdv_264 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)]);
    assume {:nonnull} sdv_264 != 0;
    assume sdv_264 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_264)] != 3;
    call {:si_unique_call 703} localStatus_1 := SerialResizeBuffer(Extension_11);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 704} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11), ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_11), newIrp_1, 1, Extension_11);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.P_IRP[newIrp_1] == 0;
    Tmp_287 := strConst__li2bpl53;
    call {:si_unique_call 705} vslice_dummy_var_186 := SerialDbgPrintEx(2, Tmp_287);
    Tmp_283 := firstStatus;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon63_Then:
    assume {:partition} Mem_T.P_IRP[newIrp_1] != 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := localStatus_1;
    setFirstStatus := 1;
    goto L37;

  anon61_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_264)] == 3;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 706} sdv_266 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)]);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} sdv_266 != 0;
    assume sdv_266 > 0;
    useTotalTimer := 0;
    returnWithWhatsPresent := 0;
    os2ssreturn := 0;
    crunchDownToOne := 0;
    useIntervalTimer := 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 707} vslice_dummy_var_187 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_11), Extension_11);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 708} vslice_dummy_var_182 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_11), Extension_11);
    call {:si_unique_call 709} Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    Mem_T.INT4[Tmp_291] := controlIrql;
    call {:si_unique_call 710} sdv_KeAcquireSpinLock(0, Tmp_291);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    controlIrql := Mem_T.INT4[Tmp_291];
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    call {:si_unique_call 711} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    useIntervalTimer := 1;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto L66;

  L66:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L76;

  L76:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  L83:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} useTotalTimer != 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} totalTime != 0;
    assume totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 712} Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    Mem_T.INT4[Tmp_291] := controlIrql;
    call {:si_unique_call 713} sdv_KeAcquireSpinLock(0, Tmp_291);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    controlIrql := Mem_T.INT4[Tmp_291];
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    call {:si_unique_call 714} boogieTmp := SerialGetCharsFromIntBuffer(Extension_11);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 715} vslice_dummy_var_183 := KeSynchronizeExecution(0, li2bplFunctionConstant721, 0);
    call {:si_unique_call 716} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    Tmp_286 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)];
    assume {:nonnull} Tmp_286 != 0;
    assume Tmp_286 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_286))] := 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon74_Then:
    assume {:partition} returnWithWhatsPresent == 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} os2ssreturn != 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    Tmp_285 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)];
    assume {:nonnull} Tmp_285 != 0;
    assume Tmp_285 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto L105;

  L105:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 717} sdv_273 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)]);
    assume {:nonnull} sdv_273 != 0;
    assume sdv_273 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_273)))] := 0;
    call {:si_unique_call 718} Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    Mem_T.INT4[Tmp_291] := oldIrql_6;
    call {:si_unique_call 719} IoAcquireCancelSpinLock(Tmp_291);
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    oldIrql_6 := Mem_T.INT4[Tmp_291];
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    Tmp_288 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)];
    assume {:nonnull} Tmp_288 != 0;
    assume Tmp_288 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    call {:si_unique_call 720} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 721} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    Tmp_293 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)];
    assume {:nonnull} Tmp_293 != 0;
    assume Tmp_293 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_293))] := -1073741536;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    Tmp_289 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)];
    assume {:nonnull} Tmp_289 != 0;
    assume Tmp_289 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := -1073741536;
    setFirstStatus := 1;
    goto L37;

  anon89_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon88_Then:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} crunchDownToOne != 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 722} sdv_258 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)]);
    assume {:nonnull} sdv_258 != 0;
    assume sdv_258 > 0;
    goto L126;

  L126:
    call {:si_unique_call 723} vslice_dummy_var_184 := KeSynchronizeExecution(0, li2bplFunctionConstant722, 0);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    call {:si_unique_call 724} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 725} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    Tmp_290 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)];
    assume {:nonnull} Tmp_290 != 0;
    assume Tmp_290 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_290))] := 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon90_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon78_Then:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} useTotalTimer != 0;
    s_p_e_c_i_a_l_22 := 4;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 726} sdv_259 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)]);
    assume {:nonnull} sdv_259 != 0;
    assume sdv_259 > 0;
    s_p_e_c_i_a_l_21 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_259)));
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_21] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_21], s_p_e_c_i_a_l_22);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 727} vslice_dummy_var_188 := SerialSetTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_11), totalTime, TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_11), Extension_11);
    goto L146;

  L146:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} useIntervalTimer != 0;
    s_p_e_c_i_a_l_24 := 8;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 728} sdv_270 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_11)]);
    assume {:nonnull} sdv_270 != 0;
    assume sdv_270 > 0;
    s_p_e_c_i_a_l_23 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_270)));
    assume {:nonnull} s_p_e_c_i_a_l_23 != 0;
    assume s_p_e_c_i_a_l_23 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_23] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_23], s_p_e_c_i_a_l_24);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc Tmp_284;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} Tmp_284 != 0;
    assume Tmp_284 > 0;
    havoc vslice_dummy_var_1287;
    call {:si_unique_call 729} vslice_dummy_var_189 := SerialSetTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_11), vslice_dummy_var_1287, IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_11), Extension_11);
    goto L158;

  L158:
    call {:si_unique_call 730} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 731} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 732} sdv_KeReleaseSpinLock(0, controlIrql);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} setFirstStatus != 0;
    goto L183;

  L183:
    Tmp_283 := firstStatus;
    goto L1;

  anon81_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 259;
    goto L183;

  anon80_Then:
    assume {:partition} useIntervalTimer == 0;
    goto L158;

  anon79_Then:
    assume {:partition} useTotalTimer == 0;
    goto L146;

  anon77_Then:
    assume {:partition} crunchDownToOne == 0;
    goto L126;

  anon87_Then:
    goto L94;

  anon76_Then:
    assume {:partition} os2ssreturn == 0;
    goto L105;

  anon75_Then:
    goto L94;

  anon73_Then:
    assume {:partition} useTotalTimer == 0;
    goto L84;

  anon72_Then:
    goto L77;

  L77:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    crunchDownToOne := 1;
    multiplierVal := 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon82_Then:
    goto L83;

  anon71_Then:
    goto L83;

  anon70_Then:
    goto L77;

  anon68_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    returnWithWhatsPresent := 1;
    goto L83;

  anon69_Then:
    goto L76;

  anon65_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L192;

  L192:
    useTotalTimer := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon67_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L192;

  anon83_Then:
    goto L83;

  anon85_Then:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto L66;

  anon66_Then:
    goto L66;

  anon64_Then:
    goto L66;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_190: int;

  anon0:
    call {:si_unique_call 734} vslice_dummy_var_190 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_12: int, actual_NewBuffer: int) returns (Tmp_296: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_12: int, actual_NewBuffer: int) returns (Tmp_296: int)
{
  var {:scalar} firstTryNumberToGet: int;
  var {:scalar} numberOfCharsMoved: int;
  var {:scalar} Tmp_298: int;
  var {:pointer} Extension_12: int;
  var {:pointer} NewBuffer: int;

  anon0:
    Extension_12 := actual_Extension_12;
    NewBuffer := actual_NewBuffer;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc numberOfCharsMoved;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} numberOfCharsMoved != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc firstTryNumberToGet;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} firstTryNumberToGet >= numberOfCharsMoved;
    call {:si_unique_call 735} sdv_RtlMoveMemory(0, 0, numberOfCharsMoved);
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    goto L6;

  L6:
    Tmp_296 := numberOfCharsMoved;
    return;

  anon7_Then:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    goto L6;

  anon9_Then:
    assume {:partition} numberOfCharsMoved > firstTryNumberToGet;
    call {:si_unique_call 736} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet);
    Tmp_298 := numberOfCharsMoved - firstTryNumberToGet;
    call {:si_unique_call 737} sdv_RtlMoveMemory(0, 0, Tmp_298);
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    goto L6;

  anon8_Then:
    assume {:partition} numberOfCharsMoved == 0;
    goto L6;
}



procedure {:origName "SerialRead"} SerialRead(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_300: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialRead"} SerialRead(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_300: int)
{
  var {:pointer} Tmp_301: int;
  var {:pointer} Tmp_302: int;
  var {:scalar} sdv_276: int;
  var {:pointer} sdv_278: int;
  var {:pointer} Tmp_303: int;
  var {:pointer} Tmp_304: int;
  var {:pointer} Tmp_306: int;
  var {:pointer} Tmp_307: int;
  var {:scalar} status_14: int;
  var {:pointer} extension_8: int;
  var {:pointer} Tmp_308: int;
  var {:pointer} Tmp_309: int;
  var {:pointer} DeviceObject_13: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;

  anon0:
    DeviceObject_13 := actual_DeviceObject_13;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 738} Tmp_301 := __HAVOC_malloc(96);
    call {:si_unique_call 739} Tmp_302 := __HAVOC_malloc(72);
    call {:si_unique_call 740} Tmp_303 := __HAVOC_malloc(80);
    call {:si_unique_call 741} Tmp_304 := __HAVOC_malloc(80);
    call {:si_unique_call 742} Tmp_306 := __HAVOC_malloc(80);
    call {:si_unique_call 743} Tmp_307 := __HAVOC_malloc(80);
    call {:si_unique_call 744} Tmp_308 := __HAVOC_malloc(84);
    call {:si_unique_call 745} Tmp_309 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_13 != 0;
    assume DeviceObject_13 > 0;
    havoc extension_8;
    Tmp_308 := strConst__li2bpl59;
    call {:si_unique_call 746} vslice_dummy_var_191 := SerialDbgPrintEx(2, Tmp_308);
    call {:si_unique_call 747} status_14 := SerialIRPPrologue(Irp_13, extension_8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_14 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_14 != 259;
    Tmp_309 := strConst__li2bpl1;
    call {:si_unique_call 748} vslice_dummy_var_192 := SerialDbgPrintEx(9, Tmp_309);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 749} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_13);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L69;

  L69:
    call {:si_unique_call 750} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 751} SerialIRPEpilogue(extension_8);
    goto L19;

  L19:
    Tmp_303 := strConst__li2bpl55;
    call {:si_unique_call 752} vslice_dummy_var_193 := SerialDbgPrintEx(2, Tmp_303);
    Tmp_300 := status_14;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume !(Irp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L69;

  anon22_Then:
    assume {:partition} status_14 == 259;
    goto L19;

  anon21_Then:
    assume {:partition} status_14 == 0;
    Tmp_301 := strConst__li2bpl33;
    call {:si_unique_call 753} vslice_dummy_var_194 := SerialDbgPrintEx(9, Tmp_301);
    call {:si_unique_call 754} sdv_276 := SerialCompleteIfError(DeviceObject_13, Irp_13);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_276 != 0;
    Tmp_304 := strConst__li2bpl56;
    call {:si_unique_call 755} vslice_dummy_var_195 := SerialDbgPrintEx(2, Tmp_304);
    Tmp_300 := -1073741536;
    goto L1;

  anon24_Then:
    assume {:partition} sdv_276 == 0;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 756} sdv_278 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    assume {:nonnull} sdv_278 != 0;
    assume sdv_278 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 757} status_14 := SerialStartOrQueue(extension_8, Irp_13, ReadQueue__SERIAL_DEVICE_EXTENSION(extension_8), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_8), li2bplFunctionConstant720);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    Tmp_306 := strConst__li2bpl57;
    call {:si_unique_call 758} vslice_dummy_var_196 := SerialDbgPrintEx(2, Tmp_306);
    Tmp_300 := status_14;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_13))] := 0;
    Tmp_302 := strConst__li2bpl1;
    call {:si_unique_call 759} vslice_dummy_var_197 := SerialDbgPrintEx(9, Tmp_302);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 760} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_13);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 761} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 762} SerialIRPEpilogue(extension_8);
    Tmp_307 := strConst__li2bpl58;
    call {:si_unique_call 763} vslice_dummy_var_198 := SerialDbgPrintEx(2, Tmp_307);
    Tmp_300 := 0;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_13: int) returns (Tmp_310: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_13: int) returns (Tmp_310: int)
{
  var {:scalar} numberOfCharsToGet: int;
  var {:pointer} Tmp_312: int;
  var {:scalar} firstTryNumberToGet_1: int;
  var {:pointer} Tmp_313: int;
  var {:pointer} Tmp_317: int;
  var {:pointer} Tmp_318: int;
  var {:scalar} Tmp_319: int;
  var {:pointer} Tmp_320: int;
  var {:pointer} Extension_13: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;
  var vslice_dummy_var_201: int;

  anon0:
    Extension_13 := actual_Extension_13;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    havoc numberOfCharsToGet;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    havoc numberOfCharsToGet;
    goto L7;

  L7:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} numberOfCharsToGet != 0;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    havoc firstTryNumberToGet_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} firstTryNumberToGet_1 > numberOfCharsToGet;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    call {:si_unique_call 764} vslice_dummy_var_200 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)]);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    Tmp_312 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)];
    assume {:nonnull} Tmp_312 != 0;
    assume Tmp_312 > 0;
    call {:si_unique_call 765} sdv_RtlMoveMemory(0, 0, numberOfCharsToGet);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    goto L9;

  L9:
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    Tmp_317 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)];
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    Tmp_320 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)];
    assume {:nonnull} Tmp_317 != 0;
    assume Tmp_317 > 0;
    assume {:nonnull} Tmp_320 != 0;
    assume Tmp_320 > 0;
    Tmp_310 := numberOfCharsToGet;
    return;

  anon12_Then:
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    goto L9;

  anon11_Then:
    assume {:partition} numberOfCharsToGet >= firstTryNumberToGet_1;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    call {:si_unique_call 766} vslice_dummy_var_199 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)]);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    Tmp_313 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)];
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    call {:si_unique_call 767} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet_1);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    Tmp_319 := numberOfCharsToGet - firstTryNumberToGet_1;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    call {:si_unique_call 768} vslice_dummy_var_201 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)]);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    Tmp_318 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_13)];
    assume {:nonnull} Tmp_318 != 0;
    assume Tmp_318 > 0;
    call {:si_unique_call 769} sdv_RtlMoveMemory(0, 0, Tmp_319);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    goto L9;

  anon9_Then:
    assume {:partition} numberOfCharsToGet == 0;
    goto L9;

  anon10_Then:
    goto L7;
}



procedure {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_14: int) returns (Tmp_321: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_321 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_14: int) returns (Tmp_321: int)
{
  var {:pointer} Tmp_322: int;
  var {:pointer} Tmp_323: int;
  var {:pointer} irpSp_3: int;
  var {:pointer} newBuffer: int;
  var {:pointer} Tmp_324: int;
  var {:pointer} rs: int;
  var {:scalar} controlIrql_1: int;
  var {:scalar} rp: int;
  var {:pointer} Tmp_325: int;
  var {:pointer} Extension_14: int;
  var boogieTmp: int;
  var vslice_dummy_var_202: int;

  anon0:
    call {:si_unique_call 770} rp := __HAVOC_malloc(20);
    Extension_14 := actual_Extension_14;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    Tmp_325 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_14)];
    assume {:nonnull} Tmp_325 != 0;
    assume Tmp_325 > 0;
    havoc rs;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 771} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_14)]);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    havoc newBuffer;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    Tmp_324 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_14)];
    assume {:nonnull} Tmp_324 != 0;
    assume Tmp_324 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    Tmp_323 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_14)];
    assume {:nonnull} Tmp_323 != 0;
    assume Tmp_323 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_323))] := 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    call {:si_unique_call 772} Tmp_322 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_322 != 0;
    assume Tmp_322 > 0;
    Mem_T.INT4[Tmp_322] := controlIrql_1;
    call {:si_unique_call 773} sdv_KeAcquireSpinLock(0, Tmp_322);
    assume {:nonnull} Tmp_322 != 0;
    assume Tmp_322 > 0;
    controlIrql_1 := Mem_T.INT4[Tmp_322];
    assume {:nonnull} rp != 0;
    assume rp > 0;
    call {:si_unique_call 774} boogieTmp := SerialMoveToNewIntBuffer(Extension_14, newBuffer);
    call {:si_unique_call 775} vslice_dummy_var_202 := KeSynchronizeExecution(0, li2bplFunctionConstant731, 0);
    call {:si_unique_call 776} sdv_KeReleaseSpinLock(0, controlIrql_1);
    call {:si_unique_call 777} sdv_ExFreePool(0);
    goto L20;

  L20:
    Tmp_321 := 0;
    return;

  anon3_Then:
    call {:si_unique_call 778} sdv_ExFreePool(0);
    goto L20;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_203: int;

  anon0:
    call {:si_unique_call 779} vslice_dummy_var_203 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_14: int, actual_Irp_14: int, actual_SerialSyncEventIn: int) returns (Tmp_328: int);
  free ensures {:va_keep} Tmp_328 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_14: int, actual_Irp_14: int, actual_SerialSyncEventIn: int) returns (Tmp_328: int)
{
  var {:pointer} SerialSyncEvent: int;
  var {:pointer} SerialSyncEventIn: int;
  var vslice_dummy_var_204: int;

  anon0:
    SerialSyncEventIn := actual_SerialSyncEventIn;
    SerialSyncEvent := SerialSyncEventIn;
    call {:si_unique_call 780} vslice_dummy_var_204 := KeSetEvent(SerialSyncEvent, 0, 0);
    Tmp_328 := -1073741802;
    return;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_205: int;

  anon0:
    call {:si_unique_call 781} vslice_dummy_var_205 := __HAVOC_malloc(4);
    assume currentInstance_sdv_static_local_variable_304 == 0;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt_18: int, actual_PDrvObj: int) returns (Tmp_332: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_332 == -1073741811 || Tmp_332 == -1073741808 || Tmp_332 == -1073741823 || Tmp_332 == 0 || Tmp_332 == 5 || Tmp_332 == -1073741789 || Tmp_332 == -1073741670 || Tmp_332 == -1073741772 || Tmp_332 == -1073741824;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt_18: int, actual_PDrvObj: int) returns (Tmp_332: int)
{
  var {:scalar} Tmp_333: int;
  var {:pointer} Tmp_334: int;
  var {:scalar} bufLen: int;
  var {:scalar} Tmp_335: int;
  var {:scalar} Tmp_337: int;
  var {:scalar} Tmp_338: int;
  var {:scalar} Tmp_339: int;
  var {:pointer} Tmp_340: int;
  var {:pointer} keyHandle: int;
  var {:scalar} Tmp_343: int;
  var {:pointer} Tmp_344: int;
  var {:pointer} pRegName: int;
  var {:scalar} sdv_300: int;
  var {:pointer} sdv_302: int;
  var {:scalar} Tmp_346: int;
  var {:scalar} Tmp_347: int;
  var {:scalar} Tmp_348: int;
  var {:pointer} Tmp_349: int;
  var {:scalar} Tmp_350: int;
  var {:pointer} Tmp_352: int;
  var {:scalar} Tmp_356: int;
  var {:pointer} sdv_312: int;
  var {:scalar} status_15: int;
  var {:pointer} Tmp_357: int;
  var {:pointer} pDevObj_1: int;
  var {:pointer} Tmp_359: int;
  var {:pointer} Tmp_362: int;
  var {:scalar} Tmp_363: int;
  var {:pointer} Tmp_365: int;
  var {:pointer} PDevExt_18: int;
  var {:pointer} PDrvObj: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_1288: int;
  var vslice_dummy_var_1289: int;

  anon0:
    call {:si_unique_call 782} Tmp_333 := __HAVOC_malloc(20);
    call {:si_unique_call 783} Tmp_335 := __HAVOC_malloc(20);
    call {:si_unique_call 784} Tmp_337 := __HAVOC_malloc(20);
    call {:si_unique_call 785} Tmp_338 := __HAVOC_malloc(20);
    call {:si_unique_call 786} Tmp_343 := __HAVOC_malloc(20);
    call {:si_unique_call 787} pRegName := __HAVOC_malloc(4);
    call {:si_unique_call 788} Tmp_348 := __HAVOC_malloc(20);
    call {:si_unique_call 789} Tmp_350 := __HAVOC_malloc(20);
    call {:si_unique_call 790} Tmp_356 := __HAVOC_malloc(20);
    PDevExt_18 := actual_PDevExt_18;
    PDrvObj := actual_PDrvObj;
    call {:si_unique_call 791} Tmp_334 := __HAVOC_malloc(156);
    call {:si_unique_call 792} vslice_dummy_var_211 := __HAVOC_malloc(44);
    call {:si_unique_call 793} Tmp_340 := __HAVOC_malloc(184);
    call {:si_unique_call 794} Tmp_344 := __HAVOC_malloc(64);
    call {:si_unique_call 795} Tmp_349 := __HAVOC_malloc(156);
    call {:si_unique_call 796} Tmp_352 := __HAVOC_malloc(192);
    call {:si_unique_call 797} vslice_dummy_var_212 := __HAVOC_malloc(44);
    call {:si_unique_call 798} Tmp_357 := __HAVOC_malloc(236);
    call {:si_unique_call 799} Tmp_359 := __HAVOC_malloc(100);
    call {:si_unique_call 800} Tmp_365 := __HAVOC_malloc(200);
    status_15 := 0;
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    call {:si_unique_call 801} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc pDevObj_1;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 802} status_15 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_15 != 0;
    Tmp_332 := status_15;
    goto L1;

  L1:
    return;

  anon35_Then:
    assume {:partition} status_15 == 0;
    Tmp_359 := strConst__li2bpl60;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 803} vslice_dummy_var_213 := SerialGetRegistryKeyValue(keyHandle, Tmp_359, 50, SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt_18), 4);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt_18)] != 0;
    call {:si_unique_call 804} vslice_dummy_var_206 := ZwClose(0);
    Tmp_332 := 0;
    goto L1;

  anon36_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt_18)] == 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 805} status_15 := SerialReadSymName(PDevExt_18, keyHandle, SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt_18), pRegName);
    call {:si_unique_call 806} vslice_dummy_var_207 := ZwClose(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_15 < 0;
    goto L111;

  L111:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} status_15 >= 0;
    goto L113;

  L113:
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    call {:si_unique_call 807} sdv_ExFreePool(0);
    goto L114;

  L114:
    Tmp_332 := status_15;
    goto L1;

  anon44_Then:
    goto L114;

  anon42_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 808} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto L118;

  L118:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 809} vslice_dummy_var_209 := IoDeleteSymbolicLink(0);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto L123;

  L123:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 810} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto L128;

  L128:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 811} vslice_dummy_var_216 := RtlDeleteRegistryValue(4, 0, 0);
    goto L133;

  L133:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    call {:si_unique_call 812} vslice_dummy_var_210 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 813} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto L137;

  L137:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 814} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto L113;

  anon49_Then:
    goto L113;

  anon48_Then:
    goto L137;

  anon47_Then:
    goto L133;

  anon46_Then:
    goto L128;

  anon45_Then:
    goto L123;

  anon43_Then:
    goto L118;

  anon37_Then:
    assume {:partition} 0 <= status_15;
    bufLen := sdv_300 * 2 + 2;
    call {:si_unique_call 815} sdv_312 := ExAllocatePoolWithTag(1, bufLen, -666022077);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 816} sdv_RtlZeroMemory(0, bufLen);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 817} vslice_dummy_var_214 := corral_nondet();
    call {:si_unique_call 818} sdv_302 := ExAllocatePoolWithTag(1, 66, -666022077);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc Tmp_339;
    call {:si_unique_call 819} sdv_RtlZeroMemory(0, Tmp_339);
    call {:si_unique_call 820} vslice_dummy_var_208 := corral_nondet();
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc Tmp_362;
    call {:si_unique_call 821} sdv_RtlZeroMemory(0, 2);
    Tmp_344 := strConst__li2bpl61;
    call {:si_unique_call 822} vslice_dummy_var_215 := SerialDbgPrintEx(4, Tmp_344);
    call {:si_unique_call 823} status_15 := IoCreateSymbolicLink(0, 0);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc Tmp_346;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 824} status_15 := RtlWriteRegistryValue(4, 0, 0, 1, 0, Tmp_346);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 825} status_15 := IoRegisterDeviceInterface(0, 0, 0, DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt_18));
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} status_15 >= 0;
    call {:si_unique_call 826} status_15 := IoSetDeviceInterfaceState(0, 1);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_15 >= 0;
    goto L111;

  anon41_Then:
    assume {:partition} 0 > status_15;
    Tmp_340 := strConst__li2bpl63;
    call {:si_unique_call 827} vslice_dummy_var_217 := SerialDbgPrintEx(14, Tmp_340);
    goto L111;

  anon40_Then:
    assume {:partition} 0 > status_15;
    Tmp_365 := strConst__li2bpl62;
    call {:si_unique_call 828} vslice_dummy_var_218 := SerialDbgPrintEx(14, Tmp_365);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    goto L111;

  anon39_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc Tmp_347;
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    assume {:nonnull} Tmp_333 != 0;
    assume Tmp_333 > 0;
    assume {:nonnull} Tmp_333 != 0;
    assume Tmp_333 > 0;
    assume {:nonnull} Tmp_333 != 0;
    assume Tmp_333 > 0;
    assume {:nonnull} Tmp_333 != 0;
    assume Tmp_333 > 0;
    assume {:nonnull} Tmp_333 != 0;
    assume Tmp_333 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc vslice_dummy_var_1288;
    call {:si_unique_call 829} SerialLogError(PDrvObj, pDevObj_1, Tmp_333, Tmp_350, 0, 0, 0, 53, status_15, 393221, Tmp_347, vslice_dummy_var_1288, 0, 0);
    Tmp_357 := strConst__li2bpl65;
    call {:si_unique_call 830} vslice_dummy_var_219 := SerialDbgPrintEx(14, Tmp_357);
    goto L111;

  anon38_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc Tmp_363;
    assume {:nonnull} Tmp_356 != 0;
    assume Tmp_356 > 0;
    assume {:nonnull} Tmp_356 != 0;
    assume Tmp_356 > 0;
    assume {:nonnull} Tmp_356 != 0;
    assume Tmp_356 > 0;
    assume {:nonnull} Tmp_356 != 0;
    assume Tmp_356 > 0;
    assume {:nonnull} Tmp_356 != 0;
    assume Tmp_356 > 0;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    havoc vslice_dummy_var_1289;
    call {:si_unique_call 831} SerialLogError(PDrvObj, pDevObj_1, Tmp_348, Tmp_356, 0, 0, 0, 52, status_15, 393220, Tmp_363, vslice_dummy_var_1289, 0, 0);
    Tmp_352 := strConst__li2bpl66;
    call {:si_unique_call 832} vslice_dummy_var_220 := SerialDbgPrintEx(14, Tmp_352);
    goto L111;

  anon51_Then:
    assume {:nonnull} Tmp_335 != 0;
    assume Tmp_335 > 0;
    assume {:nonnull} Tmp_335 != 0;
    assume Tmp_335 > 0;
    assume {:nonnull} Tmp_335 != 0;
    assume Tmp_335 > 0;
    assume {:nonnull} Tmp_335 != 0;
    assume Tmp_335 > 0;
    assume {:nonnull} Tmp_335 != 0;
    assume Tmp_335 > 0;
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    call {:si_unique_call 833} SerialLogError(PDrvObj, pDevObj_1, Tmp_343, Tmp_335, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_349 := strConst__li2bpl67;
    call {:si_unique_call 834} vslice_dummy_var_221 := SerialDbgPrintEx(14, Tmp_349);
    status_15 := -1073741670;
    goto L111;

  anon50_Then:
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    assume {:nonnull} Tmp_337 != 0;
    assume Tmp_337 > 0;
    call {:si_unique_call 835} SerialLogError(PDrvObj, pDevObj_1, Tmp_337, Tmp_338, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_334 := strConst__li2bpl68;
    call {:si_unique_call 836} vslice_dummy_var_222 := SerialDbgPrintEx(14, Tmp_334);
    status_15 := -1073741670;
    goto L111;
}



procedure {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int)
{
  var {:pointer} Tmp_366: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} PListEntry: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;

  anon0:
    call {:si_unique_call 837} vslice_dummy_var_223 := __HAVOC_malloc(4);
    PListEntry := actual_PListEntry;
    call {:si_unique_call 838} Tmp_366 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_366 != 0;
    assume Tmp_366 > 0;
    Mem_T.INT4[Tmp_366] := oldIrql_7;
    call {:si_unique_call 839} sdv_KeAcquireSpinLock(0, Tmp_366);
    assume {:nonnull} Tmp_366 != 0;
    assume Tmp_366 > 0;
    oldIrql_7 := Mem_T.INT4[Tmp_366];
    call {:si_unique_call 840} vslice_dummy_var_224 := sdv_InsertTailList(AllDevObjs__SERIAL_GLOBALS(SerialGlobals), PListEntry);
    call {:si_unique_call 841} sdv_KeReleaseSpinLock(0, oldIrql_7);
    return;
}



procedure {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_19: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_368: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_368 == -1073741811 || Tmp_368 == -1073741823 || Tmp_368 == 0 || Tmp_368 == 5 || Tmp_368 == -1073741789 || Tmp_368 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_19: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_368: int)
{
  var {:pointer} Tmp_369: int;
  var {:pointer} Tmp_370: int;
  var {:scalar} linkName: int;
  var {:scalar} Tmp_372: int;
  var {:pointer} Tmp_374: int;
  var {:pointer} sdv_319: int;
  var {:scalar} Tmp_375: int;
  var {:pointer} Tmp_376: int;
  var {:scalar} Tmp_377: int;
  var {:scalar} Tmp_378: int;
  var {:pointer} sdv_321: int;
  var {:pointer} sdv_323: int;
  var {:scalar} Tmp_379: int;
  var {:pointer} Tmp_380: int;
  var {:scalar} Tmp_381: int;
  var {:scalar} Tmp_382: int;
  var {:pointer} Tmp_383: int;
  var {:scalar} status_16: int;
  var {:pointer} pDevObj_2: int;
  var {:scalar} Tmp_385: int;
  var {:pointer} pDrvObj_1: int;
  var {:pointer} PDevExt_19: int;
  var {:pointer} hRegKey: int;
  var {:pointer} PSymName: int;
  var {:pointer} PpRegName: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_1290: int;
  var vslice_dummy_var_1291: int;

  anon0:
    call {:si_unique_call 842} linkName := __HAVOC_malloc(12);
    call {:si_unique_call 843} Tmp_372 := __HAVOC_malloc(20);
    call {:si_unique_call 844} Tmp_379 := __HAVOC_malloc(20);
    call {:si_unique_call 845} Tmp_381 := __HAVOC_malloc(20);
    call {:si_unique_call 846} Tmp_385 := __HAVOC_malloc(20);
    PDevExt_19 := actual_PDevExt_19;
    hRegKey := actual_hRegKey;
    PSymName := actual_PSymName;
    PpRegName := actual_PpRegName;
    call {:si_unique_call 847} Tmp_369 := __HAVOC_malloc(168);
    call {:si_unique_call 848} Tmp_370 := __HAVOC_malloc(60);
    call {:si_unique_call 849} vslice_dummy_var_227 := __HAVOC_malloc(8);
    call {:si_unique_call 850} Tmp_374 := __HAVOC_malloc(148);
    call {:si_unique_call 851} Tmp_376 := __HAVOC_malloc(36);
    call {:si_unique_call 852} Tmp_380 := __HAVOC_malloc(44);
    call {:si_unique_call 853} Tmp_383 := __HAVOC_malloc(164);
    call {:si_unique_call 854} vslice_dummy_var_228 := __HAVOC_malloc(8);
    call {:si_unique_call 855} vslice_dummy_var_229 := __HAVOC_malloc(44);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    havoc pDevObj_2;
    assume {:nonnull} pDevObj_2 != 0;
    assume pDevObj_2 > 0;
    havoc pDrvObj_1;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    call {:si_unique_call 856} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_382;
    call {:si_unique_call 857} sdv_319 := ExAllocatePoolWithTag(257, Tmp_382, -666022077);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_378;
    call {:si_unique_call 858} sdv_RtlZeroMemory(0, Tmp_378);
    call {:si_unique_call 859} sdv_323 := ExAllocatePoolWithTag(257, 258, -666022077);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    Tmp_376 := strConst__li2bpl69;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_1290;
    call {:si_unique_call 860} status_16 := SerialGetRegistryKeyValue(hRegKey, Tmp_376, 18, vslice_dummy_var_1290, 256);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_16 >= 0;
    goto L39;

  L39:
    call {:si_unique_call 861} vslice_dummy_var_230 := corral_nondet();
    call {:si_unique_call 862} vslice_dummy_var_231 := corral_nondet();
    call {:si_unique_call 863} vslice_dummy_var_232 := corral_nondet();
    call {:si_unique_call 864} vslice_dummy_var_225 := corral_nondet();
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_377;
    call {:si_unique_call 865} sdv_321 := ExAllocatePoolWithTag(257, Tmp_377, -666022077);
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_375;
    call {:si_unique_call 866} sdv_RtlZeroMemory(0, Tmp_375);
    call {:si_unique_call 867} vslice_dummy_var_226 := corral_nondet();
    Tmp_370 := strConst__li2bpl73;
    call {:si_unique_call 868} vslice_dummy_var_233 := SerialDbgPrintEx(4, Tmp_370);
    goto L69;

  L69:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 869} sdv_ExFreePool(0);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto L70;

  L70:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_16 >= 0;
    goto L76;

  L76:
    Tmp_368 := status_16;
    return;

  anon19_Then:
    assume {:partition} 0 > status_16;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 870} sdv_ExFreePool(0);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto L76;

  anon20_Then:
    goto L76;

  anon18_Then:
    goto L70;

  anon24_Then:
    status_16 := -1073741670;
    goto L69;

  anon17_Then:
    assume {:partition} 0 > status_16;
    Tmp_380 := strConst__li2bpl70;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_1291;
    call {:si_unique_call 871} status_16 := SerialGetRegistryKeyValue(hRegKey, Tmp_380, 22, vslice_dummy_var_1291, 256);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_16 < 0;
    Tmp_383 := strConst__li2bpl74;
    call {:si_unique_call 872} vslice_dummy_var_234 := SerialDbgPrintEx(14, Tmp_383);
    goto L69;

  anon21_Then:
    assume {:partition} 0 <= status_16;
    goto L39;

  anon23_Then:
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    call {:si_unique_call 873} SerialLogError(pDrvObj_1, pDevObj_2, Tmp_379, Tmp_372, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_374 := strConst__li2bpl75;
    call {:si_unique_call 874} vslice_dummy_var_235 := SerialDbgPrintEx(14, Tmp_374);
    status_16 := -1073741670;
    goto L69;

  anon22_Then:
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    assume {:nonnull} Tmp_381 != 0;
    assume Tmp_381 > 0;
    assume {:nonnull} Tmp_381 != 0;
    assume Tmp_381 > 0;
    assume {:nonnull} Tmp_381 != 0;
    assume Tmp_381 > 0;
    assume {:nonnull} Tmp_381 != 0;
    assume Tmp_381 > 0;
    assume {:nonnull} Tmp_381 != 0;
    assume Tmp_381 > 0;
    call {:si_unique_call 875} SerialLogError(pDrvObj_1, pDevObj_2, Tmp_381, Tmp_385, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_369 := strConst__li2bpl76;
    call {:si_unique_call 876} vslice_dummy_var_236 := SerialDbgPrintEx(14, Tmp_369);
    status_16 := -1073741670;
    goto L69;
}



procedure {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj_13: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_387: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_387 == -1073348588 || Tmp_387 == -1073348587 || Tmp_387 == -1073348586 || Tmp_387 == -1073348585 || Tmp_387 == -1073348584 || Tmp_387 == 0 || Tmp_387 == -1073348583 || Tmp_387 == -1073741811 || Tmp_387 == -1073741808 || Tmp_387 == -1073741823 || Tmp_387 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj_13: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_387: int)
{
  var {:dopa} {:scalar} ioResIndex: int;
  var {:pointer} Tmp_388: int;
  var {:dopa} {:scalar} isMulti: int;
  var {:scalar} count: int;
  var {:scalar} interfaceType: int;
  var {:pointer} Tmp_389: int;
  var {:scalar} Tmp_390: int;
  var {:pointer} Tmp_391: int;
  var {:pointer} Tmp_392: int;
  var {:scalar} gotIO: int;
  var {:pointer} Tmp_393: int;
  var {:scalar} Tmp_394: int;
  var {:pointer} Tmp_395: int;
  var {:pointer} pPartialTrResourceDesc: int;
  var {:pointer} pDevExt_9: int;
  var {:scalar} Tmp_396: int;
  var {:pointer} Tmp_397: int;
  var {:pointer} Tmp_398: int;
  var {:scalar} Tmp_399: int;
  var {:pointer} Tmp_400: int;
  var {:pointer} Tmp_401: int;
  var {:pointer} Tmp_402: int;
  var {:pointer} Tmp_403: int;
  var {:pointer} Tmp_404: int;
  var {:pointer} Tmp_405: int;
  var {:pointer} pFullResourceDesc: int;
  var {:scalar} Tmp_406: int;
  var {:pointer} Tmp_407: int;
  var {:pointer} Tmp_408: int;
  var {:scalar} foundOne: int;
  var {:pointer} Tmp_409: int;
  var {:pointer} Tmp_410: int;
  var {:scalar} curIoIndex: int;
  var {:scalar} gotInt: int;
  var {:pointer} Tmp_411: int;
  var {:scalar} badValue: int;
  var {:pointer} Tmp_412: int;
  var {:pointer} pPartialTrResourceList: int;
  var {:scalar} i: int;
  var {:scalar} defaultInterfaceType: int;
  var {:pointer} pPartialResourceList: int;
  var {:pointer} Tmp_413: int;
  var {:pointer} pFullTrResourceDesc: int;
  var {:pointer} Tmp_414: int;
  var {:pointer} Tmp_415: int;
  var {:pointer} Tmp_416: int;
  var {:pointer} Tmp_417: int;
  var {:pointer} Tmp_418: int;
  var {:pointer} keyHandle_1: int;
  var {:pointer} Tmp_419: int;
  var {:scalar} defaultClockRate: int;
  var {:scalar} Tmp_420: int;
  var {:scalar} Tmp_421: int;
  var {:scalar} Tmp_422: int;
  var {:pointer} Tmp_423: int;
  var {:pointer} Tmp_424: int;
  var {:scalar} Tmp_425: int;
  var {:pointer} Tmp_426: int;
  var {:pointer} Tmp_427: int;
  var {:pointer} Tmp_428: int;
  var {:scalar} Tmp_429: int;
  var {:pointer} sDeviceData: int;
  var {:scalar} Tmp_430: int;
  var {:scalar} gotISR: int;
  var {:pointer} Tmp_431: int;
  var {:scalar} foundIt: int;
  var {:scalar} Tmp_432: int;
  var {:scalar} Tmp_433: int;
  var {:pointer} Tmp_434: int;
  var {:pointer} Tmp_435: int;
  var {:pointer} Tmp_436: int;
  var {:scalar} Tmp_438: int;
  var {:pointer} Tmp_439: int;
  var {:pointer} Tmp_440: int;
  var {:pointer} Tmp_441: int;
  var {:scalar} status_17: int;
  var {:scalar} Tmp_442: int;
  var {:scalar} Tmp_443: int;
  var {:scalar} Tmp_444: int;
  var {:scalar} gotMem: int;
  var {:pointer} Tmp_445: int;
  var {:pointer} pPartialResourceDesc: int;
  var {:scalar} Tmp_446: int;
  var {:scalar} Tmp_447: int;
  var {:pointer} PDevObj_13: int;
  var {:pointer} PResList: int;
  var {:pointer} PTrResList: int;
  var {:pointer} PConfig: int;
  var {:pointer} PUserData: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_1292: int;
  var vslice_dummy_var_1293: int;
  var vslice_dummy_var_1294: int;
  var vslice_dummy_var_1295: int;
  var vslice_dummy_var_1296: int;
  var vslice_dummy_var_1297: int;
  var vslice_dummy_var_1298: int;
  var vslice_dummy_var_1299: int;
  var vslice_dummy_var_1300: int;
  var vslice_dummy_var_1301: int;
  var vslice_dummy_var_1302: int;
  var vslice_dummy_var_1303: int;
  var vslice_dummy_var_1304: int;
  var vslice_dummy_var_1305: int;
  var vslice_dummy_var_1306: int;
  var vslice_dummy_var_1307: int;
  var vslice_dummy_var_1308: int;
  var vslice_dummy_var_1309: int;
  var vslice_dummy_var_1310: int;
  var vslice_dummy_var_1311: int;
  var vslice_dummy_var_1312: int;
  var vslice_dummy_var_1313: int;
  var vslice_dummy_var_1314: int;
  var vslice_dummy_var_1315: int;
  var vslice_dummy_var_1316: int;
  var vslice_dummy_var_1317: int;

  anon0:
    call {:si_unique_call 877} ioResIndex := __HAVOC_malloc(4);
    call {:si_unique_call 878} isMulti := __HAVOC_malloc(4);
    call {:si_unique_call 879} Tmp_394 := __HAVOC_malloc(20);
    call {:si_unique_call 880} Tmp_396 := __HAVOC_malloc(20);
    call {:si_unique_call 881} Tmp_406 := __HAVOC_malloc(20);
    call {:si_unique_call 882} Tmp_421 := __HAVOC_malloc(20);
    call {:si_unique_call 883} Tmp_422 := __HAVOC_malloc(20);
    call {:si_unique_call 884} Tmp_425 := __HAVOC_malloc(20);
    call {:si_unique_call 885} Tmp_429 := __HAVOC_malloc(20);
    call {:si_unique_call 886} Tmp_432 := __HAVOC_malloc(20);
    call {:si_unique_call 887} Tmp_442 := __HAVOC_malloc(20);
    call {:si_unique_call 888} Tmp_444 := __HAVOC_malloc(20);
    PDevObj_13 := actual_PDevObj_13;
    PResList := actual_PResList;
    PTrResList := actual_PTrResList;
    PConfig := actual_PConfig;
    PUserData := actual_PUserData;
    call {:si_unique_call 889} Tmp_388 := __HAVOC_malloc(32);
    call {:si_unique_call 890} Tmp_389 := __HAVOC_malloc(96);
    call {:si_unique_call 891} Tmp_391 := __HAVOC_malloc(28);
    call {:si_unique_call 892} Tmp_392 := __HAVOC_malloc(92);
    call {:si_unique_call 893} Tmp_393 := __HAVOC_malloc(28);
    call {:si_unique_call 894} Tmp_395 := __HAVOC_malloc(48);
    call {:si_unique_call 895} Tmp_397 := __HAVOC_malloc(80);
    call {:si_unique_call 896} Tmp_398 := __HAVOC_malloc(216);
    call {:si_unique_call 897} Tmp_400 := __HAVOC_malloc(96);
    call {:si_unique_call 898} Tmp_401 := __HAVOC_malloc(96);
    call {:si_unique_call 899} Tmp_402 := __HAVOC_malloc(96);
    call {:si_unique_call 900} Tmp_403 := __HAVOC_malloc(48);
    call {:si_unique_call 901} Tmp_404 := __HAVOC_malloc(92);
    call {:si_unique_call 902} Tmp_405 := __HAVOC_malloc(92);
    call {:si_unique_call 903} Tmp_407 := __HAVOC_malloc(40);
    call {:si_unique_call 904} Tmp_408 := __HAVOC_malloc(96);
    call {:si_unique_call 905} Tmp_409 := __HAVOC_malloc(312);
    call {:si_unique_call 906} Tmp_410 := __HAVOC_malloc(64);
    call {:si_unique_call 907} Tmp_411 := __HAVOC_malloc(244);
    call {:si_unique_call 908} Tmp_412 := __HAVOC_malloc(104);
    call {:si_unique_call 909} Tmp_413 := __HAVOC_malloc(92);
    call {:si_unique_call 910} Tmp_414 := __HAVOC_malloc(232);
    call {:si_unique_call 911} Tmp_415 := __HAVOC_malloc(40);
    call {:si_unique_call 912} Tmp_416 := __HAVOC_malloc(84);
    call {:si_unique_call 913} Tmp_417 := __HAVOC_malloc(92);
    call {:si_unique_call 914} Tmp_418 := __HAVOC_malloc(112);
    call {:si_unique_call 915} Tmp_419 := __HAVOC_malloc(52);
    call {:si_unique_call 916} Tmp_423 := __HAVOC_malloc(96);
    call {:si_unique_call 917} Tmp_424 := __HAVOC_malloc(88);
    call {:si_unique_call 918} Tmp_426 := __HAVOC_malloc(152);
    call {:si_unique_call 919} Tmp_427 := __HAVOC_malloc(88);
    call {:si_unique_call 920} Tmp_428 := __HAVOC_malloc(68);
    call {:si_unique_call 921} Tmp_431 := __HAVOC_malloc(40);
    call {:si_unique_call 922} Tmp_434 := __HAVOC_malloc(88);
    call {:si_unique_call 923} Tmp_435 := __HAVOC_malloc(68);
    call {:si_unique_call 924} Tmp_436 := __HAVOC_malloc(108);
    call {:si_unique_call 925} Tmp_439 := __HAVOC_malloc(112);
    call {:si_unique_call 926} Tmp_440 := __HAVOC_malloc(312);
    call {:si_unique_call 927} Tmp_441 := __HAVOC_malloc(84);
    call {:si_unique_call 928} Tmp_445 := __HAVOC_malloc(64);
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc pDevExt_9;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    status_17 := -1073741822;
    pFullResourceDesc := 0;
    pFullTrResourceDesc := 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    curIoIndex := 0;
    gotMem := 0;
    call {:si_unique_call 929} sdv_do_paged_code_check();
    Tmp_418 := strConst__li2bpl77;
    call {:si_unique_call 930} vslice_dummy_var_241 := SerialDbgPrintEx(11, Tmp_418);
    Tmp_402 := strConst__li2bpl78;
    call {:si_unique_call 931} vslice_dummy_var_242 := SerialDbgPrintEx(12, Tmp_402);
    Tmp_436 := strConst__li2bpl79;
    call {:si_unique_call 932} vslice_dummy_var_243 := SerialDbgPrintEx(12, Tmp_436);
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} PResList != 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} PTrResList != 0;
    call {:si_unique_call 933} status_17 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} status_17 >= 0;
    Tmp_410 := strConst__li2bpl80;
    call {:si_unique_call 934} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_410, 32, isMulti, 4);
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} status_17 >= 0;
    goto L73;

  L73:
    Tmp_413 := strConst__li2bpl81;
    call {:si_unique_call 935} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_413, 46, ioResIndex, 4);
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} status_17 >= 0;
    goto L79;

  L79:
    call {:si_unique_call 936} vslice_dummy_var_237 := ZwClose(0);
    assume {:nonnull} PResList != 0;
    assume PResList > 0;
    havoc Tmp_440;
    pFullResourceDesc := Tmp_440;
    assume {:nonnull} PTrResList != 0;
    assume PTrResList > 0;
    havoc Tmp_409;
    pFullTrResourceDesc := Tmp_409;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} pFullResourceDesc != 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    pPartialResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullResourceDesc);
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc pPartialResourceDesc;
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := 1843200;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L95;

  L95:
    call {:si_unique_call 937} gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem := SerialGetPortInfo_loop_L95(ioResIndex, isMulti, count, gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem, pPartialResourceDesc, PConfig);
    goto L95_last;

  L95_last:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto L105;

  L105:
    i := i + 1;
    goto L105_dummy;

  L105_dummy:
    assume false;
    return;

  anon171_Then:
    sDeviceData := pPartialResourceDesc;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} sDeviceData != 0;
    assume sDeviceData > 0;
    havoc vslice_dummy_var_1292;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := vslice_dummy_var_1292;
    goto L105;

  anon172_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} gotMem != 0;
    goto L105;

  anon173_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon177_Then:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L105;

  anon140_Then:
    assume {:partition} gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;

  anon132_Then:
    assume {:partition} i >= count;
    goto L85;

  L85:
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    curIoIndex := 0;
    gotMem := 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} pFullTrResourceDesc != 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    pPartialTrResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullTrResourceDesc);
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc pPartialTrResourceDesc;
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L148;

  L148:
    call {:si_unique_call 938} gotIO, curIoIndex, gotInt, i, gotISR, gotMem := SerialGetPortInfo_loop_L148(ioResIndex, isMulti, count, gotIO, pPartialTrResourceDesc, curIoIndex, gotInt, i, gotISR, gotMem, PConfig);
    goto L148_last;

  L148_last:
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    goto L156;

  L156:
    i := i + 1;
    goto L156_dummy;

  L156_dummy:
    assume false;
    return;

  anon174_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon175_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L156;

  anon151_Then:
    assume {:partition} gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;

  anon143_Then:
    assume {:partition} i >= count;
    goto L140;

  L140:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_1293;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := vslice_dummy_var_1293;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_1294;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := vslice_dummy_var_1294;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_1295;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := vslice_dummy_var_1295;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_1296;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := vslice_dummy_var_1296;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := 0;
    defaultInterfaceType := 1;
    defaultClockRate := 1843200;
    interfaceType := 0;
    goto L191;

  L191:
    call {:si_unique_call 939} interfaceType, foundOne, vslice_dummy_var_238 := SerialGetPortInfo_loop_L191(interfaceType, foundOne, vslice_dummy_var_238);
    goto L191_last;

  L191_last:
    assume {:CounterLoop 18} {:Counter "interfaceType"} true;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} 18 > interfaceType;
    foundOne := 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} interfaceType != 0;
    call {:si_unique_call 940} vslice_dummy_var_238 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} foundOne != 0;
    defaultInterfaceType := interfaceType;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} defaultInterfaceType == 3;
    goto L192;

  L192:
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} PUserData != 0;
    badValue := -1;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    Tmp_420 := 0;
    goto L215;

  L215:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := Tmp_420;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_399;
    goto L219;

  L219:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := Tmp_399;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_430;
    goto L223;

  L223:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := Tmp_430;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    Tmp_438 := 0;
    goto L227;

  L227:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := Tmp_438;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_433;
    goto L231;

  L231:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := Tmp_433;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    Tmp_443 := 0;
    goto L235;

  L235:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := Tmp_443;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    Tmp_390 := defaultClockRate;
    goto L239;

  L239:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := Tmp_390;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc vslice_dummy_var_1297;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := vslice_dummy_var_1297;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc vslice_dummy_var_1298;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := vslice_dummy_var_1298;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    Tmp_447 := 0;
    goto L245;

  L245:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := Tmp_447;
    goto L246;

  L246:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == -1;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1299;
    havoc vslice_dummy_var_1300;
    call {:si_unique_call 941} SerialLogError(vslice_dummy_var_1299, 0, vslice_dummy_var_1300, Tmp_444, 0, 0, 0, 30, 0, -1073348588, 0, 0, 0, 0);
    Tmp_416 := strConst__li2bpl82;
    call {:si_unique_call 942} vslice_dummy_var_244 := SerialDbgPrintEx(14, Tmp_416);
    status_17 := -1073348588;
    goto L263;

  L263:
    Tmp_387 := status_17;
    goto L1;

  L1:
    return;

  anon161_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != -1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 16;
    assume {:nonnull} Tmp_429 != 0;
    assume Tmp_429 > 0;
    assume {:nonnull} Tmp_429 != 0;
    assume Tmp_429 > 0;
    assume {:nonnull} Tmp_429 != 0;
    assume Tmp_429 > 0;
    assume {:nonnull} Tmp_429 != 0;
    assume Tmp_429 > 0;
    assume {:nonnull} Tmp_429 != 0;
    assume Tmp_429 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1301;
    havoc vslice_dummy_var_1302;
    call {:si_unique_call 943} SerialLogError(vslice_dummy_var_1301, 0, vslice_dummy_var_1302, Tmp_429, 0, 0, 0, 32, 0, -1073348587, 0, 0, 0, 0);
    Tmp_401 := strConst__li2bpl83;
    call {:si_unique_call 944} vslice_dummy_var_245 := SerialDbgPrintEx(14, Tmp_401);
    status_17 := -1073348587;
    goto L263;

  anon165_Then:
    assume {:partition} 16 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  L251:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    foundIt := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1303;
    havoc vslice_dummy_var_1304;
    call {:si_unique_call 945} SerialLogError(vslice_dummy_var_1303, 0, vslice_dummy_var_1304, Tmp_425, 0, 0, 0, 34, 0, -1073348586, 0, 0, 0, 0);
    Tmp_441 := strConst__li2bpl85;
    call {:si_unique_call 946} vslice_dummy_var_246 := SerialDbgPrintEx(14, Tmp_441);
    status_17 := -1073348586;
    goto L263;

  anon189_Then:
    call {:si_unique_call 947} vslice_dummy_var_239 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} foundIt == 0;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1305;
    havoc vslice_dummy_var_1306;
    call {:si_unique_call 948} SerialLogError(vslice_dummy_var_1305, 0, vslice_dummy_var_1306, Tmp_396, 0, 0, 0, 35, 0, -1073348585, 0, 0, 0, 0);
    Tmp_414 := strConst__li2bpl86;
    call {:si_unique_call 949} vslice_dummy_var_259 := SerialDbgPrintEx(14, Tmp_414);
    status_17 := -1073348585;
    goto L263;

  anon167_Then:
    assume {:partition} foundIt != 0;
    goto L294;

  L294:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1307;
    havoc vslice_dummy_var_1308;
    call {:si_unique_call 950} SerialLogError(vslice_dummy_var_1307, 0, vslice_dummy_var_1308, Tmp_442, 0, 0, 0, 36, 0, -1073348584, 0, 0, 0, 0);
    Tmp_398 := strConst__li2bpl87;
    call {:si_unique_call 951} vslice_dummy_var_247 := SerialDbgPrintEx(14, Tmp_398);
    status_17 := -1073348584;
    goto L263;

  anon168_Then:
    goto L320;

  L320:
    status_17 := 0;
    Tmp_427 := strConst__li2bpl110;
    call {:si_unique_call 952} vslice_dummy_var_248 := SerialDbgPrintEx(4, Tmp_427);
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    Tmp_412 := strConst__li2bpl111;
    call {:si_unique_call 953} vslice_dummy_var_249 := SerialDbgPrintEx(4, Tmp_412);
    Tmp_397 := strConst__li2bpl88;
    call {:si_unique_call 954} vslice_dummy_var_250 := SerialDbgPrintEx(4, Tmp_397);
    Tmp_408 := strConst__li2bpl89;
    call {:si_unique_call 955} vslice_dummy_var_251 := SerialDbgPrintEx(4, Tmp_408);
    Tmp_389 := strConst__li2bpl90;
    call {:si_unique_call 956} vslice_dummy_var_252 := SerialDbgPrintEx(4, Tmp_389);
    Tmp_424 := strConst__li2bpl91;
    call {:si_unique_call 957} vslice_dummy_var_253 := SerialDbgPrintEx(4, Tmp_424);
    Tmp_405 := strConst__li2bpl92;
    call {:si_unique_call 958} vslice_dummy_var_254 := SerialDbgPrintEx(4, Tmp_405);
    Tmp_392 := strConst__li2bpl93;
    call {:si_unique_call 959} vslice_dummy_var_255 := SerialDbgPrintEx(4, Tmp_392);
    Tmp_423 := strConst__li2bpl94;
    call {:si_unique_call 960} vslice_dummy_var_256 := SerialDbgPrintEx(4, Tmp_423);
    Tmp_434 := strConst__li2bpl95;
    call {:si_unique_call 961} vslice_dummy_var_257 := SerialDbgPrintEx(4, Tmp_434);
    Tmp_428 := strConst__li2bpl96;
    call {:si_unique_call 962} vslice_dummy_var_258 := SerialDbgPrintEx(4, Tmp_428);
    goto L263;

  anon166_Then:
    goto L320;

  anon160_Then:
    goto L294;

  anon163_Then:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 8;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1309;
    havoc vslice_dummy_var_1310;
    call {:si_unique_call 963} SerialLogError(vslice_dummy_var_1309, 0, vslice_dummy_var_1310, Tmp_422, 0, 0, 0, 33, 0, -1073348587, 0, 0, 0, 0);
    Tmp_400 := strConst__li2bpl83;
    call {:si_unique_call 964} vslice_dummy_var_260 := SerialDbgPrintEx(14, Tmp_400);
    status_17 := -1073348587;
    goto L263;

  anon164_Then:
    assume {:partition} 8 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  anon162_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1311;
    havoc vslice_dummy_var_1312;
    call {:si_unique_call 965} SerialLogError(vslice_dummy_var_1311, 0, vslice_dummy_var_1312, Tmp_421, 0, 0, 0, 31, 0, -1073348588, 0, 0, 0, 0);
    Tmp_411 := strConst__li2bpl84;
    call {:si_unique_call 966} vslice_dummy_var_261 := SerialDbgPrintEx(14, Tmp_411);
    status_17 := -1073348588;
    goto L263;

  anon159_Then:
    goto L251;

  anon158_Then:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc Tmp_446;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    Tmp_431 := strConst__li2bpl112;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_1313;
    havoc vslice_dummy_var_1314;
    havoc vslice_dummy_var_1315;
    call {:si_unique_call 967} SerialLogError(vslice_dummy_var_1313, 0, vslice_dummy_var_1314, Tmp_406, 0, 0, 0, 59, 0, -1073348583, Tmp_446, vslice_dummy_var_1315, 20, Tmp_431);
    Tmp_435 := strConst__li2bpl97;
    call {:si_unique_call 968} vslice_dummy_var_262 := SerialDbgPrintEx(14, Tmp_435);
    status_17 := -1073348583;
    goto L263;

  anon157_Then:
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    Tmp_395 := strConst__li2bpl113;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc vslice_dummy_var_1316;
    havoc vslice_dummy_var_1317;
    call {:si_unique_call 969} SerialLogError(vslice_dummy_var_1316, 0, vslice_dummy_var_1317, Tmp_394, 0, 0, 0, 58, 0, -1073348583, 0, 0, 24, Tmp_395);
    Tmp_417 := strConst__li2bpl98;
    call {:si_unique_call 970} vslice_dummy_var_263 := SerialDbgPrintEx(14, Tmp_417);
    status_17 := -1073348583;
    goto L263;

  anon188_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_447;
    goto L245;

  anon187_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_390;
    goto L239;

  anon186_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_443;
    goto L235;

  anon185_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_433;
    goto L231;

  anon184_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_438;
    goto L227;

  anon183_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_430;
    goto L223;

  anon182_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_399;
    goto L219;

  anon181_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_420;
    goto L215;

  anon155_Then:
    assume {:partition} PUserData == 0;
    call {:si_unique_call 971} status_17 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} status_17 >= 0;
    Tmp_403 := strConst__li2bpl100;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 972} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_403, 24, DisablePort__CONFIG_DATA(PConfig), 4);
    Tmp_445 := strConst__li2bpl101;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 973} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_445, 32, ForceFifoEnable__CONFIG_DATA(PConfig), 4);
    Tmp_391 := strConst__li2bpl102;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 974} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_391, 14, RxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_393 := strConst__li2bpl103;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 975} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_393, 14, TxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_419 := strConst__li2bpl104;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 976} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_419, 26, MaskInverted__CONFIG_DATA(PConfig), 4);
    Tmp_404 := strConst__li2bpl105;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 977} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_404, 46, PermitShare__CONFIG_DATA(PConfig), 4);
    Tmp_415 := strConst__li2bpl106;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 978} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_415, 20, PortIndex__CONFIG_DATA(PConfig), 4);
    Tmp_388 := strConst__li2bpl107;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 979} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_388, 16, Indexed__CONFIG_DATA(PConfig), 4);
    Tmp_407 := strConst__li2bpl108;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 980} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_407, 20, ClockRate__CONFIG_DATA(PConfig), 4);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} status_17 >= 0;
    goto L425;

  L425:
    Tmp_439 := strConst__li2bpl109;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 981} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_439, 56, TL16C550CAFC__CONFIG_DATA(PConfig), 4);
    call {:si_unique_call 982} vslice_dummy_var_240 := ZwClose(0);
    goto L246;

  anon170_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := defaultClockRate;
    goto L425;

  anon169_Then:
    assume {:partition} 0 > status_17;
    Tmp_426 := strConst__li2bpl99;
    call {:si_unique_call 983} vslice_dummy_var_264 := SerialDbgPrintEx(14, Tmp_426);
    goto L263;

  anon180_Then:
    assume {:partition} defaultInterfaceType != 3;
    goto L192;

  anon156_Then:
    assume {:partition} foundOne == 0;
    goto L198;

  L198:
    interfaceType := interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    assume false;
    return;

  anon179_Then:
    assume {:partition} interfaceType == 0;
    goto L198;

  anon154_Then:
    assume {:partition} interfaceType >= 18;
    goto L192;

  anon178_Then:
    assume {:partition} pFullTrResourceDesc == 0;
    goto L140;

  anon176_Then:
    assume {:partition} pFullResourceDesc == 0;
    goto L85;

  anon131_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    goto L79;

  anon130_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    goto L73;

  anon129_Then:
    assume {:partition} 0 > status_17;
    Tmp_387 := status_17;
    goto L1;

  anon128_Then:
    assume {:partition} PTrResList == 0;
    goto L59;

  L59:
    Tmp_387 := -1073741670;
    goto L1;

  anon127_Then:
    assume {:partition} PResList == 0;
    goto L59;
}



procedure {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_14: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_448: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_14: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_448: int)
{
  var {:pointer} Tmp_449: int;
  var {:pointer} Tmp_450: int;
  var {:pointer} Tmp_451: int;
  var {:pointer} Tmp_452: int;
  var {:scalar} Tmp_453: int;
  var {:pointer} Tmp_454: int;
  var {:scalar} allocedUserData: int;
  var {:scalar} Tmp_455: int;
  var {:scalar} Tmp_457: int;
  var {:dopa} {:scalar} powerPolicy: int;
  var {:pointer} pDevExt_10: int;
  var {:pointer} Tmp_458: int;
  var {:pointer} Tmp_459: int;
  var {:scalar} Tmp_460: int;
  var {:pointer} pnpKey: int;
  var {:scalar} Tmp_461: int;
  var {:scalar} Tmp_462: int;
  var {:pointer} pConfig: int;
  var {:pointer} sdv_387: int;
  var {:dopa} {:scalar} powerOnClose: int;
  var {:pointer} Tmp_464: int;
  var {:pointer} sdv_390: int;
  var {:scalar} Tmp_465: int;
  var {:scalar} Tmp_466: int;
  var {:pointer} Tmp_467: int;
  var {:scalar} Tmp_468: int;
  var {:pointer} Tmp_469: int;
  var {:pointer} Tmp_470: int;
  var {:pointer} Tmp_471: int;
  var {:scalar} Tmp_472: int;
  var {:scalar} status_18: int;
  var {:pointer} Tmp_473: int;
  var {:pointer} Tmp_474: int;
  var {:scalar} Tmp_475: int;
  var {:pointer} countSoFar: int;
  var {:pointer} Tmp_476: int;
  var {:pointer} sdv_401: int;
  var {:pointer} Tmp_478: int;
  var {:pointer} Tmp_479: int;
  var {:pointer} PDevObj_14: int;
  var {:pointer} PResList_1: int;
  var {:pointer} PTrResList_1: int;
  var {:pointer} PUserData_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_1318: int;
  var vslice_dummy_var_1319: int;
  var vslice_dummy_var_1320: int;
  var vslice_dummy_var_1321: int;
  var vslice_dummy_var_1322: int;
  var vslice_dummy_var_1323: int;
  var vslice_dummy_var_1324: int;
  var vslice_dummy_var_1325: int;
  var vslice_dummy_var_1326: int;
  var vslice_dummy_var_1327: int;
  var vslice_dummy_var_1328: int;
  var vslice_dummy_var_1329: int;
  var vslice_dummy_var_1330: int;
  var vslice_dummy_var_1331: int;

  anon0:
    call {:si_unique_call 984} Tmp_457 := __HAVOC_malloc(20);
    call {:si_unique_call 985} powerPolicy := __HAVOC_malloc(4);
    call {:si_unique_call 986} Tmp_461 := __HAVOC_malloc(20);
    call {:si_unique_call 987} powerOnClose := __HAVOC_malloc(4);
    call {:si_unique_call 988} Tmp_472 := __HAVOC_malloc(20);
    PDevObj_14 := actual_PDevObj_14;
    PResList_1 := actual_PResList_1;
    PTrResList_1 := actual_PTrResList_1;
    PUserData_1 := actual_PUserData_1;
    call {:si_unique_call 989} Tmp_449 := __HAVOC_malloc(112);
    call {:si_unique_call 990} Tmp_450 := __HAVOC_malloc(132);
    call {:si_unique_call 991} Tmp_451 := __HAVOC_malloc(168);
    call {:si_unique_call 992} Tmp_452 := __HAVOC_malloc(88);
    call {:si_unique_call 993} Tmp_454 := __HAVOC_malloc(168);
    call {:si_unique_call 994} Tmp_458 := __HAVOC_malloc(272);
    call {:si_unique_call 995} Tmp_464 := __HAVOC_malloc(156);
    call {:si_unique_call 996} Tmp_469 := __HAVOC_malloc(104);
    call {:si_unique_call 997} Tmp_470 := __HAVOC_malloc(144);
    call {:si_unique_call 998} Tmp_471 := __HAVOC_malloc(316);
    call {:si_unique_call 999} Tmp_473 := __HAVOC_malloc(220);
    call {:si_unique_call 1000} Tmp_474 := __HAVOC_malloc(884);
    call {:si_unique_call 1001} Tmp_476 := __HAVOC_malloc(884);
    call {:si_unique_call 1002} Tmp_479 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    havoc pDevExt_10;
    allocedUserData := 0;
    call {:si_unique_call 1003} sdv_do_paged_code_check();
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_10)], 2) != 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_10)], 1) != 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1004} SerialSetDeviceFlags(pDevExt_10, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_10), 2, 0);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1005} sdv_387 := ExAllocatePoolWithTag(1, 112, -666022077);
    PUserData_1 := sdv_387;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} PUserData_1 != 0;
    allocedUserData := 1;
    call {:si_unique_call 1006} sdv_RtlZeroMemory(0, 112);
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  L65:
    call {:si_unique_call 1007} sdv_390 := ExAllocatePoolWithTag(1, 128, -666022077);
    pConfig := sdv_390;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 1008} sdv_RtlZeroMemory(0, 128);
    call {:si_unique_call 1009} status_18 := SerialGetPortInfo(PDevObj_14, PResList_1, PTrResList_1, pConfig, PUserData_1);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_18 < 0;
    goto L90;

  L90:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} status_18 >= 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    Tmp_468 := 0;
    goto L101;

  L101:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_466;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    Tmp_475 := 1;
    goto L109;

  L109:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L118;

  L118:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_453 := 1;
    goto L123;

  L123:
    Tmp_462 := Tmp_453;
    goto L124;

  L124:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_1318;
    call {:si_unique_call 1010} boogieTmp := SerialReportMaxBaudRate(vslice_dummy_var_1318);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1011} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    call {:si_unique_call 1012} sdv_401 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_401 != 0;
    assume sdv_401 > 0;
    countSoFar := SerialCount__CONFIGURATION_INFORMATION(sdv_401);
    assume {:nonnull} countSoFar != 0;
    assume countSoFar > 0;
    Mem_T.INT4[countSoFar] := Mem_T.INT4[countSoFar] + 1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1013} vslice_dummy_var_273 := IoWMIRegistrationControl(0, 1);
    goto L153;

  L153:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    call {:si_unique_call 1014} SerialUnstallIrps(pDevExt_10);
    goto L154;

  L154:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1015} SerialSetDeviceFlags(pDevExt_10, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_10), -1, 0);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1016} SerialSetDeviceFlags(pDevExt_10, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_10), 1, 1);
    goto L164;

  L164:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 1017} sdv_ExFreePool(0);
    goto L165;

  L165:
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} PUserData_1 != 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} allocedUserData != 0;
    call {:si_unique_call 1018} sdv_ExFreePool(0);
    goto L169;

  L169:
    Tmp_450 := strConst__li2bpl115;
    call {:si_unique_call 1019} vslice_dummy_var_272 := SerialDbgPrintEx(11, Tmp_450);
    Tmp_448 := status_18;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon91_Then:
    assume {:partition} allocedUserData == 0;
    goto L169;

  anon90_Then:
    assume {:partition} PUserData_1 == 0;
    goto L169;

  anon89_Then:
    assume {:partition} pConfig == 0;
    goto L165;

  anon88_Then:
    goto L154;

  anon87_Then:
    goto L153;

  anon86_Then:
    Tmp_453 := 2;
    goto L123;

  anon85_Then:
    Tmp_462 := 0;
    goto L124;

  anon107_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L118;

  anon108_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L118;

  anon109_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L118;

  anon110_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L118;

  anon116_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L118;

  anon115_Then:
    Tmp_475 := 0;
    goto L109;

  anon114_Then:
    Tmp_468 := 1;
    goto L101;

  anon84_Then:
    assume {:partition} 0 > status_18;
    Tmp_469 := strConst__li2bpl114;
    call {:si_unique_call 1020} vslice_dummy_var_274 := SerialDbgPrintEx(4, Tmp_469);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    call {:si_unique_call 1021} SerialKillPendingIrps(PDevObj_14);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1022} SerialSetDeviceFlags(pDevExt_10, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_10), 1, 1);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1023} SerialSetDeviceFlags(pDevExt_10, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_10), 1, 0);
    goto L164;

  anon117_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    goto L164;

  anon81_Then:
    assume {:partition} 0 <= status_18;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_1319;
    call {:si_unique_call 1024} status_18 := SerialGotoPowerState(vslice_dummy_var_1319, pDevExt_10, 1);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} status_18 < 0;
    goto L90;

  anon83_Then:
    assume {:partition} 0 <= status_18;
    goto L81;

  L81:
    call {:si_unique_call 1025} status_18 := SerialFindInitController(PDevObj_14, pConfig);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} status_18 >= 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} pDevExt_10 != 0;
    Tmp_473 := strConst__li2bpl117;
    call {:si_unique_call 1026} vslice_dummy_var_268 := SerialDbgPrintEx(8, Tmp_473);
    goto L218;

  L218:
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} pDevExt_10 != 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    goto L222;

  L222:
    Tmp_479 := strConst__li2bpl118;
    call {:si_unique_call 1027} vslice_dummy_var_269 := SerialDbgPrintEx(8, Tmp_479);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1028} SerialAddToAllDevs(AllDevObjs__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1029} vslice_dummy_var_270 := KeSynchronizeExecution(0, li2bplFunctionConstant522, 0);
    call {:si_unique_call 1030} vslice_dummy_var_265 := KeSynchronizeExecution(0, li2bplFunctionConstant523, 0);
    call {:si_unique_call 1031} vslice_dummy_var_266 := KeSynchronizeExecution(0, li2bplFunctionConstant524, 0);
    call {:si_unique_call 1032} vslice_dummy_var_267 := KeSynchronizeExecution(0, li2bplFunctionConstant525, 0);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    Tmp_451 := strConst__li2bpl119;
    call {:si_unique_call 1033} vslice_dummy_var_271 := SerialDbgPrintEx(12, Tmp_451);
    goto L90;

  anon98_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_467;
    assume {:nonnull} Tmp_467 != 0;
    assume Tmp_467 > 0;
    havoc vslice_dummy_var_1320;
    call {:si_unique_call 1034} status_18 := SerialDoExternalNaming(pDevExt_10, vslice_dummy_var_1320);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} status_18 < 0;
    Tmp_470 := strConst__li2bpl120;
    call {:si_unique_call 1035} vslice_dummy_var_275 := SerialDbgPrintEx(14, Tmp_470);
    status_18 := 0;
    goto L90;

  anon99_Then:
    assume {:partition} 0 <= status_18;
    goto L90;

  anon96_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    Tmp_471 := strConst__li2bpl121;
    call {:si_unique_call 1036} vslice_dummy_var_276 := SerialDbgPrintEx(8, Tmp_471);
    Tmp_476 := strConst__li2bpl122;
    call {:si_unique_call 1037} vslice_dummy_var_277 := SerialDbgPrintEx(8, Tmp_476);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_459;
    assume {:nonnull} Tmp_459 != 0;
    assume Tmp_459 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_478;
    assume {:nonnull} Tmp_478 != 0;
    assume Tmp_478 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_1321;
    havoc vslice_dummy_var_1322;
    havoc vslice_dummy_var_1323;
    havoc vslice_dummy_var_1324;
    havoc vslice_dummy_var_1325;
    havoc vslice_dummy_var_1326;
    havoc vslice_dummy_var_1327;
    call {:si_unique_call 1038} status_18 := IoConnectInterrupt(0, li2bplFunctionConstant526, vslice_dummy_var_1321, 0, vslice_dummy_var_1322, vslice_dummy_var_1323, vslice_dummy_var_1324, vslice_dummy_var_1325, vslice_dummy_var_1326, vslice_dummy_var_1327, 0);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} status_18 < 0;
    Tmp_464 := strConst__li2bpl123;
    call {:si_unique_call 1039} vslice_dummy_var_278 := SerialDbgPrintEx(14, Tmp_464);
    Tmp_474 := strConst__li2bpl122;
    call {:si_unique_call 1040} vslice_dummy_var_279 := SerialDbgPrintEx(14, Tmp_474);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_460;
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_1328;
    havoc vslice_dummy_var_1329;
    havoc vslice_dummy_var_1330;
    call {:si_unique_call 1041} SerialLogError(vslice_dummy_var_1328, PDevObj_14, vslice_dummy_var_1329, Tmp_461, 0, 0, 0, 1, status_18, -1073348601, Tmp_460, vslice_dummy_var_1330, 0, 0);
    status_18 := -1073348601;
    goto L90;

  anon100_Then:
    assume {:partition} 0 <= status_18;
    goto L222;

  anon97_Then:
    goto L222;

  anon95_Then:
    assume {:partition} pDevExt_10 == 0;
    goto L219;

  L219:
    call {:si_unique_call 1042} SerialFinishStartDevice_loop_L219();
    goto L219_last;

  L219_last:
    goto L219_dummy;

  L219_dummy:
    assume false;
    return;

  anon94_Then:
    assume {:partition} pDevExt_10 == 0;
    Tmp_454 := strConst__li2bpl116;
    call {:si_unique_call 1043} vslice_dummy_var_280 := SerialDbgPrintEx(14, Tmp_454);
    goto L218;

  anon93_Then:
    assume {:partition} 0 > status_18;
    goto L90;

  anon82_Then:
    goto L81;

  anon113_Then:
    assume {:partition} pConfig == 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_1331;
    call {:si_unique_call 1044} SerialLogError(vslice_dummy_var_1331, 0, Tmp_457, Tmp_472, 0, 0, 0, 37, 0, -1073348600, 0, 0, 0, 0);
    Tmp_458 := strConst__li2bpl124;
    call {:si_unique_call 1045} vslice_dummy_var_281 := SerialDbgPrintEx(14, Tmp_458);
    status_18 := -1073741670;
    goto L90;

  anon104_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon105_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon106_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon112_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon111_Then:
    assume {:partition} PUserData_1 == 0;
    Tmp_448 := -1073741670;
    goto L1;

  anon80_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_10)], 1) == 0;
    goto L17;

  L17:
    call {:si_unique_call 1046} status_18 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} status_18 >= 0;
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    Mem_T.INT4[powerPolicy] := 0;
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    Mem_T.INT4[powerOnClose] := 0;
    Tmp_449 := strConst__li2bpl125;
    call {:si_unique_call 1047} vslice_dummy_var_282 := SerialGetRegistryKeyValue(pnpKey, Tmp_449, 56, powerPolicy, 4);
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} Mem_T.INT4[powerPolicy] != 0;
    Tmp_465 := 0;
    goto L312;

  L312:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    Tmp_452 := strConst__li2bpl126;
    call {:si_unique_call 1048} vslice_dummy_var_283 := SerialGetRegistryKeyValue(pnpKey, Tmp_452, 44, powerOnClose, 4);
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} Mem_T.INT4[powerOnClose] != 0;
    Tmp_455 := 1;
    goto L319;

  L319:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1049} vslice_dummy_var_284 := ZwClose(0);
    goto L65;

  anon103_Then:
    assume {:partition} Mem_T.INT4[powerOnClose] == 0;
    Tmp_455 := 0;
    goto L319;

  anon102_Then:
    assume {:partition} Mem_T.INT4[powerPolicy] == 0;
    Tmp_465 := 1;
    goto L312;

  anon101_Then:
    assume {:partition} 0 > status_18;
    goto L65;

  anon79_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_10)], 2) == 0;
    goto L17;
}



procedure {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_15: int, actual_PIrp_11: int) returns (Tmp_480: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_15: int, actual_PIrp_11: int) returns (Tmp_480: int)
{
  var {:pointer} sdv_404: int;
  var {:scalar} sdv_405: int;
  var {:scalar} pIdBuf: int;
  var {:pointer} Tmp_481: int;
  var {:dopa} {:scalar} isMulti_1: int;
  var {:pointer} sdv_409: int;
  var {:pointer} Tmp_482: int;
  var {:pointer} Tmp_483: int;
  var {:pointer} pResList: int;
  var {:pointer} Tmp_484: int;
  var {:pointer} Tmp_485: int;
  var {:pointer} Tmp_486: int;
  var {:pointer} Tmp_487: int;
  var {:pointer} Tmp_488: int;
  var {:pointer} pDevExt_11: int;
  var {:pointer} Tmp_489: int;
  var {:pointer} Tmp_491: int;
  var {:pointer} Tmp_492: int;
  var {:pointer} Tmp_493: int;
  var {:pointer} Tmp_494: int;
  var {:pointer} Tmp_495: int;
  var {:pointer} Tmp_496: int;
  var {:scalar} cap: int;
  var {:pointer} Tmp_497: int;
  var {:pointer} Tmp_498: int;
  var {:scalar} Tmp_499: int;
  var {:scalar} pnpIdStrLen: int;
  var {:scalar} pendingIRPs: int;
  var {:pointer} Tmp_500: int;
  var {:pointer} Tmp_501: int;
  var {:pointer} pQueryCapsEvent: int;
  var {:pointer} Tmp_502: int;
  var {:pointer} Tmp_503: int;
  var {:pointer} Tmp_504: int;
  var {:pointer} Tmp_505: int;
  var {:pointer} pIrpStack_6: int;
  var {:pointer} Tmp_506: int;
  var {:pointer} Tmp_507: int;
  var {:pointer} Tmp_508: int;
  var {:dopa} {:scalar} isMulti_2: int;
  var {:pointer} Tmp_509: int;
  var {:pointer} Tmp_510: int;
  var {:pointer} sdv_438: int;
  var {:pointer} pLowerDevObj_3: int;
  var {:pointer} Tmp_512: int;
  var {:pointer} Tmp_513: int;
  var {:pointer} Tmp_514: int;
  var {:pointer} Tmp_515: int;
  var {:scalar} gotInt_1: int;
  var {:pointer} Tmp_516: int;
  var {:pointer} pResDesc: int;
  var {:scalar} allocLen: int;
  var {:pointer} Tmp_517: int;
  var {:pointer} Tmp_518: int;
  var {:pointer} Tmp_519: int;
  var {:scalar} listNum: int;
  var {:pointer} Tmp_520: int;
  var {:scalar} Tmp_521: int;
  var {:pointer} Tmp_522: int;
  var {:scalar} pendingIRPs_1: int;
  var {:pointer} pReqList: int;
  var {:pointer} Tmp_523: int;
  var {:scalar} Tmp_524: int;
  var {:pointer} Tmp_525: int;
  var {:pointer} Tmp_526: int;
  var {:scalar} Tmp_527: int;
  var {:pointer} Tmp_528: int;
  var {:pointer} Tmp_529: int;
  var {:scalar} sdv_465: int;
  var {:pointer} Tmp_530: int;
  var {:pointer} Tmp_531: int;
  var {:scalar} pendingIRPs_2: int;
  var {:pointer} Tmp_532: int;
  var {:pointer} Tmp_533: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_534: int;
  var {:pointer} Tmp_535: int;
  var {:scalar} Tmp_536: int;
  var {:scalar} Tmp_537: int;
  var {:pointer} sdv_472: int;
  var {:pointer} Tmp_538: int;
  var {:pointer} Tmp_539: int;
  var {:pointer} pnpKey_1: int;
  var {:pointer} pResFiltEvent: int;
  var {:scalar} gotISR_1: int;
  var {:pointer} Tmp_540: int;
  var {:pointer} Tmp_542: int;
  var {:scalar} curStrLen: int;
  var {:pointer} Tmp_543: int;
  var {:pointer} curStr: int;
  var {:pointer} Tmp_544: int;
  var {:pointer} Tmp_545: int;
  var {:pointer} Tmp_546: int;
  var {:pointer} Tmp_547: int;
  var {:pointer} pDevCaps: int;
  var {:pointer} Tmp_548: int;
  var {:scalar} sdv_498: int;
  var {:scalar} status_19: int;
  var {:pointer} Tmp_549: int;
  var {:pointer} Tmp_550: int;
  var {:scalar} Tmp_551: int;
  var {:pointer} pnpKey_2: int;
  var {:pointer} Tmp_552: int;
  var {:scalar} Tmp_553: int;
  var {:pointer} Tmp_554: int;
  var {:scalar} sdv_503: int;
  var {:pointer} Tmp_555: int;
  var {:pointer} Tmp_556: int;
  var {:pointer} Tmp_557: int;
  var {:pointer} Tmp_558: int;
  var {:pointer} PDevObj_15: int;
  var {:pointer} PIrp_11: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_318: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_1332: int;
  var vslice_dummy_var_1333: int;
  var vslice_dummy_var_1334: int;
  var vslice_dummy_var_1335: int;
  var vslice_dummy_var_1336: int;
  var vslice_dummy_var_1337: int;
  var vslice_dummy_var_1338: int;
  var vslice_dummy_var_1339: int;

  anon0:
    call {:si_unique_call 1050} pIdBuf := __HAVOC_malloc(12);
    call {:si_unique_call 1051} isMulti_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1052} isMulti_2 := __HAVOC_malloc(4);
    PDevObj_15 := actual_PDevObj_15;
    PIrp_11 := actual_PIrp_11;
    call {:si_unique_call 1053} Tmp_481 := __HAVOC_malloc(28);
    call {:si_unique_call 1054} Tmp_482 := __HAVOC_malloc(72);
    call {:si_unique_call 1055} Tmp_483 := __HAVOC_malloc(136);
    call {:si_unique_call 1056} Tmp_484 := __HAVOC_malloc(112);
    call {:si_unique_call 1057} Tmp_485 := __HAVOC_malloc(176);
    call {:si_unique_call 1058} Tmp_486 := __HAVOC_malloc(112);
    call {:si_unique_call 1059} Tmp_487 := __HAVOC_malloc(116);
    call {:si_unique_call 1060} Tmp_488 := __HAVOC_malloc(72);
    call {:si_unique_call 1061} Tmp_489 := __HAVOC_malloc(132);
    call {:si_unique_call 1062} Tmp_491 := __HAVOC_malloc(60);
    call {:si_unique_call 1063} Tmp_492 := __HAVOC_malloc(72);
    call {:si_unique_call 1064} Tmp_493 := __HAVOC_malloc(60);
    call {:si_unique_call 1065} Tmp_494 := __HAVOC_malloc(156);
    call {:si_unique_call 1066} Tmp_495 := __HAVOC_malloc(144);
    call {:si_unique_call 1067} Tmp_496 := __HAVOC_malloc(72);
    call {:si_unique_call 1068} Tmp_497 := __HAVOC_malloc(92);
    call {:si_unique_call 1069} Tmp_498 := __HAVOC_malloc(72);
    call {:si_unique_call 1070} Tmp_500 := __HAVOC_malloc(140);
    call {:si_unique_call 1071} Tmp_501 := __HAVOC_malloc(72);
    call {:si_unique_call 1072} Tmp_502 := __HAVOC_malloc(120);
    call {:si_unique_call 1073} Tmp_503 := __HAVOC_malloc(60);
    call {:si_unique_call 1074} Tmp_504 := __HAVOC_malloc(180);
    call {:si_unique_call 1075} Tmp_505 := __HAVOC_malloc(128);
    call {:si_unique_call 1076} Tmp_506 := __HAVOC_malloc(60);
    call {:si_unique_call 1077} Tmp_508 := __HAVOC_malloc(88);
    call {:si_unique_call 1078} Tmp_509 := __HAVOC_malloc(420);
    call {:si_unique_call 1079} Tmp_510 := __HAVOC_malloc(28);
    call {:si_unique_call 1080} Tmp_512 := __HAVOC_malloc(148);
    call {:si_unique_call 1081} Tmp_513 := __HAVOC_malloc(28);
    call {:si_unique_call 1082} Tmp_514 := __HAVOC_malloc(100);
    call {:si_unique_call 1083} Tmp_515 := __HAVOC_malloc(128);
    call {:si_unique_call 1084} Tmp_516 := __HAVOC_malloc(116);
    call {:si_unique_call 1085} Tmp_517 := __HAVOC_malloc(120);
    call {:si_unique_call 1086} Tmp_518 := __HAVOC_malloc(60);
    call {:si_unique_call 1087} Tmp_519 := __HAVOC_malloc(88);
    call {:si_unique_call 1088} Tmp_520 := __HAVOC_malloc(72);
    call {:si_unique_call 1089} Tmp_522 := __HAVOC_malloc(168);
    call {:si_unique_call 1090} Tmp_523 := __HAVOC_malloc(100);
    call {:si_unique_call 1091} Tmp_525 := __HAVOC_malloc(120);
    call {:si_unique_call 1092} Tmp_526 := __HAVOC_malloc(132);
    call {:si_unique_call 1093} Tmp_528 := __HAVOC_malloc(60);
    call {:si_unique_call 1094} Tmp_529 := __HAVOC_malloc(132);
    call {:si_unique_call 1095} Tmp_530 := __HAVOC_malloc(72);
    call {:si_unique_call 1096} Tmp_532 := __HAVOC_malloc(64);
    call {:si_unique_call 1097} Tmp_533 := __HAVOC_malloc(28);
    call {:si_unique_call 1098} Tmp_534 := __HAVOC_malloc(60);
    call {:si_unique_call 1099} Tmp_535 := __HAVOC_malloc(128);
    call {:si_unique_call 1100} Tmp_538 := __HAVOC_malloc(64);
    call {:si_unique_call 1101} Tmp_539 := __HAVOC_malloc(112);
    call {:si_unique_call 1102} Tmp_540 := __HAVOC_malloc(60);
    call {:si_unique_call 1103} Tmp_542 := __HAVOC_malloc(60);
    call {:si_unique_call 1104} Tmp_543 := __HAVOC_malloc(168);
    call {:si_unique_call 1105} Tmp_544 := __HAVOC_malloc(88);
    call {:si_unique_call 1106} Tmp_545 := __HAVOC_malloc(72);
    call {:si_unique_call 1107} Tmp_546 := __HAVOC_malloc(72);
    call {:si_unique_call 1108} Tmp_547 := __HAVOC_malloc(116);
    call {:si_unique_call 1109} Tmp_548 := __HAVOC_malloc(72);
    call {:si_unique_call 1110} Tmp_549 := __HAVOC_malloc(432);
    call {:si_unique_call 1111} Tmp_550 := __HAVOC_malloc(72);
    call {:si_unique_call 1112} Tmp_552 := __HAVOC_malloc(112);
    call {:si_unique_call 1113} Tmp_554 := __HAVOC_malloc(176);
    call {:si_unique_call 1114} Tmp_555 := __HAVOC_malloc(132);
    call {:si_unique_call 1115} Tmp_556 := __HAVOC_malloc(144);
    call {:si_unique_call 1116} Tmp_557 := __HAVOC_malloc(72);
    call {:si_unique_call 1117} Tmp_558 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    havoc pDevExt_11;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc pLowerDevObj_3;
    call {:si_unique_call 1118} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1119} sdv_do_paged_code_check();
    call {:si_unique_call 1120} status_19 := SerialIRPPrologue(PIrp_11, pDevExt_11);
    goto anon243_Then, anon243_Else;

  anon243_Else:
    assume {:partition} status_19 != 0;
    Tmp_557 := strConst__li2bpl1;
    call {:si_unique_call 1121} vslice_dummy_var_296 := SerialDbgPrintEx(9, Tmp_557);
    goto anon245_Then, anon245_Else;

  anon245_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1122} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon318_Then, anon318_Else;

  anon318_Else:
    assume {:partition} yogi_error != 1;
    goto L854;

  L854:
    call {:si_unique_call 1123} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1124} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := status_19;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon318_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon245_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L854;

  anon243_Then:
    assume {:partition} status_19 == 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon244_Then, anon244_Else;

  anon244_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon303_Then, anon303_Else;

  anon303_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    goto L270;

  L270:
    call {:si_unique_call 1125} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1126} status_19 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon335_Then, anon335_Else;

  anon335_Else:
    assume {:partition} yogi_error != 1;
    Tmp_480 := status_19;
    goto L1;

  anon335_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon295_Then:
    Tmp_555 := strConst__li2bpl136;
    call {:si_unique_call 1127} vslice_dummy_var_354 := SerialDbgPrintEx(12, Tmp_555);
    Tmp_503 := strConst__li2bpl137;
    call {:si_unique_call 1128} vslice_dummy_var_355 := SerialDbgPrintEx(12, Tmp_503);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1129} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 8, 1);
    call {:si_unique_call 1130} SerialKillPendingIrps(PDevObj_15);
    goto anon361_Then, anon361_Else;

  anon361_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1131} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1332;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1332;
    call {:si_unique_call 1132} vslice_dummy_var_356 := sdv_InterlockedDecrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1133} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1333;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1333;
    call {:si_unique_call 1134} sdv_498 := sdv_InterlockedDecrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    pendingIRPs_1 := sdv_498;
    goto anon362_Then, anon362_Else;

  anon362_Else:
    assume {:partition} pendingIRPs_1 != 0;
    call {:si_unique_call 1135} vslice_dummy_var_285 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L92;

  L92:
    call {:si_unique_call 1136} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1334;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1334;
    call {:si_unique_call 1137} vslice_dummy_var_357 := sdv_InterlockedIncrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1138} SerialDisableInterfacesResources(PDevObj_15, 0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1139} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1140} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon363_Then, anon363_Else;

  anon363_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon363_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon362_Then:
    assume {:partition} pendingIRPs_1 == 0;
    goto L92;

  anon361_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon296_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon246_Then, anon246_Else;

  anon246_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 4) != 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    goto L109;

  L109:
    call {:si_unique_call 1141} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1142} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon360_Then, anon360_Else;

  anon360_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon360_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon246_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 4) == 0;
    goto L109;

  anon297_Then:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_523 := strConst__li2bpl163;
    call {:si_unique_call 1143} vslice_dummy_var_349 := SerialDbgPrintEx(12, Tmp_523);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon247_Then, anon247_Else;

  anon247_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon249_Then, anon249_Else;

  anon249_Else:
    goto L129;

  L129:
    call {:si_unique_call 1144} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1145} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon349_Then, anon349_Else;

  anon349_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon349_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon249_Then:
    goto L127;

  L127:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon248_Then, anon248_Else;

  anon248_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 8) != 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon250_Then, anon250_Else;

  anon250_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1146} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1147} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon350_Then, anon350_Else;

  anon350_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon350_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon250_Then:
    call {:si_unique_call 1148} status_19 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon251_Then, anon251_Else;

  anon251_Else:
    assume {:partition} status_19 >= 0;
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_538 := strConst__li2bpl80;
    call {:si_unique_call 1149} status_19 := SerialGetRegistryKeyValue(pnpKey_1, Tmp_538, 32, isMulti_1, 4);
    call {:si_unique_call 1150} vslice_dummy_var_286 := ZwClose(0);
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon252_Then, anon252_Else;

  anon252_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_531 := strConst__li2bpl139;
    goto L162;

  L162:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_527 := 18;
    goto L166;

  L166:
    pnpIdStrLen := Tmp_527;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    goto anon352_Then, anon352_Else;

  anon352_Else:
    allocLen := 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc curStr;
    goto L179;

  L179:
    call {:si_unique_call 1151} allocLen, curStrLen := SerialPnpDispatch_loop_L179(sdv_405, allocLen, curStrLen, curStr);
    goto L179_last;

  L179_last:
    curStrLen := sdv_405;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    assume {:partition} curStrLen != 0;
    allocLen := allocLen + curStrLen * 2 + 2;
    goto anon353_Else_dummy;

  anon353_Else_dummy:
    assume false;
    return;

  anon353_Then:
    assume {:partition} curStrLen == 0;
    allocLen := allocLen + 2;
    Tmp_524 := allocLen + pnpIdStrLen + 2;
    call {:si_unique_call 1152} sdv_472 := ExAllocatePoolWithTag(1, Tmp_524, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_537;
    call {:si_unique_call 1153} sdv_RtlZeroMemory(0, Tmp_537);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1154} sdv_RtlCopyMemory(0, 0, allocLen);
    call {:si_unique_call 1155} vslice_dummy_var_287 := corral_nondet();
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1156} sdv_ExFreePool(0);
    goto L208;

  L208:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1157} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1158} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon355_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon354_Then:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1159} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_558 := strConst__li2bpl1;
    call {:si_unique_call 1160} vslice_dummy_var_350 := SerialDbgPrintEx(9, Tmp_558);
    goto anon253_Then, anon253_Else;

  anon253_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1161} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:partition} yogi_error != 1;
    goto L899;

  L899:
    call {:si_unique_call 1162} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1163} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := -1073741670;
    goto L1;

  anon356_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon253_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L899;

  anon352_Then:
    Tmp_506 := strConst__li2bpl140;
    call {:si_unique_call 1164} vslice_dummy_var_351 := SerialDbgPrintEx(12, Tmp_506);
    Tmp_551 := pnpIdStrLen + 4;
    call {:si_unique_call 1165} sdv_438 := ExAllocatePoolWithTag(1, Tmp_551, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_521;
    call {:si_unique_call 1166} sdv_RtlZeroMemory(0, Tmp_521);
    call {:si_unique_call 1167} vslice_dummy_var_288 := corral_nondet();
    goto L208;

  anon357_Then:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_545 := strConst__li2bpl1;
    call {:si_unique_call 1168} vslice_dummy_var_352 := SerialDbgPrintEx(9, Tmp_545);
    goto anon254_Then, anon254_Else;

  anon254_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1169} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon358_Then, anon358_Else;

  anon358_Else:
    assume {:partition} yogi_error != 1;
    goto L902;

  L902:
    call {:si_unique_call 1170} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1171} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := -1073741670;
    goto L1;

  anon358_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon254_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L902;

  anon351_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_527 := 18;
    goto L166;

  anon252_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_531 := strConst__li2bpl138;
    goto L162;

  anon251_Then:
    assume {:partition} 0 > status_19;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := status_19;
    Tmp_530 := strConst__li2bpl1;
    call {:si_unique_call 1172} vslice_dummy_var_353 := SerialDbgPrintEx(9, Tmp_530);
    goto anon255_Then, anon255_Else;

  anon255_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1173} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon359_Then, anon359_Else;

  anon359_Else:
    assume {:partition} yogi_error != 1;
    goto L905;

  L905:
    call {:si_unique_call 1174} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1175} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := status_19;
    goto L1;

  anon359_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon255_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L905;

  anon248_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 8) == 0;
    goto L129;

  anon247_Then:
    goto L127;

  anon298_Then:
    Tmp_514 := strConst__li2bpl135;
    call {:si_unique_call 1176} vslice_dummy_var_348 := SerialDbgPrintEx(12, Tmp_514);
    goto L270;

  anon299_Then:
    Tmp_519 := strConst__li2bpl134;
    call {:si_unique_call 1177} vslice_dummy_var_347 := SerialDbgPrintEx(12, Tmp_519);
    goto L270;

  anon300_Then:
    Tmp_487 := strConst__li2bpl133;
    call {:si_unique_call 1178} vslice_dummy_var_346 := SerialDbgPrintEx(12, Tmp_487);
    goto L270;

  anon301_Then:
    Tmp_484 := strConst__li2bpl132;
    call {:si_unique_call 1179} vslice_dummy_var_345 := SerialDbgPrintEx(12, Tmp_484);
    goto L270;

  anon302_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    Mem_T.INT4[isMulti_2] := 0;
    Tmp_504 := strConst__li2bpl157;
    call {:si_unique_call 1180} vslice_dummy_var_333 := SerialDbgPrintEx(12, Tmp_504);
    Tmp_518 := strConst__li2bpl137;
    call {:si_unique_call 1181} vslice_dummy_var_334 := SerialDbgPrintEx(12, Tmp_518);
    call {:si_unique_call 1182} sdv_404 := ExAllocatePoolWithTag(512, 16, -666022077);
    pResFiltEvent := sdv_404;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    assume {:partition} pResFiltEvent != 0;
    call {:si_unique_call 1183} KeInitializeEvent(pResFiltEvent, 1, 0);
    call {:si_unique_call 1184} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1185} sdv_IoSetCompletionRoutine(PIrp_11, li2bplFunctionConstant515, pResFiltEvent, 1, 1, 1);
    goto anon256_Then, anon256_Else;

  anon256_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1186} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L884;

  L884:
    call {:si_unique_call 1187} status_19 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon342_Then, anon342_Else;

  anon342_Else:
    assume {:partition} yogi_error != 1;
    goto anon257_Then, anon257_Else;

  anon257_Else:
    assume {:partition} status_19 == 259;
    call {:si_unique_call 1188} vslice_dummy_var_289 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L319;

  L319:
    call {:si_unique_call 1189} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    goto anon258_Then, anon258_Else;

  anon258_Else:
    goto L327;

  L327:
    call {:si_unique_call 1190} status_19 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume {:partition} status_19 >= 0;
    Tmp_532 := strConst__li2bpl80;
    call {:si_unique_call 1191} status_19 := SerialGetRegistryKeyValue(pnpKey_2, Tmp_532, 32, isMulti_2, 4);
    call {:si_unique_call 1192} vslice_dummy_var_290 := ZwClose(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc pReqList;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc Tmp_549;
    pResList := Tmp_549;
    Tmp_554 := strConst__li2bpl158;
    call {:si_unique_call 1193} vslice_dummy_var_335 := SerialDbgPrintEx(12, Tmp_554);
    listNum := 0;
    goto L346;

  L346:
    call {:si_unique_call 1194} Tmp_499, Tmp_509, Tmp_515, gotInt_1, pResDesc, listNum, Tmp_522, Tmp_526, j, gotISR_1, Tmp_547, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339 := SerialPnpDispatch_loop_L346(pResList, pDevExt_11, Tmp_499, isMulti_2, Tmp_509, pLowerDevObj_3, Tmp_515, gotInt_1, pResDesc, listNum, Tmp_522, pReqList, Tmp_526, j, gotISR_1, Tmp_547, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339);
    goto L346_last;

  L346_last:
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    goto anon261_Then, anon261_Else;

  anon261_Else:
    gotISR_1 := 0;
    gotInt_1 := 0;
    Tmp_547 := strConst__li2bpl159;
    call {:si_unique_call 1195} vslice_dummy_var_336 := SerialDbgPrintEx(12, Tmp_547);
    j := 0;
    goto L354;

  L354:
    call {:si_unique_call 1196} Tmp_499, Tmp_509, Tmp_515, gotInt_1, pResDesc, Tmp_522, Tmp_526, j, gotISR_1, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339 := SerialPnpDispatch_loop_L354(pResList, pDevExt_11, Tmp_499, isMulti_2, Tmp_509, pLowerDevObj_3, Tmp_515, gotInt_1, pResDesc, Tmp_522, Tmp_526, j, gotISR_1, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339);
    goto L354_last;

  L354_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon262_Then, anon262_Else;

  anon262_Else:
    Tmp_499 := j;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_509;
    pResDesc := Tmp_509 + Tmp_499 * 420;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    goto L363;

  L363:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume {:partition} gotInt_1 != 0;
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:partition} gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto L369;

  L369:
    j := j + 1;
    goto L369_dummy;

  L369_dummy:
    assume false;
    return;

  anon266_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume {:partition} gotInt_1 == 0;
    goto L369;

  anon269_Then:
    assume {:partition} gotInt_1 != 0;
    goto L355;

  L355:
    listNum := listNum + 1;
    goto L355_dummy;

  L355_dummy:
    assume false;
    return;

  anon268_Then:
    assume {:partition} gotISR_1 != 0;
    goto L355;

  anon267_Then:
    assume {:partition} gotInt_1 == 0;
    goto L364;

  anon265_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L364;

  anon317_Then:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:partition} gotInt_1 != 0;
    goto L363;

  anon264_Then:
    assume {:partition} gotInt_1 == 0;
    gotInt_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_526 := strConst__li2bpl161;
    call {:si_unique_call 1197} vslice_dummy_var_338 := SerialDbgPrintEx(12, Tmp_526);
    goto L363;

  anon344_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    Tmp_522 := strConst__li2bpl162;
    call {:si_unique_call 1198} vslice_dummy_var_339 := SerialDbgPrintEx(12, Tmp_522);
    goto L363;

  anon343_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume {:partition} gotISR_1 == 0;
    gotISR_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_515 := strConst__li2bpl160;
    call {:si_unique_call 1199} vslice_dummy_var_337 := SerialDbgPrintEx(12, Tmp_515);
    goto L363;

  anon271_Then:
    assume {:partition} gotISR_1 != 0;
    goto L363;

  anon270_Then:
    goto L363;

  anon263_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L363;

  anon262_Then:
    goto L355;

  anon261_Then:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    Tmp_550 := strConst__li2bpl1;
    call {:si_unique_call 1200} vslice_dummy_var_340 := SerialDbgPrintEx(9, Tmp_550);
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1201} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon345_Then, anon345_Else;

  anon345_Else:
    assume {:partition} yogi_error != 1;
    goto L887;

  L887:
    call {:si_unique_call 1202} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1203} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := 0;
    goto L1;

  anon345_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon272_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L887;

  anon260_Then:
    assume {:partition} 0 > status_19;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := status_19;
    Tmp_482 := strConst__li2bpl1;
    call {:si_unique_call 1204} vslice_dummy_var_341 := SerialDbgPrintEx(9, Tmp_482);
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1205} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:partition} yogi_error != 1;
    goto L890;

  L890:
    call {:si_unique_call 1206} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1207} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := status_19;
    goto L1;

  anon346_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon273_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L890;

  anon258_Then:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto L327;

  anon259_Then:
    Tmp_517 := strConst__li2bpl141;
    call {:si_unique_call 1208} vslice_dummy_var_342 := SerialDbgPrintEx(12, Tmp_517);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    status_19 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))];
    Tmp_498 := strConst__li2bpl1;
    call {:si_unique_call 1209} vslice_dummy_var_343 := SerialDbgPrintEx(9, Tmp_498);
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1210} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon347_Then, anon347_Else;

  anon347_Else:
    assume {:partition} yogi_error != 1;
    goto L893;

  L893:
    call {:si_unique_call 1211} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1212} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := status_19;
    goto L1;

  anon347_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon274_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L893;

  anon257_Then:
    assume {:partition} status_19 != 259;
    goto L319;

  anon342_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon256_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L884;

  anon341_Then:
    assume {:partition} pResFiltEvent == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    Tmp_501 := strConst__li2bpl1;
    call {:si_unique_call 1213} vslice_dummy_var_344 := SerialDbgPrintEx(9, Tmp_501);
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1214} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:partition} yogi_error != 1;
    goto L896;

  L896:
    call {:si_unique_call 1215} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1216} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := -1073741670;
    goto L1;

  anon348_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon275_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L896;

  anon303_Then:
    Tmp_485 := strConst__li2bpl131;
    call {:si_unique_call 1217} vslice_dummy_var_332 := SerialDbgPrintEx(12, Tmp_485);
    goto L270;

  anon304_Then:
    Tmp_543 := strConst__li2bpl142;
    call {:si_unique_call 1218} vslice_dummy_var_328 := SerialDbgPrintEx(12, Tmp_543);
    call {:si_unique_call 1219} sdv_409 := ExAllocatePoolWithTag(512, 16, -666022077);
    pQueryCapsEvent := sdv_409;
    goto anon336_Then, anon336_Else;

  anon336_Else:
    assume {:partition} pQueryCapsEvent != 0;
    call {:si_unique_call 1220} KeInitializeEvent(pQueryCapsEvent, 1, 0);
    call {:si_unique_call 1221} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1222} sdv_IoSetCompletionRoutine(PIrp_11, li2bplFunctionConstant515, pQueryCapsEvent, 1, 1, 1);
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1223} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L875;

  L875:
    call {:si_unique_call 1224} status_19 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon337_Then, anon337_Else;

  anon337_Else:
    assume {:partition} yogi_error != 1;
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume {:partition} status_19 == 259;
    call {:si_unique_call 1225} vslice_dummy_var_291 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L458;

  L458:
    call {:si_unique_call 1226} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    status_19 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))];
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon338_Then, anon338_Else;

  anon338_Else:
    goto L483;

  L483:
    Tmp_492 := strConst__li2bpl1;
    call {:si_unique_call 1227} vslice_dummy_var_330 := SerialDbgPrintEx(9, Tmp_492);
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1228} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon339_Then, anon339_Else;

  anon339_Else:
    assume {:partition} yogi_error != 1;
    goto L878;

  L878:
    call {:si_unique_call 1229} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1230} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := status_19;
    goto L1;

  anon339_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon279_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L878;

  anon338_Then:
    Tmp_552 := strConst__li2bpl143;
    call {:si_unique_call 1231} vslice_dummy_var_329 := SerialDbgPrintEx(12, Tmp_552);
    call {:si_unique_call 1232} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(PIrp_11);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    havoc pDevCaps;
    cap := 2;
    goto L476;

  L476:
    call {:si_unique_call 1233} cap, Tmp_510, Tmp_533, Tmp_536, Tmp_553 := SerialPnpDispatch_loop_L476(pDevExt_11, cap, Tmp_510, Tmp_533, Tmp_536, pDevCaps, Tmp_553);
    goto L476_last;

  L476_last:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume {:partition} 7 > cap;
    Tmp_536 := cap;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_510;
    Tmp_553 := cap;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    havoc Tmp_533;
    assume {:nonnull} Tmp_510 != 0;
    assume Tmp_510 > 0;
    assume {:nonnull} Tmp_533 != 0;
    assume Tmp_533 > 0;
    Mem_T.INT4[Tmp_510 + Tmp_536 * 4] := Mem_T.INT4[Tmp_533 + Tmp_553 * 4];
    cap := cap + 1;
    goto anon278_Else_dummy;

  anon278_Else_dummy:
    assume false;
    return;

  anon278_Then:
    assume {:partition} cap >= 7;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_513;
    assume {:nonnull} Tmp_513 != 0;
    assume Tmp_513 > 0;
    Mem_T.INT4[Tmp_513] := 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_481;
    assume {:nonnull} Tmp_481 != 0;
    assume Tmp_481 > 0;
    Mem_T.INT4[Tmp_481 + 1 * 4] := 1;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto L483;

  anon277_Then:
    assume {:partition} status_19 != 259;
    goto L458;

  anon337_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon276_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L875;

  anon336_Then:
    assume {:partition} pQueryCapsEvent == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    Tmp_496 := strConst__li2bpl1;
    call {:si_unique_call 1234} vslice_dummy_var_331 := SerialDbgPrintEx(9, Tmp_496);
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1235} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon340_Then, anon340_Else;

  anon340_Else:
    assume {:partition} yogi_error != 1;
    goto L881;

  L881:
    call {:si_unique_call 1236} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1237} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := -1073741670;
    goto L1;

  anon340_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon280_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L881;

  anon305_Then:
    Tmp_505 := strConst__li2bpl130;
    call {:si_unique_call 1238} vslice_dummy_var_327 := SerialDbgPrintEx(12, Tmp_505);
    goto L270;

  anon306_Then:
    Tmp_494 := strConst__li2bpl129;
    call {:si_unique_call 1239} vslice_dummy_var_320 := SerialDbgPrintEx(12, Tmp_494);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon281_Then, anon281_Else;

  anon281_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon316_Then, anon316_Else;

  anon316_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon313_Then, anon313_Else;

  anon313_Else:
    Tmp_495 := strConst__li2bpl149;
    call {:si_unique_call 1240} vslice_dummy_var_325 := SerialDbgPrintEx(12, Tmp_495);
    goto L524;

  L524:
    call {:si_unique_call 1241} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1242} status_19 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon334_Then, anon334_Else;

  anon334_Else:
    assume {:partition} yogi_error != 1;
    Tmp_480 := status_19;
    goto L1;

  anon334_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon313_Then:
    Tmp_497 := strConst__li2bpl144;
    call {:si_unique_call 1243} vslice_dummy_var_326 := SerialDbgPrintEx(12, Tmp_497);
    goto L524;

  anon314_Then:
    Tmp_535 := strConst__li2bpl148;
    call {:si_unique_call 1244} vslice_dummy_var_324 := SerialDbgPrintEx(12, Tmp_535);
    goto L524;

  anon315_Then:
    Tmp_502 := strConst__li2bpl147;
    call {:si_unique_call 1245} vslice_dummy_var_323 := SerialDbgPrintEx(12, Tmp_502);
    goto L524;

  anon316_Then:
    Tmp_529 := strConst__li2bpl146;
    call {:si_unique_call 1246} vslice_dummy_var_322 := SerialDbgPrintEx(12, Tmp_529);
    goto L524;

  anon281_Then:
    Tmp_539 := strConst__li2bpl145;
    call {:si_unique_call 1247} vslice_dummy_var_321 := SerialDbgPrintEx(12, Tmp_539);
    goto L524;

  anon307_Then:
    Tmp_500 := strConst__li2bpl128;
    call {:si_unique_call 1248} vslice_dummy_var_318 := SerialDbgPrintEx(12, Tmp_500);
    Tmp_534 := strConst__li2bpl137;
    call {:si_unique_call 1249} vslice_dummy_var_319 := SerialDbgPrintEx(12, Tmp_534);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1250} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 2, 0);
    goto L541;

  L541:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1251} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1252} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon333_Then, anon333_Else;

  anon333_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon333_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon282_Then:
    goto L541;

  anon308_Then:
    Tmp_483 := strConst__li2bpl150;
    call {:si_unique_call 1253} vslice_dummy_var_312 := SerialDbgPrintEx(12, Tmp_483);
    Tmp_540 := strConst__li2bpl137;
    call {:si_unique_call 1254} vslice_dummy_var_313 := SerialDbgPrintEx(12, Tmp_540);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741637;
    Tmp_489 := strConst__li2bpl156;
    call {:si_unique_call 1255} vslice_dummy_var_314 := SerialDbgPrintEx(12, Tmp_489);
    Tmp_546 := strConst__li2bpl1;
    call {:si_unique_call 1256} vslice_dummy_var_315 := SerialDbgPrintEx(9, Tmp_546);
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1257} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon329_Then, anon329_Else;

  anon329_Else:
    assume {:partition} yogi_error != 1;
    goto L869;

  L869:
    call {:si_unique_call 1258} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1259} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := -1073741637;
    goto L1;

  anon329_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon285_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L869;

  anon283_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon284_Then, anon284_Else;

  anon284_Else:
    call {:si_unique_call 1260} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1261} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon330_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon284_Then:
    call {:si_unique_call 1262} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon286_Then, anon286_Else;

  anon286_Else:
    call {:si_unique_call 1263} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 17;
    Tmp_544 := strConst__li2bpl155;
    call {:si_unique_call 1264} vslice_dummy_var_316 := SerialDbgPrintEx(12, Tmp_544);
    Tmp_488 := strConst__li2bpl1;
    call {:si_unique_call 1265} vslice_dummy_var_317 := SerialDbgPrintEx(9, Tmp_488);
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1266} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon331_Then, anon331_Else;

  anon331_Else:
    assume {:partition} yogi_error != 1;
    goto L872;

  L872:
    call {:si_unique_call 1267} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1268} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := 17;
    goto L1;

  anon331_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon287_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L872;

  anon286_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1269} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 2, 1);
    call {:si_unique_call 1270} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1271} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1272} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon332_Then, anon332_Else;

  anon332_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon332_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon309_Then:
    Tmp_486 := strConst__li2bpl151;
    call {:si_unique_call 1273} vslice_dummy_var_308 := SerialDbgPrintEx(12, Tmp_486);
    Tmp_493 := strConst__li2bpl137;
    call {:si_unique_call 1274} vslice_dummy_var_309 := SerialDbgPrintEx(12, Tmp_493);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1275} SerialSetDeviceFlags(pDevExt_11, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11), 2, 1);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1276} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 4, 1);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1277} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 2, 0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1278} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1335;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1335;
    call {:si_unique_call 1279} vslice_dummy_var_310 := sdv_InterlockedDecrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1280} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1336;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1336;
    call {:si_unique_call 1281} sdv_465 := sdv_InterlockedDecrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    pendingIRPs := sdv_465;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    assume {:partition} pendingIRPs != 0;
    call {:si_unique_call 1282} vslice_dummy_var_292 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L643;

  L643:
    call {:si_unique_call 1283} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1337;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1337;
    call {:si_unique_call 1284} vslice_dummy_var_311 := sdv_InterlockedIncrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 1) != 0;
    call {:si_unique_call 1285} SerialReleaseResources(pDevExt_11);
    goto L650;

  L650:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1286} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1287} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L866;

  L866:
    call {:si_unique_call 1288} Tmp_480 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon328_Then, anon328_Else;

  anon328_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon328_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon289_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L866;

  anon288_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 1) == 0;
    goto L650;

  anon327_Then:
    assume {:partition} pendingIRPs == 0;
    goto L643;

  anon310_Then:
    Tmp_512 := strConst__li2bpl127;
    call {:si_unique_call 1289} vslice_dummy_var_306 := SerialDbgPrintEx(12, Tmp_512);
    Tmp_491 := strConst__li2bpl137;
    call {:si_unique_call 1290} vslice_dummy_var_307 := SerialDbgPrintEx(12, Tmp_491);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1291} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 1, 0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1292} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1293} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon326_Then, anon326_Else;

  anon326_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon326_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon311_Then:
    Tmp_525 := strConst__li2bpl152;
    call {:si_unique_call 1294} vslice_dummy_var_303 := SerialDbgPrintEx(12, Tmp_525);
    Tmp_528 := strConst__li2bpl137;
    call {:si_unique_call 1295} vslice_dummy_var_304 := SerialDbgPrintEx(12, Tmp_528);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1296} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 1, 1);
    call {:si_unique_call 1297} SerialKillPendingIrps(PDevObj_15);
    goto anon323_Then, anon323_Else;

  anon323_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1298} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1338;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1338;
    call {:si_unique_call 1299} vslice_dummy_var_305 := sdv_InterlockedDecrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1300} Tmp_507 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_1339;
    Mem_T.INT4[Tmp_507] := vslice_dummy_var_1339;
    call {:si_unique_call 1301} sdv_503 := sdv_InterlockedDecrement(Tmp_507);
    assume {:nonnull} Tmp_507 != 0;
    assume Tmp_507 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    pendingIRPs_2 := sdv_503;
    goto anon324_Then, anon324_Else;

  anon324_Else:
    assume {:partition} pendingIRPs_2 != 0;
    call {:si_unique_call 1302} vslice_dummy_var_294 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L697;

  L697:
    call {:si_unique_call 1303} vslice_dummy_var_293 := SerialRemoveDevObj(PDevObj_15);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1304} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1305} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L863;

  L863:
    call {:si_unique_call 1306} Tmp_480 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon325_Then, anon325_Else;

  anon325_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon325_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon290_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L863;

  anon324_Then:
    assume {:partition} pendingIRPs_2 == 0;
    goto L697;

  anon323_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon312_Then:
    Tmp_556 := strConst__li2bpl153;
    call {:si_unique_call 1307} vslice_dummy_var_299 := SerialDbgPrintEx(12, Tmp_556);
    Tmp_542 := strConst__li2bpl137;
    call {:si_unique_call 1308} vslice_dummy_var_300 := SerialDbgPrintEx(12, Tmp_542);
    call {:si_unique_call 1309} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    call {:si_unique_call 1310} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 17;
    Tmp_508 := strConst__li2bpl155;
    call {:si_unique_call 1311} vslice_dummy_var_301 := SerialDbgPrintEx(12, Tmp_508);
    Tmp_548 := strConst__li2bpl1;
    call {:si_unique_call 1312} vslice_dummy_var_302 := SerialDbgPrintEx(9, Tmp_548);
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1313} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:partition} yogi_error != 1;
    goto L860;

  L860:
    call {:si_unique_call 1314} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1315} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := 17;
    goto L1;

  anon321_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon292_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L860;

  anon291_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1316} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 1, 1);
    call {:si_unique_call 1317} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1318} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1319} Tmp_480 := SerialIoCallDriver(pDevExt_11, pLowerDevObj_3, PIrp_11);
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon322_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon244_Then:
    Tmp_516 := strConst__li2bpl154;
    call {:si_unique_call 1320} vslice_dummy_var_297 := SerialDbgPrintEx(12, Tmp_516);
    call {:si_unique_call 1321} MmLockPagableSectionByHandle(0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1322} status_19 := SerialStartDevice(PDevObj_15, PIrp_11);
    goto anon319_Then, anon319_Else;

  anon319_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon293_Then, anon293_Else;

  anon293_Else:
    goto L768;

  L768:
    call {:si_unique_call 1323} MmUnlockPagableImageSection(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := status_19;
    Tmp_520 := strConst__li2bpl1;
    call {:si_unique_call 1324} vslice_dummy_var_298 := SerialDbgPrintEx(9, Tmp_520);
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume PIrp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1325} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_11);
    goto anon320_Then, anon320_Else;

  anon320_Else:
    assume {:partition} yogi_error != 1;
    goto L857;

  L857:
    call {:si_unique_call 1326} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1327} SerialIRPEpilogue(pDevExt_11);
    Tmp_480 := status_19;
    goto L1;

  anon320_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon294_Then:
    assume !(PIrp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L857;

  anon293_Then:
    call {:si_unique_call 1328} vslice_dummy_var_295 := SerialGotoPowerState(PDevObj_15, pDevExt_11, 4);
    goto L768;

  anon319_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_16: int, actual_PIrp_12: int) returns (Tmp_559: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_16: int, actual_PIrp_12: int) returns (Tmp_559: int)
{
  var {:pointer} Tmp_560: int;
  var {:pointer} pDevExt_12: int;
  var {:pointer} Tmp_561: int;
  var {:pointer} pIrpStack_7: int;
  var {:pointer} pLowerDevObj_4: int;
  var {:scalar} status_20: int;
  var {:pointer} PDevObj_16: int;
  var {:pointer} PIrp_12: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_1340: int;
  var vslice_dummy_var_1341: int;

  anon0:
    PDevObj_16 := actual_PDevObj_16;
    PIrp_12 := actual_PIrp_12;
    call {:si_unique_call 1329} Tmp_560 := __HAVOC_malloc(112);
    call {:si_unique_call 1330} Tmp_561 := __HAVOC_malloc(112);
    call {:si_unique_call 1331} pIrpStack_7 := sdv_IoGetCurrentIrpStackLocation(PIrp_12);
    status_20 := -1073741822;
    assume {:nonnull} PDevObj_16 != 0;
    assume PDevObj_16 > 0;
    havoc pDevExt_12;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc pLowerDevObj_4;
    call {:si_unique_call 1332} sdv_do_paged_code_check();
    Tmp_561 := strConst__li2bpl164;
    call {:si_unique_call 1333} vslice_dummy_var_359 := SerialDbgPrintEx(11, Tmp_561);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1334} KeInitializeEvent(SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_12), 1, 0);
    call {:si_unique_call 1335} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_12);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1336} sdv_IoSetCompletionRoutine(PIrp_12, li2bplFunctionConstant515, SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_12), 1, 1, 1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume PIrp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1337} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L50;

  L50:
    call {:si_unique_call 1338} status_20 := sdv_IoCallDriver(pLowerDevObj_4, PIrp_12);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_20 == 259;
    call {:si_unique_call 1339} vslice_dummy_var_358 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} PIrp_12 != 0;
    assume PIrp_12 > 0;
    status_20 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_12))];
    goto L34;

  L34:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_20 >= 0;
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    havoc vslice_dummy_var_1340;
    havoc vslice_dummy_var_1341;
    call {:si_unique_call 1340} status_20 := SerialFinishStartDevice(PDevObj_16, vslice_dummy_var_1340, vslice_dummy_var_1341, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_559 := status_20;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} 0 > status_20;
    Tmp_560 := strConst__li2bpl165;
    call {:si_unique_call 1341} vslice_dummy_var_360 := SerialDbgPrintEx(14, Tmp_560);
    Tmp_559 := status_20;
    goto L1;

  anon12_Then:
    assume {:partition} status_20 != 259;
    goto L34;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume !(PIrp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L50;
}



procedure {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_563: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_563 == 131072 || Tmp_563 == 115200 || Tmp_563 == 57344 || Tmp_563 == 57600 || Tmp_563 == 38400 || Tmp_563 == 19200 || Tmp_563 == 14400 || Tmp_563 == 9600 || Tmp_563 == 7200 || Tmp_563 == 4800 || Tmp_563 == 2400 || Tmp_563 == 1800 || Tmp_563 == 1200 || Tmp_563 == 600 || Tmp_563 == 300 || Tmp_563 == 150 || Tmp_563 == 135 || Tmp_563 == 110 || Tmp_563 == 75 || Tmp_563 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_563: int)
{
  var {:scalar} Bauds: int;

  anon0:
    Bauds := actual_Bauds;
    call {:si_unique_call 1342} sdv_do_paged_code_check();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(Bauds, 65536) != 0;
    Tmp_563 := 131072;
    goto L1;

  L1:
    return;

  anon39_Then:
    assume {:partition} BAND(Bauds, 65536) == 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(Bauds, 131072) != 0;
    Tmp_563 := 115200;
    goto L1;

  anon40_Then:
    assume {:partition} BAND(Bauds, 131072) == 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} BAND(Bauds, 32768) != 0;
    Tmp_563 := 57344;
    goto L1;

  anon41_Then:
    assume {:partition} BAND(Bauds, 32768) == 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(Bauds, 262144) != 0;
    Tmp_563 := 57600;
    goto L1;

  anon42_Then:
    assume {:partition} BAND(Bauds, 262144) == 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(Bauds, 16384) != 0;
    Tmp_563 := 38400;
    goto L1;

  anon43_Then:
    assume {:partition} BAND(Bauds, 16384) == 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(Bauds, 8192) != 0;
    Tmp_563 := 19200;
    goto L1;

  anon44_Then:
    assume {:partition} BAND(Bauds, 8192) == 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(Bauds, 4096) != 0;
    Tmp_563 := 14400;
    goto L1;

  anon45_Then:
    assume {:partition} BAND(Bauds, 4096) == 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(Bauds, 2048) != 0;
    Tmp_563 := 9600;
    goto L1;

  anon46_Then:
    assume {:partition} BAND(Bauds, 2048) == 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} BAND(Bauds, 1024) != 0;
    Tmp_563 := 7200;
    goto L1;

  anon47_Then:
    assume {:partition} BAND(Bauds, 1024) == 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} BAND(Bauds, 512) != 0;
    Tmp_563 := 4800;
    goto L1;

  anon48_Then:
    assume {:partition} BAND(Bauds, 512) == 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(Bauds, 256) != 0;
    Tmp_563 := 2400;
    goto L1;

  anon49_Then:
    assume {:partition} BAND(Bauds, 256) == 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} BAND(Bauds, 128) != 0;
    Tmp_563 := 1800;
    goto L1;

  anon50_Then:
    assume {:partition} BAND(Bauds, 128) == 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(Bauds, 64) != 0;
    Tmp_563 := 1200;
    goto L1;

  anon51_Then:
    assume {:partition} BAND(Bauds, 64) == 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BAND(Bauds, 32) != 0;
    Tmp_563 := 600;
    goto L1;

  anon52_Then:
    assume {:partition} BAND(Bauds, 32) == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Bauds, 16) != 0;
    Tmp_563 := 300;
    goto L1;

  anon53_Then:
    assume {:partition} BAND(Bauds, 16) == 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Bauds, 8) != 0;
    Tmp_563 := 150;
    goto L1;

  anon54_Then:
    assume {:partition} BAND(Bauds, 8) == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} BAND(Bauds, 4) != 0;
    Tmp_563 := 135;
    goto L1;

  anon55_Then:
    assume {:partition} BAND(Bauds, 4) == 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(Bauds, 2) != 0;
    Tmp_563 := 110;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(Bauds, 2) == 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} BAND(Bauds, 1) != 0;
    Tmp_563 := 75;
    goto L1;

  anon57_Then:
    assume {:partition} BAND(Bauds, 1) == 0;
    Tmp_563 := 0;
    goto L1;
}



procedure {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_15: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_15: int)
{
  var {:pointer} keyHandle_2: int;
  var {:scalar} Tmp_567: int;
  var {:pointer} pRegName_1: int;
  var {:pointer} Tmp_568: int;
  var {:scalar} symLinkName: int;
  var {:pointer} Tmp_569: int;
  var {:pointer} Tmp_570: int;
  var {:scalar} status_21: int;
  var {:pointer} Tmp_574: int;
  var {:scalar} Tmp_576: int;
  var {:pointer} Extension_15: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_1342: int;
  var vslice_dummy_var_1343: int;
  var vslice_dummy_var_1344: int;
  var vslice_dummy_var_1345: int;

  anon0:
    call {:si_unique_call 1343} Tmp_567 := __HAVOC_malloc(20);
    call {:si_unique_call 1344} pRegName_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1345} symLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 1346} vslice_dummy_var_361 := __HAVOC_malloc(4);
    Extension_15 := actual_Extension_15;
    call {:si_unique_call 1347} Tmp_568 := __HAVOC_malloc(132);
    call {:si_unique_call 1348} Tmp_570 := __HAVOC_malloc(76);
    call {:si_unique_call 1349} vslice_dummy_var_364 := __HAVOC_malloc(44);
    call {:si_unique_call 1350} Tmp_574 := __HAVOC_malloc(236);
    call {:si_unique_call 1351} sdv_do_paged_code_check();
    Tmp_574 := strConst__li2bpl166;
    call {:si_unique_call 1352} vslice_dummy_var_365 := SerialDbgPrintEx(6, Tmp_574);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_15)] == 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 1353} status_21 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1354} sdv_ExFreePool(0);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L17;

  L17:
    call {:si_unique_call 1355} status_21 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 1356} RtlInitUnicodeString(symLinkName, 0);
    call {:si_unique_call 1357} status_21 := SerialReadSymName(Extension_15, keyHandle_2, symLinkName, pRegName_1);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_21 != 0;
    goto L43;

  L43:
    call {:si_unique_call 1358} vslice_dummy_var_362 := ZwClose(0);
    goto L14;

  L14:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1359} sdv_ExFreePool(0);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L56;

  L56:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1360} status_21 := RtlDeleteRegistryValue(4, 0, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_21 < 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_576;
    assume {:nonnull} Tmp_567 != 0;
    assume Tmp_567 > 0;
    assume {:nonnull} Tmp_567 != 0;
    assume Tmp_567 > 0;
    assume {:nonnull} Tmp_567 != 0;
    assume Tmp_567 > 0;
    assume {:nonnull} Tmp_567 != 0;
    assume Tmp_567 > 0;
    assume {:nonnull} Tmp_567 != 0;
    assume Tmp_567 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_569;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Tmp_569 != 0;
    assume Tmp_569 > 0;
    havoc vslice_dummy_var_1342;
    havoc vslice_dummy_var_1343;
    havoc vslice_dummy_var_1344;
    havoc vslice_dummy_var_1345;
    call {:si_unique_call 1361} SerialLogError(vslice_dummy_var_1342, vslice_dummy_var_1343, vslice_dummy_var_1344, Tmp_567, 0, 0, 0, 55, status_21, 393222, Tmp_576, vslice_dummy_var_1345, 0, 0);
    Tmp_568 := strConst__li2bpl168;
    call {:si_unique_call 1362} vslice_dummy_var_366 := SerialDbgPrintEx(14, Tmp_568);
    goto L1;

  L1:
    return;

  anon33_Then:
    assume {:partition} 0 <= status_21;
    goto L1;

  anon32_Then:
    goto L1;

  anon31_Then:
    goto L1;

  anon25_Then:
    goto L56;

  anon29_Then:
    assume {:partition} status_21 == 0;
    Tmp_570 := strConst__li2bpl167;
    call {:si_unique_call 1363} vslice_dummy_var_367 := SerialDbgPrintEx(4, Tmp_570);
    call {:si_unique_call 1364} vslice_dummy_var_363 := IoDeleteSymbolicLink(0);
    call {:si_unique_call 1365} sdv_ExFreePool(0);
    assume {:nonnull} pRegName_1 != 0;
    assume pRegName_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 1366} sdv_ExFreePool(0);
    goto L43;

  anon30_Then:
    goto L43;

  anon28_Then:
    assume {:partition} status_21 != 0;
    goto L14;

  anon27_Then:
    goto L17;

  anon26_Then:
    goto L14;

  anon24_Then:
    goto L14;

  anon23_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_15)] != 0;
    goto L1;
}



procedure {:origName "_sdv_init21"} _sdv_init21();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init21"} _sdv_init21()
{
  var vslice_dummy_var_368: int;

  anon0:
    call {:si_unique_call 1367} vslice_dummy_var_368 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_5: int) returns (Tmp_579: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_579 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_5: int) returns (Tmp_579: int)
{
  var {:pointer} Tmp_580: int;
  var {:pointer} Extension_16: int;
  var {:scalar} ModemControl: int;
  var {:pointer} Context_5: int;
  var vslice_dummy_var_369: int;

  anon0:
    Context_5 := actual_Context_5;
    call {:si_unique_call 1368} Tmp_580 := __HAVOC_malloc(84);
    Extension_16 := Context_5;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    call {:si_unique_call 1369} ModemControl := corral_nondet();
    ModemControl := BAND(ModemControl, BNOT(2));
    Tmp_580 := strConst__li2bpl169;
    call {:si_unique_call 1370} vslice_dummy_var_369 := SerialDbgPrintEx(13, Tmp_580);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    Tmp_579 := 0;
    return;
}



procedure {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_6: int) returns (Tmp_584: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_584 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_6: int) returns (Tmp_584: int)
{
  var {:pointer} Extension_17: int;
  var {:scalar} ModemControl_1: int;
  var {:pointer} Tmp_588: int;
  var {:pointer} Context_6: int;
  var vslice_dummy_var_370: int;

  anon0:
    Context_6 := actual_Context_6;
    call {:si_unique_call 1371} Tmp_588 := __HAVOC_malloc(84);
    Extension_17 := Context_6;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    call {:si_unique_call 1372} ModemControl_1 := corral_nondet();
    ModemControl_1 := BAND(ModemControl_1, BNOT(1));
    Tmp_588 := strConst__li2bpl170;
    call {:si_unique_call 1373} vslice_dummy_var_370 := SerialDbgPrintEx(13, Tmp_588);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_584 := 0;
    return;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_371: int;

  anon0:
    call {:si_unique_call 1374} vslice_dummy_var_371 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SLIC_ABORT_9_0"} SLIC_ABORT_9_0(actual_caller: int, actual_SerialPnpDispatch_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_9_0"} SLIC_ABORT_9_0(actual_caller: int, actual_SerialPnpDispatch_1: int)
{
  var {:pointer} caller: int;
  var {:scalar} SerialPnpDispatch_1: int;

  anon0:
    caller := actual_caller;
    SerialPnpDispatch_1 := actual_SerialPnpDispatch_1;
    call {:si_unique_call 1375} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_SerialInternalIoControl_exit"} {:osmodel} SLIC_SerialInternalIoControl_exit(actual_caller_1: int, actual_SerialInternalIoControl_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialInternalIoControl_exit"} {:osmodel} SLIC_SerialInternalIoControl_exit(actual_caller_1: int, actual_SerialInternalIoControl_1: int)
{
  var {:pointer} caller_1: int;
  var {:scalar} SerialInternalIoControl_1: int;

  anon0:
    caller_1 := actual_caller_1;
    SerialInternalIoControl_1 := actual_SerialInternalIoControl_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialInternalIoControl_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1376} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialInternalIoControl_1 == 259;
    call {:si_unique_call 1377} SLIC_ABORT_17_0(caller_1, SerialInternalIoControl_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_25_0"} SLIC_ABORT_25_0(actual_caller_2: int, actual_SerialQueryInformationFile_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_25_0"} SLIC_ABORT_25_0(actual_caller_2: int, actual_SerialQueryInformationFile_1: int)
{
  var {:pointer} caller_2: int;
  var {:scalar} SerialQueryInformationFile_1: int;

  anon0:
    caller_2 := actual_caller_2;
    SerialQueryInformationFile_1 := actual_SerialQueryInformationFile_1;
    call {:si_unique_call 1378} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_sdv_IoCallDriver_entry"} SLIC_sdv_IoCallDriver_entry(actual_caller_3: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_sdv_IoCallDriver_entry"} SLIC_sdv_IoCallDriver_entry(actual_caller_3: int)
{

  anon0:
    call {:si_unique_call 1379} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    return;
}



procedure {:origName "SLIC_ABORT_33_0"} SLIC_ABORT_33_0(actual_caller_4: int, actual_SerialCreateOpen_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_33_0"} SLIC_ABORT_33_0(actual_caller_4: int, actual_SerialCreateOpen_1: int)
{
  var {:pointer} caller_4: int;
  var {:scalar} SerialCreateOpen_1: int;

  anon0:
    caller_4 := actual_caller_4;
    SerialCreateOpen_1 := actual_SerialCreateOpen_1;
    call {:si_unique_call 1380} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_SerialPnpDispatch_exit"} {:osmodel} SLIC_SerialPnpDispatch_exit(actual_caller_5: int, actual_SerialPnpDispatch_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialPnpDispatch_exit"} {:osmodel} SLIC_SerialPnpDispatch_exit(actual_caller_5: int, actual_SerialPnpDispatch_2: int)
{
  var {:pointer} caller_5: int;
  var {:scalar} SerialPnpDispatch_2: int;

  anon0:
    caller_5 := actual_caller_5;
    SerialPnpDispatch_2 := actual_SerialPnpDispatch_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialPnpDispatch_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1381} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialPnpDispatch_2 == 259;
    call {:si_unique_call 1382} SLIC_ABORT_9_0(caller_5, SerialPnpDispatch_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_PoCallDriver_entry"} SLIC_PoCallDriver_entry(actual_caller_6: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_PoCallDriver_entry"} SLIC_PoCallDriver_entry(actual_caller_6: int)
{

  anon0:
    call {:si_unique_call 1383} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    return;
}



procedure {:origName "SLIC_sdv_containing_record_entry"} SLIC_sdv_containing_record_entry(actual_caller_7: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_sdv_containing_record_entry"} SLIC_sdv_containing_record_entry(actual_caller_7: int)
{

  anon0:
    call {:si_unique_call 1384} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    return;
}



procedure {:origName "_sdv_init24"} {:osmodel} _sdv_init24();
  modifies SLAM_guard_S_0, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init24"} {:osmodel} _sdv_init24()
{

  anon0:
    SLAM_guard_S_0 := SLAM_guard_S_0_init;
    io_complete_request_called := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_8: int, actual_SerialIoControl_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_8: int, actual_SerialIoControl_1: int)
{
  var {:pointer} caller_8: int;
  var {:scalar} SerialIoControl_1: int;

  anon0:
    caller_8 := actual_caller_8;
    SerialIoControl_1 := actual_SerialIoControl_1;
    call {:si_unique_call 1385} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_sdv_IoCompleteRequest_entry"} {:osmodel} SLIC_sdv_IoCompleteRequest_entry(actual_caller_9: int, actual_sdv_527: int);
  modifies io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_sdv_IoCompleteRequest_entry"} {:osmodel} SLIC_sdv_IoCompleteRequest_entry(actual_caller_9: int, actual_sdv_527: int)
{
  var {:pointer} caller_9: int;
  var {:pointer} sdv_527: int;

  anon0:
    caller_9 := actual_caller_9;
    sdv_527 := actual_sdv_527;
    assume {:nonnull} sdv_527 != 0;
    assume sdv_527 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_527))] != 259;
    io_complete_request_called := 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_527))] == 259;
    call {:si_unique_call 1386} SLIC_ABORT_7_0(caller_9, sdv_527);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SLIC_SerialCleanup_exit"} {:osmodel} SLIC_SerialCleanup_exit(actual_caller_10: int, actual_SerialCleanup_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialCleanup_exit"} {:osmodel} SLIC_SerialCleanup_exit(actual_caller_10: int, actual_SerialCleanup_1: int)
{
  var {:pointer} caller_10: int;
  var {:scalar} SerialCleanup_1: int;

  anon0:
    caller_10 := actual_caller_10;
    SerialCleanup_1 := actual_SerialCleanup_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialCleanup_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1387} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialCleanup_1 == 259;
    call {:si_unique_call 1388} SLIC_ABORT_15_0(caller_10, SerialCleanup_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_SerialPowerDispatch_exit"} {:osmodel} SLIC_SerialPowerDispatch_exit(actual_caller_11: int, actual_SerialPowerDispatch_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialPowerDispatch_exit"} {:osmodel} SLIC_SerialPowerDispatch_exit(actual_caller_11: int, actual_SerialPowerDispatch_1: int)
{
  var {:pointer} caller_11: int;
  var {:scalar} SerialPowerDispatch_1: int;

  anon0:
    caller_11 := actual_caller_11;
    SerialPowerDispatch_1 := actual_SerialPowerDispatch_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialPowerDispatch_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1389} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialPowerDispatch_1 == 259;
    call {:si_unique_call 1390} SLIC_ABORT_13_0(caller_11, SerialPowerDispatch_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_PoCallDriver_exit"} {:osmodel} SLIC_PoCallDriver_exit(actual_caller_12: int, actual_PoCallDriver_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_PoCallDriver_exit"} {:osmodel} SLIC_PoCallDriver_exit(actual_caller_12: int, actual_PoCallDriver_1: int)
{
  var {:pointer} PoCallDriver_1: int;

  anon0:
    PoCallDriver_1 := actual_PoCallDriver_1;
    assume {:nonnull} PoCallDriver_1 != 0;
    assume PoCallDriver_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PoCallDriver_1))] == 259;
    call {:si_unique_call 1391} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PoCallDriver_1))] != 259;
    goto L2;
}



procedure {:origName "SLIC_SerialRead_exit"} {:osmodel} SLIC_SerialRead_exit(actual_caller_13: int, actual_SerialRead_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialRead_exit"} {:osmodel} SLIC_SerialRead_exit(actual_caller_13: int, actual_SerialRead_1: int)
{
  var {:pointer} caller_13: int;
  var {:scalar} SerialRead_1: int;

  anon0:
    caller_13 := actual_caller_13;
    SerialRead_1 := actual_SerialRead_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialRead_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1392} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialRead_1 == 259;
    call {:si_unique_call 1393} SLIC_ABORT_29_0(caller_13, SerialRead_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_SerialQueryInformationFile_exit"} {:osmodel} SLIC_SerialQueryInformationFile_exit(actual_caller_14: int, actual_SerialQueryInformationFile_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialQueryInformationFile_exit"} {:osmodel} SLIC_SerialQueryInformationFile_exit(actual_caller_14: int, actual_SerialQueryInformationFile_2: int)
{
  var {:pointer} caller_14: int;
  var {:scalar} SerialQueryInformationFile_2: int;

  anon0:
    caller_14 := actual_caller_14;
    SerialQueryInformationFile_2 := actual_SerialQueryInformationFile_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialQueryInformationFile_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1394} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialQueryInformationFile_2 == 259;
    call {:si_unique_call 1395} SLIC_ABORT_25_0(caller_14, SerialQueryInformationFile_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_sdv_IoMarkIrpPending_entry"} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_15: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_sdv_IoMarkIrpPending_entry"} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_15: int)
{

  anon0:
    call {:si_unique_call 1396} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    return;
}



procedure {:origName "SLIC_SerialIoControl_exit"} {:osmodel} SLIC_SerialIoControl_exit(actual_caller_16: int, actual_SerialIoControl_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialIoControl_exit"} {:osmodel} SLIC_SerialIoControl_exit(actual_caller_16: int, actual_SerialIoControl_2: int)
{
  var {:pointer} caller_16: int;
  var {:scalar} SerialIoControl_2: int;

  anon0:
    caller_16 := actual_caller_16;
    SerialIoControl_2 := actual_SerialIoControl_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialIoControl_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1397} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialIoControl_2 == 259;
    call {:si_unique_call 1398} SLIC_ABORT_19_0(caller_16, SerialIoControl_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_17: int, actual_SerialCleanup_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_17: int, actual_SerialCleanup_2: int)
{
  var {:pointer} caller_17: int;
  var {:scalar} SerialCleanup_2: int;

  anon0:
    caller_17 := actual_caller_17;
    SerialCleanup_2 := actual_SerialCleanup_2;
    call {:si_unique_call 1399} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_18: int, actual_sdv_528: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_18: int, actual_sdv_528: int)
{
  var {:pointer} sdv_528: int;

  anon0:
    sdv_528 := actual_sdv_528;
    assume {:nonnull} sdv_528 != 0;
    assume sdv_528 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_528))] == 259;
    call {:si_unique_call 1400} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_528))] != 259;
    goto L2;
}



procedure {:origName "SLIC_SerialCreateOpen_exit"} {:osmodel} SLIC_SerialCreateOpen_exit(actual_caller_19: int, actual_SerialCreateOpen_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialCreateOpen_exit"} {:osmodel} SLIC_SerialCreateOpen_exit(actual_caller_19: int, actual_SerialCreateOpen_2: int)
{
  var {:pointer} caller_19: int;
  var {:scalar} SerialCreateOpen_2: int;

  anon0:
    caller_19 := actual_caller_19;
    SerialCreateOpen_2 := actual_SerialCreateOpen_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialCreateOpen_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1401} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialCreateOpen_2 == 259;
    call {:si_unique_call 1402} SLIC_ABORT_33_0(caller_19, SerialCreateOpen_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_11_0"} SLIC_ABORT_11_0(actual_caller_20: int, actual_SerialSystemControlDispatch_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_11_0"} SLIC_ABORT_11_0(actual_caller_20: int, actual_SerialSystemControlDispatch_1: int)
{
  var {:pointer} caller_20: int;
  var {:scalar} SerialSystemControlDispatch_1: int;

  anon0:
    caller_20 := actual_caller_20;
    SerialSystemControlDispatch_1 := actual_SerialSystemControlDispatch_1;
    call {:si_unique_call 1403} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_ABORT_17_0"} SLIC_ABORT_17_0(actual_caller_21: int, actual_SerialInternalIoControl_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_17_0"} SLIC_ABORT_17_0(actual_caller_21: int, actual_SerialInternalIoControl_2: int)
{
  var {:pointer} caller_21: int;
  var {:scalar} SerialInternalIoControl_2: int;

  anon0:
    caller_21 := actual_caller_21;
    SerialInternalIoControl_2 := actual_SerialInternalIoControl_2;
    call {:si_unique_call 1404} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_SerialWrite_exit"} {:osmodel} SLIC_SerialWrite_exit(actual_caller_22: int, actual_SerialWrite_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialWrite_exit"} {:osmodel} SLIC_SerialWrite_exit(actual_caller_22: int, actual_SerialWrite_1: int)
{
  var {:pointer} caller_22: int;
  var {:scalar} SerialWrite_1: int;

  anon0:
    caller_22 := actual_caller_22;
    SerialWrite_1 := actual_SerialWrite_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialWrite_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1405} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialWrite_1 == 259;
    call {:si_unique_call 1406} SLIC_ABORT_27_0(caller_22, SerialWrite_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_7_0"} SLIC_ABORT_7_0(actual_caller_23: int, actual_sdv_529: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_7_0"} SLIC_ABORT_7_0(actual_caller_23: int, actual_sdv_529: int)
{
  var {:pointer} caller_23: int;
  var {:pointer} sdv_529: int;

  anon0:
    caller_23 := actual_caller_23;
    sdv_529 := actual_sdv_529;
    call {:si_unique_call 1407} SLIC_ERROR_ROUTINE(strConst__li2bpl173);
    return;
}



procedure {:origName "SLIC_RemoveHeadList_entry"} SLIC_RemoveHeadList_entry(actual_caller_24: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_RemoveHeadList_entry"} SLIC_RemoveHeadList_entry(actual_caller_24: int)
{

  anon0:
    call {:si_unique_call 1408} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    return;
}



procedure {:origName "SLIC_ABORT_29_0"} SLIC_ABORT_29_0(actual_caller_25: int, actual_SerialRead_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_29_0"} SLIC_ABORT_29_0(actual_caller_25: int, actual_SerialRead_2: int)
{
  var {:pointer} caller_25: int;
  var {:scalar} SerialRead_2: int;

  anon0:
    caller_25 := actual_caller_25;
    SerialRead_2 := actual_SerialRead_2;
    call {:si_unique_call 1409} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_SerialSetInformationFile_exit"} {:osmodel} SLIC_SerialSetInformationFile_exit(actual_caller_26: int, actual_SerialSetInformationFile_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialSetInformationFile_exit"} {:osmodel} SLIC_SerialSetInformationFile_exit(actual_caller_26: int, actual_SerialSetInformationFile_1: int)
{
  var {:pointer} caller_26: int;
  var {:scalar} SerialSetInformationFile_1: int;

  anon0:
    caller_26 := actual_caller_26;
    SerialSetInformationFile_1 := actual_SerialSetInformationFile_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialSetInformationFile_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1410} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialSetInformationFile_1 == 259;
    call {:si_unique_call 1411} SLIC_ABORT_23_0(caller_26, SerialSetInformationFile_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_27_0"} SLIC_ABORT_27_0(actual_caller_27: int, actual_SerialWrite_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_27_0"} SLIC_ABORT_27_0(actual_caller_27: int, actual_SerialWrite_2: int)
{
  var {:pointer} caller_27: int;
  var {:scalar} SerialWrite_2: int;

  anon0:
    caller_27 := actual_caller_27;
    SerialWrite_2 := actual_SerialWrite_2;
    call {:si_unique_call 1412} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_SerialFlush_exit"} {:osmodel} SLIC_SerialFlush_exit(actual_caller_28: int, actual_SerialFlush_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialFlush_exit"} {:osmodel} SLIC_SerialFlush_exit(actual_caller_28: int, actual_SerialFlush_1: int)
{
  var {:pointer} caller_28: int;
  var {:scalar} SerialFlush_1: int;

  anon0:
    caller_28 := actual_caller_28;
    SerialFlush_1 := actual_SerialFlush_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialFlush_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1413} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialFlush_1 == 259;
    call {:si_unique_call 1414} SLIC_ABORT_21_0(caller_28, SerialFlush_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_KeWaitForSingleObject_exit"} {:osmodel} SLIC_KeWaitForSingleObject_exit(actual_caller_29: int, actual_KeWaitForSingleObject_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_KeWaitForSingleObject_exit"} {:osmodel} SLIC_KeWaitForSingleObject_exit(actual_caller_29: int, actual_KeWaitForSingleObject_1: int)
{
  var {:scalar} KeWaitForSingleObject_1: int;

  anon0:
    KeWaitForSingleObject_1 := actual_KeWaitForSingleObject_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} KeWaitForSingleObject_1 != 0;
    call {:si_unique_call 1415} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} KeWaitForSingleObject_1 == 0;
    goto L2;
}



procedure {:origName "SLIC_SerialClose_exit"} {:osmodel} SLIC_SerialClose_exit(actual_caller_30: int, actual_SerialClose_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialClose_exit"} {:osmodel} SLIC_SerialClose_exit(actual_caller_30: int, actual_SerialClose_1: int)
{
  var {:pointer} caller_30: int;
  var {:scalar} SerialClose_1: int;

  anon0:
    caller_30 := actual_caller_30;
    SerialClose_1 := actual_SerialClose_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialClose_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1416} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialClose_1 == 259;
    call {:si_unique_call 1417} SLIC_ABORT_31_0(caller_30, SerialClose_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_SerialSystemControlDispatch_exit"} {:osmodel} SLIC_SerialSystemControlDispatch_exit(actual_caller_31: int, actual_SerialSystemControlDispatch_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_SerialSystemControlDispatch_exit"} {:osmodel} SLIC_SerialSystemControlDispatch_exit(actual_caller_31: int, actual_SerialSystemControlDispatch_2: int)
{
  var {:pointer} caller_31: int;
  var {:scalar} SerialSystemControlDispatch_2: int;

  anon0:
    caller_31 := actual_caller_31;
    SerialSystemControlDispatch_2 := actual_SerialSystemControlDispatch_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialSystemControlDispatch_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 1418} SLIC_EXIT_ROUTINE(strConst__li2bpl172);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialSystemControlDispatch_2 == 259;
    call {:si_unique_call 1419} SLIC_ABORT_11_0(caller_31, SerialSystemControlDispatch_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_31_0"} SLIC_ABORT_31_0(actual_caller_32: int, actual_SerialClose_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_31_0"} SLIC_ABORT_31_0(actual_caller_32: int, actual_SerialClose_2: int)
{
  var {:pointer} caller_32: int;
  var {:scalar} SerialClose_2: int;

  anon0:
    caller_32 := actual_caller_32;
    SerialClose_2 := actual_SerialClose_2;
    call {:si_unique_call 1420} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_33: int, actual_SerialSetInformationFile_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_33: int, actual_SerialSetInformationFile_2: int)
{
  var {:pointer} caller_33: int;
  var {:scalar} SerialSetInformationFile_2: int;

  anon0:
    caller_33 := actual_caller_33;
    SerialSetInformationFile_2 := actual_SerialSetInformationFile_2;
    call {:si_unique_call 1421} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:origName "SLIC_ABORT_21_0"} SLIC_ABORT_21_0(actual_caller_34: int, actual_SerialFlush_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_21_0"} SLIC_ABORT_21_0(actual_caller_34: int, actual_SerialFlush_2: int)
{
  var {:pointer} caller_34: int;
  var {:scalar} SerialFlush_2: int;

  anon0:
    caller_34 := actual_caller_34;
    SerialFlush_2 := actual_SerialFlush_2;
    call {:si_unique_call 1422} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_35: int, actual_SerialPowerDispatch_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_35: int, actual_SerialPowerDispatch_2: int)
{
  var {:pointer} caller_35: int;
  var {:scalar} SerialPowerDispatch_2: int;

  anon0:
    caller_35 := actual_caller_35;
    SerialPowerDispatch_2 := actual_SerialPowerDispatch_2;
    call {:si_unique_call 1423} SLIC_ERROR_ROUTINE(strConst__li2bpl171);
    return;
}



procedure {:origName "SerialSetBaud"} SerialSetBaud(actual_Context_7: int) returns (Tmp_591: int);
  free ensures {:va_keep} Tmp_591 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSetBaud"} SerialSetBaud(actual_Context_7: int) returns (Tmp_591: int)
{
  var {:pointer} Tmp_598: int;
  var {:pointer} Tmp_601: int;
  var {:scalar} Appropriate: int;
  var {:pointer} Extension_18: int;
  var {:scalar} LineControl: int;
  var {:pointer} Address: int;
  var {:scalar} Divisor: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_372: int;

  anon0:
    Context_7 := actual_Context_7;
    Tmp_601 := Context_7;
    assume {:nonnull} Tmp_601 != 0;
    assume Tmp_601 > 0;
    havoc Extension_18;
    Tmp_598 := Context_7;
    assume {:nonnull} Tmp_598 != 0;
    assume Tmp_598 > 0;
    havoc Appropriate;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Address;
    Divisor := Appropriate;
    call {:si_unique_call 1424} LineControl := corral_nondet();
    call {:si_unique_call 1425} vslice_dummy_var_372 := corral_nondet();
    Tmp_591 := 0;
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_373: int;

  anon0:
    call {:si_unique_call 1426} vslice_dummy_var_373 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_15: int, actual_Irp_15: int) returns (Tmp_606: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_15: int, actual_Irp_15: int) returns (Tmp_606: int)
{
  var {:scalar} Tmp_607: int;
  var {:pointer} Tmp_608: int;
  var {:scalar} Tmp_609: int;
  var {:dopa} {:scalar} AppropriateDivisor: int;
  var {:pointer} NewChars: int;
  var {:pointer} Tmp_610: int;
  var {:pointer} Tmp_611: int;
  var {:pointer} Tmp_612: int;
  var {:pointer} Tmp_613: int;
  var {:pointer} NewTimeouts: int;
  var {:pointer} escapeChar: int;
  var {:scalar} Mask_1: int;
  var {:pointer} Tmp_614: int;
  var {:scalar} Tmp_615: int;
  var {:scalar} Tmp_616: int;
  var {:scalar} S_1: int;
  var {:scalar} Tmp_617: int;
  var {:pointer} Lc: int;
  var {:pointer} Tmp_618: int;
  var {:scalar} Tmp_619: int;
  var {:pointer} Tmp_620: int;
  var {:scalar} Status_2: int;
  var {:scalar} prologueStatus: int;
  var {:pointer} Tmp_621: int;
  var {:scalar} sdv_548: int;
  var {:pointer} Tmp_622: int;
  var {:scalar} S_2: int;
  var {:pointer} Tmp_623: int;
  var {:pointer} Br: int;
  var {:pointer} Rs: int;
  var {:pointer} Tmp_624: int;
  var {:pointer} Tmp_625: int;
  var {:pointer} IrpSp_3: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} HandFlow: int;
  var {:scalar} Tmp_627: int;
  var {:pointer} Tmp_628: int;
  var {:scalar} Tmp_629: int;
  var {:scalar} Tmp_630: int;
  var {:scalar} LData: int;
  var {:pointer} Tmp_631: int;
  var {:pointer} Tmp_632: int;
  var {:scalar} Tmp_633: int;
  var {:scalar} S_3: int;
  var {:scalar} Tmp_634: int;
  var {:pointer} Tmp_635: int;
  var {:pointer} Tmp_636: int;
  var {:pointer} Extension_19: int;
  var {:scalar} LParity: int;
  var {:scalar} sdv_562: int;
  var {:pointer} Tmp_637: int;
  var {:scalar} S_4: int;
  var {:scalar} Mask_2: int;
  var {:scalar} ModemControl_2: int;
  var {:scalar} Tmp_638: int;
  var {:scalar} Tmp_639: int;
  var {:scalar} NewMask: int;
  var {:pointer} Xc_1: int;
  var {:scalar} Tmp_640: int;
  var {:scalar} LStop: int;
  var {:scalar} S_5: int;
  var {:scalar} S_6: int;
  var {:scalar} BaudRate: int;
  var {:scalar} S_7: int;
  var {:pointer} Tmp_641: int;
  var {:pointer} Lc_1: int;
  var {:pointer} Tmp_642: int;
  var {:scalar} S_8: int;
  var {:pointer} DeviceObject_15: int;
  var {:pointer} Irp_15: int;
  var boogieTmp: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_1346: int;
  var vslice_dummy_var_1347: int;
  var vslice_dummy_var_1348: int;
  var vslice_dummy_var_1349: int;
  var vslice_dummy_var_1350: int;
  var vslice_dummy_var_1351: int;
  var vslice_dummy_var_1352: int;
  var vslice_dummy_var_1353: int;
  var vslice_dummy_var_1354: int;
  var vslice_dummy_var_1355: int;
  var vslice_dummy_var_1356: int;
  var vslice_dummy_var_1357: int;
  var vslice_dummy_var_1358: int;

  anon0:
    call {:si_unique_call 1427} AppropriateDivisor := __HAVOC_malloc(4);
    call {:si_unique_call 1428} S_1 := __HAVOC_malloc(8);
    call {:si_unique_call 1429} S_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1430} S_3 := __HAVOC_malloc(8);
    call {:si_unique_call 1431} S_4 := __HAVOC_malloc(8);
    call {:si_unique_call 1432} S_5 := __HAVOC_malloc(8);
    call {:si_unique_call 1433} S_6 := __HAVOC_malloc(8);
    call {:si_unique_call 1434} S_7 := __HAVOC_malloc(8);
    call {:si_unique_call 1435} S_8 := __HAVOC_malloc(8);
    DeviceObject_15 := actual_DeviceObject_15;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 1436} Tmp_612 := __HAVOC_malloc(124);
    call {:si_unique_call 1437} Tmp_614 := __HAVOC_malloc(96);
    call {:si_unique_call 1438} Tmp_618 := __HAVOC_malloc(148);
    call {:si_unique_call 1439} Tmp_620 := __HAVOC_malloc(148);
    call {:si_unique_call 1440} Tmp_625 := __HAVOC_malloc(72);
    call {:si_unique_call 1441} Tmp_628 := __HAVOC_malloc(72);
    call {:si_unique_call 1442} Tmp_631 := __HAVOC_malloc(128);
    call {:si_unique_call 1443} Tmp_635 := __HAVOC_malloc(140);
    call {:si_unique_call 1444} Tmp_636 := __HAVOC_malloc(136);
    call {:si_unique_call 1445} Tmp_642 := __HAVOC_malloc(68);
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc Extension_19;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon431_Then, anon431_Else;

  anon431_Else:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := -1073741808;
    goto anon432_Then, anon432_Else;

  anon432_Else:
    assume Irp_15 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1446} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_15);
    goto anon433_Then, anon433_Else;

  anon433_Else:
    assume {:partition} yogi_error != 1;
    goto L874;

  L874:
    call {:si_unique_call 1447} sdv_IoCompleteRequest(0, 0);
    Tmp_606 := -1073741808;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon433_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon432_Then:
    assume !(Irp_15 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L874;

  anon431_Then:
    call {:si_unique_call 1448} prologueStatus := SerialIRPPrologue(Irp_15, Extension_19);
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} prologueStatus != 0;
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:partition} prologueStatus != 259;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := prologueStatus;
    Tmp_628 := strConst__li2bpl1;
    call {:si_unique_call 1449} vslice_dummy_var_388 := SerialDbgPrintEx(9, Tmp_628);
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume Irp_15 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1450} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_15);
    goto anon434_Then, anon434_Else;

  anon434_Else:
    assume {:partition} yogi_error != 1;
    goto L877;

  L877:
    call {:si_unique_call 1451} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1452} SerialIRPEpilogue(Extension_19);
    goto L24;

  L24:
    Tmp_606 := prologueStatus;
    goto L1;

  anon434_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon315_Then:
    assume !(Irp_15 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L877;

  anon314_Then:
    assume {:partition} prologueStatus == 259;
    goto L24;

  anon313_Then:
    assume {:partition} prologueStatus == 0;
    Tmp_614 := strConst__li2bpl33;
    call {:si_unique_call 1453} vslice_dummy_var_389 := SerialDbgPrintEx(9, Tmp_614);
    call {:si_unique_call 1454} sdv_562 := SerialCompleteIfError(DeviceObject_15, Irp_15);
    goto anon435_Then, anon435_Else;

  anon435_Else:
    assume {:partition} yogi_error != 1;
    goto anon316_Then, anon316_Else;

  anon316_Else:
    assume {:partition} sdv_562 != 0;
    Tmp_606 := -1073741536;
    goto L1;

  anon316_Then:
    assume {:partition} sdv_562 == 0;
    call {:si_unique_call 1455} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_15);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Status_2 := 0;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon436_Then, anon436_Else;

  anon436_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon421_Then, anon421_Else;

  anon421_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon420_Then, anon420_Else;

  anon420_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon419_Then, anon419_Else;

  anon419_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon418_Then, anon418_Else;

  anon418_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon417_Then, anon417_Else;

  anon417_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon416_Then, anon416_Else;

  anon416_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon415_Then, anon415_Else;

  anon415_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon414_Then, anon414_Else;

  anon414_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon413_Then, anon413_Else;

  anon413_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon412_Then, anon412_Else;

  anon412_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon411_Then, anon411_Else;

  anon411_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon410_Then, anon410_Else;

  anon410_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon409_Then, anon409_Else;

  anon409_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon408_Then, anon408_Else;

  anon408_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon407_Then, anon407_Else;

  anon407_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon406_Then, anon406_Else;

  anon406_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon405_Then, anon405_Else;

  anon405_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon404_Then, anon404_Else;

  anon404_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon403_Then, anon403_Else;

  anon403_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon402_Then, anon402_Else;

  anon402_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon401_Then, anon401_Else;

  anon401_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon400_Then, anon400_Else;

  anon400_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon399_Then, anon399_Else;

  anon399_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon398_Then, anon398_Else;

  anon398_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon397_Then, anon397_Else;

  anon397_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon396_Then, anon396_Else;

  anon396_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon395_Then, anon395_Else;

  anon395_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon394_Then, anon394_Else;

  anon394_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon393_Then, anon393_Else;

  anon393_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon392_Then, anon392_Else;

  anon392_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon391_Then, anon391_Else;

  anon391_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon390_Then, anon390_Else;

  anon390_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon389_Then, anon389_Else;

  anon389_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon388_Then, anon388_Else;

  anon388_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon387_Then, anon387_Else;

  anon387_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon386_Then, anon386_Else;

  anon386_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon329_Then, anon329_Else;

  anon329_Else:
    Status_2 := -1073741789;
    goto L95;

  L95:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := Status_2;
    Tmp_625 := strConst__li2bpl1;
    call {:si_unique_call 1456} vslice_dummy_var_390 := SerialDbgPrintEx(9, Tmp_625);
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume Irp_15 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1457} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_15);
    goto anon437_Then, anon437_Else;

  anon437_Else:
    assume {:partition} yogi_error != 1;
    goto L880;

  L880:
    call {:si_unique_call 1458} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1459} SerialIRPEpilogue(Extension_19);
    Tmp_606 := Status_2;
    goto L1;

  anon437_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon330_Then:
    assume !(Irp_15 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L880;

  anon329_Then:
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon468_Then, anon468_Else;

  anon468_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1346;
    call {:si_unique_call 1460} Status_2 := SerialGotoPowerState(vslice_dummy_var_1346, Extension_19, 1);
    goto anon331_Then, anon331_Else;

  anon331_Else:
    assume {:partition} Status_2 >= 0;
    goto L108;

  L108:
    call {:si_unique_call 1461} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1462} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    call {:si_unique_call 1463} vslice_dummy_var_377 := KeSynchronizeExecution(0, li2bplFunctionConstant985, 0);
    call {:si_unique_call 1464} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon331_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon468_Then:
    goto L108;

  anon386_Then:
    Status_2 := -1073741811;
    goto L95;

  anon387_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    Status_2 := -1073741789;
    goto L95;

  anon332_Then:
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon467_Then, anon467_Else;

  anon467_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1347;
    call {:si_unique_call 1465} Status_2 := SerialGotoPowerState(vslice_dummy_var_1347, Extension_19, 1);
    goto anon333_Then, anon333_Else;

  anon333_Else:
    assume {:partition} Status_2 >= 0;
    goto L130;

  L130:
    call {:si_unique_call 1466} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1467} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    call {:si_unique_call 1468} vslice_dummy_var_378 := KeSynchronizeExecution(0, li2bplFunctionConstant983, 0);
    call {:si_unique_call 1469} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon333_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon467_Then:
    goto L130;

  anon388_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon334_Then, anon334_Else;

  anon334_Else:
    Status_2 := -1073741789;
    goto L95;

  anon334_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    call {:si_unique_call 1470} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1471} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    call {:si_unique_call 1472} vslice_dummy_var_379 := KeSynchronizeExecution(0, li2bplFunctionConstant984, 0);
    call {:si_unique_call 1473} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon389_Then:
    call {:si_unique_call 1474} vslice_dummy_var_376 := KeSynchronizeExecution(0, li2bplFunctionConstant844, 0);
    goto L95;

  anon390_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    Status_2 := -1073741789;
    goto L95;

  anon328_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    call {:si_unique_call 1475} vslice_dummy_var_401 := KeSynchronizeExecution(0, li2bplFunctionConstant978, 0);
    goto L95;

  anon391_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    Status_2 := -1073741789;
    goto L95;

  anon327_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_632;
    assume {:nonnull} Tmp_632 != 0;
    assume Tmp_632 > 0;
    Mem_T.INT4[Tmp_632] := 0;
    goto L95;

  anon392_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc escapeChar;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon466_Then, anon466_Else;

  anon466_Else:
    Status_2 := -1073741789;
    goto L95;

  anon466_Then:
    call {:si_unique_call 1476} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1477} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon335_Then, anon335_Else;

  anon335_Else:
    assume {:partition} Mem_T.INT4[escapeChar] != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon336_Then, anon336_Else;

  anon336_Else:
    goto L190;

  L190:
    Status_2 := -1073741811;
    call {:si_unique_call 1478} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon336_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon337_Then, anon337_Else;

  anon337_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon338_Then, anon338_Else;

  anon338_Else:
    goto L190;

  anon338_Then:
    goto L185;

  L185:
    call {:si_unique_call 1479} vslice_dummy_var_380 := KeSynchronizeExecution(0, li2bplFunctionConstant987, 0);
    call {:si_unique_call 1480} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon337_Then:
    goto L190;

  anon335_Then:
    assume {:partition} Mem_T.INT4[escapeChar] == 0;
    goto L185;

  anon393_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon339_Then, anon339_Else;

  anon339_Else:
    Status_2 := -1073741789;
    goto L95;

  anon339_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1481} sdv_548 := corral_nondet();
    ModemControl_2 := sdv_548;
    ModemControl_2 := BAND(ModemControl_2, BOR(1, 2));
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_624;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    Mem_T.INT4[Tmp_624] := ModemControl_2;
    goto L95;

  anon394_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    Status_2 := -1073741789;
    goto L95;

  anon326_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Tmp_611 := AssociatedIrp__IRP(Irp_15);
    assume {:nonnull} Tmp_611 != 0;
    assume Tmp_611 > 0;
    havoc vslice_dummy_var_1348;
    call {:si_unique_call 1482} SerialGetProperties(Extension_19, vslice_dummy_var_1348);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    goto L95;

  anon395_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Xc_1;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon464_Then, anon464_Else;

  anon464_Else:
    Status_2 := -1073741789;
    goto L95;

  anon464_Then:
    assume {:nonnull} Xc_1 != 0;
    assume Xc_1 > 0;
    goto anon340_Then, anon340_Else;

  anon340_Else:
    Status_2 := -1073741811;
    goto L95;

  anon340_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1483} Tmp_606 := SerialStartOrQueue(Extension_19, Irp_15, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_19), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_19), li2bplFunctionConstant569);
    goto anon465_Then, anon465_Else;

  anon465_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon465_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon396_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    Status_2 := -1073741789;
    goto L95;

  anon341_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    call {:si_unique_call 1484} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1485} IoAcquireCancelSpinLock(Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    call {:si_unique_call 1486} vslice_dummy_var_381 := KeSynchronizeExecution(0, li2bplFunctionConstant986, 0);
    call {:si_unique_call 1487} IoReleaseCancelSpinLock(OldIrql_7);
    goto L95;

  anon397_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon342_Then, anon342_Else;

  anon342_Else:
    Status_2 := -1073741789;
    goto L95;

  anon342_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    call {:si_unique_call 1488} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1489} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    call {:si_unique_call 1490} vslice_dummy_var_382 := KeSynchronizeExecution(0, li2bplFunctionConstant982, 0);
    call {:si_unique_call 1491} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon398_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc HandFlow;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon462_Then, anon462_Else;

  anon462_Else:
    Status_2 := -1073741789;
    goto L95;

  anon462_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    Status_2 := -1073741811;
    goto L95;

  anon343_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    Status_2 := -1073741811;
    goto L95;

  anon344_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    havoc Tmp_633;
    goto anon463_Then, anon463_Else;

  anon463_Else:
    assume {:partition} Tmp_633 == 3;
    Status_2 := -1073741811;
    goto L95;

  anon463_Then:
    assume {:partition} Tmp_633 != 3;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon345_Then, anon345_Else;

  anon345_Else:
    goto L282;

  L282:
    Status_2 := -1073741811;
    goto L95;

  anon345_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon347_Then, anon347_Else;

  anon347_Else:
    goto L286;

  L286:
    Status_2 := -1073741811;
    goto L95;

  anon347_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    call {:si_unique_call 1492} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1493} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon349_Then, anon349_Else;

  anon349_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon350_Then, anon350_Else;

  anon350_Else:
    Status_2 := -1073741811;
    call {:si_unique_call 1494} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon350_Then:
    goto L294;

  L294:
    call {:si_unique_call 1495} vslice_dummy_var_383 := KeSynchronizeExecution(0, li2bplFunctionConstant891, 0);
    call {:si_unique_call 1496} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon349_Then:
    goto L294;

  anon348_Then:
    goto L286;

  anon346_Then:
    goto L282;

  anon399_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    Status_2 := -1073741789;
    goto L95;

  anon325_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1497} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1498} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_622;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_622 != 0;
    assume Tmp_622 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_622 != 0;
    assume Tmp_622 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_622 != 0;
    assume Tmp_622 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_622 != 0;
    assume Tmp_622 > 0;
    call {:si_unique_call 1499} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon400_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc NewChars;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon461_Then, anon461_Else;

  anon461_Else:
    Status_2 := -1073741789;
    goto L95;

  anon461_Then:
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    call {:si_unique_call 1500} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1501} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon352_Then, anon352_Else;

  anon352_Else:
    goto L332;

  L332:
    Status_2 := -1073741811;
    call {:si_unique_call 1502} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon352_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    goto L332;

  anon353_Then:
    goto L329;

  L329:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    call {:si_unique_call 1503} vslice_dummy_var_400 := KeSynchronizeExecution(0, li2bplFunctionConstant979, 0);
    call {:si_unique_call 1504} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon351_Then:
    goto L329;

  anon401_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon324_Then, anon324_Else;

  anon324_Else:
    Status_2 := -1073741789;
    goto L95;

  anon324_Then:
    call {:si_unique_call 1505} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1506} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_623;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1507} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon402_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Lc_1;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon453_Then, anon453_Else;

  anon453_Else:
    Status_2 := -1073741789;
    goto L95;

  anon453_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    havoc vslice_dummy_var_1349;
    call {:si_unique_call 1508} sdv_RtlZeroMemory(0, vslice_dummy_var_1349);
    call {:si_unique_call 1509} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1510} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_639;
    goto anon454_Then, anon454_Else;

  anon454_Else:
    assume {:partition} Tmp_639 == 1;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  L372:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_629;
    goto anon455_Then, anon455_Else;

  anon455_Else:
    assume {:partition} Tmp_629 == 8;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  L378:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  L383:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1511} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon357_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon356_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon455_Then:
    assume {:partition} Tmp_629 != 8;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_615;
    goto anon456_Then, anon456_Else;

  anon456_Else:
    assume {:partition} Tmp_615 == 24;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon456_Then:
    assume {:partition} Tmp_615 != 24;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_616;
    goto anon457_Then, anon457_Else;

  anon457_Else:
    assume {:partition} Tmp_616 == 40;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon457_Then:
    assume {:partition} Tmp_616 != 40;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_619;
    goto anon458_Then, anon458_Else;

  anon458_Else:
    assume {:partition} Tmp_619 == 56;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon458_Then:
    assume {:partition} Tmp_619 != 56;
    goto L378;

  anon355_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon454_Then:
    assume {:partition} Tmp_639 != 1;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_640;
    goto anon459_Then, anon459_Else;

  anon459_Else:
    assume {:partition} Tmp_640 == 2;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon459_Then:
    assume {:partition} Tmp_640 != 2;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_617;
    goto anon460_Then, anon460_Else;

  anon460_Else:
    assume {:partition} Tmp_617 == 3;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon460_Then:
    assume {:partition} Tmp_617 != 3;
    goto L372;

  anon354_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon403_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Br;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon452_Then, anon452_Else;

  anon452_Else:
    Status_2 := -1073741789;
    goto L95;

  anon452_Then:
    call {:si_unique_call 1512} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1513} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Br != 0;
    assume Br > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1514} sdv_KeReleaseSpinLock(0, OldIrql_7);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto L95;

  anon404_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon358_Then, anon358_Else;

  anon358_Else:
    Status_2 := -1073741789;
    goto L95;

  anon358_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_613;
    assume {:nonnull} Tmp_613 != 0;
    assume Tmp_613 > 0;
    Mask_1 := Mem_T.INT4[Tmp_613];
    goto anon450_Then, anon450_Else;

  anon450_Else:
    assume {:partition} Mask_1 != 0;
    goto anon359_Then, anon359_Else;

  anon359_Else:
    assume {:partition} BAND(Mask_1, -16) == 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1515} Tmp_606 := SerialStartOrQueue(Extension_19, Irp_15, PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_19), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_19), li2bplFunctionConstant805);
    goto anon451_Then, anon451_Else;

  anon451_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon451_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon359_Then:
    assume {:partition} BAND(Mask_1, -16) != 0;
    goto L419;

  L419:
    Status_2 := -1073741811;
    goto L95;

  anon450_Then:
    assume {:partition} Mask_1 == 0;
    goto L419;

  anon405_Then:
    Tmp_635 := strConst__li2bpl174;
    call {:si_unique_call 1516} vslice_dummy_var_397 := SerialDbgPrintEx(9, Tmp_635);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon360_Then, anon360_Else;

  anon360_Else:
    Tmp_631 := strConst__li2bpl176;
    call {:si_unique_call 1517} vslice_dummy_var_398 := SerialDbgPrintEx(6, Tmp_631);
    Status_2 := -1073741789;
    goto L95;

  anon360_Then:
    Tmp_620 := strConst__li2bpl175;
    call {:si_unique_call 1518} vslice_dummy_var_399 := SerialDbgPrintEx(9, Tmp_620);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1519} Tmp_606 := SerialStartOrQueue(Extension_19, Irp_15, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_19), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_19), li2bplFunctionConstant617);
    goto anon449_Then, anon449_Else;

  anon449_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon449_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon406_Then:
    Tmp_636 := strConst__li2bpl177;
    call {:si_unique_call 1520} vslice_dummy_var_393 := SerialDbgPrintEx(9, Tmp_636);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon361_Then, anon361_Else;

  anon361_Else:
    Tmp_612 := strConst__li2bpl178;
    call {:si_unique_call 1521} vslice_dummy_var_394 := SerialDbgPrintEx(6, Tmp_612);
    Status_2 := -1073741789;
    goto L95;

  anon361_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_641;
    assume {:nonnull} Tmp_641 != 0;
    assume Tmp_641 > 0;
    NewMask := Mem_T.INT4[Tmp_641];
    goto anon447_Then, anon447_Else;

  anon447_Else:
    assume {:partition} BAND(NewMask, -8192) != 0;
    Tmp_642 := strConst__li2bpl180;
    call {:si_unique_call 1522} vslice_dummy_var_395 := SerialDbgPrintEx(6, Tmp_642);
    Status_2 := -1073741811;
    goto L95;

  anon447_Then:
    assume {:partition} BAND(NewMask, -8192) == 0;
    Tmp_618 := strConst__li2bpl179;
    call {:si_unique_call 1523} vslice_dummy_var_396 := SerialDbgPrintEx(9, Tmp_618);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1524} Tmp_606 := SerialStartOrQueue(Extension_19, Irp_15, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_19), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_19), li2bplFunctionConstant617);
    goto anon448_Then, anon448_Else;

  anon448_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon448_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon407_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    Status_2 := -1073741789;
    goto L95;

  anon323_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_621;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_621 != 0;
    assume Tmp_621 > 0;
    havoc vslice_dummy_var_1350;
    Mem_T.INT4[Tmp_621] := vslice_dummy_var_1350;
    goto L95;

  anon408_Then:
    call {:si_unique_call 1525} vslice_dummy_var_375 := KeSynchronizeExecution(0, li2bplFunctionConstant894, 0);
    goto L95;

  anon409_Then:
    call {:si_unique_call 1526} vslice_dummy_var_374 := KeSynchronizeExecution(0, li2bplFunctionConstant893, 0);
    goto L95;

  anon410_Then:
    goto L58;

  L58:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1351;
    call {:si_unique_call 1527} Status_2 := SerialGotoPowerState(vslice_dummy_var_1351, Extension_19, 1);
    goto anon362_Then, anon362_Else;

  anon362_Else:
    assume {:partition} Status_2 >= 0;
    goto L469;

  L469:
    call {:si_unique_call 1528} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1529} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_607;
    goto anon445_Then, anon445_Else;

  anon445_Else:
    assume {:partition} Tmp_607 == 128;
    goto L481;

  L481:
    Status_2 := -1073741811;
    goto L482;

  L482:
    call {:si_unique_call 1530} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon445_Then:
    assume {:partition} Tmp_607 != 128;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_638;
    goto anon446_Then, anon446_Else;

  anon446_Else:
    assume {:partition} Tmp_638 != 192;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon363_Then, anon363_Else;

  anon363_Else:
    Tmp_627 := li2bplFunctionConstant889;
    goto L490;

  L490:
    call {:si_unique_call 1531} vslice_dummy_var_384 := KeSynchronizeExecution(0, Tmp_627, 0);
    goto L482;

  anon363_Then:
    Tmp_627 := li2bplFunctionConstant524;
    goto L490;

  anon446_Then:
    assume {:partition} Tmp_638 == 192;
    goto L481;

  anon362_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon322_Then:
    goto L469;

  anon411_Then:
    goto L58;

  anon412_Then:
    goto L95;

  anon413_Then:
    goto L56;

  L56:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1352;
    call {:si_unique_call 1532} Status_2 := SerialGotoPowerState(vslice_dummy_var_1352, Extension_19, 1);
    goto anon364_Then, anon364_Else;

  anon364_Else:
    assume {:partition} Status_2 >= 0;
    goto L493;

  L493:
    call {:si_unique_call 1533} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1534} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_630;
    goto anon444_Then, anon444_Else;

  anon444_Else:
    assume {:partition} Tmp_630 == 2;
    Status_2 := -1073741811;
    goto L506;

  L506:
    call {:si_unique_call 1535} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon444_Then:
    assume {:partition} Tmp_630 != 2;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon365_Then, anon365_Else;

  anon365_Else:
    Tmp_634 := li2bplFunctionConstant888;
    goto L512;

  L512:
    call {:si_unique_call 1536} vslice_dummy_var_385 := KeSynchronizeExecution(0, Tmp_634, 0);
    goto L506;

  anon365_Then:
    Tmp_634 := li2bplFunctionConstant525;
    goto L512;

  anon364_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon321_Then:
    goto L493;

  anon414_Then:
    goto L56;

  anon415_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon320_Then, anon320_Else;

  anon320_Else:
    Status_2 := -1073741789;
    goto L95;

  anon320_Then:
    call {:si_unique_call 1537} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1538} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_610;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1539} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon416_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc NewTimeouts;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon443_Then, anon443_Else;

  anon443_Else:
    Status_2 := -1073741789;
    goto L95;

  anon443_Then:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon366_Then, anon366_Else;

  anon366_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon367_Then, anon367_Else;

  anon367_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon368_Then, anon368_Else;

  anon368_Else:
    Status_2 := -1073741811;
    goto L95;

  anon368_Then:
    goto L531;

  L531:
    call {:si_unique_call 1540} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1541} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    call {:si_unique_call 1542} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon367_Then:
    goto L531;

  anon366_Then:
    goto L531;

  anon417_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    Status_2 := -1073741789;
    goto L95;

  anon319_Then:
    call {:si_unique_call 1543} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1544} IoAcquireCancelSpinLock(Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon369_Then, anon369_Else;

  anon369_Else:
    assume {:partition} Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_19)] != 0;
    Status_2 := -1073741811;
    call {:si_unique_call 1545} IoReleaseCancelSpinLock(OldIrql_7);
    goto L95;

  anon369_Then:
    assume {:partition} Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_19)] == 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon370_Then, anon370_Else;

  anon370_Else:
    call {:si_unique_call 1546} IoReleaseCancelSpinLock(OldIrql_7);
    Status_2 := -1073741536;
    goto L95;

  anon370_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_19)] := Irp_15;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1547} IoReleaseCancelSpinLock(OldIrql_7);
    call {:si_unique_call 1548} SerialStartImmediate(Extension_19);
    goto anon442_Then, anon442_Else;

  anon442_Else:
    assume {:partition} yogi_error != 1;
    Tmp_606 := 259;
    goto L1;

  anon442_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon418_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon318_Then, anon318_Else;

  anon318_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1353;
    call {:si_unique_call 1549} Status_2 := SerialGotoPowerState(vslice_dummy_var_1353, Extension_19, 1);
    goto anon371_Then, anon371_Else;

  anon371_Else:
    assume {:partition} Status_2 >= 0;
    goto L572;

  L572:
    call {:si_unique_call 1550} vslice_dummy_var_386 := KeSynchronizeExecution(0, li2bplFunctionConstant849, 0);
    goto L95;

  anon371_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon318_Then:
    goto L572;

  anon419_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1354;
    call {:si_unique_call 1551} Status_2 := SerialGotoPowerState(vslice_dummy_var_1354, Extension_19, 1);
    goto anon372_Then, anon372_Else;

  anon372_Else:
    assume {:partition} Status_2 >= 0;
    goto L582;

  L582:
    call {:si_unique_call 1552} vslice_dummy_var_387 := KeSynchronizeExecution(0, li2bplFunctionConstant892, 0);
    goto L95;

  anon372_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon317_Then:
    goto L582;

  anon420_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Lc;
    Mask_2 := 255;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon440_Then, anon440_Else;

  anon440_Else:
    Status_2 := -1073741789;
    goto L95;

  anon440_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon373_Then, anon373_Else;

  anon373_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1355;
    call {:si_unique_call 1553} Status_2 := SerialGotoPowerState(vslice_dummy_var_1355, Extension_19, 1);
    goto anon375_Then, anon375_Else;

  anon375_Else:
    assume {:partition} Status_2 >= 0;
    goto L602;

  L602:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon374_Then, anon374_Else;

  anon374_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon424_Then, anon424_Else;

  anon424_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon423_Then, anon423_Else;

  anon423_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon422_Then, anon422_Else;

  anon422_Else:
    LData := 3;
    goto L615;

  L615:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon441_Then, anon441_Else;

  anon441_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon428_Then, anon428_Else;

  anon428_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon427_Then, anon427_Else;

  anon427_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon426_Then, anon426_Else;

  anon426_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon425_Then, anon425_Else;

  anon425_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LParity := 56;
    goto L625;

  L625:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon430_Then, anon430_Else;

  anon430_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon429_Then, anon429_Else;

  anon429_Else:
    goto anon378_Then, anon378_Else;

  anon378_Else:
    assume {:partition} LData != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LStop := 4;
    goto L634;

  L634:
    call {:si_unique_call 1554} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1555} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_609;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1556} vslice_dummy_var_392 := KeSynchronizeExecution(0, li2bplFunctionConstant981, 0);
    call {:si_unique_call 1557} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon378_Then:
    assume {:partition} LData == 0;
    Status_2 := -1073741811;
    goto L95;

  anon429_Then:
    Status_2 := -1073741811;
    goto L95;

  anon430_Then:
    goto anon377_Then, anon377_Else;

  anon377_Else:
    assume {:partition} LData != 0;
    Status_2 := -1073741811;
    goto L95;

  anon377_Then:
    assume {:partition} LData == 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LStop := 4;
    goto L634;

  anon376_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LStop := 0;
    goto L634;

  anon425_Then:
    Status_2 := -1073741811;
    goto L95;

  anon426_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LParity := 40;
    goto L625;

  anon427_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LParity := 24;
    goto L625;

  anon428_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LParity := 8;
    goto L625;

  anon441_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    LParity := 0;
    goto L625;

  anon422_Then:
    Status_2 := -1073741811;
    goto L95;

  anon423_Then:
    LData := 2;
    Mask_2 := 127;
    goto L615;

  anon424_Then:
    LData := 1;
    Mask_2 := 63;
    goto L615;

  anon374_Then:
    LData := 0;
    Mask_2 := 31;
    goto L615;

  anon375_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon373_Then:
    goto L602;

  anon421_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Rs;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon438_Then, anon438_Else;

  anon438_Else:
    Status_2 := -1073741789;
    goto L95;

  anon438_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    goto anon379_Then, anon379_Else;

  anon379_Else:
    Status_2 := 0;
    goto L95;

  anon379_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    havoc vslice_dummy_var_1356;
    call {:si_unique_call 1558} boogieTmp := sdv_ExAllocatePoolWithQuotaTag(512, vslice_dummy_var_1356, -666022077);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 1559} Tmp_606 := SerialStartOrQueue(Extension_19, Irp_15, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_19), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_19), li2bplFunctionConstant720);
    goto anon439_Then, anon439_Else;

  anon439_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon439_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon380_Then:
    goto L95;

  anon436_Then:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    Status_2 := -1073741789;
    goto L95;

  anon381_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_608;
    assume {:nonnull} Tmp_608 != 0;
    assume Tmp_608 > 0;
    havoc BaudRate;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1357;
    call {:si_unique_call 1560} Status_2 := SerialGetDivisorFromBaud(vslice_dummy_var_1357, BaudRate, AppropriateDivisor);
    goto anon382_Then, anon382_Else;

  anon382_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon383_Then, anon383_Else;

  anon383_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_1358;
    call {:si_unique_call 1561} Status_2 := SerialGotoPowerState(vslice_dummy_var_1358, Extension_19, 1);
    goto anon384_Then, anon384_Else;

  anon384_Else:
    assume {:partition} Status_2 >= 0;
    goto L705;

  L705:
    call {:si_unique_call 1562} Tmp_637 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    Mem_T.INT4[Tmp_637] := OldIrql_7;
    call {:si_unique_call 1563} sdv_KeAcquireSpinLock(0, Tmp_637);
    assume {:nonnull} Tmp_637 != 0;
    assume Tmp_637 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_637];
    goto anon385_Then, anon385_Else;

  anon385_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    assume {:nonnull} AppropriateDivisor != 0;
    assume AppropriateDivisor > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    call {:si_unique_call 1564} vslice_dummy_var_391 := KeSynchronizeExecution(0, li2bplFunctionConstant980, 0);
    goto L716;

  L716:
    call {:si_unique_call 1565} sdv_KeReleaseSpinLock(0, OldIrql_7);
    goto L95;

  anon385_Then:
    assume {:partition} 0 > Status_2;
    goto L716;

  anon384_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon383_Then:
    goto L705;

  anon382_Then:
    assume {:partition} 0 > Status_2;
    goto L705;

  anon435_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_17: int, actual_PIrp_13: int) returns (Tmp_643: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_17: int, actual_PIrp_13: int) returns (Tmp_643: int)
{
  var {:scalar} Tmp_644: int;
  var {:scalar} basic: int;
  var {:pointer} Tmp_645: int;
  var {:pointer} pBasic: int;
  var {:pointer} Tmp_646: int;
  var {:pointer} pDevExt_13: int;
  var {:scalar} prologueStatus_1: int;
  var {:scalar} S_9: int;
  var {:scalar} cap_1: int;
  var {:pointer} Tmp_647: int;
  var {:pointer} Tmp_648: int;
  var {:scalar} OldIrql_8: int;
  var {:pointer} Tmp_650: int;
  var {:pointer} pIrpStack_8: int;
  var {:scalar} sdv_585: int;
  var {:scalar} Tmp_652: int;
  var {:scalar} status_22: int;
  var {:pointer} Tmp_656: int;
  var {:pointer} PDevObj_17: int;
  var {:pointer} PIrp_13: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;

  anon0:
    call {:si_unique_call 1566} basic := __HAVOC_malloc(44);
    call {:si_unique_call 1567} S_9 := __HAVOC_malloc(8);
    PDevObj_17 := actual_PDevObj_17;
    PIrp_13 := actual_PIrp_13;
    call {:si_unique_call 1568} Tmp_645 := __HAVOC_malloc(72);
    call {:si_unique_call 1569} Tmp_647 := __HAVOC_malloc(28);
    call {:si_unique_call 1570} Tmp_648 := __HAVOC_malloc(96);
    call {:si_unique_call 1571} Tmp_650 := __HAVOC_malloc(28);
    call {:si_unique_call 1572} Tmp_656 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_17 != 0;
    assume PDevObj_17 > 0;
    havoc pDevExt_13;
    call {:si_unique_call 1573} prologueStatus_1 := SerialIRPPrologue(PIrp_13, pDevExt_13);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} prologueStatus_1 != 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} prologueStatus_1 != 259;
    Tmp_656 := strConst__li2bpl1;
    call {:si_unique_call 1574} vslice_dummy_var_403 := SerialDbgPrintEx(9, Tmp_656);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume PIrp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1575} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_13);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L152;

  L152:
    call {:si_unique_call 1576} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1577} SerialIRPEpilogue(pDevExt_13);
    goto L19;

  L19:
    Tmp_643 := prologueStatus_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume !(PIrp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L152;

  anon44_Then:
    assume {:partition} prologueStatus_1 == 259;
    goto L19;

  anon43_Then:
    assume {:partition} prologueStatus_1 == 0;
    Tmp_648 := strConst__li2bpl33;
    call {:si_unique_call 1578} vslice_dummy_var_404 := SerialDbgPrintEx(9, Tmp_648);
    call {:si_unique_call 1579} sdv_585 := SerialCompleteIfError(PDevObj_17, PIrp_13);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_585 != 0;
    Tmp_643 := -1073741536;
    goto L1;

  anon46_Then:
    assume {:partition} sdv_585 == 0;
    call {:si_unique_call 1580} pIrpStack_8 := sdv_IoGetCurrentIrpStackLocation(PIrp_13);
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    status_22 := 0;
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto L48;

  L48:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    status_22 := -1073741789;
    goto L56;

  L56:
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_13))] := status_22;
    Tmp_645 := strConst__li2bpl1;
    call {:si_unique_call 1581} vslice_dummy_var_405 := SerialDbgPrintEx(9, Tmp_645);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume PIrp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1582} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, PIrp_13);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    goto L155;

  L155:
    call {:si_unique_call 1583} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1584} SerialIRPEpilogue(pDevExt_13);
    Tmp_643 := status_22;
    goto L1;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume !(PIrp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L155;

  anon49_Then:
    call {:si_unique_call 1585} sdv_RtlZeroMemory(0, 44);
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    havoc pBasic;
    call {:si_unique_call 1586} sdv_RtlCopyMemory(0, 0, 20);
    call {:si_unique_call 1587} sdv_RtlCopyMemory(0, 0, 16);
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    pBasic := basic;
    goto L80;

  L80:
    call {:si_unique_call 1588} Tmp_646 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_646 != 0;
    assume Tmp_646 > 0;
    Mem_T.INT4[Tmp_646] := OldIrql_8;
    call {:si_unique_call 1589} sdv_KeAcquireSpinLock(0, Tmp_646);
    assume {:nonnull} Tmp_646 != 0;
    assume Tmp_646 > 0;
    OldIrql_8 := Mem_T.INT4[Tmp_646];
    call {:si_unique_call 1590} sdv_RtlCopyMemory(0, 0, 20);
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    call {:si_unique_call 1591} vslice_dummy_var_406 := KeSynchronizeExecution(0, li2bplFunctionConstant891, 0);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1592} vslice_dummy_var_407 := corral_nondet();
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L108;

  L108:
    call {:si_unique_call 1593} sdv_KeReleaseSpinLock(0, OldIrql_8);
    goto L56;

  anon51_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L108;

  anon47_Then:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    status_22 := -1073741789;
    goto L56;

  anon48_Then:
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    havoc pBasic;
    goto L80;

  anon54_Then:
    status_22 := -1073741811;
    goto L56;

  anon55_Then:
    goto L48;

  anon56_Then:
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    call {:si_unique_call 1594} vslice_dummy_var_402 := IoCancelIrp(0);
    goto L121;

  L121:
    status_22 := 0;
    goto L56;

  anon63_Then:
    goto L121;

  anon59_Then:
    cap_1 := 2;
    goto L126;

  L126:
    call {:si_unique_call 1595} Tmp_644, cap_1, Tmp_647, Tmp_650, Tmp_652 := SerialInternalIoControl_loop_L126(Tmp_644, pDevExt_13, cap_1, Tmp_647, Tmp_650, Tmp_652);
    goto L126_last;

  L126_last:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} 7 > cap_1;
    Tmp_644 := cap_1;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_650;
    assume {:nonnull} Tmp_650 != 0;
    assume Tmp_650 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Mem_T.INT4[Tmp_650 + Tmp_644 * 4] >= 1;
    Tmp_652 := cap_1;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_647;
    assume {:nonnull} Tmp_647 != 0;
    assume Tmp_647 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto L129;

  L129:
    cap_1 := cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    assume false;
    return;

  anon61_Then:
    goto L127;

  L127:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} 7 > cap_1;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    status_22 := 0;
    goto L56;

  anon53_Then:
    assume {:partition} cap_1 >= 7;
    status_22 := -1073741637;
    goto L56;

  anon60_Then:
    assume {:partition} 1 > Mem_T.INT4[Tmp_650 + Tmp_644 * 4];
    goto L129;

  anon52_Then:
    assume {:partition} cap_1 >= 7;
    goto L127;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_20: int, actual_Properties: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_20: int, actual_Properties: int)
{
  var {:pointer} Extension_20: int;
  var {:pointer} Properties: int;
  var vslice_dummy_var_408: int;

  anon0:
    call {:si_unique_call 1596} vslice_dummy_var_408 := __HAVOC_malloc(4);
    Extension_20 := actual_Extension_20;
    Properties := actual_Properties;
    call {:si_unique_call 1597} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    return;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_409: int;

  anon0:
    call {:si_unique_call 1598} vslice_dummy_var_409 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_661: int);
  modifies alloc, io_complete_request_called, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_661: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} pDevExt_14: int;
  var {:scalar} status_23: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_16: int;
  var vslice_dummy_var_1359: int;
  var vslice_dummy_var_1360: int;

  anon0:
    call {:si_unique_call 1599} disposition := __HAVOC_malloc(4);
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_16 := actual_Irp_16;
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc pDevExt_14;
    call {:si_unique_call 1600} sdv_do_paged_code_check();
    call {:si_unique_call 1601} status_23 := WmiSystemControl(0, 0, Irp_16, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.INT4[disposition] != 1;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.INT4[disposition] != 2;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[disposition] == 3;
    goto L22;

  L22:
    call {:si_unique_call 1602} sdv_IoSkipCurrentIrpStackLocation(Irp_16);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_16 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1603} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L48;

  L48:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_1359;
    call {:si_unique_call 1604} status_23 := sdv_IoCallDriver(vslice_dummy_var_1359, Irp_16);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  L30:
    Tmp_661 := status_23;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume !(Irp_16 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L48;

  anon25_Then:
    assume {:partition} Mem_T.INT4[disposition] != 3;
    call {:si_unique_call 1605} sdv_IoSkipCurrentIrpStackLocation(Irp_16);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume Irp_16 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1606} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl0);
    goto L51;

  L51:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_1360;
    call {:si_unique_call 1607} status_23 := sdv_IoCallDriver(vslice_dummy_var_1360, Irp_16);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume !(Irp_16 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L51;

  anon26_Then:
    assume {:partition} Mem_T.INT4[disposition] == 2;
    goto L22;

  anon27_Then:
    assume {:partition} Mem_T.INT4[disposition] == 1;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume Irp_16 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1608} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_16);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto L45;

  L45:
    call {:si_unique_call 1609} sdv_IoCompleteRequest(0, 0);
    goto L30;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    assume !(Irp_16 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L45;

  anon21_Then:
    assume {:partition} Mem_T.INT4[disposition] == 0;
    goto L30;
}



procedure {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_663: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_663 == -1073741811 || Tmp_663 == -1073741823 || Tmp_663 == 0 || Tmp_663 == 5 || Tmp_663 == -1073741789 || Tmp_663 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_663: int)
{
  var {:pointer} fullInfo: int;
  var {:scalar} length: int;
  var {:pointer} Tmp_665: int;
  var {:pointer} Tmp_666: int;
  var {:pointer} Tmp_667: int;
  var {:pointer} sdv_592: int;
  var {:scalar} ntStatus: int;
  var {:scalar} keyName: int;
  var {:pointer} KeyNameString: int;
  var {:scalar} KeyNameStringLength: int;
  var {:scalar} DataLength: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_1361: int;

  anon0:
    call {:si_unique_call 1610} keyName := __HAVOC_malloc(12);
    KeyNameString := actual_KeyNameString;
    KeyNameStringLength := actual_KeyNameStringLength;
    DataLength := actual_DataLength;
    call {:si_unique_call 1611} Tmp_666 := __HAVOC_malloc(124);
    call {:si_unique_call 1612} Tmp_667 := __HAVOC_malloc(132);
    ntStatus := -1073741670;
    call {:si_unique_call 1613} sdv_do_paged_code_check();
    Tmp_667 := strConst__li2bpl181;
    call {:si_unique_call 1614} vslice_dummy_var_410 := SerialDbgPrintEx(2, Tmp_667);
    call {:si_unique_call 1615} RtlInitUnicodeString(keyName, KeyNameString);
    length := 24 + KeyNameStringLength + DataLength;
    call {:si_unique_call 1616} sdv_592 := ExAllocatePoolWithTag(1, length, -666022077);
    fullInfo := sdv_592;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 1617} Tmp_665 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_665 != 0;
    assume Tmp_665 > 0;
    Mem_T.INT4[Tmp_665] := length;
    call {:si_unique_call 1618} ntStatus := ZwQueryValueKey(0, 0, 1, 0, length, Tmp_665);
    assume {:nonnull} Tmp_665 != 0;
    assume Tmp_665 > 0;
    length := Mem_T.INT4[Tmp_665];
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ntStatus >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_1361;
    call {:si_unique_call 1619} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_1361);
    goto L31;

  L31:
    call {:si_unique_call 1620} sdv_ExFreePool(0);
    goto L23;

  L23:
    Tmp_666 := strConst__li2bpl182;
    call {:si_unique_call 1621} vslice_dummy_var_411 := SerialDbgPrintEx(2, Tmp_666);
    Tmp_663 := ntStatus;
    return;

  anon8_Then:
    goto L31;

  anon7_Then:
    assume {:partition} 0 > ntStatus;
    goto L31;

  anon9_Then:
    assume {:partition} fullInfo == 0;
    goto L23;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_412: int;

  anon0:
    call {:si_unique_call 1622} vslice_dummy_var_412 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_413: int;

  anon0:
    call {:si_unique_call 1623} vslice_dummy_var_413 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_603: int, actual_sdv_604: int) returns (Tmp_678: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_603: int, actual_sdv_604: int) returns (Tmp_678: int)
{
  var {:scalar} sdv_605: int;

  anon0:
    call {:si_unique_call 1624} Tmp_678 := __HAVOC_malloc(4);
    call {:si_unique_call 1625} sdv_605 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_678 != 0;
    assume Tmp_678 > 0;
    assume {:nonnull} sdv_605 != 0;
    assume sdv_605 > 0;
    Mem_T.INT4[Tmp_678] := Mem_T.INT4[sdv_605];
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_414: int;

  anon0:
    call {:si_unique_call 1626} vslice_dummy_var_414 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_688: int);
  free ensures {:va_keep} Tmp_688 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_688: int)
{

  anon0:
    Tmp_688 := 0;
    return;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead: int)
{
  var {:pointer} ListHead: int;
  var vslice_dummy_var_415: int;

  anon0:
    call {:si_unique_call 1627} vslice_dummy_var_415 := __HAVOC_malloc(4);
    ListHead := actual_ListHead;
    assume {:nonnull} ListHead != 0;
    assume ListHead > 0;
    assume {:nonnull} ListHead != 0;
    assume ListHead > 0;
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_1: int) returns (Tmp_692: int);
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_1: int) returns (Tmp_692: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} Entry: int;
  var {:pointer} ListHead_1: int;

  anon0:
    ListHead_1 := actual_ListHead_1;
    call {:si_unique_call 1628} SLIC_RemoveHeadList_entry(strConst__li2bpl183);
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    havoc Entry;
    assume {:nonnull} Entry != 0;
    assume Entry > 0;
    havoc NextEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 1629} FatalListEntryError(ListHead_1, Entry, NextEntry);
    goto L12;

  L12:
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    Tmp_692 := Entry;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int)
{
  var vslice_dummy_var_416: int;

  anon0:
    call {:si_unique_call 1630} vslice_dummy_var_416 := __HAVOC_malloc(4);
    call {:si_unique_call 1631} RtlFailFast(3);
    return;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_417: int;

  anon0:
    call {:si_unique_call 1632} vslice_dummy_var_417 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_18: int) returns (Tmp_698: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_698 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_18: int) returns (Tmp_698: int)
{
  var {:pointer} pDevExt_15: int;
  var {:pointer} Tmp_701: int;
  var {:pointer} Tmp_704: int;
  var {:pointer} PDevObj_18: int;
  var vslice_dummy_var_418: int;
  var vslice_dummy_var_419: int;

  anon0:
    PDevObj_18 := actual_PDevObj_18;
    call {:si_unique_call 1633} Tmp_701 := __HAVOC_malloc(96);
    call {:si_unique_call 1634} Tmp_704 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_18 != 0;
    assume PDevObj_18 > 0;
    havoc pDevExt_15;
    call {:si_unique_call 1635} sdv_do_paged_code_check();
    Tmp_704 := strConst__li2bpl184;
    call {:si_unique_call 1636} vslice_dummy_var_418 := SerialDbgPrintEx(2, Tmp_704);
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_15)], 8) != 0;
    goto L15;

  L15:
    call {:si_unique_call 1637} IoDetachDevice(0);
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    call {:si_unique_call 1638} sdv_ExFreePool(0);
    goto L19;

  L19:
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    call {:si_unique_call 1639} sdv_ExFreePool(0);
    goto L23;

  L23:
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    call {:si_unique_call 1640} sdv_ExFreePool(0);
    goto L27;

  L27:
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    call {:si_unique_call 1641} sdv_ExFreePool(0);
    goto L31;

  L31:
    call {:si_unique_call 1642} IoDeleteDevice(0);
    Tmp_701 := strConst__li2bpl185;
    call {:si_unique_call 1643} vslice_dummy_var_419 := SerialDbgPrintEx(2, Tmp_701);
    Tmp_698 := 0;
    return;

  anon15_Then:
    goto L31;

  anon14_Then:
    goto L27;

  anon13_Then:
    goto L23;

  anon12_Then:
    goto L19;

  anon11_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_15)], 8) == 0;
    call {:si_unique_call 1644} SerialDisableInterfacesResources(PDevObj_18, 1);
    goto L15;
}



procedure {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_19: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_19: int)
{
  var {:pointer} Tmp_706: int;
  var {:pointer} Tmp_707: int;
  var {:pointer} pDevExt_16: int;
  var {:pointer} Tmp_708: int;
  var {:pointer} Tmp_710: int;
  var {:pointer} Tmp_711: int;
  var {:scalar} cancelRoutine_2: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} Tmp_712: int;
  var {:pointer} Tmp_713: int;
  var {:pointer} PDevObj_19: int;
  var vslice_dummy_var_420: int;
  var vslice_dummy_var_421: int;
  var vslice_dummy_var_422: int;
  var vslice_dummy_var_423: int;

  anon0:
    call {:si_unique_call 1645} vslice_dummy_var_420 := __HAVOC_malloc(4);
    PDevObj_19 := actual_PDevObj_19;
    call {:si_unique_call 1646} Tmp_710 := __HAVOC_malloc(112);
    call {:si_unique_call 1647} Tmp_711 := __HAVOC_malloc(96);
    assume {:nonnull} PDevObj_19 != 0;
    assume PDevObj_19 > 0;
    havoc pDevExt_16;
    Tmp_710 := strConst__li2bpl187;
    call {:si_unique_call 1648} vslice_dummy_var_422 := SerialDbgPrintEx(2, Tmp_710);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1649} SerialKillAllReadsOrWrites(PDevObj_19, WriteQueue__SERIAL_DEVICE_EXTENSION(pDevExt_16), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1650} SerialKillAllReadsOrWrites(PDevObj_19, ReadQueue__SERIAL_DEVICE_EXTENSION(pDevExt_16), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16));
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1651} SerialKillAllReadsOrWrites(PDevObj_19, PurgeQueue__SERIAL_DEVICE_EXTENSION(pDevExt_16), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16));
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1652} SerialKillAllReadsOrWrites(PDevObj_19, MaskQueue__SERIAL_DEVICE_EXTENSION(pDevExt_16), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16));
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1653} Tmp_708 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    Mem_T.INT4[Tmp_708] := oldIrql_8;
    call {:si_unique_call 1654} IoAcquireCancelSpinLock(Tmp_708);
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    oldIrql_8 := Mem_T.INT4[Tmp_708];
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)] != 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Tmp_712 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)];
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    havoc cancelRoutine_2;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Tmp_707 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)];
    assume {:nonnull} Tmp_707 != 0;
    assume Tmp_707 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} cancelRoutine_2 != 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Tmp_713 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)];
    assume {:nonnull} Tmp_713 != 0;
    assume Tmp_713 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Tmp_706 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)];
    assume {:nonnull} Tmp_706 != 0;
    assume Tmp_706 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant571;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1655} SerialCancelCurrentWrite(PDevObj_19, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)]);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    call {:si_unique_call 1656} vslice_dummy_var_421 := IoCancelIrp(0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L41;

  L41:
    call {:si_unique_call 1657} SerialKillAllStalled(PDevObj_19);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    Tmp_711 := strConst__li2bpl186;
    call {:si_unique_call 1658} vslice_dummy_var_423 := SerialDbgPrintEx(2, Tmp_711);
    goto LM2;

  LM2:
    return;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L41;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant575;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1659} SerialCancelCurrentXoff(PDevObj_19, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)]);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant1086;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1660} SerialCancelImmediate(PDevObj_19, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)]);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant665;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1661} SerialCancelQueued(PDevObj_19, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)]);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant619;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1662} SerialCancelWait(PDevObj_19, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)]);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant667;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1663} SerialFilterCancelQueued(PDevObj_19, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)]);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    assume {:partition} cancelRoutine_2 == 0;
    call {:si_unique_call 1664} IoReleaseCancelSpinLock(oldIrql_8);
    goto L40;

  anon39_Then:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_16)] == 0;
    call {:si_unique_call 1665} IoReleaseCancelSpinLock(oldIrql_8);
    goto L40;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType: int, actual_BusNumber: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_714: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType: int, actual_BusNumber: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_714: int)
{
  var {:scalar} IoAddress: int;
  var {:scalar} Tmp_715: int;
  var {:scalar} Tmp_716: int;
  var {:pointer} address: int;
  var {:pointer} structPtr888IoAddress: int;
  var {:scalar} NumberOfBytes: int;
  var {:scalar} AddressSpace: int;
  var {:pointer} MappedAddress: int;

  anon0:
    call {:si_unique_call 1666} IoAddress := __HAVOC_malloc(20);
    call {:si_unique_call 1667} Tmp_715 := __HAVOC_malloc(20);
    structPtr888IoAddress := actual_structPtr888IoAddress;
    NumberOfBytes := actual_NumberOfBytes;
    AddressSpace := actual_AddressSpace;
    MappedAddress := actual_MappedAddress;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    call {:si_unique_call 1668} sdv_do_paged_code_check();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} AddressSpace != 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    havoc address;
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := 0;
    goto L12;

  L12:
    Tmp_714 := address;
    return;

  anon5_Then:
    assume {:partition} AddressSpace == 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    call {:si_unique_call 1669} address := MmMapIoSpace(Tmp_715, NumberOfBytes, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} address != 0;
    Tmp_716 := 1;
    goto L20;

  L20:
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := Tmp_716;
    goto L12;

  anon6_Then:
    assume {:partition} address == 0;
    Tmp_716 := 0;
    goto L20;
}



procedure {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_20: int, actual_PConfigData: int, actual_PDevObj_20: int) returns (Tmp_718: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_718 == -1073741670 || Tmp_718 == 0 || Tmp_718 == -1073741709 || Tmp_718 == -1073741810;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_20: int, actual_PConfigData: int, actual_PDevObj_20: int) returns (Tmp_718: int)
{
  var {:pointer} Tmp_719: int;
  var {:pointer} Tmp_720: int;
  var {:pointer} Tmp_722: int;
  var {:pointer} Tmp_723: int;
  var {:pointer} pNewExt: int;
  var {:scalar} status_24: int;
  var {:pointer} pDispatch: int;
  var {:pointer} Tmp_724: int;
  var {:pointer} Tmp_725: int;
  var {:pointer} PDevExt_20: int;
  var {:pointer} PConfigData: int;
  var {:pointer} PDevObj_20: int;
  var boogieTmp: int;
  var vslice_dummy_var_424: int;
  var vslice_dummy_var_425: int;
  var vslice_dummy_var_426: int;
  var vslice_dummy_var_427: int;
  var vslice_dummy_var_428: int;
  var vslice_dummy_var_429: int;

  anon0:
    PDevExt_20 := actual_PDevExt_20;
    PConfigData := actual_PConfigData;
    PDevObj_20 := actual_PDevObj_20;
    call {:si_unique_call 1670} Tmp_720 := __HAVOC_malloc(116);
    call {:si_unique_call 1671} Tmp_722 := __HAVOC_malloc(136);
    call {:si_unique_call 1672} Tmp_723 := __HAVOC_malloc(116);
    call {:si_unique_call 1673} Tmp_724 := __HAVOC_malloc(116);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc pNewExt;
    call {:si_unique_call 1674} sdv_do_paged_code_check();
    Tmp_722 := strConst__li2bpl188;
    call {:si_unique_call 1675} vslice_dummy_var_425 := SerialDbgPrintEx(2, Tmp_722);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    call {:si_unique_call 1676} status_24 := SerialInitOneController(PDevObj_20, PConfigData);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_24 >= 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 1677} boogieTmp := ExAllocatePoolWithTag(512, 76, -666022077);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc pDispatch;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} pDispatch != 0;
    call {:si_unique_call 1678} sdv_RtlZeroMemory(0, 76);
    call {:si_unique_call 1679} vslice_dummy_var_424 := KeSynchronizeExecution(0, li2bplFunctionConstant1036, 0);
    goto L26;

  L26:
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc Tmp_719;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc Tmp_725;
    assume {:nonnull} Tmp_725 != 0;
    assume Tmp_725 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    call {:si_unique_call 1680} vslice_dummy_var_426 := KeSynchronizeExecution(0, li2bplFunctionConstant1037, 0);
    Tmp_723 := strConst__li2bpl190;
    call {:si_unique_call 1681} vslice_dummy_var_427 := SerialDbgPrintEx(2, Tmp_723);
    Tmp_718 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} pDispatch == 0;
    status_24 := -1073741670;
    Tmp_720 := strConst__li2bpl191;
    call {:si_unique_call 1682} vslice_dummy_var_428 := SerialDbgPrintEx(2, Tmp_720);
    Tmp_718 := status_24;
    goto L1;

  anon8_Then:
    goto L26;

  anon7_Then:
    assume {:partition} 0 > status_24;
    Tmp_724 := strConst__li2bpl189;
    call {:si_unique_call 1683} vslice_dummy_var_429 := SerialDbgPrintEx(2, Tmp_724);
    Tmp_718 := status_24;
    goto L1;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_430: int;

  anon0:
    call {:si_unique_call 1684} vslice_dummy_var_430 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_21: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_21: int)
{
  var {:scalar} i_1: int;
  var {:pointer} Tmp_728: int;
  var {:scalar} sdv_629: int;
  var {:scalar} sdv_630: int;
  var {:scalar} sdv_631: int;
  var {:scalar} sdv_633: int;
  var {:scalar} sdv_634: int;
  var {:scalar} sdv_635: int;
  var {:scalar} sdv_636: int;
  var {:pointer} Tmp_729: int;
  var {:scalar} sdv_638: int;
  var {:pointer} Tmp_730: int;
  var {:scalar} sdv_642: int;
  var {:scalar} Tmp_731: int;
  var {:scalar} sdv_649: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} Tmp_732: int;
  var {:pointer} Tmp_733: int;
  var {:scalar} sdv_654: int;
  var {:scalar} sdv_656: int;
  var {:pointer} Tmp_734: int;
  var {:scalar} sdv_659: int;
  var {:pointer} Tmp_735: int;
  var {:pointer} PDevExt_21: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_454: int;
  var vslice_dummy_var_455: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_1362: int;
  var vslice_dummy_var_1363: int;
  var vslice_dummy_var_1364: int;
  var vslice_dummy_var_1365: int;
  var vslice_dummy_var_1366: int;
  var vslice_dummy_var_1367: int;
  var vslice_dummy_var_1368: int;
  var vslice_dummy_var_1369: int;
  var vslice_dummy_var_1370: int;
  var vslice_dummy_var_1371: int;
  var vslice_dummy_var_1372: int;
  var vslice_dummy_var_1373: int;
  var vslice_dummy_var_1374: int;
  var vslice_dummy_var_1375: int;
  var vslice_dummy_var_1376: int;

  anon0:
    call {:si_unique_call 1685} vslice_dummy_var_431 := __HAVOC_malloc(4);
    PDevExt_21 := actual_PDevExt_21;
    call {:si_unique_call 1686} Tmp_728 := __HAVOC_malloc(152);
    call {:si_unique_call 1687} Tmp_729 := __HAVOC_malloc(64);
    call {:si_unique_call 1688} Tmp_732 := __HAVOC_malloc(100);
    call {:si_unique_call 1689} Tmp_733 := __HAVOC_malloc(132);
    call {:si_unique_call 1690} Tmp_734 := __HAVOC_malloc(116);
    Tmp_734 := strConst__li2bpl192;
    call {:si_unique_call 1691} vslice_dummy_var_440 := SerialDbgPrintEx(2, Tmp_734);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 1692} vslice_dummy_var_432 := KeSynchronizeExecution(0, li2bplFunctionConstant1030, 0);
    call {:si_unique_call 1693} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    Mem_T.INT4[Tmp_730] := oldIrql_9;
    call {:si_unique_call 1694} sdv_KeAcquireSpinLock(0, Tmp_730);
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_730];
    call {:si_unique_call 1695} vslice_dummy_var_433 := sdv_RemoveEntryList(0);
    call {:si_unique_call 1696} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 1697} InitializeListHead(AllDevObjs__SERIAL_DEVICE_EXTENSION(PDevExt_21));
    goto L8;

  L8:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    Tmp_728 := strConst__li2bpl193;
    call {:si_unique_call 1698} vslice_dummy_var_441 := SerialDbgPrintEx(12, Tmp_728);
    call {:si_unique_call 1699} IoDisconnectInterrupt(0);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 1700} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto L24;

  L24:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    i_1 := 0;
    goto L42;

  L42:
    call {:si_unique_call 1701} i_1, Tmp_729, Tmp_731, Tmp_735 := SerialReleaseResources_loop_L42(i_1, Tmp_729, Tmp_731, Tmp_735, PDevExt_21);
    goto L42_last;

  L42_last:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} 16 > i_1;
    Tmp_731 := i_1;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    havoc Tmp_735;
    assume {:nonnull} Tmp_735 != 0;
    assume Tmp_735 > 0;
    havoc Tmp_729;
    assume {:nonnull} Tmp_729 != 0;
    assume Tmp_729 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    i_1 := i_1 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    assume false;
    return;

  anon66_Then:
    goto L43;

  L43:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} i_1 == 16;
    Tmp_733 := strConst__li2bpl194;
    call {:si_unique_call 1702} vslice_dummy_var_442 := SerialDbgPrintEx(12, Tmp_733);
    call {:si_unique_call 1703} sdv_ExFreePool(0);
    goto L37;

  L37:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 1704} vslice_dummy_var_434 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_21), PDevExt_21);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 1705} vslice_dummy_var_435 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_21), PDevExt_21);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 1706} vslice_dummy_var_436 := SerialCancelTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_21), PDevExt_21);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 1707} vslice_dummy_var_437 := SerialCancelTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_21), PDevExt_21);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 1708} vslice_dummy_var_438 := SerialCancelTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(PDevExt_21), PDevExt_21);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 1709} vslice_dummy_var_439 := SerialCancelTimer(LowerRTSTimer__SERIAL_DEVICE_EXTENSION(PDevExt_21), PDevExt_21);
    call {:si_unique_call 1710} sdv_630 := KeRemoveQueueDpc(0);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_630 != 0;
    call {:si_unique_call 1711} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1362;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1362;
    call {:si_unique_call 1712} vslice_dummy_var_443 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L72;

  L72:
    call {:si_unique_call 1713} sdv_635 := KeRemoveQueueDpc(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_635 != 0;
    call {:si_unique_call 1714} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1363;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1363;
    call {:si_unique_call 1715} vslice_dummy_var_444 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L79;

  L79:
    call {:si_unique_call 1716} sdv_656 := KeRemoveQueueDpc(0);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_656 != 0;
    call {:si_unique_call 1717} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1364;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1364;
    call {:si_unique_call 1718} vslice_dummy_var_445 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L86;

  L86:
    call {:si_unique_call 1719} sdv_631 := KeRemoveQueueDpc(0);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_631 != 0;
    call {:si_unique_call 1720} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1365;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1365;
    call {:si_unique_call 1721} vslice_dummy_var_446 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L93;

  L93:
    call {:si_unique_call 1722} sdv_649 := KeRemoveQueueDpc(0);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_649 != 0;
    call {:si_unique_call 1723} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1366;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1366;
    call {:si_unique_call 1724} vslice_dummy_var_447 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L100;

  L100:
    call {:si_unique_call 1725} sdv_636 := KeRemoveQueueDpc(0);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_636 != 0;
    call {:si_unique_call 1726} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1367;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1367;
    call {:si_unique_call 1727} vslice_dummy_var_448 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L107;

  L107:
    call {:si_unique_call 1728} sdv_638 := KeRemoveQueueDpc(0);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_638 != 0;
    call {:si_unique_call 1729} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1368;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1368;
    call {:si_unique_call 1730} vslice_dummy_var_449 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L114;

  L114:
    call {:si_unique_call 1731} sdv_633 := KeRemoveQueueDpc(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_633 != 0;
    call {:si_unique_call 1732} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1369;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1369;
    call {:si_unique_call 1733} vslice_dummy_var_450 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L121;

  L121:
    call {:si_unique_call 1734} sdv_659 := KeRemoveQueueDpc(0);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_659 != 0;
    call {:si_unique_call 1735} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1370;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1370;
    call {:si_unique_call 1736} vslice_dummy_var_451 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L128;

  L128:
    call {:si_unique_call 1737} sdv_642 := KeRemoveQueueDpc(0);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_642 != 0;
    call {:si_unique_call 1738} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1371;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1371;
    call {:si_unique_call 1739} vslice_dummy_var_452 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L135;

  L135:
    call {:si_unique_call 1740} sdv_629 := KeRemoveQueueDpc(0);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_629 != 0;
    call {:si_unique_call 1741} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1372;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1372;
    call {:si_unique_call 1742} vslice_dummy_var_453 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L142;

  L142:
    call {:si_unique_call 1743} sdv_654 := KeRemoveQueueDpc(0);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_654 != 0;
    call {:si_unique_call 1744} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1373;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1373;
    call {:si_unique_call 1745} vslice_dummy_var_454 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L149;

  L149:
    call {:si_unique_call 1746} sdv_634 := KeRemoveQueueDpc(0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_634 != 0;
    call {:si_unique_call 1747} Tmp_730 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    havoc vslice_dummy_var_1374;
    Mem_T.INT4[Tmp_730] := vslice_dummy_var_1374;
    call {:si_unique_call 1748} vslice_dummy_var_455 := sdv_InterlockedDecrement(Tmp_730);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L156;

  L156:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_21)] != 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    havoc vslice_dummy_var_1375;
    call {:si_unique_call 1749} MmUnmapIoSpace(0, vslice_dummy_var_1375);
    goto L160;

  L160:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_21)] != 0;
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    havoc vslice_dummy_var_1376;
    call {:si_unique_call 1750} MmUnmapIoSpace(0, vslice_dummy_var_1376);
    goto L164;

  L164:
    Tmp_732 := strConst__li2bpl195;
    call {:si_unique_call 1751} vslice_dummy_var_456 := SerialDbgPrintEx(2, Tmp_732);
    return;

  anon64_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_21)] == 0;
    goto L164;

  anon63_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_21)] == 0;
    goto L160;

  anon62_Then:
    assume {:partition} sdv_634 == 0;
    goto L156;

  anon61_Then:
    assume {:partition} sdv_654 == 0;
    goto L149;

  anon60_Then:
    assume {:partition} sdv_629 == 0;
    goto L142;

  anon59_Then:
    assume {:partition} sdv_642 == 0;
    goto L135;

  anon58_Then:
    assume {:partition} sdv_659 == 0;
    goto L128;

  anon57_Then:
    assume {:partition} sdv_633 == 0;
    goto L121;

  anon56_Then:
    assume {:partition} sdv_638 == 0;
    goto L114;

  anon55_Then:
    assume {:partition} sdv_636 == 0;
    goto L107;

  anon54_Then:
    assume {:partition} sdv_649 == 0;
    goto L100;

  anon53_Then:
    assume {:partition} sdv_631 == 0;
    goto L93;

  anon52_Then:
    assume {:partition} sdv_656 == 0;
    goto L86;

  anon51_Then:
    assume {:partition} sdv_635 == 0;
    goto L79;

  anon50_Then:
    assume {:partition} sdv_630 == 0;
    goto L72;

  anon49_Then:
    assume {:partition} i_1 != 16;
    goto L37;

  anon48_Then:
    assume {:partition} i_1 >= 16;
    goto L43;

  anon47_Then:
    goto L37;

  anon65_Then:
    goto L24;

  anon46_Then:
    goto L24;

  anon45_Then:
    goto L8;
}



procedure {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_21: int, actual_PConfig_1: int) returns (Tmp_737: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_737 == -1073741810 || Tmp_737 == -1073741670 || Tmp_737 == 0 || Tmp_737 == -1073741709;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_21: int, actual_PConfig_1: int) returns (Tmp_737: int)
{
  var {:scalar} sdv_664: int;
  var {:pointer} sdv_665: int;
  var {:pointer} Tmp_738: int;
  var {:pointer} Tmp_739: int;
  var {:pointer} Tmp_740: int;
  var {:pointer} Tmp_741: int;
  var {:scalar} sdv_669: int;
  var {:scalar} sdv_670: int;
  var {:pointer} sdv_671: int;
  var {:scalar} sdv_672: int;
  var {:scalar} Tmp_742: int;
  var {:scalar} Tmp_743: int;
  var {:scalar} sdv_675: int;
  var {:scalar} Tmp_744: int;
  var {:pointer} Tmp_745: int;
  var {:pointer} sdv_676: int;
  var {:pointer} pCurDevObj: int;
  var {:pointer} sdv_677: int;
  var {:scalar} Tmp_746: int;
  var {:scalar} Tmp_747: int;
  var {:pointer} pDevExt_17: int;
  var {:scalar} Tmp_748: int;
  var {:scalar} Tmp_749: int;
  var {:scalar} Tmp_750: int;
  var {:scalar} sdv_679: int;
  var {:pointer} Tmp_751: int;
  var {:scalar} sdv_682: int;
  var {:scalar} sdv_684: int;
  var {:scalar} Tmp_752: int;
  var {:pointer} sdv_687: int;
  var {:pointer} Tmp_753: int;
  var {:scalar} Tmp_754: int;
  var {:pointer} pExtension: int;
  var {:scalar} oldIrql_10: int;
  var {:scalar} sdv_689: int;
  var {:scalar} Tmp_755: int;
  var {:pointer} Tmp_756: int;
  var {:pointer} Tmp_757: int;
  var {:pointer} Tmp_758: int;
  var {:scalar} Tmp_759: int;
  var {:scalar} sdv_690: int;
  var {:pointer} sdv_692: int;
  var {:scalar} sdv_693: int;
  var {:pointer} Tmp_760: int;
  var {:pointer} Tmp_761: int;
  var {:pointer} Tmp_762: int;
  var {:scalar} sdv_696: int;
  var {:scalar} Tmp_763: int;
  var {:scalar} Tmp_764: int;
  var {:scalar} sdv_698: int;
  var {:pointer} Tmp_765: int;
  var {:scalar} status_25: int;
  var {:scalar} sdv_700: int;
  var {:scalar} serialPhysicalMax: int;
  var {:pointer} Tmp_766: int;
  var {:scalar} Tmp_767: int;
  var {:scalar} Tmp_768: int;
  var {:pointer} Tmp_769: int;
  var {:pointer} Tmp_770: int;
  var {:scalar} Tmp_771: int;
  var {:scalar} sdv_702: int;
  var {:scalar} sdv_703: int;
  var {:scalar} Tmp_772: int;
  var {:pointer} PDevObj_21: int;
  var {:pointer} PConfig_1: int;
  var vslice_dummy_var_457: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_462: int;
  var vslice_dummy_var_463: int;
  var vslice_dummy_var_464: int;
  var vslice_dummy_var_465: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_467: int;
  var vslice_dummy_var_468: int;
  var vslice_dummy_var_469: int;
  var vslice_dummy_var_470: int;
  var vslice_dummy_var_471: int;
  var vslice_dummy_var_472: int;
  var vslice_dummy_var_1377: int;
  var vslice_dummy_var_1378: int;
  var vslice_dummy_var_1379: int;
  var vslice_dummy_var_1380: int;
  var vslice_dummy_var_1381: int;
  var vslice_dummy_var_1382: int;
  var vslice_dummy_var_1383: int;
  var vslice_dummy_var_1384: int;
  var vslice_dummy_var_1385: int;
  var vslice_dummy_var_1386: int;
  var vslice_dummy_var_1387: int;
  var vslice_dummy_var_1388: int;
  var vslice_dummy_var_1389: int;
  var vslice_dummy_var_1390: int;
  var vslice_dummy_var_1391: int;
  var vslice_dummy_var_1392: int;
  var vslice_dummy_var_1393: int;
  var vslice_dummy_var_1394: int;
  var vslice_dummy_var_1395: int;
  var vslice_dummy_var_1396: int;
  var vslice_dummy_var_1397: int;
  var vslice_dummy_var_1398: int;
  var vslice_dummy_var_1399: int;
  var vslice_dummy_var_1400: int;
  var vslice_dummy_var_1401: int;
  var vslice_dummy_var_1402: int;
  var vslice_dummy_var_1403: int;
  var vslice_dummy_var_1404: int;
  var vslice_dummy_var_1405: int;
  var vslice_dummy_var_1406: int;
  var vslice_dummy_var_1407: int;
  var vslice_dummy_var_1408: int;
  var vslice_dummy_var_1409: int;
  var vslice_dummy_var_1410: int;
  var vslice_dummy_var_1411: int;
  var vslice_dummy_var_1412: int;
  var vslice_dummy_var_1413: int;
  var vslice_dummy_var_1414: int;
  var vslice_dummy_var_1415: int;
  var vslice_dummy_var_1416: int;
  var vslice_dummy_var_1417: int;
  var vslice_dummy_var_1418: int;
  var vslice_dummy_var_1419: int;
  var vslice_dummy_var_1420: int;
  var vslice_dummy_var_1421: int;
  var vslice_dummy_var_1422: int;
  var vslice_dummy_var_1423: int;
  var vslice_dummy_var_1424: int;
  var vslice_dummy_var_1425: int;
  var vslice_dummy_var_1426: int;
  var vslice_dummy_var_1427: int;
  var vslice_dummy_var_1428: int;
  var vslice_dummy_var_1429: int;
  var vslice_dummy_var_1430: int;
  var vslice_dummy_var_1431: int;
  var vslice_dummy_var_1432: int;
  var vslice_dummy_var_1433: int;
  var vslice_dummy_var_1434: int;
  var vslice_dummy_var_1435: int;
  var vslice_dummy_var_1436: int;
  var vslice_dummy_var_1437: int;
  var vslice_dummy_var_1438: int;
  var vslice_dummy_var_1439: int;
  var vslice_dummy_var_1440: int;
  var vslice_dummy_var_1441: int;
  var vslice_dummy_var_1442: int;
  var vslice_dummy_var_1443: int;
  var vslice_dummy_var_1444: int;

  anon0:
    call {:si_unique_call 1752} Tmp_746 := __HAVOC_malloc(20);
    call {:si_unique_call 1753} Tmp_748 := __HAVOC_malloc(20);
    call {:si_unique_call 1754} Tmp_752 := __HAVOC_malloc(20);
    call {:si_unique_call 1755} Tmp_759 := __HAVOC_malloc(20);
    call {:si_unique_call 1756} Tmp_763 := __HAVOC_malloc(20);
    call {:si_unique_call 1757} serialPhysicalMax := __HAVOC_malloc(20);
    call {:si_unique_call 1758} Tmp_768 := __HAVOC_malloc(20);
    call {:si_unique_call 1759} Tmp_772 := __HAVOC_malloc(20);
    PDevObj_21 := actual_PDevObj_21;
    PConfig_1 := actual_PConfig_1;
    call {:si_unique_call 1760} Tmp_738 := __HAVOC_malloc(140);
    call {:si_unique_call 1761} Tmp_739 := __HAVOC_malloc(60);
    call {:si_unique_call 1762} Tmp_740 := __HAVOC_malloc(304);
    call {:si_unique_call 1763} Tmp_741 := __HAVOC_malloc(312);
    call {:si_unique_call 1764} Tmp_751 := __HAVOC_malloc(336);
    call {:si_unique_call 1765} Tmp_756 := __HAVOC_malloc(300);
    call {:si_unique_call 1766} Tmp_757 := __HAVOC_malloc(408);
    call {:si_unique_call 1767} Tmp_758 := __HAVOC_malloc(744);
    call {:si_unique_call 1768} Tmp_760 := __HAVOC_malloc(116);
    call {:si_unique_call 1769} Tmp_761 := __HAVOC_malloc(132);
    call {:si_unique_call 1770} Tmp_762 := __HAVOC_malloc(732);
    call {:si_unique_call 1771} Tmp_765 := __HAVOC_malloc(436);
    call {:si_unique_call 1772} Tmp_766 := __HAVOC_malloc(440);
    call {:si_unique_call 1773} Tmp_769 := __HAVOC_malloc(180);
    call {:si_unique_call 1774} Tmp_770 := __HAVOC_malloc(444);
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    havoc pDevExt_17;
    Tmp_738 := strConst__li2bpl209;
    call {:si_unique_call 1775} vslice_dummy_var_458 := SerialDbgPrintEx(2, Tmp_738);
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    Tmp_762 := strConst__li2bpl210;
    call {:si_unique_call 1776} vslice_dummy_var_459 := SerialDbgPrintEx(4, Tmp_762);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1377;
    havoc vslice_dummy_var_1378;
    call {:si_unique_call 1777} sdv_689 := SerialMemCompare(vslice_dummy_var_1377, vslice_dummy_var_1378, serialPhysicalMax, 0);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_689 != 2;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_755;
    assume {:nonnull} Tmp_748 != 0;
    assume Tmp_748 > 0;
    assume {:nonnull} Tmp_748 != 0;
    assume Tmp_748 > 0;
    assume {:nonnull} Tmp_748 != 0;
    assume Tmp_748 > 0;
    assume {:nonnull} Tmp_748 != 0;
    assume Tmp_748 > 0;
    assume {:nonnull} Tmp_748 != 0;
    assume Tmp_748 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_1379;
    havoc vslice_dummy_var_1380;
    havoc vslice_dummy_var_1381;
    call {:si_unique_call 1778} SerialLogError(vslice_dummy_var_1379, 0, vslice_dummy_var_1380, Tmp_748, 0, 0, 0, 43, 0, -1073348582, Tmp_755, vslice_dummy_var_1381, 0, 0);
    Tmp_741 := strConst__li2bpl196;
    call {:si_unique_call 1779} vslice_dummy_var_460 := SerialDbgPrintEx(1, Tmp_741);
    Tmp_737 := -1073741810;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:partition} sdv_689 == 2;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1382;
    havoc vslice_dummy_var_1383;
    call {:si_unique_call 1780} sdv_690 := SerialMemCompare(vslice_dummy_var_1382, vslice_dummy_var_1383, serialPhysicalMax, 0);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} sdv_690 != 2;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_749;
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_1384;
    havoc vslice_dummy_var_1385;
    havoc vslice_dummy_var_1386;
    call {:si_unique_call 1781} SerialLogError(vslice_dummy_var_1384, 0, vslice_dummy_var_1385, Tmp_772, 0, 0, 0, 44, 0, -1073348581, Tmp_749, vslice_dummy_var_1386, 0, 0);
    Tmp_740 := strConst__li2bpl197;
    call {:si_unique_call 1782} vslice_dummy_var_461 := SerialDbgPrintEx(1, Tmp_740);
    Tmp_737 := -1073741810;
    goto L1;

  anon78_Then:
    assume {:partition} sdv_690 == 2;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1387;
    havoc vslice_dummy_var_1388;
    call {:si_unique_call 1783} sdv_698 := SerialMemCompare(vslice_dummy_var_1387, vslice_dummy_var_1388, Tmp_768, 0);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} sdv_698 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1389;
    havoc vslice_dummy_var_1390;
    havoc vslice_dummy_var_1391;
    havoc vslice_dummy_var_1392;
    call {:si_unique_call 1784} sdv_684 := SerialMemCompare(vslice_dummy_var_1389, vslice_dummy_var_1390, vslice_dummy_var_1391, vslice_dummy_var_1392);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} sdv_684 != 2;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_771;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_1393;
    havoc vslice_dummy_var_1394;
    havoc vslice_dummy_var_1395;
    havoc vslice_dummy_var_1396;
    call {:si_unique_call 1785} SerialLogError(vslice_dummy_var_1393, 0, vslice_dummy_var_1394, vslice_dummy_var_1395, 0, 0, 0, 45, 0, -1073348580, Tmp_771, vslice_dummy_var_1396, 0, 0);
    Tmp_751 := strConst__li2bpl198;
    call {:si_unique_call 1786} vslice_dummy_var_462 := SerialDbgPrintEx(1, Tmp_751);
    Tmp_737 := -1073741810;
    goto L1;

  anon80_Then:
    assume {:partition} sdv_684 == 2;
    goto L53;

  L53:
    call {:si_unique_call 1787} Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := oldIrql_10;
    call {:si_unique_call 1788} sdv_KeAcquireSpinLock(0, Tmp_745);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_745];
    call {:si_unique_call 1789} sdv_702 := sdv_IsListEmpty(0);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} sdv_702 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L75;

  L75:
    call {:si_unique_call 1790} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto L78;

  L78:
    call {:si_unique_call 1791} sdv_669, sdv_670, sdv_675, Tmp_745, sdv_676, pCurDevObj, sdv_679, sdv_682, pExtension, oldIrql_10, Tmp_758, sdv_693, sdv_696, vslice_dummy_var_463 := SerialFindInitController_loop_L78(sdv_669, sdv_670, sdv_675, Tmp_745, sdv_676, pCurDevObj, sdv_679, sdv_682, Tmp_752, pExtension, oldIrql_10, Tmp_758, Tmp_759, sdv_693, sdv_696, Tmp_763, PConfig_1, vslice_dummy_var_463);
    goto L78_last;

  L78_last:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_758 := strConst__li2bpl199;
    call {:si_unique_call 1792} vslice_dummy_var_463 := SerialDbgPrintEx(4, Tmp_758);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1397;
    havoc vslice_dummy_var_1398;
    havoc vslice_dummy_var_1399;
    havoc vslice_dummy_var_1400;
    call {:si_unique_call 1793} sdv_669 := SerialMemCompare(vslice_dummy_var_1397, vslice_dummy_var_1398, vslice_dummy_var_1399, vslice_dummy_var_1400);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} sdv_669 != 2;
    Tmp_757 := strConst__li2bpl200;
    call {:si_unique_call 1794} vslice_dummy_var_464 := SerialDbgPrintEx(1, Tmp_757);
    Tmp_737 := -1073741810;
    goto L1;

  anon87_Then:
    assume {:partition} sdv_669 == 2;
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1401;
    havoc vslice_dummy_var_1402;
    call {:si_unique_call 1795} sdv_693 := SerialMemCompare(vslice_dummy_var_1401, vslice_dummy_var_1402, Tmp_752, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_693 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1403;
    havoc vslice_dummy_var_1404;
    havoc vslice_dummy_var_1405;
    havoc vslice_dummy_var_1406;
    call {:si_unique_call 1796} sdv_696 := SerialMemCompare(vslice_dummy_var_1403, vslice_dummy_var_1404, vslice_dummy_var_1405, vslice_dummy_var_1406);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_696 != 2;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_742;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_767;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1407;
    havoc vslice_dummy_var_1408;
    havoc vslice_dummy_var_1409;
    havoc vslice_dummy_var_1410;
    havoc vslice_dummy_var_1411;
    call {:si_unique_call 1797} SerialLogError(vslice_dummy_var_1407, 0, vslice_dummy_var_1408, vslice_dummy_var_1409, 0, 0, 0, 47, 0, -1073348578, Tmp_767, vslice_dummy_var_1410, Tmp_742, vslice_dummy_var_1411);
    Tmp_766 := strConst__li2bpl201;
    call {:si_unique_call 1798} vslice_dummy_var_465 := SerialDbgPrintEx(1, Tmp_766);
    Tmp_737 := -1073741810;
    goto L1;

  anon89_Then:
    assume {:partition} sdv_696 == 2;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1412;
    havoc vslice_dummy_var_1413;
    call {:si_unique_call 1799} sdv_670 := SerialMemCompare(vslice_dummy_var_1412, vslice_dummy_var_1413, Tmp_759, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_670 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1414;
    havoc vslice_dummy_var_1415;
    havoc vslice_dummy_var_1416;
    havoc vslice_dummy_var_1417;
    call {:si_unique_call 1800} sdv_679 := SerialMemCompare(vslice_dummy_var_1414, vslice_dummy_var_1415, vslice_dummy_var_1416, vslice_dummy_var_1417);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_679 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_764;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_747;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1418;
    havoc vslice_dummy_var_1419;
    havoc vslice_dummy_var_1420;
    havoc vslice_dummy_var_1421;
    havoc vslice_dummy_var_1422;
    call {:si_unique_call 1801} SerialLogError(vslice_dummy_var_1418, 0, vslice_dummy_var_1419, vslice_dummy_var_1420, 0, 0, 0, 48, 0, -1073348577, Tmp_747, vslice_dummy_var_1421, Tmp_764, vslice_dummy_var_1422);
    Tmp_765 := strConst__li2bpl202;
    call {:si_unique_call 1802} vslice_dummy_var_466 := SerialDbgPrintEx(1, Tmp_765);
    Tmp_737 := -1073741810;
    goto L1;

  anon91_Then:
    assume {:partition} sdv_679 != 1;
    goto L105;

  L105:
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1423;
    havoc vslice_dummy_var_1424;
    call {:si_unique_call 1803} sdv_682 := SerialMemCompare(vslice_dummy_var_1423, vslice_dummy_var_1424, Tmp_763, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_682 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1425;
    havoc vslice_dummy_var_1426;
    havoc vslice_dummy_var_1427;
    havoc vslice_dummy_var_1428;
    call {:si_unique_call 1804} sdv_675 := SerialMemCompare(vslice_dummy_var_1425, vslice_dummy_var_1426, vslice_dummy_var_1427, vslice_dummy_var_1428);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_675 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_754;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_744;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1429;
    havoc vslice_dummy_var_1430;
    havoc vslice_dummy_var_1431;
    havoc vslice_dummy_var_1432;
    havoc vslice_dummy_var_1433;
    call {:si_unique_call 1805} SerialLogError(vslice_dummy_var_1429, 0, vslice_dummy_var_1430, vslice_dummy_var_1431, 0, 0, 0, 49, 0, -1073348576, Tmp_744, vslice_dummy_var_1432, Tmp_754, vslice_dummy_var_1433);
    Tmp_770 := strConst__li2bpl203;
    call {:si_unique_call 1806} vslice_dummy_var_467 := SerialDbgPrintEx(1, Tmp_770);
    Tmp_737 := -1073741810;
    goto L1;

  anon93_Then:
    assume {:partition} sdv_675 != 1;
    goto L84;

  L84:
    call {:si_unique_call 1807} Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := oldIrql_10;
    call {:si_unique_call 1808} sdv_KeAcquireSpinLock(0, Tmp_745);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_745];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    call {:si_unique_call 1809} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 1810} sdv_676 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_676;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    assume false;
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    assume false;
    return;

  anon92_Then:
    assume {:partition} sdv_682 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} sdv_670 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} sdv_693 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;

  anon83_Then:
    goto L79;

  L79:
    call {:si_unique_call 1811} Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := oldIrql_10;
    call {:si_unique_call 1812} sdv_KeAcquireSpinLock(0, Tmp_745);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_745];
    call {:si_unique_call 1813} sdv_703 := sdv_IsListEmpty(0);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_703 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L170;

  L170:
    call {:si_unique_call 1814} sdv_KeReleaseSpinLock(0, oldIrql_10);
    assume {:nonnull} Tmp_746 != 0;
    assume Tmp_746 > 0;
    assume {:nonnull} Tmp_746 != 0;
    assume Tmp_746 > 0;
    assume {:nonnull} Tmp_746 != 0;
    assume Tmp_746 > 0;
    assume {:nonnull} Tmp_746 != 0;
    assume Tmp_746 > 0;
    assume {:nonnull} Tmp_746 != 0;
    assume Tmp_746 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_1434;
    havoc vslice_dummy_var_1435;
    call {:si_unique_call 1815} sdv_672 := SerialMemCompare(vslice_dummy_var_1434, vslice_dummy_var_1435, Tmp_746, 0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_672 != 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    goto L182;

  L182:
    call {:si_unique_call 1816} Tmp_745, pCurDevObj, sdv_687, pExtension, oldIrql_10, sdv_700 := SerialFindInitController_loop_L182(Tmp_745, pCurDevObj, sdv_687, pExtension, oldIrql_10, sdv_700, PConfig_1);
    goto L182_last;

  L182_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1436;
    havoc vslice_dummy_var_1437;
    havoc vslice_dummy_var_1438;
    havoc vslice_dummy_var_1439;
    call {:si_unique_call 1817} sdv_700 := SerialMemCompare(vslice_dummy_var_1436, vslice_dummy_var_1437, vslice_dummy_var_1438, vslice_dummy_var_1439);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_700 == 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto L194;

  L194:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_750;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_743;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_1440;
    havoc vslice_dummy_var_1441;
    havoc vslice_dummy_var_1442;
    havoc vslice_dummy_var_1443;
    havoc vslice_dummy_var_1444;
    call {:si_unique_call 1818} SerialLogError(vslice_dummy_var_1440, 0, vslice_dummy_var_1441, vslice_dummy_var_1442, 0, 0, 0, 50, 0, -1073348575, Tmp_743, vslice_dummy_var_1443, Tmp_750, vslice_dummy_var_1444);
    Tmp_756 := strConst__li2bpl205;
    call {:si_unique_call 1819} vslice_dummy_var_470 := SerialDbgPrintEx(1, Tmp_756);
    Tmp_737 := -1073741810;
    goto L1;

  anon102_Then:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    Tmp_760 := strConst__li2bpl206;
    call {:si_unique_call 1820} vslice_dummy_var_471 := SerialDbgPrintEx(4, Tmp_760);
    Tmp_739 := strConst__li2bpl207;
    call {:si_unique_call 1821} vslice_dummy_var_472 := SerialDbgPrintEx(4, Tmp_739);
    call {:si_unique_call 1822} status_25 := SerialInitMultiPort(pExtension, PConfig_1, PDevObj_21);
    Tmp_737 := status_25;
    goto L1;

  anon103_Then:
    goto L194;

  anon101_Then:
    assume {:partition} sdv_700 != 0;
    goto L183;

  L183:
    call {:si_unique_call 1823} Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := oldIrql_10;
    call {:si_unique_call 1824} sdv_KeAcquireSpinLock(0, Tmp_745);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_745];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 1825} sdv_687 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_687;
    goto L216;

  L216:
    call {:si_unique_call 1826} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    assume false;
    return;

  anon105_Then:
    goto L178;

  L178:
    Tmp_769 := strConst__li2bpl204;
    call {:si_unique_call 1827} vslice_dummy_var_468 := SerialDbgPrintEx(4, Tmp_769);
    call {:si_unique_call 1828} status_25 := SerialInitOneController(PDevObj_21, PConfig_1);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} status_25 >= 0;
    call {:si_unique_call 1829} Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := oldIrql_10;
    call {:si_unique_call 1830} sdv_KeAcquireSpinLock(0, Tmp_745);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_745];
    call {:si_unique_call 1831} sdv_664 := sdv_IsListEmpty(0);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} sdv_664 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L241;

  L241:
    call {:si_unique_call 1832} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    goto L246;

  L246:
    call {:si_unique_call 1833} Tmp_745, pCurDevObj, sdv_677, pExtension, oldIrql_10 := SerialFindInitController_loop_L246(Tmp_745, pCurDevObj, sdv_677, pExtension, oldIrql_10, PConfig_1);
    goto L246_last;

  L246_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    call {:si_unique_call 1834} sdv_ExFreePool(0);
    Tmp_761 := strConst__li2bpl208;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_753;
    call {:si_unique_call 1835} vslice_dummy_var_469 := SerialDbgPrintEx(4, Tmp_761);
    call {:si_unique_call 1836} vslice_dummy_var_457 := KeSynchronizeExecution(0, li2bplFunctionConstant1048, 0);
    Tmp_737 := 0;
    goto L1;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 1837} Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := oldIrql_10;
    call {:si_unique_call 1838} sdv_KeAcquireSpinLock(0, Tmp_745);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_745];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 1839} sdv_677 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_677;
    goto L264;

  L264:
    call {:si_unique_call 1840} sdv_KeReleaseSpinLock(0, oldIrql_10);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    assume false;
    return;

  anon112_Then:
    goto L245;

  L245:
    Tmp_737 := 0;
    goto L1;

  anon111_Then:
    goto L245;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;

  anon108_Then:
    goto L245;

  anon107_Then:
    assume {:partition} sdv_664 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1841} sdv_671 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_671;
    goto L241;

  anon106_Then:
    assume {:partition} 0 > status_25;
    Tmp_737 := status_25;
    goto L1;

  anon104_Then:
    goto L178;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;

  anon97_Then:
    goto L178;

  anon96_Then:
    assume {:partition} sdv_672 == 0;
    goto L178;

  anon95_Then:
    assume {:partition} sdv_703 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1842} sdv_692 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_692;
    goto L170;

  anon82_Then:
    goto L79;

  anon81_Then:
    assume {:partition} sdv_702 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1843} sdv_665 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_665;
    goto L75;

  anon79_Then:
    assume {:partition} sdv_698 == 0;
    goto L53;
}



procedure {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_773: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_773 == -1073741811 || Tmp_773 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_773: int)
{
  var {:scalar} maxRemain: int;
  var {:scalar} maxRemain80: int;
  var {:scalar} remainder: int;
  var {:scalar} maxRemain30: int;
  var {:scalar} maxRemain42: int;
  var {:scalar} maxRemain18: int;
  var {:scalar} calculatedDivisor: int;
  var {:scalar} status_26: int;
  var {:scalar} denominator: int;
  var {:scalar} ClockRate: int;
  var {:scalar} DesiredBaud: int;
  var {:pointer} AppropriateDivisor_1: int;

  anon0:
    ClockRate := actual_ClockRate;
    DesiredBaud := actual_DesiredBaud;
    AppropriateDivisor_1 := actual_AppropriateDivisor_1;
    status_26 := 0;
    maxRemain18 := 18432;
    maxRemain30 := 30720;
    maxRemain42 := 42336;
    maxRemain80 := 80000;
    denominator := DesiredBaud * 16;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} 0 >= DesiredBaud;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  L21:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] == -1;
    status_26 := -1073741811;
    goto L22;

  L22:
    Tmp_773 := status_26;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] != -1;
    goto L22;

  anon74_Then:
    assume {:partition} DesiredBaud > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} DesiredBaud > denominator;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  anon51_Then:
    assume {:partition} denominator >= DesiredBaud;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} ClockRate == 1843200;
    maxRemain := maxRemain18;
    goto L28;

  L28:
    calculatedDivisor := INTDIV(ClockRate, denominator);
    remainder := INTMOD(ClockRate, denominator);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} remainder * 2 > ClockRate;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} DesiredBaud != 110;
    calculatedDivisor := calculatedDivisor + 1;
    goto L31;

  L31:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} DesiredBaud >= 9600;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} remainder >= maxRemain;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} ClockRate > remainder + maxRemain;
    calculatedDivisor := -1;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} denominator > ClockRate;
    calculatedDivisor := -1;
    goto L38;

  L38:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} ClockRate == 1843200;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 2;
    goto L42;

  L42:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := calculatedDivisor;
    goto L21;

  anon62_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon60_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} ClockRate == 3072000;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 13;
    goto L42;

  anon64_Then:
    assume {:partition} DesiredBaud != 14400;
    goto L42;

  anon61_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} ClockRate == 4233600;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} DesiredBaud == 9600;
    calculatedDivisor := 28;
    goto L42;

  anon66_Then:
    assume {:partition} DesiredBaud != 9600;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 18;
    goto L42;

  anon67_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} DesiredBaud == 19200;
    calculatedDivisor := 14;
    goto L42;

  anon68_Then:
    assume {:partition} DesiredBaud != 19200;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} DesiredBaud == 38400;
    calculatedDivisor := 7;
    goto L42;

  anon69_Then:
    assume {:partition} DesiredBaud != 38400;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 5;
    goto L42;

  anon70_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon63_Then:
    assume {:partition} ClockRate != 4233600;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ClockRate == 8000000;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 35;
    goto L42;

  anon71_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 9;
    goto L42;

  anon72_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon65_Then:
    assume {:partition} ClockRate != 8000000;
    goto L42;

  anon57_Then:
    assume {:partition} ClockRate >= denominator;
    goto L38;

  anon59_Then:
    assume {:partition} remainder + maxRemain >= ClockRate;
    goto L34;

  anon58_Then:
    assume {:partition} maxRemain > remainder;
    goto L34;

  anon55_Then:
    assume {:partition} 9600 > DesiredBaud;
    goto L34;

  anon56_Then:
    assume {:partition} DesiredBaud == 110;
    goto L31;

  anon75_Then:
    assume {:partition} ClockRate >= remainder * 2;
    goto L31;

  anon53_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} ClockRate == 3072000;
    maxRemain := maxRemain30;
    goto L28;

  anon54_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} ClockRate == 4233600;
    maxRemain := maxRemain42;
    goto L28;

  anon73_Then:
    assume {:partition} ClockRate != 4233600;
    maxRemain := maxRemain80;
    goto L28;
}



procedure {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_22: int, actual_DisableUART: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_22: int, actual_DisableUART: int)
{
  var {:pointer} Tmp_775: int;
  var {:pointer} Tmp_776: int;
  var {:pointer} pDevExt_18: int;
  var {:pointer} sdv_705: int;
  var {:pointer} Tmp_780: int;
  var {:pointer} countSoFar_1: int;
  var {:pointer} PDevObj_22: int;
  var {:scalar} DisableUART: int;
  var vslice_dummy_var_473: int;
  var vslice_dummy_var_474: int;
  var vslice_dummy_var_475: int;
  var vslice_dummy_var_476: int;

  anon0:
    call {:si_unique_call 1844} vslice_dummy_var_473 := __HAVOC_malloc(4);
    PDevObj_22 := actual_PDevObj_22;
    DisableUART := actual_DisableUART;
    call {:si_unique_call 1845} Tmp_776 := __HAVOC_malloc(136);
    call {:si_unique_call 1846} Tmp_780 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj_22 != 0;
    assume PDevObj_22 > 0;
    havoc pDevExt_18;
    call {:si_unique_call 1847} sdv_do_paged_code_check();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} DisableUART != 0;
    Tmp_775 := strConst__li2bpl212;
    goto L11;

  L11:
    Tmp_776 := strConst__li2bpl213;
    call {:si_unique_call 1848} vslice_dummy_var_475 := SerialDbgPrintEx(2, Tmp_776);
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_18)], 1) != 0;
    call {:si_unique_call 1849} sdv_705 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_705 != 0;
    assume sdv_705 > 0;
    countSoFar_1 := SerialCount__CONFIGURATION_INFORMATION(sdv_705);
    assume {:nonnull} countSoFar_1 != 0;
    assume countSoFar_1 > 0;
    Mem_T.INT4[countSoFar_1] := Mem_T.INT4[countSoFar_1] - 1;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_18)], 2) != 0;
    goto L26;

  L26:
    call {:si_unique_call 1850} vslice_dummy_var_474 := IoWMIRegistrationControl(0, 2);
    goto L15;

  L15:
    call {:si_unique_call 1851} SerialUndoExternalNaming(pDevExt_18);
    Tmp_780 := strConst__li2bpl214;
    call {:si_unique_call 1852} vslice_dummy_var_476 := SerialDbgPrintEx(2, Tmp_780);
    return;

  anon12_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_18)], 2) == 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} DisableUART != 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    goto L29;

  L29:
    call {:si_unique_call 1853} SerialReleaseResources(pDevExt_18);
    goto L26;

  anon11_Then:
    assume {:partition} DisableUART == 0;
    goto L29;

  anon10_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_18)], 1) == 0;
    goto L15;

  anon9_Then:
    assume {:partition} DisableUART == 0;
    Tmp_775 := strConst__li2bpl211;
    goto L11;
}



procedure {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_781: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_781 == 0 || Tmp_781 == 2 || Tmp_781 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_781: int)
{
  var {:scalar} A: int;
  var {:scalar} B: int;
  var {:scalar} b: int;
  var {:scalar} higher: int;
  var {:scalar} lowerSpan: int;
  var {:scalar} lower: int;
  var {:scalar} a: int;
  var {:pointer} structPtr888A: int;
  var {:scalar} SpanOfA: int;
  var {:pointer} structPtr888B: int;
  var {:scalar} SpanOfB: int;

  anon0:
    call {:si_unique_call 1854} A := __HAVOC_malloc(20);
    call {:si_unique_call 1855} B := __HAVOC_malloc(20);
    call {:si_unique_call 1856} b := __HAVOC_malloc(20);
    call {:si_unique_call 1857} higher := __HAVOC_malloc(20);
    call {:si_unique_call 1858} lower := __HAVOC_malloc(20);
    call {:si_unique_call 1859} a := __HAVOC_malloc(20);
    structPtr888A := actual_structPtr888A;
    SpanOfA := actual_SpanOfA;
    structPtr888B := actual_structPtr888B;
    SpanOfB := actual_SpanOfB;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    call {:si_unique_call 1860} sdv_do_paged_code_check();
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_781 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfB;
    goto L20;

  L20:
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_781 := 2;
    goto L1;

  anon8_Then:
    Tmp_781 := 1;
    goto L1;

  anon7_Then:
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfA;
    goto L20;
}



procedure {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_21: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_783: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_783 == 0 || Tmp_783 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_21: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_783: int)
{
  var {:scalar} oldLCRContents: int;
  var {:pointer} Tmp_787: int;
  var {:pointer} PDivisor: int;
  var {:pointer} Tmp_794: int;
  var {:scalar} regContents: int;
  var {:scalar} Lsb: int;
  var {:scalar} Tmp_800: int;
  var {:scalar} value1: int;
  var {:dopa} {:scalar} value2: int;
  var {:scalar} returnValue: int;
  var {:scalar} oldIrql_11: int;
  var {:scalar} Tmp_804: int;
  var {:scalar} sdv_713: int;
  var {:scalar} sdv_714: int;
  var {:scalar} Tmp_807: int;
  var {:scalar} LineControl_1: int;
  var {:pointer} Address_1: int;
  var {:scalar} Tmp_809: int;
  var {:pointer} Tmp_810: int;
  var {:pointer} Tmp_811: int;
  var {:pointer} Tmp_817: int;
  var {:pointer} Extension_21: int;
  var {:pointer} InsertString: int;
  var {:scalar} ForceFifo: int;
  var {:scalar} LogFifo: int;
  var boogieTmp: int;
  var vslice_dummy_var_477: int;
  var vslice_dummy_var_478: int;
  var vslice_dummy_var_479: int;
  var vslice_dummy_var_480: int;
  var vslice_dummy_var_481: int;
  var vslice_dummy_var_1445: int;
  var vslice_dummy_var_1446: int;
  var vslice_dummy_var_1447: int;
  var vslice_dummy_var_1448: int;
  var vslice_dummy_var_1449: int;
  var vslice_dummy_var_1450: int;
  var vslice_dummy_var_1451: int;
  var vslice_dummy_var_1452: int;

  anon0:
    call {:si_unique_call 1861} Tmp_800 := __HAVOC_malloc(20);
    call {:si_unique_call 1862} value2 := __HAVOC_malloc(4);
    call {:si_unique_call 1863} Tmp_807 := __HAVOC_malloc(20);
    Extension_21 := actual_Extension_21;
    InsertString := actual_InsertString;
    ForceFifo := actual_ForceFifo;
    LogFifo := actual_LogFifo;
    call {:si_unique_call 1864} Tmp_810 := __HAVOC_malloc(148);
    returnValue := 1;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1865} oldLCRContents := corral_nondet();
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1866} vslice_dummy_var_478 := corral_nondet();
    call {:si_unique_call 1867} Tmp_811 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_811 != 0;
    assume Tmp_811 > 0;
    Mem_T.INT4[Tmp_811] := oldIrql_11;
    call {:si_unique_call 1868} sdv_KeRaiseIrql(30, Tmp_811);
    assume {:nonnull} Tmp_811 != 0;
    assume Tmp_811 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_811];
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1869} sdv_713 := corral_nondet();
    value1 := sdv_713;
    call {:si_unique_call 1870} value1 := corral_nondet();
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1871} sdv_714 := corral_nondet();
    value1 := BOR(value1, sdv_714);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Address_1;
    PDivisor := value2;
    call {:si_unique_call 1872} LineControl_1 := corral_nondet();
    call {:si_unique_call 1873} Lsb := corral_nondet();
    call {:si_unique_call 1874} vslice_dummy_var_479 := corral_nondet();
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    Mem_T.INT4[PDivisor] := Lsb;
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    call {:si_unique_call 1875} boogieTmp := corral_nondet();
    Mem_T.INT4[PDivisor] := boogieTmp;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1876} sdv_KeLowerIrql(oldIrql_11);
    assume {:nonnull} value2 != 0;
    assume value2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} value1 == Mem_T.INT4[value2];
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_804;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_817;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_817 != 0;
    assume Tmp_817 > 0;
    havoc vslice_dummy_var_1445;
    havoc vslice_dummy_var_1446;
    havoc vslice_dummy_var_1447;
    havoc vslice_dummy_var_1448;
    call {:si_unique_call 1877} SerialLogError(vslice_dummy_var_1445, vslice_dummy_var_1446, vslice_dummy_var_1447, Tmp_807, 0, 0, 0, 62, 0, -1073348572, Tmp_804, vslice_dummy_var_1448, 0, 0);
    returnValue := 0;
    goto L89;

  L89:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} returnValue != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1878} regContents := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(regContents, 192) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 1879} vslice_dummy_var_480 := corral_nondet();
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L116;

  L116:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ForceFifo != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L133;

  L133:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} LogFifo != 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_809;
    assume {:nonnull} Tmp_800 != 0;
    assume Tmp_800 > 0;
    assume {:nonnull} Tmp_800 != 0;
    assume Tmp_800 > 0;
    assume {:nonnull} Tmp_800 != 0;
    assume Tmp_800 > 0;
    assume {:nonnull} Tmp_800 != 0;
    assume Tmp_800 > 0;
    assume {:nonnull} Tmp_800 != 0;
    assume Tmp_800 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_787;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    havoc vslice_dummy_var_1449;
    havoc vslice_dummy_var_1450;
    havoc vslice_dummy_var_1451;
    havoc vslice_dummy_var_1452;
    call {:si_unique_call 1880} SerialLogError(vslice_dummy_var_1449, vslice_dummy_var_1450, vslice_dummy_var_1451, Tmp_800, 0, 0, 0, 15, 0, -1073348606, Tmp_809, vslice_dummy_var_1452, 0, 0);
    goto L136;

  L136:
    Tmp_810 := strConst__li2bpl215;
    call {:si_unique_call 1881} vslice_dummy_var_481 := SerialDbgPrintEx(4, Tmp_810);
    goto L134;

  L134:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L97;

  L97:
    Tmp_783 := returnValue;
    return;

  anon29_Then:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 1882} vslice_dummy_var_477 := corral_nondet();
    goto L97;

  anon30_Then:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_794;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    goto L97;

  anon27_Then:
    goto L97;

  anon28_Then:
    assume {:partition} LogFifo == 0;
    goto L136;

  anon26_Then:
    goto L134;

  anon25_Then:
    goto L131;

  L131:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L133;

  anon24_Then:
    assume {:partition} ForceFifo == 0;
    goto L131;

  anon23_Then:
    assume {:partition} BAND(regContents, 192) == 0;
    goto L116;

  anon22_Then:
    assume {:partition} returnValue == 0;
    goto L97;

  anon21_Then:
    assume {:partition} value1 != Mem_T.INT4[value2];
    goto L89;
}



procedure {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_23: int, actual_PConfigData_1: int) returns (Tmp_819: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_819 == -1073741670 || Tmp_819 == -1073741709 || Tmp_819 == -1073741810 || Tmp_819 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_23: int, actual_PConfigData_1: int) returns (Tmp_819: int)
{
  var {:pointer} pDevExt_19: int;
  var {:scalar} status_27: int;
  var {:pointer} PDevObj_23: int;
  var {:pointer} PConfigData_1: int;

  anon0:
    PDevObj_23 := actual_PDevObj_23;
    PConfigData_1 := actual_PConfigData_1;
    call {:si_unique_call 1883} sdv_do_paged_code_check();
    call {:si_unique_call 1884} status_27 := SerialInitController(PDevObj_23, PConfigData_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_27 >= 0;
    assume {:nonnull} PDevObj_23 != 0;
    assume PDevObj_23 > 0;
    havoc pDevExt_19;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    goto L13;

  L13:
    Tmp_819 := status_27;
    return;

  anon3_Then:
    assume {:partition} 0 > status_27;
    goto L13;
}



procedure {:origName "SerialInitController"} SerialInitController(actual_PDevObj_24: int, actual_PConfigData_2: int) returns (Tmp_821: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_821 == -1073741670 || Tmp_821 == -1073741709 || Tmp_821 == -1073741810 || Tmp_821 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialInitController"} SerialInitController(actual_PDevObj_24: int, actual_PConfigData_2: int) returns (Tmp_821: int)
{
  var {:scalar} sdv_719: int;
  var {:scalar} sdv_720: int;
  var {:scalar} sdv_721: int;
  var {:scalar} sdv_722: int;
  var {:scalar} sdv_723: int;
  var {:scalar} sdv_725: int;
  var {:scalar} sdv_726: int;
  var {:scalar} sdv_727: int;
  var {:scalar} sdv_728: int;
  var {:scalar} sdv_729: int;
  var {:scalar} sdv_730: int;
  var {:scalar} sdv_731: int;
  var {:scalar} sdv_732: int;
  var {:scalar} Tmp_822: int;
  var {:scalar} sdv_733: int;
  var {:scalar} Tmp_823: int;
  var {:scalar} sdv_734: int;
  var {:scalar} sdv_735: int;
  var {:pointer} Tmp_824: int;
  var {:pointer} Tmp_825: int;
  var {:pointer} pDevExt_20: int;
  var {:dopa} {:scalar} junk: int;
  var {:scalar} sdv_737: int;
  var {:pointer} sdv_738: int;
  var {:scalar} sdv_739: int;
  var {:pointer} Tmp_826: int;
  var {:scalar} Tmp_827: int;
  var {:scalar} sdv_740: int;
  var {:scalar} Tmp_828: int;
  var {:scalar} sdv_741: int;
  var {:scalar} sdv_743: int;
  var {:scalar} sdv_744: int;
  var {:pointer} Tmp_829: int;
  var {:scalar} sdv_746: int;
  var {:scalar} sdv_748: int;
  var {:scalar} Tmp_830: int;
  var {:pointer} sdv_750: int;
  var {:pointer} sdv_751: int;
  var {:scalar} sdv_752: int;
  var {:scalar} sdv_753: int;
  var {:scalar} Tmp_832: int;
  var {:scalar} sdv_754: int;
  var {:pointer} Tmp_833: int;
  var {:scalar} sdv_755: int;
  var {:scalar} sdv_756: int;
  var {:scalar} sdv_757: int;
  var {:scalar} Tmp_834: int;
  var {:scalar} sdv_758: int;
  var {:pointer} Tmp_835: int;
  var {:scalar} sdv_759: int;
  var {:scalar} Tmp_836: int;
  var {:scalar} sdv_761: int;
  var {:scalar} sdv_762: int;
  var {:scalar} status_28: int;
  var {:scalar} allocedISRSw: int;
  var {:scalar} sdv_763: int;
  var {:scalar} sdv_764: int;
  var {:pointer} Tmp_837: int;
  var {:scalar} Tmp_838: int;
  var {:scalar} sdv_765: int;
  var {:pointer} Tmp_839: int;
  var {:scalar} sdv_766: int;
  var {:pointer} Tmp_840: int;
  var {:scalar} sdv_768: int;
  var {:scalar} Tmp_842: int;
  var {:pointer} PDevObj_24: int;
  var {:pointer} PConfigData_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_482: int;
  var vslice_dummy_var_483: int;
  var vslice_dummy_var_484: int;
  var vslice_dummy_var_485: int;
  var vslice_dummy_var_486: int;
  var vslice_dummy_var_487: int;
  var vslice_dummy_var_488: int;
  var vslice_dummy_var_489: int;
  var vslice_dummy_var_1453: int;
  var vslice_dummy_var_1454: int;
  var vslice_dummy_var_1455: int;
  var vslice_dummy_var_1456: int;
  var vslice_dummy_var_1457: int;
  var vslice_dummy_var_1458: int;
  var vslice_dummy_var_1459: int;
  var vslice_dummy_var_1460: int;
  var vslice_dummy_var_1461: int;
  var vslice_dummy_var_1462: int;
  var vslice_dummy_var_1463: int;
  var vslice_dummy_var_1464: int;
  var vslice_dummy_var_1465: int;
  var vslice_dummy_var_1466: int;
  var vslice_dummy_var_1467: int;
  var vslice_dummy_var_1468: int;
  var vslice_dummy_var_1469: int;
  var vslice_dummy_var_1470: int;
  var vslice_dummy_var_1471: int;
  var vslice_dummy_var_1472: int;
  var vslice_dummy_var_1473: int;
  var vslice_dummy_var_1474: int;
  var vslice_dummy_var_1475: int;
  var vslice_dummy_var_1476: int;
  var vslice_dummy_var_1477: int;
  var vslice_dummy_var_1478: int;
  var vslice_dummy_var_1479: int;
  var vslice_dummy_var_1480: int;
  var vslice_dummy_var_1481: int;
  var vslice_dummy_var_1482: int;
  var vslice_dummy_var_1483: int;
  var vslice_dummy_var_1484: int;
  var vslice_dummy_var_1485: int;
  var vslice_dummy_var_1486: int;
  var vslice_dummy_var_1487: int;
  var vslice_dummy_var_1488: int;
  var vslice_dummy_var_1489: int;
  var vslice_dummy_var_1490: int;
  var vslice_dummy_var_1491: int;
  var vslice_dummy_var_1492: int;
  var vslice_dummy_var_1493: int;
  var vslice_dummy_var_1494: int;
  var vslice_dummy_var_1495: int;
  var vslice_dummy_var_1496: int;

  anon0:
    call {:si_unique_call 1885} junk := __HAVOC_malloc(4);
    call {:si_unique_call 1886} Tmp_828 := __HAVOC_malloc(20);
    call {:si_unique_call 1887} Tmp_832 := __HAVOC_malloc(20);
    call {:si_unique_call 1888} Tmp_836 := __HAVOC_malloc(20);
    call {:si_unique_call 1889} Tmp_838 := __HAVOC_malloc(20);
    PDevObj_24 := actual_PDevObj_24;
    PConfigData_2 := actual_PConfigData_2;
    call {:si_unique_call 1890} Tmp_824 := __HAVOC_malloc(204);
    call {:si_unique_call 1891} Tmp_825 := __HAVOC_malloc(136);
    call {:si_unique_call 1892} Tmp_826 := __HAVOC_malloc(140);
    call {:si_unique_call 1893} Tmp_829 := __HAVOC_malloc(184);
    call {:si_unique_call 1894} Tmp_833 := __HAVOC_malloc(180);
    call {:si_unique_call 1895} Tmp_837 := __HAVOC_malloc(840);
    call {:si_unique_call 1896} Tmp_839 := __HAVOC_malloc(196);
    call {:si_unique_call 1897} Tmp_840 := __HAVOC_malloc(204);
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    havoc pDevExt_20;
    status_28 := 0;
    allocedISRSw := 0;
    call {:si_unique_call 1898} sdv_do_paged_code_check();
    Tmp_829 := strConst__li2bpl216;
    call {:si_unique_call 1899} vslice_dummy_var_482 := SerialDbgPrintEx(4, Tmp_829);
    assume {:nonnull} KdComPortInUse != 0;
    assume KdComPortInUse > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    Tmp_833 := strConst__li2bpl217;
    call {:si_unique_call 1900} vslice_dummy_var_483 := SerialDbgPrintEx(0, Tmp_833);
    Tmp_825 := strConst__li2bpl218;
    call {:si_unique_call 1901} vslice_dummy_var_484 := SerialDbgPrintEx(0, Tmp_825);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_842;
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1453;
    havoc vslice_dummy_var_1454;
    havoc vslice_dummy_var_1455;
    call {:si_unique_call 1902} SerialLogError(vslice_dummy_var_1453, 0, vslice_dummy_var_1454, Tmp_832, 0, 0, 0, 3, 0, -1073348607, Tmp_842, vslice_dummy_var_1455, 0, 0);
    Tmp_821 := -1073741670;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto L36;

  L36:
    call {:si_unique_call 1903} KeInitializeTimer(0);
    call {:si_unique_call 1904} KeInitializeTimer(0);
    call {:si_unique_call 1905} KeInitializeTimer(0);
    call {:si_unique_call 1906} KeInitializeTimer(0);
    call {:si_unique_call 1907} KeInitializeTimer(0);
    call {:si_unique_call 1908} KeInitializeTimer(0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1909} KeInitializeDpc(CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant577, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1910} KeInitializeDpc(CompleteReadDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant723, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1911} KeInitializeDpc(TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant726, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1912} KeInitializeDpc(IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant728, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1913} KeInitializeDpc(TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant579, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1914} KeInitializeDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant1040, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1915} KeInitializeDpc(CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant1041, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1916} KeInitializeDpc(TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant1042, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1917} KeInitializeDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant622, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1918} KeInitializeDpc(XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant581, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1919} KeInitializeDpc(XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant580, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1920} KeInitializeDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant899, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1921} KeInitializeDpc(PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant901, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1922} KeInitializeDpc(IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant678, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1923} KeInitializeDpc(SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_20), li2bplFunctionConstant673, 0);
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_823;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1456;
    havoc vslice_dummy_var_1457;
    havoc vslice_dummy_var_1458;
    havoc vslice_dummy_var_1459;
    call {:si_unique_call 1924} sdv_750 := SerialGetMappedAddress(vslice_dummy_var_1456, vslice_dummy_var_1457, vslice_dummy_var_1458, vslice_dummy_var_1459, Tmp_823, UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_20));
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_822;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1460;
    havoc vslice_dummy_var_1461;
    havoc vslice_dummy_var_1462;
    havoc vslice_dummy_var_1463;
    call {:si_unique_call 1925} sdv_738 := SerialGetMappedAddress(vslice_dummy_var_1460, vslice_dummy_var_1461, vslice_dummy_var_1462, vslice_dummy_var_1463, Tmp_822, UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_20));
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L113;

  L113:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L154;

  L154:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 4;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 8;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 14;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L174;

  L174:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} 1 > Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)];
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L177;

  L177:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1464;
    call {:si_unique_call 1926} sdv_744 := SerialDoesPortExist(pDevExt_20, DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_20), Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfigData_2)], vslice_dummy_var_1464);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} sdv_744 != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] != 0;
    Tmp_839 := strConst__li2bpl221;
    call {:si_unique_call 1927} vslice_dummy_var_485 := SerialDbgPrintEx(3, Tmp_839);
    status_28 := -1073741810;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_834;
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1465;
    havoc vslice_dummy_var_1466;
    havoc vslice_dummy_var_1467;
    call {:si_unique_call 1928} SerialLogError(vslice_dummy_var_1465, PDevObj_24, vslice_dummy_var_1466, Tmp_836, 0, 0, 0, 57, 0, -1073348574, Tmp_834, vslice_dummy_var_1467, 0, 0);
    goto L139;

  L139:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_28 >= 0;
    goto L141;

  L141:
    Tmp_821 := status_28;
    goto L1;

  anon81_Then:
    assume {:partition} 0 > status_28;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} allocedISRSw != 0;
    call {:si_unique_call 1929} sdv_ExFreePool(0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L142;

  L142:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_20)] != 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1468;
    call {:si_unique_call 1930} MmUnmapIoSpace(0, vslice_dummy_var_1468);
    goto L147;

  L147:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_20)] != 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1469;
    call {:si_unique_call 1931} MmUnmapIoSpace(0, vslice_dummy_var_1469);
    goto L141;

  anon84_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_20)] == 0;
    goto L141;

  anon83_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_20)] == 0;
    goto L147;

  anon82_Then:
    assume {:partition} allocedISRSw == 0;
    goto L142;

  anon87_Then:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1932} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1933} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    call {:si_unique_call 1934} boogieTmp := corral_nondet();
    Tmp_837 := strConst__li2bpl223;
    call {:si_unique_call 1935} vslice_dummy_var_486 := SerialDbgPrintEx(4, Tmp_837);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1470;
    call {:si_unique_call 1936} sdv_727 := SerialGetDivisorFromBaud(vslice_dummy_var_1470, 75, junk);
    call {:si_unique_call 1937} sdv_732 := sdv_NT_ERROR(sdv_727);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_732 != 0;
    goto L218;

  L218:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1471;
    call {:si_unique_call 1938} sdv_753 := SerialGetDivisorFromBaud(vslice_dummy_var_1471, 110, junk);
    call {:si_unique_call 1939} sdv_757 := sdv_NT_ERROR(sdv_753);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_757 != 0;
    goto L226;

  L226:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1472;
    call {:si_unique_call 1940} sdv_762 := SerialGetDivisorFromBaud(vslice_dummy_var_1472, 135, junk);
    call {:si_unique_call 1941} sdv_726 := sdv_NT_ERROR(sdv_762);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_726 != 0;
    goto L234;

  L234:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1473;
    call {:si_unique_call 1942} sdv_737 := SerialGetDivisorFromBaud(vslice_dummy_var_1473, 150, junk);
    call {:si_unique_call 1943} sdv_748 := sdv_NT_ERROR(sdv_737);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_748 != 0;
    goto L242;

  L242:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1474;
    call {:si_unique_call 1944} sdv_740 := SerialGetDivisorFromBaud(vslice_dummy_var_1474, 300, junk);
    call {:si_unique_call 1945} sdv_733 := sdv_NT_ERROR(sdv_740);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_733 != 0;
    goto L250;

  L250:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1475;
    call {:si_unique_call 1946} sdv_764 := SerialGetDivisorFromBaud(vslice_dummy_var_1475, 600, junk);
    call {:si_unique_call 1947} sdv_734 := sdv_NT_ERROR(sdv_764);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_734 != 0;
    goto L258;

  L258:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1476;
    call {:si_unique_call 1948} sdv_768 := SerialGetDivisorFromBaud(vslice_dummy_var_1476, 1200, junk);
    call {:si_unique_call 1949} sdv_730 := sdv_NT_ERROR(sdv_768);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} sdv_730 != 0;
    goto L266;

  L266:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1477;
    call {:si_unique_call 1950} sdv_756 := SerialGetDivisorFromBaud(vslice_dummy_var_1477, 1800, junk);
    call {:si_unique_call 1951} sdv_761 := sdv_NT_ERROR(sdv_756);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_761 != 0;
    goto L274;

  L274:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1478;
    call {:si_unique_call 1952} sdv_721 := SerialGetDivisorFromBaud(vslice_dummy_var_1478, 2400, junk);
    call {:si_unique_call 1953} sdv_739 := sdv_NT_ERROR(sdv_721);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_739 != 0;
    goto L282;

  L282:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1479;
    call {:si_unique_call 1954} sdv_758 := SerialGetDivisorFromBaud(vslice_dummy_var_1479, 4800, junk);
    call {:si_unique_call 1955} sdv_725 := sdv_NT_ERROR(sdv_758);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} sdv_725 != 0;
    goto L290;

  L290:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1480;
    call {:si_unique_call 1956} sdv_746 := SerialGetDivisorFromBaud(vslice_dummy_var_1480, 7200, junk);
    call {:si_unique_call 1957} sdv_754 := sdv_NT_ERROR(sdv_746);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} sdv_754 != 0;
    goto L298;

  L298:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1481;
    call {:si_unique_call 1958} sdv_719 := SerialGetDivisorFromBaud(vslice_dummy_var_1481, 9600, junk);
    call {:si_unique_call 1959} sdv_731 := sdv_NT_ERROR(sdv_719);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_731 != 0;
    goto L306;

  L306:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1482;
    call {:si_unique_call 1960} sdv_723 := SerialGetDivisorFromBaud(vslice_dummy_var_1482, 14400, junk);
    call {:si_unique_call 1961} sdv_735 := sdv_NT_ERROR(sdv_723);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_735 != 0;
    goto L314;

  L314:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1483;
    call {:si_unique_call 1962} sdv_729 := SerialGetDivisorFromBaud(vslice_dummy_var_1483, 19200, junk);
    call {:si_unique_call 1963} sdv_752 := sdv_NT_ERROR(sdv_729);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_752 != 0;
    goto L322;

  L322:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1484;
    call {:si_unique_call 1964} sdv_720 := SerialGetDivisorFromBaud(vslice_dummy_var_1484, 38400, junk);
    call {:si_unique_call 1965} sdv_722 := sdv_NT_ERROR(sdv_720);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} sdv_722 != 0;
    goto L330;

  L330:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1485;
    call {:si_unique_call 1966} sdv_765 := SerialGetDivisorFromBaud(vslice_dummy_var_1485, 56000, junk);
    call {:si_unique_call 1967} sdv_728 := sdv_NT_ERROR(sdv_765);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_728 != 0;
    goto L338;

  L338:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1486;
    call {:si_unique_call 1968} sdv_763 := SerialGetDivisorFromBaud(vslice_dummy_var_1486, 57600, junk);
    call {:si_unique_call 1969} sdv_743 := sdv_NT_ERROR(sdv_763);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} sdv_743 != 0;
    goto L346;

  L346:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1487;
    call {:si_unique_call 1970} sdv_759 := SerialGetDivisorFromBaud(vslice_dummy_var_1487, 115200, junk);
    call {:si_unique_call 1971} sdv_766 := sdv_NT_ERROR(sdv_759);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_766 != 0;
    goto L354;

  L354:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1488;
    call {:si_unique_call 1972} sdv_741 := SerialGetDivisorFromBaud(vslice_dummy_var_1488, 128000, junk);
    call {:si_unique_call 1973} sdv_755 := sdv_NT_ERROR(sdv_741);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} sdv_755 != 0;
    goto L362;

  L362:
    call {:si_unique_call 1974} SetDeviceIsOpened(pDevExt_20, 0, 0);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L139;

  anon106_Then:
    assume {:partition} sdv_755 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L362;

  anon105_Then:
    assume {:partition} sdv_766 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L354;

  anon104_Then:
    assume {:partition} sdv_743 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L346;

  anon103_Then:
    assume {:partition} sdv_728 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L338;

  anon102_Then:
    assume {:partition} sdv_722 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L330;

  anon101_Then:
    assume {:partition} sdv_752 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L322;

  anon100_Then:
    assume {:partition} sdv_735 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L314;

  anon99_Then:
    assume {:partition} sdv_731 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L306;

  anon98_Then:
    assume {:partition} sdv_754 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L298;

  anon97_Then:
    assume {:partition} sdv_725 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L290;

  anon96_Then:
    assume {:partition} sdv_739 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L282;

  anon95_Then:
    assume {:partition} sdv_761 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L274;

  anon94_Then:
    assume {:partition} sdv_730 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L266;

  anon93_Then:
    assume {:partition} sdv_734 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L258;

  anon92_Then:
    assume {:partition} sdv_733 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L250;

  anon91_Then:
    assume {:partition} sdv_748 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L242;

  anon90_Then:
    assume {:partition} sdv_726 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L234;

  anon89_Then:
    assume {:partition} sdv_757 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L226;

  anon88_Then:
    assume {:partition} sdv_732 == 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L218;

  anon86_Then:
    assume {:partition} sdv_744 == 0;
    Tmp_826 := strConst__li2bpl220;
    call {:si_unique_call 1975} vslice_dummy_var_487 := SerialDbgPrintEx(1, Tmp_826);
    status_28 := -1073741810;
    goto L139;

  anon85_Then:
    assume {:partition} Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)] >= 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L177;

  anon107_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 14;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L174;

  anon108_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 8;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L174;

  anon109_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 4;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L174;

  anon113_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 1;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L174;

  anon79_Then:
    goto L154;

  anon112_Then:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_830;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1489;
    havoc vslice_dummy_var_1490;
    havoc vslice_dummy_var_1491;
    call {:si_unique_call 1976} SerialLogError(vslice_dummy_var_1489, PDevObj_24, vslice_dummy_var_1490, Tmp_828, 0, 0, 0, 8, 0, -1073348598, Tmp_830, vslice_dummy_var_1491, 0, 0);
    Tmp_824 := strConst__li2bpl219;
    call {:si_unique_call 1977} vslice_dummy_var_488 := SerialDbgPrintEx(1, Tmp_824);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_20)] != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc vslice_dummy_var_1492;
    call {:si_unique_call 1978} MmUnmapIoSpace(0, vslice_dummy_var_1492);
    goto L131;

  L131:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_20)] := 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_20)] := 0;
    status_28 := -1073741709;
    goto L139;

  anon80_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_20)] == 0;
    goto L131;

  anon111_Then:
    goto L113;

  anon110_Then:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_827;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc vslice_dummy_var_1493;
    havoc vslice_dummy_var_1494;
    havoc vslice_dummy_var_1495;
    havoc vslice_dummy_var_1496;
    call {:si_unique_call 1979} SerialLogError(vslice_dummy_var_1493, vslice_dummy_var_1494, vslice_dummy_var_1495, Tmp_838, 0, 0, 0, 7, 0, -1073348598, Tmp_827, vslice_dummy_var_1496, 0, 0);
    Tmp_840 := strConst__li2bpl222;
    call {:si_unique_call 1980} vslice_dummy_var_489 := SerialDbgPrintEx(1, Tmp_840);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_20)] := 0;
    status_28 := -1073741709;
    goto L139;

  anon78_Then:
    call {:si_unique_call 1981} sdv_751 := ExAllocatePoolWithTag(512, 16, -666022077);
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    havoc Tmp_835;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    call {:si_unique_call 1982} InitializeListHead(SharerList__SERIAL_CISR_SW(Tmp_835));
    allocedISRSw := 1;
    goto L36;

  anon114_Then:
    Tmp_821 := -1073741670;
    goto L1;
}



procedure {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_843: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_843: int)
{
  var {:pointer} Tmp_844: int;
  var {:pointer} Tmp_845: int;
  var {:pointer} Tmp_846: int;
  var {:pointer} Tmp_847: int;
  var {:pointer} Tmp_848: int;
  var {:pointer} Extension_22: int;
  var {:scalar} sdv_775: int;
  var {:scalar} status_29: int;
  var {:pointer} Tmp_850: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_17: int;
  var vslice_dummy_var_490: int;
  var vslice_dummy_var_491: int;
  var vslice_dummy_var_492: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_495: int;

  anon0:
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_17 := actual_Irp_17;
    call {:si_unique_call 1983} Tmp_844 := __HAVOC_malloc(84);
    call {:si_unique_call 1984} Tmp_845 := __HAVOC_malloc(72);
    call {:si_unique_call 1985} Tmp_846 := __HAVOC_malloc(88);
    call {:si_unique_call 1986} Tmp_847 := __HAVOC_malloc(84);
    call {:si_unique_call 1987} Tmp_848 := __HAVOC_malloc(84);
    call {:si_unique_call 1988} Tmp_850 := __HAVOC_malloc(96);
    assume {:nonnull} DeviceObject_17 != 0;
    assume DeviceObject_17 > 0;
    havoc Extension_22;
    call {:si_unique_call 1989} sdv_do_paged_code_check();
    Tmp_850 := strConst__li2bpl33;
    call {:si_unique_call 1990} vslice_dummy_var_490 := SerialDbgPrintEx(9, Tmp_850);
    Tmp_846 := strConst__li2bpl224;
    call {:si_unique_call 1991} vslice_dummy_var_491 := SerialDbgPrintEx(2, Tmp_846);
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    call {:si_unique_call 1992} status_29 := SerialIRPPrologue(Irp_17, Extension_22);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_29 != 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_17))] := status_29;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_29 >= 0;
    goto L29;

  L29:
    Tmp_848 := strConst__li2bpl225;
    call {:si_unique_call 1993} vslice_dummy_var_492 := SerialDbgPrintEx(2, Tmp_848);
    Tmp_843 := status_29;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} 0 > status_29;
    Tmp_845 := strConst__li2bpl1;
    call {:si_unique_call 1994} vslice_dummy_var_493 := SerialDbgPrintEx(9, Tmp_845);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_17 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1995} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, Irp_17);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    goto L54;

  L54:
    call {:si_unique_call 1996} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1997} SerialIRPEpilogue(Extension_22);
    goto L29;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume !(Irp_17 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L54;

  anon15_Then:
    assume {:partition} status_29 == 0;
    call {:si_unique_call 1998} sdv_775 := SerialCompleteIfError(DeviceObject_17, Irp_17);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_775 != 0;
    Tmp_844 := strConst__li2bpl226;
    call {:si_unique_call 1999} vslice_dummy_var_494 := SerialDbgPrintEx(2, Tmp_844);
    Tmp_843 := -1073741536;
    goto L1;

  anon17_Then:
    assume {:partition} sdv_775 == 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    call {:si_unique_call 2000} status_29 := SerialStartOrQueue(Extension_22, Irp_17, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_22), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_22), li2bplFunctionConstant1125);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    Tmp_847 := strConst__li2bpl227;
    call {:si_unique_call 2001} vslice_dummy_var_495 := SerialDbgPrintEx(2, Tmp_847);
    Tmp_843 := status_29;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_496: int;

  anon0:
    call {:si_unique_call 2002} vslice_dummy_var_496 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_23: int) returns (Tmp_853: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_23: int) returns (Tmp_853: int)
{
  var {:pointer} NewIrp_4: int;
  var {:pointer} Tmp_855: int;
  var {:pointer} Extension_23: int;
  var vslice_dummy_var_497: int;

  anon0:
    call {:si_unique_call 2003} NewIrp_4 := __HAVOC_malloc(4);
    Extension_23 := actual_Extension_23;
    call {:si_unique_call 2004} sdv_do_paged_code_check();
    assume {:nonnull} Extension_23 != 0;
    assume Extension_23 > 0;
    Tmp_855 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_23)];
    assume {:nonnull} Tmp_855 != 0;
    assume Tmp_855 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_855))] := 0;
    assume {:nonnull} Extension_23 != 0;
    assume Extension_23 > 0;
    call {:si_unique_call 2005} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_23), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_23), NewIrp_4, 1, Extension_23);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_4 != 0;
    assume NewIrp_4 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_4] != 0;
    call {:si_unique_call 2006} vslice_dummy_var_497 := SerialStartWrite#1(Extension_23);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  L12:
    Tmp_853 := 0;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_4] == 0;
    goto L12;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_18: int, actual_Irp_18: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_18: int, actual_Irp_18: int)
{
  var {:pointer} Extension_24: int;
  var {:pointer} DeviceObject_18: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_498: int;
  var vslice_dummy_var_1497: int;

  anon0:
    call {:si_unique_call 2007} vslice_dummy_var_498 := __HAVOC_malloc(4);
    DeviceObject_18 := actual_DeviceObject_18;
    Irp_18 := actual_Irp_18;
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc Extension_24;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc vslice_dummy_var_1497;
    call {:si_unique_call 2008} SerialTryToCompleteCurrent#1(Extension_24, li2bplFunctionConstant1089, vslice_dummy_var_1497, -1073741536, CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_24), 0, 0, ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_24), 0, li2bplFunctionConstant1088, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_499: int;

  anon0:
    call {:si_unique_call 2009} vslice_dummy_var_499 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_25: int);
  modifies alloc, Mem_T.INT4, Mem_T.PVOID, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_25: int)
{
  var {:pointer} Tmp_860: int;
  var {:pointer} s_p_e_c_i_a_l_25: int;
  var {:pointer} Tmp_861: int;
  var {:scalar} TotalTime_1: int;
  var {:pointer} Tmp_862: int;
  var {:pointer} sdv_780: int;
  var {:scalar} UseATimer_1: int;
  var {:pointer} sdv_781: int;
  var {:pointer} sdv_783: int;
  var {:scalar} OldIrql_9: int;
  var {:scalar} s_p_e_c_i_a_l_26: int;
  var {:pointer} Tmp_863: int;
  var {:pointer} s_p_e_c_i_a_l_27: int;
  var {:pointer} OldIrp: int;
  var {:pointer} Tmp_864: int;
  var {:scalar} s_p_e_c_i_a_l_28: int;
  var {:pointer} Tmp_865: int;
  var {:scalar} Timeouts_1: int;
  var {:pointer} Extension_25: int;
  var vslice_dummy_var_500: int;
  var vslice_dummy_var_501: int;
  var vslice_dummy_var_502: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;
  var vslice_dummy_var_505: int;
  var vslice_dummy_var_506: int;

  anon0:
    call {:si_unique_call 2010} TotalTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2011} Timeouts_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2012} vslice_dummy_var_500 := __HAVOC_malloc(4);
    Extension_25 := actual_Extension_25;
    call {:si_unique_call 2013} Tmp_860 := __HAVOC_malloc(108);
    call {:si_unique_call 2014} Tmp_861 := __HAVOC_malloc(92);
    call {:si_unique_call 2015} Tmp_862 := __HAVOC_malloc(72);
    Tmp_860 := strConst__li2bpl228;
    call {:si_unique_call 2016} vslice_dummy_var_504 := SerialDbgPrintEx(2, Tmp_860);
    UseATimer_1 := 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    Tmp_865 := Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)];
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_865))] := 259;
    call {:si_unique_call 2017} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 2018} Tmp_863 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    Mem_T.INT4[Tmp_863] := OldIrql_9;
    call {:si_unique_call 2019} sdv_KeAcquireSpinLock(0, Tmp_863);
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    OldIrql_9 := Mem_T.INT4[Tmp_863];
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    call {:si_unique_call 2020} sdv_KeReleaseSpinLock(0, OldIrql_9);
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L24;

  L24:
    UseATimer_1 := 1;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    goto L28;

  L28:
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 2021} sdv_783 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)]);
    assume {:nonnull} sdv_783 != 0;
    assume sdv_783 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_783)))] := 0;
    call {:si_unique_call 2022} Tmp_863 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    Mem_T.INT4[Tmp_863] := OldIrql_9;
    call {:si_unique_call 2023} IoAcquireCancelSpinLock(Tmp_863);
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    OldIrql_9 := Mem_T.INT4[Tmp_863];
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    Tmp_864 := Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)];
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    OldIrp := Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)];
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)] := 0;
    call {:si_unique_call 2024} IoReleaseCancelSpinLock(OldIrql_9);
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(OldIrp))] := -1073741536;
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Tmp_862 := strConst__li2bpl1;
    call {:si_unique_call 2025} vslice_dummy_var_505 := SerialDbgPrintEx(9, Tmp_862);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume OldIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2026} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, OldIrp);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L94;

  L94:
    call {:si_unique_call 2027} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2028} SerialIRPEpilogue(Extension_25);
    goto L56;

  L56:
    Tmp_861 := strConst__li2bpl229;
    call {:si_unique_call 2029} vslice_dummy_var_506 := SerialDbgPrintEx(2, Tmp_861);
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume !(OldIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L94;

  anon16_Then:
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 2030} vslice_dummy_var_501 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)], li2bplFunctionConstant1086);
    s_p_e_c_i_a_l_26 := 2;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 2031} sdv_780 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)]);
    assume {:nonnull} sdv_780 != 0;
    assume sdv_780 > 0;
    s_p_e_c_i_a_l_25 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_780)));
    assume {:nonnull} s_p_e_c_i_a_l_25 != 0;
    assume s_p_e_c_i_a_l_25 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_25] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_25], s_p_e_c_i_a_l_26);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} UseATimer_1 != 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 2032} vslice_dummy_var_503 := SerialSetTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_25), TotalTime_1, TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_25), Extension_25);
    s_p_e_c_i_a_l_28 := 4;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 2033} sdv_781 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_25)]);
    assume {:nonnull} sdv_781 != 0;
    assume sdv_781 > 0;
    s_p_e_c_i_a_l_27 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_781)));
    assume {:nonnull} s_p_e_c_i_a_l_27 != 0;
    assume s_p_e_c_i_a_l_27 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_27] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_27], s_p_e_c_i_a_l_28);
    goto L68;

  L68:
    call {:si_unique_call 2034} vslice_dummy_var_502 := KeSynchronizeExecution(0, li2bplFunctionConstant1087, 0);
    call {:si_unique_call 2035} IoReleaseCancelSpinLock(OldIrql_9);
    goto L56;

  anon18_Then:
    assume {:partition} UseATimer_1 == 0;
    goto L68;

  anon13_Then:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L28;

  anon14_Then:
    goto L24;
}



procedure {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp_7: int, actual_QueueToProcess_4: int, actual_NewIrp_5: int, actual_CompleteCurrent_4: int, actual_Extension_26: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp_7: int, actual_QueueToProcess_4: int, actual_NewIrp_5: int, actual_CompleteCurrent_4: int, actual_Extension_26: int)
{
  var {:pointer} Tmp_867: int;
  var {:pointer} Tmp_868: int;
  var {:scalar} OldIrql_10: int;
  var {:pointer} OldIrp_1: int;
  var {:pointer} CurrentOpIrp_7: int;
  var {:pointer} NewIrp_5: int;
  var {:pointer} Extension_26: int;
  var vslice_dummy_var_507: int;
  var vslice_dummy_var_508: int;
  var vslice_dummy_var_509: int;

  anon0:
    call {:si_unique_call 2036} vslice_dummy_var_507 := __HAVOC_malloc(4);
    CurrentOpIrp_7 := actual_CurrentOpIrp_7;
    NewIrp_5 := actual_NewIrp_5;
    Extension_26 := actual_Extension_26;
    call {:si_unique_call 2037} Tmp_868 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    OldIrp_1 := Mem_T.P_IRP[CurrentOpIrp_7];
    call {:si_unique_call 2038} Tmp_867 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    Mem_T.INT4[Tmp_867] := OldIrql_10;
    call {:si_unique_call 2039} IoAcquireCancelSpinLock(Tmp_867);
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    OldIrql_10 := Mem_T.INT4[Tmp_867];
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    Mem_T.P_IRP[CurrentOpIrp_7] := 0;
    assume {:nonnull} NewIrp_5 != 0;
    assume NewIrp_5 > 0;
    Mem_T.P_IRP[NewIrp_5] := 0;
    call {:si_unique_call 2040} vslice_dummy_var_508 := KeSynchronizeExecution(0, li2bplFunctionConstant574, 0);
    call {:si_unique_call 2041} IoReleaseCancelSpinLock(OldIrql_10);
    Tmp_868 := strConst__li2bpl1;
    call {:si_unique_call 2042} vslice_dummy_var_509 := SerialDbgPrintEx(9, Tmp_868);
    call {:si_unique_call 2043} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2044} SerialIRPEpilogue(Extension_26);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc, Mem_T.MajorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_510: int;

  anon0:
    call {:si_unique_call 2045} vslice_dummy_var_510 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_2: int, actual_FieldOffset: int) returns (Tmp_872: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_2: int, actual_FieldOffset: int) returns (Tmp_872: int)
{
  var {:pointer} record: int;
  var {:pointer} Address_2: int;

  anon0:
    Address_2 := actual_Address_2;
    call {:si_unique_call 2046} SLIC_sdv_containing_record_entry(strConst__li2bpl183);
    record := Address_2;
    Tmp_872 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_511: int;
  var vslice_dummy_var_1498: int;

  anon0:
    call {:si_unique_call 2047} vslice_dummy_var_511 := __HAVOC_malloc(4);
    p := actual_p;
    assume {:nonnull} p != 0;
    assume p > 0;
    havoc vslice_dummy_var_1498;
    Mem_T.INT4[p] := vslice_dummy_var_1498;
    return;
}



procedure {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_512: int;

  anon0:
    call {:si_unique_call 2048} vslice_dummy_var_512 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Dpc_1: int) returns (Tmp_878: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_878 == 1 || Tmp_878 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Dpc_1: int) returns (Tmp_878: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 2049} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_878 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_878 := 0;
    goto L1;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_880: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_880: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_880 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_880 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_880 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_2: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_2: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc_2: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_513: int;

  anon0:
    call {:si_unique_call 2050} vslice_dummy_var_513 := __HAVOC_malloc(4);
    Dpc_2 := actual_Dpc_2;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_2 != 0;
    assume Dpc_2 > 0;
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_514: int;

  anon0:
    call {:si_unique_call 2051} vslice_dummy_var_514 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_886: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_886: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_886 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_515: int;

  anon0:
    call {:si_unique_call 2052} vslice_dummy_var_515 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_516: int;

  anon0:
    call {:si_unique_call 2053} vslice_dummy_var_516 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    r_1 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_3)))];
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_517: int;

  anon0:
    call {:si_unique_call 2054} vslice_dummy_var_517 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_894: int);
  free ensures {:va_keep} Tmp_894 == 1 || Tmp_894 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_894: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_894 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_894 := 0;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_518: int;

  anon0:
    call {:si_unique_call 2055} vslice_dummy_var_518 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := -1073741637;
    goto L1;
}



procedure {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_3: int) returns (Tmp_898: int);
  free ensures {:va_keep} Tmp_898 == 1 || Tmp_898 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_3: int) returns (Tmp_898: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_898 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_898 := 0;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_900: int);
  free ensures {:va_keep} Tmp_900 == 0 || Tmp_900 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_900: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_900 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_900 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, SLAM_guard_S_0, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;

  anon0:
    call {:si_unique_call 2056} vslice_dummy_var_519 := __HAVOC_malloc(4);
    SLAM_guard_S_0 := sdv_irp;
    assume SLAM_guard_S_0 != 0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2057} sdv_stub_driver_init();
    call {:si_unique_call 2058} vslice_dummy_var_520 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName: int) returns (Tmp_904: int);
  free ensures {:va_keep} Tmp_904 == 0 || Tmp_904 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName: int) returns (Tmp_904: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_904 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_904 := -1073741823;
    goto L1;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_906: int);
  free ensures {:va_keep} Tmp_906 == 0 || Tmp_906 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_906: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_906 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_906 := -1073741823;
    goto L1;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_908: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_908: int)
{
  var {:pointer} sdv_802: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2059} sdv_802 := __HAVOC_malloc(1);
    Tmp_908 := sdv_802;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_908 := 0;
    goto L1;
}



procedure {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag: int) returns (Tmp_910: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag: int) returns (Tmp_910: int)
{
  var {:pointer} sdv_804: int;
  var {:scalar} NumberOfBytes_1: int;

  anon0:
    NumberOfBytes_1 := actual_NumberOfBytes_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2060} sdv_804 := __HAVOC_malloc(NumberOfBytes_1);
    Tmp_910 := sdv_804;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_910 := 0;
    goto L1;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_19: int, actual_Irp_19: int) returns (Tmp_912: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_19: int, actual_Irp_19: int) returns (Tmp_912: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_30: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_521: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;
  var vslice_dummy_var_524: int;
  var vslice_dummy_var_1499: int;
  var vslice_dummy_var_1500: int;
  var vslice_dummy_var_1501: int;
  var vslice_dummy_var_1502: int;

  anon0:
    call {:si_unique_call 2061} completion := __HAVOC_malloc(4);
    Irp_19 := actual_Irp_19;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.INT4[completion] := 0;
    status_30 := 259;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := 259;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L29;

  L29:
    Tmp_912 := status_30;
    call {:si_unique_call 2062} SLIC_PoCallDriver_exit(0, Irp_19);
    goto LM2;

  LM2:
    return;

  anon56_Then:
    havoc vslice_dummy_var_1499;
    call {:si_unique_call 2063} vslice_dummy_var_521 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_1499, completion);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L23;

  anon54_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L19;

  anon69_Then:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := -1073741823;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L58;

  L58:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    havoc vslice_dummy_var_1500;
    call {:si_unique_call 2064} vslice_dummy_var_524 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_1500, completion);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L62;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L58;

  anon70_Then:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := -1073741536;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L32;

  L32:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    havoc vslice_dummy_var_1501;
    call {:si_unique_call 2065} vslice_dummy_var_522 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_1501, completion);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L36;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L32;

  anon53_Then:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L45;

  L45:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    havoc vslice_dummy_var_1502;
    call {:si_unique_call 2066} vslice_dummy_var_523 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_1502, completion);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    goto L29;

  anon63_Then:
    goto L29;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L49;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L45;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_20: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_914: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_914 == 0 || Tmp_914 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_20: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_914: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 2067} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_914 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 2;
    call {:si_unique_call 2068} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 2069} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 2070} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_21: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_21: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 2071} State := __HAVOC_malloc(8);
    call {:si_unique_call 2072} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 2073} Tmp := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int)
{
  var {:scalar} new: int;
  var {:pointer} p_1: int;
  var vslice_dummy_var_525: int;
  var vslice_dummy_var_1503: int;

  anon0:
    call {:si_unique_call 2074} vslice_dummy_var_525 := __HAVOC_malloc(4);
    new := actual_new;
    p_1 := actual_p_1;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    havoc vslice_dummy_var_1503;
    Mem_T.INT4[p_1] := vslice_dummy_var_1503;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_3: int) returns (Tmp_919: int);
  free ensures {:va_keep} Tmp_919 == 1 || Tmp_919 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_3: int) returns (Tmp_919: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_919 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_919 := 0;
    goto L1;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_526: int;

  anon0:
    call {:si_unique_call 2075} vslice_dummy_var_526 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_8: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_8: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp_4: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_8: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_527: int;

  anon0:
    call {:si_unique_call 2076} vslice_dummy_var_527 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_8 := actual_Context_8;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 2077} irpSp_4 := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    return;
}



procedure {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex: int)
{
  var vslice_dummy_var_528: int;

  anon0:
    call {:si_unique_call 2078} vslice_dummy_var_528 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_927: int);
  free ensures {:va_keep} Tmp_927 == 1 || Tmp_927 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_927: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_927 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_927 := 0;
    goto L1;
}



procedure {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo: int, actual_Path: int, actual_ValueName: int) returns (Tmp_929: int);
  free ensures {:va_keep} Tmp_929 == 0 || Tmp_929 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo: int, actual_Path: int, actual_ValueName: int) returns (Tmp_929: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_929 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_929 := -1073741823;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_20: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_20: int)
{
  var vslice_dummy_var_529: int;

  anon0:
    call {:si_unique_call 2079} vslice_dummy_var_529 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_933: int);
  free ensures {:va_keep} Tmp_933 == 258 || Tmp_933 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_933: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_933 := 258;
    goto L1;

  L1:
    call {:si_unique_call 2080} SLIC_KeWaitForSingleObject_exit(0, Tmp_933);
    return;

  anon6_Then:
    Tmp_933 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_933 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_22: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_22: int)
{
  var vslice_dummy_var_530: int;

  anon0:
    call {:si_unique_call 2081} vslice_dummy_var_530 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_937: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_937: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_937 := OldState;
    return;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_941: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_941: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    Tmp_941 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_8)))];
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_531: int;

  anon0:
    call {:si_unique_call 2082} vslice_dummy_var_531 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    return;
}



procedure {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin()
{
  var vslice_dummy_var_532: int;

  anon0:
    call {:si_unique_call 2083} vslice_dummy_var_532 := __HAVOC_malloc(4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_949: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_0, io_complete_request_called, yogi_error, Mem_T.INT4, Mem_T.CurrentStackLocation_unnamed_tag_7, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, Mem_T.PVOID;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "main"} {:osmodel} main() returns (Tmp_949: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_950: int;
  var {:scalar} Tmp_952: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var SerialGlobals__Loc: int;
  var SerialPhysicalZero__Loc: int;
  var SerialPhysicalZero_1__Loc: int;
  var GUID_DEVINTERFACE_COMPORT__Loc: int;
  var driverDefaults__Loc: int;
  var SLAM_guard_S_0_init__Loc: int;
  var SerialPortNameGuid__Loc: int;
  var SerailPortPerfGuid__Loc: int;
  var SerialPortPropertiesGuid__Loc: int;
  var SerialPortHWGuid__Loc: int;
  var SerialPortCommGuid__Loc: int;
  var SerialPhysicalZero_2__Loc: int;
  var SerialPhysicalZero_3__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var sdv_MmMapIoSpace_int__Loc: int;
  var vslice_dummy_var_1504: int;
  var vslice_dummy_var_1505: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 2084} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 2085} SerialGlobals__Loc := __HAVOC_malloc_or_null(28);
    assume SerialGlobals__Loc == SerialGlobals;
    assume SerialGlobals != 0;
    call {:si_unique_call 2086} SerialPhysicalZero__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero__Loc == SerialPhysicalZero;
    assume SerialPhysicalZero != 0;
    call {:si_unique_call 2087} SerialPhysicalZero_1__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_1__Loc == SerialPhysicalZero_1;
    assume SerialPhysicalZero_1 != 0;
    call {:si_unique_call 2088} GUID_DEVINTERFACE_COMPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_COMPORT__Loc == GUID_DEVINTERFACE_COMPORT;
    assume GUID_DEVINTERFACE_COMPORT != 0;
    call {:si_unique_call 2089} driverDefaults__Loc := __HAVOC_malloc_or_null(88);
    assume driverDefaults__Loc == driverDefaults;
    assume driverDefaults != 0;
    call {:si_unique_call 2090} SLAM_guard_S_0_init__Loc := __HAVOC_malloc_or_null(240);
    assume SLAM_guard_S_0_init__Loc == SLAM_guard_S_0_init;
    assume SLAM_guard_S_0_init != 0;
    call {:si_unique_call 2091} SerialPortNameGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortNameGuid__Loc == SerialPortNameGuid;
    assume SerialPortNameGuid != 0;
    call {:si_unique_call 2092} SerailPortPerfGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerailPortPerfGuid__Loc == SerailPortPerfGuid;
    assume SerailPortPerfGuid != 0;
    call {:si_unique_call 2093} SerialPortPropertiesGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortPropertiesGuid__Loc == SerialPortPropertiesGuid;
    assume SerialPortPropertiesGuid != 0;
    call {:si_unique_call 2094} SerialPortHWGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortHWGuid__Loc == SerialPortHWGuid;
    assume SerialPortHWGuid != 0;
    call {:si_unique_call 2095} SerialPortCommGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortCommGuid__Loc == SerialPortCommGuid;
    assume SerialPortCommGuid != 0;
    call {:si_unique_call 2096} SerialPhysicalZero_2__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_2__Loc == SerialPhysicalZero_2;
    assume SerialPhysicalZero_2 != 0;
    call {:si_unique_call 2097} SerialPhysicalZero_3__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_3__Loc == SerialPhysicalZero_3;
    assume SerialPhysicalZero_3 != 0;
    call {:si_unique_call 2098} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 2099} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 2100} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 2101} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 2102} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2103} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 2104} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 2105} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 2106} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 2107} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 2108} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 2109} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2110} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 2111} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 2112} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 2113} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 2114} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 2115} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 2116} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 2117} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 2118} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 2119} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 2120} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 2121} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 2122} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 2123} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2124} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 2125} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 2126} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 2127} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 2128} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 2129} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 2130} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 2131} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 2132} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 2133} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 2134} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 2135} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 2136} sdv_MmMapIoSpace_int__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MmMapIoSpace_int__Loc == sdv_MmMapIoSpace_int;
    assume sdv_MmMapIoSpace_int != 0;
    call {:si_unique_call 2137} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 2138} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdComPortInUse == boogieTmp;
    call {:si_unique_call 2139} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 2140} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 2141} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 2142} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 2143} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 2144} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 2145} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 2146} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 2147} vslice_dummy_var_1504 := __HAVOC_malloc(60);
    call {:si_unique_call 2148} vslice_dummy_var_1505 := __HAVOC_malloc(60);
    assume {:mainInitDone} true;
    call {:si_unique_call 2149} corralExtraInit();
    call {:si_unique_call 2150} corralExplainErrorInit();
    call {:si_unique_call 2151} _sdv_init24();
    call {:si_unique_call 2152} _sdv_init22();
    call {:si_unique_call 2153} _sdv_init18();
    call {:si_unique_call 2154} _sdv_init19();
    call {:si_unique_call 2155} _sdv_init17();
    call {:si_unique_call 2156} _sdv_init1();
    call {:si_unique_call 2157} _sdv_init4();
    call {:si_unique_call 2158} _sdv_init5();
    call {:si_unique_call 2159} _sdv_init3();
    call {:si_unique_call 2160} _sdv_init16();
    call {:si_unique_call 2161} _sdv_init14();
    call {:si_unique_call 2162} _sdv_init21();
    call {:si_unique_call 2163} _sdv_init6();
    call {:si_unique_call 2164} _sdv_init15();
    call {:si_unique_call 2165} _sdv_init10();
    call {:si_unique_call 2166} _sdv_init11();
    call {:si_unique_call 2167} _sdv_init9();
    call {:si_unique_call 2168} _sdv_init12();
    call {:si_unique_call 2169} _sdv_init13();
    call {:si_unique_call 2170} _sdv_init7();
    call {:si_unique_call 2171} _sdv_init8();
    call {:si_unique_call 2172} _sdv_init2();
    call {:si_unique_call 2173} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_952 := 0;
    goto L47;

  L47:
    assume Tmp_952 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_950 := 0;
    goto L51;

  L51:
    assume Tmp_950 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_irp)))] := sdv_harnessStackLocation;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_other_irp)))] := sdv_other_harnessStackLocation;
    call {:si_unique_call 2174} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L45;

  L45:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L45;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_950 := 1;
    goto L51;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_952 := 1;
    goto L47;
}



procedure {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_953: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_953: int)
{
  var {:pointer} sdv_820: int;

  anon0:
    call {:si_unique_call 2175} sdv_820 := __HAVOC_malloc(1);
    Tmp_953 := sdv_820;
    return;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc, Mem_T.MajorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_533: int;

  anon0:
    call {:si_unique_call 2176} vslice_dummy_var_533 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_22: int) returns (Tmp_957: int);
  free ensures {:va_keep} Tmp_957 == 0 || Tmp_957 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_22: int) returns (Tmp_957: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_957 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_957 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_959: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_959: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_959 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_534: int;

  anon0:
    call {:si_unique_call 2177} vslice_dummy_var_534 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int)
{
  var vslice_dummy_var_535: int;

  anon0:
    call {:si_unique_call 2178} vslice_dummy_var_535 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_536: int;

  anon0:
    call {:si_unique_call 2179} vslice_dummy_var_536 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_537: int;

  anon0:
    call {:si_unique_call 2180} vslice_dummy_var_537 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int)
{
  var vslice_dummy_var_538: int;

  anon0:
    call {:si_unique_call 2181} vslice_dummy_var_538 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_539: int;

  anon0:
    call {:si_unique_call 2182} vslice_dummy_var_539 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    return;
}



procedure {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType_1: int, actual_BusNumber_1: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_11: int) returns (Tmp_975: int);
  free ensures {:va_keep} Tmp_975 == 0 || Tmp_975 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType_1: int, actual_BusNumber_1: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_11: int) returns (Tmp_975: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_975 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_975 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int)
{
  var vslice_dummy_var_540: int;

  anon0:
    call {:si_unique_call 2183} vslice_dummy_var_540 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int)
{
  var vslice_dummy_var_541: int;

  anon0:
    call {:si_unique_call 2184} vslice_dummy_var_541 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_2: int)
{
  var vslice_dummy_var_542: int;

  anon0:
    call {:si_unique_call 2185} vslice_dummy_var_542 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_983: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_983: int)
{
  var {:pointer} ps: int;
  var {:scalar} minor: int;
  var {:scalar} sdv_831: int;
  var {:scalar} Tmp_985: int;
  var {:scalar} status_32: int;
  var {:scalar} Tmp_986: int;
  var {:pointer} po: int;
  var {:pointer} pirp_12: int;

  anon0:
    po := actual_po;
    pirp_12 := actual_pirp_12;
    status_32 := 0;
    minor := sdv_831;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    ps := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_12)))];
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 2186} sdv_SetStatus(pirp_12);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2187} sdv_stub_dispatch_begin();
    goto anon121_Then, anon121_Else;

  anon121_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    goto anon137_Then, anon137_Else;

  anon137_Else:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon133_Then, anon133_Else;

  anon133_Else:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    goto anon131_Then, anon131_Else;

  anon131_Else:
    goto anon130_Then, anon130_Else;

  anon130_Else:
    goto anon129_Then, anon129_Else;

  anon129_Else:
    goto anon128_Then, anon128_Else;

  anon128_Else:
    goto anon127_Then, anon127_Else;

  anon127_Else:
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 27;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    goto L60;

  L60:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    goto anon125_Then, anon125_Else;

  anon125_Else:
    Tmp_986 := 0;
    goto L271;

  L271:
    assume Tmp_986 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    goto L66;

  L66:
    call {:si_unique_call 2188} status_32 := SerialPnpDispatch(po, pirp_12);
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} yogi_error != 1;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2189} SLIC_SerialPnpDispatch_exit(strConst__li2bpl0, status_32);
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 2190} sdv_stub_dispatch_end(status_32, 0);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Tmp_983 := status_32;
    goto LM2;

  LM2:
    return;

  anon180_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon153_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon179_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon124_Then:
    goto L66;

  anon125_Then:
    Tmp_986 := 1;
    goto L271;

  anon123_Then:
    goto L61;

  anon178_Then:
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} sdv_start_irp_already_issued != 0;
    Tmp_985 := 0;
    goto L278;

  L278:
    assume Tmp_985 != 0;
    goto L60;

  anon122_Then:
    assume {:partition} sdv_start_irp_already_issued == 0;
    Tmp_985 := 1;
    goto L278;

  anon126_Then:
    call {:si_unique_call 2191} status_32 := sdv_DoNothing();
    goto L72;

  anon127_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 23;
    call {:si_unique_call 2192} status_32 := SerialSystemControlDispatch(po, pirp_12);
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} yogi_error != 1;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2193} SLIC_SerialSystemControlDispatch_exit(strConst__li2bpl0, status_32);
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon177_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon152_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon176_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon128_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 22;
    call {:si_unique_call 2194} sdv_SetPowerIrpMinorFunction(pirp_12);
    call {:si_unique_call 2195} status_32 := SerialPowerDispatch(po, pirp_12);
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} yogi_error != 1;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2196} SLIC_SerialPowerDispatch_exit(strConst__li2bpl0, status_32);
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon175_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon151_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon174_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon129_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 18;
    call {:si_unique_call 2197} status_32 := SerialCleanup(po, pirp_12);
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} yogi_error != 1;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2198} SLIC_SerialCleanup_exit(strConst__li2bpl0, status_32);
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon173_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon150_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon172_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon130_Then:
    call {:si_unique_call 2199} status_32 := sdv_DoNothing();
    goto L72;

  anon131_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 16;
    call {:si_unique_call 2200} status_32 := sdv_DoNothing();
    goto L72;

  anon132_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 15;
    call {:si_unique_call 2201} status_32 := SerialInternalIoControl(po, pirp_12);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} yogi_error != 1;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2202} SLIC_SerialInternalIoControl_exit(strConst__li2bpl0, status_32);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon171_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon149_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon170_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon133_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 14;
    call {:si_unique_call 2203} status_32 := SerialIoControl(po, pirp_12);
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} yogi_error != 1;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2204} SLIC_SerialIoControl_exit(strConst__li2bpl0, status_32);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon169_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon148_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon168_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon134_Then:
    call {:si_unique_call 2205} status_32 := sdv_DoNothing();
    goto L72;

  anon135_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 9;
    call {:si_unique_call 2206} status_32 := SerialFlush(po, pirp_12);
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} yogi_error != 1;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2207} SLIC_SerialFlush_exit(strConst__li2bpl0, status_32);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon167_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon147_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon166_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon136_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 6;
    call {:si_unique_call 2208} status_32 := SerialSetInformationFile(po, pirp_12);
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} yogi_error != 1;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2209} SLIC_SerialSetInformationFile_exit(strConst__li2bpl0, status_32);
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon165_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon146_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon164_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon137_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 5;
    call {:si_unique_call 2210} status_32 := SerialQueryInformationFile(po, pirp_12);
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} yogi_error != 1;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2211} SLIC_SerialQueryInformationFile_exit(strConst__li2bpl0, status_32);
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon163_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon145_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon162_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon138_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 4;
    call {:si_unique_call 2212} status_32 := SerialWrite(po, pirp_12);
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} yogi_error != 1;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2213} SLIC_SerialWrite_exit(strConst__li2bpl0, status_32);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon161_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon144_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon160_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon139_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 3;
    call {:si_unique_call 2214} status_32 := SerialRead(po, pirp_12);
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} yogi_error != 1;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2215} SLIC_SerialRead_exit(strConst__li2bpl0, status_32);
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon159_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon143_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon158_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon140_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 2;
    call {:si_unique_call 2216} status_32 := SerialClose(po, pirp_12);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} yogi_error != 1;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2217} SLIC_SerialClose_exit(strConst__li2bpl0, status_32);
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon157_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon142_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon156_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon121_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 0;
    call {:si_unique_call 2218} status_32 := SerialCreateOpen(po, pirp_12);
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} yogi_error != 1;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2219} SLIC_SerialCreateOpen_exit(strConst__li2bpl0, status_32);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon155_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon141_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon154_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_987: int);
  free ensures {:va_keep} Tmp_987 == -1073741823 || Tmp_987 == -1073741808 || Tmp_987 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_987: int)
{
  var {:scalar} Tmp_989: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_987 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_987 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_989 := 0;
    goto L22;

  L22:
    assume Tmp_989 != 0;
    Tmp_987 := 0;
    goto L1;

  anon8_Then:
    Tmp_989 := 1;
    goto L22;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int)
{
  var {:scalar} new_2: int;
  var vslice_dummy_var_543: int;

  anon0:
    call {:si_unique_call 2220} vslice_dummy_var_543 := __HAVOC_malloc(4);
    new_2 := actual_new_2;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_544: int;

  anon0:
    call {:si_unique_call 2221} vslice_dummy_var_544 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int)
{
  var vslice_dummy_var_545: int;

  anon0:
    call {:si_unique_call 2222} vslice_dummy_var_545 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_996: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_996 == -1073741811 || Tmp_996 == -1073741823 || Tmp_996 == 0 || Tmp_996 == 5 || Tmp_996 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_996: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_843: int;
  var {:scalar} Length_3: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_3 := actual_Length_3;
    ResultLength := actual_ResultLength;
    L := sdv_843;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_996 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_996 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_3;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_3 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_996 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_3 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_3;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_996 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_3 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_996 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_3;
    goto L13;
}



procedure {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_3: int, actual_CacheType: int) returns (Tmp_998: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_3: int, actual_CacheType: int) returns (Tmp_998: int)
{
  var {:scalar} PhysicalAddress: int;
  var {:pointer} structPtr888PhysicalAddress: int;

  anon0:
    call {:si_unique_call 2223} PhysicalAddress := __HAVOC_malloc(20);
    structPtr888PhysicalAddress := actual_structPtr888PhysicalAddress;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Tmp_998 := sdv_MmMapIoSpace_int;
    return;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int)
{
  var vslice_dummy_var_546: int;

  anon0:
    call {:si_unique_call 2224} vslice_dummy_var_546 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_1002: int);
  free ensures {:va_keep} Tmp_1002 == 1 || Tmp_1002 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_1002: int)
{
  var {:scalar} b_1: int;

  anon0:
    call {:si_unique_call 2225} b_1 := OneOfTwoBOOLEAN();
    Tmp_1002 := b_1;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_547: int;

  anon0:
    call {:si_unique_call 2226} vslice_dummy_var_547 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int)
{
  var vslice_dummy_var_548: int;

  anon0:
    call {:si_unique_call 2227} vslice_dummy_var_548 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1010: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1010: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_1010 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "_sdv_init22"} {:osmodel} _sdv_init22();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "_sdv_init22"} {:osmodel} _sdv_init22()
{
  var vslice_dummy_var_549: int;

  anon0:
    call {:si_unique_call 2228} vslice_dummy_var_549 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_io_create_device_called == 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_inside_init_entrypoint == 0;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant1246;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant1249;
    assume sdv_p_devobj_top == sdv_devobj_top;
    Mem_T.INT4[sdv_MmMapIoSpace_int] := 0;
    return;
}



procedure {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_1: int)
{
  var vslice_dummy_var_550: int;

  anon0:
    call {:si_unique_call 2229} vslice_dummy_var_550 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_2: int) returns (Tmp_1016: int);
  free ensures {:va_keep} Tmp_1016 == 1 || Tmp_1016 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_2: int) returns (Tmp_1016: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1016 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1016 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_23: int) returns (Tmp_1018: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_23: int) returns (Tmp_1018: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_33: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_551: int;
  var vslice_dummy_var_552: int;
  var vslice_dummy_var_553: int;
  var vslice_dummy_var_554: int;
  var vslice_dummy_var_1506: int;
  var vslice_dummy_var_1507: int;
  var vslice_dummy_var_1508: int;
  var vslice_dummy_var_1509: int;

  anon0:
    call {:si_unique_call 2230} completion_1 := __HAVOC_malloc(4);
    Irp_23 := actual_Irp_23;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_33 := 259;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 259;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L29;

  L29:
    Tmp_1018 := status_33;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    havoc vslice_dummy_var_1506;
    call {:si_unique_call 2231} vslice_dummy_var_551 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_1506, completion_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L23;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L19;

  anon68_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := -1073741823;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L58;

  L58:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc vslice_dummy_var_1507;
    call {:si_unique_call 2232} vslice_dummy_var_554 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_1507, completion_1);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L62;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L58;

  anon69_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := -1073741536;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L32;

  L32:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    havoc vslice_dummy_var_1508;
    call {:si_unique_call 2233} vslice_dummy_var_552 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_1508, completion_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L36;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L32;

  anon70_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L45;

  L45:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    havoc vslice_dummy_var_1509;
    call {:si_unique_call 2234} vslice_dummy_var_553 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_1509, completion_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    goto L29;

  anon62_Then:
    goto L29;

  anon61_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L49;

  anon60_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L45;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_555: int;

  anon0:
    call {:si_unique_call 2235} vslice_dummy_var_555 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_26: int, actual_Irp_24: int, actual_Context_12: int, actual_Completion: int) returns (Tmp_1022: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_26: int, actual_Irp_24: int, actual_Context_12: int, actual_Completion: int) returns (Tmp_1022: int)
{
  var {:scalar} Status_3: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} Irp_24: int;
  var {:pointer} Context_12: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_26 := actual_DeviceObject_26;
    Irp_24 := actual_Irp_24;
    Context_12 := actual_Context_12;
    Completion := actual_Completion;
    call {:si_unique_call 2236} irpsp := sdv_IoGetNextIrpStackLocation(Irp_24);
    Status_3 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 2237} Status_3 := SerialFinishSystemPower(DeviceObject_26, Irp_24, Context_12);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 2238} Status_3 := SerialSetPowerD0Completion(DeviceObject_26, Irp_24, Context_12);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 2239} Status_3 := SerialSyncCompletion(DeviceObject_26, Irp_24, Context_12);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 2240} Status_3 := SerialWaitWakeCompletion(DeviceObject_26, Irp_24, Context_12);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    Tmp_1022 := Status_3;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    goto L62;

  anon14_Then:
    goto L45;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    goto L28;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    goto L11;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_1: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_556: int;

  anon0:
    call {:si_unique_call 2241} vslice_dummy_var_556 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_1 := actual_Type_1;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int)
{
  var vslice_dummy_var_557: int;

  anon0:
    call {:si_unique_call 2242} vslice_dummy_var_557 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_27: int, actual_Irp_25: int) returns (Tmp_1028: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_27: int, actual_Irp_25: int) returns (Tmp_1028: int)
{
  var {:pointer} Irp_25: int;

  anon0:
    Irp_25 := actual_Irp_25;
    call {:si_unique_call 2243} Tmp_1028 := IofCallDriver(0, Irp_25);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2244} SLIC_sdv_IoCallDriver_exit(0, Irp_25);
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_3: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_3: int)
{
  var {:pointer} p_3: int;
  var vslice_dummy_var_558: int;
  var vslice_dummy_var_1510: int;

  anon0:
    call {:si_unique_call 2245} vslice_dummy_var_558 := __HAVOC_malloc(4);
    p_3 := actual_p_3;
    assume {:nonnull} p_3 != 0;
    assume p_3 > 0;
    havoc vslice_dummy_var_1510;
    Mem_T.INT4[p_3] := vslice_dummy_var_1510;
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_1032: int);
  free ensures {:va_keep} Tmp_1032 == 0 || Tmp_1032 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_1032: int)
{
  var {:scalar} choice_13: int;
  var {:scalar} Tmp_1034: int;
  var {:scalar} Status_4: int;

  anon0:
    Status_4 := actual_Status_4;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_4 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_4;
    Tmp_1032 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_4 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_13 != 0;
    Tmp_1034 := 1;
    goto L14;

  L14:
    Tmp_1032 := Tmp_1034;
    goto L1;

  anon8_Then:
    assume {:partition} choice_13 == 0;
    Tmp_1034 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_4;
    goto L9;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_4: int, actual_Tag_1: int) returns (Tmp_1035: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_4: int, actual_Tag_1: int) returns (Tmp_1035: int)
{
  var {:pointer} sdv_859: int;
  var {:scalar} NumberOfBytes_4: int;

  anon0:
    NumberOfBytes_4 := actual_NumberOfBytes_4;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2246} sdv_859 := __HAVOC_malloc(NumberOfBytes_4);
    Tmp_1035 := sdv_859;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1035 := 0;
    goto L1;
}



procedure {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1037: int);
  free ensures {:va_keep} Tmp_1037 == 0 || Tmp_1037 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1037: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1037 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1037 := -1073741823;
    goto L1;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1039: int);
  free ensures {:va_keep} Tmp_1039 == -1073741772 || Tmp_1039 == -1073741824 || Tmp_1039 == -1073741789 || Tmp_1039 == -1073741670 || Tmp_1039 == -1073741808 || Tmp_1039 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1039: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_1039 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_1039 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_1039 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_1039 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_1039 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_1039 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_2: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1041: int);
  free ensures {:va_keep} Tmp_1041 == -1073741811 || Tmp_1041 == -1073741670 || Tmp_1041 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_2: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1041: int)
{
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_1041 := -1073741811;
    goto L1;

  L1:
    return;

  anon5_Then:
    Tmp_1041 := -1073741670;
    goto L1;

  anon6_Then:
    Tmp_1041 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_559: int;

  anon0:
    call {:si_unique_call 2247} vslice_dummy_var_559 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_560: int;

  anon0:
    call {:si_unique_call 2248} vslice_dummy_var_560 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_28: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_1047: int);
  free ensures {:va_keep} Tmp_1047 == -1073741811 || Tmp_1047 == -1073741808 || Tmp_1047 == -1073741823 || Tmp_1047 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_28: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_1047: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1047 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1047 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_1047 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1047 := 0;
    goto L1;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_1049: int);
  free ensures {:va_keep} Tmp_1049 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_1049: int)
{

  anon0:
    Tmp_1049 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1051: int);
  free ensures {:va_keep} Tmp_1051 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1051: int)
{

  anon0:
    Tmp_1051 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_29: int, actual_Action: int) returns (Tmp_1053: int);
  free ensures {:va_keep} Tmp_1053 == -1073741823 || Tmp_1053 == -1073741811 || Tmp_1053 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_29: int, actual_Action: int) returns (Tmp_1053: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1053 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1053 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_1053 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int)
{
  var {:pointer} Event_2: int;
  var vslice_dummy_var_561: int;

  anon0:
    call {:si_unique_call 2249} vslice_dummy_var_561 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddressSpace__CONFIG_DATA"} {:fieldname "AddressSpace"} AddressSpace__CONFIG_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__SERIAL_DEVICE_EXTENSION"} {:fieldname "AddressSpace"} AddressSpace__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.Affinity__CONFIG_DATA"} {:fieldname "Affinity"} Affinity__CONFIG_DATA(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_45"} {:fieldname "Affinity"} Affinity_unnamed_tag_45(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_40"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResources_unnamed_tag_40"} {:fieldname "AllocatedResources"} AllocatedResources_unnamed_tag_40(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__FILE_STANDARD_INFORMATION"} {:fieldname "AllocationSize"} AllocationSize__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Argument4"} Argument4_unnamed_tag_42(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_3"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BaseIOAddress__SERIAL_WMI_HW_DATA"} {:fieldname "BaseIOAddress"} BaseIOAddress__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.BaudClock__CM_SERIAL_DEVICE_DATA"} {:fieldname "BaudClock"} BaudClock__CM_SERIAL_DEVICE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BaudRate__SERIAL_BAUD_RATE"} {:fieldname "BaudRate"} BaudRate__SERIAL_BAUD_RATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BitsPerByte__SERIAL_WMI_COMM_DATA"} {:fieldname "BitsPerByte"} BitsPerByte__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BreakChar__SERIAL_CHARS"} {:fieldname "BreakChar"} BreakChar__SERIAL_CHARS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BufferSizePt8__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSizePt8"} BufferSizePt8__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.BufferSize__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSize"} BufferSize__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CONFIG_DATA"} {:fieldname "BusNumber"} BusNumber__CONFIG_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__SERIAL_DEVICE_EXTENSION"} {:fieldname "BusNumber"} BusNumber__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.CIsrSw__SERIAL_DEVICE_EXTENSION"} {:fieldname "CIsrSw"} CIsrSw__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2644
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CharsCopied__SERIAL_UPDATE_CHAR"} {:fieldname "CharsCopied"} CharsCopied__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "CharsInInterruptBuffer"} CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ClockRate"} ClockRate__CONFIG_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.ClockRate__SERIAL_DEVICE_EXTENSION"} {:fieldname "ClockRate"} ClockRate__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 424
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommErrorDpc"} CommErrorDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 872
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommWaitDpc"} CommWaitDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 916
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteImmediateDpc"} CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 960
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteReadDpc"} CompleteReadDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 696
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteWriteDpc"} CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 652
}

function {:inline true} {:fieldmap "Mem_T.Completed__SERIAL_UPDATE_CHAR"} {:fieldname "Completed"} Completed__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.Context__SERIAL_CISR_SW"} {:fieldname "Context"} Context__SERIAL_CISR_SW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ControlHandShake__SERIAL_HANDFLOW"} {:fieldname "ControlHandShake"} ControlHandShake__SERIAL_HANDFLOW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__CONFIG_DATA"} {:fieldname "Controller"} Controller__CONFIG_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__SERIAL_DEVICE_EXTENSION"} {:fieldname "Controller"} Controller__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOfTryingToLowerRTS"} CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 408
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Counter__SERIAL_XOFF_COUNTER"} {:fieldname "Counter"} Counter__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSerialCommEntry"} CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 640
}

function {:inline true} {:fieldmap "Mem_T.CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSymbolicLink"} CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 636
}

function {:inline true} {:fieldmap "Mem_T.CurrentBaud__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentBaud"} CurrentBaud__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 400
}

function {:inline true} {:fieldmap "Mem_T.CurrentByteOffset__FILE_POSITION_INFORMATION"} {:fieldname "CurrentByteOffset"} CurrentByteOffset__FILE_POSITION_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentCharSlot"} CurrentCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentImmediateIrp"} CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 308
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentMaskIrp"} CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentPurgeIrp"} CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 300
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentReadIrp"} CurrentReadIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.CurrentRxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentRxQueue"} CurrentRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_7"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_7(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentTxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentTxQueue"} CurrentTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWaitIrp"} CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 304
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWriteIrp"} CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentXoffIrp"} CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T.CutOverAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "CutOverAmount"} CutOverAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Data__SERIAL_IOCTL_SYNC"} {:fieldname "Data"} Data__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DeletePending__FILE_STANDARD_INFORMATION"} {:fieldname "DeletePending"} DeletePending__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceClassSymbolicName"} DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2632
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DeviceIsOpened__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceIsOpened"} DeviceIsOpened__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 524
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceName"} DeviceName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__IO_STACK_LOCATION"} {:fieldname "DeviceObject"} DeviceObject__IO_STACK_LOCATION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DevicePNPAccept"} DevicePNPAccept__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2652
}

function {:inline true} {:fieldmap "Mem_T.DeviceStateMap__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceStateMap"} DeviceStateMap__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2996
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_DEVICE_STATE"} {:fieldname "DeviceState"} DeviceState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2980
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceWake"} DeviceWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3548
}

function {:inline true} {:fieldmap "Mem_T.Directory__FILE_STANDARD_INFORMATION"} {:fieldname "Directory"} Directory__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DisablePort"} DisablePort__CONFIG_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.DisablePort__SERIAL_USER_DATA"} {:fieldname "DisablePort"} DisablePort__SERIAL_USER_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DosName"} DosName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DpcCount__SERIAL_DEVICE_EXTENSION"} {:fieldname "DpcCount"} DpcCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3756
}

function {:inline true} {:fieldmap "Mem_T.Dpc__KTIMER"} {:fieldname "Dpc"} Dpc__KTIMER(x: int) : int
{
  x + 184
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__DEVICE_OBJECT"} {:fieldname "DriverObject"} DriverObject__DEVICE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DriverObject"} DriverObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2472
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EndOfFile__FILE_STANDARD_INFORMATION"} {:fieldname "EndOfFile"} EndOfFile__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EofChar__SERIAL_CHARS"} {:fieldname "EofChar"} EofChar__SERIAL_CHARS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ErrorChar__SERIAL_CHARS"} {:fieldname "ErrorChar"} ErrorChar__SERIAL_CHARS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ErrorWord__SERIAL_DEVICE_EXTENSION"} {:fieldname "ErrorWord"} ErrorWord__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.EscapeChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "EscapeChar"} EscapeChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 612
}

function {:inline true} {:fieldmap "Mem_T.EventChar__SERIAL_CHARS"} {:fieldname "EventChar"} EventChar__SERIAL_CHARS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_CHECK_OPEN"} {:fieldname "Extension"} Extension__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_IOCTL_SYNC"} {:fieldname "Extension"} Extension__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_RESIZE_PARAMS"} {:fieldname "Extension"} Extension__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_UPDATE_CHAR"} {:fieldname "Extension"} Extension__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extensions__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "Extensions"} Extensions__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FifoPresent__SERIAL_DEVICE_EXTENSION"} {:fieldname "FifoPresent"} FifoPresent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 624
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_15"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_15(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FirstReadableChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "FirstReadableChar"} FirstReadableChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 344
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Flags"} Flags__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2816
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FlowReplace__SERIAL_HANDFLOW"} {:fieldname "FlowReplace"} FlowReplace__SERIAL_HANDFLOW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnableDefault__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnableDefault"} ForceFIFOEnableDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnable__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnable"} ForceFIFOEnable__SERIAL_USER_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "ForceFifoEnableDefault"} ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFifoEnable"} ForceFifoEnable__CONFIG_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_HANDFLOW"} {:fieldname "HandFlow"} HandFlow__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.HandFlow__SERIAL_DEVICE_EXTENSION"} {:fieldname "HandFlow"} HandFlow__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HistoryMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "HistoryMask"} HistoryMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.IER__SERIAL_DEVICE_STATE"} {:fieldname "IER"} IER__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_34"} {:fieldname "IdType"} IdType_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ImmediateTotalTimer"} ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1888
}

function {:inline true} {:fieldmap "Mem_T.InSize__SERIAL_QUEUE_SIZE"} {:fieldname "InSize"} InSize__SERIAL_QUEUE_SIZE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Indexed"} Indexed__CONFIG_DATA(x: int) : int
{
  x + 164
}

function {:inline true} {:fieldmap "Mem_T.Indexed__SERIAL_DEVICE_EXTENSION"} {:fieldname "Indexed"} Indexed__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CONFIG_DATA"} {:fieldname "InterfaceType"} InterfaceType__CONFIG_DATA(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterfaceType"} InterfaceType__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__CONFIG_DATA"} {:fieldname "InterruptMode"} InterruptMode__CONFIG_DATA(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptReadBuffer"} InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.InterruptShareable__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptShareable"} InterruptShareable__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__CONFIG_DATA"} {:fieldname "InterruptStatus"} InterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptStatus"} InterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.InterruptType__SERIAL_WMI_HW_DATA"} {:fieldname "InterruptType"} InterruptType__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.P_KINTERRUPT"} {:fieldname "Interrupt"} Interrupt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 252
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_43"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_43(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IntervalReadTimeoutDpc"} IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.IntervalTimeToUse__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTimeToUse"} IntervalTimeToUse__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.IntervalTime__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTime"} IntervalTime__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_31"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_31(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._IO_STATUS_BLOCK"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IrpMaskLocation__SERIAL_DEVICE_EXTENSION"} {:fieldname "IrpMaskLocation"} IrpMaskLocation__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.IrqAffinityMask__SERIAL_WMI_HW_DATA"} {:fieldname "IrqAffinityMask"} IrqAffinityMask__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IrqLevel__SERIAL_WMI_HW_DATA"} {:fieldname "IrqLevel"} IrqLevel__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IrqNumber__SERIAL_WMI_HW_DATA"} {:fieldname "IrqNumber"} IrqNumber__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IrqVector__SERIAL_WMI_HW_DATA"} {:fieldname "IrqVector"} IrqVector__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Irql__SERIAL_DEVICE_EXTENSION"} {:fieldname "Irql"} Irql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 556
}

function {:inline true} {:fieldmap "Mem_T.IsBusy__SERIAL_WMI_COMM_DATA"} {:fieldname "IsBusy"} IsBusy__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.IsrFunc__SERIAL_CISR_SW"} {:fieldname "IsrFunc"} IsrFunc__SERIAL_CISR_SW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IsrUnlockPagesDpc"} IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1224
}

function {:inline true} {:fieldmap "Mem_T.IsrWaitMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "IsrWaitMask"} IsrWaitMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.LCR__SERIAL_DEVICE_STATE"} {:fieldname "LCR"} LCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.LastCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "LastCharSlot"} LastCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_44"} {:fieldname "Length"} Length_unnamed_tag_44(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_45"} {:fieldname "Level"} Level_unnamed_tag_45(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LineControl__SERIAL_DEVICE_EXTENSION"} {:fieldname "LineControl"} LineControl__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 520
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_7(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.LogFifoDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "LogFifoDefault"} LogFifoDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.LogFifo__CONFIG_DATA"} {:fieldname "LogFifo"} LogFifo__CONFIG_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "LongIntervalAmount"} LongIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowerDeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "LowerDeviceObject"} LowerDeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2464
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "LowerRTSTimer"} LowerRTSTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2272
}

function {:inline true} {:fieldmap "Mem_T.MCR__SERIAL_DEVICE_STATE"} {:fieldname "MCR"} MCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MaskInverted"} MaskInverted__CONFIG_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_USER_DATA"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_USER_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MaskQueue"} MaskQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.MaxBaud__SERIAL_COMMPROP"} {:fieldname "MaxBaud"} MaxBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.MaxRxQueue__SERIAL_COMMPROP"} {:fieldname "MaxRxQueue"} MaxRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.MaxTxQueue__SERIAL_COMMPROP"} {:fieldname "MaxTxQueue"} MaxTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.MaximumBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumBaudRate"} MaximumBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.MaximumInputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumInputBufferSize"} MaximumInputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumOutputBufferSize"} MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_43"} {:fieldname "Memory"} Memory_unnamed_tag_43(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NewBufferSize__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBufferSize"} NewBufferSize__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.NewBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBuffer"} NewBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewDevicePowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewDevicePowerState"} NewDevicePowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3924
}

function {:inline true} {:fieldmap "Mem_T.NewExtension__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewExtension"} NewExtension__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.NewMaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewMaskInverted"} NewMaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 596
}

function {:inline true} {:fieldmap "Mem_T.NewPortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewPortIndex"} NewPortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 592
}

function {:inline true} {:fieldmap "Mem_T.NumberMoved__SERIAL_RESIZE_PARAMS"} {:fieldname "NumberMoved"} NumberMoved__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NumberNeededForRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "NumberNeededForRead"} NumberNeededForRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.NumberOfLinks__FILE_STANDARD_INFORMATION"} {:fieldname "NumberOfLinks"} NumberOfLinks__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NumberOfStrings__IO_ERROR_LOG_PACKET"} {:fieldname "NumberOfStrings"} NumberOfStrings__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "ObjectDirectory"} ObjectDirectory__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T.OldBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "OldBuffer"} OldBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "OpenCount"} OpenCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2820
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalController"} OriginalController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalInterruptStatus"} OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__CONFIG_DATA"} {:fieldname "OriginalIrql"} OriginalIrql__CONFIG_DATA(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalIrql"} OriginalIrql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__CONFIG_DATA"} {:fieldname "OriginalVector"} OriginalVector__CONFIG_DATA(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalVector"} OriginalVector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.OurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsrContext"} OurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.OurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsr"} OurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_6"} {:fieldname "Overlay"} Overlay_unnamed_tag_6(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION"} {:fieldname "OwnsPowerPolicy"} OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3532
}

function {:inline true} {:fieldmap "Mem_T.PDevObj__SERIAL_POWER_COMPLETION_CONTEXT"} {:fieldname "PDevObj"} PDevObj__SERIAL_POWER_COMPLETION_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PNPState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PNPState"} PNPState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2812
}

function {:inline true} {:fieldmap "Mem_T.PSIrp__SERIAL_POWER_COMPLETION_CONTEXT"} {:fieldname "PSIrp"} PSIrp__SERIAL_POWER_COMPLETION_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__SERIAL_COMMPROP"} {:fieldname "PacketLength"} PacketLength__SERIAL_COMMPROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketVersion__SERIAL_COMMPROP"} {:fieldname "PacketVersion"} PacketVersion__SERIAL_COMMPROP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParityCheckEnable__SERIAL_WMI_COMM_DATA"} {:fieldname "ParityCheckEnable"} ParityCheckEnable__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_LINE_CONTROL"} {:fieldname "Parity"} Parity__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_WMI_COMM_DATA"} {:fieldname "Parity"} Parity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Pdo__SERIAL_DEVICE_EXTENSION"} {:fieldname "Pdo"} Pdo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3552
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingDpcEvent"} PendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3760
}

function {:inline true} {:fieldmap "Mem_T.PendingIRPCnt__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingIRPCnt"} PendingIRPCnt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2648
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingIRPEvent"} PendingIRPEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2656
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PendingWakeIrp__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingWakeIrp"} PendingWakeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3560
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "PerhapsLowerRTSDpc"} PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1180
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_USER_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PermitShare"} PermitShare__CONFIG_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.PermitShare__SERIAL_DEVICE_EXTENSION"} {:fieldname "PermitShare"} PermitShare__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T.PermitSystemWideShare__CONFIG_DATA"} {:fieldname "PermitSystemWideShare"} PermitSystemWideShare__CONFIG_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PortIndex"} PortIndex__CONFIG_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.PortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortIndex"} PortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortOnAMultiportCard"} PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 548
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_43"} {:fieldname "Port"} Port_unnamed_tag_43(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_57"} {:fieldname "Port"} Port_unnamed_tag_57(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerD0Event"} PowerD0Event__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3024
}

function {:inline true} {:fieldmap "Mem_T.PowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PowerState"} PowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2468
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.ProvCapabilities__SERIAL_COMMPROP"} {:fieldname "ProvCapabilities"} ProvCapabilities__SERIAL_COMMPROP(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProvSubType__SERIAL_COMMPROP"} {:fieldname "ProvSubType"} ProvSubType__SERIAL_COMMPROP(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PurgeQueue"} PurgeQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "RXHolding"} RXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.ReadBufferBase__SERIAL_DEVICE_EXTENSION"} {:fieldname "ReadBufferBase"} ReadBufferBase__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.ReadIntervalTimeout__SERIAL_TIMEOUTS"} {:fieldname "ReadIntervalTimeout"} ReadIntervalTimeout__SERIAL_TIMEOUTS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ReadQueue"} ReadQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestIntervalTimer"} ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1504
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestTotalTimer"} ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1312
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutConstant"} ReadTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutMultiplier"} ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.Reopen__SERIAL_DEVICE_STATE"} {:fieldname "Reopen"} Reopen__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RetainPowerOnClose__SERIAL_DEVICE_EXTENSION"} {:fieldname "RetainPowerOnClose"} RetainPowerOnClose__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3536
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_FIRMWARE_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_USER_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFO"} RxFIFO__CONFIG_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.RxFIFO__SERIAL_USER_DATA"} {:fieldname "RxFIFO"} RxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.RxFifoTrigger__SERIAL_DEVICE_EXTENSION"} {:fieldname "RxFifoTrigger"} RxFifoTrigger__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.RxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "RxFifo"} RxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SendWaitWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendWaitWake"} SendWaitWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3556
}

function {:inline true} {:fieldmap "Mem_T.SendXoffChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXoffChar"} SendXoffChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 620
}

function {:inline true} {:fieldmap "Mem_T.SendXonChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXonChar"} SendXonChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 616
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SerialCount"} SerialCount__CONFIGURATION_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "SerialStartEvent"} SerialStartEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2824
}

function {:inline true} {:fieldmap "Mem_T.ServiceMask__SERIAL_COMMPROP"} {:fieldname "ServiceMask"} ServiceMask__SERIAL_COMMPROP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "SetPendingDpcEvent"} SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1268
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.SettableBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableBaudRate"} SettableBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.SettableBaud__SERIAL_COMMPROP"} {:fieldname "SettableBaud"} SettableBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.SettableDataBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableDataBits"} SettableDataBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.SettableData__SERIAL_COMMPROP"} {:fieldname "SettableData"} SettableData__SERIAL_COMMPROP(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SettableFlowControl__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableFlowControl"} SettableFlowControl__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SettableParams__SERIAL_COMMPROP"} {:fieldname "SettableParams"} SettableParams__SERIAL_COMMPROP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SettableParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParityCheck"} SettableParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.SettableParity__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParity"} SettableParity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SettableStopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableStopBits"} SettableStopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.SettableStopParity__SERIAL_COMMPROP"} {:fieldname "SettableStopParity"} SettableStopParity__SERIAL_COMMPROP(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__IO_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SharerList"} SharerList__SERIAL_CISR_SW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "ShortIntervalAmount"} ShortIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SkipNaming"} SkipNaming__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3916
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__CONFIG_DATA"} {:fieldname "SpanOfController"} SpanOfController__CONFIG_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfController"} SpanOfController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 416
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__CONFIG_DATA"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.SpecialChars__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpecialChars"} SpecialChars__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "StalledIrpQueue"} StalledIrpQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3180
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "StartTimerLowerRTSDpc"} StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1136
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_44"} {:fieldname "Start"} Start_unnamed_tag_44(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatusOfOpen__SERIAL_CHECK_OPEN"} {:fieldname "StatusOfOpen"} StatusOfOpen__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_LINE_CONTROL"} {:fieldname "StopBits"} StopBits__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "StopBits"} StopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.StringOffset__IO_ERROR_LOG_PACKET"} {:fieldname "StringOffset"} StringOffset__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Support16BitMode__SERIAL_WMI_COMM_DATA"} {:fieldname "Support16BitMode"} Support16BitMode__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SupportDTRDSR__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportDTRDSR"} SupportDTRDSR__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportIntervalTimeouts"} SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.SupportParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportParityCheck"} SupportParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.SupportRTSCTS__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportRTSCTS"} SupportRTSCTS__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.SupportXonXoff__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportXonXoff"} SupportXonXoff__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.SupportedBauds__SERIAL_DEVICE_EXTENSION"} {:fieldname "SupportedBauds"} SupportedBauds__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "SymbolicLinkName"} SymbolicLinkName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_3"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_3(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SystemWake"} SystemWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3544
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__CONFIG_DATA(x: int) : int
{
  x + 168
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_DEVICE_EXTENSION"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3920
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_USER_DATA"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_USER_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.TXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "TXHolding"} TXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Timeout__SERIAL_XOFF_COUNTER"} {:fieldname "Timeout"} Timeout__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Timeouts__SERIAL_DEVICE_EXTENSION"} {:fieldname "Timeouts"} Timeouts__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 436
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsrContext"} TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsr"} TopLevelOurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TotalCharsQueued__SERIAL_DEVICE_EXTENSION"} {:fieldname "TotalCharsQueued"} TotalCharsQueued__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 388
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalImmediateTimeoutDpc"} TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1004
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalReadTimeoutDpc"} TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 740
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalWriteTimeoutDpc"} TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 828
}

function {:inline true} {:fieldmap "Mem_T.TrController__CONFIG_DATA"} {:fieldname "TrController"} TrController__CONFIG_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.TrInterruptStatus__CONFIG_DATA"} {:fieldname "TrInterruptStatus"} TrInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.TrIrql__CONFIG_DATA"} {:fieldname "TrIrql"} TrIrql__CONFIG_DATA(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.TrVector__CONFIG_DATA"} {:fieldname "TrVector"} TrVector__CONFIG_DATA(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_FIRMWARE_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_USER_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFO"} TxFIFO__CONFIG_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.TxFIFO__SERIAL_USER_DATA"} {:fieldname "TxFIFO"} TxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.TxFifoAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "TxFifoAmount"} TxFifoAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 428
}

function {:inline true} {:fieldmap "Mem_T.TxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "TxFifo"} TxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_22"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_22(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapRegisters"} UnMapRegisters__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapStatus"} UnMapStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UsablePortMask__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "UsablePortMask"} UsablePortMask__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.UserClockRate__SERIAL_USER_DATA"} {:fieldname "UserClockRate"} UserClockRate__SERIAL_USER_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.UserIndexed__SERIAL_USER_DATA"} {:fieldname "UserIndexed"} UserIndexed__SERIAL_USER_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.UserPortIndex__SERIAL_USER_DATA"} {:fieldname "UserPortIndex"} UserPortIndex__SERIAL_USER_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.ValidDataMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "ValidDataMask"} ValidDataMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 608
}

function {:inline true} {:fieldmap "Mem_T.Vector__SERIAL_DEVICE_EXTENSION"} {:fieldname "Vector"} Vector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 552
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_45"} {:fieldname "Vector"} Vector_unnamed_tag_45(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.WmiCommData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiCommData"} WmiCommData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3608
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WmiHwData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiHwData"} WmiHwData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3708
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "WmiIdentifier"} WmiIdentifier__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3596
}

function {:inline true} {:fieldmap "Mem_T.WmiLibInfo__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiLibInfo"} WmiLibInfo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3564
}

function {:inline true} {:fieldmap "Mem_T.WordLength__SERIAL_LINE_CONTROL"} {:fieldname "WordLength"} WordLength__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WriteQueue"} WriteQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 264
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "WriteRequestTotalTimer"} WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1696
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutConstant"} WriteTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutMultiplier"} WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.XoffChar__SERIAL_CHARS"} {:fieldname "XoffChar"} XoffChar__SERIAL_CHARS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XoffCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffCharacter"} XoffCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountCompleteDpc"} XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1092
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountTimeoutDpc"} XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1048
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "XoffCountTimer"} XoffCountTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2080
}

function {:inline true} {:fieldmap "Mem_T.XoffLimit__SERIAL_HANDFLOW"} {:fieldname "XoffLimit"} XoffLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.XoffXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffXmitThreshold"} XoffXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XonChar__SERIAL_CHARS"} {:fieldname "XonChar"} XonChar__SERIAL_CHARS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XonCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XonCharacter"} XonCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XonLimit__SERIAL_HANDFLOW"} {:fieldname "XonLimit"} XonLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XonXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XonXmitThreshold"} XonXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__IO_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string " The default interrupt read buffer size is: %d\n------  The XoffLimit is                         : %d\n------  The XonLimit is                          : %d\n------  The pt 8 size is                         : %d\n"} unique strConst__li2bpl223: int;

const {:string "%x irp was already marked as cancelled\n"} unique strConst__li2bpl31: int;

const {:string "%x was the first irp processed by this\n------- invocation of startmask\n"} unique strConst__li2bpl27: int;

const {:string "%x will become the current wait irp\n"} unique strConst__li2bpl30: int;

const {:string "*PNP0501"} unique strConst__li2bpl138: int;

const {:string "*PNP0502"} unique strConst__li2bpl139: int;

const {:string "------- BusRelations Query\n"} unique strConst__li2bpl145: int;

const {:string "------- EjectionRelations Query\n"} unique strConst__li2bpl146: int;

const {:string "------- PowerRelations Query\n"} unique strConst__li2bpl147: int;

const {:string "------- RemovalRelations Query\n"} unique strConst__li2bpl148: int;

const {:string "------- TargetDeviceRelation Query\n"} unique strConst__li2bpl149: int;

const {:string "------- Unknown Query\n"} unique strConst__li2bpl144: int;

const {:string "------- failing; multiport node\n"} unique strConst__li2bpl156: int;

const {:string "<SerialDisableInterfaces\n"} unique strConst__li2bpl214: int;

const {:string "<SerialFlush (1) %X\n"} unique strConst__li2bpl226: int;

const {:string "<SerialFlush (2) %X\n"} unique strConst__li2bpl227: int;

const {:string "<SerialFlush (3) %X\n"} unique strConst__li2bpl225: int;

const {:string "<SerialGetNextWrite\n"} unique strConst__li2bpl39: int;

const {:string "<SerialGetRegistryKeyValue %X\n"} unique strConst__li2bpl182: int;

const {:string "<SerialInitMultiPort (1) %X\n"} unique strConst__li2bpl189: int;

const {:string "<SerialInitMultiPort (2) %X\n"} unique strConst__li2bpl191: int;

const {:string "<SerialInitMultiPort (3) %X\n"} unique strConst__li2bpl190: int;

const {:string "<SerialKillPendingIrps\n"} unique strConst__li2bpl186: int;

const {:string "<SerialRead (1) %X\n"} unique strConst__li2bpl55: int;

const {:string "<SerialRead (2) %X\n"} unique strConst__li2bpl56: int;

const {:string "<SerialRead (3) %X\n"} unique strConst__li2bpl57: int;

const {:string "<SerialRead (4) %X\n"} unique strConst__li2bpl58: int;

const {:string "<SerialReleaseResources\n"} unique strConst__li2bpl195: int;

const {:string "<SerialRemoveDevObj %X\n"} unique strConst__li2bpl185: int;

const {:string "<SerialStartImmediate\n"} unique strConst__li2bpl229: int;

const {:string "<SerialStartRead %X\n"} unique strConst__li2bpl53: int;

const {:string "<SerialStartWrite %X\n"} unique strConst__li2bpl41: int;

const {:string "<SerialUnstallIrps\n"} unique strConst__li2bpl52: int;

const {:string "<SerialWrite (1) %X\n"} unique strConst__li2bpl34: int;

const {:string "<SerialWrite (2) %X\n"} unique strConst__li2bpl35: int;

const {:string "<SerialWrite (3) %X\n"} unique strConst__li2bpl36: int;

const {:string "<SerialWrite (4) %X\n"} unique strConst__li2bpl37: int;

const {:string ">SerialDisableInterfaces(%X, %s)\n"} unique strConst__li2bpl213: int;

const {:string ">SerialFindInitController(%X, %X)\n"} unique strConst__li2bpl209: int;

const {:string ">SerialFlush(%X, %X)\n"} unique strConst__li2bpl224: int;

const {:string ">SerialGetNextWrite(XXX)\n"} unique strConst__li2bpl40: int;

const {:string ">SerialGetRegistryKeyValue(XXX)\n"} unique strConst__li2bpl181: int;

const {:string ">SerialInitMultiPort(%X, %X, %X)\n"} unique strConst__li2bpl188: int;

const {:string ">SerialKillPendingIrps(%X)\n"} unique strConst__li2bpl187: int;

const {:string ">SerialRead(%X, %X)\n"} unique strConst__li2bpl59: int;

const {:string ">SerialReleaseResources(%X)\n"} unique strConst__li2bpl192: int;

const {:string ">SerialRemoveDevObj(%X)\n"} unique strConst__li2bpl184: int;

const {:string ">SerialStartImmediate(%X)\n"} unique strConst__li2bpl228: int;

const {:string ">SerialStartRead(%X)\n"} unique strConst__li2bpl54: int;

const {:string ">SerialStartWrite(%X)\n"} unique strConst__li2bpl42: int;

const {:string ">SerialUnstallIrps(%X)\n"} unique strConst__li2bpl50: int;

const {:string ">SerialWrite(%X, %X)\n"} unique strConst__li2bpl38: int;

const {:string "A pending Irp should not be completed with a call to IoCompleteRequest."} unique strConst__li2bpl173: int;

const {:string "About to connect to interrupt for port %wZ\n------- address of extension is %x\n"} unique strConst__li2bpl121: int;

const {:string "Aha! It is a multiport node\n"} unique strConst__li2bpl206: int;

const {:string "Aha! It is a standalone node or first multi\n"} unique strConst__li2bpl204: int;

const {:string "Already in requested power state\n"} unique strConst__li2bpl13: int;

const {:string "Attempting to init %wZ\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n------- Interrupt Mode is %d\n"} unique strConst__li2bpl210: int;

const {:string "Becoming sharer: %08X %08X %08X\n"} unique strConst__li2bpl208: int;

const {:string "Bogus port address %x\n"} unique strConst__li2bpl98: int;

const {:string "Bogus port index %x\n"} unique strConst__li2bpl82: int;

const {:string "Bogus vector %x\n"} unique strConst__li2bpl97: int;

const {:string "Calling next driver\n"} unique strConst__li2bpl6: int;

const {:string "Can't filter NULL resources!\n"} unique strConst__li2bpl141: int;

const {:string "Canceling wait for irp %x\n"} unique strConst__li2bpl23: int;

const {:string "Cleaning up failed start\n"} unique strConst__li2bpl114: int;

const {:string "Clearing DTR for %x\n"} unique strConst__li2bpl170: int;

const {:string "Clearing Rts for %x\n"} unique strConst__li2bpl169: int;

const {:string "ClockRate"} unique strConst__li2bpl108: int;

const {:string "Close open count bad for: 0x%x\n"} unique strConst__li2bpl44: int;

const {:string "Close prologue failed for: %x\n"} unique strConst__li2bpl43: int;

const {:string "Com AddressSpace: %x\n"} unique strConst__li2bpl91: int;

const {:string "Com Indexed: %x\n"} unique strConst__li2bpl96: int;

const {:string "Com InterfaceType: %x\n"} unique strConst__li2bpl93: int;

const {:string "Com Interrupt Status: %x\n"} unique strConst__li2bpl111: int;

const {:string "Com InterruptMode: %x\n"} unique strConst__li2bpl92: int;

const {:string "Com OriginalIrql: %x\n"} unique strConst__li2bpl95: int;

const {:string "Com OriginalVector: %x\n"} unique strConst__li2bpl94: int;

const {:string "Com Port BusNumber: %x\n"} unique strConst__li2bpl90: int;

const {:string "Com Port ClockRate: %x\n"} unique strConst__li2bpl89: int;

const {:string "Com Port Index: %x\n"} unique strConst__li2bpl88: int;

const {:string "Com Port address: %x\n"} unique strConst__li2bpl110: int;

const {:string "Comparing it to %wZ\n------- already in the device list\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n"} unique strConst__li2bpl199: int;

const {:string "Complete Irp: %X\n"} unique strConst__li2bpl1: int;

const {:string "Configuration error for %wZ\n------- Same multiport - different interrupts\n"} unique strConst__li2bpl205: int;

const {:string "Connected interrupt %08X\n"} unique strConst__li2bpl118: int;

const {:string "Could not map memory for device registers for %wZ\n"} unique strConst__li2bpl222: int;

const {:string "Could not map memory for interrupt status for %wZ\n"} unique strConst__li2bpl219: int;

const {:string "Couldn't allocate memory for Dos name\n"} unique strConst__li2bpl67: int;

const {:string "Couldn't allocate memory for WMI name\n"} unique strConst__li2bpl68: int;

const {:string "Couldn't allocate memory for buffer\n"} unique strConst__li2bpl75: int;

const {:string "Couldn't allocate memory for device name\n"} unique strConst__li2bpl76: int;

const {:string "Couldn't allocate memory for the\n------  user configuration record\n"} unique strConst__li2bpl124: int;

const {:string "Couldn't connect to interrupt for %wZ\n"} unique strConst__li2bpl123: int;

const {:string "Couldn't create the device map entry\n------- for port %wZ\n"} unique strConst__li2bpl65: int;

const {:string "Couldn't create the symbolic link\nfor port %wZ\n"} unique strConst__li2bpl66: int;

const {:string "Couldn't delete value entry %wZ\n"} unique strConst__li2bpl168: int;

const {:string "Couldn't register class association\nfor port %wZ\n"} unique strConst__li2bpl62: int;

const {:string "Couldn't set class association\n for port %wZ\n"} unique strConst__li2bpl63: int;

const {:string "Count: %x  Addr: 0x%x\n"} unique strConst__li2bpl45: int;

const {:string "DPC's drained: %x\n"} unique strConst__li2bpl47: int;

const {:string "Deleting Link %wZ\n"} unique strConst__li2bpl167: int;

const {:string "DevicePowerState\n"} unique strConst__li2bpl12: int;

const {:string "DisablePort"} unique strConst__li2bpl100: int;

const {:string "Dispatch entry for: %x\n"} unique strConst__li2bpl33: int;

const {:string "DoesPortExist test failed for %wZ\n"} unique strConst__li2bpl220: int;

const {:string "DosDevices"} unique strConst__li2bpl72: int;

const {:string "DosName is %wZ\n"} unique strConst__li2bpl61: int;

const {:string "Draining DPC's: %x\n"} unique strConst__li2bpl48: int;

const {:string "EnablePowerManagement"} unique strConst__li2bpl126: int;

const {:string "Enter SerialRestoreDeviceState\n"} unique strConst__li2bpl22: int;

const {:string "Entering SerialSaveDeviceState\n"} unique strConst__li2bpl17: int;

const {:string "Error in config record for %wZ\n------  registers wrap around physical memory\n"} unique strConst__li2bpl196: int;

const {:string "Error in config record for %wZ\n------  status wraps around physical memory\n"} unique strConst__li2bpl197: int;

const {:string "Error in config record for %wZ\n------- Interrupt status overlaps regular registers\n"} unique strConst__li2bpl198: int;

const {:string "Error in config record for %wZ\n------- Register address overlaps with\n------- previous serial device\n"} unique strConst__li2bpl200: int;

const {:string "Error in config record for %wZ\n------- register address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl203: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial device registers\n"} unique strConst__li2bpl201: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl202: int;

const {:string "External Naming Failed - Status %x\n"} unique strConst__li2bpl120: int;

const {:string "FALSE"} unique strConst__li2bpl211: int;

const {:string "Fifo's detected at port address: %x\n"} unique strConst__li2bpl215: int;

const {:string "ForceFifoEnable"} unique strConst__li2bpl101: int;

const {:string "Getting PortName/Identifier failed - %x\n"} unique strConst__li2bpl74: int;

const {:string "Globally sharing interrupt for device %x\n"} unique strConst__li2bpl162: int;

const {:string "Going to power state D0\n"} unique strConst__li2bpl14: int;

const {:string "Going to power state D3\n"} unique strConst__li2bpl15: int;

const {:string "Got IRP_MN_CANCEL_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl127: int;

const {:string "Got IRP_MN_CANCEL_STOP_DEVICE Irp\n"} unique strConst__li2bpl128: int;

const {:string "Got IRP_MN_EJECT Irp\n"} unique strConst__li2bpl134: int;

const {:string "Got IRP_MN_FILTER_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl157: int;

const {:string "Got IRP_MN_POWER_SEQUENCE Irp\n"} unique strConst__li2bpl8: int;

const {:string "Got IRP_MN_QUERY_DEVICE_CAPABILITIES IRP\n"} unique strConst__li2bpl142: int;

const {:string "Got IRP_MN_QUERY_DEVICE_RELATIONS Irp\n"} unique strConst__li2bpl129: int;

const {:string "Got IRP_MN_QUERY_ID Irp\n"} unique strConst__li2bpl163: int;

const {:string "Got IRP_MN_QUERY_INTERFACE Irp\n"} unique strConst__li2bpl130: int;

const {:string "Got IRP_MN_QUERY_POWER Irp\n"} unique strConst__li2bpl10: int;

const {:string "Got IRP_MN_QUERY_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl153: int;

const {:string "Got IRP_MN_QUERY_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl131: int;

const {:string "Got IRP_MN_QUERY_STOP_DEVICE Irp\n"} unique strConst__li2bpl150: int;

const {:string "Got IRP_MN_READ_CONFIG Irp\n"} unique strConst__li2bpl132: int;

const {:string "Got IRP_MN_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl152: int;

const {:string "Got IRP_MN_SET_LOCK Irp\n"} unique strConst__li2bpl135: int;

const {:string "Got IRP_MN_SET_POWER Irp\n"} unique strConst__li2bpl9: int;

const {:string "Got IRP_MN_START_DEVICE Irp\n"} unique strConst__li2bpl154: int;

const {:string "Got IRP_MN_STOP_DEVICE Irp\n"} unique strConst__li2bpl151: int;

const {:string "Got IRP_MN_SURPRISE_REMOVAL Irp\n"} unique strConst__li2bpl136: int;

const {:string "Got IRP_MN_WAIT_WAKE Irp\n"} unique strConst__li2bpl7: int;

const {:string "Got IRP_MN_WRITE_CONFIG Irp\n"} unique strConst__li2bpl133: int;

const {:string "ID is sole ID\n"} unique strConst__li2bpl140: int;

const {:string "Identifier"} unique strConst__li2bpl70: int;

const {:string "In Ioctl processing for set mask\n"} unique strConst__li2bpl177: int;

const {:string "In Ioctl processing for wait mask\n"} unique strConst__li2bpl174: int;

const {:string "In SerialCancelWait\n"} unique strConst__li2bpl24: int;

const {:string "In SerialClose\n"} unique strConst__li2bpl46: int;

const {:string "In SerialCreateOpen\n"} unique strConst__li2bpl49: int;

const {:string "In SerialGotoPowerState\n"} unique strConst__li2bpl2: int;

const {:string "In SerialSetPowerD0\n"} unique strConst__li2bpl4: int;

const {:string "In SerialSetPowerD3\n"} unique strConst__li2bpl19: int;

const {:string "In SerialStartMask\n"} unique strConst__li2bpl32: int;

const {:string "In SerialUndoExternalNaming for\nextension: %x of port %wZ\n"} unique strConst__li2bpl166: int;

const {:string "Indexed"} unique strConst__li2bpl107: int;

const {:string "Initializing for configuration record of %wZ\n"} unique strConst__li2bpl216: int;

const {:string "Interrupt"} unique strConst__li2bpl112: int;

const {:string "Invalid Bus type %x\n"} unique strConst__li2bpl85: int;

const {:string "Invalid size fo the buffer %d\n"} unique strConst__li2bpl178: int;

const {:string "Invalid size for the buffer %d\n"} unique strConst__li2bpl176: int;

const {:string "IoConnectInterrupt Args:\nInterrupt           %x\nOurIsr              %x\nOurIsrContext       %x\nNULL\nVector              %x\nIrql                %x\nInterruptMode       %x\nInterruptShareable  %x\nProcessorAffinity   %x\nFALSE\n"} unique strConst__li2bpl122: int;

const {:string "IoOpenDeviceRegistryKey failed - %x \n"} unique strConst__li2bpl99: int;

const {:string "Kernel debugger is using port at address %X\n"} unique strConst__li2bpl217: int;

const {:string "Latched interrupts and MicroChannel\nbusses don't mix\n"} unique strConst__li2bpl87: int;

const {:string "Leaving SerialGotoPowerState\n"} unique strConst__li2bpl3: int;

const {:string "Leaving SerialSaveDeviceState\n"} unique strConst__li2bpl18: int;

const {:string "List has %x lists (including alternatives)\n"} unique strConst__li2bpl158: int;

const {:string "List has %x resources in it\n"} unique strConst__li2bpl159: int;

const {:string "Mapping power capabilities\n"} unique strConst__li2bpl143: int;

const {:string "MaskInverted"} unique strConst__li2bpl104: int;

const {:string "Matched to %x\n"} unique strConst__li2bpl207: int;

const {:string "MultiportDevice"} unique strConst__li2bpl80: int;

const {:string "Not doing external naming -- state is %x\n"} unique strConst__li2bpl119: int;

const {:string "PDevExt: %x\n"} unique strConst__li2bpl20: int;

const {:string "Perhaps another mask irp was found in the queue\n------- %x/%x <- values should be the same\n"} unique strConst__li2bpl28: int;

const {:string "Port index must be > 0 for any\nport on a multiport card: %x\n"} unique strConst__li2bpl84: int;

const {:string "PortAddress"} unique strConst__li2bpl113: int;

const {:string "PortIndex"} unique strConst__li2bpl106: int;

const {:string "PortName"} unique strConst__li2bpl69: int;

const {:string "Read name %wZ\n"} unique strConst__li2bpl73: int;

const {:string "Release - disconnecting interrupt %X\n"} unique strConst__li2bpl193: int;

const {:string "Release - freeing multi context\n"} unique strConst__li2bpl194: int;

const {:string "Reopening device\n"} unique strConst__li2bpl21: int;

const {:string "RxFIFO"} unique strConst__li2bpl102: int;

const {:string "SERIAL - %x is a SETMASK irp\n"} unique strConst__li2bpl26: int;

const {:string "SERIALCOMM"} unique strConst__li2bpl64: int;

const {:string "STARTMASK - CurrentMaskIrp: %x\n"} unique strConst__li2bpl25: int;

const {:string "Serial driver will not load port\n"} unique strConst__li2bpl218: int;

const {:string "SerialFinishStartDevice got NULL pDevExt\n"} unique strConst__li2bpl116: int;

const {:string "SerialIoResourcesIndex"} unique strConst__li2bpl81: int;

const {:string "SerialRelinquishPowerPolicy"} unique strConst__li2bpl125: int;

const {:string "SerialSkipExternalNaming"} unique strConst__li2bpl60: int;

const {:string "SetPowerD0 has IRP %x\n"} unique strConst__li2bpl5: int;

const {:string "Share System Interrupt"} unique strConst__li2bpl105: int;

const {:string "Sharing I/O port for device %x\n"} unique strConst__li2bpl160: int;

const {:string "Sharing interrupt for device %x\n"} unique strConst__li2bpl161: int;

const {:string "Starting or queuing set mask irp %x\n"} unique strConst__li2bpl179: int;

const {:string "Starting or queuing wait mask irp%x\n"} unique strConst__li2bpl175: int;

const {:string "SystemPowerState\n"} unique strConst__li2bpl16: int;

const {:string "TL16C550C Auto Flow Control"} unique strConst__li2bpl109: int;

const {:string "TR resource pointer is %x\n"} unique strConst__li2bpl79: int;

const {:string "TRUE"} unique strConst__li2bpl212: int;

const {:string "The dispatch routine is returning STATUS_PENDING, but it has also called IoCompleteRequest on the incoming IRP."} unique strConst__li2bpl171: int;

const {:string "There aren't that many of those\nbusses on this system,%x\n"} unique strConst__li2bpl86: int;

const {:string "TxFIFO"} unique strConst__li2bpl103: int;

const {:string "UNKNOWN PowerState\n"} unique strConst__li2bpl11: int;

const {:string "Unknown mask %x\n"} unique strConst__li2bpl180: int;

const {:string "Unstalling Irp 0x%x with 0x%x\n"} unique strConst__li2bpl51: int;

const {:string "WaitIrp is invalid\n------- IsrWaitMask: %x\n------- CurrentWaitIrp: %x\n"} unique strConst__li2bpl29: int;

const {:string "\\"} unique strConst__li2bpl71: int;

const {:string "callee"} unique strConst__li2bpl183: int;

const {:string "caller"} unique strConst__li2bpl0: int;

const {:string "disabled port %wZ as requested in configuration\n"} unique strConst__li2bpl221: int;

const {:string "entering SerialGetPortInfo\n"} unique strConst__li2bpl77: int;

const {:string "entering SerialStartDevice\n"} unique strConst__li2bpl164: int;

const {:string "error with IoCallDriver %x\n"} unique strConst__li2bpl165: int;

const {:string "failing; device open\n"} unique strConst__li2bpl155: int;

const {:string "for device %x\n"} unique strConst__li2bpl137: int;

const {:string "halt"} unique strConst__li2bpl172: int;

const {:string "leaving SerialFinishStartDevice\n"} unique strConst__li2bpl115: int;

const {:string "pDevExt: Interrupt %x\n-------               OurIsr %x\n"} unique strConst__li2bpl117: int;

const {:string "port index to large %x\n"} unique strConst__li2bpl83: int;

const {:string "resource pointer is %x\n"} unique strConst__li2bpl78: int;

const {:allocated} li2bplFunctionConstant1030: int;

axiom li2bplFunctionConstant1030 == 1030;

const {:allocated} li2bplFunctionConstant1036: int;

axiom li2bplFunctionConstant1036 == 1036;

const {:allocated} li2bplFunctionConstant1037: int;

axiom li2bplFunctionConstant1037 == 1037;

const {:allocated} li2bplFunctionConstant1040: int;

axiom li2bplFunctionConstant1040 == 1040;

const {:allocated} li2bplFunctionConstant1041: int;

axiom li2bplFunctionConstant1041 == 1041;

const {:allocated} li2bplFunctionConstant1042: int;

axiom li2bplFunctionConstant1042 == 1042;

const {:allocated} li2bplFunctionConstant1048: int;

axiom li2bplFunctionConstant1048 == 1048;

const {:allocated} li2bplFunctionConstant1086: int;

axiom li2bplFunctionConstant1086 == 1086;

const {:allocated} li2bplFunctionConstant1087: int;

axiom li2bplFunctionConstant1087 == 1087;

const {:allocated} li2bplFunctionConstant1088: int;

axiom li2bplFunctionConstant1088 == 1088;

const {:allocated} li2bplFunctionConstant1089: int;

axiom li2bplFunctionConstant1089 == 1089;

const {:allocated} li2bplFunctionConstant1125: int;

axiom li2bplFunctionConstant1125 == 1125;

const {:allocated} li2bplFunctionConstant1244: int;

axiom li2bplFunctionConstant1244 == 1244;

const {:allocated} li2bplFunctionConstant1246: int;

axiom li2bplFunctionConstant1246 == 1246;

const {:allocated} li2bplFunctionConstant1249: int;

axiom li2bplFunctionConstant1249 == 1249;

const {:allocated} li2bplFunctionConstant336: int;

axiom li2bplFunctionConstant336 == 336;

const {:allocated} li2bplFunctionConstant339: int;

axiom li2bplFunctionConstant339 == 339;

const {:allocated} li2bplFunctionConstant340: int;

axiom li2bplFunctionConstant340 == 340;

const {:allocated} li2bplFunctionConstant342: int;

axiom li2bplFunctionConstant342 == 342;

const {:allocated} li2bplFunctionConstant343: int;

axiom li2bplFunctionConstant343 == 343;

const {:allocated} li2bplFunctionConstant348: int;

axiom li2bplFunctionConstant348 == 348;

const {:allocated} li2bplFunctionConstant393: int;

axiom li2bplFunctionConstant393 == 393;

const {:allocated} li2bplFunctionConstant394: int;

axiom li2bplFunctionConstant394 == 394;

const {:allocated} li2bplFunctionConstant395: int;

axiom li2bplFunctionConstant395 == 395;

const {:allocated} li2bplFunctionConstant396: int;

axiom li2bplFunctionConstant396 == 396;

const {:allocated} li2bplFunctionConstant438: int;

axiom li2bplFunctionConstant438 == 438;

const {:allocated} li2bplFunctionConstant515: int;

axiom li2bplFunctionConstant515 == 515;

const {:allocated} li2bplFunctionConstant522: int;

axiom li2bplFunctionConstant522 == 522;

const {:allocated} li2bplFunctionConstant523: int;

axiom li2bplFunctionConstant523 == 523;

const {:allocated} li2bplFunctionConstant524: int;

axiom li2bplFunctionConstant524 == 524;

const {:allocated} li2bplFunctionConstant525: int;

axiom li2bplFunctionConstant525 == 525;

const {:allocated} li2bplFunctionConstant526: int;

axiom li2bplFunctionConstant526 == 526;

const {:allocated} li2bplFunctionConstant569: int;

axiom li2bplFunctionConstant569 == 569;

const {:allocated} li2bplFunctionConstant570: int;

axiom li2bplFunctionConstant570 == 570;

const {:allocated} li2bplFunctionConstant571: int;

axiom li2bplFunctionConstant571 == 571;

const {:allocated} li2bplFunctionConstant572: int;

axiom li2bplFunctionConstant572 == 572;

const {:allocated} li2bplFunctionConstant573: int;

axiom li2bplFunctionConstant573 == 573;

const {:allocated} li2bplFunctionConstant574: int;

axiom li2bplFunctionConstant574 == 574;

const {:allocated} li2bplFunctionConstant575: int;

axiom li2bplFunctionConstant575 == 575;

const {:allocated} li2bplFunctionConstant576: int;

axiom li2bplFunctionConstant576 == 576;

const {:allocated} li2bplFunctionConstant577: int;

axiom li2bplFunctionConstant577 == 577;

const {:allocated} li2bplFunctionConstant578: int;

axiom li2bplFunctionConstant578 == 578;

const {:allocated} li2bplFunctionConstant579: int;

axiom li2bplFunctionConstant579 == 579;

const {:allocated} li2bplFunctionConstant580: int;

axiom li2bplFunctionConstant580 == 580;

const {:allocated} li2bplFunctionConstant581: int;

axiom li2bplFunctionConstant581 == 581;

const {:allocated} li2bplFunctionConstant617: int;

axiom li2bplFunctionConstant617 == 617;

const {:allocated} li2bplFunctionConstant618: int;

axiom li2bplFunctionConstant618 == 618;

const {:allocated} li2bplFunctionConstant619: int;

axiom li2bplFunctionConstant619 == 619;

const {:allocated} li2bplFunctionConstant620: int;

axiom li2bplFunctionConstant620 == 620;

const {:allocated} li2bplFunctionConstant621: int;

axiom li2bplFunctionConstant621 == 621;

const {:allocated} li2bplFunctionConstant622: int;

axiom li2bplFunctionConstant622 == 622;

const {:allocated} li2bplFunctionConstant660: int;

axiom li2bplFunctionConstant660 == 660;

const {:allocated} li2bplFunctionConstant665: int;

axiom li2bplFunctionConstant665 == 665;

const {:allocated} li2bplFunctionConstant667: int;

axiom li2bplFunctionConstant667 == 667;

const {:allocated} li2bplFunctionConstant673: int;

axiom li2bplFunctionConstant673 == 673;

const {:allocated} li2bplFunctionConstant678: int;

axiom li2bplFunctionConstant678 == 678;

const {:allocated} li2bplFunctionConstant720: int;

axiom li2bplFunctionConstant720 == 720;

const {:allocated} li2bplFunctionConstant721: int;

axiom li2bplFunctionConstant721 == 721;

const {:allocated} li2bplFunctionConstant722: int;

axiom li2bplFunctionConstant722 == 722;

const {:allocated} li2bplFunctionConstant723: int;

axiom li2bplFunctionConstant723 == 723;

const {:allocated} li2bplFunctionConstant726: int;

axiom li2bplFunctionConstant726 == 726;

const {:allocated} li2bplFunctionConstant728: int;

axiom li2bplFunctionConstant728 == 728;

const {:allocated} li2bplFunctionConstant731: int;

axiom li2bplFunctionConstant731 == 731;

const {:allocated} li2bplFunctionConstant805: int;

axiom li2bplFunctionConstant805 == 805;

const {:allocated} li2bplFunctionConstant806: int;

axiom li2bplFunctionConstant806 == 806;

const {:allocated} li2bplFunctionConstant842: int;

axiom li2bplFunctionConstant842 == 842;

const {:allocated} li2bplFunctionConstant844: int;

axiom li2bplFunctionConstant844 == 844;

const {:allocated} li2bplFunctionConstant845: int;

axiom li2bplFunctionConstant845 == 845;

const {:allocated} li2bplFunctionConstant846: int;

axiom li2bplFunctionConstant846 == 846;

const {:allocated} li2bplFunctionConstant849: int;

axiom li2bplFunctionConstant849 == 849;

const {:allocated} li2bplFunctionConstant888: int;

axiom li2bplFunctionConstant888 == 888;

const {:allocated} li2bplFunctionConstant889: int;

axiom li2bplFunctionConstant889 == 889;

const {:allocated} li2bplFunctionConstant891: int;

axiom li2bplFunctionConstant891 == 891;

const {:allocated} li2bplFunctionConstant892: int;

axiom li2bplFunctionConstant892 == 892;

const {:allocated} li2bplFunctionConstant893: int;

axiom li2bplFunctionConstant893 == 893;

const {:allocated} li2bplFunctionConstant894: int;

axiom li2bplFunctionConstant894 == 894;

const {:allocated} li2bplFunctionConstant899: int;

axiom li2bplFunctionConstant899 == 899;

const {:allocated} li2bplFunctionConstant901: int;

axiom li2bplFunctionConstant901 == 901;

const {:allocated} li2bplFunctionConstant940: int;

axiom li2bplFunctionConstant940 == 940;

const {:allocated} li2bplFunctionConstant978: int;

axiom li2bplFunctionConstant978 == 978;

const {:allocated} li2bplFunctionConstant979: int;

axiom li2bplFunctionConstant979 == 979;

const {:allocated} li2bplFunctionConstant980: int;

axiom li2bplFunctionConstant980 == 980;

const {:allocated} li2bplFunctionConstant981: int;

axiom li2bplFunctionConstant981 == 981;

const {:allocated} li2bplFunctionConstant982: int;

axiom li2bplFunctionConstant982 == 982;

const {:allocated} li2bplFunctionConstant983: int;

axiom li2bplFunctionConstant983 == 983;

const {:allocated} li2bplFunctionConstant984: int;

axiom li2bplFunctionConstant984 == 984;

const {:allocated} li2bplFunctionConstant985: int;

axiom li2bplFunctionConstant985 == 985;

const {:allocated} li2bplFunctionConstant986: int;

axiom li2bplFunctionConstant986 == 986;

const {:allocated} li2bplFunctionConstant987: int;

axiom li2bplFunctionConstant987 == 987;

implementation {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_5: int) returns (Tmp_127: int)
{
  var {:pointer} Tmp_128: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} FirstStatus_1: int;
  var {:scalar} TotalTime: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_130: int;
  var {:pointer} s_p_e_c_i_a_l_8: int;
  var {:scalar} UseATimer: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} sdv_112: int;
  var {:pointer} Tmp_131: int;
  var {:pointer} sdv_113: int;
  var {:scalar} OldIrql_4: int;
  var {:pointer} sdv_114: int;
  var {:pointer} NewIrp_2: int;
  var {:pointer} Tmp_132: int;
  var {:scalar} s_p_e_c_i_a_l_9: int;
  var {:pointer} sdv_115: int;
  var {:scalar} Tmp_133: int;
  var {:pointer} sdv_116: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:scalar} Timeouts: int;
  var {:scalar} s_p_e_c_i_a_l_12: int;
  var {:pointer} Extension_5: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;
  var vslice_dummy_var_564: int;
  var vslice_dummy_var_565: int;
  var vslice_dummy_var_566: int;

  anon0:
    call {:si_unique_call 2250} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 2251} NewIrp_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2252} Timeouts := __HAVOC_malloc(20);
    Extension_5 := actual_Extension_5;
    call {:si_unique_call 2253} Tmp_130 := __HAVOC_malloc(88);
    call {:si_unique_call 2254} Tmp_131 := __HAVOC_malloc(92);
    SetFirstStatus_1 := 0;
    Tmp_131 := strConst__li2bpl42;
    call {:si_unique_call 2255} vslice_dummy_var_565 := SerialDbgPrintEx(2, Tmp_131);
    goto L14;

  L14:
    call {:si_unique_call 2256} Tmp_128, Tmp_129, s_p_e_c_i_a_l_7, FirstStatus_1, SetFirstStatus_1, UseATimer, IrpSp_1, sdv_113, OldIrql_4, Tmp_132, s_p_e_c_i_a_l_9, sdv_115, Tmp_133, sdv_116, Tmp_134 := SerialStartWrite#0_loop_L14(Tmp_128, Tmp_129, s_p_e_c_i_a_l_7, FirstStatus_1, TotalTime, SetFirstStatus_1, UseATimer, IrpSp_1, sdv_113, OldIrql_4, NewIrp_2, Tmp_132, s_p_e_c_i_a_l_9, sdv_115, Tmp_133, sdv_116, Tmp_134, Timeouts, Extension_5);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2279} Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    Mem_T.INT4[Tmp_129] := OldIrql_4;
    call {:si_unique_call 2280} IoAcquireCancelSpinLock(Tmp_129);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_129];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)] != 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2257} sdv_113 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_113 != 0;
    assume sdv_113 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_113)))] != 0;
    s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2258} sdv_115 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_115 != 0;
    assume sdv_115 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_115)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_7], s_p_e_c_i_a_l_9);
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    Tmp_134 := Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)];
    assume {:nonnull} Tmp_134 != 0;
    assume Tmp_134 > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2259} SerialTryToCompleteCurrent#0(Extension_5, li2bplFunctionConstant570, OldIrql_4, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_5), 0, 0, 16);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    UseATimer := 0;
    call {:si_unique_call 2260} Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    Mem_T.INT4[Tmp_129] := OldIrql_4;
    call {:si_unique_call 2261} sdv_KeAcquireSpinLock(0, Tmp_129);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_129];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 2262} sdv_KeReleaseSpinLock(0, OldIrql_4);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2263} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    UseATimer := 1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] == 4;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_133;
    goto L59;

  L59:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2264} sdv_116 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_116 != 0;
    assume sdv_116 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_116)))] := 0;
    call {:si_unique_call 2265} Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    Mem_T.INT4[Tmp_129] := OldIrql_4;
    call {:si_unique_call 2266} IoAcquireCancelSpinLock(Tmp_129);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_129];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    Tmp_128 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)];
    assume {:nonnull} Tmp_128 != 0;
    assume Tmp_128 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 2267} IoReleaseCancelSpinLock(OldIrql_4);
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    Tmp_132 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)];
    assume {:nonnull} Tmp_132 != 0;
    assume Tmp_132 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_132))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2268} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_5), NewIrp_2, 1, Extension_5);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_2] == 0;
    goto L79;

  L79:
    Tmp_130 := strConst__li2bpl41;
    call {:si_unique_call 2269} vslice_dummy_var_566 := SerialDbgPrintEx(2, Tmp_130);
    Tmp_127 := FirstStatus_1;
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_2] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L75;

  anon33_Then:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2270} vslice_dummy_var_562 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)], li2bplFunctionConstant571);
    s_p_e_c_i_a_l_11 := 2;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2271} sdv_112 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_112 != 0;
    assume sdv_112 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_112)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_11);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2272} vslice_dummy_var_564 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_5), TotalTime, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_5), Extension_5);
    s_p_e_c_i_a_l_12 := 4;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2273} sdv_114 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_114 != 0;
    assume sdv_114 > 0;
    s_p_e_c_i_a_l_8 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_114)));
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_8] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_8], s_p_e_c_i_a_l_12);
    goto L99;

  L99:
    call {:si_unique_call 2274} vslice_dummy_var_563 := KeSynchronizeExecution(0, li2bplFunctionConstant572, 0);
    call {:si_unique_call 2275} IoReleaseCancelSpinLock(OldIrql_4);
    goto L79;

  anon36_Then:
    assume {:partition} UseATimer == 0;
    goto L99;

  anon29_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    call {:si_unique_call 2276} sdv_IoMarkIrpPending(0);
    SetFirstStatus_1 := 1;
    FirstStatus_1 := 259;
    goto L87;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] != 4;
    Tmp_133 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_113)))] == 0;
    call {:si_unique_call 2277} IoReleaseCancelSpinLock(OldIrql_4);
    goto L40;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)] == 0;
    call {:si_unique_call 2278} IoReleaseCancelSpinLock(OldIrql_4);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_5: int) returns (Tmp_127: int);
  modifies alloc, Mem_T.INT4, Mem_T.PVOID, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_5: int) returns (Tmp_127: int)
{
  var {:pointer} Tmp_128: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} FirstStatus_1: int;
  var {:scalar} TotalTime: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_130: int;
  var {:pointer} s_p_e_c_i_a_l_8: int;
  var {:scalar} UseATimer: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} sdv_112: int;
  var {:pointer} Tmp_131: int;
  var {:pointer} sdv_113: int;
  var {:scalar} OldIrql_4: int;
  var {:pointer} sdv_114: int;
  var {:pointer} NewIrp_2: int;
  var {:pointer} Tmp_132: int;
  var {:scalar} s_p_e_c_i_a_l_9: int;
  var {:pointer} sdv_115: int;
  var {:scalar} Tmp_133: int;
  var {:pointer} sdv_116: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:scalar} Timeouts: int;
  var {:scalar} s_p_e_c_i_a_l_12: int;
  var {:pointer} Extension_5: int;
  var vslice_dummy_var_567: int;
  var vslice_dummy_var_568: int;
  var vslice_dummy_var_569: int;
  var vslice_dummy_var_570: int;
  var vslice_dummy_var_571: int;

  anon0:
    call {:si_unique_call 2281} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 2282} NewIrp_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2283} Timeouts := __HAVOC_malloc(20);
    Extension_5 := actual_Extension_5;
    call {:si_unique_call 2284} Tmp_130 := __HAVOC_malloc(88);
    call {:si_unique_call 2285} Tmp_131 := __HAVOC_malloc(92);
    SetFirstStatus_1 := 0;
    Tmp_131 := strConst__li2bpl42;
    call {:si_unique_call 2286} vslice_dummy_var_570 := SerialDbgPrintEx(2, Tmp_131);
    goto L14;

  L14:
    call {:si_unique_call 2287} Tmp_128, Tmp_129, s_p_e_c_i_a_l_7, FirstStatus_1, SetFirstStatus_1, UseATimer, IrpSp_1, sdv_113, OldIrql_4, Tmp_132, s_p_e_c_i_a_l_9, sdv_115, Tmp_133, sdv_116, Tmp_134 := SerialStartWrite#1_loop_L14(Tmp_128, Tmp_129, s_p_e_c_i_a_l_7, FirstStatus_1, TotalTime, SetFirstStatus_1, UseATimer, IrpSp_1, sdv_113, OldIrql_4, NewIrp_2, Tmp_132, s_p_e_c_i_a_l_9, sdv_115, Tmp_133, sdv_116, Tmp_134, Timeouts, Extension_5);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2310} Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    Mem_T.INT4[Tmp_129] := OldIrql_4;
    call {:si_unique_call 2311} IoAcquireCancelSpinLock(Tmp_129);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_129];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)] != 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2288} sdv_113 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_113 != 0;
    assume sdv_113 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_113)))] != 0;
    s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2289} sdv_115 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_115 != 0;
    assume sdv_115 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_115)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_7], s_p_e_c_i_a_l_9);
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    Tmp_134 := Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)];
    assume {:nonnull} Tmp_134 != 0;
    assume Tmp_134 > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2290} SerialTryToCompleteCurrent#1(Extension_5, li2bplFunctionConstant570, OldIrql_4, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_5), 0, 0, 16);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    UseATimer := 0;
    call {:si_unique_call 2291} Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    Mem_T.INT4[Tmp_129] := OldIrql_4;
    call {:si_unique_call 2292} sdv_KeAcquireSpinLock(0, Tmp_129);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_129];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 2293} sdv_KeReleaseSpinLock(0, OldIrql_4);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2294} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    UseATimer := 1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] == 4;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_133;
    goto L59;

  L59:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2295} sdv_116 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_116 != 0;
    assume sdv_116 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_116)))] := 0;
    call {:si_unique_call 2296} Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    Mem_T.INT4[Tmp_129] := OldIrql_4;
    call {:si_unique_call 2297} IoAcquireCancelSpinLock(Tmp_129);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_129];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    Tmp_128 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)];
    assume {:nonnull} Tmp_128 != 0;
    assume Tmp_128 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 2298} IoReleaseCancelSpinLock(OldIrql_4);
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    Tmp_132 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)];
    assume {:nonnull} Tmp_132 != 0;
    assume Tmp_132 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_132))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2299} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_5), NewIrp_2, 1, Extension_5);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_2] == 0;
    goto L79;

  L79:
    Tmp_130 := strConst__li2bpl41;
    call {:si_unique_call 2300} vslice_dummy_var_571 := SerialDbgPrintEx(2, Tmp_130);
    Tmp_127 := FirstStatus_1;
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_2] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L75;

  anon33_Then:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2301} vslice_dummy_var_567 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)], li2bplFunctionConstant571);
    s_p_e_c_i_a_l_11 := 2;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2302} sdv_112 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_112 != 0;
    assume sdv_112 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_112)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_11);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2303} vslice_dummy_var_569 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_5), TotalTime, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_5), Extension_5);
    s_p_e_c_i_a_l_12 := 4;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 2304} sdv_114 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5)]);
    assume {:nonnull} sdv_114 != 0;
    assume sdv_114 > 0;
    s_p_e_c_i_a_l_8 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_114)));
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_8] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_8], s_p_e_c_i_a_l_12);
    goto L99;

  L99:
    call {:si_unique_call 2305} vslice_dummy_var_568 := KeSynchronizeExecution(0, li2bplFunctionConstant572, 0);
    call {:si_unique_call 2306} IoReleaseCancelSpinLock(OldIrql_4);
    goto L79;

  anon36_Then:
    assume {:partition} UseATimer == 0;
    goto L99;

  anon29_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    call {:si_unique_call 2307} sdv_IoMarkIrpPending(0);
    SetFirstStatus_1 := 1;
    FirstStatus_1 := 259;
    goto L87;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] != 4;
    Tmp_133 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_113)))] == 0;
    call {:si_unique_call 2308} IoReleaseCancelSpinLock(OldIrql_4);
    goto L40;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_5)] == 0;
    call {:si_unique_call 2309} IoReleaseCancelSpinLock(OldIrql_4);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_5: int) returns (Tmp_127: int);
  modifies alloc, Mem_T.INT4, Mem_T.PVOID, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_10: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_213: int;
  var {:pointer} s_p_e_c_i_a_l_13: int;
  var {:pointer} sdv_200: int;
  var {:pointer} newIrp: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} sdv_202: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_216: int;
  var {:pointer} Tmp_217: int;
  var {:pointer} Extension_10: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_572: int;
  var vslice_dummy_var_573: int;
  var vslice_dummy_var_574: int;
  var vslice_dummy_var_575: int;

  anon0:
    call {:si_unique_call 2312} newIrp := __HAVOC_malloc(4);
    call {:si_unique_call 2313} vslice_dummy_var_572 := __HAVOC_malloc(4);
    Extension_10 := actual_Extension_10;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    QueueToProcess_1 := actual_QueueToProcess_1;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2314} Tmp_216 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_14 := RefType;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2315} sdv_200 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_2]);
    assume {:nonnull} sdv_200 != 0;
    assume sdv_200 > 0;
    s_p_e_c_i_a_l_13 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_200)));
    assume {:nonnull} s_p_e_c_i_a_l_13 != 0;
    assume s_p_e_c_i_a_l_13 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_13] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_13], BNOT(s_p_e_c_i_a_l_14));
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2316} vslice_dummy_var_573 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2317} SerialRundownIrpRefs(CurrentOpIrp_2, IntervalTimer, TotalTimer, Extension_10);
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2318} sdv_202 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_2]);
    assume {:nonnull} sdv_202 != 0;
    assume sdv_202 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_202)))] == 0;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    Tmp_213 := Mem_T.P_IRP[CurrentOpIrp_2];
    assume {:nonnull} Tmp_213 != 0;
    assume Tmp_213 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_213))] := StatusToUse;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    Tmp_217 := Mem_T.P_IRP[CurrentOpIrp_2];
    assume {:nonnull} Tmp_217 != 0;
    assume Tmp_217 > 0;
    goto L28;

  L28:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    oldIrp := Mem_T.P_IRP[CurrentOpIrp_2];
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    Mem_T.P_IRP[CurrentOpIrp_2] := 0;
    call {:si_unique_call 2319} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_216 := strConst__li2bpl1;
    call {:si_unique_call 2320} vslice_dummy_var_575 := SerialDbgPrintEx(9, Tmp_216);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume oldIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2321} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, oldIrp);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L65;

  L65:
    call {:si_unique_call 2322} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2323} SerialIRPEpilogue(Extension_10);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume !(oldIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L65;

  anon30_Then:
    call {:si_unique_call 2324} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant1088;
    call {:si_unique_call 2325} SerialGetNextImmediate(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_10);
    goto L37;

  L37:
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.P_IRP[newIrp] != 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant720;
    call {:si_unique_call 2326} vslice_dummy_var_574 := SerialStartRead(Extension_10);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant569;
    assume false;
    return;

  anon32_Then:
    assume {:partition} Mem_T.P_IRP[newIrp] == 0;
    goto L1;

  anon35_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant660;
    call {:si_unique_call 2327} SerialGetNextIrp(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_10);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant573;
    call {:si_unique_call 2328} SerialGetNextWrite(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_10);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon29_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_202)))] != 0;
    call {:si_unique_call 2329} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon36_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_10: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_10: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_213: int;
  var {:pointer} s_p_e_c_i_a_l_13: int;
  var {:pointer} sdv_200: int;
  var {:pointer} newIrp: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} sdv_202: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_216: int;
  var {:pointer} Tmp_217: int;
  var {:pointer} Extension_10: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_576: int;
  var vslice_dummy_var_577: int;
  var vslice_dummy_var_578: int;
  var vslice_dummy_var_579: int;
  var vslice_dummy_var_580: int;

  anon0:
    call {:si_unique_call 2330} newIrp := __HAVOC_malloc(4);
    call {:si_unique_call 2331} vslice_dummy_var_576 := __HAVOC_malloc(4);
    Extension_10 := actual_Extension_10;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    QueueToProcess_1 := actual_QueueToProcess_1;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2332} Tmp_216 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_14 := RefType;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2333} sdv_200 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_2]);
    assume {:nonnull} sdv_200 != 0;
    assume sdv_200 > 0;
    s_p_e_c_i_a_l_13 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_200)));
    assume {:nonnull} s_p_e_c_i_a_l_13 != 0;
    assume s_p_e_c_i_a_l_13 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_13] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_13], BNOT(s_p_e_c_i_a_l_14));
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2334} vslice_dummy_var_577 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2335} SerialRundownIrpRefs(CurrentOpIrp_2, IntervalTimer, TotalTimer, Extension_10);
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2336} sdv_202 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_2]);
    assume {:nonnull} sdv_202 != 0;
    assume sdv_202 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_202)))] == 0;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    Tmp_213 := Mem_T.P_IRP[CurrentOpIrp_2];
    assume {:nonnull} Tmp_213 != 0;
    assume Tmp_213 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_213))] := StatusToUse;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    Tmp_217 := Mem_T.P_IRP[CurrentOpIrp_2];
    assume {:nonnull} Tmp_217 != 0;
    assume Tmp_217 > 0;
    goto L28;

  L28:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    oldIrp := Mem_T.P_IRP[CurrentOpIrp_2];
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    Mem_T.P_IRP[CurrentOpIrp_2] := 0;
    call {:si_unique_call 2337} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_216 := strConst__li2bpl1;
    call {:si_unique_call 2338} vslice_dummy_var_580 := SerialDbgPrintEx(9, Tmp_216);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume oldIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2339} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl0, oldIrp);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L65;

  L65:
    call {:si_unique_call 2340} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2341} SerialIRPEpilogue(Extension_10);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume !(oldIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L65;

  anon30_Then:
    call {:si_unique_call 2342} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant1088;
    call {:si_unique_call 2343} SerialGetNextImmediate(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_10);
    goto L37;

  L37:
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.P_IRP[newIrp] != 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant720;
    call {:si_unique_call 2344} vslice_dummy_var_579 := SerialStartRead(Extension_10);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant569;
    call {:si_unique_call 2345} vslice_dummy_var_578 := SerialStartWrite#0(Extension_10);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} Mem_T.P_IRP[newIrp] == 0;
    goto L1;

  anon35_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant660;
    call {:si_unique_call 2346} SerialGetNextIrp(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_10);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant573;
    call {:si_unique_call 2347} SerialGetNextWrite(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_10);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon29_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_202)))] != 0;
    call {:si_unique_call 2348} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon36_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_10: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialWakeCompletion"} SerialWakeCompletion#0(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int)
{
  var {:scalar} PowerState_3: int;
  var {:pointer} pDevExt_1: int;
  var {:scalar} powerState_1: int;
  var {:scalar} status_2: int;
  var {:pointer} SD3: int;
  var {:pointer} Context: int;
  var {:pointer} IoStatus: int;
  var vslice_dummy_var_581: int;

  anon0:
    call {:si_unique_call 2349} PowerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2350} vslice_dummy_var_581 := __HAVOC_malloc(4);
    call {:si_unique_call 2351} powerState_1 := __HAVOC_malloc(8);
    SD3 := actual_SD3;
    Context := actual_Context;
    IoStatus := actual_IoStatus;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    pDevExt_1 := Context;
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    status_2 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus)];
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume false;
    return;

  anon3_Then:
    assume {:partition} 0 > status_2;
    goto L9;

  L9:
    call {:si_unique_call 2352} SerialIRPEpilogue(pDevExt_1);
    return;
}



procedure {:origName "SerialWakeCompletion"} SerialWakeCompletion#0(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "SerialWakeCompletion"} SerialWakeCompletion#1(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int)
{
  var {:scalar} PowerState_3: int;
  var {:pointer} pDevExt_1: int;
  var {:scalar} powerState_1: int;
  var {:scalar} status_2: int;
  var {:pointer} SD3: int;
  var {:pointer} Context: int;
  var {:pointer} IoStatus: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_1511: int;

  anon0:
    call {:si_unique_call 2353} PowerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2354} vslice_dummy_var_582 := __HAVOC_malloc(4);
    call {:si_unique_call 2355} powerState_1 := __HAVOC_malloc(8);
    SD3 := actual_SD3;
    Context := actual_Context;
    IoStatus := actual_IoStatus;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    pDevExt_1 := Context;
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    status_2 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus)];
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_1511;
    call {:si_unique_call 2356} vslice_dummy_var_583 := PoRequestPowerIrp#0(vslice_dummy_var_1511, 2, powerState_1, 0, 0, 0);
    goto L9;

  L9:
    call {:si_unique_call 2357} SerialIRPEpilogue(pDevExt_1);
    return;

  anon3_Then:
    assume {:partition} 0 > status_2;
    goto L9;
}



procedure {:origName "SerialWakeCompletion"} SerialWakeCompletion#1(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_9: int, actual_Irp_21: int) returns (Tmp_947: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_23: int;
  var {:scalar} MinorFunction_2: int;
  var {:pointer} SD1_3: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_9: int;
  var vslice_dummy_var_584: int;

  anon0:
    call {:si_unique_call 2358} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_23 := actual_DeviceObject_23;
    MinorFunction_2 := actual_MinorFunction_2;
    SD1_3 := actual_SD1_3;
    CompletionFunction := actual_CompletionFunction;
    Context_9 := actual_Context_9;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction_2 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_947 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction_2 == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2359} vslice_dummy_var_584 := sdv_RunPowerCompletionRoutines#0(DeviceObject_23, MinorFunction_2, PowerState_1, Context_9, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    Tmp_947 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_947 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction_2 == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction_2 == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_9: int, actual_Irp_21: int) returns (Tmp_947: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_947 == -1073741584 || Tmp_947 == 259 || Tmp_947 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_9: int, actual_Irp_21: int) returns (Tmp_947: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_23: int;
  var {:scalar} MinorFunction_2: int;
  var {:pointer} SD1_3: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_9: int;
  var vslice_dummy_var_585: int;

  anon0:
    call {:si_unique_call 2360} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_23 := actual_DeviceObject_23;
    MinorFunction_2 := actual_MinorFunction_2;
    SD1_3 := actual_SD1_3;
    CompletionFunction := actual_CompletionFunction;
    Context_9 := actual_Context_9;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction_2 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_947 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction_2 == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2361} vslice_dummy_var_585 := sdv_RunPowerCompletionRoutines#1(DeviceObject_23, MinorFunction_2, PowerState_1, Context_9, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    Tmp_947 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_947 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction_2 == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction_2 == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_9: int, actual_Irp_21: int) returns (Tmp_947: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_947 == -1073741584 || Tmp_947 == 259 || Tmp_947 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_10: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_961: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_24: int;
  var {:scalar} MinorFunction_3: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_10: int;
  var {:pointer} IoStatus_2: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2362} PowerState := __HAVOC_malloc(8);
    DeviceObject_24 := actual_DeviceObject_24;
    MinorFunction_3 := actual_MinorFunction_3;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_10 := actual_Context_10;
    IoStatus_2 := actual_IoStatus_2;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant336;
    call {:si_unique_call 2363} sdv_stub_power_completion_begin();
    call {:si_unique_call 2364} SerialSystemPowerCompletion(DeviceObject_24, MinorFunction_3, PowerState, Context_10, IoStatus_2);
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant348;
    call {:si_unique_call 2365} sdv_stub_power_completion_begin();
    call {:si_unique_call 2366} SerialWakeCompletion#0(DeviceObject_24, MinorFunction_3, PowerState, Context_10, IoStatus_2);
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    Tmp_961 := CompletionFunction_2;
    return;

  anon5_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant348;
    goto L19;

  anon6_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant336;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_10: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_961: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_961 == 1 || Tmp_961 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_10: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_961: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_24: int;
  var {:scalar} MinorFunction_3: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_10: int;
  var {:pointer} IoStatus_2: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2367} PowerState := __HAVOC_malloc(8);
    DeviceObject_24 := actual_DeviceObject_24;
    MinorFunction_3 := actual_MinorFunction_3;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_10 := actual_Context_10;
    IoStatus_2 := actual_IoStatus_2;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant336;
    call {:si_unique_call 2368} sdv_stub_power_completion_begin();
    call {:si_unique_call 2369} SerialSystemPowerCompletion(DeviceObject_24, MinorFunction_3, PowerState, Context_10, IoStatus_2);
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant348;
    call {:si_unique_call 2370} sdv_stub_power_completion_begin();
    call {:si_unique_call 2371} SerialWakeCompletion#1(DeviceObject_24, MinorFunction_3, PowerState, Context_10, IoStatus_2);
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    Tmp_961 := CompletionFunction_2;
    return;

  anon5_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant348;
    goto L19;

  anon6_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant336;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_10: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_961: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_961 == 1 || Tmp_961 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation SerialStartMask_loop_L11(in_Tmp_87: int, in_s_p_e_c_i_a_l_1: int, in_Tmp_88: int, in_Tmp_89: int, in_FirstStatus: int, in_Tmp_91: int, in_SetFirstStatus: int, in_Tmp_92: int, in_Tmp_93: int, in_Tmp_94: int, in_Tmp_95: int, in_Tmp_96: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_IrpSp: int, in_OldIrql: int, in_Tmp_102: int, in_NewIrp: int, in_s_p_e_c_i_a_l_2: int, in_sdv_80: int, in_Tmp_103: int, in_sdv_83: int, in_Tmp_104: int, in_Tmp_105: int, in_Extension_1: int, in_vslice_dummy_var_50: int, in_vslice_dummy_var_52: int, in_vslice_dummy_var_53: int, in_vslice_dummy_var_54: int, in_vslice_dummy_var_55: int, in_vslice_dummy_var_56: int, in_vslice_dummy_var_57: int, in_vslice_dummy_var_58: int, in_vslice_dummy_var_59: int, in_vslice_dummy_var_60: int, in_vslice_dummy_var_61: int, in_vslice_dummy_var_62: int, in_vslice_dummy_var_63: int, in_vslice_dummy_var_64: int, in_vslice_dummy_var_65: int, in_vslice_dummy_var_66: int) returns (out_Tmp_87: int, out_s_p_e_c_i_a_l_1: int, out_Tmp_88: int, out_Tmp_89: int, out_FirstStatus: int, out_Tmp_91: int, out_SetFirstStatus: int, out_Tmp_92: int, out_Tmp_93: int, out_Tmp_94: int, out_Tmp_95: int, out_Tmp_96: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_IrpSp: int, out_OldIrql: int, out_Tmp_102: int, out_s_p_e_c_i_a_l_2: int, out_sdv_80: int, out_Tmp_103: int, out_sdv_83: int, out_Tmp_104: int, out_Tmp_105: int, out_vslice_dummy_var_50: int, out_vslice_dummy_var_52: int, out_vslice_dummy_var_53: int, out_vslice_dummy_var_54: int, out_vslice_dummy_var_55: int, out_vslice_dummy_var_56: int, out_vslice_dummy_var_57: int, out_vslice_dummy_var_58: int, out_vslice_dummy_var_59: int, out_vslice_dummy_var_60: int, out_vslice_dummy_var_61: int, out_vslice_dummy_var_62: int, out_vslice_dummy_var_63: int, out_vslice_dummy_var_64: int, out_vslice_dummy_var_65: int, out_vslice_dummy_var_66: int)
{

  entry:
    out_Tmp_87, out_s_p_e_c_i_a_l_1, out_Tmp_88, out_Tmp_89, out_FirstStatus, out_Tmp_91, out_SetFirstStatus, out_Tmp_92, out_Tmp_93, out_Tmp_94, out_Tmp_95, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_IrpSp, out_OldIrql, out_Tmp_102, out_s_p_e_c_i_a_l_2, out_sdv_80, out_Tmp_103, out_sdv_83, out_Tmp_104, out_Tmp_105, out_vslice_dummy_var_50, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66 := in_Tmp_87, in_s_p_e_c_i_a_l_1, in_Tmp_88, in_Tmp_89, in_FirstStatus, in_Tmp_91, in_SetFirstStatus, in_Tmp_92, in_Tmp_93, in_Tmp_94, in_Tmp_95, in_Tmp_96, in_Tmp_97, in_Tmp_98, in_Tmp_99, in_Tmp_100, in_Tmp_101, in_IrpSp, in_OldIrql, in_Tmp_102, in_s_p_e_c_i_a_l_2, in_sdv_80, in_Tmp_103, in_sdv_83, in_Tmp_104, in_Tmp_105, in_vslice_dummy_var_50, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66;
    goto L11, exit;

  exit:
    return;

  L11:
    out_Tmp_96 := strConst__li2bpl25;
    call {:si_unique_call 2372} out_vslice_dummy_var_52 := SerialDbgPrintEx(7, out_Tmp_96);
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2373} out_IrpSp := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)]);
    assume {:nonnull} out_IrpSp != 0;
    assume out_IrpSp > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    out_Tmp_91 := strConst__li2bpl26;
    call {:si_unique_call 2397} out_vslice_dummy_var_53 := SerialDbgPrintEx(7, out_Tmp_91);
    call {:si_unique_call 2398} out_vslice_dummy_var_50 := KeSynchronizeExecution(0, li2bplFunctionConstant618, 0);
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    out_Tmp_102 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)];
    assume {:nonnull} out_Tmp_102 != 0;
    assume out_Tmp_102 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_102))] := 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L31;

  L31:
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2395} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_1), in_NewIrp, 1, in_Extension_1);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_87 := strConst__li2bpl28;
    call {:si_unique_call 2374} out_vslice_dummy_var_54 := SerialDbgPrintEx(7, out_Tmp_87);
    goto L37;

  L37:
    assume {:nonnull} in_NewIrp != 0;
    assume in_NewIrp > 0;
    goto anon29_Then;

  anon29_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp] != 0;
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    call {:si_unique_call 2399} {:si_old_unique_call 1} out_Tmp_87, out_s_p_e_c_i_a_l_1, out_Tmp_88, out_Tmp_89, out_FirstStatus, out_Tmp_91, out_SetFirstStatus, out_Tmp_92, out_Tmp_93, out_Tmp_94, out_Tmp_95, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_IrpSp, out_OldIrql, out_Tmp_102, out_s_p_e_c_i_a_l_2, out_sdv_80, out_Tmp_103, out_sdv_83, out_Tmp_104, out_Tmp_105, out_vslice_dummy_var_50, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66 := SerialStartMask_loop_L11(out_Tmp_87, out_s_p_e_c_i_a_l_1, out_Tmp_88, out_Tmp_89, out_FirstStatus, out_Tmp_91, out_SetFirstStatus, out_Tmp_92, out_Tmp_93, out_Tmp_94, out_Tmp_95, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_IrpSp, out_OldIrql, out_Tmp_102, in_NewIrp, out_s_p_e_c_i_a_l_2, out_sdv_80, out_Tmp_103, out_sdv_83, out_Tmp_104, out_Tmp_105, in_Extension_1, out_vslice_dummy_var_50, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66);
    return;

  anon32_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_99 := strConst__li2bpl27;
    call {:si_unique_call 2396} out_vslice_dummy_var_55 := SerialDbgPrintEx(7, out_Tmp_99);
    out_FirstStatus := 0;
    out_SetFirstStatus := 1;
    goto L31;

  anon27_Then:
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)] == 0;
    call {:si_unique_call 2389} out_Tmp_97 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_97 != 0;
    assume out_Tmp_97 > 0;
    Mem_T.INT4[out_Tmp_97] := out_OldIrql;
    call {:si_unique_call 2390} IoAcquireCancelSpinLock(out_Tmp_97);
    assume {:nonnull} out_Tmp_97 != 0;
    assume out_Tmp_97 > 0;
    out_OldIrql := Mem_T.INT4[out_Tmp_97];
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    out_Tmp_95 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)];
    assume {:nonnull} out_Tmp_95 != 0;
    assume out_Tmp_95 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    out_Tmp_100 := strConst__li2bpl31;
    call {:si_unique_call 2393} out_vslice_dummy_var_59 := SerialDbgPrintEx(7, out_Tmp_100);
    call {:si_unique_call 2394} IoReleaseCancelSpinLock(out_OldIrql);
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    out_Tmp_103 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)];
    assume {:nonnull} out_Tmp_103 != 0;
    assume out_Tmp_103 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_103))] := -1073741536;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L64;

  L64:
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2391} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_1), in_NewIrp, 1, in_Extension_1);
    goto anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_101 := strConst__li2bpl28;
    call {:si_unique_call 2375} out_vslice_dummy_var_60 := SerialDbgPrintEx(7, out_Tmp_101);
    goto L37;

  anon37_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_98 := strConst__li2bpl27;
    call {:si_unique_call 2392} out_vslice_dummy_var_61 := SerialDbgPrintEx(7, out_Tmp_98);
    out_FirstStatus := -1073741536;
    out_SetFirstStatus := 1;
    goto L64;

  anon36_Then:
    out_Tmp_88 := strConst__li2bpl30;
    call {:si_unique_call 2388} out_vslice_dummy_var_62 := SerialDbgPrintEx(7, out_Tmp_88);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L76;

  L76:
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)] := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)];
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2381} out_sdv_80 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)]);
    assume {:nonnull} out_sdv_80 != 0;
    assume out_sdv_80 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_80)))] := 0;
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2382} out_vslice_dummy_var_63 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)], li2bplFunctionConstant619);
    out_s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2383} out_sdv_83 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)]);
    assume {:nonnull} out_sdv_83 != 0;
    assume out_sdv_83 > 0;
    out_s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_83)));
    assume {:nonnull} out_s_p_e_c_i_a_l_1 != 0;
    assume out_s_p_e_c_i_a_l_1 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_1] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_1], out_s_p_e_c_i_a_l_2);
    call {:si_unique_call 2384} out_vslice_dummy_var_64 := KeSynchronizeExecution(0, li2bplFunctionConstant620, 0);
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)] := 0;
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2385} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_1), in_NewIrp, 0, in_Extension_1, out_OldIrql);
    goto anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_92 := strConst__li2bpl28;
    call {:si_unique_call 2376} out_vslice_dummy_var_65 := SerialDbgPrintEx(7, out_Tmp_92);
    goto L37;

  anon31_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_93 := strConst__li2bpl27;
    call {:si_unique_call 2386} out_vslice_dummy_var_66 := SerialDbgPrintEx(7, out_Tmp_93);
    out_FirstStatus := 259;
    out_SetFirstStatus := 1;
    call {:si_unique_call 2387} sdv_IoMarkIrpPending(0);
    goto L76;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)] != 0;
    goto L41;

  L41:
    out_Tmp_104 := strConst__li2bpl29;
    call {:si_unique_call 2380} out_vslice_dummy_var_56 := SerialDbgPrintEx(7, out_Tmp_104);
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    out_Tmp_105 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1)];
    assume {:nonnull} out_Tmp_105 != 0;
    assume out_Tmp_105 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_105))] := -1073741811;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L112;

  L112:
    assume {:nonnull} in_Extension_1 != 0;
    assume in_Extension_1 > 0;
    call {:si_unique_call 2378} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_1), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_1), in_NewIrp, 1, in_Extension_1);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_94 := strConst__li2bpl28;
    call {:si_unique_call 2377} out_vslice_dummy_var_57 := SerialDbgPrintEx(7, out_Tmp_94);
    goto L37;

  anon34_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_89 := strConst__li2bpl27;
    call {:si_unique_call 2379} out_vslice_dummy_var_58 := SerialDbgPrintEx(7, out_Tmp_89);
    out_FirstStatus := -1073741811;
    out_SetFirstStatus := 1;
    goto L112;

  anon28_Then:
    goto L41;
}



procedure {:LoopProcedure} SerialStartMask_loop_L11(in_Tmp_87: int, in_s_p_e_c_i_a_l_1: int, in_Tmp_88: int, in_Tmp_89: int, in_FirstStatus: int, in_Tmp_91: int, in_SetFirstStatus: int, in_Tmp_92: int, in_Tmp_93: int, in_Tmp_94: int, in_Tmp_95: int, in_Tmp_96: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_IrpSp: int, in_OldIrql: int, in_Tmp_102: int, in_NewIrp: int, in_s_p_e_c_i_a_l_2: int, in_sdv_80: int, in_Tmp_103: int, in_sdv_83: int, in_Tmp_104: int, in_Tmp_105: int, in_Extension_1: int, in_vslice_dummy_var_50: int, in_vslice_dummy_var_52: int, in_vslice_dummy_var_53: int, in_vslice_dummy_var_54: int, in_vslice_dummy_var_55: int, in_vslice_dummy_var_56: int, in_vslice_dummy_var_57: int, in_vslice_dummy_var_58: int, in_vslice_dummy_var_59: int, in_vslice_dummy_var_60: int, in_vslice_dummy_var_61: int, in_vslice_dummy_var_62: int, in_vslice_dummy_var_63: int, in_vslice_dummy_var_64: int, in_vslice_dummy_var_65: int, in_vslice_dummy_var_66: int) returns (out_Tmp_87: int, out_s_p_e_c_i_a_l_1: int, out_Tmp_88: int, out_Tmp_89: int, out_FirstStatus: int, out_Tmp_91: int, out_SetFirstStatus: int, out_Tmp_92: int, out_Tmp_93: int, out_Tmp_94: int, out_Tmp_95: int, out_Tmp_96: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_IrpSp: int, out_OldIrql: int, out_Tmp_102: int, out_s_p_e_c_i_a_l_2: int, out_sdv_80: int, out_Tmp_103: int, out_sdv_83: int, out_Tmp_104: int, out_Tmp_105: int, out_vslice_dummy_var_50: int, out_vslice_dummy_var_52: int, out_vslice_dummy_var_53: int, out_vslice_dummy_var_54: int, out_vslice_dummy_var_55: int, out_vslice_dummy_var_56: int, out_vslice_dummy_var_57: int, out_vslice_dummy_var_58: int, out_vslice_dummy_var_59: int, out_vslice_dummy_var_60: int, out_vslice_dummy_var_61: int, out_vslice_dummy_var_62: int, out_vslice_dummy_var_63: int, out_vslice_dummy_var_64: int, out_vslice_dummy_var_65: int, out_vslice_dummy_var_66: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus == 0 || out_FirstStatus == -1073741536 || out_FirstStatus == 259 || out_FirstStatus == -1073741811 || out_FirstStatus == in_FirstStatus;
  free ensures {:va_keep} out_SetFirstStatus == 1 || out_SetFirstStatus == in_SetFirstStatus;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_2 == 2 || out_s_p_e_c_i_a_l_2 == in_s_p_e_c_i_a_l_2;
  free ensures {:va_keep} out_vslice_dummy_var_50 == 1 || out_vslice_dummy_var_50 == 0 || out_vslice_dummy_var_50 == in_vslice_dummy_var_50;
  free ensures {:va_keep} out_vslice_dummy_var_52 == 0 || out_vslice_dummy_var_52 == in_vslice_dummy_var_52;
  free ensures {:va_keep} out_vslice_dummy_var_53 == 0 || out_vslice_dummy_var_53 == in_vslice_dummy_var_53;
  free ensures {:va_keep} out_vslice_dummy_var_54 == 0 || out_vslice_dummy_var_54 == in_vslice_dummy_var_54;
  free ensures {:va_keep} out_vslice_dummy_var_55 == 0 || out_vslice_dummy_var_55 == in_vslice_dummy_var_55;
  free ensures {:va_keep} out_vslice_dummy_var_56 == 0 || out_vslice_dummy_var_56 == in_vslice_dummy_var_56;
  free ensures {:va_keep} out_vslice_dummy_var_57 == 0 || out_vslice_dummy_var_57 == in_vslice_dummy_var_57;
  free ensures {:va_keep} out_vslice_dummy_var_58 == 0 || out_vslice_dummy_var_58 == in_vslice_dummy_var_58;
  free ensures {:va_keep} out_vslice_dummy_var_59 == 0 || out_vslice_dummy_var_59 == in_vslice_dummy_var_59;
  free ensures {:va_keep} out_vslice_dummy_var_60 == 0 || out_vslice_dummy_var_60 == in_vslice_dummy_var_60;
  free ensures {:va_keep} out_vslice_dummy_var_61 == 0 || out_vslice_dummy_var_61 == in_vslice_dummy_var_61;
  free ensures {:va_keep} out_vslice_dummy_var_62 == 0 || out_vslice_dummy_var_62 == in_vslice_dummy_var_62;
  free ensures {:va_keep} out_vslice_dummy_var_64 == 1 || out_vslice_dummy_var_64 == 0 || out_vslice_dummy_var_64 == in_vslice_dummy_var_64;
  free ensures {:va_keep} out_vslice_dummy_var_65 == 0 || out_vslice_dummy_var_65 == in_vslice_dummy_var_65;
  free ensures {:va_keep} out_vslice_dummy_var_66 == 0 || out_vslice_dummy_var_66 == in_vslice_dummy_var_66;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_3: int, in_sdv_97: int, in_Irp_3: int, in_OldIrql_2: int, in_sdv_100: int, in_OldIrql_3: int, in_CompleteCurrent_1: int, in_sdv_102: int, in_s_p_e_c_i_a_l_4: int, in_sdv_104: int, in_sdv_105: int, in_sdv_106: int, in_s_p_e_c_i_a_l_5: int, in_Tmp_125: int, in_delta: int, in_Xc: int, in_s_p_e_c_i_a_l_6: int, in_Tmp_126: int, in_CurrentOpIrp: int, in_QueueToProcess: int, in_NewIrp_1: int, in_CompleteCurrent: int, in_Extension_4: int, in_vslice_dummy_var_80: int, in_vslice_dummy_var_83: int, in_vslice_dummy_var_84: int) returns (out_s_p_e_c_i_a_l_3: int, out_sdv_97: int, out_Irp_3: int, out_OldIrql_2: int, out_sdv_100: int, out_OldIrql_3: int, out_sdv_102: int, out_s_p_e_c_i_a_l_4: int, out_sdv_104: int, out_sdv_105: int, out_sdv_106: int, out_s_p_e_c_i_a_l_5: int, out_Tmp_125: int, out_Xc: int, out_s_p_e_c_i_a_l_6: int, out_Tmp_126: int, out_CompleteCurrent: int, out_vslice_dummy_var_80: int, out_vslice_dummy_var_83: int, out_vslice_dummy_var_84: int)
{

  entry:
    out_s_p_e_c_i_a_l_3, out_sdv_97, out_Irp_3, out_OldIrql_2, out_sdv_100, out_OldIrql_3, out_sdv_102, out_s_p_e_c_i_a_l_4, out_sdv_104, out_sdv_105, out_sdv_106, out_s_p_e_c_i_a_l_5, out_Tmp_125, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_126, out_CompleteCurrent, out_vslice_dummy_var_80, out_vslice_dummy_var_83, out_vslice_dummy_var_84 := in_s_p_e_c_i_a_l_3, in_sdv_97, in_Irp_3, in_OldIrql_2, in_sdv_100, in_OldIrql_3, in_sdv_102, in_s_p_e_c_i_a_l_4, in_sdv_104, in_sdv_105, in_sdv_106, in_s_p_e_c_i_a_l_5, in_Tmp_125, in_Xc, in_s_p_e_c_i_a_l_6, in_Tmp_126, in_CompleteCurrent, in_vslice_dummy_var_80, in_vslice_dummy_var_83, in_vslice_dummy_var_84;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    call {:si_unique_call 2400} out_sdv_102 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_CurrentOpIrp]);
    assume {:nonnull} out_sdv_102 != 0;
    assume out_sdv_102 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_102)] == 4;
    call {:si_unique_call 2403} out_Tmp_126 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_126 != 0;
    assume out_Tmp_126 > 0;
    Mem_T.INT4[out_Tmp_126] := out_OldIrql_3;
    call {:si_unique_call 2404} IoAcquireCancelSpinLock(out_Tmp_126);
    assume {:nonnull} out_Tmp_126 != 0;
    assume out_Tmp_126 > 0;
    out_OldIrql_3 := Mem_T.INT4[out_Tmp_126];
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    call {:si_unique_call 2405} out_sdv_106 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_CurrentOpIrp]);
    assume {:nonnull} in_Extension_4 != 0;
    assume in_Extension_4 > 0;
    assume {:nonnull} out_sdv_106 != 0;
    assume out_sdv_106 > 0;
    call {:si_unique_call 2406} IoReleaseCancelSpinLock(out_OldIrql_3);
    goto L26;

  L26:
    call {:si_unique_call 2402} SerialGetNextIrp(in_CurrentOpIrp, in_QueueToProcess, in_NewIrp_1, out_CompleteCurrent, in_Extension_4);
    goto anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    goto anon18_Then;

  anon18_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_1] != 0;
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    call {:si_unique_call 2401} out_sdv_105 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_NewIrp_1]);
    assume {:nonnull} out_sdv_105 != 0;
    assume out_sdv_105 > 0;
    goto anon19_Then;

  anon19_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_105)] == 9;
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    out_Tmp_125 := Mem_T.P_IRP[in_NewIrp_1];
    assume {:nonnull} out_Tmp_125 != 0;
    assume out_Tmp_125 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_125))] := 0;
    out_CompleteCurrent := in_CompleteCurrent_1;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 2416} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_3, out_sdv_97, out_Irp_3, out_OldIrql_2, out_sdv_100, out_OldIrql_3, out_sdv_102, out_s_p_e_c_i_a_l_4, out_sdv_104, out_sdv_105, out_sdv_106, out_s_p_e_c_i_a_l_5, out_Tmp_125, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_126, out_CompleteCurrent, out_vslice_dummy_var_80, out_vslice_dummy_var_83, out_vslice_dummy_var_84 := SerialGetNextWrite_loop_L8(out_s_p_e_c_i_a_l_3, out_sdv_97, out_Irp_3, out_OldIrql_2, out_sdv_100, out_OldIrql_3, in_CompleteCurrent_1, out_sdv_102, out_s_p_e_c_i_a_l_4, out_sdv_104, out_sdv_105, out_sdv_106, out_s_p_e_c_i_a_l_5, out_Tmp_125, in_delta, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_126, in_CurrentOpIrp, in_QueueToProcess, in_NewIrp_1, out_CompleteCurrent, in_Extension_4, out_vslice_dummy_var_80, out_vslice_dummy_var_83, out_vslice_dummy_var_84);
    return;

  anon17_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_102)] != 4;
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    call {:si_unique_call 2408} out_sdv_104 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_CurrentOpIrp]);
    assume {:nonnull} out_sdv_104 != 0;
    assume out_sdv_104 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_104)] == 14;
    call {:si_unique_call 2414} out_Tmp_126 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_126 != 0;
    assume out_Tmp_126 > 0;
    Mem_T.INT4[out_Tmp_126] := out_OldIrql_2;
    call {:si_unique_call 2415} IoAcquireCancelSpinLock(out_Tmp_126);
    assume {:nonnull} out_Tmp_126 != 0;
    assume out_Tmp_126 > 0;
    out_OldIrql_2 := Mem_T.INT4[out_Tmp_126];
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    out_Irp_3 := Mem_T.P_IRP[in_CurrentOpIrp];
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    havoc out_Xc;
    assume {:nonnull} in_Extension_4 != 0;
    assume in_Extension_4 > 0;
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_3))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 2407} IoReleaseCancelSpinLock(out_OldIrql_2);
    goto L26;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_3))] == 0;
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_3))] := -1073741536;
    goto L64;

  anon21_Then:
    call {:si_unique_call 2411} out_vslice_dummy_var_80 := sdv_IoSetCancelRoutine(out_Irp_3, li2bplFunctionConstant575);
    out_s_p_e_c_i_a_l_4 := 2;
    call {:si_unique_call 2412} out_sdv_100 := sdv_IoGetCurrentIrpStackLocation(out_Irp_3);
    assume {:nonnull} out_sdv_100 != 0;
    assume out_sdv_100 > 0;
    out_s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_100)));
    assume {:nonnull} out_s_p_e_c_i_a_l_3 != 0;
    assume out_s_p_e_c_i_a_l_3 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_3] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_3], out_s_p_e_c_i_a_l_4);
    out_CompleteCurrent := 0;
    assume {:nonnull} in_Extension_4 != 0;
    assume in_Extension_4 > 0;
    Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_4)] := out_Irp_3;
    call {:si_unique_call 2413} out_vslice_dummy_var_83 := KeSynchronizeExecution(0, li2bplFunctionConstant576, 0);
    assume {:nonnull} out_Xc != 0;
    assume out_Xc > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} out_Xc != 0;
    assume out_Xc > 0;
    assume {:nonnull} in_delta != 0;
    assume in_delta > 0;
    assume {:nonnull} in_Extension_4 != 0;
    assume in_Extension_4 > 0;
    call {:si_unique_call 2409} out_vslice_dummy_var_84 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_4), in_delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(in_Extension_4), in_Extension_4);
    out_s_p_e_c_i_a_l_6 := 4;
    call {:si_unique_call 2410} out_sdv_97 := sdv_IoGetCurrentIrpStackLocation(out_Irp_3);
    assume {:nonnull} out_sdv_97 != 0;
    assume out_sdv_97 > 0;
    out_s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_97)));
    assume {:nonnull} out_s_p_e_c_i_a_l_5 != 0;
    assume out_s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_5], out_s_p_e_c_i_a_l_6);
    goto L64;

  anon22_Then:
    goto L64;

  anon20_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_104)] != 14;
    goto L26;
}



procedure {:LoopProcedure} SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_3: int, in_sdv_97: int, in_Irp_3: int, in_OldIrql_2: int, in_sdv_100: int, in_OldIrql_3: int, in_CompleteCurrent_1: int, in_sdv_102: int, in_s_p_e_c_i_a_l_4: int, in_sdv_104: int, in_sdv_105: int, in_sdv_106: int, in_s_p_e_c_i_a_l_5: int, in_Tmp_125: int, in_delta: int, in_Xc: int, in_s_p_e_c_i_a_l_6: int, in_Tmp_126: int, in_CurrentOpIrp: int, in_QueueToProcess: int, in_NewIrp_1: int, in_CompleteCurrent: int, in_Extension_4: int, in_vslice_dummy_var_80: int, in_vslice_dummy_var_83: int, in_vslice_dummy_var_84: int) returns (out_s_p_e_c_i_a_l_3: int, out_sdv_97: int, out_Irp_3: int, out_OldIrql_2: int, out_sdv_100: int, out_OldIrql_3: int, out_sdv_102: int, out_s_p_e_c_i_a_l_4: int, out_sdv_104: int, out_sdv_105: int, out_sdv_106: int, out_s_p_e_c_i_a_l_5: int, out_Tmp_125: int, out_Xc: int, out_s_p_e_c_i_a_l_6: int, out_Tmp_126: int, out_CompleteCurrent: int, out_vslice_dummy_var_80: int, out_vslice_dummy_var_83: int, out_vslice_dummy_var_84: int);
  modifies Mem_T.INT4, alloc, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_s_p_e_c_i_a_l_4 == 2 || out_s_p_e_c_i_a_l_4 == in_s_p_e_c_i_a_l_4;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_6 == 4 || out_s_p_e_c_i_a_l_6 == in_s_p_e_c_i_a_l_6;
  free ensures {:va_keep} out_CompleteCurrent == in_CompleteCurrent || out_CompleteCurrent == in_CompleteCurrent_1;
  free ensures {:va_keep} out_vslice_dummy_var_83 == 1 || out_vslice_dummy_var_83 == 0 || out_vslice_dummy_var_83 == in_vslice_dummy_var_83;
  free ensures {:va_keep} out_vslice_dummy_var_84 == 1 || out_vslice_dummy_var_84 == 0 || out_vslice_dummy_var_84 == in_vslice_dummy_var_84;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialClose_loop_L122(in_flushCount: int, in_sdv_123: int, in_Tmp_153: int, in_extension: int, in_vslice_dummy_var_90: int) returns (out_flushCount: int, out_sdv_123: int, out_Tmp_153: int, out_vslice_dummy_var_90: int)
{

  entry:
    out_flushCount, out_sdv_123, out_Tmp_153, out_vslice_dummy_var_90 := in_flushCount, in_sdv_123, in_Tmp_153, in_vslice_dummy_var_90;
    goto L122, exit;

  exit:
    return;

  L122:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon61_Else;

  anon61_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 2418} out_sdv_123 := corral_nondet();
    out_Tmp_153 := BAND(out_sdv_123, BOR(32, 64));
    goto anon71_Else;

  anon71_Else:
    assume {:partition} out_Tmp_153 != 96;
    call {:si_unique_call 2417} out_vslice_dummy_var_90 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L122(in_flushCount: int, in_sdv_123: int, in_Tmp_153: int, in_extension: int, in_vslice_dummy_var_90: int) returns (out_flushCount: int, out_sdv_123: int, out_Tmp_153: int, out_vslice_dummy_var_90: int);
  free ensures {:va_keep} out_vslice_dummy_var_90 == 0 || out_vslice_dummy_var_90 == -1073741823 || out_vslice_dummy_var_90 == in_vslice_dummy_var_90;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialClose_loop_L109(in_sdv_144: int, in_extension: int, in_vslice_dummy_var_89: int) returns (out_sdv_144: int, out_vslice_dummy_var_89: int)
{

  entry:
    out_sdv_144, out_vslice_dummy_var_89 := in_sdv_144, in_vslice_dummy_var_89;
    goto L109, exit;

  exit:
    return;

  L109:
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 2419} out_sdv_144 := corral_nondet();
    goto anon60_Then;

  anon60_Then:
    assume {:partition} BAND(out_sdv_144, 32) == 0;
    call {:si_unique_call 2420} out_vslice_dummy_var_89 := KeDelayExecutionThread(0, 0, 0);
    goto anon60_Then_dummy;

  anon60_Then_dummy:
    call {:si_unique_call 2421} {:si_old_unique_call 1} out_sdv_144, out_vslice_dummy_var_89 := SerialClose_loop_L109(out_sdv_144, in_extension, out_vslice_dummy_var_89);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L109(in_sdv_144: int, in_extension: int, in_vslice_dummy_var_89: int) returns (out_sdv_144: int, out_vslice_dummy_var_89: int);
  free ensures {:va_keep} out_vslice_dummy_var_89 == 0 || out_vslice_dummy_var_89 == -1073741823 || out_vslice_dummy_var_89 == in_vslice_dummy_var_89;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialClose_loop_L148(in_extension: int, in_vslice_dummy_var_93: int) returns (out_vslice_dummy_var_93: int)
{

  entry:
    out_vslice_dummy_var_93 := in_vslice_dummy_var_93;
    goto L148, exit;

  exit:
    return;

  L148:
    call {:si_unique_call 2422} out_vslice_dummy_var_93 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    goto anon64_Then;

  anon64_Then:
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    call {:si_unique_call 2423} {:si_old_unique_call 1} out_vslice_dummy_var_93 := SerialClose_loop_L148(in_extension, out_vslice_dummy_var_93);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L148(in_extension: int, in_vslice_dummy_var_93: int) returns (out_vslice_dummy_var_93: int);
  free ensures {:va_keep} out_vslice_dummy_var_93 == 0 || out_vslice_dummy_var_93 == -1073741823 || out_vslice_dummy_var_93 == in_vslice_dummy_var_93;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialClose_loop_L88(in_flushCount: int, in_sdv_122: int, in_Tmp_149: int, in_extension: int, in_vslice_dummy_var_87: int) returns (out_flushCount: int, out_sdv_122: int, out_Tmp_149: int, out_vslice_dummy_var_87: int)
{

  entry:
    out_flushCount, out_sdv_122, out_Tmp_149, out_vslice_dummy_var_87 := in_flushCount, in_sdv_122, in_Tmp_149, in_vslice_dummy_var_87;
    goto L88, exit;

  exit:
    return;

  L88:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon57_Else;

  anon57_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 2425} out_sdv_122 := corral_nondet();
    out_Tmp_149 := BAND(out_sdv_122, BOR(32, 64));
    goto anon70_Else;

  anon70_Else:
    assume {:partition} out_Tmp_149 != 96;
    call {:si_unique_call 2424} out_vslice_dummy_var_87 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon70_Else_dummy;

  anon70_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L88(in_flushCount: int, in_sdv_122: int, in_Tmp_149: int, in_extension: int, in_vslice_dummy_var_87: int) returns (out_flushCount: int, out_sdv_122: int, out_Tmp_149: int, out_vslice_dummy_var_87: int);
  free ensures {:va_keep} out_vslice_dummy_var_87 == 0 || out_vslice_dummy_var_87 == -1073741823 || out_vslice_dummy_var_87 == in_vslice_dummy_var_87;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialDrainUART_loop_L6(in_Tmp_181: int, in_sdv_179: int, in_PDevExt_5: int, in_vslice_dummy_var_134: int) returns (out_Tmp_181: int, out_sdv_179: int, out_vslice_dummy_var_134: int)
{

  entry:
    out_Tmp_181, out_sdv_179, out_vslice_dummy_var_134 := in_Tmp_181, in_sdv_179, in_vslice_dummy_var_134;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_PDevExt_5 != 0;
    assume in_PDevExt_5 > 0;
    call {:si_unique_call 2426} out_sdv_179 := corral_nondet();
    out_Tmp_181 := BAND(out_sdv_179, BOR(32, 64));
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_Tmp_181 != 96;
    call {:si_unique_call 2427} out_vslice_dummy_var_134 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2428} {:si_old_unique_call 1} out_Tmp_181, out_sdv_179, out_vslice_dummy_var_134 := SerialDrainUART_loop_L6(out_Tmp_181, out_sdv_179, in_PDevExt_5, out_vslice_dummy_var_134);
    return;
}



procedure {:LoopProcedure} SerialDrainUART_loop_L6(in_Tmp_181: int, in_sdv_179: int, in_PDevExt_5: int, in_vslice_dummy_var_134: int) returns (out_Tmp_181: int, out_sdv_179: int, out_vslice_dummy_var_134: int);
  free ensures {:va_keep} out_vslice_dummy_var_134 == 0 || out_vslice_dummy_var_134 == -1073741823 || out_vslice_dummy_var_134 == in_vslice_dummy_var_134;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialStartPurge_loop_L5(in_Tmp_186: int, in_Tmp_187: int, in_Mask: int, in_Tmp_188: int, in_OldIrql_5: int, in_NewIrp_3: int, in_Tmp_189: int, in_Tmp_190: int, in_Extension_8: int, in_vslice_dummy_var_135: int) returns (out_Tmp_186: int, out_Tmp_187: int, out_Mask: int, out_Tmp_188: int, out_OldIrql_5: int, out_Tmp_189: int, out_Tmp_190: int, out_vslice_dummy_var_135: int)
{
  var vslice_dummy_var_1512: int;
  var vslice_dummy_var_1513: int;
  var vslice_dummy_var_1514: int;

  entry:
    out_Tmp_186, out_Tmp_187, out_Mask, out_Tmp_188, out_OldIrql_5, out_Tmp_189, out_Tmp_190, out_vslice_dummy_var_135 := in_Tmp_186, in_Tmp_187, in_Mask, in_Tmp_188, in_OldIrql_5, in_Tmp_189, in_Tmp_190, in_vslice_dummy_var_135;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    out_Tmp_188 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_8)];
    assume {:nonnull} out_Tmp_188 != 0;
    assume out_Tmp_188 > 0;
    havoc out_Tmp_190;
    assume {:nonnull} out_Tmp_190 != 0;
    assume out_Tmp_190 > 0;
    out_Mask := Mem_T.INT4[out_Tmp_190];
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(out_Mask, 1) != 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    havoc vslice_dummy_var_1513;
    call {:si_unique_call 2435} SerialKillAllReadsOrWrites(vslice_dummy_var_1513, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_8), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_8));
    goto anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    havoc vslice_dummy_var_1512;
    call {:si_unique_call 2434} SerialKillAllReadsOrWrites(vslice_dummy_var_1512, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_8), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_8));
    goto anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(out_Mask, 2) != 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    havoc vslice_dummy_var_1514;
    call {:si_unique_call 2436} SerialKillAllReadsOrWrites(vslice_dummy_var_1514, ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_8), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_8));
    goto anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(out_Mask, 8) != 0;
    call {:si_unique_call 2430} out_Tmp_187 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_187 != 0;
    assume out_Tmp_187 > 0;
    Mem_T.INT4[out_Tmp_187] := out_OldIrql_5;
    call {:si_unique_call 2431} sdv_KeAcquireSpinLock(0, out_Tmp_187);
    assume {:nonnull} out_Tmp_187 != 0;
    assume out_Tmp_187 > 0;
    out_OldIrql_5 := Mem_T.INT4[out_Tmp_187];
    call {:si_unique_call 2432} out_vslice_dummy_var_135 := KeSynchronizeExecution(0, li2bplFunctionConstant806, 0);
    call {:si_unique_call 2433} sdv_KeReleaseSpinLock(0, out_OldIrql_5);
    goto L18;

  L18:
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    out_Tmp_186 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_8)];
    assume {:nonnull} out_Tmp_186 != 0;
    assume out_Tmp_186 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_186))] := 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    out_Tmp_189 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_8)];
    assume {:nonnull} out_Tmp_189 != 0;
    assume out_Tmp_189 > 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    call {:si_unique_call 2429} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_8), PurgeQueue__SERIAL_DEVICE_EXTENSION(in_Extension_8), in_NewIrp_3, 1, in_Extension_8);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_3 != 0;
    assume in_NewIrp_3 > 0;
    goto anon19_Then;

  anon19_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_3] != 0;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 2437} {:si_old_unique_call 1} out_Tmp_186, out_Tmp_187, out_Mask, out_Tmp_188, out_OldIrql_5, out_Tmp_189, out_Tmp_190, out_vslice_dummy_var_135 := SerialStartPurge_loop_L5(out_Tmp_186, out_Tmp_187, out_Mask, out_Tmp_188, out_OldIrql_5, in_NewIrp_3, out_Tmp_189, out_Tmp_190, in_Extension_8, out_vslice_dummy_var_135);
    return;

  anon18_Then:
    assume {:partition} BAND(out_Mask, 8) == 0;
    goto L18;

  anon17_Then:
    assume {:partition} BAND(out_Mask, 2) == 0;
    goto L14;

  anon20_Then:
    assume {:partition} BAND(out_Mask, 1) == 0;
    goto L7;
}



procedure {:LoopProcedure} SerialStartPurge_loop_L5(in_Tmp_186: int, in_Tmp_187: int, in_Mask: int, in_Tmp_188: int, in_OldIrql_5: int, in_NewIrp_3: int, in_Tmp_189: int, in_Tmp_190: int, in_Extension_8: int, in_vslice_dummy_var_135: int) returns (out_Tmp_186: int, out_Tmp_187: int, out_Mask: int, out_Tmp_188: int, out_OldIrql_5: int, out_Tmp_189: int, out_Tmp_190: int, out_vslice_dummy_var_135: int);
  modifies Mem_T.INT4, alloc, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_vslice_dummy_var_135 == 1 || out_vslice_dummy_var_135 == 0 || out_vslice_dummy_var_135 == in_vslice_dummy_var_135;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_Tmp_218: int, in_sdv_205: int, in_pDevExt_8: int, in_sdv_206: int, in_cancelRoutine: int, in_PDevObj_11: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_Tmp_218: int, out_sdv_205: int, out_sdv_206: int, out_cancelRoutine: int)
{
  var vslice_dummy_var_1515: int;

  entry:
    out_currentLastIrp, out_cancelIrql, out_Tmp_218, out_sdv_205, out_sdv_206, out_cancelRoutine := in_currentLastIrp, in_cancelIrql, in_Tmp_218, in_sdv_205, in_sdv_206, in_cancelRoutine;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 2438} out_sdv_205 := sdv_IsListEmpty(0);
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_sdv_205 == 0;
    assume {:nonnull} in_pDevExt_8 != 0;
    assume in_pDevExt_8 > 0;
    havoc vslice_dummy_var_1515;
    call {:si_unique_call 2442} out_sdv_206 := sdv_containing_record(vslice_dummy_var_1515, 88);
    out_currentLastIrp := out_sdv_206;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    havoc out_cancelRoutine;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant571;
    call {:si_unique_call 2447} SerialCancelCurrentWrite(in_PDevObj_11, out_currentLastIrp);
    goto anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  L29:
    call {:si_unique_call 2439} out_Tmp_218 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_218 != 0;
    assume out_Tmp_218 > 0;
    Mem_T.INT4[out_Tmp_218] := out_cancelIrql;
    call {:si_unique_call 2440} IoAcquireCancelSpinLock(out_Tmp_218);
    assume {:nonnull} out_Tmp_218 != 0;
    assume out_Tmp_218 > 0;
    out_cancelIrql := Mem_T.INT4[out_Tmp_218];
    goto L29_dummy;

  L29_dummy:
    call {:si_unique_call 2448} {:si_old_unique_call 1} out_currentLastIrp, out_cancelIrql, out_Tmp_218, out_sdv_205, out_sdv_206, out_cancelRoutine := SerialKillAllStalled_loop_L10(out_currentLastIrp, out_cancelIrql, out_Tmp_218, out_sdv_205, in_pDevExt_8, out_sdv_206, out_cancelRoutine, in_PDevObj_11);
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant575;
    call {:si_unique_call 2446} SerialCancelCurrentXoff(in_PDevObj_11, out_currentLastIrp);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon28_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant1086;
    call {:si_unique_call 2445} SerialCancelImmediate(in_PDevObj_11, out_currentLastIrp);
    goto anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon27_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant665;
    call {:si_unique_call 2444} SerialCancelQueued(in_PDevObj_11, out_currentLastIrp);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon26_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant619;
    call {:si_unique_call 2443} SerialCancelWait(in_PDevObj_11, out_currentLastIrp);
    goto anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon30_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant667;
    call {:si_unique_call 2441} SerialFilterCancelQueued(in_PDevObj_11, out_currentLastIrp);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L29;
}



procedure {:LoopProcedure} SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_Tmp_218: int, in_sdv_205: int, in_pDevExt_8: int, in_sdv_206: int, in_cancelRoutine: int, in_PDevObj_11: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_Tmp_218: int, out_sdv_205: int, out_sdv_206: int, out_cancelRoutine: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == old(yogi_error);
  free ensures {:va_keep} out_currentLastIrp == in_currentLastIrp;
  free ensures {:va_keep} out_cancelIrql == in_cancelIrql;
  free ensures {:va_keep} out_Tmp_218 == in_Tmp_218;
  free ensures {:va_keep} out_sdv_205 == in_sdv_205;
  free ensures {:va_keep} out_sdv_206 == in_sdv_206;
  free ensures {:va_keep} out_cancelRoutine == in_cancelRoutine;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialUnstallIrps_loop_L16(in_Tmp_230: int, in_sdv_219: int, in_Tmp_231: int, in_Tmp_232: int, in_oldIrql_3: int, in_pIrpStack_4: int, in_pIrp: int, in_pDevObj: int, in_pDrvObj: int, in_pIrpLink: int, in_Tmp_235: int, in_PDevExt_13: int, in_vslice_dummy_var_156: int, in_vslice_dummy_var_157: int, in_vslice_dummy_var_158: int) returns (out_Tmp_230: int, out_sdv_219: int, out_Tmp_231: int, out_Tmp_232: int, out_oldIrql_3: int, out_pIrpStack_4: int, out_pIrp: int, out_pDevObj: int, out_pDrvObj: int, out_pIrpLink: int, out_Tmp_235: int, out_vslice_dummy_var_156: int, out_vslice_dummy_var_157: int, out_vslice_dummy_var_158: int)
{

  entry:
    out_Tmp_230, out_sdv_219, out_Tmp_231, out_Tmp_232, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_235, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158 := in_Tmp_230, in_sdv_219, in_Tmp_231, in_Tmp_232, in_oldIrql_3, in_pIrpStack_4, in_pIrp, in_pDevObj, in_pDrvObj, in_pIrpLink, in_Tmp_235, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon59_Else;

  anon59_Else:
    call {:si_unique_call 2451} out_sdv_219 := sdv_containing_record(out_pIrpLink, 88);
    out_pIrp := out_sdv_219;
    call {:si_unique_call 2452} out_vslice_dummy_var_156 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2453} out_pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(out_pIrp);
    assume {:nonnull} out_pIrpStack_4 != 0;
    assume out_pIrpStack_4 > 0;
    havoc out_pDevObj;
    assume {:nonnull} out_pDevObj != 0;
    assume out_pDevObj > 0;
    havoc out_pDrvObj;
    call {:si_unique_call 2454} out_vslice_dummy_var_157 := sdv_IoSetCancelRoutine(out_pIrp, 0);
    call {:si_unique_call 2455} IoReleaseCancelSpinLock(out_oldIrql_3);
    out_Tmp_231 := strConst__li2bpl51;
    call {:si_unique_call 2456} out_vslice_dummy_var_158 := SerialDbgPrintEx(12, out_Tmp_231);
    assume {:nonnull} out_pIrpStack_4 != 0;
    assume out_pIrpStack_4 > 0;
    out_Tmp_232 := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_pIrpStack_4)];
    assume {:nonnull} out_pDrvObj != 0;
    assume out_pDrvObj > 0;
    havoc out_Tmp_235;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume out_Tmp_232 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume out_Tmp_232 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume out_Tmp_232 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume out_Tmp_232 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume out_Tmp_232 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume out_Tmp_232 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume out_Tmp_232 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume out_Tmp_232 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume out_Tmp_232 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume out_Tmp_232 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume out_Tmp_232 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume out_Tmp_232 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume out_Tmp_232 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume out_Tmp_232 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume out_Tmp_232 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume out_Tmp_232 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume out_Tmp_232 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume out_Tmp_232 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume out_Tmp_232 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume out_Tmp_232 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume out_Tmp_232 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume out_Tmp_232 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume out_Tmp_232 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume out_Tmp_232 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume out_Tmp_232 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume out_Tmp_232 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume out_Tmp_232 != 1;
    goto anon87_Then;

  anon87_Then:
    assume out_Tmp_232 == 0;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235] == 0;
    goto L45;

  L45:
    call {:si_unique_call 2449} out_Tmp_230 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_230 != 0;
    assume out_Tmp_230 > 0;
    Mem_T.INT4[out_Tmp_230] := out_oldIrql_3;
    call {:si_unique_call 2450} IoAcquireCancelSpinLock(out_Tmp_230);
    assume {:nonnull} out_Tmp_230 != 0;
    assume out_Tmp_230 > 0;
    out_oldIrql_3 := Mem_T.INT4[out_Tmp_230];
    assume {:nonnull} in_PDevExt_13 != 0;
    assume in_PDevExt_13 > 0;
    havoc out_pIrpLink;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 2457} {:si_old_unique_call 1} out_Tmp_230, out_sdv_219, out_Tmp_231, out_Tmp_232, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_235, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158 := SerialUnstallIrps_loop_L16(out_Tmp_230, out_sdv_219, out_Tmp_231, out_Tmp_232, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_235, in_PDevExt_13, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158);
    return;

  anon86_Then:
    assume out_Tmp_232 == 1;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume out_Tmp_232 == 2;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume out_Tmp_232 == 3;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume out_Tmp_232 == 4;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume out_Tmp_232 == 5;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume out_Tmp_232 == 6;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume out_Tmp_232 == 7;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume out_Tmp_232 == 8;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume out_Tmp_232 == 9;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume out_Tmp_232 == 10;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume out_Tmp_232 == 11;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume out_Tmp_232 == 12;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume out_Tmp_232 == 13;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume out_Tmp_232 == 14;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume out_Tmp_232 == 15;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume out_Tmp_232 == 16;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume out_Tmp_232 == 17;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume out_Tmp_232 == 18;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume out_Tmp_232 == 19;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume out_Tmp_232 == 20;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume out_Tmp_232 == 21;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume out_Tmp_232 == 22;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume out_Tmp_232 == 23;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume out_Tmp_232 == 24;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume out_Tmp_232 == 25;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume out_Tmp_232 == 26;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume out_Tmp_232 == 27;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    assume Mem_T.INT4[out_Tmp_235 + 27 * 4] == 0;
    goto L45;
}



procedure {:LoopProcedure} SerialUnstallIrps_loop_L16(in_Tmp_230: int, in_sdv_219: int, in_Tmp_231: int, in_Tmp_232: int, in_oldIrql_3: int, in_pIrpStack_4: int, in_pIrp: int, in_pDevObj: int, in_pDrvObj: int, in_pIrpLink: int, in_Tmp_235: int, in_PDevExt_13: int, in_vslice_dummy_var_156: int, in_vslice_dummy_var_157: int, in_vslice_dummy_var_158: int) returns (out_Tmp_230: int, out_sdv_219: int, out_Tmp_231: int, out_Tmp_232: int, out_oldIrql_3: int, out_pIrpStack_4: int, out_pIrp: int, out_pDevObj: int, out_pDrvObj: int, out_pIrpLink: int, out_Tmp_235: int, out_vslice_dummy_var_156: int, out_vslice_dummy_var_157: int, out_vslice_dummy_var_158: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} out_Tmp_230 == in_Tmp_230;
  free ensures {:va_keep} out_sdv_219 == in_sdv_219;
  free ensures {:va_keep} out_Tmp_231 == in_Tmp_231;
  free ensures {:va_keep} out_Tmp_232 == in_Tmp_232;
  free ensures {:va_keep} out_oldIrql_3 == in_oldIrql_3;
  free ensures {:va_keep} out_pIrpStack_4 == in_pIrpStack_4;
  free ensures {:va_keep} out_pIrp == in_pIrp;
  free ensures {:va_keep} out_pDevObj == in_pDevObj;
  free ensures {:va_keep} out_pDrvObj == in_pDrvObj;
  free ensures {:va_keep} out_pIrpLink == in_pIrpLink;
  free ensures {:va_keep} out_Tmp_235 == in_Tmp_235;
  free ensures {:va_keep} out_vslice_dummy_var_156 == in_vslice_dummy_var_156;
  free ensures {:va_keep} out_vslice_dummy_var_157 == in_vslice_dummy_var_157;
  free ensures {:va_keep} out_vslice_dummy_var_158 == in_vslice_dummy_var_158;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_Tmp_239: int, in_sdv_224: int, in_sdv_225: int, in_cancelRoutine_1: int, in_DeviceObject_8: int, in_QueueToClean: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_Tmp_239: int, out_sdv_224: int, out_sdv_225: int, out_cancelRoutine_1: int)
{
  var vslice_dummy_var_1516: int;

  entry:
    out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_239, out_sdv_224, out_sdv_225, out_cancelRoutine_1 := in_currentLastIrp_1, in_cancelIrql_1, in_Tmp_239, in_sdv_224, in_sdv_225, in_cancelRoutine_1;
    goto L8, exit;

  exit:
    return;

  L8:
    call {:si_unique_call 2458} out_sdv_224 := sdv_IsListEmpty(0);
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_sdv_224 == 0;
    assume {:nonnull} in_QueueToClean != 0;
    assume in_QueueToClean > 0;
    havoc vslice_dummy_var_1516;
    call {:si_unique_call 2462} out_sdv_225 := sdv_containing_record(vslice_dummy_var_1516, 88);
    out_currentLastIrp_1 := out_sdv_225;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    havoc out_cancelRoutine_1;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant571;
    call {:si_unique_call 2467} SerialCancelCurrentWrite(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  L39:
    call {:si_unique_call 2459} out_Tmp_239 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_239 != 0;
    assume out_Tmp_239 > 0;
    Mem_T.INT4[out_Tmp_239] := out_cancelIrql_1;
    call {:si_unique_call 2460} IoAcquireCancelSpinLock(out_Tmp_239);
    assume {:nonnull} out_Tmp_239 != 0;
    assume out_Tmp_239 > 0;
    out_cancelIrql_1 := Mem_T.INT4[out_Tmp_239];
    goto L39_dummy;

  L39_dummy:
    call {:si_unique_call 2468} {:si_old_unique_call 1} out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_239, out_sdv_224, out_sdv_225, out_cancelRoutine_1 := SerialKillAllReadsOrWrites_loop_L8(out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_239, out_sdv_224, out_sdv_225, out_cancelRoutine_1, in_DeviceObject_8, in_QueueToClean);
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant575;
    call {:si_unique_call 2466} SerialCancelCurrentXoff(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon59_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant1086;
    call {:si_unique_call 2465} SerialCancelImmediate(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon58_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant665;
    call {:si_unique_call 2464} SerialCancelQueued(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon57_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant619;
    call {:si_unique_call 2463} SerialCancelWait(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon69_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant667;
    call {:si_unique_call 2461} SerialFilterCancelQueued(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L39;
}



procedure {:LoopProcedure} SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_Tmp_239: int, in_sdv_224: int, in_sdv_225: int, in_cancelRoutine_1: int, in_DeviceObject_8: int, in_QueueToClean: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_Tmp_239: int, out_sdv_224: int, out_sdv_225: int, out_cancelRoutine_1: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == old(yogi_error);
  free ensures {:va_keep} out_currentLastIrp_1 == in_currentLastIrp_1;
  free ensures {:va_keep} out_cancelIrql_1 == in_cancelIrql_1;
  free ensures {:va_keep} out_Tmp_239 == in_Tmp_239;
  free ensures {:va_keep} out_sdv_224 == in_sdv_224;
  free ensures {:va_keep} out_sdv_225 == in_sdv_225;
  free ensures {:va_keep} out_cancelRoutine_1 == in_cancelRoutine_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialStartRead_loop_L23(in_localStatus_1: int, in_Tmp_285: int, in_Tmp_286: int, in_sdv_258: int, in_Tmp_288: int, in_Tmp_289: int, in_Tmp_290: int, in_Tmp_291: int, in_totalTime: int, in_os2ssreturn: int, in_updateChar: int, in_timeoutsForIrp: int, in_setFirstStatus: int, in_useTotalTimer: int, in_newIrp_1: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_264: int, in_oldIrql_6: int, in_sdv_266: int, in_constantVal: int, in_controlIrql: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_Tmp_293: int, in_sdv_273: int, in_firstStatus: int, in_Extension_11: int, in_boogieTmp: int, in_vslice_dummy_var_182: int, in_vslice_dummy_var_183: int, in_vslice_dummy_var_184: int, in_vslice_dummy_var_187: int) returns (out_localStatus_1: int, out_Tmp_285: int, out_Tmp_286: int, out_sdv_258: int, out_Tmp_288: int, out_Tmp_289: int, out_Tmp_290: int, out_Tmp_291: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_264: int, out_oldIrql_6: int, out_sdv_266: int, out_constantVal: int, out_controlIrql: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_Tmp_293: int, out_sdv_273: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_182: int, out_vslice_dummy_var_183: int, out_vslice_dummy_var_184: int, out_vslice_dummy_var_187: int)
{

  entry:
    out_localStatus_1, out_Tmp_285, out_Tmp_286, out_sdv_258, out_Tmp_288, out_Tmp_289, out_Tmp_290, out_Tmp_291, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_264, out_oldIrql_6, out_sdv_266, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_293, out_sdv_273, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_187 := in_localStatus_1, in_Tmp_285, in_Tmp_286, in_sdv_258, in_Tmp_288, in_Tmp_289, in_Tmp_290, in_Tmp_291, in_os2ssreturn, in_setFirstStatus, in_useTotalTimer, in_multiplierVal, in_crunchDownToOne, in_sdv_264, in_oldIrql_6, in_sdv_266, in_constantVal, in_controlIrql, in_returnWithWhatsPresent, in_useIntervalTimer, in_Tmp_293, in_sdv_273, in_firstStatus, in_boogieTmp, in_vslice_dummy_var_182, in_vslice_dummy_var_183, in_vslice_dummy_var_184, in_vslice_dummy_var_187;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2469} out_sdv_264 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)]);
    assume {:nonnull} out_sdv_264 != 0;
    assume out_sdv_264 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_264)] != 3;
    call {:si_unique_call 2491} out_localStatus_1 := SerialResizeBuffer(in_Extension_11);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2470} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11), ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_11), in_newIrp_1, 1, in_Extension_11);
    goto anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_newIrp_1 != 0;
    assume in_newIrp_1 > 0;
    goto anon63_Then;

  anon63_Then:
    assume {:partition} Mem_T.P_IRP[in_newIrp_1] != 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    call {:si_unique_call 2492} {:si_old_unique_call 1} out_localStatus_1, out_Tmp_285, out_Tmp_286, out_sdv_258, out_Tmp_288, out_Tmp_289, out_Tmp_290, out_Tmp_291, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_264, out_oldIrql_6, out_sdv_266, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_293, out_sdv_273, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_187 := SerialStartRead_loop_L23(out_localStatus_1, out_Tmp_285, out_Tmp_286, out_sdv_258, out_Tmp_288, out_Tmp_289, out_Tmp_290, out_Tmp_291, in_totalTime, out_os2ssreturn, in_updateChar, in_timeoutsForIrp, out_setFirstStatus, out_useTotalTimer, in_newIrp_1, out_multiplierVal, out_crunchDownToOne, out_sdv_264, out_oldIrql_6, out_sdv_266, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_293, out_sdv_273, out_firstStatus, in_Extension_11, out_boogieTmp, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_187);
    return;

  anon62_Then:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := out_localStatus_1;
    out_setFirstStatus := 1;
    goto L37;

  anon61_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_264)] == 3;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2481} out_sdv_266 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)]);
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} out_sdv_266 != 0;
    assume out_sdv_266 > 0;
    out_useTotalTimer := 0;
    out_returnWithWhatsPresent := 0;
    out_os2ssreturn := 0;
    out_crunchDownToOne := 0;
    out_useIntervalTimer := 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2482} out_vslice_dummy_var_187 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_11), in_Extension_11);
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2483} out_vslice_dummy_var_182 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_11), in_Extension_11);
    call {:si_unique_call 2484} out_Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_291 != 0;
    assume out_Tmp_291 > 0;
    Mem_T.INT4[out_Tmp_291] := out_controlIrql;
    call {:si_unique_call 2485} sdv_KeAcquireSpinLock(0, out_Tmp_291);
    assume {:nonnull} out_Tmp_291 != 0;
    assume out_Tmp_291 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_291];
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    call {:si_unique_call 2486} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    out_useIntervalTimer := 1;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    goto L66;

  L66:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L76;

  L76:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  L83:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_useTotalTimer != 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_totalTime != 0;
    assume in_totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 2478} out_Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_291 != 0;
    assume out_Tmp_291 > 0;
    Mem_T.INT4[out_Tmp_291] := out_controlIrql;
    call {:si_unique_call 2479} sdv_KeAcquireSpinLock(0, out_Tmp_291);
    assume {:nonnull} out_Tmp_291 != 0;
    assume out_Tmp_291 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_291];
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    call {:si_unique_call 2480} out_boogieTmp := SerialGetCharsFromIntBuffer(in_Extension_11);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 2489} out_vslice_dummy_var_183 := KeSynchronizeExecution(0, li2bplFunctionConstant721, 0);
    call {:si_unique_call 2490} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    out_Tmp_286 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)];
    assume {:nonnull} out_Tmp_286 != 0;
    assume out_Tmp_286 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_286))] := 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon74_Then:
    assume {:partition} out_returnWithWhatsPresent == 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} out_os2ssreturn != 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    out_Tmp_285 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)];
    assume {:nonnull} out_Tmp_285 != 0;
    assume out_Tmp_285 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto L105;

  L105:
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2475} out_sdv_273 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)]);
    assume {:nonnull} out_sdv_273 != 0;
    assume out_sdv_273 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_273)))] := 0;
    call {:si_unique_call 2476} out_Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_291 != 0;
    assume out_Tmp_291 > 0;
    Mem_T.INT4[out_Tmp_291] := out_oldIrql_6;
    call {:si_unique_call 2477} IoAcquireCancelSpinLock(out_Tmp_291);
    assume {:nonnull} out_Tmp_291 != 0;
    assume out_Tmp_291 > 0;
    out_oldIrql_6 := Mem_T.INT4[out_Tmp_291];
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    out_Tmp_288 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)];
    assume {:nonnull} out_Tmp_288 != 0;
    assume out_Tmp_288 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    call {:si_unique_call 2487} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 2488} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    out_Tmp_293 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)];
    assume {:nonnull} out_Tmp_293 != 0;
    assume out_Tmp_293 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_293))] := -1073741536;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    out_Tmp_289 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)];
    assume {:nonnull} out_Tmp_289 != 0;
    assume out_Tmp_289 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := -1073741536;
    out_setFirstStatus := 1;
    goto L37;

  anon89_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon88_Then:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_crunchDownToOne != 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2474} out_sdv_258 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)]);
    assume {:nonnull} out_sdv_258 != 0;
    assume out_sdv_258 > 0;
    goto L126;

  L126:
    call {:si_unique_call 2473} out_vslice_dummy_var_184 := KeSynchronizeExecution(0, li2bplFunctionConstant722, 0);
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    goto anon78_Else;

  anon78_Else:
    call {:si_unique_call 2471} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 2472} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    out_Tmp_290 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)];
    assume {:nonnull} out_Tmp_290 != 0;
    assume out_Tmp_290 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_290))] := 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon90_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon77_Then:
    assume {:partition} out_crunchDownToOne == 0;
    goto L126;

  anon87_Then:
    goto L94;

  anon76_Then:
    assume {:partition} out_os2ssreturn == 0;
    goto L105;

  anon75_Then:
    goto L94;

  anon73_Then:
    assume {:partition} out_useTotalTimer == 0;
    goto L84;

  anon72_Then:
    goto L77;

  L77:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    out_crunchDownToOne := 1;
    out_multiplierVal := 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon82_Then:
    goto L83;

  anon71_Then:
    goto L83;

  anon70_Then:
    goto L77;

  anon68_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    out_returnWithWhatsPresent := 1;
    goto L83;

  anon69_Then:
    goto L76;

  anon65_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L192;

  L192:
    out_useTotalTimer := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon67_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L192;

  anon83_Then:
    goto L83;

  anon85_Then:
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    goto L66;

  anon66_Then:
    goto L66;

  anon64_Then:
    goto L66;
}



procedure {:LoopProcedure} SerialStartRead_loop_L23(in_localStatus_1: int, in_Tmp_285: int, in_Tmp_286: int, in_sdv_258: int, in_Tmp_288: int, in_Tmp_289: int, in_Tmp_290: int, in_Tmp_291: int, in_totalTime: int, in_os2ssreturn: int, in_updateChar: int, in_timeoutsForIrp: int, in_setFirstStatus: int, in_useTotalTimer: int, in_newIrp_1: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_264: int, in_oldIrql_6: int, in_sdv_266: int, in_constantVal: int, in_controlIrql: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_Tmp_293: int, in_sdv_273: int, in_firstStatus: int, in_Extension_11: int, in_boogieTmp: int, in_vslice_dummy_var_182: int, in_vslice_dummy_var_183: int, in_vslice_dummy_var_184: int, in_vslice_dummy_var_187: int) returns (out_localStatus_1: int, out_Tmp_285: int, out_Tmp_286: int, out_sdv_258: int, out_Tmp_288: int, out_Tmp_289: int, out_Tmp_290: int, out_Tmp_291: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_264: int, out_oldIrql_6: int, out_sdv_266: int, out_constantVal: int, out_controlIrql: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_Tmp_293: int, out_sdv_273: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_182: int, out_vslice_dummy_var_183: int, out_vslice_dummy_var_184: int, out_vslice_dummy_var_187: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_localStatus_1 == 0 || out_localStatus_1 == in_localStatus_1;
  free ensures {:va_keep} out_os2ssreturn == 0 || out_os2ssreturn == 1 || out_os2ssreturn == in_os2ssreturn;
  free ensures {:va_keep} out_setFirstStatus == 1 || out_setFirstStatus == in_setFirstStatus;
  free ensures {:va_keep} out_useTotalTimer == 0 || out_useTotalTimer == 1 || out_useTotalTimer == in_useTotalTimer;
  free ensures {:va_keep} out_crunchDownToOne == 0 || out_crunchDownToOne == 1 || out_crunchDownToOne == in_crunchDownToOne;
  free ensures {:va_keep} out_returnWithWhatsPresent == 1 || out_returnWithWhatsPresent == 0 || out_returnWithWhatsPresent == in_returnWithWhatsPresent;
  free ensures {:va_keep} out_useIntervalTimer == 1 || out_useIntervalTimer == 0 || out_useIntervalTimer == in_useIntervalTimer;
  free ensures {:va_keep} out_firstStatus == 0 || out_firstStatus == -1073741536 || out_firstStatus == in_firstStatus;
  free ensures {:va_keep} out_vslice_dummy_var_182 == 1 || out_vslice_dummy_var_182 == 0 || out_vslice_dummy_var_182 == in_vslice_dummy_var_182;
  free ensures {:va_keep} out_vslice_dummy_var_183 == 1 || out_vslice_dummy_var_183 == 0 || out_vslice_dummy_var_183 == in_vslice_dummy_var_183;
  free ensures {:va_keep} out_vslice_dummy_var_184 == 1 || out_vslice_dummy_var_184 == 0 || out_vslice_dummy_var_184 == in_vslice_dummy_var_184;
  free ensures {:va_keep} out_vslice_dummy_var_187 == 1 || out_vslice_dummy_var_187 == 0 || out_vslice_dummy_var_187 == in_vslice_dummy_var_187;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int)
{
  var vslice_dummy_var_1517: int;

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_sDeviceData, in_gotISR, in_gotMem;
    goto L95, exit;

  exit:
    return;

  L95:
    goto anon132_Else;

  anon132_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto L105;

  L105:
    out_i := out_i + 1;
    goto L105_dummy;

  L105_dummy:
    call {:si_unique_call 2493} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L95(in_ioResIndex, in_isMulti, in_count, out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem, in_pPartialResourceDesc, in_PConfig);
    return;

  anon171_Then:
    out_sDeviceData := in_pPartialResourceDesc;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} out_sDeviceData != 0;
    assume out_sDeviceData > 0;
    havoc vslice_dummy_var_1517;
    Mem_T.INT4[ClockRate__CONFIG_DATA(in_PConfig)] := vslice_dummy_var_1517;
    goto L105;

  anon172_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} out_gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} out_gotMem != 0;
    goto L105;

  anon173_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon177_Then:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} out_gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L105;

  anon140_Then:
    assume {:partition} out_gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_sDeviceData == in_sDeviceData || out_sDeviceData == in_pPartialResourceDesc;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int)
{

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_gotISR, in_gotMem;
    goto L148, exit;

  exit:
    return;

  L148:
    goto anon143_Else;

  anon143_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    goto L156;

  L156:
    out_i := out_i + 1;
    goto L156_dummy;

  L156_dummy:
    call {:si_unique_call 2494} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L148(in_ioResIndex, in_isMulti, in_count, out_gotIO, in_pPartialTrResourceDesc, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem, in_PConfig);
    return;

  anon174_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} out_gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} out_gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon175_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} out_gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L156;

  anon151_Then:
    assume {:partition} out_gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int);
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_238: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_238: int)
{

  entry:
    out_interfaceType, out_foundOne, out_vslice_dummy_var_238 := in_interfaceType, in_foundOne, in_vslice_dummy_var_238;
    goto L191, exit;

  exit:
    return;

  L191:
    assume {:CounterLoop 18} {:Counter "interfaceType"} true;
    goto anon154_Else;

  anon154_Else:
    assume {:partition} 18 > out_interfaceType;
    out_foundOne := 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} out_interfaceType != 0;
    call {:si_unique_call 2495} out_vslice_dummy_var_238 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon156_Then;

  anon156_Then:
    assume {:partition} out_foundOne == 0;
    goto L198;

  L198:
    out_interfaceType := out_interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    havoc out_interfaceType;
    return;

  anon179_Then:
    assume {:partition} out_interfaceType == 0;
    goto L198;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_238: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_238: int);
  free ensures {:va_keep} out_foundOne == 0 || out_foundOne == in_foundOne;
  free ensures {:va_keep} out_vslice_dummy_var_238 == 0 || out_vslice_dummy_var_238 == -1073741823 || out_vslice_dummy_var_238 == in_vslice_dummy_var_238;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialFinishStartDevice_loop_L219()
{

  entry:
    goto L219, exit;

  exit:
    return;

  L219:
    goto L219_dummy;

  L219_dummy:
    call {:si_unique_call 2496} {:si_old_unique_call 1} SerialFinishStartDevice_loop_L219();
    return;
}



procedure {:LoopProcedure} SerialFinishStartDevice_loop_L219();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialPnpDispatch_loop_L179(in_sdv_405: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int)
{

  entry:
    out_allocLen, out_curStrLen := in_allocLen, in_curStrLen;
    goto L179, exit;

  exit:
    return;

  L179:
    out_curStrLen := in_sdv_405;
    goto anon353_Else;

  anon353_Else:
    assume {:partition} out_curStrLen != 0;
    out_allocLen := out_allocLen + out_curStrLen * 2 + 2;
    goto anon353_Else_dummy;

  anon353_Else_dummy:
    havoc out_allocLen;
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L179(in_sdv_405: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int);
  free ensures {:va_keep} out_curStrLen == in_sdv_405 || out_curStrLen == in_curStrLen;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_11: int, in_Tmp_499: int, in_isMulti_2: int, in_Tmp_509: int, in_pLowerDevObj_3: int, in_Tmp_515: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_522: int, in_Tmp_526: int, in_j: int, in_gotISR_1: int, in_vslice_dummy_var_337: int, in_vslice_dummy_var_338: int, in_vslice_dummy_var_339: int) returns (out_Tmp_499: int, out_Tmp_509: int, out_Tmp_515: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_522: int, out_Tmp_526: int, out_j: int, out_gotISR_1: int, out_vslice_dummy_var_337: int, out_vslice_dummy_var_338: int, out_vslice_dummy_var_339: int)
{

  entry:
    out_Tmp_499, out_Tmp_509, out_Tmp_515, out_gotInt_1, out_pResDesc, out_Tmp_522, out_Tmp_526, out_j, out_gotISR_1, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339 := in_Tmp_499, in_Tmp_509, in_Tmp_515, in_gotInt_1, in_pResDesc, in_Tmp_522, in_Tmp_526, in_j, in_gotISR_1, in_vslice_dummy_var_337, in_vslice_dummy_var_338, in_vslice_dummy_var_339;
    goto L354, exit;

  exit:
    return;

  L354:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon262_Else;

  anon262_Else:
    out_Tmp_499 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_509;
    out_pResDesc := out_Tmp_509 + out_Tmp_499 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon268_Else;

  anon268_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    goto L369_dummy;

  L369_dummy:
    call {:si_unique_call 2500} {:si_old_unique_call 1} out_Tmp_499, out_Tmp_509, out_Tmp_515, out_gotInt_1, out_pResDesc, out_Tmp_522, out_Tmp_526, out_j, out_gotISR_1, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_11, out_Tmp_499, in_isMulti_2, out_Tmp_509, in_pLowerDevObj_3, out_Tmp_515, out_gotInt_1, out_pResDesc, out_Tmp_522, out_Tmp_526, out_j, out_gotISR_1, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339);
    return;

  anon266_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon269_Else;

  anon269_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon267_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon265_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon317_Then:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon264_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_526 := strConst__li2bpl161;
    call {:si_unique_call 2497} out_vslice_dummy_var_338 := SerialDbgPrintEx(12, out_Tmp_526);
    goto L363;

  anon344_Then:
    assume {:nonnull} in_pDevExt_11 != 0;
    assume in_pDevExt_11 > 0;
    out_Tmp_522 := strConst__li2bpl162;
    call {:si_unique_call 2498} out_vslice_dummy_var_339 := SerialDbgPrintEx(12, out_Tmp_522);
    goto L363;

  anon343_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_515 := strConst__li2bpl160;
    call {:si_unique_call 2499} out_vslice_dummy_var_337 := SerialDbgPrintEx(12, out_Tmp_515);
    goto L363;

  anon271_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon270_Then:
    goto L363;

  anon263_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_11: int, in_Tmp_499: int, in_isMulti_2: int, in_Tmp_509: int, in_pLowerDevObj_3: int, in_Tmp_515: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_522: int, in_Tmp_526: int, in_j: int, in_gotISR_1: int, in_vslice_dummy_var_337: int, in_vslice_dummy_var_338: int, in_vslice_dummy_var_339: int) returns (out_Tmp_499: int, out_Tmp_509: int, out_Tmp_515: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_522: int, out_Tmp_526: int, out_j: int, out_gotISR_1: int, out_vslice_dummy_var_337: int, out_vslice_dummy_var_338: int, out_vslice_dummy_var_339: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_337 == 0 || out_vslice_dummy_var_337 == in_vslice_dummy_var_337;
  free ensures {:va_keep} out_vslice_dummy_var_338 == 0 || out_vslice_dummy_var_338 == in_vslice_dummy_var_338;
  free ensures {:va_keep} out_vslice_dummy_var_339 == 0 || out_vslice_dummy_var_339 == in_vslice_dummy_var_339;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_11: int, in_Tmp_499: int, in_isMulti_2: int, in_Tmp_509: int, in_pLowerDevObj_3: int, in_Tmp_515: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_Tmp_522: int, in_pReqList: int, in_Tmp_526: int, in_j: int, in_gotISR_1: int, in_Tmp_547: int, in_vslice_dummy_var_336: int, in_vslice_dummy_var_337: int, in_vslice_dummy_var_338: int, in_vslice_dummy_var_339: int) returns (out_Tmp_499: int, out_Tmp_509: int, out_Tmp_515: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_522: int, out_Tmp_526: int, out_j: int, out_gotISR_1: int, out_Tmp_547: int, out_vslice_dummy_var_336: int, out_vslice_dummy_var_337: int, out_vslice_dummy_var_338: int, out_vslice_dummy_var_339: int)
{

  entry:
    out_Tmp_499, out_Tmp_509, out_Tmp_515, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_522, out_Tmp_526, out_j, out_gotISR_1, out_Tmp_547, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339 := in_Tmp_499, in_Tmp_509, in_Tmp_515, in_gotInt_1, in_pResDesc, in_listNum, in_Tmp_522, in_Tmp_526, in_j, in_gotISR_1, in_Tmp_547, in_vslice_dummy_var_336, in_vslice_dummy_var_337, in_vslice_dummy_var_338, in_vslice_dummy_var_339;
    goto L346, exit;

  exit:
    return;

  L346:
    assume {:nonnull} in_pReqList != 0;
    assume in_pReqList > 0;
    goto anon261_Else;

  anon261_Else:
    out_gotISR_1 := 0;
    out_gotInt_1 := 0;
    out_Tmp_547 := strConst__li2bpl159;
    call {:si_unique_call 2502} out_vslice_dummy_var_336 := SerialDbgPrintEx(12, out_Tmp_547);
    out_j := 0;
    goto L354;

  L354:
    call {:si_unique_call 2501} out_Tmp_499, out_Tmp_509, out_Tmp_515, out_gotInt_1, out_pResDesc, out_Tmp_522, out_Tmp_526, out_j, out_gotISR_1, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_11, out_Tmp_499, in_isMulti_2, out_Tmp_509, in_pLowerDevObj_3, out_Tmp_515, out_gotInt_1, out_pResDesc, out_Tmp_522, out_Tmp_526, out_j, out_gotISR_1, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339);
    goto L354_last;

  L354_last:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon262_Then, anon262_Else;

  anon262_Else:
    out_Tmp_499 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_509;
    out_pResDesc := out_Tmp_509 + out_Tmp_499 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    assume false;
    return;

  anon266_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon269_Then:
    assume {:partition} out_gotInt_1 != 0;
    goto L355;

  L355:
    out_listNum := out_listNum + 1;
    goto L355_dummy;

  L355_dummy:
    call {:si_unique_call 2506} {:si_old_unique_call 1} out_Tmp_499, out_Tmp_509, out_Tmp_515, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_522, out_Tmp_526, out_j, out_gotISR_1, out_Tmp_547, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339 := SerialPnpDispatch_loop_L346(in_pResList, in_pDevExt_11, out_Tmp_499, in_isMulti_2, out_Tmp_509, in_pLowerDevObj_3, out_Tmp_515, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_522, in_pReqList, out_Tmp_526, out_j, out_gotISR_1, out_Tmp_547, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339);
    return;

  anon268_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L355;

  anon267_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon265_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon317_Then:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon264_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_526 := strConst__li2bpl161;
    call {:si_unique_call 2503} out_vslice_dummy_var_338 := SerialDbgPrintEx(12, out_Tmp_526);
    goto L363;

  anon344_Then:
    assume {:nonnull} in_pDevExt_11 != 0;
    assume in_pDevExt_11 > 0;
    out_Tmp_522 := strConst__li2bpl162;
    call {:si_unique_call 2504} out_vslice_dummy_var_339 := SerialDbgPrintEx(12, out_Tmp_522);
    goto L363;

  anon343_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_515 := strConst__li2bpl160;
    call {:si_unique_call 2505} out_vslice_dummy_var_337 := SerialDbgPrintEx(12, out_Tmp_515);
    goto L363;

  anon271_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon270_Then:
    goto L363;

  anon263_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;

  anon262_Then:
    goto L355;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_11: int, in_Tmp_499: int, in_isMulti_2: int, in_Tmp_509: int, in_pLowerDevObj_3: int, in_Tmp_515: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_Tmp_522: int, in_pReqList: int, in_Tmp_526: int, in_j: int, in_gotISR_1: int, in_Tmp_547: int, in_vslice_dummy_var_336: int, in_vslice_dummy_var_337: int, in_vslice_dummy_var_338: int, in_vslice_dummy_var_339: int) returns (out_Tmp_499: int, out_Tmp_509: int, out_Tmp_515: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_522: int, out_Tmp_526: int, out_j: int, out_gotISR_1: int, out_Tmp_547: int, out_vslice_dummy_var_336: int, out_vslice_dummy_var_337: int, out_vslice_dummy_var_338: int, out_vslice_dummy_var_339: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == 0 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == 0 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_336 == 0 || out_vslice_dummy_var_336 == in_vslice_dummy_var_336;
  free ensures {:va_keep} out_vslice_dummy_var_337 == 0 || out_vslice_dummy_var_337 == in_vslice_dummy_var_337;
  free ensures {:va_keep} out_vslice_dummy_var_338 == 0 || out_vslice_dummy_var_338 == in_vslice_dummy_var_338;
  free ensures {:va_keep} out_vslice_dummy_var_339 == 0 || out_vslice_dummy_var_339 == in_vslice_dummy_var_339;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:SIextraRecBound 5} SerialPnpDispatch_loop_L476(in_pDevExt_11: int, in_cap: int, in_Tmp_510: int, in_Tmp_533: int, in_Tmp_536: int, in_pDevCaps: int, in_Tmp_553: int) returns (out_cap: int, out_Tmp_510: int, out_Tmp_533: int, out_Tmp_536: int, out_Tmp_553: int)
{

  entry:
    out_cap, out_Tmp_510, out_Tmp_533, out_Tmp_536, out_Tmp_553 := in_cap, in_Tmp_510, in_Tmp_533, in_Tmp_536, in_Tmp_553;
    goto L476, exit;

  exit:
    return;

  L476:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon278_Else;

  anon278_Else:
    assume {:partition} 7 > out_cap;
    out_Tmp_536 := out_cap;
    assume {:nonnull} in_pDevExt_11 != 0;
    assume in_pDevExt_11 > 0;
    havoc out_Tmp_510;
    out_Tmp_553 := out_cap;
    assume {:nonnull} in_pDevCaps != 0;
    assume in_pDevCaps > 0;
    havoc out_Tmp_533;
    assume {:nonnull} out_Tmp_510 != 0;
    assume out_Tmp_510 > 0;
    assume {:nonnull} out_Tmp_533 != 0;
    assume out_Tmp_533 > 0;
    Mem_T.INT4[out_Tmp_510 + out_Tmp_536 * 4] := Mem_T.INT4[out_Tmp_533 + out_Tmp_553 * 4];
    out_cap := out_cap + 1;
    goto anon278_Else_dummy;

  anon278_Else_dummy:
    call {:si_unique_call 2507} {:si_old_unique_call 1} out_cap, out_Tmp_510, out_Tmp_533, out_Tmp_536, out_Tmp_553 := SerialPnpDispatch_loop_L476(in_pDevExt_11, out_cap, out_Tmp_510, out_Tmp_533, out_Tmp_536, in_pDevCaps, out_Tmp_553);
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L476(in_pDevExt_11: int, in_cap: int, in_Tmp_510: int, in_Tmp_533: int, in_Tmp_536: int, in_pDevCaps: int, in_Tmp_553: int) returns (out_cap: int, out_Tmp_510: int, out_Tmp_533: int, out_Tmp_536: int, out_Tmp_553: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialInternalIoControl_loop_L126(in_Tmp_644: int, in_pDevExt_13: int, in_cap_1: int, in_Tmp_647: int, in_Tmp_650: int, in_Tmp_652: int) returns (out_Tmp_644: int, out_cap_1: int, out_Tmp_647: int, out_Tmp_650: int, out_Tmp_652: int)
{

  entry:
    out_Tmp_644, out_cap_1, out_Tmp_647, out_Tmp_650, out_Tmp_652 := in_Tmp_644, in_cap_1, in_Tmp_647, in_Tmp_650, in_Tmp_652;
    goto L126, exit;

  exit:
    return;

  L126:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon52_Else;

  anon52_Else:
    assume {:partition} 7 > out_cap_1;
    out_Tmp_644 := out_cap_1;
    assume {:nonnull} in_pDevExt_13 != 0;
    assume in_pDevExt_13 > 0;
    havoc out_Tmp_650;
    assume {:nonnull} out_Tmp_650 != 0;
    assume out_Tmp_650 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_650 + out_Tmp_644 * 4] >= 1;
    out_Tmp_652 := out_cap_1;
    assume {:nonnull} in_pDevExt_13 != 0;
    assume in_pDevExt_13 > 0;
    havoc out_Tmp_647;
    assume {:nonnull} out_Tmp_647 != 0;
    assume out_Tmp_647 > 0;
    assume {:nonnull} in_pDevExt_13 != 0;
    assume in_pDevExt_13 > 0;
    goto anon61_Else;

  anon61_Else:
    goto L129;

  L129:
    out_cap_1 := out_cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    havoc out_cap_1;
    return;

  anon60_Then:
    assume {:partition} 1 > Mem_T.INT4[out_Tmp_650 + out_Tmp_644 * 4];
    goto L129;
}



procedure {:LoopProcedure} SerialInternalIoControl_loop_L126(in_Tmp_644: int, in_pDevExt_13: int, in_cap_1: int, in_Tmp_647: int, in_Tmp_650: int, in_Tmp_652: int) returns (out_Tmp_644: int, out_cap_1: int, out_Tmp_647: int, out_Tmp_650: int, out_Tmp_652: int);
  free ensures {:va_keep} out_Tmp_644 == in_cap_1 || out_Tmp_644 == in_Tmp_644;
  free ensures {:va_keep} out_Tmp_652 == in_cap_1 || out_Tmp_652 == in_Tmp_652;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialReleaseResources_loop_L42(in_i_1: int, in_Tmp_729: int, in_Tmp_731: int, in_Tmp_735: int, in_PDevExt_21: int) returns (out_i_1: int, out_Tmp_729: int, out_Tmp_731: int, out_Tmp_735: int)
{

  entry:
    out_i_1, out_Tmp_729, out_Tmp_731, out_Tmp_735 := in_i_1, in_Tmp_729, in_Tmp_731, in_Tmp_735;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} 16 > out_i_1;
    out_Tmp_731 := out_i_1;
    assume {:nonnull} in_PDevExt_21 != 0;
    assume in_PDevExt_21 > 0;
    havoc out_Tmp_735;
    assume {:nonnull} out_Tmp_735 != 0;
    assume out_Tmp_735 > 0;
    havoc out_Tmp_729;
    assume {:nonnull} out_Tmp_729 != 0;
    assume out_Tmp_729 > 0;
    goto anon66_Else;

  anon66_Else:
    out_i_1 := out_i_1 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    havoc out_i_1;
    return;
}



procedure {:LoopProcedure} SerialReleaseResources_loop_L42(in_i_1: int, in_Tmp_729: int, in_Tmp_731: int, in_Tmp_735: int, in_PDevExt_21: int) returns (out_i_1: int, out_Tmp_729: int, out_Tmp_731: int, out_Tmp_735: int);
  free ensures {:va_keep} out_Tmp_731 == in_i_1 || out_Tmp_731 == in_Tmp_731;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialFindInitController_loop_L182(in_Tmp_745: int, in_pCurDevObj: int, in_sdv_687: int, in_pExtension: int, in_oldIrql_10: int, in_sdv_700: int, in_PConfig_1: int) returns (out_Tmp_745: int, out_pCurDevObj: int, out_sdv_687: int, out_pExtension: int, out_oldIrql_10: int, out_sdv_700: int)
{
  var vslice_dummy_var_1518: int;
  var vslice_dummy_var_1519: int;
  var vslice_dummy_var_1520: int;
  var vslice_dummy_var_1521: int;

  entry:
    out_Tmp_745, out_pCurDevObj, out_sdv_687, out_pExtension, out_oldIrql_10, out_sdv_700 := in_Tmp_745, in_pCurDevObj, in_sdv_687, in_pExtension, in_oldIrql_10, in_sdv_700;
    goto L182, exit;

  exit:
    return;

  L182:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1518;
    havoc vslice_dummy_var_1519;
    havoc vslice_dummy_var_1520;
    havoc vslice_dummy_var_1521;
    call {:si_unique_call 2512} out_sdv_700 := SerialMemCompare(vslice_dummy_var_1518, vslice_dummy_var_1519, vslice_dummy_var_1520, vslice_dummy_var_1521);
    goto anon101_Then;

  anon101_Then:
    assume {:partition} out_sdv_700 != 0;
    goto L183;

  L183:
    call {:si_unique_call 2510} out_Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_745 != 0;
    assume out_Tmp_745 > 0;
    Mem_T.INT4[out_Tmp_745] := out_oldIrql_10;
    call {:si_unique_call 2511} sdv_KeAcquireSpinLock(0, out_Tmp_745);
    assume {:nonnull} out_Tmp_745 != 0;
    assume out_Tmp_745 > 0;
    out_oldIrql_10 := Mem_T.INT4[out_Tmp_745];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 2509} out_sdv_687 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_687;
    goto L216;

  L216:
    call {:si_unique_call 2508} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    goto anon104_Else;

  anon104_Else:
    goto anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    call {:si_unique_call 2513} {:si_old_unique_call 1} out_Tmp_745, out_pCurDevObj, out_sdv_687, out_pExtension, out_oldIrql_10, out_sdv_700 := SerialFindInitController_loop_L182(out_Tmp_745, out_pCurDevObj, out_sdv_687, out_pExtension, out_oldIrql_10, out_sdv_700, in_PConfig_1);
    return;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L182(in_Tmp_745: int, in_pCurDevObj: int, in_sdv_687: int, in_pExtension: int, in_oldIrql_10: int, in_sdv_700: int, in_PConfig_1: int) returns (out_Tmp_745: int, out_pCurDevObj: int, out_sdv_687: int, out_pExtension: int, out_oldIrql_10: int, out_sdv_700: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_687 == in_sdv_687;
  free ensures {:va_keep} out_pExtension == in_pExtension;
  free ensures {:va_keep} out_sdv_700 == 0 || out_sdv_700 == 2 || out_sdv_700 == 1 || out_sdv_700 == in_sdv_700;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialFindInitController_loop_L246(in_Tmp_745: int, in_pCurDevObj: int, in_sdv_677: int, in_pExtension: int, in_oldIrql_10: int, in_PConfig_1: int) returns (out_Tmp_745: int, out_pCurDevObj: int, out_sdv_677: int, out_pExtension: int, out_oldIrql_10: int)
{

  entry:
    out_Tmp_745, out_pCurDevObj, out_sdv_677, out_pExtension, out_oldIrql_10 := in_Tmp_745, in_pCurDevObj, in_sdv_677, in_pExtension, in_oldIrql_10;
    goto L246, exit;

  exit:
    return;

  L246:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon110_Then;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 2516} out_Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_745 != 0;
    assume out_Tmp_745 > 0;
    Mem_T.INT4[out_Tmp_745] := out_oldIrql_10;
    call {:si_unique_call 2517} sdv_KeAcquireSpinLock(0, out_Tmp_745);
    assume {:nonnull} out_Tmp_745 != 0;
    assume out_Tmp_745 > 0;
    out_oldIrql_10 := Mem_T.INT4[out_Tmp_745];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 2515} out_sdv_677 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_677;
    goto L264;

  L264:
    call {:si_unique_call 2514} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    goto anon111_Else;

  anon111_Else:
    goto anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    havoc out_pCurDevObj;
    return;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L246(in_Tmp_745: int, in_pCurDevObj: int, in_sdv_677: int, in_pExtension: int, in_oldIrql_10: int, in_PConfig_1: int) returns (out_Tmp_745: int, out_pCurDevObj: int, out_sdv_677: int, out_pExtension: int, out_oldIrql_10: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_677 == in_sdv_677;
  free ensures {:va_keep} out_pExtension == in_pExtension;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialFindInitController_loop_L78(in_sdv_669: int, in_sdv_670: int, in_sdv_675: int, in_Tmp_745: int, in_sdv_676: int, in_pCurDevObj: int, in_sdv_679: int, in_sdv_682: int, in_Tmp_752: int, in_pExtension: int, in_oldIrql_10: int, in_Tmp_758: int, in_Tmp_759: int, in_sdv_693: int, in_sdv_696: int, in_Tmp_763: int, in_PConfig_1: int, in_vslice_dummy_var_463: int) returns (out_sdv_669: int, out_sdv_670: int, out_sdv_675: int, out_Tmp_745: int, out_sdv_676: int, out_pCurDevObj: int, out_sdv_679: int, out_sdv_682: int, out_pExtension: int, out_oldIrql_10: int, out_Tmp_758: int, out_sdv_693: int, out_sdv_696: int, out_vslice_dummy_var_463: int)
{
  var vslice_dummy_var_1522: int;
  var vslice_dummy_var_1523: int;
  var vslice_dummy_var_1524: int;
  var vslice_dummy_var_1525: int;
  var vslice_dummy_var_1526: int;
  var vslice_dummy_var_1527: int;
  var vslice_dummy_var_1528: int;
  var vslice_dummy_var_1529: int;
  var vslice_dummy_var_1530: int;
  var vslice_dummy_var_1531: int;
  var vslice_dummy_var_1532: int;
  var vslice_dummy_var_1533: int;
  var vslice_dummy_var_1534: int;
  var vslice_dummy_var_1535: int;
  var vslice_dummy_var_1536: int;
  var vslice_dummy_var_1537: int;
  var vslice_dummy_var_1538: int;
  var vslice_dummy_var_1539: int;
  var vslice_dummy_var_1540: int;
  var vslice_dummy_var_1541: int;
  var vslice_dummy_var_1542: int;
  var vslice_dummy_var_1543: int;

  entry:
    out_sdv_669, out_sdv_670, out_sdv_675, out_Tmp_745, out_sdv_676, out_pCurDevObj, out_sdv_679, out_sdv_682, out_pExtension, out_oldIrql_10, out_Tmp_758, out_sdv_693, out_sdv_696, out_vslice_dummy_var_463 := in_sdv_669, in_sdv_670, in_sdv_675, in_Tmp_745, in_sdv_676, in_pCurDevObj, in_sdv_679, in_sdv_682, in_pExtension, in_oldIrql_10, in_Tmp_758, in_sdv_693, in_sdv_696, in_vslice_dummy_var_463;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon82_Else;

  anon82_Else:
    goto anon83_Else;

  anon83_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    out_Tmp_758 := strConst__li2bpl199;
    call {:si_unique_call 2524} out_vslice_dummy_var_463 := SerialDbgPrintEx(4, out_Tmp_758);
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1526;
    havoc vslice_dummy_var_1527;
    havoc vslice_dummy_var_1528;
    havoc vslice_dummy_var_1529;
    call {:si_unique_call 2525} out_sdv_669 := SerialMemCompare(vslice_dummy_var_1526, vslice_dummy_var_1527, vslice_dummy_var_1528, vslice_dummy_var_1529);
    goto anon87_Then;

  anon87_Then:
    assume {:partition} out_sdv_669 == 2;
    assume {:nonnull} in_Tmp_752 != 0;
    assume in_Tmp_752 > 0;
    assume {:nonnull} in_Tmp_752 != 0;
    assume in_Tmp_752 > 0;
    assume {:nonnull} in_Tmp_752 != 0;
    assume in_Tmp_752 > 0;
    assume {:nonnull} in_Tmp_752 != 0;
    assume in_Tmp_752 > 0;
    assume {:nonnull} in_Tmp_752 != 0;
    assume in_Tmp_752 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_1524;
    havoc vslice_dummy_var_1525;
    call {:si_unique_call 2523} out_sdv_693 := SerialMemCompare(vslice_dummy_var_1524, vslice_dummy_var_1525, in_Tmp_752, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} out_sdv_693 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1532;
    havoc vslice_dummy_var_1533;
    havoc vslice_dummy_var_1534;
    havoc vslice_dummy_var_1535;
    call {:si_unique_call 2527} out_sdv_696 := SerialMemCompare(vslice_dummy_var_1532, vslice_dummy_var_1533, vslice_dummy_var_1534, vslice_dummy_var_1535);
    goto anon89_Then;

  anon89_Then:
    assume {:partition} out_sdv_696 == 2;
    assume {:nonnull} in_Tmp_759 != 0;
    assume in_Tmp_759 > 0;
    assume {:nonnull} in_Tmp_759 != 0;
    assume in_Tmp_759 > 0;
    assume {:nonnull} in_Tmp_759 != 0;
    assume in_Tmp_759 > 0;
    assume {:nonnull} in_Tmp_759 != 0;
    assume in_Tmp_759 > 0;
    assume {:nonnull} in_Tmp_759 != 0;
    assume in_Tmp_759 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_1530;
    havoc vslice_dummy_var_1531;
    call {:si_unique_call 2526} out_sdv_670 := SerialMemCompare(vslice_dummy_var_1530, vslice_dummy_var_1531, in_Tmp_759, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_sdv_670 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1536;
    havoc vslice_dummy_var_1537;
    havoc vslice_dummy_var_1538;
    havoc vslice_dummy_var_1539;
    call {:si_unique_call 2528} out_sdv_679 := SerialMemCompare(vslice_dummy_var_1536, vslice_dummy_var_1537, vslice_dummy_var_1538, vslice_dummy_var_1539);
    goto anon91_Then;

  anon91_Then:
    assume {:partition} out_sdv_679 != 1;
    goto L105;

  L105:
    assume {:nonnull} in_Tmp_763 != 0;
    assume in_Tmp_763 > 0;
    assume {:nonnull} in_Tmp_763 != 0;
    assume in_Tmp_763 > 0;
    assume {:nonnull} in_Tmp_763 != 0;
    assume in_Tmp_763 > 0;
    assume {:nonnull} in_Tmp_763 != 0;
    assume in_Tmp_763 > 0;
    assume {:nonnull} in_Tmp_763 != 0;
    assume in_Tmp_763 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1522;
    havoc vslice_dummy_var_1523;
    call {:si_unique_call 2522} out_sdv_682 := SerialMemCompare(vslice_dummy_var_1522, vslice_dummy_var_1523, in_Tmp_763, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} out_sdv_682 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1540;
    havoc vslice_dummy_var_1541;
    havoc vslice_dummy_var_1542;
    havoc vslice_dummy_var_1543;
    call {:si_unique_call 2529} out_sdv_675 := SerialMemCompare(vslice_dummy_var_1540, vslice_dummy_var_1541, vslice_dummy_var_1542, vslice_dummy_var_1543);
    goto anon93_Then;

  anon93_Then:
    assume {:partition} out_sdv_675 != 1;
    goto L84;

  L84:
    call {:si_unique_call 2519} out_Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_745 != 0;
    assume out_Tmp_745 > 0;
    Mem_T.INT4[out_Tmp_745] := out_oldIrql_10;
    call {:si_unique_call 2520} sdv_KeAcquireSpinLock(0, out_Tmp_745);
    assume {:nonnull} out_Tmp_745 != 0;
    assume out_Tmp_745 > 0;
    out_oldIrql_10 := Mem_T.INT4[out_Tmp_745];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    call {:si_unique_call 2521} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 2518} out_sdv_676 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_676;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 2530} {:si_old_unique_call 1} out_sdv_669, out_sdv_670, out_sdv_675, out_Tmp_745, out_sdv_676, out_pCurDevObj, out_sdv_679, out_sdv_682, out_pExtension, out_oldIrql_10, out_Tmp_758, out_sdv_693, out_sdv_696, out_vslice_dummy_var_463 := SerialFindInitController_loop_L78(out_sdv_669, out_sdv_670, out_sdv_675, out_Tmp_745, out_sdv_676, out_pCurDevObj, out_sdv_679, out_sdv_682, in_Tmp_752, out_pExtension, out_oldIrql_10, out_Tmp_758, in_Tmp_759, out_sdv_693, out_sdv_696, in_Tmp_763, in_PConfig_1, out_vslice_dummy_var_463);
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    goto L_BAF_0;

  anon92_Then:
    assume {:partition} out_sdv_682 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} out_sdv_670 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} out_sdv_693 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L78(in_sdv_669: int, in_sdv_670: int, in_sdv_675: int, in_Tmp_745: int, in_sdv_676: int, in_pCurDevObj: int, in_sdv_679: int, in_sdv_682: int, in_Tmp_752: int, in_pExtension: int, in_oldIrql_10: int, in_Tmp_758: int, in_Tmp_759: int, in_sdv_693: int, in_sdv_696: int, in_Tmp_763: int, in_PConfig_1: int, in_vslice_dummy_var_463: int) returns (out_sdv_669: int, out_sdv_670: int, out_sdv_675: int, out_Tmp_745: int, out_sdv_676: int, out_pCurDevObj: int, out_sdv_679: int, out_sdv_682: int, out_pExtension: int, out_oldIrql_10: int, out_Tmp_758: int, out_sdv_693: int, out_sdv_696: int, out_vslice_dummy_var_463: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_669 == 0 || out_sdv_669 == 2 || out_sdv_669 == 1 || out_sdv_669 == in_sdv_669;
  free ensures {:va_keep} out_sdv_670 == 0 || out_sdv_670 == 2 || out_sdv_670 == 1 || out_sdv_670 == in_sdv_670;
  free ensures {:va_keep} out_sdv_675 == 0 || out_sdv_675 == 2 || out_sdv_675 == 1 || out_sdv_675 == in_sdv_675;
  free ensures {:va_keep} out_sdv_676 == in_sdv_676;
  free ensures {:va_keep} out_sdv_679 == 0 || out_sdv_679 == 2 || out_sdv_679 == 1 || out_sdv_679 == in_sdv_679;
  free ensures {:va_keep} out_sdv_682 == 0 || out_sdv_682 == 2 || out_sdv_682 == 1 || out_sdv_682 == in_sdv_682;
  free ensures {:va_keep} out_pExtension == in_pExtension;
  free ensures {:va_keep} out_sdv_693 == 0 || out_sdv_693 == 2 || out_sdv_693 == 1 || out_sdv_693 == in_sdv_693;
  free ensures {:va_keep} out_sdv_696 == 0 || out_sdv_696 == 2 || out_sdv_696 == 1 || out_sdv_696 == in_sdv_696;
  free ensures {:va_keep} out_vslice_dummy_var_463 == 0 || out_vslice_dummy_var_463 == in_vslice_dummy_var_463;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialStartWrite#0_loop_L14(in_Tmp_128: int, in_Tmp_129: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_sdv_113: int, in_OldIrql_4: int, in_NewIrp_2: int, in_Tmp_132: int, in_s_p_e_c_i_a_l_9: int, in_sdv_115: int, in_Tmp_133: int, in_sdv_116: int, in_Tmp_134: int, in_Timeouts: int, in_Extension_5: int) returns (out_Tmp_128: int, out_Tmp_129: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_sdv_113: int, out_OldIrql_4: int, out_Tmp_132: int, out_s_p_e_c_i_a_l_9: int, out_sdv_115: int, out_Tmp_133: int, out_sdv_116: int, out_Tmp_134: int)
{

  entry:
    out_Tmp_128, out_Tmp_129, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_sdv_113, out_OldIrql_4, out_Tmp_132, out_s_p_e_c_i_a_l_9, out_sdv_115, out_Tmp_133, out_sdv_116, out_Tmp_134 := in_Tmp_128, in_Tmp_129, in_s_p_e_c_i_a_l_7, in_FirstStatus_1, in_SetFirstStatus_1, in_UseATimer, in_IrpSp_1, in_sdv_113, in_OldIrql_4, in_Tmp_132, in_s_p_e_c_i_a_l_9, in_sdv_115, in_Tmp_133, in_sdv_116, in_Tmp_134;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 2531} out_Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    Mem_T.INT4[out_Tmp_129] := out_OldIrql_4;
    call {:si_unique_call 2532} IoAcquireCancelSpinLock(out_Tmp_129);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    out_OldIrql_4 := Mem_T.INT4[out_Tmp_129];
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)] != 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2543} out_sdv_113 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    assume {:nonnull} out_sdv_113 != 0;
    assume out_sdv_113 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_113)))] != 0;
    out_s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2544} out_sdv_115 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    assume {:nonnull} out_sdv_115 != 0;
    assume out_sdv_115 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_115)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_7], out_s_p_e_c_i_a_l_9);
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    out_Tmp_134 := Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)];
    assume {:nonnull} out_Tmp_134 != 0;
    assume out_Tmp_134 > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2545} SerialTryToCompleteCurrent#0(in_Extension_5, li2bplFunctionConstant570, out_OldIrql_4, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_5), 0, 0, 16);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    out_UseATimer := 0;
    call {:si_unique_call 2538} out_Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    Mem_T.INT4[out_Tmp_129] := out_OldIrql_4;
    call {:si_unique_call 2539} sdv_KeAcquireSpinLock(0, out_Tmp_129);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    out_OldIrql_4 := Mem_T.INT4[out_Tmp_129];
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    call {:si_unique_call 2540} sdv_KeReleaseSpinLock(0, out_OldIrql_4);
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2546} out_IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    out_UseATimer := 1;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_1)] == 4;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    havoc out_Tmp_133;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_TotalTime != 0;
    assume in_TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2535} out_sdv_116 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    assume {:nonnull} out_sdv_116 != 0;
    assume out_sdv_116 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_116)))] := 0;
    call {:si_unique_call 2536} out_Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    Mem_T.INT4[out_Tmp_129] := out_OldIrql_4;
    call {:si_unique_call 2537} IoAcquireCancelSpinLock(out_Tmp_129);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    out_OldIrql_4 := Mem_T.INT4[out_Tmp_129];
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    out_Tmp_128 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)];
    assume {:nonnull} out_Tmp_128 != 0;
    assume out_Tmp_128 > 0;
    goto anon33_Else;

  anon33_Else:
    call {:si_unique_call 2534} IoReleaseCancelSpinLock(out_OldIrql_4);
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    out_Tmp_132 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)];
    assume {:nonnull} out_Tmp_132 != 0;
    assume out_Tmp_132 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_132))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2533} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_5), in_NewIrp_2, 1, in_Extension_5);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon30_Then;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_2] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    call {:si_unique_call 2547} {:si_old_unique_call 1} out_Tmp_128, out_Tmp_129, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_sdv_113, out_OldIrql_4, out_Tmp_132, out_s_p_e_c_i_a_l_9, out_sdv_115, out_Tmp_133, out_sdv_116, out_Tmp_134 := SerialStartWrite#0_loop_L14(out_Tmp_128, out_Tmp_129, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, in_TotalTime, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_sdv_113, out_OldIrql_4, in_NewIrp_2, out_Tmp_132, out_s_p_e_c_i_a_l_9, out_sdv_115, out_Tmp_133, out_sdv_116, out_Tmp_134, in_Timeouts, in_Extension_5);
    return;

  anon34_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L75;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_1)] != 4;
    out_Tmp_133 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_113)))] == 0;
    call {:si_unique_call 2541} IoReleaseCancelSpinLock(out_OldIrql_4);
    goto L40;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)] == 0;
    call {:si_unique_call 2542} IoReleaseCancelSpinLock(out_OldIrql_4);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#0_loop_L14(in_Tmp_128: int, in_Tmp_129: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_sdv_113: int, in_OldIrql_4: int, in_NewIrp_2: int, in_Tmp_132: int, in_s_p_e_c_i_a_l_9: int, in_sdv_115: int, in_Tmp_133: int, in_sdv_116: int, in_Tmp_134: int, in_Timeouts: int, in_Extension_5: int) returns (out_Tmp_128: int, out_Tmp_129: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_sdv_113: int, out_OldIrql_4: int, out_Tmp_132: int, out_s_p_e_c_i_a_l_9: int, out_sdv_115: int, out_Tmp_133: int, out_sdv_116: int, out_Tmp_134: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_UseATimer == 0 || out_UseATimer == 1 || out_UseATimer == in_UseATimer;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_9 == 16 || out_s_p_e_c_i_a_l_9 == in_s_p_e_c_i_a_l_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation SerialStartWrite#1_loop_L14(in_Tmp_128: int, in_Tmp_129: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_sdv_113: int, in_OldIrql_4: int, in_NewIrp_2: int, in_Tmp_132: int, in_s_p_e_c_i_a_l_9: int, in_sdv_115: int, in_Tmp_133: int, in_sdv_116: int, in_Tmp_134: int, in_Timeouts: int, in_Extension_5: int) returns (out_Tmp_128: int, out_Tmp_129: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_sdv_113: int, out_OldIrql_4: int, out_Tmp_132: int, out_s_p_e_c_i_a_l_9: int, out_sdv_115: int, out_Tmp_133: int, out_sdv_116: int, out_Tmp_134: int)
{

  entry:
    out_Tmp_128, out_Tmp_129, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_sdv_113, out_OldIrql_4, out_Tmp_132, out_s_p_e_c_i_a_l_9, out_sdv_115, out_Tmp_133, out_sdv_116, out_Tmp_134 := in_Tmp_128, in_Tmp_129, in_s_p_e_c_i_a_l_7, in_FirstStatus_1, in_SetFirstStatus_1, in_UseATimer, in_IrpSp_1, in_sdv_113, in_OldIrql_4, in_Tmp_132, in_s_p_e_c_i_a_l_9, in_sdv_115, in_Tmp_133, in_sdv_116, in_Tmp_134;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 2548} out_Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    Mem_T.INT4[out_Tmp_129] := out_OldIrql_4;
    call {:si_unique_call 2549} IoAcquireCancelSpinLock(out_Tmp_129);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    out_OldIrql_4 := Mem_T.INT4[out_Tmp_129];
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)] != 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2560} out_sdv_113 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    assume {:nonnull} out_sdv_113 != 0;
    assume out_sdv_113 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_113)))] != 0;
    out_s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2561} out_sdv_115 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    assume {:nonnull} out_sdv_115 != 0;
    assume out_sdv_115 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_115)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_7], out_s_p_e_c_i_a_l_9);
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    out_Tmp_134 := Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)];
    assume {:nonnull} out_Tmp_134 != 0;
    assume out_Tmp_134 > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2562} SerialTryToCompleteCurrent#1(in_Extension_5, li2bplFunctionConstant570, out_OldIrql_4, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_5), 0, 0, 16);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    out_UseATimer := 0;
    call {:si_unique_call 2555} out_Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    Mem_T.INT4[out_Tmp_129] := out_OldIrql_4;
    call {:si_unique_call 2556} sdv_KeAcquireSpinLock(0, out_Tmp_129);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    out_OldIrql_4 := Mem_T.INT4[out_Tmp_129];
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    call {:si_unique_call 2557} sdv_KeReleaseSpinLock(0, out_OldIrql_4);
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2563} out_IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    out_UseATimer := 1;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_1)] == 4;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    havoc out_Tmp_133;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_TotalTime != 0;
    assume in_TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2552} out_sdv_116 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)]);
    assume {:nonnull} out_sdv_116 != 0;
    assume out_sdv_116 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_116)))] := 0;
    call {:si_unique_call 2553} out_Tmp_129 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    Mem_T.INT4[out_Tmp_129] := out_OldIrql_4;
    call {:si_unique_call 2554} IoAcquireCancelSpinLock(out_Tmp_129);
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    out_OldIrql_4 := Mem_T.INT4[out_Tmp_129];
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    out_Tmp_128 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)];
    assume {:nonnull} out_Tmp_128 != 0;
    assume out_Tmp_128 > 0;
    goto anon33_Else;

  anon33_Else:
    call {:si_unique_call 2551} IoReleaseCancelSpinLock(out_OldIrql_4);
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    out_Tmp_132 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)];
    assume {:nonnull} out_Tmp_132 != 0;
    assume out_Tmp_132 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_132))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_5 != 0;
    assume in_Extension_5 > 0;
    call {:si_unique_call 2550} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_5), in_NewIrp_2, 1, in_Extension_5);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon30_Then;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_2] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    call {:si_unique_call 2564} {:si_old_unique_call 1} out_Tmp_128, out_Tmp_129, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_sdv_113, out_OldIrql_4, out_Tmp_132, out_s_p_e_c_i_a_l_9, out_sdv_115, out_Tmp_133, out_sdv_116, out_Tmp_134 := SerialStartWrite#1_loop_L14(out_Tmp_128, out_Tmp_129, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, in_TotalTime, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_sdv_113, out_OldIrql_4, in_NewIrp_2, out_Tmp_132, out_s_p_e_c_i_a_l_9, out_sdv_115, out_Tmp_133, out_sdv_116, out_Tmp_134, in_Timeouts, in_Extension_5);
    return;

  anon34_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L75;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_1)] != 4;
    out_Tmp_133 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_113)))] == 0;
    call {:si_unique_call 2558} IoReleaseCancelSpinLock(out_OldIrql_4);
    goto L40;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_5)] == 0;
    call {:si_unique_call 2559} IoReleaseCancelSpinLock(out_OldIrql_4);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#1_loop_L14(in_Tmp_128: int, in_Tmp_129: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_sdv_113: int, in_OldIrql_4: int, in_NewIrp_2: int, in_Tmp_132: int, in_s_p_e_c_i_a_l_9: int, in_sdv_115: int, in_Tmp_133: int, in_sdv_116: int, in_Tmp_134: int, in_Timeouts: int, in_Extension_5: int) returns (out_Tmp_128: int, out_Tmp_129: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_sdv_113: int, out_OldIrql_4: int, out_Tmp_132: int, out_s_p_e_c_i_a_l_9: int, out_sdv_115: int, out_Tmp_133: int, out_sdv_116: int, out_Tmp_134: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_UseATimer == 0 || out_UseATimer == 1 || out_UseATimer == in_UseATimer;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_9 == 16 || out_s_p_e_c_i_a_l_9 == in_s_p_e_c_i_a_l_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



procedure fakeMain() returns (Tmp_949: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_0, io_complete_request_called, yogi_error, Mem_T.INT4, Mem_T.CurrentStackLocation_unnamed_tag_7, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, Mem_T.PVOID;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 0 || old(io_complete_request_called) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 0 || io_complete_request_called == 1;



implementation {:entrypoint} fakeMain() returns (Tmp_949: int, dup_assertVar: bool)
{

  start:
    call Tmp_949, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


